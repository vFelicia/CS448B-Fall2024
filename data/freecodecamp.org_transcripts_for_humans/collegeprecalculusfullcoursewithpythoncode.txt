With timestamps:

00:00 - this college pre-calculus course is
00:02 - different from other college
00:03 - pre-calculus courses like many other
00:05 - ones you will be learning all the
00:07 - concepts from an experienced University
00:09 - Professor but in this course Ed
00:11 - pertowski will also show you how to
00:14 - implement the pre-calculus concepts
00:16 - using python this course is for anyone
00:19 - who wants to learn pre-calculus but
00:21 - especially for those who are learning
00:23 - computer
00:24 - science welcome to pre-calculus with
00:27 - python so we're going to use python on
00:30 - code to do all your math and we're going
00:32 - to look at topics like triangles
00:35 - trigonometry solving triangles finding
00:38 - out all the sides and angles and area of
00:40 - different triangles even starting with
00:42 - just little bits of information we're
00:44 - going to look at a lot of the graphs of
00:47 - the trigonometric functions and one of
00:49 - the things with these graphs is they're
00:52 - repeating patterns so we can graph
00:54 - things like Tides or you know phases of
00:58 - the moon or something like that that a
01:00 - repeating pattern to it and we're going
01:02 - to look at bringing data in and
01:05 - especially data that might have
01:06 - repeating patterns and using
01:08 - trigonometry and other pre-cal tricks
01:11 - that you'll learn to analyze that data
01:14 - and being pre calculus all of this we're
01:17 - going to get uh a little bit further
01:20 - into math what are some things we can do
01:22 - with all these points how can we graph
01:23 - things how can we graph different sorts
01:26 - of functions and how can we solve um
01:29 - maybe some problems you haven't looked
01:30 - at solving yet and then lead up to
01:34 - things like sequences series limits and
01:39 - that brings you up into some things
01:40 - you'll be able to do in calculus so
01:43 - let's dive into it and let's take a look
01:46 - at pre-calculus with
01:49 - python so the first thing we're going to
01:51 - do is set up your collab you might
01:55 - remember this from before but remember
01:57 - click on new more
02:00 - and we're going to click on Google
02:02 - collaboratory and if you don't have that
02:05 - already you can go to connect more
02:07 - apps and you know it might not show up
02:11 - there and you click in here um you can
02:14 - search for uh
02:18 - collab
02:19 - and you know mine's already installed
02:22 - but you could click and then install it
02:24 - if that's the
02:26 - case
02:28 - so you know new but we're not going to
02:31 - do doc or anything more all these other
02:34 - things um Google app script by the way
02:38 - uh is more like uh this runs in all of
02:42 - your documents and sheets and everything
02:44 - and it's kind of based on JavaScript so
02:45 - that's also good but we're going to
02:47 - focus on the python and Google C
02:50 - laboratory there we go you create a new
02:53 - cab give it a title now what you're
02:55 - going to do is you're going to build
02:56 - this throughout the course um like we
02:59 - did in the algebra course so you're
03:02 - going to give this a name um you could
03:04 - even call it uh pre-cal if you
03:10 - want um there you go
03:14 - uh if you something like that um I think
03:18 - in the algebra course I just called it
03:19 - your notebook um and we're going to add
03:23 - to this throughout the course so what
03:26 - you can do is you know it just gives you
03:28 - this code block if you give
03:31 - text and then if you double
03:33 - click if you put uh the hashtag now in
03:39 - the code that would be a comment in here
03:41 - that's going to give it a a title for
03:44 - the table of contents
03:46 - so um you know I might have like uh get
03:50 - data because that's the first thing
03:53 - we're going to do and then you know I'm
03:55 - going to you know I'm going to put the
03:57 - code here um you know code here we'll
04:02 - we'll get to that later I just want to
04:04 - show you that um if I add other text
04:09 - here um you know next topic but notice
04:13 - I'm not putting the hashtag there so
04:17 - over here I go to the table of contents
04:19 - and get data is in there and we can find
04:24 - this so you see you can minimize that so
04:27 - within this topic you can have your two
04:29 - cells and that's what we're going to do
04:31 - we're going to build this throughout the
04:34 - course and yes the first topic is going
04:37 - to be how to get uh data into collab so
04:41 - that then we can do math to it so we'll
04:43 - look at that in in the next uh in the
04:47 - next
04:48 - video so let's take a look at some
04:51 - different ways
04:52 - to bring bring your data into Google
04:56 - collab so uh and all this we're going to
04:58 - have like a m Focus there's much more
05:00 - you can do with grabbing data from
05:02 - different places but our goal here is to
05:05 - get numbers get arrays of numbers and
05:09 - you know then we can do some math to it
05:11 - so I'm going to really focus on that in
05:12 - a few different ways yeah so maybe you
05:15 - have a CSV comma separated values you
05:18 - know that type of file um which can open
05:22 - in a spreadsheet you know like Google
05:23 - Sheets or Excel but you know you can get
05:26 - the CSV directly if you have that online
05:29 - I have this um you know a few of these
05:32 - examples here um yeah this guy um at
05:36 - Florida State he actually has this
05:39 - website that has you know a bunch of
05:41 - different examples so I picked a few of
05:42 - them here so you know we're going to
05:45 - import um all these things pandas uh
05:49 - import files IO all this and I usually
05:53 - like to Define whatever the URL is as
05:55 - its own variable that way you know you
05:58 - keep it organized all these different
05:59 - possib abilities here and then this code
06:01 - doesn't have to
06:03 - change so there we go that built-in
06:05 - pandas function read
06:08 - CSV and all these things I'm going to
06:11 - store them all as table one this and the
06:13 - other examples so that you get the idea
06:16 - that here's all the ways you can get
06:19 - this data in as a table and then now
06:22 - once we have a table we can do all kinds
06:24 - of stuff to it one of the things we're
06:26 - going to do
06:28 - is um
06:30 - uh that function table one. head The
06:33 - Heading and the first few rows this is
06:35 - usually you know you don't let's say
06:37 - you're getting this data and you don't
06:39 - know how big this table is you want you
06:42 - want the heading because you're going to
06:43 - use that for some other things and you
06:46 - know the first few rows you want to get
06:47 - a sense of what what that that data is
06:51 - um so the last line of code here you
06:56 - don't have to put print or anything if I
06:57 - just say table one. now if I just said
07:00 - table one without that head it'll
07:03 - actually just print out the whole table
07:05 - here you don't even need a print
07:06 - statement uh that that may be
07:09 - overwhelming so I just want table one.
07:11 - head and we're just going to see what
07:13 - this looks like
07:16 - here so this one was you know you know
07:20 - cities. CSV and we see we have latitude
07:23 - and longitude of different
07:26 - cities interesting but also just to show
07:28 - you that hey you can have like you know
07:31 - um numbers that you can work with maybe
07:34 - you want to import this into into some
07:36 - sort of uh you know I don't know
07:39 - plotting lines or something like that on
07:41 - on a map there we go so we have that I
07:44 - also want to show
07:47 - supposing and we've seen the heading so
07:49 - I'm going to comment that out now but
07:51 - let's run it instead table one.
07:55 - describe so we see it gives
08:00 - uh certainly all of your headings or
08:02 - your headers that's what you want and
08:05 - then with each of these you get that
08:08 - description of each column this is going
08:11 - to be really important now the count if
08:13 - you're counting something it's going to
08:14 - be integers but somehow it always puts
08:16 - this as a floating point with all these
08:18 - decimals so there we go now we we can
08:22 - look at the count and see first of all
08:24 - that's great all the row all the columns
08:26 - have the same number in them so I'm not
08:29 - going to have in data I like that but
08:31 - there you go mean standard deviation
08:33 - minimum maximum these are also really
08:35 - important minimum and maximum because if
08:38 - I want to think about graphing this or
08:41 - you know some sort of range I get an
08:42 - idea of what I'm looking at
08:45 - here so these are some of the things you
08:47 - know heading the
08:49 - describe I'm going to show uh this other
08:53 - one
08:54 - here so if I comment this out and if I
08:59 - have
09:00 - this um let's do this one um the people
09:04 - one actually maybe I'll skip this one
09:05 - the people one that's kind of NE it's
09:08 - there's like there's like four things in
09:10 - there all right um letter
09:16 - frequency um let's see we have this
09:23 - and I'm going to show you this just
09:26 - again just some tables as some examples
09:32 - here
09:34 - and from some document it has each
09:38 - letter and the frequency how often this
09:42 - came up and what percentage it was um
09:46 - there we go now we might know from stat
09:49 - other statistics that e would be the
09:51 - most common and we see that you know
09:54 - shows up 12.6% of the time which for one
09:57 - out of the 26 letters you know instead
10:01 - of showing up you know less than 4% of
10:03 - the time if it was all evenly
10:04 - distributed no e shows up 12.6% of the
10:08 - time so there you go just interesting
10:11 - and we could have this described now
10:13 - notice um if you have both of these I
10:16 - didn't comment out the heading or the
10:19 - describe see notice no print statement
10:22 - so just saying table one. head table
10:24 - one. describe it ignores this or it was
10:29 - going to do this but then when we had
10:31 - this it just bumped that out of out of
10:33 - the contention so even if you didn't
10:36 - comment that out you know without the
10:37 - print statement just saying that last
10:39 - line you know table one.
10:41 - describe that's the that's the thing
10:44 - it's going to run and so we see you know
10:48 - um frequency count um scientific
10:52 - notation even though it didn't need it
10:54 - so 2.6 time 10 to the first power is 26
10:58 - there we go mean
11:00 - median so just some interesting things
11:03 - so I just want to show you this so this
11:04 - is one way um that we can have uh you
11:09 - know the uh you know different URL and
11:14 - some of the key things we want just
11:16 - stored as a table and then something The
11:18 - Heading or the
11:21 - describe now you could also upload the
11:24 - CSV
11:26 - and this this is all the code you need
11:29 - it will give you you know this creates
11:32 - this dialogue um this files dialogue so
11:37 - then if we're going to call it
11:39 - uploaded so that you know if if I had
11:42 - this without the uploaded equals I mean
11:44 - it has a file dialogue but it might not
11:46 - do anything
11:47 - meaningful whatever you pick it's going
11:50 - to store it then whatever you pick it's
11:51 - going to store it as this variable and
11:53 - then that this is the way to get the
11:56 - file name so whatever you just selected
12:00 - to upload and you know it's going to
12:03 - pick that one um yes you're going to
12:05 - iterate through exactly one thing so
12:08 - that's why you can just say next so
12:10 - there's your file name and I'm saying
12:13 - that this is a CSV so that way I already
12:16 - know that I'm going to do read CSV um
12:19 - file name and once again what am I doing
12:22 - I I could actually just have this
12:24 - without the table one equals and again
12:26 - it'll do that but it's not going to
12:28 - really accompl anything I want to store
12:30 - it again as table one so now I have this
12:33 - you know uh data frame table and from
12:37 - that storing it is table one we can do
12:39 - all kinds of other
12:40 - things so pretty
12:44 - cool maybe I have a table on a web page
12:47 - and remember we see a lot of web pages
12:50 - um that have tables the couple examples
12:52 - I have are you know Wikipedia Pages you
12:54 - might have with you know a web page with
12:56 - a lot of tables so this one uh my
12:59 - importing you know
13:01 - pandas I'm going to read read HTML and
13:04 - I'm going to you know just knowing I'm
13:06 - not just reading a table or CSV I'm
13:08 - reading the website read HTML but this
13:12 - one I'm going to store it as a variable
13:14 - tables so that's going to be my list of
13:17 - tables and we
13:18 - see I do want to print this so this you
13:21 - can use this for exploratory situations
13:24 - you know there are how many tables all
13:26 - right well I just stored that as all my
13:28 - tables here
13:30 - and I can say now having already looked
13:33 - at this like I might not even need you
13:36 - know these last two lines at first I
13:38 - could just or these last three lines I
13:40 - could just print out this one you know
13:42 - how many tables do I have um I happen to
13:46 - already look at this I'm like oh table
13:48 - number four that's the one I that I want
13:50 - so you see now I'm just going to have
13:53 - this
13:54 - tables element number four from that
13:56 - array and again what am I doing stored
13:59 - it as table one and I'm going to print
14:00 - that out
14:02 - now there we
14:05 - go it happens to be different managers
14:08 - and the years and wins and losses I I
14:11 - just thought that was an interesting
14:12 - thing because we can have some uh names
14:16 - and dates fine but I also have a bunch
14:18 - of numbers I can use wins losses winning
14:21 - percentage there we go so you know that
14:25 - that's the one I decided to pick now
14:26 - notice um you know I picked this one um
14:30 - Wikipedia for the Philadelphia Phillies
14:32 - because the Phillies but you know I also
14:34 - put another one you know Cricut World
14:36 - Cup and similar similar data if you want
14:38 - to analyze that and now we can do some
14:43 - other things with this one also once I
14:45 - have this stored so let's say I run this
14:49 - block of code and now this table is
14:52 - stored as table
14:55 - one I can continue that and I don't have
14:58 - to go through like once you import that
15:00 - it's good for the session which can be
15:03 - hours or up to like 20 or 30 minutes of
15:07 - inactivity if you aren't running any
15:10 - code um you know this this cell or
15:13 - another one you know for like 2030
15:15 - minutes it still might stay there in you
15:18 - know the current memory if not um then
15:22 - you might have to go you know you leave
15:23 - and come back then you might have to go
15:25 - and run that other one but that that's
15:27 - this is good for anytime you're in
15:28 - reporting all this great now now I have
15:30 - all this I don't have to go through and
15:32 - do that again now we can say this and
15:36 - what I did is just you know as just to
15:40 - show some of the things we did I just
15:42 - calculated my own uh winning percentage
15:45 - just because so just to show you so I
15:48 - can have this table one because now that
15:50 - I have that I see all my headings so I'm
15:53 - going to take table one wins and table
15:57 - one losses so you see
15:59 - looking at this I can pick these table
16:04 - headers and this is going to be an array
16:08 - np. array because I'm going to I already
16:10 - imported numpy even in that previous
16:13 - code cell and I'm going to create a
16:16 - numpy array from there wins and losses
16:20 - and then what I did is I just made my
16:23 - own average equals wins divided by you
16:26 - know wins plus losses
16:29 - you could print that out you know I just
16:31 - put that in there but here's what else I
16:33 - did um I created
16:37 - another table column so now I have table
16:43 - one average this didn't exist before
16:46 - that equals this so I create this
16:49 - average which is you know if these are
16:51 - numpy arrays look at this I can make
16:53 - this other uh array of all the averages
16:58 - and then I can create a new
17:02 - column now that's there so I could print
17:06 - this and I could have like you know
17:08 - manager winning percentage and then now
17:10 - that I created that I can just add this
17:13 - other there we go I probably don't you
17:15 - don't really need the extra
17:17 - space
17:19 - average I can create this other column
17:22 - so now I'm going to print table
17:26 - one now
17:29 - first of all notice it did print it and
17:33 - you know really this create this python
17:35 - creating the averages it really just to
17:37 - you know this table was correct in in
17:40 - the winning percentages um the pyth
17:42 - python calculation just takes it to more
17:44 - decimal places but that's okay the other
17:47 - thing these subtle things notice this
17:49 - time I decided to use a print statement
17:51 - which I didn't before and just notice
17:54 - the subtle differences if if I do print
17:57 - this is what it looks like whereas this
17:59 - is what it looks like if I didn't use
18:01 - the print statement and early on I like
18:06 - doing this it tends to format it in a
18:08 - way that might be easier to read at
18:11 - first um but if I already know that it's
18:15 - going to be just a few columns I just
18:17 - might want to use the print St and it
18:19 - really just it it just displays it
18:21 - differently um you know that's that's
18:25 - all so pretty cool things you can do um
18:28 - I'm going to do another example here
18:30 - again reading you know URL um so
18:34 - importing everything um date time and
18:36 - calendar we're going to use that later
18:38 - but you see this one again I'm just
18:41 - going to here's the URL of you know
18:45 - again I just picked place you know Tides
18:47 - I think that's pretty interesting
18:48 - because you know goes up and down that's
18:50 - going to link with some stuff we do
18:52 - later with periodic data and now the URL
18:57 - um again my array of
19:00 - tables and we'll see this now if if I
19:06 - just comment these out you see because
19:08 - if you're doing something
19:10 - exploratory maybe you're not as familiar
19:13 - with this site or you're like oh how
19:14 - many I see it but how many of them are
19:16 - really formatted as tables we can run
19:21 - this and it'll say boom there's only one
19:24 - table there we go so knowing that
19:26 - there's only one table then I can go
19:28 - back to this this and say oh okay print
19:30 - table zero and again I'm using the print
19:33 - statement you could just put table zero
19:36 - without the print statement that's fine
19:43 - um there we
19:45 - go um I happen to know that you know
19:47 - this is not going to be too big to be
19:49 - overwhelming and then we have all this
19:52 - so Tides date time and the height in
19:56 - feet high tide low tide high tide low
19:58 - tide there we
19:59 - go and it should alternate I think yes
20:04 - it should alternate so there we go now
20:07 - this next line I may or may you know I
20:10 - don't necessarily need to do this I
20:11 - could have just kept tables zero element
20:15 - zero um but just to be consistent I'm
20:18 - just doing the same thing converting it
20:20 - to this variable table one because now
20:24 - um we can do anything you know if I had
20:26 - a bunch of other code you know boil
20:28 - plate code of all different things I
20:30 - want to do with table one now I now I've
20:33 - stored that as this variable so there we
20:35 - go and again table one.
20:37 - head so notice this I'm printing it and
20:41 - then when I do this without the print
20:43 - statement we'll see how it formats it a
20:45 - little bit
20:48 - differently oh because I already printed
20:50 - it here
20:52 - so um instead of scrolling down I'm
20:55 - going to comment this out
20:59 - there we
21:01 - go yep so there you know that's another
21:04 - way to print
21:06 - it now what I want to show you with this
21:10 - is continuing this
21:12 - example if I want to do some math to
21:15 - this again connecting with some things
21:17 - we're going to do later with periodic
21:18 - data and being able to graph this but I
21:21 - have a date and a time which is of
21:24 - course AM and
21:26 - PM so
21:28 - down here continuing that example I'm
21:31 - trying some different things I'm going
21:32 - to convert all this to uh all that date
21:37 - and time look at this I have you know
21:40 - the day the month the day and all this
21:43 - time I want to convert this to some sort
21:47 - of numerical data that I can graph so
21:51 - I'm going to take this time list date
21:54 - list and I'm going to create these
21:56 - arrays hours minutes days
21:59 - and convert this to Epoch time so I'm
22:01 - going to call it Epoch array and really
22:03 - that's going to count the minutes from a
22:06 - certain
22:07 - point um by default it goes to January
22:11 - 1st
22:13 - 1970 so you know that's a way to make
22:15 - you know compare times because you can
22:18 - convert everything to
22:20 - this and then you have everything
22:23 - consistent minutes since January 1st
22:26 - 1970
22:29 - so I'm going to go through this you know
22:31 - I have my time list and I'm I'm going to
22:35 - Loop through this for T and time list
22:37 - I'm going to split it I know it's a time
22:39 - so it's going to have the and then
22:42 - I'm going to take the first part convert
22:44 - it to an integer that's going to be the
22:45 - hour I'm going to take the second part
22:48 - and I know that that's minutes so I'm
22:50 - going to convert it to an integer but
22:53 - I'm going to take it just that first
22:55 - part because I I know we had AM and PM
22:57 - so I just want the first part as minutes
23:00 - but then if the last two digits say
23:07 - PM then um and this if statement I put
23:11 - the Co in and I did not make it on the
23:13 - second line that works um if you just
23:16 - have one little thing you can do it all
23:17 - in one line so my if statement here if
23:22 - the last two digits are PM or last two
23:25 - characters are PM then I'm going to add
23:28 - 11 into the hours
23:30 - um and there we go
23:34 - so I'm going to each time then I'm going
23:37 - to for each of those then I'm going to
23:39 - append the hour array append the minute
23:42 - array um I and then you could do this I
23:45 - commented it out here but you could
23:46 - print it out to then show okay what do
23:49 - my times look like just to see that it's
23:51 - right that it is doing what you want it
23:53 - to do so a lot of times when you're
23:55 - trying some things you know let's say
23:57 - exploratory
23:59 - you can print things out to test it out
24:01 - and then I'm going to go to date but now
24:03 - notice I'm going to have this date well
24:07 - I wanted to skip over the I I just want
24:11 - the day um and this is just because for
24:15 - this particular data I'm just going to
24:17 - grab everything that I already know is
24:19 - in the same
24:21 - month so that that really is why so I'm
24:24 - skipping over the day of the week I'm
24:26 - skipping over the all August so I'm
24:28 - skipping over the next three characters
24:29 - and I just want starting at character 8
24:31 - to the end of the array and then that's
24:35 - going to be just the number so then I'm
24:38 - going to cast it as an integer and
24:39 - append it to
24:41 - that and then now I have my hour and my
24:44 - minute my day I'm going to store this
24:47 - you
24:48 - know in the range so in range of the
24:52 - length of that so all of these are the
24:56 - are the same so I I'm just I just picked
24:57 - one list and the length of that so
25:02 - now um see in in that range so notice if
25:07 - I say d in date list it's going to D is
25:09 - going to be each element in that date
25:12 - list but C in range I don't want each
25:15 - element I just want the number how long
25:17 - this is so now I'm going to convert this
25:21 - to a date
25:23 - time so you know I it's going to be this
25:26 - year this month
25:29 - and then each one day hour minute and
25:33 - then seconds I'm just going to make it
25:35 - all0 seconds because now I have that T I
25:42 - can uh convert that to a Time
25:45 - topple calendar. time GM which is
25:49 - grenage meantime and cast as that as an
25:52 - integer so
25:54 - this this line here then converts all
25:57 - that to an Epoch
25:59 - array pretty cool um we'll print that
26:03 - out but we'll get to that in a second
26:05 - and then I just want the the heights to
26:07 - float numbers so um you know table one.
26:11 - feet it's all height and
26:12 - feet um uh so that's why I call it f
26:16 - array because H was already done for
26:18 - hours so I can't use H for height so f
26:21 - for feet and I'm going through each of
26:24 - those and I'm G to append
26:29 - this so the first four parts so I'm
26:33 - taking that substring which is just the
26:35 - heighten feet or the first three 0 1 two
26:38 - three um because they all work out to
26:41 - three characters in that array so it
26:43 - works
26:44 - out I'm going to get those three which
26:46 - will be the number cast it as a float
26:49 - because they all have decimals appended
26:51 - to
26:52 - that so just showing you some some of
26:55 - these acrobatics that you can do hey you
26:58 - have a table I I I know I have numbers
27:00 - in here and I know it's numbers I want
27:02 - to work with and I'm going to print out
27:04 - that array so just to show you what this
27:06 - looks like so you see that first one is
27:10 - going to be the array of times um there
27:15 - we go and the next one is going to be
27:18 - the array of heights and once we have
27:20 - these two arrays you can do anything
27:23 - with them you can bring them into um you
27:26 - know some sort of graphing utility you
27:27 - can you know graph and do all kinds of
27:29 - things with that so you know pretty cool
27:33 - um we'll get to that other graphing
27:35 - later but I this is really all about
27:37 - getting this data into some sort of math
27:40 - form getting it from different places
27:42 - and into some sort of math form now I
27:44 - have two arrays of numbers that I can do
27:48 - math to I can graph or
27:52 - whatever you may have data in your
27:55 - Google
27:56 - spreadsheet um there we go and this is
28:01 - another one I you you you need to
28:03 - authenticate um you know you mount you
28:06 - can mount your Google Drive um so I have
28:10 - this um this Google code snippet if
28:13 - you're looking in Google cab down on the
28:15 - left hand side it you know it looks like
28:18 - brackets you'd have like an HTML or XML
28:20 - tag in you know you can click on that
28:24 - and it'll bring up various code Snippets
28:26 - you can search through them and then
28:28 - when you pick one you can even insert it
28:30 - like right in here um I inserted I I
28:33 - modified a tiny bit uh just to simplify
28:37 - what I wanted to do but there we go so
28:39 - you can get these code Snippets
28:41 - authorizing this um all these Imports
28:45 - you know and and you know the code
28:48 - Snippets help because see this like
28:50 - creds comma space
28:52 - uncore um equals default these are the
28:55 - things you know I I I would never think
28:57 - of that on the off the top of my head
28:59 - and there we go so I'm going to
29:01 - authorize this and I'm going to open um
29:04 - I just I I I made a silly uh spreadsheet
29:08 - with just a few lines comparing file
29:10 - types so that's the name of it and then
29:13 - do sheet one there we go
29:17 - um but all I'm doing is authorizing this
29:21 - and then I'm storing this first sheet in
29:24 - here I open that file that I wanted
29:27 - first sheet and I'm ref in as that value
29:29 - variable work worksheet notice I didn't
29:31 - have print statement nothing else
29:33 - happened but now I can continue that and
29:37 - now it's already stored there as that
29:39 - variable worksheet and I can keep going
29:40 - back to that and working with that doing
29:42 - different things and I don't have to
29:44 - like make that connection with the
29:45 - Google drive again every time you know
29:48 - um this and you know if you're ever
29:51 - doing things with Google app script the
29:53 - fewer calls to the Google Drive the
29:57 - better so if you can like call at once
29:59 - and get everything you need and then
30:01 - work from there that's that's great so
30:04 - you know now I have worksheet and so I'm
30:06 - going to use that variable worksheet
30:08 - doget all values and I'm going to store
30:10 - that as rows so this is pretty cool I
30:14 - can print rows um if if you know what
30:17 - your uh you know how you like it's your
30:21 - it's your Google sheet and you know how
30:23 - how much stuff this is and it's not too
30:26 - much you might even just say print r and
30:28 - just print all of it you can do that
30:31 - um and then I'm going to print the
30:34 - length and here's what I'm doing oh what
30:37 - I'm going to do is I
30:40 - will uh print
30:43 - this uh print the length of the rows it
30:47 - it it it's just a a silly sheet but it's
30:49 - fine so I'll print the rows how many and
30:53 - then now I I just want what I did is I
30:57 - made
30:58 - uh the third column the other ones have
31:00 - words the third column has numbers in it
31:02 - so um I'm going to create this integer
31:05 - array
31:07 - and number in range all right so the
31:10 - length of this and what it does is even
31:13 - though you have this spread sheet each
31:14 - row is its own element so now I have um
31:20 - you know I can say the length of the
31:21 - rows
31:23 - here and that's going to that's going to
31:26 - be how many rows even though each row
31:28 - will have an element so it's a it ends
31:29 - up being a two-dimensional array here
31:32 - this rows when I say get all values it
31:33 - ends up being a two- dimensional array
31:35 - rows
31:36 - columns okay so um and I have a header
31:40 - so my range I I want to started it at
31:44 - one because zero would be the
31:46 - header all right so now I have that
31:50 - range uh and I'm just going to go
31:52 - through these numbers I know they're
31:53 - numbers so I just call the variable numb
31:56 - so here's what I'm going to do remember
31:58 - it's a two-dimensional array so for each
32:00 - one I know this is the third row so I
32:04 - want the numb is what row it is and then
32:07 - I know or it's the third column so I
32:09 - know it's what row is numb that's what
32:12 - we're We're looping through and I know
32:14 - it's the third column so that's why this
32:15 - is a two remember start at zero so there
32:19 - we go I know that I'm going to take the
32:21 - you know going down that column you know
32:24 - each row and then I know the numbers but
32:28 - I need to make sure I cast it as an
32:29 - integer and then I'm going to append
32:31 - this to the integer array so there we
32:34 - go
32:36 - and there we go I so again ways to get
32:41 - to this and now once again I have an
32:44 - integer array now what you could have is
32:48 - you could you know you could have a
32:50 - length of rows and it's just a
32:53 - sequential count so um you could store
32:57 - this
32:59 - um you know as you know X or something
33:03 - you know you could you could always make
33:05 - this you know like x equals um
33:12 - length you know you could you could
33:14 - always have a a a variable like this x
33:16 - equals the length of
33:18 - rows and that way you know you know it's
33:21 - sequential and you could you could count
33:23 - up through that as some index or
33:25 - something like that and then now you
33:27 - have this array of all these values in
33:30 - each row and and you could pair them up
33:33 - then okay you know plot
33:36 - um different things you can do so again
33:39 - ways to get data in from different
33:42 - places and you know select hey I might
33:45 - have columns with words in it um you
33:47 - know this course we're talking about
33:49 - math so we're going to skip those but
33:51 - even when they have numbers I need to
33:52 - get it in the right form usually some
33:55 - sort of array and then I can do some
33:56 - other stuff with it
33:58 - and I'm not going to go through all the
34:00 - different file types but just as an
34:02 - example you can let's say if it was you
34:05 - know XLS with or without that X so all
34:09 - our Excel files if that's online as a
34:13 - URL and you can work this you know
34:16 - sometimes people upload it to their
34:17 - website some people have it as something
34:20 - on
34:21 - GitHub um all that it all works you can
34:25 - see if it was just uploaded from your
34:27 - local drive you can use the other ex the
34:29 - previous example here of of um just
34:33 - uploading a file from your
34:35 - computer but if it's anywhere
34:37 - online um there we go it's an Excel file
34:42 - and just knowing that I'm going to do
34:44 - this pd. read
34:47 - Excel and once I have that now it's
34:50 - stored as a sheet and I can you know
34:52 - print it out or display the heading the
34:55 - header so I just wanted to show you this
34:58 - this works out as long as you are
35:00 - pointing to an Excel file there you
35:03 - go um because if it was pointing to um
35:09 - actually I this I this this this would
35:11 - work for a Google sheet too um but also
35:15 - you can use that URL as well if it's a
35:17 - public Google sheet that would work too
35:19 - so just all these different file types
35:22 - you know how you can get um you know all
35:25 - this all this different data in Google
35:28 - Drive and as as you make this you know
35:31 - from different things you know you can
35:33 - even make them all headers so you have
35:36 - some examples of you know you you can
35:39 - have a table of contents for all the
35:41 - different ways that you can bring this
35:44 - in and remember table of contents you
35:48 - know if you're putting this in there you
35:49 - put the hashtag which in the python code
35:52 - would be a comment but in here it would
35:54 - mark it as a as a head as a headache so
35:59 - some things you can do getting data from
36:02 - different places bring it into bring it
36:04 - into collab and now all different ways
36:07 - get a table um you can do some a lot of
36:09 - things with it get different arrays and
36:12 - then we can do some math to it so now
36:14 - let's get into some of the math that we
36:15 - can do with all this stuff so we'll take
36:17 - a look at that stuff next so I just want
36:19 - to briefly talk about drawing lines on
36:22 - the graph even when there's no function
36:26 - really but you can get a bunch of points
36:29 - and you can write the code so most of
36:31 - this we're going to talk about with the
36:33 - code but just to give you the
36:35 - perspective you could have you know a
36:36 - few points and you could write the code
36:39 - to rather than develop a function say
36:43 - hey I'm going to draw from this point
36:46 - and it's line to this point line to this
36:49 - point line to this point line to this
36:53 - point and you can finish it up and close
36:58 - it out and go back to the first point
37:01 - and make a shape or you could create all
37:04 - these other drawings or shapes that you
37:07 - want um whether it be to make art or
37:10 - whether it be to represent data that is
37:12 - definitely not a function so there's a
37:14 - lot of different things you can do it
37:16 - doesn't have to be a math function but
37:18 - there's still some code you can do to
37:20 - get data from a list or something and
37:22 - we'll look at that and you know
37:25 - represent it in different ways and
37:27 - sometimes times maybe you can draw lines
37:29 - and uh represent different shapes that
37:31 - way and we'll look at some applications
37:33 - of that so let's look at the
37:36 - code so let's look at drawing lines with
37:40 - code and sometimes on like introductory
37:43 - learn how to write code uh activities
37:46 - you'll find things but this is the full
37:48 - code that also work things like this but
37:50 - this is the full code that works behind
37:51 - the scenes so we're going to import a
37:53 - few things um I'm going to import uh map
37:57 - plot library and I'm going to import
37:59 - this other one um from within the same
38:02 - Library
38:04 - path and then again from the same
38:07 - Library patches and we'll see how they
38:10 - come into play so I still want to set up
38:13 - an array or two arrays one of them an
38:16 - array of each
38:19 - vertex and then I'm going to create
38:22 - another array of all the different steps
38:24 - I'm going to do so if I wanted to
38:28 - just do this one at a time I could do
38:31 - this here's here would be my starting
38:32 - point I'm going to take this vertex
38:34 - array verts do append and I'm going to
38:37 - append
38:38 - this 0 0 notice um I do use decimal
38:42 - places um I I want to make it uh
38:46 - floating Point numbers rather than
38:48 - definite integers um so I have this you
38:53 - know I'm going to append this X and it's
38:56 - going to end up being an X x y
38:57 - coordinate notice the double parentheses
38:59 - and everything and then to each step
39:03 - steps. a
39:05 - pen that's going to be the first step
39:07 - it's going to be path. move to and so
39:11 - the first step is going to be I'm going
39:13 - to move to this point 0
39:17 - 0 and I could just continue
39:21 - adding I'm going to add a line now verts
39:24 - do append to2 so now this is my second
39:28 - point and notice this one is path line
39:31 - to so move to will give you the path you
39:35 - know that's where essentially a starting
39:37 - point without Drawing the Line and then
39:40 - line two will go from
39:43 - that point to this one with with a
39:49 - line and this is where I could keep
39:51 - going and you know I could always
39:55 - put you know more here as many lines as
39:59 - I
40:00 - want but I'm just going to show this
40:02 - simple I'm going to start here draw a
40:05 - line to this
40:06 - point all right and then now here's the
40:09 - graph uh as
40:12 - before um set up the graph I'm going to
40:16 - set up the Axis and for here you know
40:17 - five in every direction that's going to
40:19 - be fine for what we're doing so this is
40:21 - where we get I'm going to create this
40:23 - variable called
40:24 - path and what it is is this python on
40:28 - function path and it's going to take
40:30 - these arguments of these two arrays
40:32 - verts
40:33 - steps
40:35 - so you know that function I'm going to
40:37 - store as the variable path because then
40:39 - I'm going to use that agre this other
40:41 - variable called patch and then it's
40:43 - going to work on this python function
40:50 - patches. path patch and then this
40:54 - variable path is what in the
40:58 - parentheses so probably easier to write
41:01 - the code than to say all this path path
41:04 - patches patches path P patch
41:08 - path anyway so
41:12 - then on my other variable axe for axis
41:16 - I'm going to add patch that python
41:20 - function and then patch so we see create
41:23 - the vert create the two arrays and they
41:26 - go into this function for this variable
41:29 - then I'm going to use this variable in
41:31 - here to create this variable and I'm
41:34 - going to use that variable in here when
41:37 - I'm going to add them to my Axis and
41:39 - then I'm going to show
41:41 - it so if you were going to draw lines it
41:45 - it really is good to start out with your
41:46 - array you know you have your Imports and
41:49 - your arrays that won't change and then
41:52 - all this however many points you want
41:55 - you can just add add them all right here
41:57 - and then all this graphing code doesn't
42:00 - have to change so this is just going to
42:02 - be a simple line when we run this there
42:04 - we go I didn't even draw XY AIS Lines
42:08 - Just 0
42:10 - 02 22 draw this
42:14 - line all right if I wanted to put more I
42:19 - could and here's what I'm going to do
42:23 - I'm going to append this
42:29 - and if I drew another line so maybe I'm
42:34 - going to call this
42:35 - two -2 I'll go draw a line down to that
42:39 - one and then I'm going to do one more
42:42 - thing which is going to
42:50 - be I'm going to go back to 0 0 my
42:55 - original point
42:58 - and so that gets its own
43:02 - special close
43:05 - poly
43:07 - function so I can move the point and
43:10 - then draw you know start there line to
43:13 - that line to that and then close the
43:15 - poly going back to the
43:17 - original and you see as many different
43:19 - points as I want to create here I'll run
43:24 - this and there we go boom boom boom
43:28 - makes a
43:30 - triangle all right good times
43:33 - and there we have it so I'm going to
43:36 - show you a couple things that we can add
43:38 - and tweak to this you can definitely do
43:40 - these all each step and sometimes that
43:43 - helps because then you can really just
43:45 - picture you know that what lines up you
43:49 - know this point and then going line to
43:51 - that point this point close
43:53 - poly but you can
43:57 - create your arrays right out of the gate
44:00 - and here I'm G to create my array verts
44:03 - and you see just each point in this
44:08 - array and then I just call this one
44:10 - codes but here's the array of steps and
44:13 - you just have to me uh uh keep track of
44:16 - lining these up also notice um I can
44:20 - continue it on one line like I did with
44:21 - verts or I can hit enter and then just
44:25 - put them in line here here comma and
44:28 - then on the next line and put the array
44:32 - here which it actually is just fine to
44:35 - have a comma at the very end of this
44:36 - array that works out so then we just
44:40 - match it up you see move
44:42 - to line that first point line two that
44:47 - second point and then you just keep
44:48 - track line two line two line two close
44:53 - poly and I should have one 2 3 4 5 6 7 1
45:00 - 2 3 4 5 6 7 and that works out so just
45:07 - another way I could Define all these
45:09 - especially if I know what points I have
45:12 - this might this method might be
45:15 - easier and I'm still going to use that
45:18 - same code um B see vers and then codes
45:22 - because I need that and
45:25 - then I stop the variable here for patch
45:29 - but I can add some other things you see
45:32 - I can change the face color and I can
45:34 - change the line
45:36 - withd so let's take a look at that now
45:40 - it was a light blue but if I just say
45:42 - blue
45:44 - here it makes it this nice uh royal blue
45:48 - and the line width you see it makes it a
45:51 - little bit
45:53 - thicker pretty cool so I mean you know
45:57 - let your artistic mind go and see what
46:01 - you know different things you can create
46:04 - just by drawing lines and you know
46:08 - running it this way pretty cool things
46:11 - and you know this is again just
46:13 - scratching the surface you can build
46:14 - upon this and do all kinds of all kinds
46:17 - of cool things with this so I I'll leave
46:19 - that up to your
46:21 - imagination right now we're going to
46:23 - talk about trigonometry and trigonometry
46:26 - this long word we can break it down into
46:28 - three parts so try means three gone
46:34 - means shape you know like polygons and
46:37 - metry means measurement so metric would
46:41 - make it an adjective like the metric
46:42 - system but with a Y we make it a noun so
46:45 - trigonometry and these old Greek words
46:47 - we read them backwards so it's the
46:50 - measurement of shapes with three sides
46:53 - triangle class as as many of my students
46:56 - mentioned so let's uh focus on triangles
47:00 - with right angles so our right triangles
47:03 - we will get even beyond the right
47:05 - triangles so trigonometry applies to a
47:07 - lot of things and we really can break
47:10 - down anything into triangles any other
47:12 - shape can be made up of triangles so
47:14 - that's why it becomes so uh Central to
47:17 - figuring out a lot of other things and
47:20 - with that we're going to start with
47:22 - right triangles so the reference angles
47:25 - here and the reference side it's all
47:27 - these relationships to the sides and the
47:30 - angles so if I call this angle a then
47:34 - this side is a cross from so it's the
47:37 - opposite side so instead of saying a
47:39 - cross from we're going to say
47:40 - opposite kind of mean the same thing but
47:43 - the these are the uh this is the
47:45 - notation we usually use in in
47:47 - trigonometry so if that's the opposite
47:50 - side now then this would be the adjacent
47:53 - side but notice they're adjacent meaning
47:56 - meaning next to but notice from this
47:59 - angle I have two sides that are next to
48:01 - it but the hypotenuse is always its own
48:03 - thing and the hypotenuse is the you know
48:06 - the longest side it's across from the
48:08 - right
48:09 - angle so since I have two sides that are
48:13 - adjacent to angle a but one of them is
48:14 - the hypotenuse so then the other one I'm
48:16 - just going to call the adjacent side so
48:19 - now I have from angle a the opposite
48:21 - side the adjacent side and the
48:24 - hypotenuse now again these are reference
48:27 - to how they relate so if I was talking
48:29 - about angle b
48:32 - instead then this side is no longer the
48:36 - adjacent side and that's no longer the
48:39 - opposite side then if it's angle B this
48:43 - is the adjacent
48:46 - side and then this is the opposite
48:52 - side because now this one would be
48:54 - across from angle B this one would be to
48:57 - and then hypotenuse is still its own
48:58 - thing now this matters because in
49:02 - figuring out a lot of things about
49:03 - triangles we set up these ratios
49:05 - relating to the sides and the angles so
49:08 - we're going to talk about three main
49:10 - ratios and then um later on we'll add
49:13 - three more um which are you know the
49:16 - inverse the the reciprocal of these
49:18 - three but these three main ratios and
49:23 - you you'll we'll see as we talk more
49:25 - about uh trigonometry how this comes up
49:27 - in different ways so we have the
49:33 - sign is our first
49:35 - ratio and the sign of whatever Angle now
49:40 - officially I'd put it in parentheses
49:42 - because this is a function but you'll
49:45 - see a lot of times you know in the
49:47 - notation people might skip the
49:49 - parenthesis um certainly as you get into
49:52 - writing the code we need the parentheses
49:53 - again this is a function so the sign of
49:56 - whatever angle is the ratio of the
50:00 - opposite side over the hypotenuse and
50:03 - I'm just going to abbreviate those here
50:05 - so that's the so when I say the sign
50:07 - it's the relationship so if I was
50:09 - talking about the sign of angle B you
50:11 - know whatever the measure of this
50:13 - opposite side divided by whatever the
50:15 - measure of the hypotenuse and that's
50:17 - this ratio and if that's a certain angle
50:21 - no matter how big the triangle is that
50:24 - ratio you know the sign of 30° a sign of
50:27 - 35° it's the same each time you know you
50:31 - can plug that into your calculator s of
50:33 - 35° and that's a
50:36 - constant so I get that relationship the
50:39 - opposite over the hypotenuse and notice
50:41 - remember the hypotenuse is the longest
50:42 - side so the opposite side's always going
50:44 - to be shorter um you know we're going to
50:46 - have these decimal numbers um usually
50:48 - really long decimal numbers but we may
50:50 - round it to like four decimal places and
50:52 - we'll also look at some other patterns
50:54 - in that
50:55 - too so the other relationship is the
51:01 - cosine of whatever angle I'm just going
51:04 - to call it angle B for now and the
51:06 - cosine is the adjacent side over the
51:12 - hypotenuse so that's the coine ratio the
51:15 - adjacent side over the hypotenuse and
51:18 - then the
51:24 - tangent is the relationship of the
51:26 - opposite over the
51:31 - adjacent so now with these three ratios
51:35 - one of the things we might notice is
51:39 - that if I you any now having all three
51:42 - of these depending on what situation I
51:44 - have or what angles or sides I might
51:46 - know or not know I can use one of these
51:48 - three it you know that that it'll apply
51:52 - so that's why it's good to have these
51:53 - three the sign the cosine and the
51:55 - tangent and later on we'll look at like
51:58 - how they all uh where we got these
52:01 - numbers from how they all
52:03 - relate so a lot of things that we're
52:05 - going to do in in uh trigonometry we'll
52:08 - we'll learn one thing and then that'll
52:09 - come back around again when we learn the
52:13 - next thing oh it relates to this it's
52:15 - it's very like you know it's not linear
52:18 - it it's very uh circular and all kinds
52:22 - of you know hyperlinks in your knowledge
52:25 - uh when we talk about trigonometry so uh
52:28 - it you'll find it to be a pretty
52:30 - interesting subject so I have these
52:32 - three you know um ratios how can we
52:35 - remember these ratios well there's that
52:38 - you know s opposite over hypotenuse
52:40 - cosine adjacent over
52:42 - hypotenuse um tangent so and also
52:45 - remember it is the same ratio whatever
52:47 - angle I'm talking about so if instead of
52:50 - angle B I was talking about angle
52:54 - a you know
52:57 - whatever you know it's the s or cosine
52:59 - of that angle and then you know that's
53:02 - that's still the relationship so how can
53:05 - we remember these there's one um
53:08 - interesting way that a lot of people
53:10 - found so s is opposite over
53:15 - hypotenuse so cosine with a big c is
53:19 - adjacent over
53:21 - hypotenuse and then tangent with a big T
53:25 - is opposite over adjacent so if we write
53:28 - it like that then uh and a lot of people
53:32 - then pronounce this as
53:35 - soaa it's catchy because then you oh
53:38 - soaa so you know this is the soaa is the
53:42 - numic device that you know Le leads us
53:45 - through um our journey of
53:48 - trigonometry and so we follow soaa and
53:52 - that reminds us that s cosine tangent
53:55 - and what the ratios are
53:57 - because they're going to be very useful
53:59 - and we're going to look at how we can
54:01 - use these ratios to figure out some
54:04 - things um if I don't know an angle if I
54:07 - don't know a side I can I can figure
54:09 - this out and that's what we're going to
54:11 - do next all right so here's how to draw
54:14 - the
54:14 - triangle in code and I want to show you
54:17 - this because it's going to be relevant
54:20 - we'll use this as a display and we you
54:24 - might remember that P plot we'll import
54:28 - that um import display import math for
54:32 - some of the things we use and time
54:34 - because I comment this out here but you
54:38 - could delay for like 1 second you know
54:42 - the drawing of each line to make it more
54:43 - dramatic so I just want to include that
54:45 - as a
54:46 - possibility and remember we set up the
54:49 - subplots
54:51 - here and I'm going to set this axis this
54:54 - is how I decided to set set it up for
54:56 - this
54:57 - triangle the x value goes from -2 to 12
55:02 - the Y value goes from -2 to
55:04 - 8 and I'm not going to draw any other
55:07 - lines to show The X and Y AIS but that
55:10 - just seems to be a decent size
55:11 - window here
55:14 - then I will display this text which is
55:18 - the letter A I'll display that at this 0
55:22 - 01
55:23 - and here I'm going to draw a Red Dot at
55:27 - that point well what does that mean I'm
55:28 - drawing the points for my triangle so
55:31 - this line draws one one line for the
55:34 - triangle from X from the remember these
55:38 - are the X values as an array these are
55:40 - the Y values so the line goes from 1 one
55:44 - to
55:45 - 71 and it's going to be blue then we go
55:49 - from 71 to 74 that vertical line is
55:53 - going to be blue and back to that
55:56 - original 11 and then to the other point
56:00 - 74 that line will be blue and we'll
56:03 - display it like I said don't you know
56:06 - you could draw each of these lines um
56:10 - and pause and make it dramatic also the
56:14 - fact that I'm drawing a bunch of these
56:15 - lines python wants to draw each of these
56:18 - as a
56:19 - different uh grid Al together so every
56:23 - time I do that that clear out put inight
56:27 - um doing that after each line here um
56:32 - enables it to uh not have multiple
56:35 - graphs so then I'm going to have the
56:38 - text there we go adjacent side the text
56:42 - opposite side and then we see you know I
56:44 - just tinkered with this and this was a
56:45 - good place to put it text that say
56:48 - hypotenuse
56:51 - so when we draw this then it ends up
56:54 - drawing our triangle here so we see a
56:57 - DOT that I'm going to label angle a and
57:01 - because this is angle a this is the
57:03 - adjacent side it's next to it now the
57:05 - hypotenuse is also next to angle a but
57:08 - the hypotenuse is always its own thing
57:10 - as we were talking about this other uh
57:13 - complimentary point or angle that's B
57:17 - and the right angle would be C so from a
57:21 - we have the adjacent and then opposite
57:22 - because it's on the opposite side of the
57:24 - triangle just as a way to show you that
57:27 - you can draw the triangles with code um
57:29 - we'll we'll Tinker with that and uh draw
57:31 - some other triangles too so that'll be a
57:33 - good
57:34 - basis so what can we do with this we can
57:38 - um get the S cosine and tangent
57:40 - functions for each of those angles now
57:44 - we'll talk about radians in more detail
57:47 - um it's another way to measure angles um
57:49 - related to you know one radian is about
57:53 - 50 something degrees because it's the
57:56 - measure of the radius along the outside
57:59 - of the triangle we'll we'll talk about
58:01 - that in more details but the short
58:04 - answer here is that all of our trig
58:07 - functions use radians so if I want my
58:10 - angle in degrees then inside my trig
58:14 - function I just have to convert it to
58:16 - radians and so that's why I imported
58:18 - math and we'll do math.
58:20 - radians so math. cosine but
58:23 - it radians um tend to be a lot lower
58:26 - numbers so you'd get your answer and you
58:28 - that doesn't make any sense so um I just
58:32 - for now we'll do the angle in degrees
58:35 - and convert it to radians inside there
58:38 - so what I have is there we go U given
58:41 - that angle and you know change the angle
58:43 - we can just change this one variable
58:45 - there and we'll calculate the
58:49 - sign
58:52 - and I switch these for some reason the S
58:57 - the cosine and the tangent so I just
59:00 - saved them as these variables s c and T
59:03 - so the S cosine and the tangent and then
59:05 - we're going to round it four decimal
59:08 - places is good most of these will be
59:11 - really long decimals if you let it go so
59:13 - four decimal places is good and then
59:16 - we're going to calculate the sign and
59:18 - print the
59:19 - sign
59:21 - cosine and
59:23 - tangent so looking at that angle a and
59:27 - it'll print out
59:29 - s and I pick 30° so the S of 30° is 0.5
59:33 - cosign is
59:35 - 866 which this one actually works out to
59:38 - something else a little bit more elegant
59:41 - if it wasn't a decimal but we'll get
59:42 - we'll get to that later too and the
59:45 - tangent is
59:47 - 5744 again four decimal places that's
59:50 - good so there we go
59:53 - and once we're talking about doing Cod
59:56 - code with this hey maybe I have this one
59:58 - angle but I also want the complimentary
60:00 - angle so you remember I didn't label it
60:04 - up here but the other angle that's not
60:06 - the right angle would be angle B and so
60:10 - the complimentary
60:12 - angle once I know angle a then B is just
60:15 - 90 minus
60:17 - a and if I want both then I'm going to
60:20 - change my variables here sa a CA and ta
60:24 - for S cosine and tangent
60:26 - [Music]
60:28 - and I just usually remember them or
60:31 - think about them in the same order
60:34 - so you really don't have
60:37 - to but there we go so s cosine tangent
60:43 - and then I'm going to print it out s
60:46 - cosine
60:50 - tangent and
60:52 - then I put this down here so the S
60:55 - cosine tangent of
60:56 - B and that's what we'll have
61:00 - S
61:04 - cosine and tangent of
61:07 - B and we'll print it out the S cosine
61:10 - and
61:11 - tangent of B so when we run this there
61:17 - we go so we have our s co sign sign
61:21 - tangent but then we also have the other
61:24 - angle would be 60 so the s cosine and
61:26 - tangent of angle
61:30 - 60 so there we
61:34 - go and we there's we're just starting to
61:37 - dive into a lot of these patterns here
61:40 - so this is just the beginning just
61:43 - noticing how for whatever angle you can
61:45 - easily find S cosine and tangent as well
61:49 - as those three trig values for the
61:51 - complimentary angle all right so not bad
61:55 - one of the other things remember all
61:57 - these trig functions they are constants
62:00 - so the S of 60 is always
62:04 - 866 and knowing that then whatever the
62:07 - sides are if I know one remember it's if
62:09 - it's opposite over hypotenuse if I know
62:11 - one of the sides I can figure out the
62:12 - other and just as a another thing we can
62:15 - do we can Loop through you know the
62:18 - sign and you know I just decided to go
62:22 - from you know 0 to 180 and
62:26 - the only thing here I'm going to import
62:28 - is math and I'm going to Loop through
62:29 - the
62:30 - sign and just show you that for a second
62:33 - here so notice this one I didn't round
62:35 - it python will round
62:39 - it and jump all the way down there so s
62:42 - of 0 0 um and just degrees I just got to
62:48 - you know one degree and we see these
62:52 - little T you know a lot of decimal
62:54 - numbers a lot of decimal places but look
62:56 - at the really tiny numbers
62:59 - zer0.1 and you know we keep going I'm
63:02 - already past the sign of
63:04 - 30 which oh because that work notice
63:07 - that worked out
63:10 - uh you see it really is 0.5 or 1/2 the
63:14 - sign of 30 um sometimes the way python
63:17 - calculates things you know it doesn't
63:20 - round it but that really is uh 0.5 is
63:24 - the exact answer and then we get to all
63:27 - these others and we get down to
63:31 - 789 and this one did round it properly
63:35 - the sign of 90 is exactly
63:37 - one and what do we notice about these
63:41 - values let's go somewhere around here so
63:45 - look at the sign of
63:47 - 89999 847 and the sign of 91 999
63:53 - 847 the sign of 889 99
63:57 - 390 and sign of 92.
64:00 - 99939 we're going to dive into some of
64:04 - these patterns here but for right now
64:07 - looking at the S cosine and tangent and
64:11 - you see it'll go back down so the sign
64:15 - of
64:16 - 180 um is actually
64:20 - zero so
64:24 - um now
64:26 - this next thing supposing I know those
64:30 - ratios so this is whatever those those
64:32 - sides are if I divide them um you know
64:36 - whatever those sides are then I can
64:38 - figure out if I you know this is the
64:40 - ratio and U you know if I know the angle
64:45 - I know one of the sides I can figure out
64:46 - the other but supposing I know both
64:48 - sides but I don't know the angle and so
64:51 - that's an inverse function you know the
64:54 - sign of I'm expecting angle and then the
64:56 - answer is this ratio which you know for
64:59 - like 161 would be like
65:01 - 325
65:03 - so supposing I know that ratio um I know
65:07 - the two sides I can divide them get the
65:08 - ratio but I don't know the angle inverse
65:11 - function and the reason why it's a sign
65:15 - is because the full word is arc sign um
65:19 - another way to look at this as inverse
65:20 - sign and there's some other notation for
65:22 - that
65:24 - so you know now we get AR sign
65:28 - and if I do the arc sign let's say I
65:31 - knew this ratio you know four over five
65:37 - um so the opposite side would be four
65:39 - the hypotenuse would be five
65:42 - then um remember I'm you know this would
65:46 - do the this would return radians so then
65:49 - I would have to make it degrees
65:52 - so there we go in my you know 3 four
65:56 - five triangle the sign the you know if I
65:59 - know oh one side's four the hypotenuse
66:01 - is five then that one angle is
66:04 - 53 and then I can do the subtraction to
66:06 - get the other
66:08 - angle so now let's take a look at what
66:10 - we can do with the next thing we'll do
66:13 - is uh some things we can do with this
66:15 - information you know how to figure out
66:18 - uh each side or each angle so let's see
66:21 - how to use some of our trig ratios to
66:24 - solve triangles and here's the normal
66:27 - naming convention for a triangle capital
66:31 - letter for the angle and then that
66:33 - lowercase letter for the side across
66:34 - from it so capital A see lowercase a
66:38 - capital B and then lowercase B capital c
66:41 - for the right angle and then for the
66:44 - hypotenuse um that also follows classic
66:47 - Pythagorean theorem a s plus b s equal
66:50 - c^2 so I'll make C the hypotenuse all
66:53 - right so supposing I know some of these
66:56 - angles or sides and I want to figure out
66:59 - another one so let's say I know that
67:02 - angle a is
67:05 - 30° and then if I know that the
67:10 - hypotenuse is 10 but supposing I want to
67:15 - find the measure of the side a so I know
67:20 - enough to figure this out so I can see
67:24 - that from that 30 angle I want to know
67:27 - the opposite side but I do know the
67:30 - hypotenuse and so then that tells me oh
67:33 - I these three I must be involving sign
67:37 - so I set up my equation so the sign of
67:42 - 30 equal a over
67:47 - 10 and remember that the S of 30 that is
67:51 - a constant it's always going to be the
67:52 - same number and therefore I only have
67:55 - one unknown and I can solve this and I'm
67:58 - going to do one step of algebra
68:00 - first get a by itself I'm dividing by 10
68:03 - so I multiply both sides by 10 so 10 *
68:07 - the S of
68:10 - 30 =
68:12 - a and that you can do in one step on the
68:15 - calculator or you can write the code
68:17 - which we'll talk about in a minute so 10
68:21 - * s of 30 and I'll tell you that s of 30
68:24 - is2 they don't all work out so nicely
68:26 - but that one happens to be 1/2 so 10 *
68:30 - 12 so 5 = a and then we can figure out
68:35 - the measure of of angle
68:37 - a um if I wanted to figure out this and
68:42 - maybe maybe I didn't
68:45 - know this maybe it
68:48 - was um angle B that I knew now we always
68:54 - can do subtraction because I know know
68:55 - that that's a right angle but let's just
68:57 - say that angle
68:59 - B I
69:01 - knew that that was
69:04 - 60 so instead of doing the subtraction
69:08 - let's just say I still want to figure
69:09 - out the measure of angle a oh well in
69:13 - this case it would be the adjacent and
69:16 - hypotenuse that I want to involve and so
69:19 - then that brings me to cosine adjacent
69:22 - and hypotenuse so what I would do is I
69:25 - would write the
69:28 - cosine of
69:31 - 60 equals a over
69:35 - 10 there we go one step of algebra and
69:38 - I'm going to do 10 * the cosine of
69:44 - 60 equals a
69:48 - and I I I pick these as examples cosine
69:51 - of 60 also happens to be 1/2 and we'll
69:53 - look at you know these interesting
69:55 - patterns in a little bit but then that
69:59 - works out because 10 * 12 still gets me
70:02 - to that same answer 5al
70:05 - a pretty good so
70:09 - now I'm going to do a tangent
70:12 - example
70:15 - and let's let's
70:18 - say if I now tangent would not apply
70:21 - here because either of these angles
70:24 - opposite and adjacent I don't know
70:26 - either of them but let's just say I
70:29 - didn't know either of these but maybe
70:33 - I'll go back to this one um being
70:38 - 30 and let's
70:40 - say
70:42 - I
70:43 - know this one I'm going to change it up
70:46 - here a little bit and let's say I know
70:48 - this one I'll I'll still say that that's
70:49 - five let's we'll stay consistent with
70:51 - this so the tangent so I'm not going to
70:56 - use S or cosine because I don't know the
70:59 - hypotenuse
71:00 - and I know that angle but I I know which
71:03 - is the opposite side and I want to know
71:05 - the adjacent side so then that tells me
71:08 - oh then that's tangent so I'll set it up
71:12 - that the tangent of 30 = 5 over
71:19 - a and I'm also going to do two steps of
71:23 - algebra with this because a is in the
71:24 - den denominator so my first step a *
71:29 - tangent of 30 = 5 but notice not quite
71:35 - there to solve I need one more step
71:37 - divide both sides by the tangent of 30 a
71:40 - equal 5 over the tangent of
71:45 - 30 there we
71:47 - go
71:49 - and tangent of 30 that is also a a
71:53 - constant and
71:56 - then when we divide um 5 / the tangent
72:00 - of 30 U without doing this on the
72:04 - calculator
72:05 - the it's going to end up being so
72:09 - a
72:11 - would oh sorry I meant I meant to make
72:14 - that angle B but that's okay um angle B
72:17 - because that's the one I wanted to
72:20 - know
72:22 - so um 5 / the tangent of 30 um is going
72:28 - to be 5 <
72:31 - tk3 because
72:34 - so um b equals
72:37 - um 7 * 5 so it's somewhere around like
72:43 - nine
72:45 - um yeah
72:47 - so it's really five times the exact
72:50 - answer is going to be 5 * < tk3 but then
72:55 - uh
72:57 - it's like 8.5 something like
73:01 - that which is why it's you know we will
73:03 - get to the point that we're doing this
73:05 - stuff on the calculator or writing code
73:07 - because all of these you know U the one
73:10 - half that was a nice example because
73:12 - occasionally we get that you know nice
73:14 - 1/2 um 5 tk3 is the exact answer but you
73:19 - know about 8.5 most of the time when you
73:22 - when you're solving these you're going
73:24 - to get you know uh weird decimals um I
73:28 - mean at this point a square root answer
73:30 - that's a nice exact answer but even most
73:33 - of the time you're going to get some
73:34 - weird decimals and you know all these
73:38 - three angles and sides yeah it's very
73:41 - rare that you'll get something where
73:42 - they all work out to like you know even
73:45 - like one decimal place so you know
73:49 - solving now I have how can I use each of
73:52 - these to solve for for the sides if I
73:55 - know an angle on one of the other sides
73:58 - but what if I it's the angle that I
73:59 - don't know
74:02 - so
74:05 - let's have a Twist here
74:08 - so if I keep this maybe it's if I don't
74:11 - know this angle and I'll tell you this
74:14 - it's not going to be a 3 30 6090
74:16 - triangle so let's just say let's do a
74:18 - nice
74:21 - 345 as as a nice example good
74:24 - Pythagorean triple
74:25 - and let's say I want to know angle
74:28 - a I
74:30 - mean right now I know all three sides I
74:32 - can do whatever trig ratio but let's
74:35 - just do a sign so if I have angle a the
74:39 - sign is 3 over 5 I know that ratio but I
74:43 - don't know the angle so let's write that
74:45 - so the S of angle
74:48 - a is 3
74:51 - over5 great so I set up my equation
74:55 - equation but how do I figure out the
74:58 - angle and remember inverse functions are
75:01 - when we switch the RO of X and Y so when
75:05 - I do sign I'm expecting an angle and
75:08 - then the answer is this ratio but when I
75:11 - know the ratio but don't know the angle
75:13 - that's the switching that's inverse so
75:16 - outside of code we would I might even
75:20 - use this inverse sign no notion to show
75:25 - it's an inverse of
75:30 - 35 and that works and a lot of
75:32 - calculators have that
75:33 - notation uh but the other the other word
75:37 - for that is arc sign and we can write it
75:41 - as Ark
75:44 - sign of 3
75:48 - over5 equals
75:50 - a so that's you know the other word for
75:54 - that function arc sign which is the
75:56 - inverse sign I know the ratio and then
75:58 - I'm expecting an angle oh and actually
76:00 - all these are going to be capital A
76:02 - because it's the angle that I don't
76:05 - know and then we'll see in the code that
76:09 - it's actually going to be you know um
76:13 - math.
76:20 - aign but we'll get to that so you see
76:25 - you want to know you know on the board
76:28 - or on paper how to set this up but then
76:31 - we're going to take that and we're going
76:32 - to write code to do all this because at
76:34 - any point you will be breaking out the
76:36 - calculator or writing code to get to
76:38 - these you know um yes you're you want to
76:41 - remember these ratios you want to
76:43 - remember how to set it up you're not um
76:45 - and certain values you might remember
76:48 - but you you know of all these different
76:51 - you know you're not expected to remember
76:53 - you know the ark sign of three over five
76:55 - or something like that so you're always
76:58 - going to be at that point you'll be
76:59 - breaking out the calculator or writing
77:01 - code so let's take a look at how to do
77:03 - all this in code and you know set it up
77:06 - so that you can plug in what you know
77:09 - and quickly output the answer so let's
77:12 - take a look at that code but right now
77:15 - everything that we're doing in trig
77:17 - depends on C being a right angle so
77:20 - that's something that we would already
77:21 - know if we don't know that then it's a
77:24 - different situation
77:26 - so I have my angles capital A B and C A
77:29 - and B are complimentary because C is 90
77:32 - and then my sides across adjacent and
77:35 - however so you know we see the the
77:38 - naming convention and it's helpful then
77:40 - to Picture This triangle even though as
77:44 - some of these angles get bigger or
77:45 - smaller it's not necessarily drawn to
77:47 - scale you know um someone famous said
77:50 - all models are wrong but some of them
77:52 - are useful and that's kind of what we
77:54 - want to get to here here this is useful
77:56 - that we can picture the relationship
77:59 - between the sides and the
78:00 - angles
78:02 - so we can use I I broke this down into
78:05 - three parts here um finding sign using
78:08 - sign to find angle measures so what you
78:11 - would know is you would know the angle
78:13 - and you would know the opposite
78:15 - hypotenuse if you're using sign so if
78:18 - you make the unknown value zero now for
78:21 - all these I'm going to make it like a 3
78:23 - four five triangle
78:25 - and you know something like that so
78:29 - let's just say I know that the angle is
78:31 - like
78:32 - 57° and then I'm picturing side a and
78:36 - I'm going to say that that's
78:38 - three um actually that would be four and
78:43 - then hypotenuse let's say I don't know
78:45 - so I'll put that as a
78:47 - zero and see then that way you know if
78:51 - it's something else you you know if it's
78:53 - the opposite side you don't know
78:56 - then um here we go so if you can picture
79:00 - the equation that we were talking about
79:04 - you know s equals opposite over
79:05 - hypotenuse so then if I knew if I didn't
79:09 - know the hypotenuse then I have two
79:11 - steps of
79:12 - algebra um so the unknown x equals the
79:19 - opposite divided by the
79:21 - sign and if I did know the hypotenuse
79:24 - you know let's say I knew that and it
79:27 - was the opposite side that I didn't
79:29 - know then it really just would be you
79:32 - know my hypotenuse you know opposite
79:35 - over hypotenuse that's the denominator
79:37 - so hypotenuse times the sign would be my
79:41 - unknown
79:42 - angle all right so there we go that we
79:45 - have these two ways so if I had you know
79:48 - this is five
79:50 - um 57 that works and notice each time
79:56 - you know what would be the unknown and
79:58 - then what would be the answer so then
80:00 - we're going to print the unknown is
80:02 - answer and we'll see how this
80:07 - goes and there we go so again I'm
80:09 - rounding this as just an example that
80:12 - you see that this answer is reasonable
80:15 - um yep we would know the opposite side
80:18 - or if I knew the opposite side was
80:20 - something like four and hypotenuse I
80:23 - don't know I could run it
80:28 - there and yep so um again a 345 triangle
80:33 - the angle would be like you know not
80:36 - exactly 57 so we get the idea here um or
80:41 - if uh you know we could have it as you
80:45 - know different angle all right so same
80:48 - thing with
80:50 - cosine um cosine adjacent over
80:53 - hypotenuse so if it's the adjacent side
80:55 - we don't know multiply both sides by
80:58 - hypotenuse and we get uh we get this if
81:03 - it's a hypotenuse I don't know then two
81:06 - steps of algebra and I get adjacent
81:08 - divided by
81:10 - math Co cosine so similar idea so you
81:15 - know let's just say uh there we go 57
81:19 - and if it's the adjacent that I don't
81:22 - know and the hypotenuse
81:29 - then there we
81:31 - go um because then that would
81:34 - round you know the adjacent side would
81:36 - be
81:37 - three and you know that would
81:40 - round but again the angle wouldn't be
81:43 - exact if for a 3 four five triangle the
81:45 - angle would not be exactly 57 just using
81:47 - these round numbers to get to show you
81:50 - how this would work and let's say if I
81:52 - knew that that was three but the
81:55 - hypotenuse I didn't know so and you see
81:59 - our two if
82:01 - statements and you know we get to that
82:04 - and same thing with
82:05 - Tangent you know angle hypotenuse or
82:09 - opposite and adjacent if it's tangent
82:11 - that I want to use so I would do the
82:14 - same thing um which one you know did I
82:16 - not
82:18 - know now supposing that it's the angle
82:23 - that I don't know so I have this that we
82:26 - have the sides a b and
82:29 - c and
82:32 - um there we go
82:35 - so if I you know if I don't know this
82:38 - now notice I'm not solving for this I
82:41 - could I could just throw Pythagorean you
82:43 - know again this all works if it's a
82:45 - right triangle so given that I could do
82:48 - Pythagorean theorem also and figure out
82:51 - the unknown side but I just want to take
82:54 - this whatever side I I don't know I just
82:56 - want to kind of factor that out so if I
82:59 - don't know a then I'm just going to use
83:02 - B and C so um AR cosine of B over
83:08 - C equals angle
83:11 - a so you know if we again if we picture
83:15 - that like we were talking about on the
83:17 - Whiteboard you know if I don't know
83:20 - angle a then it's you know AR code
83:24 - cosine of b
83:27 - c um or if I don't know side a I'm just
83:29 - going to not worry about that I can
83:31 - figure out angle a AR cosine of B over C
83:35 - and then what I'm going to do
83:39 - is
83:42 - subtract because once I figure out angle
83:45 - a then just subtract to get angle B and
83:48 - then I can print that out so that's
83:50 - really what we're doing here just three
83:53 - sides and if there's one I don't know
83:54 - I'm just not going to include that in my
83:57 - calculations because I can do AR s
84:00 - cosine
84:01 - tangent um to figure out the one angle
84:05 - and then subtraction to figure out the
84:07 - other
84:09 - angle there we go um you know depending
84:14 - on what we don't know so what I what you
84:18 - know if if I don't know B then I'm going
84:20 - to use I'm just going to factor that out
84:22 - so that would be S arc sign
84:25 - using a and C to figure out that angle
84:28 - or if I don't know C then it' be tangent
84:30 - because I wouldn't know C the hypotenuse
84:32 - so I must do opposite over
84:35 - adjacent and we're going to put this
84:39 - together it does seem like this is a lot
84:41 - of different formulas and we're going to
84:44 - add a couple more and then put it all
84:46 - together to be able to take input you
84:49 - know anything you know or about a
84:52 - triangle um our eventual goal is you see
84:55 - three sides three angles that's six
84:57 - things that if you know any three of
84:59 - them you can solve everything for the
85:01 - triangle that's what we're building up
85:03 - to so we'll get to the next
85:06 - thing so let's talk about radians and a
85:11 - radian as we mentioned before we could
85:13 - measure degre measure angles and degrees
85:15 - or radians so what is a radian a radian
85:20 - is the measure of the radius along the
85:24 - circumference because remember the
85:26 - circumference of a circle is 2 pi * the
85:29 - radius so the measure of the
85:32 - radius Pi is 3.14 twice that 6.28 so if
85:38 - I measure the radius I could get that
85:40 - around the circle you know um about six
85:45 - times not drawn to scale but we see you
85:50 - know 1 2 3 4 5 six and then we pretend
85:54 - that's only 28 not drawn to scale so if
85:59 - I measure the the a radi the measure of
86:02 - the radius along the
86:05 - circumference but then this angle that
86:09 - opens up to that that is one radian so
86:13 - we're not talking about the radius we're
86:14 - talking about a radian and you know this
86:17 - measure this angle is one radian degree
86:20 - wise it's like 50 something degrees and
86:23 - why do we use radians instead of degrees
86:26 - well degrees it's it's nice you know
86:28 - carryover from the ancient Babylonians
86:29 - they like things base six and 60 works
86:33 - out for a lot of things but in a lot of
86:36 - applications there's no real reason to
86:39 - use that number whereas radians it's
86:42 - always proportional to the radius and so
86:45 - however big or small my circle is if I'm
86:47 - talking about radians it's going to be
86:50 - proportional and then therefore relevant
86:52 - to some other things we're doing
86:54 - so we get into some Physics applications
86:57 - and such by default that's usually going
86:59 - to be radians
87:01 - but sometimes we just you know people
87:03 - not using those applications might just
87:05 - reference you know degrees so we want to
87:07 - be able to convert between the
87:09 - two and given this you know radians
87:14 - um that 2 pi radians is the whole circle
87:17 - so if
87:21 - I if I have 360
87:26 - then that matches up to 2 pi
87:29 - radians and I can set up a
87:32 - proportion so as long as I have degrees
87:35 - on the top and radians on the bottom
87:37 - like I have over here then if I know one
87:40 - I can figure out the
87:42 - other so if I have like you know
87:47 - 60° and I don't know how many radians
87:49 - that is I can cross multiply so 60 * 2
87:54 - pi is 120 Pi / 360 and so that' be 120
88:01 - Pi divid
88:03 - 360 and then that cancels to nice pi
88:08 - over
88:09 - 3 and most the time we're going to have
88:13 - radians as some fraction involving
88:16 - Pi so if you just come across an angle
88:20 - you you know and nothing told you
88:22 - whether it's degrees or radians if it's
88:24 - some fraction involving Pi probably
88:25 - radians if it's a larger number and
88:28 - possibly a decimal involved then that's
88:30 - going to be
88:31 - degrees so um we can convert from
88:35 - degrees to radians and we know python
88:37 - has that buil in already you know you
88:39 - can have this function you know degrees
88:42 - uh put input the radians out it'll
88:44 - output degrees radians vice versa so
88:49 - this is just showing you that what first
88:51 - of all what's it doing behind the scenes
88:53 - you know proportion
88:54 - and then also if there's some other
88:56 - application you just want to convert you
88:58 - can do that all right so this
89:02 - is degrees to radians but if I go the
89:05 - other way and remember radians might
89:08 - already have you know let's say I have
89:11 - like pi/
89:13 - 2 so that might be how radians show up
89:16 - again some fraction involving radians uh
89:19 - involving Pi so how can I figure out
89:22 - degrees cross multiply > / 2 * 360 and
89:26 - then / 2 pi so I'll do some simplifying
89:30 - there Pi / 2 so that becomes 180 Pi
89:35 - because I'll do that dividing by
89:37 - two and then divided by 2
89:42 - pi and we see converting radians to
89:45 - degrees then Pi will cancel out whereas
89:49 - degrees to radians you're going to get
89:50 - Pi in your answer Pi cancels out here
89:53 - 180 / 2 is
89:56 - 90° and pi/ 2 that radians is
89:59 - 90° so we see how we can convert one to
90:02 - the other we see that we have um radians
90:06 - as a really good measure because it's
90:08 - proportional and different ways we can
90:11 - convert built-in python functions as
90:14 - well as setting up a proportion
90:16 - depending on the situation one might be
90:18 - more useful than the other so let's take
90:21 - a look at the code and see how we can do
90:22 - this
90:24 - so first of all as we were talking about
90:27 - this is the ratio 2 pi radians is the
90:31 - same as
90:32 - 360° so we set up your our proportion
90:36 - then as long as you have radians over
90:38 - degrees you know you know one you can
90:40 - figure out the other and we're we're
90:41 - going to cross
90:43 - multiply so we just picture that as we
90:47 - set up our code to do the cross
90:48 - multiplying so here I'm going to say and
90:52 - put it in the comments and radians
90:54 - omitting Pi because remember radians
90:58 - will have Pi it's by default it's a
91:01 - we're going to write it as a fraction
91:02 - involving Pi or integer involving Pi if
91:06 - necessary so we have radians which will
91:08 - have Pi but then we cross multiply and
91:11 - then we divide by 2 Pi Pi cancels out so
91:16 - omitting Pi I'll put that in the answer
91:19 - so whatever the radians time 360 / 2 pi
91:24 - and I'm just looking at this and seeing
91:26 - how Pi cancels out and it's 360 / 2
91:30 - every time so I'm just going to say um
91:35 - the um radians to degrees if I know my
91:38 - radians then multiply by
91:42 - 360 / 2 is the same as times
91:48 - 180 and Pi I'm not going to put it there
91:52 - for radians and then I will reference it
91:56 - in the answer so if I have pi/ 2 radians
92:00 - I'll just enter that as
92:02 - one2 you can use fractions or decimals
92:05 - in this but really radians be expected
92:08 - to be a fraction so Pi over2 would be 12
92:12 - and then I'm going to print
92:14 - out Pi
92:16 - radians equals 90
92:18 - de true
92:21 - statement and we can even do our proper
92:24 - fractions we can have 1/2 u remember on
92:28 - the fourths so we could have you know
92:33 - anything you know three halves let's do
92:35 - something over the
92:37 - fourths and um there you go 5 over
92:43 - four you know in different quadrants and
92:47 - still it's 5 pi over 4 I'll write that
92:49 - as the fraction and convert it now this
92:53 - this will always give uh this part I
92:57 - know that it was 5 over4 but this
92:59 - display will be decimals and that's fine
93:01 - for now yes equals
93:03 - 225° and degrees whatever the answer is
93:07 - decimals are fine for
93:09 - degrees so there we go converting
93:11 - radians to
93:12 - degrees just do that now converting
93:15 - degrees to radians notice if I know
93:19 - degrees time 2 Pi /
93:22 - 360 and and you see degrees won't have
93:26 - Pi but when I do that cross
93:28 - multiplying I now I'm including Pi * 2
93:31 - pi but then ID by 360 so * 2 ID 360 is
93:36 - really divided by 180 and I'm also going
93:39 - to add Pi in there
93:42 - manually
93:43 - so because I do want a fraction in my
93:48 - answer here then I have to do some other
93:52 - acrobatics um
93:54 - python has this nice buil-in fraction
93:56 - module so fraction Library so we take a
93:59 - look so if I have my degrees let's say
94:02 - 120 um you know interesting because it's
94:05 - in another quadrant so uh not not
94:08 - everything in the first quadrant so if I
94:10 - have my
94:12 - radians now we think we're done here oh
94:16 - okay you know math. radians which is the
94:19 - same we can do that with degrees too
94:21 - math. degrees
94:23 - um but remember I didn't use math.
94:27 - degrees here because I really wanted to
94:30 - not have radians as a decimal um you
94:34 - know I would have
94:36 - to it would not 54s Pi that wouldn't
94:39 - work I'd have to you know that number
94:42 - times 3.14 even go into a few more
94:45 - decimal places you know uh this is the
94:48 - normal way that we would expect the the
94:50 - input so math. degrees I really would
94:54 - need uh to already have converted
94:56 - radians to a decimal so that's why I
94:59 - didn't use that there but I wanted to
95:00 - show this here that degrees oh okay I
95:04 - can use math.
95:06 - radians that's great but guess what
95:10 - that's not the end of the story because
95:11 - math. radians will give me a decimal
95:15 - answer for radians and that's not what I
95:17 - want
95:19 - so um here's some things um if I convert
95:22 - that to a
95:24 - string
95:26 - um
95:28 - and you know if I do this then if if I
95:31 - do
95:33 - R2 um divided by so convert this to a
95:38 - string and
95:39 - then this fraction to a string and then
95:43 - I have this nice function limit
95:46 - denominator because you know that won't
95:50 - always be necessary but I picked a
95:51 - number here to illustrate that because
95:53 - 100 12° it's going to be 2/3 which would
95:56 - be a repeating six and there's all kinds
95:58 - of you know that can get into a mess but
96:01 - now I have this degrees equals this
96:07 - number of pi
96:09 - radians so if I do
96:12 - that it will give me 120° equals 2/3 Pi
96:16 - radians so we
96:18 - see just the straight conversion in
96:21 - other things if I'm converting it you
96:23 - know behind the scenes yeah to degrees
96:26 - to radians it works out and I don't see
96:28 - all those long decimal numbers um that's
96:33 - you know if it if I wasn't trying to
96:34 - output something that might be a good
96:36 - way to do it yeah math. radians math.
96:38 - degrees but when I do want to Output
96:41 - this
96:42 - conversion this is how we would do it
96:44 - you know we get these few lines of
96:45 - acrobatics so that's why I just made my
96:48 - different steps R R2 R3 convert it
96:51 - radians oh but we're not done convert
96:53 - that to a string and dividing it by pi
96:57 - because I want that
97:00 - fraction and then take that string
97:03 - convert that to a fraction limiting the
97:05 - denominator and those are our steps for
97:07 - converting degrees to radians and
97:09 - radians to degrees in ways that I want
97:12 - to display
97:13 - it this is the unit circle and unit
97:17 - because it's one unit that we're really
97:20 - zoomed in on on the graph here so
97:22 - there's still zero Z but this is just
97:26 - one and then one in every direction um
97:30 - even down here but I wanted to focus on
97:33 - this we're going to talk about that part
97:35 - but that's why it's the unit circle
97:37 - because I have a radius of one if we
97:39 - could zoom in on the graph like that and
97:43 - what makes this so useful and most
97:47 - things in trig are based on the unit
97:50 - circle because if I have you know one in
97:54 - every direction that means the radius is
97:56 - one so let's let's look let's talk about
97:59 - this what's the if I have an angle here
98:02 - and I'll call this central angle
98:05 - a so what's the sign of a so the
98:12 - sign of
98:14 - a equals y over
98:19 - one
98:20 - H over one I mean I don't have to write
98:23 - the S of a equals the Y value and then
98:26 - the cosine of
98:30 - a equals x over
98:34 - one so every XY point along the unit
98:40 - circle based on this central angle every
98:43 - X Y point the x value is the cosine and
98:46 - the Y value is the sign and that's where
98:48 - we get our trig ratios from the unit
98:52 - circle
98:54 - so then I have all the s cosine and then
98:57 - of course then tangent is y overx
98:59 - because
99:01 - it's you know s over Co and and it's y
99:04 - overx the Y value over the x value or
99:07 - the sign over the
99:09 - cosine and that works out I have you
99:13 - know all these different values so here
99:16 - you know cosine remember that starts at
99:19 - zero and then we we go around this way
99:23 - so
99:24 - the cosine of 0 is one and the S of 0 is
99:28 - 0 and then we get up to here so this
99:32 - would be 90° or pi/ 2 radians then the
99:37 - cosine is zero and the S is
99:41 - one and every angle whether it be
99:45 - degrees or radians um all along the unit
99:47 - circle you know we have this value for
99:50 - the sign or the cosine and then we get
99:53 - our pythagorean identities because we
99:56 - remember Pagan theorem x^2 + y^2 = Ral R
100:03 - 2 and then therefore s cosine squ plus
100:07 - sin squ =
100:09 - 1 pretty cool so there's you know and
100:14 - then all of
100:15 - these then it works out nicely if you're
100:18 - in this other quadrant for certain
100:20 - things that you might remember you know
100:22 - notice
100:24 - uh for the Y values this this would be
100:26 - symmetrical so if I'm at different
100:28 - points along each side you know in
100:30 - different quadrants you know I could
100:32 - have symmetrical points here but the
100:34 - difference is the sign because you're in
100:36 - this quadrant you know the x value would
100:38 - be negative or you know in this quadrant
100:41 - you know then it'd be kind of
100:43 - symmetrical about the x-axis but then
100:46 - the Y value would be negative or here
100:48 - both of them would be negative so you
100:50 - know we we have some some patterns here
100:53 - now there's most of the trig values you
100:57 - don't need to know but certain ones we
101:00 - tend to remember because they work out
101:02 - to this nice pattern and so let me take
101:05 - a look at this if we
101:08 - have I'll remove our triangle so we we I
101:12 - mean we know that that
101:14 - exists but what about some of these key
101:18 - values here
101:22 - um so so if I have um you know if this
101:26 - one is
101:28 - 30°
101:29 - 45 60 and then up here would be
101:34 - 90 and then down here would be 0
101:38 - de or zero radians and then if I have
101:42 - these as radians so 30° so then that's
101:46 - pi over 6 45 that's pi over 4 60 that's
101:53 - pi
101:53 - 3 and then
101:56 - 90 that's Pi /
101:59 - 2 so for these angles it actually is
102:03 - worth it to remember these because it
102:06 - works out to this nice pattern and I'm
102:08 - going to start this pattern by changing
102:10 - this yes that's still one zero but
102:13 - supposing I wrote this
102:16 - as I'll erase this one
102:19 - too so
102:21 - supposing I wrote this instead of one
102:24 - I'm going to write this as the < TK 4/
102:28 - 2 so of 4 is 2 divid by two is one
102:32 - that's still one but if I write it like
102:33 - that for these
102:36 - angles then the pattern is the x value
102:40 - in this one is the S < TK of 3
102:43 - over2 and the x value here is the < TK
102:46 - of 2
102:47 - over2 and the x value here is the sare <
102:52 - TK of 1 two again if I don't simplify it
102:55 - then we see the pattern and then here it
102:58 - would be the square < TK of 0 over two
103:02 - I'm going to erase that
103:06 - part so the x value does decrease as we
103:10 - go
103:12 - around but these particular angles it
103:15 - works out to these nice patterns here >
103:17 - of 4 3 2 1 0 over two pretty cool and
103:22 - then the Y value
103:24 - does the exact opposite so the Y value
103:27 - here is z and I'll write that as a of 0
103:29 - over
103:30 - two and
103:32 - then the Y value increases as we go up
103:36 - so that becomes a square of 1 over
103:39 - two that becomes squ 2 over
103:43 - two that becomes sare 3 over
103:46 - two and < TK of 4 over two
103:53 - so given these you know we are going to
103:57 - look at the code and how to write a code
103:59 - to get all these and that's going to
104:00 - especially help for all these in between
104:01 - angles but certain major angles you can
104:05 - figure this out and even though we're
104:08 - writing code we still want to be able to
104:10 - work out some stuff in our head you know
104:12 - and looking at that then given this
104:16 - quadrant you can say oh well what angle
104:18 - am I talking about and just picture oh
104:20 - if I want cosine that's the X and so
104:23 - just count 4 3 2 1 0 where which angle
104:26 - am I talking about or if I want sign
104:28 - that's the Y value 0 1 2 34 and which
104:32 - angle and like I said they they
104:34 - correspond to the other angles because
104:37 - if I was in this
104:39 - quadrant I'll just pick one of them here
104:42 - so if that's 60 so 90 minus 30 is 90 +
104:47 - 30 so that would be
104:50 - 120° or if that would be
104:53 - Pi 3 then that would be 2 piun 3
104:59 - radians and it's symmetrical here so the
105:02 - the values are the same but I'm in this
105:05 - quadrant so the x value is
105:12 - negative so we see remembering them in
105:15 - this quadrant then we can see the the
105:17 - the Symmetry here but the x value is
105:20 - negative because I'm over here and and
105:23 - then the Y value be the same so 45 and
105:26 - then or pi over 4 is the same as
105:29 - 135 so 1 pi over 4 2 pi 3 pi over
105:33 - 4 and we see same values but the x value
105:37 - be negative nice and symmetrical here um
105:40 - zero and then remember in radians then
105:44 - this is 180 or Pi
105:48 - radians so if we get huge numbers then
105:51 - we can count like how many multip of Pi
105:54 - Pi 2 pi brings us around full circle and
105:58 - you know 3 Pi would be the same the
106:01 - beauty of these trig values is that
106:04 - they're repeating functions um we can
106:06 - just keep going around the
106:08 - circle and again things we can we can
106:10 - write the code for this and we can look
106:12 - at those patterns and we definitely will
106:13 - do that but it's also good to see see
106:16 - this beyond the code and see how it all
106:18 - fits together because a lot of times you
106:20 - won't see it written like this but if
106:21 - you picture it like this
106:23 - it's you know easy to remember and then
106:26 - you know all the nice symmetry so this
106:29 - is one of the many great things about
106:31 - the unit circle that all of our trig
106:34 - values come from this there we go s is
106:38 - your y-value cosine your x value tangent
106:41 - is
106:42 - YX and then you know all these nice
106:46 - patterns for those particular angles and
106:48 - you know we'll we'll look at some other
106:50 - some other interesting patterns here but
106:52 - just to see here's what the unit circle
106:54 - is and let's talk about you know
106:55 - different ways we can create this with
106:57 - code and see this on the graph so let's
107:00 - take a look at the
107:01 - code so here's the unit circle in code
107:06 - and besides the fact that this is going
107:08 - to look a whole lot better than my
107:09 - drawing um just to show you how you can
107:12 - represent a circle we've been graphing
107:15 - some things but you can also graph a a
107:18 - circle if you want and this graphing
107:22 - should sound seem familiar notice I just
107:24 - made the axis um 1.5 in every direction
107:29 - so really it's you know we're zoomed in
107:32 - on that part of the graph you know you
107:34 - know only one unit in every direction
107:37 - hence why it's the unit
107:39 - circle and we have uh you know each axis
107:44 - and um this and so I'm going to save
107:47 - this as Circle which I don't necessarily
107:50 - need to do but you know I'll do this
107:53 - because it'll still run this code which
107:56 - is PLT do Circle okay I can plot a
108:00 - circle um you don't need this uh extra
108:03 - space but you can have it if you want
108:06 - and this is what we have here uh 0 0
108:10 - that's where it starts and the
108:11 - coordinates of the center radius is one
108:14 - and R we're I'm going to do fill equals
108:16 - false because I'm going to do some other
108:18 - stuff with this um and the reason I
108:22 - added this is because then down here I
108:25 - can add artist Circle so we're going to
108:29 - use this for unit circle but you can use
108:31 - this for other shapes and this connects
108:34 - with some of the other things you know
108:36 - if you've done other you know drawing in
108:38 - Python for you know different things you
108:42 - know I can save the here's my circle and
108:45 - I add the artist um I also am going to
108:49 - add this um set aspect equals most of
108:53 - the time that wasn't an issue because
108:56 - you know I'm graphing something and you
108:58 - might notice that the xais is extended a
109:01 - little bit and our coordinates are more
109:03 - rectangular but for the unit circle I
109:05 - want this to be equal so that you
109:08 - actually see it as a circle and not an
109:10 - oval so as we run
109:14 - this and the suspense here this is our
109:17 - unit
109:18 - circle so we see it is one in every
109:23 - direction the radius is one starts at 0
109:26 - 0 and this is where all the trig values
109:30 - come from as we were talking about that
109:34 - uh and I'm going to show you what that
109:35 - means but this is our unit
109:38 - circle and what does that mean it means
109:41 - in the circle we have triangles so here
109:45 - I'm just going to redo this um all my
109:49 - circle include this there we go but
109:52 - here's triangle that I'm going to
109:54 - put so uh you know AAL 1 uh we'll get to
109:59 - that but notice I'm going to have there
110:02 - there's my angle um but uh we're not
110:06 - worried about that right now um math.
110:09 - cosine of a math. s of a remember the
110:11 - default is radians so one radian that's
110:14 - you know a decent angle to illustrate
110:16 - our point so notice the cosine I'm going
110:19 - to store it as X and the sign I'm going
110:21 - to store it as y
110:24 - and after all this now here's some text
110:28 - I put you'll see where this shows up in
110:31 - the graph um text to display
110:36 - but what I'm also going to do is I have
110:40 - the plots here and these other lines
110:43 - that I'm drawing so now that I have my X
110:46 - values and yv values I'm going to draw
110:47 - some lines put some text on the graph
110:51 - and here we have have it so this is our
110:55 - unit circle with a triangle now notice
110:58 - the hypotenuse of this triangle is still
111:01 - the radius which is
111:02 - one and that works out nicely given this
111:05 - central angle it's a our rectangular
111:07 - coordinates so if I plot this point
111:11 - XY well how do I plot the point go from
111:13 - 0 0 over X up Y and that makes the sides
111:17 - of my triangle rectangular coordinat so
111:20 - we know that this angle is a right angle
111:23 - and if we remember everything then we
111:27 - notice that we can do trig here because
111:31 - my cosine is adjacent over hypotenuse X
111:35 - over one which is really just X and my S
111:38 - is y over one which is y so whatever
111:42 - this angle this central angle is inside
111:44 - the triangle then my cosine is my x
111:49 - value my S is my y value
111:53 - so if when we were doing before the just
111:56 - you know displaying the decimal numbers
111:59 - for S and cosine that is going to be our
112:02 - X and Y values all along this unit
112:07 - circle so you know that's where they
112:09 - come from and here's the triangle inside
112:12 - so we can see this
112:14 - visually and I did one more thing for
112:17 - you to animate
112:20 - this and the animation is pretty
112:22 - interesting um all the other things and
112:26 - I'm going to import
112:27 - time but here's the triangles now notice
112:31 - this is all in a function here so I have
112:37 - it I think this animation Works sleep
112:40 - for 3/10 of a second clear the output
112:44 - and then yep clear the output and then
112:48 - I'm going to do all
112:50 - this you know
112:54 - and you know in this
112:56 - loop I just called it a for a in range
113:01 - 70 that ends up being
113:03 - enough so a is my you know my counting
113:07 - variable so this is still in radian so I
113:09 - just did 0.1 * a that ends up being
113:12 - enough of a difference so my angle you
113:16 - know when a is 1 it's 0.1 radians when a
113:19 - is 2 it's 2 radians and again you'll see
113:23 - that that ends up being enough of a
113:24 - difference in the angle so based on this
113:28 - Loop that counts through variable a I'm
113:30 - going to have these different angles and
113:32 - then cosine and S are my X and Y values
113:36 - so going through this Loop I'm doing all
113:39 - the same things I just did in the cell
113:42 - before but this Loop is counting through
113:46 - plotting that triangle and then you know
113:50 - wait you know 3/10 of a second clear it
113:53 - and plot the next one so you can
113:56 - see as this central angle
113:59 - increases we can just see
114:02 - these
114:05 - adjusting then you have you know your
114:09 - XY and this still works for that
114:13 - angle for all in all these different
114:18 - quadrants because I can actually count
114:21 - the angle from
114:22 - you know 0 0 in the first quadrant you
114:25 - know along the x- axis in the first
114:27 - quadrant or I can count you know other
114:31 - ways oh keyboard interrupt excuse me
114:36 - so I can see this showing that I have
114:41 - the sign and notice this angle keeps
114:44 - increasing so it does go up through 2 pi
114:48 - radians the entire circle and it'll
114:51 - still draw those
114:54 - triangles um and you you'll see that
114:56 - that works out you know when we're at
114:59 - one of those points in you know in
115:01 - another
115:02 - triangle um
115:05 - the s or cosine there you know there's
115:08 - when we do inverse sign it actually
115:10 - works out for two possible
115:14 - angles and we'll look at that and again
115:18 - the Pythagorean aspect because given
115:21 - those triangles sign sare plus cosine
115:23 - squ because these this equals 1 well 1
115:27 - squ because of that
115:30 - triangle and
115:32 - so I just put this little Loop here to
115:35 - to show this again I'm just looping
115:37 - through I'm not even graphing this but
115:39 - given those angles so the S and then
115:42 - squared cosine squared and
115:45 - one so I just to show
115:51 - you we have the sign and cosine squared
115:54 - gives us these huge decimal numbers but
115:57 - look at that every time and just the way
116:01 - python calculating works out every so
116:03 - often you get things like this but it
116:06 - really is sin squ plus cosine squ equal
116:10 - 1 so we see how all this comes together
116:13 - now in this right
116:16 - triangle um you see we have this uh in
116:21 - this triangle in inside the unit circle
116:24 - um all of our X values and Y values are
116:27 - points along the triangle for those
116:30 - given angles and remember um at three
116:34 - you know if it were a clock at
116:36 - 3:00 then this would be the angle zero
116:42 - and we also saw that you know at certain
116:45 - times it seems to close up and you
116:46 - wouldn't even be able to make a triangle
116:49 - so now as I mentioned that this would be
116:51 - three a
116:53 - clock so the animated unit circle what
116:58 - if I
117:00 - plotted um this point here so I plotted
117:06 - a
117:08 - line
117:10 - and so what if I plotted from
117:14 - 0x from 0 0 to XY and what if I comment
117:21 - out all the this is actually going to be
117:23 - useful for you in a project that's
117:25 - upcoming just to show you so we
117:29 - have this
117:32 - and um here's another trick if I wanted
117:35 - to make this a clock clocks go the other
117:37 - way so what I would have to do is just
117:41 - make everything
117:43 - negative and then if I ran
117:47 - this you see
117:52 - and we see this moving
118:02 - around and as another bonus here
118:06 - supposing um I wanted to start it
118:10 - at 12:00 instead of what would be 3:00
118:15 - you know our normal trig starting point
118:17 - then my angle I really want to graph the
118:21 - angle that that's um right be that's
118:25 - before that so I would make it minus
118:31 - uh I would graph this as
118:35 - uh plus uh math do I'm I want to do this
118:39 - exact so I'm going to say math.
118:42 - Pi um over
118:47 - two instead of giving the decimal
118:50 - equivalent and you see how this starts
118:53 - then at the
118:56 - top and given these you know you could
119:01 - have this tick any number of
119:04 - seconds
119:06 - um can look at that okay and just uh
119:10 - that I said that might be helpful for
119:12 - you in an upcoming project all right and
119:15 - Pythagorean um there are other
119:17 - Pythagorean triples but let's focus on
119:19 - this that sin squ plus cosine squ equals
119:21 - 1
119:23 - often useful thing to know so let's take
119:26 - a look at how we how else we can graph
119:28 - these values not just in a unit circle
119:32 - and we'll see some other cool patterns
119:35 - here so let's talk about how we can
119:38 - graph these trig functions if if I make
119:42 - X the angle and y the act the trig
119:45 - function
119:46 - so unlike the unit circle X and Y are
119:50 - values on that but if I just make X the
119:52 - angle so and I'm going to make it in
119:54 - radians so if x is the
119:57 - angle then our angle you know we have
120:00 - zero but in radians I'm going to go to
120:03 - the major points pi/
120:05 - 2 which corresponds to 90° Pi which is
120:10 - 180° and then so 3 pi/
120:16 - 2 and then 2
120:20 - pi come full circle so we're going
120:24 - around the unit circle every 90 you know
120:27 - 0 Pi / 2 pi 3 Pi / 2 you know we're
120:31 - going around and if x is the angle then
120:36 - let's just picture what's happening to
120:38 - the Y value if I do y equal the S of
120:45 - X so as that angle increases going
120:49 - around the circle what happens remember
120:52 - y the the S of X starts at zero so we do
120:56 - have this
120:57 - point and then the sign being the Y
121:00 - value on the unit circle what's it doing
121:02 - the as we're going around a circle it's
121:04 - going up then down then it's
121:07 - negative and then back around so at pi/
121:11 - 2 you see the Y value really only
121:15 - goes one to negative 1 so at Pi / 2 the
121:20 - sign is 1
121:22 - and then at Pi it goes back to zero
121:25 - again and then going around the circle 3
121:29 - pi over 2 down now it's down to Nega
121:33 - one and then back up to zero
121:37 - here and I'm going to draw this with a
121:39 - nice curve to
121:41 - it to try to you
121:44 - know estimate these in between
121:47 - values but that's a sine
121:50 - wave and
121:52 - the name of this sign the comes from the
121:56 - adjective sinuous which means curvy
121:59 - because that's what the graph looks like
122:01 - it's this
122:02 - curve
122:04 - and you know it continues you know
122:07 - forever in both directions it just keeps
122:09 - going um because as X increases you know
122:14 - beyond 2 pi you're going around the
122:16 - circle again so it just goes around and
122:18 - around and we get this up and down sine
122:23 - wave so and it works out well when we're
122:26 - doing this in radians because degrees
122:29 - that arbitrary number of 360 to get that
122:32 - full cycle I would have to go from 0 to
122:35 - 360 but yet the Y value only goes up and
122:40 - down you know one to negative one so you
122:44 - know if we did it proportionally then
122:46 - you wouldn't even be able to see it on
122:48 - the graph so that's sign so what about
122:51 - Co
122:53 - cosine I just did s first so if I take
122:57 - cosine and I'm going to keep these same
123:01 - major angle
123:03 - values but what happens with cosine when
123:07 - I go at cosine at zero it starts at
123:13 - one and then at 90 degrees or pi over
123:17 - two then at
123:19 - zero and then at pi so remember we're
123:22 - going around cosine is 1 0 -1 and then
123:30 - so 1 zero down here it's negative 1 when
123:33 - we're at pi and then goes back to zero
123:37 - and then back up to
123:39 - one so again I'll try to draw this with
123:42 - a nice curve to it but there we go one
123:48 - Z and again that also increases and if
123:52 - we Sol them you know
123:55 - continuously you know this
123:58 - continues the sign the cosine graph they
124:02 - are very similar but there's just a
124:04 - shift to them and that's why Co when I
124:08 - have y equals the
124:10 - cosine why it's the why we have Co
124:13 - because the graphs are similar but
124:15 - there's a shift to
124:17 - them and so that you know sign because
124:20 - it's sinuous or curvy and cosine because
124:23 - it's like that but it goes along with it
124:25 - but there's a shift to it so we have S
124:27 - and
124:28 - cosine and being familiar with the graph
124:32 - we can you know plot out a few of the
124:34 - key points and then sketch it out in
124:37 - between we'll also show how to do this
124:40 - in code um built with the built-in
124:43 - functions or even with you know one
124:45 - point at a time you know so that's
124:47 - pretty interesting so we have S and
124:49 - cosine um let's do one more here let's
124:52 - talk about tangent because
124:56 - tangent is s over
125:00 - cosine but if we remember that's going
125:04 - to cause some problems because I can't
125:08 - cosine is zero
125:11 - sometimes so if
125:18 - tangent is s over cosine so
125:22 - what happens um what happens at uh 90°
125:27 - well first of all if it's s over
125:30 - cosine
125:31 - then when s is zero then the value is
125:35 - zero but then when cosine zero I can't
125:38 - divide by zero so what we would do is
125:42 - I'd put a ver vertical line dotted line
125:44 - there that's our ASM toote it's that x
125:47 - value can't exist so therefore there's
125:50 - no possible way for any y value to be
125:52 - along that and then if we go at Pi so s
125:58 - is zero yeah X is negative but the sign
126:00 - is zero so then that value exists and 3
126:03 - pi/
126:05 - 2 x is z so undefined and then at 2 pi
126:11 - it's zero now just knowing that
126:13 - information is not enough to know the
126:16 - tangent graph but I'll tell
126:17 - you what does it do it actually ends up
126:20 - looking like
126:26 - spaghetti so that's what the tangent
126:28 - graph looks
126:29 - like and if we continued it on you know
126:33 - it would be like
126:35 - this so tangent graph and most of the
126:39 - time we won't see these dotted lines
126:41 - that's just if we were drawing this
126:42 - that's that's our
126:43 - guide um you'll just notice that hey
126:47 - there's that x value that there is
126:49 - nothing and then it gets you know Tang
126:51 - can approach this but never get there
126:55 - now at least for the
126:57 - 90° then or Pi / 2 that makes sense
127:01 - inside a circle because if that or
127:04 - inside a triangle because if the
127:08 - triangle
127:10 - um I'm just going to draw this here if I
127:12 - have a triangle so you know AB
127:17 - C so if that
127:20 - angle gets gets to be you know if that
127:23 - angle's zero then we're at zero and as
127:25 - that angle increases the tangent would
127:28 - increase B over a because that would
127:31 - keep
127:31 - increasing but it can't be 90 because
127:34 - then I wouldn't have a
127:35 - triangle so you know for that part it
127:38 - also makes sense you know looking at
127:40 - that
127:41 - comparison but for the graph it
127:43 - definitely goes back to you know the
127:45 - explanation is s over cosine and again
127:48 - let's take a look at how to do this with
127:50 - code and and you know a couple different
127:53 - ways from a loop and plotting points to
127:55 - some of the built-in functions to graph
127:57 - this all right so let's take a look at
127:59 - the code so now let's graph the trig
128:02 - functions not as as a part of the unit
128:04 - circle um though I want to start with
128:07 - this
128:08 - and just keep that as a reference here
128:11 - so here I'm just going to recreate the
128:13 - unit circle um in this case using
128:18 - degrees so uh
128:22 - I'm going to recreate it using points so
128:23 - I'm going to Loop through this here
128:27 - where you know from a for the angle in
128:30 - range 360 I'm going to Loop through and
128:33 - each one remember s and cosine have to
128:36 - convert it to radians um and then I'm
128:38 - going to plot this so you know that
128:41 - works there's my unit circle I didn't
128:43 - put the axis each each axis but there we
128:46 - go we can draw our Circle as again um
128:49 - you you know another way to draw a
128:51 - circle you you can plot all these
128:53 - points uh so I did that with degrees
128:57 - because now let's take this as so a
129:03 - which is the angle if that's my x
129:06 - value and then my yalue I'm going to
129:10 - start with
129:11 - s my yalue is the
129:14 - sign so the sign of
129:17 - a um
129:19 - and I made this AIS here this is going
129:22 - to you know look silly but it you know
129:25 - now it's all equal x goes from 0 to 360
129:30 - um y goes from - 360 to positive 360 and
129:33 - when I graph
129:35 - this this is what it looks
129:39 - like when it's
129:41 - equal axes because remember the sign
129:45 - only goes up to one and down to negative
129:47 - 1 so if I use degrees
129:51 - you know it's so stretched
129:54 - out and we can
129:57 - um we can make this I'll make it like NE
130:01 - like two or something so we can
130:04 - see you know the edge of the graph so I
130:08 - we can just completely change this
130:10 - aspect
130:13 - ratio and I still have X going up to
130:19 - 360 and
130:22 - why just going up you know to one and
130:26 - down to negative one you know that works
130:29 - and you know that illustrates that we
130:30 - can do this but beyond that it's still
130:36 - radians are nice because they're
130:38 - proportional you know it's the measure
130:40 - you know that angle corresponds to the
130:41 - measure of the radius on the
130:44 - circumference whereas 360 really that's
130:46 - kind of an arbitrary number you know we
130:49 - came up with um I think it goes back to
130:51 - the ancient Sumerian so many things they
130:53 - did were based on six and triangles so
130:57 - that's where we get 360 and you know
131:01 - dividing things up that
131:03 - way
131:04 - so how about we do it using radians so
131:07 - again I just go back to the circle um
131:10 - rather than just drawing the circle as
131:12 - we were doing uh before we can just you
131:16 - know plot X and Y as
131:18 - points and that works and
131:22 - it still looks like so many individual
131:23 - points that's what I wanted but you know
131:25 - plot even more points and it'll
131:27 - definitely look like a smooth Circle so
131:29 - we can plot those where you know radians
131:32 - and then you know X and
131:35 - Y so then if I was graphing this again
131:40 - my range um for
131:42 - radians um I want it to go all way all
131:45 - the way around but I want to give enough
131:47 - different value so I want maybe 70
131:50 - points
131:51 - and so radians you know uh 2 pi radians
131:55 - for the circumference so that's 2 * 3.14
131:59 - 6.28 and so each time you know for a
132:06 - then we go up you know it will count up
132:08 - these you know tiny increments and end
132:11 - up at seven and that will work out so X
132:15 - is the angle that will increment enough
132:18 - for us to see our graph and Y is our s
132:21 - sign of that angle so now we really
132:24 - see you know a nice illustration of our
132:28 - sine wave where our ratios you see I can
132:33 - have this normal 1 to 7 and even if I
132:38 - had the Y value go up to seven we would
132:42 - it would look a little more zoomed out
132:43 - but you would definitely recognize the
132:44 - sign wave so all of our trig graphs are
132:48 - going to use radians it just makes more
132:50 - sense
132:52 - so there we have it um sign using
132:55 - radians and I absolutely could do the
132:57 - other thing do this with cosine too I'm
132:59 - going to show you this in the next step
133:01 - but I could just as easily do s and
133:05 - cosine
133:07 - um but rather than the points um I'm
133:11 - going to use this to start using numpy
133:14 - because we were using numpy before in
133:17 - the algebra with python that's a good
133:20 - go-to because
133:22 - numpy it creates this array of X Val of
133:26 - well array of values which in this case
133:28 - I'm going to use as X values so that way
133:31 - I can base this all on my graph
133:35 - Dimensions which I can change here if I
133:38 - want you know I can just Define it X Min
133:41 - x max y Min y Max and then I create how
133:46 - many points do I want based on those
133:48 - graph
133:49 - dimensions and if I want more points you
133:52 - know this is going to be enough for us
133:53 - four times this but I could always add
133:57 - five make this you know increment that
133:59 - number four and then I create this np.
134:05 - linspace you know min max and then how
134:08 - many points in that range so I create
134:10 - this array and for so many of our
134:13 - functions that's just going to be a
134:14 - go-to create this x array or this np.
134:17 - linspace array of X values and then
134:20 - we're going to use that to plot
134:22 - everything and then I can Define this
134:25 - hopefully this is looking familiar if
134:28 - you did the algebra with python course
134:30 - then my plots um and you know my I my
134:37 - Axis and then I'm going to draw the X
134:40 - and Y axis um still making them blue I
134:43 - just kind of like blue so there we go
134:47 - np. sign and now I have this and I can
134:52 - graph this you know there we go np. sign
134:57 - and you might notice this should have a
135:00 - nice curve to it and you might notice
135:01 - some you know not perfectly
135:05 - curved aspect so that's where I can say
135:09 - well more points would smooth that out
135:11 - so even if I just increment that to five
135:14 - that might be
135:16 - enough Smooths it out a little bit you
135:20 - see and and I could certainly increment
135:22 - that to
135:26 - 10 takes a second longer and you see how
135:29 - that really Smooths it
135:31 - out so that's where using that np.
135:36 - linspace helps a lot of these things
135:38 - we're going to be dealing with uh you
135:40 - know very curvy lines I mean that's
135:43 - really why it's called sign because the
135:46 - adjective is sinuous which means
135:48 - curvy and you know that's our sine wave
135:52 - and this is usually the go-to for
135:55 - modeling a lot of up and down Trends
135:58 - we're going to get into some of that but
136:00 - then also um you know anything curve
136:02 - because it starts at 0
136:05 - 0 and now we're going to look at cosine
136:08 - you know why is it called cosine so I'm
136:11 - just going to model this one and I'm
136:13 - going to comment out sign here
136:16 - so
136:18 - cosine looks very similar but notice it
136:21 - starts at
136:24 - one and if you remember the unit circle
136:27 - because at zero you know when the angle
136:29 - is zero Co the S the Y value is zero but
136:32 - the cosine was one the x value so very
136:37 - similar graph but it just starts at a
136:39 - different
136:40 - place you could use this a lot of times
136:43 - modeling something with cosine would be
136:44 - like a spring that already is stretched
136:48 - out so that's why it starts at one but
136:50 - some
136:51 - you know starting at 0 just works out
136:54 - for a lot of things so that's why we
136:55 - model so much with s and we see cosine
136:58 - is name that because the graph is
137:02 - similar all right and next we're we'll
137:05 - get into tangent um in the next one
137:09 - actually let's get let's do tangent
137:12 - now
137:14 - uh just tangent and remember tangent is
137:18 - y overx
137:21 - so in our unit circle it's the opposite
137:24 - over the hypotenuse which is
137:25 - y/x and so if I look at
137:29 - these I'm just going to graph tangent
137:32 - I'm actually not going to I have other
137:33 - things down here but we'll get to
137:37 - that if I just graph
137:41 - tangent
137:43 - spaghetti and we also notice that um you
137:47 - know it starts at Z 0 because when Y is
137:50 - zero
137:51 - then we're at zero
137:53 - and we have these jumps in the spaghetti
137:56 - because it's y overx so at 90° or pi/ 2
138:00 - radians X is zero which zero in the
138:04 - denominator makes it undefined so I have
138:07 - a vertical ASM toote here no you know
138:11 - undefined and then we keep going there
138:14 - we go so we we see the
138:17 - spaghetti um not a lot of things that we
138:20 - can model with Tangent graphs but it's
138:22 - definitely it's
138:23 - interesting um so there we go and in the
138:28 - next thing we're going to look at all
138:29 - these other trig functions and other
138:32 - graphs but for now you know taking a
138:36 - look at the sign and cosine
138:38 - graphs and how we can use it how we can
138:40 - do that with
138:42 - nump so here's a look at all six trig
138:46 - functions and it all comes back to a a
138:49 - triangle like this
138:51 - a right with right angles that if I have
138:54 - the angle here then this would be the
138:58 - adjacent side this would be the opposite
139:00 - side this would be the hypotenuse just
139:02 - as a reference so if we have S then
139:08 - that's opposite over hypotenuse and if
139:10 - we're in the unit circle then that would
139:12 - be the Y value because y would be the
139:15 - opposite from the central angle and the
139:17 - radius would be one cosine adjacent over
139:21 - hypotenuse
139:23 - and in the unit circle that' be the x
139:27 - value the horizontal over radius of one
139:31 - tangent opposite over adjacent and in
139:34 - the unit circle that' be
139:36 - YX and another way to do this because
139:39 - sometimes this is useful It's s over
139:42 - cosine then now we get into the
139:45 - reciprocal functions tangent and
139:48 - coent so tangents opposite over adjacent
139:52 - cotangent adjacent over opposite or
139:55 - another way to write that is one over
139:56 - the tangent that works
139:58 - out secant is the inverse of cosine so
140:04 - instead of adjacent over hypotenuse it's
140:06 - hypotenuse over
140:07 - adjacent or sometimes it's useful to see
140:11 - that it's one over
140:13 - cosine and then
140:15 - cosecant the inverse so it's hypotenuse
140:19 - over opposite or again I can write it
140:21 - one over s now we'll look at the graphs
140:25 - the the CO as we talked about with sign
140:28 - and coine the co- functions are named
140:31 - that way because the graphs are
140:33 - similar and then the reciprocal
140:37 - functions so they're not named Co
140:38 - because of the reciprocal they're named
140:39 - because the graphs are similar so
140:42 - tangent and coent um you know spaghetti
140:46 - but different and we'll look at secant
140:49 - and cosecant but here's I always
140:51 - remember them in this order s cosine
140:54 - tangent cotangent and then secant
140:56 - cosecant so to think about remembering
140:59 - the reciprocal functions tangent and
141:02 - coent are reciprocal and then cosine and
141:05 - secant are reciprocal and then s and
141:09 - cosecant are
141:11 - reciprocal so remembering this way
141:15 - sometimes that that visual helps to
141:17 - remember you know what the reciprocal
141:19 - functions are and when we see that and
141:21 - we see the graph we'll we'll see how
141:24 - secant and cosecant match up with s and
141:28 - cosine so just a good overview of all
141:32 - this before we get into the code you
141:34 - know how all this fits together the
141:37 - reciprocal functions and how they're all
141:39 - all these six trig functions are related
141:41 - to each other we usually see we often
141:44 - don't use these because for a lot of
141:48 - triangle applications s and cosine and
141:51 - tangent work like if I have this I don't
141:54 - also need the reciprocal to solve
141:56 - certain problems but it's good to see
141:58 - all of these together and again the big
142:00 - picture as we get into the code and see
142:03 - what uh what these functions look like
142:05 - and what the graphs look like so let's
142:06 - take a look at the
142:08 - code so we have our graph Dimensions as
142:12 - we were doing
142:13 - before and tangent
142:16 - so mentioned before tangent you know um
142:21 - np. tangent
142:23 - and this line of code why I put this in
142:26 - there so that um tangent will always be
142:32 - this
142:33 - spaghetti because it's Y
142:36 - overx and then you know that's that's
142:39 - always going to work out to be a
142:41 - positive slope and it looks like this
142:43 - and then it's y overx so every so often
142:46 - the x value will be zero and that makes
142:49 - it undefined and so that's why we have
142:51 - these breaks here and so that the python
142:56 - graph doesn't display that as like a
143:00 - vertical line which is not really a part
143:02 - of the graph I have this that if the you
143:06 - know that slope is that difference is
143:08 - always going to be positive so if it's
143:10 - ever less than zero I'm going to take
143:13 - that as not a number and then therefore
143:15 - it won't graph it so this line of code
143:18 - just makes the graph look better by
143:19 - eliminating those undefined
143:23 - points and that's
143:27 - tangent but what about
143:29 - coent so it's co so we expect that the
143:33 - graph is going to be
143:34 - similar and it's a reciprocal function
143:38 - so you know I don't need a tangent
143:41 - button on the calculator most
143:42 - calculators won't have that because of
143:44 - this reason I can just put you know one
143:47 - over tangent is cotangent
143:51 - and that
143:52 - works and being one over I'm still going
143:56 - to include this line and it's just
144:00 - different because I have to make it if
144:02 - it's greater than Z if that difference
144:04 - is greater than zero then make it not a
144:05 - number I'm not going to put these on the
144:07 - same graph so I'm going to comment this
144:10 - out and let's take a look at cotangent
144:13 - so we remember tangent here and then
144:18 - we have the graph of
144:21 - cotangent so we see the slope is
144:26 - negative each time very steep still but
144:28 - negative each time and shifted a little
144:30 - bit tangent graph did go through 0 0 and
144:33 - cotangent doesn't because as the
144:35 - reciprocal yes it's 1 over tangent but
144:38 - that also means it's X over y instead of
144:42 - Y overx so X over y now it's undefined
144:45 - when Y is zero at these points
144:50 - so that's the tangent and cotangent
144:53 - graph um interesting we don't do use
144:56 - them a lot for modeling things but you
144:57 - know we see see these graphs all right
145:02 - our next major grouping is secant and
145:08 - secant does also have a CO graph
145:12 - cosecant let's we're going to start with
145:14 - secant though and there's reason why I
145:16 - mentioned secant and cosine in the same
145:18 - breath um
145:20 - as we were talking about they they they
145:23 - are reciprocals
145:25 - so one over cosine is secant you know
145:30 - that's just how we're going to do it
145:34 - and then we have this
145:38 - and it just works out this way um
145:42 - sometimes you arrive at this um by
145:45 - tinkering a little bit that if the
145:47 - difference is greater than two um
145:51 - then I'm going to make it not a
145:54 - number that still gives me a good graph
145:58 - um sometimes you know I found two Works
146:01 - more or less than that it doesn't it it
146:04 - it kind of distorts the seant graph so
146:07 - there we go I'm just going to graph this
146:09 - seant seant and we'll take a look and
146:12 - see what interesting things this looks
146:15 - like so look at that
146:17 - parabas but you see it kind of Parabola
146:21 - up Parabola down up down up
146:24 - down all right there we go and you see
146:26 - you know our values here
146:30 - so um at 0 0 when the cosine is one you
146:36 - know there's secant and then we start
146:38 - you know when the cosine is zero then
146:42 - it's
146:43 - undefined you can imagine like vertical
146:46 - dotted lines there for these values that
146:47 - don't exist so that's
146:51 - cosecant that's secant but now I
146:54 - actually want to graph this along with
146:56 - the cosine
146:58 - graph um so there we go so I'm going to
147:01 - graph this along with cosine which means
147:03 - I'm going to uncomment this all right
147:07 - and graphing SE graphing these
147:09 - reciprocal functions see and
147:11 - cosine we see how it matches
147:15 - up so you
147:17 - see look at that I looks kind of cool
147:21 - and you see when it one when cosine is
147:24 - one one over one is still one so they'd
147:26 - be the same value and cosine zero that's
147:29 - when secant would be
147:32 - undefined there we go pretty
147:39 - cool and cosecant
147:42 - now so remember we were say that's the
147:45 - inverse of
147:47 - sign um the the uh
147:51 - inverse of s so if I comment this out
147:54 - and we'll take a look at this so just as
147:56 - we
147:57 - expect just as we know that the S
148:01 - and cosine graphs are similar secant and
148:05 - cosecant would be similar to each other
148:07 - I'm only going to show one of it for now
148:10 - and so just graphing the seant
148:14 - graph uh and you see this is what would
148:17 - happen if I don't have the right
148:20 - think it it it graphs that vertical
148:23 - line so when I uncomment that to remove
148:30 - those those
148:33 - values
148:35 - then the graph looks much better and
148:37 - this is the true seant graph that
148:38 - vertical line just wants to connect you
148:40 - know the python graphing wants to
148:42 - connect it
148:43 - but that is not that line is not a part
148:45 - of the graph so that's the true secant
148:48 - graph uh Co graph
148:51 - here
148:53 - and just like the other one comparing it
148:56 - with s so cosecant is one over sign so
148:59 - if I compare that with s we're going to
149:01 - see
149:02 - that that pattern
149:06 - also and there we go sign starting at 0
149:09 - 0 making cosecant undefined and then you
149:14 - know one they the same so pretty
149:18 - cool so so now we have all of the now
149:22 - you're familiar with all of the trig
149:23 - functions so truly there are six trig
149:26 - functions and we see that you can
149:30 - imagine that there's not a lot of
149:31 - applications for the graphs of cosecant
149:34 - and secant you know you know think of
149:37 - something that moves along you know that
149:39 - particular Trend some sort of Parabola
149:42 - then an opposite Parabola not
149:45 - necessarily um
149:48 - but you know they're they're there
149:51 - they're useful they're
149:52 - interesting
149:54 - and you know we also see um tangent and
149:58 - and
149:59 - cotangent um not a lot of uh
150:03 - applications but you know we could have
150:05 - some and so it comes back to modeling a
150:09 - lot of behavior still comes back to
150:12 - sign and you know um yeah even if I was
150:16 - doing something with you know seant you
150:19 - know or then I still might or cosecant I
150:23 - still might you know go back to sign
150:25 - because it's a it's the
150:27 - reciprocal but it's still you know there
150:29 - are the six trig functions but we see
150:31 - why you know it's still all of them
150:33 - based on those X and Y values from the
150:35 - unit
150:36 - circle and so just going directly to
150:39 - them the sign and cosine that ends up
150:41 - being the most
150:43 - useful and we have all these we'll get
150:46 - to Transformations next things we can do
150:49 - to
150:50 - to change these graphs but for now these
150:54 - These are the six trig functions and
150:55 - what their graphs look like let's talk
150:58 - about how we can change the graph of
151:01 - sign now we can apply transformations to
151:04 - any of the trig functions but the sine
151:06 - wave is really the one that we apply it
151:08 - to most of the time um uh number one
151:12 - because that up and down pattern is a
151:15 - common pattern um the other ones don't
151:19 - just don't seem to show up a lot in a
151:20 - lot of applications also uh sign let's
151:24 - say compared to cosine um the fact that
151:26 - it starts at 0 0 again a more common
151:28 - pattern that you know we see um so we
151:33 - apply to a lot of Transformations on the
151:35 - sine wave so I put the regular sine wave
151:37 - here as a comparison so what can we do
151:41 - to transform well I can change the
151:43 - amplitude so I can make it y equals um
151:48 - let's say two times the
151:51 - S of X and so you know working with
151:56 - radians X is the angle in radians uh the
152:00 - Y value is the S ratio
152:03 - so if I have a multiplier of two so what
152:08 - that does is that changes the amplitude
152:10 - and it goes up to two now
152:13 - and down to
152:16 - -2 now notice
152:21 - that the zero still stay the same
152:23 - because if it's zero multiplying by two
152:25 - is going to still keep it at zero but
152:28 - that's one of the things it does the the
152:30 - the this becomes the amplitude and you
152:33 - know whatever multiplier you know goes
152:35 - up and down so that's a pretty good
152:38 - transformation um if I was applying this
152:40 - to let's say sound the amplitude would
152:42 - be the volume um other times just
152:46 - whatever we might be modeling the
152:47 - amplitude might change you know not
152:49 - everything goes you know um up and down
152:52 - the same uh you know just only up to one
152:55 - so one of the other Transformations we
152:57 - can do
153:00 - is um supposing I have the sign of
153:05 - instead of X I'm going to call it
153:08 - 2X and I'm putting uh just number two in
153:11 - here easier for me to draw we're going
153:13 - to get into the code and you're going to
153:15 - see how you can apply you know sliders
153:17 - and you know really Tinker with a few of
153:19 - these and see what the results are but
153:22 - for now you know to illustrate the point
153:25 - so if it's two so if I have the sign of
153:29 - X then multiplying by two here makes it
153:32 - go through that whole cycle twice as
153:35 - quickly so the S of 2x instead of taking
153:39 - you know 2 pi to go down you know that's
153:42 - that's the end point here um instead of
153:45 - taking 2 pi it's going to do that twice
153:47 - as quickly so instead of just going up
153:49 - and down it's going to go like this oh
153:53 - it actually would not change the
153:55 - amplitude though so it's going to go you
153:59 - know up and then down like this and then
154:03 - down and then back up so notice the
154:06 - whole cycle happened here and then we're
154:09 - going to go through that
154:13 - again the second time
154:15 - here hopefully my drawing isn't isn't
154:18 - too bad so you know these are the things
154:21 - a multiplier in there um so for a we can
154:26 - amplitude we can call it a for the
154:27 - multiplier and here we can call it B so
154:31 - um the the per if this is B so the sign
154:35 - of BX so the period is always 2 Pi / B
154:39 - so without any number there it's 2 pi
154:43 - and then if I have this here so then the
154:46 - period is half of that so it's pi and
154:49 - you know we can get smaller and smaller
154:51 - if this was applied to sound um that
154:53 - multiplier would be frequency so these
154:56 - potentially could get to be really high
154:58 - numbers um so we can take a look at that
155:02 - then one of the other Transformations we
155:04 - can do and my graph's getting crowded
155:07 - here so I'll erase all of these and I'll
155:11 - start out with the basic sign graph
155:14 - again so one of the other
155:15 - Transformations we can actually just put
155:17 - a horizontal shift on this
155:20 - so there's my um let's say you know Pi /
155:23 - 2 pi 3 pi over 2 and then that that's 2
155:27 - pi over here so the normal sign
155:32 - graph and
155:34 - [Music]
155:38 - there work it's going to work better
155:40 - with the
155:41 - code um there we go somewhere like that
155:45 - all
155:45 - right that'll be the reference point and
155:49 - if I have a u phase shift so if I have
155:55 - over here you know y equals the S of x
156:02 - minus I'll make it a nice even Pi /
156:05 - 2 so we see if I apply this phas shift x
156:10 - minus Pi / 2 so that every point it's
156:13 - graphing it shifts it to the right which
156:16 - seems counterintuitive because you're
156:17 - subtracting but remember you're graphing
156:19 - what was pi/ 2 before that so instead of
156:25 - here it's going to shift pi over two and
156:27 - then it's going to go like this you see
156:30 - and then down and then it's going to
156:33 - continue like that so that gives it the
156:37 - horizontal
156:39 - shift and there we go and we can shift
156:42 - it as much or as little as we want
156:44 - horizontally um so notice then if we
156:48 - shift if it was X plus pi over 2 it
156:51 - shifts the other way which then would
156:53 - line this up at one so s of so the S of
156:59 - X so the S
157:02 - of x + Pi /
157:06 - 2 would shift it the other way and then
157:09 - that would
157:10 - equal the cosine of
157:13 - x so remember you know very similar
157:15 - graphs but they're just shifted so if we
157:19 - put that exact shift on there then that
157:20 - that would equal to cosine of x so we
157:23 - have all these um we we can also do a
157:25 - vertical shift that after all of this
157:28 - it's the same shape of the graph and
157:29 - then just shifts it up that's a pretty
157:32 - common shift um especially when we talk
157:34 - because the sign value goes into the
157:36 - negative so maybe if we're talking about
157:38 - Tides or you know phases of the moon or
157:41 - something um we can uh apply a vertical
157:46 - shift so that it doesn't ever go below
157:48 - zero or that the minimum isn't zero it
157:51 - might even be some other number so we
157:53 - see all these different shifts here that
157:56 - I can apply um an
157:58 - amplitude or the uh change of the period
158:02 - or a horizontal shift and then we can
158:06 - also have a vertical shift but let's
158:08 - take a look at this in the code and
158:10 - we'll see the different things we can do
158:12 - and then you can create this and then
158:14 - you can add some sliders and Tinker with
158:16 - this and see some of the effects so
158:18 - let's take a look at this in the code
158:22 - I decided to do this with an interactive
158:25 - which will create sliders so with that
158:28 - we need to import uh the interactive and
158:33 - uh math in line so all these other
158:37 - things were things that we used
158:39 - before set up the graph Dimensions here
158:43 - and I decided to just give these minimum
158:46 - and maximum values um you'll see that
158:48 - you'll see how that plays out um the
158:51 - points uh 10 times that so you know uh
158:57 - 110th that would be that should be
158:59 - pretty good and here creating the x
159:02 - value so remember Lin space um creating
159:05 - the X values that we're going to use and
159:08 - with that interactive we're defining
159:11 - this function I just decided to call it
159:13 - graph um and we're defining this
159:17 - function which we're then going to pass
159:19 - these values uh from the interactive and
159:22 - in this function everything that I would
159:25 - do to graph
159:27 - um the plot subplots and here this is
159:33 - just you know um something here to
159:37 - display the graph that we're going to
159:40 - have on the on the plot so um I made
159:45 - these EQ and eq2 to split out these
159:49 - function these uh strings
159:52 - really um you could actually have put
159:54 - them in here directly if you wanted to
159:56 - that works just as well um and then the
160:00 - values a b and c so I put this in the
160:04 - title so F and then the single quote we
160:09 - have a EQ b eq2 c so these are all my
160:14 - variables that's how you would display
160:16 - the variable without having um extra
160:18 - quotes sometimes if you if you do it in
160:19 - a different way it displays with quotes
160:22 - looks different so you know taking these
160:25 - values that I have and I threw in two
160:27 - more string values so I just put all
160:29 - them that's going to be the heading for
160:30 - the graph the title for the graph and
160:33 - then down here we have the
160:35 - interactive um that's going to create
160:37 - our slider so um the interactive and
160:40 - then I'm going to say I'm going to run
160:42 - the graph function and here's my sliders
160:45 - a equals b equals C equals and I give my
160:48 - ranges that's probably a good range to
160:50 - illustrate what we want to illustrate
160:52 - here so all of that and then the last
160:54 - line of code is just I called I called
160:57 - it IG so it's just IG and that's
161:00 - it so when we run
161:03 - this it's going to give us these three
161:06 - sliders here and we see at the top um
161:11 - now when you first run it everything's
161:13 - going to come into zero and your graph
161:16 - is just zero out but
161:19 - as soon as I have um a is
161:23 - one well that's still sign of zero is
161:28 - still zero so that's still zero is out
161:30 - but if I have B is one now that's my
161:34 - normal sine wave so you know sine of X
161:39 - and then C is the shift so if I move C
161:44 - we see that shifts it up I can move it
161:47 - again
161:49 - it'll display it here so you know what
161:50 - you're graphing and we can move these
161:53 - down so we see the shift
161:58 - here and a is the amplitude let's get
162:02 - this back to zero I like that so if I
162:06 - increase the
162:07 - amplitude I get graphs like this so
162:09 - remember zero is still zero but the
162:14 - amplitude increases and if this was
162:16 - something a sound wave the amplitude
162:19 - relates to the
162:20 - volume and
162:24 - B
162:26 - increases
162:27 - or uh increase the number of waves incre
162:30 - if this was music it would be increasing
162:32 - the
162:32 - frequency um just the regular graph
162:35 - we're saying it decreases the period of
162:37 - the graph
162:39 - so we can have
162:43 - these and you see I just increased it a
162:46 - little bit that's enough to illustrate
162:47 - what we want and we see you know I made
162:50 - um you know 10 points for every integer
162:54 - and as we start increasing the frequency
162:56 - like this we start seeing it get a
162:57 - little bit choppy not quite as smooth
163:00 - you know this is still a nice smooth
163:03 - sign sine wave so we see this and then
163:06 - still we can always move that up or
163:11 - down there we go so creating the uh we
163:16 - we can see the shift you know that
163:19 - uh first number um the multiplier that's
163:23 - the amplitude you know the default is
163:25 - one um zero would just zero everything
163:28 - out that wouldn't accomplish anything
163:30 - and sign so in this case the sign of 2x
163:34 - so that two represents that's B
163:40 - um and increasing B decreases the period
163:44 - of the graph or we could say it
163:46 - increases the frequency and C is the
163:49 - vertical
163:52 - shift
163:54 - so we could change this you know you
163:57 - could change these if you want you know
163:59 - Tinker with this but you you get to see
164:02 - what um these different values do with
164:04 - your
164:05 - graph so what if we have two waves and
164:10 - we're
164:11 - interacting and again I just picked sine
164:13 - waves um that illustrates our
164:17 - Point um I have this I'm not doing this
164:20 - as an interactive so I just have the
164:22 - graph Dimensions
164:24 - here the plot information here and you
164:29 - know just down here um I have Chang
164:33 - these I can I can go in and change these
164:36 - to whatever we're going to run this
164:38 - first and then um then we'll come back
164:40 - and change these and then the last few
164:43 - things just you know plotting one of
164:46 - them is blue one of them is green and
164:48 - then the the combination is red so what
164:51 - do I have here my first one I'm graphing
164:53 - your normal sine wave the second one I'm
164:57 - graphing it with a shift so other than
165:00 - multiplying something times x in inside
165:03 - that s function if I add or subtract
165:06 - that shifts it to the left or right so
165:08 - it's the horizontal shift and I'm just
165:11 - going to say minus math.
165:13 - Pi so when I have Y3 which is the inter
165:19 - fraction of these two so look
165:21 - my one graph my blue graph is my sine
165:24 - wave my green it shifts it enough that
165:27 - it lines up perfectly to be exactly the
165:31 - opposite and so the red line is the
165:34 - combination of two and it zeros out
165:40 - everywhere so um I mean this is really
165:43 - how also you know thinking about sound
165:45 - frequencies this is how noise cancelling
165:47 - headphones work and there's enough time
165:50 - to do all of this um and still process
165:54 - the audio that it detects the waves and
165:57 - then generates the exact opposite so
165:59 - that what you hear is this zeroed out
166:01 - sound but what if I make it I if I make
166:05 - them both the same that's not going to
166:07 - well actually it'd be really interesting
166:09 - here you won't notice
166:11 - this in the red in the blue and the
166:14 - green but if I make them exactly the
166:17 - same he say see the blue and the green
166:20 - are on the are on top of each other so
166:22 - we can't see that but the red adding
166:26 - them it increases and decreases you see
166:30 - not not quite the same as just
166:32 - increasing the amplitude
166:35 - um but you know it adds them so actually
166:40 - it is the it it would be the same as
166:41 - increasing the amplitude because two
166:43 - times
166:44 - sign so if I have a little shift here
166:51 - I'll say minus
166:53 - three so you
166:55 - see not quite pi and
166:58 - so it you know quick glance it looks
167:01 - like they kind of line up but then this
167:04 - red line you know adds it up a little
167:07 - bit now supposing I if I have
167:11 - um you know some shift like that like
167:15 - one and what do we see we see that as
167:19 - they get
167:20 - close um and look at this this
167:23 - interaction you know not the highest
167:25 - point for the blue or the green but
167:28 - almost the highest for them and then you
167:31 - know in between that is the highest
167:35 - combination and so we see now this is
167:38 - what we have when we talk you know if if
167:40 - this was audio this would be beats if we
167:44 - have you know different frequencies and
167:46 - then when they line up we it magnifies
167:49 - them because it gets louder so if we had
167:53 - this um
167:56 - if if I just changed it to it's
168:02 - two and we see now this is where it
168:05 - would just be um uh we could call it
168:09 - dissonance it doesn't line up it's you
168:12 - know we see um the Blue Line the green
168:16 - line and then given that combination
168:19 - then the highest value would be in
168:21 - between and
168:23 - so it kind of it would just if this was
168:26 - audio it would just be all muddled
168:27 - together because the the highest point
168:30 - isn't really you know lined up with
168:32 - anything now here's one of the
168:35 - interesting things we can
168:36 - do for the second one I'm not going to
168:39 - do a shift I'm going to have this one as
168:43 - two times that
168:46 - so it's going to be a higher frequency
168:49 - so we see the blue is our sine wave the
168:52 - green is the higher frequency and you
168:56 - see again we have the red line the
168:59 - combination the highest point is you
169:03 - know not quite the highest point of both
169:05 - of them here but you know in between
169:08 - that and then we get the lowest point so
169:11 - we get these other
169:13 - interesting relative highs and lows but
169:15 - then we get the lowest point here
169:22 - and that again would correspond to you
169:26 - know a beat in sound or something uh you
169:31 - know regular when it lines up so if we
169:35 - multiply it by
169:39 - three we see these interesting patterns
169:41 - you know the
169:43 - comparison a little bit more
169:46 - muddled as it's multiplied by three
169:51 - but watch this what If I multiply it by
169:59 - four we still start seeing
170:03 - um this and very interesting that the
170:07 - red line seems to
170:09 - follow the green line a lot more than
170:12 - the
170:13 - other so
170:17 - um what we what makes things
170:20 - harmonious would be if I
170:24 - multiplied this by
170:28 - three and this by
170:31 - two so now we get something that these
170:35 - won't always line up you know where
170:38 - where some of the other face shifts who
170:39 - made made them line up you know keeping
170:42 - One S of X the other one s of 2x 4X or
170:46 - 8X they're going to line up on regular
170:48 - reg reg regular spots but if I have
170:57 - this so now we really see times when
171:01 - they line up kind of nicely and then
171:03 - that leads to a higher beat
171:06 - and this is
171:09 - harmony so the you know these are the
171:12 - things that that lead to Harmony we want
171:15 - it to seem clear you know yes there's
171:17 - times when they don't up but then
171:19 - there's times when they do and then
171:20 - that's really clear and
171:25 - as Aristotle said that the things that
171:29 - we look at these patterns the things
171:30 - that please the eye that please the ear
171:32 - that please the mind are all very
171:34 - similar types things it's these
171:36 - interesting patterns
171:38 - so in this you know you can Tinker with
171:40 - all sorts of things and see how it plays
171:43 - out um you know what looks like it leads
171:47 - to more Harmony and not and not um
171:52 - there's even um we can even do like
171:55 - python um playing audio sounds related
171:58 - to that um most audio sounds are much
172:01 - higher frequencies than we're talking
172:03 - about here it would be more like the
172:05 - sign of like you know
172:08 - 200x or you know everything from you
172:11 - know 20
172:13 - 30 x to a really low beat to you know
172:17 - 4,000 x you know the highest notes on
172:20 - the piano
172:22 - so you they're much higher numbers and
172:25 - looking at the graph would be a much
172:26 - more dense graph but you'll still be
172:28 - able to see where those beats come up
172:31 - um if we have this like
172:36 - um 200 and this would be
172:45 - 300 so we see much higher frequencies
172:48 - but we can see where these beats line
172:53 - up yes and again cool things for you to
172:56 - Tinker with um but you see here the
172:59 - normal graph code and really what we're
173:02 - doing is we're just graphing you know
173:05 - two different sine waves and then the
173:07 - third one is the
173:11 - combination so that's what we wanted to
173:14 - get to you know we look at waves we look
173:17 - at trig we look at waves and then we
173:19 - look at interacting waves and this is
173:22 - just the beginning there's a lot more we
173:24 - can do with this so some of the things
173:26 - that we want to talk about here now that
173:28 - we've looked at you know transformations
173:31 - of sine waves is if I have data that
173:35 - shows some sort of periodic trend um
173:38 - phases of the moon levels of Tide you
173:41 - know higher or lower um possibly even
173:45 - you know um a store and then the crowd
173:48 - levels you know how many people fewer
173:51 - people anything that tends to go up or
173:54 - down on a regular basis because if it's
173:58 - irregular then I can figure out this
174:02 - pattern but then it's going to change so
174:04 - you know it becomes not that predicting
174:07 - um but if it if it's established that
174:10 - it's regular then we can start looking
174:12 - at what formula can I use to predict
174:15 - this and very often it's a modification
174:17 - of a sine wave we could modify a cosine
174:20 - wave and really you know the the
174:23 - difference is the shift or the
174:24 - difference is where we want this to
174:26 - start so if we shift a sine wave you
174:28 - know it's cosine so very often we we use
174:31 - a sine wave but if I have something you
174:33 - know I have some data and it doesn't
174:36 - even have to be a perfect sine wave
174:38 - we're going to look at just ways we
174:41 - can grab that you know some of the key
174:44 - points and sketch out a sine wave that
174:47 - matches this so that that's really what
174:49 - we want to do we want to see if we can
174:51 - you know match up something well enough
174:54 - to make it predictable um you know can I
174:58 - match something well enough that I can
175:00 - use it to
175:01 - predict um and and that's the thing if I
175:03 - can that that's great this is also as we
175:07 - get into we're going to do a lot more of
175:09 - this in like other you know uh font you
175:12 - know stats statistics classes um you
175:15 - know more on data analysis but I
175:17 - definitely wanted to include this
175:18 - throughout this uh throughout this
175:20 - course just some different things that
175:22 - you can do um you know one of the things
175:24 - is you know grabbing data from somewhere
175:27 - another thing would be you know what can
175:29 - I do to you know display this and um you
175:34 - know uh use uh some adjustments to see
175:38 - what what sort of sine wave might
175:39 - approximate this but as we'll see it you
175:43 - know things aren't going to be exact
175:45 - we're just going to see can we get a
175:46 - good approximation that's really kind of
175:48 - the goal here can I get a can I get a
175:51 - good can I get a good enough
175:53 - approximation that I can use this to
175:55 - predict and you know if we can that's
175:58 - great if not then we have to keep
176:01 - looking so let's take a look at this um
176:05 - I just want you know just with this
176:06 - sketch I just want to introduce it but
176:08 - with the code we're going to look at you
176:10 - know how we can do this and this is
176:12 - really going to connect with a lot of
176:13 - our how a lot of our trig functions even
176:17 - um help us with you know data analysis
176:20 - so let's take a look at that let's look
176:21 - at the
176:22 - code so let's just take a look at a
176:25 - little bit like what we can do to model
176:29 - these repeating functions and you know I
176:32 - like I like to go back to Tides because
176:35 - it's a repeating uh pattern you know
176:38 - high tide low tide up and down
176:40 - reasonably predictable but it's not
176:43 - perfect and that's that you know that
176:46 - that gives us that ability to say hey
176:47 - can I predict this um knowing that you
176:51 - know my prediction might not be exact so
176:55 - we're going to look at as we looked at
176:57 - before ways to get the data and in this
177:00 - case um I already um downloaded this uh
177:05 - CSV and then we have this dialogue to
177:09 - upload it from the
177:10 - computer so you know we upload it
177:14 - and um I'm going to store that so I'm
177:17 - going to read this and store it this
177:20 - time as all data and I'm going to make
177:24 - this
177:25 - table um uh tie
177:28 - data uh there we go I probably didn't
177:31 - need the extra variable here but in some
177:33 - other things I was doing I used tie data
177:35 - so I just wanted to make that connection
177:37 - rather than re rather than rewrite other
177:39 - things that I was
177:41 - trying um I also you know good sometimes
177:44 - if you get the data from somewhere put
177:46 - the comments in there of where you could
177:48 - get this and I'm going to do a couple
177:51 - things here so like I said I already
177:52 - have this uploaded and then in the code
177:57 - because I wanted both of these I wanted
177:59 - this describe but then if I just print
178:03 - out the headers if I just do this um I
178:07 - could just do tie data. describe and if
178:12 - I just did that it would print it out if
178:14 - I just did TI dat. head it would print
178:17 - that out but it wouldn't do both so I
178:20 - have to put the first one in a print
178:21 - statement and then this one can be the
178:25 - last line of code here so everything for
178:29 - uploading it and then I have this
178:31 - description here so I can see all my
178:34 - different headers water
178:35 - level um and everything this is kind of
178:39 - what I want um all these different water
178:42 - levels and uh the
178:45 - count and then we have the
178:48 - headers and what do we have date
178:53 - time and water level there we
178:56 - go
178:58 - so we can convert this date time into
179:02 - something and use that and water levels
179:06 - and graph this you know pretty cool um
179:10 - we we've been doing some things like
179:11 - that before so far in the course so I
179:14 - just wanted to show you that once we
179:16 - have this um I actually used uh jet GPT
179:20 - for this one part to show you
179:24 - um I I did modify it but I got a lot of
179:27 - this from there and and that's the whole
179:29 - thing like if you have data now
179:31 - sensitive data you wouldn't want to use
179:33 - use that for but you know this was
179:35 - already public data um I already knew um
179:41 - that this count was 169 but it's kind of
179:45 - weird going right up to that limit seems
179:47 - to not work properly so I really made
179:51 - this tie
179:52 - data um you know all data uh head but
179:57 - see if you just put head the
180:00 - header by default it'll just give you
180:03 - you know the first five but you can put
180:05 - a number in here and in this case I
180:08 - wanted the first 100 so now that's the
180:11 - tie
180:13 - data extract the necessary columns um
180:17 - there we go I'm
180:18 - so right away I'm just going to convert
180:20 - it to date
180:21 - time and given the format that it was in
180:24 - that works out nicely that just
180:25 - converted it to time so I now and I know
180:28 - that I have this Val value water level
180:33 - um and this extra space because as I
180:36 - found out that um who whoever made this
180:40 - table put the extra space in there and
180:43 - so I needed to include that in my code
180:46 - um so now I have time and height as two
180:50 - different arrays
180:52 - so um you know convert it days since the
180:55 - first measurement so we're going to
180:57 - convert this um and in total seconds so
181:01 - really this is just you know the math U
181:03 - minus the minutes
181:06 - uh so you know we're going to convert
181:09 - this to this time
181:11 - and this defines a sinodal
181:16 - function so we're going to take a look
181:18 - at this um there we go so remember a for
181:24 - the amplitude sign so it's a numpy
181:27 - function so np. sign
181:30 - B uh determines the period of the
181:33 - function um that shift here xus C and
181:37 - then D the vertical shift so we just
181:40 - Define the sinodal function here um
181:43 - taking in these values x a b c and d and
181:49 - now what we can do is this curve fit
181:54 - function based on that sinal function
181:57 - taking in time and
182:00 - height and create this you know the
182:04 - predictions as a sin ofo function so
182:07 - what we have here we can
182:10 - plot the original so we you know plot um
182:15 - plotting the original um
182:19 - actual and predicted tide height and
182:21 - we're going to have their X label and Y
182:25 - label and what we have is this now doing
182:30 - this
182:32 - um you know on your own that that might
182:35 - take some time oh you know thinking
182:37 - about these Soso functions and you know
182:40 - writing some of that
182:41 - code it it's nice to be able to to do
182:44 - that in like a few seconds and what we
182:46 - get is that sign your toal function
182:49 - based on the data we can get that
182:51 - estimate and it's pretty good so we do
182:55 - see that you know the height gets a
182:58 - little bit higher than expected here um
183:02 - and a little bit lower than expected
183:03 - over here so we get that V variability
183:07 - here um we could possibly do more
183:11 - analysis for a better graph but
183:14 - um quite honestly in tinkering I'll give
183:18 - you the insight and save you the time in
183:20 - tinkering with this I wasn't able to get
183:22 - a better graph than than this one so
183:25 - pretty good just some examples of what
183:27 - you can do um creating that sinodo
183:30 - function and you could work it out to
183:35 - you know predict if you have the same
183:38 - type of thing you know this happens to
183:40 - be time and water level but you could
183:42 - have you know time and water level of a
183:45 - larger data set um remember going back
183:49 - and just putting all this you know in
183:52 - this table name um you know we could
183:55 - call we could always call this table one
183:57 - as as I've done in other examples um
184:01 - once we have that you can always go back
184:04 - and do and you know all these very
184:06 - similar functions you know to estimate
184:09 - the sinos staph and that's often what we
184:11 - want to estimate if I have something
184:14 - that's periodic data some it goes up and
184:16 - down up and down can I predict when it
184:18 - goes up and down up and down um and
184:22 - certainly you know as as bonus knowledge
184:24 - for you here there's a um certainly you
184:27 - know things like stock prices go up and
184:29 - down so people would love to be able to
184:32 - use this to model different prices and
184:35 - um on the stock market and what happens
184:39 - is you can create these great models but
184:41 - it really doesn't hold up so you know
184:44 - you end up saying oh my mathematical
184:46 - model says it might be this but you know
184:49 - that's less predictable than the
184:51 - tides so there you go some you know some
184:55 - useful predictions um you know try it
184:58 - with some other data and you know see
185:01 - see how close you can
185:03 - get here's just some ideas for building
185:07 - an analog clock based on tree so the
185:11 - clock I need a clock face and that would
185:14 - be a circle we could talk about the unit
185:16 - circle but there's actually also a
185:18 - built-in draw Circle function in in
185:21 - Python uh Matt plot Library
185:25 - so
185:27 - then
185:29 - my angle would you know referencing the
185:32 - unit circle would be an angle something
185:34 - like this and remember I probably
185:37 - easiest to just make it start at 0 0 and
185:40 - then the end point of whatever hand of
185:42 - the clock would be the x value you know
185:46 - if that's my angle cosine of that angle
185:49 - would be the x value s would be the Y
185:52 - value and I'll tell you this remember as
185:56 - the angle goes around it's going to go
185:58 - this way starting at about 3:00 going
186:01 - counterclockwise two things we don't
186:03 - want so we want our shift we want it to
186:07 - start up
186:09 - here so we need to apply a shift to this
186:13 - and then also we want it to go the other
186:16 - way so we could actually have the angle
186:19 - be
186:20 - negative and that would make it go the
186:22 - other way so we could just make each of
186:27 - these negative to make it go around the
186:31 - other way and then apply the shift um we
186:36 - could and then you could Loop through
186:39 - this um you could have uh radians and
186:44 - then 2 pi ided 360 for each
186:48 - second um 2 Pi / 12 for each M um each
186:55 - hour and you know adjust the minutes
186:59 - so um it might be more interesting to
187:03 - also see the second hand so you could
187:06 - have you know the three hands and you
187:10 - could make these a little bit shorter or
187:12 - a different color for each you know that
187:15 - might be interesting um
187:19 - so I want to give you some some hints
187:22 - here as you work on it and then you know
187:25 - we'll go over you know exactly how you
187:28 - you know to make this happen but give it
187:30 - a try um you know set this up this would
187:33 - be and I I'll tell you this to make this
187:35 - shorter you could have some multiplier
187:38 - here in front of s and cosine so the
187:41 - radius is one if I have my unit circle
187:44 - so s and cosine but if I made and cosine
187:49 - you know some other multiplier if it was
187:51 - two then this would be twice as big if
187:55 - it was one half it would be a little bit
187:57 - less so we can you know you can apply
187:59 - some of
187:59 - those so that would that would be it you
188:02 - know set up your Loop set up your
188:04 - drawing a line from here to here um
188:08 - showing you some animation that you can
188:10 - do on the on the graph um you know
188:14 - decide how long each thing pauses you
188:17 - know have your animation and uh you know
188:21 - give it a try Tinker with it run it see
188:23 - how it goes all right let look at the
188:26 - Cod we will just show this first part
188:30 - displaying a clock with the hours and
188:32 - minutes we're going to get the current
188:33 - time and then display it once
188:36 - interesting and you'll see then how we
188:39 - can build upon that the next thing we'll
188:41 - do is the set to show the seconds um all
188:46 - right so let's jump jump into this here
188:48 - so displaying the clock this is nice
188:50 - because it'll give you an illustration
188:51 - of putting together displaying a circle
188:54 - drawing a line plotting points and using
188:57 - sign and cosine and how those how we
189:01 - have those adjustments here
189:03 - to uh take the time of day and translate
189:07 - this into lines on a graph so you see
189:09 - all our Imports um P plot display um
189:14 - importing math time and date time
189:18 - okay so um I'm going to set up the plot
189:21 - for the clock face so classic setting up
189:25 - you know
189:28 - subplots now I called my variable Circle
189:31 - here's what we're going to do we're
189:32 - going to plot a circle um Center rad uh
189:35 - radius and fill equals false because I
189:38 - want it to be open uh you could probably
189:42 - put this you know make a different
189:44 - colored clock face if you want but I
189:46 - want it just open right now
189:48 - this a lot of times I graph and I don't
189:50 - worry about this um but remember python
189:54 - skews the X and Y axis a little bit so I
189:59 - make this equal so it's a nice Circle
190:00 - for our clock here um rather than having
190:03 - a weird oval clock all right and
190:06 - creating the circle up here then add
190:09 - artist and I'm going to add the circle
190:11 - to my
190:13 - plot and each axis there we go um so the
190:19 - radius is one I'm going to make this 1.5
190:21 - in each Direction I know just to tie in
190:23 - the math and you know give us a little
190:25 - bit of buffer around the edges there we
190:27 - go um dots to represent the 12 numbers I
190:30 - said Dots here um but I actually I'm
190:33 - going to make it blue
190:36 - triangles okay so in range 13 because
190:40 - remember it's going to start at zero
190:42 - which is fine and then um if I have
190:45 - range 13 the less one it will do is 12
190:48 - and that's what I want okay so what am I
190:51 - plotting here I'm plotting notice these
190:53 - square brackets that's going to be one x
190:57 - coordinate and then after that it's
190:59 - going to be one y-coordinate okay so
191:01 - what do I have um math. cosine and what
191:06 - do I I want um B is my variable that I'm
191:09 - going to Loop through from 0 to 12
191:14 - and each of these um
191:17 - so if
191:19 - the circumference is 2 pi in radians and
191:24 - then 2 pi divided by 12 for each number
191:27 - so that ends up being math. Pi / 6 and
191:33 - so you know I'm going to plot that that
191:37 - times so these are all my angles
191:40 - btimes math. Pi / 6 because each time so
191:45 - that value Pi / 6 * 0
191:47 - > 6 * 1 > 6 * 2 all my different angles
191:51 - and then the x value will be the cosine
191:55 - of that and then the Y value will be the
191:57 - sign of that and notice again these are
192:00 - just one po you know that's one point I
192:02 - can do all the math right there within
192:04 - the brackets here and each of them I
192:07 - chose to make it a blue triangle just
192:09 - because all right so there we go so
192:11 - that's going to plot and we could put
192:14 - the numbers there I actually decided to
192:16 - just make it
192:18 - triangles so now we have our Circle we
192:21 - have a triangle for where each of the
192:24 - numbers would be around the clock and
192:26 - minutes each of these I'm going to get
192:29 - this variable datetime do now um that's
192:33 - why I imported date time and then I'm
192:35 - going to call you know my my variable
192:37 - time
192:38 - now the uh and and actually just to
192:42 - confirm uh you know cuz writing some
192:44 - different code in different languages
192:46 - the syntax is a little bit different I
192:49 - looked up um you know another free code
192:51 - Camp uh colleague of mine colade wrote a
192:54 - great article about you writing a code
192:59 - in Python to get the date and the time
193:01 - hours minutes seconds nice brief article
193:05 - uh so that was what I Ed as a reference
193:08 - you know so thank you clad all right so
193:11 - um get the time now and then time not
193:15 - now so I like this Str strf time so
193:20 - really it's probably a shorten version
193:21 - of the word stringify
193:24 - so uh that percent sign capital M in
193:28 - quotes so that's going to get the
193:30 - minutes and then I want to cast that as
193:32 - an integer so there we go so I get my my
193:36 - time now which is my date time object I
193:39 - want to get the minutes cast it as an
193:40 - integer and then what am I doing for
193:44 - these minutes so I have to do
193:48 - again 2 pi for the whole circumference
193:51 - divid by 60 minut 60 60 Minutes is going
193:56 - to be 2 pi ID 60 is pi ID 30 then I
194:02 - have the minutes is going to be whatever
194:05 - minute this is um but I want this to be
194:08 - negative because as this goes through
194:11 - for whatever minute remember uh remember
194:14 - the way the angles go where they would
194:16 - start part for an angle of zero in the
194:20 - at the bottom of the first quadrant and
194:22 - then the way the angles go around in
194:25 - trigonometry for S and cosine I need
194:27 - this to be negative because I need my
194:30 - minute hand to circle around the other
194:31 - way so that's why that's negative and
194:34 - then remember they would normally start
194:36 - at what would be 3:00 so I have to have
194:38 - this shift of pi over 2 so that it
194:42 - starts up at noon or at 12:00 so that's
194:45 - where we have this part here for the
194:46 - angle I have this part for the shift so
194:49 - it starts at what would be 12:00 and
194:52 - then you know calculating the minutes
194:55 - and this is negative so that it goes
194:57 - around in the correct direction so now
194:59 - that I have this uh minute and my minute
195:04 - angle I'm going to plot this so the
195:08 - minute a you know get the time stored
195:11 - for that variable minute and then for
195:13 - this variable minute angle Min angle so
195:16 - now I'm going to plot and uh zero so the
195:21 - the x value is zero and then for the
195:24 - minute hand I decided to call it 0.9
195:26 - it's we're in the unit circle so I
195:28 - wanted to make this uh 0. n uh for the
195:31 - minute hand as the length of that hand
195:35 - and then I'm going to do the cosine of
195:37 - that angle because I already worked out
195:39 - what what that angle should be so there
195:42 - we go starting at zero and then the
195:45 - coine of that angle and then the Y y
195:47 - value starting at zero and then the sign
195:49 - of that
195:51 - angle and in this case notice B without
195:54 - anything else so that line that minute
195:56 - hand is going to be a blue line going
195:58 - from this point to this point and hours
196:01 - now very similar I already got my time
196:05 - now variable so now I'm going to
196:07 - stringify hours cast it as an integer
196:11 - now that's going to give me hours um for
196:14 - mine I put minus 4 because that's
196:16 - Eastern time and that's what uh that's
196:20 - what my uh uh computer is going to
196:24 - display so store that as hours and then
196:27 - very similar to the way we did minutes
196:29 - negative because I needed to go around
196:33 - clockwise and then the shift because I
196:36 - needed to start at what would be noon so
196:39 - then also hours 2 Pi / 12 which is Pi /
196:44 - 6 so there we go so I have how many
196:47 - hours and there we go so that's my H
196:51 - angle and then here's what I'm going to
196:53 - plot starts at 0 0 um I decided to make
196:57 - this
196:58 - 7 as the length of that so the x value
197:02 - is the cosine of that angle and then the
197:05 - Y zero there we go
197:09 - and there we go so I didn't just do this
197:12 - so that it showed up as7 but it's a
197:14 - happy coincidence so
197:17 - sign for the yv value and again that
197:19 - Line's going to be blue
197:21 - too and then after all this I'm going to
197:23 - show the plot so there we go so we have
197:26 - this set up the clock face the numbers
197:29 - how to set up the minutes how to set up
197:31 - the hours and then when we run
197:38 - it it looks like this so this is the
197:41 - time right now you see
197:45 - 335 and this is what our clock would
197:47 - look like nice it gives you just one
197:50 - simple um display but what if I also
197:54 - wanted the
197:55 - secondhand so I'm going to do the same
197:58 - thing but I'm going to put everything in
198:01 - the loop um for
198:03 - seconds same Imports but now I'm going
198:06 - to do a loop and you you could make this
198:10 - you know whatever number you want I just
198:12 - decided to end it here which is you know
198:15 - just over a minute
198:17 - um you display this it looks neat and
198:20 - then you know maybe at just over a
198:22 - minute you're not looking at it anymore
198:24 - I don't know I just decided there so
198:26 - times sleep is one because I do want
198:28 - this to happen every
198:29 - second and what am I doing each time I'm
198:33 - going to clear the
198:35 - output and you'll see then it'll display
198:39 - this I I I have this first uh I have the
198:43 - the waiting and then the clearing the
198:45 - output first because as it goes through
198:47 - the loop I just would rather have this
198:49 - come come up first I probably could have
198:51 - put it last but I I think it works out
198:52 - better to put it
198:54 - first and the rest of this is very
198:56 - similar you know all these same
199:00 - subplots um same thing for the 12
199:04 - numbers
199:06 - and minutes and hours are the same so
199:09 - let's look at seconds what am I doing
199:11 - for the seconds here all right so this
199:14 - angle um you know 6 seconds so I'm still
199:18 - doing you know 2 piun / 60 Ork / 30 um
199:23 - still negative angle uh this one is just
199:27 - a because that's my looping
199:30 - variable a for the for the angle and you
199:35 - know still the same shift so there we go
199:38 - just just like the other hands the the
199:40 - shift so it starts at
199:42 - 12:00 and then the negative angle so
199:44 - that it goes in clockwise Direction
199:47 - and then I have I just made this X and Y
199:50 - for cosine and
199:53 - S and now um what I have is I'm going to
200:00 - plot there we go um the X Val this is a
200:06 - line from zero the x value goes from so
200:10 - the first XY value is 0 0 the second XY
200:15 - value is XY as I have defined it up here
200:18 - and then second hand's going to be red
200:20 - just
200:21 - because so there we go so all of this
200:25 - and just notice the indent all of this
200:26 - is in loop again I think it works out
200:28 - better because I have to Loop for the
200:30 - second hand it really just kind of
200:33 - redraws it all and it this is not that
200:36 - many lines of code and it redraws it in
200:39 - a reasonable amount of time so now I
200:41 - have same time and we see the second
200:44 - hand there we go
200:49 - and it seems like it's right on track
200:53 - with you know every
200:55 - second and that's good and so this will
200:58 - continue on it'll loot for just over um
201:02 - just over a minute and then it'll stop
201:05 - you could always change the loop or you
201:07 - could do something else with this if you
201:09 - wanted to make something that displays
201:11 - it um you know on a you know even longer
201:16 - so so but there you go and hopefully um
201:21 - then this clarifies maybe you tried this
201:24 - already and you know we're kind of
201:26 - getting a you know you might have gotten
201:28 - a little lost on exactly what the shift
201:30 - should be or you know maybe you forgot
201:33 - the negative or something like that you
201:35 - know to make it go clockwise so
201:36 - hopefully this clarifies it and you can
201:40 - see U how to make the
201:42 - clock all right so enjoy I I think this
201:46 - is a just a fun project putting it all
201:49 - together so here we're going to go
201:52 - beyond the right triangle we don't even
201:54 - need a right angle anymore to figure out
201:56 - angles and sides and the first rule that
201:59 - we're going to look at at that does this
202:01 - is the law of signs so every side is
202:06 - proportional to the angle across from it
202:09 - so if I have you know that angle C opens
202:13 - up to side c angle a opens up to side a
202:18 - angle B opens up to side B so we have
202:21 - this three ways you only need you know
202:23 - two of these parts but a is proportional
202:26 - to side a b is proportional to sign of
202:29 - or angle b c is proportional to the sign
202:32 - of angle C so if we have any of these
202:37 - you know if I if I know an angle in the
202:39 - side across from it that's the key an
202:42 - angle on the side across from it to set
202:43 - up that proportion and then if I know
202:47 - one other angle or side I can figure out
202:49 - the other
202:50 - one and you see once we know some things
202:53 - we can figure out some more and then you
202:55 - know maybe then I know two angles I can
202:57 - do subtraction to figure out the third I
202:59 - can do law of signs again to figure out
203:01 - the other side and there we go knowing
203:05 - three things about a triangle I can
203:06 - figure out everything
203:08 - else so let's see how this would work so
203:11 - let's say you know I know that angle C
203:14 - I'm going to use degrees that angle C
203:15 - was 60°
203:17 - and maybe side C was
203:20 - five all right so what else would I know
203:22 - maybe I know that angle a was
203:27 - 50° and so given that what I can figure
203:30 - out is then side a so I would set up
203:34 - that proportion here I would set up you
203:36 - know a over the
203:40 - S of
203:42 - 50
203:44 - equals 5
203:47 - over the S of
203:50 - 60 and there we go I have my proportion
203:53 - here and I can figure out you know cross
203:56 - multiply and then figure out what I have
203:59 - so 5 * the S of 50 / the S of 60 equals
204:06 - a and we can figure that out so since
204:10 - things like this you definitely would
204:12 - break out your calculator you know R
204:15 - rarely you're going to come across one
204:17 - of those angles where we definitely know
204:19 - you know I know the sign of 60 deges but
204:22 - you know s of 50 is not things that
204:23 - we're expected to memorize so what we
204:27 - would have is you're going to break out
204:29 - the calculator anyway let's write code
204:31 - to do this set up the ratio that that
204:34 - you can set up maybe even prompt for
204:37 - input and calculate the side or the
204:41 - angle that you know if it was the angle
204:43 - that you didn't know then let's say
204:47 - we'll do this the opposite there's going
204:49 - to be one more step here
204:55 - and let's say I'm going to keep this so
205:00 - um let's say if I have um you know 5
205:05 - over the S of
205:08 - 60 and let's say it was the side that I
205:11 - didn't know so um it may or may not work
205:15 - out to be a 50 Dee angle again but let's
205:18 - just say that this is a little bit less
205:20 - um so maybe that's a
205:23 - four okay and I don't know what angle a
205:26 - is so then that would be 4 over the
205:29 - S of angle a and we see that when we do
205:34 - the cross
205:36 - multiplying you know 4 * the S of 60 / 5
205:41 - now when we do this we have S of 60 is <
205:44 - tk3 over2 * 4 so it's 2 < tk3 * 5 so now
205:50 - we have um you know 10 <
205:57 - tk3
205:59 - equals so we do this um actually not 10
206:05 - so we would have four times uh so be 2 <
206:09 - tk3 divided by five so there'll be 2 <
206:13 - tk3 divided by five and normally we
206:17 - would have a uh a decimal for this we
206:21 - would do this on the calculator but if I
206:23 - had this two root3 over 5 equals the S
206:28 - of angle a we see that the next step is
206:33 - inverse sign because the sign of angle a
206:37 - equals this you know that's what we end
206:38 - up solving for so then to get angle a I
206:42 - need to do the inverse sign and so that
206:45 - becomes comes the inverse sign or arc
206:49 - sign of 2 < tk3 over 5 or the decimal
206:54 - equivalent and then that's what would
206:56 - give us angle
206:59 - a so we see you know we're building upon
207:02 - proportions and solving we're building
207:04 - upon you know co uh s and cosine or you
207:09 - know whatever our trig ratios are
207:11 - inverse when it's the angle that we we
207:13 - need to know and still knowing these
207:16 - steps then you know certainly you know
207:19 - that happens to be an angle we know most
207:22 - of the time it's not going to be so um
207:26 - even this you know we probably want a
207:27 - decimal equivalent so we're going to
207:31 - write code to do all this prompt for
207:33 - what we know run it through the formula
207:36 - and you know if it's an angle that we
207:39 - don't know then we have this Step at the
207:41 - end if it's a side then you know just
207:44 - cross multiplying
207:46 - and we'll build upon that to be able to
207:48 - solve any triangle but let's take a look
207:50 - at the code uh to solve using the law of
207:54 - signs so if you find yourself in this
207:57 - situation that you know the as at least
208:02 - one of
208:04 - these angle and the side across from it
208:07 - and then if you know one other thing an
208:09 - angle or a side then you can do law of
208:13 - signs and remember if I if I I do law of
208:16 - signs you know if I know side B then the
208:19 - only thing I can figure out is angle B
208:22 - at least in the first step you can run
208:23 - through this now that you know more
208:25 - things but that's another
208:28 - story so you know you're going to set up
208:31 - a proportion remember two of these but
208:35 - this remember for this formula shows
208:37 - that you can do it with any of the three
208:39 - so I'm just for all of this I'm just
208:41 - going to picture the first part A and
208:44 - B and remember you know you can call
208:47 - them A or B as long as you know one side
208:50 - and the angle across from it and then
208:51 - one other side we're just going to call
208:53 - them A and B so these are our known
208:55 - values we're going to I would know angle
208:57 - a and side a and then um I'm going to do
209:01 - the simple version here where I would
209:05 - know angle
209:07 - B so if I know these three then I'm just
209:11 - going back and picturing this cross
209:14 - multiplying so I know angle a and side a
209:17 - and then I would know angle B so what do
209:18 - I have S of angle B cross multiply time
209:22 - time side a divided by the S of
209:26 - a and so that's what we have and I just
209:29 - need to convert this all to radians
209:32 - math. sign math. radians angle
209:36 - B times side a / math. sign math.
209:42 - radians angle a
209:46 - all right so we see just my cross
209:49 - multiplying here and then I
209:52 - get side B but each time I'm converting
209:56 - it to radians because I'm expecting that
209:58 - people would put in degrees for these a
210:00 - lot of times in triangles and the
210:02 - situations these come up it's degrees
210:05 - inside the triangle that's tends to be
210:06 - what people use so you could have
210:09 - radians here and which which simplifies
210:11 - this a little bit but very often it's
210:14 - going to be degrees so there we go C you
210:16 - know there's the formula you set up uh
210:20 - the known values and if I'm trying to
210:24 - find a side then there's my
210:29 - formula if it's an unknown angle very
210:33 - similar um but a little more complicated
210:36 - I'm going to add another step so if the
210:39 - unknown angle known values are very
210:41 - similar I know angle a and side a and
210:45 - this time it's side B that I wouldn't
210:48 - know and so with side
210:51 - B then here's my cross multiply now
210:56 - notice I just made this variable B that
210:58 - we're going to deal with and change
211:00 - later but my cross multiplying
211:04 - remember if it's side B that I know
211:08 - then side B time the sign of a / a but
211:13 - what does that give me that gives me the
211:15 - sign of angle
211:17 - B not the final answer
211:19 - yet so I have side
211:23 - btimes s of angle
211:27 - a divid by side a but again not my final
211:32 - answer yet uh divided by side a and I
211:36 - think I just
211:38 - clicked there
211:40 - accidentally yep okay
211:43 - so side so just this variable B I do my
211:47 - cross multiplying but I'm not done
211:51 - because angle B
211:55 - is the arc sign of that so I I solve for
211:58 - b but then I have to do the arc sign of
212:03 - B so math. a sign of B and
212:09 - then it's going to be that's all
212:11 - automatically going to be in radians so
212:12 - then I'm going to convert it to degrees
212:14 - and then output and angle
212:17 - B so then then I'll print that so we see
212:21 - same cross multiplying but remember that
212:23 - last step
212:24 - is um arc sign because I'm going to Sol
212:29 - I'm going to get the ratio and then it's
212:30 - the sign of angle b equals that so there
212:34 - we go then we can get fancy because this
212:39 - is the value of putting all this in code
212:43 - that you can set this up once
212:46 - and you can have you know prompt for
212:50 - input you don't even have to change the
212:51 - code here you know up here I you know to
212:55 - make it simple I just have it built in
212:56 - that you could just put your known
212:58 - values in here but we can set this up if
213:01 - either angle or side is
213:04 - unknown so prompt for the known values
213:07 - all at the known
213:08 - ratio and here I'm going to ask for the
213:11 - known angle input and then cast cast it
213:15 - as a float
213:16 - called angle
213:17 - a um side
213:19 - across input float side a and if you
213:25 - don't know the value put it X um
213:28 - sometimes I have it as a zero so in this
213:30 - case I have it as an X so input the
213:34 - other angle or the other
213:35 - side and somebody's going to enter a
213:39 - value for one of these and then an X for
213:41 - the
213:42 - unknown and then if we have
213:46 - this so if angle B is the unknown then
213:50 - we're just going to take this oh okay
213:52 - well we already would have had side b as
213:54 - an
213:56 - input um and you
213:58 - see each input here I didn't convert it
214:02 - yet because the X could be a string and
214:04 - then once I found out which one it is
214:07 - then I'll convert the other one to a
214:09 - float side B and then I do my ratio here
214:12 - there's the ratio I remember it's the
214:14 - unknown angle so it's ratio I do my uh
214:18 - law of signs but
214:21 - then I convert it because that that just
214:24 - gives me the ratio so I have to do AR
214:27 - sign and that gives me that in radians
214:30 - and
214:32 - then there we go notice this one I just
214:36 - did it a little bit differently and made
214:37 - it here just the formula there we go
214:40 - radians times 180 divid Pi gives you the
214:43 - angle so notice this just manually you
214:46 - know converts it to
214:49 - degrees and and different things
214:51 - sometimes you know you can just use
214:52 - math. degrees math. radians to convert
214:55 - and sometimes you can you know set up
214:59 - the cross multiplying yourself either
215:02 - way and that's if we have the unknown
215:04 - angle and then the unknown side
215:07 - so if that's X now convert the angle and
215:12 - with the
215:13 - angle there we go all one formula very
215:18 - nice convert
215:22 - everything convert to radians behind the
215:24 - scenes so you don't have to see all
215:26 - those decimals and then just right away
215:28 - output side B There we go so now we see
215:33 - how we're starting to build upon these
215:36 - formulas you know we now we have a
215:38 - formula for the sign um s cosine and
215:41 - tangent if I know that I have a right
215:42 - angle we have law of Signs Now for this
215:45 - situation if I know the angle on the
215:47 - side across and there's more that we can
215:51 - do to work with triangles where I don't
215:53 - even have a right angle as long as I
215:55 - know some things so next thing we'll get
215:58 - to the law of cosiness now let's talk
216:00 - about another way to find the angles and
216:03 - sides in the triangle also we don't need
216:05 - a right angle for this so we have the
216:08 - law of cosiness and if you take a look
216:11 - at the setup of the law of cosiness U
216:15 - the first part of it looks like
216:16 - Pythagorean theorem c^2 = A2 + b^2 but
216:21 - then we're subtracting something here
216:23 - minus 2ab time the cosine of
216:26 - C so we know notice that if it were a
216:30 - right triangle if angle C was a right
216:33 - angle the cosine of 90 is zero so then
216:37 - we wouldn't be subtracting anything and
216:39 - then you go back to that formula but
216:42 - this is the adjustment here as angle C
216:45 - gets bigger or smaller minus 2ab * the
216:49 - cosine of
216:51 - C so that's how we would get and
216:54 - remember in doing this we would be
216:56 - solving then for side
216:59 - C so as the angle gets bigger or as the
217:04 - angle gets smaller then you know that
217:07 - gets smaller and then the cosine
217:10 - actually gets bigger so that we're you
217:12 - know subtracting more and you know that
217:15 - corresponds to a smaller side C also
217:20 - notice that I I usually remember it is
217:23 - this one one way sometimes people
217:26 - rearrange these a b and c and everything
217:29 - but you can solve for side C or I could
217:33 - rearrange it to solve for angle C
217:35 - because they each show up once so you if
217:37 - you if you knew everything else um you
217:40 - could solve for angle c as well notice
217:43 - the setup then of what we do know we
217:46 - solving it this way if I'm solving for
217:49 - side C what do I know I would know a
217:51 - side a and side B and then I would know
217:54 - angle C which is the angle between them
217:56 - so that's the situation for law of cosin
217:59 - if I know side two sides and the angle
218:02 - between them law of cosin and then the
218:06 - other way then if I do this then I know
218:09 - the angle then the only thing I can
218:11 - solve for is the side across from that
218:14 - angle and and this is where some people
218:17 - um rearrange the you know uh
218:21 - whatever uh letter they want to put for
218:23 - the side that they that they're solving
218:25 - for and then the other two sides but
218:27 - remember whatever it is it's two sides
218:30 - the angle between and then you're
218:31 - solving for the side across from that
218:33 - that angle whatever letters you decide
218:35 - to call them or if I knew all three
218:39 - sides that works out because I could
218:41 - plug in
218:43 - everything and then my last step would
218:45 - be inverse cosine to figure out the
218:49 - angle so we could do that um and
218:52 - remember the rearrangement of that is I
218:56 - would subtract c^2 minus a^ 2 minus b^
219:01 - 2 um
219:06 - equals just to show you the setup of
219:08 - this so then that would if I subtract
219:11 - these over then that would equal -2ab
219:15 - times the cosine of angle
219:18 - C and what do I want to do I want to
219:21 - divide both sides by this so it would be
219:25 - c^ 2 - a^ 2 - b^ 2 divided by
219:33 - -2ab equals the cosine of
219:37 - c and we'll look at this in the code
219:40 - that
219:41 - then after I would solve all this then
219:45 - I'm going to do Inver get that number
219:47 - and then I would do inverse cosine to
219:49 - figure out that angle so you know we
219:52 - we'll look at this in the code how we
219:54 - can use this because at any point of
219:56 - this you know you're going to be
219:57 - plugging this into a calculator anyway
220:00 - and you know possibly even having a
220:02 - formula already on your calculator for
220:03 - it so what we want to do is we're going
220:05 - to look at the code to prompt for these
220:08 - sides or these angles these sides and
220:11 - possibly an angle and then use that to
220:13 - solve um depending on which side you
220:16 - know and then we'll build upon that you
220:19 - know now that I if I have that situation
220:21 - two sides in the angle between or if I
220:22 - know all three sides whether I have a
220:24 - right angle or not I can solve and solve
220:27 - one thing solve you know once I have one
220:31 - more I can do law of cosiness again
220:33 - maybe if it's another angle I can do
220:35 - subtraction and we can put this all
220:37 - together to know everything about the
220:38 - triangle so let's take a look at how we
220:41 - would use a code to prompt for what we
220:43 - need and then use the law of code
220:46 - signs so here's the law of cosin in code
220:50 - so the known sides are A and B and if we
220:54 - if you can picture the triangle then we
220:59 - have a and b well the other side would
221:02 - be C so angle C would be between A and B
221:07 - sides A and B and we see that that if I
221:10 - have a and b and the angle between them
221:13 - is C that's the situation that we
221:16 - know so if we take a look at this let's
221:20 - say I do know side A and B and angle C
221:24 - we see that that's everything on the
221:25 - right side and I can do all this and
221:28 - then I might even just break it up into
221:29 - two steps do everything on the right
221:31 - hand side and then one more step to to
221:33 - square root everything to solve for
221:36 - C also that if I wanted to I
221:41 - could if I knew a b and c if I knew all
221:44 - three sides SES then I could plug this
221:48 - in and I still only have one unknown so
221:51 - I can solve this and I would do that in
221:53 - a couple steps we'll get to that so
221:57 - unknown side let's just work with that
221:59 - first
222:01 - so remember that I've seen this in
222:04 - textbooks that there's multiple formulas
222:07 - for this just because they're changing
222:09 - what they label as a b and c just take
222:12 - it that the two sides you know call them
222:14 - a and B and the side you don't know call
222:17 - it C that way you don't have to worry
222:19 - about it seeming like multiple equations
222:24 - so that's it I'm just going to whatever
222:26 - two sides I know I'm going to call them
222:28 - A and B C is the angle between them and
222:31 - then that side that I can solve for is
222:34 - across from that
222:35 - angle
222:37 - so I would know side A and B I would
222:40 - know angle
222:41 - C
222:43 - and you see how I'm going to do this in
222:45 - two steps
222:47 - c
222:48 - um and I just made up this variable um
222:52 - but that's not going to be my final
222:55 - equals so side A squar plus side b^ squ
223:01 - Min - 2 * side a * side B * math. cosine
223:06 - and normally we would expect uh inside a
223:09 - triangle people would tend to use
223:11 - degrees so that's why I'm going to do
223:12 - the cosine of math. radians
223:15 - I'm expecting that c would be degrees so
223:19 - um angle C so there we go so we have all
223:23 - of
223:24 - this um and remember then it's it should
223:28 - be equal c^ s so then the next step I'm
223:30 - just going to square root it and then
223:32 - that side
223:33 - C so really good this is another good
223:36 - use of code
223:38 - because any of these complicated
223:40 - formulas you're going to break out the
223:42 - calculator anyway hey might as well
223:43 - write code to do it and then and you
223:45 - just have to change these values and
223:47 - then output what you
223:49 - need so if I
223:51 - have an unknown angle so very
223:57 - similar when I have I know side a side B
224:02 - and I would know side
224:07 - C so remember this I I I like to just
224:12 - have one formula and you know think
224:15 - about algebra beyond that so if it's
224:18 - angle C that I don't know that's what I
224:20 - can solve notice I still only have one
224:22 - unknown so I can solve this but here's
224:25 - what I'm looking at I'm going to
224:27 - subtract a squ from both sides subtract
224:29 - b^ squ from both sides and then what I'm
224:33 - left
224:34 - with I'll divide by
224:38 - -2ab and that's what I'm going to do in
224:40 - these couple steps
224:43 - here so so I'm going to have I just
224:47 - called this part one so c^ 2 - a^ 2 - b
224:53 - s and then what do I have left on the
224:56 - other side I'm going to
224:58 - divide 2 a NE * 2 * the side A Time side
225:04 - B and then I have those so then I would
225:08 - divide and I'm just going to call it
225:10 - part one divided by part two and
225:13 - remember that Division I have cosine
225:15 - equals that
225:18 - so I would do AR
225:22 - cosine so remember that still gets me my
225:25 - ratio but I want to know the angle so
225:28 - Arc cosine and then I that's in radians
225:31 - I would I would expect that we would
225:32 - want degrees as the answer so then we
225:35 - store it as
225:38 - that pretty
225:43 - good and
225:46 - then if I have either side I could I
225:50 - could get really fancy with this so I
225:53 - definitely would need to know side A and
225:55 - B so I would expect that input and right
225:57 - away convert it if you don't know the
226:00 - value put an X so side C or angle
226:04 - C and then I just work this in if angle
226:08 - C is X then I'm working in these you
226:12 - know how I would do this um
226:15 - there we go side a side b side
226:20 - C
226:23 - and there we go so same equation side
226:27 - you know if I know the angle I have to
226:29 - go through all this side C minus side b^
226:32 - 2 minus a^ 2 there we go um step two the
226:37 - ratio divide step one divid step two and
226:41 - then the arc
226:42 - cosine and then I did I just split it up
226:44 - here as one more step then convert it
226:49 - um the angle
226:52 - so
226:55 - the the angle here
226:58 - so if I
227:01 - have side C that I don't know
227:05 - then there we go I will take that and
227:10 - run everything
227:11 - through and notice I just did this and
227:15 - then the next step square
227:19 - root
227:21 - okay
227:23 - so and then also notice instead of doing
227:26 - like math that radians I just did the
227:27 - conversion here here I didn't need to do
227:30 - the conversion I just need to square
227:31 - root it so now we have this if I know
227:37 - either side either a side or an unknown
227:39 - angle putting this together with the law
227:43 - of signs we might start thinking hey I
227:45 - can solve other things but we're going
227:47 - to add another formula and then we're
227:48 - going to get to that how we could you
227:52 - know solve different triangles but here
227:54 - we go different situations for the law
227:56 - of
227:57 - cosiness so here's another area formula
228:01 - when we learn area formulas for
228:04 - triangles we think you know it's 1 12
228:06 - time the base times the height now this
228:10 - doesn't contradict that but what we're
228:13 - adding is also time the sign of this
228:16 - angle C so let's just say that this if C
228:20 - was a right angle then a would be the
228:22 - base and B would be the height so it
228:25 - would be 1/2 * base time height and then
228:29 - again if this was a right angle the S of
228:31 - 90 is one so times one wouldn't change
228:36 - the answer so we see how that works but
228:39 - then as this angle gets smaller the sign
228:44 - gets to be smaller so we're multiplying
228:47 - and then it gets to be less and less of
228:49 - an area so just a really cool useful
228:53 - formula here because I don't need base
228:56 - and height I can just find two sides in
228:59 - the angle between them and that's all I
229:01 - need for calculating area now we notice
229:05 - that's one of the things we need for law
229:08 - of cosiness
229:10 - and then in using those law of cosiness
229:13 - law of signs
229:15 - I could eventually pretty easily get a
229:18 - situation where I have two sides and the
229:19 - angle between them so we'll be able to
229:21 - find the area so we'll take a look at
229:24 - finding the area and then we're going to
229:26 - put it all together finding every you
229:28 - know any three things I know about a
229:30 - triangle I can find everything every
229:32 - side every angle and the area and this
229:36 - one more formula here was kind of like
229:37 - the last piece of the
229:39 - puzzle and here's this new area formula
229:43 - in code so
229:46 - not yes so notice I just put the formula
229:49 - here if a and b were the actual base and
229:52 - the height like If This Were a right
229:53 - triangle or something then that angle C
229:57 - would
229:58 - be 90 and the sign of that would be one
230:02 - so you see it doesn't
230:04 - contradict but then as C changes then
230:09 - the area gets smaller
230:12 - so we can just put this all in one step
230:15 - here 1 12 * a * B * C and here instead
230:21 - of just putting it in code I right away
230:23 - jump to the user input so we're
230:27 - prompting for the input side a side B
230:30 - and then angle
230:32 - C and again don't get hung up on which
230:34 - one you're calling it it's the two sides
230:36 - you know and the angle between them and
230:39 - this works any two sides and the angle
230:41 - between them we can figure out the the
230:43 - area here
230:46 - so given these two sides and the angle
230:49 - input cast them as float and then just
230:51 - run to the formula .5 * side a * side B
230:55 - times and I I would expect that angle to
230:58 - be in degrees you know as usual for
231:01 - inside a
231:02 - triangle um so angle C convert it to
231:07 - radians and do the
231:09 - sign there we go now let's put it all
231:12 - together let's solve a triangle so
231:14 - that's you know any three things that I
231:17 - have for this example I said we we'll
231:19 - start with let's say I know all three
231:21 - sides but none of the angles so if I
231:25 - have that um how can I get all three
231:28 - angles well we have a law of cosin that
231:31 - if I know all three sides I can figure
231:33 - out one of the angles so then let's
231:36 - start with that let's say I'll figure
231:38 - out this angle here so if I do that then
231:43 - law of cosine
231:45 - I'm not worried about like whether I
231:47 - call which one I call a b or c so
231:50 - remember then we have that um c^ 2 = a 2
231:54 - + b^ 2 - 2
231:57 - A Time cosine of angle C which we don't
232:02 - know so if I have that then let's plug
232:06 - in um if I want to figure out this angle
232:09 - so then I'm going to call this side C
232:12 - and again same formula we just decide
232:15 - which one we want to call side C so I'm
232:18 - going to do that as 7^2 equal and we'll
232:23 - call it a and b so you know 8^ 2 + 9^ 2
232:28 - - 2 * 8 * 9 * the cosine of angle
232:36 - C all right so if I have this
232:41 - then you know I get that that's 49
232:45 - um so
232:47 - 49
232:49 - 64
232:51 - 81 minus 9 * 8 72 so * 2 so then that's
232:58 - 144 um and only this gets multiplied
233:02 - times the cosine of angle
233:04 - C so if I subtract these over then I'm
233:09 - going to get um there we go 64 and 81
233:13 - subtract it actually is
233:16 - 96
233:18 - and um then I'm going to do a couple
233:22 - steps here then I'm going to divide by
233:23 - that so if then I have over - 144 equals
233:29 - the cosine of angle
233:32 - C so we see you know we'll subtract
233:35 - these and bring them over and
233:38 - now I can even put this if I was doing
233:41 - it on the calculator remember we're
233:42 - going to write code for all this but
233:44 - then the negatives do cancel but we
233:47 - would just write code for whatever these
233:49 - numbers happen these variables happen to
233:51 - be and then remember we're going to do
233:53 - inverse cosine so it's really the
233:55 - inverse cosine or in the code it's going
233:59 - to be the arc cosine math. a cosine
234:02 - inverse cosine of 96 over
234:07 - 144 and that's going to give us I'll
234:10 - round it and then that's going to give
234:11 - us an angle of 48.2
234:17 - so we would know that one angle and you
234:20 - know in degrees then that would be I'll
234:22 - put it on the inside that would be
234:25 - 48.2 and what I can do then is then I'm
234:28 - going to do this again for one of the
234:30 - other size
234:32 - um if we weren't using a calculator
234:35 - writing code we might debate oh what
234:37 - what what would make the numbers you
234:39 - know more manageable writing code we
234:42 - just want to have a formula that works
234:43 - every time so yes some of the numbers
234:45 - are going to get larger some of the
234:47 - numbers might be weird decimal places
234:49 - but that's fine the code is going to
234:51 - work all that out in a fraction of a
234:52 - second for us so I'll pick this angle
234:57 - next and so if I do this using that same
235:01 - formula again not worrying whether I
235:04 - call what I call a b and
235:06 - c so if this is the angle that I want
235:10 - next so then nine is what I'll put in
235:13 - for angle C so it' be 9^
235:15 - 2 = 7^ 2 + 8 2 - 2 * 7 * 8 time the
235:25 - cosine of angle C and again whatever I
235:29 - happen to call it so we see I want to
235:31 - show you like on on the board here's how
235:34 - we would use the formula you know
235:36 - whatever the angle the side is that I
235:38 - know and then the angle of cross limit
235:40 - that I want to know you know these are
235:42 - the two things that might change
235:44 - depending on you know situation so there
235:48 - we go so what I would have now you know
235:51 - it'd be 81 =
235:54 - 49 + 64 - 7 * 8 is 56 so times it's
236:02 - 112 time cosine of angle C and if I
236:08 - subtract 81 -
236:11 - 49- 64 again then I get a
236:16 - -32 um and then if those are all
236:19 - subtracted then it's this is what's left
236:23 - on this side of the equal sign and I
236:25 - would divide by -12 so it' be divid by
236:29 - -112 equals the
236:31 - cosine
236:33 - whatever of angle
236:35 - C and again negatives that cancel out so
236:40 - we
236:41 - will do inverse cosine
236:45 - and we're going to use AR cosine you
236:47 - know math. a cosine when we get to the
236:49 - code of 32
236:53 - over2 also if if I was trying to do all
236:57 - this in my head then I might reduce that
236:59 - fraction but remember writing code it'll
237:02 - work that out no problem in a fraction
237:05 - of a second so we're just going to have
237:07 - it when we set up the code it's going to
237:09 - be you know whatever variables happen to
237:11 - be there it'll work it out so inverse Co
237:14 - sign of that then that's going to get us
237:16 - an angle of
237:20 - 73.4 there we go
237:22 - rounded so there we go let's call it
237:25 - this
237:28 - 73.4 and then if I have two angles I'm
237:31 - just going to use subtraction and even
237:33 - in writing the code we'll use
237:34 - subtraction to get that third angle so
237:38 - we would add these up subtract it from
237:40 - 180 and then that would make this angle
237:43 - 58
237:47 - .4 there we go so we have all three
237:50 - sides we just figured out all three
237:52 - angles and then what we would do is I
237:54 - could do one more step to figure out the
237:58 - area because very often that's something
238:01 - that we'd want so um I'm going to pick
238:06 - this this angle here so just because so
238:11 - the
238:13 - area remember then that's 12 um a b *
238:18 - the S of
238:21 - C so then that would be 12 * 7 * 8 * the
238:31 - S of
238:36 - 73.4 and there we go so I I would work
238:40 - that out in the calculator so you know
238:43 - 28 * sign of
238:45 - 73.4
238:47 - um there we go and we could figure out
238:50 - the area of of
238:52 - that so then I would um as we get to the
238:56 - code we'll look at putting all this
238:58 - together and then setting an output um
239:01 - one of the things that you know I
239:03 - rounded in all these steps but in the
239:05 - code and behind the scenes we would
239:07 - store these variables and we would not
239:09 - want to round them until the final
239:12 - because they will end up being a lot of
239:13 - decimal places we want that for our in
239:15 - between steps but at the very end when
239:18 - we are about to display it then we'll
239:20 - round them so um we'll we'll look at
239:23 - this setting up all these to have a
239:25 - definite method you know what are we
239:26 - starting out with and then work from
239:29 - there um just using the variables um not
239:33 - rounding till the end and then we'll
239:35 - look at outputting you know then no
239:37 - matter what we input it will output
239:40 - every side every angle and then the area
239:43 - so let's let's take a look at how we do
239:45 - that in the
239:46 - code to solve any triangle and here
239:51 - notice I'm also importing the matap plot
239:54 - library because I want to just give a a
239:59 - triangle even though it's not drawn to
240:01 - scale and you'll see I'm going to have
240:03 - some points and some lines just as a
240:05 - reference so then I'm going to label
240:09 - this you know a b and c don't worry
240:12 - about these numbers you'll see it's just
240:14 - as a reference um and you know taking
240:17 - out the axis lines so after that I'm
240:23 - going to
240:24 - put um a menu here where I'm where I'm
240:27 - just going to print out each menu option
240:31 - and this is you know how we can put how
240:34 - we can put it all together of all the
240:35 - different things let's create a menu
240:37 - what do you know do you know two sides
240:39 - in the angle between three sides side
240:43 - angle across another angle and notice
240:45 - each of these correspond to a different
240:48 - situation two sides in the angle between
240:50 - then we know we're going to do law of
240:52 - cosiness three sides also law of cosines
240:55 - but it's going to be different side
240:57 - angle cross and another angle side angle
241:00 - across another side so the two
241:02 - situations for law of signs a right
241:05 - angle and two sides so Pythagorean
241:08 - theorem if I know that um right angle
241:12 - side in another angle so that would be
241:14 - trig um s cosine and
241:18 - tangent
241:20 - um I could do subtraction to get the
241:23 - third angle
241:25 - um and you see how given each of these
241:28 - starting
241:29 - situations we can build our way to
241:32 - knowing the whole
241:34 - triangle so given the options this is
241:37 - what you're going to end up
241:39 - doing the
241:42 - angle uh
241:44 - these variables we'll just initialize
241:46 - these at the beginning just so that you
241:48 - know here's what I'm using angle a side
241:51 - a angle b side B angle C side C and then
241:54 - the
241:55 - area and throughout all these we're
241:59 - going to keep these variables consistent
242:03 - and then we'll we'll work with them so I
242:08 - did this one as an example so law of
242:12 - cosine so to find the unknown side if
242:16 - you pick option one that you know two
242:17 - sides and angle between it's law of
242:19 - cosiness so having picked that option
242:22 - we're going to prompt for side a side B
242:26 - take them as float integers and angle C
242:29 - again we expect it to be a
242:32 - degree and so I really took these from
242:36 - what we were doing before solving so
242:41 - step one and then uh I'm going to run
242:45 - through my law of cosiness and
242:48 - then I made another step where I'm going
242:52 - to square root step one to get side C so
242:56 - now prompted for these now I also have
242:59 - side C I can do law of signs to find
243:03 - another
243:03 - angle because you see now I do
243:07 - know angle C and the side across from
243:11 - it so I can use those to find another
243:15 - angle
243:17 - so again just copying this from La of Co
243:21 - law of signs and remembering our cross
243:25 - multiplying so I would know side C and
243:28 - angle C and let's call a is with the one
243:32 - I'll work with next so I'm going to do
243:35 - side a
243:38 - times cosine of angle C Time s of angle
243:41 - C / side C
243:45 - and that's going to get a and I just
243:48 - decided to break this up into two steps
243:51 - because that's just an in between
243:52 - variable um a I need to get I need the
243:56 - angle so I need Ark sign and then
243:59 - convert it to
244:01 - degrees so now I also have angle a which
244:05 - having all three sides from earlier I
244:08 - just got angle a and I just can do use
244:11 - subtraction to find the next angle 180
244:14 - minus angle a minus angle
244:17 - C and then we have our newer area
244:21 - formula so I don't need base and height
244:24 - I can just do5 * side a * side btimes
244:28 - the sign of the angle between
244:31 - them and now with all of
244:34 - these it will overwrite all these
244:37 - variables
244:39 - here and I'm going to print this out
244:43 - you see angle a side a angle b side B
244:47 - angle C side C and the area and each of
244:50 - them I just have this built in that I'm
244:52 - going to round it to two decimal places
244:54 - only at the very end here because
244:57 - sometimes um it gets to be you know
245:00 - really long decimals and we really don't
245:01 - need that we don't want to round in the
245:04 - in between steps but we also um you know
245:08 - chose plenty um because dealing with any
245:12 - trig it's very rare that you're going to
245:14 - get uh sides and angles to all be nice
245:18 - or even decent decimals there's going to
245:20 - be something in there that gets to be a
245:22 - weird decimal so when we run
245:26 - it so we see this is the setup
245:31 - here so I just wanted a general triangle
245:35 - that you can see the reference angle
245:39 - side and not drawn a scale these can be
245:41 - any size but as we we get that General
245:44 - reference and then right under it what
245:46 - do you
245:48 - know there we go so I'm going to enter
245:50 - an option
245:51 - number and if I enter the option
245:55 - one so I'm going to input what do I have
245:58 - side a I'm going to in my mind picture a
246:00 - nice 345 right
246:02 - triangle so you see like C would be a
246:06 - right angle and I'm going to do a b and
246:08 - c that um and I'll say that I know the
246:12 - angle between them so side a I'm going
246:15 - to say
246:17 - three side B I'm going to say four and
246:21 - angle C I'm going to say
246:24 - 90 and you see then it'll run through
246:28 - and give me every side every angle and
246:30 - the area 3 four it figured out that side
246:35 - five and yep these are the angles for a
246:38 - 3 four five
246:40 - triangle the area would be six so look
246:42 - at that 34
246:45 - 56 that's why I picked that as an
246:47 - example I just like how that works out
246:50 - so I work this out this so this is all
246:54 - of these then I have the comments here
246:57 - law of cosiness to find the unknown
246:59 - angle things we were doing before and
247:02 - then you would complete the code here
247:03 - I'm actually going to leave this to you
247:06 - because this is going to come up um
247:08 - little uh hint here this this will come
247:11 - up in the big certification
247:14 - project
247:15 - so I'll leave this for you to do the
247:17 - others but you see expect it to be using
247:21 - those
247:22 - variables and if you copy the code from
247:25 - somewhere else make sure that your
247:26 - variable names are the same that you
247:28 - have like if I have side a you know uh
247:32 - underscore and then capital A that that
247:35 - matches every time I'm referencing side
247:38 - a so there we go all signs and you see I
247:43 - have the comments here of what you need
247:45 - to do and you're going to each of these
247:47 - finds one thing you know law of science
247:50 - it will find one thing the unknown sign
247:52 - one thing the unknown angle and then
247:54 - you'll follow it up with the other
247:56 - things that you need to do to find
247:58 - everything else usually it's like you
248:01 - know two more steps that aren't that bad
248:04 - once you do the law of signs or cosiness
248:07 - once Pythagorean and
248:10 - Theorem and if you pick that option
248:12 - right away it's going to print out make
248:14 - C the right
248:15 - angle um and take that automatically
248:19 - that way it works out that you can do
248:21 - pathagar theorem a s
248:24 - b^2 and trig
248:27 - ratios if you know you could take a look
248:30 - at that
248:34 - um you know that would be hey I know an
248:38 - angle and a side and I know one of the
248:40 - angles is a right angle s cosine and
248:42 - tangent we can figure some stuff
248:45 - out so that's what we want to do and I
248:48 - want to show you here that yes you can
248:50 - put it all together and have something
248:53 - that you can solve any triangle
248:57 - and then this will give you a chance to
248:59 - practice and put together a lot of this
249:02 - code and we'll look at some other
249:05 - applications of this this later we can
249:08 - even at some point put this in functions
249:12 - so that you can just um run run run a
249:15 - function to do whatever you want with
249:17 - the triangle now let's look at getting a
249:20 - triangle from three points I don't even
249:23 - know the sides or the angles yet but
249:26 - let's say I have three points and I want
249:30 - to first of all say hey that they would
249:32 - make a triangle let's get the measure of
249:34 - each side so as I look at these sides
249:38 - that I want to get you see
249:42 - then I will make my triangle and what
249:45 - we're going to do is the distance
249:47 - formula three times so remember the
249:50 - distance from this point to this point
249:52 - any perfectly horizontal distance is
249:55 - going to be the change in X X2 -
249:59 - X1 and then any you know so exactly
250:03 - across here and then any vertical
250:05 - distance is going to be Y 2 -
250:10 - y1 and since we are on our cartisian in
250:14 - rectangular coordinates this will be a
250:16 - right angle and then so then this is
250:18 - going to be the
250:22 - distance so that's what you remember so
250:26 - the distance formula comes from
250:27 - Pythagorean theorem so when I look at
250:30 - this I'm going to do um the change in so
250:34 - that's going to be A2 + B2 = c^2 so I'm
250:38 - going to do the change in X so X goes
250:40 - from 1 to 7 so it's going going to be 7
250:45 - -1 SAR and
250:48 - then b^2 is going to be the change in y
250:52 - only goes from 1 to 2 so it's going to
250:54 - be 2 - 1^
250:57 - 2ar equals c squared but instead of
251:00 - squaring it here I'm going to say square
251:03 - root both sides so then we get to this
251:07 - so you know there's our distance formula
251:11 - applied to these two points
251:13 - and so what do we get 7 - 1 is 6 squar
251:17 - is 36 so then I get the square TK of 36
251:23 - 2 - 1 is 1 squar is still 1 + 1 so C is
251:28 - the square Ro T of
251:30 - 37 so I'm going to say C equals uh we'll
251:35 - round it to uh
251:39 - 6.08 um I don't want to round it to one
251:41 - decimal um
251:43 - I guess I could but um I'll round it to
251:46 - two decimals for this one 6.08 so there
251:49 - we go I can label this and when we do
251:53 - this in the code we were going to save
251:54 - this as a variable because it would have
251:56 - more decimal places but you know this
251:59 - side here is going to be
252:02 - 6.08 I'll put on the outside
252:07 - 6.08 and then I'm going to do
252:09 - Pythagorean theorem or the distance
252:11 - formula again for the second side
252:13 - so if I take a look at
252:17 - this
252:21 - so I get um if I take a look at um this
252:25 - next one here so from you know one so
252:30 - the change in X it goes from 1 to three
252:33 - just over a little bit so there we go I
252:36 - get so from 1 to 3 so I'm just going to
252:39 - do 3 - 1 SAR and then the Y value goes
252:43 - from 1 to 6 so then it's going to be 6 -
252:47 - 1^ 2ar and then I'm going to square root
252:51 - all
252:53 - that again we we'll have this in the
252:55 - formula and it's just going to import
252:57 - and we're going to run this through um
253:00 - you know three times distance formula
253:02 - each time so what do we get 3 - 1 is 2^
253:06 - squar is 4 6 - 1 uh is 5 squar is
253:15 - 25 there we go and so there we go so we
253:19 - have um 25 plus so the sare < TK of
253:23 - 29 and then I'm going to get the third
253:28 - one so same thing I'm going to
253:34 - do the distance formula again
253:38 - for uh from here to here so notice it
253:42 - doesn't uh since we're squaring it the
253:44 - negative values um are going to get
253:47 - squared anyway but if I take a look
253:49 - let's say I take this one as X1 so if I
253:53 - did that so then um it would be 7 minus
253:57 - 3 so that's fine 7 - 3 squared
254:03 - and then I'm going to do 2 -
254:09 - 6 squared even though that's going to
254:11 - end up being negative but then I Square
254:12 - it
254:13 - and then we square
254:15 - root each of that so there we go SE so
254:18 - it's four squar so then that's
254:21 - 16 and then four -4 squar is still
254:25 - positive 16 so then I get the square
254:29 - root of 32 um there we go so then this
254:33 - one's going to be uh
254:38 - 5.66 and let's say then that I want to
254:42 - do
254:44 - the uh the angles well then what I want
254:48 - to do I want to do um law of coin for
254:51 - the angles so if I have two sides then I
254:55 - can do law of cosines to figure out the
254:57 - angle between them you know any two
255:00 - sides um there we go
255:04 - and the uh yeah so the law of cosines I
255:09 - can get you know any of these two sides
255:10 - and do the law of cosin and then I can
255:12 - do the law of cosin again you know now
255:15 - that we have the sides we can we can
255:17 - apply that um again each of these steps
255:20 - I'd be St uh storing them as a variable
255:23 - and um you know we're just adding that
255:28 - other layer here the the distance
255:29 - formula so from three points getting all
255:32 - the sides getting all the angles from
255:34 - the law of cosiness um I'll do that
255:37 - maybe I'll do it twice and then subtract
255:38 - for the third angle then I can use our
255:41 - area formula so this is good to be able
255:44 - to get this from three points because a
255:45 - lot of times you know when we're dealing
255:47 - with like vectors in space we might have
255:49 - the points and then I can use these
255:52 - distance formula and other things to
255:54 - figure out um you know the uh components
255:58 - of the vectors all right so let's take a
256:01 - look and uh see how to do this in the
256:05 - code now maybe we already if we already
256:08 - had the sides or angles that we already
256:11 - looked at that but supposing you just
256:13 - have three points and we can use this in
256:16 - other things from drawing to you know
256:19 - possibly some other you know physics
256:21 - applications so that's why I made this a
256:25 - function and you see here the first line
256:28 - Define the triangle function and it's
256:31 - going to take this input of three points
256:34 - X1 y1 X2 Y2 X3
256:37 - Y3 and here what are we going to do I
256:40 - just put the overall um we're going to
256:42 - do the distance formula three times law
256:44 - of cosiness uh three times because then
256:47 - we get the three sides law of cosin
256:50 - twice for each angle and then the third
256:53 - angle we can just use
256:55 - subtraction so defining this and then
256:58 - everything here we're going to put the
257:00 - import math inside our
257:04 - function and then we're going to go down
257:08 - here and I just put comments for
257:11 - yourself too if even if you're the only
257:13 - one looking at this you you want to keep
257:15 - it organized put comments so what are we
257:17 - going to do we're going to get side a
257:19 - and there's our distance formula and we
257:21 - REM remember this you know change in X
257:25 - so X2 - X1 and then Square it Y 2 - y1
257:29 - and then Square it and then it's like
257:31 - Pythagorean theorem those would be the
257:33 - two sides and then is equal c^2 so math
257:37 - that square root to get the whole
257:40 - thing and what I Al already did is I
257:45 - actually just copied this and then
257:47 - changed the numbers or letters but when
257:50 - you do that be careful that you copy it
257:52 - correctly or that you change what you
257:54 - need to change so if this gets stored to
257:58 - a so B um what I did is instead of
258:02 - taking X1 and x and y1 now from here to
258:09 - there I went from 2 to three
258:13 - so you see I'm going from second point
258:16 - to the third point so this gets x3 - X2
258:22 - Y3 -
258:24 - Y2 and then I'll store that as B and
258:29 - then the third one I'm going from the
258:30 - third point back to the
258:33 - first so the order doesn't matter
258:36 - because you're it would just make it
258:38 - negative and then you're squaring it
258:40 - anyway so I just put it this way x3 - X1
258:45 - Y3 - y1 so we see you know the first
258:48 - side the second side the third side and
258:51 - store that as
258:53 - c um I called it a and C instead of side
258:56 - because knowing that I'm going to use
258:57 - that a bunch of times it's less to
258:59 - rewrite all right now to get angle
259:02 - a so what are we doing here to get angle
259:06 - a and remember there's some algebra
259:09 - involved the
259:10 - cosine the law of cosiness and I did
259:13 - this in two parts here so
259:16 - remember that you'd have if I want angle
259:19 - a then I have side a^ s equals as the
259:23 - default formula and so I would have to
259:27 - subtract side B squared I would then
259:31 - subtract side c^2 and then what I have
259:34 - left on the other side of the equal sign
259:37 - I'm dividing so that's why I have
259:38 - divided by this but that doesn't give me
259:40 - my final answer yet that gets me the
259:42 - cosine a which I just put cosine
259:44 - underscore a as a
259:46 - variable
259:48 - and
259:49 - the first way to do it I'm going to get
259:52 - radians and so if I have the cosine of a
259:56 - then I'm going to do a
259:58 - cosine the inverse to get the radians
260:02 - and I want that variable and then I'll
260:05 - do this to convert from radians to
260:08 - degrees so I have
260:10 - both and notice in each of these I'm not
260:14 - rounding anything in my in between steps
260:18 - I want to keep all those that's going to
260:20 - help especially when you do these and
260:22 - you're dependent on solving this one
260:25 - variable and then using that more than
260:27 - one place or even more than one place
260:29 - later you don't want to round um you're
260:32 - not going to have to see these displayed
260:34 - but it just makes your final answer a
260:35 - lot better keep as many decimal places
260:37 - as you can so now to get now to get
260:41 - angle B very similar so if I want angle
260:45 - B
260:47 - then you know side B and then I'm
260:49 - subtracting A and
260:51 - C um same variables over here and that
260:55 - gets me the cosine then the next step
260:58 - inverse
261:00 - cosine and then convert it to
261:04 - degrees and angle C so you see each of
261:07 - these I'm doing it just in parallel
261:08 - getting the radians then getting the
261:10 - degrees so how many rad in you know
261:13 - inside the circle is 180 degrees or
261:15 - inside the triangle is 180 degrees so
261:18 - that's also Pi radians math. Pi
261:22 - minus these gets me the other angle 180
261:26 - minus these gets me the other
261:29 - angle and the
261:32 - area remember our uh our formula instead
261:37 - of base and height 12 B * C time the S
261:42 - of the angle in between them if B and C
261:45 - were base and height then the sign would
261:47 - be one so that's 1 and half base times
261:50 - height but then we can modify it
261:53 - as the angle changes
261:56 - so and and to have one less conversion
261:59 - you know I kept the radians on this and
262:01 - I'm doing the sign involving
262:04 - radians now that I have all of
262:07 - these a B and C are the sides a radians
262:10 - a deg you know are the angles and then I
262:13 - have area now in the final
262:17 - display I
262:19 - will in the final display I will round
262:23 - it here we go and in this I just rounded
262:26 - them all to one one place you can always
262:29 - add more but again it's the final
262:31 - display you definitely don't want to
262:32 - round it in between but there we go so
262:37 - this is all within a function you could
262:39 - have it return values if you want uh I
262:42 - just had this within the function that
262:43 - it would just print and again you can
262:46 - use these I I give you some things that
262:48 - give you a start and you can you know
262:50 - have this return other values or
262:52 - whatever you'd like um okay
262:56 - so then that's all within a function I'm
262:58 - going to call the function you see how I
263:00 - would call it triangle and I decided to
263:02 - make it you know easy values 03 0 0 and
263:07 - then 40 and I put them in that order to
263:10 - make it a nice simple right triangle
263:13 - where angle C was a 90° angle at the
263:16 - origin and this is what we get angle a
263:19 - side a angle b side B angle C side
263:23 - C Good Times okay so this project is the
263:27 - foundational math certification 4 where
263:30 - we're going to go through uh you're
263:33 - you're going to go through a lot of the
263:35 - things you've already been learning and
263:36 - working on and hopefully also practicing
263:40 - from the analog clock to to the triangle
263:43 - solver to um all the trig we'll also add
263:47 - a couple trig
263:48 - applications uh more about waves and
263:51 - syncing up waves um for harmony so go
263:56 - through this if you haven't already you
263:59 - know I designed it to go for you to go
264:01 - through on your own work through each
264:03 - step this is going to be the walkth
264:05 - through so if you've already done that
264:07 - or if you're stuck on anything then this
264:09 - will give you an explanation of each
264:11 - step so this is the walk through of the
264:15 - foundational math certification 4 so
264:18 - hopefully you already gave this an
264:21 - attempt on your own but then you know
264:24 - you want to go over some things and here
264:27 - so we're going to do that and just like
264:29 - the other
264:30 - certifications um first thing you need
264:32 - to do is acquire the testing
264:35 - Library this just shows you how you can
264:37 - import that or any Library um in this
264:42 - case I have I have that posted on GitHub
264:44 - so when we run
264:46 - this it's just going to go through it's
264:49 - going to get the
264:50 - library um save it to your working
264:54 - directory and import what you need and
264:57 - then the test that we run at the very
264:59 - end outputs yep past go onto the next
265:02 - step so we're going to do that so
265:06 - drawing shapes so we're going to get to
265:09 - some other things we're doing in
265:11 - graphing and here's where where you know
265:13 - you don't have to have a function per se
265:15 - you can draw based on any points so here
265:19 - we're going to draw a polygon and we're
265:21 - going to get an array of various XY
265:24 - vertices um and we're going to plot each
265:28 - point and then align from that point to
265:30 - the next one so that first function here
265:34 - is path. move to so I'll move the cursor
265:39 - you know that you won't necessarily see
265:41 - a cursor move but we'll move it to that
265:43 - point and then path. line too so I go
265:47 - from that point to the next draw a line
265:50 - and at the very end path. close poly and
265:54 - we'll see this so here's what we're
265:56 - going to do um you're going to like a
265:59 - lot of these I have something where it
266:01 - works when you first run the code and
266:03 - then you're going to make some changes
266:05 - so you're going to run the code then
266:06 - you're going to add these points and
266:08 - change the two arrays so here's how it's
266:11 - working
266:13 - um all the things we're importing plot
266:16 - path patches all right so right now I
266:21 - have these vertices and we're going to
266:22 - leave it at that so notice each of these
266:26 - is an XY point and I do have them with
266:30 - decimal points um just because I I'd
266:34 - like to rather use them as floating
266:36 - points rather than integers so I put
266:39 - everything with a decimal
266:40 - point so
266:43 - now as it is you see the codes move to
266:47 - line
266:48 - two and each of these
266:51 - then I'm going to have this we're going
266:55 - to keep the code here path verts codes
266:58 - so we're going to create this path using
267:01 - this array of vertices this array of
267:04 - steps so you know I called them verts
267:06 - and codes and patches there we go face
267:10 - color blue and you'll see you'll see
267:13 - that um all right so now I have my plots
267:19 - and what I'm I'm just going to add this
267:22 - patch so you see we Define these two as
267:27 - an array of vertices an array of steps
267:30 - to find this in the path
267:33 - patch um incorporates the
267:37 - path and
267:40 - then patch goes into the plot all right
267:44 - and I just made this axis 5 in every
267:45 - direction there we go so let's see what
267:48 - happens when we run
267:50 - this so you see I just made this you
267:54 - know given these four
267:56 - points from 0
267:58 - 0 um there we go all these four points
268:03 - and it goes
268:04 - around and there you go makes a circle
268:09 - or makes a makes a rectangle it actually
268:12 - is supposed to be a square but remember
268:14 - uh python often stretches out the x-
268:17 - axis a little bit so then we want to go
268:21 - through and we want to add these points
268:22 - here to make a hexagon so I would rather
268:27 - add um
268:30 - -11 I would rather add that from0 0 I
268:34 - think I would rather add that after 0 0
268:38 - over here so that's where I'm going to
268:40 - put this one Nega 11
268:44 - one and I'm going to put this
268:49 - here and then there we go 02
268:53 - 22 um and then here 22 and then two
268:59 - because we're picturing it's this point
269:01 - and then down to two 0 so I'd probably
269:03 - want to add that other point out here
269:05 - for a hexagon so I'm going to make
269:10 - this um there we
269:15 - go
269:19 - there okay and now what I need is line
269:24 - two again
269:26 - twice
269:27 - because otherwise I I I have more
269:30 - vertices than directions and that that
269:32 - won't
269:34 - work so I'm just going to copy
269:38 - that and
269:42 - there we go two more times to account
269:45 - for those and there we go
269:48 - so let's run this and
269:51 - see and there we go so we have a
269:56 - hexagon so that that's that's part of
269:59 - this and because it works code t p Code
270:01 - test P so there we go we if I put them
270:05 - in in any other order they would have it
270:08 - would have wanted to draw the lines in
270:10 - that other order and it would not
270:12 - necessarily have made a nice looking
270:14 - hexagon so there we
270:16 - go all right and now we get to this one
270:21 - so Pythagorean
270:23 - theorem all right A2 plus b s = c^2 and
270:27 - this is really we're going to build upon
270:29 - this a lot for the trig that we're
270:33 - doing um but we'll get to that um so
270:38 - side lengths all right so write the code
270:41 - to prompt for a b and
270:44 - c so notice I do have this that I think
270:48 - it will do something if you know you
270:50 - didn't do anything and write it but
270:55 - um there you go prompt for a b and
270:59 - c
271:03 - and there we go so C string
271:08 - um notice instead of zero I actually
271:12 - really would want this to
271:13 - be this something like this I'm just
271:17 - going to copy this because I think that
271:18 - that's a little
271:21 - bit quicker and then change that to C
271:26 - so there we go so we have each of these
271:29 - it prompts for the input but here's the
271:31 - thing if I want C is always going to be
271:34 - the
271:35 - hypotenuse so if a is you know if I just
271:42 - type in a um because remember I first of
271:46 - all how this if you don't know a side
271:47 - length just enter the
271:49 - letter so if a string is a then that
271:53 - means B and C I have values for convert
271:58 - them to
271:59 - float and
272:01 - then what do I have c^2 minus b^2 and
272:05 - then square root that answer to get a if
272:09 - B I don't know
272:12 - then it's going to be very very similar
272:14 - we just have the letters changed so if B
272:18 - I don't know then I'm going to prompt
272:20 - for a and C c^2 minus a^ 2 and square
272:24 - root the whole thing and
272:27 - then this if C if C is there then what
272:32 - do we have then I have if C is what we
272:36 - don't know then
272:40 - here I would would make it
272:43 - C
272:45 - equals
272:47 - um uh
272:49 - math.sqrt
272:51 - of remember C would be the hypotenuse so
272:54 - we would have a 2 plus b^2
272:58 - a squar plus b
273:03 - squar and so that's what we would have
273:06 - for Pythagorean A2 +
273:08 - b^2 and then get that answer square root
273:10 - it and then that's what would
273:13 - be and there we go I
273:16 - could um and then I would have to print
273:19 - that out notice can't skip the print
273:23 - statement so
273:26 - then print and I would print C
273:32 - equals c so there we go and then if we
273:36 - ran
273:38 - it all right so let's uh
273:42 - let's run this um let's do a 3 four five
273:45 - triangle and let's run this to show you
273:47 - that um supposing B we don't know so the
273:51 - original code let's say a is three B I
273:54 - don't
273:55 - know and then C is
273:58 - five you see 3 5 b must be four um It
274:03 - also says Code test pass because we did
274:05 - make we did uh add that code but let's
274:09 - say let's say a is three B is
274:13 - four and c I don't know C is five there
274:18 - we
274:19 - go and and then of course it will work
274:22 - the the value of that is when it is not
274:24 - a nice
274:26 - 345 all right so we have the distance
274:30 - formula and here I'm just going to show
274:34 - you what this looks like um remember
274:37 - that it's really Pythagorean theorem so
274:39 - I have this that you're just going to
274:41 - run
274:42 - this code which I'm going to do in a
274:44 - second here and you're going to see that
274:47 - how I plot the points and you know take
274:49 - a look at the code I just put a delay so
274:52 - it's going to plot the nice triangle the
274:54 - points
274:57 - and then you run the code and you'll see
275:00 - how this relates to Pythagorean theorem
275:05 - so you see you have your two points and
275:09 - then change in X Change in y and then
275:12 - that would be the distance because on
275:14 - the cartisian plane change in X is
275:16 - perfectly horizontal change in y is
275:18 - perfectly vertical so that makes this a
275:20 - right angle and that's how we would get
275:22 - the diff the distance formula and that's
275:25 - all you needed to do for that one
275:27 - because now part two we're going to
275:29 - solve
275:30 - this and remember Pythagorean theorem
275:34 - a^2 plus b s c^2 so then that translates
275:39 - to change in x squared change in y
275:43 - squared and distance squared so we see
275:46 - you know that could be a b and c as
275:49 - sides and then change in X is X2 -
275:54 - X1 change in y is Y2 minus y1 and then
275:59 - the distance there we go I'll just call
276:02 - it
276:03 - D so here I'll use these same example
276:06 - points 1 1 and
276:08 - 74 so change in x is 7 - 1 change in y
276:13 - is 4
276:14 - -1 and there we go then we solve square
276:19 - you know subtraction Square solve and
276:21 - then we square and then remember you're
276:23 - solving for D squ so then the last step
276:25 - is square rooting everything so this is
276:27 - what we're going to do we're going to
276:29 - prompt for these points and you see
276:31 - we're going to say without
276:34 - input um enter the first XY point the
276:36 - second XY
276:38 - Point all right and here we go so we
276:43 - expect input that someone is going to
276:44 - put a comma so we'll take this input
276:47 - remember as a string split it at the
276:51 - comma and then convert each to a
276:53 - floating Point number X1 and
276:56 - y1 so your job here then is to do this
277:01 - for the second Point split it at the
277:03 - comp take the
277:05 - input from point two split it at the
277:09 - comma and now this really is an array
277:12 - with two elements so X2 becomes this now
277:17 - I'm even just going
277:20 - to copy this but remember it is not
277:25 - first but
277:31 - second and
277:34 - here it's not first but second
277:42 - and remember it's element one so
277:45 - splitting at the comma into this array
277:48 - called second so second element zero
277:52 - second element one there's my there's my
277:54 - X2 and Y2 points there we go so now
277:59 - let's write the formula to calculate the
278:01 - distance so we are just going to say um
278:06 - I'm going to do this and I'll do this
278:08 - I'll still do the square root last so
278:10 - the distance parenthesis there we go um
278:14 - X2 -
278:16 - X1 close the parentheses and square
278:21 - it
278:24 - plus Y
278:25 - 2
278:28 - minus
278:31 - y1 there we go close the
278:33 - parentheses Square it and then my last
278:36 - thing is square root the whole thing so
278:39 - I'm going to put math
278:43 - sqrt and remember to close the
278:44 - parentheses here at the
278:46 - end there we
278:49 - go so there we go distance formula and
278:53 - print it
278:54 - out so let's run
278:57 - it all right enter the first XY point
279:01 - and let's do the same ones that we were
279:04 - doing before um 1 comma
279:08 - 1 and the second XY point is is there
279:12 - you go 4 comma
279:17 - 7 and there we
279:19 - go we could if we wanted to round this
279:23 - at the very
279:25 - end
279:26 - so you know this you know past that's
279:30 - all we need to do and we'll see in a lot
279:33 - of
279:34 - trig usually at least one or two sides
279:37 - or angles will end up being really you
279:40 - know long decimal places because things
279:43 - just don't often work out to nice
279:45 - integers or even nice like quick
279:48 - decimals so we could easily round this
279:50 - out of two decimal places so there we go
279:54 - round and I could round it to a whole
279:58 - number in which case I could just close
280:01 - the parentheses
280:05 - there and you see so
280:09 - um one one
280:12 - 1 and
280:17 - 47 that's
280:19 - okay but you see
280:22 - now you should use this because you know
280:25 - you rounded it that was not a part of
280:27 - what we were looking for but I just
280:28 - wanted to show you you could you could
280:30 - throw the rounding in
280:32 - there
280:34 - and then but now you have this there we
280:38 - go so let's you know let's uh think you
280:41 - know
280:42 - 0
280:44 - 0 and the next point would be three
280:50 - 4 and see 345 triangle works out
280:55 - nicely but it's not always going to you
280:57 - know you're not always going to have
280:59 - nice like that so we have the length of
281:01 - each side now we also have the midpoint
281:03 - formula so no matter where the angle is
281:08 - the midpoint of that side is
281:12 - adding the X values you get the average
281:14 - of the X values and the average of the Y
281:17 - values and that's your
281:20 - midpoint so you see that works out I'm
281:22 - just going to use this other as a
281:24 - reference here that if I have this
281:26 - midpoint which I guess might be around
281:28 - the e at the end of
281:29 - distance it really is the you know
281:33 - halfway down this x line so you just
281:35 - take the average of the two x values and
281:38 - you see from uh the vertical it really
281:41 - is halfway up so you take the average of
281:44 - the Y
281:45 - values so that works out it's a nice
281:48 - formula we can just get the midpoint
281:51 - notice how we can do the same things
281:53 - we're doing you know prompt for X1
281:58 - y1 split it at the FR at the at the
282:02 - comma convert you know X1 y floating
282:05 - point just like we were doing before but
282:07 - now we want to calculate the midpoint
282:09 - all right so what do we have
282:12 - we have
282:14 - X1 plus uh
282:17 - X2 close the parenthesis divid two there
282:21 - you go getting the average of two
282:23 - numbers and we have um in
282:27 - parentheses y1 plus Y 2 close the
282:32 - parentheses / by two and now we get the
282:35 - average of the X's add them together
282:37 - divide by two average of the Y's and
282:41 - there we go now I have the
282:43 - midpoint so we can run
282:47 - this all right
282:50 - and I might go back to our
282:54 - same one that we were doing
283:00 - before and there we go the midpoint is
283:02 - 2.5
283:04 - 4.0 there we go now we're we're done we
283:07 - don't have to do anym you could you know
283:10 - INR with this go back and also plot this
283:12 - point and you'll see that it's exactly
283:15 - the
283:16 - midpoint all right so we're VI with
283:20 - triangles all all this time but
283:23 - trigonometry is
283:25 - really triangles um you know the
283:30 - measurement of shapes gone with three
283:35 - sides so it's really triangles but
283:37 - trigonometry then takes it to the next
283:40 - level we have some more formulas here
283:43 - there we go Tri means three gone means
283:45 - shape metri means measurement so the
283:47 - measurement of shapes with three
283:49 - sides all right
283:52 - so all of these we're going to look at
283:56 - other formulas and I have some more
283:58 - triangles that I'm going to display this
284:00 - one I'm just going to run this and
284:02 - display
284:04 - it and so we see if I'm talking about
284:06 - angle a that's the adjacent side that's
284:09 - the opposite side and that's the
284:10 - hypotenuse
284:11 - the hypotenuse the longest side across
284:14 - from the right angle that's always its
284:16 - own thing but notice adjacent because
284:19 - this you know next to angle a I have a
284:22 - hypotenuse and this other side so this
284:24 - is the adjacent side because the
284:26 - hypotenuse is always the
284:29 - hypotenuse
284:31 - then see the side is opposite because
284:35 - it's on the other side of the triangle
284:37 - the opposite side so there we go now
284:41 - another perspective I'm going to run the
284:42 - same
284:43 - thing but instead of a I'm going to
284:46 - reference this other angle
284:48 - B and you'll see
284:54 - that if that's angle B this is the
284:57 - opposite side that's the adjacent
285:00 - because this is this if I'm talking
285:02 - about angle B it's it's that's the
285:04 - reference angle so this is the one next
285:05 - to it and then this is the one opposite
285:09 - so we we need to just be familiar with
285:12 - that you know it is relative within the
285:14 - triangle and then the hypotenuse is
285:16 - still always its own thing you know the
285:18 - longest side so the S ratio is the ratio
285:24 - of the opposite side over the
285:26 - hypotenuse so opposite over hypotenuse
285:28 - and we're just going to run this and
285:30 - we're going to see that the sign of a
285:33 - and the sign of B are different because
285:35 - the different angles have different
285:37 - opposite sides so we see this code is
285:41 - just going to generate a triangle and
285:43 - when we run it we're going to see a 3
285:46 - four five triangle and then look at side
285:49 - look at angle a the opposite side is
285:52 - three and the hypotenuse is five so the
285:54 - S of a is 3 over5 angle B the opposite
285:58 - side's four hypotenuse is still five so
286:01 - the sign of angle B is four over five
286:04 - and now let's take a look
286:07 - at calculating the sign ratio so this
286:11 - code is going to generate a triangle
286:12 - also right triangle and what I did is
286:16 - Generate random integers for the two
286:18 - sides and then C I did Pythagorean
286:22 - theorem to and rounded it to get a
286:25 - reasonable
286:27 - hypotenuse and here we go it's still not
286:30 - drawn to scale but it it looks at least
286:34 - reasonable so you can see these sides
286:36 - side measures and what we're going to do
286:38 - is we're going to prompt four you know
286:42 - what's the measure of the opposite side
286:45 - and what's the measure of the
286:47 - hypotenuse you know so input gives us a
286:51 - prompt and then the user input comes in
286:54 - as a string we're going to cast it as a
286:56 - float and store it as op or hypo
286:59 - opposite or hypotenuse op p p or
287:02 - hyp and then now yours would have S of a
287:07 - equals z so if you ran it it would still
287:10 - just output zero but your goal was then
287:14 - just to change this to S is opposite
287:17 - over
287:18 - hypotenuse and then we're going to run
287:20 - this and then you'll
287:23 - see each time you run it it'll generate
287:25 - different numbers and given these so if
287:29 - we look at angle a the opposite is 8 and
287:32 - the hypotenuse is
287:34 - 8.1 and then it prompts you for that
287:36 - what's the measure of the opposite side
287:38 - eight hit enter what's the measure of
287:40 - the hypotenuse
287:43 - 8.1
287:45 - and then it will give you the sign of
287:49 - that there we go cosine very similar
287:54 - cosine is adjacent over
287:57 - hypotenuse and so this just like before
288:01 - we have this is going to just generate
288:04 - the triangle so you're just going to run
288:06 - this and then we see from angle b or
288:10 - angle
288:11 - well from angle a adjacent is 4 five
288:14 - four is the adjacent and five is the
288:16 - hypotenuse even though both of these
288:18 - sides are next to angle a the hypotenuse
288:21 - is always its own thing and then from
288:24 - angle from angle B three is the adjacent
288:27 - and five is the
288:28 - hypotenuse still so we see these
288:32 - different ratios so now we're going to
288:34 - calculate
288:36 - that just like we did with the sign
288:39 - we're going to get you know random
288:40 - integer for side a side B to
288:44 - Pythagorean and we'll see for this one
288:48 - calculating the sign ratio the cosine
288:51 - ratio doing very similar things random
288:54 - integers Pythagorean theorem to and just
288:57 - rounding it to one decimal place to get
289:00 - the
289:01 - hypotenuse
289:03 - and then we're going to prompt for the
289:06 - measure of the adjacent side the measure
289:07 - of the hypotenuse um for right now don't
289:10 - worry about that red underline and when
289:12 - we prompt for these remember you know
289:14 - what's the measure of the adjacent side
289:16 - comes input comes in a string cast as a
289:20 - float and that's adjacent so if I store
289:24 - these as these two variables then the
289:26 - cosine this is just what you need to
289:28 - change you need to make that adjacent
289:31 - over hypotenuse there we go the cosine
289:34 - ratio and then we're going to run
289:37 - this and you see this is what it gives
289:40 - you not drawing scale and it gives you
289:42 - these random
289:43 - integers you know may or may not look
289:46 - reasonable in the hypotenuse and then
289:49 - it's going to prompt you for for angle a
289:52 - what's the measure of the adjacent side
289:54 - oh it's seven type it in hit
289:58 - enter what's the measure of the
289:59 - hypotenuse
290:03 - 11.4 and hit enter and then what it does
290:06 - is it gives you the cosine of that
290:09 - angle so there here we go so we can see
290:11 - that you know these are some things we
290:13 - can do to generate the cosine we'll do
290:17 - the same thing with
290:18 - Tangent and remember tangent is the
290:21 - ratio of the opposite over
290:23 - adjacent so this one when we run it it's
290:26 - just going to
290:30 - display this so you can see from angle
290:33 - a three is the opposite four is the
290:37 - adjacent and we also could imagine that
290:40 - the other angle B it would be 4 over 3
290:43 - because different opposite and different
290:45 - adjacent so now let's calculate
290:49 - it generate
290:52 - integers and when we prompt for these
290:55 - measures then you know what's the
290:58 - opposite store it what's the adjacent
291:00 - store it and then yours would be equals
291:02 - zero but then you're going to this is
291:05 - what you're going to change it to that
291:06 - the tangent is opposite over
291:08 - adjacent and then print out the
291:11 - tangent so we get to
291:15 - this and you know two random sides
291:19 - Pythagorean theorem we get the third one
291:22 - and what so from angle a what's the
291:25 - measure of the opposite side oh it's one
291:28 - hit enter and then the adjacent oh it's
291:32 - six hit
291:35 - enter and there we go the tangent is
291:38 - opposite over adjacent which is 1 16
291:41 - then there's the
291:43 - decimal so remembering these there's a
291:47 - nice formula here
291:50 - um and it's written like this because
291:54 - you see the big S for sign and then a
291:57 - little o h opposite over hypotenuse The
292:01 - Big C for cosine and then the little a
292:03 - over H adjacent over hypotenuse Big T
292:06 - for tangent opposite over adjacent and
292:11 - you can imagine you know using this and
292:13 - you would pronounce this
292:15 - soaa there we go you could see that
292:19 - soaa but that way in picturing this it's
292:23 - easy to picture soaa easy enough you
292:27 - know nonsense word to remember and then
292:30 - it reminds us of s cosine and tangent
292:35 - ratios there we go and what you're going
292:39 - to do here
292:41 - is you
292:42 - know we see s cosine and tangent ratios
292:47 - and we're going to calculate the actual
292:49 - values and we're going to use this as a
292:51 - practice app so not only you going to
292:54 - practice you know remembering s cosine
292:56 - and tangent ratios then we're also going
292:59 - to write some code to generate a
293:02 - practice app so here we have randomly
293:06 - generated side
293:08 - lengths and
293:10 - display the
293:12 - triangle so
293:14 - then what we have is um angle a I'm
293:19 - going to use the same triangle that I've
293:21 - been using for the other examples so the
293:24 - S of
293:26 - a and remember so a is going to be
293:30 - lowercase a for the side C for
293:34 - the for the hypotenuse
293:37 - and for round it to four decimal places
293:41 - so what do we have um we want to use
293:44 - this for the same for the other function
293:45 - so the cosine of
293:48 - a and I can copy this but we have to
293:51 - remember what what to
293:54 - change so the cosine of a of a is going
293:59 - to be side B over over C because B is
294:04 - going to be the adjacent side and then
294:07 - the
294:08 - tangent I'll just p this also so
294:12 - opposite over adjacent so that's A over
294:16 - B so we see we'll get these and then the
294:21 - sign of angle B if you can picture sign
294:24 - of angle B the opposite
294:29 - side the opposite side is going to be B
294:33 - because that's what it is you know uh
294:36 - the naming convention capital letter for
294:38 - the angle lowercase letter for the side
294:41 - across from it so the sign is going to
294:43 - be B over C the
294:47 - cosine is going to be a over C and you
294:52 - see that works out it is
294:56 - um the S of angle a is the same as the
295:01 - cosine of angle
295:02 - B and then the
295:05 - tangent is going to be for angle B so
295:10 - the opposite side is going to be B and
295:13 - the adjacent side is going to be
295:15 - a so we have the actual values here
295:19 - now of s Co s cosine and tangent of
295:24 - those two other angles the other angle
295:27 - in the triangle is a right angle and uh
295:29 - we we'll get into this s and cosine but
295:33 - setting it up like this it almost seems
295:35 - like it it doesn't uh quite compute
295:39 - because we have undefined and
295:40 - anyway so we have um you're going to ask
295:45 - somebody to enter a fraction but notice
295:48 - when we do this um I can't just
295:52 - automatically do that math and then
295:55 - output the answer because this um input
296:00 - that we're going to
296:01 - get for the sign this input it won't
296:05 - parse that dividing line it wants to
296:09 - take it as a string
296:10 - but then when I convert that to an
296:12 - integer it's it's not going to quite
296:15 - work with that dividing line so we're
296:16 - going to take that input and then what
296:18 - we're going to do is we're going to
296:20 - split it at that dividing
296:22 - line and so when we split it this ratio
296:26 - is now an array with two elements so the
296:29 - first
296:31 - element that one we're going to convert
296:33 - to a floating Point even though
296:35 - realistically it's probably going to be
296:36 - an integer I'm still going to say float
296:39 - and then the next next element and I'm
296:41 - going to convert that to a float and I
296:43 - stored them as n and D numerator and
296:46 - denominator so there we go so now we
296:48 - have numerator divided by denominator
296:52 - that's the ratio that we're going to get
296:54 - and again round it to four decimal
296:57 - places so what we're going to have here
297:01 - is these uh you know it's going to print
297:05 - the
297:06 - actual and then print um the input
297:11 - and we can see the the comparison here
297:14 - you know
297:17 - um all right so in each of these it's
297:21 - going to you know round it all rounded
297:23 - to four decimal places so it matches so
297:27 - when we see this it's going to prompt
297:28 - for the input of all these s cosine
297:32 - tangent which each of these we
297:34 - calculated up
297:37 - here and then all of this you actually
297:40 - don't have to change but I just want to
297:42 - show you how this works taking the input
297:45 - it's going to be some ratio using this
297:47 - dividing line so each time we're going
297:50 - to split it and calculate it and this is
297:53 - just good thing to have you know tool in
297:55 - your toolbox taking in you know a
297:59 - fraction that somebody types but then C
298:02 - converting it so there we go and we're
298:05 - going to test the app so let's take this
298:07 - and run
298:08 - it and we see
298:12 - that we generate these random side
298:16 - values
298:17 - hypotenuse and you can enter in you know
298:22 - as a practice s of a 19 over
298:26 - 2062 so we'll put that in there 19 or
298:32 - 2062
298:33 - and there we go as you see the actual
298:37 - compared to the input and then you can
298:39 - check yourself is it correct yep cosine
298:42 - of a 8 over 2062 and we put that
298:49 - in there we go and again compare tangent
298:53 - of a 19 over
298:58 - 8 s of
299:00 - B 8 over 2062
299:10 - and so in addition to testing out your
299:12 - code you're also practicing your trig
299:14 - ratios cosine of B 19 over
299:23 - 2062 and hopefully you're also
299:26 - recognizing that you know some of these
299:30 - calculations are similar because the
299:32 - sign of angle a is the cosine of angle
299:37 - B and we have tangent of angle B B is 8
299:41 - over
299:42 - 19 and with that
299:47 - one there we go and the code test has
299:51 - passed not because of these correct
299:53 - answers you know if you got if you put
299:55 - in an incorrect answer you would just
299:57 - see the comparison and realize nope
299:59 - that's not the right answer but the code
300:01 - test is passed because of the formulas
300:04 - in
300:06 - there
300:08 - so as I mentioned the familiar pattern
300:11 - so what we're going to do is we're going
300:14 - to look at just a loop here and
300:19 - um we're just going to change the ratio
300:21 - here
300:23 - so if I have range
300:26 - um uh 37 I just uh pick that number as a
300:31 - random number but it's enough to show
300:34 - some some values here but if I have a as
300:38 - an angle
300:41 - so there we go 1 to
300:43 - 36 and
300:46 - then a * 10 so you know every 10 that's
300:52 - going to be every 10 degrees that's
300:53 - going to be enough than 360 because it's
300:57 - going to stop at
300:58 - 37 uh well if the range is 37 the last
301:02 - would be last number would be 36 and
301:04 - that' be
301:07 - 360° so we're going to talk about
301:10 - radians in a little bit but for right
301:11 - now um the sign
301:15 - we are going to take that angle but
301:20 - um that I have in mind as degrees so
301:24 - we're going to convert that to radians
301:26 - because math. sign works with radians so
301:30 - we have the S value math.
301:33 - sign and it works in radians so I have
301:36 - to convert that angle to
301:38 - radians and
301:40 - all that we know the S and cosine
301:44 - tangent values tend to be long decimals
301:47 - so I'm just going to round that to four
301:48 - decimal places so that's going to be the
301:51 - ratio ratio underscore s for sign so
301:55 - ratio cosine I'm going to do something
301:58 - very similar I'm going to take that
302:00 - value in fact I am even just going to
302:02 - copy
302:06 - this
302:08 - and really the only thing I'm going to
302:10 - change here is
302:13 - cosine so it's going to Loop through
302:16 - this you know every 10 degrees um which
302:20 - radians it's not that's not going to be
302:21 - a nice round number but every 10 degrees
302:24 - and what's the sign of that what's the
302:26 - cosine of that and this is what we're
302:28 - going to do we're going to print that
302:30 - out so I have you know the ratio and I
302:33 - have the tab so we'll see this in a
302:36 - nice so we see
302:40 - you know each I just put a lot of extra
302:42 - spaces so we can see all these values
302:45 - s and cosine is one and then if we look
302:49 - at the S value gradually increases the
302:52 - cosine value gradually
302:57 - decreases now 45 degrees they're they
303:00 - are actually the same so we see this
303:02 - flip you know 40 to 50° you know we
303:06 - really see the flip there s of 90 is one
303:10 - where the cosine 90 is
303:13 - zero and then we get into some negative
303:16 - values um for these angles that are
303:19 - beyond the triangle but we'll see where
303:22 - they come into play with the unit circle
303:25 - so we see all
303:27 - these and that's all you needed to do
303:30 - take a look at those patterns it's
303:32 - pretty interesting
303:35 - um we'll come we'll revisit that as we
303:37 - as we look at some other aspects of this
303:40 - so we have radians now we've been
303:43 - alluding to this and a radian is the
303:46 - measure of the radius along the
303:48 - circumference of the circle
303:51 - so that measure so uh 2 pi * the radius
303:56 - is the circumference and so there are
303:59 - two Pi radians in a
304:01 - circle and there we go one radian it's
304:06 - about
304:08 - 57° and then and exactly 2 pi is exactly
304:14 - 360°
304:16 - so
304:17 - um you know radians it's good because
304:21 - it's proportional to the radius so a lot
304:25 - a lot of uh actual physics applications
304:28 - and such use radians because it it makes
304:31 - a difference it's proportional to the
304:32 - radius that that has an effect whereas
304:35 - degrees we're used to using degrees and
304:39 - a lot of things that's it's kind of an
304:40 - arbitrary number
304:43 - so for some applications that's fine
304:45 - because that number doesn't affect other
304:47 - things but there we go so we have 2 pi
304:50 - radians or 3 pi over 2 if I see it as 3
304:53 - pi over 2 I'm going to say oh yeah that
304:55 - must be radians but then that's
304:59 - 270° here we're just going to run this
305:02 - and just see the comparison um you
305:05 - you'll see I have just you know um some
305:08 - code in here to to
305:11 - display Pi yes this is the um Sim pi to
305:17 - display Pi so anyway we have
305:20 - pi and I'm just I just decided to do you
305:23 - know pi over
305:25 - one so that's really Pi it's 180° pi
305:28 - over 2 90 pi over 3 60 pi over 4
305:33 - 45 um P five six so 1 2 3 4 5 and six it
305:40 - works out nicely 300 you know we get to
305:44 - Seven you know all right that's a messy
305:46 - number Eight's not horrible and 9 10
305:51 - great 11 another messy number and then
305:53 - 12 back to um for a lot
305:57 - of ratios a lot of radians just
306:01 - remembering pi over 12 is 15° and then
306:03 - just doing multiplication from that most
306:06 - of our important angles the like the
306:08 - major round number angles um are going
306:11 - to be multiples of 15° so you know PI 12
306:15 - reduce the fraction if you need to so we
306:17 - just see our comparisons here that's
306:19 - really this one in the last one I just
306:21 - wanted you to run this to start seeing
306:22 - comparisons seeing some
306:24 - patterns and this all does relate to the
306:27 - unit circle so it's called the unit
306:31 - circle because it's a circle with a
306:33 - radius of one so radius of one unit
306:37 - hence the unit circle and the center at
306:39 - 0 0 so here's the interesting thing when
306:43 - you plot an XY Point anytime you plot an
306:46 - XY Point you're counting you know from z
306:51 - z you're counting over X up y so
306:55 - perfectly horizontal that's X and then
306:58 - perfectly vertical is y and it makes a
307:02 - right angle because of our rectangular
307:04 - coordinates and then the
307:06 - hypotenuse um there we go you which is
307:10 - one if it's the unit
307:12 - circle so there we go when we make that
307:15 - I'm going to run this and then I'm going
307:16 - to go back to talking about
307:18 - this
307:23 - um so we
307:26 - see if I'm on my coordinate plane I
307:29 - didn't draw the axis here but from 0 0
307:33 - if I were to plot a point I count overx
307:37 - up y plot the point well
307:40 - then that makes that adjacent side x the
307:43 - opposite side y because of my central
307:45 - angle here and if it's a unit circle
307:48 - then that's because the radius or the
307:51 - hypotenuse in this case is one so at
307:54 - every point I get what's the what's the
307:58 - cosine of this angle or what's the sign
308:01 - of the angle opposite which is y over
308:04 - hypotenuse which is one and the cosine
308:08 - is X over one so that's what we always
308:11 - have
308:13 - here so s is the sign the center Tri
308:18 - angle is y over one the cosine is X over
308:20 - one so with this we have the
308:25 - cosine and
308:27 - sign for our unit circle and that's
308:30 - really where all of our trig values come
308:33 - from that you know based on that unit
308:36 - circle then my cosine
308:39 - and my sign are my X and Y values and so
308:44 - that links up with here we
308:47 - see each of these XY and plot this point
308:51 - so we see you know sine value of 1736
308:55 - cosine value
308:57 - 9848 there you go plot the
308:59 - point and each of these plotting these
309:01 - XY
309:04 - points and when we get Beyond 90 the you
309:09 - know you're in that different quadrant
309:11 - so that's why the cosine is negative
309:13 - it's negative X
309:14 - values and then when we get to Beyond
309:19 - 180 which you know X is NE
309:23 - -1 Y is zero and then beyond that you're
309:26 - in the third quadrant both of them are
309:29 - negative we'll start see we'll see this
309:32 - come up again in a second so in this
309:36 - this is just you know interesting if you
309:38 - want to take a look at it it's similar
309:39 - to what we were doing before about just
309:41 - plotting a display to show this so we
309:45 - have the unit circle
309:47 - here and here's you know connecting with
309:50 - that earlier step that I was just
309:52 - showing you all right so we know now
309:55 - that the coordinates are the cosine and
309:57 - the
309:58 - sign and we know we did that Loop a
310:01 - minute ago looping through all the s and
310:04 - cosine values and then we're going to
310:06 - connect this to that earlier step of
310:08 - creating a path line two so I'm going to
310:13 - start it with path move two and then
310:16 - from that point it's going to be path
310:18 - line to every other point and then path
310:21 - close the
310:23 - poly and that's what we're doing here
310:25 - we're just going
310:28 - to start with
310:30 - this one Zer so that's my coordinate
310:34 - point and each of these because there's
310:37 - enough that are uh floating Point um
310:41 - even the ones that turn out to be
310:42 - integers I'm still putting 1.0
310:45 - 0.0 with a decimal
310:48 - point so there's my uh my vertex array
310:53 - that's that I'm going to build and
310:56 - then I'm going to move the the point to
310:59 - there and now I'm going to Loop through
311:01 - just like I did
311:02 - before and here um I'm going to put this
311:08 - I I I made one less step here because I
311:10 - did a * 10 here still going
311:13 - through uh degrees so from 0 to
311:18 - 360 um because it'll stop at 36 * 10 360
311:24 - so same thing I'm going to but now I'm
311:25 - storing that that's my X that's my
311:28 - Y and then I'm going to append that to
311:32 - my my
311:34 - vertex uh my verts
311:37 - array and and I'm going to append this
311:42 - to the line two so each of these you
311:46 - know I start with this and I'm going to
311:47 - append each of these XY
311:51 - points
311:52 - and this and now when I complete the
311:55 - array after looping through all that
311:57 - then I'm going
311:58 - to append this last one back to one
312:03 - Zer codes that a pen close poly and it
312:08 - all comes together now I have those two
312:10 - arrays and then here's my
312:12 - path uh capital P path and then that
312:15 - takes these two arguments these two
312:17 - arrays verts and codes as stored as this
312:22 - path so now when I do the
312:25 - graph I can add so you see I have to
312:29 - create this
312:31 - patch so patches path patch and right
312:37 - here I add the path I decided to make it
312:40 - blue face color blue um and then the the
312:44 - weight the line weight I made it two I
312:46 - just think that looks nice and then I'm
312:48 - going to add
312:50 - that so we see how it builds we're
312:54 - building our arrays of points and um
312:57 - steps and then I put that together as
313:01 - path that path variable shows up here in
313:05 - my patches and that patch variable shows
313:08 - up here in what I'm adding to My
313:11 - Graph um I did I don't always but I did
313:15 - make this equal so it it just looks much
313:18 - better when we're doing the unit circle
313:20 - because it's a unit circle not a unit
313:23 - oval and there we go we're going to plot
313:27 - this and then we run
313:30 - it so this is what we see you know we
313:33 - started here at one Z and
313:38 - appended you know 10 you know 36 around
313:42 - every 10 degrees and that was enough to
313:44 - give it a pretty smooth
313:46 - Circle but there we go at every point
313:49 - about every 10 degrees we plotted an XY
313:53 - point and then connected the line and
313:56 - that's where we get our unit circle and
313:58 - this one I did put the grid so we see
314:00 - that the center is at 0 0 and our radius
314:04 - is one in every
314:05 - direction and this is our unit circle so
314:08 - you can really see that that's where all
314:11 - of the trig values come from because at
314:13 - any point in here from 0 0 I can count
314:17 - over some x amount up some y amount and
314:22 - I'm on the on the circle and plot that
314:24 - point and it makes a
314:26 - triangle
314:28 - so it we we we loop around a lot and we
314:32 - revisit things that we've done before in
314:35 - trig um not just because it's full of
314:38 - triangles and circles but because these
314:40 - all relate and you want to see these and
314:42 - you know see how one thing relates to
314:44 - the other and then you come back around
314:46 - and see how something else relates to it
314:48 - we're even going to take this um you
314:51 - know a step further in the full course
314:53 - and uh look at you know imaginary
314:55 - numbers and how that relates to all this
314:57 - but there we go so we see see our unit
314:59 - circle by creating this circle of points
315:03 - in a
315:04 - path so now we're going to
315:07 - solve triangle solve for an unknown side
315:12 - now the way I have this here this is
315:14 - going to display something
315:16 - and we'll just run this and we're going
315:20 - to see that we have their Imports we're
315:23 - going to display a
315:25 - triangle
315:27 - and I'm just going to give it a random
315:31 - angle
315:32 - then I'm going to put that text in there
315:37 - and I'm going to give a random
315:40 - hypotenuse
315:42 - measure as well as display side a and
315:46 - side B so let's take a look at
315:50 - this and then we'll go back and look at
315:53 - what the code is
315:55 - doing so the first thing is we'll come
315:58 - back to that output is that we're going
316:00 - to display this triangle with an angle
316:03 - I'm going to randomize this so so every
316:07 - time that angle is going to be a
316:08 - different degree ree measure and then
316:10 - hypotenuse same thing random number and
316:14 - then I have side A and
316:16 - B
316:18 - so if I want to set up my trig ratio for
316:21 - side
316:22 - a we see the angle so the sign is a over
316:29 - 8 and that's what I have
316:31 - here the sign of 32 is a over
316:36 - 8 one step of algebra
316:39 - multiply both sides by 8 so I have 8 *
316:42 - the S of 32 = a and then when we solve s
316:47 - 32 is always the same number so we
316:49 - figured out that side a is
316:53 - 4.24 and that's what it want to do you
316:55 - can do this on on a board you know
316:57 - without a calculator um you know at some
317:01 - point you probably need a calculator
317:02 - nobody's going to remember the s s of
317:05 - 32°
317:07 - but the here we go showing the steps how
317:10 - we set up our understanding of trig
317:13 - ratios and set up here's my unknown and
317:17 - how I can solve for an unknown side so
317:19 - what we're going to do is we're going to
317:20 - do that for side B so we see solving a
317:24 - triangle I can you know this works
317:27 - because I know that this other angle is
317:28 - a 90° angle so to get the other angle I
317:33 - you know I have this one the other one's
317:35 - 90 to get the third angle I just
317:37 - subtract 90 - 30
317:39 - 32 I'm going to do s to figure out side
317:43 - a and then I'm going to use cosine to
317:45 - figure out side B and there we go I have
317:48 - you know all three sides all three
317:50 - angles so we're going to take a look at
317:52 - what we do here for
317:55 - sign
317:57 - and we can copy all of this um so we
318:03 - want to get to this cosine
318:06 - value um
318:09 - we can copy the sign
318:11 - value um if we want so we can see
318:16 - um the the key feature is getting to
318:19 - these variables but we can solve
318:24 - um we can even copy this
318:28 - for this one step of
318:32 - algebra solve we can copy all of
318:37 - this as and
318:42 - then um I'm going to put this all
318:46 - here and then we're going to change
318:49 - it so first of all we have the
318:54 - cosine of that
318:57 - angle is going to be B over side
319:03 - C one step of algebra because at times
319:08 - the cosine
319:12 - again um it's going to give us
319:17 - B and then so here's what we're going to
319:19 - do how do I get that cosine
319:23 - value um which here was just set to
319:27 - zero just not give it error when you ran
319:29 - the other part cosine value is
319:33 - math.
319:35 - cosine and remember it's going to be the
319:39 - coine
319:40 - of you know that
319:44 - angle
319:46 - and here we
319:48 - go cosine because then it's going to be
319:52 - that side C which is the hypotenuse
319:56 - times cosine
319:58 - value
320:00 - equals side B so we see we're walking
320:03 - through um you don't always in you know
320:06 - in in your future endeavors you not
320:08 - always going to write out all these but
320:11 - it also it helps you learn what steps
320:13 - you're doing and then you know display
320:15 - it and see that everything works well
320:18 - okay so then side a which we're actually
320:22 - going to make it side
320:27 - B is there we
320:29 - go that times
320:33 - cosine value so there we go side C times
320:37 - the cosine value and I'll round it to
320:39 - two and then that's going to be side
320:45 - B and after doing all
320:49 - that there we go we have the code that
320:52 - you just wrote great and copy the model
320:56 - above and after all of
320:59 - this we already we we copied it so we
321:02 - already have side
321:04 - B and that I mean it's not interrupting
321:09 - but we can just delete this and the
321:11 - question is did you change every line
321:13 - except for the three static print
321:15 - statements say the print here uh solve
321:19 - here
321:21 - so it looks like we did set up the ratio
321:26 - and let's run this and see what
321:29 - happens so we have our value
321:33 - there so we see random angle two degrees
321:37 - side A and B
321:39 - hypotenuse 5
321:42 - so side a the S of 2 degrees equals a
321:46 - over five one step of
321:49 - algebra and we solve so side a is very
321:53 - tiny not surprising the angle is only 2°
321:57 - set up for side B the cosine of 2° is B
322:00 - over 5 one step of
322:03 - algebra yep 5 * the cosine of 2 =
322:07 - B and
322:09 - cosine is Tiny so side B is five rounded
322:14 - it looks like a and it looks like side B
322:17 - is the same but it's just really because
322:18 - of rounding they would not be exactly
322:21 - the same at all um the hypotenuse would
322:23 - be a little bit
322:25 - more so you know
322:28 - maybe maybe B is you know 4.99 or
322:32 - something like
322:34 - that and there we go so we have this uh
322:37 - maybe we could now this is code T code
322:40 - test pass so we can go on to the next
322:42 - step but you could always go back and
322:45 - change this to round any of these to you
322:47 - know multiple values um you
322:51 - know make this round it to four decimal
322:55 - places or something but there we go so
322:57 - now we see how we would set this up and
323:01 - how we would use this to
323:04 - solve and we're going to apply this to
323:07 - the length of a ramp
323:10 - now here we go
323:14 - um this one once again I I I like to
323:17 - have these where you're going to run the
323:18 - code and then do something to it but if
323:21 - we have a ramp so if you know the height
323:24 - that you want to get to and if you know
323:26 - the angle then we can use sign to
323:29 - calculate the length of a
323:31 - ramp all right so we're just going to
323:33 - run this and as you see I put some of
323:37 - the animation in so there's a slight
323:40 - delay but it it will give you a
323:42 - different angle each time and if you
323:45 - just run it it's going to tell you the
323:48 - length of the ramp is zero and now write
323:51 - the code to solve for side C and each
323:53 - time it'll give you a different angle
323:55 - there and the height and we can use sign
324:00 - to figure out side C because knowing
324:03 - that angle I know the opposite and I
324:06 - want to know the
324:07 - hypotenuse so then we go up here and we
324:12 - see it's already built in you get the
324:15 - same animation here you know random side
324:19 - random
324:21 - angle
324:24 - and then down here we want to write the
324:27 - code for side C which is sign and if we
324:31 - remember opposite over
324:34 - hypotenuse and that's we don't know so
324:39 - we are going
324:41 - to have two steps of algebra like before
324:45 - so we
324:47 - have so the S of 58 equal 5 over C and
324:55 - multiply both sides by C divide by 558
324:59 - so side C equals that
325:04 - angle which we have here that that
325:11 - side divided by the sign of that
325:16 - angle so we're going to have and we I
325:21 - even put in this step here for you
325:23 - radiant
325:24 - angle so we
325:27 - have side
325:30 - a ided by math.
325:36 - sign of radius
325:42 - angle and it'll probably be a decimal
325:47 - number but we'll leave it at that and
325:51 - there we
325:54 - go so different
325:57 - angle different
325:59 - side but the code should still work the
326:02 - length of the ramp should be 20.7
326:08 - there we go and as you can see see that
326:11 - way you can build in these variables and
326:13 - write the code so no matter what the
326:15 - angle you can figure that out you know
326:18 - oh I want to get to this height you know
326:21 - what
326:22 - angle you can apply this to other
326:25 - situations in life I want to get to this
326:27 - height what angle do I want and then
326:30 - therefore how long of a ramp all right
326:32 - now we have rope tension so here's
326:35 - another one now this one rope tension
326:37 - will be cosign and we'll see why so
326:40 - tension is the force pulling on the
326:42 - ropes if I have two ropes hanging
326:44 - straight down then that works that
326:49 - tension is divided by those two ropes
326:51 - but if that angle
326:54 - increases
326:56 - then
326:58 - the tension is
327:01 - more so we'll look at this then we'll go
327:04 - back and look at the code so these blue
327:06 - lines
327:08 - if I had if I was hanging something you
327:11 - know a light or a shelf or something if
327:14 - I had these blue lines that are
327:15 - perfectly vertical I would just divide
327:18 - the tension divided by these two lines
327:20 - these two ropes great but these green
327:24 - lines would be an angle and as we see
327:28 - the angle ends up being a hypotenuse
327:31 - because if the UN the line that's not
327:35 - there would be the ceiling
327:38 - and so that would make a right triangle
327:40 - so given that upward force on the blue
327:44 - ropes then the green ropes would be more
327:47 - of a force and as we can see as that
327:49 - angle gets to be more then that green
327:53 - line ends up being a lot longer than the
327:55 - blue
327:57 - and we see this that you know if you you
328:00 - know practical applications if you were
328:03 - hanging something and you have the the
328:05 - ropes perfectly you know 90° with
328:07 - whatever you're holding up great but the
328:10 - more of an angle the more tension on
328:12 - that rope and if you're hanging
328:13 - something heavy that's going to make a
328:15 - big difference so we can figure this out
328:18 - what's the diagonal Force well given
328:20 - that upward force and I would know that
328:22 - angle in this case 25 degrees then what
328:25 - do I have adjacent over hypotenuse and
328:28 - then that's
328:30 - cosine so we see just like a lot of the
328:35 - codes very similar and I just have no
328:38 - for each of these the vertical
328:40 - forces and there we go um but I have the
328:47 - random
328:50 - angle or the rad you know I have my
328:52 - angle and then I even converted it to
328:55 - radians for you um and I have the side
329:00 - that we know so side C is going to be so
329:06 - remember cosine the cosine of in this
329:09 - case 25 is going to be 8
329:13 - over side C and so two steps of
329:19 - algebra side C is um 8 / the cosine of
329:24 - the angle so we get side C equals but
329:29 - I'm not just going to put a number in
329:31 - it's going to be that side side a
329:36 - divided by math do cosine of radian
329:45 - angle there we
329:48 - go so when we run this now we see the
329:52 - force on the diagonal
329:54 - rope and as you see every time you run
329:58 - it it's going to give you different
330:00 - amounts but that's why we want these as
330:02 - variables so then the code will always
330:04 - work so you see look at that upward
330:08 - Force three we can call this Newtons
330:10 - upward force would be three Newtons but
330:12 - if I have an angle of 78° which you know
330:17 - that that'd be a huge angle not drawn to
330:18 - scale here but an angle of
330:21 - 78° then that force on the dagal Rope
330:24 - ends up being 14.4 Newtons wow um you
330:28 - know almost five times the amount
330:31 - because it's such a huge angle and if
330:33 - you're trying to hang something heavy
330:35 - then that really makes a difference
330:39 - so you know an application for sign like
330:42 - a ramp an application for cosine like
330:44 - tension on a rope an application for
330:46 - tangent
330:48 - surveying
330:50 - so just like the other two we're going
330:51 - to run this
330:52 - [Music]
330:54 - code and certainly not drawn to scale
330:57 - but if I have the distance I would have
330:59 - some really tiny angle here because this
331:02 - is what we do with
331:03 - surveying I look ahead and I have
331:07 - something he here again very much not
331:09 - drawn the scale but I would look ahead
331:12 - at some post and I have some markers so
331:15 - I would know ahead of time the distance
331:18 - you know in this case I'm calling it 0.
331:21 - five but I would know this distance um
331:25 - and uh from one point to the
331:29 - other so given that you know some post I
331:33 - have like way down the road I would know
331:36 - this and then so I have my surveying
331:39 - equipment and I measure this exact angle
331:41 - so I'm calling it 4° here but really it
331:44 - might be something with you know a lot
331:46 - of decimal places and that's what
331:47 - surveying equipment does it it it ends
331:49 - up making sure that something is level
331:52 - on the bottom and then measuring an
331:54 - exact angle down to multiple decimal
331:56 - places so then if I wanted to figure out
332:00 - this distance what do I have I would
332:02 - know this opposite I would know this
332:05 - angle and it's the distance I want to
332:06 - know tangent
332:08 - opposite over
332:10 - adjacent so there we go by default it'll
332:13 - just say you know distance is zero but
332:16 - just like we have
332:18 - before so the
332:21 - tangent of four
332:24 - is05 over this distance and two steps of
332:27 - algebra this distance is05 over the
332:31 - tangent of
332:32 - four and like the other ones I have
332:35 - radiant angle and and the other side I
332:40 - have it as side
332:44 - a there we go not as a ver not as um a
332:50 - random number but it's for this one I
332:52 - put it as always 05 again if you're if
332:55 - you're surveying you know your post that
332:58 - you put somewhere you would know that
333:00 - distance ahead of time so really then
333:03 - what you're measuring is that angle so
333:06 - side b equals I'm still going to use the
333:08 - variable because just in case I want to
333:12 - change this later I don't have to change
333:15 - it in multiple places so side a divided
333:19 - by tangent of radian
333:27 - angle and there we go so when I run this
333:33 - again
333:35 - so given this now this time the angles
333:38 - 2° and it gives me the distance of
333:45 - 14 and who knows maybe you know maybe
333:48 - this is in meters you know 0.5 MERS um
333:52 - and then I have you
333:56 - know uh my surveying equipment oh this
333:58 - is only two two degrees oh so then it's
334:01 - 14
334:02 - M which you know doesn't seem that
334:06 - terribly long of a distance you could
334:08 - walk walk that off but we illustrate the
334:11 - point and you can use this for you know
334:14 - a th000 m and if you have a good scope
334:17 - that you can see then you can that the
334:20 - process still works so there we go
334:22 - applying tangent you can use this for
334:28 - surveying okay so now all those we
334:30 - applied s cosine and
334:33 - tangent this is also a very useful the
334:35 - law of signs now we're going to get
334:37 - Beyond
334:38 - the right triangle you can use this for
334:41 - any
334:43 - triangle and you know if you've gone
334:46 - through the other part of the course you
334:47 - might remember when we were doing this
334:48 - setup but here's the formula this is
334:50 - these are all proportional in any
334:52 - triangle um side a over the sign of
334:56 - angle a equals side B over the sign of
334:59 - angle b equals side C over the sign of
335:01 - angle C and there we go these are all
335:04 - proportional in any triangle so if you
335:07 - have two of these then you can use the
335:10 - law of signs because you know now even
335:14 - without code let's say add two of these
335:16 - cross multiply you know I given these
335:20 - two if I that's four things in there and
335:23 - if I know three of them I can figure out
335:24 - the fourth or any any of these
335:28 - two so if it's the angle that I don't
335:31 - know remember then that's inverse sign
335:35 - and the code we're going to use is arc
335:37 - sign
335:40 - so here we go we're going to prompt for
335:43 - I'm not going
335:44 - to um I'm not going to draw a triangle
335:47 - here I'm just going to show you that
335:49 - what we're going to do is given any of
335:51 - these two and I'm not necessarily going
335:53 - to call I may just call them A and B
335:56 - even though it can be you know whatever
335:59 - A and
336:00 - B and I'm going to prompt so the known
336:06 - ratio and you see
336:08 - I'm going to ask for the known
336:11 - angle and then I'm going to ask for the
336:13 - side across because I do need to know
336:16 - that I need to know an angle in the side
336:18 - across from it that's my starting ratio
336:21 - and
336:22 - then if you don't know the value put in
336:24 - X so then it's going to prompt other
336:28 - angle and then it's going to prompt for
336:30 - other side and you see one of these
336:32 - you're going to put a number and one of
336:33 - these you're going to put an X so
336:38 - see angle a inside a I'm I'm going to
336:41 - cast those as float right away but angle
336:45 - B inside B I'm not because then if angle
336:48 - b equals x I'm going to do this this is
336:51 - going to be the model if angle b equals
336:54 - x what are we going to do now then that
336:56 - means we must know side B so then I'll
336:59 - cast it as a float and then I'm going to
337:02 - do my ratio side B time math. sign of
337:08 - math. radians angle
337:10 - a/ side a cross multiply I'm going to do
337:13 - side B time the S of a / side
337:18 - a
337:20 - so that gives me my
337:23 - ratio so then I need to do Ark sign of
337:29 - that ratio to get radians and if I want
337:32 - degrees um I could have just converted
337:34 - it but I just decided to do the prop the
337:38 - proportion um the radians * 180 /
337:43 - Pi so there we
337:46 - go so this all works if
337:51 - we you know if it's the angle B that we
337:54 - don't know then we can write the code to
337:57 - solve for angle B now if it's side B
337:59 - that we don't know so now the next thing
338:02 - is convert angle B so what do we have so
338:08 - side b equals so remember now if I know
338:11 - angle B cross multiply the sign of angle
338:15 - B time a / the sign of angle a equals B
338:23 - cross multiply so side b equals the
338:30 - sign um now notice for each of these
338:35 - um I used MP P but I also imported math
338:40 - you can actually
338:41 - use um either one here which is kind of
338:46 - cool but I'm going to use math math.
338:49 - sign of
338:52 - um and I would expect that somebody
338:55 - would enter an angle b as degrees so I'm
338:58 - going to do math.
339:01 - radians angle
339:05 - B all right
339:08 - so there we go so I have the sign of
339:11 - angle
339:13 - B
339:15 - times side
339:19 - a um divided
339:22 - by um we have
339:27 - already math
339:30 - um math do
339:34 - s of math do
339:44 - radians and that's angle
339:52 - a
339:55 - okay so that's what we have here so side
339:59 - B should
340:04 - be so s of angle B
340:10 - time side a / the S of angle
340:18 - a and so side B should
340:23 - be sign of angle
340:26 - B taking that
340:29 - input and that will be in degrees
340:32 - convert it to radians the sign times
340:35 - side a
340:37 - and then divided by the sign of angle a
340:41 - which we would already have up
340:44 - here angle
340:46 - a there we
340:50 - go there we go pretty good and so we can
340:54 - run
340:56 - this so the known
340:58 - ratio
341:01 - um let's I'm just going to uh pick one
341:05 - so let's say let's say it is an
341:07 - equilateral triangle so the known angle
341:12 - let's say it's 60 and the side across
341:15 - I'm going to call it
341:17 - five
341:19 - and we're going to test if it's a side B
341:23 - that we don't know so the other angle
341:26 - I'm going to say it's
341:28 - 60 and then the other
341:30 - side is going to be
341:34 - X look at that good time
341:40 - times so now we now you have
341:44 - it you know law signs any anytime you
341:48 - have that situation I know the angle and
341:50 - the side across from it and then one
341:52 - other thing an angle or side you can
341:55 - figure this out now we're going to build
341:57 - upon this that you you do this once now
342:01 - I have you know both two angles two
342:04 - sides I can do subtraction for the third
342:06 - angle and I could always do law of signs
342:08 - again for the third
342:11 - side and there we go then I have the
342:13 - whole triangle but we'll build upon this
342:16 - because now we also have the law of
342:19 - cosiness and the law of
342:23 - cosiness this works if I have two sides
342:25 - in the angle between them so that's the
342:29 - key and remember from from the course
342:34 - so notice it's I the formula looks a lot
342:38 - like Pythagorean theorem but then minus
342:44 - this and if this was a right angle if
342:48 - you know if C was if it was Pythagorean
342:50 - theorem and C was the hypotenuse then
342:52 - angle C would be 90 and then the cosine
342:55 - of 90 would be zero so that means you
342:58 - would be subtracting you know zero and
343:00 - then all that zero is out and then you'd
343:02 - be subtracting
343:04 - nothing but as that angle changes so
343:07 - then you are actually subtracting
343:10 - something um and therefore we see how it
343:15 - applies this also works I always
343:17 - remember just this formula um but notice
343:22 - C shows up once if you don't know side
343:26 - C um if you know side C you can figure
343:29 - out angle C or if you know angle C you
343:33 - can figure out side C if I know angle C
343:36 - it it it seems to be maybe a little bit
343:38 - easier because all the things that I
343:42 - know are on one side of the equal sign
343:44 - solve all this then square root the
343:45 - answer and get
343:47 - C but if it's an if it's side C that we
343:51 - don't know then I can do all this if you
343:56 - know if it's side C that that we don't
343:57 - know um or if it's angle C that we don't
344:00 - know then I can do all this um subtract
344:05 - everything divide
344:08 - and then do inverse coine few extra
344:11 - steps but it's doable either one you
344:15 - know and then whatever I call them a b
344:18 - or c it's always you know two sides in
344:21 - the angle between them and then I'm
344:23 - either figuring out that angle between
344:25 - them if I know that side across or you
344:28 - know so you potentially could know all
344:30 - three sides and no angles and whichever
344:33 - angle I'm calling angle C that's the one
344:35 - I'm solving for or if I know two sides
344:39 - in the angle between then I that angle
344:41 - between it's the side across that I'm
344:43 - figuring
344:45 - out so this one also we're going to
344:47 - prompt for
344:48 - input um side a side B and then either
344:53 - side C or angle
344:58 - C all right and so I'm going to
345:01 - solve um for angle C and then have this
345:06 - code over here for side C so if it's
345:10 - angle C that you don't know so now side
345:15 - C Cast that as a float and
345:19 - then I just have this notice is a bunch
345:22 - of steps here so I'm just going to call
345:24 - this step one
345:26 - because um side C squared and then I'm
345:31 - subtracting side b^ squ I'm subtracting
345:33 - side a
345:35 - squ and then
345:40 - there we go
345:44 - so then step
345:47 - two if I have if I have
345:51 - these
345:54 - then if we take a look at side
346:01 - B um I just am calculating this part
346:05 - here -2 * a a * B which I just expanded
346:09 - as side a side B I'm just doing this
346:13 - part
346:15 - here because you see the first part I'm
346:19 - subtracting these over to the left side
346:21 - of the equal
346:22 - sign and then step two I'm just doing
346:26 - this
346:28 - multiplying and
346:30 - then ratio C I'm dividing step one
346:35 - divided by step two
346:38 - and then now that I have that ratio I'm
346:41 - going to do AR
346:47 - cosine and we know that that becomes
346:50 - radians and I'm just going to do the
346:54 - conversion radians time 180 /
346:59 - Pi becomes angle
347:02 - C so in doing a lot of these steps you
347:05 - know that's it math is a bunch of steps
347:07 - you can write each step in code you know
347:09 - come up with your own in between
347:11 - variables um I I think that works out it
347:14 - kind of keeps it in keeps it organized
347:17 - for yourself and for you know anybody
347:20 - else you might be sharing the code with
347:21 - and you really see the steps because I
347:24 - probably could do all this all in one
347:26 - step now um python code convention we
347:30 - saw we kind of push the limit on the
347:32 - last in the last step that we only kind
347:36 - of shorter lines I don't want the line I
347:38 - don't want to have to sides scroll to
347:39 - get to the end of the line so python
347:42 - code convention if I did this I'd
347:44 - probably be a much longer line of code
347:47 - so I also like to keep shorter lines of
347:49 - code
347:50 - but the uh you know the the other thing
347:53 - is it just it just works out just you're
347:55 - seeing each step you know these
347:57 - independent
347:58 - variables these in between steps there
348:00 - we go so now let's take a look at side C
348:03 - so let's say this is the one we don't
348:05 - know
348:07 - so if that's the case so we have angle
348:10 - C is my
348:12 - variable all right
348:15 - so I might even just keep keep this here
348:19 - but let's look at it in between step
348:25 - here
348:27 - so um yeah just checking the four spaces
348:29 - to make sure that we're still in here so
348:32 - what do I have I have side
348:36 - now notice each of these I have side
348:40 - a side b side C that I already
348:45 - know
348:47 - so um so we have side uh side
348:54 - a
348:56 - squared
348:59 - plus side
349:02 - B
349:04 - squared minus 2
349:09 - time side A
349:13 - Time side
349:15 - B
349:17 - times math. cosine of
349:21 - math.
349:25 - radians of
349:29 - angle
349:32 - C now I need to store that as a
349:35 - variable um
349:37 - be now given all
349:40 - this um this equals
349:43 - c but it equals c^ squ and then I could
349:47 - square root it we'll
349:50 - see
349:52 - um I don't use just c as a variable here
349:56 - so I could
350:00 - um
350:04 - see ah let's see if if we have yes and
350:08 - you see it it get this I'd rather a
350:11 - shorter
350:12 - line
350:15 - um so I'm I'm actually just going to
350:18 - call my variable
350:21 - C2 and then down
350:28 - here
350:32 - C2 so you can come up with whatever in
350:35 - in between variable you have
350:38 - here and then you
350:41 - have there you go angle C once I have
350:44 - that then
350:46 - I do this the full side a^ 2 plus side
350:49 - b^ 2 minus 2 a times cosine of angle
350:55 - C there we go and I know that that's c^
350:57 - squ so I'll just independ in between
351:00 - variable C2 and then I'm going to square
351:03 - root it so let's take a look
351:09 - now let's say
351:12 - um it would be if I would know AB so
351:17 - let's say let's say this is a
351:19 - three um and it's side C that I don't
351:23 - know so
351:25 - three
351:27 - four and then the angle between
351:30 - them uh side C I don't
351:33 - know but the angle is 90 and we'll make
351:37 - this a nice 3 four five triangle look at
351:39 - that there we
351:43 - go and once you have this code you can
351:46 - you you can test it you know apply it to
351:48 - a bunch of other triangles that you
351:50 - might
351:51 - know there we
351:53 - go so now we're you know we're building
351:57 - these and remember if you've been going
351:58 - through other parts of the course this
352:01 - you know hopefully it's enough of a
352:04 - review and extra practice and make sure
352:06 - that you know you're even better at at
352:09 - writing all this code and we're building
352:11 - upon you know these situations okay
352:14 - right angle but I don't need a right
352:15 - angle I have my situation for law of
352:18 - signs my situation for law of
352:20 - cosiness and then the next part is well
352:24 - how do I calculate the area if I don't
352:26 - know the base and the
352:28 - height so we take a look at this here's
352:31 - this new area
352:34 - formula now notice how similar this is
352:37 - 12 AB now if this was a right a right
352:41 - triangle where A and B were the two
352:44 - sides the angle would and the and the
352:47 - angle C was a 90° angle they would be
352:49 - the base and the height and it would be
352:51 - area equals 1/2 base times height but if
352:55 - that angle is anything other than
352:58 - 90 then that changes but this is the
353:02 - exact adjustment AB time the sign of
353:05 - angle C
353:07 - because if angle C was 90 s of C is 1
353:10 - and then there we go it becomes the area
353:14 - but that changes proportionally as the
353:17 - angle changes so look at that but also
353:21 - what you need to know is very similar to
353:24 - the law of cosin two sides and the angle
353:27 - between
353:29 - them
353:32 - so I'm just going to plot here side a
353:36 - you know in this case there there's no
353:38 - other options it's it you know it's the
353:41 - area that I don't know but I would know
353:43 - these three these three things so I'm
353:45 - going
353:46 - to prompt for side a prompt for side B
353:50 - prompt for angle C and then just write
353:53 - the formula there so
353:56 - 0.5
353:58 - times side A
354:01 - Time side
354:03 - B time angle see I expect it to come in
354:07 - as a degree so it' be math. sign of
354:13 - math.
354:15 - radians of
354:17 - angle
354:23 - C and there we
354:28 - go and this
354:31 - one I I will do other ones other than uh
354:35 - side B
354:36 - and then if that's
354:39 - 90 there we
354:43 - go all
354:47 - right oh that's
354:51 - interesting
354:57 - so there we
355:00 - go and that is the area we did write the
355:04 - code and I will change that for you
355:07 - because that is the code to write the
355:10 - area so now we're going to put this
355:15 - together and solve any
355:18 - triangle so you know depending on what
355:22 - side we have what sides what angles our
355:25 - our goal is that if I know three any
355:27 - three things about a triangle I can
355:29 - figure out the other four things
355:32 - including the area and so
355:38 - this as we put it together draw the
355:42 - sides so this is I'm just going to draw
355:45 - a triangle not draw the scale
355:48 - but here's here's a triangle and I'm
355:51 - going to label the sides and the
355:55 - Angles and then I'm going to show the
355:57 - options you know what do we know two
356:01 - sides in the angle between do I know
356:04 - three
356:05 - sides uh
356:07 - do I know side angle across and another
356:10 - angle notice side angle across another
356:13 - side and you see the different
356:15 - situations you
356:17 - know uh two different ways to work with
356:21 - law of cosiness two different ways to
356:23 - work with law of
356:26 - signs and then other trigonometry a
356:30 - right
356:30 - angle and two
356:33 - sides Pythagorean theorem a right angle
356:38 - and a side and another angle other trig
356:42 - functions and
356:44 - so we're going to keep all that display
356:48 - the triangle and the options and then
356:51 - here are all the variables we're going
356:52 - to solve
356:54 - for there we go angle a there we go all
356:58 - these and then if option if you get
357:02 - option one then here's what you're going
357:05 - to do
357:07 - um
357:10 - input so if option one then it goes to
357:14 - this input side a and then you're going
357:17 - to complete this code well you can if
357:20 - you want then go back and copy the code
357:25 - from from this so option one is do I
357:28 - know two sides in the angle
357:30 - between and you can absolutely go back
357:34 - to the law of
357:39 - cosiness
357:42 - and we know the
357:44 - side
357:46 - so I know two sides and angle between
357:49 - I'm going to solve for side C so we're
357:51 - going to we're going to do
358:01 - this and
358:06 - all right
358:09 - so do I
358:11 - have if I have side a we have to prompt
358:18 - for side a side
358:26 - B There You Go Side a side
358:30 - B and side C and angle C
358:44 - mhm so th this is you know just an
358:47 - example
358:50 - of being able to reuse your your your
358:53 - code but then make sure it applies to
358:55 - this we you don't ever just want to copy
358:57 - and paste you want to see so
359:00 - um so in this one we did uh side B
359:06 - I'm going to make it a capital letter
359:08 - I'm going to make it an equal
359:10 - sign and I am also going to apply the
359:14 - new line so that this is going to be
359:19 - consistent and I don't need this because
359:23 - from picking that
359:26 - option all
359:28 - right and I know I don't know side C
359:36 - all right
359:41 - so so again we're side a side
359:47 - B and then angle
359:50 - C and we're storing it as those
359:53 - variables that match up with
359:56 - this again the little things you don't
359:58 - want to misspell your variables
360:02 - so now
360:07 - if I have
360:12 - this um now I have this
360:17 - extra
360:19 - um Step here which that's fine if you
360:24 - didn't you know if you didn't feel like
360:27 - rewriting it you don't have to but
360:29 - remember since I already know this I can
360:33 - keep this I can make it
360:37 - more consistent here and I can change
360:41 - that to a float which
360:45 - means I don't need
360:49 - this and then that means I definitely
360:52 - need to make sure that that variable
360:56 - matches and now we figured out side C
361:01 - which the variable that I want has no
361:03 - underscore
361:06 - and there we go if you
361:09 - want you can delete
361:12 - this and so what we have here
361:16 - is I now will take that
361:19 - input um and
361:24 - then I know now side a and I know side B
361:29 - and I know side
361:32 - C and we'll come back to this
361:37 - uh but then what I can do is after here
361:43 - I
361:45 - can
361:47 - so um angle
361:56 - a angle
362:00 - B and
362:05 - angle
362:07 - C and
362:13 - area there we go so then we'll add the
362:18 - area variable up
362:21 - here and down here we don't need angle C
362:25 - again because we already have it so we
362:29 - can delete that from
362:32 - here and
362:36 - there you go you have an example of what
362:40 - we would do with just that situation and
362:44 - filling in the rest of this I'm not
362:46 - going to repeat that it's it was in the
362:48 - other video about solving any triangle
362:51 - and there you have it displaying a
362:53 - triangle getting different inputs and no
362:57 - matter which input you would have a
362:58 - complete example here of starting with
363:02 - that how would I get every side every
363:05 - angle in the a area and then starting
363:08 - with something different how would I get
363:10 - every side every angle in the
363:13 - area so now let's look at just a
363:17 - refresher on the look of a sine wave so
363:21 - remember sign comes the word sinuous
363:23 - which means curvy and so we're just
363:25 - going to run this to show a graph of a
363:28 - sine wave and how we Define the array of
363:34 - X values
363:36 - remember the the graph is in radian so
363:40 - um I'm going to go from 0 to seven
363:44 - and 280 points that should be plenty
363:48 - detailed enough and then the Y value is
363:51 - just s of x uh both of them you know
363:54 - importing
363:56 - numpy I'm importing time for no major
364:00 - reason there
364:03 - and there we go just setting the figure
364:06 - size and here's the angle measure so
364:09 - let's run this and that's it just a
364:13 - refresher on the sine wave yal s of X
364:17 - and then we see the graph here angle
364:19 - measure and
364:21 - radians and we go from zero up to one
364:26 - down to netive 1 and there we
364:30 - go so let's talk about how that relates
364:33 - to sound and of all the different
364:35 - transform a we can do I'm really just
364:37 - going to focus on two of them here a so
364:41 - that's our multiplier which would give
364:43 - the amplitude of the wave and with sound
364:45 - that would represent
364:47 - volume and then
364:50 - B so as B increases then the wave gets
364:55 - more compressed and that would represent
364:59 - frequency so just some examples here of
365:05 - setting up sliders
365:08 - for you know notice I'm defining this
365:11 - function and I just call it f just to
365:14 - make this part short so that this line
365:17 - doesn't get too long but I'm going to
365:19 - define the function and do all the
365:21 - graphing in the
365:22 - function um I'm going to import inline
365:26 - import
365:28 - interactive
365:29 - and then we'll see
365:32 - that I just defined it like this we
365:36 - show you
365:38 - here the slider is always default to
365:42 - right in the middle but then we can see
365:44 - if I change B to be a smaller
365:51 - number and if I bring it down to one
365:53 - that should be a normal sine
365:55 - wave um we're going through remember
365:58 - Radiance of 6.28 there's your full cycle
366:01 - and we go through a little more than
366:03 - twice
366:06 - so just looking at b as B increases and
366:10 - then you can play with these sliders
366:13 - here you see it gets more and more
366:16 - compressed there we
366:19 - go and a being the
366:23 - amplitude there we go if it's one then
366:26 - you see it goes up to one down to
366:27 - negative one or normal this would
366:30 - actually be our normal sine
366:32 - wave I just decid to increase this a
366:35 - little bit
366:36 - and then as a increases notice the zeros
366:39 - stay the same but the amplitude
366:44 - increases and you can play with this and
366:46 - change these values here um I I
366:49 - mentioned the sound reference a lot of
366:51 - times then frequencies are much higher
366:54 - than this um you
366:56 - know 20 at the very smallest number but
367:00 - we're talking usually in the hundreds
367:03 - and you know can go up into a few
367:05 - thousands
367:06 - and that would be you know the range of
367:08 - frequencies we would normally hear in
367:11 - music but there we go
367:15 - and with this now this one I didn't make
367:20 - sliders um I just notice some of these
367:23 - here at the end just some things to to
367:25 - Tinker with so you can see um change the
367:28 - frequencies I did make the frequencies
367:31 - pretty high here and they would
367:34 - represent a frequencies right in the
367:36 - middle if you of piano keys if you're
367:39 - looking at that all right you know
367:42 - defining the array for the X values and
367:46 - here I'm just having I'm just graphing
367:48 - two things here so the frequency one * X
367:53 - and frequency 2 not changing the
367:55 - amplitude just changing the frequencies
367:57 - and I'm going to make the title of the
367:59 - graph illustrate
368:02 - that so
368:08 - uh yep there we
368:12 - go and it's pretty cool if you put these
368:15 - frequencies together now notice I didn't
368:18 - even add frequen
368:21 - uh you have these frequencies and what I
368:24 - did here is I'm
368:27 - plotting y1 plus Y2 so if you heard both
368:32 - of these frequencies
368:34 - together and and even though it's a
368:36 - little bit muddier than your normal wave
368:39 - at this scale you can see that it still
368:42 - kind of follows its own wave
368:45 - here and that's what makes Harmony
368:48 - whereas if I
368:49 - changed this to like you know uh 4 and
368:56 - let's say
368:58 - 31
369:01 - um some awkward number uh
369:07 - there there's there's some values you
369:08 - can Tinker with this there's some values
369:11 - that would be
369:16 - um you
369:18 - know that make better waves and
369:24 - others so you can Tinker with this you
369:28 - could even rewrite this and make it all
369:30 - sliders you know this is all that you
369:31 - needed to do for this I wanted to give
369:33 - you some chances to combine these
369:36 - frequencies and I just put them in
369:38 - changing the code instead of a slider I
369:39 - think that works out better for these
369:41 - higher
369:42 - numbers and there you go you can see how
369:45 - some of these
369:47 - combine yep and you'll notice you know
369:51 - which numbers and which combinations
369:53 - produce better
369:55 - patterns all right so pretty cool then
369:58 - this All Leads up to the certification
370:01 - project um bringing back some of the
370:03 - things that you were doing before and
370:06 - this is creating um for the
370:07 - certification project I have buil an
370:09 - analog stopwatch though what we have is
370:13 - you already have the video and the
370:15 - assignment of creating the whole clock
370:19 - so um this one I just said build a
370:22 - stopwatch and you know that would just
370:24 - be the secondhand cycling around but you
370:27 - already have the project that looks at
370:30 - the entire clock hour hand minute hand
370:32 - and second hand so
370:37 - really this whole uh certification
370:42 - is um a little bit of a review a little
370:45 - bit of a uh culmination uh you know
370:49 - cumulative uh review of some of these
370:52 - topics so far and some of the projects
370:55 - and you know going through this you can
370:59 - borrow code you've already written you
371:01 - know use some things you've already done
371:04 - and that should strengthen your
371:05 - knowledge and understanding of all this
371:08 - so by now you would have you know
371:12 - completing all these you know you should
371:15 - have a good understanding of you know
371:19 - trig s cosine but all the other trig
371:21 - values degrees and radians graphing
371:24 - solving any
371:26 - triangle um plotting points for unit
371:29 - circle plotting points
371:31 - for um you know a stopwatch and all
371:35 - sorts of other things
371:37 - so hopefully this is a a good start and
371:43 - we have more to come so let's talk about
371:46 - the Matrix and yes the Matrix was a math
371:49 - movie because it was all about what you
371:52 - can do with special effects which really
371:55 - are algorithms and math at the core of
371:58 - it and the structure of that that's a
372:01 - matrix the structure of a lot of things
372:03 - we can describe as a matrix
372:05 - and the root of a lot of other words are
372:09 - related to the root of the word Matrix
372:12 - Matrix structure matter
372:14 - material um the uh French word Matra the
372:20 - um you know English word matron um the
372:25 - you know the core the fabric that we're
372:28 - using as building blocks so in math a
372:31 - lot in a lot of things we want to
372:33 - translate things into a matrix so that
372:35 - we can do some math to it um and that's
372:38 - that's where we're going to get into
372:39 - some of the things that we've been doing
372:41 - we're going to show how to do some of
372:42 - these with it a matrix so let's start
372:45 - with you know how we um describe the
372:49 - Matrix let's you know so this is a 3X
372:53 - two which is it's always rows and
372:55 - columns so if this is a 3X two so then
372:58 - it's three rows and then two columns and
373:02 - then this one by contrast is a 2 by3 two
373:05 - rows and then three
373:07 - columns so you we we'll see how we can
373:12 - uh create a matrix and call them you
373:14 - know using code and you would Define you
373:16 - know row row row that's you know how you
373:20 - would Define you know when you're
373:21 - setting them up so if we take a look at
373:25 - 3x two 2x3 um I can name these you know
373:28 - I'll call this one Matrix a call this
373:31 - one Matrix B and if I wanted to call one
373:35 - element from a matrix I'm going to use
373:37 - row and column as my address so I would
373:43 - call it B and then a little subscript
373:45 - let's say you know Row one column two
373:49 - I'll usually put a comma there and Row
373:52 - one column two so then that's a two and
373:55 - then that's how I can call you know each
373:58 - you unique element in a matrix so you
374:02 - know setting them up um setting up this
374:05 - Matrix and uh we'll look at how to do
374:06 - this in code to but this is how it would
374:08 - display then what else do I want to do
374:11 - with it well the simplest thing we can
374:12 - do is we can add two matrices and yes
374:15 - that's the official plural matrices so
374:17 - if I wanted to add these two they need
374:19 - to be the same Dimension and then the
374:21 - you know I just add each element and
374:23 - then the answer is in that same place
374:26 - but these are not the same Dimension so
374:28 - I could not add these now we we'll get
374:31 - to multiplying I actually could multiply
374:33 - these because that's a whole different
374:35 - different situation but we'll get to
374:36 - that so if I wanted to add to well I
374:39 - couldn't do this but let's just say I
374:42 - have another one so it would also have
374:45 - to be a 3x2 I'll erase this so I could
374:49 - have another Matrix um you know three
374:57 - four you know let's just say I had these
375:02 - two and I wanted to add these two these
375:04 - I could because they're the same
375:06 - Dimension and then my resulting Matrix
375:10 - would be those same dimensions and so in
375:15 - the same place 1 + 3 is 4 and I would
375:19 - add like that 2 + 4 is 6 there we go 3 +
375:23 - 5 is 8 4 + 6 is 10 5 + 7 is 12 and 6 + 8
375:30 - is 14 and then that would be my answer
375:34 - that would be the result
375:36 - so one way to match up things that are
375:39 - corresponding and if I want to add these
375:41 - I would I would use a matrix um and
375:45 - we'll look at some other applications of
375:46 - these but a lot of times it's really
375:48 - useful to have a matrix we we can even
375:51 - have a python array and convert it to a
375:54 - matrix um pretty easily and convert from
375:57 - a matrix to an array so that you know
375:59 - some of the tools for an array are more
376:01 - useful some of the tools for a matrix
376:02 - are more useful and we'll use both but
376:06 - we'll we'll we'll get into some other
376:07 - things solving equations and graphing
376:09 - and all kinds of things with with a
376:10 - matrix so let's take a look at how to do
376:13 - this with
376:15 - code I just had this to display to show
376:18 - you I made each of these an independent
376:21 - variable um a11 because we're in retrix
376:24 - a row one column 1 a12 because we're in
376:28 - row one column two a21 because we're in
376:31 - row two column 1 a22 because we're in
376:34 - row two column too and each of these is
376:37 - its own variable and then B same naming
376:40 - convention and this code cell I just
376:43 - made it
376:44 - that we have a place here to enter in
376:47 - all these values and we're going to do
376:49 - other things with it so this you can
376:51 - just run and you know they're all
376:53 - entered in so looking at these if I was
376:57 - just going to add or subtract I would
376:59 - just add the corresponding parts a11
377:01 - plus
377:02 - b11 would be C11 and you know still go
377:05 - in that top left corner so when we add
377:09 - these then I just wrote out the code for
377:12 - each step so you can see um all the
377:15 - corresponding parts and I had it output
377:19 - I'll run it again just so I just had an
377:22 - output that this would be the resulting
377:24 - Matrix 6 8 10 12 um and there's other
377:28 - ways we can format that output but just
377:30 - to show you the steps um in setting up a
377:33 - matrix and
377:35 - adding two matrices that's the uh most
377:38 - basic thing you can do they have to be
377:40 - the exact same Dimension so that this
377:42 - works and next we're going to look at
377:44 - multiplying and doing some other things
377:45 - with the Matrix so let's talk about how
377:48 - to multiply two
377:50 - matrices and multiplying unlike adding
377:54 - or subtracting they don't have to be the
377:57 - same Dimension but as you order does
378:00 - matter and these two
378:04 - Dimensions need to match so if or order
378:08 - does matter and so if I multiply this
378:10 - times this then these inner numbers
378:13 - match which is the number of columns
378:16 - here and the number of rows
378:19 - here so then the the resulting Matrix
378:24 - will be these outside dimensions so my
378:28 - resulting Matrix will be a
378:32 - 2x3 we're going to fill that in as we as
378:35 - we multiply so then why do these need to
378:39 - match because what I'm going to do is
378:42 - I'm going to multiply everything in the
378:44 - first row times everything in the First
378:48 - Column and then add those together so we
378:50 - see if those match it's kind of like it
378:53 - turns this times this so what do we have
378:57 - here we have um I'm going to do 1 *
379:02 - 1 is 1
379:05 - plus 2 * 4 is
379:08 - 8 and so that's everything in the first
379:10 - row everything in the First Column is
379:12 - nine and then that answer goes in the
379:15 - first row First Column of my resulting
379:19 - Matrix so then if I get um a
379:25 - three if then if I go the first row
379:29 - second
379:30 - column
379:33 - so then
379:35 - if I if I do you know 1 * 2 I'll erase
379:39 - this we'll put all our in between work
379:42 - right here so if I have 1 * 2 is
379:47 - 2 plus 2 * 5 is 10 so then that's 12 and
379:53 - so that was in the first row second
379:56 - column is
379:58 - 12 and we see it proceeds like that
380:01 - everything in the first Row Third column
380:04 - 1 * 3 is
380:08 - 3 and then 2 * 6 is 12 so then 3 plus up
380:15 - then that's 15 in the first Row Third
380:19 - column then and so we see how when this
380:24 - goes you know then this number here can
380:27 - be anything and then we see how then the
380:30 - result of that could make a matrix
380:32 - that's you know whatever dimens
380:35 - iions um then if I do the second row
380:39 - First Column so then if I
380:42 - do 3 * 1 is
380:45 - 3 4 * 4 is
380:48 - 16 so then we have 19 here and second
380:53 - row second column 3 *
380:58 - 2 is 6 and then 4 * 5 is 20 so then I
381:05 - have 26 and second row third column 3 *
381:10 - 3 is
381:14 - 9 and 4 * 6 is 24 so then I'm going to
381:19 - have 33 here and there we go
381:24 - so as we see it becomes a lot of small
381:29 - multiplication problems and we're going
381:32 - to look at how to do the code for this
381:34 - um
381:35 - you know in one time I I'll show you how
381:37 - to set up the code like even just
381:40 - writing out all these multiplication
381:42 - problems based on you know input storing
381:45 - them as variables but then we'll look at
381:47 - some other ways we can multiply um two
381:51 - matrices um without having to even write
381:54 - out the code for each of these in
381:56 - between steps so we we'll look at this
381:59 - and then we'll look at some applications
382:00 - of
382:01 - multiplying one of the applications
382:05 - and that's why I picked these particular
382:06 - dimensions a lot of times we can store
382:09 - um XY coordinates um as you know first
382:14 - row might be my x coordinates and second
382:17 - row might be my y so like the the XY
382:20 - pair might be this like 14 as a as a
382:23 - coordinate point and then you could have
382:25 - a matrix of two by however many
382:28 - points and having a matrix that came
382:31 - first um multiplying that does different
382:35 - Transformations like rotating it around
382:37 - the origin or things like that so we
382:40 - could have you know that and then we
382:42 - would store this a 2X two for
382:45 - transformation a 2 by whatever for all
382:48 - the points you know these are some
382:49 - applications we can get into
382:53 - um but here's how you know the setup of
382:56 - matrix multiplication and um let's take
382:59 - a look at how to do this in a few
383:00 - different ways with
383:02 - code so now here's how to multiply two
383:06 - matrices and I just have to display here
383:09 - Matrix a * Matrix b equals Matrix C and
383:14 - we're going to just enter all the values
383:16 - in I just made the we're going to do a 2
383:18 - by two so here's all the values again
383:21 - just some basic numbers so you can see
383:24 - and I'm going to show you a few
383:25 - different ways to do it so the first way
383:27 - is these are the actual steps and
383:29 - remember then you know it's everything
383:32 - in row one times everything in column
383:34 - one 1 and the answer is in row one
383:36 - column one so you end up doing a11 *
383:41 - b11 you're doing that multiplying but
383:44 - then a12 *
383:47 - B21 so we see these you know you're
383:50 - doing that multiplying that multiplying
383:51 - and you add them together and all that
383:53 - comes together as
383:56 - C11 so we see how we're building this
383:59 - you know all these steps doing the
384:01 - multiplying so you can see that you know
384:05 - this
384:07 - works and I'll output you know no spe
384:12 - special formatting just outputting these
384:14 - and that's going to work out just
384:17 - fine I'm going to run all this at once
384:19 - so besides doing that we actually this
384:24 - is the same Matrix I still have it
384:26 - referencing all the original input value
384:30 - so we don't have to change that but if I
384:32 - just make this each of these in
384:34 - array so I can say you know each of
384:38 - these so Row one row two and I can make
384:42 - these an array and this is why we
384:44 - imported
384:45 - numpy so I made this capital a capital B
384:49 - referencing each Matrix and then if I'm
384:53 - multiplying a DOT dob you know uh put
384:59 - the period then write out the word dot
385:01 - so this is a * B and then then we're
385:04 - going to print that
385:06 - answer and that works too we'll see this
385:10 - in the output but also I can actually
385:13 - just make them a matrix also in the
385:15 - numpy library np.
385:19 - Matrix and notice it's actually the same
385:22 - dot
385:23 - Formula E do F because I just made each
385:28 - of these so um and I me each of these
385:32 - its own Matrix even though we're
385:33 - referencing the same numbers so we have
385:35 - it you know output you know you know WR
385:39 - writing The Code by hand for each step
385:41 - using this as a numpy array or np.
385:45 - Matrix and when we run
385:48 - this we're going to see 19 22
385:52 - 4350 same answer each time so each of
385:56 - these will work as different ways to
386:01 - multiply a matrix and we'll see um some
386:05 - examples uh in a little bit of what
386:09 - um why you would do each way you know
386:13 - maybe you have different reasons or
386:14 - different situations where you would use
386:16 - just you know writing The Code by hand
386:18 - or an array or a matrix but math wise
386:23 - they work out to be the same answer so
386:25 - let's take a look at a couple things we
386:26 - can do with the Matrix and both of these
386:30 - the determinant and the inverse you need
386:33 - a square Matrix to do this so 2x two 3x3
386:37 - 4x4 Etc so in doing this um the
386:41 - determinant gets the Matrix to one
386:44 - number and then one of the things we can
386:47 - do with that is you use the determinant
386:49 - to get the inverse of the Matrix now
386:51 - when we get to the code this is going to
386:53 - be you know like one simple step you
386:56 - know um built-in formula you know
386:59 - inverse or determinate but I'm going to
387:01 - show you the steps that to get to this
387:04 - um with it Beyond a 2 by two it actually
387:07 - gets even more involved but this will
387:09 - illustrate the point so let's get the
387:12 - determinant here so the determinant is
387:15 - you're going to
387:16 - multiply each of these diagonals and
387:18 - subtract them so
387:22 - um the determinant is going to be in
387:24 - this case 2 *
387:28 - 4 and
387:30 - then 4 * 6 or 2 * 8 and then 6 * 4 so we
387:36 - have 2 * 8 is
387:38 - 16us
387:41 - 24 so we see you know that's how we get
387:43 - the determinant that minus that if it
387:46 - was um a 3X3 it becomes even more steps
387:51 - and you carry over the other two columns
387:53 - but there we go so what we have is so if
387:56 - the determinant then
388:00 - is-8 we might use that for some things
388:03 - um you know there's some ways we can um
388:07 - uh boil down a matrix too and determine
388:10 - it for other things you know uh encoding
388:13 - and decoding all kinds of things so here
388:16 - we have this but we're going to use it
388:18 - to get the inverse so then once I have
388:21 - the determinant then one
388:24 - over um I'll put the negative here um
388:28 - one over determinate
388:30 - times that original Matrix to 4 6 8 then
388:36 - that gets you the inverse so we're just
388:39 - going to take this and distribute that
388:41 - so one over so 1/8 * 4 so I'll just
388:46 - reduce that fraction so that's -4 2 over
388:49 - 8 and then there we go 18 so that's -
388:56 - one2 and there we go 6 over 8 so that's
389:00 - -
389:02 - 34s and 1/8 * 8 so then that's
389:07 - -1 and it worked out nicely to fractions
389:10 - I decided to put them as fractions but
389:13 - you know a lot of times are going to be
389:15 - uh decimals and this is another thing
389:17 - where you know I pick numbers that work
389:18 - out nicely very often you get decimal
389:21 - numbers and you know quite a few decimal
389:23 - places so what you would do is you would
389:25 - store each of those values um you know
389:29 - as a variable that just works out better
389:32 - but there we go so now this is the
389:37 - inverse so this is the inverse of the
389:39 - Matrix and we have these now one of the
389:43 - things If I multiply a matrix times its
389:45 - inverse I should get the identity
389:48 - Matrix so which is 1
389:53 - 01 so I would get the identity Matrix
389:57 - then this would be the the in the uh
390:02 - result if I multiplied the Matrix times
390:04 - its
390:05 - inverse um or you know if I multipli
390:09 - anything by the identity Matrix I get
390:10 - the same Matrix but there we go so we we
390:13 - often use the inverse for we can use
390:16 - that for solving equations we'll get
390:18 - into how we can use that application but
390:21 - there we go here's how we get um the
390:23 - determinant and then the inverse of a
390:25 - matrix and then now as we look at it you
390:27 - know how to do this with code we're
390:29 - going to find out that this is even
390:31 - easier because we have some built-in
390:32 - functions so let's take a look at this
390:34 - with a
390:36 - code so here's some other Matrix
390:39 - operations that will be useful in
390:41 - different situations um one of the
390:44 - things would be the inverse of a matrix
390:47 - and remember we really officially don't
390:50 - divide matrices we multiply by the
390:54 - inverse
390:56 - so if I already I'm going to build upon
390:59 - this I already made these uh Matrix A
391:03 - and B
391:04 - and you know I can run this again so
391:07 - there's Matrix A and B and now that
391:11 - that's stored um and remember you know
391:15 - with collab that VAR you know those
391:18 - variables will be active and available
391:20 - for maybe 20 minutes a half hour if you
391:23 - don't do anything else with that with
391:25 - that code
391:26 - cell um so we can build upon that if I
391:30 - get the inverse now notice within and
391:33 - numai we have linear algebra within that
391:37 - and then even that do inverse so I can
391:40 - get the inverse of Matrix
391:43 - a and the determinant the determinant
391:47 - tends to be
391:49 - um more you know messy decimal places so
391:53 - I will round
391:55 - that up and the determinant is uh a way
392:00 - to get the Matrix down to one number so
392:03 - and we're going to know that's actually
392:04 - used if you did this the long way that's
392:06 - used in the
392:07 - inverse um but also you know some other
392:11 - um some other things you might use the
392:12 - determinant for so I can just round that
392:16 - um and then Matrix multiplied by its
392:19 - inverse so now that I have the inverse
392:22 - I'm going to use r dot a DOT and then
392:26 - what am I multiplying it by I'm
392:27 - multiplying it by the inverse and I'm
392:30 - going to print that and the determinant
392:33 - will be be one number so I can just
392:35 - round that but I can't use that round
392:38 - function with a matrix I have to use np.
392:42 - around so that's how I get
392:45 - the that's how I get the rounding of
392:49 - that
392:50 - entire resulting Matrix so if I run this
392:54 - so we see still referencing Matrix
392:57 - a I have the inverse
393:00 - here and then I also have the
393:03 - determinant
393:05 - and then when I multiply Matrix a times
393:08 - its inverse this is what we expect to
393:10 - get this is remember the identity Matrix
393:14 - so if I multiplied this matrix by any
393:18 - other 2x two I'm going to you know it
393:21 - comes out as that other Matrix so
393:24 - multiplying a matrix by its inverse
393:26 - gives you the identity Matrix just like
393:28 - multiplying a fraction by its inverse
393:30 - equals one multiplying a matrix by its
393:32 - inverse gets you this identity Matrix so
393:36 - just some other things um within the
393:39 - numpy
393:41 - library things you might want to do with
393:43 - the
393:44 - Matrix um I just want to throw in here
393:47 - another way to multiply
393:49 - so here I just have I created these just
393:53 - right here Matrix c and
393:55 - d and just to show you you know you can
393:59 - output what type they are what what
394:01 - object type and here's another way to
394:05 - multiply these so instead of like we did
394:09 - here a DOT and then the second Matrix in
394:13 - parentheses you actually can just do
394:17 - NP Dot and then each Matrix in
394:21 - parenthesis
394:22 - CD it works it it works out the same so
394:27 - here we have this Matrix this Matrix
394:30 - both of them what class num. Matrix and
394:34 - and here's the product the dotproduct of
394:38 - two and remember as I set this up that
394:41 - this was a 2X two and then Matrix D was
394:46 - a
394:47 - 2x3 so the results going to be a 2x3 the
394:51 - order does matter and those middle those
394:54 - middle Dimensions need to match and then
394:55 - the outside dimensions are the
394:57 - dimensions of the
394:59 - answer so there we go another another
395:03 - way to multiply these sometimes this
395:05 - might be more useful and this is also
395:07 - just showing you know what type of
395:09 - object these
395:11 - are all right more cool things we can do
395:14 - with the Matrix and then we can make use
395:16 - of some of these
395:17 - things um and others in other operations
395:21 - all right next we're going to apply the
395:23 - Matrix operations and solve some
395:26 - problems so let's talk about re reduced
395:29 - row Echelon form of a matrix but to get
395:33 - to that let's talk about each part of
395:35 - this so first of all Echelon Echelon is
395:38 - a word Beyond math that means uh levels
395:42 - of command um potentially rows or status
395:47 - and in military formation echelons are
395:51 - rows where each row extends out a little
395:54 - bit beyond the one in front of it almost
395:57 - like picture a triangle and so that
396:00 - Echelon you know we can see that you
396:02 - know level status and start seeing how
396:05 - this can apply to a matrix and rows what
396:07 - do we want to happen in these rows so
396:11 - then we get so Echelon form but Echelon
396:15 - form in a matrix has specific rules that
396:20 - you know if you have a row of zeros that
396:24 - has to be um the you know the lowest row
396:28 - if you know you have sometimes people
396:30 - say the leading coefficient should be
396:32 - one but sometimes people say that you
396:34 - know that rule doesn't have to apply and
396:38 - it's really about how the leading
396:40 - coefficients um get to be you know uh
396:45 - further to the right of the other ones
396:48 - we you we'll see how this plays out but
396:50 - that's that's kind of like the where the
396:52 - idea of echelon form comes in then
396:57 - specifically to a matrix we have row
396:59 - Echelon form which again follows that
397:03 - there's is going to be a leading
397:05 - coefficient of a one and then there's
397:08 - going to be that leading coefficient of
397:10 - a one in the next row is going to be
397:13 - over not in the same column you know
397:17 - that we get into row Echelon form but
397:19 - redu and you know that limits what the
397:22 - The Matrix can look like we're going to
397:25 - be really interested in building upon
397:27 - all that to get to reduced row Echelon
397:29 - form which gets us to a unique Matrix
397:32 - where combining what we've been thinking
397:36 - about you know in terms of like the
397:37 - definitions of all these other words
397:39 - reduced row Echelon form is going to
397:42 - have our leading coefficients of one
397:44 - it's a unique Matrix that will give us
397:46 - the answer to our question and before we
397:49 - look at what that's going to that final
397:52 - form let's look at how we get to that
397:55 - and then it will all come together so we
397:58 - have a matrix we have a system of three
398:01 - equations here so we have um you know
398:05 - 14x + 11 Z = 3 now notice this one
398:10 - doesn't have a y value the next one 22x
398:13 - + 25 y + 4 Z = 7 and then -12x - 34 y -
398:20 - 3 Z = -4 so I can put this Matrix put
398:24 - this uh all these coefficients and
398:27 - what's on the other side of the equal
398:28 - sign in this augmented
398:30 - Matrix and we say augmented because
398:34 - sometime um we can put this as one
398:37 - Matrix a 3X3 and then as another Matrix
398:40 - for everything on the other side of the
398:42 - equal sign it is possible to do that and
398:45 - then um you know that's another way to
398:48 - solve it so this augmented Matrix now I
398:53 - have this and I can use reduced row
398:57 - Echelon form to solve this now the
399:01 - beauty of this is um that that's one
399:05 - function you know in math in a lot of
399:08 - calculators and certainly built into
399:10 - python um so what that does is that's
399:13 - going to give us one 0 0 and then the
399:18 - answer 0 1 0o and then the answer 0 0 1
399:24 - and then the answer that's the idea that
399:28 - this becomes this reduced row Echelon
399:31 - form and that's you know that's follows
399:35 - all these definitions I have a leading
399:36 - coefficients of one and each one is to
399:39 - the right of the row above
399:41 - it and so then whatever comes in this
399:45 - last column ends up being the answer to
399:48 - our to our Matrix which is really cool
399:51 - how how that can work um so that's what
399:54 - we're going to do um for reduced row
399:56 - Echelon form we're going to look at how
399:58 - to do this with code but this is kind of
400:01 - you know what what our situation would
400:04 - be to set up the code I'd have a system
400:08 - of equations three equations three
400:10 - variables set up this way so that it's
400:13 - always XYZ equals a number and then
400:16 - notice the missing y value I have I need
400:20 - that zero as a place value so this is
400:23 - would be our situation um to get to
400:26 - reduce row ealon form I would have a
400:28 - system of equations put that in the
400:30 - Matrix and then I would would use reduce
400:34 - row Echelon form to get the answer now
400:39 - if you didn't have the computer to do
400:42 - this re the the the way to get this is
400:45 - essentially all of the different
400:47 - substitution elimination all the
400:49 - different um row functions that you
400:52 - would do to gradually solve solve this
400:57 - you know equation you know some
400:59 - substitution some elimination you know
401:01 - combining rows um so it would be very
401:05 - tedious but it's doable you know but
401:09 - here we have if we have it in this form
401:11 - it's going to be you know one function
401:13 - boom two seconds and then solve it so
401:17 - let's take a look at how to do this with
401:19 - code we want to see like this would be
401:20 - the setup of what we're uh what our
401:23 - situation would be and then we get to
401:25 - the code so uh let's let's write some
401:29 - code to use reduce row Echelon form
401:32 - here's how to solve a system of
401:34 - equations with a matrix and I like the
401:38 - row the reduced row Echelon form uh the
401:42 - best I I feel like it's just really
401:44 - straightforward so that's the way uh
401:48 - we're going to look at it here also in
401:50 - the code and in addition to that we're
401:52 - going to look at how we can convert we
401:54 - were looking at you know np. array or
401:59 - Matrix and I want to show you here we're
402:02 - going to convert from one to the other
402:04 - so I just put this in here I'm going to
402:07 - create an array um so right here I'm
402:11 - going to create a matrix as an array and
402:16 - then I'm going to create a matrix from
402:18 - that so I have the array and then I'm
402:21 - going to create a matrix now I'm
402:23 - importing numpy I'm importing simpai but
402:26 - I I feel feel like I've run this without
402:29 - importing that but um I still have that
402:32 - up there
402:36 - so right here we're just going to show
402:38 - you that uh when we run this that that
402:40 - this works and also noce just an
402:43 - interesting print statement the braces
402:45 - here inside the quotes and then format
402:48 - um The Matrix there so there we go
402:53 - create an array Matrix from that array
402:55 - and I just commented this out because
402:57 - I'm going to show you the other way but
402:59 - you could have just started with the
403:00 - Matrix um but the reason why I started
403:03 - started with an array is to show you
403:04 - that you can create a matrix from that
403:08 - and we're also going to convert it back
403:10 - to an array so it it works both ways you
403:13 - can do this um as I may have mentioned
403:16 - before maybe some situations you'd
403:18 - rather an array some you'd rather a
403:20 - matrix for a lot of the Matrix
403:22 - operations you want the
403:24 - Matrix so you know here we go you can
403:26 - convert from one to the other though and
403:30 - we are going to do the reduce Echelon
403:33 - function so it is a matrix and it's
403:36 - going to be m.
403:39 - rref now that's going to give you the
403:43 - reduce row Echelon
403:45 - form then I really wanted to split this
403:48 - out and um notice the first The Matrix
403:53 - is the first element so every one of
403:56 - these it's a two-dimensional array but
404:00 - you have the first element is zero so my
404:03 - x value and this is going to make sense
404:05 - when we see the output is 03 my y value
404:09 - is 07 and my zv value
404:12 - 011 and so I created those and then
404:16 - we're going to print you know xal yal Z
404:20 - equals and that's the this is the output
404:23 - that I like I want to show you you know
404:25 - how we get to that here but then we're
404:29 - also going to print out the echelon form
404:32 - so you can see where this comes
404:35 - from so we run this and we have you know
404:39 - here's the Matrix so we see um you know
404:43 - it formatted there and it will just give
404:47 - you this Matrix
404:49 - here same
404:51 - Matrix and we
404:53 - see
404:55 - um there we go it was a you know we
404:58 - converted it back to an array and
405:00 - printed it that way so that's where we
405:03 - get this form which you you know you
405:08 - may uh you may or may not uh want that
405:11 - form and then now we
405:15 - have um the answers but I'm going to
405:18 - skip over that let's take a look once we
405:20 - get that down to the reduced row Echelon
405:22 - form so you see this whole
405:25 - Matrix was the first element and
405:30 - remember it would have been you know XYZ
405:34 - equals
405:36 - so you see the one here x is one and
405:40 - then y the coefficients the coefficient
405:42 - of x is one and the coefficients of y
405:44 - and z are zero so
405:47 - x equals this number and that's the same
405:50 - that we got here and you see the
405:53 - coefficients again y the coefficient
405:56 - would be one and the others would be
405:57 - zero they would drop out so the Y value
405:59 - is this and then 0 0 one so the
406:03 - coefficient of Z and there's
406:06 - Z and given that we see
406:10 - that
406:12 - the elements are 03 07
406:16 - 011 so it's not um row and column as you
406:21 - might expect but there we go so we get
406:23 - these um and if you're ever working on
406:27 - this you can you know output this form
406:30 - and then you know Tinker with you know
406:32 - what elements you need to put in here
406:34 - just to be sure but there we go so that
406:37 - way if you have a system of three
406:40 - equations with three variables you can
406:43 - you know put that into a matrix reduce
406:44 - row Echelon form and then output your
406:49 - answers and you know you could output
406:52 - these because then these would be stored
406:54 - as those variables if you needed to use
406:55 - them in something else or you could
406:58 - output here and you can see you know
407:01 - what what it would look like so that
407:04 - would be a way to solve any system of
407:05 - three equations three variables and then
407:07 - we're going to look at a specific
407:08 - example next um
407:11 - quadratic um and developing a quadratic
407:15 - equation so we'll take a look at that
407:17 - next so here we're going to look at
407:19 - developing an equation from three points
407:23 - and using a matrix to do that so I'm
407:27 - going to pick a quadratic because linear
407:29 - we just need two points quadratics
407:32 - complex enough
407:33 - to demonstrate this so if I have the
407:36 - standard yal ax^2 + BX plus C then
407:41 - here's three points let's say I have
407:43 - these three points and I want to find
407:46 - out you know I know this is going to be
407:49 - a parabola going through these three
407:50 - points what's the equation of that
407:54 - Parabola so I'm going to plug in the
407:56 - first
407:57 - point XY and we see plug in1 couple
408:02 - times for X Y is zero then I'm going to
408:05 - simplify it and we get down to
408:10 - this I'm going to go to the next Point
408:14 - plug in the second
408:16 - point there we go 1 Y is 6 simplify
408:22 - it and we get to
408:24 - this and I'm going to plug in the third
408:26 - point
408:28 - 22 there we
408:30 - go simplify it
408:34 - and so let's put all these three
408:37 - together notice I and it is important I
408:41 - put the equals on this side so I always
408:44 - have AB C equals
408:46 - something because all those coefficients
408:49 - become the augmented Matrix and
408:52 - augmented because I include what's on
408:54 - the other side of the equal sign as that
408:56 - fourth column in The Matrix there's
408:58 - other ways to do this uh you know uh
409:02 - make a 3X3 with just everything on the
409:05 - left side and another Matrix but this
409:07 - isn't augmented and I personally I just
409:09 - happen to like this method so we see all
409:13 - the coefficients from the first equation
409:15 - 1 -1 1 again Z on the other side of the
409:19 - equal sign all the coefficients
409:21 - become our Matrix here so and I'll just
409:24 - call it Matrix M to give it a
409:27 - name so if I do the reduced row Echelon
409:31 - form of that Matrix
409:33 - abbreviated r r EF and then you know of
409:37 - Matrix M this would all appear at one
409:40 - time but let's look at it one row at a
409:43 - time so it would be it always has to be
409:46 - a b c and then the number on the other
409:48 - side of the equal sign so the only
409:50 - coefficient with a one is a a must equal
409:54 - one and then the next row b is the only
409:58 - coefficient with a one b equals 3 and
410:02 - then
410:03 - C the only coefficient of the one C must
410:06 - equal two so a = 1 Bal 3 Cals 2 we see
410:12 - that nice pattern diagonal ones and then
410:15 - this last column gives my abc
410:18 - values and then the full equation is y =
410:22 - x^2 + 3x + 2 we just put it in that ABC
410:27 - and there we go three points put it in a
410:31 - matrix re you uh you know reduce row
410:35 - Echelon function and we can develop an
410:38 - equation so let's take a look at how to
410:40 - do this with code and we're also going
410:42 - to look at the patterns that we did so
410:44 - that we can just set it up once and then
410:46 - whatever number shows up as you know the
410:49 - XY values of these three points we see
410:52 - exactly how to then plug in three points
410:56 - and do the rest automatically and output
411:00 - an equation so let's take a look at how
411:02 - to do this with the code so now let's
411:05 - apply this uh Matrix reduce row Echelon
411:10 - function to developing a quadratic
411:13 - equation from three points so here's how
411:17 - I would take the
411:19 - points and each of these you know X1 y1
411:22 - X2 Y2 yx3 Y3 so these would be the three
411:26 - points and that's going to be enough
411:29 - information if I have any three points
411:31 - because if we take a look so here would
411:33 - be the standard quadratic
411:36 - equation and there you go ax2 plus BX
411:39 - plus Cals y so if we had any of these
411:42 - three points for the first point we
411:45 - would plug in X1
411:48 - here X1 and then C would still be there
411:54 - and then y1 second point we'll plug in
411:57 - X2 and then Y2 and then third Point X3
412:01 - and Y3 three and then converting these
412:06 - three equations
412:08 - into into a matrix so we see that to
412:12 - we're going to solve for a b and c so
412:15 - given those variables the coefficient
412:17 - for a is going to be X1 squared the
412:21 - coefficient for B is going to be X1 the
412:23 - coefficient for C is always going to be
412:25 - one and then y1 on the other side of the
412:27 - equal sign same thing for X2 Y 2 X3 y 3
412:33 - so that would be the Matrix that we'd be
412:36 - using and I just have this set up here
412:39 - import numpy and here's just a place
412:42 - where we can enter in any of these I
412:46 - picked a couple you know points here so
412:50 - we can take a look so you would enter in
412:53 - in the points here and then Define this
412:58 - Matrix based on those points so
413:01 - here's the first row of our Matrix and
413:05 - then the second
413:07 - row and the third row so we're creating
413:10 - all these as a
413:12 - matrix points into this Matrix and from
413:16 - there m. RF and so I just made the
413:20 - variable name the same m. rref is the
413:23 - function I just made this variable name
413:26 - and given this mcore
413:29 - RF is r answer
413:34 - so now I'm going to take that and the x
413:40 - value would be at this part and I'm
413:42 - going to round it store it as a the Y
413:46 - value would be in this location round it
413:48 - stored as
413:49 - B and the Z Val C value
413:54 - so there we go couple steps and I'm
413:58 - going to print out a b and
414:00 - c now
414:03 - I could you I could do something else
414:04 - with this too but uh let's just take a
414:07 - look so row Echelon form um let's run
414:12 - this
414:13 - and so my first print statement would be
414:18 - these answers one five and six great and
414:22 - row Echelon form just so you can see it
414:24 - to compare then our coefficient is one
414:29 - here x uh so X is one
414:33 - y there's my coefficient is five or
414:37 - sorry A B and C A is 1 B is 5 C is six
414:42 - and we always could add another print
414:45 - statement if we wanted
414:47 - to knowing that the goal of this was the
414:50 - quadratic we could have you know
414:53 - a and
414:56 - then x
414:59 - squared the I I might
415:04 - I'll use the python notation here x
415:09 - s
415:11 - um
415:13 - plus and then I would have
415:21 - B
415:23 - and that would
415:26 - be
415:28 - X keep that space Plus
415:34 - and
415:36 - see uh there we go and a lot of times we
415:39 - put the Y equals in front so I would do
415:41 - I might do
415:43 - that y
415:48 - equals there we go so we could take this
415:52 - now that I have a and c and I could just
415:53 - print out that equation y equals
415:56 - ax^2 + BX + C
416:04 - and there we
416:06 - go so that works
416:09 - too and you see then now this quadratic
416:14 - if I have three points I can figure out
416:16 - the the equation and that's kind of what
416:20 - we want to do in in math and applying
416:22 - this to other things can I have just a
416:24 - few points in this case three and then
416:27 - develop an equation that would go along
416:30 - with
416:30 - that all right
416:32 - right we can apply this Matrix and RF to
416:36 - some other things too but there we go
416:38 - developing equations from three points a
416:41 - little bit about encoding and decoding
416:43 - and even if we're not using a matrix um
416:48 - so python has built in if you have any
416:52 - character so you can bring in a string
416:56 - and then run through U the each
417:00 - character in that string if you get any
417:02 - character we have built-in o um ordinal
417:06 - it turns that character into a number
417:09 - based on the asy code American System of
417:13 - computer information
417:15 - interchange so that's the standard that
417:19 - you know you can look up these tables so
417:21 - you can see you know every letter
417:23 - Capital lowercase um you know some with
417:26 - accents some uh numbers symbols
417:31 - punctuation all that every one of those
417:34 - corresponds directly to a number and
417:38 - then you can convert that to the
417:40 - standard number and then the other car
417:44 - the other function is CHR which you can
417:47 - take a number and then convert it to a
417:49 - character um if you had a number that's
417:51 - out of range it'll give you an error but
417:53 - you know you can type in the number you
417:56 - know character 65 and then it's going to
417:59 - Output a capital A so we're going to use
418:02 - that um in the code I'm I'm really going
418:05 - to show you how to you know prompt for
418:07 - these things get that string and then
418:11 - convert it and the the uh Cipher or the
418:16 - you know the code that we're going to
418:18 - use to transform it it's going to be
418:19 - pretty a pretty simple just shift I'm
418:22 - going to get that number I'm going to
418:23 - add something to it or subtract and you
418:26 - know there we go we could take this and
418:29 - convert these to you know each to a
418:32 - different Matrix that's another
418:33 - possibility and maybe in in a another
418:37 - video we'll explain all the uh levels of
418:42 - converting using uh using a matrix but
418:45 - for right now I wanted to show you um
418:47 - how to do this and then you know you you
418:51 - can modify this or expand on this on
418:54 - your own and you know create something
418:57 - you can send a secret
418:59 - message okay so let's take a let's take
419:02 - a look at it in the code so you can use
419:04 - a matrix to encode and decode messages
419:08 - and you'll see in here where you could
419:10 - potentially put a matrix but I'm going
419:12 - to show you this even without a matrix
419:13 - but we're going to use some math all
419:16 - right so the only Library we need to
419:18 - import really is
419:20 - numpy and here's some comments here so
419:23 - we're going to get the
419:25 - input and this input prompt for input
419:30 - remember it comes in as a string so I'll
419:32 - store that is inore text and then I'm
419:35 - going to set up this empty array here
419:40 - inore
419:42 - numbers and what I'm going to do then
419:45 - I'm going to Loop through all this text
419:47 - that comes in so for a in intext so then
419:52 - what that's going to do is every
419:55 - character from that string one at a time
419:58 - I'm going to go through
420:00 - and here's the inner function um I'm
420:03 - going to convert that to a number so or
420:06 - converts everything to a number um based
420:09 - on the um asky code so capital A is
420:12 - going to come in as 65
420:14 - Etc so one at a time convert that to a
420:18 - number and then I'm going to append that
420:20 - to our array here so then I will have
420:24 - this array of numbers nice then I'm
420:28 - going to encode this I'm going to start
420:31 - I'm going to have this blank array of
420:33 - encoded numbers and I'm going to Loop
420:36 - through that
420:37 - so looping through every element in in
420:41 - numbers now I just put this commment
420:44 - here this is the here's just a simple
420:47 - example but this math can get more
420:49 - complex and this is where you could
420:50 - potentially put an
420:52 - array so all right here's the cipher I
420:56 - did just a basic shift
421:00 - and um the reason why I I picked uh 37
421:04 - so capital A is going to come in as 65
421:08 - you might have a couple symbols before
421:11 - that that you might use but most of the
421:13 - text is going to be 65 or more and so
421:17 - adding this gets it up to a three-digit
421:18 - number so everything come that comes
421:20 - through should be a three-digit number
421:22 - then um you know I add I could have
421:25 - added
421:26 - 35 I decided to add a couple more um so
421:30 - just a simple Cipher that's about what I
421:32 - would add anywhere between 37 and um you
421:35 - could have really big numbers so um you
421:38 - know anything in the
421:41 - hundreds all right so anyway this is the
421:45 - cipher and all we're going to do is just
421:48 - each of those in the array we're just
421:51 - going to add 37 to it and append it to
421:56 - our array here and I I I split this up
421:59 - because then this you know you can add
422:01 - something you do like linear algebra you
422:03 - could do um a quadratic formula you
422:06 - could do anything you want to change
422:09 - this I just wanted to do a simple
422:11 - example but you could do anything you
422:12 - want in that math and that's where this
422:16 - is really the only place where then a
422:18 - matrix if you wanted
422:20 - to um pretty much uh one at a time you
422:24 - wouldn't use a matrix two at a time you
422:26 - might do some matrix multiplication but
422:30 - we're not going to worry about that
422:31 - right now
422:32 - um and then you're going to I just have
422:36 - this that you're going to print out the
422:37 - encoded message so that would print it
422:40 - out now if you did this um you could run
422:44 - this print out your encoded message copy
422:46 - that and then paste it anywhere you you
422:49 - know whether it be text you know a text
422:52 - message an email or anything else you
422:56 - know and there you go that's one Le it
422:59 - it's one little extra layer of encoded
423:02 - message um but there you go you would
423:05 - copy it and paste it and send it to
423:07 - somebody now on the other side now we're
423:11 - going to decode and we're going to
423:14 - prompt
423:16 - for um input enter text to decode and
423:19 - I'm going to store it as this variable
423:22 - in code and this one since I know that
423:26 - this is going to come up you know uh the
423:29 - encoded numbers you'll see that array
423:32 - when you print it out it's going to be
423:33 - each number separated by a comma so here
423:36 - we're going to split it at that comma so
423:39 - now Inn num is an
423:41 - array um each you know each element then
423:44 - becomes an element of this array in Num
423:47 - but now I have to decode that so we
423:50 - decode and rather than an array I'm
423:52 - going to have a blank string so this
423:55 - string just starts out with a space
423:56 - called decoded
423:59 - letters okay so now
424:02 - as we Loop
424:03 - through that remember they're numbers
424:06 - but they're they all come in as a string
424:09 - so first of all the math of
424:12 - it um has to be the inverse of the
424:14 - encoding so if the other one I added 37
424:18 - then this one I'm going to subtract 37
424:20 - but first of all I have to convert that
424:23 - to an integer and I chose to do it in
424:26 - this step here convert it to an integer
424:29 - and then you know the math of it which
424:31 - is the inverse of the
424:32 - encoding and I'll store that as a
424:36 - variable decipher and
424:39 - then each of these so decipher then um
424:45 - still remember that's still just a
424:47 - number I converted it to an integer and
424:50 - decipher is still a number so then the
424:53 - opposite of the or is CHR converts that
424:57 - number to the corresponding character so
425:00 - we see that you know the encoding um
425:03 - convert it to convert the letter to a
425:05 - number um based on the asky code then do
425:10 - some math to it and then here I need to
425:13 - do the opposite I need to do the you
425:15 - know convert it to an
425:16 - integer do the opposite math to it and
425:20 - then convert it back to a character so
425:22 - then we're going to just um it's not an
425:24 - array so we're just going to append our
425:27 - string here that plus
425:29 - equals and then this should be a string
425:31 - decoded letter should be a string which
425:33 - is the message and then we're going to
425:34 - print that out decoded
425:37 - letters so we have both of them here and
425:41 - you could always split these up into
425:43 - their own um functions but for right now
425:46 - I'm not worried about that
425:49 - because you could always I mean you
425:52 - could just run this right here so text
425:54 - to decode you
425:58 - know secret message hit enter and then
426:02 - we see it prints this out so if I was
426:05 - going to send this to somebody I would
426:07 - highlight this and
426:11 - copy um now I would paste that in
426:14 - message the other person would get that
426:15 - and highlight it and copy run this
426:18 - program enter text decode so paste that
426:22 - into
426:23 - here and hit enter there you go secret
426:30 - message so
426:32 - interesting way and what you would have
426:34 - is um so you could
426:39 - potentially
426:40 - um you know the I would I'll keep this
426:45 - but you know you could potentially then
426:47 - just share this you know and and that's
426:49 - what I'm doing I'm going to share you
426:50 - share the code with you um this could
426:53 - you know go to anywhere and anybody
426:57 - could just change what math you do in
427:00 - this step that's pretty much it if you
427:02 - just change the math that you do in this
427:04 - step you know and of course then it's
427:06 - going to match the math that you would
427:08 - do in the cipher and um you know
427:13 - somewhere else you know as long as you
427:15 - and the person you're communicating with
427:17 - have that math that they're you know the
427:19 - same math that they would modif would
427:21 - modify this hey you can send a secret
427:23 - message
427:25 - and this could be encoding and decoding
427:29 - because if if I my main purpose is to
427:32 - decode and I don't care about encoding
427:35 - you know I'll just say
427:37 - a there we go
427:40 - and then I would have this other message
427:42 - that I previously copied and I could
427:45 - still then you know just run that one
427:47 - step that doesn't take long and then
427:50 - still print this me this in
427:53 - here there we go so pretty
427:57 - cool um you know always always fun to
428:01 - like make something that you know sends
428:03 - secret messages and you know applying
428:06 - some math to it um and as you see the
428:09 - math and very much a lot of the
428:10 - converting from one thing to the next
428:13 - there we go and this you know a simple
428:15 - Cipher but you can make it a lot more
428:16 - complex than
428:18 - that so now let's look at using a matrix
428:21 - to encode and decode and this is also
428:25 - encoding and decoding that works because
428:28 - I tried a lot of things so I'm bringing
428:30 - to you the stuff that works works and
428:33 - through that I'll give you some hints on
428:36 - how you can modify this for your own
428:37 - encoding and decoding so first of all
428:40 - the Matrix that I use I'm going to store
428:43 - the M the each message as a 1x two
428:46 - Matrix
428:48 - so we'll see how we do that and as a 1
428:52 - by two Matrix then I'm going to have an
428:55 - encoding and decoding Matrix that's a 2X
428:58 - two and you see order does matter so
429:01 - when I multiply this 1 by two times the
429:05 - 2x two my result will be a 1 by two and
429:10 - that's going to be the message again so
429:13 - you could do this certainly um and and
429:16 - that one by two is going to be you know
429:18 - grabbing two letters at a time or
429:21 - characters two characters at a
429:23 - time you could absolutely do this as a
429:26 - 1x3 and you know use a 3X3 as the
429:30 - encoding and decoding Matrix I I feel
429:33 - like depending on how big the message is
429:35 - that's some extra processing power um
429:37 - but you could absolutely do that that's
429:38 - another way to do this and then
429:42 - um you know use that certainly would be
429:44 - more difficult to break the code um but
429:48 - I decided to do a one by two and this
429:49 - will also illustrate the example for
429:53 - you so I use a Rays even though we're
429:56 - talking about a matrix and we're talking
429:57 - about matrix multiplication as we looked
430:00 - at before you can use use an array you
430:02 - can use a matrix and you can convert
430:05 - from an array to a matrix well for this
430:09 - stuff I actually I I like the way it
430:11 - plays out with an array a little bit
430:13 - better so that's why I chose that we can
430:16 - still think about this as a matrix and
430:18 - the the setup but um officially I am
430:21 - going to use numpy arrays so I import
430:23 - numpy and I'm going to do NP
430:25 - array so this is where you can add
430:29 - yours you know I just have you know 2
430:32 - 468 I decided to do that and you know
430:36 - you can you can have whatever numbers
430:38 - you want this is where as you see you
430:41 - know I I call this one that this one
430:44 - that works I have a lot of other um
430:46 - blocks of code where I tried some
430:48 - different things and some numbers that
430:51 - you might pick for your array the end
430:53 - result looks weird and sometimes that
430:57 - might be I don't know um maybe difficult
431:01 - to break the code maybe or too easy to
431:03 - break the code because certain things
431:04 - jump out or maybe certain things uh put
431:08 - you in negative numbers remember um even
431:11 - though we're not going to really see
431:13 - this step but behind the scenes when you
431:15 - do an INT an inverse um you can't have a
431:18 - determinant that's zero so you know
431:20 - there's going to be certain things that
431:22 - that work or that look better um you
431:26 - know anyway and so but but there you go
431:29 - this is the main thing that you would
431:30 - need to change
431:32 - and then everything else see this decode
431:34 - Matrix just B builds upon that I'm just
431:37 - going to do the inverse of that other
431:40 - Matrix or array um and yes again even
431:45 - though it's an array the inverse is np.
431:49 - Lind alge um it's really the inverse uh
431:53 - you know it's an array we look like
431:55 - we're doing linear algebra and it's
431:58 - really the same thing as mathematically
432:00 - it's the same thing as a matrix inverse
432:02 - so some of this stuff is going to be the
432:03 - same here um from when we were just
432:07 - doing the simple Cipher you know a
432:08 - little bit of a shift um enter the text
432:11 - I'm going to store it as an array um and
432:14 - then I'm going to um get the order you
432:18 - know use this function to get turn that
432:20 - each character into a number based on
432:22 - the asky code so that's good but now
432:26 - knowing what I'm going to do with my
432:27 - array my array needs to be even if it's
432:30 - not it actually will just drop off the
432:33 - last letter and who knows maybe that's
432:34 - important so what I did is um you know
432:39 - because our array is going to be a 1 by
432:42 - two so um if the last one is not a 1 by
432:45 - two that might cause some problems well
432:48 - it will cause problems how severe I
432:49 - don't know but um the uh so I will do
432:54 - this and then to make sure it's even I
432:57 - just want to check if the length you
433:00 - know the modulus if that's if if that's
433:03 - not zero then it's not even and I'm just
433:05 - going to append this which in asky code
433:07 - translates to a period so maybe I don't
433:11 - have a period at the end of the sentence
433:13 - and therefore I would just add one and
433:15 - that'll make it work
433:16 - out in code some of this is similar I'm
433:21 - going to um but here's what I here's uh
433:25 - you know I have my array of encoded
433:27 - numbers but here's what I'm going to
433:28 - have
433:29 - because I'm doing this you know two at a
433:32 - time to make that a 1x two array or
433:35 - Matrix I have these temporary
433:39 - values that I'm going to initialize here
433:41 - as zero and PN that's a variable I like
433:45 - to use uh for positive negative so I'm
433:48 - going to start out as negative 1 so all
433:51 - those encoded
433:53 - numbers um remember it goes back to that
433:56 - variable in
433:57 - numbers um if PN is ne1 which is starts
434:01 - out at
434:03 - then I'm going to store that value as
434:07 - you know for B and in numbers as I Loop
434:10 - through that then I'm that that value
434:14 - becomes temp one and then I'm going to
434:16 - multiply PN by negative 1 so now it's
434:19 - positive so there we go the first time
434:22 - it goes through that value go becomes
434:24 - temp one and then the next time that
434:27 - value becomes temp two and that that way
434:30 - I go through a notice after doing all
434:32 - this then I'm going to multiply it again
434:35 - so that that's kind of why I like using
434:37 - the 2 by the 1 by two um if you used a 1
434:42 - by3 you would have to go through and you
434:44 - know you have to count up three times
434:46 - and you know other things become more
434:49 - difficult but again this illustrates the
434:52 - the value point you can do here so
434:55 - here's what I'm going to do then I'm
434:57 - going to turn this into I called it I
435:00 - called the variable Matt like Matrix um
435:03 - I'm going to turn this into an
435:04 - array as temp one temp two boom that's
435:07 - an array and then I'm going
435:11 - to do the dot product so I just called
435:14 - it encode you know encoding using the
435:16 - dot product and Dot and I'm going to
435:19 - multiply and remember order does matter
435:21 - so um NP do dot Matt comma en code so
435:26 - that way here once I have this you know
435:30 - now I have the two values and store it
435:34 - as an AR as a 1x two array do product
435:39 - which will then also end up being a 1 by
435:40 - two array and then I'm going to encode
435:44 - the first one so that first one encoded
435:47 - numbers is going to be my my array up
435:52 - here and I'm going to
435:54 - append you know that one notice item
435:57 - zero and then item one
436:02 - so this is how we're going to do the
436:04 - encoding each going through each
436:07 - character um there we go turn it into
436:11 - array product multiplied by the encoding
436:14 - Matrix and then store it as this encoded
436:17 - numbers array and then I'm just to show
436:20 - I'm going to print out the
436:23 - message now if you using this for an
436:27 - encoded message what you would do is you
436:28 - could then copy that message and paste
436:30 - it in wherever you want to paste it and
436:32 - you're going to end up pasting this
436:33 - you'll see it's an array of numbers
436:35 - separated with commas so then to decode
436:38 - you would have that enter code text
436:40 - decode and You' be pasting this so then
436:43 - we would split it at the comma and now
436:47 - in Num is my array of
436:52 - numbers so with that array of
436:55 - numbers in decoding I'm going to turn
436:58 - this into a string so there's my string
437:01 - of decoded letters starts out with a
437:05 - space and I'm going to do the same thing
437:07 - I I changed it a little bit just to use
437:09 - it make a different variable here so
437:13 - PN um I just use the underscore here is
437:17 - negative 1 because
437:19 - now I'm going to take that remember this
437:24 - is these come in as an array and I want
437:27 - to make sure that I store it as a float
437:30 - number
437:31 - so there we go that for everything in
437:35 - that um in that array each one um I'm
437:39 - going to store it as a float
437:43 - now I go through again if it's NE you
437:47 - know the PN is negative 1 so
437:50 - then temp one and you see this is what I
437:53 - I just used this if you it's within my
437:58 - loop it's within my array and I'm
438:00 - overwriting it so I actually felt fine
438:03 - using the same
438:04 - variable because again it's a variable
438:06 - I'm overwriting and it only ex you know
438:09 - it exists here so therefore temp one is
438:13 - Def float and then I'm going to multiply
438:17 - this and then when I go through here
438:21 - then temp two is Def flat all right so
438:25 - now I have this I've brought these
438:28 - numbers in converted each of them to a
438:30 - floating Point number and the reason why
438:33 - I'm using the floating Point um a lot of
438:35 - times it does work out nicely and the
438:37 - numbers I picked I made it work out
438:39 - nicely for integers but that won't
438:42 - always be the case especially if you
438:43 - Tinker with using different encoding and
438:46 - decoding
438:47 - matrices um so I definitely want these
438:51 - as float values not integers so now
438:55 - these float
438:56 - values um once I have them both now I
439:00 - convert them to a matrix or an np. array
439:03 - temp one temp two I have that I have
439:06 - that array and like before I'm going to
439:09 - do the dot product and we see there that
439:12 - Matt again same I'm using this same
439:16 - variable but that's okay I'm overwriting
439:18 - it every
439:19 - time so Matt and then decode so now I'm
439:24 - doing the dot product here okay
439:28 - so once I decipher that I hope it's an
439:32 - integer um sometimes you know we might
439:35 - be dealing with a lot of weird variables
439:37 - and we hope it rounds correctly but I
439:40 - still need to get that item and I
439:43 - definitely want to cast it as an integer
439:45 - here so there we
439:49 - go and I just called that variable
439:53 - decipher so now that that's an integer
439:57 - my decoded
439:59 - letters I take that decipher
440:02 - integer cast it as a character CHR and
440:06 - I'm going to add it to my decoded
440:10 - letters string that I initialized up
440:14 - here so you see slightly different on in
440:17 - the encoding we start storing things as
440:19 - an array that I'm going to out put here
440:22 - here I'm going to put it all together as
440:24 - a string so I get the I get things as an
440:26 - integer and then cast that as a
440:28 - character um get you know the get the
440:31 - character that is associated with that
440:32 - integer again based uh this is again
440:35 - based on the asy code um that CHR will
440:38 - turn that integer into the appropriate
440:40 - character and I have and I just keep
440:43 - adding to my decoded letter string so
440:48 - here's the here's the next thing
440:52 - um the weirdest thing
440:55 - is I found that I use this um notice how
441:01 - this is very similar I have decipher
441:03 - here for that integer for that one
441:05 - character and then store it and then I
441:07 - have decipher
441:09 - two which I'm going to get from item one
441:12 - because my my array item zero and item
441:15 - one what I found though is that I need
441:19 - this rounding adjustment it seems that
441:22 - this one seems to be for whatever reason
441:24 - consistently good I haven't really had a
441:27 - problem with this but this one I do need
441:30 - to o round
441:31 - it it just happens to be that that seems
441:34 - to be the case um so I do that I throw
441:38 - in that extra that but that I I wanted
441:40 - to put that comment there that's why
441:42 - this one's rounded and the other one
441:43 - isn't I rounded It Again cast as an
441:46 - integer now this is decipher two and
441:49 - then convert it to you know that which
441:52 - is a which is an integer convert it to
441:55 - the appropriate character and add it to
441:57 - decoded letters so we see you know
442:00 - bringing in you know doing this matrix
442:04 - multiplication and then getting this
442:07 - item as a part of my decoded string and
442:10 - then the next item as a part of my
442:11 - decoded string and this is another thing
442:15 - you know the these are different enough
442:17 - steps that you know I'm not going to
442:18 - Loop through this little part twice I
442:21 - just I'm going to write the extra line
442:22 - of code and then I'm going to Output the
442:25 - decoded
442:26 - message so pretty cool
442:31 - and let's let's see it in action
442:33 - so I hit shift enter instead of just
442:36 - clicking the button enter text to decode
442:39 - there we
442:41 - go
442:42 - python is
442:45 - fun there we
442:48 - go and so we see this what I would do is
442:53 - then I would copy all
442:56 - this
442:58 - um and I would paste that somewhere that
443:00 - I wanted to send that message but here
443:04 - I'm going to paste it here because then
443:05 - you know if you got this message you
443:07 - would copy it from somewhere and then
443:08 - paste it in
443:09 - here and I'm going to hit
443:12 - enter and there we go python is
443:17 - fun
443:19 - um there we go so if if if if I didn't
443:22 - have that um
443:24 - adjustment you see fun I didn't put the
443:27 - period there but because this was odd we
443:31 - have the extra period there um because
443:34 - if it cuts it off then you know um might
443:39 - be uh there there there you go python is
443:43 - Fu you know that's probably not the
443:45 - message you were trying to send
443:49 - um so there we go we have this now I
443:54 - have this as one in just like it did
443:57 - with the other Cipher um because if you
444:00 - know I'm running this to encode and
444:02 - decode if if I just wanted to if I just
444:06 - wanted to encode
444:09 - something um you
444:12 - know just
444:14 - encode I mean I could take
444:18 - this now I'm going to copy it
444:21 - here just because um but if I just
444:25 - wanted to encode something and then send
444:26 - it and I have nothing to decode right
444:28 - now um You you know I could just type in
444:31 - you know like some random number 65
444:34 - there we
444:38 - go
444:40 - and
444:42 - yep it might be uh yeah that's very
444:47 - interesting um so I I wouldn't have to
444:51 - you know I just typed in 65 and it
444:53 - didn't do anything um though I expected
444:56 - it to be like a period but
444:58 - anyway you know that's it or if I just
445:02 - wanted
445:04 - to decode
445:06 - something then I could again just type
445:09 - in I I just keep thing is 65 you know
445:12 - there's all the characters before the
445:13 - and then this is capital A but if I
445:15 - wanted to just um you know text this and
445:18 - you see it's odd so it would give me two
445:21 - different um two different things so if
445:26 - I just wanted to decode something I
445:27 - could just type in any number there
445:30 - and get that output it doesn't matter to
445:32 - me and then I will paste this in here so
445:37 - you see like I I didn't need to split
445:39 - this up as having an
445:41 - encoding function and a decoding you
445:43 - might as well do both of them together
445:46 - and then whichever if there's one you
445:47 - don't need then you know just enter a
445:49 - letter just enter a number and then call
445:51 - it good there you go just
445:55 - encode so this is a good you know I I I
445:59 - really think it's it's Matrix makes it
446:01 - interesting because you know now you're
446:04 - taking two characters at a time and
446:07 - you're doing this matrix multiplication
446:10 - you know the
446:11 - possibilities are pretty pretty big for
446:15 - all these different uh matrices you
446:18 - could have you could if you really
446:21 - wanted to also put a shift like once you
446:24 - get that
446:26 - encoded um you could um put a shift and
446:32 - if you did I would put it here I would
446:35 - do all the encoding and then like let's
446:37 - say if I wanted to do this and then
446:39 - besides that number I would just want to
446:42 - add something you know I don't know add
446:44 - 10 to that number or something like that
446:47 - you know or or you know 50 just I I I
446:52 - would do it there and
446:54 - then at the at the end I would um do
446:59 - this subtraction right away so you could
447:03 - do that you know Matrix encoding is
447:07 - complicated enough but you could also
447:08 - add the adding or subtracting but I
447:09 - would do that after the multiplying here
447:13 - and then just you know add or subtract
447:15 - something and then here right away when
447:18 - you get the number you know do the
447:20 - opposite add or
447:21 - subtract so these are some things where
447:24 - where you can you know that's why you
447:26 - you can see all this code you know what
447:29 - can I do to make a secret code but then
447:30 - you see where you can make it your own
447:33 - and you know who knows you know even
447:36 - even if you keep it just like this and
447:39 - the only thing you change is this that's
447:40 - four numbers there that um you know
447:44 - whoever you're sending the message to
447:46 - would somehow have those four numbers
447:48 - and therefore the two of you can encode
447:50 - and decode things so yeah seems like a
447:53 - lot of fun um you know sending secret
447:56 - messages so there we go um here's how to
447:59 - do with python Matrix so let's look at
448:02 - another way of solving a system of
448:04 - equations and this one connects more
448:06 - with a lot of algebra methods that you
448:09 - might be familiar with so I'm going to
448:12 - take this Matrix and I'm going to take
448:16 - this system and turn this into a 3X3
448:20 - Matrix of the coefficients on this side
448:23 - of the equal sign and then it's that
448:27 - times a matrix of XYZ the
448:30 - variables
448:32 - equals a 3x1 matrix of the numbers on
448:36 - that side so this works that we can
448:40 - create a matrix of all of our
448:41 - coefficients times the variable Matrix
448:44 - equals this now how we solve it remember
448:48 - if you're multiplying you divide divide
448:50 - and you multiply do the opposite um to
448:53 - cancel things out so I want to get the
448:56 - inverse of this Matrix and multiply the
449:00 - inverse times each side so when I get
449:04 - the inverse of this Matrix so remember
449:06 - this is a 3X3 so we can get the inverse
449:10 - and the inverse will be also a 3X3 and
449:14 - then when we multiply this by this
449:17 - Matrix which is a 3X
449:19 - 1 then we'll see that we can do this
449:24 - because the
449:26 - three these Dimensions match up and then
449:30 - and the dimensions of the result are
449:32 - going to be 3x1 it's going to be a 3x1
449:37 - so what we end up getting is this Matrix
449:42 - of the the resulting Matrix will be like
449:46 - you know XY
449:49 - Z
449:51 - equals a 3X3
449:53 - Matrix of our answers here pretty cool
449:59 - so
450:01 - this this is another way to solve it I
450:03 - personally often use the reduce row
450:05 - Echelon function but this is just as
450:09 - good just as viable and for some other
450:12 - things beyond what we're going to do in
450:14 - this course but you get into other you
450:15 - know more advanced calculus some um
450:19 - Matrix algebra then you might end up
450:22 - using this inverse method you know more
450:25 - often so I wanted to make sure that you
450:27 - know we talk about it but now let's take
450:29 - a look at the code and we'll compare
450:31 - this also to the reduced row Echelon
450:33 - function you know how we do this in code
450:36 - and then what the answers look like so
450:39 - let's take a look at the
450:40 - code so let's look at doing this with
450:43 - code inverse Matrix to solve a system
450:46 - and I'm going to use the same numbers so
450:49 - notice I'm going to make them arrays I'm
450:53 - going to import MP n p I'm going to
450:56 - import um everything from simpai it's
451:00 - kind of weird that it just works out
451:02 - when I do that even though it doesn't
451:03 - seem like I'm calling Senpai for
451:07 - anything so I'm I'm still going to talk
451:11 - about them as matrices but I'm creating
451:14 - them as numpy arrays so here's the same
451:17 - and we see you know Row one in Brackets
451:21 - row two in Brackets Row
451:24 - three and notice this one are a number
451:30 - on the other side of the equal sign it's
451:31 - a 3X one and so I'm just going to make
451:34 - you see Row one row two Row three each
451:36 - of them have one number in the brackets
451:38 - all right so because I'm doing this then
451:42 - numpy has that linear algebra so np. Lin
451:47 - alge
451:48 - Dov to get the inverse of that
451:52 - array
451:54 - and I'm just going to store it as mcore
451:57 - inverse and then the dot product
452:00 - and so this function calls you know two
452:04 - arguments what am I multiplying and
452:06 - order does matter so I'm doing the
452:07 - inverse times
452:11 - A1
452:12 - and
452:15 - then inverse time A2 now this second one
452:19 - is really what I need to solve I just
452:22 - did this because I wanted to show um
452:25 - that this should give you the um
452:28 - identity Matrix okay so I'm just going
452:31 - to print this and that's that's really
452:34 - the the answer that I'm looking for all
452:36 - right and what I also have is the
452:40 - answers that I got from doing reduce row
452:42 - Echelon function it gave remember it
452:45 - gave me those fraction answers so I'm
452:48 - just printing out those
452:50 - and this is fraction so the print
452:53 - statement we combine these or we we'll
452:56 - do the math and actually output a
452:58 - decimal this will also output a decimal
453:01 - so we'll see them to compare so this is
453:04 - what I'm I'm doing I did the dotproduct
453:06 - the inverse time A2 and I get my 3x1
453:10 - Matrix of the answers here and then to
453:13 - compare so this one gave me
453:19 - 0.330 and the one I got before was
453:24 - 0.327 there we go so and then the next
453:27 - number is a six so almost three
453:30 - thousands off there might be a rounding
453:32 - error somewhere or just and but notice
453:36 - you know this is about the comparison
453:39 - here um there we go the so the x value
453:43 - would be that the Y Value Point
453:46 - 014 and this one G is correct to that
453:49 - many but then the next number is a seven
453:52 - whereas this one's a one so off by about
453:55 - 6 6 606 10,000
453:59 - and then here
454:01 - negative.
454:03 - 1443 and negative.
454:07 - 1476 so again off by a little bit in the
454:11 - order of you know um 10 in the order of
454:16 - the
454:17 - thousandths
454:20 - um close but depending on what you're
454:23 - doing and depending on how you're
454:24 - rounding that might be fine um that
454:28 - might be as close is what you need to
454:30 - get um if if not it would be worth it to
454:34 - you know try some different things and
454:35 - see which one really is you know uh more
454:39 - correct um but there we go so the
454:43 - inverse and see just printing that m dot
454:46 - I have this that
454:49 - um there we go um m dot and there we go
454:54 - so uh I could you see create multiplying
454:58 - the inverse times A1 and that should
455:00 - give you the identity Matrix and I made
455:02 - this as two different variables so um
455:05 - maybe I'll just make this one M
455:09 - do a and then I'm just going to print
455:13 - here
455:15 - print M do
455:20 - a there we
455:25 - go now
455:27 - this is really the ID because all these
455:31 - are e Nega something
455:35 - so I need to go up here and then say
455:40 - um
455:44 - around
455:49 - and that gives you the rounded so notice
455:52 - we have the math function round but this
455:54 - is a
455:56 - round and it will round every element in
456:00 - that
456:01 - array pretty
456:04 - cool and so I just wanted to put that
456:07 - into to show you that that's what we're
456:08 - doing we we get this array multiply by
456:10 - the inverse which gets the identity
456:12 - Matrix and so it would be the identity
456:14 - Matrix XYZ on the left side
456:18 - equals this Matrix which X is 33 Y is 01
456:23 - and Z
456:25 - is
456:28 - .47 all right
456:30 - pretty good so I just wanted to do
456:33 - another example here connecting with
456:36 - solving the system of equations to get a
456:39 - quadratic we can do the same thing and I
456:42 - followed the same you know using the
456:44 - same points here um I'd have you know
456:47 - two x value X1 y1 X2 Y2 X3 Y3 and just
456:53 - like we have here um I have the reduced
456:56 - row Echelon
456:58 - function and so so therefore I'm
457:01 - creating a matrix of these
457:04 - values and then I'm going to do that
457:09 - function and then get that so here we
457:12 - go now if I do this then here's remember
457:18 - this is how I got these values here for
457:21 - X Y and Z or for a and c and it's just
457:26 - one value here so therefore I'm using
457:28 - the round function
457:31 - so that we've already done and so just
457:34 - using the inverse Matrix now
457:37 - um I'm just doing same values here but
457:42 - I'm making it n p. array for each there
457:46 - we go and just like we were doing before
457:49 - therefore I'm going to do the
457:53 - inverse there we go of that array
457:57 - 3x3 and then I already have this written
458:00 - in I'm going to round it so just again
458:03 - into comparison you really don't need to
458:05 - do this I just wanted to show you um but
458:09 - then I multipli that inverse times that
458:11 - 3x3 should get the identity and then the
458:14 - values I multiply the inverse by the 3x
458:18 - one so when we run
458:22 - this with with numbers like this that
458:25 - work out to nice integers or easily
458:28 - rounded you're not not going to see the
458:30 - same
458:30 - discrepancies so yep a b and c become 1
458:34 - five and six identity yep and the others
458:39 - were one five and
458:41 - six so I this is a lot of extra output
458:44 - just to show you you know how some of it
458:46 - works but there we go so this is getting
458:50 - the answer using inverse this is getting
458:52 - the answer using reduce row Echelon
458:54 - function or maybe I have it reversed but
458:57 - then and and the same so it it some of
459:00 - these become a matter of
459:02 - preference there we go but now we can
459:05 - see how to use an inverse to solve and
459:07 - write the code to do it so let's look at
459:10 - a few more things with
459:13 - matrices like
459:17 - Transformations okay so here's how to do
459:20 - a few key Matrix operations with code
459:25 - the only Library we need to import is
459:27 - numpy and here I'm going to create a
459:30 - matrix I'm just going to call it points
459:32 - because I have it in mind that these
459:34 - could be XY points so np. Matrix and
459:38 - then here I have you know there we go
459:41 - Row one row two Row three and these
459:45 - could be XY
459:46 - points so now I could just pull out one
459:51 - of these points and notice how we number
459:53 - these um row zero element one so that'd
459:56 - be a
459:57 - two and you know cuz this is row 0o row
460:00 - one two you know there we go I could
460:03 - pull out that one particular point and
460:05 - then I'll also just print the whole
460:07 - Matrix just so you can see
460:10 - that then let's transpose it so I'm
460:12 - going to create another Matrix called T
460:14 - points and I'm going to transpose that
460:18 - original Matrix and we'll see what that
460:20 - looks like because then I'm going to
460:22 - print that out transpose and then I'll
460:24 - print that
460:26 - Matrix and just for fun we're going to
460:28 - transpose it back back
460:31 - so I'm going to transpose it back and we
460:33 - see um same np. transpose so I can
460:38 - transpose points and then I can
460:40 - transpose T points and that will
460:42 - transpose it back and then again we're
460:45 - going to print this I did I did make it
460:49 - another Matrix called original points so
460:52 - that it doesn't overwrite that so now at
460:55 - this point I have three matrices points
460:58 - T points and original
461:01 - points
461:03 - so I can also convert it to an array and
461:06 - this one I went back to the original
461:08 - points and converted it to an array NP
461:13 - np. array and then take that and notice
461:17 - array has the
461:19 - same function r. item and there we go
461:24 - that's 21 so back to the original so
461:28 - it's row two row zero one two and then
461:32 - element one so that should be a
461:37 - nine then still keeping in mind that
461:40 - these could be XY
461:43 - points some of the things we can do we
461:45 - can pull out different elements for this
461:46 - I'm going to start a blank array for x a
461:48 - blank array for y and I'm going to
461:53 - append one item to that so x. append and
461:56 - then I'm going to pick an item all right
461:58 - so I picked 0 0 so as we see that's a
462:02 - one and
462:04 - then y. a pen
462:07 - 01 here we go
462:10 - so we
462:12 - have um one2 so therefore I just made
462:17 - this X and Y are just that
462:21 - 1.12 and we'll print that
462:24 - out
462:27 - so so we see
462:29 - Point item 01 that's a two because there
462:34 - we go and here's that array here's how
462:38 - it would display as an array Row one row
462:40 - two Row
462:41 - three or as a matrix and transpose so we
462:45 - see what this does transposed makes
462:48 - column one row
462:50 - one so the 133 there we go and
462:54 - 269 there we go row column two becomes
462:57 - row two that's the
463:01 - transposed and transposed back and you
463:05 - see we still get it back to column one
463:07 - row one
463:09 - so um sometimes the reason to do to
463:13 - transpose it could be to um do some
463:16 - multiplying that you'd rather multiply
463:18 - this way so there we go and again I
463:23 - picked one element there and then as an
463:26 - array you see I just made
463:29 - that array so that X array and that y
463:32 - array so it was one two which was the
463:36 - first point
463:38 - there so some different things that we
463:40 - can do with this all right so this is
463:43 - the part of the chus where we go into
463:45 - the imaginary world and we can even
463:49 - graph complex numbers so we have our
463:53 - whole new axis that we can graph where
463:56 - instead of X that's the real axis and
463:58 - instead of y That's the imaginary axis
464:01 - and the way we would graph complex
464:03 - numbers so let's let's get a complex
464:05 - number so if I have like 3 + 4 I so
464:10 - remember it's complex because I have a
464:12 - real part and an imaginary part and then
464:17 - I would graph this as the real part
464:19 - would be my x value and the imaginary
464:21 - part would be my y value so essentially
464:23 - this would correspond to like a point of
464:27 - like 34 not draw on the scale but I
464:32 - wouldn't that's how I would write it in
464:34 - the cartisian plane 34 but because we're
464:37 - in this axis I would still write it as
464:42 - this it would be 3 + 4 I so I would
464:47 - still write it like that but we would
464:50 - know that that's where we get the real
464:51 - part the imaginary part plot the point
464:55 - pretty cool so other than going into the
464:59 - imaginary world you know what are some
465:01 - of the uses of this well a lot of
465:03 - fractals work on on this and the
465:07 - equations that generate fractals do
465:10 - involve in some capacity you know the
465:12 - square root of negative 1 which gets us
465:13 - I and then iterations of going through
465:18 - these and therefore plotting the points
465:21 - here and how do we get those particular
465:24 - points only by dealing with imaginary
465:26 - numbers and those types of equations so
465:29 - so that's why it it becomes a useful
465:31 - axis another thing that's going to
465:33 - connect with something that we're going
465:34 - to build up to here is if I have um
465:40 - cosine of
465:42 - X+ I sin of
465:47 - X so if I have this then that's
465:52 - something on my unit
465:54 - circle um well remember X is the cosine
465:58 - Y is the sign
466:00 - so if I have cosine of x or I of X and
466:05 - again I'm going to say x is a variable
466:07 - because these are not X and Y it's real
466:10 - and imaginary so my real part would be
466:13 - the
466:13 - cosine my horizontal axis and my
466:16 - imaginary part would be the sign and so
466:18 - I could plot points on an imaginary
466:22 - Circle so we're taken you know from
466:25 - Plato saying that the perfect circle
466:26 - doesn't exist to now we're going to get
466:29 - into imaginary circles but that's okay
466:33 - uh that's where we get to some
466:35 - interesting patterns so we're going to
466:37 - continue on this but let's take a look
466:39 - at how to do this in the code how to get
466:42 - complex numbers work with complex
466:43 - numbers get the real part or the
466:46 - imaginary part and do some other things
466:49 - with that and then we'll build upon that
466:51 - and get some fractal so let's take a
466:54 - look at how to work with the complex
466:56 - numbers in the code all right so here's
466:59 - the code for complex and imaginary
467:02 - numbers so we're going to import math
467:04 - but we're also going to import C math to
467:07 - deal with complex numbers all right
467:11 - and that's going to work behind the
467:13 - scenes we're not going to see cmath do
467:15 - anything um but we will use math dot a
467:19 - few things but we'll get to that
467:23 - so if I want a complex number I'm just
467:26 - going to call this function complex and
467:29 - it's going to take two arguments two
467:31 - three so the real part is going to be
467:35 - two the comp the imaginary part is going
467:38 - to be three and to see how this plays
467:41 - out I'm going to just print this out
467:42 - what that complex number looks like and
467:45 - I'm also going to show you see if I have
467:48 - this as a variable in this case Z1 I can
467:50 - do Z1 do real and then I can do Z1 do
467:54 - imaginary so we can split those up
467:58 - because some sometimes that might be
467:59 - useful all right so we'll print that out
468:02 - but then I'm also going to show
468:04 - you another complex
468:07 - number and here's another one where my
468:11 - real part is zero but the imaginary part
468:15 - is math. pi so this is I
468:18 - Pi is really Pi I I pi and
468:24 - then I'm going to create this as another
468:26 - variable though we don't have to
468:29 - but I'm going to do this so math. e to
468:33 - the exponent in this case Z3 so that's
468:36 - going to be to the exponent I Pi so it's
468:40 - e to the I
468:42 - Pi pretty cool um we're going to get
468:46 - even more into this but this these two
468:51 - lines here we just made e to the IP all
468:54 - right so you can if you have a complex
468:57 - number you can even subtract so that's
468:59 - why I created a second one because I can
469:01 - subtract complex numbers I can take one
469:04 - of the complex numbers and I can take it
469:07 - to an exponent in this case I'll just
469:09 - Square
469:10 - it all right and here um yes even though
469:15 - I have Z4 as e to the I Pi I'm going to
469:19 - show you that I can even just do that
469:22 - math right in the in the print statement
469:24 - and print that out and then here um when
469:28 - we see what that looks like you'll see
469:30 - why I have it building I'm just going to
469:31 - round this so I'm going to round the
469:34 - real part plus and then I'm going to
469:37 - round the imaginary
469:39 - part and here I'm just going to
469:41 - concatenate all this so it's going to be
469:43 - this um it's going to display the plus
469:45 - sign and it's going to display I so it's
469:48 - going to look like a complex number so
469:51 - let's take a look
469:52 - here so here's my print
469:57 - statement for
470:00 - this Z1 so it it will print this out as
470:03 - 2 + 3j it's really interesting that the
470:07 - python code um it will use the letter J
470:11 - with nothing in between you know it's
470:13 - not multiplied by anything instead of I
470:16 - but that represents I the imaginary
470:19 - number so there's your complex number in
470:23 - in Python code and then we can split it
470:25 - up you see the real part is two the
470:27 - imaginary part is three
470:30 - and here I have um this next print
470:34 - statement because
470:37 - we
470:40 - subtracted um that and my other
470:42 - imaginary number so the real one 2 - 1
470:45 - is 1 and the imaginary one 3 - 2 is 1 so
470:51 - we can do the subtraction here we took
470:54 - it to an exponent and there's the answer
470:57 - and then we have e to the I
471:00 - Pi This Is The
471:02 - Answer
471:04 - um but notice it seems like a long
471:07 - decimal but the key feature of this
471:09 - decimal this ironically is not the
471:12 - letter is not e like Oilers number it's
471:16 - exponent to the -16 J
471:20 - so um what that is this number here 1 *
471:25 - 10 -16th is essentially zero
471:29 - it's so close to zero so when I have
471:32 - this build when I'm rounding it here it
471:35 - absolutely will round to the zero
471:38 - because that that's what we have so this
471:40 - is the notation um you might remember
471:42 - this from something else scientific
471:45 - notation so that's exponent
471:47 - -16 so yeah 10 to the -16th is really
471:51 - close to zero so what do we get we get
471:55 - here that
471:58 - e to the I
472:01 - Pi is essentially
472:07 - ne1 there we go um that might not be so
472:11 - amazing now but it's just one way to
472:14 - look at that and we'll look at some
472:16 - other even more interesting uh patterns
472:21 - within that that uh beautiful equation
472:25 - so you know some key features how to
472:28 - work with complex numbers let's graph
472:30 - them so I'm still just going to import
472:34 - numpy and M plot Library
472:38 - um I'm going to set my you know just
472:41 - like I would with normal graphing and
472:43 - I'm going to set my Xmen y Min Etc just
472:47 - like normal graphing um notice we're
472:50 - really zoomed in um -2 to2 really zoomed
472:55 - in on the graph I do want to add a label
472:57 - um I put this in here but I decided not
472:59 - to put a title um but I just I'll add a
473:02 - label so that we see it is the X label
473:04 - but that's our real axis now and the
473:07 - ylabel is the imaginary axis
473:11 - so so here's a complex number and if the
473:15 - complex number one and then 75 so then
473:18 - essentially that's 1 + 75 I is the
473:23 - complex number and we would graph this
473:26 - that the real part ENT essentially
473:28 - becomes our x value and then the complex
473:30 - part or the imaginary part becomes our y
473:33 - value so that's how we would graph a
473:35 - complex number the real part is the x
473:39 - value the imaginary part is the yvalue
473:41 - so it looks like one number but we take
473:43 - it as like an x y coordinate so this
473:46 - could just be
473:49 - um you know one you know 75 as an XY
473:54 - coordinate
473:57 - so I'm to skip over this for now um
474:01 - because I'm not going to yet so this is
474:04 - X2 and Y2
474:06 - but I'm not graphing them yet so we're
474:10 - going to ignore this and we're just
474:11 - going to jump right down here
474:15 - to uh plot it so I have my X1 and my
474:21 - y1 and I'm going to plot
474:24 - those here we go and when I run this
474:29 - now I also did not put an axis anywhere
474:34 - but it just naturally will zoom in on
474:37 - where um where it wants to be so there
474:41 - we go so on the real axis there we go
474:43 - the x value is one and on the imaginary
474:46 - 75 we see the labels we see where it is
474:49 - um 0 0 would be you know off this graph
474:53 - but then you know it just zoomed in on
474:55 - that okay that's nice but we can see
474:58 - that we can plot a
475:00 - point all right so now we'll revisit
475:04 - this I actually also
475:07 - can create uh np. linspace so remember
475:10 - that is an array of values um so I want
475:15 - it to go from 0 to 7 and then I want
475:18 - there to be 70 points in between so
475:21 - every 1110th is a you know is a new
475:24 - array element so there's going to be 70
475:26 - of them here from 0 to 7 and the reason
475:28 - why I did this is because we're going to
475:31 - be thinking about angles and angles in
475:35 - radians you know going around the whole
475:37 - circle is 6.28 so I just rounded it up
475:40 - to seven as the next integer
475:44 - And1 that's Pro that's enough of a jump
475:46 - you know that we'll see this see this
475:49 - graph so there's my array I'll just call
475:53 - it a and then
475:56 - points is going to be another array and
476:00 - notice I
476:02 - have uh so np. cosine so I have the
476:05 - cosine of
476:06 - a
476:08 - plus the S of
476:11 - a Time j i * 1 J so what we have here is
476:17 - I just created a complex number
476:21 - here um called
476:24 - points and
476:29 - the notice I use this without
476:31 - even creating complex but this is
476:34 - actually going to work very nicely um
476:37 - points. real so I'm going to get the
476:39 - real part of it is going to be X2 and
476:42 - the points. imaginary is going to be Y2
476:45 - so if I change
476:47 - this instead of graphing one
476:53 - point it's going to
476:56 - graph all of these points points which
476:59 - would go around in a
477:01 - circle and I could have more points in
477:04 - there
477:06 - um you see instead of 70 maybe I'll make
477:10 - this
477:16 - 140 there we go and we graph all these
477:18 - points around in the circle and this is
477:22 - mathematically even you see on the Y AIS
477:25 - or the imaginary goes from -1 to one
477:28 - same with on the X or the real axis
477:29 - netive 1:1 but it displays it just um
477:33 - more rectangular we can uh also Square
477:37 - it up if we wanted to but I just wanted
477:39 - to show you this that that's what we're
477:41 - graphing here
477:43 - and in this real and imaginary axis we
477:47 - can have you know the cosine as a real
477:52 - part and the sign is an imaginary part
477:55 - because cosine is your x value s is our
477:57 - yvalue
477:58 - and in this real and imaginary axis we
478:01 - can graph a
478:04 - circle so these are two interesting
478:07 - things
478:09 - that in working with the actual
478:11 - equations we got that e to the I Pi so
478:15 - the you know the complex part is e to
478:18 - the I Pi ends up being ne1 and we also
478:22 - get that we can
478:24 - graph
478:26 - cosine Plus s
478:31 - i as a complex number and that would be
478:35 - a
478:36 - circle and we're going to build upon
478:38 - that
478:39 - to really appreciate the the levels of
478:42 - depth for this uh beautiful formula but
478:45 - these are some things that we can do
478:47 - with uh real and complex
478:50 - numbers y calculating them graphing
478:54 - them
478:55 - and we'll see what other interesting
478:58 - patterns these lead to the mandal BR set
479:02 - this equation seems to be very simple
479:06 - it's zal z^2 + C and really then what
479:11 - you would do is you would Define Z
479:15 - equals and C equals at the beginning and
479:19 - quite often Z starts out at zero that's
479:22 - pretty common and we'll talk about the C
479:26 - value here so so what makes this so cool
479:30 - well we're going to get into the visuals
479:32 - of this when we look at the code but it
479:34 - becomes this really great pattern
479:37 - especially when you graph it on the real
479:40 - and imaginary axis we're not talking
479:42 - about x x and y- axis here kind of
479:45 - doesn't accomplish the goal so what
479:48 - we're going to do is Define c and it
479:52 - doesn't have to be an imaginary number
479:54 - but if you have something like you know
479:56 - C equals like you know I like
479:59 - 0.5 I or something like
480:02 - that so you would plug those in um 0^
480:07 - 2+ so it would be 0^ 2ar + 0.5
480:15 - I and of course that zero is out so then
480:18 - Z the next round then that's the Z value
480:23 - that's a zero so it becomes
480:26 - 0.5 I i^ 2 +
480:31 - 0.5
480:33 - I and then we would get that answer and
480:37 - then plug that into Z now this one works
480:40 - out nicely I squar then um becomes -1
480:46 - and then I have I in that part so we see
480:50 - it's a complex number that we can graph
480:52 - on the real and complex axis
480:56 - well anything that continues to get
481:00 - larger and larger that's not a part of
481:02 - the mandal BR set but there's these few
481:06 - values that tend to get not much larger
481:11 - and they Define you know they Define
481:14 - this central part and the edges of the
481:16 - mandal BR set you know they're saying
481:19 - that we'll say that those are a part of
481:20 - the mandal BR set and then some things
481:23 - on the edge that are not really a part
481:27 - of the mandal BR because at some point
481:29 - they'll get larger and larger the way we
481:31 - would usually do it is coat it to have
481:35 - you know how many iterations does it
481:37 - take to get Beyond this threshold and
481:41 - then I might color it so you know in the
481:43 - mandle BR set might be a really dark
481:45 - color like black and then I'll get to
481:48 - like blue if it's all a few iterations
481:50 - gets it beyond the mandle BR if uh it's
481:54 - a few more then I might go to you know
481:56 - green and then you know out through the
481:58 - Spectrum and then a lot of times you'll
482:00 - see these and then something like
482:02 - red on the edges where you know that
482:05 - right away wasn't even in the mandal BR
482:07 - set so yeah just really interesting
482:11 - um just a very simple equation and then
482:14 - just each iteration you know we just
482:16 - change the zv value plot the point and
482:19 - then count how many iterations it takes
482:21 - to get Beyond a certain threshold and
482:24 - really then what happens is these really
482:25 - cool patterns and the first view is
482:29 - pretty cool and then we could zoom in on
482:32 - different parts to get other views so
482:34 - that's what we're going to take a look
482:35 - at and in addition to looking at the
482:38 - code uh so it's mandelbrot because the
482:41 - guy's name benois Mandel BR um he did a
482:44 - really good Ted Talk where he just talks
482:46 - about fractals and everything um yeah
482:48 - just a really interesting guy so if you
482:51 - come across that Ted Talk uh with Mandel
482:53 - BR uh it's worth watching but let's take
482:56 - a look at the code and we're going to
482:58 - see some these and some other examples
483:00 - some other iterations and see how this
483:02 - leads up to um what the Mand BR uh
483:07 - picture looks like let's take a look at
483:09 - the
483:10 - code here's the code for amandel br set
483:14 - and yes I will admit that I
483:18 - actually Ed chat GPT to create this code
483:22 - um so doing this in I don't know five
483:27 - seconds saved me potentially a day
483:31 - because understanding the idea that we
483:34 - can take these points and then plug them
483:36 - back into this formula and then plot and
483:41 - then Co color code the different parts
483:44 - for how many iterations it takes to get
483:46 - to that
483:47 - point yes we can wrap our heads around
483:50 - it but writing the code to get that to
483:53 - work and to really generate the U good
483:56 - graph you know what
483:58 - um some things that uh AI does pretty
484:01 - well so we're going to still only need
484:05 - to import umpai in that plot Library um
484:10 - I'm going to Define this mandal BR um
484:13 - function and see here's what it is we're
484:15 - going to go through um taking what C
484:19 - value we want we're already going to
484:21 - Define that Z starts at zero and we're
484:24 - going to Loop through you know however
484:27 - many it ations we're going to Loop
484:29 - through and then this is what we do Z *
484:32 - Z plus C and then we're just going to
484:36 - keep overwriting that that's what we
484:37 - want to do
484:40 - um it would seem that the formula
484:43 - straightforward to but again to make it
484:45 - work um you know
484:48 - correctly you see any time Z gets to be
484:52 - greater than two so then we're going to
484:56 - return
484:58 - um I and then we're going to turn Max of
485:01 - iterations so that's kind of what we
485:03 - want from this is how many iterations it
485:06 - took to get to this point and then
485:09 - here's the
485:10 - plot um where we're going to take the
485:13 - inputs X min max y Min y Max the width
485:16 - and height of the graph Max iterations
485:19 - and
485:20 - here we're going to create np. linspace
485:24 - two different arrays for you know one
485:26 - for the X one for the Y Y and then we're
485:28 - going to create a mesh grid this was
485:31 - again um some nice Insight that the GPT
485:34 - gave that working with the mesh grid
485:36 - this works out nicely so we Define this
485:39 - XY mesh grid and then I'm going to say
485:42 - notice these are capital letters here z
485:44 - = x + 1 J *
485:49 - Y and here we go we're going to create
485:51 - this
485:53 - image and we're going to Loop through
485:55 - this calling this function
485:58 - so it's going to Loop through the height
486:01 - and width
486:03 - and take you know this Z function to
486:08 - generate variable
486:10 - C and there we go then we're going to
486:13 - call that uh the mandal BR um function
486:18 - and then see Max
486:20 - iterations so now we get to show this
486:25 - image um there we go
486:28 - the extent and some labels
486:31 - here so one of the things that we can do
486:35 - um these original numbers are the ones
486:38 - that uh GPT returned but I'm going to
486:41 - run this first and then show some other
486:44 - numbers that will zoom in but anyway so
486:48 - we have these um minimum maximum width
486:53 - and
486:54 - height and there you go Max iterations
486:56 - 100 that works and now we're going to
486:59 - call the plot function so after that
487:03 - then we call this plot function here so
487:06 - you could have this code you can change
487:08 - these values call that plot
487:11 - function which will then also
487:15 - call the mandal BR function
487:18 - and here we
487:21 - go um if you run
487:24 - it we get the mandal BR set and
487:28 - that one function saying that it was hot
487:31 - that that defines the colors a little
487:33 - bit and we see all these different
487:36 - patterns here for how many iterations it
487:41 - takes um to get to one part here and one
487:45 - of the things then we can do is change
487:50 - this probably could put these on sliders
487:52 - but that might be um
487:57 - that might be a little bit of
488:02 - a a little bit um take a while to
488:09 - process all
488:11 - right and so I'm just going to switch
488:14 - these around so that we have
488:24 - um there we go so we'll just switch that
488:27 - around and then
488:29 - um 1.5
488:32 - here
488:36 - okay
488:38 - and
488:43 - oh and make this
488:48 - 1.5 comment there all right so in
488:52 - looking at
488:54 - this um
488:59 - I was looking
489:01 - at U one of you know one of these
489:06 - and zooming
489:09 - in to
489:11 - this you
489:14 - see this gives you the mandal brth that
489:19 - you might be familiar with this look
489:23 - well actually either either of them
489:24 - depending on what zoom level you often
489:26 - see but we see this mandal BR set
489:34 - here
489:36 - and so notice
489:39 - the zoomed out version with these
489:42 - different values
489:44 - here we get that zoomed out version this
489:47 - is nice and
489:49 - then the other one we can take a look
489:52 - and see like the zoomed in on all these
489:55 - edges that of course are blurry here but
489:57 - if we were to zoom in on them then we
489:59 - get to that that value that we had
490:02 - before pretty
490:05 - cool and again another usefulness of uh
490:11 - imaginary numbers a lot of the
490:12 - usefulness is the artistic or visual
490:16 - representation because it actually ends
490:18 - up being the math of imaginary numbers
490:21 - behind the scenes um other sorts of
490:25 - fractals um again things that might
490:28 - seem
490:30 - random um just because you don't you
490:33 - don't fully see all the the little
490:36 - calculations going on in the background
490:39 - but these are some of the uses of
490:40 - imaginary
490:42 - numbers and uh benoa mandr um you know
490:48 - he he was pretty good with these
490:50 - interesting character all right so again
490:53 - just some use of imaginary numbers um a
490:56 - little example of some AI code that you
491:00 - can generate to plot this
491:04 - and you know some things you can Tinker
491:06 - with go in there and change some of the
491:08 - values and see what you get so let's
491:11 - talk about sequences in series so a
491:14 - sequence is any uh collection of numbers
491:17 - kind of like an array but there's a
491:20 - definite order to them a sequence if you
491:22 - will and a series is when we have that
491:25 - but we add them up so so let's talk
491:27 - about the sequences first and then we'll
491:29 - see what we're going to do to add them
491:31 - up so few different types the first one
491:35 - we're going to look at is arithmetic and
491:37 - just like the word arithmetic arithmetic
491:38 - is when I add or subtract something to
491:40 - get the next number and one thing that
491:44 - uh binds these sequences I have an
491:46 - equation that I can use to generate the
491:49 - next number so here's my equation I I'll
491:52 - call it you know I'll call my sequence a
491:55 - and you know for arithmetic and the
491:57 - subscript n so a subn is you know the
492:01 - nth number in sequence and a sub one is
492:05 - the first number so a lot of times in
492:07 - Array we we you know we talk think about
492:09 - counting you know zero is the first term
492:12 - but for these and for this particular
492:14 - math one is the n is one is the first
492:18 - number so a sub one is the first number
492:21 - and then I see the common difference
492:24 - here so I start with the first and then
492:26 - Plus D times and we see the common
492:31 - difference um times n minus one because
492:36 - I already have my first number so when n
492:38 - is two then I have a common difference
492:41 - but when n is one I have my first number
492:44 - there so let's look at an example of
492:47 - this um supposing I have just odd
492:49 - numbers so I would have a subn = 1 + 2 2
492:57 - * n
492:59 - -1 whereas I've already counted for my
493:01 - first number but then I'm adding two
493:03 - each time and so then if I generate that
493:08 - one comma then
493:12 - notice n is one so 1 - 1 is zero that's
493:17 - why then that drops out then when n is
493:19 - two for the second number then I have 2
493:23 - - 1 is 1 * 2 is 2 + 1 is 3
493:27 - and and is three for the third number so
493:30 - then 2 - 1 uh 3 - 1 is 2 * 2 is 4 + 1 is
493:36 - 5 and we know this pattern so we can see
493:39 - that you know the next one is seven
493:41 - which is the fourth number 4 - 1 is 3 *
493:45 - 2 is 6 + 1 is 7
493:48 - Etc so we can look at this and we can um
493:52 - generate every number in the sequence
493:55 - here so
493:57 - as as I'm saying it's similar to slope
493:59 - intercept y mx plus b but the difference
494:02 - is the sequence is discret meaning that
494:04 - I only want uh n to be integers it's not
494:08 - continuous where n can like on the graph
494:11 - can be any decimal in between I have one
494:14 - I have two I don't have any the numbers
494:16 - in between one and two so I can generate
494:19 - this sequence here now what I can do
494:22 - then if that's the sequence my series is
494:26 - I'm just adding
494:28 - them and that's that's the difference
494:31 - between a sequence and a series if I
494:33 - just add them
494:34 - up and what we find is for various
494:39 - sequences or SE or series there's some
494:42 - cool patterns to adding them up so
494:45 - certainly for this one I can add them
494:47 - and you know I could um we'll look at
494:51 - the code in in a little bit and how we
494:53 - can uh run through a loop and just add
494:56 - them you know if if I have code at my
494:58 - disposal that's probably what I'm going
495:00 - to do because setting up a simple Loop
495:02 - is pretty easy but then I could there
495:05 - there's a couple other ways I can do it
495:07 - let's talk about the notation of this
495:09 - first so if I have the
495:14 - sum then I'm going to say that the sum
495:18 - in my specific case
495:21 - here is going to
495:25 - be capital
495:28 - Sigma for sum and then I'm going to have
495:31 - the sum of this as n goes from one to
495:37 - and I can pick something I you know I
495:39 - can pick um you know four let's say
495:42 - let's say we ended it
495:44 - here so there we go so this is the math
495:49 - notation of essentially a loop I'm going
495:52 - to you know what's the sum of this as n
495:55 - goes from 1 to four so I plug in again n
495:57 - is one then n is two then n is three
495:59 - then n is four generate my numbers and
496:01 - then add them up there we go so we we
496:06 - know we see you know we can make this
496:08 - but supposing I had the
496:12 - numbers one to
496:15 - 100 so then I would have all these I'm
496:19 - going to stop this plus um and then if n
496:23 - is 100 minus one is 9 9 * 2 is 198 so
496:29 - then plus one is
496:32 - 199 that would be my last
496:35 - term so how could I do this well
496:38 - certainly again if I have code I'm just
496:40 - I might just like create a loop and
496:43 - that's kind of how we're looking in this
496:45 - course like the difference if I have you
496:47 - know code at my disposal or am I
496:49 - crunching the numbers on paper but uh
496:52 - friedrick gal figured out this
496:55 - interesting pattern here that so what's
496:59 - 1 +
497:01 - 199 is 200 is
497:05 - 200 but then my previous number before
497:08 - that is going to be
497:10 - 197 because you know all the odd numbers
497:13 - so 197 + 3 also 200 and if we keep
497:19 - working backwards in there the one
497:21 - before that would be 195 + 5 is 200
497:27 - and so in summing this up we have this
497:31 - interesting pattern here that anytime
497:34 - I'm summing up an arithmetic series it's
497:37 - always going to be the
497:42 - first plus the
497:45 - last and then remember I'm pairing them
497:47 - up so it's that
497:49 - times n over
497:51 - two so that's the sum of any arithmetic
497:55 - series and what's cool is as we get into
497:58 - these Series so we get the idea we can
498:00 - you know generate a sequence we can find
498:04 - any number in that sequence we can sum
498:07 - up that sequence which would be a series
498:08 - I can sum it up and then for a lot of
498:10 - things um we can find formulas to sum
498:15 - this
498:16 - up and having you know your brain paper
498:21 - code all at your disposal different
498:24 - situations you you see which one ends up
498:27 - being the you know the better you know
498:29 - which one's a better solution uh
498:32 - geometric is the other one and geometric
498:35 - series is well sequence or series is
498:39 - when we're multiplying something each
498:41 - time to get the next number and here's
498:43 - our formula I'll call it g g so G subn
498:47 - for any number G sub one is the first
498:49 - term and then R for the common ratio
498:52 - since we're multiplying so it's R to the
498:55 - exponent n minus one so that's how we
498:58 - would generate each term and let's you
499:01 - know come up with one you know let's say
499:03 - we have G subn equal let's say
499:07 - 3 + 2 to the
499:11 - nus1 just you know a simple example here
499:14 - so my first term would be three and then
499:19 - times two because you know when n is one
499:22 - then that drops out so 3 * 2 is 6
499:27 - and then when n is three for the third
499:29 - term 3 - 1 is 2 * 2 is 4 um and 3 * 4 is
499:36 - 12 even if I and if I was counting in
499:39 - individually time 2 * 2 and then I'll do
499:43 - times two again since I know that's the
499:45 - pattern 24 and then we can
499:48 - continue so there we go so we have our
499:51 - geometric series and if I was going to
499:55 - that's a sequence if I just have this so
499:59 - then I can just switch this out
500:02 - to you know be a series if I wanted to
500:06 - and if I wanted to write the formula you
500:10 - know saying that I'm summing this up so
500:12 - then it would be again Greek letter
500:14 - Sigma as n goes from one in this case
500:18 - we'll just say 1 to four here we go
500:23 - so there's our geometric series and and
500:27 - you know we see the similarities there
500:30 - is also if I was going to sum this up if
500:32 - I'm writing code I'm probably going to
500:33 - write a loop but I would uh you know
500:37 - there is also a formula for this I feel
500:40 - like it's not as intuitive as the
500:41 - arithmetic but the sum in this case is
500:46 - going to be if we call a the first term
500:49 - a * R to the
500:53 - nus1 over r
500:56 - minus one kind of an interesting uh sum
501:01 - here though it works and that becomes
501:05 - the sum if I just wanted to uh generate
501:10 - it this way and sometimes that connects
501:12 - with some things as we'll see with um s
501:15 - and cosine when we have an interesting
501:17 - formula for
501:20 - generating a sequence um sometimes
501:23 - that's useful in other places so we we
501:26 - kind of want to have all these different
501:27 - tools available to us whether we use a
501:30 - loop or use a formula or you know just
501:33 - use our brain and do do the math that
501:35 - way we want to have these different
501:36 - things at our disposal so let's look at
501:38 - one more uh one one more sequence
501:43 - here so another type of sequence or
501:47 - series is recursive and with these we
501:51 - really can't generate um an equation
501:55 - like we did before because recursive
501:57 - means it depends on what came right
501:59 - before and one of them is the Fibonacci
502:03 - sequence so you know we're all familiar
502:06 - with this you know 1 1 2 3 5 Etc because
502:14 - how do we get this it's you know
502:17 - understood zero begin so then I have a
502:19 - one and then this one is 1+ 0 and then
502:24 - this two is 1 + 1 this three is 2 + 1
502:27 - we're always adding the two previous
502:29 - numbers so as a formula it really is a
502:35 - subn equal a sub
502:39 - nus1 plus a subn minus
502:44 - 2 and you see that's recursive I need to
502:48 - know the two previous numbers to get
502:50 - that current number
502:53 - and it builds upon that so I can't just
502:56 - jump up what's the 50th term so this is
502:59 - what one of our other types of of
503:02 - sequences um getting into the code
503:04 - probably uh more likely something we
503:07 - would do with a loop because I can
503:09 - easily build that up quickly you know uh
503:12 - processors are quick so you know this is
503:15 - recursive and that Fibonacci Sequence
503:18 - you know why why does it show up
503:20 - everywhere this recursive sequence it's
503:23 - because the cumulative effects of things
503:25 - growing in nature
503:27 - adding and then the next thing is you
503:29 - know adding on to the previous two so um
503:34 - you know shells or things and like for
503:37 - example if I had you know the area of
503:41 - this Square it's one by one so the
503:44 - dimensions of this square is one by one
503:47 - so then if I put another Square so then
503:51 - this next one is 2x
503:53 - two and you see then this next one is
503:57 - 3x3 because it adds that one from before
504:01 - and then that two and then so now that
504:04 - was three and so then this next one is 5
504:08 - by five and then this next one would be
504:11 - you know five 6 7 8 because that's the
504:17 - eight so then this one would be 8 by 8
504:20 - and you know just with squares we can
504:22 - see how it builds that each of these are
504:24 - squares building upon
504:27 - um you know each side is the measure of
504:30 - the two previous sides pretty cool and
504:33 - then the Fibonacci spiral once we build
504:36 - this then we can just take a curved line
504:39 - you know imagine this you know 1/4 of a
504:42 - circle so if this was the center a
504:44 - curved line from that corner to that
504:48 - corner and then a curved line from that
504:51 - corner to that corner and then in each
504:54 - Square you know I'm taking a curved line
504:58 - from corner to corner and then a curved
505:00 - line from corner to corner and a curved
505:04 - line from corner to corner and a curve
505:06 - line from corner to
505:08 - corner hopefully my drawing isn't too
505:11 - bad but that's where we get the the
505:13 - spiral and that's where we get the
505:14 - recursive and that's sequence and series
505:18 - and that's where we get the you know
505:19 - this cumulative growth in nature and
505:21 - then we get this spiral so our goal is
505:24 - to build upon things and your knowledge
505:27 - of math and algorithms becomes
505:30 - cumulative
505:32 - growth so let's take a look at how we
505:34 - can do some of this stuff in code here's
505:36 - how to generate sequences and series
505:39 - with code and as we were saying we'll
505:42 - Loop through it um we'll start with an
505:44 - arithmetic sequence I just put as a
505:46 - comment that you know you could Define
505:49 - your sequence just so it's there for
505:51 - your own notes as a comment and here I I
505:54 - split it up um sequence what are we
505:57 - going to do we're going to create a an
506:00 - empty array or list and then as we Loop
506:05 - through um I just decided to make it
506:07 - range you know 11 as we Ro Loop through
506:10 - I'm going to generate each element store
506:14 - it as this variable next and then append
506:16 - it to the array and notice I usually
506:21 - will have a starting point
506:24 - um and then it's always always times n
506:27 - minus one mathematically
506:30 - because the first element is element
506:32 - number one but since in Python our our
506:36 - ranges begin with zero unless I tell it
506:38 - otherwise so I don't have to put that n
506:41 - minus one because it's already going to
506:42 - start with zero there we go and then
506:45 - we'll print that
506:47 - out I'm also going to do the series here
506:49 - we'll print this all out together so
506:51 - with the series I have a sum
506:54 - variable start at zero and then as we go
506:56 - through our range um also generate each
507:00 - next element and then I'm going to add
507:01 - it to my sum variable so then we can
507:05 - print that out so you know just a simple
507:08 - sequence here and what do we have we're
507:11 - going to generate starting with three
507:14 - and then we're going to do the odd odd
507:16 - numbers because it's two every time so
507:20 - there we go and then the sum you know
507:22 - for this particular instance
507:24 - here and we'll do this with a geometric
507:28 - series too notice how similar you know
507:31 - start out with your empty array you know
507:34 - comment up here if you want and then you
507:39 - know generate the next element a pendant
507:43 - to the empty array and at the end we'll
507:46 - print it out same with the series start
507:49 - out with a sum variable Loop through
507:52 - generate the next one add it to the
507:55 - existing s
507:56 - um there we
507:59 - go and we see so we can see the answer
508:03 - and the sum now I'll do one more and
508:08 - this time notice you were probably
508:09 - thinking hey I should put them both in
508:11 - the same Loop so I did that on this one
508:14 - so Su variable starting at zero empty
508:17 - array for the series and now for this
508:21 - one I just picked a range of 50 um and
508:25 - I'm I'm going to do a harmonic series 1
508:27 - over two to an exponent so you see 1
508:32 - over 2 to the A and I still kept this as
508:36 - a equals 0
508:38 - um as the beginning so my first element
508:42 - we'll we'll have that and um that will
508:47 - end up being the element will be one and
508:49 - we'll see that here so then my next
508:53 - element appended to this
508:57 - series
508:59 - array add that to the existing sum and
509:02 - we're going to print out the series
509:03 - we're going to print out the sum and
509:05 - there we go so remember this is going to
509:08 - be one one 1/2 1/4 but this will put
509:13 - them out as decimals and the sum we see
509:17 - you know we remember mathematically then
509:21 - looping this you know the sum of this as
509:25 - the number of elements approaches
509:28 - Infinity it this sum approaches two
509:30 - because it converges these converge and
509:34 - um you know so I can have even more and
509:37 - it's just really going to approach two
509:40 - so you know that's the sum as and
509:43 - approaches Infinity but I only went up
509:45 - to 50 and we can still already see how
509:49 - close that gets to two so I could Loop
509:52 - this instead of 50 I can make it 100 I
509:54 - can make it a million and we're still
509:56 - going to be you know just about it two
509:59 - um you know just more nines there we go
510:03 - so we see the sum of the harmonic series
510:06 - you know as our other example now we
510:09 - also might have mentioned Fibonacci and
510:10 - the recursive sequences so I just want
510:13 - to point this out there's this online
510:17 - encyclopedia of integer sequences how
510:20 - cool is that so what you can do is you
510:24 - can type in you can type in the name of
510:26 - the sequence if you happen to know it
510:28 - and you can uh or or you can type in the
510:32 - first few if you type in the first few
510:35 - uh one of their tips for searching is
510:39 - you don't put the first number in
510:41 - sometimes people disagree over where the
510:43 - sequ particular sequence starts so the
510:45 - first one or two elements you don't have
510:47 - to put in and then you put in at least
510:49 - six more than that you probably don't
510:51 - need to so you know Skip the first
510:54 - number or two put in about six elements
510:57 - and search it up so that's what they you
510:59 - know they put out an example there I'm
511:01 - going to hit enter and you see it gives
511:03 - you this um that particular sequence is
511:07 - the number of trees with n unlabeled
511:11 - nodes kind of cool as well as some
511:14 - comments some references history and
511:17 - other links so you you can do this you
511:19 - can just type in so you know for
511:22 - Fibonacci I'm going to skip the first
511:23 - one I'm just going to put one two
511:26 - uh 3 five 8 and that's probably
511:32 - enough hit enter and look at that it
511:35 - tells me that it's the Fibonacci
511:38 - numbers illustrates this and you know
511:42 - all the other notes including um some
511:45 - other references and mentions of other
511:48 - people that came up with a similar
511:50 - sequence before Fibonacci so really cool
511:54 - stuff and and here we go just to expand
511:58 - you know beyond any of the sequences you
512:00 - might know and remember these are
512:02 - sequences but to make them a series all
512:04 - you have to do is just add them so once
512:06 - you have an equation to generate that
512:08 - you know you can add them up all right
512:10 - there we go and now we're going to go on
512:12 - to look at using sequences and series to
512:17 - generate other numbers um especially
512:19 - series uh to generate numbers like
512:21 - Oilers number e um even s and cosine
512:24 - there's it's amazing in how many
512:27 - different uh numbers you can get from
512:32 - like you know there's a sequence or
512:33 - series definition to that number so
512:35 - we're going to take a look at that so
512:37 - that's what's next let's take a look at
512:40 - e Oiler number and how we get this by
512:43 - definition there's actually a couple
512:44 - ways to get this but this is possibly
512:48 - the go-to so e um equals the sum so
512:53 - let's look at this notation here this
512:56 - capital Sigma Greek letter Sigma is for
512:59 - summation so this is the math notation
513:02 - for doing a loop and adding every time
513:05 - so I'm going to say n equals zero at the
513:08 - beginning and then so n goes from zero
513:12 - to Infinity so that's how I Define my
513:14 - Loop here so I'm going to say n goes
513:18 - from zero to infinity and then every
513:21 - iteration I'm going to add this all up
513:24 - and so it's the sum of this 1/ n
513:27 - factorial and remember factorial is that
513:30 - number times every number less than that
513:34 - so let's work this out here
513:37 - so then 1 over Z
513:42 - factorial and so this is what we're
513:44 - doing we're summing this up plus 1 over
513:46 - 1 factorial + 1 over 2 factorial + 1
513:52 - over 3
513:54 - factorial and and it goes on forever
513:57 - till
513:58 - Infinity so this is how we get e but
514:03 - let's let's look at these values here
514:04 - zero factorial it seems weird that you
514:07 - have zero in the denominator and yet I'm
514:09 - also saying multiply that times
514:12 - everything wouldn't that zero out but by
514:15 - definition zero factorial is one because
514:20 - factorial comes into play really in
514:22 - situations where I'm calculating
514:24 - probability of things and so if I have
514:27 - no if I have no things how many ways can
514:30 - I arrange that I only have one way which
514:33 - is to do nothing so it's kind of weird
514:36 - you know um sometimes math explains um
514:40 - some other uh logic or written um things
514:45 - and in this case we need some verbal
514:46 - explanation to explain the math but
514:50 - that's that's why zero factorial by
514:51 - definition is one because if I have no
514:54 - things I only have one op option which
514:56 - is I can't arrange them so one factorial
514:59 - is one two remember so 2 * 1 which is
515:03 - just two 3 is then 3 * 2 * 1 and then it
515:08 - would go on four four factorial is 4 * 3
515:10 - * 2 * one but even looking at this we're
515:14 - going to get this one over one so that's
515:16 - one that's one
515:19 - again that's 12 3 factorial so then
515:24 - that's one 16
515:27 - and that would be four factorial would
515:29 - be 4 * 3 is 12 * 2 is
515:34 - 24 and again that would
515:36 - continue this this is almost enough for
515:39 - us to start seeing that e remember it's
515:43 - 2.71828 1828 well
515:49 - 25 6 and2 you know we're we're getting
515:53 - just that part we we're almost to
515:56 - 2.7 and then you see we keep adding
515:59 - smaller and smaller amounts but it gets
516:01 - up to that you know just over
516:04 - 2.7 and we'll see with the code that if
516:08 - we Loop through
516:10 - this um it might even take like you know
516:13 - 10 11 times that's you know that's
516:16 - enough to get us pretty a few decimal
516:19 - places you know correct to e as we know
516:21 - it um so that's pretty cool but that
516:24 - this is the factorial definition of e so
516:27 - then you know then that's what we get
516:29 - you know all this then will eventually
516:32 - equal
516:34 - [Music]
516:35 - 2.71828
516:38 - 1828 and after that the next number is
516:41 - of one but the pattern kind of breaks
516:43 - down a little bit so it doesn't exactly
516:46 - repeat those four digits so there we go
516:49 - summation of 1/ n factorial as n goes
516:53 - from 0 to Infinity cool
516:56 - let's take a look at how we can do this
516:57 - with the code here's how to generate
517:01 - Oilers number e but using the summation
517:05 - using the the series so the series
517:08 - remember it's the sum of one over um n
517:13 - factorial so I'm just going to give this
517:15 - range here up to 50 even though the
517:19 - official definition is up to Infinity 50
517:22 - will Almost Do it for us um but then
517:25 - I'll show you
517:25 - so I'm going to just generate the sum
517:28 - and then we're going to keep adding to
517:29 - it each time we go through the loop
517:32 - we're going to add to one
517:35 - over math. factorial of a and then after
517:39 - we go through that Loop I'm going to
517:40 - print that out and then also print out
517:43 - just the general math. and we see how
517:46 - close we
517:48 - are so look at this even up to 50 we're
517:53 - close down to this many decimal places
517:55 - and it even rounds so that's why that's
517:58 - why I I stopped at 50 and you see we can
518:02 - generate e with this sum uh that this
518:05 - really is you know one of the ways you
518:07 - know we get e and now then we're going
518:11 - to connect this with s and cosine to
518:15 - build up to a a big reveal
518:18 - here so let's look at the series
518:20 - definitions of e to the X so another way
518:25 - way to to get e so it's always uh x uh x
518:30 - e to the X so this is not just e it's e
518:33 - to an exponent so this would be x to the
518:36 - 0 over 0 factorial which works out to
518:39 - One X to the 1st over 1 factorial plus x
518:43 - to the 2 over 2 factorial plus X the 3r
518:46 - over 3 factorial and that keeps going so
518:49 - each time you know the numerator X to an
518:52 - exponent then that exponent factorial so
518:55 - so as you can see even though the
518:56 - numerator is getting bigger the
518:58 - denominator factorial is also getting
519:00 - bigger and we're adding this tiny tiny
519:04 - amount uh we're we're adding a different
519:07 - amount each time and so uh that's how we
519:11 - generate e to the X you know how what's
519:14 - X and then you know however many
519:16 - exponents so we're going to connect this
519:20 - with s and cosine because first of all
519:22 - you might notice how similar they are um
519:26 - cosine as the even exponent so it starts
519:28 - out and I wrote it this way z x 0 over 0
519:31 - factorial but then we alternate minus X
519:36 - the 2 over 2 factorial plus x 4 over 4
519:39 - factorial minus again and then that
519:42 - continues that
519:43 - pattern and S similar to cosine but we
519:48 - have the odd exponents so we don't have
519:50 - x 0 that's even X 1st over 1 factorial -
519:54 - x 3r 3 factorial plus X 5th 5 factorial
519:59 - and we go on like this so these are
520:02 - interesting in of themselves and we have
520:05 - ways that we can you know use summation
520:07 - notation there's you know a formula for
520:09 - this but I wanted to write it out this
520:11 - way so you can see this and we're going
520:13 - to look at how this connects to e to the
520:16 - X because I want to look at what if we
520:20 - have e to the
520:23 - IX x 0 0 so that would still be 1 IX
520:28 - over 1 factorial which is you know 1 I'm
520:33 - actually going to keep that denominator
520:35 - because that'll be important and then
520:38 - the next
520:39 - one X2 but then if it's
520:42 - IX then X2 so that becomes so we still
520:46 - have the we still have the X2 but the i^
520:50 - S becomes
520:52 - ne1 which changes that sign
520:57 - and then we go to x to the
521:00 - 3 so we have we still have x to the
521:06 - 3 but then I to the 3 is NE I the 3 is
521:17 - I and still the same
521:20 - denominator and then we have the next
521:23 - one to the four fourth in just doing
521:27 - this a few times I want you to notice
521:29 - then that the
521:32 - I over one factorial
521:37 - um and then so that is a lot like sign
521:40 - but I but I'm multiplying by I this time
521:44 - and then minus x^2 that's a lot like
521:47 - cosine
521:49 - here this next
521:52 - termus i x 3 3 a lot like sign but I'm
521:55 - multiplying by I this one a lot like
521:59 - cosine the next one's going to be a lot
522:00 - like sign but multiplying by I so it
522:05 - ends up it's threaded
522:08 - together because instead of even out
522:10 - even out I have all of them but each one
522:13 - of them lines up with
522:16 - sign but multiplied by I so what we
522:21 - really get is e to the iix
522:26 - equals uh the cosine of
522:32 - x plus I * the S of
522:37 - X and
522:40 - that's the
522:43 - formula um that Robert coats you know
522:47 - many years
522:48 - ago uh demonstrated that when we look at
522:53 - the series version series definitions of
522:56 - these it's really cool how it lines up
523:00 - when we have e to the IX and if it's e
523:03 - to the iix doing that substitution it
523:07 - works out that the cosine ends up being
523:10 - the same and then the sign it's just
523:14 - like the sign but terms but multiplied
523:17 - by I each time so we can just do that
523:18 - out here and that's what we get e to the
523:21 - ixal cosine of x plus I * sin of x
523:26 - and there's some other cool patterns we
523:27 - can do but I wanted to talk about this
523:30 - as it leads up to our you know e to the
523:33 - I pi equals ne1
523:36 - explanation all right so let's take a
523:38 - look at in the code doing things like
523:41 - this with values and you know showing
523:44 - that you know this does get to cosine
523:46 - this does get to S and how they how they
523:49 - connect so let's take a look at the code
523:51 - so here's how to generate s and cosine
523:54 - using a series and another interesting
523:58 - thing we can do with the series and also
524:02 - combined with e we're going to lead up
524:03 - to u a big reveal
524:06 - here so we looked at the formulas um how
524:11 - cosine we'll do that one first um uh I
524:16 - how we generate cosine with it's all the
524:19 - even numbers and zero is even um the
524:23 - numerator is X to that X exponent and
524:25 - then the denominator is that number
524:28 - factorial so what we're going to do uh
524:32 - have my
524:33 - sum uh variable zero I'm going to use x
524:37 - as the angle remember in radians and for
524:40 - our demonstration
524:42 - here that really does need to be an
524:44 - integer because we're going to end up
524:45 - using that in
524:47 - factorial okay and I created this other
524:50 - variable PN positive
524:52 - negative and I'm going to start it out
524:54 - at negative
524:55 - one so here if I have this
525:00 - range 50 um and uh that that might be
525:06 - enough we might even increase it to 100
525:08 - this officially would go be be the sum
525:10 - up to
525:11 - Infinity but 50 to 100 sometimes you
525:14 - you'll see how many decimal places it
525:16 - goes to and that will be enough to
525:18 - illustrate this
525:20 - so remember this pattern goes for the
525:22 - even exponent so I'm going to start out
525:24 - with this
525:25 - if if our a
525:29 - um uh is even so a modulus 2 if that's
525:34 - zero and then each
525:37 - time I'm going to multiply by negative 1
525:40 - because again that's the pattern become
525:43 - you know one's positive one's
525:45 - negative and then I'm going to keep
525:47 - adding to the sum here so the sum
525:50 - plus positive or negative times x to
525:55 - that
525:56 - exponent and then the denominator is
525:59 - math factorial so there we go so it goes
526:02 - through all the even ones there's
526:05 - another way to do this with count
526:06 - counting through each one and just
526:08 - multiplying some of these by two that
526:10 - you know that works also I decided to do
526:12 - it this
526:13 - way and we're going to print out cosine
526:16 - and we're also going to print out just
526:19 - the normal math. cosine so we can see
526:22 - the comparison
526:25 - and we'll do the same thing for sign
526:28 - I'll do this all before I run it
526:31 - so very similar formulas so I'm going to
526:34 - sum that up start out with that variable
526:39 - and then again my angle X is one there
526:43 - we go um I can make these different X
526:47 - values because it's going to overwrite
526:49 - it each time so that's
526:52 - fine um I can make it two just to
526:55 - compare and see we have that same range
527:00 - now here I want the range to start at
527:03 - one because if I don't have a number
527:05 - there it's going to start at zero but
527:06 - for sign remember it goes through all
527:08 - the odd numbers so I want it to start at
527:10 - one and then modulus if statement if
527:13 - it's not equal to zero that's what then
527:15 - I want to
527:17 - continue same thing same pattern it
527:20 - alternates positive negative and then
527:23 - here's what once we have that
527:25 - established this part of the formula is
527:27 - actually very similar well it
527:29 - this and um new line and I'm going to
527:33 - print out the sign again that sign and
527:36 - then um just calculating it and we'll
527:38 - see how close we are so look at the
527:41 - cosine using that we pretty
527:46 - close um down to that many decimal
527:50 - places I I you know if if it was you
527:53 - know anywhere from further away maybe
527:55 - these last two numbers changed I would I
527:57 - would increase and loop through it more
527:59 - and you would see it you know it would
528:01 - match up but yeah it really officially
528:03 - goes to Infinity but looping through 50
528:05 - times is actually
528:07 - enough so we see that that that that
528:10 - works that we actually can generate s
528:12 - and cosine based on
528:15 - summation of a
528:17 - series all right so pretty cool and then
528:20 - we're going to look at combining that
528:21 - with E and some of the other cool
528:24 - patterns that follow so we're going to
528:27 - look at e to the I pial -1 and why this
528:31 - is such a beautiful equation
528:34 - so it connects with the real and
528:36 - imaginary axis if we are graphing notice
528:39 - I have I which is the imaginary number
528:41 - Square < TK of1 we can graph these and
528:45 - remember the real axis is the horizontal
528:48 - so it's not X and Y that horizontal is
528:50 - real and the vertical is the imaginary
528:53 - axis so
528:55 - when I plot a point there if I I would
528:59 - really have it as whatever real part
529:03 - that corresponds to the horizontal so I
529:06 - count over from the origin and then I
529:09 - times something the imaginary part you
529:12 - know then that would be you know the
529:15 - vertical point so if I have you know
529:20 - cosine of x plus I S of X and remember
529:23 - you know it's this complex number so
529:26 - it's real plus the imaginary part but we
529:28 - would graph that as you know if it were
529:32 - on the xy-coordinate plane cosine X
529:35 - comma sin of X or you know that'd be
529:39 - cosine of theta or something like that
529:41 - so we see that you know writing it like
529:44 - this corresponds to plotting this point
529:46 - cosine s the real part the imaginary
529:48 - part what's cool is that this guy um
529:53 - Robert coats in like 174 he figured this
529:57 - out that e to thex equals this cosine of
530:02 - x plus I sin of X now when we get into
530:06 - the code we're going to look at all
530:08 - different ways that we can now
530:10 - demonstrate that that's true I'll show
530:12 - you like loops and see all these
530:13 - different values that for any value of x
530:15 - this works you know they come out the
530:17 - exact same complex number to many
530:20 - decimal places but it's kind of cool he
530:22 - worked this out you know that many years
530:24 - ago
530:25 - that e to the iix equals this so what
530:29 - that means is
530:32 - that I can plot this point and I can
530:36 - actually just write e to the iix as the
530:41 - coordinate of that point and it kind of
530:44 - just boggles the mind because because of
530:46 - the way we write the notation here as
530:49 - you know this complex number and then
530:51 - that's how I plot the point the real
530:52 - part the complex part plot the point
530:55 - which is really cool so Pythagorean
530:58 - theorem then also applies here because
531:01 - the you know in this case the horizontal
531:04 - is still cosine the vertical is still s
531:08 - so sin square plus cosine squared is one
531:11 - and then I get the radius one just like
531:13 - our unit circle so when we look at this
531:17 - I'm going to throw one more thing here
531:19 - in then since we've established that the
531:21 - radius is one if I think of polar
531:23 - coordinates
531:25 - so polar coordinates so we go from XY to
531:29 - real and imaginary polar they're not
531:32 - rectangular the coordinates there are R
531:36 - Theta so Theta remember is the angle so
531:41 - R is the radius from the origin so how
531:44 - far out am I going from the radius and
531:46 - then what's the angle um a lot of you
531:48 - know air traffic controllers or
531:50 - satellite uh dishes that like they'll
531:53 - use polar coordinates because that's
531:55 - what I want how far out am I and then
531:56 - what's the
531:57 - angle well
532:00 - then in this case if the radius is one
532:04 - and then the angle is Theta or I'll
532:07 - continue calling it X so therefore
532:11 - 1X and that is you know e to the I Pi or
532:17 - e to the
532:18 - IX just kind of cool how that works out
532:22 - everywhere so
532:25 - that's kind of why people talk about
532:26 - this being this beautiful equation e e
532:29 - the now let's talk about this exact
532:31 - value so if I have this equation here
532:35 - I'm just going to get this out of the
532:36 - way but it's just one more connection
532:38 - here and then if I talk about I Pi so
532:44 - this works for all those different
532:45 - values but some of them you know are
532:48 - more elegant Solutions than others but
532:51 - if this is pi so if I have e to the I pi
532:54 - Pi so then that's the cosine of
532:58 - pi plus I * the S of
533:04 - Pi and remember Pi radians you're going
533:09 - around so the coordinate here the
533:13 - cosine of pi is -1 and then the S of Pi
533:18 - is
533:20 - zero so e to the I pi
533:25 - that's where we get e to the I pi equals
533:28 - so we build upon this established uh
533:31 - equation here and then for this value
533:35 - when I plug in that the angle is pi
533:37 - radians e to the I pi equals -1 you know
533:41 - plus zero if you want to be official
533:43 - it's just really a cool thing because to
533:47 - fully appreciate the beauty of that
533:49 - besides the fact that it brings together
533:50 - all these you know e i pi1 all but the
533:55 - explanation of it brings in s and cosine
533:58 - and complex numbers and graphing on the
534:01 - imaginary axis and you know verifying it
534:04 - with Pythagorean identity and connection
534:07 - with polar coordinates it's just really
534:09 - amazing that as you've been going
534:12 - through math up to this point you can
534:15 - kind of bring it all together you needed
534:18 - to know all the things you've learned up
534:20 - to this point to fully appreciate oh it
534:23 - all comes together in this equation but
534:25 - that's just what why it's cool graphing
534:27 - on the you know this equation and then
534:29 - graphing on the imaginary axis and
534:32 - plugging in that particular value get
534:35 - you e to the I pi equals ne1 so when we
534:39 - look at the code what I'm going to go
534:41 - through is also look at other ways that
534:43 - we can verify this with code and you
534:47 - know some other uh sequences so let's
534:51 - take a look at that so now we're going
534:53 - to show this with imaginary with with
534:55 - code that we're going to import math and
534:59 - our code cmath for the complex and what
535:03 - we're going to do I have two variables
535:05 - here I probably could have done it with
535:06 - one but a and then X so I use that one
535:11 - just for complex so if a is one so then
535:17 - I have you know my real part is zero and
535:21 - it's one I so that makes this value
535:24 - comp is I so that's I I feel like that's
535:28 - kind of the best way to do it and now I
535:30 - have that's I um this is I Pi which I'm
535:33 - going to deal with later but notice my
535:36 - complex you know the real part is zero
535:39 - and the complex part would be math. Pi
535:41 - so the answer to that would be I Pi
535:45 - stored as this variable so anyway so
535:49 - this is how we could show a complex
535:51 - number so I'm just going to print out
535:53 - the complex number show you and then e
535:57 - to the
535:58 - iix
536:01 - so notice yes I can do math. but I'm
536:04 - going to do C.E because we want our
536:06 - answer to be complex all right so C.E to
536:10 - the exponent
536:11 - comp so this is to the
536:14 - exponent I so this is going to be e to
536:17 - the I all right and
536:22 - then these I have have math. cosine of x
536:27 - and my complex number I so I have I
536:32 - times cth times the S of X and I split
536:36 - this up just to if you copy this code
536:38 - you can Tinker with this and change some
536:40 - things so what we were showing on the
536:44 - Whiteboard was that e to the
536:47 - iix does equal cosine of x plus I sin of
536:52 - X that's the idea so I'm going to print
536:56 - out and show you there's e to the iix
537:00 - and I'm going to show you that cosine of
537:02 - x plus I sin of X is actually the same
537:06 - value and along the way we're learning
537:08 - how to work with and use imaginary
537:10 - number so there's my complex number
537:12 - python tends to Output yes we know it's
537:14 - I but python uses J for illustrating
537:19 - that this is a complex this is an
537:21 - imaginary number so there's my complex
537:24 - number so that one J is the python way
537:28 - of saying that's I the imaginary number
537:31 - so e to the iix we see does give us this
537:36 - complex number here like that's it if I
537:39 - have e to the IX that's what I get and
537:43 - notice cosine of x plus I sin of X is
537:47 - exactly that same complex number pretty
537:51 - cool so that's what we want show we can
537:54 - see it in the factoring way we can see
537:56 - it with sequences and with series and we
538:01 - can see it with code that we get e to
538:04 - the iix this does work and showing that
538:09 - Robert coach was right in 1714 we're
538:12 - also going to Loop through this with all
538:13 - different values but it shows that e to
538:14 - the iix equals cosine of x plus I sin of
538:18 - X really cool that that way in the
538:21 - imaginary graphing the real axis and the
538:25 - imaginary axis that this e to the iix
538:28 - ends up whatever X is it ends up being
538:30 - this imaginary this complex number that
538:34 - works out to this and so that's what
538:36 - we're going to do here we're just going
538:37 - to Loop through this and again just a
538:39 - way to represent I so I just didn't use
538:43 - another variable I just said okay yeah
538:45 - 01 that's my complex number and in my
538:49 - range I called it 63 cuz you know my
538:52 - first thing is my angle is going to be
538:54 - times that so it's going to go up to
538:58 - 6.28 you know one complete cycle in
539:01 - radians around the
539:03 - circle and I have in mind the left and
539:06 - right of an equal sign so the right side
539:08 - is going to be um cosine of a plus I sin
539:12 - of a and then the left side is going to
539:14 - be e to that uhome is my complex number
539:18 - but it's really I time a so whatever
539:22 - that angle is then I have e to the I a
539:26 - equals cosine of a plus I sin of a and
539:30 - that's what we're going to do and you
539:33 - know just in case I I threw this in if
539:36 - in an if statement just just in case you
539:38 - don't want to look at all these only if
539:41 - these are equal what print out on two
539:44 - lines because we'll see these are a lot
539:45 - of decimal places it's going to round
539:49 - you know that uh the uh um the angle
539:56 - round it to one decimal place and then
539:58 - give you the E value and then the left
540:01 - side and then it's also on the next line
540:04 - again because it's going to be a lot of
540:06 - decimal places going to print out the
540:07 - exact value so when we run
540:11 - this this you know Scrolls down here
540:16 - there's I
540:19 - have each of these angles in radians you
540:24 - see the E value is 1 plus there you
540:28 - because when it's zero you know um we're
540:31 - on the real axis but no imaginary
540:33 - numbers which would be equivalent to the
540:35 - Y value and then the cosine sign would
540:38 - be
540:39 - one plus
540:41 - 0 there we go and we see for the next
540:46 - angle the E value is exactly this
540:49 - complex number but cosine s is exactly
540:53 - the same complex number down to all
540:55 - those decimal places and this is just a
540:58 - way of showing you know uh Robert coats
541:02 - worked this out uh you know on a
541:05 - chalkboard probably in uh but definitely
541:08 - or paper in 1774 but here just showing
541:12 - you that yes we calculating this through
541:15 - all these decimal places these are going
541:17 - to be the same that at every
541:21 - point then we get e to that exponent
541:26 - equals cosine plus I and if we go
541:30 - through all this so this leads us all up
541:33 - to the grand finale showing that e to
541:36 - the I pi equals
541:39 - -1 so all these see and and we can see
541:43 - how all this fits together really cool
541:46 - um all these answers
541:49 - um e to the I pi equals ne1 is nice and
541:52 - elegant if I said
541:54 - e to the you know um 6 radians um time I
542:02 - yeah I don't know um equals this
542:04 - number you know you might say okay yeah
542:07 - all right I believe you but it's not
542:08 - that elegant of a
542:10 - solution here we're going to show that
542:13 - you know all it works for all those but
542:16 - what I'm going to do
542:17 - is my variable I Pi is going to be this
542:22 - remember the complex of
542:24 - it's math. Pi that's going to be the the
542:27 - imaginary part so this is is I pi and
542:32 - then so I have I'm going to print out
542:34 - that exact value e to the I
542:36 - Pi um but then what I'm going to do is
542:39 - that's my complex number so I'm going to
542:42 - um you know this answer is e to the I Pi
542:47 - but I want the real part so I want so
542:50 - notice I have my complex variable C
542:53 - answer
542:54 - and then I want the real part so it's C
542:56 - answer. real and then I want the
542:58 - imaginary part now I know this real side
543:01 - you know is going to be one or negative
543:04 - one but the imaginary part it's going to
543:07 - be zero but it's not going to look like
543:09 - that it's going to be this long decimal
543:12 - that rounds to zero easily but it's
543:15 - going to look weird so I do want to
543:17 - round that imaginary part so I take that
543:20 - c.
543:21 - image and it'll round it
543:24 - so now I'm going to print c plus c IM
543:28 - match and so what we're going to have is
543:30 - yes for when it's the I Pi I'm going to
543:34 - print e to the I pi and then I'm going
543:36 - to print that real and imaginary part
543:41 - and we get e to the I pi and you see
543:44 - that's the full thing but notice it's
543:47 - exponent this is not e like what number
543:51 - this is the exponent -6
543:54 - so really we're saying that you know a
543:57 - decimal point then about 15 zeros then a
544:01 - one is where this is so that's
544:03 - essentially zero so when we rounded it's
544:06 - zero and that's what we get e to the I
544:09 - Pi if I don't round it it looks like
544:12 - this but when I round it it looks like
544:14 - this and it really shows e to the I pi
544:17 - equals
544:19 - ne1 so pretty cool and that's what makes
544:22 - this so EXC exting that it's just so
544:25 - interesting that it all comes together
544:27 - yes we see all these patterns but to
544:30 - fully appreciate all these patterns all
544:33 - these series that you know you learn
544:36 - about the the graphing the trigonometry
544:39 - the real and complex axis and how all
544:43 - that is true at each step and we see
544:47 - that it matches up but then when it
544:48 - comes down to the variable where the
544:51 - angle is pi radians it all lines up
544:54 - perfectly and it comes down to this nice
544:56 - elegant solution e to the I pi equals
545:00 - negative
545:01 - one and so there we go so we go from you
545:06 - know how many hundreds of years
545:08 - ago uh some cool patterns that people
545:11 - were discussing to more modern
545:13 - technology you know reproving that and
545:16 - just adding a a deeper Dimension to this
545:19 - that yes it's kind of cool that here's
545:21 - one more way to show this so there we go
545:25 - and and that that's a big part of what
545:27 - math is at this level is appreciating
545:29 - the elegant Solutions so that's what we
545:31 - want to be able to do we're going talk
545:33 - about probability and this really leads
545:36 - into a lot of things that we're going to
545:37 - do with uh statistics data science
545:40 - because we we can't always predict the
545:43 - future we we go on probabilities and
545:46 - what's likely to happen and the general
545:49 - probability equation is the number of
545:50 - correct options out of the number of
545:52 - possible options
545:55 - so that that's it if um you know if I'm
545:58 - thinking of a number from 1 to 10 and
546:00 - somebody has to guess they have there's
546:03 - one correct number out of 10 probability
546:05 - of them guessing is one out of 10 if um
546:09 - if I want to roll roll dice uh rolling
546:13 - one Cube um then you know whatever
546:17 - number I want to roll if I'm only
546:18 - rolling one Cube then I would have you
546:21 - know one number out of the six possible
546:24 - sides you know what that's the
546:27 - probability that I roll the number that
546:28 - I want one out of
546:30 - six so you know anytime we're always
546:33 - counting up and that's where we get into
546:35 - some of our counting rules you know how
546:37 - can I count up the number of possible
546:38 - options and then of those what are the
546:40 - ones how many am I considering correct
546:42 - options so let's go back to the rolling
546:45 - dice one out of six probability if I
546:48 - roll one but supposing I want to roll
546:50 - two and so let's let's think about like
546:53 - a 12 there's only one way to get a 12 I
546:55 - have to roll six then I have to roll a
546:57 - six so I have to roll the first one as a
547:00 - six and I have to roll the second one as
547:02 - a six and anytime it's and it's only
547:05 - correct if this happens and that happens
547:07 - then I multiply the probabilities so you
547:11 - know I roll two dice the probability of
547:13 - me rolling a a six is one out of six and
547:16 - then on the second die it's one out of
547:20 - six so I multiply them so then it would
547:23 - one out of
547:25 - 36 so if I roll two dice and I want to
547:28 - roll 12 I have a one out of 36 chance of
547:32 - rolling a
547:33 - 12 the same would be true for rolling a
547:36 - two because one in one same idea only
547:38 - one way to get it so that's how we get
547:42 - you know and I multiply the
547:44 - probabilities um this is where we can
547:47 - think about the you know lottery
547:49 - winnings um if I have uh
547:54 - a lot of the lotteries we pick you know
547:57 - um one number out of 10 and then might
548:00 - go to another bin and pick another
548:01 - number out of
548:02 - 10 and then they might go to another bin
548:05 - and pick another number out of
548:08 - 10 and so I'm only correct I only win if
548:11 - I get all three numbers I got th you
548:13 - know out of 10 I picked this correct
548:16 - number out of 10 this correct one so
548:17 - then that would be one out of a
548:20 - thousand
548:22 - and so that's the that's the probability
548:24 - of win winning just like a simple pick
548:26 - three lottery one out of a thousand and
548:30 - we see that one out of a thousand you
548:33 - probably you know I mean who knows you
548:37 - could the way the way you pick it it's
548:38 - not a guarantee that if you played it a
548:40 - thousand times you're going to win so
548:42 - that's where a lot of people you know
548:44 - spend a lot of money hoping that that
548:47 - one out of th000 you know lightning
548:48 - strikes and we get lucky but we really
548:52 - don't we really don't know
548:55 - um so
548:59 - then if it's or then I can add the
549:03 - probabilities so supposing um I'm
549:07 - rolling Dice and let's say I'm rolling
549:09 - one one one die so um let's say what's
549:13 - the probability of me rolling a five or
549:15 - a six you know you're playing a game you
549:18 - know you need a five or a six to to win
549:21 - so you know probability of rolling a
549:23 - five is still that one out of six
549:25 - because that's one
549:26 - number on the on the whole Cube and
549:29 - probability of rolling a six is also one
549:31 - out of six but I'm correct if this one
549:34 - or that one works so I would add the
549:37 - probabilities so that gives me two out
549:39 - of
549:40 - six or we could reduce it but there we
549:42 - go anytime I have that's correct if this
549:45 - or that happens then I add the
549:50 - probabilities and so the general probab
549:53 - ility we're always counting up how many
549:56 - possible options and you know number
549:59 - correct out number possible and if both
550:01 - of them have to happen then I multiply
550:02 - the probabilities if either one then I
550:05 - can add the
550:07 - probabilities and we can build upon
550:10 - these to look at other ways to calculate
550:13 - probability as it gets more complex we
550:16 - really end up having um a lot of
550:19 - different counting rules for how I can
550:21 - figure out the possible options
550:23 - that's that's kind of thing how can I
550:25 - figure out the possible options and then
550:27 - of uh you know each of these you know um
550:32 - all the different way ways we can
550:34 - combine this so we'll take a look at
550:35 - this and we'll look at how we can do
550:36 - this with
550:38 - code and here's the formula so the
550:41 - notation um big p in the middle for
550:44 - permutation so that means that order
550:46 - does
550:47 - matter and I have n on one side r on the
550:52 - other side so it's n things Tak an r at
550:54 - a time and then here's the formula n
550:56 - factorial over nus R factorial so two
551:00 - different ways to write it and you know
551:01 - you can put once you have specific
551:03 - numbers you can put that in here around
551:07 - the p and the
551:11 - formula um it's going to end up being
551:14 - pretty easy to do with code um you could
551:17 - just Define these here and just put a
551:20 - you know n equals and then overwrite
551:22 - this code and write a variable a number
551:24 - in there but I wanted to set this up as
551:26 - you know prompting for input so you
551:28 - don't even actually have to change this
551:30 - code because it's going to prompt for
551:32 - input how many things in the overall
551:33 - pool and then how many taking how many
551:36 - at a
551:37 - time and there we go and then that's
551:40 - that's what n and R are so
551:44 - um I call this P um I often do n for
551:48 - numerator D for denominator but I'm
551:50 - already using n so I made this P for
551:53 - permutation there we go so factorial and
551:57 - then the denominator the factorial of n
551:59 - minus r and
552:01 - then do that Division and then cast it
552:04 - as an
552:05 - integer so here we
552:08 - go um and the answer how many possible
552:13 - permutations so we can run this and
552:16 - see so it it it's funny that even you
552:20 - know some of the things um in the
552:22 - overall pool like let's say if I have
552:25 - like 10 things in the overall pool and
552:29 - taken you know three at a time 720
552:33 - possible
552:35 - permutations
552:37 - um there were you know that it seems
552:40 - like wow there's you know maybe you know
552:42 - an ice cream place that you know lets
552:44 - you mix up to three at a time so 10
552:47 - flavors they can say wow we have 720
552:50 - possible combin possible ice creams that
552:52 - we can give you and a lot of places do
552:55 - that they have you know only so many
552:58 - um you know a little more than 10 even
553:01 - and that number is going to be quickly
553:03 - up to a thousand and they'll say wow we
553:04 - have a thousand combinations you know
553:09 - um but that would be order does matter
553:12 - so
553:14 - um probably not good with ice cream
553:17 - because like yes you could it looks
553:19 - different the order of the Scoops but
553:21 - it'll end up getting mixed together so
553:23 - that's what leads us to combinations
553:25 - when order does not matter and this
553:28 - would be more appropriate to things like
553:30 - flavors
553:31 - because you know just the fact that
553:33 - they're there they'll end up getting
553:34 - mixed so the order doesn't matter you're
553:36 - going to mix them together anyway but
553:38 - any time or if I'm selecting people for
553:43 - a team or a group where we're not
553:46 - defining the roles yet so it's just are
553:48 - you in this group or not or that's the
553:50 - cases where order does not matter so we
553:52 - have
553:53 - combinations so big c um N Things taking
553:58 - r a time and then the formula here so
554:02 - notice combinations just the fact that
554:04 - you're in the group that's enough so
554:06 - therefore there's fewer possibilities
554:09 - because order doesn't matter so I have
554:12 - that extra R factorial the denominator
554:14 - is bigger the overall number then is
554:17 - smaller so we'll same thing we'll prompt
554:21 - for how many things in the overall pool
554:23 - and
554:24 - then um I have
554:27 - this um I just use the same variables P
554:30 - for
554:31 - probability um it doesn't matter because
554:33 - that's is just my in between variable
554:35 - here anyway um math. factorial and then
554:39 - factorial R
554:41 - times and minus r
554:46 - so divide that and then cast as an
554:50 - integer so there we go so if I have
554:54 - this so yeah let's say
554:58 - um you know
555:00 - 20
555:02 - um let's say uh drink flavors you know
555:06 - all the different juice or whatever they
555:08 - put in the drink 20 uh different drink
555:12 - flavors taken three at a
555:14 - time 11,000 and you know there's uh you
555:19 - know at least one place I can think of
555:20 - that has that they have you know you get
555:22 - your your you're slushy and you know all
555:24 - the different flavors but they only have
555:26 - about 20 flavors and they will mix up to
555:28 - three at a time for you so then they
555:30 - advertise that they have more than a
555:32 - thousand different drinks
555:34 - available pretty cool so there we go
555:37 - permutations and combinations once you
555:39 - have the formula then it's easy to then
555:42 - plug in the numbers and you can
555:44 - calculate how many possibilities you
555:46 - have and that's that's what you want to
555:48 - see with this math think about the
555:50 - possibilities all right so Pascal
555:53 - triangle simple enough to generate and
555:57 - so many patterns that seem to flow from
556:00 - this so we look you know understood
556:05 - zeros out beyond the triangle so we're
556:08 - always adding that number the two
556:11 - numbers next to each other so one and an
556:13 - understood zero you know there we go
556:16 - we're adding the two numbers next to
556:17 - each other to get the next number which
556:19 - goes in the row between them so we have
556:21 - a one and a one and then we add that to
556:23 - make two two and a one and we add that
556:26 - to make three you see and then there we
556:30 - go one and a three to make four three
556:32 - and a three to make six here we go so
556:35 - that's how we get Pascal's triangle each
556:37 - time each
556:39 - row straightforward really cool pattern
556:43 - all right but that's not all there is to
556:46 - it what else shows up as a Pascal's
556:49 - triangle pattern well I could have
556:52 - binomial expansion um and I could have
556:57 - you know if I have like a + b to the
557:01 - zero anything to the zero is one that's
557:05 - the first row I could have a + b to the
557:10 - 1 and then that would be 1 a + 1
557:15 - B but then when I get a + b to the
557:21 - 2 so
557:23 - then I get so 1 a 2 B to the
557:30 - 0 plus
557:33 - 2 a to the 1st B to the 1st + 1 a to the
557:40 - 0 b s so we see then we get this all
557:48 - this other pattern of these are the
557:50 - coefficients but then the first term
557:53 - here goes to the second power to the
557:56 - first power to the zero and the second
557:58 - term does the opposite to the zero to
558:00 - the first to the second and the same
558:03 - type of thing continues here that it
558:06 - becomes a + b to the 3 so then that
558:11 - would be a to the
558:13 - 3 B to the
558:15 - 0 plus and then this one would be a to
558:19 - the 2 B to the 1st
558:23 - and then this one would be a to the 1st
558:26 - B to the 2 and then this one would be a
558:30 - to the 0 B to the 3 pretty
558:35 - cool and notice yeah if you had this
558:39 - then you you know in writing it out
558:41 - times one you might not write the one
558:43 - anything to the zero is one so you might
558:45 - not write that but to fulfill the
558:47 - pattern that's what happens pretty cool
558:51 - other things that come up with with the
558:54 - Pascal's triangle is 11 to an exponent
558:57 - and again anything to the zero is one
558:59 - but 11 to the first power is
559:01 - 11 and I wrote all over this but 11 to
559:05 - the second power is 121 1 121 11 to the
559:09 - 3 power is
559:12 - 1331 and you know this one would be 11
559:15 - to the 4th power is exactly this
559:19 - 14,641 pretty cool it actually still
559:22 - continues but then when I get down to
559:24 - the next one then this has to carry over
559:28 - so you know it would be uh a zero and
559:32 - then well then that's a 10 so the one
559:34 - would carry over and then the one would
559:36 - carry over so then that would be a six
559:38 - so then it really would be then 11 to
559:41 - the 5th power 1, uh
559:45 - 600 uh or 16,1
559:48 - 105 then you know it carries over that's
559:51 - pretty cool but it it still follows the
559:54 - pattern we just have to remember to
559:55 - carry but you know down to this when you
559:57 - don't have to carry it really works out
559:59 - it looks
560:00 - nice other patterns and I think I'm
560:03 - going to also include with the code you
560:05 - know we'll do a little spreadsheet thing
560:06 - to show this because if you just look at
560:10 - the even exponents or just the even
560:12 - numbers that show up here then you get
560:16 - um kind of an interesting um I'm going
560:19 - to do one more row here so 6 plus 1 is 7
560:23 - + 15 is
560:25 - 21 so then this would be
560:27 - 35 and then uh 35
560:32 - 21 7 so you see no more evens
560:37 - here but these
560:40 - evens 3 2 1 make a nice
560:45 - triangle and then there's other
560:47 - triangles that show up in the evens and
560:50 - actually the pattern of that is the
560:51 - sarinsky triangle which you can generate
560:54 - in other ways but putting out Pascal's
560:58 - triangle and then um highlighting or
561:00 - circling even numbers gives you
561:03 - sarinsky's Triangle really cool um other
561:07 - things that will work out more with the
561:08 - code um this also carries over to um
561:12 - combinations and you know how many
561:14 - elements taken how many at a time and
561:18 - you know that would be uh you know how
561:20 - many elements that you start out with
561:22 - that be what row you're in and then how
561:24 - many at a time going across then the
561:27 - answer to that is how many different
561:28 - ways you can combine these things I
561:30 - think that's pretty cool too there's
561:32 - just so many different things that um
561:34 - beyond what I could do justice with on
561:37 - the board so we're going to look at it
561:38 - in different ways uh we're going I'm
561:40 - going to show you one way to generate
561:42 - this with code and we'll look at you
561:45 - know just briefly maybe we look at a
561:47 - spreadsheet just because that spaces out
561:49 - kind of nicely um to show some of those
561:51 - different patterns patters and we'll
561:53 - look at some other things too um to see
561:57 - all all these different different
561:58 - patterns and and that's kind of again
562:00 - you know some of the themes here in in
562:02 - pre-cal we're figuring things out but
562:04 - we're also appreciating the re the
562:07 - beauty of all these interesting patterns
562:08 - that come up in math and in code so
562:11 - let's take a look at that let's take a
562:13 - look at how this plays out in
562:16 - code okay so here's one way to generate
562:18 - Pascal's triangle and I wanted to use
562:21 - combinations I I I think in code this
562:24 - this way works about as well as any
562:25 - other way and remember with combinations
562:28 - you know how many elements do you
562:31 - have then for Pascal triangle that would
562:34 - be what row and then how many at a time
562:38 - and then that would be across each row
562:40 - so we're just going to import math
562:43 - and N is going to end up being our our
562:46 - number of rows here so I I put that as a
562:50 - variable up top that way you can
562:51 - generate different uh size triangles
562:54 - just change end right up here and row is
562:58 - an empty array spaces as an empty array
563:01 - and I did this this and the next one
563:03 - space string really just because I
563:06 - wanted it to try to space it out to kind
563:08 - of look like a
563:09 - nice equilateral triangle you know
563:13 - isoceles at least um rather than just
563:16 - everything lined
563:17 - up okay so um a lot of times for Loops I
563:21 - just do a and b
563:23 - um and this is first because after
563:28 - seeing it I wanted to get a a better
563:31 - space triangle so just going through the
563:34 - range um each time I'm going to
563:39 - add to this string so space string is
563:43 - going to have an extra an extra two
563:45 - spaces here and I'm going to append that
563:49 - to this array space spaces
563:53 - there we go we'll come back to that in a
563:56 - second so then here's the triangle so
563:59 - again everything's in range n and as
564:03 - long as if B is greater than a continue
564:07 - and then that way that will just uh
564:10 - continue on so I just wanted it to be
564:13 - you know P for the variable so there
564:15 - this is what we have um math.
564:19 - factorial
564:20 - a um
564:23 - and so that's that's our looping
564:24 - variable so each one I'm going to take
564:26 - that number factorial divided by
564:29 - remember um the denominator is um
564:33 - factorial uh factorial btimes factorial
564:38 - a minus B
564:40 - so you know there we go so I I can reuse
564:43 - A and B Because all these are just
564:45 - within this Loop so remember you know
564:48 - it's you know n factorial Over N minus r
564:51 - but I didn't want to reuse n
564:53 - um so this is really just the
564:57 - combination formula that we already
564:58 - talked about and all that stored as an
565:03 - integer or casted as an integer and
565:05 - that's p and then that's going to be the
565:11 - row so I really am just using this to
565:15 - append for the row and
565:18 - then notice what I'm going to do is I'm
565:20 - going to print
565:23 - that particular element of this array
565:25 - spaces which is going to give me the
565:27 - right number of spaces that I want and
565:30 - in this case it's n minus a minus one
565:32 - and you'll see how that kind of evens it
565:35 - out so each of these spaces gets to be a
565:39 - part of this you know each this array
565:43 - and then I'm going to print out that one
565:45 - and then I'm going to print out just the
565:48 - row and so you see that's what we're
565:50 - doing here we're going to print out you
565:52 - know couple spaces and then the row and
565:54 - then I'm going to clear the row because
565:56 - then I'm going to use it again in the
565:58 - next iteration of this
566:01 - Loop so you know this is just generating
566:04 - Pascal triangle I have no need to store
566:05 - it for any reason so that's why I have
566:07 - spaces so it displays how I'd like it
566:09 - and then each row you know I'm going to
566:12 - go
566:13 - across and then um output it so what we
566:18 - have is Pascal's triangle you see it's
566:21 - spaced nicely along the left Edge and
566:24 - then just because the cuz we start
566:26 - getting um double digit numbers now the
566:30 - spacing on the right Edge you know gets
566:32 - a little bit skewed but I'm not really
566:34 - stressing about that and we have one
566:36 - there we go Pascal's
566:39 - triangle I could always make it you know
566:42 - um some other sort of list of you know
566:46 - for each but I just wanted to show to
566:49 - display this Pascal's triangle um
566:52 - there we go we're only storing each row
566:55 - long enough to print it out there we go
566:58 - so that's again one way to display this
567:01 - and we can see you know some other just
567:03 - interesting uh things in the loop that
567:06 - we can do and from here now we can use
567:09 - this to generate you know all kinds of
567:11 - things so we'll go on to the next and
567:15 - we'll we'll make we'll make use of this
567:17 - and look at some other cool patterns so
567:20 - we also have geometric prob ility if
567:23 - there's not something that I'm
567:24 - necessarily going to count but I can
567:26 - look at the area and so the geometric
567:29 - probability is the target area over the
567:31 - total area so same kind of thinking but
567:35 - having to do with area not things we can
567:37 - count so if I have like a bullseye you
567:39 - know that that Bullseye if I'm playing
567:41 - darts in the center as a tiny area
567:45 - compared to the whole dart board so very
567:49 - low probability of being able to just
567:51 - hit that
567:52 - now straight probability doesn't factor
567:55 - in skill maybe somebody's practicing and
567:58 - is and is a lot better um it's just
568:02 - probability so there there's a lot of
568:04 - sports you know darts baseball works a
568:06 - lot on probability but there's still
568:09 - skill involved which changes the
568:11 - probability or somebody's tendency to
568:14 - throw to one side or the other that
568:16 - could change the probability but just
568:18 - straight geometric probability has to do
568:21 - just with the area Target area out of
568:24 - the total area so therefore you know
568:27 - lower probability to hit the Bull's Eye
568:30 - a little bit better probability to hit
568:33 - let's say the Inner Circle there because
568:35 - it's a larger area out of the total so
568:38 - we see how we can calculate that um a
568:40 - lot of weather reports work on this
568:42 - geometric probability too besides the
568:44 - probability that a particular C Cloud
568:46 - will actually rain but if there's this
568:49 - rain cloud that we expecting to rain
568:53 - what's the area of the cloud compared to
568:57 - the area of the ground so you know in
569:00 - you know in your town what percentage or
569:05 - you know of that town is covered by this
569:08 - Dark Cloud that could rain and then
569:10 - that's your chance of rain for the day
569:12 - so you know you see we still work on
569:14 - geometric probability you know or if
569:16 - there's cloud cover but you know it's
569:19 - spotty you know how much what's the area
569:22 - of the cloud cover out of the total area
569:25 - of you know the town or wherever and we
569:29 - get our probabilities of
569:31 - rain so there we go we take a look at
569:33 - that but where this really leads us into
569:37 - is other
569:39 - shapes like the normal
569:42 - distribution now we'll get into the
569:45 - equation for that and everything but you
569:47 - know our normal curve so I can have you
569:49 - know scores here and I can have a
569:52 - frequency like How likely these are and
569:55 - we get this normal distribution looks
569:56 - like this but connecting with
569:59 - Statistics then I can calculate the area
570:03 - under this curve and a particular
570:07 - equation for generating this like normal
570:10 - curve would make the area one so then
570:16 - probability works out and if I want to
570:18 - look at like the most extreme case I
570:22 - might want to look at you know what's
570:23 - that
570:24 - 5% so you know of that area you know the
570:28 - area of this little part out of the
570:31 - whole area then you know maybe if the
570:35 - total area is one and so I I want you
570:38 - know uh something like uh 5% so that
570:45 - would be you know like five out of 100
570:47 - or something you know if the area of
570:50 - this was 100 and then this this little
570:51 - area was five or if this area was one
570:54 - and this would be
570:56 - 05 and given that we can figure out
571:01 - regard all these other equations we can
571:02 - figure out you know what what line would
571:04 - this be would be the cut off here to
571:06 - Define that
571:08 - 5% so this really the geometric
571:11 - probability actually leads us into some
571:13 - other things we're going to do with
571:14 - stats and with Calculus because great I
571:17 - could calculate the area of that I have
571:18 - my circle formula but how do I calculate
571:20 - the area under this weird shape here or
571:23 - any other weird shape and that gets into
571:25 - calculus breaking it down into things
571:27 - like rectangles and how we can do that
571:30 - so it leads into from probability to you
571:35 - know weather prediction to statistics
571:38 - and calculus area under the curve th
571:40 - this you know we're just scratching the
571:42 - surface of uh geometric probability here
571:46 - but let's take a look at how we can do
571:47 - some of this stuff in code so let's talk
571:50 - about that probability
571:52 - distribution and what we're looking at
571:55 - here I I think with rolling two dice
571:57 - it's a nice discreet way to show this
572:02 - distribution here where all right what
572:05 - can I if I roll two dice what numbers
572:07 - can I roll I can't roll one that's not
572:09 - possible because one on one dice and
572:11 - then I can't just ignore the other one
572:13 - but I can roll two because I can have a
572:16 - one and then a one on the next die I can
572:19 - roll a three in two ways because because
572:22 - think about the sequence I can roll the
572:24 - first die can be a one and the next one
572:26 - can be a two or if I roll a two I still
572:29 - have hope because the next one can be a
572:32 - one and same with rolling a four we see
572:36 - the different ways and again think about
572:38 - a sequence here of I roll one and then I
572:41 - roll the other um one then a three three
572:44 - then a one or two and two and we see all
572:49 - the different ways we can generate how
572:50 - many different ways can roll a five how
572:52 - many different ways can I roll a six and
572:55 - we see that right here in the middle of
572:58 - our range is a seven and there's the
573:02 - most ways I can roll a
573:03 - seven compared to Rolling any other
573:06 - number and we see
573:09 - how for the higher numbers it actually
573:13 - goes down it's very it's nice and
573:14 - symmetrical like
573:16 - this there we
573:17 - go and to roll a 12 again only one way
573:21 - because I have to roll a six and then a
573:23 - six and that's it so you know that gives
573:28 - us the so when I look at the probability
573:30 - I can look at like how many ways can I
573:32 - do this well if I roll if I look at all
573:36 - these and if I added these up it's
573:38 - actually you know 36 different
573:41 - combinations here um and remember our
573:45 - counting principle one out of six one
573:46 - out of six so 36
573:48 - possibilities and um so if I want to
573:52 - roll two it would be one out you know
573:55 - one out of 36 same thing with the 12
573:59 - probability is one out of 36 but for
574:01 - rolling a seven 1 2 3 four five six
574:06 - different ways so it's 6 out of 36 or
574:08 - one out of six you know probably the mo
574:12 - most you know it's would be the most
574:13 - common number so a very good way to show
574:17 - this so let's look at a couple ways we
574:20 - can see this as a graph
574:22 - you know just looking at each of these
574:23 - numbers and then how many ways can we do
574:26 - this and um we're going to go back to
574:30 - the matplot library. pipot import as
574:34 - PLT and I'm going to show you a couple
574:36 - ways one way I can create an
574:40 - array of X values for each different
574:44 - role and then an array of Y values
574:48 - for how many different ways I can get
574:51 - that see and it all matches up
574:53 - here so I can do that an array of each
574:57 - and what I'm going to do is PLT Doh
575:01 - s2d 2D histogram and these are each
575:05 - arrays so I'm going to plot XY and then
575:08 - I'm going to define the
575:10 - bins so that makes it we we sometimes it
575:16 - comes you know automatic that you know
575:18 - how am I going to divide up these uh
575:20 - bars or these you know areas of my bar
575:24 - graph and a lot of times you can skip th
575:28 - this argument bins but I recommend not
575:31 - doing it because then it might group
575:33 - things not the way you want to group
575:36 - them so codewise you can skip it and
575:40 - python will put in some default but I
575:42 - recommend not doing that so I'm going to
575:44 - have 11 bins for my X and then six bins
575:48 - for the Y and we'll see how that blocks
575:50 - that out so when I run this I'm
575:52 - commented out the other
575:54 - way so this is how it shows I think it's
575:57 - kind of
575:59 - cool and we
576:01 - see
576:02 - um you it displays it nicely uh just the
576:07 - maximum of what's
576:11 - possible so that's one way another way
576:15 - um and I'm going to what I'm going to do
576:17 - is I'm going to comment this
576:20 - out and I'm going to uncomment this so
576:25 - um notice when you do like you know up
576:27 - here figure X for fig a for variables
576:33 - and I'm going to use a doist so this is
576:37 - another way to get a histogram so
576:40 - here I'm going to create this
576:42 - array of all these values
576:46 - here and notice in my array I'm G to put
576:51 - two and then three shows up twice four
576:54 - shows up three times and I'm going to
576:56 - write it like this in my
576:58 - array this is a good use because a lot
577:02 - of times when we get
577:03 - data it might be in that way we want to
577:07 - from that data that we get we already
577:09 - have something like this where things
577:11 - show up um a certain number of times and
577:14 - so I might have an array like this and
577:18 - therefore I'm going to graph that look
577:20 - that's just the first ARG arent is that
577:22 - array and then here I'm going to again
577:24 - Define the
577:25 - bins specifically as not how many but
577:29 - exactly where I want my cut off to be
577:31 - and you see then um my highest one's 12
577:35 - so then 13 I want you know to include in
577:39 - that last bin and so when I run this
577:42 - instead we get
577:44 - this our classic
577:48 - histogram so then we see again each
577:52 - value in the
577:53 - number you know so we see this nice
577:57 - regular distribution where some values
578:00 - in the middle are the most common and
578:03 - then as we get further away from that
578:05 - middle it's less common that's the
578:07 - concept of the normal
578:09 - distribution so we we'll come back to
578:13 - this in a second as we talk about you
578:14 - know the area here um but that's the
578:17 - normal distribution
578:19 - and if we had things that were even more
578:22 - continuous instead of making it you know
578:25 - some sort of bar graph like this or
578:28 - histogram this actually this equation
578:30 - actually defines the top of it defines a
578:34 - line that would be the top of a normal
578:37 - distribution so all we're doing is we're
578:40 - just going to graph this here but this
578:42 - is the equation and even though we see e
578:45 - to a negative exponent which could just
578:48 - easily put that in the denominator and
578:50 - just one in the numerator this is
578:52 - actually a pretty common way to write it
578:53 - I guess just because the denominator is
578:55 - already crowded enough I don't know but
578:58 - but there we go so um given
579:02 - this then I'm going to Define um my
579:07 - minimum and maximum
579:09 - values here and like our other graphs
579:14 - number of points and then I'm going to
579:17 - create that as an array n p. Lin space
579:22 - graphing these I I am going to include
579:24 - you know the window size I'm going to
579:27 - plot an X and Y AIS to give you a
579:30 - reference and then here is that
579:33 - equation just converted to code
579:37 - so in the code I did put it all in the
579:40 - denominator so I in the code I did have
579:43 - one over and then I just did math. E
579:49 - that exponent
579:52 - math.sqrt
579:54 - of 2 pi and then I'm going to plot these
579:58 - um we'll come back to this other stuff
579:59 - later so when I run
580:04 - this this is the normal distribution or
580:07 - that you know bell curve that you may
580:10 - have heard of so this would be this is
580:14 - like an ideal if there was like
580:16 - continuous data of all these different
580:19 - things whatever I'm measuring
580:21 - and you know how far away from the mean
580:25 - which would be in the center you know
580:28 - that would be a nice regular
580:30 - distribution and you know that's what we
580:33 - have the the the the x value would be um
580:36 - standard deviations you know um we'll
580:40 - get into that you know as we talk more
580:42 - about stats but you know essentially how
580:46 - far away if the the mean or the average
580:50 - values you know zero then how far away
580:53 - from the average are we getting above
580:55 - and
580:56 - below and then the yv value would be
580:59 - frequency what's
581:00 - the Frequency that this shows up that
581:03 - this a score like this will show up and
581:07 - these medium or normal values have the
581:09 - highest frequency and then it Trails off
581:12 - as we
581:14 - go and we can uh do calculus to get the
581:18 - area under the curve but I want to show
581:20 - I want to show you just I'm going to
581:23 - uncomment these um if I could just get
581:27 - the area
581:29 - approximate and what I did is I drew
581:31 - some triangles here to show
581:34 - you um you notice it's approximate um
581:37 - we're skipping a little bit you know a
581:39 - little bit here not under in my triangle
581:41 - a little bit here where it's too low a
581:44 - little bit here too much and it would
581:48 - even out but the reason I picked this
581:50 - particular triangle is because I went
581:52 - from --2 1/2 to postive 2 1/2 so the
581:57 - area of the triangle 1/2 base time
581:58 - height so half the base is 2 and a half
582:02 - times the height
582:04 - 04 and that area would be
582:08 - one and so really we take it as the area
582:12 - under the normal distribution is
582:15 - one and then we look at like percentages
582:19 - you know what values here here give me a
582:21 - cut off point of you know 2% 5% you know
582:27 - 1% of that of that area you know that's
582:29 - what we're looking at and something over
582:32 - there where I'm only in the under the
582:34 - top you know 5% I'm going to say that
582:37 - you know often that's that's extreme
582:39 - enough that wow that's
582:41 - news so there we go so just
582:44 - approximating
582:47 - this and here with a histogram because
582:50 - it's already blocked blocky we can
582:51 - approximate this and remember that the
582:56 - width of every one of these bins is one
582:59 - so I can just make this a bunch of
583:01 - rectangles and calculate the area the
583:04 - width is one so then the height is one
583:07 - so you know the area is one and this
583:10 - next one the area is two next one the
583:12 - area is three then four then five then
583:14 - six you
583:16 - see and then we can get an area under
583:20 - here
583:23 - and so we can look at another way to
583:25 - look at probability would be you know
583:29 - this area um I would Ju Just as we were
583:33 - adding up all the how many ways this can
583:36 - happen the area under this should be
583:39 - 36 and then so just the area you know
583:42 - what's the probability of rolling a 12
583:45 - that should be one out of 36 so we get
583:47 - it you know we can see the numerical
583:49 - probability with the formula and we can
583:52 - also see the geometric probability and
583:54 - that's kind of we want to see that
583:55 - connection and see that
583:57 - overlap you know so there we go um now
584:02 - just connecting this with Calculus which
584:04 - we're this is pre-calculus but just to
584:07 - give you an idea we could break down
584:09 - this into a lot of little
584:14 - rectangles with really really narrow uh
584:19 - sides and and the idea is just like
584:22 - pixels or you know resolution on the
584:25 - screen the more rectangles the better
584:28 - the resolution the better the
584:30 - approximate area and calculus finds a
584:33 - way to take that number of rectangles to
584:35 - Infinity but that's where we get here so
584:38 - you know this is kind of like the the
584:40 - sense of the normal
584:43 - distribution um you see we see it as
584:47 - actual countable probability
584:51 - um but then we also see you know the
584:53 - theory here's this General curve and
584:55 - ways we can look at this and that's you
584:59 - know all of this it's good uh pre-cal
585:02 - and then it leads us into our
585:04 - understanding of Statistics so much of
585:07 - it relates to probability and Counting
585:10 - um how many ways can something happen
585:12 - and you
585:13 - know what I'm looking for you know how
585:16 - many correct out of that like what's the
585:18 - probability of that happening
585:21 - so here we go some some cool things and
585:23 - some interesting distributions you can
585:25 - Tinker
585:26 - with the math of Bing the short answer
585:30 - is it's always against you if we're not
585:32 - talking about skill or anything else
585:35 - factoring in just probability of
585:37 - something any anytime you're gambling
585:40 - you have the probability against you if
585:42 - you flip a coin you still have one out
585:44 - of two chance roulette you know your uh
585:47 - wheel goes around you know even if you
585:50 - say all right I'm going to to bet on you
585:51 - know black or red that's still not quite
585:54 - half because you still have two green
585:56 - zeros you know a lot of other things
585:59 - then get you know lower and lower odds
586:02 - like for example you know winning the
586:04 - lottery um a lot of games you have like
586:06 - you know pick three numbers Pick Four
586:08 - numbers so you know let's just talk
586:11 - about this if you pick uh numbers and
586:14 - each digit you know they come out of a
586:16 - bin uh 0o through n so there's 10
586:19 - possibilities you have
586:21 - one out of 10 chance of picking that
586:24 - number but if you have another number
586:27 - you have to you're only win if you get
586:28 - this and that one so that's also one out
586:32 - of 10 and you multiply the probabilities
586:35 - because you're only correct if you get
586:36 - this one and that one and then another
586:39 - one so that would be you know one out of
586:42 - 10 and you see you know one out of 10
586:45 - let's just say three three numbers
586:47 - that's a pretty common Lottery you know
586:49 - pick three numbers but remember then the
586:53 - chances of winning are one out of a
586:56 - thousand and the payoff the idea is that
586:59 - the payoff is going to be less than
587:02 - $1,000 you know way less so you can't
587:04 - just you know buy every combination
587:08 - because you'll lose
587:09 - money um yeah it's you know interesting
587:13 - so the uh and and if we get to like the
587:16 - larger lotteries it works on the same
587:19 - principle um
587:21 - but you might have you know pick um you
587:24 - know maybe five numbers but maybe
587:25 - there's 50 total and they come out of
587:27 - the same bin so picking the first number
587:30 - correct correctly it would be one out of
587:34 - 50 but then it's all out of the same B
587:37 - so one number was used so then the next
587:39 - one would be one out of
587:41 - 49 and again we're multiplying those you
587:44 - know one out of one out of
587:47 - 48 one out of
587:49 - 47
587:51 - 47 and then uh times one out of
587:56 - 46 and that would be if you if you're
587:59 - picking five numbers and so still it's
588:02 - one out of all these multiplied it gets
588:05 - to be a large number and again usually
588:07 - the payoff is so much is such that it's
588:10 - not worth
588:12 - buying one of every
588:14 - ticket um some people have actually
588:17 - tried this and you know they've gotten
588:19 - together with investors when the lottery
588:21 - jackpot gets to be a certain amount and
588:23 - then they try to buy one of every ticket
588:25 - I i' I heard one person talk about
588:27 - gambling is attacks on people that
588:29 - aren't good at math I think that's kind
588:31 - of funny but still nonetheless any of us
588:34 - here and there we might say oh let me
588:36 - take a chance on this why not Charity
588:39 - Auction so we know that if I lose the
588:41 - money went to a good cause um but you
588:44 - know that's that's really it you know
588:46 - the math of betting and what we're going
588:47 - to look at in the code is um you know so
588:51 - that you don't have to play with your
588:52 - own real money is different ways that we
588:55 - can generate you know
588:57 - um place a bet pick a card something
589:00 - like that and you know did you win or
589:03 - not and then add add or subtract from
589:05 - your um you know from your bank and
589:10 - simulate this and see that you know
589:13 - after only so many attempts you you end
589:16 - up with no money left so we'll look at
589:19 - some of those you know simulators that
589:20 - we'll create with the code so let's take
589:22 - a look at that so this is just a
589:25 - gambling simulator just to show you um
589:30 - you know some probabilities here um
589:32 - we're going import random because we're
589:34 - going to generate a random number so
589:37 - from that range um I'm going to give you
589:41 - a bank account and we'll look at that
589:44 - and what we're do is we're just going to
589:45 - prompt for some input um there we go
589:48 - sounds like a sentence so maybe I'll
589:49 - capitalize that
589:51 - guess the number between 1 and 11 store
589:54 - it and here I'm just going to print the
589:56 - number in the guess once and if it's
590:00 - correct it's going to print you win
590:02 - increase the
590:03 - bank and or you lose and decrease the
590:06 - bank there we go so in this case you
590:09 - know essentially you WI a dollar that uh
590:12 - guess number between one and 11 all
590:15 - right
590:17 - five oh but it was 10 so I lose
590:21 - and
590:21 - see um I didn't worry I didn't print out
590:24 - a
590:25 - bank account here just to show you you
590:28 - here's one way here we're going to
590:31 - expand on that
590:34 - um uh start out with this bank here um
590:37 - guess the number between 0 and
590:41 - 999
590:43 - um because we can have all zeros and we
590:47 - can have 999 but we can't have a
590:49 - thousand that's four digits
590:51 - so here I have there's a reason why I
590:54 - have this Loop because right now we're
590:55 - just going to do it once but I want this
590:58 - to Loop that we're going to have this
590:59 - bank account and we're going to generate
591:03 - a random number from zero to a th000
591:06 - because remember it won't pick a th
591:08 - it'll pick $9.99 as the
591:10 - highest and later on in the walk through
591:15 - uh for certification five uh I'll do
591:18 - this random number generating in a
591:20 - different way
591:21 - but here's one just generating this
591:22 - random number and we're going to print
591:24 - out the winning number your number and
591:27 - we're going to say in this case if you
591:29 - win it's going to print that out and
591:32 - give you
591:33 - $100 or if you lose then you lose the
591:35 - dollar you spent on the lottery ticket
591:37 - and after doing all that then we'll
591:39 - print out what's in your bank
591:42 - account so there we go um 789 how about
591:48 - that 594 you lose so then the bank
591:51 - account's
591:51 - $3.99 and the reason why I have this so
591:55 - we can comment these out because if I
591:57 - want to Loop through this a bunch of
591:58 - times I don't need hundreds of print
592:02 - statements so we can comment out these
592:05 - print statements
592:07 - here and let's just
592:11 - say we play this every day for a year
592:14 - now let's even make it more than a year
592:18 - because if the bank you start out with
592:21 - 400 supposing you play for every day for
592:23 - 400
592:25 - Days there we go uh and you have this
592:29 - you know if you do win boom you get the
592:30 - $100 so that's going to be even more if
592:33 - you lose you only lose a dollar what you
592:35 - paid and there we go
592:39 - um uh
592:45 - 629 bank account
592:49 - zero so probabilities against you or
592:52 - here we go 2
592:57 - 83 bank account zero and this is what
593:01 - you know sometimes in doing this you
593:05 - want to be thankful that we're just
593:06 - dealing with variables instead of real
593:08 - numbers because that could have been oh
593:10 - I lost another 400 oh I lost another
593:13 - 400 um you know that's kind of what I
593:16 - want to show you with some of these
593:17 - gambling simulators and you know we'll
593:19 - get into looking at a couple others but
593:21 - the uh yeah the idea is that the the
593:24 - because the odds are always against you
593:26 - you know I mean who knows maybe it's
593:27 - nice every so often to plunk down a
593:29 - dollar you know little bit of
593:32 - anticipation wonder if I win but long
593:35 - term the B the it's it's always against
593:36 - you and the gambler's fallacy is that oh
593:40 - it's been against me so long it's got to
593:41 - turn my I'm due to win but there's
593:44 - really no such thing so there we go um a
593:49 - couple different ways to look at this
593:50 - you know just generating random numbers
593:52 - and comparing you know your guest to the
593:54 - other random numbers and we'll take a
593:57 - look at how uh how this plays out again
594:00 - in other situations at the end of uh the
594:04 - the um foundational math 5 uh
594:08 - certification project so here we go some
594:12 - good things to think about and some code
594:14 - to write for this this is going to be a
594:18 - walkth through of foundational math
594:19 - certif ification 5 but please make sure
594:23 - that you do this or give it your best
594:25 - attempt before looking at this um
594:28 - because this walkthrough is going to
594:29 - show you but the goal is that in going
594:32 - through everything in this course that
594:36 - you you're able to do this on on your
594:38 - own and it's a little bit of a review a
594:41 - little bit of a um a little bit of a
594:44 - test and in going through this you'll
594:47 - see that you know oh I've been able to
594:50 - do this this I've been able to do that
594:51 - and I've been able to build this and
594:53 - that and you know it completes you know
594:57 - a lot of your math journey here to this
595:00 - point that you know you'll have all
595:02 - these skills for the next thing I mean
595:05 - so many things you'll be able to do so
595:09 - um yep so here this will be the walk
595:11 - through but hopefully if you're watching
595:13 - this you've already given an attempt and
595:15 - maybe you just want to go over some
595:16 - things so here we go the walkthrough for
595:20 - foundational math certification 5 so
595:22 - here's the walkthrough of foundational
595:24 - math 5 and hope you already did this and
595:29 - you're just going through checking
595:31 - up but here we go and like before Step
595:36 - Zero we just need to acquire the testing
595:38 - library and you should also see how you
595:42 - can you know post your own library of
595:46 - various functions on GitHub or wherever
595:50 - and
595:50 - use this to access that library and then
595:53 - you have access to all these
595:57 - functions
595:59 - so there we go and in running this it
596:04 - will then make that connection import
596:07 - this and run that first function which
596:10 - will
596:12 - output one more
596:16 - thing and this is about how long it will
596:19 - take and then running that function will
596:21 - output this code test past and it
596:25 - is so remember this one we're focusing
596:29 - on a lot of sequences and series and
596:31 - those sorts of patterns so a sequence is
596:34 - any group of numbers in a certain order
596:36 - following a
596:37 - pattern
596:39 - so here's how we can
596:41 - do a loop to generate that sequence and
596:45 - I'm just going to say you know here um
596:48 - this one you don't have to change
596:49 - anything
596:50 - uh just giving you an example of the
596:52 - loop for a in range um from 1 to seven
596:56 - and remember python then one will be the
596:59 - first number but then six will be the
597:01 - last number it will always be less than
597:03 - that uh if I say one to seven it'll end
597:05 - at six so there we go and it's just
597:08 - going to print you know a squar comma
597:11 - and this is a nice thing to add you'll
597:14 - see how this
597:17 - um displays that
597:21 - and you see so it ends this and puts
597:27 - the next print statement on the same
597:31 - line so notice this print statement is
597:34 - not in the
597:36 - loop but putting this
597:39 - here then
597:42 - will put that next print statement on
597:44 - the same line sometimes that's
597:46 - nice and in doing this then we can take
597:50 - a look 1 149 16 so there we go what
597:55 - would be the next number well we see
597:57 - here how we generated this is a squar so
598:00 - the next thing would be 7^ squar
598:04 - 49 so that's just eight one sequence
598:07 - arithmetic sequence is anything where we
598:11 - have something that we're adding or
598:13 - subtracting to get the next number so
598:15 - the nth number because n starts at one
598:19 - when n is one the first number so the
598:21 - nth number is the first number plus the
598:23 - difference time n minus
598:27 - one and that's because n equals 1 for
598:29 - the first number
598:31 - so here we go so you're going to do this
598:37 - and this is a carryover from before but
598:40 - what we want is we want this to
598:43 - be um write a we want this to write a
598:46 - loop that generates sequence beginning
598:48 - with three and adding two each
598:50 - time so getting three adding two each
598:54 - time
598:56 - so if we start
598:59 - here with the range one so we
599:07 - have
599:08 - 3
599:11 - um plus
599:16 - 2times nus1 so if that's the first thing
599:21 - than a minus one
599:25 - is is this so you see it will start with
599:29 - one and so for the first number it's
599:32 - just three because 1 Min - one is zero
599:35 - and then the next one it'll go 3 + 2
599:39 - three you know Etc and you can there you
599:43 - go and you can keep this at the end
599:45 - which we will do why
599:48 - not and there we go starting with three
599:51 - adding two each
599:53 - time there we go so getting an error
599:59 - like this this is supposed to be a
600:01 - little bit of a give and take so you
600:03 - know don't stress about it notice it's
600:05 - just an adjustment
600:08 - um this will work and I was just going
600:12 - through and thinking of a different way
600:14 - when I was creating this
600:16 - so notice the the the adjustment instead
600:19 - of range 1 to 7 we could just say range
600:24 - seven which understood starts at zero
600:27 - which then means I don't
600:29 - need
600:32 - to have that a minus
600:38 - one so that's just something you know we
600:41 - we could do it one way and that is
600:44 - perfectly correct but you know take the
600:47 - the feedback as give and take as here's
600:49 - another way to do this we could just say
600:51 - range seven starts at zero which means
600:54 - we don't have to do that part and and
600:56 - it's just interesting converting always
600:58 - you know code and array usually start at
601:02 - the first element is zero and some
601:04 - things in math the first element is one
601:08 - so there we
601:11 - go so just you know these are some of
601:14 - the things that hopefully I can point
601:16 - out in this walk through all right and
601:18 - in a geometric series you're multiplying
601:20 - or dividing
601:23 - something so the nth number is the first
601:26 - number times the ratio to the exponent n
601:29 - minus
601:31 - one because again you know we want to
601:34 - take it as the first number n equals
601:38 - 1 all right so now we're going to take
601:43 - this and we want to write a loop that uh
601:46 - generates starting at three and doubling
601:49 - every
601:50 - time and since we're doubling I didn't
601:53 - want to start at two that you know want
601:55 - to start at three and make that one one
601:57 - more step here so if we just take
602:01 - this so we see it's you know not a squ
602:06 - but it's we're starting at
602:08 - three
602:12 - times um this to the
602:17 - exponent um times two to the
602:22 - exponent um a minus one now I could like
602:27 - we were doing before two to the exponent
602:30 - a and go like this and it starts at
602:33 - zero so we see that's what we
602:37 - have to to the exponent a because when
602:39 - it's zero then that works
602:44 - out and then we
602:46 - see three three and then doubling every
602:50 - time there we
602:53 - go so yeah you could do it the other way
602:55 - also but then it will it will give you
602:58 - that suggestion hey do it this way just
603:01 - WR you know and and again we're often
603:03 - going for you know this if if one way is
603:06 - a little bit simpler a little more
603:07 - straightforward we'll do that so there
603:10 - we go and now sequences as python lists
603:16 - so lists um
603:20 - you really could use the word array
603:22 - interchangeably there might be some
603:24 - subtle differences but um we'll call it
603:28 - a list
603:29 - here and there we go so lists are
603:34 - indexed means that I have each element
603:37 - has a number to
603:39 - it and the first index is zero there we
603:43 - go again contrasting with the math
603:47 - sequences so
603:50 - we have this and we can have the entire
603:53 - list so notice what we have here if I
603:57 - just call this a list and I'm going to
604:00 - say that the that I have five in the
604:03 - list there we
604:04 - go and the comment here a list zero is
604:09 - five element zero so I can do this um
604:14 - since I have element zero then I
604:17 - definitely want that one in there
604:20 - because um I don't want to start with
604:23 - element zero and then I
604:27 - have the next number well let's
604:36 - um so we're going to multiply by two and
604:39 - then add three so if I take the next
604:43 - number then I really
604:47 - want um
604:49 - notice
604:51 - n starts at one so if I want a
604:57 - list element n
605:03 - minus1 then that gives me my previous
605:06 - number which in this case is
605:11 - five and then if I want to create a
605:14 - sequence where I multiply by two then
605:16 - add three so I take that previous number
605:20 - time
605:21 - 2 +
605:23 - three and there we go so we have that
605:27 - previous number * 2 + 3 and then I'm
605:29 - going to append that to the
605:31 - list so a list. append next number and
605:35 - then that that way that's so that's
605:37 - another way we can do this and we can
605:39 - just append it all to the list and then
605:41 - print the list at the very end so there
605:46 - we go and we have this
605:51 - so the next one recursive sequences so
605:57 - recursive is when you know the previous
606:00 - number and you need to know the previous
606:01 - number to generate the next number so
606:04 - it's dependent on that um whereas some
606:07 - of the original arithmetic and geometric
606:09 - sequences that we were looking at you
606:11 - can just jump to you have the formula
606:14 - you can jump to like the 50th
606:16 - number but here if I have let's say a
606:18 - Fibonacci
606:22 - sequence so I'll call this fib1
606:25 - one so that way I'm creating this list
606:31 - that the first element is one and the
606:32 - next element is
606:34 - one because then I need to generate the
606:39 - previous two
606:42 - elements so you know there's your hints
606:45 - here so if I have the Fibonacci sequence
606:49 - I already have the first element in the
606:51 - second one so we're looking at python
606:55 - list so it's zero element zero and then
606:58 - element one so then I'm going to start
607:00 - my loop with element
607:03 - two and
607:05 - so what I'm going to have is um next
607:10 - equals
607:13 - FIB n minus1
607:20 - plus
607:23 - FIB n minus
607:29 - 2 and we see this so I'm adding the two
607:34 - previous elements to get the next one
607:37 - and then I'm going to append that to the
607:41 - list and that way I needed to generate
607:45 - you know these first two elements so
607:47 - that I can reference them here and
607:50 - element zero element one so my in my
607:52 - loop I start with element
607:54 - two and then doing this all right up to
607:57 - 11 that works so then I can print the
608:01 - whole sequence and there we go 1 one 2 3
608:05 - 58
608:07 - Etc pretty
608:10 - good and yeah that's it so the Fibonacci
608:13 - sequence it'd be tough to jump to you
608:16 - know the 100th element because I still
608:19 - need the two previous
608:22 - ones now you can graph these sequences
608:26 - remember are discreet so that means it's
608:29 - not continuous the the I want these nice
608:33 - integers these in between decimal values
608:35 - and such um are not really a part of
608:38 - that so here's one way to do this I can
608:42 - just plot them as points so a list and
608:46 - then b
608:47 - list and you know generate the axis
608:51 - here and
608:54 - so
608:56 - um I can plot
609:00 - so um I can plot n because I'm going
609:04 - through this
609:05 - Loop um for n in range the length of a
609:10 - list
609:12 - so you see I don't have to count them I
609:14 - can just say in range based on this
609:16 - length and I'm going to plot this point
609:19 - so the first element and then you know
609:23 - that's the x value and then what is the
609:25 - element in the list that's the Y
609:27 - value and I'm going to print that as a
609:29 - red
609:30 - dot there we go all right
609:34 - so
609:36 - um we can run this and a a lot of these
609:39 - I have you run it see what this looks
609:43 - like and we
609:45 - see that curve but I just have the dots
609:49 - it's not a continuous
609:51 - line so you see you know element
609:54 - two is here you know element
610:00 - four and there we go so when we change
610:04 - bead list
610:07 - so then make be list the new Fibonacci
610:11 - numbers
610:13 - so I can make it however many 2 3 5 8
610:24 - 13 and maybe we'll stop at
610:28 - 21 and so the length of that list I
610:31 - could have made it any length because
610:33 - I'm referencing that here and so that
610:37 - means I should change this because I'm
610:40 - referencing b list now and down here I'm
610:45 - referencing b
610:47 - list so now I want the range of b i
610:51 - Chang B list and I want the range of the
610:54 - length b list and I want to reference
610:56 - here I'm going to plot the elements in b
610:59 - list and just like Bist could just sit
611:02 - there before a list can just sit there
611:04 - that didn't take up too much and I just
611:07 - I don't have to reference it
611:09 - later so
611:12 - now we have this and just given this
611:16 - range because I stopped here you know
611:18 - there we go we have
611:21 - um these dots and that would be again
611:25 - graphing that sequence so that's the way
611:28 - a lot of sequence graphs look like you
611:29 - know a sequence of plotted points but
611:32 - not the lines connecting
611:36 - them all right so if I have a series now
611:40 - the difference with a sequence and a
611:42 - series is you add them up when you add
611:45 - up all the elements in a sequence then
611:47 - it becomes a series
611:49 - so here rather than generate um an array
611:54 - or a
611:55 - list then what I want to do is I have a
611:57 - sum variable start out at zero and then
612:01 - I'm going to just add each of
612:05 - these so there we go so if I have some
612:11 - element and so here I have you know my
612:16 - element is 2 * n + 4
612:20 - now notice I I just wrote it like this
612:23 - but it could be 4 + 2 * n that works
612:27 - just as well I could have changed this
612:29 - to start at one and make the N minus one
612:32 - but that seems a little bit excessive so
612:35 - really all I'm going to do is add this
612:38 - code here
612:41 - sum equals sum plus
612:47 - element there we go go so each time it
612:52 - generates the next element in the
612:54 - sequence but since I'm adding it up now
612:56 - it becomes a
612:57 - series and so we're going to print out
613:00 - the
613:04 - sum there we go and we could have
613:07 - also put in here you know uh add it to a
613:11 - list and display that as well as the sum
613:14 - you know we can combine
613:16 - those so as you see we're just going to
613:20 - keep adding and the numbers going to
613:21 - keep getting bigger but we actually have
613:24 - two different types of uh series we have
613:27 - Divergent and
613:28 - convergent so Divergent the sum keeps
613:31 - getting larger it
613:33 - diverges um and usually you know we'll
613:36 - just say toward Infinity if we have
613:37 - enough elements but a convergent series
613:40 - actually approaches a definite number
613:43 - which is really interesting so that
613:45 - happens usually if the denominator keeps
613:48 - getting bigger than the
613:51 - numerator so there we go so now here
613:56 - we're just going to run this code just
613:58 - so you can see
613:59 - this
614:01 - um
614:03 - and we see in range 11 so my element now
614:07 - is 1 over 2 to the
614:09 - N so the numerator still keeps being one
614:14 - and the denominator is 2 to the end so 2
614:17 - to the 0o 2 to the 1 2 the
614:19 - second you know all these smaller and
614:22 - smaller numbers that will
614:24 - converge
614:26 - now my range is just
614:29 - 11 and we see the sum here not
614:33 - bad
614:35 - now same thing I'm just going to change
614:37 - the loop to
614:39 - 42 you know as just some random number
614:42 - that I just thought of it did not take
614:44 - me a million years to think about this
614:45 - number and if we run this
614:51 - so we saw before it was 1.99 and then a
614:55 - couple things 1.999 a lot more nines and
614:59 - then we get to this so now we're going
615:01 - to change the range to 100 and see what
615:06 - that
615:10 - does and look at that two so it does
615:14 - converge I didn't even put anything here
615:16 - to round it just it got so close 1.999
615:20 - so many nines and it converged and we we
615:23 - often say well okay as n approaches
615:26 - Infinity it should converge we didn't
615:27 - even get close we just even went up to
615:29 - 100 so that's what we see you know
615:32 - because the denominator is you know two
615:34 - to the N so two to the 100th power
615:38 - that's a t that's you know that's a huge
615:40 - number so one over that's a very tiny
615:43 - number it keeps going you're adding
615:45 - tinier and tinier
615:46 - numbers and so it converges
615:51 - so factorial another way for numbers to
615:53 - get bigger and
615:55 - bigger factorial of a number
615:59 - is the exclamation point and that means
616:02 - it's multiplying that time times
616:04 - everything less than that so 5 factorial
616:08 - is 5 * 4 * 3 * 2 *
616:12 - 1 and I know that times 1 won't change
616:14 - it but it completes the pattern so five
616:17 - factorial then multip all that gets you
616:20 - 120 and so by definition zero factorial
616:24 - is one
616:26 - because zero factorial these come up in
616:30 - situations where it's like combinations
616:32 - how many different ways can things
616:33 - happen so zero factorial if I have zero
616:37 - things how many ways can I arrange them
616:39 - well zero ways I just I could just not
616:42 - do anything and so that's that's or
616:45 - that's one thing that's one way zero
616:48 - fact of zero things the only thing I I
616:51 - can do one thing which is not arrange
616:54 - anything and so that you know it's kind
616:56 - of like the verbal explanation for zero
616:58 - factorial but anyway by definition 0
617:01 - factorial equals
617:03 - 1 so in
617:05 - Python we're going to import math and
617:08 - then we see we have math factorial
617:11 - function all
617:14 - right
617:16 - so there we go we're going to put
617:18 - something else here in the print
617:19 - statement so we see if I have the
617:23 - number we can keep it as seven and then
617:27 - what I have it is
617:29 - printing that factorial notice no space
617:32 - equals well let's add this let's make it
617:35 - math.
617:39 - factorial number and I'm just going to
617:42 - reference that variable that way if I
617:43 - change it I don't have to change it
617:45 - multiple
617:46 - places and then I have this code here
617:50 - just so you see for n in range number
617:53 - minus
617:54 - one so I have number minus n
618:00 - times there we go
618:03 - and we will see that this prints out
618:08 - seven factorial equals and you know we
618:11 - saw that we calculated that number up
618:13 - here and it'll also just display seven *
618:16 - six times there we go um because that's
618:20 - what we're doing we're always doing the
618:21 - number minus n so we subtract more each
618:25 - time just a way to display it as
618:29 - well so Oiler number which we usually
618:33 - see abbreviated as e and we talked about
618:36 - this in other parts of the math
618:39 - course
618:41 - so
618:43 - um there we go so e and and again you
618:47 - know it wasn't oil name in the number
618:49 - after himself of his other people much
618:51 - later you know calling it e as a tribute
618:54 - so this is a convergent series it
618:58 - converges on this odd number here but
619:01 - still and it's the sum of one over n n
619:06 - factorial
619:08 - so like we were looking at the harmonic
619:11 - series before so you know I have my sum
619:15 - the range you know will start here at 11
619:19 - and you see one
619:22 - over factorial of that and you see I
619:26 - just have range 11 so it starts at
619:29 - zero one over Zer factorial is one over
619:32 - one which is
619:34 - one so we're going to generate that you
619:37 - know one over each of these and pretty
619:42 - good
619:45 - 2.71828 and then 18 I mean it's actually
619:49 - even just going up to
619:51 - 11 it's pretty close to that number but
619:54 - then if we change it
619:56 - to 100 instead of
620:02 - 11 we get that a little bit close 2.7
620:06 - 1828
620:08 - 1828 and then yes that pattern does
620:11 - break down after a couple times so you
620:14 - know a much more uh close approximation
620:19 - and remember it's as n goes to Infinity
620:22 - we stopped at 100 if you really wanted
620:24 - to go up to a th it
620:28 - doesn't you know this is more than what
620:30 - you need to do for the this and you see
620:34 - very similar even just going from 100 to
620:36 - a, 1828 1828 and then
620:42 - 459 yep oh and
620:45 - see it'll give you the error
620:50 - and and each of these errors you know
620:51 - there's no point value you know going
620:54 - through this hopefully you you've been
620:56 - you know tinkering with with different
620:58 - things as you go through
620:59 - this each of these
621:03 - um notebooks so probability very often
621:08 - probability and we'll see that factorial
621:11 - and such will come back around again Pro
621:13 - probability likelihood of something
621:15 - happening so we're always counting the
621:18 - number number of correct
621:20 - outcomes out of so we divide that number
621:23 - out of the number of possible
621:27 - outcomes so there we go
621:30 - so randomly selecting one's birthday if
621:33 - I'm just going to randomly guess
621:34 - somebody's birthday I have one there's
621:36 - only one day out of
621:40 - 365 so we can just count and look at
621:43 - this probability we can just say correct
621:49 - divided by
621:55 - possible and for you know for a simple
621:58 - thing here just these couple lines of
621:59 - code therefore you can always go back
622:01 - and change these numbers to
622:04 - be you know anything and there we go
622:08 - so you know one out of 365 or you know
622:15 - 02 7
622:19 - all right so then when we have
622:21 - probability of A and
622:23 - B it's only correct if both of those
622:26 - happen so what we end up doing is we
622:28 - multiply the
622:31 - probabilities so like probability of of
622:34 - flipping a coin and landing on heads
622:38 - we're going to look at four times in a
622:39 - row so the probability once is just
622:43 - 0.5 yep because it's either going to
622:46 - land heads or tails then the combined
622:51 - probability
622:53 - is um 0.5 now we can do this
622:58 - probability
623:01 - um four times because I'm multiplying
623:05 - that same thing to the fourth
623:10 - power there we go I mean you could have
623:14 - written probably times prob times prob
623:17 - you know we this is a much more
623:20 - efficient way to write it and there we
623:22 - go so that's the
623:24 - probability of getting heads four times
623:27 - in a
623:29 - row and now it's still just a
623:32 - probability I mean that that chance is
623:34 - not zero so it's still possible so this
623:38 - is where we get into like the gambler's
623:41 - fallacy so because it's such a low
623:44 - probability you know if you were betting
623:46 - somebody and you know I I bet that it's
623:50 - going to land on heads and it was tails
623:52 - and then you know three times in a row
623:54 - it was tails and then so you still the
623:58 - next time you're going to bet heads
623:59 - again saying you know such a low
624:03 - probability then you know I'm due to be
624:06 - correct at some point but it's still
624:10 - they're each independent so each one
624:13 - flip it's still one out of two
624:15 - chance in the whole situation
624:19 - it's this low probability but you know
624:21 - if it's a fair coin each instance is
624:24 - still one out of two chance so the
624:26 - gambler's fallacy looks at these lower
624:29 - probabilities a you know as you string
624:32 - together multiple events and says oh wow
624:35 - it's you know it's been head so Tails so
624:38 - many times I'll bet on heads it's due to
624:40 - come up but you know um things don't
624:44 - necessarily work that way it's still you
624:46 - could land on Tails again
624:49 - you know same thing with you know
624:50 - betting on you know slot machine or
624:53 - cards or dice you know there there
624:55 - there's no it's due to come up um it may
624:59 - be a lower chance but it's still there
625:03 - is a chance that this could
625:05 - happen so probability of A or B we add
625:09 - the
625:10 - probabilities so it's correct if either
625:12 - event
625:15 - happens and so you know that's like you
625:19 - know buying one lottery ticket and then
625:22 - oh if you buy two lottery tickets you
625:24 - doubled your prob your POS you doubled
625:26 - your chances I mean it's still tiny but
625:29 - it's
625:29 - doubled or pick a number from 1 to 10 if
625:33 - I pick one number but then if I pick
625:34 - another number also now I have two
625:37 - chances out of 10 you add the
625:40 - probabilities so there we go combin so
625:44 - here we're going to calculate the pick
625:46 - three lottery if I bought 7
625:49 - tickets so the combined
625:52 - probability so it's one out of a th
625:56 - because it would be 1 out of 10 * 1 out
625:59 - of 10 Time 1 out of 10 picking three
626:01 - digits
626:03 - correctly but then the combined
626:06 - probability if I have seven tickets I'm
626:08 - just going to say prob time
626:12 - 7 because really you know I'm not going
626:15 - to write it out to add them up
626:19 - there we
626:20 - go oh or we could do
626:23 - that
626:24 - so all right probability
626:28 - plus Pro Plus
626:36 - prob one two three four
626:41 - five
626:43 - six 7 just to really accent the fact
626:47 - that it is adding it up seven
626:50 - times there we
626:54 - go okay so instead of one chance out of
626:57 - a thousand you have seven chances out of
626:59 - a
627:03 - thousand and
627:06 - combinations
627:07 - so how many different ways can we
627:09 - arrange things
627:11 - so the numerator side I often know how
627:14 - many correct things I want but how many
627:17 - Poss possible ways the denominator part
627:21 - of it we have these counting rules
627:23 - because there's a lot of different ways
627:25 - to look at this how can I figure out how
627:26 - many different possibilities and so
627:29 - combinations
627:31 - are unique groups of size
627:36 - r that you can make from a pool of N
627:41 - Things So when we write this notation
627:45 - here so NR so we can say N Things take
627:50 - an r at a time and then we put the Big C
627:54 - because it's
627:55 - combinations so there we go and then
627:57 - here's the formula n factorial Over N
628:00 - minus r
628:02 - factorial but then the denominator is
628:04 - even bigger than that because it's times
628:05 - R
628:07 - factorial so how many five person
628:11 - starting lineups Can it have there's 12
628:14 - people on the team now this is I guess
628:17 - this would be like a an informal game
628:20 - because we're saying order does not
628:22 - matter so five person starting lineups
628:26 - we're not going to assign any particular
628:28 - position whatever sport this is we're
628:31 - just going to say yep groups of five how
628:33 - many different ways can we do
628:36 - this um so there we go n is 12 R is five
628:42 - 12 five at a time so we have this
628:46 - formula so I already imported math so
628:50 - we're going to do math.
628:54 - factorial
628:56 - n divided
628:59 - by and then we have I I'm going to put
629:02 - all this in parentheses to in the
629:05 - denominator math
629:07 - do math.
629:12 - factorial
629:15 - R times
629:18 - math.
629:21 - factorial n minus
629:23 - r
629:25 - and that should be correct with the
629:28 - parentheses so n
629:31 - factorial over R factorial oh and not
629:35 - plus but
629:36 - times math. factorial n minus r close
629:41 - those close the denominator parenthesis
629:43 - there we
629:45 - go and
629:46 - so we run this so
629:52 - 792 and this will be a a decimal you you
629:57 - um you probably could cast it as an
629:59 - integer but I didn't worry about doing
630:01 - that
630:03 - um doing this we we would expect an
630:05 - integer value but also
630:09 - um dividing python wants to default to
630:13 - uh just a float because you're dividing
630:15 - that you could you could end up with
630:16 - decimals
630:18 - but there we go how many possible
630:19 - starting lineups
630:22 - 792 so you know if we think about that
630:26 - then you know wow a coach uh has 12
630:30 - people on the team you know how many
630:32 - different
630:35 - combinations uh you know who's starting
630:37 - today uh 792 options wow it's pretty
630:40 - overwhelming for it's a lot of things
630:42 - for a coach to think
630:44 - about now permutations
630:48 - you're counting how many possibilities
630:51 - but order does matter so you know like
630:54 - it has the word mutation in there
630:56 - changing things around but the order
630:58 - does matter so there we go so if you
631:03 - have eight different participation
631:05 - trophies and you want to pick three to
631:08 - arrange on the Shelf um it's not just
631:11 - that they're on the Shelf but what order
631:13 - are they in that matters um if it would
631:18 - be the uh um people winning you know in
631:22 - the Olympics gold silver and bronze so
631:25 - it's not just three people on the metal
631:26 - stand it order does matter gold silver
631:29 - and bronze or you know like this books
631:33 - on the Shelf trophies on the Shelf um
631:37 - you know the order does matter so it's
631:39 - perm permutations and the formula is
631:41 - similar notice the setup but with the
631:43 - big p for permutation and the formula
631:46 - here does not have that extra R in the
631:50 - denominator
631:52 - so there so we have you know um more
631:57 - possibilities because you know if I have
632:01 - you know gold silver and bronze let's
632:04 - say on the medal stand in the Olympics
632:07 - but if it was rearranged the same three
632:09 - people but they won different medals
632:10 - that's a different
632:12 - permutation so we have more options here
632:16 - so in this example example so eight
632:18 - different participation trophies and um
632:23 - three to arrange
632:24 - so eight things taken three at a
632:28 - time and so we're going to have this
632:32 - math.
632:36 - factorial
632:37 - n divided
632:40 - by math.
632:43 - factorial n minus r
632:49 - so there we go number of possible
632:54 - Arrangements
632:57 - 336 wow so you see you know the
633:02 - possibilities become a lot a lot
633:06 - more now Pascal's triangle one of the
633:11 - things um you know if I just print this
633:14 - out um we can see Pascal triangle
633:19 - here it links into you we can generate
633:22 - Pascal's triangle with permutate with
633:25 - with combinations so I want to include
633:28 - this here because it's an interesting um
633:31 - it's an interesting pattern here but if
633:34 - you just printed this out this is what
633:35 - it is um you see so beyond the triangle
633:40 - it's like understood the zeros for the
633:42 - nothingness and you're always adding the
633:44 - number and the and whatever is next to
633:45 - it to get the one below so then I have 1
633:49 - + 1 is 2 so that's how we get this two
633:53 - because adding to 1 + 1 and
633:56 - then down here I have 1 + two and then
634:01 - that's where I get the three and then
634:03 - here same thing on that side get to this
634:07 - three and then 3 + three get to this
634:12 - six and now let's look at how to use
634:15 - combinations to create Pascal
634:18 - triangle so you might already have this
634:21 - code if you were working along with some
634:24 - of the other assignments and I'm just
634:28 - going to recap here we're going to
634:29 - import
634:30 - math and I'm going to create these
634:33 - variables here n for the number of rows
634:35 - so that way you can change that once up
634:38 - here and you know have all different
634:41 - rows an array for what's going on in
634:44 - each row and another array for spaces
634:47 - because that'll just I think make it
634:49 - look more like a nice triangle otherwise
634:51 - everything just gets lined up on the
634:53 - left side and I don't know I think it
634:55 - loses some of the effect
634:57 - there and with that I'm going to have
634:59 - the space string that I'm going to
635:01 - incorporate here so this is what we're
635:03 - doing here with the
635:04 - spaces um so each time I'm going to add
635:11 - a or append another space to the space
635:14 - string variable so each of these is
635:18 - going to have you know so many spaces
635:21 - and we'll see how that plays out
635:24 - later then I'm going to go through and
635:29 - for everything in range I'm going
635:33 - to
635:35 - um so
635:37 - notice if uh if we go through here just
635:41 - for it still to be a triangle um you
635:44 - know we'll continue so this is the
635:48 - combination formula which might seem
635:51 - familiar by now and there we go so you
635:55 - know we're going through a and b so um
636:00 - you know a things taking B at a time and
636:04 - so therefore you know if B is greater
636:06 - than a that just can't happen and we go
636:09 - through and after all this factorial we
636:13 - just want to make sure we do cast it as
636:15 - an
636:16 - integer so there we go and then I'm
636:19 - going to append that to the row so what
636:21 - we're doing is this for each
636:24 - row and then I'm going to
636:28 - print those
636:30 - spaces and then the
636:32 - row and then I'm going to clear the row
636:35 - notice all that's still in this Loop
636:36 - here so it just goes through this and
636:39 - each time then we're going
636:43 - to create the row print it out but then
636:46 - clear it for the next time so notice how
636:48 - the
636:49 - spaces um our space array just gets
636:53 - larger and larger you know each element
636:56 - has more spaces
636:58 - so we are working backwards there than
637:03 - putting the spaces in so the first row
637:05 - has a lot of spaces and less and less as
637:08 - we go down so when we do this all right
637:11 - let's see eight rows and we run
637:15 - this and we will see eight rows
637:19 - appear and you see the spaces give it
637:22 - that nice triangle angle over here it
637:26 - falls apart a little bit because then we
637:28 - start getting into the double digits but
637:30 - these are minor things relating to
637:32 - spacing um you know if you wanted to
637:35 - change something but there we go so we
637:37 - have Pascal's triangle to eight
637:40 - rows and using the combinations which I
637:43 - think in terms of generating it I think
637:46 - that's a pretty good reliable um
637:49 - manageable way to do that and then from
637:52 - there we can use these numbers for
637:54 - anything we
637:55 - want all right pretty cool so this
637:59 - certification project
638:01 - now
638:03 - and I put this in here for you about
638:07 - creating a deck of cards and there's
638:10 - other ways that other people have done
638:13 - this um I just decided to do it this way
638:16 - to really write out um what cards but a
638:20 - lot of times um and we we'll look at
638:23 - this in some of these examples here but
638:25 - there's a lot of other ways people have
638:28 - like um just the one number or the
638:31 - letter J q k a and um just the letter
638:39 - for hearts clubs Diamond spad H C
638:44 - DS so I decided to write it all out and
638:47 - this is just one way to do this so here
638:49 - we go so I have an array of all the
638:52 - cards of all the
638:54 - suits my R which is going to be the
638:56 - complete deck right now it's empty and
639:00 - uh temp card for
639:01 - now
639:03 - so um notice then I'm just building this
639:08 - deck for a and range cards and B and
639:13 - range
639:15 - suits I'm going to go through
639:18 - and this temporary variable string
639:21 - variable is going to be you know that of
639:27 - that so it's going to be
639:31 - um we have a two of Hearts a two of
639:35 - clubs a two of diamonds a two of spades
639:37 - and then we'll go to a three of Hearts
639:39 - three of clubs Etc and each time that's
639:43 - just going to be the temporary string
639:44 - and then we're going to append that so
639:47 - that the deck has all the cards and we
639:50 - can print this
639:52 - out so when I do this to print this out
639:56 - there we
639:58 - go and as I mentioned a lot of times
640:01 - people might do this just um the number
640:05 - and then one
640:06 - letter that works out nicely
640:11 - um we could do that just as well so
640:14 - here's what I did as some examples of
640:16 - some things you can do and you might do
640:19 - some of these you might take it further
640:21 - but this cell I run this cell and
640:24 - creates the deck that's there and that's
640:28 - going to
640:29 - continue um remember the runtime in
640:34 - collab um is about a half
640:37 - hour um or
640:40 - um about half hour of inactivity maybe
640:43 - 20 minutes um or even if you keep going
640:47 - you know that might go 11 or 12 hours so
640:51 - that code and those variables still
640:53 - exist for a little while so I can do
640:57 - other things in these other cells
641:00 - referencing them and that's going to
641:03 - work so uh in this other cell I just
641:05 - have one thing let's just draw one
641:07 - random card now here's what I have um
641:12 - just as reference print the length of
641:14 - the of the deck here and I'm going to
641:16 - draw
641:18 - a random card and what I have is you
641:20 - know from zero to the length of that
641:24 - deck of
641:27 - cards and remember that's a random
641:29 - integer so pick is going to be a number
641:31 - it's going to be a random integer and
641:34 - then pick one is going to be that
641:37 - particular card so then we'll just print
641:40 - that out you know your card is pick
641:42 - one this if you know um have a game I I
641:47 - don't want to use that card again it's
641:49 - already been picked so I'm going to pop
641:51 - that out of and again I I needed that
641:55 - variable as the index I'm going to pop
641:58 - that out of the deck and then just for
642:00 - reference print the length of the deck
642:01 - again so you see 52 cards here's your
642:05 - card and now there's
642:08 - 51 now this
642:11 - goes um along with the next code block
642:15 - here um I decided to have
642:19 - one cell of just your points and
642:22 - computer points so I can run this and
642:25 - again now those variables exist because
642:28 - now I
642:30 - can uh keep
642:33 - this now the the deck is still there so
642:39 - um right now we
642:42 - have 51 cards and the Ace of clubs that
642:45 - highest card is now not in the deck for
642:47 - right now for our
642:49 - examples we can leave it like that but
642:52 - you could always go back and run that
642:54 - original cell and then generate the deck
642:58 - again so that is possible all right
643:02 - so this this challenge is you know
643:05 - create some card games I just decided to
643:07 - pick a few simple ones but you know
643:09 - there's definitely uh more complicated
643:12 - ones and I I really wanted to be more
643:14 - about the code and not so much about all
643:16 - the different rules for card games here
643:18 - so War you know each put down a card and
643:21 - who has the higher card so um what I
643:25 - have is so pick a so that's going to be
643:31 - the random integer and then the
643:33 - computer's card is going to be from the
643:38 - same deck that
643:39 - index um and we're going to print what
643:42 - the computer's card is and pop that off
643:47 - the array we'll do the same thing for
643:49 - your card pick B random
643:53 - integer um and then your card is a card
643:58 - from the deck with that index here we go
644:01 - print it pop it off the array so now
644:07 - when we
644:08 - compare and you see what I did is just
644:14 - um the uh if your
644:18 - card so each of these remember your
644:23 - card zero um your card is a
644:28 - uh um is a string so index zero is the
644:33 - first character in that
644:36 - string so there you go if it's
644:40 - one then your card is a
644:42 - 10 because that's the only way you know
644:45 - that's the only way one would just show
644:47 - up as the first as the first
644:49 - character J so I'm giving values to each
644:53 - of these so um you know if the first
644:58 - index in that string is one then the
645:01 - value of your card is 10 if it's j that
645:03 - must be Jack the value is 11 Q it's 12 K
645:07 - it's 13 a would be
645:09 - 14 and then everything else it's
645:14 - whatever that first index is and then
645:17 - cast as an integer so you know a two of
645:21 - clubs is going to be a two of of value a
645:24 - three of Hearts is going to be a
645:27 - three there we go so again these are
645:30 - some of the things you know um once you
645:33 - work that out once how to compare you
645:36 - can uh use that so I do this all for
645:40 - your card and then all the same things
645:41 - for the computer card so now each of
645:44 - these have a value so
645:47 - so we have your number and computer
645:50 - number for what cards you have and there
645:54 - we go we just now we just go through our
645:55 - comparison if your number is greater
645:57 - than computer you win and then this is
646:01 - where I have the point values increasing
646:04 - your points you see so I have this once
646:09 - that it
646:12 - initializes and then if you win you get
646:15 - a point if if you lose computer gets a
646:18 - point or it's a tie and it'll print that
646:23 - out so you can run
646:26 - this and you'll see the computer got a
646:30 - seven of clubs and you got a six of
646:33 - diamonds so you
646:36 - lose and the computer gets a point and
646:41 - the idea with initializing the at a
646:43 - separate so you
646:45 - see um the deck was created in a
646:48 - separate code block initializing the
646:51 - points in a separate code block so we
646:52 - can just keep running this for every
646:55 - hand and you
646:57 - see so computer got a jack you got a two
647:01 - computer one again another point and you
647:04 - can run this again look at this you won
647:07 - this
647:08 - one and we can keep going you can keep
647:12 - uh running this there we go and what I
647:16 - have here here is if it ever gets
647:19 - to if the length of the deck is zero
647:23 - then game
647:26 - over all
647:29 - right so there we go and that's just one
647:34 - example of a game um now here's another
647:37 - one um there you go five cards stud so
647:41 - like now this one um I just wanted to
647:44 - display five cards yours in the computer
647:47 - and then
647:48 - um and then take it from there um but
647:53 - there are again um more intricate ways
647:56 - to compare poker hands um you know that
648:00 - gets pretty
648:02 - involved so um you know you can even do
648:06 - things you know drawing cards and
648:08 - switching them out but I just wanted to
648:10 - show here just you know how it prints
648:14 - the computer's cards and how we can do
648:16 - the same thing you know I have a
648:20 - pick um and I'm going to create this
648:24 - random uh you know from the deck now
648:28 - this is also continuing on we're using
648:30 - that same deck so for our purposes this
648:33 - is going to be fine but to really play
648:37 - this I would go back again to that
648:39 - original and then um recreate the deck
648:43 - which ENT you know there we go
648:48 - so I'm picking a random
648:50 - card um and then popping that off the
648:53 - deck so I'm going to do this five times
648:55 - because you know each person gets five
648:57 - so the computer gets five cards printing
649:00 - them out and then you get your five
649:02 - cards and I just had to print who wins
649:06 - so it'll just you know here are the
649:12 - cards and then you can say you know who
649:15 - wins uh
649:19 - so just some interesting things we can
649:21 - do with
649:24 - displaying um
649:27 - now the initial thing said uh you know
649:30 - card games but you know any other
649:32 - gambling here I have um you know
649:37 - initializing that the bank uh this one I
649:40 - put it in a loop so initializing your
649:43 - bank account um is in the same code so
649:48 - then you know your bank account and it's
649:49 - going to print out your bank account
649:52 - equals all right and what you're going
649:54 - to do is you're going to pick a
649:55 - three-digit
649:56 - number
649:59 - and you can change this range here so I
650:03 - kept it as range
650:05 - one um for this first um in instance
650:10 - here and so picking three numbers I
650:14 - could have decided to pick a random
650:17 - integer from uh 0 to
650:21 - 999 but instead I decided to split it up
650:24 - here just because that's the way a lot
650:27 - of lotteries seem to do it so just to
650:29 - show you so you're going to you know get
650:32 - these random integer from 0 to 9 but
650:34 - you're going to get that for one for two
650:37 - for three and then since I want it to be
650:39 - a three-digit number I'm going to say
650:42 - you know 1 * 100 plus 2 * 10 + 3 and and
650:46 - then that'll give it a three-digit
650:48 - number there you go and then there's
650:50 - your winning um these are all integers
650:53 - so then the multiplication and addition
650:55 - works and it's an integer that I can
650:58 - compare so there we go and it's going to
650:59 - print the winning numbers and then you
651:03 - already have your pick up
651:05 - here so if your pick equals that great
651:10 - you
651:10 - win and let's just say I just picked you
651:13 - know maybe you win $500 let's say
651:17 - there we go or if you lose you lose a
651:20 - dollar because that's probably about the
651:21 - cost of the the ticket so I have these
651:26 - commented out
651:30 - um and after all that then it's going to
651:33 - print you know what's in your bank
651:36 - account there we go pick a three-digit
651:38 - number all right uh
651:45 - 456 there we go
651:51 - winning
651:52 - [Music]
651:57 - numbers oh so the winning number was
652:00 - four but it didn't print out the zeros
652:04 - it would have been
652:06 - 004 that's
652:08 - interesting
652:12 - so yeah maybe I'll think about changing
652:14 - that that display
652:17 - so what I have here is then yeah there
652:19 - you go so you played it once and know
652:22 - you lost lost money
652:25 - but I have this that you can change the
652:28 - range like let's say 365 let's say you
652:32 - play every day for a year and I'll keep
652:34 - all of this but then I will comment out
652:37 - all of these because I don't need 365
652:40 - extra
652:42 - lines for whether you win or lose
652:48 - so you see now we can just everything
652:50 - you pick your one number let's say you
652:51 - play the same number every day and you
652:54 - can see that you know if you happen to
652:57 - win you're going to get $500 if you lose
653:00 - you're going to lose a dollar and if we
653:03 - run
653:05 - that
653:07 - so um here we go I'll pick you know
653:11 - 777 that's seems to be oh and look at
653:14 - that so we did win
653:19 - so you know you come out ahead if I I
653:21 - can run this
653:22 - again uh pick a number there we go um
653:29 - 789 and lost every day so
653:33 - $400 minus 365 you know we lost every
653:38 - day or there we go um 23
653:45 - 4 and what's interesting is you can do
653:48 - this
653:50 - um you you can simulate all these
653:53 - different uh gambling
653:56 - situations um you could make it you know
653:58 - the pick four pick six you could make it
654:03 - um you know you could change this to
654:06 - simulate you know the various you know
654:08 - other you know uh Lotto uh Power Ball
654:12 - you whatever you can change this to
654:14 - simulate various uh lottery winnings and
654:18 - you know see how lucky you get um so
654:22 - yeah just interesting one more thing
654:26 - um and I have this just um to show you
654:31 - just one other person online that um now
654:34 - all this is connected to project Oiler
654:37 - pretty cool um and this person put
654:39 - together I'm just going to
654:41 - um show you this link here and you see
654:45 - it's like you know this and now what I
654:49 - just did is I printed out some of these
654:53 - so I I'll show you this so that it's a
654:55 - little bit bigger and easier to see um
654:58 - but each one you know that whole page
655:01 - has you know like 500 lines
655:05 - of poker
655:07 - hands um let's let's take a look at the
655:10 - code for a second here
655:12 - so here if you know if you want to print
655:15 - all that out it's actually fewer lines
655:18 - than I have here uh import the URL
655:21 - Library um I split it up as a separate
655:24 - variable Target URL and then put it in
655:27 - quotes here
655:31 - so there we
655:34 - go um and I'm going to store this as my
655:37 - variable I'll just call data
655:39 - URL li. request.url
655:44 - open there we go and this is one of the
655:47 - ways to just open this and copy things
655:51 - from that page rather than you know
655:54 - store it as a variable here because you
655:56 - could I mean in this case I am I'm
655:58 - storing this data as as a variable but
656:02 - you could also store the whole page or
656:04 - even more but I'm using this variable
656:07 - here um opening that URL
656:10 - and I just included this you can do the
656:13 - whole thing but I just put a limit here
656:16 - uh um and
656:18 - so for line and data so there we go so I
656:23 - could just go through this um I call the
656:26 - variable line because when you do when
656:27 - you print this out what it's going to
656:29 - print out is one
656:32 - line and that's what that's what this is
656:36 - so the one line um when you print this
656:39 - out
656:40 - this doesn't show
656:44 - up um so you get you're going to get
656:47 - that b and the single quote at the
656:49 - beginning you're going to get the back
656:51 - sln and the single quote at the
656:53 - end but then um this is the line that we
656:59 - have and so notice you know each of
657:03 - these represents a card for two
657:05 - different hands of five cards each so
657:08 - the first hand is eight of clubs then um
657:19 - of Spades is that a t for 10 yep
657:22 - probably k for King of Clubs nine of
657:27 - Hearts there we go four of Spades and
657:29 - one two three four five and then five
657:33 - cards for the other
657:36 - hand so now again just print printing it
657:40 - out you could have just gone through
657:42 - there's your simple Loop and and done
657:45 - Loop through it for long line in data
657:46 - print line but what I did is um I wanted
657:50 - to store it as a temporary string and
657:54 - that's going to keep overwriting it so I
657:57 - I this is just for an example here so
657:59 - it's going to keep overwriting it and
658:01 - then later on I just use the last one
658:03 - that came up um but what I did for the
658:07 - limit in the count here so each time it
658:10 - counts it and then if count is greater
658:11 - than limit then it's going to
658:14 - break so you know that that's one way to
658:16 - limit hey I you know this is a lot of
658:18 - lines I just want to print out 10 to see
658:19 - what's going on um and then print out
658:24 - that temp string you know just as an
658:25 - example so this is going to end up being
658:27 - the last one that I that I Loop through
658:29 - but index to because I want zero one and
658:34 - then two is going to tell me
658:37 - that so there we
658:40 - go because it really brought it from
658:43 - here that last line that I took in index
658:47 - too so these are some of the things that
658:50 - you can do in here
658:53 - um you know take each of these and
658:57 - encode it as something give it a
658:59 - value um that might be something that
659:02 - you could do um a lot a lot of
659:05 - possibilities I just wanted to show you
659:07 - you know here's one example of a place
659:09 - that has a bunch of these resources um
659:12 - you know like 500 poker hands here's
659:15 - just one way to read that and display it
659:20 - and grab information from
659:22 - there and you know that's going to
659:24 - continue on
659:27 - the goal here is to make some sort of
659:30 - game more than one if you'd like some
659:32 - sort of
659:33 - gambling uh you know game and part of
659:37 - that is you know looking at the
659:39 - probability and calculating that testing
659:41 - it keeping score and if you do this and
659:45 - you run it lot um you know you can
659:47 - iterate through these then you might
659:50 - realize um you know how much how much
659:53 - money you are losing and you know the
659:55 - benefit of it being just variables
659:57 - instead of your actual bank account so
660:01 - you know seeing the probability and also
660:03 - seeing you know the math of gambling we
660:06 - want to put our our time and our effort
660:09 - and our money toward things that give us
660:11 - a good return like analyzing the data
660:13 - you know betting on it probably not a
660:15 - good investment analyzing the
660:17 - data good investment of your time so
660:20 - that's that's what you want to be able
660:21 - to
660:23 - do so if you've been building your uh
660:27 - notebook along the way this is a chance
660:30 - to check and see how uh It lines up with
660:34 - some of the things we've been doing you
660:36 - know maybe you forgot to put something
660:39 - in or you want to include something more
660:41 - and I'm going to add a few things and
660:43 - just talk about how I would organize the
660:45 - not notebook here all of these uh
660:49 - periodically if it's something major I
660:51 - I'll make this a heading like this so
660:54 - that it shows up in the table of
660:56 - contents and then we can see all the
660:59 - different major things that you'd want
661:01 - in the in your table of contents I have
661:04 - here the first few ways like some major
661:07 - ways to get data from you know a CSV
661:12 - online um or if you want to up load a
661:16 - CSV and so over here you know you click
661:19 - on these and you get
661:21 - to you know some code samples and what I
661:24 - do is I put like sample URLs in there
661:28 - just as um you know a placeholder you
661:31 - maybe can like test it and then you can
661:33 - you know comment out different things
661:36 - you know maybe have a few of the things
661:38 - that you want uh and you know comment
661:42 - this out or add add a different one you
661:45 - know upload because maybe you have
661:47 - you've downloaded it you have it on your
661:48 - computer and you know this creates a
661:50 - dialogue
661:52 - box um or just from a different web page
661:56 - so you know all these uh you know notice
661:59 - we're using pandas you know maybe
662:01 - there's a table on a web page you like
662:04 - so I like to put all these you know all
662:07 - the things we're working with we need to
662:09 - get the data somewhere um read data from
662:12 - other file
662:13 - types um and notice some of these you
662:17 - know if you get the table somewhere and
662:21 - then you have the URL or maybe you store
662:23 - it as a table a good way to put this in
662:26 - is have all this as one step so then you
662:29 - can continue the code you know now that
662:31 - you have it as a table you can do some
662:33 - things with the table here so I have
662:36 - this set up these are some good things
662:37 - like I have as like a document this you
662:40 - might or a notebook that you might want
662:41 - to include as yours and have you know
662:45 - all these references you could always
662:47 - copy the code into something else or you
662:49 - could just work on it from here you know
662:52 - maybe you have you know this code and
662:54 - you you know keep this modify one thing
662:57 - or easily add you know some more code or
663:00 - text in here as needed so you know we're
663:04 - trying to kind of build this like uh
663:07 - nice like notebook uh pre-cal calculator
663:10 - for yourself and you know just here's
663:13 - some of the things you can do um you
663:16 - know another example so again reading
663:18 - data from different
663:19 - places um I noticed all of these I have
663:24 - you know the heading but then over here
663:26 - you know within that heading some of
663:28 - these it doesn't deserve a heading on
663:31 - the table of contents but you know if
663:34 - you get to this you know as example data
663:37 - on a table from a web page and then
663:39 - within here you have other
663:43 - examples you know Tex text but it
663:46 - doesn't need to be a heading and again
663:50 - you can organize the this your own way
663:52 - but this is just my
663:53 - suggestion um trying some different
663:56 - things so you know we put code in there
663:58 - that works and then you can have it to
664:00 - use um you know authenticating the
664:04 - connection if you want it from a
664:06 - spreadsheet you know maybe you have a
664:07 - spreadsheet in your Google Drive and
664:09 - notice this is
664:11 - the uh snippet that works and when you
664:16 - do this on your notebook it'll you can
664:18 - authorize this and connect it to your
664:20 - Google Drive so again do this once and
664:23 - then once you have that you can then
664:25 - reference that
664:26 - worksheet um and get the data from there
664:30 - other file types um especially if it's
664:33 - in the URL notice here this was just
664:35 - called fil name.
664:38 - xlsx and yeah an Excel file that
664:41 - somebody might have put up and within
664:44 - pandas
664:45 - we have the function read
664:47 - Excel so you know they have
664:49 - corresponding functions for other file
664:51 - types too so we have all these um
664:54 - drawing
664:55 - lines so just you know kind of going
664:59 - through what we've we've been doing with
665:01 - the course and you know you might have
665:04 - seen you know you remember the different
665:06 - code that I showed you but here's how it
665:08 - put together like certain parts of that
665:11 - some of these were nice examples as we
665:12 - went through it but here's just a nice
665:15 - uh notebook of stuff that works that you
665:17 - could use you know different ways you
665:20 - might want to just draw lines here um
665:23 - and then you know each of these with its
665:26 - own separate thing and that might be
665:29 - nice and you know show the graph or more
665:33 - elaborate you can have an array of
665:35 - points and that way again here here's
665:37 - the code that you have and you could you
665:40 - know maybe like this comment it out
665:42 - instead of deleting it and you can put
665:44 - another array in if you have um you know
665:47 - some different points that you have you
665:50 - want to draw
665:52 - something
665:54 - um and the triangle so notice the
665:58 - triangle uh gets to the you know it's
666:00 - another heading on the table of contents
666:02 - so you can jump right to it and we have
666:05 - everything here in the
666:07 - Triangle um drawing
666:10 - triangles you know and it'll display it
666:14 - like this
666:17 - and we we just might use that as a
666:19 - reference for all the python trig
666:22 - functions so here we have everything you
666:25 - know if we do it in degrees and then we
666:27 - convert it from
666:28 - radians
666:30 - here complimentary angles all the
666:33 - different things that we were doing and
666:37 - this way you can you know get the S
666:40 - cosine and tangent of various
666:42 - angles you can even keep you know this
666:45 - as an example so you see what you're
666:47 - expecting it to output and then as you
666:50 - change different things here then you
666:53 - can you know update that values I I kept
666:57 - this in here you know uh going through
667:01 - the range of the sign functions just in
667:03 - case you know you might be
667:06 - interested so some of these you know you
667:08 - may use more often than others but
667:10 - you'll have all these here um converting
667:13 - to
667:14 - degrees so we know we have ways to
667:16 - convert to degrees to radians but uh
667:19 - there we go um angles and
667:23 - sides conventional labels because it
667:27 - just gives you that you know again the
667:29 - triangle capital A for angle a lower
667:33 - case a for the side across from it all
667:36 - these things that you can include and
667:38 - you'll have all this I'm incl you know
667:41 - there's a link to this exact uh notebook
667:45 - so you you'll have all this code
667:47 - available to you but you know just going
667:50 - through you know using sign to find side
667:53 - measures using cosine because these are
667:56 - the things as your as your calculator
667:57 - hey you can just you know go in and type
668:01 - these angles um and one of the sides and
668:06 - then remember we went through this that
668:09 - you know the one that you don't know
668:11 - make it zero and it'll calculate it for
668:14 - you
668:16 - side measures inverse to find angle
668:19 - measures this one you know happen to
668:22 - leave blank for the A and C that you can
668:24 - put in
668:25 - there unit
668:28 - circle just different things you might
668:30 - want to use or display or use this code
668:33 - to plot a circle for different
668:37 - things there we go the showing the trig
668:42 - triangles animated unit circle if you
668:45 - like that you can run this code
668:47 - Pythagorean theorem and then just
668:50 - showing the different
668:52 - uh um X and Y values again some of these
668:57 - you may use more often than others but I
668:59 - wanted to include some of these uh just
669:03 - in case there you go converting radians
669:05 - to degrees and of course you know uh
669:08 - python has that built in you can just
669:10 - you know convert from radians to degrees
669:12 - remember we were doing this earlier that
669:16 - you have
669:20 - um you see math. radians so you take
669:24 - that angle and convert it to radians and
669:26 - the same corresponding math. degrees if
669:29 - you have an angle that already is in
669:30 - radians so we have that but then it's
669:34 - good to include this just to see you
669:38 - know that is our ratio so you know
669:42 - here's what we can do
669:48 - um degrees to radians graphing trig
669:52 - functions and again you have other
669:53 - graphing utilities but again might be
669:56 - useful to be able to do this so we
669:58 - include this in here graphing the circle
670:01 - in different ways graphing
670:05 - sign
670:08 - and all
670:10 - these
670:13 - so now as you see in this all this is in
670:18 - the table of contents so you know some
670:21 - of
670:23 - these you might have you if you go to
670:26 - the table contents you may or may not
670:28 - you know need to jump to these but we
670:31 - have all these so you know what you want
670:32 - to jump to graphing and maybe if you're
670:36 - looking to calculate something you might
670:38 - skip down to all these different graphs
670:42 - um sine wave transformations
670:47 - you know and then giving an interaction
670:49 - an
670:52 - interactive interactive sine waves so
670:55 - these are you know now you have you know
670:58 - interacting sine waves you know you
671:00 - could jump right to this and adjust some
671:03 - things and you know see some
671:06 - interactions
671:07 - here
671:10 - Tides as this one example
671:15 - tides and then you know you can make you
671:19 - know you could use use
671:21 - this um we'll look at some other uh uses
671:26 - of data in in in a little
671:30 - bit law of signs law of
671:33 - cosiness area solving any triangle some
671:37 - of these you might jump to more often
671:39 - triangle from
671:42 - points and there we go
671:46 - so you know these are some of the things
671:48 - you might jump down to hey I have three
671:49 - points can I draw a triangle all the
671:52 - different Matrix
671:54 - operations so again you see certain ones
671:56 - all this under this heading and then you
671:59 - have text
672:01 - here for each individual
672:05 - one so you can jump to that and then
672:07 - just you know look at which ones you
672:09 - want to
672:10 - use
672:13 - um and then you know here we go again
672:16 - from the unit from the table of
672:19 - contents an a quadratic equation from
672:22 - three points so you'll have this full
672:28 - example solving a system of
672:34 - equations inverse
672:36 - Matrix and you know you can jump down to
672:39 - this different ways of encoding and
672:41 - decoding messages the non-matrix method
672:45 - we have
672:47 - this and you know this
672:50 - is something you could use and then if
672:53 - you wanted to you could you know change
672:56 - I think think this one had just a very
672:58 - simple Cipher and you could change this
673:00 - one so we have
673:03 - this
673:04 - um and then the Matrix method of
673:07 - encoding even with a little bit of
673:09 - direction here every two characters
673:10 - becomes a 1x two Matrix multiplied by a
673:13 - 2X two to encode it or decode it
673:16 - so you know there we go all the
673:19 - different steps encoding and decoding
673:23 - and again you can copy these change you
673:25 - know whatever Matrix you use
673:28 - and you know you have your useful in
673:31 - coding and
673:33 - decoding code complex numbers of all the
673:36 - things we did with complex numbers you
673:39 - know I is aare of ne1 I I wanted to
673:42 - include just these two things um
673:46 - calculating and displaying because again
673:49 - you might you know just it might be a
673:51 - nice refresher if you don't use this and
673:53 - want to use this you know how to create
673:55 - a complex number how
673:58 - to uh break out the real and the
674:00 - imaginary parts and display those um
674:04 - another way if you just want the complex
674:06 - part then just still make or you just
674:09 - want the imaginary part you can still
674:12 - make the you know complex and just the
674:14 - real part part is zero so we have these
674:18 - just some things graphing on real and
674:20 - imaginary so you know how you can import
674:23 - these labels um you know this one I kept
674:26 - it there but commented out any
674:30 - title creating a complex number and then
674:33 - again parsing out the real for x and the
674:36 - complex for and the imaginary for y and
674:39 - plotting
674:40 - it so some useful things maybe you don't
674:43 - come across complex they're plotting it
674:46 - often but maybe there's some fractal you
674:48 - want to do so this could be the basis of
674:51 - what you work with here and you would
674:54 - put your fractal uh um here in the
674:58 - points you'd somewhere in here you would
675:01 - change
675:03 - that and I included just the full mandle
675:07 - br um that uh that does
675:12 - work so just in case you know um and
675:17 - what I did is I I I used uh chat GPT
675:22 - to um get this and then I tinkered with
675:26 - it a little bit so then here's some just
675:29 - you know alternate uh values that might
675:33 - be
675:36 - interesting so then we're going to get
675:38 - into some other things like projectile
675:42 - motion um
675:45 - so in addition to all these things that
675:48 - we currently
675:51 - have the next few videos we'll look at
675:54 - projectile motion some things related to
675:56 - that some other more useful um trig
676:01 - functions um logistic growth all kinds
676:05 - of things few physics applications and
676:08 - we'll look at how you can just add these
676:11 - to your to your code here you
676:15 - know you know might as well you know
676:17 - make it one unified notebook as a
676:20 - reference so in in all the things that
676:22 - we have so far you can add some other
676:25 - things and some things that I show you
676:27 - and may you know whatever formulas you
676:29 - come across and hey I might use this
676:30 - formula pretty often um there you go
676:33 - write some code and and add it to this
676:36 - and you know you're you're developing
676:37 - your notebook calculator so hopefully
676:41 - this gives you a good uh sense of you
676:44 - know what it might look like so far and
676:47 - the next few parts we're just going to
676:49 - add to
676:51 - it so one of the other
676:54 - useful formulas and this collection of a
676:57 - few formulas here relates to projectile
676:59 - motion now we have projectile motion
677:02 - formulas the quadratics that if I'm
677:05 - launching something straight up in the
677:07 - air we can calculate you know height and
677:09 - everything like that but this depends on
677:12 - the angle so now we introduced Tri Tri
677:15 - to this this depends on the angle that
677:16 - we launch something and we see here from
677:20 - the formula you know
677:22 - v^2 uh times the S of 2 Theta
677:27 - so velocity that's the initial velocity
677:31 - of whatever we're launching and remember
677:33 - this goes for any projectile you know a
677:36 - ball that you kick uh from the ground or
677:40 - something you throw or toss in any way
677:43 - uh something flying something you know
677:45 - shot out of a cannon or
677:48 - whatever you know we have an initial
677:50 - velocity and then we have an initial
677:52 - angle so now if we notice and and
677:56 - certainly then divided by G for Gravity
677:58 - so if we notice then that if Theta you
678:02 - know it's a sign of 2 Theta so if Theta
678:04 - is
678:05 - 45° or Pi 4 radians then 2 Theta would
678:09 - make it 90° and then the sign of 90 is 1
678:13 - so that's the optimal angle we can we
678:16 - can see this that you know you're not
678:18 - going to get higher than this you know a
678:19 - sign value of one
678:22 - so great now we know the optimal angle
678:25 - but then any other angle we would just
678:27 - put it in this formula s of 2 thet times
678:30 - the initial velocity squared and I I I
678:34 - like the default going to you know uh
678:37 - standard units so velocity would be in
678:40 - me/ second and here's all of this
678:42 - running you know running through the
678:44 - code initial velocity in me/ second
678:47 - initial angle and we can put this in
678:50 - radians so that we don't have to convert
678:52 - in the formula but you could always have
678:54 - it in degrees and throw another line of
678:56 - code here to convert to
678:58 - radians um and then the gravity in
679:02 - meters per second squared so we'll keep
679:04 - that as a as a constant here if for
679:08 - whatever reason you wanted to change it
679:09 - to feet per second it for velocity then
679:14 - Gra it you'd have to change according to
679:16 - that you know make it 32 but nonetheless
679:20 - here we have then the
679:22 - range we
679:24 - have V ^ 2 time the S of 2 Theta and
679:28 - notice a for the angle all that divided
679:31 - by gravity and then we're going to print
679:34 - three decimal places is fine so then you
679:36 - know I I like doing the formula here and
679:38 - then the print statement next you know
679:41 - round it to three decimal
679:42 - places so that gives the range of a
679:46 - projectile and then
679:48 - supposing the ground is sloping at an
679:51 - incline so we'll call the angle the
679:54 - incline
679:55 - B and this is the formula notice
679:58 - slightly more
679:59 - complicated
680:01 - and we can get into this s of 2 Theta
680:06 - minus B minus a s of B and then cosine
680:10 - the denominator now
680:11 - becomes gravity times the cosine squ of
680:14 - B all of
680:16 - this right and we have you know very
680:20 - similar we can have this initial
680:22 - velocity and I just picked values to
680:24 - plug in here but you could always change
680:27 - these and I this one as just an example
680:31 - I made um the slope just you know
680:36 - instead of Pi ided 4 you know this
680:38 - ultimate I did pi divided 4.1 make it a
680:42 - slightly lower angle so you know we're
680:45 - not running into the slope
680:48 - there and here's the formula notice with
680:50 - the extra
680:52 - parenthesis and there we go so we have
680:55 - you know all these that we can adjust
680:57 - and again useful formulas um you can
681:00 - figure out the range of of different
681:03 - things so this one's going increas you
681:05 - know at a slope that's an angle now on a
681:10 - slope
681:11 - declining and so declining I just called
681:14 - it d
681:15 - angle D from the
681:16 - horizontal slightly different formula
681:20 - and we have this um you know notice some
681:24 - similarities but different Formula 2 *
681:28 - initial velocity squar time the sin of
681:30 - th times the cosine of theta minus
681:32 - D and there we go so that's D is the
681:37 - angle of the angle of depression going
681:40 - down from the horizontal and we can plug
681:42 - in here again I just picked to an
681:46 - angle and here's the formula for the
681:50 - range you know all this just written in
681:56 - Python and I might want to find out the
681:58 - maximum height of a projectile because
682:01 - that's interesting maybe it's something
682:03 - I need to get over or maybe it's you
682:06 - know um I don't know a roof that I need
682:09 - to stay under so the idea is you can use
682:13 - these um and notice this one sin squar
682:16 - of theta in the numerator and then 2G in
682:19 - the denominator just slight variations
682:21 - so for each of these you know formulas
682:23 - you might happen to use you know if you
682:25 - happen to um you know work on uh you
682:29 - know I don't know designing something or
682:31 - planning out something then you know
682:33 - some formulas you might find useful and
682:36 - then you can have these built in you
682:38 - know change a few numbers and
682:42 - calculate so
682:45 - you know there you go who knows maybe if
682:46 - you have some sort of model rocket you
682:49 - can uh you can predict where you know
682:51 - where do I want this to land and we get
682:54 - um you know what initial velocity what
682:56 - angle and we can adjust
682:58 - that so you know these These are the
683:01 - three you know related to projectile
683:03 - motion and you can include these then in
683:06 - your overall
683:09 - notebook so here's one with a
683:12 - complicated formula but a brief
683:15 - explanation if you want to calculate the
683:17 - number of hours of
683:19 - daylight on any given day of the year so
683:23 - here's one um we'll take the latitude in
683:26 - degrees because normally north latitude
683:29 - south latitude um will reference them
683:32 - that way this one um not only is it less
683:35 - accurate Beyond 65 degrees but actually
683:38 - the formula doesn't really account for
683:41 - that so keep it you know 65° or less um
683:45 - it you you'll see at that point the
683:48 - hours and then you know it gets more
683:49 - extreme around the polls um and so
683:54 - capital L is the degrees latitude
683:56 - capital J day of the year and seever I
684:01 - have the link here of where I've got
684:02 - this formula it was an ask Dr
684:05 - math article from years
684:10 - ago so just here's the several steps
684:13 - calculating the
684:15 - you know taking into account the angle
684:17 - of the Sun the angle of north latitude
684:20 - and you go down here and then you're
684:22 - going to print the daylight hours
684:24 - rounding it to uh one decimal place is
684:27 - probably
684:28 - fine so there we go we get um you know
684:33 - just in case you want to plan out oh how
684:35 - many days of sunlight or how many hours
684:39 - of sunlight do I get on a particular day
684:41 - and again one of the other good ones you
684:43 - can add to to your ongoing notebook of
684:46 - formulas here's another good useful
684:49 - formula logistic growth and kind of
684:53 - connects with exponential growth where I
684:55 - have some sort of limit and that's what
684:58 - C in this numerator is the carrying
685:01 - capacity or the maximum y value so you
685:05 - could have a population that grows and
685:08 - there's only really a certain amount
685:10 - that the environment can sustain or you
685:13 - know any anything that that grows but
685:15 - does have a limit and then at some point
685:17 - it will stop growing as quickly it
685:20 - doesn't completely Flatline but there is
685:22 - a definite horizontal ASM toote there
685:24 - and it's zero so we're usually talking
685:26 - about things we can count so there is a
685:29 - horizontal ASM toote at y equals z we're
685:31 - not going to be talking about negative y
685:32 - values here there is a horizontal ASM
685:35 - toote at yals C which is that carrying
685:38 - capacity and what we have is in this
685:42 - formula a in this denominator
685:45 - so if that a value that a value will
685:48 - always be
685:49 - positive and we see that we're doing C
685:53 - divided by something so um we we can see
685:57 - that as this denominator gets really big
685:59 - then that's when we get closer to y
686:00 - equal 0 but this denominator could get
686:03 - small and then that's where we get to
686:05 - that carrying capacity but we see it
686:07 - will level off this negative in the
686:10 - exponent is a part of the formula and
686:13 - then B
686:15 - if B
686:16 - is positive then we're talking about
686:20 - growth and if B is negative then we're
686:24 - talking about Decay so you could these
686:27 - are the asmd does but you could have
686:29 - something that decays you start out
686:31 - closer to yal C and then the population
686:35 - dips down to you know closer to zero so
686:40 - this is the formula logistic logistic
686:42 - growth you know growth within limit
686:45 - and here we have let you know we'll
686:48 - import some things cuz we're going to
686:49 - graph this that would be the interesting
686:50 - thing to see what this graph looks like
686:53 - so you know we'll put in I just put in
686:55 - some nice except for this one integers
686:59 - um you know some C value Cal 10 AAL 2
687:03 - whatever it is it's always positive and
687:05 - growth I wanted to make it a growth
687:07 - function so I just made it3 a lot of
687:09 - times this is the rate but that's a good
687:13 - way to understand but there are some
687:15 - situations where the rate's probably not
687:17 - the best definition but there we go so
687:20 - this would be something that you know we
687:22 - do have growth but a limit
687:24 - um now giving a function like this that
687:28 - you can graph for all sorts of different
687:30 - logistic growth formulas I mean you
687:32 - could have logistic growth like some
687:34 - small numbers here I had like 10 a is
687:36 - two you could have a and b be even tiny
687:40 - decimals you could have C be a huge
687:42 - number so we want we want to capture
687:45 - that Trend so what I did here is in our
687:49 - graph to find minimum and maximum X
687:53 - values so there is an inflection point
687:56 - in the middle as
687:58 - we as this changes so what we're going
688:02 - to do is you know you probably won't
688:03 - need to get anywhere near a thousand but
688:06 - I'm going to run through this Loop and
688:07 - then I'm going to plug this in you know
688:10 - once we have our values here um the X
688:13 - Val I just called it X
688:15 - test so this is the function then that y
688:20 - value all right if B is greater than
688:22 - zero we're talking about growth so then
688:25 - if Y is greater than C over2 because the
688:30 - inflection point will be right in the
688:32 - middle so if it's a growth formula and
688:34 - then we've gone be the yv value has
688:36 - grown beyond that inflection point we're
688:38 - about halfway so then what I did is uh I
688:43 - did multip * five five times that x
688:46 - value that actually seemed to be a
688:49 - pretty good um estimate you know get
688:52 - that round it convert it to an integer
688:55 - that's my X maximum and then my X
688:57 - minimum um they're not always centered
689:00 - right around zero but I just did 0 minus
689:02 - x max again really good it seems to
689:05 - apply to a lot of different things you
689:07 - know if you if you're working on
689:08 - something you can always um tweak this a
689:11 - little bit but it's a really good
689:12 - starting point so so it'll just go
689:15 - through this and as soon as we get
689:17 - beyond that inflection point you know
689:19 - now I have X minimum maximum and I'll
689:21 - break the other one is if it's actually
689:25 - a Decay formula so if B is less than
689:27 - zero and Y is less than that inflection
689:30 - point so if that's the case then we'll
689:33 - go through the same thing you know I
689:36 - want my X maximum my X minimum and then
689:39 - break
689:41 - so again that that should work for most
689:44 - situations you encounter and then if you
689:46 - look at your graph you're like hey I
689:47 - want to tweak it a little bit then you
689:48 - can modify some things um you could even
689:52 - you know I just commented these out but
689:53 - you could even um you don't even have to
689:58 - uh count this out if you want to
690:00 - overwrite that you just you know put
690:02 - here x minimum and X maximum and
690:05 - whatever you calculate up here it'll
690:06 - overwrite it as your Dimensions so y
690:10 - minimum remember ASM toote y equal 0 so
690:14 - just put y = -2 um just so that we can
690:17 - see the axis it's not right at the edge
690:20 - y maximum yep again that ASM toe plus
690:23 - two points uh like we've done before in
690:26 - graphs um the difference between the
690:28 - minimum and maximum times 10 and then
690:31 - that should give us enough points to
690:32 - plot a nice smooth curve you know import
690:35 - a numpy so Lin space and our graph um
690:40 - you know made it blue I like blue so
690:44 - here we are now this y
690:47 - value so you know X just X that's my x
690:52 - value going looping through that array
690:54 - and my yv value here all right and if we
690:59 - plot this then we see for those points
691:03 - we get that Trend and then there's 10 we
691:06 - can see that you know we see enough of
691:09 - this graph that we see it level off at
691:11 - zero we see it level off at 10 and and
691:14 - we see about where that inflection point
691:15 - is you know that's what we want to look
691:17 - at this is the logistic growth here and
691:20 - then if we wanted to if we wanted to
691:23 - make B something
691:26 - negative and I'll just do everything and
691:28 - just change it negative and if we run
691:31 - that then we will
691:34 - see
691:37 - now slight of hand I actually
691:41 - just change this and
691:45 - for making it
691:47 - negative it will switch it and you see
691:51 - that's that's when B is negative so it
691:53 - starts at a higher number and then gets
691:56 - lower but because
692:00 - the um X Min and x max ended up being
692:04 - really close it was giving an error so I
692:07 - added this other bit that
692:10 - if AB the absolute value and I rather
692:13 - than just making it equal I just wanted
692:15 - If I subtract x maxus x Min giving me my
692:19 - range if if that's too small
692:23 - then the absolute value of that would be
692:26 - I just said less than 20 because then if
692:29 - it is less than 20 then I'll just make X
692:31 - Min -10 and X maximum 10 so that's you
692:36 - know I like that as a nice standard
692:38 - window anyway so we're going to
692:41 - calculate it but if it ends up being Too
692:44 - Close you know you're not going to see
692:46 - the effect anyway so then we would
692:47 - overwrite that and then we would get
692:50 - this and these are ones where you can
692:52 - see hey maybe you wanted you know you
692:54 - want to see more of this that you have
692:58 - um you know you want to see you know
693:00 - instead of stopping at 10 I want to see
693:02 - it get close to the x-axis and it wasn't
693:04 - perfectly centered around 0 so you know
693:07 - I want to get it closer to that y equal
693:10 - 10 you could always do this knowing that
693:13 - we're going to end up invoking this one
693:16 - then you could change it here and make
693:19 - it you know
693:21 - -20 and you could make that positive 20
693:26 - might not even have to make it as as big
693:28 - and we can run
693:32 - this and you see you just make that a
693:35 - little bit more and you can really see
693:37 - it get to that horizontal ASM toote and
693:41 - then it'll even off from there
693:44 - and then if we made the window even
693:45 - bigger you would see the extent of this
693:48 - so you see this one starting from high
693:50 - and then getting low that's when B is
693:52 - negative so you know it just goes back
693:55 - to this negative B
693:58 - value so there we go logistic growth you
694:01 - know we can we can use this for planning
694:03 - a lot of things lot of population and
694:06 - carrying capacity and you know sometimes
694:08 - even Investments um you know you can use
694:11 - this sometimes um things like uh you
694:16 - know um sharing information things go
694:20 - things start out really quickly um that
694:23 - would be definitely a a growth model
694:25 - positive B value but things could start
694:27 - out really quickly and then by the time
694:29 - everybody knows this information you
694:30 - know it can only spread so much or you
694:33 - know uh business saturation you know PE
694:36 - companies open so many businesses but at
694:38 - some point they're everywhere and then
694:40 - they can't open as many as quickly so
694:43 - you know there we
694:45 - go let's talk about limits and we got a
694:49 - glimpse of this from before we saw the
694:53 - logistic uh functions approach an ASM
694:56 - toote and so we could say the limit of
694:58 - that function the Y value that it can't
695:01 - get to but it gets really close to the
695:04 - limit of that function would be this
695:06 - carrying
695:07 - capacity um and a lot of times you yeah
695:09 - you can just put something in a graph
695:11 - and see the limit um you know even if it
695:14 - can't get exactly to a value you know
695:16 - what does it get close to so here's an
695:19 - example of a really interesting
695:21 - limit connecting uh preal with with
695:26 - Calculus so if we graph these are going
695:29 - to set the dimensions and then this is
695:31 - the graph we're going to plot here so s
695:36 - of x / X
695:39 - now we know that there's at least one
695:41 - value there X can't be zero so what
695:43 - happen happens when X is zero but if we
695:46 - take a look at this
695:47 - graph we can still plot it it will still
695:51 - plot that and go right around that
695:53 - notion that you know it can't exist here
695:57 - and you might not even see you know it
695:59 - doesn't even display an error you you
696:01 - know most graphs you won't even see uh
696:04 - the difference because it's really
696:06 - microscopic but exactly at x equals zero
696:09 - this doesn't work but we see that the
696:14 - value of that looks like when X is zero
696:17 - Y is one so you know the value of this
696:21 - when you know when we get to uh you know
696:24 - around zero is One S of 0 over Z
696:29 - but what if I just actually try that
696:31 - value so we see we see the value down
696:37 - here if I have everything else that I
696:41 - just ran that's still in the short term
696:43 - memory of the Google collab for a few
696:45 - minutes so what if I add this you know x
696:49 - value of zero and then I just print the
696:52 - value of that sine of x /
696:56 - X and I'm going to use this x
697:00 - value you see error and it'll say zero
697:04 - division error now certainly if I you
697:07 - know put any other value in there it'll
697:11 - give me the value that's fine but I
697:15 - can't do it at
697:20 - zero yep gives me the
697:22 - error so I'm not here's how I'm going to
697:26 - address
697:27 - it I'm going to assign this difference
697:31 - here and this difference can be any
697:34 - number but let's make it really tiny
697:37 - like Point one's fine I can make it
697:40 - 01 so now I know that X can't be zero
697:46 - and maybe I'll still put this x value
697:49 - down
697:53 - here just to not have to scroll up again
697:57 - so that x value is zero I'm going to
698:01 - make this difference here so a little
698:03 - bit to the right because if I if I'm
698:06 - looking at the graph if I add something
698:08 - to this x value it's a little bit to the
698:09 - right of the other point so X Value Plus
698:12 - the difference or a little bit to the
698:14 - left x value minus the difference
698:17 - now let's print these two values
698:20 - here and we
698:22 - see they actually match up really well
698:26 - down to you know many decimal places I
698:30 - could even make this
698:33 - difference you know well if they match
698:35 - up here they're going to match up there
698:37 - but the interesting thing with this is I
698:39 - can make that difference a tiny tiny
698:42 - number and look at that it it's so close
698:45 - that it rounds it that they're both
698:47 - one this tiny tiny difference is so
698:52 - close that that's why it didn't give an
698:54 - error on the graph that we we could you
698:57 - know we just call it one which it really
699:00 - was one notice when I got to you know
699:03 - even
699:06 - 0.01 it's still very close to 1. n999
699:11 - eight really close
699:14 - but you know I I would certainly round
699:15 - that to one but you know it's far enough
699:19 - that it'll give me all those decimal
699:21 - places and you see if I make it even
699:23 - closer then we get this this limit and
699:25 - this is the notion of the limit here
699:28 - that you know this works because if I do
699:31 - this from the left and the right then
699:34 - they are different
699:36 - values now if I just went back and you
699:39 - know never mind
699:42 - sign um
699:44 - what if I just said you know like 1
699:49 - /x
699:51 - now that
699:53 - one you
699:55 - see this middle line that's red that's a
699:58 - weird glitch here that it should just
700:02 - display that as the the axis um but you
700:06 - see x c be zero here but then it
700:08 - approaches from the right and the Y
700:11 - value gets really big it approaches from
700:12 - the left the Y Val gets really small
700:16 - and neither neither the twen shall meet
700:19 - so I can say that there's no limit like
700:21 - that just won't work I can't you know
700:23 - even if I try to make it an approximate
700:25 - value it's not going to do us any good
700:28 - so we see some interesting things like
700:30 - that where we have you know a limit that
700:33 - you know this limit does not exist
700:35 - because it's different from the right
700:36 - and the left whereas that you know s of
700:40 - X um cosine ironically also works like
700:47 - that um does not match up very
700:55 - nicely you see I right at
700:58 - zero this vertical line is actually not
701:01 - a not a value this it does not exist
701:04 - here so yeah cosine and a lot of them
701:07 - you know from the right from the left
701:09 - does not you know does not match up but
701:12 - our sign value
701:13 - matches up very
701:18 - nicely as one of
701:21 - many functions that if I have something
701:26 - that it can't exist exactly at this
701:27 - point but anything even really close
701:30 - works and if I go a little bit to the
701:32 - right a little bit to the left I get the
701:34 - same values then we can say this limit
701:37 - exists and in fact that limit is this
701:38 - number so I can't plug in zero and get
701:42 - one but the limit as X approaches Z is
701:45 - one and this you know you could graph a
701:49 - lot of things just straight up put it
701:50 - into a graph and see what it looks like
701:53 - but then you also have this notion here
701:55 - of testing the right and left values you
701:58 - know whatever function you have and then
702:01 - you can just test the right and the left
702:02 - values you know adjust the difference
702:05 - and then see what see what it does so
702:07 - this is really there's so many things in
702:09 - calculus that once you throw in you know
702:11 - the actual graphing utility or writing
702:14 - code um a lot of it just falls into
702:16 - place because you're just going to you
702:17 - know run it and see what it looks like
702:20 - so um you don't have to memorize all
702:22 - these limits but you know the more you
702:24 - work with them the more you'll get
702:25 - familiar with them and this is going to
702:29 - start connecting us with some of the
702:31 - things that we'll do in
702:33 - calculus so here's something that you
702:35 - might not have thought about doing on a
702:38 - calculator or a notebook but factoring
702:41 - trig functions and and as an example you
702:44 - know we probably you're probably
702:47 - familiar with it uh sin squar plus
702:50 - cosine squals one so this function here
702:54 - and this is just what we need to import
702:56 - import from Senpai import everything and
702:59 - then I'm going to just Define these two
703:01 - symbols you could Define more you could
703:03 - make them A and B whatever um and I keep
703:06 - this just to make sure that it prints
703:08 - out nicely and all of these you don't
703:12 - have to use a print statement it's just
703:14 - the last line of code is what it'll
703:17 - output so I commented out all these this
703:19 - is what it's going to display so if you
703:21 - do something like this trig simp sin squ
703:24 - plus cosine
703:25 - squar then it outputs
703:29 - one and all these things it can you know
703:33 - the fact that it can Factor this you
703:34 - know a lot of times you know I tell my
703:36 - students you know oh at this point the
703:39 - calculator won't help you oh but your
703:41 - Google collab notebook will help you um
703:45 - so you know we can just do this trick
703:47 - simp I wanted to show a few of these you
703:49 - see it'll do that
703:51 - Pythagorean
703:53 - identity and then it will also do this
703:56 - one 1 plus coent squared and if we run
704:01 - that see it's very interesting it does
704:05 - it it sometimes will output secant uh
704:08 - cosecant square but for the most part it
704:10 - wants to do everything in terms of s and
704:12 - cosine
704:13 - so 1/ sin squ is what it'll do and you
704:17 - know you you might hopefully remember
704:20 - that that's cant
704:22 - squared um you know the same thing here
704:24 - if we take a look now also
704:27 - um even if I comment even if I leave
704:31 - this one it it might run this but then
704:34 - this next line overwrites it so we won't
704:36 - see so you see if I do like one over
704:39 - secant you know not squared if I just do
704:42 - one over secant
704:43 - and I run
704:45 - that you know it did that it will give
704:48 - me cosine so you know it likes to put
704:51 - everything back into s and cosine but if
704:54 - I do one over
704:57 - cosine it won't give me seant it'll give
705:01 - me an error oh I also because I put
705:05 - no um that will definitely get you an
705:08 - error but you see one over cosine it
705:10 - just returns one over cosine it won't
705:13 - put it back to seant so I'm going to in
705:17 - in this notebook that um that I will
705:21 - will share with you I'm going to leave
705:23 - these here as you know some some notes
705:27 - and reminders and notice this it's that
705:30 - same function every time trig simp um
705:33 - because it really wants to simplify so
705:36 - as we look at
705:38 - this you know it it wants to simplify
705:41 - and in Python perspective that goes back
705:44 - to S and cosine so you see in terms of
705:47 - simplifying um I won't even uncomment
705:50 - this but this one sine of x + y that's
705:54 - simple enough so no this won't work it
705:57 - won't if you do that it'll just return s
705:59 - of X+ y but sin of X+ y equals
706:04 - this sin of x * cosine of x plus cosine
706:09 - time of x * s of Y so if you run
706:15 - this it will give you the S of X Plus y
706:18 - so you see it goes in that direction of
706:21 - simplifying because that's what the
706:22 - function is trig simp it will simplify
706:25 - it so if you put in the simplified
706:27 - version it won't make it more
706:29 - complicated um because you know
706:32 - certainly you know any simplified
706:34 - version you put there's a few ways to
706:36 - make it more complicated and it won't do
706:38 - any of them so you know you put this s
706:42 - of x sign y there we go
706:45 - um so if you want to do it the other way
706:48 - you know you're kind of out of luck
706:50 - there and in the same way put that
706:54 - comment back in in the same way it
706:59 - will you know s over
707:03 - cosine and when I run this it will
707:06 - simplify that that's pretty
707:07 - straightforward s cosine tangent but if
707:10 - I ran tangent it won't break it down
707:14 - into s and cosine and you might know
707:16 - from factoring trig functions maybe I
707:19 - have tangent I want to break it down to
707:20 - sign and cosine it won't do that now
707:24 - this would be like in conjunction with
707:26 - other things you're doing or maybe to
707:28 - check things you're doing so you know
707:31 - the fact that some of these you know can
707:34 - I take tangent right in s and cosine
707:35 - that might be you know a good way you
707:38 - know you'll know how to do that and you
707:40 - know you can use uh some of your brain
707:42 - not right code for all of it but there
707:45 - you go it'll it'll simplify that um the
707:49 - weird thing is the half angle formulas
707:51 - it won't do it neither so now this is
707:55 - the simplified version so I I would
707:58 - expect that it wouldn't complicate it
708:00 - but
708:01 - this should simplify to tangent of X
708:04 - over2 and it won't do that so the half
708:07 - angle formulas is for some reason and
708:09 - I'll keep that in there to remind you
708:11 - for some reason that just not buil it
708:12 - who knows maybe another version but yes
708:15 - the double angle formula it
708:17 - will and once again sine of 2x uh
708:20 - remember the one thing you know it'll
708:22 - it'll display it nicely here um you know
708:25 - the tangent of X or or this but when you
708:29 - put the input you have to remember these
708:31 - multiplication symbols you know um you
708:35 - know for Python and you have to remember
708:37 - you know the X you know for the exponent
708:41 - so um s of two you know s of 2x no but
708:45 - then you see if we go to this
708:49 - one that does simplified to the S of 2x
708:51 - so it will do that and you see simpai it
708:54 - will output that nicely sine of 2x but
708:58 - anytime here you have to put the
709:00 - multiplication symbols in still need
709:03 - that python
709:05 - syntax so we have
709:08 - this notice the other double angle
709:11 - formula uh I didn't do all of them here
709:14 - as examples but it will do all of the
709:17 - double angle
709:19 - formulas and you see
709:22 - this um will simplify the tangent of 2x
709:27 - nice um all these we'll just run through
709:31 - a couple more here trig simp so um and
709:36 - notice this one I I also included just a
709:39 - reminder so this sin of X Plus the sign
709:43 - of Y it won't do but it will do this one
709:47 - and simplify it down to
709:51 - that and notice it just put 1.0 times
709:55 - this um you know that's fine but yeah it
709:59 - will simplify this more complicated part
710:03 - and break it down into the S of X Plus s
710:06 - of
710:07 - Y so pretty cool but it won't it it
710:10 - won't take that and make it more
710:12 - complicated and even just you know one
710:16 - more um you know one more uh product
710:21 - just one more formula
710:23 - here shift enter and look at
710:28 - that you good
710:33 - times good times
710:35 - so you could um you know keep all these
710:40 - you could you know put some other ones
710:41 - in there but uh one of the things you
710:44 - know if if you're working on this in
710:46 - conjunction with um you know other other
710:49 - problems in the book to simplify you can
710:51 - use this to check or you could try it um
710:54 - you know put everything into
710:57 - one and see if it works you know hey I
711:00 - need to simplify everything on this side
711:02 - of the of the equal sign and do it trig
711:06 - simp give it a try see see if it
711:08 - works so there we go some good trig
711:12 - Factor ing for you so here's a bonus
711:15 - because remember we're building this you
711:17 - know Resource Center here Google collab
711:20 - one of the other things you can do and
711:22 - we'll do some math to this too is find
711:25 - all the elements of the periodic table
711:28 - so you know we import these modules for
711:32 - some things we're going to do and
711:34 - remember you can just you know run
711:36 - this then you don't have to do the
711:38 - import every time um we can re read this
711:42 - data that we we use and you know uh this
711:45 - guy Adam me he posted this so he's the
711:48 - one that created this you'll see the
711:50 - credits at the
711:51 - end you know run that and now that we
711:54 - have this hey we can display the first
711:56 - five rows
711:58 - um or the first or the first 20 and we
712:04 - see you know we can display the heading
712:07 - we can um not put a number in here
712:10 - remember and then we just get the first
712:11 - five put any number you know especially
712:15 - data sets you're not really familiar
712:17 - with how big it is you want to just get
712:19 - a sense of this um and then so this is
712:23 - all the headings but let's say we want
712:25 - just the names so we can
712:29 - do data.
712:32 - name and I don't have to comment this
712:35 - out it'll just do you know the second
712:37 - line will overwrite the first one and
712:39 - look at this it listed all the names so
712:43 - nice ordered by atomic number this is
712:46 - great and supposing I just wanted one
712:49 - then I could
712:52 - do
712:54 - a number in here so if I could uh if I
712:57 - could
713:02 - do there we
713:07 - go and we can see we can pick this so
713:11 - other things we can do we can look at uh
713:15 - the math and calculate you know pH of
713:21 - things there we go
713:27 - um so again all these different things
713:29 - we're
713:30 - referencing that data set that we just
713:32 - stored as data there we go and we can
713:36 - just calculate some things the
713:40 - mass notice negative log of the hydrogen
713:44 - concentration is the pH so here we go
713:49 - and we can just list the names of all
713:52 - the columns this way um you see um I can
713:58 - list you know like I did before name and
714:00 - list everything in that column or this
714:03 - one lists all the column headings maybe
714:06 - I want that there we go the shape rows
714:08 - and columns there we go this can give
714:11 - you some information that you need
714:17 - and more things we can do maybe we can
714:20 - you know do some math to the shape here
714:22 - we can graph some things and you know I
714:25 - commented this out but we have you know
714:29 - you can plot um if you know that this is
714:32 - going to be a number and we know that
714:35 - this is going to be a
714:36 - number there we go we can plot those and
714:39 - to arrays of these numbers
714:44 - and we see because what do we have going
714:47 - across the row the uh radius increases
714:51 - but then you're at the beginning of the
714:53 - next
714:54 - row so we have all these some things we
714:58 - can graph and you could always you know
714:59 - change this I think this is funny
715:01 - something versus something else but you
715:03 - know you could always change this um uh
715:07 - there we go
715:10 - number uh vers is
715:17 - radius and then when we run
715:21 - this there we go pretty cool so any uh
715:27 - data set in chemistry there's going to
715:29 - be plenty of math we can do so we can
715:32 - sort
715:34 - values you see we can sort the table in
715:39 - different
715:40 - ways and all of these you you know you
715:43 - could keep this I'll make a copy of this
715:47 - um you know and you see the way that
715:50 - this is sorted here boom and then the
715:53 - table of contents really just has you
715:55 - know three parts you could always like
715:57 - name the different parts to help you
716:00 - jump to the ones you
716:02 - need but there we
716:04 - go um the headings here and notice how
716:07 - they had the headings underneath if I
716:10 - double click you see two hashtags and
716:12 - then makes it a
716:14 - subheading so this will help you get uh
716:18 - more organized with some of the things
716:19 - you might be creating yeah you can keep
716:21 - it as one notebook maybe you just you
716:23 - know go go to it and you know enter
716:26 - values overwrite it and take it from
716:28 - there or you could always you know make
716:31 - some sort of customized analysis and do
716:33 - a save as you know save a copy and then
716:36 - do your customized analysis on your copy
716:39 - you know there we go uh um and as you
716:43 - see he has some nice uh directions here
716:47 - on some of the other things that you can
716:48 - do all right and here's where the data
716:51 - came from here's where the um you know
716:56 - formatting ETL exchange transfer load
717:00 - all very important otherwise it might be
717:02 - a mess there we
717:04 - go located it and
717:08 - um there we go and here's the guy that
717:11 - uh
717:14 - did
717:15 - this we
717:17 - have Adam
717:19 - L there we go so yeah given given props
717:25 - this is good there we go
717:27 - coding in
717:29 - k12.org
717:30 - so pretty cool so some
717:35 - other um some other things that you can
717:39 - do with all all of your your collab uh
717:44 - skills and really all this especially
717:47 - when we see these things that we're
717:49 - doing you know um we've been doing a lot
717:51 - in math with
717:52 - numpy so really that's like the winning
717:55 - combo pandas and
717:56 - numpy um get it in some sort of you know
718:00 - version that I can do math with and then
718:03 - use arrays and do the
718:05 - math so you see
718:09 - um so we could uh
718:13 - you know we could Loop
718:16 - through um so just like we have
718:21 - name
718:23 - um and notice the indexes here so we
718:27 - could look at some things we can do with
718:29 - this
718:30 - mathematically um now we could even
718:33 - really you know try to uh do some sort
718:36 - of like weird sinusoidal function for
718:39 - for this because it's up and down I
718:42 - think that's too choppy and we see it as
718:43 - too choppy so that wouldn't that
718:46 - wouldn't help sometimes it's good if
718:48 - there's something I can predict if it's
718:51 - you know not getting a better answer
718:54 - than what I already have then it's no
718:55 - good all right so we could have like
718:58 - melting point and boiling point um you
719:00 - know this could be interesting
719:03 - um you know maybe if I have this data
719:10 - dot melting point
719:12 - and notice how easy this is if there's
719:14 - no space because that would mess it up
719:17 - so you know encourage encourage your
719:19 - friends to you know make table headings
719:23 - with no spaces that way you don't have
719:25 - to mess with quotes and such and so we
719:27 - see all these melting points here
719:32 - um
719:34 - and what we can do
719:37 - is uh we could you know add up those
719:40 - melting points um
719:44 - and again you know summation we could do
719:47 - this as a list or we could do it as a
719:50 - sum um and we could you know graph these
719:55 - melting points
719:57 - um
719:59 - so the same way that we
720:03 - did you know some of these other graphs
720:06 - here
720:08 - so you see if we have atomic number
720:11 - number and
720:13 - radius you know we could do this and so
720:18 - if we really look back at
720:22 - um um atomic number we could even
720:27 - just overwrite this for
720:30 - now and what I like to do is comment
720:34 - something out and
720:40 - then and then you use that
720:44 - later so we
720:48 - could there we go atomic number and
720:51 - melting
721:00 - point there we go
721:12 - and there we
721:17 - go yeah very interesting how it goes you
721:22 - know up and down
721:25 - also yeah really
721:29 - interesting but the important thing is
721:31 - looking at this as some sort of graph
721:34 - that we can get these arrays of numbers
721:36 - and then plot these
721:39 - points so just one more bonus this is
721:43 - really you know all these different
721:44 - things we're learning um for preal with
721:49 - python we want to be able to also apply
721:52 - it to all these different things and
721:54 - this is really what I want you to see
721:56 - that then you know with that little bit
721:58 - connecting with what we were doing at
722:00 - the beginning of the course you know can
722:03 - I get find data in different places can
722:06 - I get it in a table um you know can I
722:09 - read it you know probably using pandas
722:11 - and then now all the things we've been
722:14 - doing in the course what can I do
722:17 - to um do some math to all this and then
722:20 - look look for interesting patterns do
722:21 - some calculations so hopefully this uh
722:25 - all brings it together and you enjoy the
722:29 - course I hope you enjoyed pre calculus
722:31 - with python hopefully now you really
722:35 - feel comfortable with your skills you
722:38 - know using trigonometry finding the
722:41 - sides and angles of any triangle even
722:43 - with little bits of
722:45 - information um working with tra graphs
722:48 - repeating patterns getting data
722:50 - analyzing repeating patterns um
722:53 - appreciating the beauty of e to the I pi
722:56 - equals ne1 uh working with sequences and
722:59 - series and all these things then now you
723:02 - can take this and run with it and um you
723:06 - know apply these skills to all kinds of
723:08 - new data that you come across so
723:10 - hopefully you got a lot of this and this
723:13 - is leading up to calculus where things
723:17 - are going to start to move and we're
723:18 - going to look at other sorts of
723:20 - interesting Trends
723:22 - so happy coding

Cleaned transcript:

this college precalculus course is different from other college precalculus courses like many other ones you will be learning all the concepts from an experienced University Professor but in this course Ed pertowski will also show you how to implement the precalculus concepts using python this course is for anyone who wants to learn precalculus but especially for those who are learning computer science welcome to precalculus with python so we're going to use python on code to do all your math and we're going to look at topics like triangles trigonometry solving triangles finding out all the sides and angles and area of different triangles even starting with just little bits of information we're going to look at a lot of the graphs of the trigonometric functions and one of the things with these graphs is they're repeating patterns so we can graph things like Tides or you know phases of the moon or something like that that a repeating pattern to it and we're going to look at bringing data in and especially data that might have repeating patterns and using trigonometry and other precal tricks that you'll learn to analyze that data and being pre calculus all of this we're going to get uh a little bit further into math what are some things we can do with all these points how can we graph things how can we graph different sorts of functions and how can we solve um maybe some problems you haven't looked at solving yet and then lead up to things like sequences series limits and that brings you up into some things you'll be able to do in calculus so let's dive into it and let's take a look at precalculus with python so the first thing we're going to do is set up your collab you might remember this from before but remember click on new more and we're going to click on Google collaboratory and if you don't have that already you can go to connect more apps and you know it might not show up there and you click in here um you can search for uh collab and you know mine's already installed but you could click and then install it if that's the case so you know new but we're not going to do doc or anything more all these other things um Google app script by the way uh is more like uh this runs in all of your documents and sheets and everything and it's kind of based on JavaScript so that's also good but we're going to focus on the python and Google C laboratory there we go you create a new cab give it a title now what you're going to do is you're going to build this throughout the course um like we did in the algebra course so you're going to give this a name um you could even call it uh precal if you want um there you go uh if you something like that um I think in the algebra course I just called it your notebook um and we're going to add to this throughout the course so what you can do is you know it just gives you this code block if you give text and then if you double click if you put uh the hashtag now in the code that would be a comment in here that's going to give it a a title for the table of contents so um you know I might have like uh get data because that's the first thing we're going to do and then you know I'm going to you know I'm going to put the code here um you know code here we'll we'll get to that later I just want to show you that um if I add other text here um you know next topic but notice I'm not putting the hashtag there so over here I go to the table of contents and get data is in there and we can find this so you see you can minimize that so within this topic you can have your two cells and that's what we're going to do we're going to build this throughout the course and yes the first topic is going to be how to get uh data into collab so that then we can do math to it so we'll look at that in in the next uh in the next video so let's take a look at some different ways to bring bring your data into Google collab so uh and all this we're going to have like a m Focus there's much more you can do with grabbing data from different places but our goal here is to get numbers get arrays of numbers and you know then we can do some math to it so I'm going to really focus on that in a few different ways yeah so maybe you have a CSV comma separated values you know that type of file um which can open in a spreadsheet you know like Google Sheets or Excel but you know you can get the CSV directly if you have that online I have this um you know a few of these examples here um yeah this guy um at Florida State he actually has this website that has you know a bunch of different examples so I picked a few of them here so you know we're going to import um all these things pandas uh import files IO all this and I usually like to Define whatever the URL is as its own variable that way you know you keep it organized all these different possib abilities here and then this code doesn't have to change so there we go that builtin pandas function read CSV and all these things I'm going to store them all as table one this and the other examples so that you get the idea that here's all the ways you can get this data in as a table and then now once we have a table we can do all kinds of stuff to it one of the things we're going to do is um uh that function table one. head The Heading and the first few rows this is usually you know you don't let's say you're getting this data and you don't know how big this table is you want you want the heading because you're going to use that for some other things and you know the first few rows you want to get a sense of what what that that data is um so the last line of code here you don't have to put print or anything if I just say table one. now if I just said table one without that head it'll actually just print out the whole table here you don't even need a print statement uh that that may be overwhelming so I just want table one. head and we're just going to see what this looks like here so this one was you know you know cities. CSV and we see we have latitude and longitude of different cities interesting but also just to show you that hey you can have like you know um numbers that you can work with maybe you want to import this into into some sort of uh you know I don't know plotting lines or something like that on on a map there we go so we have that I also want to show supposing and we've seen the heading so I'm going to comment that out now but let's run it instead table one. describe so we see it gives uh certainly all of your headings or your headers that's what you want and then with each of these you get that description of each column this is going to be really important now the count if you're counting something it's going to be integers but somehow it always puts this as a floating point with all these decimals so there we go now we we can look at the count and see first of all that's great all the row all the columns have the same number in them so I'm not going to have in data I like that but there you go mean standard deviation minimum maximum these are also really important minimum and maximum because if I want to think about graphing this or you know some sort of range I get an idea of what I'm looking at here so these are some of the things you know heading the describe I'm going to show uh this other one here so if I comment this out and if I have this um let's do this one um the people one actually maybe I'll skip this one the people one that's kind of NE it's there's like there's like four things in there all right um letter frequency um let's see we have this and I'm going to show you this just again just some tables as some examples here and from some document it has each letter and the frequency how often this came up and what percentage it was um there we go now we might know from stat other statistics that e would be the most common and we see that you know shows up 12.6% of the time which for one out of the 26 letters you know instead of showing up you know less than 4% of the time if it was all evenly distributed no e shows up 12.6% of the time so there you go just interesting and we could have this described now notice um if you have both of these I didn't comment out the heading or the describe see notice no print statement so just saying table one. head table one. describe it ignores this or it was going to do this but then when we had this it just bumped that out of out of the contention so even if you didn't comment that out you know without the print statement just saying that last line you know table one. describe that's the that's the thing it's going to run and so we see you know um frequency count um scientific notation even though it didn't need it so 2.6 time 10 to the first power is 26 there we go mean median so just some interesting things so I just want to show you this so this is one way um that we can have uh you know the uh you know different URL and some of the key things we want just stored as a table and then something The Heading or the describe now you could also upload the CSV and this this is all the code you need it will give you you know this creates this dialogue um this files dialogue so then if we're going to call it uploaded so that you know if if I had this without the uploaded equals I mean it has a file dialogue but it might not do anything meaningful whatever you pick it's going to store it then whatever you pick it's going to store it as this variable and then that this is the way to get the file name so whatever you just selected to upload and you know it's going to pick that one um yes you're going to iterate through exactly one thing so that's why you can just say next so there's your file name and I'm saying that this is a CSV so that way I already know that I'm going to do read CSV um file name and once again what am I doing I I could actually just have this without the table one equals and again it'll do that but it's not going to really accompl anything I want to store it again as table one so now I have this you know uh data frame table and from that storing it is table one we can do all kinds of other things so pretty cool maybe I have a table on a web page and remember we see a lot of web pages um that have tables the couple examples I have are you know Wikipedia Pages you might have with you know a web page with a lot of tables so this one uh my importing you know pandas I'm going to read read HTML and I'm going to you know just knowing I'm not just reading a table or CSV I'm reading the website read HTML but this one I'm going to store it as a variable tables so that's going to be my list of tables and we see I do want to print this so this you can use this for exploratory situations you know there are how many tables all right well I just stored that as all my tables here and I can say now having already looked at this like I might not even need you know these last two lines at first I could just or these last three lines I could just print out this one you know how many tables do I have um I happen to already look at this I'm like oh table number four that's the one I that I want so you see now I'm just going to have this tables element number four from that array and again what am I doing stored it as table one and I'm going to print that out now there we go it happens to be different managers and the years and wins and losses I I just thought that was an interesting thing because we can have some uh names and dates fine but I also have a bunch of numbers I can use wins losses winning percentage there we go so you know that that's the one I decided to pick now notice um you know I picked this one um Wikipedia for the Philadelphia Phillies because the Phillies but you know I also put another one you know Cricut World Cup and similar similar data if you want to analyze that and now we can do some other things with this one also once I have this stored so let's say I run this block of code and now this table is stored as table one I can continue that and I don't have to go through like once you import that it's good for the session which can be hours or up to like 20 or 30 minutes of inactivity if you aren't running any code um you know this this cell or another one you know for like 2030 minutes it still might stay there in you know the current memory if not um then you might have to go you know you leave and come back then you might have to go and run that other one but that that's this is good for anytime you're in reporting all this great now now I have all this I don't have to go through and do that again now we can say this and what I did is just you know as just to show some of the things we did I just calculated my own uh winning percentage just because so just to show you so I can have this table one because now that I have that I see all my headings so I'm going to take table one wins and table one losses so you see looking at this I can pick these table headers and this is going to be an array np. array because I'm going to I already imported numpy even in that previous code cell and I'm going to create a numpy array from there wins and losses and then what I did is I just made my own average equals wins divided by you know wins plus losses you could print that out you know I just put that in there but here's what else I did um I created another table column so now I have table one average this didn't exist before that equals this so I create this average which is you know if these are numpy arrays look at this I can make this other uh array of all the averages and then I can create a new column now that's there so I could print this and I could have like you know manager winning percentage and then now that I created that I can just add this other there we go I probably don't you don't really need the extra space average I can create this other column so now I'm going to print table one now first of all notice it did print it and you know really this create this python creating the averages it really just to you know this table was correct in in the winning percentages um the pyth python calculation just takes it to more decimal places but that's okay the other thing these subtle things notice this time I decided to use a print statement which I didn't before and just notice the subtle differences if if I do print this is what it looks like whereas this is what it looks like if I didn't use the print statement and early on I like doing this it tends to format it in a way that might be easier to read at first um but if I already know that it's going to be just a few columns I just might want to use the print St and it really just it it just displays it differently um you know that's that's all so pretty cool things you can do um I'm going to do another example here again reading you know URL um so importing everything um date time and calendar we're going to use that later but you see this one again I'm just going to here's the URL of you know again I just picked place you know Tides I think that's pretty interesting because you know goes up and down that's going to link with some stuff we do later with periodic data and now the URL um again my array of tables and we'll see this now if if I just comment these out you see because if you're doing something exploratory maybe you're not as familiar with this site or you're like oh how many I see it but how many of them are really formatted as tables we can run this and it'll say boom there's only one table there we go so knowing that there's only one table then I can go back to this this and say oh okay print table zero and again I'm using the print statement you could just put table zero without the print statement that's fine um there we go um I happen to know that you know this is not going to be too big to be overwhelming and then we have all this so Tides date time and the height in feet high tide low tide high tide low tide there we go and it should alternate I think yes it should alternate so there we go now this next line I may or may you know I don't necessarily need to do this I could have just kept tables zero element zero um but just to be consistent I'm just doing the same thing converting it to this variable table one because now um we can do anything you know if I had a bunch of other code you know boil plate code of all different things I want to do with table one now I now I've stored that as this variable so there we go and again table one. head so notice this I'm printing it and then when I do this without the print statement we'll see how it formats it a little bit differently oh because I already printed it here so um instead of scrolling down I'm going to comment this out there we go yep so there you know that's another way to print it now what I want to show you with this is continuing this example if I want to do some math to this again connecting with some things we're going to do later with periodic data and being able to graph this but I have a date and a time which is of course AM and PM so down here continuing that example I'm trying some different things I'm going to convert all this to uh all that date and time look at this I have you know the day the month the day and all this time I want to convert this to some sort of numerical data that I can graph so I'm going to take this time list date list and I'm going to create these arrays hours minutes days and convert this to Epoch time so I'm going to call it Epoch array and really that's going to count the minutes from a certain point um by default it goes to January 1st 1970 so you know that's a way to make you know compare times because you can convert everything to this and then you have everything consistent minutes since January 1st 1970 so I'm going to go through this you know I have my time list and I'm I'm going to Loop through this for T and time list I'm going to split it I know it's a time so it's going to have the and then I'm going to take the first part convert it to an integer that's going to be the hour I'm going to take the second part and I know that that's minutes so I'm going to convert it to an integer but I'm going to take it just that first part because I I know we had AM and PM so I just want the first part as minutes but then if the last two digits say PM then um and this if statement I put the Co in and I did not make it on the second line that works um if you just have one little thing you can do it all in one line so my if statement here if the last two digits are PM or last two characters are PM then I'm going to add 11 into the hours um and there we go so I'm going to each time then I'm going to for each of those then I'm going to append the hour array append the minute array um I and then you could do this I commented it out here but you could print it out to then show okay what do my times look like just to see that it's right that it is doing what you want it to do so a lot of times when you're trying some things you know let's say exploratory you can print things out to test it out and then I'm going to go to date but now notice I'm going to have this date well I wanted to skip over the I I just want the day um and this is just because for this particular data I'm just going to grab everything that I already know is in the same month so that that really is why so I'm skipping over the day of the week I'm skipping over the all August so I'm skipping over the next three characters and I just want starting at character 8 to the end of the array and then that's going to be just the number so then I'm going to cast it as an integer and append it to that and then now I have my hour and my minute my day I'm going to store this you know in the range so in range of the length of that so all of these are the are the same so I I'm just I just picked one list and the length of that so now um see in in that range so notice if I say d in date list it's going to D is going to be each element in that date list but C in range I don't want each element I just want the number how long this is so now I'm going to convert this to a date time so you know I it's going to be this year this month and then each one day hour minute and then seconds I'm just going to make it all0 seconds because now I have that T I can uh convert that to a Time topple calendar. time GM which is grenage meantime and cast as that as an integer so this this line here then converts all that to an Epoch array pretty cool um we'll print that out but we'll get to that in a second and then I just want the the heights to float numbers so um you know table one. feet it's all height and feet um uh so that's why I call it f array because H was already done for hours so I can't use H for height so f for feet and I'm going through each of those and I'm G to append this so the first four parts so I'm taking that substring which is just the heighten feet or the first three 0 1 two three um because they all work out to three characters in that array so it works out I'm going to get those three which will be the number cast it as a float because they all have decimals appended to that so just showing you some some of these acrobatics that you can do hey you have a table I I I know I have numbers in here and I know it's numbers I want to work with and I'm going to print out that array so just to show you what this looks like so you see that first one is going to be the array of times um there we go and the next one is going to be the array of heights and once we have these two arrays you can do anything with them you can bring them into um you know some sort of graphing utility you can you know graph and do all kinds of things with that so you know pretty cool um we'll get to that other graphing later but I this is really all about getting this data into some sort of math form getting it from different places and into some sort of math form now I have two arrays of numbers that I can do math to I can graph or whatever you may have data in your Google spreadsheet um there we go and this is another one I you you you need to authenticate um you know you mount you can mount your Google Drive um so I have this um this Google code snippet if you're looking in Google cab down on the left hand side it you know it looks like brackets you'd have like an HTML or XML tag in you know you can click on that and it'll bring up various code Snippets you can search through them and then when you pick one you can even insert it like right in here um I inserted I I modified a tiny bit uh just to simplify what I wanted to do but there we go so you can get these code Snippets authorizing this um all these Imports you know and and you know the code Snippets help because see this like creds comma space uncore um equals default these are the things you know I I I would never think of that on the off the top of my head and there we go so I'm going to authorize this and I'm going to open um I just I I I made a silly uh spreadsheet with just a few lines comparing file types so that's the name of it and then do sheet one there we go um but all I'm doing is authorizing this and then I'm storing this first sheet in here I open that file that I wanted first sheet and I'm ref in as that value variable work worksheet notice I didn't have print statement nothing else happened but now I can continue that and now it's already stored there as that variable worksheet and I can keep going back to that and working with that doing different things and I don't have to like make that connection with the Google drive again every time you know um this and you know if you're ever doing things with Google app script the fewer calls to the Google Drive the better so if you can like call at once and get everything you need and then work from there that's that's great so you know now I have worksheet and so I'm going to use that variable worksheet doget all values and I'm going to store that as rows so this is pretty cool I can print rows um if if you know what your uh you know how you like it's your it's your Google sheet and you know how how much stuff this is and it's not too much you might even just say print r and just print all of it you can do that um and then I'm going to print the length and here's what I'm doing oh what I'm going to do is I will uh print this uh print the length of the rows it it it it's just a a silly sheet but it's fine so I'll print the rows how many and then now I I just want what I did is I made uh the third column the other ones have words the third column has numbers in it so um I'm going to create this integer array and number in range all right so the length of this and what it does is even though you have this spread sheet each row is its own element so now I have um you know I can say the length of the rows here and that's going to that's going to be how many rows even though each row will have an element so it's a it ends up being a twodimensional array here this rows when I say get all values it ends up being a two dimensional array rows columns okay so um and I have a header so my range I I want to started it at one because zero would be the header all right so now I have that range uh and I'm just going to go through these numbers I know they're numbers so I just call the variable numb so here's what I'm going to do remember it's a twodimensional array so for each one I know this is the third row so I want the numb is what row it is and then I know or it's the third column so I know it's what row is numb that's what we're We're looping through and I know it's the third column so that's why this is a two remember start at zero so there we go I know that I'm going to take the you know going down that column you know each row and then I know the numbers but I need to make sure I cast it as an integer and then I'm going to append this to the integer array so there we go and there we go I so again ways to get to this and now once again I have an integer array now what you could have is you could you know you could have a length of rows and it's just a sequential count so um you could store this um you know as you know X or something you know you could you could always make this you know like x equals um length you know you could you could always have a a a variable like this x equals the length of rows and that way you know you know it's sequential and you could you could count up through that as some index or something like that and then now you have this array of all these values in each row and and you could pair them up then okay you know plot um different things you can do so again ways to get data in from different places and you know select hey I might have columns with words in it um you know this course we're talking about math so we're going to skip those but even when they have numbers I need to get it in the right form usually some sort of array and then I can do some other stuff with it and I'm not going to go through all the different file types but just as an example you can let's say if it was you know XLS with or without that X so all our Excel files if that's online as a URL and you can work this you know sometimes people upload it to their website some people have it as something on GitHub um all that it all works you can see if it was just uploaded from your local drive you can use the other ex the previous example here of of um just uploading a file from your computer but if it's anywhere online um there we go it's an Excel file and just knowing that I'm going to do this pd. read Excel and once I have that now it's stored as a sheet and I can you know print it out or display the heading the header so I just wanted to show you this this works out as long as you are pointing to an Excel file there you go um because if it was pointing to um actually I this I this this this would work for a Google sheet too um but also you can use that URL as well if it's a public Google sheet that would work too so just all these different file types you know how you can get um you know all this all this different data in Google Drive and as as you make this you know from different things you know you can even make them all headers so you have some examples of you know you you can have a table of contents for all the different ways that you can bring this in and remember table of contents you know if you're putting this in there you put the hashtag which in the python code would be a comment but in here it would mark it as a as a head as a headache so some things you can do getting data from different places bring it into bring it into collab and now all different ways get a table um you can do some a lot of things with it get different arrays and then we can do some math to it so now let's get into some of the math that we can do with all this stuff so we'll take a look at that stuff next so I just want to briefly talk about drawing lines on the graph even when there's no function really but you can get a bunch of points and you can write the code so most of this we're going to talk about with the code but just to give you the perspective you could have you know a few points and you could write the code to rather than develop a function say hey I'm going to draw from this point and it's line to this point line to this point line to this point line to this point and you can finish it up and close it out and go back to the first point and make a shape or you could create all these other drawings or shapes that you want um whether it be to make art or whether it be to represent data that is definitely not a function so there's a lot of different things you can do it doesn't have to be a math function but there's still some code you can do to get data from a list or something and we'll look at that and you know represent it in different ways and sometimes times maybe you can draw lines and uh represent different shapes that way and we'll look at some applications of that so let's look at the code so let's look at drawing lines with code and sometimes on like introductory learn how to write code uh activities you'll find things but this is the full code that also work things like this but this is the full code that works behind the scenes so we're going to import a few things um I'm going to import uh map plot library and I'm going to import this other one um from within the same Library path and then again from the same Library patches and we'll see how they come into play so I still want to set up an array or two arrays one of them an array of each vertex and then I'm going to create another array of all the different steps I'm going to do so if I wanted to just do this one at a time I could do this here's here would be my starting point I'm going to take this vertex array verts do append and I'm going to append this 0 0 notice um I do use decimal places um I I want to make it uh floating Point numbers rather than definite integers um so I have this you know I'm going to append this X and it's going to end up being an X x y coordinate notice the double parentheses and everything and then to each step steps. a pen that's going to be the first step it's going to be path. move to and so the first step is going to be I'm going to move to this point 0 0 and I could just continue adding I'm going to add a line now verts do append to2 so now this is my second point and notice this one is path line to so move to will give you the path you know that's where essentially a starting point without Drawing the Line and then line two will go from that point to this one with with a line and this is where I could keep going and you know I could always put you know more here as many lines as I want but I'm just going to show this simple I'm going to start here draw a line to this point all right and then now here's the graph uh as before um set up the graph I'm going to set up the Axis and for here you know five in every direction that's going to be fine for what we're doing so this is where we get I'm going to create this variable called path and what it is is this python on function path and it's going to take these arguments of these two arrays verts steps so you know that function I'm going to store as the variable path because then I'm going to use that agre this other variable called patch and then it's going to work on this python function patches. path patch and then this variable path is what in the parentheses so probably easier to write the code than to say all this path path patches patches path P patch path anyway so then on my other variable axe for axis I'm going to add patch that python function and then patch so we see create the vert create the two arrays and they go into this function for this variable then I'm going to use this variable in here to create this variable and I'm going to use that variable in here when I'm going to add them to my Axis and then I'm going to show it so if you were going to draw lines it it really is good to start out with your array you know you have your Imports and your arrays that won't change and then all this however many points you want you can just add add them all right here and then all this graphing code doesn't have to change so this is just going to be a simple line when we run this there we go I didn't even draw XY AIS Lines Just 0 02 22 draw this line all right if I wanted to put more I could and here's what I'm going to do I'm going to append this and if I drew another line so maybe I'm going to call this two 2 I'll go draw a line down to that one and then I'm going to do one more thing which is going to be I'm going to go back to 0 0 my original point and so that gets its own special close poly function so I can move the point and then draw you know start there line to that line to that and then close the poly going back to the original and you see as many different points as I want to create here I'll run this and there we go boom boom boom makes a triangle all right good times and there we have it so I'm going to show you a couple things that we can add and tweak to this you can definitely do these all each step and sometimes that helps because then you can really just picture you know that what lines up you know this point and then going line to that point this point close poly but you can create your arrays right out of the gate and here I'm G to create my array verts and you see just each point in this array and then I just call this one codes but here's the array of steps and you just have to me uh uh keep track of lining these up also notice um I can continue it on one line like I did with verts or I can hit enter and then just put them in line here here comma and then on the next line and put the array here which it actually is just fine to have a comma at the very end of this array that works out so then we just match it up you see move to line that first point line two that second point and then you just keep track line two line two line two close poly and I should have one 2 3 4 5 6 7 1 2 3 4 5 6 7 and that works out so just another way I could Define all these especially if I know what points I have this might this method might be easier and I'm still going to use that same code um B see vers and then codes because I need that and then I stop the variable here for patch but I can add some other things you see I can change the face color and I can change the line withd so let's take a look at that now it was a light blue but if I just say blue here it makes it this nice uh royal blue and the line width you see it makes it a little bit thicker pretty cool so I mean you know let your artistic mind go and see what you know different things you can create just by drawing lines and you know running it this way pretty cool things and you know this is again just scratching the surface you can build upon this and do all kinds of all kinds of cool things with this so I I'll leave that up to your imagination right now we're going to talk about trigonometry and trigonometry this long word we can break it down into three parts so try means three gone means shape you know like polygons and metry means measurement so metric would make it an adjective like the metric system but with a Y we make it a noun so trigonometry and these old Greek words we read them backwards so it's the measurement of shapes with three sides triangle class as as many of my students mentioned so let's uh focus on triangles with right angles so our right triangles we will get even beyond the right triangles so trigonometry applies to a lot of things and we really can break down anything into triangles any other shape can be made up of triangles so that's why it becomes so uh Central to figuring out a lot of other things and with that we're going to start with right triangles so the reference angles here and the reference side it's all these relationships to the sides and the angles so if I call this angle a then this side is a cross from so it's the opposite side so instead of saying a cross from we're going to say opposite kind of mean the same thing but the these are the uh this is the notation we usually use in in trigonometry so if that's the opposite side now then this would be the adjacent side but notice they're adjacent meaning meaning next to but notice from this angle I have two sides that are next to it but the hypotenuse is always its own thing and the hypotenuse is the you know the longest side it's across from the right angle so since I have two sides that are adjacent to angle a but one of them is the hypotenuse so then the other one I'm just going to call the adjacent side so now I have from angle a the opposite side the adjacent side and the hypotenuse now again these are reference to how they relate so if I was talking about angle b instead then this side is no longer the adjacent side and that's no longer the opposite side then if it's angle B this is the adjacent side and then this is the opposite side because now this one would be across from angle B this one would be to and then hypotenuse is still its own thing now this matters because in figuring out a lot of things about triangles we set up these ratios relating to the sides and the angles so we're going to talk about three main ratios and then um later on we'll add three more um which are you know the inverse the the reciprocal of these three but these three main ratios and you you'll we'll see as we talk more about uh trigonometry how this comes up in different ways so we have the sign is our first ratio and the sign of whatever Angle now officially I'd put it in parentheses because this is a function but you'll see a lot of times you know in the notation people might skip the parenthesis um certainly as you get into writing the code we need the parentheses again this is a function so the sign of whatever angle is the ratio of the opposite side over the hypotenuse and I'm just going to abbreviate those here so that's the so when I say the sign it's the relationship so if I was talking about the sign of angle B you know whatever the measure of this opposite side divided by whatever the measure of the hypotenuse and that's this ratio and if that's a certain angle no matter how big the triangle is that ratio you know the sign of 30° a sign of 35° it's the same each time you know you can plug that into your calculator s of 35° and that's a constant so I get that relationship the opposite over the hypotenuse and notice remember the hypotenuse is the longest side so the opposite side's always going to be shorter um you know we're going to have these decimal numbers um usually really long decimal numbers but we may round it to like four decimal places and we'll also look at some other patterns in that too so the other relationship is the cosine of whatever angle I'm just going to call it angle B for now and the cosine is the adjacent side over the hypotenuse so that's the coine ratio the adjacent side over the hypotenuse and then the tangent is the relationship of the opposite over the adjacent so now with these three ratios one of the things we might notice is that if I you any now having all three of these depending on what situation I have or what angles or sides I might know or not know I can use one of these three it you know that that it'll apply so that's why it's good to have these three the sign the cosine and the tangent and later on we'll look at like how they all uh where we got these numbers from how they all relate so a lot of things that we're going to do in in uh trigonometry we'll we'll learn one thing and then that'll come back around again when we learn the next thing oh it relates to this it's it's very like you know it's not linear it it's very uh circular and all kinds of you know hyperlinks in your knowledge uh when we talk about trigonometry so uh it you'll find it to be a pretty interesting subject so I have these three you know um ratios how can we remember these ratios well there's that you know s opposite over hypotenuse cosine adjacent over hypotenuse um tangent so and also remember it is the same ratio whatever angle I'm talking about so if instead of angle B I was talking about angle a you know whatever you know it's the s or cosine of that angle and then you know that's that's still the relationship so how can we remember these there's one um interesting way that a lot of people found so s is opposite over hypotenuse so cosine with a big c is adjacent over hypotenuse and then tangent with a big T is opposite over adjacent so if we write it like that then uh and a lot of people then pronounce this as soaa it's catchy because then you oh soaa so you know this is the soaa is the numic device that you know Le leads us through um our journey of trigonometry and so we follow soaa and that reminds us that s cosine tangent and what the ratios are because they're going to be very useful and we're going to look at how we can use these ratios to figure out some things um if I don't know an angle if I don't know a side I can I can figure this out and that's what we're going to do next all right so here's how to draw the triangle in code and I want to show you this because it's going to be relevant we'll use this as a display and we you might remember that P plot we'll import that um import display import math for some of the things we use and time because I comment this out here but you could delay for like 1 second you know the drawing of each line to make it more dramatic so I just want to include that as a possibility and remember we set up the subplots here and I'm going to set this axis this is how I decided to set set it up for this triangle the x value goes from 2 to 12 the Y value goes from 2 to 8 and I'm not going to draw any other lines to show The X and Y AIS but that just seems to be a decent size window here then I will display this text which is the letter A I'll display that at this 0 01 and here I'm going to draw a Red Dot at that point well what does that mean I'm drawing the points for my triangle so this line draws one one line for the triangle from X from the remember these are the X values as an array these are the Y values so the line goes from 1 one to 71 and it's going to be blue then we go from 71 to 74 that vertical line is going to be blue and back to that original 11 and then to the other point 74 that line will be blue and we'll display it like I said don't you know you could draw each of these lines um and pause and make it dramatic also the fact that I'm drawing a bunch of these lines python wants to draw each of these as a different uh grid Al together so every time I do that that clear out put inight um doing that after each line here um enables it to uh not have multiple graphs so then I'm going to have the text there we go adjacent side the text opposite side and then we see you know I just tinkered with this and this was a good place to put it text that say hypotenuse so when we draw this then it ends up drawing our triangle here so we see a DOT that I'm going to label angle a and because this is angle a this is the adjacent side it's next to it now the hypotenuse is also next to angle a but the hypotenuse is always its own thing as we were talking about this other uh complimentary point or angle that's B and the right angle would be C so from a we have the adjacent and then opposite because it's on the opposite side of the triangle just as a way to show you that you can draw the triangles with code um we'll we'll Tinker with that and uh draw some other triangles too so that'll be a good basis so what can we do with this we can um get the S cosine and tangent functions for each of those angles now we'll talk about radians in more detail um it's another way to measure angles um related to you know one radian is about 50 something degrees because it's the measure of the radius along the outside of the triangle we'll we'll talk about that in more details but the short answer here is that all of our trig functions use radians so if I want my angle in degrees then inside my trig function I just have to convert it to radians and so that's why I imported math and we'll do math. radians so math. cosine but it radians um tend to be a lot lower numbers so you'd get your answer and you that doesn't make any sense so um I just for now we'll do the angle in degrees and convert it to radians inside there so what I have is there we go U given that angle and you know change the angle we can just change this one variable there and we'll calculate the sign and I switch these for some reason the S the cosine and the tangent so I just saved them as these variables s c and T so the S cosine and the tangent and then we're going to round it four decimal places is good most of these will be really long decimals if you let it go so four decimal places is good and then we're going to calculate the sign and print the sign cosine and tangent so looking at that angle a and it'll print out s and I pick 30° so the S of 30° is 0.5 cosign is 866 which this one actually works out to something else a little bit more elegant if it wasn't a decimal but we'll get we'll get to that later too and the tangent is 5744 again four decimal places that's good so there we go and once we're talking about doing Cod code with this hey maybe I have this one angle but I also want the complimentary angle so you remember I didn't label it up here but the other angle that's not the right angle would be angle B and so the complimentary angle once I know angle a then B is just 90 minus a and if I want both then I'm going to change my variables here sa a CA and ta for S cosine and tangent and I just usually remember them or think about them in the same order so you really don't have to but there we go so s cosine tangent and then I'm going to print it out s cosine tangent and then I put this down here so the S cosine tangent of B and that's what we'll have S cosine and tangent of B and we'll print it out the S cosine and tangent of B so when we run this there we go so we have our s co sign sign tangent but then we also have the other angle would be 60 so the s cosine and tangent of angle 60 so there we go and we there's we're just starting to dive into a lot of these patterns here so this is just the beginning just noticing how for whatever angle you can easily find S cosine and tangent as well as those three trig values for the complimentary angle all right so not bad one of the other things remember all these trig functions they are constants so the S of 60 is always 866 and knowing that then whatever the sides are if I know one remember it's if it's opposite over hypotenuse if I know one of the sides I can figure out the other and just as a another thing we can do we can Loop through you know the sign and you know I just decided to go from you know 0 to 180 and the only thing here I'm going to import is math and I'm going to Loop through the sign and just show you that for a second here so notice this one I didn't round it python will round it and jump all the way down there so s of 0 0 um and just degrees I just got to you know one degree and we see these little T you know a lot of decimal numbers a lot of decimal places but look at the really tiny numbers zer0.1 and you know we keep going I'm already past the sign of 30 which oh because that work notice that worked out uh you see it really is 0.5 or 1/2 the sign of 30 um sometimes the way python calculates things you know it doesn't round it but that really is uh 0.5 is the exact answer and then we get to all these others and we get down to 789 and this one did round it properly the sign of 90 is exactly one and what do we notice about these values let's go somewhere around here so look at the sign of 89999 847 and the sign of 91 999 847 the sign of 889 99 390 and sign of 92. 99939 we're going to dive into some of these patterns here but for right now looking at the S cosine and tangent and you see it'll go back down so the sign of 180 um is actually zero so um now this next thing supposing I know those ratios so this is whatever those those sides are if I divide them um you know whatever those sides are then I can figure out if I you know this is the ratio and U you know if I know the angle I know one of the sides I can figure out the other but supposing I know both sides but I don't know the angle and so that's an inverse function you know the sign of I'm expecting angle and then the answer is this ratio which you know for like 161 would be like 325 so supposing I know that ratio um I know the two sides I can divide them get the ratio but I don't know the angle inverse function and the reason why it's a sign is because the full word is arc sign um another way to look at this as inverse sign and there's some other notation for that so you know now we get AR sign and if I do the arc sign let's say I knew this ratio you know four over five um so the opposite side would be four the hypotenuse would be five then um remember I'm you know this would do the this would return radians so then I would have to make it degrees so there we go in my you know 3 four five triangle the sign the you know if I know oh one side's four the hypotenuse is five then that one angle is 53 and then I can do the subtraction to get the other angle so now let's take a look at what we can do with the next thing we'll do is uh some things we can do with this information you know how to figure out uh each side or each angle so let's see how to use some of our trig ratios to solve triangles and here's the normal naming convention for a triangle capital letter for the angle and then that lowercase letter for the side across from it so capital A see lowercase a capital B and then lowercase B capital c for the right angle and then for the hypotenuse um that also follows classic Pythagorean theorem a s plus b s equal c^2 so I'll make C the hypotenuse all right so supposing I know some of these angles or sides and I want to figure out another one so let's say I know that angle a is 30° and then if I know that the hypotenuse is 10 but supposing I want to find the measure of the side a so I know enough to figure this out so I can see that from that 30 angle I want to know the opposite side but I do know the hypotenuse and so then that tells me oh I these three I must be involving sign so I set up my equation so the sign of 30 equal a over 10 and remember that the S of 30 that is a constant it's always going to be the same number and therefore I only have one unknown and I can solve this and I'm going to do one step of algebra first get a by itself I'm dividing by 10 so I multiply both sides by 10 so 10 * the S of 30 = a and that you can do in one step on the calculator or you can write the code which we'll talk about in a minute so 10 * s of 30 and I'll tell you that s of 30 is2 they don't all work out so nicely but that one happens to be 1/2 so 10 * 12 so 5 = a and then we can figure out the measure of of angle a um if I wanted to figure out this and maybe maybe I didn't know this maybe it was um angle B that I knew now we always can do subtraction because I know know that that's a right angle but let's just say that angle B I knew that that was 60 so instead of doing the subtraction let's just say I still want to figure out the measure of angle a oh well in this case it would be the adjacent and hypotenuse that I want to involve and so then that brings me to cosine adjacent and hypotenuse so what I would do is I would write the cosine of 60 equals a over 10 there we go one step of algebra and I'm going to do 10 * the cosine of 60 equals a and I I I pick these as examples cosine of 60 also happens to be 1/2 and we'll look at you know these interesting patterns in a little bit but then that works out because 10 * 12 still gets me to that same answer 5al a pretty good so now I'm going to do a tangent example and let's let's say if I now tangent would not apply here because either of these angles opposite and adjacent I don't know either of them but let's just say I didn't know either of these but maybe I'll go back to this one um being 30 and let's say I know this one I'm going to change it up here a little bit and let's say I know this one I'll I'll still say that that's five let's we'll stay consistent with this so the tangent so I'm not going to use S or cosine because I don't know the hypotenuse and I know that angle but I I know which is the opposite side and I want to know the adjacent side so then that tells me oh then that's tangent so I'll set it up that the tangent of 30 = 5 over a and I'm also going to do two steps of algebra with this because a is in the den denominator so my first step a * tangent of 30 = 5 but notice not quite there to solve I need one more step divide both sides by the tangent of 30 a equal 5 over the tangent of 30 there we go and tangent of 30 that is also a a constant and then when we divide um 5 / the tangent of 30 U without doing this on the calculator the it's going to end up being so a would oh sorry I meant I meant to make that angle B but that's okay um angle B because that's the one I wanted to know so um 5 / the tangent of 30 um is going to be 5 < tk3 because so um b equals um 7 * 5 so it's somewhere around like nine um yeah so it's really five times the exact answer is going to be 5 * < tk3 but then uh it's like 8.5 something like that which is why it's you know we will get to the point that we're doing this stuff on the calculator or writing code because all of these you know U the one half that was a nice example because occasionally we get that you know nice 1/2 um 5 tk3 is the exact answer but you know about 8.5 most of the time when you when you're solving these you're going to get you know uh weird decimals um I mean at this point a square root answer that's a nice exact answer but even most of the time you're going to get some weird decimals and you know all these three angles and sides yeah it's very rare that you'll get something where they all work out to like you know even like one decimal place so you know solving now I have how can I use each of these to solve for for the sides if I know an angle on one of the other sides but what if I it's the angle that I don't know so let's have a Twist here so if I keep this maybe it's if I don't know this angle and I'll tell you this it's not going to be a 3 30 6090 triangle so let's just say let's do a nice 345 as as a nice example good Pythagorean triple and let's say I want to know angle a I mean right now I know all three sides I can do whatever trig ratio but let's just do a sign so if I have angle a the sign is 3 over 5 I know that ratio but I don't know the angle so let's write that so the S of angle a is 3 over5 great so I set up my equation equation but how do I figure out the angle and remember inverse functions are when we switch the RO of X and Y so when I do sign I'm expecting an angle and then the answer is this ratio but when I know the ratio but don't know the angle that's the switching that's inverse so outside of code we would I might even use this inverse sign no notion to show it's an inverse of 35 and that works and a lot of calculators have that notation uh but the other the other word for that is arc sign and we can write it as Ark sign of 3 over5 equals a so that's you know the other word for that function arc sign which is the inverse sign I know the ratio and then I'm expecting an angle oh and actually all these are going to be capital A because it's the angle that I don't know and then we'll see in the code that it's actually going to be you know um math. aign but we'll get to that so you see you want to know you know on the board or on paper how to set this up but then we're going to take that and we're going to write code to do all this because at any point you will be breaking out the calculator or writing code to get to these you know um yes you're you want to remember these ratios you want to remember how to set it up you're not um and certain values you might remember but you you know of all these different you know you're not expected to remember you know the ark sign of three over five or something like that so you're always going to be at that point you'll be breaking out the calculator or writing code so let's take a look at how to do all this in code and you know set it up so that you can plug in what you know and quickly output the answer so let's take a look at that code but right now everything that we're doing in trig depends on C being a right angle so that's something that we would already know if we don't know that then it's a different situation so I have my angles capital A B and C A and B are complimentary because C is 90 and then my sides across adjacent and however so you know we see the the naming convention and it's helpful then to Picture This triangle even though as some of these angles get bigger or smaller it's not necessarily drawn to scale you know um someone famous said all models are wrong but some of them are useful and that's kind of what we want to get to here here this is useful that we can picture the relationship between the sides and the angles so we can use I I broke this down into three parts here um finding sign using sign to find angle measures so what you would know is you would know the angle and you would know the opposite hypotenuse if you're using sign so if you make the unknown value zero now for all these I'm going to make it like a 3 four five triangle and you know something like that so let's just say I know that the angle is like 57° and then I'm picturing side a and I'm going to say that that's three um actually that would be four and then hypotenuse let's say I don't know so I'll put that as a zero and see then that way you know if it's something else you you know if it's the opposite side you don't know then um here we go so if you can picture the equation that we were talking about you know s equals opposite over hypotenuse so then if I knew if I didn't know the hypotenuse then I have two steps of algebra um so the unknown x equals the opposite divided by the sign and if I did know the hypotenuse you know let's say I knew that and it was the opposite side that I didn't know then it really just would be you know my hypotenuse you know opposite over hypotenuse that's the denominator so hypotenuse times the sign would be my unknown angle all right so there we go that we have these two ways so if I had you know this is five um 57 that works and notice each time you know what would be the unknown and then what would be the answer so then we're going to print the unknown is answer and we'll see how this goes and there we go so again I'm rounding this as just an example that you see that this answer is reasonable um yep we would know the opposite side or if I knew the opposite side was something like four and hypotenuse I don't know I could run it there and yep so um again a 345 triangle the angle would be like you know not exactly 57 so we get the idea here um or if uh you know we could have it as you know different angle all right so same thing with cosine um cosine adjacent over hypotenuse so if it's the adjacent side we don't know multiply both sides by hypotenuse and we get uh we get this if it's a hypotenuse I don't know then two steps of algebra and I get adjacent divided by math Co cosine so similar idea so you know let's just say uh there we go 57 and if it's the adjacent that I don't know and the hypotenuse then there we go um because then that would round you know the adjacent side would be three and you know that would round but again the angle wouldn't be exact if for a 3 four five triangle the angle would not be exactly 57 just using these round numbers to get to show you how this would work and let's say if I knew that that was three but the hypotenuse I didn't know so and you see our two if statements and you know we get to that and same thing with Tangent you know angle hypotenuse or opposite and adjacent if it's tangent that I want to use so I would do the same thing um which one you know did I not know now supposing that it's the angle that I don't know so I have this that we have the sides a b and c and um there we go so if I you know if I don't know this now notice I'm not solving for this I could I could just throw Pythagorean you know again this all works if it's a right triangle so given that I could do Pythagorean theorem also and figure out the unknown side but I just want to take this whatever side I I don't know I just want to kind of factor that out so if I don't know a then I'm just going to use B and C so um AR cosine of B over C equals angle a so you know if we again if we picture that like we were talking about on the Whiteboard you know if I don't know angle a then it's you know AR code cosine of b c um or if I don't know side a I'm just going to not worry about that I can figure out angle a AR cosine of B over C and then what I'm going to do is subtract because once I figure out angle a then just subtract to get angle B and then I can print that out so that's really what we're doing here just three sides and if there's one I don't know I'm just not going to include that in my calculations because I can do AR s cosine tangent um to figure out the one angle and then subtraction to figure out the other angle there we go um you know depending on what we don't know so what I what you know if if I don't know B then I'm going to use I'm just going to factor that out so that would be S arc sign using a and C to figure out that angle or if I don't know C then it' be tangent because I wouldn't know C the hypotenuse so I must do opposite over adjacent and we're going to put this together it does seem like this is a lot of different formulas and we're going to add a couple more and then put it all together to be able to take input you know anything you know or about a triangle um our eventual goal is you see three sides three angles that's six things that if you know any three of them you can solve everything for the triangle that's what we're building up to so we'll get to the next thing so let's talk about radians and a radian as we mentioned before we could measure degre measure angles and degrees or radians so what is a radian a radian is the measure of the radius along the circumference because remember the circumference of a circle is 2 pi * the radius so the measure of the radius Pi is 3.14 twice that 6.28 so if I measure the radius I could get that around the circle you know um about six times not drawn to scale but we see you know 1 2 3 4 5 six and then we pretend that's only 28 not drawn to scale so if I measure the the a radi the measure of the radius along the circumference but then this angle that opens up to that that is one radian so we're not talking about the radius we're talking about a radian and you know this measure this angle is one radian degree wise it's like 50 something degrees and why do we use radians instead of degrees well degrees it's it's nice you know carryover from the ancient Babylonians they like things base six and 60 works out for a lot of things but in a lot of applications there's no real reason to use that number whereas radians it's always proportional to the radius and so however big or small my circle is if I'm talking about radians it's going to be proportional and then therefore relevant to some other things we're doing so we get into some Physics applications and such by default that's usually going to be radians but sometimes we just you know people not using those applications might just reference you know degrees so we want to be able to convert between the two and given this you know radians um that 2 pi radians is the whole circle so if I if I have 360 then that matches up to 2 pi radians and I can set up a proportion so as long as I have degrees on the top and radians on the bottom like I have over here then if I know one I can figure out the other so if I have like you know 60° and I don't know how many radians that is I can cross multiply so 60 * 2 pi is 120 Pi / 360 and so that' be 120 Pi divid 360 and then that cancels to nice pi over 3 and most the time we're going to have radians as some fraction involving Pi so if you just come across an angle you you know and nothing told you whether it's degrees or radians if it's some fraction involving Pi probably radians if it's a larger number and possibly a decimal involved then that's going to be degrees so um we can convert from degrees to radians and we know python has that buil in already you know you can have this function you know degrees uh put input the radians out it'll output degrees radians vice versa so this is just showing you that what first of all what's it doing behind the scenes you know proportion and then also if there's some other application you just want to convert you can do that all right so this is degrees to radians but if I go the other way and remember radians might already have you know let's say I have like pi/ 2 so that might be how radians show up again some fraction involving radians uh involving Pi so how can I figure out degrees cross multiply > / 2 * 360 and then / 2 pi so I'll do some simplifying there Pi / 2 so that becomes 180 Pi because I'll do that dividing by two and then divided by 2 pi and we see converting radians to degrees then Pi will cancel out whereas degrees to radians you're going to get Pi in your answer Pi cancels out here 180 / 2 is 90° and pi/ 2 that radians is 90° so we see how we can convert one to the other we see that we have um radians as a really good measure because it's proportional and different ways we can convert builtin python functions as well as setting up a proportion depending on the situation one might be more useful than the other so let's take a look at the code and see how we can do this so first of all as we were talking about this is the ratio 2 pi radians is the same as 360° so we set up your our proportion then as long as you have radians over degrees you know you know one you can figure out the other and we're we're going to cross multiply so we just picture that as we set up our code to do the cross multiplying so here I'm going to say and put it in the comments and radians omitting Pi because remember radians will have Pi it's by default it's a we're going to write it as a fraction involving Pi or integer involving Pi if necessary so we have radians which will have Pi but then we cross multiply and then we divide by 2 Pi Pi cancels out so omitting Pi I'll put that in the answer so whatever the radians time 360 / 2 pi and I'm just looking at this and seeing how Pi cancels out and it's 360 / 2 every time so I'm just going to say um the um radians to degrees if I know my radians then multiply by 360 / 2 is the same as times 180 and Pi I'm not going to put it there for radians and then I will reference it in the answer so if I have pi/ 2 radians I'll just enter that as one2 you can use fractions or decimals in this but really radians be expected to be a fraction so Pi over2 would be 12 and then I'm going to print out Pi radians equals 90 de true statement and we can even do our proper fractions we can have 1/2 u remember on the fourths so we could have you know anything you know three halves let's do something over the fourths and um there you go 5 over four you know in different quadrants and still it's 5 pi over 4 I'll write that as the fraction and convert it now this this will always give uh this part I know that it was 5 over4 but this display will be decimals and that's fine for now yes equals 225° and degrees whatever the answer is decimals are fine for degrees so there we go converting radians to degrees just do that now converting degrees to radians notice if I know degrees time 2 Pi / 360 and and you see degrees won't have Pi but when I do that cross multiplying I now I'm including Pi * 2 pi but then ID by 360 so * 2 ID 360 is really divided by 180 and I'm also going to add Pi in there manually so because I do want a fraction in my answer here then I have to do some other acrobatics um python has this nice builin fraction module so fraction Library so we take a look so if I have my degrees let's say 120 um you know interesting because it's in another quadrant so uh not not everything in the first quadrant so if I have my radians now we think we're done here oh okay you know math. radians which is the same we can do that with degrees too math. degrees um but remember I didn't use math. degrees here because I really wanted to not have radians as a decimal um you know I would have to it would not 54s Pi that wouldn't work I'd have to you know that number times 3.14 even go into a few more decimal places you know uh this is the normal way that we would expect the the input so math. degrees I really would need uh to already have converted radians to a decimal so that's why I didn't use that there but I wanted to show this here that degrees oh okay I can use math. radians that's great but guess what that's not the end of the story because math. radians will give me a decimal answer for radians and that's not what I want so um here's some things um if I convert that to a string um and you know if I do this then if if I do R2 um divided by so convert this to a string and then this fraction to a string and then I have this nice function limit denominator because you know that won't always be necessary but I picked a number here to illustrate that because 100 12° it's going to be 2/3 which would be a repeating six and there's all kinds of you know that can get into a mess but now I have this degrees equals this number of pi radians so if I do that it will give me 120° equals 2/3 Pi radians so we see just the straight conversion in other things if I'm converting it you know behind the scenes yeah to degrees to radians it works out and I don't see all those long decimal numbers um that's you know if it if I wasn't trying to output something that might be a good way to do it yeah math. radians math. degrees but when I do want to Output this conversion this is how we would do it you know we get these few lines of acrobatics so that's why I just made my different steps R R2 R3 convert it radians oh but we're not done convert that to a string and dividing it by pi because I want that fraction and then take that string convert that to a fraction limiting the denominator and those are our steps for converting degrees to radians and radians to degrees in ways that I want to display it this is the unit circle and unit because it's one unit that we're really zoomed in on on the graph here so there's still zero Z but this is just one and then one in every direction um even down here but I wanted to focus on this we're going to talk about that part but that's why it's the unit circle because I have a radius of one if we could zoom in on the graph like that and what makes this so useful and most things in trig are based on the unit circle because if I have you know one in every direction that means the radius is one so let's let's look let's talk about this what's the if I have an angle here and I'll call this central angle a so what's the sign of a so the sign of a equals y over one H over one I mean I don't have to write the S of a equals the Y value and then the cosine of a equals x over one so every XY point along the unit circle based on this central angle every X Y point the x value is the cosine and the Y value is the sign and that's where we get our trig ratios from the unit circle so then I have all the s cosine and then of course then tangent is y overx because it's you know s over Co and and it's y overx the Y value over the x value or the sign over the cosine and that works out I have you know all these different values so here you know cosine remember that starts at zero and then we we go around this way so the cosine of 0 is one and the S of 0 is 0 and then we get up to here so this would be 90° or pi/ 2 radians then the cosine is zero and the S is one and every angle whether it be degrees or radians um all along the unit circle you know we have this value for the sign or the cosine and then we get our pythagorean identities because we remember Pagan theorem x^2 + y^2 = Ral R 2 and then therefore s cosine squ plus sin squ = 1 pretty cool so there's you know and then all of these then it works out nicely if you're in this other quadrant for certain things that you might remember you know notice uh for the Y values this this would be symmetrical so if I'm at different points along each side you know in different quadrants you know I could have symmetrical points here but the difference is the sign because you're in this quadrant you know the x value would be negative or you know in this quadrant you know then it'd be kind of symmetrical about the xaxis but then the Y value would be negative or here both of them would be negative so you know we we have some some patterns here now there's most of the trig values you don't need to know but certain ones we tend to remember because they work out to this nice pattern and so let me take a look at this if we have I'll remove our triangle so we we I mean we know that that exists but what about some of these key values here um so so if I have um you know if this one is 30° 45 60 and then up here would be 90 and then down here would be 0 de or zero radians and then if I have these as radians so 30° so then that's pi over 6 45 that's pi over 4 60 that's pi 3 and then 90 that's Pi / 2 so for these angles it actually is worth it to remember these because it works out to this nice pattern and I'm going to start this pattern by changing this yes that's still one zero but supposing I wrote this as I'll erase this one too so supposing I wrote this instead of one I'm going to write this as the < TK 4/ 2 so of 4 is 2 divid by two is one that's still one but if I write it like that for these angles then the pattern is the x value in this one is the S < TK of 3 over2 and the x value here is the < TK of 2 over2 and the x value here is the sare < TK of 1 two again if I don't simplify it then we see the pattern and then here it would be the square < TK of 0 over two I'm going to erase that part so the x value does decrease as we go around but these particular angles it works out to these nice patterns here > of 4 3 2 1 0 over two pretty cool and then the Y value does the exact opposite so the Y value here is z and I'll write that as a of 0 over two and then the Y value increases as we go up so that becomes a square of 1 over two that becomes squ 2 over two that becomes sare 3 over two and < TK of 4 over two so given these you know we are going to look at the code and how to write a code to get all these and that's going to especially help for all these in between angles but certain major angles you can figure this out and even though we're writing code we still want to be able to work out some stuff in our head you know and looking at that then given this quadrant you can say oh well what angle am I talking about and just picture oh if I want cosine that's the X and so just count 4 3 2 1 0 where which angle am I talking about or if I want sign that's the Y value 0 1 2 34 and which angle and like I said they they correspond to the other angles because if I was in this quadrant I'll just pick one of them here so if that's 60 so 90 minus 30 is 90 + 30 so that would be 120° or if that would be Pi 3 then that would be 2 piun 3 radians and it's symmetrical here so the the values are the same but I'm in this quadrant so the x value is negative so we see remembering them in this quadrant then we can see the the the Symmetry here but the x value is negative because I'm over here and and then the Y value be the same so 45 and then or pi over 4 is the same as 135 so 1 pi over 4 2 pi 3 pi over 4 and we see same values but the x value be negative nice and symmetrical here um zero and then remember in radians then this is 180 or Pi radians so if we get huge numbers then we can count like how many multip of Pi Pi 2 pi brings us around full circle and you know 3 Pi would be the same the beauty of these trig values is that they're repeating functions um we can just keep going around the circle and again things we can we can write the code for this and we can look at those patterns and we definitely will do that but it's also good to see see this beyond the code and see how it all fits together because a lot of times you won't see it written like this but if you picture it like this it's you know easy to remember and then you know all the nice symmetry so this is one of the many great things about the unit circle that all of our trig values come from this there we go s is your yvalue cosine your x value tangent is YX and then you know all these nice patterns for those particular angles and you know we'll we'll look at some other some other interesting patterns here but just to see here's what the unit circle is and let's talk about you know different ways we can create this with code and see this on the graph so let's take a look at the code so here's the unit circle in code and besides the fact that this is going to look a whole lot better than my drawing um just to show you how you can represent a circle we've been graphing some things but you can also graph a a circle if you want and this graphing should sound seem familiar notice I just made the axis um 1.5 in every direction so really it's you know we're zoomed in on that part of the graph you know you know only one unit in every direction hence why it's the unit circle and we have uh you know each axis and um this and so I'm going to save this as Circle which I don't necessarily need to do but you know I'll do this because it'll still run this code which is PLT do Circle okay I can plot a circle um you don't need this uh extra space but you can have it if you want and this is what we have here uh 0 0 that's where it starts and the coordinates of the center radius is one and R we're I'm going to do fill equals false because I'm going to do some other stuff with this um and the reason I added this is because then down here I can add artist Circle so we're going to use this for unit circle but you can use this for other shapes and this connects with some of the other things you know if you've done other you know drawing in Python for you know different things you know I can save the here's my circle and I add the artist um I also am going to add this um set aspect equals most of the time that wasn't an issue because you know I'm graphing something and you might notice that the xais is extended a little bit and our coordinates are more rectangular but for the unit circle I want this to be equal so that you actually see it as a circle and not an oval so as we run this and the suspense here this is our unit circle so we see it is one in every direction the radius is one starts at 0 0 and this is where all the trig values come from as we were talking about that uh and I'm going to show you what that means but this is our unit circle and what does that mean it means in the circle we have triangles so here I'm just going to redo this um all my circle include this there we go but here's triangle that I'm going to put so uh you know AAL 1 uh we'll get to that but notice I'm going to have there there's my angle um but uh we're not worried about that right now um math. cosine of a math. s of a remember the default is radians so one radian that's you know a decent angle to illustrate our point so notice the cosine I'm going to store it as X and the sign I'm going to store it as y and after all this now here's some text I put you'll see where this shows up in the graph um text to display but what I'm also going to do is I have the plots here and these other lines that I'm drawing so now that I have my X values and yv values I'm going to draw some lines put some text on the graph and here we have have it so this is our unit circle with a triangle now notice the hypotenuse of this triangle is still the radius which is one and that works out nicely given this central angle it's a our rectangular coordinates so if I plot this point XY well how do I plot the point go from 0 0 over X up Y and that makes the sides of my triangle rectangular coordinat so we know that this angle is a right angle and if we remember everything then we notice that we can do trig here because my cosine is adjacent over hypotenuse X over one which is really just X and my S is y over one which is y so whatever this angle this central angle is inside the triangle then my cosine is my x value my S is my y value so if when we were doing before the just you know displaying the decimal numbers for S and cosine that is going to be our X and Y values all along this unit circle so you know that's where they come from and here's the triangle inside so we can see this visually and I did one more thing for you to animate this and the animation is pretty interesting um all the other things and I'm going to import time but here's the triangles now notice this is all in a function here so I have it I think this animation Works sleep for 3/10 of a second clear the output and then yep clear the output and then I'm going to do all this you know and you know in this loop I just called it a for a in range 70 that ends up being enough so a is my you know my counting variable so this is still in radian so I just did 0.1 * a that ends up being enough of a difference so my angle you know when a is 1 it's 0.1 radians when a is 2 it's 2 radians and again you'll see that that ends up being enough of a difference in the angle so based on this Loop that counts through variable a I'm going to have these different angles and then cosine and S are my X and Y values so going through this Loop I'm doing all the same things I just did in the cell before but this Loop is counting through plotting that triangle and then you know wait you know 3/10 of a second clear it and plot the next one so you can see as this central angle increases we can just see these adjusting then you have you know your XY and this still works for that angle for all in all these different quadrants because I can actually count the angle from you know 0 0 in the first quadrant you know along the x axis in the first quadrant or I can count you know other ways oh keyboard interrupt excuse me so I can see this showing that I have the sign and notice this angle keeps increasing so it does go up through 2 pi radians the entire circle and it'll still draw those triangles um and you you'll see that that works out you know when we're at one of those points in you know in another triangle um the s or cosine there you know there's when we do inverse sign it actually works out for two possible angles and we'll look at that and again the Pythagorean aspect because given those triangles sign sare plus cosine squ because these this equals 1 well 1 squ because of that triangle and so I just put this little Loop here to to show this again I'm just looping through I'm not even graphing this but given those angles so the S and then squared cosine squared and one so I just to show you we have the sign and cosine squared gives us these huge decimal numbers but look at that every time and just the way python calculating works out every so often you get things like this but it really is sin squ plus cosine squ equal 1 so we see how all this comes together now in this right triangle um you see we have this uh in this triangle in inside the unit circle um all of our X values and Y values are points along the triangle for those given angles and remember um at three you know if it were a clock at 300 then this would be the angle zero and we also saw that you know at certain times it seems to close up and you wouldn't even be able to make a triangle so now as I mentioned that this would be three a clock so the animated unit circle what if I plotted um this point here so I plotted a line and so what if I plotted from 0x from 0 0 to XY and what if I comment out all the this is actually going to be useful for you in a project that's upcoming just to show you so we have this and um here's another trick if I wanted to make this a clock clocks go the other way so what I would have to do is just make everything negative and then if I ran this you see and we see this moving around and as another bonus here supposing um I wanted to start it at 1200 instead of what would be 300 you know our normal trig starting point then my angle I really want to graph the angle that that's um right be that's before that so I would make it minus uh I would graph this as uh plus uh math do I'm I want to do this exact so I'm going to say math. Pi um over two instead of giving the decimal equivalent and you see how this starts then at the top and given these you know you could have this tick any number of seconds um can look at that okay and just uh that I said that might be helpful for you in an upcoming project all right and Pythagorean um there are other Pythagorean triples but let's focus on this that sin squ plus cosine squ equals 1 often useful thing to know so let's take a look at how we how else we can graph these values not just in a unit circle and we'll see some other cool patterns here so let's talk about how we can graph these trig functions if if I make X the angle and y the act the trig function so unlike the unit circle X and Y are values on that but if I just make X the angle so and I'm going to make it in radians so if x is the angle then our angle you know we have zero but in radians I'm going to go to the major points pi/ 2 which corresponds to 90° Pi which is 180° and then so 3 pi/ 2 and then 2 pi come full circle so we're going around the unit circle every 90 you know 0 Pi / 2 pi 3 Pi / 2 you know we're going around and if x is the angle then let's just picture what's happening to the Y value if I do y equal the S of X so as that angle increases going around the circle what happens remember y the the S of X starts at zero so we do have this point and then the sign being the Y value on the unit circle what's it doing the as we're going around a circle it's going up then down then it's negative and then back around so at pi/ 2 you see the Y value really only goes one to negative 1 so at Pi / 2 the sign is 1 and then at Pi it goes back to zero again and then going around the circle 3 pi over 2 down now it's down to Nega one and then back up to zero here and I'm going to draw this with a nice curve to it to try to you know estimate these in between values but that's a sine wave and the name of this sign the comes from the adjective sinuous which means curvy because that's what the graph looks like it's this curve and you know it continues you know forever in both directions it just keeps going um because as X increases you know beyond 2 pi you're going around the circle again so it just goes around and around and we get this up and down sine wave so and it works out well when we're doing this in radians because degrees that arbitrary number of 360 to get that full cycle I would have to go from 0 to 360 but yet the Y value only goes up and down you know one to negative one so you know if we did it proportionally then you wouldn't even be able to see it on the graph so that's sign so what about Co cosine I just did s first so if I take cosine and I'm going to keep these same major angle values but what happens with cosine when I go at cosine at zero it starts at one and then at 90 degrees or pi over two then at zero and then at pi so remember we're going around cosine is 1 0 1 and then so 1 zero down here it's negative 1 when we're at pi and then goes back to zero and then back up to one so again I'll try to draw this with a nice curve to it but there we go one Z and again that also increases and if we Sol them you know continuously you know this continues the sign the cosine graph they are very similar but there's just a shift to them and that's why Co when I have y equals the cosine why it's the why we have Co because the graphs are similar but there's a shift to them and so that you know sign because it's sinuous or curvy and cosine because it's like that but it goes along with it but there's a shift to it so we have S and cosine and being familiar with the graph we can you know plot out a few of the key points and then sketch it out in between we'll also show how to do this in code um built with the builtin functions or even with you know one point at a time you know so that's pretty interesting so we have S and cosine um let's do one more here let's talk about tangent because tangent is s over cosine but if we remember that's going to cause some problems because I can't cosine is zero sometimes so if tangent is s over cosine so what happens um what happens at uh 90° well first of all if it's s over cosine then when s is zero then the value is zero but then when cosine zero I can't divide by zero so what we would do is I'd put a ver vertical line dotted line there that's our ASM toote it's that x value can't exist so therefore there's no possible way for any y value to be along that and then if we go at Pi so s is zero yeah X is negative but the sign is zero so then that value exists and 3 pi/ 2 x is z so undefined and then at 2 pi it's zero now just knowing that information is not enough to know the tangent graph but I'll tell you what does it do it actually ends up looking like spaghetti so that's what the tangent graph looks like and if we continued it on you know it would be like this so tangent graph and most of the time we won't see these dotted lines that's just if we were drawing this that's that's our guide um you'll just notice that hey there's that x value that there is nothing and then it gets you know Tang can approach this but never get there now at least for the 90° then or Pi / 2 that makes sense inside a circle because if that or inside a triangle because if the triangle um I'm just going to draw this here if I have a triangle so you know AB C so if that angle gets gets to be you know if that angle's zero then we're at zero and as that angle increases the tangent would increase B over a because that would keep increasing but it can't be 90 because then I wouldn't have a triangle so you know for that part it also makes sense you know looking at that comparison but for the graph it definitely goes back to you know the explanation is s over cosine and again let's take a look at how to do this with code and and you know a couple different ways from a loop and plotting points to some of the builtin functions to graph this all right so let's take a look at the code so now let's graph the trig functions not as as a part of the unit circle um though I want to start with this and just keep that as a reference here so here I'm just going to recreate the unit circle um in this case using degrees so uh I'm going to recreate it using points so I'm going to Loop through this here where you know from a for the angle in range 360 I'm going to Loop through and each one remember s and cosine have to convert it to radians um and then I'm going to plot this so you know that works there's my unit circle I didn't put the axis each each axis but there we go we can draw our Circle as again um you you know another way to draw a circle you you can plot all these points uh so I did that with degrees because now let's take this as so a which is the angle if that's my x value and then my yalue I'm going to start with s my yalue is the sign so the sign of a um and I made this AIS here this is going to you know look silly but it you know now it's all equal x goes from 0 to 360 um y goes from 360 to positive 360 and when I graph this this is what it looks like when it's equal axes because remember the sign only goes up to one and down to negative 1 so if I use degrees you know it's so stretched out and we can um we can make this I'll make it like NE like two or something so we can see you know the edge of the graph so I we can just completely change this aspect ratio and I still have X going up to 360 and why just going up you know to one and down to negative one you know that works and you know that illustrates that we can do this but beyond that it's still radians are nice because they're proportional you know it's the measure you know that angle corresponds to the measure of the radius on the circumference whereas 360 really that's kind of an arbitrary number you know we came up with um I think it goes back to the ancient Sumerian so many things they did were based on six and triangles so that's where we get 360 and you know dividing things up that way so how about we do it using radians so again I just go back to the circle um rather than just drawing the circle as we were doing uh before we can just you know plot X and Y as points and that works and it still looks like so many individual points that's what I wanted but you know plot even more points and it'll definitely look like a smooth Circle so we can plot those where you know radians and then you know X and Y so then if I was graphing this again my range um for radians um I want it to go all way all the way around but I want to give enough different value so I want maybe 70 points and so radians you know uh 2 pi radians for the circumference so that's 2 * 3.14 6.28 and so each time you know for a then we go up you know it will count up these you know tiny increments and end up at seven and that will work out so X is the angle that will increment enough for us to see our graph and Y is our s sign of that angle so now we really see you know a nice illustration of our sine wave where our ratios you see I can have this normal 1 to 7 and even if I had the Y value go up to seven we would it would look a little more zoomed out but you would definitely recognize the sign wave so all of our trig graphs are going to use radians it just makes more sense so there we have it um sign using radians and I absolutely could do the other thing do this with cosine too I'm going to show you this in the next step but I could just as easily do s and cosine um but rather than the points um I'm going to use this to start using numpy because we were using numpy before in the algebra with python that's a good goto because numpy it creates this array of X Val of well array of values which in this case I'm going to use as X values so that way I can base this all on my graph Dimensions which I can change here if I want you know I can just Define it X Min x max y Min y Max and then I create how many points do I want based on those graph dimensions and if I want more points you know this is going to be enough for us four times this but I could always add five make this you know increment that number four and then I create this np. linspace you know min max and then how many points in that range so I create this array and for so many of our functions that's just going to be a goto create this x array or this np. linspace array of X values and then we're going to use that to plot everything and then I can Define this hopefully this is looking familiar if you did the algebra with python course then my plots um and you know my I my Axis and then I'm going to draw the X and Y axis um still making them blue I just kind of like blue so there we go np. sign and now I have this and I can graph this you know there we go np. sign and you might notice this should have a nice curve to it and you might notice some you know not perfectly curved aspect so that's where I can say well more points would smooth that out so even if I just increment that to five that might be enough Smooths it out a little bit you see and and I could certainly increment that to 10 takes a second longer and you see how that really Smooths it out so that's where using that np. linspace helps a lot of these things we're going to be dealing with uh you know very curvy lines I mean that's really why it's called sign because the adjective is sinuous which means curvy and you know that's our sine wave and this is usually the goto for modeling a lot of up and down Trends we're going to get into some of that but then also um you know anything curve because it starts at 0 0 and now we're going to look at cosine you know why is it called cosine so I'm just going to model this one and I'm going to comment out sign here so cosine looks very similar but notice it starts at one and if you remember the unit circle because at zero you know when the angle is zero Co the S the Y value is zero but the cosine was one the x value so very similar graph but it just starts at a different place you could use this a lot of times modeling something with cosine would be like a spring that already is stretched out so that's why it starts at one but some you know starting at 0 just works out for a lot of things so that's why we model so much with s and we see cosine is name that because the graph is similar all right and next we're we'll get into tangent um in the next one actually let's get let's do tangent now uh just tangent and remember tangent is y overx so in our unit circle it's the opposite over the hypotenuse which is y/x and so if I look at these I'm just going to graph tangent I'm actually not going to I have other things down here but we'll get to that if I just graph tangent spaghetti and we also notice that um you know it starts at Z 0 because when Y is zero then we're at zero and we have these jumps in the spaghetti because it's y overx so at 90° or pi/ 2 radians X is zero which zero in the denominator makes it undefined so I have a vertical ASM toote here no you know undefined and then we keep going there we go so we we see the spaghetti um not a lot of things that we can model with Tangent graphs but it's definitely it's interesting um so there we go and in the next thing we're going to look at all these other trig functions and other graphs but for now you know taking a look at the sign and cosine graphs and how we can use it how we can do that with nump so here's a look at all six trig functions and it all comes back to a a triangle like this a right with right angles that if I have the angle here then this would be the adjacent side this would be the opposite side this would be the hypotenuse just as a reference so if we have S then that's opposite over hypotenuse and if we're in the unit circle then that would be the Y value because y would be the opposite from the central angle and the radius would be one cosine adjacent over hypotenuse and in the unit circle that' be the x value the horizontal over radius of one tangent opposite over adjacent and in the unit circle that' be YX and another way to do this because sometimes this is useful It's s over cosine then now we get into the reciprocal functions tangent and coent so tangents opposite over adjacent cotangent adjacent over opposite or another way to write that is one over the tangent that works out secant is the inverse of cosine so instead of adjacent over hypotenuse it's hypotenuse over adjacent or sometimes it's useful to see that it's one over cosine and then cosecant the inverse so it's hypotenuse over opposite or again I can write it one over s now we'll look at the graphs the the CO as we talked about with sign and coine the co functions are named that way because the graphs are similar and then the reciprocal functions so they're not named Co because of the reciprocal they're named because the graphs are similar so tangent and coent um you know spaghetti but different and we'll look at secant and cosecant but here's I always remember them in this order s cosine tangent cotangent and then secant cosecant so to think about remembering the reciprocal functions tangent and coent are reciprocal and then cosine and secant are reciprocal and then s and cosecant are reciprocal so remembering this way sometimes that that visual helps to remember you know what the reciprocal functions are and when we see that and we see the graph we'll we'll see how secant and cosecant match up with s and cosine so just a good overview of all this before we get into the code you know how all this fits together the reciprocal functions and how they're all all these six trig functions are related to each other we usually see we often don't use these because for a lot of triangle applications s and cosine and tangent work like if I have this I don't also need the reciprocal to solve certain problems but it's good to see all of these together and again the big picture as we get into the code and see what uh what these functions look like and what the graphs look like so let's take a look at the code so we have our graph Dimensions as we were doing before and tangent so mentioned before tangent you know um np. tangent and this line of code why I put this in there so that um tangent will always be this spaghetti because it's Y overx and then you know that's that's always going to work out to be a positive slope and it looks like this and then it's y overx so every so often the x value will be zero and that makes it undefined and so that's why we have these breaks here and so that the python graph doesn't display that as like a vertical line which is not really a part of the graph I have this that if the you know that slope is that difference is always going to be positive so if it's ever less than zero I'm going to take that as not a number and then therefore it won't graph it so this line of code just makes the graph look better by eliminating those undefined points and that's tangent but what about coent so it's co so we expect that the graph is going to be similar and it's a reciprocal function so you know I don't need a tangent button on the calculator most calculators won't have that because of this reason I can just put you know one over tangent is cotangent and that works and being one over I'm still going to include this line and it's just different because I have to make it if it's greater than Z if that difference is greater than zero then make it not a number I'm not going to put these on the same graph so I'm going to comment this out and let's take a look at cotangent so we remember tangent here and then we have the graph of cotangent so we see the slope is negative each time very steep still but negative each time and shifted a little bit tangent graph did go through 0 0 and cotangent doesn't because as the reciprocal yes it's 1 over tangent but that also means it's X over y instead of Y overx so X over y now it's undefined when Y is zero at these points so that's the tangent and cotangent graph um interesting we don't do use them a lot for modeling things but you know we see see these graphs all right our next major grouping is secant and secant does also have a CO graph cosecant let's we're going to start with secant though and there's reason why I mentioned secant and cosine in the same breath um as we were talking about they they they are reciprocals so one over cosine is secant you know that's just how we're going to do it and then we have this and it just works out this way um sometimes you arrive at this um by tinkering a little bit that if the difference is greater than two um then I'm going to make it not a number that still gives me a good graph um sometimes you know I found two Works more or less than that it doesn't it it it kind of distorts the seant graph so there we go I'm just going to graph this seant seant and we'll take a look and see what interesting things this looks like so look at that parabas but you see it kind of Parabola up Parabola down up down up down all right there we go and you see you know our values here so um at 0 0 when the cosine is one you know there's secant and then we start you know when the cosine is zero then it's undefined you can imagine like vertical dotted lines there for these values that don't exist so that's cosecant that's secant but now I actually want to graph this along with the cosine graph um so there we go so I'm going to graph this along with cosine which means I'm going to uncomment this all right and graphing SE graphing these reciprocal functions see and cosine we see how it matches up so you see look at that I looks kind of cool and you see when it one when cosine is one one over one is still one so they'd be the same value and cosine zero that's when secant would be undefined there we go pretty cool and cosecant now so remember we were say that's the inverse of sign um the the uh inverse of s so if I comment this out and we'll take a look at this so just as we expect just as we know that the S and cosine graphs are similar secant and cosecant would be similar to each other I'm only going to show one of it for now and so just graphing the seant graph uh and you see this is what would happen if I don't have the right think it it it graphs that vertical line so when I uncomment that to remove those those values then the graph looks much better and this is the true seant graph that vertical line just wants to connect you know the python graphing wants to connect it but that is not that line is not a part of the graph so that's the true secant graph uh Co graph here and just like the other one comparing it with s so cosecant is one over sign so if I compare that with s we're going to see that that pattern also and there we go sign starting at 0 0 making cosecant undefined and then you know one they the same so pretty cool so so now we have all of the now you're familiar with all of the trig functions so truly there are six trig functions and we see that you can imagine that there's not a lot of applications for the graphs of cosecant and secant you know you know think of something that moves along you know that particular Trend some sort of Parabola then an opposite Parabola not necessarily um but you know they're they're there they're useful they're interesting and you know we also see um tangent and and cotangent um not a lot of uh applications but you know we could have some and so it comes back to modeling a lot of behavior still comes back to sign and you know um yeah even if I was doing something with you know seant you know or then I still might or cosecant I still might you know go back to sign because it's a it's the reciprocal but it's still you know there are the six trig functions but we see why you know it's still all of them based on those X and Y values from the unit circle and so just going directly to them the sign and cosine that ends up being the most useful and we have all these we'll get to Transformations next things we can do to to change these graphs but for now these These are the six trig functions and what their graphs look like let's talk about how we can change the graph of sign now we can apply transformations to any of the trig functions but the sine wave is really the one that we apply it to most of the time um uh number one because that up and down pattern is a common pattern um the other ones don't just don't seem to show up a lot in a lot of applications also uh sign let's say compared to cosine um the fact that it starts at 0 0 again a more common pattern that you know we see um so we apply to a lot of Transformations on the sine wave so I put the regular sine wave here as a comparison so what can we do to transform well I can change the amplitude so I can make it y equals um let's say two times the S of X and so you know working with radians X is the angle in radians uh the Y value is the S ratio so if I have a multiplier of two so what that does is that changes the amplitude and it goes up to two now and down to 2 now notice that the zero still stay the same because if it's zero multiplying by two is going to still keep it at zero but that's one of the things it does the the the this becomes the amplitude and you know whatever multiplier you know goes up and down so that's a pretty good transformation um if I was applying this to let's say sound the amplitude would be the volume um other times just whatever we might be modeling the amplitude might change you know not everything goes you know um up and down the same uh you know just only up to one so one of the other Transformations we can do is um supposing I have the sign of instead of X I'm going to call it 2X and I'm putting uh just number two in here easier for me to draw we're going to get into the code and you're going to see how you can apply you know sliders and you know really Tinker with a few of these and see what the results are but for now you know to illustrate the point so if it's two so if I have the sign of X then multiplying by two here makes it go through that whole cycle twice as quickly so the S of 2x instead of taking you know 2 pi to go down you know that's that's the end point here um instead of taking 2 pi it's going to do that twice as quickly so instead of just going up and down it's going to go like this oh it actually would not change the amplitude though so it's going to go you know up and then down like this and then down and then back up so notice the whole cycle happened here and then we're going to go through that again the second time here hopefully my drawing isn't isn't too bad so you know these are the things a multiplier in there um so for a we can amplitude we can call it a for the multiplier and here we can call it B so um the the per if this is B so the sign of BX so the period is always 2 Pi / B so without any number there it's 2 pi and then if I have this here so then the period is half of that so it's pi and you know we can get smaller and smaller if this was applied to sound um that multiplier would be frequency so these potentially could get to be really high numbers um so we can take a look at that then one of the other Transformations we can do and my graph's getting crowded here so I'll erase all of these and I'll start out with the basic sign graph again so one of the other Transformations we can actually just put a horizontal shift on this so there's my um let's say you know Pi / 2 pi 3 pi over 2 and then that that's 2 pi over here so the normal sign graph and there work it's going to work better with the code um there we go somewhere like that all right that'll be the reference point and if I have a u phase shift so if I have over here you know y equals the S of x minus I'll make it a nice even Pi / 2 so we see if I apply this phas shift x minus Pi / 2 so that every point it's graphing it shifts it to the right which seems counterintuitive because you're subtracting but remember you're graphing what was pi/ 2 before that so instead of here it's going to shift pi over two and then it's going to go like this you see and then down and then it's going to continue like that so that gives it the horizontal shift and there we go and we can shift it as much or as little as we want horizontally um so notice then if we shift if it was X plus pi over 2 it shifts the other way which then would line this up at one so s of so the S of X so the S of x + Pi / 2 would shift it the other way and then that would equal the cosine of x so remember you know very similar graphs but they're just shifted so if we put that exact shift on there then that that would equal to cosine of x so we have all these um we we can also do a vertical shift that after all of this it's the same shape of the graph and then just shifts it up that's a pretty common shift um especially when we talk because the sign value goes into the negative so maybe if we're talking about Tides or you know phases of the moon or something um we can uh apply a vertical shift so that it doesn't ever go below zero or that the minimum isn't zero it might even be some other number so we see all these different shifts here that I can apply um an amplitude or the uh change of the period or a horizontal shift and then we can also have a vertical shift but let's take a look at this in the code and we'll see the different things we can do and then you can create this and then you can add some sliders and Tinker with this and see some of the effects so let's take a look at this in the code I decided to do this with an interactive which will create sliders so with that we need to import uh the interactive and uh math in line so all these other things were things that we used before set up the graph Dimensions here and I decided to just give these minimum and maximum values um you'll see that you'll see how that plays out um the points uh 10 times that so you know uh 110th that would be that should be pretty good and here creating the x value so remember Lin space um creating the X values that we're going to use and with that interactive we're defining this function I just decided to call it graph um and we're defining this function which we're then going to pass these values uh from the interactive and in this function everything that I would do to graph um the plot subplots and here this is just you know um something here to display the graph that we're going to have on the on the plot so um I made these EQ and eq2 to split out these function these uh strings really um you could actually have put them in here directly if you wanted to that works just as well um and then the values a b and c so I put this in the title so F and then the single quote we have a EQ b eq2 c so these are all my variables that's how you would display the variable without having um extra quotes sometimes if you if you do it in a different way it displays with quotes looks different so you know taking these values that I have and I threw in two more string values so I just put all them that's going to be the heading for the graph the title for the graph and then down here we have the interactive um that's going to create our slider so um the interactive and then I'm going to say I'm going to run the graph function and here's my sliders a equals b equals C equals and I give my ranges that's probably a good range to illustrate what we want to illustrate here so all of that and then the last line of code is just I called I called it IG so it's just IG and that's it so when we run this it's going to give us these three sliders here and we see at the top um now when you first run it everything's going to come into zero and your graph is just zero out but as soon as I have um a is one well that's still sign of zero is still zero so that's still zero is out but if I have B is one now that's my normal sine wave so you know sine of X and then C is the shift so if I move C we see that shifts it up I can move it again it'll display it here so you know what you're graphing and we can move these down so we see the shift here and a is the amplitude let's get this back to zero I like that so if I increase the amplitude I get graphs like this so remember zero is still zero but the amplitude increases and if this was something a sound wave the amplitude relates to the volume and B increases or uh increase the number of waves incre if this was music it would be increasing the frequency um just the regular graph we're saying it decreases the period of the graph so we can have these and you see I just increased it a little bit that's enough to illustrate what we want and we see you know I made um you know 10 points for every integer and as we start increasing the frequency like this we start seeing it get a little bit choppy not quite as smooth you know this is still a nice smooth sign sine wave so we see this and then still we can always move that up or down there we go so creating the uh we we can see the shift you know that uh first number um the multiplier that's the amplitude you know the default is one um zero would just zero everything out that wouldn't accomplish anything and sign so in this case the sign of 2x so that two represents that's B um and increasing B decreases the period of the graph or we could say it increases the frequency and C is the vertical shift so we could change this you know you could change these if you want you know Tinker with this but you you get to see what um these different values do with your graph so what if we have two waves and we're interacting and again I just picked sine waves um that illustrates our Point um I have this I'm not doing this as an interactive so I just have the graph Dimensions here the plot information here and you know just down here um I have Chang these I can I can go in and change these to whatever we're going to run this first and then um then we'll come back and change these and then the last few things just you know plotting one of them is blue one of them is green and then the the combination is red so what do I have here my first one I'm graphing your normal sine wave the second one I'm graphing it with a shift so other than multiplying something times x in inside that s function if I add or subtract that shifts it to the left or right so it's the horizontal shift and I'm just going to say minus math. Pi so when I have Y3 which is the inter fraction of these two so look my one graph my blue graph is my sine wave my green it shifts it enough that it lines up perfectly to be exactly the opposite and so the red line is the combination of two and it zeros out everywhere so um I mean this is really how also you know thinking about sound frequencies this is how noise cancelling headphones work and there's enough time to do all of this um and still process the audio that it detects the waves and then generates the exact opposite so that what you hear is this zeroed out sound but what if I make it I if I make them both the same that's not going to well actually it'd be really interesting here you won't notice this in the red in the blue and the green but if I make them exactly the same he say see the blue and the green are on the are on top of each other so we can't see that but the red adding them it increases and decreases you see not not quite the same as just increasing the amplitude um but you know it adds them so actually it is the it it would be the same as increasing the amplitude because two times sign so if I have a little shift here I'll say minus three so you see not quite pi and so it you know quick glance it looks like they kind of line up but then this red line you know adds it up a little bit now supposing I if I have um you know some shift like that like one and what do we see we see that as they get close um and look at this this interaction you know not the highest point for the blue or the green but almost the highest for them and then you know in between that is the highest combination and so we see now this is what we have when we talk you know if if this was audio this would be beats if we have you know different frequencies and then when they line up we it magnifies them because it gets louder so if we had this um if if I just changed it to it's two and we see now this is where it would just be um uh we could call it dissonance it doesn't line up it's you know we see um the Blue Line the green line and then given that combination then the highest value would be in between and so it kind of it would just if this was audio it would just be all muddled together because the the highest point isn't really you know lined up with anything now here's one of the interesting things we can do for the second one I'm not going to do a shift I'm going to have this one as two times that so it's going to be a higher frequency so we see the blue is our sine wave the green is the higher frequency and you see again we have the red line the combination the highest point is you know not quite the highest point of both of them here but you know in between that and then we get the lowest point so we get these other interesting relative highs and lows but then we get the lowest point here and that again would correspond to you know a beat in sound or something uh you know regular when it lines up so if we multiply it by three we see these interesting patterns you know the comparison a little bit more muddled as it's multiplied by three but watch this what If I multiply it by four we still start seeing um this and very interesting that the red line seems to follow the green line a lot more than the other so um what we what makes things harmonious would be if I multiplied this by three and this by two so now we get something that these won't always line up you know where where some of the other face shifts who made made them line up you know keeping One S of X the other one s of 2x 4X or 8X they're going to line up on regular reg reg regular spots but if I have this so now we really see times when they line up kind of nicely and then that leads to a higher beat and this is harmony so the you know these are the things that that lead to Harmony we want it to seem clear you know yes there's times when they don't up but then there's times when they do and then that's really clear and as Aristotle said that the things that we look at these patterns the things that please the eye that please the ear that please the mind are all very similar types things it's these interesting patterns so in this you know you can Tinker with all sorts of things and see how it plays out um you know what looks like it leads to more Harmony and not and not um there's even um we can even do like python um playing audio sounds related to that um most audio sounds are much higher frequencies than we're talking about here it would be more like the sign of like you know 200x or you know everything from you know 20 30 x to a really low beat to you know 4,000 x you know the highest notes on the piano so you they're much higher numbers and looking at the graph would be a much more dense graph but you'll still be able to see where those beats come up um if we have this like um 200 and this would be 300 so we see much higher frequencies but we can see where these beats line up yes and again cool things for you to Tinker with um but you see here the normal graph code and really what we're doing is we're just graphing you know two different sine waves and then the third one is the combination so that's what we wanted to get to you know we look at waves we look at trig we look at waves and then we look at interacting waves and this is just the beginning there's a lot more we can do with this so some of the things that we want to talk about here now that we've looked at you know transformations of sine waves is if I have data that shows some sort of periodic trend um phases of the moon levels of Tide you know higher or lower um possibly even you know um a store and then the crowd levels you know how many people fewer people anything that tends to go up or down on a regular basis because if it's irregular then I can figure out this pattern but then it's going to change so you know it becomes not that predicting um but if it if it's established that it's regular then we can start looking at what formula can I use to predict this and very often it's a modification of a sine wave we could modify a cosine wave and really you know the the difference is the shift or the difference is where we want this to start so if we shift a sine wave you know it's cosine so very often we we use a sine wave but if I have something you know I have some data and it doesn't even have to be a perfect sine wave we're going to look at just ways we can grab that you know some of the key points and sketch out a sine wave that matches this so that that's really what we want to do we want to see if we can you know match up something well enough to make it predictable um you know can I match something well enough that I can use it to predict um and and that's the thing if I can that that's great this is also as we get into we're going to do a lot more of this in like other you know uh font you know stats statistics classes um you know more on data analysis but I definitely wanted to include this throughout this uh throughout this course just some different things that you can do um you know one of the things is you know grabbing data from somewhere another thing would be you know what can I do to you know display this and um you know uh use uh some adjustments to see what what sort of sine wave might approximate this but as we'll see it you know things aren't going to be exact we're just going to see can we get a good approximation that's really kind of the goal here can I get a can I get a good can I get a good enough approximation that I can use this to predict and you know if we can that's great if not then we have to keep looking so let's take a look at this um I just want you know just with this sketch I just want to introduce it but with the code we're going to look at you know how we can do this and this is really going to connect with a lot of our how a lot of our trig functions even um help us with you know data analysis so let's take a look at that let's look at the code so let's just take a look at a little bit like what we can do to model these repeating functions and you know I like I like to go back to Tides because it's a repeating uh pattern you know high tide low tide up and down reasonably predictable but it's not perfect and that's that you know that that gives us that ability to say hey can I predict this um knowing that you know my prediction might not be exact so we're going to look at as we looked at before ways to get the data and in this case um I already um downloaded this uh CSV and then we have this dialogue to upload it from the computer so you know we upload it and um I'm going to store that so I'm going to read this and store it this time as all data and I'm going to make this table um uh tie data uh there we go I probably didn't need the extra variable here but in some other things I was doing I used tie data so I just wanted to make that connection rather than re rather than rewrite other things that I was trying um I also you know good sometimes if you get the data from somewhere put the comments in there of where you could get this and I'm going to do a couple things here so like I said I already have this uploaded and then in the code because I wanted both of these I wanted this describe but then if I just print out the headers if I just do this um I could just do tie data. describe and if I just did that it would print it out if I just did TI dat. head it would print that out but it wouldn't do both so I have to put the first one in a print statement and then this one can be the last line of code here so everything for uploading it and then I have this description here so I can see all my different headers water level um and everything this is kind of what I want um all these different water levels and uh the count and then we have the headers and what do we have date time and water level there we go so we can convert this date time into something and use that and water levels and graph this you know pretty cool um we we've been doing some things like that before so far in the course so I just wanted to show you that once we have this um I actually used uh jet GPT for this one part to show you um I I did modify it but I got a lot of this from there and and that's the whole thing like if you have data now sensitive data you wouldn't want to use use that for but you know this was already public data um I already knew um that this count was 169 but it's kind of weird going right up to that limit seems to not work properly so I really made this tie data um you know all data uh head but see if you just put head the header by default it'll just give you you know the first five but you can put a number in here and in this case I wanted the first 100 so now that's the tie data extract the necessary columns um there we go I'm so right away I'm just going to convert it to date time and given the format that it was in that works out nicely that just converted it to time so I now and I know that I have this Val value water level um and this extra space because as I found out that um who whoever made this table put the extra space in there and so I needed to include that in my code um so now I have time and height as two different arrays so um you know convert it days since the first measurement so we're going to convert this um and in total seconds so really this is just you know the math U minus the minutes uh so you know we're going to convert this to this time and this defines a sinodal function so we're going to take a look at this um there we go so remember a for the amplitude sign so it's a numpy function so np. sign B uh determines the period of the function um that shift here xus C and then D the vertical shift so we just Define the sinodal function here um taking in these values x a b c and d and now what we can do is this curve fit function based on that sinal function taking in time and height and create this you know the predictions as a sin ofo function so what we have here we can plot the original so we you know plot um plotting the original um actual and predicted tide height and we're going to have their X label and Y label and what we have is this now doing this um you know on your own that that might take some time oh you know thinking about these Soso functions and you know writing some of that code it it's nice to be able to to do that in like a few seconds and what we get is that sign your toal function based on the data we can get that estimate and it's pretty good so we do see that you know the height gets a little bit higher than expected here um and a little bit lower than expected over here so we get that V variability here um we could possibly do more analysis for a better graph but um quite honestly in tinkering I'll give you the insight and save you the time in tinkering with this I wasn't able to get a better graph than than this one so pretty good just some examples of what you can do um creating that sinodo function and you could work it out to you know predict if you have the same type of thing you know this happens to be time and water level but you could have you know time and water level of a larger data set um remember going back and just putting all this you know in this table name um you know we could call we could always call this table one as as I've done in other examples um once we have that you can always go back and do and you know all these very similar functions you know to estimate the sinos staph and that's often what we want to estimate if I have something that's periodic data some it goes up and down up and down can I predict when it goes up and down up and down um and certainly you know as as bonus knowledge for you here there's a um certainly you know things like stock prices go up and down so people would love to be able to use this to model different prices and um on the stock market and what happens is you can create these great models but it really doesn't hold up so you know you end up saying oh my mathematical model says it might be this but you know that's less predictable than the tides so there you go some you know some useful predictions um you know try it with some other data and you know see see how close you can get here's just some ideas for building an analog clock based on tree so the clock I need a clock face and that would be a circle we could talk about the unit circle but there's actually also a builtin draw Circle function in in Python uh Matt plot Library so then my angle would you know referencing the unit circle would be an angle something like this and remember I probably easiest to just make it start at 0 0 and then the end point of whatever hand of the clock would be the x value you know if that's my angle cosine of that angle would be the x value s would be the Y value and I'll tell you this remember as the angle goes around it's going to go this way starting at about 300 going counterclockwise two things we don't want so we want our shift we want it to start up here so we need to apply a shift to this and then also we want it to go the other way so we could actually have the angle be negative and that would make it go the other way so we could just make each of these negative to make it go around the other way and then apply the shift um we could and then you could Loop through this um you could have uh radians and then 2 pi ided 360 for each second um 2 Pi / 12 for each M um each hour and you know adjust the minutes so um it might be more interesting to also see the second hand so you could have you know the three hands and you could make these a little bit shorter or a different color for each you know that might be interesting um so I want to give you some some hints here as you work on it and then you know we'll go over you know exactly how you you know to make this happen but give it a try um you know set this up this would be and I I'll tell you this to make this shorter you could have some multiplier here in front of s and cosine so the radius is one if I have my unit circle so s and cosine but if I made and cosine you know some other multiplier if it was two then this would be twice as big if it was one half it would be a little bit less so we can you know you can apply some of those so that would that would be it you know set up your Loop set up your drawing a line from here to here um showing you some animation that you can do on the on the graph um you know decide how long each thing pauses you know have your animation and uh you know give it a try Tinker with it run it see how it goes all right let look at the Cod we will just show this first part displaying a clock with the hours and minutes we're going to get the current time and then display it once interesting and you'll see then how we can build upon that the next thing we'll do is the set to show the seconds um all right so let's jump jump into this here so displaying the clock this is nice because it'll give you an illustration of putting together displaying a circle drawing a line plotting points and using sign and cosine and how those how we have those adjustments here to uh take the time of day and translate this into lines on a graph so you see all our Imports um P plot display um importing math time and date time okay so um I'm going to set up the plot for the clock face so classic setting up you know subplots now I called my variable Circle here's what we're going to do we're going to plot a circle um Center rad uh radius and fill equals false because I want it to be open uh you could probably put this you know make a different colored clock face if you want but I want it just open right now this a lot of times I graph and I don't worry about this um but remember python skews the X and Y axis a little bit so I make this equal so it's a nice Circle for our clock here um rather than having a weird oval clock all right and creating the circle up here then add artist and I'm going to add the circle to my plot and each axis there we go um so the radius is one I'm going to make this 1.5 in each Direction I know just to tie in the math and you know give us a little bit of buffer around the edges there we go um dots to represent the 12 numbers I said Dots here um but I actually I'm going to make it blue triangles okay so in range 13 because remember it's going to start at zero which is fine and then um if I have range 13 the less one it will do is 12 and that's what I want okay so what am I plotting here I'm plotting notice these square brackets that's going to be one x coordinate and then after that it's going to be one ycoordinate okay so what do I have um math. cosine and what do I I want um B is my variable that I'm going to Loop through from 0 to 12 and each of these um so if the circumference is 2 pi in radians and then 2 pi divided by 12 for each number so that ends up being math. Pi / 6 and so you know I'm going to plot that that times so these are all my angles btimes math. Pi / 6 because each time so that value Pi / 6 * 0 > 6 * 1 > 6 * 2 all my different angles and then the x value will be the cosine of that and then the Y value will be the sign of that and notice again these are just one po you know that's one point I can do all the math right there within the brackets here and each of them I chose to make it a blue triangle just because all right so there we go so that's going to plot and we could put the numbers there I actually decided to just make it triangles so now we have our Circle we have a triangle for where each of the numbers would be around the clock and minutes each of these I'm going to get this variable datetime do now um that's why I imported date time and then I'm going to call you know my my variable time now the uh and and actually just to confirm uh you know cuz writing some different code in different languages the syntax is a little bit different I looked up um you know another free code Camp uh colleague of mine colade wrote a great article about you writing a code in Python to get the date and the time hours minutes seconds nice brief article uh so that was what I Ed as a reference you know so thank you clad all right so um get the time now and then time not now so I like this Str strf time so really it's probably a shorten version of the word stringify so uh that percent sign capital M in quotes so that's going to get the minutes and then I want to cast that as an integer so there we go so I get my my time now which is my date time object I want to get the minutes cast it as an integer and then what am I doing for these minutes so I have to do again 2 pi for the whole circumference divid by 60 minut 60 60 Minutes is going to be 2 pi ID 60 is pi ID 30 then I have the minutes is going to be whatever minute this is um but I want this to be negative because as this goes through for whatever minute remember uh remember the way the angles go where they would start part for an angle of zero in the at the bottom of the first quadrant and then the way the angles go around in trigonometry for S and cosine I need this to be negative because I need my minute hand to circle around the other way so that's why that's negative and then remember they would normally start at what would be 300 so I have to have this shift of pi over 2 so that it starts up at noon or at 1200 so that's where we have this part here for the angle I have this part for the shift so it starts at what would be 1200 and then you know calculating the minutes and this is negative so that it goes around in the correct direction so now that I have this uh minute and my minute angle I'm going to plot this so the minute a you know get the time stored for that variable minute and then for this variable minute angle Min angle so now I'm going to plot and uh zero so the the x value is zero and then for the minute hand I decided to call it 0.9 it's we're in the unit circle so I wanted to make this uh 0. n uh for the minute hand as the length of that hand and then I'm going to do the cosine of that angle because I already worked out what what that angle should be so there we go starting at zero and then the coine of that angle and then the Y y value starting at zero and then the sign of that angle and in this case notice B without anything else so that line that minute hand is going to be a blue line going from this point to this point and hours now very similar I already got my time now variable so now I'm going to stringify hours cast it as an integer now that's going to give me hours um for mine I put minus 4 because that's Eastern time and that's what uh that's what my uh uh computer is going to display so store that as hours and then very similar to the way we did minutes negative because I needed to go around clockwise and then the shift because I needed to start at what would be noon so then also hours 2 Pi / 12 which is Pi / 6 so there we go so I have how many hours and there we go so that's my H angle and then here's what I'm going to plot starts at 0 0 um I decided to make this 7 as the length of that so the x value is the cosine of that angle and then the Y zero there we go and there we go so I didn't just do this so that it showed up as7 but it's a happy coincidence so sign for the yv value and again that Line's going to be blue too and then after all this I'm going to show the plot so there we go so we have this set up the clock face the numbers how to set up the minutes how to set up the hours and then when we run it it looks like this so this is the time right now you see 335 and this is what our clock would look like nice it gives you just one simple um display but what if I also wanted the secondhand so I'm going to do the same thing but I'm going to put everything in the loop um for seconds same Imports but now I'm going to do a loop and you you could make this you know whatever number you want I just decided to end it here which is you know just over a minute um you display this it looks neat and then you know maybe at just over a minute you're not looking at it anymore I don't know I just decided there so times sleep is one because I do want this to happen every second and what am I doing each time I'm going to clear the output and you'll see then it'll display this I I I have this first uh I have the the waiting and then the clearing the output first because as it goes through the loop I just would rather have this come come up first I probably could have put it last but I I think it works out better to put it first and the rest of this is very similar you know all these same subplots um same thing for the 12 numbers and minutes and hours are the same so let's look at seconds what am I doing for the seconds here all right so this angle um you know 6 seconds so I'm still doing you know 2 piun / 60 Ork / 30 um still negative angle uh this one is just a because that's my looping variable a for the for the angle and you know still the same shift so there we go just just like the other hands the the shift so it starts at 1200 and then the negative angle so that it goes in clockwise Direction and then I have I just made this X and Y for cosine and S and now um what I have is I'm going to plot there we go um the X Val this is a line from zero the x value goes from so the first XY value is 0 0 the second XY value is XY as I have defined it up here and then second hand's going to be red just because so there we go so all of this and just notice the indent all of this is in loop again I think it works out better because I have to Loop for the second hand it really just kind of redraws it all and it this is not that many lines of code and it redraws it in a reasonable amount of time so now I have same time and we see the second hand there we go and it seems like it's right on track with you know every second and that's good and so this will continue on it'll loot for just over um just over a minute and then it'll stop you could always change the loop or you could do something else with this if you wanted to make something that displays it um you know on a you know even longer so so but there you go and hopefully um then this clarifies maybe you tried this already and you know we're kind of getting a you know you might have gotten a little lost on exactly what the shift should be or you know maybe you forgot the negative or something like that you know to make it go clockwise so hopefully this clarifies it and you can see U how to make the clock all right so enjoy I I think this is a just a fun project putting it all together so here we're going to go beyond the right triangle we don't even need a right angle anymore to figure out angles and sides and the first rule that we're going to look at at that does this is the law of signs so every side is proportional to the angle across from it so if I have you know that angle C opens up to side c angle a opens up to side a angle B opens up to side B so we have this three ways you only need you know two of these parts but a is proportional to side a b is proportional to sign of or angle b c is proportional to the sign of angle C so if we have any of these you know if I if I know an angle in the side across from it that's the key an angle on the side across from it to set up that proportion and then if I know one other angle or side I can figure out the other one and you see once we know some things we can figure out some more and then you know maybe then I know two angles I can do subtraction to figure out the third I can do law of signs again to figure out the other side and there we go knowing three things about a triangle I can figure out everything else so let's see how this would work so let's say you know I know that angle C I'm going to use degrees that angle C was 60° and maybe side C was five all right so what else would I know maybe I know that angle a was 50° and so given that what I can figure out is then side a so I would set up that proportion here I would set up you know a over the S of 50 equals 5 over the S of 60 and there we go I have my proportion here and I can figure out you know cross multiply and then figure out what I have so 5 * the S of 50 / the S of 60 equals a and we can figure that out so since things like this you definitely would break out your calculator you know R rarely you're going to come across one of those angles where we definitely know you know I know the sign of 60 deges but you know s of 50 is not things that we're expected to memorize so what we would have is you're going to break out the calculator anyway let's write code to do this set up the ratio that that you can set up maybe even prompt for input and calculate the side or the angle that you know if it was the angle that you didn't know then let's say we'll do this the opposite there's going to be one more step here and let's say I'm going to keep this so um let's say if I have um you know 5 over the S of 60 and let's say it was the side that I didn't know so um it may or may not work out to be a 50 Dee angle again but let's just say that this is a little bit less um so maybe that's a four okay and I don't know what angle a is so then that would be 4 over the S of angle a and we see that when we do the cross multiplying you know 4 * the S of 60 / 5 now when we do this we have S of 60 is < tk3 over2 * 4 so it's 2 < tk3 * 5 so now we have um you know 10 < tk3 equals so we do this um actually not 10 so we would have four times uh so be 2 < tk3 divided by five so there'll be 2 < tk3 divided by five and normally we would have a uh a decimal for this we would do this on the calculator but if I had this two root3 over 5 equals the S of angle a we see that the next step is inverse sign because the sign of angle a equals this you know that's what we end up solving for so then to get angle a I need to do the inverse sign and so that becomes comes the inverse sign or arc sign of 2 < tk3 over 5 or the decimal equivalent and then that's what would give us angle a so we see you know we're building upon proportions and solving we're building upon you know co uh s and cosine or you know whatever our trig ratios are inverse when it's the angle that we we need to know and still knowing these steps then you know certainly you know that happens to be an angle we know most of the time it's not going to be so um even this you know we probably want a decimal equivalent so we're going to write code to do all this prompt for what we know run it through the formula and you know if it's an angle that we don't know then we have this Step at the end if it's a side then you know just cross multiplying and we'll build upon that to be able to solve any triangle but let's take a look at the code uh to solve using the law of signs so if you find yourself in this situation that you know the as at least one of these angle and the side across from it and then if you know one other thing an angle or a side then you can do law of signs and remember if I if I I do law of signs you know if I know side B then the only thing I can figure out is angle B at least in the first step you can run through this now that you know more things but that's another story so you know you're going to set up a proportion remember two of these but this remember for this formula shows that you can do it with any of the three so I'm just for all of this I'm just going to picture the first part A and B and remember you know you can call them A or B as long as you know one side and the angle across from it and then one other side we're just going to call them A and B so these are our known values we're going to I would know angle a and side a and then um I'm going to do the simple version here where I would know angle B so if I know these three then I'm just going back and picturing this cross multiplying so I know angle a and side a and then I would know angle B so what do I have S of angle B cross multiply time time side a divided by the S of a and so that's what we have and I just need to convert this all to radians math. sign math. radians angle B times side a / math. sign math. radians angle a all right so we see just my cross multiplying here and then I get side B but each time I'm converting it to radians because I'm expecting that people would put in degrees for these a lot of times in triangles and the situations these come up it's degrees inside the triangle that's tends to be what people use so you could have radians here and which which simplifies this a little bit but very often it's going to be degrees so there we go C you know there's the formula you set up uh the known values and if I'm trying to find a side then there's my formula if it's an unknown angle very similar um but a little more complicated I'm going to add another step so if the unknown angle known values are very similar I know angle a and side a and this time it's side B that I wouldn't know and so with side B then here's my cross multiply now notice I just made this variable B that we're going to deal with and change later but my cross multiplying remember if it's side B that I know then side B time the sign of a / a but what does that give me that gives me the sign of angle B not the final answer yet so I have side btimes s of angle a divid by side a but again not my final answer yet uh divided by side a and I think I just clicked there accidentally yep okay so side so just this variable B I do my cross multiplying but I'm not done because angle B is the arc sign of that so I I solve for b but then I have to do the arc sign of B so math. a sign of B and then it's going to be that's all automatically going to be in radians so then I'm going to convert it to degrees and then output and angle B so then then I'll print that so we see same cross multiplying but remember that last step is um arc sign because I'm going to Sol I'm going to get the ratio and then it's the sign of angle b equals that so there we go then we can get fancy because this is the value of putting all this in code that you can set this up once and you can have you know prompt for input you don't even have to change the code here you know up here I you know to make it simple I just have it built in that you could just put your known values in here but we can set this up if either angle or side is unknown so prompt for the known values all at the known ratio and here I'm going to ask for the known angle input and then cast cast it as a float called angle a um side across input float side a and if you don't know the value put it X um sometimes I have it as a zero so in this case I have it as an X so input the other angle or the other side and somebody's going to enter a value for one of these and then an X for the unknown and then if we have this so if angle B is the unknown then we're just going to take this oh okay well we already would have had side b as an input um and you see each input here I didn't convert it yet because the X could be a string and then once I found out which one it is then I'll convert the other one to a float side B and then I do my ratio here there's the ratio I remember it's the unknown angle so it's ratio I do my uh law of signs but then I convert it because that that just gives me the ratio so I have to do AR sign and that gives me that in radians and then there we go notice this one I just did it a little bit differently and made it here just the formula there we go radians times 180 divid Pi gives you the angle so notice this just manually you know converts it to degrees and and different things sometimes you know you can just use math. degrees math. radians to convert and sometimes you can you know set up the cross multiplying yourself either way and that's if we have the unknown angle and then the unknown side so if that's X now convert the angle and with the angle there we go all one formula very nice convert everything convert to radians behind the scenes so you don't have to see all those decimals and then just right away output side B There we go so now we see how we're starting to build upon these formulas you know we now we have a formula for the sign um s cosine and tangent if I know that I have a right angle we have law of Signs Now for this situation if I know the angle on the side across and there's more that we can do to work with triangles where I don't even have a right angle as long as I know some things so next thing we'll get to the law of cosiness now let's talk about another way to find the angles and sides in the triangle also we don't need a right angle for this so we have the law of cosiness and if you take a look at the setup of the law of cosiness U the first part of it looks like Pythagorean theorem c^2 = A2 + b^2 but then we're subtracting something here minus 2ab time the cosine of C so we know notice that if it were a right triangle if angle C was a right angle the cosine of 90 is zero so then we wouldn't be subtracting anything and then you go back to that formula but this is the adjustment here as angle C gets bigger or smaller minus 2ab * the cosine of C so that's how we would get and remember in doing this we would be solving then for side C so as the angle gets bigger or as the angle gets smaller then you know that gets smaller and then the cosine actually gets bigger so that we're you know subtracting more and you know that corresponds to a smaller side C also notice that I I usually remember it is this one one way sometimes people rearrange these a b and c and everything but you can solve for side C or I could rearrange it to solve for angle C because they each show up once so you if you if you knew everything else um you could solve for angle c as well notice the setup then of what we do know we solving it this way if I'm solving for side C what do I know I would know a side a and side B and then I would know angle C which is the angle between them so that's the situation for law of cosin if I know side two sides and the angle between them law of cosin and then the other way then if I do this then I know the angle then the only thing I can solve for is the side across from that angle and and this is where some people um rearrange the you know uh whatever uh letter they want to put for the side that they that they're solving for and then the other two sides but remember whatever it is it's two sides the angle between and then you're solving for the side across from that that angle whatever letters you decide to call them or if I knew all three sides that works out because I could plug in everything and then my last step would be inverse cosine to figure out the angle so we could do that um and remember the rearrangement of that is I would subtract c^2 minus a^ 2 minus b^ 2 um equals just to show you the setup of this so then that would if I subtract these over then that would equal 2ab times the cosine of angle C and what do I want to do I want to divide both sides by this so it would be c^ 2 a^ 2 b^ 2 divided by 2ab equals the cosine of c and we'll look at this in the code that then after I would solve all this then I'm going to do Inver get that number and then I would do inverse cosine to figure out that angle so you know we we'll look at this in the code how we can use this because at any point of this you know you're going to be plugging this into a calculator anyway and you know possibly even having a formula already on your calculator for it so what we want to do is we're going to look at the code to prompt for these sides or these angles these sides and possibly an angle and then use that to solve um depending on which side you know and then we'll build upon that you know now that I if I have that situation two sides in the angle between or if I know all three sides whether I have a right angle or not I can solve and solve one thing solve you know once I have one more I can do law of cosiness again maybe if it's another angle I can do subtraction and we can put this all together to know everything about the triangle so let's take a look at how we would use a code to prompt for what we need and then use the law of code signs so here's the law of cosin in code so the known sides are A and B and if we if you can picture the triangle then we have a and b well the other side would be C so angle C would be between A and B sides A and B and we see that that if I have a and b and the angle between them is C that's the situation that we know so if we take a look at this let's say I do know side A and B and angle C we see that that's everything on the right side and I can do all this and then I might even just break it up into two steps do everything on the right hand side and then one more step to to square root everything to solve for C also that if I wanted to I could if I knew a b and c if I knew all three sides SES then I could plug this in and I still only have one unknown so I can solve this and I would do that in a couple steps we'll get to that so unknown side let's just work with that first so remember that I've seen this in textbooks that there's multiple formulas for this just because they're changing what they label as a b and c just take it that the two sides you know call them a and B and the side you don't know call it C that way you don't have to worry about it seeming like multiple equations so that's it I'm just going to whatever two sides I know I'm going to call them A and B C is the angle between them and then that side that I can solve for is across from that angle so I would know side A and B I would know angle C and you see how I'm going to do this in two steps c um and I just made up this variable um but that's not going to be my final equals so side A squar plus side b^ squ Min 2 * side a * side B * math. cosine and normally we would expect uh inside a triangle people would tend to use degrees so that's why I'm going to do the cosine of math. radians I'm expecting that c would be degrees so um angle C so there we go so we have all of this um and remember then it's it should be equal c^ s so then the next step I'm just going to square root it and then that side C so really good this is another good use of code because any of these complicated formulas you're going to break out the calculator anyway hey might as well write code to do it and then and you just have to change these values and then output what you need so if I have an unknown angle so very similar when I have I know side a side B and I would know side C so remember this I I I like to just have one formula and you know think about algebra beyond that so if it's angle C that I don't know that's what I can solve notice I still only have one unknown so I can solve this but here's what I'm looking at I'm going to subtract a squ from both sides subtract b^ squ from both sides and then what I'm left with I'll divide by 2ab and that's what I'm going to do in these couple steps here so so I'm going to have I just called this part one so c^ 2 a^ 2 b s and then what do I have left on the other side I'm going to divide 2 a NE * 2 * the side A Time side B and then I have those so then I would divide and I'm just going to call it part one divided by part two and remember that Division I have cosine equals that so I would do AR cosine so remember that still gets me my ratio but I want to know the angle so Arc cosine and then I that's in radians I would I would expect that we would want degrees as the answer so then we store it as that pretty good and then if I have either side I could I could get really fancy with this so I definitely would need to know side A and B so I would expect that input and right away convert it if you don't know the value put an X so side C or angle C and then I just work this in if angle C is X then I'm working in these you know how I would do this um there we go side a side b side C and there we go so same equation side you know if I know the angle I have to go through all this side C minus side b^ 2 minus a^ 2 there we go um step two the ratio divide step one divid step two and then the arc cosine and then I did I just split it up here as one more step then convert it um the angle so the the angle here so if I have side C that I don't know then there we go I will take that and run everything through and notice I just did this and then the next step square root okay so and then also notice instead of doing like math that radians I just did the conversion here here I didn't need to do the conversion I just need to square root it so now we have this if I know either side either a side or an unknown angle putting this together with the law of signs we might start thinking hey I can solve other things but we're going to add another formula and then we're going to get to that how we could you know solve different triangles but here we go different situations for the law of cosiness so here's another area formula when we learn area formulas for triangles we think you know it's 1 12 time the base times the height now this doesn't contradict that but what we're adding is also time the sign of this angle C so let's just say that this if C was a right angle then a would be the base and B would be the height so it would be 1/2 * base time height and then again if this was a right angle the S of 90 is one so times one wouldn't change the answer so we see how that works but then as this angle gets smaller the sign gets to be smaller so we're multiplying and then it gets to be less and less of an area so just a really cool useful formula here because I don't need base and height I can just find two sides in the angle between them and that's all I need for calculating area now we notice that's one of the things we need for law of cosiness and then in using those law of cosiness law of signs I could eventually pretty easily get a situation where I have two sides and the angle between them so we'll be able to find the area so we'll take a look at finding the area and then we're going to put it all together finding every you know any three things I know about a triangle I can find everything every side every angle and the area and this one more formula here was kind of like the last piece of the puzzle and here's this new area formula in code so not yes so notice I just put the formula here if a and b were the actual base and the height like If This Were a right triangle or something then that angle C would be 90 and the sign of that would be one so you see it doesn't contradict but then as C changes then the area gets smaller so we can just put this all in one step here 1 12 * a * B * C and here instead of just putting it in code I right away jump to the user input so we're prompting for the input side a side B and then angle C and again don't get hung up on which one you're calling it it's the two sides you know and the angle between them and this works any two sides and the angle between them we can figure out the the area here so given these two sides and the angle input cast them as float and then just run to the formula .5 * side a * side B times and I I would expect that angle to be in degrees you know as usual for inside a triangle um so angle C convert it to radians and do the sign there we go now let's put it all together let's solve a triangle so that's you know any three things that I have for this example I said we we'll start with let's say I know all three sides but none of the angles so if I have that um how can I get all three angles well we have a law of cosin that if I know all three sides I can figure out one of the angles so then let's start with that let's say I'll figure out this angle here so if I do that then law of cosine I'm not worried about like whether I call which one I call a b or c so remember then we have that um c^ 2 = a 2 + b^ 2 2 A Time cosine of angle C which we don't know so if I have that then let's plug in um if I want to figure out this angle so then I'm going to call this side C and again same formula we just decide which one we want to call side C so I'm going to do that as 7^2 equal and we'll call it a and b so you know 8^ 2 + 9^ 2 2 * 8 * 9 * the cosine of angle C all right so if I have this then you know I get that that's 49 um so 49 64 81 minus 9 * 8 72 so * 2 so then that's 144 um and only this gets multiplied times the cosine of angle C so if I subtract these over then I'm going to get um there we go 64 and 81 subtract it actually is 96 and um then I'm going to do a couple steps here then I'm going to divide by that so if then I have over 144 equals the cosine of angle C so we see you know we'll subtract these and bring them over and now I can even put this if I was doing it on the calculator remember we're going to write code for all this but then the negatives do cancel but we would just write code for whatever these numbers happen these variables happen to be and then remember we're going to do inverse cosine so it's really the inverse cosine or in the code it's going to be the arc cosine math. a cosine inverse cosine of 96 over 144 and that's going to give us I'll round it and then that's going to give us an angle of 48.2 so we would know that one angle and you know in degrees then that would be I'll put it on the inside that would be 48.2 and what I can do then is then I'm going to do this again for one of the other size um if we weren't using a calculator writing code we might debate oh what what what would make the numbers you know more manageable writing code we just want to have a formula that works every time so yes some of the numbers are going to get larger some of the numbers might be weird decimal places but that's fine the code is going to work all that out in a fraction of a second for us so I'll pick this angle next and so if I do this using that same formula again not worrying whether I call what I call a b and c so if this is the angle that I want next so then nine is what I'll put in for angle C so it' be 9^ 2 = 7^ 2 + 8 2 2 * 7 * 8 time the cosine of angle C and again whatever I happen to call it so we see I want to show you like on on the board here's how we would use the formula you know whatever the angle the side is that I know and then the angle of cross limit that I want to know you know these are the two things that might change depending on you know situation so there we go so what I would have now you know it'd be 81 = 49 + 64 7 * 8 is 56 so times it's 112 time cosine of angle C and if I subtract 81 49 64 again then I get a 32 um and then if those are all subtracted then it's this is what's left on this side of the equal sign and I would divide by 12 so it' be divid by 112 equals the cosine whatever of angle C and again negatives that cancel out so we will do inverse cosine and we're going to use AR cosine you know math. a cosine when we get to the code of 32 over2 also if if I was trying to do all this in my head then I might reduce that fraction but remember writing code it'll work that out no problem in a fraction of a second so we're just going to have it when we set up the code it's going to be you know whatever variables happen to be there it'll work it out so inverse Co sign of that then that's going to get us an angle of 73.4 there we go rounded so there we go let's call it this 73.4 and then if I have two angles I'm just going to use subtraction and even in writing the code we'll use subtraction to get that third angle so we would add these up subtract it from 180 and then that would make this angle 58 .4 there we go so we have all three sides we just figured out all three angles and then what we would do is I could do one more step to figure out the area because very often that's something that we'd want so um I'm going to pick this this angle here so just because so the area remember then that's 12 um a b * the S of C so then that would be 12 * 7 * 8 * the S of 73.4 and there we go so I I would work that out in the calculator so you know 28 * sign of 73.4 um there we go and we could figure out the area of of that so then I would um as we get to the code we'll look at putting all this together and then setting an output um one of the things that you know I rounded in all these steps but in the code and behind the scenes we would store these variables and we would not want to round them until the final because they will end up being a lot of decimal places we want that for our in between steps but at the very end when we are about to display it then we'll round them so um we'll we'll look at this setting up all these to have a definite method you know what are we starting out with and then work from there um just using the variables um not rounding till the end and then we'll look at outputting you know then no matter what we input it will output every side every angle and then the area so let's let's take a look at how we do that in the code to solve any triangle and here notice I'm also importing the matap plot library because I want to just give a a triangle even though it's not drawn to scale and you'll see I'm going to have some points and some lines just as a reference so then I'm going to label this you know a b and c don't worry about these numbers you'll see it's just as a reference um and you know taking out the axis lines so after that I'm going to put um a menu here where I'm where I'm just going to print out each menu option and this is you know how we can put how we can put it all together of all the different things let's create a menu what do you know do you know two sides in the angle between three sides side angle across another angle and notice each of these correspond to a different situation two sides in the angle between then we know we're going to do law of cosiness three sides also law of cosines but it's going to be different side angle cross and another angle side angle across another side so the two situations for law of signs a right angle and two sides so Pythagorean theorem if I know that um right angle side in another angle so that would be trig um s cosine and tangent um I could do subtraction to get the third angle um and you see how given each of these starting situations we can build our way to knowing the whole triangle so given the options this is what you're going to end up doing the angle uh these variables we'll just initialize these at the beginning just so that you know here's what I'm using angle a side a angle b side B angle C side C and then the area and throughout all these we're going to keep these variables consistent and then we'll we'll work with them so I did this one as an example so law of cosine so to find the unknown side if you pick option one that you know two sides and angle between it's law of cosiness so having picked that option we're going to prompt for side a side B take them as float integers and angle C again we expect it to be a degree and so I really took these from what we were doing before solving so step one and then uh I'm going to run through my law of cosiness and then I made another step where I'm going to square root step one to get side C so now prompted for these now I also have side C I can do law of signs to find another angle because you see now I do know angle C and the side across from it so I can use those to find another angle so again just copying this from La of Co law of signs and remembering our cross multiplying so I would know side C and angle C and let's call a is with the one I'll work with next so I'm going to do side a times cosine of angle C Time s of angle C / side C and that's going to get a and I just decided to break this up into two steps because that's just an in between variable um a I need to get I need the angle so I need Ark sign and then convert it to degrees so now I also have angle a which having all three sides from earlier I just got angle a and I just can do use subtraction to find the next angle 180 minus angle a minus angle C and then we have our newer area formula so I don't need base and height I can just do5 * side a * side btimes the sign of the angle between them and now with all of these it will overwrite all these variables here and I'm going to print this out you see angle a side a angle b side B angle C side C and the area and each of them I just have this built in that I'm going to round it to two decimal places only at the very end here because sometimes um it gets to be you know really long decimals and we really don't need that we don't want to round in the in between steps but we also um you know chose plenty um because dealing with any trig it's very rare that you're going to get uh sides and angles to all be nice or even decent decimals there's going to be something in there that gets to be a weird decimal so when we run it so we see this is the setup here so I just wanted a general triangle that you can see the reference angle side and not drawn a scale these can be any size but as we we get that General reference and then right under it what do you know there we go so I'm going to enter an option number and if I enter the option one so I'm going to input what do I have side a I'm going to in my mind picture a nice 345 right triangle so you see like C would be a right angle and I'm going to do a b and c that um and I'll say that I know the angle between them so side a I'm going to say three side B I'm going to say four and angle C I'm going to say 90 and you see then it'll run through and give me every side every angle and the area 3 four it figured out that side five and yep these are the angles for a 3 four five triangle the area would be six so look at that 34 56 that's why I picked that as an example I just like how that works out so I work this out this so this is all of these then I have the comments here law of cosiness to find the unknown angle things we were doing before and then you would complete the code here I'm actually going to leave this to you because this is going to come up um little uh hint here this this will come up in the big certification project so I'll leave this for you to do the others but you see expect it to be using those variables and if you copy the code from somewhere else make sure that your variable names are the same that you have like if I have side a you know uh underscore and then capital A that that matches every time I'm referencing side a so there we go all signs and you see I have the comments here of what you need to do and you're going to each of these finds one thing you know law of science it will find one thing the unknown sign one thing the unknown angle and then you'll follow it up with the other things that you need to do to find everything else usually it's like you know two more steps that aren't that bad once you do the law of signs or cosiness once Pythagorean and Theorem and if you pick that option right away it's going to print out make C the right angle um and take that automatically that way it works out that you can do pathagar theorem a s b^2 and trig ratios if you know you could take a look at that um you know that would be hey I know an angle and a side and I know one of the angles is a right angle s cosine and tangent we can figure some stuff out so that's what we want to do and I want to show you here that yes you can put it all together and have something that you can solve any triangle and then this will give you a chance to practice and put together a lot of this code and we'll look at some other applications of this this later we can even at some point put this in functions so that you can just um run run run a function to do whatever you want with the triangle now let's look at getting a triangle from three points I don't even know the sides or the angles yet but let's say I have three points and I want to first of all say hey that they would make a triangle let's get the measure of each side so as I look at these sides that I want to get you see then I will make my triangle and what we're going to do is the distance formula three times so remember the distance from this point to this point any perfectly horizontal distance is going to be the change in X X2 X1 and then any you know so exactly across here and then any vertical distance is going to be Y 2 y1 and since we are on our cartisian in rectangular coordinates this will be a right angle and then so then this is going to be the distance so that's what you remember so the distance formula comes from Pythagorean theorem so when I look at this I'm going to do um the change in so that's going to be A2 + B2 = c^2 so I'm going to do the change in X so X goes from 1 to 7 so it's going going to be 7 1 SAR and then b^2 is going to be the change in y only goes from 1 to 2 so it's going to be 2 1^ 2ar equals c squared but instead of squaring it here I'm going to say square root both sides so then we get to this so you know there's our distance formula applied to these two points and so what do we get 7 1 is 6 squar is 36 so then I get the square TK of 36 2 1 is 1 squar is still 1 + 1 so C is the square Ro T of 37 so I'm going to say C equals uh we'll round it to uh 6.08 um I don't want to round it to one decimal um I guess I could but um I'll round it to two decimals for this one 6.08 so there we go I can label this and when we do this in the code we were going to save this as a variable because it would have more decimal places but you know this side here is going to be 6.08 I'll put on the outside 6.08 and then I'm going to do Pythagorean theorem or the distance formula again for the second side so if I take a look at this so I get um if I take a look at um this next one here so from you know one so the change in X it goes from 1 to three just over a little bit so there we go I get so from 1 to 3 so I'm just going to do 3 1 SAR and then the Y value goes from 1 to 6 so then it's going to be 6 1^ 2ar and then I'm going to square root all that again we we'll have this in the formula and it's just going to import and we're going to run this through um you know three times distance formula each time so what do we get 3 1 is 2^ squar is 4 6 1 uh is 5 squar is 25 there we go and so there we go so we have um 25 plus so the sare < TK of 29 and then I'm going to get the third one so same thing I'm going to do the distance formula again for uh from here to here so notice it doesn't uh since we're squaring it the negative values um are going to get squared anyway but if I take a look let's say I take this one as X1 so if I did that so then um it would be 7 minus 3 so that's fine 7 3 squared and then I'm going to do 2 6 squared even though that's going to end up being negative but then I Square it and then we square root each of that so there we go SE so it's four squar so then that's 16 and then four 4 squar is still positive 16 so then I get the square root of 32 um there we go so then this one's going to be uh 5.66 and let's say then that I want to do the uh the angles well then what I want to do I want to do um law of coin for the angles so if I have two sides then I can do law of cosines to figure out the angle between them you know any two sides um there we go and the uh yeah so the law of cosines I can get you know any of these two sides and do the law of cosin and then I can do the law of cosin again you know now that we have the sides we can we can apply that um again each of these steps I'd be St uh storing them as a variable and um you know we're just adding that other layer here the the distance formula so from three points getting all the sides getting all the angles from the law of cosiness um I'll do that maybe I'll do it twice and then subtract for the third angle then I can use our area formula so this is good to be able to get this from three points because a lot of times you know when we're dealing with like vectors in space we might have the points and then I can use these distance formula and other things to figure out um you know the uh components of the vectors all right so let's take a look and uh see how to do this in the code now maybe we already if we already had the sides or angles that we already looked at that but supposing you just have three points and we can use this in other things from drawing to you know possibly some other you know physics applications so that's why I made this a function and you see here the first line Define the triangle function and it's going to take this input of three points X1 y1 X2 Y2 X3 Y3 and here what are we going to do I just put the overall um we're going to do the distance formula three times law of cosiness uh three times because then we get the three sides law of cosin twice for each angle and then the third angle we can just use subtraction so defining this and then everything here we're going to put the import math inside our function and then we're going to go down here and I just put comments for yourself too if even if you're the only one looking at this you you want to keep it organized put comments so what are we going to do we're going to get side a and there's our distance formula and we REM remember this you know change in X so X2 X1 and then Square it Y 2 y1 and then Square it and then it's like Pythagorean theorem those would be the two sides and then is equal c^2 so math that square root to get the whole thing and what I Al already did is I actually just copied this and then changed the numbers or letters but when you do that be careful that you copy it correctly or that you change what you need to change so if this gets stored to a so B um what I did is instead of taking X1 and x and y1 now from here to there I went from 2 to three so you see I'm going from second point to the third point so this gets x3 X2 Y3 Y2 and then I'll store that as B and then the third one I'm going from the third point back to the first so the order doesn't matter because you're it would just make it negative and then you're squaring it anyway so I just put it this way x3 X1 Y3 y1 so we see you know the first side the second side the third side and store that as c um I called it a and C instead of side because knowing that I'm going to use that a bunch of times it's less to rewrite all right now to get angle a so what are we doing here to get angle a and remember there's some algebra involved the cosine the law of cosiness and I did this in two parts here so remember that you'd have if I want angle a then I have side a^ s equals as the default formula and so I would have to subtract side B squared I would then subtract side c^2 and then what I have left on the other side of the equal sign I'm dividing so that's why I have divided by this but that doesn't give me my final answer yet that gets me the cosine a which I just put cosine underscore a as a variable and the first way to do it I'm going to get radians and so if I have the cosine of a then I'm going to do a cosine the inverse to get the radians and I want that variable and then I'll do this to convert from radians to degrees so I have both and notice in each of these I'm not rounding anything in my in between steps I want to keep all those that's going to help especially when you do these and you're dependent on solving this one variable and then using that more than one place or even more than one place later you don't want to round um you're not going to have to see these displayed but it just makes your final answer a lot better keep as many decimal places as you can so now to get now to get angle B very similar so if I want angle B then you know side B and then I'm subtracting A and C um same variables over here and that gets me the cosine then the next step inverse cosine and then convert it to degrees and angle C so you see each of these I'm doing it just in parallel getting the radians then getting the degrees so how many rad in you know inside the circle is 180 degrees or inside the triangle is 180 degrees so that's also Pi radians math. Pi minus these gets me the other angle 180 minus these gets me the other angle and the area remember our uh our formula instead of base and height 12 B * C time the S of the angle in between them if B and C were base and height then the sign would be one so that's 1 and half base times height but then we can modify it as the angle changes so and and to have one less conversion you know I kept the radians on this and I'm doing the sign involving radians now that I have all of these a B and C are the sides a radians a deg you know are the angles and then I have area now in the final display I will in the final display I will round it here we go and in this I just rounded them all to one one place you can always add more but again it's the final display you definitely don't want to round it in between but there we go so this is all within a function you could have it return values if you want uh I just had this within the function that it would just print and again you can use these I I give you some things that give you a start and you can you know have this return other values or whatever you'd like um okay so then that's all within a function I'm going to call the function you see how I would call it triangle and I decided to make it you know easy values 03 0 0 and then 40 and I put them in that order to make it a nice simple right triangle where angle C was a 90° angle at the origin and this is what we get angle a side a angle b side B angle C side C Good Times okay so this project is the foundational math certification 4 where we're going to go through uh you're you're going to go through a lot of the things you've already been learning and working on and hopefully also practicing from the analog clock to to the triangle solver to um all the trig we'll also add a couple trig applications uh more about waves and syncing up waves um for harmony so go through this if you haven't already you know I designed it to go for you to go through on your own work through each step this is going to be the walkth through so if you've already done that or if you're stuck on anything then this will give you an explanation of each step so this is the walk through of the foundational math certification 4 so hopefully you already gave this an attempt on your own but then you know you want to go over some things and here so we're going to do that and just like the other certifications um first thing you need to do is acquire the testing Library this just shows you how you can import that or any Library um in this case I have I have that posted on GitHub so when we run this it's just going to go through it's going to get the library um save it to your working directory and import what you need and then the test that we run at the very end outputs yep past go onto the next step so we're going to do that so drawing shapes so we're going to get to some other things we're doing in graphing and here's where where you know you don't have to have a function per se you can draw based on any points so here we're going to draw a polygon and we're going to get an array of various XY vertices um and we're going to plot each point and then align from that point to the next one so that first function here is path. move to so I'll move the cursor you know that you won't necessarily see a cursor move but we'll move it to that point and then path. line too so I go from that point to the next draw a line and at the very end path. close poly and we'll see this so here's what we're going to do um you're going to like a lot of these I have something where it works when you first run the code and then you're going to make some changes so you're going to run the code then you're going to add these points and change the two arrays so here's how it's working um all the things we're importing plot path patches all right so right now I have these vertices and we're going to leave it at that so notice each of these is an XY point and I do have them with decimal points um just because I I'd like to rather use them as floating points rather than integers so I put everything with a decimal point so now as it is you see the codes move to line two and each of these then I'm going to have this we're going to keep the code here path verts codes so we're going to create this path using this array of vertices this array of steps so you know I called them verts and codes and patches there we go face color blue and you'll see you'll see that um all right so now I have my plots and what I'm I'm just going to add this patch so you see we Define these two as an array of vertices an array of steps to find this in the path patch um incorporates the path and then patch goes into the plot all right and I just made this axis 5 in every direction there we go so let's see what happens when we run this so you see I just made this you know given these four points from 0 0 um there we go all these four points and it goes around and there you go makes a circle or makes a makes a rectangle it actually is supposed to be a square but remember uh python often stretches out the x axis a little bit so then we want to go through and we want to add these points here to make a hexagon so I would rather add um 11 I would rather add that from0 0 I think I would rather add that after 0 0 over here so that's where I'm going to put this one Nega 11 one and I'm going to put this here and then there we go 02 22 um and then here 22 and then two because we're picturing it's this point and then down to two 0 so I'd probably want to add that other point out here for a hexagon so I'm going to make this um there we go there okay and now what I need is line two again twice because otherwise I I I have more vertices than directions and that that won't work so I'm just going to copy that and there we go two more times to account for those and there we go so let's run this and see and there we go so we have a hexagon so that that's that's part of this and because it works code t p Code test P so there we go we if I put them in in any other order they would have it would have wanted to draw the lines in that other order and it would not necessarily have made a nice looking hexagon so there we go all right and now we get to this one so Pythagorean theorem all right A2 plus b s = c^2 and this is really we're going to build upon this a lot for the trig that we're doing um but we'll get to that um so side lengths all right so write the code to prompt for a b and c so notice I do have this that I think it will do something if you know you didn't do anything and write it but um there you go prompt for a b and c and there we go so C string um notice instead of zero I actually really would want this to be this something like this I'm just going to copy this because I think that that's a little bit quicker and then change that to C so there we go so we have each of these it prompts for the input but here's the thing if I want C is always going to be the hypotenuse so if a is you know if I just type in a um because remember I first of all how this if you don't know a side length just enter the letter so if a string is a then that means B and C I have values for convert them to float and then what do I have c^2 minus b^2 and then square root that answer to get a if B I don't know then it's going to be very very similar we just have the letters changed so if B I don't know then I'm going to prompt for a and C c^2 minus a^ 2 and square root the whole thing and then this if C if C is there then what do we have then I have if C is what we don't know then here I would would make it C equals um uh math.sqrt of remember C would be the hypotenuse so we would have a 2 plus b^2 a squar plus b squar and so that's what we would have for Pythagorean A2 + b^2 and then get that answer square root it and then that's what would be and there we go I could um and then I would have to print that out notice can't skip the print statement so then print and I would print C equals c so there we go and then if we ran it all right so let's uh let's run this um let's do a 3 four five triangle and let's run this to show you that um supposing B we don't know so the original code let's say a is three B I don't know and then C is five you see 3 5 b must be four um It also says Code test pass because we did make we did uh add that code but let's say let's say a is three B is four and c I don't know C is five there we go and and then of course it will work the the value of that is when it is not a nice 345 all right so we have the distance formula and here I'm just going to show you what this looks like um remember that it's really Pythagorean theorem so I have this that you're just going to run this code which I'm going to do in a second here and you're going to see that how I plot the points and you know take a look at the code I just put a delay so it's going to plot the nice triangle the points and then you run the code and you'll see how this relates to Pythagorean theorem so you see you have your two points and then change in X Change in y and then that would be the distance because on the cartisian plane change in X is perfectly horizontal change in y is perfectly vertical so that makes this a right angle and that's how we would get the diff the distance formula and that's all you needed to do for that one because now part two we're going to solve this and remember Pythagorean theorem a^2 plus b s c^2 so then that translates to change in x squared change in y squared and distance squared so we see you know that could be a b and c as sides and then change in X is X2 X1 change in y is Y2 minus y1 and then the distance there we go I'll just call it D so here I'll use these same example points 1 1 and 74 so change in x is 7 1 change in y is 4 1 and there we go then we solve square you know subtraction Square solve and then we square and then remember you're solving for D squ so then the last step is square rooting everything so this is what we're going to do we're going to prompt for these points and you see we're going to say without input um enter the first XY point the second XY Point all right and here we go so we expect input that someone is going to put a comma so we'll take this input remember as a string split it at the comma and then convert each to a floating Point number X1 and y1 so your job here then is to do this for the second Point split it at the comp take the input from point two split it at the comma and now this really is an array with two elements so X2 becomes this now I'm even just going to copy this but remember it is not first but second and here it's not first but second and remember it's element one so splitting at the comma into this array called second so second element zero second element one there's my there's my X2 and Y2 points there we go so now let's write the formula to calculate the distance so we are just going to say um I'm going to do this and I'll do this I'll still do the square root last so the distance parenthesis there we go um X2 X1 close the parentheses and square it plus Y 2 minus y1 there we go close the parentheses Square it and then my last thing is square root the whole thing so I'm going to put math sqrt and remember to close the parentheses here at the end there we go so there we go distance formula and print it out so let's run it all right enter the first XY point and let's do the same ones that we were doing before um 1 comma 1 and the second XY point is is there you go 4 comma 7 and there we go we could if we wanted to round this at the very end so you know this you know past that's all we need to do and we'll see in a lot of trig usually at least one or two sides or angles will end up being really you know long decimal places because things just don't often work out to nice integers or even nice like quick decimals so we could easily round this out of two decimal places so there we go round and I could round it to a whole number in which case I could just close the parentheses there and you see so um one one 1 and 47 that's okay but you see now you should use this because you know you rounded it that was not a part of what we were looking for but I just wanted to show you you could you could throw the rounding in there and then but now you have this there we go so let's you know let's uh think you know 0 0 and the next point would be three 4 and see 345 triangle works out nicely but it's not always going to you know you're not always going to have nice like that so we have the length of each side now we also have the midpoint formula so no matter where the angle is the midpoint of that side is adding the X values you get the average of the X values and the average of the Y values and that's your midpoint so you see that works out I'm just going to use this other as a reference here that if I have this midpoint which I guess might be around the e at the end of distance it really is the you know halfway down this x line so you just take the average of the two x values and you see from uh the vertical it really is halfway up so you take the average of the Y values so that works out it's a nice formula we can just get the midpoint notice how we can do the same things we're doing you know prompt for X1 y1 split it at the FR at the at the comma convert you know X1 y floating point just like we were doing before but now we want to calculate the midpoint all right so what do we have we have X1 plus uh X2 close the parenthesis divid two there you go getting the average of two numbers and we have um in parentheses y1 plus Y 2 close the parentheses / by two and now we get the average of the X's add them together divide by two average of the Y's and there we go now I have the midpoint so we can run this all right and I might go back to our same one that we were doing before and there we go the midpoint is 2.5 4.0 there we go now we're we're done we don't have to do anym you could you know INR with this go back and also plot this point and you'll see that it's exactly the midpoint all right so we're VI with triangles all all this time but trigonometry is really triangles um you know the measurement of shapes gone with three sides so it's really triangles but trigonometry then takes it to the next level we have some more formulas here there we go Tri means three gone means shape metri means measurement so the measurement of shapes with three sides all right so all of these we're going to look at other formulas and I have some more triangles that I'm going to display this one I'm just going to run this and display it and so we see if I'm talking about angle a that's the adjacent side that's the opposite side and that's the hypotenuse the hypotenuse the longest side across from the right angle that's always its own thing but notice adjacent because this you know next to angle a I have a hypotenuse and this other side so this is the adjacent side because the hypotenuse is always the hypotenuse then see the side is opposite because it's on the other side of the triangle the opposite side so there we go now another perspective I'm going to run the same thing but instead of a I'm going to reference this other angle B and you'll see that if that's angle B this is the opposite side that's the adjacent because this is this if I'm talking about angle B it's it's that's the reference angle so this is the one next to it and then this is the one opposite so we we need to just be familiar with that you know it is relative within the triangle and then the hypotenuse is still always its own thing you know the longest side so the S ratio is the ratio of the opposite side over the hypotenuse so opposite over hypotenuse and we're just going to run this and we're going to see that the sign of a and the sign of B are different because the different angles have different opposite sides so we see this code is just going to generate a triangle and when we run it we're going to see a 3 four five triangle and then look at side look at angle a the opposite side is three and the hypotenuse is five so the S of a is 3 over5 angle B the opposite side's four hypotenuse is still five so the sign of angle B is four over five and now let's take a look at calculating the sign ratio so this code is going to generate a triangle also right triangle and what I did is Generate random integers for the two sides and then C I did Pythagorean theorem to and rounded it to get a reasonable hypotenuse and here we go it's still not drawn to scale but it it looks at least reasonable so you can see these sides side measures and what we're going to do is we're going to prompt four you know what's the measure of the opposite side and what's the measure of the hypotenuse you know so input gives us a prompt and then the user input comes in as a string we're going to cast it as a float and store it as op or hypo opposite or hypotenuse op p p or hyp and then now yours would have S of a equals z so if you ran it it would still just output zero but your goal was then just to change this to S is opposite over hypotenuse and then we're going to run this and then you'll see each time you run it it'll generate different numbers and given these so if we look at angle a the opposite is 8 and the hypotenuse is 8.1 and then it prompts you for that what's the measure of the opposite side eight hit enter what's the measure of the hypotenuse 8.1 and then it will give you the sign of that there we go cosine very similar cosine is adjacent over hypotenuse and so this just like before we have this is going to just generate the triangle so you're just going to run this and then we see from angle b or angle well from angle a adjacent is 4 five four is the adjacent and five is the hypotenuse even though both of these sides are next to angle a the hypotenuse is always its own thing and then from angle from angle B three is the adjacent and five is the hypotenuse still so we see these different ratios so now we're going to calculate that just like we did with the sign we're going to get you know random integer for side a side B to Pythagorean and we'll see for this one calculating the sign ratio the cosine ratio doing very similar things random integers Pythagorean theorem to and just rounding it to one decimal place to get the hypotenuse and then we're going to prompt for the measure of the adjacent side the measure of the hypotenuse um for right now don't worry about that red underline and when we prompt for these remember you know what's the measure of the adjacent side comes input comes in a string cast as a float and that's adjacent so if I store these as these two variables then the cosine this is just what you need to change you need to make that adjacent over hypotenuse there we go the cosine ratio and then we're going to run this and you see this is what it gives you not drawing scale and it gives you these random integers you know may or may not look reasonable in the hypotenuse and then it's going to prompt you for for angle a what's the measure of the adjacent side oh it's seven type it in hit enter what's the measure of the hypotenuse 11.4 and hit enter and then what it does is it gives you the cosine of that angle so there here we go so we can see that you know these are some things we can do to generate the cosine we'll do the same thing with Tangent and remember tangent is the ratio of the opposite over adjacent so this one when we run it it's just going to display this so you can see from angle a three is the opposite four is the adjacent and we also could imagine that the other angle B it would be 4 over 3 because different opposite and different adjacent so now let's calculate it generate integers and when we prompt for these measures then you know what's the opposite store it what's the adjacent store it and then yours would be equals zero but then you're going to this is what you're going to change it to that the tangent is opposite over adjacent and then print out the tangent so we get to this and you know two random sides Pythagorean theorem we get the third one and what so from angle a what's the measure of the opposite side oh it's one hit enter and then the adjacent oh it's six hit enter and there we go the tangent is opposite over adjacent which is 1 16 then there's the decimal so remembering these there's a nice formula here um and it's written like this because you see the big S for sign and then a little o h opposite over hypotenuse The Big C for cosine and then the little a over H adjacent over hypotenuse Big T for tangent opposite over adjacent and you can imagine you know using this and you would pronounce this soaa there we go you could see that soaa but that way in picturing this it's easy to picture soaa easy enough you know nonsense word to remember and then it reminds us of s cosine and tangent ratios there we go and what you're going to do here is you know we see s cosine and tangent ratios and we're going to calculate the actual values and we're going to use this as a practice app so not only you going to practice you know remembering s cosine and tangent ratios then we're also going to write some code to generate a practice app so here we have randomly generated side lengths and display the triangle so then what we have is um angle a I'm going to use the same triangle that I've been using for the other examples so the S of a and remember so a is going to be lowercase a for the side C for the for the hypotenuse and for round it to four decimal places so what do we have um we want to use this for the same for the other function so the cosine of a and I can copy this but we have to remember what what to change so the cosine of a of a is going to be side B over over C because B is going to be the adjacent side and then the tangent I'll just p this also so opposite over adjacent so that's A over B so we see we'll get these and then the sign of angle B if you can picture sign of angle B the opposite side the opposite side is going to be B because that's what it is you know uh the naming convention capital letter for the angle lowercase letter for the side across from it so the sign is going to be B over C the cosine is going to be a over C and you see that works out it is um the S of angle a is the same as the cosine of angle B and then the tangent is going to be for angle B so the opposite side is going to be B and the adjacent side is going to be a so we have the actual values here now of s Co s cosine and tangent of those two other angles the other angle in the triangle is a right angle and uh we we'll get into this s and cosine but setting it up like this it almost seems like it it doesn't uh quite compute because we have undefined and anyway so we have um you're going to ask somebody to enter a fraction but notice when we do this um I can't just automatically do that math and then output the answer because this um input that we're going to get for the sign this input it won't parse that dividing line it wants to take it as a string but then when I convert that to an integer it's it's not going to quite work with that dividing line so we're going to take that input and then what we're going to do is we're going to split it at that dividing line and so when we split it this ratio is now an array with two elements so the first element that one we're going to convert to a floating Point even though realistically it's probably going to be an integer I'm still going to say float and then the next next element and I'm going to convert that to a float and I stored them as n and D numerator and denominator so there we go so now we have numerator divided by denominator that's the ratio that we're going to get and again round it to four decimal places so what we're going to have here is these uh you know it's going to print the actual and then print um the input and we can see the the comparison here you know um all right so in each of these it's going to you know round it all rounded to four decimal places so it matches so when we see this it's going to prompt for the input of all these s cosine tangent which each of these we calculated up here and then all of this you actually don't have to change but I just want to show you how this works taking the input it's going to be some ratio using this dividing line so each time we're going to split it and calculate it and this is just good thing to have you know tool in your toolbox taking in you know a fraction that somebody types but then C converting it so there we go and we're going to test the app so let's take this and run it and we see that we generate these random side values hypotenuse and you can enter in you know as a practice s of a 19 over 2062 so we'll put that in there 19 or 2062 and there we go as you see the actual compared to the input and then you can check yourself is it correct yep cosine of a 8 over 2062 and we put that in there we go and again compare tangent of a 19 over 8 s of B 8 over 2062 and so in addition to testing out your code you're also practicing your trig ratios cosine of B 19 over 2062 and hopefully you're also recognizing that you know some of these calculations are similar because the sign of angle a is the cosine of angle B and we have tangent of angle B B is 8 over 19 and with that one there we go and the code test has passed not because of these correct answers you know if you got if you put in an incorrect answer you would just see the comparison and realize nope that's not the right answer but the code test is passed because of the formulas in there so as I mentioned the familiar pattern so what we're going to do is we're going to look at just a loop here and um we're just going to change the ratio here so if I have range um uh 37 I just uh pick that number as a random number but it's enough to show some some values here but if I have a as an angle so there we go 1 to 36 and then a * 10 so you know every 10 that's going to be every 10 degrees that's going to be enough than 360 because it's going to stop at 37 uh well if the range is 37 the last would be last number would be 36 and that' be 360° so we're going to talk about radians in a little bit but for right now um the sign we are going to take that angle but um that I have in mind as degrees so we're going to convert that to radians because math. sign works with radians so we have the S value math. sign and it works in radians so I have to convert that angle to radians and all that we know the S and cosine tangent values tend to be long decimals so I'm just going to round that to four decimal places so that's going to be the ratio ratio underscore s for sign so ratio cosine I'm going to do something very similar I'm going to take that value in fact I am even just going to copy this and really the only thing I'm going to change here is cosine so it's going to Loop through this you know every 10 degrees um which radians it's not that's not going to be a nice round number but every 10 degrees and what's the sign of that what's the cosine of that and this is what we're going to do we're going to print that out so I have you know the ratio and I have the tab so we'll see this in a nice so we see you know each I just put a lot of extra spaces so we can see all these values s and cosine is one and then if we look at the S value gradually increases the cosine value gradually decreases now 45 degrees they're they are actually the same so we see this flip you know 40 to 50° you know we really see the flip there s of 90 is one where the cosine 90 is zero and then we get into some negative values um for these angles that are beyond the triangle but we'll see where they come into play with the unit circle so we see all these and that's all you needed to do take a look at those patterns it's pretty interesting um we'll come we'll revisit that as we as we look at some other aspects of this so we have radians now we've been alluding to this and a radian is the measure of the radius along the circumference of the circle so that measure so uh 2 pi * the radius is the circumference and so there are two Pi radians in a circle and there we go one radian it's about 57° and then and exactly 2 pi is exactly 360° so um you know radians it's good because it's proportional to the radius so a lot a lot of uh actual physics applications and such use radians because it it makes a difference it's proportional to the radius that that has an effect whereas degrees we're used to using degrees and a lot of things that's it's kind of an arbitrary number so for some applications that's fine because that number doesn't affect other things but there we go so we have 2 pi radians or 3 pi over 2 if I see it as 3 pi over 2 I'm going to say oh yeah that must be radians but then that's 270° here we're just going to run this and just see the comparison um you you'll see I have just you know um some code in here to to display Pi yes this is the um Sim pi to display Pi so anyway we have pi and I'm just I just decided to do you know pi over one so that's really Pi it's 180° pi over 2 90 pi over 3 60 pi over 4 45 um P five six so 1 2 3 4 5 and six it works out nicely 300 you know we get to Seven you know all right that's a messy number Eight's not horrible and 9 10 great 11 another messy number and then 12 back to um for a lot of ratios a lot of radians just remembering pi over 12 is 15° and then just doing multiplication from that most of our important angles the like the major round number angles um are going to be multiples of 15° so you know PI 12 reduce the fraction if you need to so we just see our comparisons here that's really this one in the last one I just wanted you to run this to start seeing comparisons seeing some patterns and this all does relate to the unit circle so it's called the unit circle because it's a circle with a radius of one so radius of one unit hence the unit circle and the center at 0 0 so here's the interesting thing when you plot an XY Point anytime you plot an XY Point you're counting you know from z z you're counting over X up y so perfectly horizontal that's X and then perfectly vertical is y and it makes a right angle because of our rectangular coordinates and then the hypotenuse um there we go you which is one if it's the unit circle so there we go when we make that I'm going to run this and then I'm going to go back to talking about this um so we see if I'm on my coordinate plane I didn't draw the axis here but from 0 0 if I were to plot a point I count overx up y plot the point well then that makes that adjacent side x the opposite side y because of my central angle here and if it's a unit circle then that's because the radius or the hypotenuse in this case is one so at every point I get what's the what's the cosine of this angle or what's the sign of the angle opposite which is y over hypotenuse which is one and the cosine is X over one so that's what we always have here so s is the sign the center Tri angle is y over one the cosine is X over one so with this we have the cosine and sign for our unit circle and that's really where all of our trig values come from that you know based on that unit circle then my cosine and my sign are my X and Y values and so that links up with here we see each of these XY and plot this point so we see you know sine value of 1736 cosine value 9848 there you go plot the point and each of these plotting these XY points and when we get Beyond 90 the you know you're in that different quadrant so that's why the cosine is negative it's negative X values and then when we get to Beyond 180 which you know X is NE 1 Y is zero and then beyond that you're in the third quadrant both of them are negative we'll start see we'll see this come up again in a second so in this this is just you know interesting if you want to take a look at it it's similar to what we were doing before about just plotting a display to show this so we have the unit circle here and here's you know connecting with that earlier step that I was just showing you all right so we know now that the coordinates are the cosine and the sign and we know we did that Loop a minute ago looping through all the s and cosine values and then we're going to connect this to that earlier step of creating a path line two so I'm going to start it with path move two and then from that point it's going to be path line to every other point and then path close the poly and that's what we're doing here we're just going to start with this one Zer so that's my coordinate point and each of these because there's enough that are uh floating Point um even the ones that turn out to be integers I'm still putting 1.0 0.0 with a decimal point so there's my uh my vertex array that's that I'm going to build and then I'm going to move the the point to there and now I'm going to Loop through just like I did before and here um I'm going to put this I I I made one less step here because I did a * 10 here still going through uh degrees so from 0 to 360 um because it'll stop at 36 * 10 360 so same thing I'm going to but now I'm storing that that's my X that's my Y and then I'm going to append that to my my vertex uh my verts array and and I'm going to append this to the line two so each of these you know I start with this and I'm going to append each of these XY points and this and now when I complete the array after looping through all that then I'm going to append this last one back to one Zer codes that a pen close poly and it all comes together now I have those two arrays and then here's my path uh capital P path and then that takes these two arguments these two arrays verts and codes as stored as this path so now when I do the graph I can add so you see I have to create this patch so patches path patch and right here I add the path I decided to make it blue face color blue um and then the the weight the line weight I made it two I just think that looks nice and then I'm going to add that so we see how it builds we're building our arrays of points and um steps and then I put that together as path that path variable shows up here in my patches and that patch variable shows up here in what I'm adding to My Graph um I did I don't always but I did make this equal so it it just looks much better when we're doing the unit circle because it's a unit circle not a unit oval and there we go we're going to plot this and then we run it so this is what we see you know we started here at one Z and appended you know 10 you know 36 around every 10 degrees and that was enough to give it a pretty smooth Circle but there we go at every point about every 10 degrees we plotted an XY point and then connected the line and that's where we get our unit circle and this one I did put the grid so we see that the center is at 0 0 and our radius is one in every direction and this is our unit circle so you can really see that that's where all of the trig values come from because at any point in here from 0 0 I can count over some x amount up some y amount and I'm on the on the circle and plot that point and it makes a triangle so it we we we loop around a lot and we revisit things that we've done before in trig um not just because it's full of triangles and circles but because these all relate and you want to see these and you know see how one thing relates to the other and then you come back around and see how something else relates to it we're even going to take this um you know a step further in the full course and uh look at you know imaginary numbers and how that relates to all this but there we go so we see see our unit circle by creating this circle of points in a path so now we're going to solve triangle solve for an unknown side now the way I have this here this is going to display something and we'll just run this and we're going to see that we have their Imports we're going to display a triangle and I'm just going to give it a random angle then I'm going to put that text in there and I'm going to give a random hypotenuse measure as well as display side a and side B so let's take a look at this and then we'll go back and look at what the code is doing so the first thing is we'll come back to that output is that we're going to display this triangle with an angle I'm going to randomize this so so every time that angle is going to be a different degree ree measure and then hypotenuse same thing random number and then I have side A and B so if I want to set up my trig ratio for side a we see the angle so the sign is a over 8 and that's what I have here the sign of 32 is a over 8 one step of algebra multiply both sides by 8 so I have 8 * the S of 32 = a and then when we solve s 32 is always the same number so we figured out that side a is 4.24 and that's what it want to do you can do this on on a board you know without a calculator um you know at some point you probably need a calculator nobody's going to remember the s s of 32° but the here we go showing the steps how we set up our understanding of trig ratios and set up here's my unknown and how I can solve for an unknown side so what we're going to do is we're going to do that for side B so we see solving a triangle I can you know this works because I know that this other angle is a 90° angle so to get the other angle I you know I have this one the other one's 90 to get the third angle I just subtract 90 30 32 I'm going to do s to figure out side a and then I'm going to use cosine to figure out side B and there we go I have you know all three sides all three angles so we're going to take a look at what we do here for sign and we can copy all of this um so we want to get to this cosine value um we can copy the sign value um if we want so we can see um the the key feature is getting to these variables but we can solve um we can even copy this for this one step of algebra solve we can copy all of this as and then um I'm going to put this all here and then we're going to change it so first of all we have the cosine of that angle is going to be B over side C one step of algebra because at times the cosine again um it's going to give us B and then so here's what we're going to do how do I get that cosine value um which here was just set to zero just not give it error when you ran the other part cosine value is math. cosine and remember it's going to be the coine of you know that angle and here we go cosine because then it's going to be that side C which is the hypotenuse times cosine value equals side B so we see we're walking through um you don't always in you know in in your future endeavors you not always going to write out all these but it also it helps you learn what steps you're doing and then you know display it and see that everything works well okay so then side a which we're actually going to make it side B is there we go that times cosine value so there we go side C times the cosine value and I'll round it to two and then that's going to be side B and after doing all that there we go we have the code that you just wrote great and copy the model above and after all of this we already we we copied it so we already have side B and that I mean it's not interrupting but we can just delete this and the question is did you change every line except for the three static print statements say the print here uh solve here so it looks like we did set up the ratio and let's run this and see what happens so we have our value there so we see random angle two degrees side A and B hypotenuse 5 so side a the S of 2 degrees equals a over five one step of algebra and we solve so side a is very tiny not surprising the angle is only 2° set up for side B the cosine of 2° is B over 5 one step of algebra yep 5 * the cosine of 2 = B and cosine is Tiny so side B is five rounded it looks like a and it looks like side B is the same but it's just really because of rounding they would not be exactly the same at all um the hypotenuse would be a little bit more so you know maybe maybe B is you know 4.99 or something like that and there we go so we have this uh maybe we could now this is code T code test pass so we can go on to the next step but you could always go back and change this to round any of these to you know multiple values um you know make this round it to four decimal places or something but there we go so now we see how we would set this up and how we would use this to solve and we're going to apply this to the length of a ramp now here we go um this one once again I I I like to have these where you're going to run the code and then do something to it but if we have a ramp so if you know the height that you want to get to and if you know the angle then we can use sign to calculate the length of a ramp all right so we're just going to run this and as you see I put some of the animation in so there's a slight delay but it it will give you a different angle each time and if you just run it it's going to tell you the length of the ramp is zero and now write the code to solve for side C and each time it'll give you a different angle there and the height and we can use sign to figure out side C because knowing that angle I know the opposite and I want to know the hypotenuse so then we go up here and we see it's already built in you get the same animation here you know random side random angle and then down here we want to write the code for side C which is sign and if we remember opposite over hypotenuse and that's we don't know so we are going to have two steps of algebra like before so we have so the S of 58 equal 5 over C and multiply both sides by C divide by 558 so side C equals that angle which we have here that that side divided by the sign of that angle so we're going to have and we I even put in this step here for you radiant angle so we have side a ided by math. sign of radius angle and it'll probably be a decimal number but we'll leave it at that and there we go so different angle different side but the code should still work the length of the ramp should be 20.7 there we go and as you can see see that way you can build in these variables and write the code so no matter what the angle you can figure that out you know oh I want to get to this height you know what angle you can apply this to other situations in life I want to get to this height what angle do I want and then therefore how long of a ramp all right now we have rope tension so here's another one now this one rope tension will be cosign and we'll see why so tension is the force pulling on the ropes if I have two ropes hanging straight down then that works that tension is divided by those two ropes but if that angle increases then the tension is more so we'll look at this then we'll go back and look at the code so these blue lines if I had if I was hanging something you know a light or a shelf or something if I had these blue lines that are perfectly vertical I would just divide the tension divided by these two lines these two ropes great but these green lines would be an angle and as we see the angle ends up being a hypotenuse because if the UN the line that's not there would be the ceiling and so that would make a right triangle so given that upward force on the blue ropes then the green ropes would be more of a force and as we can see as that angle gets to be more then that green line ends up being a lot longer than the blue and we see this that you know if you you know practical applications if you were hanging something and you have the the ropes perfectly you know 90° with whatever you're holding up great but the more of an angle the more tension on that rope and if you're hanging something heavy that's going to make a big difference so we can figure this out what's the diagonal Force well given that upward force and I would know that angle in this case 25 degrees then what do I have adjacent over hypotenuse and then that's cosine so we see just like a lot of the codes very similar and I just have no for each of these the vertical forces and there we go um but I have the random angle or the rad you know I have my angle and then I even converted it to radians for you um and I have the side that we know so side C is going to be so remember cosine the cosine of in this case 25 is going to be 8 over side C and so two steps of algebra side C is um 8 / the cosine of the angle so we get side C equals but I'm not just going to put a number in it's going to be that side side a divided by math do cosine of radian angle there we go so when we run this now we see the force on the diagonal rope and as you see every time you run it it's going to give you different amounts but that's why we want these as variables so then the code will always work so you see look at that upward Force three we can call this Newtons upward force would be three Newtons but if I have an angle of 78° which you know that that'd be a huge angle not drawn to scale here but an angle of 78° then that force on the dagal Rope ends up being 14.4 Newtons wow um you know almost five times the amount because it's such a huge angle and if you're trying to hang something heavy then that really makes a difference so you know an application for sign like a ramp an application for cosine like tension on a rope an application for tangent surveying so just like the other two we're going to run this code and certainly not drawn to scale but if I have the distance I would have some really tiny angle here because this is what we do with surveying I look ahead and I have something he here again very much not drawn the scale but I would look ahead at some post and I have some markers so I would know ahead of time the distance you know in this case I'm calling it 0. five but I would know this distance um and uh from one point to the other so given that you know some post I have like way down the road I would know this and then so I have my surveying equipment and I measure this exact angle so I'm calling it 4° here but really it might be something with you know a lot of decimal places and that's what surveying equipment does it it it ends up making sure that something is level on the bottom and then measuring an exact angle down to multiple decimal places so then if I wanted to figure out this distance what do I have I would know this opposite I would know this angle and it's the distance I want to know tangent opposite over adjacent so there we go by default it'll just say you know distance is zero but just like we have before so the tangent of four is05 over this distance and two steps of algebra this distance is05 over the tangent of four and like the other ones I have radiant angle and and the other side I have it as side a there we go not as a ver not as um a random number but it's for this one I put it as always 05 again if you're if you're surveying you know your post that you put somewhere you would know that distance ahead of time so really then what you're measuring is that angle so side b equals I'm still going to use the variable because just in case I want to change this later I don't have to change it in multiple places so side a divided by tangent of radian angle and there we go so when I run this again so given this now this time the angles 2° and it gives me the distance of 14 and who knows maybe you know maybe this is in meters you know 0.5 MERS um and then I have you know uh my surveying equipment oh this is only two two degrees oh so then it's 14 M which you know doesn't seem that terribly long of a distance you could walk walk that off but we illustrate the point and you can use this for you know a th000 m and if you have a good scope that you can see then you can that the process still works so there we go applying tangent you can use this for surveying okay so now all those we applied s cosine and tangent this is also a very useful the law of signs now we're going to get Beyond the right triangle you can use this for any triangle and you know if you've gone through the other part of the course you might remember when we were doing this setup but here's the formula this is these are all proportional in any triangle um side a over the sign of angle a equals side B over the sign of angle b equals side C over the sign of angle C and there we go these are all proportional in any triangle so if you have two of these then you can use the law of signs because you know now even without code let's say add two of these cross multiply you know I given these two if I that's four things in there and if I know three of them I can figure out the fourth or any any of these two so if it's the angle that I don't know remember then that's inverse sign and the code we're going to use is arc sign so here we go we're going to prompt for I'm not going to um I'm not going to draw a triangle here I'm just going to show you that what we're going to do is given any of these two and I'm not necessarily going to call I may just call them A and B even though it can be you know whatever A and B and I'm going to prompt so the known ratio and you see I'm going to ask for the known angle and then I'm going to ask for the side across because I do need to know that I need to know an angle in the side across from it that's my starting ratio and then if you don't know the value put in X so then it's going to prompt other angle and then it's going to prompt for other side and you see one of these you're going to put a number and one of these you're going to put an X so see angle a inside a I'm I'm going to cast those as float right away but angle B inside B I'm not because then if angle b equals x I'm going to do this this is going to be the model if angle b equals x what are we going to do now then that means we must know side B so then I'll cast it as a float and then I'm going to do my ratio side B time math. sign of math. radians angle a/ side a cross multiply I'm going to do side B time the S of a / side a so that gives me my ratio so then I need to do Ark sign of that ratio to get radians and if I want degrees um I could have just converted it but I just decided to do the prop the proportion um the radians * 180 / Pi so there we go so this all works if we you know if it's the angle B that we don't know then we can write the code to solve for angle B now if it's side B that we don't know so now the next thing is convert angle B so what do we have so side b equals so remember now if I know angle B cross multiply the sign of angle B time a / the sign of angle a equals B cross multiply so side b equals the sign um now notice for each of these um I used MP P but I also imported math you can actually use um either one here which is kind of cool but I'm going to use math math. sign of um and I would expect that somebody would enter an angle b as degrees so I'm going to do math. radians angle B all right so there we go so I have the sign of angle B times side a um divided by um we have already math um math do s of math do radians and that's angle a okay so that's what we have here so side B should be so s of angle B time side a / the S of angle a and so side B should be sign of angle B taking that input and that will be in degrees convert it to radians the sign times side a and then divided by the sign of angle a which we would already have up here angle a there we go there we go pretty good and so we can run this so the known ratio um let's I'm just going to uh pick one so let's say let's say it is an equilateral triangle so the known angle let's say it's 60 and the side across I'm going to call it five and we're going to test if it's a side B that we don't know so the other angle I'm going to say it's 60 and then the other side is going to be X look at that good time times so now we now you have it you know law signs any anytime you have that situation I know the angle and the side across from it and then one other thing an angle or side you can figure this out now we're going to build upon this that you you do this once now I have you know both two angles two sides I can do subtraction for the third angle and I could always do law of signs again for the third side and there we go then I have the whole triangle but we'll build upon this because now we also have the law of cosiness and the law of cosiness this works if I have two sides in the angle between them so that's the key and remember from from the course so notice it's I the formula looks a lot like Pythagorean theorem but then minus this and if this was a right angle if you know if C was if it was Pythagorean theorem and C was the hypotenuse then angle C would be 90 and then the cosine of 90 would be zero so that means you would be subtracting you know zero and then all that zero is out and then you'd be subtracting nothing but as that angle changes so then you are actually subtracting something um and therefore we see how it applies this also works I always remember just this formula um but notice C shows up once if you don't know side C um if you know side C you can figure out angle C or if you know angle C you can figure out side C if I know angle C it it it seems to be maybe a little bit easier because all the things that I know are on one side of the equal sign solve all this then square root the answer and get C but if it's an if it's side C that we don't know then I can do all this if you know if it's side C that that we don't know um or if it's angle C that we don't know then I can do all this um subtract everything divide and then do inverse coine few extra steps but it's doable either one you know and then whatever I call them a b or c it's always you know two sides in the angle between them and then I'm either figuring out that angle between them if I know that side across or you know so you potentially could know all three sides and no angles and whichever angle I'm calling angle C that's the one I'm solving for or if I know two sides in the angle between then I that angle between it's the side across that I'm figuring out so this one also we're going to prompt for input um side a side B and then either side C or angle C all right and so I'm going to solve um for angle C and then have this code over here for side C so if it's angle C that you don't know so now side C Cast that as a float and then I just have this notice is a bunch of steps here so I'm just going to call this step one because um side C squared and then I'm subtracting side b^ squ I'm subtracting side a squ and then there we go so then step two if I have if I have these then if we take a look at side B um I just am calculating this part here 2 * a a * B which I just expanded as side a side B I'm just doing this part here because you see the first part I'm subtracting these over to the left side of the equal sign and then step two I'm just doing this multiplying and then ratio C I'm dividing step one divided by step two and then now that I have that ratio I'm going to do AR cosine and we know that that becomes radians and I'm just going to do the conversion radians time 180 / Pi becomes angle C so in doing a lot of these steps you know that's it math is a bunch of steps you can write each step in code you know come up with your own in between variables um I I think that works out it kind of keeps it in keeps it organized for yourself and for you know anybody else you might be sharing the code with and you really see the steps because I probably could do all this all in one step now um python code convention we saw we kind of push the limit on the last in the last step that we only kind of shorter lines I don't want the line I don't want to have to sides scroll to get to the end of the line so python code convention if I did this I'd probably be a much longer line of code so I also like to keep shorter lines of code but the uh you know the the other thing is it just it just works out just you're seeing each step you know these independent variables these in between steps there we go so now let's take a look at side C so let's say this is the one we don't know so if that's the case so we have angle C is my variable all right so I might even just keep keep this here but let's look at it in between step here so um yeah just checking the four spaces to make sure that we're still in here so what do I have I have side now notice each of these I have side a side b side C that I already know so um so we have side uh side a squared plus side B squared minus 2 time side A Time side B times math. cosine of math. radians of angle C now I need to store that as a variable um be now given all this um this equals c but it equals c^ squ and then I could square root it we'll see um I don't use just c as a variable here so I could um see ah let's see if if we have yes and you see it it get this I'd rather a shorter line um so I'm I'm actually just going to call my variable C2 and then down here C2 so you can come up with whatever in in between variable you have here and then you have there you go angle C once I have that then I do this the full side a^ 2 plus side b^ 2 minus 2 a times cosine of angle C there we go and I know that that's c^ squ so I'll just independ in between variable C2 and then I'm going to square root it so let's take a look now let's say um it would be if I would know AB so let's say let's say this is a three um and it's side C that I don't know so three four and then the angle between them uh side C I don't know but the angle is 90 and we'll make this a nice 3 four five triangle look at that there we go and once you have this code you can you you can test it you know apply it to a bunch of other triangles that you might know there we go so now we're you know we're building these and remember if you've been going through other parts of the course this you know hopefully it's enough of a review and extra practice and make sure that you know you're even better at at writing all this code and we're building upon you know these situations okay right angle but I don't need a right angle I have my situation for law of signs my situation for law of cosiness and then the next part is well how do I calculate the area if I don't know the base and the height so we take a look at this here's this new area formula now notice how similar this is 12 AB now if this was a right a right triangle where A and B were the two sides the angle would and the and the angle C was a 90° angle they would be the base and the height and it would be area equals 1/2 base times height but if that angle is anything other than 90 then that changes but this is the exact adjustment AB time the sign of angle C because if angle C was 90 s of C is 1 and then there we go it becomes the area but that changes proportionally as the angle changes so look at that but also what you need to know is very similar to the law of cosin two sides and the angle between them so I'm just going to plot here side a you know in this case there there's no other options it's it you know it's the area that I don't know but I would know these three these three things so I'm going to prompt for side a prompt for side B prompt for angle C and then just write the formula there so 0.5 times side A Time side B time angle see I expect it to come in as a degree so it' be math. sign of math. radians of angle C and there we go and this one I I will do other ones other than uh side B and then if that's 90 there we go all right oh that's interesting so there we go and that is the area we did write the code and I will change that for you because that is the code to write the area so now we're going to put this together and solve any triangle so you know depending on what side we have what sides what angles our our goal is that if I know three any three things about a triangle I can figure out the other four things including the area and so this as we put it together draw the sides so this is I'm just going to draw a triangle not draw the scale but here's here's a triangle and I'm going to label the sides and the Angles and then I'm going to show the options you know what do we know two sides in the angle between do I know three sides uh do I know side angle across and another angle notice side angle across another side and you see the different situations you know uh two different ways to work with law of cosiness two different ways to work with law of signs and then other trigonometry a right angle and two sides Pythagorean theorem a right angle and a side and another angle other trig functions and so we're going to keep all that display the triangle and the options and then here are all the variables we're going to solve for there we go angle a there we go all these and then if option if you get option one then here's what you're going to do um input so if option one then it goes to this input side a and then you're going to complete this code well you can if you want then go back and copy the code from from this so option one is do I know two sides in the angle between and you can absolutely go back to the law of cosiness and we know the side so I know two sides and angle between I'm going to solve for side C so we're going to we're going to do this and all right so do I have if I have side a we have to prompt for side a side B There You Go Side a side B and side C and angle C mhm so th this is you know just an example of being able to reuse your your your code but then make sure it applies to this we you don't ever just want to copy and paste you want to see so um so in this one we did uh side B I'm going to make it a capital letter I'm going to make it an equal sign and I am also going to apply the new line so that this is going to be consistent and I don't need this because from picking that option all right and I know I don't know side C all right so so again we're side a side B and then angle C and we're storing it as those variables that match up with this again the little things you don't want to misspell your variables so now if I have this um now I have this extra um Step here which that's fine if you didn't you know if you didn't feel like rewriting it you don't have to but remember since I already know this I can keep this I can make it more consistent here and I can change that to a float which means I don't need this and then that means I definitely need to make sure that that variable matches and now we figured out side C which the variable that I want has no underscore and there we go if you want you can delete this and so what we have here is I now will take that input um and then I know now side a and I know side B and I know side C and we'll come back to this uh but then what I can do is after here I can so um angle a angle B and angle C and area there we go so then we'll add the area variable up here and down here we don't need angle C again because we already have it so we can delete that from here and there you go you have an example of what we would do with just that situation and filling in the rest of this I'm not going to repeat that it's it was in the other video about solving any triangle and there you have it displaying a triangle getting different inputs and no matter which input you would have a complete example here of starting with that how would I get every side every angle in the a area and then starting with something different how would I get every side every angle in the area so now let's look at just a refresher on the look of a sine wave so remember sign comes the word sinuous which means curvy and so we're just going to run this to show a graph of a sine wave and how we Define the array of X values remember the the graph is in radian so um I'm going to go from 0 to seven and 280 points that should be plenty detailed enough and then the Y value is just s of x uh both of them you know importing numpy I'm importing time for no major reason there and there we go just setting the figure size and here's the angle measure so let's run this and that's it just a refresher on the sine wave yal s of X and then we see the graph here angle measure and radians and we go from zero up to one down to netive 1 and there we go so let's talk about how that relates to sound and of all the different transform a we can do I'm really just going to focus on two of them here a so that's our multiplier which would give the amplitude of the wave and with sound that would represent volume and then B so as B increases then the wave gets more compressed and that would represent frequency so just some examples here of setting up sliders for you know notice I'm defining this function and I just call it f just to make this part short so that this line doesn't get too long but I'm going to define the function and do all the graphing in the function um I'm going to import inline import interactive and then we'll see that I just defined it like this we show you here the slider is always default to right in the middle but then we can see if I change B to be a smaller number and if I bring it down to one that should be a normal sine wave um we're going through remember Radiance of 6.28 there's your full cycle and we go through a little more than twice so just looking at b as B increases and then you can play with these sliders here you see it gets more and more compressed there we go and a being the amplitude there we go if it's one then you see it goes up to one down to negative one or normal this would actually be our normal sine wave I just decid to increase this a little bit and then as a increases notice the zeros stay the same but the amplitude increases and you can play with this and change these values here um I I mentioned the sound reference a lot of times then frequencies are much higher than this um you know 20 at the very smallest number but we're talking usually in the hundreds and you know can go up into a few thousands and that would be you know the range of frequencies we would normally hear in music but there we go and with this now this one I didn't make sliders um I just notice some of these here at the end just some things to to Tinker with so you can see um change the frequencies I did make the frequencies pretty high here and they would represent a frequencies right in the middle if you of piano keys if you're looking at that all right you know defining the array for the X values and here I'm just having I'm just graphing two things here so the frequency one * X and frequency 2 not changing the amplitude just changing the frequencies and I'm going to make the title of the graph illustrate that so uh yep there we go and it's pretty cool if you put these frequencies together now notice I didn't even add frequen uh you have these frequencies and what I did here is I'm plotting y1 plus Y2 so if you heard both of these frequencies together and and even though it's a little bit muddier than your normal wave at this scale you can see that it still kind of follows its own wave here and that's what makes Harmony whereas if I changed this to like you know uh 4 and let's say 31 um some awkward number uh there there's there's some values you can Tinker with this there's some values that would be um you know that make better waves and others so you can Tinker with this you could even rewrite this and make it all sliders you know this is all that you needed to do for this I wanted to give you some chances to combine these frequencies and I just put them in changing the code instead of a slider I think that works out better for these higher numbers and there you go you can see how some of these combine yep and you'll notice you know which numbers and which combinations produce better patterns all right so pretty cool then this All Leads up to the certification project um bringing back some of the things that you were doing before and this is creating um for the certification project I have buil an analog stopwatch though what we have is you already have the video and the assignment of creating the whole clock so um this one I just said build a stopwatch and you know that would just be the secondhand cycling around but you already have the project that looks at the entire clock hour hand minute hand and second hand so really this whole uh certification is um a little bit of a review a little bit of a uh culmination uh you know cumulative uh review of some of these topics so far and some of the projects and you know going through this you can borrow code you've already written you know use some things you've already done and that should strengthen your knowledge and understanding of all this so by now you would have you know completing all these you know you should have a good understanding of you know trig s cosine but all the other trig values degrees and radians graphing solving any triangle um plotting points for unit circle plotting points for um you know a stopwatch and all sorts of other things so hopefully this is a a good start and we have more to come so let's talk about the Matrix and yes the Matrix was a math movie because it was all about what you can do with special effects which really are algorithms and math at the core of it and the structure of that that's a matrix the structure of a lot of things we can describe as a matrix and the root of a lot of other words are related to the root of the word Matrix Matrix structure matter material um the uh French word Matra the um you know English word matron um the you know the core the fabric that we're using as building blocks so in math a lot in a lot of things we want to translate things into a matrix so that we can do some math to it um and that's that's where we're going to get into some of the things that we've been doing we're going to show how to do some of these with it a matrix so let's start with you know how we um describe the Matrix let's you know so this is a 3X two which is it's always rows and columns so if this is a 3X two so then it's three rows and then two columns and then this one by contrast is a 2 by3 two rows and then three columns so you we we'll see how we can uh create a matrix and call them you know using code and you would Define you know row row row that's you know how you would Define you know when you're setting them up so if we take a look at 3x two 2x3 um I can name these you know I'll call this one Matrix a call this one Matrix B and if I wanted to call one element from a matrix I'm going to use row and column as my address so I would call it B and then a little subscript let's say you know Row one column two I'll usually put a comma there and Row one column two so then that's a two and then that's how I can call you know each you unique element in a matrix so you know setting them up um setting up this Matrix and uh we'll look at how to do this in code to but this is how it would display then what else do I want to do with it well the simplest thing we can do is we can add two matrices and yes that's the official plural matrices so if I wanted to add these two they need to be the same Dimension and then the you know I just add each element and then the answer is in that same place but these are not the same Dimension so I could not add these now we we'll get to multiplying I actually could multiply these because that's a whole different different situation but we'll get to that so if I wanted to add to well I couldn't do this but let's just say I have another one so it would also have to be a 3x2 I'll erase this so I could have another Matrix um you know three four you know let's just say I had these two and I wanted to add these two these I could because they're the same Dimension and then my resulting Matrix would be those same dimensions and so in the same place 1 + 3 is 4 and I would add like that 2 + 4 is 6 there we go 3 + 5 is 8 4 + 6 is 10 5 + 7 is 12 and 6 + 8 is 14 and then that would be my answer that would be the result so one way to match up things that are corresponding and if I want to add these I would I would use a matrix um and we'll look at some other applications of these but a lot of times it's really useful to have a matrix we we can even have a python array and convert it to a matrix um pretty easily and convert from a matrix to an array so that you know some of the tools for an array are more useful some of the tools for a matrix are more useful and we'll use both but we'll we'll we'll get into some other things solving equations and graphing and all kinds of things with with a matrix so let's take a look at how to do this with code I just had this to display to show you I made each of these an independent variable um a11 because we're in retrix a row one column 1 a12 because we're in row one column two a21 because we're in row two column 1 a22 because we're in row two column too and each of these is its own variable and then B same naming convention and this code cell I just made it that we have a place here to enter in all these values and we're going to do other things with it so this you can just run and you know they're all entered in so looking at these if I was just going to add or subtract I would just add the corresponding parts a11 plus b11 would be C11 and you know still go in that top left corner so when we add these then I just wrote out the code for each step so you can see um all the corresponding parts and I had it output I'll run it again just so I just had an output that this would be the resulting Matrix 6 8 10 12 um and there's other ways we can format that output but just to show you the steps um in setting up a matrix and adding two matrices that's the uh most basic thing you can do they have to be the exact same Dimension so that this works and next we're going to look at multiplying and doing some other things with the Matrix so let's talk about how to multiply two matrices and multiplying unlike adding or subtracting they don't have to be the same Dimension but as you order does matter and these two Dimensions need to match so if or order does matter and so if I multiply this times this then these inner numbers match which is the number of columns here and the number of rows here so then the the resulting Matrix will be these outside dimensions so my resulting Matrix will be a 2x3 we're going to fill that in as we as we multiply so then why do these need to match because what I'm going to do is I'm going to multiply everything in the first row times everything in the First Column and then add those together so we see if those match it's kind of like it turns this times this so what do we have here we have um I'm going to do 1 * 1 is 1 plus 2 * 4 is 8 and so that's everything in the first row everything in the First Column is nine and then that answer goes in the first row First Column of my resulting Matrix so then if I get um a three if then if I go the first row second column so then if I if I do you know 1 * 2 I'll erase this we'll put all our in between work right here so if I have 1 * 2 is 2 plus 2 * 5 is 10 so then that's 12 and so that was in the first row second column is 12 and we see it proceeds like that everything in the first Row Third column 1 * 3 is 3 and then 2 * 6 is 12 so then 3 plus up then that's 15 in the first Row Third column then and so we see how when this goes you know then this number here can be anything and then we see how then the result of that could make a matrix that's you know whatever dimens iions um then if I do the second row First Column so then if I do 3 * 1 is 3 4 * 4 is 16 so then we have 19 here and second row second column 3 * 2 is 6 and then 4 * 5 is 20 so then I have 26 and second row third column 3 * 3 is 9 and 4 * 6 is 24 so then I'm going to have 33 here and there we go so as we see it becomes a lot of small multiplication problems and we're going to look at how to do the code for this um you know in one time I I'll show you how to set up the code like even just writing out all these multiplication problems based on you know input storing them as variables but then we'll look at some other ways we can multiply um two matrices um without having to even write out the code for each of these in between steps so we we'll look at this and then we'll look at some applications of multiplying one of the applications and that's why I picked these particular dimensions a lot of times we can store um XY coordinates um as you know first row might be my x coordinates and second row might be my y so like the the XY pair might be this like 14 as a as a coordinate point and then you could have a matrix of two by however many points and having a matrix that came first um multiplying that does different Transformations like rotating it around the origin or things like that so we could have you know that and then we would store this a 2X two for transformation a 2 by whatever for all the points you know these are some applications we can get into um but here's how you know the setup of matrix multiplication and um let's take a look at how to do this in a few different ways with code so now here's how to multiply two matrices and I just have to display here Matrix a * Matrix b equals Matrix C and we're going to just enter all the values in I just made the we're going to do a 2 by two so here's all the values again just some basic numbers so you can see and I'm going to show you a few different ways to do it so the first way is these are the actual steps and remember then you know it's everything in row one times everything in column one 1 and the answer is in row one column one so you end up doing a11 * b11 you're doing that multiplying but then a12 * B21 so we see these you know you're doing that multiplying that multiplying and you add them together and all that comes together as C11 so we see how we're building this you know all these steps doing the multiplying so you can see that you know this works and I'll output you know no spe special formatting just outputting these and that's going to work out just fine I'm going to run all this at once so besides doing that we actually this is the same Matrix I still have it referencing all the original input value so we don't have to change that but if I just make this each of these in array so I can say you know each of these so Row one row two and I can make these an array and this is why we imported numpy so I made this capital a capital B referencing each Matrix and then if I'm multiplying a DOT dob you know uh put the period then write out the word dot so this is a * B and then then we're going to print that answer and that works too we'll see this in the output but also I can actually just make them a matrix also in the numpy library np. Matrix and notice it's actually the same dot Formula E do F because I just made each of these so um and I me each of these its own Matrix even though we're referencing the same numbers so we have it you know output you know you know WR writing The Code by hand for each step using this as a numpy array or np. Matrix and when we run this we're going to see 19 22 4350 same answer each time so each of these will work as different ways to multiply a matrix and we'll see um some examples uh in a little bit of what um why you would do each way you know maybe you have different reasons or different situations where you would use just you know writing The Code by hand or an array or a matrix but math wise they work out to be the same answer so let's take a look at a couple things we can do with the Matrix and both of these the determinant and the inverse you need a square Matrix to do this so 2x two 3x3 4x4 Etc so in doing this um the determinant gets the Matrix to one number and then one of the things we can do with that is you use the determinant to get the inverse of the Matrix now when we get to the code this is going to be you know like one simple step you know um builtin formula you know inverse or determinate but I'm going to show you the steps that to get to this um with it Beyond a 2 by two it actually gets even more involved but this will illustrate the point so let's get the determinant here so the determinant is you're going to multiply each of these diagonals and subtract them so um the determinant is going to be in this case 2 * 4 and then 4 * 6 or 2 * 8 and then 6 * 4 so we have 2 * 8 is 16us 24 so we see you know that's how we get the determinant that minus that if it was um a 3X3 it becomes even more steps and you carry over the other two columns but there we go so what we have is so if the determinant then is8 we might use that for some things um you know there's some ways we can um uh boil down a matrix too and determine it for other things you know uh encoding and decoding all kinds of things so here we have this but we're going to use it to get the inverse so then once I have the determinant then one over um I'll put the negative here um one over determinate times that original Matrix to 4 6 8 then that gets you the inverse so we're just going to take this and distribute that so one over so 1/8 * 4 so I'll just reduce that fraction so that's 4 2 over 8 and then there we go 18 so that's one2 and there we go 6 over 8 so that's 34s and 1/8 * 8 so then that's 1 and it worked out nicely to fractions I decided to put them as fractions but you know a lot of times are going to be uh decimals and this is another thing where you know I pick numbers that work out nicely very often you get decimal numbers and you know quite a few decimal places so what you would do is you would store each of those values um you know as a variable that just works out better but there we go so now this is the inverse so this is the inverse of the Matrix and we have these now one of the things If I multiply a matrix times its inverse I should get the identity Matrix so which is 1 01 so I would get the identity Matrix then this would be the the in the uh result if I multiplied the Matrix times its inverse um or you know if I multipli anything by the identity Matrix I get the same Matrix but there we go so we we often use the inverse for we can use that for solving equations we'll get into how we can use that application but there we go here's how we get um the determinant and then the inverse of a matrix and then now as we look at it you know how to do this with code we're going to find out that this is even easier because we have some builtin functions so let's take a look at this with a code so here's some other Matrix operations that will be useful in different situations um one of the things would be the inverse of a matrix and remember we really officially don't divide matrices we multiply by the inverse so if I already I'm going to build upon this I already made these uh Matrix A and B and you know I can run this again so there's Matrix A and B and now that that's stored um and remember you know with collab that VAR you know those variables will be active and available for maybe 20 minutes a half hour if you don't do anything else with that with that code cell um so we can build upon that if I get the inverse now notice within and numai we have linear algebra within that and then even that do inverse so I can get the inverse of Matrix a and the determinant the determinant tends to be um more you know messy decimal places so I will round that up and the determinant is uh a way to get the Matrix down to one number so and we're going to know that's actually used if you did this the long way that's used in the inverse um but also you know some other um some other things you might use the determinant for so I can just round that um and then Matrix multiplied by its inverse so now that I have the inverse I'm going to use r dot a DOT and then what am I multiplying it by I'm multiplying it by the inverse and I'm going to print that and the determinant will be be one number so I can just round that but I can't use that round function with a matrix I have to use np. around so that's how I get the that's how I get the rounding of that entire resulting Matrix so if I run this so we see still referencing Matrix a I have the inverse here and then I also have the determinant and then when I multiply Matrix a times its inverse this is what we expect to get this is remember the identity Matrix so if I multiplied this matrix by any other 2x two I'm going to you know it comes out as that other Matrix so multiplying a matrix by its inverse gives you the identity Matrix just like multiplying a fraction by its inverse equals one multiplying a matrix by its inverse gets you this identity Matrix so just some other things um within the numpy library things you might want to do with the Matrix um I just want to throw in here another way to multiply so here I just have I created these just right here Matrix c and d and just to show you you know you can output what type they are what what object type and here's another way to multiply these so instead of like we did here a DOT and then the second Matrix in parentheses you actually can just do NP Dot and then each Matrix in parenthesis CD it works it it works out the same so here we have this Matrix this Matrix both of them what class num. Matrix and and here's the product the dotproduct of two and remember as I set this up that this was a 2X two and then Matrix D was a 2x3 so the results going to be a 2x3 the order does matter and those middle those middle Dimensions need to match and then the outside dimensions are the dimensions of the answer so there we go another another way to multiply these sometimes this might be more useful and this is also just showing you know what type of object these are all right more cool things we can do with the Matrix and then we can make use of some of these things um and others in other operations all right next we're going to apply the Matrix operations and solve some problems so let's talk about re reduced row Echelon form of a matrix but to get to that let's talk about each part of this so first of all Echelon Echelon is a word Beyond math that means uh levels of command um potentially rows or status and in military formation echelons are rows where each row extends out a little bit beyond the one in front of it almost like picture a triangle and so that Echelon you know we can see that you know level status and start seeing how this can apply to a matrix and rows what do we want to happen in these rows so then we get so Echelon form but Echelon form in a matrix has specific rules that you know if you have a row of zeros that has to be um the you know the lowest row if you know you have sometimes people say the leading coefficient should be one but sometimes people say that you know that rule doesn't have to apply and it's really about how the leading coefficients um get to be you know uh further to the right of the other ones we you we'll see how this plays out but that's that's kind of like the where the idea of echelon form comes in then specifically to a matrix we have row Echelon form which again follows that there's is going to be a leading coefficient of a one and then there's going to be that leading coefficient of a one in the next row is going to be over not in the same column you know that we get into row Echelon form but redu and you know that limits what the The Matrix can look like we're going to be really interested in building upon all that to get to reduced row Echelon form which gets us to a unique Matrix where combining what we've been thinking about you know in terms of like the definitions of all these other words reduced row Echelon form is going to have our leading coefficients of one it's a unique Matrix that will give us the answer to our question and before we look at what that's going to that final form let's look at how we get to that and then it will all come together so we have a matrix we have a system of three equations here so we have um you know 14x + 11 Z = 3 now notice this one doesn't have a y value the next one 22x + 25 y + 4 Z = 7 and then 12x 34 y 3 Z = 4 so I can put this Matrix put this uh all these coefficients and what's on the other side of the equal sign in this augmented Matrix and we say augmented because sometime um we can put this as one Matrix a 3X3 and then as another Matrix for everything on the other side of the equal sign it is possible to do that and then um you know that's another way to solve it so this augmented Matrix now I have this and I can use reduced row Echelon form to solve this now the beauty of this is um that that's one function you know in math in a lot of calculators and certainly built into python um so what that does is that's going to give us one 0 0 and then the answer 0 1 0o and then the answer 0 0 1 and then the answer that's the idea that this becomes this reduced row Echelon form and that's you know that's follows all these definitions I have a leading coefficients of one and each one is to the right of the row above it and so then whatever comes in this last column ends up being the answer to our to our Matrix which is really cool how how that can work um so that's what we're going to do um for reduced row Echelon form we're going to look at how to do this with code but this is kind of you know what what our situation would be to set up the code I'd have a system of equations three equations three variables set up this way so that it's always XYZ equals a number and then notice the missing y value I have I need that zero as a place value so this is would be our situation um to get to reduce row ealon form I would have a system of equations put that in the Matrix and then I would would use reduce row Echelon form to get the answer now if you didn't have the computer to do this re the the the way to get this is essentially all of the different substitution elimination all the different um row functions that you would do to gradually solve solve this you know equation you know some substitution some elimination you know combining rows um so it would be very tedious but it's doable you know but here we have if we have it in this form it's going to be you know one function boom two seconds and then solve it so let's take a look at how to do this with code we want to see like this would be the setup of what we're uh what our situation would be and then we get to the code so uh let's let's write some code to use reduce row Echelon form here's how to solve a system of equations with a matrix and I like the row the reduced row Echelon form uh the best I I feel like it's just really straightforward so that's the way uh we're going to look at it here also in the code and in addition to that we're going to look at how we can convert we were looking at you know np. array or Matrix and I want to show you here we're going to convert from one to the other so I just put this in here I'm going to create an array um so right here I'm going to create a matrix as an array and then I'm going to create a matrix from that so I have the array and then I'm going to create a matrix now I'm importing numpy I'm importing simpai but I I feel feel like I've run this without importing that but um I still have that up there so right here we're just going to show you that uh when we run this that that this works and also noce just an interesting print statement the braces here inside the quotes and then format um The Matrix there so there we go create an array Matrix from that array and I just commented this out because I'm going to show you the other way but you could have just started with the Matrix um but the reason why I started started with an array is to show you that you can create a matrix from that and we're also going to convert it back to an array so it it works both ways you can do this um as I may have mentioned before maybe some situations you'd rather an array some you'd rather a matrix for a lot of the Matrix operations you want the Matrix so you know here we go you can convert from one to the other though and we are going to do the reduce Echelon function so it is a matrix and it's going to be m. rref now that's going to give you the reduce row Echelon form then I really wanted to split this out and um notice the first The Matrix is the first element so every one of these it's a twodimensional array but you have the first element is zero so my x value and this is going to make sense when we see the output is 03 my y value is 07 and my zv value 011 and so I created those and then we're going to print you know xal yal Z equals and that's the this is the output that I like I want to show you you know how we get to that here but then we're also going to print out the echelon form so you can see where this comes from so we run this and we have you know here's the Matrix so we see um you know it formatted there and it will just give you this Matrix here same Matrix and we see um there we go it was a you know we converted it back to an array and printed it that way so that's where we get this form which you you know you may uh you may or may not uh want that form and then now we have um the answers but I'm going to skip over that let's take a look once we get that down to the reduced row Echelon form so you see this whole Matrix was the first element and remember it would have been you know XYZ equals so you see the one here x is one and then y the coefficients the coefficient of x is one and the coefficients of y and z are zero so x equals this number and that's the same that we got here and you see the coefficients again y the coefficient would be one and the others would be zero they would drop out so the Y value is this and then 0 0 one so the coefficient of Z and there's Z and given that we see that the elements are 03 07 011 so it's not um row and column as you might expect but there we go so we get these um and if you're ever working on this you can you know output this form and then you know Tinker with you know what elements you need to put in here just to be sure but there we go so that way if you have a system of three equations with three variables you can you know put that into a matrix reduce row Echelon form and then output your answers and you know you could output these because then these would be stored as those variables if you needed to use them in something else or you could output here and you can see you know what what it would look like so that would be a way to solve any system of three equations three variables and then we're going to look at a specific example next um quadratic um and developing a quadratic equation so we'll take a look at that next so here we're going to look at developing an equation from three points and using a matrix to do that so I'm going to pick a quadratic because linear we just need two points quadratics complex enough to demonstrate this so if I have the standard yal ax^2 + BX plus C then here's three points let's say I have these three points and I want to find out you know I know this is going to be a parabola going through these three points what's the equation of that Parabola so I'm going to plug in the first point XY and we see plug in1 couple times for X Y is zero then I'm going to simplify it and we get down to this I'm going to go to the next Point plug in the second point there we go 1 Y is 6 simplify it and we get to this and I'm going to plug in the third point 22 there we go simplify it and so let's put all these three together notice I and it is important I put the equals on this side so I always have AB C equals something because all those coefficients become the augmented Matrix and augmented because I include what's on the other side of the equal sign as that fourth column in The Matrix there's other ways to do this uh you know uh make a 3X3 with just everything on the left side and another Matrix but this isn't augmented and I personally I just happen to like this method so we see all the coefficients from the first equation 1 1 1 again Z on the other side of the equal sign all the coefficients become our Matrix here so and I'll just call it Matrix M to give it a name so if I do the reduced row Echelon form of that Matrix abbreviated r r EF and then you know of Matrix M this would all appear at one time but let's look at it one row at a time so it would be it always has to be a b c and then the number on the other side of the equal sign so the only coefficient with a one is a a must equal one and then the next row b is the only coefficient with a one b equals 3 and then C the only coefficient of the one C must equal two so a = 1 Bal 3 Cals 2 we see that nice pattern diagonal ones and then this last column gives my abc values and then the full equation is y = x^2 + 3x + 2 we just put it in that ABC and there we go three points put it in a matrix re you uh you know reduce row Echelon function and we can develop an equation so let's take a look at how to do this with code and we're also going to look at the patterns that we did so that we can just set it up once and then whatever number shows up as you know the XY values of these three points we see exactly how to then plug in three points and do the rest automatically and output an equation so let's take a look at how to do this with the code so now let's apply this uh Matrix reduce row Echelon function to developing a quadratic equation from three points so here's how I would take the points and each of these you know X1 y1 X2 Y2 yx3 Y3 so these would be the three points and that's going to be enough information if I have any three points because if we take a look so here would be the standard quadratic equation and there you go ax2 plus BX plus Cals y so if we had any of these three points for the first point we would plug in X1 here X1 and then C would still be there and then y1 second point we'll plug in X2 and then Y2 and then third Point X3 and Y3 three and then converting these three equations into into a matrix so we see that to we're going to solve for a b and c so given those variables the coefficient for a is going to be X1 squared the coefficient for B is going to be X1 the coefficient for C is always going to be one and then y1 on the other side of the equal sign same thing for X2 Y 2 X3 y 3 so that would be the Matrix that we'd be using and I just have this set up here import numpy and here's just a place where we can enter in any of these I picked a couple you know points here so we can take a look so you would enter in in the points here and then Define this Matrix based on those points so here's the first row of our Matrix and then the second row and the third row so we're creating all these as a matrix points into this Matrix and from there m. RF and so I just made the variable name the same m. rref is the function I just made this variable name and given this mcore RF is r answer so now I'm going to take that and the x value would be at this part and I'm going to round it store it as a the Y value would be in this location round it stored as B and the Z Val C value so there we go couple steps and I'm going to print out a b and c now I could you I could do something else with this too but uh let's just take a look so row Echelon form um let's run this and so my first print statement would be these answers one five and six great and row Echelon form just so you can see it to compare then our coefficient is one here x uh so X is one y there's my coefficient is five or sorry A B and C A is 1 B is 5 C is six and we always could add another print statement if we wanted to knowing that the goal of this was the quadratic we could have you know a and then x squared the I I might I'll use the python notation here x s um plus and then I would have B and that would be X keep that space Plus and see uh there we go and a lot of times we put the Y equals in front so I would do I might do that y equals there we go so we could take this now that I have a and c and I could just print out that equation y equals ax^2 + BX + C and there we go so that works too and you see then now this quadratic if I have three points I can figure out the the equation and that's kind of what we want to do in in math and applying this to other things can I have just a few points in this case three and then develop an equation that would go along with that all right right we can apply this Matrix and RF to some other things too but there we go developing equations from three points a little bit about encoding and decoding and even if we're not using a matrix um so python has built in if you have any character so you can bring in a string and then run through U the each character in that string if you get any character we have builtin o um ordinal it turns that character into a number based on the asy code American System of computer information interchange so that's the standard that you know you can look up these tables so you can see you know every letter Capital lowercase um you know some with accents some uh numbers symbols punctuation all that every one of those corresponds directly to a number and then you can convert that to the standard number and then the other car the other function is CHR which you can take a number and then convert it to a character um if you had a number that's out of range it'll give you an error but you know you can type in the number you know character 65 and then it's going to Output a capital A so we're going to use that um in the code I'm I'm really going to show you how to you know prompt for these things get that string and then convert it and the the uh Cipher or the you know the code that we're going to use to transform it it's going to be pretty a pretty simple just shift I'm going to get that number I'm going to add something to it or subtract and you know there we go we could take this and convert these to you know each to a different Matrix that's another possibility and maybe in in a another video we'll explain all the uh levels of converting using uh using a matrix but for right now I wanted to show you um how to do this and then you know you you can modify this or expand on this on your own and you know create something you can send a secret message okay so let's take a let's take a look at it in the code so you can use a matrix to encode and decode messages and you'll see in here where you could potentially put a matrix but I'm going to show you this even without a matrix but we're going to use some math all right so the only Library we need to import really is numpy and here's some comments here so we're going to get the input and this input prompt for input remember it comes in as a string so I'll store that is inore text and then I'm going to set up this empty array here inore numbers and what I'm going to do then I'm going to Loop through all this text that comes in so for a in intext so then what that's going to do is every character from that string one at a time I'm going to go through and here's the inner function um I'm going to convert that to a number so or converts everything to a number um based on the um asky code so capital A is going to come in as 65 Etc so one at a time convert that to a number and then I'm going to append that to our array here so then I will have this array of numbers nice then I'm going to encode this I'm going to start I'm going to have this blank array of encoded numbers and I'm going to Loop through that so looping through every element in in numbers now I just put this commment here this is the here's just a simple example but this math can get more complex and this is where you could potentially put an array so all right here's the cipher I did just a basic shift and um the reason why I I picked uh 37 so capital A is going to come in as 65 you might have a couple symbols before that that you might use but most of the text is going to be 65 or more and so adding this gets it up to a threedigit number so everything come that comes through should be a threedigit number then um you know I add I could have added 35 I decided to add a couple more um so just a simple Cipher that's about what I would add anywhere between 37 and um you could have really big numbers so um you know anything in the hundreds all right so anyway this is the cipher and all we're going to do is just each of those in the array we're just going to add 37 to it and append it to our array here and I I I split this up because then this you know you can add something you do like linear algebra you could do um a quadratic formula you could do anything you want to change this I just wanted to do a simple example but you could do anything you want in that math and that's where this is really the only place where then a matrix if you wanted to um pretty much uh one at a time you wouldn't use a matrix two at a time you might do some matrix multiplication but we're not going to worry about that right now um and then you're going to I just have this that you're going to print out the encoded message so that would print it out now if you did this um you could run this print out your encoded message copy that and then paste it anywhere you you know whether it be text you know a text message an email or anything else you know and there you go that's one Le it it's one little extra layer of encoded message um but there you go you would copy it and paste it and send it to somebody now on the other side now we're going to decode and we're going to prompt for um input enter text to decode and I'm going to store it as this variable in code and this one since I know that this is going to come up you know uh the encoded numbers you'll see that array when you print it out it's going to be each number separated by a comma so here we're going to split it at that comma so now Inn num is an array um each you know each element then becomes an element of this array in Num but now I have to decode that so we decode and rather than an array I'm going to have a blank string so this string just starts out with a space called decoded letters okay so now as we Loop through that remember they're numbers but they're they all come in as a string so first of all the math of it um has to be the inverse of the encoding so if the other one I added 37 then this one I'm going to subtract 37 but first of all I have to convert that to an integer and I chose to do it in this step here convert it to an integer and then you know the math of it which is the inverse of the encoding and I'll store that as a variable decipher and then each of these so decipher then um still remember that's still just a number I converted it to an integer and decipher is still a number so then the opposite of the or is CHR converts that number to the corresponding character so we see that you know the encoding um convert it to convert the letter to a number um based on the asky code then do some math to it and then here I need to do the opposite I need to do the you know convert it to an integer do the opposite math to it and then convert it back to a character so then we're going to just um it's not an array so we're just going to append our string here that plus equals and then this should be a string decoded letter should be a string which is the message and then we're going to print that out decoded letters so we have both of them here and you could always split these up into their own um functions but for right now I'm not worried about that because you could always I mean you could just run this right here so text to decode you know secret message hit enter and then we see it prints this out so if I was going to send this to somebody I would highlight this and copy um now I would paste that in message the other person would get that and highlight it and copy run this program enter text decode so paste that into here and hit enter there you go secret message so interesting way and what you would have is um so you could potentially um you know the I would I'll keep this but you know you could potentially then just share this you know and and that's what I'm doing I'm going to share you share the code with you um this could you know go to anywhere and anybody could just change what math you do in this step that's pretty much it if you just change the math that you do in this step you know and of course then it's going to match the math that you would do in the cipher and um you know somewhere else you know as long as you and the person you're communicating with have that math that they're you know the same math that they would modif would modify this hey you can send a secret message and this could be encoding and decoding because if if I my main purpose is to decode and I don't care about encoding you know I'll just say a there we go and then I would have this other message that I previously copied and I could still then you know just run that one step that doesn't take long and then still print this me this in here there we go so pretty cool um you know always always fun to like make something that you know sends secret messages and you know applying some math to it um and as you see the math and very much a lot of the converting from one thing to the next there we go and this you know a simple Cipher but you can make it a lot more complex than that so now let's look at using a matrix to encode and decode and this is also encoding and decoding that works because I tried a lot of things so I'm bringing to you the stuff that works works and through that I'll give you some hints on how you can modify this for your own encoding and decoding so first of all the Matrix that I use I'm going to store the M the each message as a 1x two Matrix so we'll see how we do that and as a 1 by two Matrix then I'm going to have an encoding and decoding Matrix that's a 2X two and you see order does matter so when I multiply this 1 by two times the 2x two my result will be a 1 by two and that's going to be the message again so you could do this certainly um and and that one by two is going to be you know grabbing two letters at a time or characters two characters at a time you could absolutely do this as a 1x3 and you know use a 3X3 as the encoding and decoding Matrix I I feel like depending on how big the message is that's some extra processing power um but you could absolutely do that that's another way to do this and then um you know use that certainly would be more difficult to break the code um but I decided to do a one by two and this will also illustrate the example for you so I use a Rays even though we're talking about a matrix and we're talking about matrix multiplication as we looked at before you can use use an array you can use a matrix and you can convert from an array to a matrix well for this stuff I actually I I like the way it plays out with an array a little bit better so that's why I chose that we can still think about this as a matrix and the the setup but um officially I am going to use numpy arrays so I import numpy and I'm going to do NP array so this is where you can add yours you know I just have you know 2 468 I decided to do that and you know you can you can have whatever numbers you want this is where as you see you know I I call this one that this one that works I have a lot of other um blocks of code where I tried some different things and some numbers that you might pick for your array the end result looks weird and sometimes that might be I don't know um maybe difficult to break the code maybe or too easy to break the code because certain things jump out or maybe certain things uh put you in negative numbers remember um even though we're not going to really see this step but behind the scenes when you do an INT an inverse um you can't have a determinant that's zero so you know there's going to be certain things that that work or that look better um you know anyway and so but but there you go this is the main thing that you would need to change and then everything else see this decode Matrix just B builds upon that I'm just going to do the inverse of that other Matrix or array um and yes again even though it's an array the inverse is np. Lind alge um it's really the inverse uh you know it's an array we look like we're doing linear algebra and it's really the same thing as mathematically it's the same thing as a matrix inverse so some of this stuff is going to be the same here um from when we were just doing the simple Cipher you know a little bit of a shift um enter the text I'm going to store it as an array um and then I'm going to um get the order you know use this function to get turn that each character into a number based on the asky code so that's good but now knowing what I'm going to do with my array my array needs to be even if it's not it actually will just drop off the last letter and who knows maybe that's important so what I did is um you know because our array is going to be a 1 by two so um if the last one is not a 1 by two that might cause some problems well it will cause problems how severe I don't know but um the uh so I will do this and then to make sure it's even I just want to check if the length you know the modulus if that's if if that's not zero then it's not even and I'm just going to append this which in asky code translates to a period so maybe I don't have a period at the end of the sentence and therefore I would just add one and that'll make it work out in code some of this is similar I'm going to um but here's what I here's uh you know I have my array of encoded numbers but here's what I'm going to have because I'm doing this you know two at a time to make that a 1x two array or Matrix I have these temporary values that I'm going to initialize here as zero and PN that's a variable I like to use uh for positive negative so I'm going to start out as negative 1 so all those encoded numbers um remember it goes back to that variable in numbers um if PN is ne1 which is starts out at then I'm going to store that value as you know for B and in numbers as I Loop through that then I'm that that value becomes temp one and then I'm going to multiply PN by negative 1 so now it's positive so there we go the first time it goes through that value go becomes temp one and then the next time that value becomes temp two and that that way I go through a notice after doing all this then I'm going to multiply it again so that that's kind of why I like using the 2 by the 1 by two um if you used a 1 by3 you would have to go through and you know you have to count up three times and you know other things become more difficult but again this illustrates the the value point you can do here so here's what I'm going to do then I'm going to turn this into I called it I called the variable Matt like Matrix um I'm going to turn this into an array as temp one temp two boom that's an array and then I'm going to do the dot product so I just called it encode you know encoding using the dot product and Dot and I'm going to multiply and remember order does matter so um NP do dot Matt comma en code so that way here once I have this you know now I have the two values and store it as an AR as a 1x two array do product which will then also end up being a 1 by two array and then I'm going to encode the first one so that first one encoded numbers is going to be my my array up here and I'm going to append you know that one notice item zero and then item one so this is how we're going to do the encoding each going through each character um there we go turn it into array product multiplied by the encoding Matrix and then store it as this encoded numbers array and then I'm just to show I'm going to print out the message now if you using this for an encoded message what you would do is you could then copy that message and paste it in wherever you want to paste it and you're going to end up pasting this you'll see it's an array of numbers separated with commas so then to decode you would have that enter code text decode and You' be pasting this so then we would split it at the comma and now in Num is my array of numbers so with that array of numbers in decoding I'm going to turn this into a string so there's my string of decoded letters starts out with a space and I'm going to do the same thing I I changed it a little bit just to use it make a different variable here so PN um I just use the underscore here is negative 1 because now I'm going to take that remember this is these come in as an array and I want to make sure that I store it as a float number so there we go that for everything in that um in that array each one um I'm going to store it as a float now I go through again if it's NE you know the PN is negative 1 so then temp one and you see this is what I I just used this if you it's within my loop it's within my array and I'm overwriting it so I actually felt fine using the same variable because again it's a variable I'm overwriting and it only ex you know it exists here so therefore temp one is Def float and then I'm going to multiply this and then when I go through here then temp two is Def flat all right so now I have this I've brought these numbers in converted each of them to a floating Point number and the reason why I'm using the floating Point um a lot of times it does work out nicely and the numbers I picked I made it work out nicely for integers but that won't always be the case especially if you Tinker with using different encoding and decoding matrices um so I definitely want these as float values not integers so now these float values um once I have them both now I convert them to a matrix or an np. array temp one temp two I have that I have that array and like before I'm going to do the dot product and we see there that Matt again same I'm using this same variable but that's okay I'm overwriting it every time so Matt and then decode so now I'm doing the dot product here okay so once I decipher that I hope it's an integer um sometimes you know we might be dealing with a lot of weird variables and we hope it rounds correctly but I still need to get that item and I definitely want to cast it as an integer here so there we go and I just called that variable decipher so now that that's an integer my decoded letters I take that decipher integer cast it as a character CHR and I'm going to add it to my decoded letters string that I initialized up here so you see slightly different on in the encoding we start storing things as an array that I'm going to out put here here I'm going to put it all together as a string so I get the I get things as an integer and then cast that as a character um get you know the get the character that is associated with that integer again based uh this is again based on the asy code um that CHR will turn that integer into the appropriate character and I have and I just keep adding to my decoded letter string so here's the here's the next thing um the weirdest thing is I found that I use this um notice how this is very similar I have decipher here for that integer for that one character and then store it and then I have decipher two which I'm going to get from item one because my my array item zero and item one what I found though is that I need this rounding adjustment it seems that this one seems to be for whatever reason consistently good I haven't really had a problem with this but this one I do need to o round it it just happens to be that that seems to be the case um so I do that I throw in that extra that but that I I wanted to put that comment there that's why this one's rounded and the other one isn't I rounded It Again cast as an integer now this is decipher two and then convert it to you know that which is a which is an integer convert it to the appropriate character and add it to decoded letters so we see you know bringing in you know doing this matrix multiplication and then getting this item as a part of my decoded string and then the next item as a part of my decoded string and this is another thing you know the these are different enough steps that you know I'm not going to Loop through this little part twice I just I'm going to write the extra line of code and then I'm going to Output the decoded message so pretty cool and let's let's see it in action so I hit shift enter instead of just clicking the button enter text to decode there we go python is fun there we go and so we see this what I would do is then I would copy all this um and I would paste that somewhere that I wanted to send that message but here I'm going to paste it here because then you know if you got this message you would copy it from somewhere and then paste it in here and I'm going to hit enter and there we go python is fun um there we go so if if if if I didn't have that um adjustment you see fun I didn't put the period there but because this was odd we have the extra period there um because if it cuts it off then you know um might be uh there there there you go python is Fu you know that's probably not the message you were trying to send um so there we go we have this now I have this as one in just like it did with the other Cipher um because if you know I'm running this to encode and decode if if I just wanted to if I just wanted to encode something um you know just encode I mean I could take this now I'm going to copy it here just because um but if I just wanted to encode something and then send it and I have nothing to decode right now um You you know I could just type in you know like some random number 65 there we go and yep it might be uh yeah that's very interesting um so I I wouldn't have to you know I just typed in 65 and it didn't do anything um though I expected it to be like a period but anyway you know that's it or if I just wanted to decode something then I could again just type in I I just keep thing is 65 you know there's all the characters before the and then this is capital A but if I wanted to just um you know text this and you see it's odd so it would give me two different um two different things so if I just wanted to decode something I could just type in any number there and get that output it doesn't matter to me and then I will paste this in here so you see like I I didn't need to split this up as having an encoding function and a decoding you might as well do both of them together and then whichever if there's one you don't need then you know just enter a letter just enter a number and then call it good there you go just encode so this is a good you know I I I really think it's it's Matrix makes it interesting because you know now you're taking two characters at a time and you're doing this matrix multiplication you know the possibilities are pretty pretty big for all these different uh matrices you could have you could if you really wanted to also put a shift like once you get that encoded um you could um put a shift and if you did I would put it here I would do all the encoding and then like let's say if I wanted to do this and then besides that number I would just want to add something you know I don't know add 10 to that number or something like that you know or or you know 50 just I I I would do it there and then at the at the end I would um do this subtraction right away so you could do that you know Matrix encoding is complicated enough but you could also add the adding or subtracting but I would do that after the multiplying here and then just you know add or subtract something and then here right away when you get the number you know do the opposite add or subtract so these are some things where where you can you know that's why you you can see all this code you know what can I do to make a secret code but then you see where you can make it your own and you know who knows you know even even if you keep it just like this and the only thing you change is this that's four numbers there that um you know whoever you're sending the message to would somehow have those four numbers and therefore the two of you can encode and decode things so yeah seems like a lot of fun um you know sending secret messages so there we go um here's how to do with python Matrix so let's look at another way of solving a system of equations and this one connects more with a lot of algebra methods that you might be familiar with so I'm going to take this Matrix and I'm going to take this system and turn this into a 3X3 Matrix of the coefficients on this side of the equal sign and then it's that times a matrix of XYZ the variables equals a 3x1 matrix of the numbers on that side so this works that we can create a matrix of all of our coefficients times the variable Matrix equals this now how we solve it remember if you're multiplying you divide divide and you multiply do the opposite um to cancel things out so I want to get the inverse of this Matrix and multiply the inverse times each side so when I get the inverse of this Matrix so remember this is a 3X3 so we can get the inverse and the inverse will be also a 3X3 and then when we multiply this by this Matrix which is a 3X 1 then we'll see that we can do this because the three these Dimensions match up and then and the dimensions of the result are going to be 3x1 it's going to be a 3x1 so what we end up getting is this Matrix of the the resulting Matrix will be like you know XY Z equals a 3X3 Matrix of our answers here pretty cool so this this is another way to solve it I personally often use the reduce row Echelon function but this is just as good just as viable and for some other things beyond what we're going to do in this course but you get into other you know more advanced calculus some um Matrix algebra then you might end up using this inverse method you know more often so I wanted to make sure that you know we talk about it but now let's take a look at the code and we'll compare this also to the reduced row Echelon function you know how we do this in code and then what the answers look like so let's take a look at the code so let's look at doing this with code inverse Matrix to solve a system and I'm going to use the same numbers so notice I'm going to make them arrays I'm going to import MP n p I'm going to import um everything from simpai it's kind of weird that it just works out when I do that even though it doesn't seem like I'm calling Senpai for anything so I'm I'm still going to talk about them as matrices but I'm creating them as numpy arrays so here's the same and we see you know Row one in Brackets row two in Brackets Row three and notice this one are a number on the other side of the equal sign it's a 3X one and so I'm just going to make you see Row one row two Row three each of them have one number in the brackets all right so because I'm doing this then numpy has that linear algebra so np. Lin alge Dov to get the inverse of that array and I'm just going to store it as mcore inverse and then the dot product and so this function calls you know two arguments what am I multiplying and order does matter so I'm doing the inverse times A1 and then inverse time A2 now this second one is really what I need to solve I just did this because I wanted to show um that this should give you the um identity Matrix okay so I'm just going to print this and that's that's really the the answer that I'm looking for all right and what I also have is the answers that I got from doing reduce row Echelon function it gave remember it gave me those fraction answers so I'm just printing out those and this is fraction so the print statement we combine these or we we'll do the math and actually output a decimal this will also output a decimal so we'll see them to compare so this is what I'm I'm doing I did the dotproduct the inverse time A2 and I get my 3x1 Matrix of the answers here and then to compare so this one gave me 0.330 and the one I got before was 0.327 there we go so and then the next number is a six so almost three thousands off there might be a rounding error somewhere or just and but notice you know this is about the comparison here um there we go the so the x value would be that the Y Value Point 014 and this one G is correct to that many but then the next number is a seven whereas this one's a one so off by about 6 6 606 10,000 and then here negative. 1443 and negative. 1476 so again off by a little bit in the order of you know um 10 in the order of the thousandths um close but depending on what you're doing and depending on how you're rounding that might be fine um that might be as close is what you need to get um if if not it would be worth it to you know try some different things and see which one really is you know uh more correct um but there we go so the inverse and see just printing that m dot I have this that um there we go um m dot and there we go so uh I could you see create multiplying the inverse times A1 and that should give you the identity Matrix and I made this as two different variables so um maybe I'll just make this one M do a and then I'm just going to print here print M do a there we go now this is really the ID because all these are e Nega something so I need to go up here and then say um around and that gives you the rounded so notice we have the math function round but this is a round and it will round every element in that array pretty cool and so I just wanted to put that into to show you that that's what we're doing we we get this array multiply by the inverse which gets the identity Matrix and so it would be the identity Matrix XYZ on the left side equals this Matrix which X is 33 Y is 01 and Z is .47 all right pretty good so I just wanted to do another example here connecting with solving the system of equations to get a quadratic we can do the same thing and I followed the same you know using the same points here um I'd have you know two x value X1 y1 X2 Y2 X3 Y3 and just like we have here um I have the reduced row Echelon function and so so therefore I'm creating a matrix of these values and then I'm going to do that function and then get that so here we go now if I do this then here's remember this is how I got these values here for X Y and Z or for a and c and it's just one value here so therefore I'm using the round function so that we've already done and so just using the inverse Matrix now um I'm just doing same values here but I'm making it n p. array for each there we go and just like we were doing before therefore I'm going to do the inverse there we go of that array 3x3 and then I already have this written in I'm going to round it so just again into comparison you really don't need to do this I just wanted to show you um but then I multipli that inverse times that 3x3 should get the identity and then the values I multiply the inverse by the 3x one so when we run this with with numbers like this that work out to nice integers or easily rounded you're not not going to see the same discrepancies so yep a b and c become 1 five and six identity yep and the others were one five and six so I this is a lot of extra output just to show you you know how some of it works but there we go so this is getting the answer using inverse this is getting the answer using reduce row Echelon function or maybe I have it reversed but then and and the same so it it some of these become a matter of preference there we go but now we can see how to use an inverse to solve and write the code to do it so let's look at a few more things with matrices like Transformations okay so here's how to do a few key Matrix operations with code the only Library we need to import is numpy and here I'm going to create a matrix I'm just going to call it points because I have it in mind that these could be XY points so np. Matrix and then here I have you know there we go Row one row two Row three and these could be XY points so now I could just pull out one of these points and notice how we number these um row zero element one so that'd be a two and you know cuz this is row 0o row one two you know there we go I could pull out that one particular point and then I'll also just print the whole Matrix just so you can see that then let's transpose it so I'm going to create another Matrix called T points and I'm going to transpose that original Matrix and we'll see what that looks like because then I'm going to print that out transpose and then I'll print that Matrix and just for fun we're going to transpose it back back so I'm going to transpose it back and we see um same np. transpose so I can transpose points and then I can transpose T points and that will transpose it back and then again we're going to print this I did I did make it another Matrix called original points so that it doesn't overwrite that so now at this point I have three matrices points T points and original points so I can also convert it to an array and this one I went back to the original points and converted it to an array NP np. array and then take that and notice array has the same function r. item and there we go that's 21 so back to the original so it's row two row zero one two and then element one so that should be a nine then still keeping in mind that these could be XY points some of the things we can do we can pull out different elements for this I'm going to start a blank array for x a blank array for y and I'm going to append one item to that so x. append and then I'm going to pick an item all right so I picked 0 0 so as we see that's a one and then y. a pen 01 here we go so we have um one2 so therefore I just made this X and Y are just that 1.12 and we'll print that out so so we see Point item 01 that's a two because there we go and here's that array here's how it would display as an array Row one row two Row three or as a matrix and transpose so we see what this does transposed makes column one row one so the 133 there we go and 269 there we go row column two becomes row two that's the transposed and transposed back and you see we still get it back to column one row one so um sometimes the reason to do to transpose it could be to um do some multiplying that you'd rather multiply this way so there we go and again I picked one element there and then as an array you see I just made that array so that X array and that y array so it was one two which was the first point there so some different things that we can do with this all right so this is the part of the chus where we go into the imaginary world and we can even graph complex numbers so we have our whole new axis that we can graph where instead of X that's the real axis and instead of y That's the imaginary axis and the way we would graph complex numbers so let's let's get a complex number so if I have like 3 + 4 I so remember it's complex because I have a real part and an imaginary part and then I would graph this as the real part would be my x value and the imaginary part would be my y value so essentially this would correspond to like a point of like 34 not draw on the scale but I wouldn't that's how I would write it in the cartisian plane 34 but because we're in this axis I would still write it as this it would be 3 + 4 I so I would still write it like that but we would know that that's where we get the real part the imaginary part plot the point pretty cool so other than going into the imaginary world you know what are some of the uses of this well a lot of fractals work on on this and the equations that generate fractals do involve in some capacity you know the square root of negative 1 which gets us I and then iterations of going through these and therefore plotting the points here and how do we get those particular points only by dealing with imaginary numbers and those types of equations so so that's why it it becomes a useful axis another thing that's going to connect with something that we're going to build up to here is if I have um cosine of X+ I sin of X so if I have this then that's something on my unit circle um well remember X is the cosine Y is the sign so if I have cosine of x or I of X and again I'm going to say x is a variable because these are not X and Y it's real and imaginary so my real part would be the cosine my horizontal axis and my imaginary part would be the sign and so I could plot points on an imaginary Circle so we're taken you know from Plato saying that the perfect circle doesn't exist to now we're going to get into imaginary circles but that's okay uh that's where we get to some interesting patterns so we're going to continue on this but let's take a look at how to do this in the code how to get complex numbers work with complex numbers get the real part or the imaginary part and do some other things with that and then we'll build upon that and get some fractal so let's take a look at how to work with the complex numbers in the code all right so here's the code for complex and imaginary numbers so we're going to import math but we're also going to import C math to deal with complex numbers all right and that's going to work behind the scenes we're not going to see cmath do anything um but we will use math dot a few things but we'll get to that so if I want a complex number I'm just going to call this function complex and it's going to take two arguments two three so the real part is going to be two the comp the imaginary part is going to be three and to see how this plays out I'm going to just print this out what that complex number looks like and I'm also going to show you see if I have this as a variable in this case Z1 I can do Z1 do real and then I can do Z1 do imaginary so we can split those up because some sometimes that might be useful all right so we'll print that out but then I'm also going to show you another complex number and here's another one where my real part is zero but the imaginary part is math. pi so this is I Pi is really Pi I I pi and then I'm going to create this as another variable though we don't have to but I'm going to do this so math. e to the exponent in this case Z3 so that's going to be to the exponent I Pi so it's e to the I Pi pretty cool um we're going to get even more into this but this these two lines here we just made e to the IP all right so you can if you have a complex number you can even subtract so that's why I created a second one because I can subtract complex numbers I can take one of the complex numbers and I can take it to an exponent in this case I'll just Square it all right and here um yes even though I have Z4 as e to the I Pi I'm going to show you that I can even just do that math right in the in the print statement and print that out and then here um when we see what that looks like you'll see why I have it building I'm just going to round this so I'm going to round the real part plus and then I'm going to round the imaginary part and here I'm just going to concatenate all this so it's going to be this um it's going to display the plus sign and it's going to display I so it's going to look like a complex number so let's take a look here so here's my print statement for this Z1 so it it will print this out as 2 + 3j it's really interesting that the python code um it will use the letter J with nothing in between you know it's not multiplied by anything instead of I but that represents I the imaginary number so there's your complex number in in Python code and then we can split it up you see the real part is two the imaginary part is three and here I have um this next print statement because we subtracted um that and my other imaginary number so the real one 2 1 is 1 and the imaginary one 3 2 is 1 so we can do the subtraction here we took it to an exponent and there's the answer and then we have e to the I Pi This Is The Answer um but notice it seems like a long decimal but the key feature of this decimal this ironically is not the letter is not e like Oilers number it's exponent to the 16 J so um what that is this number here 1 * 10 16th is essentially zero it's so close to zero so when I have this build when I'm rounding it here it absolutely will round to the zero because that that's what we have so this is the notation um you might remember this from something else scientific notation so that's exponent 16 so yeah 10 to the 16th is really close to zero so what do we get we get here that e to the I Pi is essentially ne1 there we go um that might not be so amazing now but it's just one way to look at that and we'll look at some other even more interesting uh patterns within that that uh beautiful equation so you know some key features how to work with complex numbers let's graph them so I'm still just going to import numpy and M plot Library um I'm going to set my you know just like I would with normal graphing and I'm going to set my Xmen y Min Etc just like normal graphing um notice we're really zoomed in um 2 to2 really zoomed in on the graph I do want to add a label um I put this in here but I decided not to put a title um but I just I'll add a label so that we see it is the X label but that's our real axis now and the ylabel is the imaginary axis so so here's a complex number and if the complex number one and then 75 so then essentially that's 1 + 75 I is the complex number and we would graph this that the real part ENT essentially becomes our x value and then the complex part or the imaginary part becomes our y value so that's how we would graph a complex number the real part is the x value the imaginary part is the yvalue so it looks like one number but we take it as like an x y coordinate so this could just be um you know one you know 75 as an XY coordinate so I'm to skip over this for now um because I'm not going to yet so this is X2 and Y2 but I'm not graphing them yet so we're going to ignore this and we're just going to jump right down here to uh plot it so I have my X1 and my y1 and I'm going to plot those here we go and when I run this now I also did not put an axis anywhere but it just naturally will zoom in on where um where it wants to be so there we go so on the real axis there we go the x value is one and on the imaginary 75 we see the labels we see where it is um 0 0 would be you know off this graph but then you know it just zoomed in on that okay that's nice but we can see that we can plot a point all right so now we'll revisit this I actually also can create uh np. linspace so remember that is an array of values um so I want it to go from 0 to 7 and then I want there to be 70 points in between so every 1110th is a you know is a new array element so there's going to be 70 of them here from 0 to 7 and the reason why I did this is because we're going to be thinking about angles and angles in radians you know going around the whole circle is 6.28 so I just rounded it up to seven as the next integer And1 that's Pro that's enough of a jump you know that we'll see this see this graph so there's my array I'll just call it a and then points is going to be another array and notice I have uh so np. cosine so I have the cosine of a plus the S of a Time j i * 1 J so what we have here is I just created a complex number here um called points and the notice I use this without even creating complex but this is actually going to work very nicely um points. real so I'm going to get the real part of it is going to be X2 and the points. imaginary is going to be Y2 so if I change this instead of graphing one point it's going to graph all of these points points which would go around in a circle and I could have more points in there um you see instead of 70 maybe I'll make this 140 there we go and we graph all these points around in the circle and this is mathematically even you see on the Y AIS or the imaginary goes from 1 to one same with on the X or the real axis netive 11 but it displays it just um more rectangular we can uh also Square it up if we wanted to but I just wanted to show you this that that's what we're graphing here and in this real and imaginary axis we can have you know the cosine as a real part and the sign is an imaginary part because cosine is your x value s is our yvalue and in this real and imaginary axis we can graph a circle so these are two interesting things that in working with the actual equations we got that e to the I Pi so the you know the complex part is e to the I Pi ends up being ne1 and we also get that we can graph cosine Plus s i as a complex number and that would be a circle and we're going to build upon that to really appreciate the the levels of depth for this uh beautiful formula but these are some things that we can do with uh real and complex numbers y calculating them graphing them and we'll see what other interesting patterns these lead to the mandal BR set this equation seems to be very simple it's zal z^2 + C and really then what you would do is you would Define Z equals and C equals at the beginning and quite often Z starts out at zero that's pretty common and we'll talk about the C value here so so what makes this so cool well we're going to get into the visuals of this when we look at the code but it becomes this really great pattern especially when you graph it on the real and imaginary axis we're not talking about x x and y axis here kind of doesn't accomplish the goal so what we're going to do is Define c and it doesn't have to be an imaginary number but if you have something like you know C equals like you know I like 0.5 I or something like that so you would plug those in um 0^ 2+ so it would be 0^ 2ar + 0.5 I and of course that zero is out so then Z the next round then that's the Z value that's a zero so it becomes 0.5 I i^ 2 + 0.5 I and then we would get that answer and then plug that into Z now this one works out nicely I squar then um becomes 1 and then I have I in that part so we see it's a complex number that we can graph on the real and complex axis well anything that continues to get larger and larger that's not a part of the mandal BR set but there's these few values that tend to get not much larger and they Define you know they Define this central part and the edges of the mandal BR set you know they're saying that we'll say that those are a part of the mandal BR set and then some things on the edge that are not really a part of the mandal BR because at some point they'll get larger and larger the way we would usually do it is coat it to have you know how many iterations does it take to get Beyond this threshold and then I might color it so you know in the mandle BR set might be a really dark color like black and then I'll get to like blue if it's all a few iterations gets it beyond the mandle BR if uh it's a few more then I might go to you know green and then you know out through the Spectrum and then a lot of times you'll see these and then something like red on the edges where you know that right away wasn't even in the mandal BR set so yeah just really interesting um just a very simple equation and then just each iteration you know we just change the zv value plot the point and then count how many iterations it takes to get Beyond a certain threshold and really then what happens is these really cool patterns and the first view is pretty cool and then we could zoom in on different parts to get other views so that's what we're going to take a look at and in addition to looking at the code uh so it's mandelbrot because the guy's name benois Mandel BR um he did a really good Ted Talk where he just talks about fractals and everything um yeah just a really interesting guy so if you come across that Ted Talk uh with Mandel BR uh it's worth watching but let's take a look at the code and we're going to see some these and some other examples some other iterations and see how this leads up to um what the Mand BR uh picture looks like let's take a look at the code here's the code for amandel br set and yes I will admit that I actually Ed chat GPT to create this code um so doing this in I don't know five seconds saved me potentially a day because understanding the idea that we can take these points and then plug them back into this formula and then plot and then Co color code the different parts for how many iterations it takes to get to that point yes we can wrap our heads around it but writing the code to get that to work and to really generate the U good graph you know what um some things that uh AI does pretty well so we're going to still only need to import umpai in that plot Library um I'm going to Define this mandal BR um function and see here's what it is we're going to go through um taking what C value we want we're already going to Define that Z starts at zero and we're going to Loop through you know however many it ations we're going to Loop through and then this is what we do Z * Z plus C and then we're just going to keep overwriting that that's what we want to do um it would seem that the formula straightforward to but again to make it work um you know correctly you see any time Z gets to be greater than two so then we're going to return um I and then we're going to turn Max of iterations so that's kind of what we want from this is how many iterations it took to get to this point and then here's the plot um where we're going to take the inputs X min max y Min y Max the width and height of the graph Max iterations and here we're going to create np. linspace two different arrays for you know one for the X one for the Y Y and then we're going to create a mesh grid this was again um some nice Insight that the GPT gave that working with the mesh grid this works out nicely so we Define this XY mesh grid and then I'm going to say notice these are capital letters here z = x + 1 J * Y and here we go we're going to create this image and we're going to Loop through this calling this function so it's going to Loop through the height and width and take you know this Z function to generate variable C and there we go then we're going to call that uh the mandal BR um function and then see Max iterations so now we get to show this image um there we go the extent and some labels here so one of the things that we can do um these original numbers are the ones that uh GPT returned but I'm going to run this first and then show some other numbers that will zoom in but anyway so we have these um minimum maximum width and height and there you go Max iterations 100 that works and now we're going to call the plot function so after that then we call this plot function here so you could have this code you can change these values call that plot function which will then also call the mandal BR function and here we go um if you run it we get the mandal BR set and that one function saying that it was hot that that defines the colors a little bit and we see all these different patterns here for how many iterations it takes um to get to one part here and one of the things then we can do is change this probably could put these on sliders but that might be um that might be a little bit of a a little bit um take a while to process all right and so I'm just going to switch these around so that we have um there we go so we'll just switch that around and then um 1.5 here okay and oh and make this 1.5 comment there all right so in looking at this um I was looking at U one of you know one of these and zooming in to this you see this gives you the mandal brth that you might be familiar with this look well actually either either of them depending on what zoom level you often see but we see this mandal BR set here and so notice the zoomed out version with these different values here we get that zoomed out version this is nice and then the other one we can take a look and see like the zoomed in on all these edges that of course are blurry here but if we were to zoom in on them then we get to that that value that we had before pretty cool and again another usefulness of uh imaginary numbers a lot of the usefulness is the artistic or visual representation because it actually ends up being the math of imaginary numbers behind the scenes um other sorts of fractals um again things that might seem random um just because you don't you don't fully see all the the little calculations going on in the background but these are some of the uses of imaginary numbers and uh benoa mandr um you know he he was pretty good with these interesting character all right so again just some use of imaginary numbers um a little example of some AI code that you can generate to plot this and you know some things you can Tinker with go in there and change some of the values and see what you get so let's talk about sequences in series so a sequence is any uh collection of numbers kind of like an array but there's a definite order to them a sequence if you will and a series is when we have that but we add them up so so let's talk about the sequences first and then we'll see what we're going to do to add them up so few different types the first one we're going to look at is arithmetic and just like the word arithmetic arithmetic is when I add or subtract something to get the next number and one thing that uh binds these sequences I have an equation that I can use to generate the next number so here's my equation I I'll call it you know I'll call my sequence a and you know for arithmetic and the subscript n so a subn is you know the nth number in sequence and a sub one is the first number so a lot of times in Array we we you know we talk think about counting you know zero is the first term but for these and for this particular math one is the n is one is the first number so a sub one is the first number and then I see the common difference here so I start with the first and then Plus D times and we see the common difference um times n minus one because I already have my first number so when n is two then I have a common difference but when n is one I have my first number there so let's look at an example of this um supposing I have just odd numbers so I would have a subn = 1 + 2 2 * n 1 whereas I've already counted for my first number but then I'm adding two each time and so then if I generate that one comma then notice n is one so 1 1 is zero that's why then that drops out then when n is two for the second number then I have 2 1 is 1 * 2 is 2 + 1 is 3 and and is three for the third number so then 2 1 uh 3 1 is 2 * 2 is 4 + 1 is 5 and we know this pattern so we can see that you know the next one is seven which is the fourth number 4 1 is 3 * 2 is 6 + 1 is 7 Etc so we can look at this and we can um generate every number in the sequence here so as as I'm saying it's similar to slope intercept y mx plus b but the difference is the sequence is discret meaning that I only want uh n to be integers it's not continuous where n can like on the graph can be any decimal in between I have one I have two I don't have any the numbers in between one and two so I can generate this sequence here now what I can do then if that's the sequence my series is I'm just adding them and that's that's the difference between a sequence and a series if I just add them up and what we find is for various sequences or SE or series there's some cool patterns to adding them up so certainly for this one I can add them and you know I could um we'll look at the code in in a little bit and how we can uh run through a loop and just add them you know if if I have code at my disposal that's probably what I'm going to do because setting up a simple Loop is pretty easy but then I could there there's a couple other ways I can do it let's talk about the notation of this first so if I have the sum then I'm going to say that the sum in my specific case here is going to be capital Sigma for sum and then I'm going to have the sum of this as n goes from one to and I can pick something I you know I can pick um you know four let's say let's say we ended it here so there we go so this is the math notation of essentially a loop I'm going to you know what's the sum of this as n goes from 1 to four so I plug in again n is one then n is two then n is three then n is four generate my numbers and then add them up there we go so we we know we see you know we can make this but supposing I had the numbers one to 100 so then I would have all these I'm going to stop this plus um and then if n is 100 minus one is 9 9 * 2 is 198 so then plus one is 199 that would be my last term so how could I do this well certainly again if I have code I'm just I might just like create a loop and that's kind of how we're looking in this course like the difference if I have you know code at my disposal or am I crunching the numbers on paper but uh friedrick gal figured out this interesting pattern here that so what's 1 + 199 is 200 is 200 but then my previous number before that is going to be 197 because you know all the odd numbers so 197 + 3 also 200 and if we keep working backwards in there the one before that would be 195 + 5 is 200 and so in summing this up we have this interesting pattern here that anytime I'm summing up an arithmetic series it's always going to be the first plus the last and then remember I'm pairing them up so it's that times n over two so that's the sum of any arithmetic series and what's cool is as we get into these Series so we get the idea we can you know generate a sequence we can find any number in that sequence we can sum up that sequence which would be a series I can sum it up and then for a lot of things um we can find formulas to sum this up and having you know your brain paper code all at your disposal different situations you you see which one ends up being the you know the better you know which one's a better solution uh geometric is the other one and geometric series is well sequence or series is when we're multiplying something each time to get the next number and here's our formula I'll call it g g so G subn for any number G sub one is the first term and then R for the common ratio since we're multiplying so it's R to the exponent n minus one so that's how we would generate each term and let's you know come up with one you know let's say we have G subn equal let's say 3 + 2 to the nus1 just you know a simple example here so my first term would be three and then times two because you know when n is one then that drops out so 3 * 2 is 6 and then when n is three for the third term 3 1 is 2 * 2 is 4 um and 3 * 4 is 12 even if I and if I was counting in individually time 2 * 2 and then I'll do times two again since I know that's the pattern 24 and then we can continue so there we go so we have our geometric series and if I was going to that's a sequence if I just have this so then I can just switch this out to you know be a series if I wanted to and if I wanted to write the formula you know saying that I'm summing this up so then it would be again Greek letter Sigma as n goes from one in this case we'll just say 1 to four here we go so there's our geometric series and and you know we see the similarities there is also if I was going to sum this up if I'm writing code I'm probably going to write a loop but I would uh you know there is also a formula for this I feel like it's not as intuitive as the arithmetic but the sum in this case is going to be if we call a the first term a * R to the nus1 over r minus one kind of an interesting uh sum here though it works and that becomes the sum if I just wanted to uh generate it this way and sometimes that connects with some things as we'll see with um s and cosine when we have an interesting formula for generating a sequence um sometimes that's useful in other places so we we kind of want to have all these different tools available to us whether we use a loop or use a formula or you know just use our brain and do do the math that way we want to have these different things at our disposal so let's look at one more uh one one more sequence here so another type of sequence or series is recursive and with these we really can't generate um an equation like we did before because recursive means it depends on what came right before and one of them is the Fibonacci sequence so you know we're all familiar with this you know 1 1 2 3 5 Etc because how do we get this it's you know understood zero begin so then I have a one and then this one is 1+ 0 and then this two is 1 + 1 this three is 2 + 1 we're always adding the two previous numbers so as a formula it really is a subn equal a sub nus1 plus a subn minus 2 and you see that's recursive I need to know the two previous numbers to get that current number and it builds upon that so I can't just jump up what's the 50th term so this is what one of our other types of of sequences um getting into the code probably uh more likely something we would do with a loop because I can easily build that up quickly you know uh processors are quick so you know this is recursive and that Fibonacci Sequence you know why why does it show up everywhere this recursive sequence it's because the cumulative effects of things growing in nature adding and then the next thing is you know adding on to the previous two so um you know shells or things and like for example if I had you know the area of this Square it's one by one so the dimensions of this square is one by one so then if I put another Square so then this next one is 2x two and you see then this next one is 3x3 because it adds that one from before and then that two and then so now that was three and so then this next one is 5 by five and then this next one would be you know five 6 7 8 because that's the eight so then this one would be 8 by 8 and you know just with squares we can see how it builds that each of these are squares building upon um you know each side is the measure of the two previous sides pretty cool and then the Fibonacci spiral once we build this then we can just take a curved line you know imagine this you know 1/4 of a circle so if this was the center a curved line from that corner to that corner and then a curved line from that corner to that corner and then in each Square you know I'm taking a curved line from corner to corner and then a curved line from corner to corner and a curved line from corner to corner and a curve line from corner to corner hopefully my drawing isn't too bad but that's where we get the the spiral and that's where we get the recursive and that's sequence and series and that's where we get the you know this cumulative growth in nature and then we get this spiral so our goal is to build upon things and your knowledge of math and algorithms becomes cumulative growth so let's take a look at how we can do some of this stuff in code here's how to generate sequences and series with code and as we were saying we'll Loop through it um we'll start with an arithmetic sequence I just put as a comment that you know you could Define your sequence just so it's there for your own notes as a comment and here I I split it up um sequence what are we going to do we're going to create a an empty array or list and then as we Loop through um I just decided to make it range you know 11 as we Ro Loop through I'm going to generate each element store it as this variable next and then append it to the array and notice I usually will have a starting point um and then it's always always times n minus one mathematically because the first element is element number one but since in Python our our ranges begin with zero unless I tell it otherwise so I don't have to put that n minus one because it's already going to start with zero there we go and then we'll print that out I'm also going to do the series here we'll print this all out together so with the series I have a sum variable start at zero and then as we go through our range um also generate each next element and then I'm going to add it to my sum variable so then we can print that out so you know just a simple sequence here and what do we have we're going to generate starting with three and then we're going to do the odd odd numbers because it's two every time so there we go and then the sum you know for this particular instance here and we'll do this with a geometric series too notice how similar you know start out with your empty array you know comment up here if you want and then you know generate the next element a pendant to the empty array and at the end we'll print it out same with the series start out with a sum variable Loop through generate the next one add it to the existing s um there we go and we see so we can see the answer and the sum now I'll do one more and this time notice you were probably thinking hey I should put them both in the same Loop so I did that on this one so Su variable starting at zero empty array for the series and now for this one I just picked a range of 50 um and I'm I'm going to do a harmonic series 1 over two to an exponent so you see 1 over 2 to the A and I still kept this as a equals 0 um as the beginning so my first element we'll we'll have that and um that will end up being the element will be one and we'll see that here so then my next element appended to this series array add that to the existing sum and we're going to print out the series we're going to print out the sum and there we go so remember this is going to be one one 1/2 1/4 but this will put them out as decimals and the sum we see you know we remember mathematically then looping this you know the sum of this as the number of elements approaches Infinity it this sum approaches two because it converges these converge and um you know so I can have even more and it's just really going to approach two so you know that's the sum as and approaches Infinity but I only went up to 50 and we can still already see how close that gets to two so I could Loop this instead of 50 I can make it 100 I can make it a million and we're still going to be you know just about it two um you know just more nines there we go so we see the sum of the harmonic series you know as our other example now we also might have mentioned Fibonacci and the recursive sequences so I just want to point this out there's this online encyclopedia of integer sequences how cool is that so what you can do is you can type in you can type in the name of the sequence if you happen to know it and you can uh or or you can type in the first few if you type in the first few uh one of their tips for searching is you don't put the first number in sometimes people disagree over where the sequ particular sequence starts so the first one or two elements you don't have to put in and then you put in at least six more than that you probably don't need to so you know Skip the first number or two put in about six elements and search it up so that's what they you know they put out an example there I'm going to hit enter and you see it gives you this um that particular sequence is the number of trees with n unlabeled nodes kind of cool as well as some comments some references history and other links so you you can do this you can just type in so you know for Fibonacci I'm going to skip the first one I'm just going to put one two uh 3 five 8 and that's probably enough hit enter and look at that it tells me that it's the Fibonacci numbers illustrates this and you know all the other notes including um some other references and mentions of other people that came up with a similar sequence before Fibonacci so really cool stuff and and here we go just to expand you know beyond any of the sequences you might know and remember these are sequences but to make them a series all you have to do is just add them so once you have an equation to generate that you know you can add them up all right there we go and now we're going to go on to look at using sequences and series to generate other numbers um especially series uh to generate numbers like Oilers number e um even s and cosine there's it's amazing in how many different uh numbers you can get from like you know there's a sequence or series definition to that number so we're going to take a look at that so that's what's next let's take a look at e Oiler number and how we get this by definition there's actually a couple ways to get this but this is possibly the goto so e um equals the sum so let's look at this notation here this capital Sigma Greek letter Sigma is for summation so this is the math notation for doing a loop and adding every time so I'm going to say n equals zero at the beginning and then so n goes from zero to Infinity so that's how I Define my Loop here so I'm going to say n goes from zero to infinity and then every iteration I'm going to add this all up and so it's the sum of this 1/ n factorial and remember factorial is that number times every number less than that so let's work this out here so then 1 over Z factorial and so this is what we're doing we're summing this up plus 1 over 1 factorial + 1 over 2 factorial + 1 over 3 factorial and and it goes on forever till Infinity so this is how we get e but let's let's look at these values here zero factorial it seems weird that you have zero in the denominator and yet I'm also saying multiply that times everything wouldn't that zero out but by definition zero factorial is one because factorial comes into play really in situations where I'm calculating probability of things and so if I have no if I have no things how many ways can I arrange that I only have one way which is to do nothing so it's kind of weird you know um sometimes math explains um some other uh logic or written um things and in this case we need some verbal explanation to explain the math but that's that's why zero factorial by definition is one because if I have no things I only have one op option which is I can't arrange them so one factorial is one two remember so 2 * 1 which is just two 3 is then 3 * 2 * 1 and then it would go on four four factorial is 4 * 3 * 2 * one but even looking at this we're going to get this one over one so that's one that's one again that's 12 3 factorial so then that's one 16 and that would be four factorial would be 4 * 3 is 12 * 2 is 24 and again that would continue this this is almost enough for us to start seeing that e remember it's 2.71828 1828 well 25 6 and2 you know we're we're getting just that part we we're almost to 2.7 and then you see we keep adding smaller and smaller amounts but it gets up to that you know just over 2.7 and we'll see with the code that if we Loop through this um it might even take like you know 10 11 times that's you know that's enough to get us pretty a few decimal places you know correct to e as we know it um so that's pretty cool but that this is the factorial definition of e so then you know then that's what we get you know all this then will eventually equal 2.71828 1828 and after that the next number is of one but the pattern kind of breaks down a little bit so it doesn't exactly repeat those four digits so there we go summation of 1/ n factorial as n goes from 0 to Infinity cool let's take a look at how we can do this with the code here's how to generate Oilers number e but using the summation using the the series so the series remember it's the sum of one over um n factorial so I'm just going to give this range here up to 50 even though the official definition is up to Infinity 50 will Almost Do it for us um but then I'll show you so I'm going to just generate the sum and then we're going to keep adding to it each time we go through the loop we're going to add to one over math. factorial of a and then after we go through that Loop I'm going to print that out and then also print out just the general math. and we see how close we are so look at this even up to 50 we're close down to this many decimal places and it even rounds so that's why that's why I I stopped at 50 and you see we can generate e with this sum uh that this really is you know one of the ways you know we get e and now then we're going to connect this with s and cosine to build up to a a big reveal here so let's look at the series definitions of e to the X so another way way to to get e so it's always uh x uh x e to the X so this is not just e it's e to an exponent so this would be x to the 0 over 0 factorial which works out to One X to the 1st over 1 factorial plus x to the 2 over 2 factorial plus X the 3r over 3 factorial and that keeps going so each time you know the numerator X to an exponent then that exponent factorial so so as you can see even though the numerator is getting bigger the denominator factorial is also getting bigger and we're adding this tiny tiny amount uh we're we're adding a different amount each time and so uh that's how we generate e to the X you know how what's X and then you know however many exponents so we're going to connect this with s and cosine because first of all you might notice how similar they are um cosine as the even exponent so it starts out and I wrote it this way z x 0 over 0 factorial but then we alternate minus X the 2 over 2 factorial plus x 4 over 4 factorial minus again and then that continues that pattern and S similar to cosine but we have the odd exponents so we don't have x 0 that's even X 1st over 1 factorial x 3r 3 factorial plus X 5th 5 factorial and we go on like this so these are interesting in of themselves and we have ways that we can you know use summation notation there's you know a formula for this but I wanted to write it out this way so you can see this and we're going to look at how this connects to e to the X because I want to look at what if we have e to the IX x 0 0 so that would still be 1 IX over 1 factorial which is you know 1 I'm actually going to keep that denominator because that'll be important and then the next one X2 but then if it's IX then X2 so that becomes so we still have the we still have the X2 but the i^ S becomes ne1 which changes that sign and then we go to x to the 3 so we have we still have x to the 3 but then I to the 3 is NE I the 3 is I and still the same denominator and then we have the next one to the four fourth in just doing this a few times I want you to notice then that the I over one factorial um and then so that is a lot like sign but I but I'm multiplying by I this time and then minus x^2 that's a lot like cosine here this next termus i x 3 3 a lot like sign but I'm multiplying by I this one a lot like cosine the next one's going to be a lot like sign but multiplying by I so it ends up it's threaded together because instead of even out even out I have all of them but each one of them lines up with sign but multiplied by I so what we really get is e to the iix equals uh the cosine of x plus I * the S of X and that's the formula um that Robert coats you know many years ago uh demonstrated that when we look at the series version series definitions of these it's really cool how it lines up when we have e to the IX and if it's e to the iix doing that substitution it works out that the cosine ends up being the same and then the sign it's just like the sign but terms but multiplied by I each time so we can just do that out here and that's what we get e to the ixal cosine of x plus I * sin of x and there's some other cool patterns we can do but I wanted to talk about this as it leads up to our you know e to the I pi equals ne1 explanation all right so let's take a look at in the code doing things like this with values and you know showing that you know this does get to cosine this does get to S and how they how they connect so let's take a look at the code so here's how to generate s and cosine using a series and another interesting thing we can do with the series and also combined with e we're going to lead up to u a big reveal here so we looked at the formulas um how cosine we'll do that one first um uh I how we generate cosine with it's all the even numbers and zero is even um the numerator is X to that X exponent and then the denominator is that number factorial so what we're going to do uh have my sum uh variable zero I'm going to use x as the angle remember in radians and for our demonstration here that really does need to be an integer because we're going to end up using that in factorial okay and I created this other variable PN positive negative and I'm going to start it out at negative one so here if I have this range 50 um and uh that that might be enough we might even increase it to 100 this officially would go be be the sum up to Infinity but 50 to 100 sometimes you you'll see how many decimal places it goes to and that will be enough to illustrate this so remember this pattern goes for the even exponent so I'm going to start out with this if if our a um uh is even so a modulus 2 if that's zero and then each time I'm going to multiply by negative 1 because again that's the pattern become you know one's positive one's negative and then I'm going to keep adding to the sum here so the sum plus positive or negative times x to that exponent and then the denominator is math factorial so there we go so it goes through all the even ones there's another way to do this with count counting through each one and just multiplying some of these by two that you know that works also I decided to do it this way and we're going to print out cosine and we're also going to print out just the normal math. cosine so we can see the comparison and we'll do the same thing for sign I'll do this all before I run it so very similar formulas so I'm going to sum that up start out with that variable and then again my angle X is one there we go um I can make these different X values because it's going to overwrite it each time so that's fine um I can make it two just to compare and see we have that same range now here I want the range to start at one because if I don't have a number there it's going to start at zero but for sign remember it goes through all the odd numbers so I want it to start at one and then modulus if statement if it's not equal to zero that's what then I want to continue same thing same pattern it alternates positive negative and then here's what once we have that established this part of the formula is actually very similar well it this and um new line and I'm going to print out the sign again that sign and then um just calculating it and we'll see how close we are so look at the cosine using that we pretty close um down to that many decimal places I I you know if if it was you know anywhere from further away maybe these last two numbers changed I would I would increase and loop through it more and you would see it you know it would match up but yeah it really officially goes to Infinity but looping through 50 times is actually enough so we see that that that that works that we actually can generate s and cosine based on summation of a series all right so pretty cool and then we're going to look at combining that with E and some of the other cool patterns that follow so we're going to look at e to the I pial 1 and why this is such a beautiful equation so it connects with the real and imaginary axis if we are graphing notice I have I which is the imaginary number Square < TK of1 we can graph these and remember the real axis is the horizontal so it's not X and Y that horizontal is real and the vertical is the imaginary axis so when I plot a point there if I I would really have it as whatever real part that corresponds to the horizontal so I count over from the origin and then I times something the imaginary part you know then that would be you know the vertical point so if I have you know cosine of x plus I S of X and remember you know it's this complex number so it's real plus the imaginary part but we would graph that as you know if it were on the xycoordinate plane cosine X comma sin of X or you know that'd be cosine of theta or something like that so we see that you know writing it like this corresponds to plotting this point cosine s the real part the imaginary part what's cool is that this guy um Robert coats in like 174 he figured this out that e to thex equals this cosine of x plus I sin of X now when we get into the code we're going to look at all different ways that we can now demonstrate that that's true I'll show you like loops and see all these different values that for any value of x this works you know they come out the exact same complex number to many decimal places but it's kind of cool he worked this out you know that many years ago that e to the iix equals this so what that means is that I can plot this point and I can actually just write e to the iix as the coordinate of that point and it kind of just boggles the mind because because of the way we write the notation here as you know this complex number and then that's how I plot the point the real part the complex part plot the point which is really cool so Pythagorean theorem then also applies here because the you know in this case the horizontal is still cosine the vertical is still s so sin square plus cosine squared is one and then I get the radius one just like our unit circle so when we look at this I'm going to throw one more thing here in then since we've established that the radius is one if I think of polar coordinates so polar coordinates so we go from XY to real and imaginary polar they're not rectangular the coordinates there are R Theta so Theta remember is the angle so R is the radius from the origin so how far out am I going from the radius and then what's the angle um a lot of you know air traffic controllers or satellite uh dishes that like they'll use polar coordinates because that's what I want how far out am I and then what's the angle well then in this case if the radius is one and then the angle is Theta or I'll continue calling it X so therefore 1X and that is you know e to the I Pi or e to the IX just kind of cool how that works out everywhere so that's kind of why people talk about this being this beautiful equation e e the now let's talk about this exact value so if I have this equation here I'm just going to get this out of the way but it's just one more connection here and then if I talk about I Pi so this works for all those different values but some of them you know are more elegant Solutions than others but if this is pi so if I have e to the I pi Pi so then that's the cosine of pi plus I * the S of Pi and remember Pi radians you're going around so the coordinate here the cosine of pi is 1 and then the S of Pi is zero so e to the I pi that's where we get e to the I pi equals so we build upon this established uh equation here and then for this value when I plug in that the angle is pi radians e to the I pi equals 1 you know plus zero if you want to be official it's just really a cool thing because to fully appreciate the beauty of that besides the fact that it brings together all these you know e i pi1 all but the explanation of it brings in s and cosine and complex numbers and graphing on the imaginary axis and you know verifying it with Pythagorean identity and connection with polar coordinates it's just really amazing that as you've been going through math up to this point you can kind of bring it all together you needed to know all the things you've learned up to this point to fully appreciate oh it all comes together in this equation but that's just what why it's cool graphing on the you know this equation and then graphing on the imaginary axis and plugging in that particular value get you e to the I pi equals ne1 so when we look at the code what I'm going to go through is also look at other ways that we can verify this with code and you know some other uh sequences so let's take a look at that so now we're going to show this with imaginary with with code that we're going to import math and our code cmath for the complex and what we're going to do I have two variables here I probably could have done it with one but a and then X so I use that one just for complex so if a is one so then I have you know my real part is zero and it's one I so that makes this value comp is I so that's I I feel like that's kind of the best way to do it and now I have that's I um this is I Pi which I'm going to deal with later but notice my complex you know the real part is zero and the complex part would be math. Pi so the answer to that would be I Pi stored as this variable so anyway so this is how we could show a complex number so I'm just going to print out the complex number show you and then e to the iix so notice yes I can do math. but I'm going to do C.E because we want our answer to be complex all right so C.E to the exponent comp so this is to the exponent I so this is going to be e to the I all right and then these I have have math. cosine of x and my complex number I so I have I times cth times the S of X and I split this up just to if you copy this code you can Tinker with this and change some things so what we were showing on the Whiteboard was that e to the iix does equal cosine of x plus I sin of X that's the idea so I'm going to print out and show you there's e to the iix and I'm going to show you that cosine of x plus I sin of X is actually the same value and along the way we're learning how to work with and use imaginary number so there's my complex number python tends to Output yes we know it's I but python uses J for illustrating that this is a complex this is an imaginary number so there's my complex number so that one J is the python way of saying that's I the imaginary number so e to the iix we see does give us this complex number here like that's it if I have e to the IX that's what I get and notice cosine of x plus I sin of X is exactly that same complex number pretty cool so that's what we want show we can see it in the factoring way we can see it with sequences and with series and we can see it with code that we get e to the iix this does work and showing that Robert coach was right in 1714 we're also going to Loop through this with all different values but it shows that e to the iix equals cosine of x plus I sin of X really cool that that way in the imaginary graphing the real axis and the imaginary axis that this e to the iix ends up whatever X is it ends up being this imaginary this complex number that works out to this and so that's what we're going to do here we're just going to Loop through this and again just a way to represent I so I just didn't use another variable I just said okay yeah 01 that's my complex number and in my range I called it 63 cuz you know my first thing is my angle is going to be times that so it's going to go up to 6.28 you know one complete cycle in radians around the circle and I have in mind the left and right of an equal sign so the right side is going to be um cosine of a plus I sin of a and then the left side is going to be e to that uhome is my complex number but it's really I time a so whatever that angle is then I have e to the I a equals cosine of a plus I sin of a and that's what we're going to do and you know just in case I I threw this in if in an if statement just just in case you don't want to look at all these only if these are equal what print out on two lines because we'll see these are a lot of decimal places it's going to round you know that uh the uh um the angle round it to one decimal place and then give you the E value and then the left side and then it's also on the next line again because it's going to be a lot of decimal places going to print out the exact value so when we run this this you know Scrolls down here there's I have each of these angles in radians you see the E value is 1 plus there you because when it's zero you know um we're on the real axis but no imaginary numbers which would be equivalent to the Y value and then the cosine sign would be one plus 0 there we go and we see for the next angle the E value is exactly this complex number but cosine s is exactly the same complex number down to all those decimal places and this is just a way of showing you know uh Robert coats worked this out uh you know on a chalkboard probably in uh but definitely or paper in 1774 but here just showing you that yes we calculating this through all these decimal places these are going to be the same that at every point then we get e to that exponent equals cosine plus I and if we go through all this so this leads us all up to the grand finale showing that e to the I pi equals 1 so all these see and and we can see how all this fits together really cool um all these answers um e to the I pi equals ne1 is nice and elegant if I said e to the you know um 6 radians um time I yeah I don't know um equals this number you know you might say okay yeah all right I believe you but it's not that elegant of a solution here we're going to show that you know all it works for all those but what I'm going to do is my variable I Pi is going to be this remember the complex of it's math. Pi that's going to be the the imaginary part so this is is I pi and then so I have I'm going to print out that exact value e to the I Pi um but then what I'm going to do is that's my complex number so I'm going to um you know this answer is e to the I Pi but I want the real part so I want so notice I have my complex variable C answer and then I want the real part so it's C answer. real and then I want the imaginary part now I know this real side you know is going to be one or negative one but the imaginary part it's going to be zero but it's not going to look like that it's going to be this long decimal that rounds to zero easily but it's going to look weird so I do want to round that imaginary part so I take that c. image and it'll round it so now I'm going to print c plus c IM match and so what we're going to have is yes for when it's the I Pi I'm going to print e to the I pi and then I'm going to print that real and imaginary part and we get e to the I pi and you see that's the full thing but notice it's exponent this is not e like what number this is the exponent 6 so really we're saying that you know a decimal point then about 15 zeros then a one is where this is so that's essentially zero so when we rounded it's zero and that's what we get e to the I Pi if I don't round it it looks like this but when I round it it looks like this and it really shows e to the I pi equals ne1 so pretty cool and that's what makes this so EXC exting that it's just so interesting that it all comes together yes we see all these patterns but to fully appreciate all these patterns all these series that you know you learn about the the graphing the trigonometry the real and complex axis and how all that is true at each step and we see that it matches up but then when it comes down to the variable where the angle is pi radians it all lines up perfectly and it comes down to this nice elegant solution e to the I pi equals negative one and so there we go so we go from you know how many hundreds of years ago uh some cool patterns that people were discussing to more modern technology you know reproving that and just adding a a deeper Dimension to this that yes it's kind of cool that here's one more way to show this so there we go and and that that's a big part of what math is at this level is appreciating the elegant Solutions so that's what we want to be able to do we're going talk about probability and this really leads into a lot of things that we're going to do with uh statistics data science because we we can't always predict the future we we go on probabilities and what's likely to happen and the general probability equation is the number of correct options out of the number of possible options so that that's it if um you know if I'm thinking of a number from 1 to 10 and somebody has to guess they have there's one correct number out of 10 probability of them guessing is one out of 10 if um if I want to roll roll dice uh rolling one Cube um then you know whatever number I want to roll if I'm only rolling one Cube then I would have you know one number out of the six possible sides you know what that's the probability that I roll the number that I want one out of six so you know anytime we're always counting up and that's where we get into some of our counting rules you know how can I count up the number of possible options and then of those what are the ones how many am I considering correct options so let's go back to the rolling dice one out of six probability if I roll one but supposing I want to roll two and so let's let's think about like a 12 there's only one way to get a 12 I have to roll six then I have to roll a six so I have to roll the first one as a six and I have to roll the second one as a six and anytime it's and it's only correct if this happens and that happens then I multiply the probabilities so you know I roll two dice the probability of me rolling a a six is one out of six and then on the second die it's one out of six so I multiply them so then it would one out of 36 so if I roll two dice and I want to roll 12 I have a one out of 36 chance of rolling a 12 the same would be true for rolling a two because one in one same idea only one way to get it so that's how we get you know and I multiply the probabilities um this is where we can think about the you know lottery winnings um if I have uh a lot of the lotteries we pick you know um one number out of 10 and then might go to another bin and pick another number out of 10 and then they might go to another bin and pick another number out of 10 and so I'm only correct I only win if I get all three numbers I got th you know out of 10 I picked this correct number out of 10 this correct one so then that would be one out of a thousand and so that's the that's the probability of win winning just like a simple pick three lottery one out of a thousand and we see that one out of a thousand you probably you know I mean who knows you could the way the way you pick it it's not a guarantee that if you played it a thousand times you're going to win so that's where a lot of people you know spend a lot of money hoping that that one out of th000 you know lightning strikes and we get lucky but we really don't we really don't know um so then if it's or then I can add the probabilities so supposing um I'm rolling Dice and let's say I'm rolling one one one die so um let's say what's the probability of me rolling a five or a six you know you're playing a game you know you need a five or a six to to win so you know probability of rolling a five is still that one out of six because that's one number on the on the whole Cube and probability of rolling a six is also one out of six but I'm correct if this one or that one works so I would add the probabilities so that gives me two out of six or we could reduce it but there we go anytime I have that's correct if this or that happens then I add the probabilities and so the general probab ility we're always counting up how many possible options and you know number correct out number possible and if both of them have to happen then I multiply the probabilities if either one then I can add the probabilities and we can build upon these to look at other ways to calculate probability as it gets more complex we really end up having um a lot of different counting rules for how I can figure out the possible options that's that's kind of thing how can I figure out the possible options and then of uh you know each of these you know um all the different way ways we can combine this so we'll take a look at this and we'll look at how we can do this with code and here's the formula so the notation um big p in the middle for permutation so that means that order does matter and I have n on one side r on the other side so it's n things Tak an r at a time and then here's the formula n factorial over nus R factorial so two different ways to write it and you know you can put once you have specific numbers you can put that in here around the p and the formula um it's going to end up being pretty easy to do with code um you could just Define these here and just put a you know n equals and then overwrite this code and write a variable a number in there but I wanted to set this up as you know prompting for input so you don't even actually have to change this code because it's going to prompt for input how many things in the overall pool and then how many taking how many at a time and there we go and then that's that's what n and R are so um I call this P um I often do n for numerator D for denominator but I'm already using n so I made this P for permutation there we go so factorial and then the denominator the factorial of n minus r and then do that Division and then cast it as an integer so here we go um and the answer how many possible permutations so we can run this and see so it it it's funny that even you know some of the things um in the overall pool like let's say if I have like 10 things in the overall pool and taken you know three at a time 720 possible permutations um there were you know that it seems like wow there's you know maybe you know an ice cream place that you know lets you mix up to three at a time so 10 flavors they can say wow we have 720 possible combin possible ice creams that we can give you and a lot of places do that they have you know only so many um you know a little more than 10 even and that number is going to be quickly up to a thousand and they'll say wow we have a thousand combinations you know um but that would be order does matter so um probably not good with ice cream because like yes you could it looks different the order of the Scoops but it'll end up getting mixed together so that's what leads us to combinations when order does not matter and this would be more appropriate to things like flavors because you know just the fact that they're there they'll end up getting mixed so the order doesn't matter you're going to mix them together anyway but any time or if I'm selecting people for a team or a group where we're not defining the roles yet so it's just are you in this group or not or that's the cases where order does not matter so we have combinations so big c um N Things taking r a time and then the formula here so notice combinations just the fact that you're in the group that's enough so therefore there's fewer possibilities because order doesn't matter so I have that extra R factorial the denominator is bigger the overall number then is smaller so we'll same thing we'll prompt for how many things in the overall pool and then um I have this um I just use the same variables P for probability um it doesn't matter because that's is just my in between variable here anyway um math. factorial and then factorial R times and minus r so divide that and then cast as an integer so there we go so if I have this so yeah let's say um you know 20 um let's say uh drink flavors you know all the different juice or whatever they put in the drink 20 uh different drink flavors taken three at a time 11,000 and you know there's uh you know at least one place I can think of that has that they have you know you get your your you're slushy and you know all the different flavors but they only have about 20 flavors and they will mix up to three at a time for you so then they advertise that they have more than a thousand different drinks available pretty cool so there we go permutations and combinations once you have the formula then it's easy to then plug in the numbers and you can calculate how many possibilities you have and that's that's what you want to see with this math think about the possibilities all right so Pascal triangle simple enough to generate and so many patterns that seem to flow from this so we look you know understood zeros out beyond the triangle so we're always adding that number the two numbers next to each other so one and an understood zero you know there we go we're adding the two numbers next to each other to get the next number which goes in the row between them so we have a one and a one and then we add that to make two two and a one and we add that to make three you see and then there we go one and a three to make four three and a three to make six here we go so that's how we get Pascal's triangle each time each row straightforward really cool pattern all right but that's not all there is to it what else shows up as a Pascal's triangle pattern well I could have binomial expansion um and I could have you know if I have like a + b to the zero anything to the zero is one that's the first row I could have a + b to the 1 and then that would be 1 a + 1 B but then when I get a + b to the 2 so then I get so 1 a 2 B to the 0 plus 2 a to the 1st B to the 1st + 1 a to the 0 b s so we see then we get this all this other pattern of these are the coefficients but then the first term here goes to the second power to the first power to the zero and the second term does the opposite to the zero to the first to the second and the same type of thing continues here that it becomes a + b to the 3 so then that would be a to the 3 B to the 0 plus and then this one would be a to the 2 B to the 1st and then this one would be a to the 1st B to the 2 and then this one would be a to the 0 B to the 3 pretty cool and notice yeah if you had this then you you know in writing it out times one you might not write the one anything to the zero is one so you might not write that but to fulfill the pattern that's what happens pretty cool other things that come up with with the Pascal's triangle is 11 to an exponent and again anything to the zero is one but 11 to the first power is 11 and I wrote all over this but 11 to the second power is 121 1 121 11 to the 3 power is 1331 and you know this one would be 11 to the 4th power is exactly this 14,641 pretty cool it actually still continues but then when I get down to the next one then this has to carry over so you know it would be uh a zero and then well then that's a 10 so the one would carry over and then the one would carry over so then that would be a six so then it really would be then 11 to the 5th power 1, uh 600 uh or 16,1 105 then you know it carries over that's pretty cool but it it still follows the pattern we just have to remember to carry but you know down to this when you don't have to carry it really works out it looks nice other patterns and I think I'm going to also include with the code you know we'll do a little spreadsheet thing to show this because if you just look at the even exponents or just the even numbers that show up here then you get um kind of an interesting um I'm going to do one more row here so 6 plus 1 is 7 + 15 is 21 so then this would be 35 and then uh 35 21 7 so you see no more evens here but these evens 3 2 1 make a nice triangle and then there's other triangles that show up in the evens and actually the pattern of that is the sarinsky triangle which you can generate in other ways but putting out Pascal's triangle and then um highlighting or circling even numbers gives you sarinsky's Triangle really cool um other things that will work out more with the code um this also carries over to um combinations and you know how many elements taken how many at a time and you know that would be uh you know how many elements that you start out with that be what row you're in and then how many at a time going across then the answer to that is how many different ways you can combine these things I think that's pretty cool too there's just so many different things that um beyond what I could do justice with on the board so we're going to look at it in different ways uh we're going I'm going to show you one way to generate this with code and we'll look at you know just briefly maybe we look at a spreadsheet just because that spaces out kind of nicely um to show some of those different patterns patters and we'll look at some other things too um to see all all these different different patterns and and that's kind of again you know some of the themes here in in precal we're figuring things out but we're also appreciating the re the beauty of all these interesting patterns that come up in math and in code so let's take a look at that let's take a look at how this plays out in code okay so here's one way to generate Pascal's triangle and I wanted to use combinations I I I think in code this this way works about as well as any other way and remember with combinations you know how many elements do you have then for Pascal triangle that would be what row and then how many at a time and then that would be across each row so we're just going to import math and N is going to end up being our our number of rows here so I I put that as a variable up top that way you can generate different uh size triangles just change end right up here and row is an empty array spaces as an empty array and I did this this and the next one space string really just because I wanted it to try to space it out to kind of look like a nice equilateral triangle you know isoceles at least um rather than just everything lined up okay so um a lot of times for Loops I just do a and b um and this is first because after seeing it I wanted to get a a better space triangle so just going through the range um each time I'm going to add to this string so space string is going to have an extra an extra two spaces here and I'm going to append that to this array space spaces there we go we'll come back to that in a second so then here's the triangle so again everything's in range n and as long as if B is greater than a continue and then that way that will just uh continue on so I just wanted it to be you know P for the variable so there this is what we have um math. factorial a um and so that's that's our looping variable so each one I'm going to take that number factorial divided by remember um the denominator is um factorial uh factorial btimes factorial a minus B so you know there we go so I I can reuse A and B Because all these are just within this Loop so remember you know it's you know n factorial Over N minus r but I didn't want to reuse n um so this is really just the combination formula that we already talked about and all that stored as an integer or casted as an integer and that's p and then that's going to be the row so I really am just using this to append for the row and then notice what I'm going to do is I'm going to print that particular element of this array spaces which is going to give me the right number of spaces that I want and in this case it's n minus a minus one and you'll see how that kind of evens it out so each of these spaces gets to be a part of this you know each this array and then I'm going to print out that one and then I'm going to print out just the row and so you see that's what we're doing here we're going to print out you know couple spaces and then the row and then I'm going to clear the row because then I'm going to use it again in the next iteration of this Loop so you know this is just generating Pascal triangle I have no need to store it for any reason so that's why I have spaces so it displays how I'd like it and then each row you know I'm going to go across and then um output it so what we have is Pascal's triangle you see it's spaced nicely along the left Edge and then just because the cuz we start getting um double digit numbers now the spacing on the right Edge you know gets a little bit skewed but I'm not really stressing about that and we have one there we go Pascal's triangle I could always make it you know um some other sort of list of you know for each but I just wanted to show to display this Pascal's triangle um there we go we're only storing each row long enough to print it out there we go so that's again one way to display this and we can see you know some other just interesting uh things in the loop that we can do and from here now we can use this to generate you know all kinds of things so we'll go on to the next and we'll we'll make we'll make use of this and look at some other cool patterns so we also have geometric prob ility if there's not something that I'm necessarily going to count but I can look at the area and so the geometric probability is the target area over the total area so same kind of thinking but having to do with area not things we can count so if I have like a bullseye you know that that Bullseye if I'm playing darts in the center as a tiny area compared to the whole dart board so very low probability of being able to just hit that now straight probability doesn't factor in skill maybe somebody's practicing and is and is a lot better um it's just probability so there there's a lot of sports you know darts baseball works a lot on probability but there's still skill involved which changes the probability or somebody's tendency to throw to one side or the other that could change the probability but just straight geometric probability has to do just with the area Target area out of the total area so therefore you know lower probability to hit the Bull's Eye a little bit better probability to hit let's say the Inner Circle there because it's a larger area out of the total so we see how we can calculate that um a lot of weather reports work on this geometric probability too besides the probability that a particular C Cloud will actually rain but if there's this rain cloud that we expecting to rain what's the area of the cloud compared to the area of the ground so you know in you know in your town what percentage or you know of that town is covered by this Dark Cloud that could rain and then that's your chance of rain for the day so you know you see we still work on geometric probability you know or if there's cloud cover but you know it's spotty you know how much what's the area of the cloud cover out of the total area of you know the town or wherever and we get our probabilities of rain so there we go we take a look at that but where this really leads us into is other shapes like the normal distribution now we'll get into the equation for that and everything but you know our normal curve so I can have you know scores here and I can have a frequency like How likely these are and we get this normal distribution looks like this but connecting with Statistics then I can calculate the area under this curve and a particular equation for generating this like normal curve would make the area one so then probability works out and if I want to look at like the most extreme case I might want to look at you know what's that 5% so you know of that area you know the area of this little part out of the whole area then you know maybe if the total area is one and so I I want you know uh something like uh 5% so that would be you know like five out of 100 or something you know if the area of this was 100 and then this this little area was five or if this area was one and this would be 05 and given that we can figure out regard all these other equations we can figure out you know what what line would this be would be the cut off here to Define that 5% so this really the geometric probability actually leads us into some other things we're going to do with stats and with Calculus because great I could calculate the area of that I have my circle formula but how do I calculate the area under this weird shape here or any other weird shape and that gets into calculus breaking it down into things like rectangles and how we can do that so it leads into from probability to you know weather prediction to statistics and calculus area under the curve th this you know we're just scratching the surface of uh geometric probability here but let's take a look at how we can do some of this stuff in code so let's talk about that probability distribution and what we're looking at here I I think with rolling two dice it's a nice discreet way to show this distribution here where all right what can I if I roll two dice what numbers can I roll I can't roll one that's not possible because one on one dice and then I can't just ignore the other one but I can roll two because I can have a one and then a one on the next die I can roll a three in two ways because because think about the sequence I can roll the first die can be a one and the next one can be a two or if I roll a two I still have hope because the next one can be a one and same with rolling a four we see the different ways and again think about a sequence here of I roll one and then I roll the other um one then a three three then a one or two and two and we see all the different ways we can generate how many different ways can roll a five how many different ways can I roll a six and we see that right here in the middle of our range is a seven and there's the most ways I can roll a seven compared to Rolling any other number and we see how for the higher numbers it actually goes down it's very it's nice and symmetrical like this there we go and to roll a 12 again only one way because I have to roll a six and then a six and that's it so you know that gives us the so when I look at the probability I can look at like how many ways can I do this well if I roll if I look at all these and if I added these up it's actually you know 36 different combinations here um and remember our counting principle one out of six one out of six so 36 possibilities and um so if I want to roll two it would be one out you know one out of 36 same thing with the 12 probability is one out of 36 but for rolling a seven 1 2 3 four five six different ways so it's 6 out of 36 or one out of six you know probably the mo most you know it's would be the most common number so a very good way to show this so let's look at a couple ways we can see this as a graph you know just looking at each of these numbers and then how many ways can we do this and um we're going to go back to the matplot library. pipot import as PLT and I'm going to show you a couple ways one way I can create an array of X values for each different role and then an array of Y values for how many different ways I can get that see and it all matches up here so I can do that an array of each and what I'm going to do is PLT Doh s2d 2D histogram and these are each arrays so I'm going to plot XY and then I'm going to define the bins so that makes it we we sometimes it comes you know automatic that you know how am I going to divide up these uh bars or these you know areas of my bar graph and a lot of times you can skip th this argument bins but I recommend not doing it because then it might group things not the way you want to group them so codewise you can skip it and python will put in some default but I recommend not doing that so I'm going to have 11 bins for my X and then six bins for the Y and we'll see how that blocks that out so when I run this I'm commented out the other way so this is how it shows I think it's kind of cool and we see um you it displays it nicely uh just the maximum of what's possible so that's one way another way um and I'm going to what I'm going to do is I'm going to comment this out and I'm going to uncomment this so um notice when you do like you know up here figure X for fig a for variables and I'm going to use a doist so this is another way to get a histogram so here I'm going to create this array of all these values here and notice in my array I'm G to put two and then three shows up twice four shows up three times and I'm going to write it like this in my array this is a good use because a lot of times when we get data it might be in that way we want to from that data that we get we already have something like this where things show up um a certain number of times and so I might have an array like this and therefore I'm going to graph that look that's just the first ARG arent is that array and then here I'm going to again Define the bins specifically as not how many but exactly where I want my cut off to be and you see then um my highest one's 12 so then 13 I want you know to include in that last bin and so when I run this instead we get this our classic histogram so then we see again each value in the number you know so we see this nice regular distribution where some values in the middle are the most common and then as we get further away from that middle it's less common that's the concept of the normal distribution so we we'll come back to this in a second as we talk about you know the area here um but that's the normal distribution and if we had things that were even more continuous instead of making it you know some sort of bar graph like this or histogram this actually this equation actually defines the top of it defines a line that would be the top of a normal distribution so all we're doing is we're just going to graph this here but this is the equation and even though we see e to a negative exponent which could just easily put that in the denominator and just one in the numerator this is actually a pretty common way to write it I guess just because the denominator is already crowded enough I don't know but but there we go so um given this then I'm going to Define um my minimum and maximum values here and like our other graphs number of points and then I'm going to create that as an array n p. Lin space graphing these I I am going to include you know the window size I'm going to plot an X and Y AIS to give you a reference and then here is that equation just converted to code so in the code I did put it all in the denominator so I in the code I did have one over and then I just did math. E that exponent math.sqrt of 2 pi and then I'm going to plot these um we'll come back to this other stuff later so when I run this this is the normal distribution or that you know bell curve that you may have heard of so this would be this is like an ideal if there was like continuous data of all these different things whatever I'm measuring and you know how far away from the mean which would be in the center you know that would be a nice regular distribution and you know that's what we have the the the the x value would be um standard deviations you know um we'll get into that you know as we talk more about stats but you know essentially how far away if the the mean or the average values you know zero then how far away from the average are we getting above and below and then the yv value would be frequency what's the Frequency that this shows up that this a score like this will show up and these medium or normal values have the highest frequency and then it Trails off as we go and we can uh do calculus to get the area under the curve but I want to show I want to show you just I'm going to uncomment these um if I could just get the area approximate and what I did is I drew some triangles here to show you um you notice it's approximate um we're skipping a little bit you know a little bit here not under in my triangle a little bit here where it's too low a little bit here too much and it would even out but the reason I picked this particular triangle is because I went from 2 1/2 to postive 2 1/2 so the area of the triangle 1/2 base time height so half the base is 2 and a half times the height 04 and that area would be one and so really we take it as the area under the normal distribution is one and then we look at like percentages you know what values here here give me a cut off point of you know 2% 5% you know 1% of that of that area you know that's what we're looking at and something over there where I'm only in the under the top you know 5% I'm going to say that you know often that's that's extreme enough that wow that's news so there we go so just approximating this and here with a histogram because it's already blocked blocky we can approximate this and remember that the width of every one of these bins is one so I can just make this a bunch of rectangles and calculate the area the width is one so then the height is one so you know the area is one and this next one the area is two next one the area is three then four then five then six you see and then we can get an area under here and so we can look at another way to look at probability would be you know this area um I would Ju Just as we were adding up all the how many ways this can happen the area under this should be 36 and then so just the area you know what's the probability of rolling a 12 that should be one out of 36 so we get it you know we can see the numerical probability with the formula and we can also see the geometric probability and that's kind of we want to see that connection and see that overlap you know so there we go um now just connecting this with Calculus which we're this is precalculus but just to give you an idea we could break down this into a lot of little rectangles with really really narrow uh sides and and the idea is just like pixels or you know resolution on the screen the more rectangles the better the resolution the better the approximate area and calculus finds a way to take that number of rectangles to Infinity but that's where we get here so you know this is kind of like the the sense of the normal distribution um you see we see it as actual countable probability um but then we also see you know the theory here's this General curve and ways we can look at this and that's you know all of this it's good uh precal and then it leads us into our understanding of Statistics so much of it relates to probability and Counting um how many ways can something happen and you know what I'm looking for you know how many correct out of that like what's the probability of that happening so here we go some some cool things and some interesting distributions you can Tinker with the math of Bing the short answer is it's always against you if we're not talking about skill or anything else factoring in just probability of something any anytime you're gambling you have the probability against you if you flip a coin you still have one out of two chance roulette you know your uh wheel goes around you know even if you say all right I'm going to to bet on you know black or red that's still not quite half because you still have two green zeros you know a lot of other things then get you know lower and lower odds like for example you know winning the lottery um a lot of games you have like you know pick three numbers Pick Four numbers so you know let's just talk about this if you pick uh numbers and each digit you know they come out of a bin uh 0o through n so there's 10 possibilities you have one out of 10 chance of picking that number but if you have another number you have to you're only win if you get this and that one so that's also one out of 10 and you multiply the probabilities because you're only correct if you get this one and that one and then another one so that would be you know one out of 10 and you see you know one out of 10 let's just say three three numbers that's a pretty common Lottery you know pick three numbers but remember then the chances of winning are one out of a thousand and the payoff the idea is that the payoff is going to be less than $1,000 you know way less so you can't just you know buy every combination because you'll lose money um yeah it's you know interesting so the uh and and if we get to like the larger lotteries it works on the same principle um but you might have you know pick um you know maybe five numbers but maybe there's 50 total and they come out of the same bin so picking the first number correct correctly it would be one out of 50 but then it's all out of the same B so one number was used so then the next one would be one out of 49 and again we're multiplying those you know one out of one out of 48 one out of 47 47 and then uh times one out of 46 and that would be if you if you're picking five numbers and so still it's one out of all these multiplied it gets to be a large number and again usually the payoff is so much is such that it's not worth buying one of every ticket um some people have actually tried this and you know they've gotten together with investors when the lottery jackpot gets to be a certain amount and then they try to buy one of every ticket I i' I heard one person talk about gambling is attacks on people that aren't good at math I think that's kind of funny but still nonetheless any of us here and there we might say oh let me take a chance on this why not Charity Auction so we know that if I lose the money went to a good cause um but you know that's that's really it you know the math of betting and what we're going to look at in the code is um you know so that you don't have to play with your own real money is different ways that we can generate you know um place a bet pick a card something like that and you know did you win or not and then add add or subtract from your um you know from your bank and simulate this and see that you know after only so many attempts you you end up with no money left so we'll look at some of those you know simulators that we'll create with the code so let's take a look at that so this is just a gambling simulator just to show you um you know some probabilities here um we're going import random because we're going to generate a random number so from that range um I'm going to give you a bank account and we'll look at that and what we're do is we're just going to prompt for some input um there we go sounds like a sentence so maybe I'll capitalize that guess the number between 1 and 11 store it and here I'm just going to print the number in the guess once and if it's correct it's going to print you win increase the bank and or you lose and decrease the bank there we go so in this case you know essentially you WI a dollar that uh guess number between one and 11 all right five oh but it was 10 so I lose and see um I didn't worry I didn't print out a bank account here just to show you you here's one way here we're going to expand on that um uh start out with this bank here um guess the number between 0 and 999 um because we can have all zeros and we can have 999 but we can't have a thousand that's four digits so here I have there's a reason why I have this Loop because right now we're just going to do it once but I want this to Loop that we're going to have this bank account and we're going to generate a random number from zero to a th000 because remember it won't pick a th it'll pick $9.99 as the highest and later on in the walk through uh for certification five uh I'll do this random number generating in a different way but here's one just generating this random number and we're going to print out the winning number your number and we're going to say in this case if you win it's going to print that out and give you $100 or if you lose then you lose the dollar you spent on the lottery ticket and after doing all that then we'll print out what's in your bank account so there we go um 789 how about that 594 you lose so then the bank account's $3.99 and the reason why I have this so we can comment these out because if I want to Loop through this a bunch of times I don't need hundreds of print statements so we can comment out these print statements here and let's just say we play this every day for a year now let's even make it more than a year because if the bank you start out with 400 supposing you play for every day for 400 Days there we go uh and you have this you know if you do win boom you get the $100 so that's going to be even more if you lose you only lose a dollar what you paid and there we go um uh 629 bank account zero so probabilities against you or here we go 2 83 bank account zero and this is what you know sometimes in doing this you want to be thankful that we're just dealing with variables instead of real numbers because that could have been oh I lost another 400 oh I lost another 400 um you know that's kind of what I want to show you with some of these gambling simulators and you know we'll get into looking at a couple others but the uh yeah the idea is that the the because the odds are always against you you know I mean who knows maybe it's nice every so often to plunk down a dollar you know little bit of anticipation wonder if I win but long term the B the it's it's always against you and the gambler's fallacy is that oh it's been against me so long it's got to turn my I'm due to win but there's really no such thing so there we go um a couple different ways to look at this you know just generating random numbers and comparing you know your guest to the other random numbers and we'll take a look at how uh how this plays out again in other situations at the end of uh the the um foundational math 5 uh certification project so here we go some good things to think about and some code to write for this this is going to be a walkth through of foundational math certif ification 5 but please make sure that you do this or give it your best attempt before looking at this um because this walkthrough is going to show you but the goal is that in going through everything in this course that you you're able to do this on on your own and it's a little bit of a review a little bit of a um a little bit of a test and in going through this you'll see that you know oh I've been able to do this this I've been able to do that and I've been able to build this and that and you know it completes you know a lot of your math journey here to this point that you know you'll have all these skills for the next thing I mean so many things you'll be able to do so um yep so here this will be the walk through but hopefully if you're watching this you've already given an attempt and maybe you just want to go over some things so here we go the walkthrough for foundational math certification 5 so here's the walkthrough of foundational math 5 and hope you already did this and you're just going through checking up but here we go and like before Step Zero we just need to acquire the testing library and you should also see how you can you know post your own library of various functions on GitHub or wherever and use this to access that library and then you have access to all these functions so there we go and in running this it will then make that connection import this and run that first function which will output one more thing and this is about how long it will take and then running that function will output this code test past and it is so remember this one we're focusing on a lot of sequences and series and those sorts of patterns so a sequence is any group of numbers in a certain order following a pattern so here's how we can do a loop to generate that sequence and I'm just going to say you know here um this one you don't have to change anything uh just giving you an example of the loop for a in range um from 1 to seven and remember python then one will be the first number but then six will be the last number it will always be less than that uh if I say one to seven it'll end at six so there we go and it's just going to print you know a squar comma and this is a nice thing to add you'll see how this um displays that and you see so it ends this and puts the next print statement on the same line so notice this print statement is not in the loop but putting this here then will put that next print statement on the same line sometimes that's nice and in doing this then we can take a look 1 149 16 so there we go what would be the next number well we see here how we generated this is a squar so the next thing would be 7^ squar 49 so that's just eight one sequence arithmetic sequence is anything where we have something that we're adding or subtracting to get the next number so the nth number because n starts at one when n is one the first number so the nth number is the first number plus the difference time n minus one and that's because n equals 1 for the first number so here we go so you're going to do this and this is a carryover from before but what we want is we want this to be um write a we want this to write a loop that generates sequence beginning with three and adding two each time so getting three adding two each time so if we start here with the range one so we have 3 um plus 2times nus1 so if that's the first thing than a minus one is is this so you see it will start with one and so for the first number it's just three because 1 Min one is zero and then the next one it'll go 3 + 2 three you know Etc and you can there you go and you can keep this at the end which we will do why not and there we go starting with three adding two each time there we go so getting an error like this this is supposed to be a little bit of a give and take so you know don't stress about it notice it's just an adjustment um this will work and I was just going through and thinking of a different way when I was creating this so notice the the the adjustment instead of range 1 to 7 we could just say range seven which understood starts at zero which then means I don't need to have that a minus one so that's just something you know we we could do it one way and that is perfectly correct but you know take the the feedback as give and take as here's another way to do this we could just say range seven starts at zero which means we don't have to do that part and and it's just interesting converting always you know code and array usually start at the first element is zero and some things in math the first element is one so there we go so just you know these are some of the things that hopefully I can point out in this walk through all right and in a geometric series you're multiplying or dividing something so the nth number is the first number times the ratio to the exponent n minus one because again you know we want to take it as the first number n equals 1 all right so now we're going to take this and we want to write a loop that uh generates starting at three and doubling every time and since we're doubling I didn't want to start at two that you know want to start at three and make that one one more step here so if we just take this so we see it's you know not a squ but it's we're starting at three times um this to the exponent um times two to the exponent um a minus one now I could like we were doing before two to the exponent a and go like this and it starts at zero so we see that's what we have to to the exponent a because when it's zero then that works out and then we see three three and then doubling every time there we go so yeah you could do it the other way also but then it will it will give you that suggestion hey do it this way just WR you know and and again we're often going for you know this if if one way is a little bit simpler a little more straightforward we'll do that so there we go and now sequences as python lists so lists um you really could use the word array interchangeably there might be some subtle differences but um we'll call it a list here and there we go so lists are indexed means that I have each element has a number to it and the first index is zero there we go again contrasting with the math sequences so we have this and we can have the entire list so notice what we have here if I just call this a list and I'm going to say that the that I have five in the list there we go and the comment here a list zero is five element zero so I can do this um since I have element zero then I definitely want that one in there because um I don't want to start with element zero and then I have the next number well let's um so we're going to multiply by two and then add three so if I take the next number then I really want um notice n starts at one so if I want a list element n minus1 then that gives me my previous number which in this case is five and then if I want to create a sequence where I multiply by two then add three so I take that previous number time 2 + three and there we go so we have that previous number * 2 + 3 and then I'm going to append that to the list so a list. append next number and then that that way that's so that's another way we can do this and we can just append it all to the list and then print the list at the very end so there we go and we have this so the next one recursive sequences so recursive is when you know the previous number and you need to know the previous number to generate the next number so it's dependent on that um whereas some of the original arithmetic and geometric sequences that we were looking at you can just jump to you have the formula you can jump to like the 50th number but here if I have let's say a Fibonacci sequence so I'll call this fib1 one so that way I'm creating this list that the first element is one and the next element is one because then I need to generate the previous two elements so you know there's your hints here so if I have the Fibonacci sequence I already have the first element in the second one so we're looking at python list so it's zero element zero and then element one so then I'm going to start my loop with element two and so what I'm going to have is um next equals FIB n minus1 plus FIB n minus 2 and we see this so I'm adding the two previous elements to get the next one and then I'm going to append that to the list and that way I needed to generate you know these first two elements so that I can reference them here and element zero element one so my in my loop I start with element two and then doing this all right up to 11 that works so then I can print the whole sequence and there we go 1 one 2 3 58 Etc pretty good and yeah that's it so the Fibonacci sequence it'd be tough to jump to you know the 100th element because I still need the two previous ones now you can graph these sequences remember are discreet so that means it's not continuous the the I want these nice integers these in between decimal values and such um are not really a part of that so here's one way to do this I can just plot them as points so a list and then b list and you know generate the axis here and so um I can plot so um I can plot n because I'm going through this Loop um for n in range the length of a list so you see I don't have to count them I can just say in range based on this length and I'm going to plot this point so the first element and then you know that's the x value and then what is the element in the list that's the Y value and I'm going to print that as a red dot there we go all right so um we can run this and a a lot of these I have you run it see what this looks like and we see that curve but I just have the dots it's not a continuous line so you see you know element two is here you know element four and there we go so when we change bead list so then make be list the new Fibonacci numbers so I can make it however many 2 3 5 8 13 and maybe we'll stop at 21 and so the length of that list I could have made it any length because I'm referencing that here and so that means I should change this because I'm referencing b list now and down here I'm referencing b list so now I want the range of b i Chang B list and I want the range of the length b list and I want to reference here I'm going to plot the elements in b list and just like Bist could just sit there before a list can just sit there that didn't take up too much and I just I don't have to reference it later so now we have this and just given this range because I stopped here you know there we go we have um these dots and that would be again graphing that sequence so that's the way a lot of sequence graphs look like you know a sequence of plotted points but not the lines connecting them all right so if I have a series now the difference with a sequence and a series is you add them up when you add up all the elements in a sequence then it becomes a series so here rather than generate um an array or a list then what I want to do is I have a sum variable start out at zero and then I'm going to just add each of these so there we go so if I have some element and so here I have you know my element is 2 * n + 4 now notice I I just wrote it like this but it could be 4 + 2 * n that works just as well I could have changed this to start at one and make the N minus one but that seems a little bit excessive so really all I'm going to do is add this code here sum equals sum plus element there we go go so each time it generates the next element in the sequence but since I'm adding it up now it becomes a series and so we're going to print out the sum there we go and we could have also put in here you know uh add it to a list and display that as well as the sum you know we can combine those so as you see we're just going to keep adding and the numbers going to keep getting bigger but we actually have two different types of uh series we have Divergent and convergent so Divergent the sum keeps getting larger it diverges um and usually you know we'll just say toward Infinity if we have enough elements but a convergent series actually approaches a definite number which is really interesting so that happens usually if the denominator keeps getting bigger than the numerator so there we go so now here we're just going to run this code just so you can see this um and we see in range 11 so my element now is 1 over 2 to the N so the numerator still keeps being one and the denominator is 2 to the end so 2 to the 0o 2 to the 1 2 the second you know all these smaller and smaller numbers that will converge now my range is just 11 and we see the sum here not bad now same thing I'm just going to change the loop to 42 you know as just some random number that I just thought of it did not take me a million years to think about this number and if we run this so we saw before it was 1.99 and then a couple things 1.999 a lot more nines and then we get to this so now we're going to change the range to 100 and see what that does and look at that two so it does converge I didn't even put anything here to round it just it got so close 1.999 so many nines and it converged and we we often say well okay as n approaches Infinity it should converge we didn't even get close we just even went up to 100 so that's what we see you know because the denominator is you know two to the N so two to the 100th power that's a t that's you know that's a huge number so one over that's a very tiny number it keeps going you're adding tinier and tinier numbers and so it converges so factorial another way for numbers to get bigger and bigger factorial of a number is the exclamation point and that means it's multiplying that time times everything less than that so 5 factorial is 5 * 4 * 3 * 2 * 1 and I know that times 1 won't change it but it completes the pattern so five factorial then multip all that gets you 120 and so by definition zero factorial is one because zero factorial these come up in situations where it's like combinations how many different ways can things happen so zero factorial if I have zero things how many ways can I arrange them well zero ways I just I could just not do anything and so that's that's or that's one thing that's one way zero fact of zero things the only thing I I can do one thing which is not arrange anything and so that you know it's kind of like the verbal explanation for zero factorial but anyway by definition 0 factorial equals 1 so in Python we're going to import math and then we see we have math factorial function all right so there we go we're going to put something else here in the print statement so we see if I have the number we can keep it as seven and then what I have it is printing that factorial notice no space equals well let's add this let's make it math. factorial number and I'm just going to reference that variable that way if I change it I don't have to change it multiple places and then I have this code here just so you see for n in range number minus one so I have number minus n times there we go and we will see that this prints out seven factorial equals and you know we saw that we calculated that number up here and it'll also just display seven * six times there we go um because that's what we're doing we're always doing the number minus n so we subtract more each time just a way to display it as well so Oiler number which we usually see abbreviated as e and we talked about this in other parts of the math course so um there we go so e and and again you know it wasn't oil name in the number after himself of his other people much later you know calling it e as a tribute so this is a convergent series it converges on this odd number here but still and it's the sum of one over n n factorial so like we were looking at the harmonic series before so you know I have my sum the range you know will start here at 11 and you see one over factorial of that and you see I just have range 11 so it starts at zero one over Zer factorial is one over one which is one so we're going to generate that you know one over each of these and pretty good 2.71828 and then 18 I mean it's actually even just going up to 11 it's pretty close to that number but then if we change it to 100 instead of 11 we get that a little bit close 2.7 1828 1828 and then yes that pattern does break down after a couple times so you know a much more uh close approximation and remember it's as n goes to Infinity we stopped at 100 if you really wanted to go up to a th it doesn't you know this is more than what you need to do for the this and you see very similar even just going from 100 to a, 1828 1828 and then 459 yep oh and see it'll give you the error and and each of these errors you know there's no point value you know going through this hopefully you you've been you know tinkering with with different things as you go through this each of these um notebooks so probability very often probability and we'll see that factorial and such will come back around again Pro probability likelihood of something happening so we're always counting the number number of correct outcomes out of so we divide that number out of the number of possible outcomes so there we go so randomly selecting one's birthday if I'm just going to randomly guess somebody's birthday I have one there's only one day out of 365 so we can just count and look at this probability we can just say correct divided by possible and for you know for a simple thing here just these couple lines of code therefore you can always go back and change these numbers to be you know anything and there we go so you know one out of 365 or you know 02 7 all right so then when we have probability of A and B it's only correct if both of those happen so what we end up doing is we multiply the probabilities so like probability of of flipping a coin and landing on heads we're going to look at four times in a row so the probability once is just 0.5 yep because it's either going to land heads or tails then the combined probability is um 0.5 now we can do this probability um four times because I'm multiplying that same thing to the fourth power there we go I mean you could have written probably times prob times prob you know we this is a much more efficient way to write it and there we go so that's the probability of getting heads four times in a row and now it's still just a probability I mean that that chance is not zero so it's still possible so this is where we get into like the gambler's fallacy so because it's such a low probability you know if you were betting somebody and you know I I bet that it's going to land on heads and it was tails and then you know three times in a row it was tails and then so you still the next time you're going to bet heads again saying you know such a low probability then you know I'm due to be correct at some point but it's still they're each independent so each one flip it's still one out of two chance in the whole situation it's this low probability but you know if it's a fair coin each instance is still one out of two chance so the gambler's fallacy looks at these lower probabilities a you know as you string together multiple events and says oh wow it's you know it's been head so Tails so many times I'll bet on heads it's due to come up but you know um things don't necessarily work that way it's still you could land on Tails again you know same thing with you know betting on you know slot machine or cards or dice you know there there there's no it's due to come up um it may be a lower chance but it's still there is a chance that this could happen so probability of A or B we add the probabilities so it's correct if either event happens and so you know that's like you know buying one lottery ticket and then oh if you buy two lottery tickets you doubled your prob your POS you doubled your chances I mean it's still tiny but it's doubled or pick a number from 1 to 10 if I pick one number but then if I pick another number also now I have two chances out of 10 you add the probabilities so there we go combin so here we're going to calculate the pick three lottery if I bought 7 tickets so the combined probability so it's one out of a th because it would be 1 out of 10 * 1 out of 10 Time 1 out of 10 picking three digits correctly but then the combined probability if I have seven tickets I'm just going to say prob time 7 because really you know I'm not going to write it out to add them up there we go oh or we could do that so all right probability plus Pro Plus prob one two three four five six 7 just to really accent the fact that it is adding it up seven times there we go okay so instead of one chance out of a thousand you have seven chances out of a thousand and combinations so how many different ways can we arrange things so the numerator side I often know how many correct things I want but how many Poss possible ways the denominator part of it we have these counting rules because there's a lot of different ways to look at this how can I figure out how many different possibilities and so combinations are unique groups of size r that you can make from a pool of N Things So when we write this notation here so NR so we can say N Things take an r at a time and then we put the Big C because it's combinations so there we go and then here's the formula n factorial Over N minus r factorial but then the denominator is even bigger than that because it's times R factorial so how many five person starting lineups Can it have there's 12 people on the team now this is I guess this would be like a an informal game because we're saying order does not matter so five person starting lineups we're not going to assign any particular position whatever sport this is we're just going to say yep groups of five how many different ways can we do this um so there we go n is 12 R is five 12 five at a time so we have this formula so I already imported math so we're going to do math. factorial n divided by and then we have I I'm going to put all this in parentheses to in the denominator math do math. factorial R times math. factorial n minus r and that should be correct with the parentheses so n factorial over R factorial oh and not plus but times math. factorial n minus r close those close the denominator parenthesis there we go and so we run this so 792 and this will be a a decimal you you um you probably could cast it as an integer but I didn't worry about doing that um doing this we we would expect an integer value but also um dividing python wants to default to uh just a float because you're dividing that you could you could end up with decimals but there we go how many possible starting lineups 792 so you know if we think about that then you know wow a coach uh has 12 people on the team you know how many different combinations uh you know who's starting today uh 792 options wow it's pretty overwhelming for it's a lot of things for a coach to think about now permutations you're counting how many possibilities but order does matter so you know like it has the word mutation in there changing things around but the order does matter so there we go so if you have eight different participation trophies and you want to pick three to arrange on the Shelf um it's not just that they're on the Shelf but what order are they in that matters um if it would be the uh um people winning you know in the Olympics gold silver and bronze so it's not just three people on the metal stand it order does matter gold silver and bronze or you know like this books on the Shelf trophies on the Shelf um you know the order does matter so it's perm permutations and the formula is similar notice the setup but with the big p for permutation and the formula here does not have that extra R in the denominator so there so we have you know um more possibilities because you know if I have you know gold silver and bronze let's say on the medal stand in the Olympics but if it was rearranged the same three people but they won different medals that's a different permutation so we have more options here so in this example example so eight different participation trophies and um three to arrange so eight things taken three at a time and so we're going to have this math. factorial n divided by math. factorial n minus r so there we go number of possible Arrangements 336 wow so you see you know the possibilities become a lot a lot more now Pascal's triangle one of the things um you know if I just print this out um we can see Pascal triangle here it links into you we can generate Pascal's triangle with permutate with with combinations so I want to include this here because it's an interesting um it's an interesting pattern here but if you just printed this out this is what it is um you see so beyond the triangle it's like understood the zeros for the nothingness and you're always adding the number and the and whatever is next to it to get the one below so then I have 1 + 1 is 2 so that's how we get this two because adding to 1 + 1 and then down here I have 1 + two and then that's where I get the three and then here same thing on that side get to this three and then 3 + three get to this six and now let's look at how to use combinations to create Pascal triangle so you might already have this code if you were working along with some of the other assignments and I'm just going to recap here we're going to import math and I'm going to create these variables here n for the number of rows so that way you can change that once up here and you know have all different rows an array for what's going on in each row and another array for spaces because that'll just I think make it look more like a nice triangle otherwise everything just gets lined up on the left side and I don't know I think it loses some of the effect there and with that I'm going to have the space string that I'm going to incorporate here so this is what we're doing here with the spaces um so each time I'm going to add a or append another space to the space string variable so each of these is going to have you know so many spaces and we'll see how that plays out later then I'm going to go through and for everything in range I'm going to um so notice if uh if we go through here just for it still to be a triangle um you know we'll continue so this is the combination formula which might seem familiar by now and there we go so you know we're going through a and b so um you know a things taking B at a time and so therefore you know if B is greater than a that just can't happen and we go through and after all this factorial we just want to make sure we do cast it as an integer so there we go and then I'm going to append that to the row so what we're doing is this for each row and then I'm going to print those spaces and then the row and then I'm going to clear the row notice all that's still in this Loop here so it just goes through this and each time then we're going to create the row print it out but then clear it for the next time so notice how the spaces um our space array just gets larger and larger you know each element has more spaces so we are working backwards there than putting the spaces in so the first row has a lot of spaces and less and less as we go down so when we do this all right let's see eight rows and we run this and we will see eight rows appear and you see the spaces give it that nice triangle angle over here it falls apart a little bit because then we start getting into the double digits but these are minor things relating to spacing um you know if you wanted to change something but there we go so we have Pascal's triangle to eight rows and using the combinations which I think in terms of generating it I think that's a pretty good reliable um manageable way to do that and then from there we can use these numbers for anything we want all right pretty cool so this certification project now and I put this in here for you about creating a deck of cards and there's other ways that other people have done this um I just decided to do it this way to really write out um what cards but a lot of times um and we we'll look at this in some of these examples here but there's a lot of other ways people have like um just the one number or the letter J q k a and um just the letter for hearts clubs Diamond spad H C DS so I decided to write it all out and this is just one way to do this so here we go so I have an array of all the cards of all the suits my R which is going to be the complete deck right now it's empty and uh temp card for now so um notice then I'm just building this deck for a and range cards and B and range suits I'm going to go through and this temporary variable string variable is going to be you know that of that so it's going to be um we have a two of Hearts a two of clubs a two of diamonds a two of spades and then we'll go to a three of Hearts three of clubs Etc and each time that's just going to be the temporary string and then we're going to append that so that the deck has all the cards and we can print this out so when I do this to print this out there we go and as I mentioned a lot of times people might do this just um the number and then one letter that works out nicely um we could do that just as well so here's what I did as some examples of some things you can do and you might do some of these you might take it further but this cell I run this cell and creates the deck that's there and that's going to continue um remember the runtime in collab um is about a half hour um or um about half hour of inactivity maybe 20 minutes um or even if you keep going you know that might go 11 or 12 hours so that code and those variables still exist for a little while so I can do other things in these other cells referencing them and that's going to work so uh in this other cell I just have one thing let's just draw one random card now here's what I have um just as reference print the length of the of the deck here and I'm going to draw a random card and what I have is you know from zero to the length of that deck of cards and remember that's a random integer so pick is going to be a number it's going to be a random integer and then pick one is going to be that particular card so then we'll just print that out you know your card is pick one this if you know um have a game I I don't want to use that card again it's already been picked so I'm going to pop that out of and again I I needed that variable as the index I'm going to pop that out of the deck and then just for reference print the length of the deck again so you see 52 cards here's your card and now there's 51 now this goes um along with the next code block here um I decided to have one cell of just your points and computer points so I can run this and again now those variables exist because now I can uh keep this now the the deck is still there so um right now we have 51 cards and the Ace of clubs that highest card is now not in the deck for right now for our examples we can leave it like that but you could always go back and run that original cell and then generate the deck again so that is possible all right so this this challenge is you know create some card games I just decided to pick a few simple ones but you know there's definitely uh more complicated ones and I I really wanted to be more about the code and not so much about all the different rules for card games here so War you know each put down a card and who has the higher card so um what I have is so pick a so that's going to be the random integer and then the computer's card is going to be from the same deck that index um and we're going to print what the computer's card is and pop that off the array we'll do the same thing for your card pick B random integer um and then your card is a card from the deck with that index here we go print it pop it off the array so now when we compare and you see what I did is just um the uh if your card so each of these remember your card zero um your card is a uh um is a string so index zero is the first character in that string so there you go if it's one then your card is a 10 because that's the only way you know that's the only way one would just show up as the first as the first character J so I'm giving values to each of these so um you know if the first index in that string is one then the value of your card is 10 if it's j that must be Jack the value is 11 Q it's 12 K it's 13 a would be 14 and then everything else it's whatever that first index is and then cast as an integer so you know a two of clubs is going to be a two of of value a three of Hearts is going to be a three there we go so again these are some of the things you know um once you work that out once how to compare you can uh use that so I do this all for your card and then all the same things for the computer card so now each of these have a value so so we have your number and computer number for what cards you have and there we go we just now we just go through our comparison if your number is greater than computer you win and then this is where I have the point values increasing your points you see so I have this once that it initializes and then if you win you get a point if if you lose computer gets a point or it's a tie and it'll print that out so you can run this and you'll see the computer got a seven of clubs and you got a six of diamonds so you lose and the computer gets a point and the idea with initializing the at a separate so you see um the deck was created in a separate code block initializing the points in a separate code block so we can just keep running this for every hand and you see so computer got a jack you got a two computer one again another point and you can run this again look at this you won this one and we can keep going you can keep uh running this there we go and what I have here here is if it ever gets to if the length of the deck is zero then game over all right so there we go and that's just one example of a game um now here's another one um there you go five cards stud so like now this one um I just wanted to display five cards yours in the computer and then um and then take it from there um but there are again um more intricate ways to compare poker hands um you know that gets pretty involved so um you know you can even do things you know drawing cards and switching them out but I just wanted to show here just you know how it prints the computer's cards and how we can do the same thing you know I have a pick um and I'm going to create this random uh you know from the deck now this is also continuing on we're using that same deck so for our purposes this is going to be fine but to really play this I would go back again to that original and then um recreate the deck which ENT you know there we go so I'm picking a random card um and then popping that off the deck so I'm going to do this five times because you know each person gets five so the computer gets five cards printing them out and then you get your five cards and I just had to print who wins so it'll just you know here are the cards and then you can say you know who wins uh so just some interesting things we can do with displaying um now the initial thing said uh you know card games but you know any other gambling here I have um you know initializing that the bank uh this one I put it in a loop so initializing your bank account um is in the same code so then you know your bank account and it's going to print out your bank account equals all right and what you're going to do is you're going to pick a threedigit number and you can change this range here so I kept it as range one um for this first um in instance here and so picking three numbers I could have decided to pick a random integer from uh 0 to 999 but instead I decided to split it up here just because that's the way a lot of lotteries seem to do it so just to show you so you're going to you know get these random integer from 0 to 9 but you're going to get that for one for two for three and then since I want it to be a threedigit number I'm going to say you know 1 * 100 plus 2 * 10 + 3 and and then that'll give it a threedigit number there you go and then there's your winning um these are all integers so then the multiplication and addition works and it's an integer that I can compare so there we go and it's going to print the winning numbers and then you already have your pick up here so if your pick equals that great you win and let's just say I just picked you know maybe you win $500 let's say there we go or if you lose you lose a dollar because that's probably about the cost of the the ticket so I have these commented out um and after all that then it's going to print you know what's in your bank account there we go pick a threedigit number all right uh 456 there we go winning numbers oh so the winning number was four but it didn't print out the zeros it would have been 004 that's interesting so yeah maybe I'll think about changing that that display so what I have here is then yeah there you go so you played it once and know you lost lost money but I have this that you can change the range like let's say 365 let's say you play every day for a year and I'll keep all of this but then I will comment out all of these because I don't need 365 extra lines for whether you win or lose so you see now we can just everything you pick your one number let's say you play the same number every day and you can see that you know if you happen to win you're going to get $500 if you lose you're going to lose a dollar and if we run that so um here we go I'll pick you know 777 that's seems to be oh and look at that so we did win so you know you come out ahead if I I can run this again uh pick a number there we go um 789 and lost every day so $400 minus 365 you know we lost every day or there we go um 23 4 and what's interesting is you can do this um you you can simulate all these different uh gambling situations um you could make it you know the pick four pick six you could make it um you know you could change this to simulate you know the various you know other you know uh Lotto uh Power Ball you whatever you can change this to simulate various uh lottery winnings and you know see how lucky you get um so yeah just interesting one more thing um and I have this just um to show you just one other person online that um now all this is connected to project Oiler pretty cool um and this person put together I'm just going to um show you this link here and you see it's like you know this and now what I just did is I printed out some of these so I I'll show you this so that it's a little bit bigger and easier to see um but each one you know that whole page has you know like 500 lines of poker hands um let's let's take a look at the code for a second here so here if you know if you want to print all that out it's actually fewer lines than I have here uh import the URL Library um I split it up as a separate variable Target URL and then put it in quotes here so there we go um and I'm going to store this as my variable I'll just call data URL li. request.url open there we go and this is one of the ways to just open this and copy things from that page rather than you know store it as a variable here because you could I mean in this case I am I'm storing this data as as a variable but you could also store the whole page or even more but I'm using this variable here um opening that URL and I just included this you can do the whole thing but I just put a limit here uh um and so for line and data so there we go so I could just go through this um I call the variable line because when you do when you print this out what it's going to print out is one line and that's what that's what this is so the one line um when you print this out this doesn't show up um so you get you're going to get that b and the single quote at the beginning you're going to get the back sln and the single quote at the end but then um this is the line that we have and so notice you know each of these represents a card for two different hands of five cards each so the first hand is eight of clubs then um of Spades is that a t for 10 yep probably k for King of Clubs nine of Hearts there we go four of Spades and one two three four five and then five cards for the other hand so now again just print printing it out you could have just gone through there's your simple Loop and and done Loop through it for long line in data print line but what I did is um I wanted to store it as a temporary string and that's going to keep overwriting it so I I this is just for an example here so it's going to keep overwriting it and then later on I just use the last one that came up um but what I did for the limit in the count here so each time it counts it and then if count is greater than limit then it's going to break so you know that that's one way to limit hey I you know this is a lot of lines I just want to print out 10 to see what's going on um and then print out that temp string you know just as an example so this is going to end up being the last one that I that I Loop through but index to because I want zero one and then two is going to tell me that so there we go because it really brought it from here that last line that I took in index too so these are some of the things that you can do in here um you know take each of these and encode it as something give it a value um that might be something that you could do um a lot a lot of possibilities I just wanted to show you you know here's one example of a place that has a bunch of these resources um you know like 500 poker hands here's just one way to read that and display it and grab information from there and you know that's going to continue on the goal here is to make some sort of game more than one if you'd like some sort of gambling uh you know game and part of that is you know looking at the probability and calculating that testing it keeping score and if you do this and you run it lot um you know you can iterate through these then you might realize um you know how much how much money you are losing and you know the benefit of it being just variables instead of your actual bank account so you know seeing the probability and also seeing you know the math of gambling we want to put our our time and our effort and our money toward things that give us a good return like analyzing the data you know betting on it probably not a good investment analyzing the data good investment of your time so that's that's what you want to be able to do so if you've been building your uh notebook along the way this is a chance to check and see how uh It lines up with some of the things we've been doing you know maybe you forgot to put something in or you want to include something more and I'm going to add a few things and just talk about how I would organize the not notebook here all of these uh periodically if it's something major I I'll make this a heading like this so that it shows up in the table of contents and then we can see all the different major things that you'd want in the in your table of contents I have here the first few ways like some major ways to get data from you know a CSV online um or if you want to up load a CSV and so over here you know you click on these and you get to you know some code samples and what I do is I put like sample URLs in there just as um you know a placeholder you maybe can like test it and then you can you know comment out different things you know maybe have a few of the things that you want uh and you know comment this out or add add a different one you know upload because maybe you have you've downloaded it you have it on your computer and you know this creates a dialogue box um or just from a different web page so you know all these uh you know notice we're using pandas you know maybe there's a table on a web page you like so I like to put all these you know all the things we're working with we need to get the data somewhere um read data from other file types um and notice some of these you know if you get the table somewhere and then you have the URL or maybe you store it as a table a good way to put this in is have all this as one step so then you can continue the code you know now that you have it as a table you can do some things with the table here so I have this set up these are some good things like I have as like a document this you might or a notebook that you might want to include as yours and have you know all these references you could always copy the code into something else or you could just work on it from here you know maybe you have you know this code and you you know keep this modify one thing or easily add you know some more code or text in here as needed so you know we're trying to kind of build this like uh nice like notebook uh precal calculator for yourself and you know just here's some of the things you can do um you know another example so again reading data from different places um I noticed all of these I have you know the heading but then over here you know within that heading some of these it doesn't deserve a heading on the table of contents but you know if you get to this you know as example data on a table from a web page and then within here you have other examples you know Tex text but it doesn't need to be a heading and again you can organize the this your own way but this is just my suggestion um trying some different things so you know we put code in there that works and then you can have it to use um you know authenticating the connection if you want it from a spreadsheet you know maybe you have a spreadsheet in your Google Drive and notice this is the uh snippet that works and when you do this on your notebook it'll you can authorize this and connect it to your Google Drive so again do this once and then once you have that you can then reference that worksheet um and get the data from there other file types um especially if it's in the URL notice here this was just called fil name. xlsx and yeah an Excel file that somebody might have put up and within pandas we have the function read Excel so you know they have corresponding functions for other file types too so we have all these um drawing lines so just you know kind of going through what we've we've been doing with the course and you know you might have seen you know you remember the different code that I showed you but here's how it put together like certain parts of that some of these were nice examples as we went through it but here's just a nice uh notebook of stuff that works that you could use you know different ways you might want to just draw lines here um and then you know each of these with its own separate thing and that might be nice and you know show the graph or more elaborate you can have an array of points and that way again here here's the code that you have and you could you know maybe like this comment it out instead of deleting it and you can put another array in if you have um you know some different points that you have you want to draw something um and the triangle so notice the triangle uh gets to the you know it's another heading on the table of contents so you can jump right to it and we have everything here in the Triangle um drawing triangles you know and it'll display it like this and we we just might use that as a reference for all the python trig functions so here we have everything you know if we do it in degrees and then we convert it from radians here complimentary angles all the different things that we were doing and this way you can you know get the S cosine and tangent of various angles you can even keep you know this as an example so you see what you're expecting it to output and then as you change different things here then you can you know update that values I I kept this in here you know uh going through the range of the sign functions just in case you know you might be interested so some of these you know you may use more often than others but you'll have all these here um converting to degrees so we know we have ways to convert to degrees to radians but uh there we go um angles and sides conventional labels because it just gives you that you know again the triangle capital A for angle a lower case a for the side across from it all these things that you can include and you'll have all this I'm incl you know there's a link to this exact uh notebook so you you'll have all this code available to you but you know just going through you know using sign to find side measures using cosine because these are the things as your as your calculator hey you can just you know go in and type these angles um and one of the sides and then remember we went through this that you know the one that you don't know make it zero and it'll calculate it for you side measures inverse to find angle measures this one you know happen to leave blank for the A and C that you can put in there unit circle just different things you might want to use or display or use this code to plot a circle for different things there we go the showing the trig triangles animated unit circle if you like that you can run this code Pythagorean theorem and then just showing the different uh um X and Y values again some of these you may use more often than others but I wanted to include some of these uh just in case there you go converting radians to degrees and of course you know uh python has that built in you can just you know convert from radians to degrees remember we were doing this earlier that you have um you see math. radians so you take that angle and convert it to radians and the same corresponding math. degrees if you have an angle that already is in radians so we have that but then it's good to include this just to see you know that is our ratio so you know here's what we can do um degrees to radians graphing trig functions and again you have other graphing utilities but again might be useful to be able to do this so we include this in here graphing the circle in different ways graphing sign and all these so now as you see in this all this is in the table of contents so you know some of these you might have you if you go to the table contents you may or may not you know need to jump to these but we have all these so you know what you want to jump to graphing and maybe if you're looking to calculate something you might skip down to all these different graphs um sine wave transformations you know and then giving an interaction an interactive interactive sine waves so these are you know now you have you know interacting sine waves you know you could jump right to this and adjust some things and you know see some interactions here Tides as this one example tides and then you know you can make you know you could use use this um we'll look at some other uh uses of data in in in a little bit law of signs law of cosiness area solving any triangle some of these you might jump to more often triangle from points and there we go so you know these are some of the things you might jump down to hey I have three points can I draw a triangle all the different Matrix operations so again you see certain ones all this under this heading and then you have text here for each individual one so you can jump to that and then just you know look at which ones you want to use um and then you know here we go again from the unit from the table of contents an a quadratic equation from three points so you'll have this full example solving a system of equations inverse Matrix and you know you can jump down to this different ways of encoding and decoding messages the nonmatrix method we have this and you know this is something you could use and then if you wanted to you could you know change I think think this one had just a very simple Cipher and you could change this one so we have this um and then the Matrix method of encoding even with a little bit of direction here every two characters becomes a 1x two Matrix multiplied by a 2X two to encode it or decode it so you know there we go all the different steps encoding and decoding and again you can copy these change you know whatever Matrix you use and you know you have your useful in coding and decoding code complex numbers of all the things we did with complex numbers you know I is aare of ne1 I I wanted to include just these two things um calculating and displaying because again you might you know just it might be a nice refresher if you don't use this and want to use this you know how to create a complex number how to uh break out the real and the imaginary parts and display those um another way if you just want the complex part then just still make or you just want the imaginary part you can still make the you know complex and just the real part part is zero so we have these just some things graphing on real and imaginary so you know how you can import these labels um you know this one I kept it there but commented out any title creating a complex number and then again parsing out the real for x and the complex for and the imaginary for y and plotting it so some useful things maybe you don't come across complex they're plotting it often but maybe there's some fractal you want to do so this could be the basis of what you work with here and you would put your fractal uh um here in the points you'd somewhere in here you would change that and I included just the full mandle br um that uh that does work so just in case you know um and what I did is I I I used uh chat GPT to um get this and then I tinkered with it a little bit so then here's some just you know alternate uh values that might be interesting so then we're going to get into some other things like projectile motion um so in addition to all these things that we currently have the next few videos we'll look at projectile motion some things related to that some other more useful um trig functions um logistic growth all kinds of things few physics applications and we'll look at how you can just add these to your to your code here you know you know might as well you know make it one unified notebook as a reference so in in all the things that we have so far you can add some other things and some things that I show you and may you know whatever formulas you come across and hey I might use this formula pretty often um there you go write some code and and add it to this and you know you're you're developing your notebook calculator so hopefully this gives you a good uh sense of you know what it might look like so far and the next few parts we're just going to add to it so one of the other useful formulas and this collection of a few formulas here relates to projectile motion now we have projectile motion formulas the quadratics that if I'm launching something straight up in the air we can calculate you know height and everything like that but this depends on the angle so now we introduced Tri Tri to this this depends on the angle that we launch something and we see here from the formula you know v^2 uh times the S of 2 Theta so velocity that's the initial velocity of whatever we're launching and remember this goes for any projectile you know a ball that you kick uh from the ground or something you throw or toss in any way uh something flying something you know shot out of a cannon or whatever you know we have an initial velocity and then we have an initial angle so now if we notice and and certainly then divided by G for Gravity so if we notice then that if Theta you know it's a sign of 2 Theta so if Theta is 45° or Pi 4 radians then 2 Theta would make it 90° and then the sign of 90 is 1 so that's the optimal angle we can we can see this that you know you're not going to get higher than this you know a sign value of one so great now we know the optimal angle but then any other angle we would just put it in this formula s of 2 thet times the initial velocity squared and I I I like the default going to you know uh standard units so velocity would be in me/ second and here's all of this running you know running through the code initial velocity in me/ second initial angle and we can put this in radians so that we don't have to convert in the formula but you could always have it in degrees and throw another line of code here to convert to radians um and then the gravity in meters per second squared so we'll keep that as a as a constant here if for whatever reason you wanted to change it to feet per second it for velocity then Gra it you'd have to change according to that you know make it 32 but nonetheless here we have then the range we have V ^ 2 time the S of 2 Theta and notice a for the angle all that divided by gravity and then we're going to print three decimal places is fine so then you know I I like doing the formula here and then the print statement next you know round it to three decimal places so that gives the range of a projectile and then supposing the ground is sloping at an incline so we'll call the angle the incline B and this is the formula notice slightly more complicated and we can get into this s of 2 Theta minus B minus a s of B and then cosine the denominator now becomes gravity times the cosine squ of B all of this right and we have you know very similar we can have this initial velocity and I just picked values to plug in here but you could always change these and I this one as just an example I made um the slope just you know instead of Pi ided 4 you know this ultimate I did pi divided 4.1 make it a slightly lower angle so you know we're not running into the slope there and here's the formula notice with the extra parenthesis and there we go so we have you know all these that we can adjust and again useful formulas um you can figure out the range of of different things so this one's going increas you know at a slope that's an angle now on a slope declining and so declining I just called it d angle D from the horizontal slightly different formula and we have this um you know notice some similarities but different Formula 2 * initial velocity squar time the sin of th times the cosine of theta minus D and there we go so that's D is the angle of the angle of depression going down from the horizontal and we can plug in here again I just picked to an angle and here's the formula for the range you know all this just written in Python and I might want to find out the maximum height of a projectile because that's interesting maybe it's something I need to get over or maybe it's you know um I don't know a roof that I need to stay under so the idea is you can use these um and notice this one sin squar of theta in the numerator and then 2G in the denominator just slight variations so for each of these you know formulas you might happen to use you know if you happen to um you know work on uh you know I don't know designing something or planning out something then you know some formulas you might find useful and then you can have these built in you know change a few numbers and calculate so you know there you go who knows maybe if you have some sort of model rocket you can uh you can predict where you know where do I want this to land and we get um you know what initial velocity what angle and we can adjust that so you know these These are the three you know related to projectile motion and you can include these then in your overall notebook so here's one with a complicated formula but a brief explanation if you want to calculate the number of hours of daylight on any given day of the year so here's one um we'll take the latitude in degrees because normally north latitude south latitude um will reference them that way this one um not only is it less accurate Beyond 65 degrees but actually the formula doesn't really account for that so keep it you know 65° or less um it you you'll see at that point the hours and then you know it gets more extreme around the polls um and so capital L is the degrees latitude capital J day of the year and seever I have the link here of where I've got this formula it was an ask Dr math article from years ago so just here's the several steps calculating the you know taking into account the angle of the Sun the angle of north latitude and you go down here and then you're going to print the daylight hours rounding it to uh one decimal place is probably fine so there we go we get um you know just in case you want to plan out oh how many days of sunlight or how many hours of sunlight do I get on a particular day and again one of the other good ones you can add to to your ongoing notebook of formulas here's another good useful formula logistic growth and kind of connects with exponential growth where I have some sort of limit and that's what C in this numerator is the carrying capacity or the maximum y value so you could have a population that grows and there's only really a certain amount that the environment can sustain or you know any anything that that grows but does have a limit and then at some point it will stop growing as quickly it doesn't completely Flatline but there is a definite horizontal ASM toote there and it's zero so we're usually talking about things we can count so there is a horizontal ASM toote at y equals z we're not going to be talking about negative y values here there is a horizontal ASM toote at yals C which is that carrying capacity and what we have is in this formula a in this denominator so if that a value that a value will always be positive and we see that we're doing C divided by something so um we we can see that as this denominator gets really big then that's when we get closer to y equal 0 but this denominator could get small and then that's where we get to that carrying capacity but we see it will level off this negative in the exponent is a part of the formula and then B if B is positive then we're talking about growth and if B is negative then we're talking about Decay so you could these are the asmd does but you could have something that decays you start out closer to yal C and then the population dips down to you know closer to zero so this is the formula logistic logistic growth you know growth within limit and here we have let you know we'll import some things cuz we're going to graph this that would be the interesting thing to see what this graph looks like so you know we'll put in I just put in some nice except for this one integers um you know some C value Cal 10 AAL 2 whatever it is it's always positive and growth I wanted to make it a growth function so I just made it3 a lot of times this is the rate but that's a good way to understand but there are some situations where the rate's probably not the best definition but there we go so this would be something that you know we do have growth but a limit um now giving a function like this that you can graph for all sorts of different logistic growth formulas I mean you could have logistic growth like some small numbers here I had like 10 a is two you could have a and b be even tiny decimals you could have C be a huge number so we want we want to capture that Trend so what I did here is in our graph to find minimum and maximum X values so there is an inflection point in the middle as we as this changes so what we're going to do is you know you probably won't need to get anywhere near a thousand but I'm going to run through this Loop and then I'm going to plug this in you know once we have our values here um the X Val I just called it X test so this is the function then that y value all right if B is greater than zero we're talking about growth so then if Y is greater than C over2 because the inflection point will be right in the middle so if it's a growth formula and then we've gone be the yv value has grown beyond that inflection point we're about halfway so then what I did is uh I did multip * five five times that x value that actually seemed to be a pretty good um estimate you know get that round it convert it to an integer that's my X maximum and then my X minimum um they're not always centered right around zero but I just did 0 minus x max again really good it seems to apply to a lot of different things you know if you if you're working on something you can always um tweak this a little bit but it's a really good starting point so so it'll just go through this and as soon as we get beyond that inflection point you know now I have X minimum maximum and I'll break the other one is if it's actually a Decay formula so if B is less than zero and Y is less than that inflection point so if that's the case then we'll go through the same thing you know I want my X maximum my X minimum and then break so again that that should work for most situations you encounter and then if you look at your graph you're like hey I want to tweak it a little bit then you can modify some things um you could even you know I just commented these out but you could even um you don't even have to uh count this out if you want to overwrite that you just you know put here x minimum and X maximum and whatever you calculate up here it'll overwrite it as your Dimensions so y minimum remember ASM toote y equal 0 so just put y = 2 um just so that we can see the axis it's not right at the edge y maximum yep again that ASM toe plus two points uh like we've done before in graphs um the difference between the minimum and maximum times 10 and then that should give us enough points to plot a nice smooth curve you know import a numpy so Lin space and our graph um you know made it blue I like blue so here we are now this y value so you know X just X that's my x value going looping through that array and my yv value here all right and if we plot this then we see for those points we get that Trend and then there's 10 we can see that you know we see enough of this graph that we see it level off at zero we see it level off at 10 and and we see about where that inflection point is you know that's what we want to look at this is the logistic growth here and then if we wanted to if we wanted to make B something negative and I'll just do everything and just change it negative and if we run that then we will see now slight of hand I actually just change this and for making it negative it will switch it and you see that's that's when B is negative so it starts at a higher number and then gets lower but because the um X Min and x max ended up being really close it was giving an error so I added this other bit that if AB the absolute value and I rather than just making it equal I just wanted If I subtract x maxus x Min giving me my range if if that's too small then the absolute value of that would be I just said less than 20 because then if it is less than 20 then I'll just make X Min 10 and X maximum 10 so that's you know I like that as a nice standard window anyway so we're going to calculate it but if it ends up being Too Close you know you're not going to see the effect anyway so then we would overwrite that and then we would get this and these are ones where you can see hey maybe you wanted you know you want to see more of this that you have um you know you want to see you know instead of stopping at 10 I want to see it get close to the xaxis and it wasn't perfectly centered around 0 so you know I want to get it closer to that y equal 10 you could always do this knowing that we're going to end up invoking this one then you could change it here and make it you know 20 and you could make that positive 20 might not even have to make it as as big and we can run this and you see you just make that a little bit more and you can really see it get to that horizontal ASM toote and then it'll even off from there and then if we made the window even bigger you would see the extent of this so you see this one starting from high and then getting low that's when B is negative so you know it just goes back to this negative B value so there we go logistic growth you know we can we can use this for planning a lot of things lot of population and carrying capacity and you know sometimes even Investments um you know you can use this sometimes um things like uh you know um sharing information things go things start out really quickly um that would be definitely a a growth model positive B value but things could start out really quickly and then by the time everybody knows this information you know it can only spread so much or you know uh business saturation you know PE companies open so many businesses but at some point they're everywhere and then they can't open as many as quickly so you know there we go let's talk about limits and we got a glimpse of this from before we saw the logistic uh functions approach an ASM toote and so we could say the limit of that function the Y value that it can't get to but it gets really close to the limit of that function would be this carrying capacity um and a lot of times you yeah you can just put something in a graph and see the limit um you know even if it can't get exactly to a value you know what does it get close to so here's an example of a really interesting limit connecting uh preal with with Calculus so if we graph these are going to set the dimensions and then this is the graph we're going to plot here so s of x / X now we know that there's at least one value there X can't be zero so what happen happens when X is zero but if we take a look at this graph we can still plot it it will still plot that and go right around that notion that you know it can't exist here and you might not even see you know it doesn't even display an error you you know most graphs you won't even see uh the difference because it's really microscopic but exactly at x equals zero this doesn't work but we see that the value of that looks like when X is zero Y is one so you know the value of this when you know when we get to uh you know around zero is One S of 0 over Z but what if I just actually try that value so we see we see the value down here if I have everything else that I just ran that's still in the short term memory of the Google collab for a few minutes so what if I add this you know x value of zero and then I just print the value of that sine of x / X and I'm going to use this x value you see error and it'll say zero division error now certainly if I you know put any other value in there it'll give me the value that's fine but I can't do it at zero yep gives me the error so I'm not here's how I'm going to address it I'm going to assign this difference here and this difference can be any number but let's make it really tiny like Point one's fine I can make it 01 so now I know that X can't be zero and maybe I'll still put this x value down here just to not have to scroll up again so that x value is zero I'm going to make this difference here so a little bit to the right because if I if I'm looking at the graph if I add something to this x value it's a little bit to the right of the other point so X Value Plus the difference or a little bit to the left x value minus the difference now let's print these two values here and we see they actually match up really well down to you know many decimal places I could even make this difference you know well if they match up here they're going to match up there but the interesting thing with this is I can make that difference a tiny tiny number and look at that it it's so close that it rounds it that they're both one this tiny tiny difference is so close that that's why it didn't give an error on the graph that we we could you know we just call it one which it really was one notice when I got to you know even 0.01 it's still very close to 1. n999 eight really close but you know I I would certainly round that to one but you know it's far enough that it'll give me all those decimal places and you see if I make it even closer then we get this this limit and this is the notion of the limit here that you know this works because if I do this from the left and the right then they are different values now if I just went back and you know never mind sign um what if I just said you know like 1 /x now that one you see this middle line that's red that's a weird glitch here that it should just display that as the the axis um but you see x c be zero here but then it approaches from the right and the Y value gets really big it approaches from the left the Y Val gets really small and neither neither the twen shall meet so I can say that there's no limit like that just won't work I can't you know even if I try to make it an approximate value it's not going to do us any good so we see some interesting things like that where we have you know a limit that you know this limit does not exist because it's different from the right and the left whereas that you know s of X um cosine ironically also works like that um does not match up very nicely you see I right at zero this vertical line is actually not a not a value this it does not exist here so yeah cosine and a lot of them you know from the right from the left does not you know does not match up but our sign value matches up very nicely as one of many functions that if I have something that it can't exist exactly at this point but anything even really close works and if I go a little bit to the right a little bit to the left I get the same values then we can say this limit exists and in fact that limit is this number so I can't plug in zero and get one but the limit as X approaches Z is one and this you know you could graph a lot of things just straight up put it into a graph and see what it looks like but then you also have this notion here of testing the right and left values you know whatever function you have and then you can just test the right and the left values you know adjust the difference and then see what see what it does so this is really there's so many things in calculus that once you throw in you know the actual graphing utility or writing code um a lot of it just falls into place because you're just going to you know run it and see what it looks like so um you don't have to memorize all these limits but you know the more you work with them the more you'll get familiar with them and this is going to start connecting us with some of the things that we'll do in calculus so here's something that you might not have thought about doing on a calculator or a notebook but factoring trig functions and and as an example you know we probably you're probably familiar with it uh sin squar plus cosine squals one so this function here and this is just what we need to import import from Senpai import everything and then I'm going to just Define these two symbols you could Define more you could make them A and B whatever um and I keep this just to make sure that it prints out nicely and all of these you don't have to use a print statement it's just the last line of code is what it'll output so I commented out all these this is what it's going to display so if you do something like this trig simp sin squ plus cosine squar then it outputs one and all these things it can you know the fact that it can Factor this you know a lot of times you know I tell my students you know oh at this point the calculator won't help you oh but your Google collab notebook will help you um so you know we can just do this trick simp I wanted to show a few of these you see it'll do that Pythagorean identity and then it will also do this one 1 plus coent squared and if we run that see it's very interesting it does it it sometimes will output secant uh cosecant square but for the most part it wants to do everything in terms of s and cosine so 1/ sin squ is what it'll do and you know you you might hopefully remember that that's cant squared um you know the same thing here if we take a look now also um even if I comment even if I leave this one it it might run this but then this next line overwrites it so we won't see so you see if I do like one over secant you know not squared if I just do one over secant and I run that you know it did that it will give me cosine so you know it likes to put everything back into s and cosine but if I do one over cosine it won't give me seant it'll give me an error oh I also because I put no um that will definitely get you an error but you see one over cosine it just returns one over cosine it won't put it back to seant so I'm going to in in this notebook that um that I will will share with you I'm going to leave these here as you know some some notes and reminders and notice this it's that same function every time trig simp um because it really wants to simplify so as we look at this you know it it wants to simplify and in Python perspective that goes back to S and cosine so you see in terms of simplifying um I won't even uncomment this but this one sine of x + y that's simple enough so no this won't work it won't if you do that it'll just return s of X+ y but sin of X+ y equals this sin of x * cosine of x plus cosine time of x * s of Y so if you run this it will give you the S of X Plus y so you see it goes in that direction of simplifying because that's what the function is trig simp it will simplify it so if you put in the simplified version it won't make it more complicated um because you know certainly you know any simplified version you put there's a few ways to make it more complicated and it won't do any of them so you know you put this s of x sign y there we go um so if you want to do it the other way you know you're kind of out of luck there and in the same way put that comment back in in the same way it will you know s over cosine and when I run this it will simplify that that's pretty straightforward s cosine tangent but if I ran tangent it won't break it down into s and cosine and you might know from factoring trig functions maybe I have tangent I want to break it down to sign and cosine it won't do that now this would be like in conjunction with other things you're doing or maybe to check things you're doing so you know the fact that some of these you know can I take tangent right in s and cosine that might be you know a good way you know you'll know how to do that and you know you can use uh some of your brain not right code for all of it but there you go it'll it'll simplify that um the weird thing is the half angle formulas it won't do it neither so now this is the simplified version so I I would expect that it wouldn't complicate it but this should simplify to tangent of X over2 and it won't do that so the half angle formulas is for some reason and I'll keep that in there to remind you for some reason that just not buil it who knows maybe another version but yes the double angle formula it will and once again sine of 2x uh remember the one thing you know it'll it'll display it nicely here um you know the tangent of X or or this but when you put the input you have to remember these multiplication symbols you know um you know for Python and you have to remember you know the X you know for the exponent so um s of two you know s of 2x no but then you see if we go to this one that does simplified to the S of 2x so it will do that and you see simpai it will output that nicely sine of 2x but anytime here you have to put the multiplication symbols in still need that python syntax so we have this notice the other double angle formula uh I didn't do all of them here as examples but it will do all of the double angle formulas and you see this um will simplify the tangent of 2x nice um all these we'll just run through a couple more here trig simp so um and notice this one I I also included just a reminder so this sin of X Plus the sign of Y it won't do but it will do this one and simplify it down to that and notice it just put 1.0 times this um you know that's fine but yeah it will simplify this more complicated part and break it down into the S of X Plus s of Y so pretty cool but it won't it it won't take that and make it more complicated and even just you know one more um you know one more uh product just one more formula here shift enter and look at that you good times good times so you could um you know keep all these you could you know put some other ones in there but uh one of the things you know if if you're working on this in conjunction with um you know other other problems in the book to simplify you can use this to check or you could try it um you know put everything into one and see if it works you know hey I need to simplify everything on this side of the of the equal sign and do it trig simp give it a try see see if it works so there we go some good trig Factor ing for you so here's a bonus because remember we're building this you know Resource Center here Google collab one of the other things you can do and we'll do some math to this too is find all the elements of the periodic table so you know we import these modules for some things we're going to do and remember you can just you know run this then you don't have to do the import every time um we can re read this data that we we use and you know uh this guy Adam me he posted this so he's the one that created this you'll see the credits at the end you know run that and now that we have this hey we can display the first five rows um or the first or the first 20 and we see you know we can display the heading we can um not put a number in here remember and then we just get the first five put any number you know especially data sets you're not really familiar with how big it is you want to just get a sense of this um and then so this is all the headings but let's say we want just the names so we can do data. name and I don't have to comment this out it'll just do you know the second line will overwrite the first one and look at this it listed all the names so nice ordered by atomic number this is great and supposing I just wanted one then I could do a number in here so if I could uh if I could do there we go and we can see we can pick this so other things we can do we can look at uh the math and calculate you know pH of things there we go um so again all these different things we're referencing that data set that we just stored as data there we go and we can just calculate some things the mass notice negative log of the hydrogen concentration is the pH so here we go and we can just list the names of all the columns this way um you see um I can list you know like I did before name and list everything in that column or this one lists all the column headings maybe I want that there we go the shape rows and columns there we go this can give you some information that you need and more things we can do maybe we can you know do some math to the shape here we can graph some things and you know I commented this out but we have you know you can plot um if you know that this is going to be a number and we know that this is going to be a number there we go we can plot those and to arrays of these numbers and we see because what do we have going across the row the uh radius increases but then you're at the beginning of the next row so we have all these some things we can graph and you could always you know change this I think this is funny something versus something else but you know you could always change this um uh there we go number uh vers is radius and then when we run this there we go pretty cool so any uh data set in chemistry there's going to be plenty of math we can do so we can sort values you see we can sort the table in different ways and all of these you you know you could keep this I'll make a copy of this um you know and you see the way that this is sorted here boom and then the table of contents really just has you know three parts you could always like name the different parts to help you jump to the ones you need but there we go um the headings here and notice how they had the headings underneath if I double click you see two hashtags and then makes it a subheading so this will help you get uh more organized with some of the things you might be creating yeah you can keep it as one notebook maybe you just you know go go to it and you know enter values overwrite it and take it from there or you could always you know make some sort of customized analysis and do a save as you know save a copy and then do your customized analysis on your copy you know there we go uh um and as you see he has some nice uh directions here on some of the other things that you can do all right and here's where the data came from here's where the um you know formatting ETL exchange transfer load all very important otherwise it might be a mess there we go located it and um there we go and here's the guy that uh did this we have Adam L there we go so yeah given given props this is good there we go coding in k12.org so pretty cool so some other um some other things that you can do with all all of your your collab uh skills and really all this especially when we see these things that we're doing you know um we've been doing a lot in math with numpy so really that's like the winning combo pandas and numpy um get it in some sort of you know version that I can do math with and then use arrays and do the math so you see um so we could uh you know we could Loop through um so just like we have name um and notice the indexes here so we could look at some things we can do with this mathematically um now we could even really you know try to uh do some sort of like weird sinusoidal function for for this because it's up and down I think that's too choppy and we see it as too choppy so that wouldn't that wouldn't help sometimes it's good if there's something I can predict if it's you know not getting a better answer than what I already have then it's no good all right so we could have like melting point and boiling point um you know this could be interesting um you know maybe if I have this data dot melting point and notice how easy this is if there's no space because that would mess it up so you know encourage encourage your friends to you know make table headings with no spaces that way you don't have to mess with quotes and such and so we see all these melting points here um and what we can do is uh we could you know add up those melting points um and again you know summation we could do this as a list or we could do it as a sum um and we could you know graph these melting points um so the same way that we did you know some of these other graphs here so you see if we have atomic number number and radius you know we could do this and so if we really look back at um um atomic number we could even just overwrite this for now and what I like to do is comment something out and then and then you use that later so we could there we go atomic number and melting point there we go and there we go yeah very interesting how it goes you know up and down also yeah really interesting but the important thing is looking at this as some sort of graph that we can get these arrays of numbers and then plot these points so just one more bonus this is really you know all these different things we're learning um for preal with python we want to be able to also apply it to all these different things and this is really what I want you to see that then you know with that little bit connecting with what we were doing at the beginning of the course you know can I get find data in different places can I get it in a table um you know can I read it you know probably using pandas and then now all the things we've been doing in the course what can I do to um do some math to all this and then look look for interesting patterns do some calculations so hopefully this uh all brings it together and you enjoy the course I hope you enjoyed pre calculus with python hopefully now you really feel comfortable with your skills you know using trigonometry finding the sides and angles of any triangle even with little bits of information um working with tra graphs repeating patterns getting data analyzing repeating patterns um appreciating the beauty of e to the I pi equals ne1 uh working with sequences and series and all these things then now you can take this and run with it and um you know apply these skills to all kinds of new data that you come across so hopefully you got a lot of this and this is leading up to calculus where things are going to start to move and we're going to look at other sorts of interesting Trends so happy coding
