With timestamps:

00:00 - this beginner's course will help you
00:02 - learn the fundamentals of programming
00:04 - with
00:05 - visualbasic.net visual basic is an
00:08 - object-oriented programming language
00:10 - developed by microsoft it's often used
00:13 - to make desktop apps for windows but you
00:15 - can use the programming language for a
00:18 - wide variety of applications and not
00:20 - just on windows
00:22 - kevin drum teaches this course
00:24 - kevin is the head of computer science at
00:26 - a school in the uk kevin will teach you
00:28 - everything from getting visual studio
00:30 - set up for programming to understanding
00:33 - the basic constructs of high-level
00:36 - programming languages
00:37 - this is an excellent course for anyone
00:40 - who wants to learn visual basic leave a
00:42 - comment with the most interesting thing
00:44 - you learned in this course
00:46 - in this series of videos i'm going to
00:48 - introduce you to programming with visual
00:50 - basic.net inside visual studio
00:54 - so let's begin by launching visual
00:56 - studio and taking a look at some of the
00:58 - features
01:03 - exactly what you see here will depend on
01:06 - which version of visual studio you're
01:07 - using you can see that i'm using visual
01:09 - studio 2019
01:12 - but essentially the features will be the
01:14 - same you can see i have a list of my
01:16 - most recently used projects on the left
01:18 - hand side
01:19 - on the right i'm going to choose the
01:21 - option to create a new project
01:27 - and again what you see next will depend
01:29 - on which version of visual studio you're
01:30 - using it will also depend on which
01:33 - programming languages you installed
01:37 - you can see that i've installed a number
01:39 - of different programming languages which
01:41 - tells you visual studio itself is not a
01:43 - programming language it's an environment
01:46 - in which you can use a programming
01:47 - language i'm going to use visual basic
01:52 - on the right hand side i can see a
01:54 - number of different project templates
01:56 - which i can choose from
02:00 - and i'm going to create a windows forms
02:03 - app so with the correct option chosen
02:05 - click next
02:10 - you're now invited to give the project a
02:12 - name
02:14 - it's offering me the name windows app2
02:17 - this is because it's the second
02:19 - application which i've created
02:21 - it's not a very meaningful name so i
02:23 - strongly recommend that you change that
02:26 - perhaps
02:28 - perhaps not i think that's been done
02:29 - before
02:32 - that'll do for now you also need to be
02:34 - mindful of where the project will be
02:36 - saved the location of your project you
02:38 - can see the location of mine will be d
02:40 - visual studio 2019 projects but you can
02:44 - change this in fact i'll show you later
02:46 - that once you're in visual studio you
02:48 - can change the default location
02:52 - this is particularly important if you're
02:54 - working in a school or a college or an
02:56 - organization
02:58 - it may be that you only have permission
03:00 - to save visual studio projects in
03:02 - particular locations
03:04 - notice there's a browse button here if
03:06 - you do want to change the location
03:09 - my solution has the same name as the
03:12 - project i'll say a little bit about the
03:14 - difference between a solution and a
03:16 - project in a moment
03:17 - and i'm going to say that i want to
03:19 - place the solution and the project in
03:21 - the same directory by ticking this box
03:25 - since this is a brand new project i'm
03:27 - not going to worry too much about which
03:30 - version of the net framework i'm using
03:32 - more about that later as well so let's
03:34 - hit create
03:41 - and here is visual studio
03:44 - i can see a little message on the bottom
03:46 - right there telling me that there's a
03:48 - new version of visual studio which can
03:50 - be downloaded i'll maybe do that a
03:52 - little bit later i'll just ignore it for
03:54 - now
03:55 - now there are lots of options here which
03:57 - i'll be talking about as we go along but
04:00 - suffice to say for now we have a menu of
04:02 - options across the top and each of these
04:05 - has a number of sub options which in
04:07 - turn might have a number of sub options
04:10 - there's a toolbar
04:12 - i can add extra toolbars which you'll
04:14 - see later
04:15 - but the most useful one is here to start
04:17 - with
04:19 - on the right hand side i can see my
04:22 - solution explorer
04:24 - a solution is a collection of files that
04:26 - make up my application
04:28 - and we'll take a closer look at these
04:30 - files later
04:31 - i have a properties window which will
04:34 - become important when i start building
04:36 - my user interface
04:38 - and on the left hand side there's a
04:40 - toolbox if i just click on this
04:43 - it will move into view
04:46 - if i click away from it it disappears i
04:48 - actually like the toolbox in place all
04:50 - the time so i'm going to click on this
04:52 - little drawing pin
04:54 - to keep it there
04:57 - and i can resize it if i need to
05:01 - in the middle i've got my form this is
05:04 - where i'm going to start building my
05:05 - user interface
05:07 - so let's write some code
05:10 - i'm going to start by dropping a button
05:13 - onto the form
05:15 - so from my toolbox i click on button
05:20 - draw the button onto the form
05:23 - because the button is selected i can see
05:25 - properties of the button in the
05:27 - properties window on the right hand side
05:30 - i can see for example we have the text
05:33 - property of the button which is
05:35 - currently button one i'm going to change
05:37 - that
05:40 - to press here and notice how it's
05:42 - changed the appearance of the button on
05:44 - the form
05:46 - the other thing i want to change is the
05:48 - name of the button
05:51 - every object that you place on a form
05:53 - will have a name property now it's
05:55 - currently button one because it's the
05:57 - first button which i placed on the form
05:59 - and i could leave it as button one but i
06:02 - want to start using a naming convention
06:06 - btn in lowercase because it's a button
06:11 - and then something meaningful which
06:13 - tells me what the button does for
06:14 - example start you could call the button
06:17 - pretty much anything you like as long as
06:19 - the name doesn't start with a number and
06:21 - as long as there are no spaces or
06:23 - special characters like question marks
06:25 - or exclamation marks in there
06:28 - this naming convention makes it clear
06:30 - what the button does and it also makes
06:32 - it clear that it's a button and that
06:34 - will become important later on when i
06:36 - start writing code
06:38 - there are other properties which i can
06:40 - change as well for example the
06:42 - background color
06:45 - and i have a color palette here which i
06:47 - can use
06:49 - we'll stick with this for now but you'll
06:52 - learn about other properties as and when
06:54 - you need them
06:55 - what i want to do now is write some code
06:58 - that will run when the user of my
07:00 - application clicks on the button
07:02 - to write some code for the button
07:05 - i can double click it
07:09 - the way to think of this is that the
07:11 - code is behind the form
07:15 - my form is still there you can see
07:17 - there's a tab here
07:19 - that's the design view of my form and
07:21 - this is the visual basic view of my form
07:26 - notice that the toolbox no longer has
07:28 - anything on it because it's
07:29 - inappropriate to use it while i'm coding
07:33 - i have line numbers down the left hand
07:35 - side
07:36 - to be honest i don't like these and i'll
07:38 - turn them off in a moment
07:41 - and i can see some code already there
07:44 - and i have to be very careful not to
07:46 - break it
07:48 - for example i can see public class form
07:51 - 1 at the top
07:53 - and end class at the bottom
07:56 - i'm not going to change this these need
07:58 - to be in place in order for the form to
08:00 - work
08:03 - later when you find out more about
08:05 - object oriented programming these two
08:07 - lines will make more sense
08:10 - i can also see the stub of a procedure
08:13 - which will run when the button is
08:15 - clicked
08:16 - private sub button start click notice
08:20 - that's the name that i gave to my button
08:24 - and notice that it's going to handle the
08:26 - click of the button
08:28 - to be more precise it will handle the
08:31 - click event of the button object
08:34 - there's also some stuff going on in
08:36 - brackets here
08:38 - these are called parameters and you'll
08:40 - find out more about parameters later
08:43 - suffice to say leave this exactly as it
08:46 - is for now
08:47 - we're going to write code between sub
08:51 - and end sub
08:53 - so i'm just going to press the enter key
08:54 - a few times and give myself some more
08:56 - room
08:58 - i can also give myself some more room
09:00 - above the procedure
09:01 - and below the procedure
09:05 - sub by the way stands for sub procedure
09:09 - so let's write our first program
09:12 - i'm going to use the message box command
09:18 - notice i'm typing in lowercase
09:20 - and as i type
09:22 - a list of options has appeared
09:25 - visual studio is looking at the letters
09:27 - i'm typing and offering me a command to
09:29 - choose from so i can see msg box here
09:33 - i can ignore it and carry on typing or i
09:36 - can actually select it from the list
09:37 - i'll show you how we can do this more
09:39 - quickly in a moment
09:41 - i'll just press the space bar
09:43 - and i'm going to open a bracket
09:46 - and again there's some more information
09:48 - appearing on the screen it's quite
09:50 - daunting the first time you see this but
09:52 - as you get used to it you'll find it's
09:54 - incredibly useful
09:55 - again i'm just going to ignore it
09:58 - notice how visual studios automatically
10:00 - put the closing bracket on there for me
10:03 - i'm going to open a double quote
10:06 - and again visual studio has
10:08 - automatically put the closing double
10:11 - quote on there
10:12 - and finally i'll type the text of my
10:14 - message
10:16 - hello world
10:20 - all kinds of things have happened here
10:23 - for example
10:24 - notice that msg box has automatically
10:27 - recapitalized that tells me that i typed
10:31 - it correctly i'm getting visual feedback
10:34 - notice also the color coding the literal
10:37 - string which i'm using in my text
10:39 - message is colored differently from the
10:42 - command itself
10:44 - again i'm getting visual feedback on how
10:46 - to use this this is why it's called
10:48 - visual studio
10:50 - let's put another message in
10:54 - now i've just typed the first few
10:56 - letters this time and i'm going to press
10:58 - the tab key on my keyboard
11:00 - to select the rest of it
11:02 - i've saved myself some typing
11:04 - when you get used to it you can write
11:06 - code very very quickly
11:10 - hello world how are you
11:12 - and one more
11:16 - spelling mistake there i'm just going to
11:18 - hold down my control key and tap the
11:20 - left arrow key which will jump me one
11:23 - word at a time through that text
11:27 - and then i can correct my spelling
11:29 - to be honest it doesn't matter what i
11:31 - put inside these double quotes it won't
11:33 - be a problem if on the other hand i
11:36 - mistyped the command
11:39 - i see a red wiggly line underneath it
11:42 - telling me that i've made an error this
11:44 - is what we call a syntax error i'm
11:46 - breaking the rules of the programming
11:48 - language if i move my mouse over it i
11:51 - can see some kind of error message there
11:53 - msg boxes not declared
11:57 - visual studio thinks i'm trying to use
11:59 - something called a variable and i
12:01 - haven't announced that i want to use it
12:03 - more about variables later on
12:06 - let's just get rid of this line
12:07 - altogether
12:10 - okay so there's my program i'll just
12:12 - close up a little bit of the white space
12:14 - i don't need it and i'm going to run the
12:16 - code
12:17 - there's a start button at the top
12:23 - and my form is now on the screen
12:26 - and to test it i'll simply click on the
12:28 - button
12:31 - there's my first message
12:33 - there's my second message
12:36 - and there's my third message
12:39 - and the program has stopped running
12:42 - my procedure may have stopped running
12:45 - but the application itself is still
12:47 - running the form is still on the screen
12:50 - and i can stop this running by pressing
12:52 - the red square up here or i can simply
12:55 - close the form with the red cross here
13:00 - and everything is stopped
13:02 - so there we have it our first program
13:05 - which is just a sequence of messages
13:08 - but it's a program
13:12 - there's one more thing i want to do now
13:13 - and that is to save my work
13:16 - remember a visual studio application can
13:19 - consist of several files so rather than
13:21 - just clicking this little button here
13:23 - which will save the form i'm going to
13:26 - click this button which will save all of
13:28 - the files in my application
13:32 - i can now close down visual studio and
13:35 - return to my application tomorrow
13:49 - in this video i just want to show you
13:51 - how we can customize the integrated
13:53 - development environment the ide that is
13:56 - visual studio so let's start it up again
14:02 - and i'm going to open up the project
14:04 - that i was working on last time
14:07 - notice that it's in the recent files
14:09 - list so i could just click on it here
14:12 - alternatively i can click on open a
14:14 - project or solution let's do it this way
14:17 - for now so we can see which file we need
14:18 - to open up
14:20 - here's my d drive
14:23 - this is where i'm storing my projects
14:27 - and here's the one i was working on last
14:29 - time notice it's a folder
14:32 - inside that folder
14:34 - there's a solution file sln
14:37 - that's the file which ties together all
14:40 - of the other files that make up my
14:42 - application that's the file which i need
14:44 - to open
14:49 - and here's the application i was working
14:51 - on last time
14:53 - here's my form
14:56 - and here's the code behind it
14:59 - a little word of warning first of all
15:02 - sometimes you might accidentally double
15:04 - click on the background of the form
15:06 - itself watch what happens when i do this
15:10 - i've got another procedure stub here
15:12 - called form1 load
15:14 - any code which i write in here will
15:17 - automatically run when i run up the
15:19 - application which will cause the form to
15:21 - load
15:23 - but i don't need this so i'm going to
15:24 - get rid of it i'm simply going to delete
15:26 - this procedure stub
15:29 - another word of warning you might
15:31 - accidentally or even deliberately click
15:34 - on this where it says one reference
15:36 - let's take a look
15:39 - i've clicked on that something has
15:40 - appeared and i'm going to click on this
15:42 - as well
15:45 - i have another tab across the top and
15:47 - what i can see here looks very
15:50 - complicated indeed
15:52 - this is code which runs when you run the
15:55 - form but you don't really need to see it
15:58 - if you're a beginner
16:00 - in fact it's quite daunting when you
16:02 - look at it
16:03 - suffice to say for now it's actually
16:06 - initializing the form it's setting up
16:08 - the form and it's placing the button on
16:10 - there and it's changing various
16:12 - properties of the button
16:14 - i strongly recommend you leave this
16:16 - alone until you have a better
16:18 - understanding of what it does i'm just
16:20 - going to close down this tab
16:23 - and i'm back to something more familiar
16:27 - anyway what i want to talk about now is
16:29 - how we can customize this programming
16:32 - environment
16:34 - you were given some options when you ran
16:36 - it up for the first time
16:38 - but you can change those options inside
16:41 - tools
16:42 - options
16:45 - notice i'm using a color theme blue
16:49 - but you can change it to dark if you
16:50 - wish some people much prefer this
16:56 - to be honest i don't i prefer black on
16:59 - white not white on black
17:02 - it really is a matter of preference i'm
17:04 - going to switch it back to the way it
17:06 - was
17:11 - i can also have finer control over the
17:14 - keyword colors and over the text colors
17:17 - and any other colours that you see on
17:19 - here for that matter
17:24 - we can do this by selecting fonts and
17:27 - colours
17:32 - you can see there's a lot of options
17:35 - here
17:37 - keyword the default color is blue
17:43 - and i can switch that to magenta
17:47 - you do need to be a little bit careful
17:49 - though because some colors have special
17:52 - meanings
17:53 - and it can start looking very messy as
17:55 - well
17:56 - if needs be you can change things back
18:01 - notice there's an option here to use
18:03 - defaults
18:06 - some people like to increase the font
18:07 - size as well
18:09 - it's entirely up to you
18:11 - something else i want to change to give
18:13 - myself some more room on the screen is
18:15 - to switch off these line numbers
18:18 - i can do that by going to
18:21 - text editor
18:22 - all languages
18:24 - and then here line numbers
18:27 - notice i can have different
18:28 - configurations depending on the
18:30 - programming language i'm using
18:32 - and there's one more thing i want to
18:34 - change and that's some of the default
18:35 - file locations
18:40 - i can do that underneath projects and
18:44 - solutions
18:46 - locations
18:49 - you can see i've already set my
18:51 - project's location to my d drive
18:57 - needless to say there are lots more
19:00 - options which you can set in here and
19:02 - i'll be honest i don't know what half of
19:04 - them are
19:05 - but when i need them i'll find them
19:08 - click ok for your changes to take effect
19:19 - in this video about visual basic.net i
19:22 - want to say more about output
19:25 - and i'm going to introduce you to
19:26 - variables
19:28 - i'll start by creating a new project
19:32 - as before it'll be a windows forms
19:35 - application in visual basic
19:40 - give the project a meaningful name
19:45 - and think about where it's going to be
19:47 - saved
19:48 - you can change this if necessary
19:53 - let's start with a button on the form
19:58 - and i'm going to rename the button get
20:00 - in the habit of renaming things that you
20:02 - place on the form as you go along
20:06 - btn that's my convention
20:09 - and then go this is called camel
20:11 - notation because of the capital g it
20:13 - looks like a camel with a hump on its
20:15 - back
20:16 - i'm also going to change the text
20:18 - property of the button
20:22 - and let's write some code that will run
20:25 - when the user clicks on the button
20:28 - to get to the code behind the form i
20:30 - double-click the button
20:34 - let me just remind you you mustn't
20:36 - change or delete this
20:39 - if you do you'll start seeing errors on
20:41 - the screen watch
20:46 - straight away i've got a syntax error up
20:48 - here
20:49 - class statement must end with matching
20:51 - end class i'll just use the undo button
20:53 - to put it back again
20:55 - and i'm going to give myself some white
20:56 - space just give myself a bit more room
20:58 - on the screen here
21:02 - we've already seen that we can display a
21:04 - message on the screen using the message
21:06 - box command like this
21:12 - to test it i simply press the start
21:14 - button that will run the form up
21:17 - and then i can run my code by clicking
21:19 - on the button itself
21:25 - now there are three
21:27 - fundamental constructs when it comes to
21:30 - programming that i'd like to mention now
21:33 - the first of these is sequence
21:36 - the second is selection which you'll see
21:39 - in a later video and the third is
21:41 - iteration which you'll also see in a
21:43 - later video for now let's just say a
21:46 - little bit about sequence
21:48 - sequence simply means that each
21:51 - statement in a program or a block of
21:53 - code will run one after another in
21:57 - sequence
21:58 - so for example i could display each of
22:00 - these words separately
22:17 - run the program
22:20 - press the button
22:21 - and one message after another
22:25 - and i'll stop my application with this
22:27 - red square
22:32 - if i want to display these words in
22:34 - reverse order i can simply change the
22:37 - order of the commands
22:39 - i'm just dragging and dropping
22:46 - and tidy up some of the white space
22:50 - you can have as much or as little white
22:52 - space as you like whatever makes it easy
22:54 - for you to read the program
22:56 - let's give this a try
23:07 - before i continue and talk about
23:09 - variables i just want to show you
23:11 - another command i can use to display a
23:13 - message on the screen
23:17 - messagebox
23:20 - dot show
23:25 - let's take a look
23:31 - this is another message it does exactly
23:33 - the same thing
23:35 - to be honest this is a bit of an old
23:37 - style command which has existed from
23:40 - very early versions of visual basic
23:44 - this is a more modern way of doing
23:46 - things
23:46 - this is an
23:48 - object-oriented approach
23:50 - and it'll make more sense why you might
23:52 - do it this way later when you find out
23:54 - more about object oriented programming
23:57 - for now you can either use msgbox or
24:01 - messagebox.show i'm going to continue
24:03 - with msg box
24:07 - so now let's talk about
24:08 - variables
24:10 - i'll start by placing another button on
24:13 - the form because i want to write a
24:15 - separate procedure
24:18 - switch to the form
24:20 - and drop another button on there
24:28 - notice i'm getting some guidelines as i
24:30 - drag the button around and resize it
24:35 - this helps me to create a nice layout
24:37 - for my form
24:38 - okay let's get in the good habits of
24:41 - naming objects as we go along so i'm
24:43 - going to call this btn variables
24:49 - and i'll change the text property as
24:51 - well
24:55 - to write the code as before double click
24:59 - and you can see i now have a new
25:01 - procedure stub
25:02 - i can start writing my code here
25:06 - let's give myself a little bit more
25:07 - white space below and a little bit less
25:09 - at the top here
25:12 - so what is a variable
25:14 - well a variable is actually a location
25:18 - in the computer's memory where a program
25:20 - can temporarily store data while it's
25:23 - running
25:24 - and while that sounds a little bit
25:26 - complicated they're actually very easy
25:28 - to set up and use
25:30 - let's say for example i want to create a
25:33 - variable to store somebody's first name
25:37 - the first thing i need to do is declare
25:39 - it i need to announce that i want to use
25:42 - a new variable and i do this using the
25:44 - dim statement like this
25:50 - now there are a number of things going
25:52 - on in this command
25:54 - first of all the word dim
25:56 - is short for dimension because i'm
25:59 - actually setting aside a certain amount
26:02 - of memory i'm specifying the size or the
26:04 - dimension of the variable
26:07 - the amount of memory being set aside
26:10 - depends on this which is the data type
26:12 - of the variable
26:14 - when it comes to string variables one
26:17 - byte of memory will be needed for each
26:19 - character in the string
26:22 - but to be honest i don't need to worry
26:24 - too much about that
26:25 - visual basic will look after the memory
26:28 - for me or to be more precise the runtime
26:31 - engine that visual basic depends on will
26:34 - take care of the memory for me
26:38 - the other thing i'm doing is i'm giving
26:39 - my variable a name and again notice that
26:42 - i'm using camel notation and i've
26:44 - prefixed it with st because it's a
26:47 - string variable that's just a convention
26:49 - which i'm going to encourage you to use
26:51 - you might want to know what data type a
26:53 - variable is just by glancing at its name
26:59 - so that's my variable declaration
27:02 - i've got a green wavy line underneath it
27:04 - to tell me that i haven't done anything
27:06 - with it yet unused local variable
27:10 - so let's now assign a value to it
27:15 - notice i'm typing in lowercase
27:17 - i'm being offered the name of the
27:19 - variable in a list so i'll just press
27:21 - the tab key to select it
27:23 - and i'll say st first name is equal to
27:27 - my first name
27:28 - notice that the green wavy line has
27:30 - disappeared now because i'm using the
27:32 - variable in earlier versions of visual
27:35 - basic you would have to use the let
27:38 - command in front of this you'd say let
27:41 - st first name equal kevin let it become
27:44 - kevin in this version of visual basic we
27:47 - don't use let at all
27:48 - but what you need to appreciate here is
27:50 - i'm putting the string kevin into that
27:54 - piece of memory which i set aside
27:58 - because the string is one two three four
28:01 - five characters long it's going to take
28:03 - up five bytes of memory
28:07 - as i said before though you don't really
28:09 - need to worry too much about that
28:13 - okay now i'm going to output the
28:16 - contents of that variable and i'll do
28:18 - that using messagebox
28:24 - notice that i haven't put double quotes
28:26 - around the name of the variable because
28:29 - i want to output its contents i don't
28:32 - literally want to output the string st
28:34 - first name
28:37 - let's see what happens
28:40 - i'm outputting the contents of the
28:42 - variable
28:46 - i want to make the message a little bit
28:48 - more friendly
28:50 - so i'm going to join the contents of the
28:52 - variable
28:53 - with some literal text
28:56 - like this
29:00 - you can see that this is a literal
29:03 - string because it's inside double quotes
29:06 - and this is the contents of my variable
29:08 - and i'm using the concatenation operator
29:11 - which is an ampersand
29:13 - to join the two together we call this
29:16 - string concatenation
29:19 - i can concatenate something onto the end
29:21 - of it as well
29:26 - again another concatenation operator
29:29 - let's see the effect
29:33 - hello and welcome kevin i hope you are
29:35 - well
29:36 - i want you to notice
29:38 - that i put spaces inside these text
29:42 - strings
29:44 - notice there's a space after the letter
29:46 - e let's just remove it for a second and
29:48 - see what happens i've also got a space
29:50 - there inside the string immediately
29:53 - before the eye i'll just take that out
29:55 - as well look what happens
29:58 - you can see the message is a little bit
30:00 - messy
30:03 - let's tidy it up
30:05 - okay i'm going to declare another
30:08 - variable
30:09 - to hold my last name
30:12 - so another dim statement
30:15 - and i'll assign a value to this variable
30:18 - as well
30:22 - and i'll include the last name as part
30:24 - of the message
30:28 - a common mistake is to not use enough
30:30 - ampersands watch what happens if i get
30:32 - rid of this one
30:34 - you can see i have a syntax error
30:36 - the message isn't particularly helpful
30:38 - but i know that there's something wrong
30:40 - with the way i've concatenated this
30:42 - string together so let's put the
30:43 - concatenation operator back in place
30:48 - another common mistake is not to use
30:49 - enough double quotes so again i'll take
30:52 - out one of those double quotes and you
30:54 - can see that the whole thing seems to be
30:56 - a problem
30:58 - one little error and i've got red wavy
31:00 - lines all over the place
31:02 - this is not particularly helpful
31:07 - just remember
31:08 - double quotes and brackets come in pairs
31:12 - if you have an opening double quote
31:14 - there has to be a matching closing
31:16 - double quote if you have an opening
31:18 - bracket there has to be a matching
31:20 - closing bracket
31:22 - let's try this
31:26 - now you can see kevin drum has come out
31:29 - as one word there's no space in between
31:31 - the two
31:33 - i can fix this easily
31:36 - i need to concatenate a space
31:40 - in between those two variables
31:42 - a space is just another character let's
31:44 - take a look
31:47 - much better
31:50 - notice that i've put my dim statements
31:53 - my variable declarations at the top of
31:56 - the procedure
31:58 - i didn't have to do this
32:00 - as long as i declare a variable before i
32:03 - try to assign a value to it i can put my
32:05 - dim statement wherever i like so for
32:08 - example
32:10 - i could declare the last name here and
32:12 - then assign a value to it
32:14 - that's absolutely fine
32:16 - what i mustn't do
32:18 - is try to assign a value to it
32:20 - before i declare it
32:22 - you can see i have a syntax error local
32:25 - variable st last name cannot be used
32:27 - before it has been declared
32:31 - the sequence of operations is important
32:35 - although what you can see here is
32:37 - perfectly okay i like to put all of my
32:39 - declarations at the top of the procedure
32:43 - keep them all together
32:45 - it actually makes the code easier to
32:47 - manage particularly when you have a lot
32:49 - of code
32:52 - i told you that a variable was a
32:54 - temporary storage location which your
32:57 - program can use while it's running
33:00 - when this program has done its job and
33:02 - it comes to an end the memory being used
33:05 - by the variables will be released it'll
33:08 - be freed up for something else to use
33:11 - but i can change the contents of a
33:13 - variable while the program is running
33:15 - that's why it's called a variable its
33:17 - contents can vary
33:20 - so for example i can do this
33:23 - i'm just going to copy these two lines
33:25 - of code paste them underneath
33:27 - they're still part of the procedure
33:32 - and i'm assigning new values to those
33:35 - variables which i'll output in the same
33:37 - way as i did before i can just borrow
33:40 - this line of code and copy it
33:44 - so watch what happens when i run the
33:45 - program
33:48 - hello and welcome kevin drumm i hope you
33:50 - are well
33:52 - hello and welcome mervyn drake i hope
33:54 - you are well
34:00 - this makes the point that the contents
34:02 - of a variable can change
34:05 - while the program is running
34:08 - i can assign different values to those
34:10 - variables
34:11 - at run time
34:14 - in the next video i'll say more about
34:16 - the different data types that you can
34:18 - use when you declare a variable
34:21 - and what implications this has for your
34:24 - code
34:33 - in this video i want to say more about
34:36 - different variable data types
34:40 - i'm going to store some details about a
34:42 - car let's start with a new button on the
34:45 - form
34:49 - give it a name
34:54 - and change the text property
34:58 - double-clicking
35:00 - will allow me to write the code
35:04 - okay so i'm going to start with a couple
35:05 - of string variables to store the make
35:08 - and the model
35:11 - we've come across string variables
35:13 - already let's assign some values
35:18 - a ford escort a classic car
35:21 - i also want to store the number of doors
35:24 - that this car has
35:29 - this time i'm using a data type of
35:32 - integer
35:33 - an integer is just another name for a
35:35 - whole number
35:37 - notice the naming convention i'm using i
35:40 - doors i for integer
35:44 - i want to store the color of the car
35:49 - this is going to be another string
35:51 - variable
35:54 - i want to store some information about
35:56 - whether or not this car has been taxed
36:02 - this time i'm using a data type of
36:05 - boolean named after the computer
36:08 - scientist george boole
36:10 - a boolean variable can have one of two
36:13 - values true or false
36:16 - this car has been taxed
36:20 - boolean variables are good when you have
36:23 - yes no type data for example whether
36:25 - somebody is a vegetarian or not whether
36:28 - something is switched on or something is
36:30 - switched off
36:32 - i also want to store the engine size
36:39 - another integer
36:43 - 1200cc
36:45 - i'd like to store the price of this car
36:54 - i'm using a data type of decimal
36:58 - decimal is the most suitable data type
37:01 - when you want to store money values
37:04 - i could have used double and i could
37:07 - have used single because all three data
37:10 - types decimal double single allow me to
37:13 - have a decimal point with decimal places
37:16 - after it
37:18 - but double is twice as accurate as
37:21 - single
37:22 - i can have more decimal places
37:24 - and the data type decimal is the most
37:27 - accurate of them all which makes sense
37:30 - when you're doing calculations with
37:31 - money
37:33 - the final thing i want to store is the
37:35 - date that the car was registered so i'm
37:38 - going to use a data type of date
37:44 - there's a special way that i have to
37:46 - assign a value to a data variable
37:54 - notice i'm using the hash symbols to
37:57 - enclose the date
37:59 - i should also point out that this is not
38:02 - the 11th of february but the 2nd of
38:05 - november
38:07 - when you type a date you need to type it
38:09 - in american format which is the month
38:12 - followed by the day followed by the year
38:16 - when i display this on the screen for
38:18 - example in a message box it'll be
38:20 - displayed according to the settings in
38:23 - my computer's control panel
38:26 - you'll see in a moment that my computer
38:28 - is set up to display dates in british
38:30 - format
38:32 - now let's build a message box command to
38:35 - display all of this data
38:49 - notice the concatenation operators
38:52 - between the variable names and notice
38:54 - also that i'm concatenating spaces
38:57 - between these data items
39:06 - now you can see i have a bit of a
39:08 - problem here with reading the code i've
39:11 - written on the screen
39:12 - nevertheless let's test it and see if it
39:14 - runs
39:19 - there's my message and it looks okay
39:21 - notice that the day and the month of the
39:24 - date are the other way around from the
39:26 - way i coded it i've written the date in
39:29 - american format but it's being displayed
39:31 - in british format
39:35 - what i'd really like to be able to do is
39:37 - display each data item on a separate
39:40 - line within the same message box
39:44 - let's see how to do that
39:49 - instead of concatenating spaces in
39:52 - between each data item i'm going to type
39:54 - a special constant i'll say more about
39:57 - constants later suffice to say i'm just
40:00 - going to type
40:02 - vbnewline
40:04 - and i'll replace each space with this
40:07 - let's just copy and paste it ctrl c to
40:09 - copy
40:11 - ctrl v to paste
40:18 - i still need the same number of
40:20 - concatenation operators to join all
40:23 - these different bits and pieces together
40:25 - let's see how it looks now
40:30 - well that is certainly a nicer message
40:36 - but now i want to do something about the
40:38 - problem that i can't actually read the
40:41 - whole line of code
40:42 - i could give myself some more space on
40:44 - the screen by just dragging this bar
40:47 - across a little bit but even then i
40:49 - can't read the whole line of code
40:52 - i essentially want to wrap this text on
40:55 - the screen
40:57 - well i can do this
40:58 - after the ampersand here
41:00 - in fact i can put this pretty much
41:02 - anywhere i'm just going to leave a space
41:04 - and then type an underscore character
41:07 - when i press enter i've moved the rest
41:09 - of the line onto the next line down
41:12 - i can do that again here
41:16 - notice the underscore characters have
41:18 - actually disappeared but this is still
41:21 - just one line of code it won't change
41:25 - the appearance of the message box
41:27 - but it just allows me to read the code
41:29 - more easily on the screen
41:32 - let's make sure it still works
41:35 - yeah that's absolutely fine
41:40 - in the next video i'll show you how we
41:42 - can capture input from the user of an
41:45 - application
41:46 - so we can assign the contents of these
41:48 - variables at runtime rather than hard
41:52 - coding the data like we've done here
42:03 - i want to show you how to capture input
42:05 - from the user of your application and
42:08 - i'll be doing it by means of this form
42:11 - and you'll also see how to use some of
42:13 - these extra controls that we can place
42:15 - onto a form
42:16 - before i do let me just show you a quick
42:19 - and easy way we can capture input from
42:21 - the user by means of the input box
42:24 - function
42:25 - i'll drop a button on the form first
42:29 - give it a name
42:32 - and a text property
42:36 - double-click to write the code
42:39 - the input box function will capture one
42:42 - piece of data specifically it'll capture
42:44 - a string
42:45 - i'll need a variable to put that piece
42:47 - of data into so let's declare a string
42:50 - variable first of all
42:53 - and then i can assign a value to it by
42:55 - means of the input box function just
42:57 - like this
43:01 - and to prove it works i'll output the
43:03 - contents of that variable
43:08 - i'm concatenating the word hello in
43:10 - front of it let's give it a try
43:15 - press the button to launch the procedure
43:19 - and there's the input box prompt please
43:21 - enter your first
43:24 - name that's working fine
43:28 - so it's a quick and easy way to prompt
43:31 - the user for some input but what i
43:33 - really want to talk about in this video
43:36 - is how we can use controls on the form
43:39 - to capture input
43:40 - so i'm going to delete the code you can
43:42 - see here
43:44 - and do something else instead
43:46 - let's go back to the form
43:48 - i'm going to place a text box on the
43:51 - form
43:52 - here it is in the control toolbox
43:56 - i'll give the text box a name
44:00 - notice at the moment it's called text
44:02 - box one
44:04 - i've prefixed the new name with txt to
44:07 - indicate that it's a text box and then
44:10 - i'm calling it first name because that's
44:12 - the data i want to capture i'm trying to
44:15 - keep the name meaningful
44:17 - notice the camel notation as well you'll
44:19 - see the benefit of doing it this way in
44:21 - a few moments
44:23 - i'm also going to put a label on the
44:26 - form so that the user of the form knows
44:28 - what to type into the text box
44:32 - here's the label control
44:35 - and again i'm going to change its name
44:37 - to keep it meaningful
44:39 - lbl for a label
44:42 - and then something to indicate its
44:43 - purpose
44:45 - a label also has a text property which
44:48 - i'm going to change
44:53 - and you can see that is what appears on
44:55 - the form
44:58 - while i'm at it i'm going to add another
45:00 - text box to capture the user's last name
45:12 - and a matching label
45:14 - and one more text box to capture the
45:16 - user's gender
45:24 - notice that a text box also has a text
45:27 - property but anything i type in here
45:30 - will actually appear in the text box it
45:33 - will become the default data if a user
45:36 - doesn't type something into the text box
45:39 - i'm going to leave it blank
45:43 - and we'll have another matching label to
45:45 - go with this text box
45:53 - there are a couple of things you need to
45:54 - be aware of when you're placing controls
45:57 - on the form
45:58 - each control must have a unique name
46:02 - so this one you can see i called it txt
46:05 - first name
46:08 - there's the name property and this one i
46:10 - called txt last name
46:15 - let me just make the mistake of giving
46:17 - this text box the same name as the other
46:20 - one and see what happens
46:24 - property value is not valid
46:27 - take a look at the details
46:29 - and it's telling me that the name is
46:31 - already in use by another component
46:33 - something else on the form has already
46:35 - been called txt first name
46:39 - if this happens just cancel and find out
46:41 - which one is the offending control
46:44 - something else i should mention is you
46:46 - can't have spaces in a control name so
46:49 - let's put a space in this text box name
46:52 - again an error message
46:56 - and maybe i'll even try putting a
46:57 - question mark on the end of the name
47:00 - another error message
47:02 - so there are some limitations as to what
47:04 - you can call a text box or indeed any
47:07 - other control on the form
47:09 - the text property on the other hand of a
47:12 - label or a button can be pretty much
47:14 - anything you like
47:16 - okay let's just tidy up the layout a
47:18 - little bit
47:20 - i'm watching the guidelines for
47:22 - assistance
47:24 - and you can also use the format menu to
47:26 - help you control the layout of a form
47:30 - see i have options for alignment
47:32 - horizontal and vertical spacing this one
47:35 - is particularly handy if i select all of
47:38 - these text boxes
47:42 - i can say i want to make them all the
47:43 - same width for example and i can make
47:46 - them all the same height
47:48 - if i want to move things around as a
47:51 - group i just draw a box around them to
47:53 - highlight them and i can drag them to a
47:55 - new position
47:58 - you can play around with the various
47:59 - tools available to improve the cosmetic
48:02 - appearance of your form when you have
48:04 - time but for now i just want to show you
48:06 - how we can capture some data so let's
48:09 - write the code for the button
48:14 - i'm going to start by declaring three
48:16 - variables into which i'm going to load
48:20 - the data that i capture
48:28 - i'm using a standard naming convention
48:30 - again st because these are string
48:32 - variables and then of course something
48:35 - meaningful in camel notation
48:38 - i've just spotted a spelling mistake as
48:40 - well let's fix this
48:46 - now i'm going to take the information
48:48 - that the user types onto the form
48:50 - and load it into these variables
48:53 - starting with the first name
48:56 - st first name equals
48:58 - a single equal sign means i'm about to
49:01 - assign something to this variable
49:03 - and the information i want
49:05 - is on the form in a text box called
49:09 - txt first name
49:11 - i've just typed the first three
49:13 - characters of the text box name txt and
49:17 - i'm being presented with a list of the
49:19 - text boxes on the form you can see why i
49:22 - use this naming convention as long as i
49:24 - make sure that all of my text boxes
49:26 - begin with txt i'll get a nice little
49:29 - list of them
49:30 - so i'll select txt first name and i want
49:33 - to take the text property
49:35 - in other words the text that the user
49:38 - typed into that text box and i'm going
49:40 - to load that into my variable
49:43 - so this reads as take the text
49:46 - from the text box called txt first name
49:50 - and assign it to that variable
49:53 - let's do the same with the other
49:55 - variables
50:01 - and finally i'm going to output the data
50:03 - in a message box just to make sure it
50:05 - worked
50:11 - i've included a space between the first
50:14 - name and the last name
50:18 - and i've concatenated some extra text in
50:21 - my message as well let's see what
50:23 - happens when we run it then
50:26 - type in some information
50:31 - and there's the output from my procedure
50:34 - if i dismiss the message box the
50:36 - application is still running
50:38 - so i can change the data here
50:43 - the program is assigning new values to
50:45 - those variables overwriting the existing
50:47 - ones
50:48 - one more time
50:58 - so there you have it capturing data from
51:01 - a user by means of text boxes on a form
51:06 - let's quickly take a look at another
51:08 - control which i can use on the form
51:11 - i want to show you a list box
51:20 - and i'm going to use this to capture the
51:22 - user's occupation
51:24 - so let's give it a name
51:29 - lst occupation lst because it's a list
51:32 - box
51:33 - i'll put a label on the form to go with
51:35 - it so that the user knows what the list
51:37 - box is for
51:44 - and i'm going to include some
51:45 - occupations in the list box that the
51:48 - user can choose from
51:50 - first of all make sure that the list box
51:52 - is actually selected
51:55 - and then use the items property
51:59 - there's a little button here which will
52:01 - allow me to add a collection of items
52:11 - click ok and i now have a populated list
52:14 - box
52:16 - let's capture the user's selection
52:19 - i need a variable to store it in
52:24 - and i can capture the user's selection
52:26 - in a slightly different
52:30 - way i'm using the selected item property
52:38 - let's try it out
52:43 - hello kevin drumm you are a male teacher
52:49 - i can also add items to the list box
52:52 - programmatically in other words in my
52:55 - code
52:56 - i'll quickly show you this and then you
52:58 - can experiment with it yourself
53:01 - you might remember in an earlier video i
53:04 - showed you how you could write code when
53:06 - the form loads
53:08 - i'm going into the form design
53:10 - environment and i'll double click the
53:12 - form itself
53:14 - i now have a procedure called form1 load
53:19 - any code i write here will run
53:22 - immediately after i start the
53:24 - application but before the form appears
53:26 - on the screen and i'm going to add some
53:29 - extra code to put a few more items into
53:31 - my list box
53:45 - i am adding something to the collection
53:48 - of items
53:49 - which are inside that list box
53:53 - i'm just going to make sure that the
53:54 - list box is big enough to display
53:56 - everything
54:02 - and let's give it a try
54:10 - hello beatrix potter you are a female
54:13 - writer
54:25 - before we look at some more code
54:27 - i want to introduce you to some of the
54:29 - facilities that come with visual studio
54:32 - for debugging your code in other words
54:35 - tracking down errors in the code
54:38 - the first and probably most useful one
54:40 - that i want to talk about is being able
54:43 - to set a breakpoint and then step
54:45 - through the code
54:47 - i can set a breakpoint by clicking on
54:49 - the grey bar here
54:52 - that's a break point
54:54 - now i'm going to run the program watch
54:56 - what happens
55:04 - i'm now in what's called
55:06 - break mode
55:07 - or debugging mode
55:09 - my application ran at full speed until
55:12 - it came to the break point and now it's
55:14 - suspended and i can step through the
55:17 - code one line at a time there are a
55:20 - number of buttons i can use to do this
55:22 - up here
55:24 - step into
55:25 - step over
55:27 - step out i'll say more about these two
55:29 - later the most useful one is step into
55:32 - notice i can also use the function key
55:34 - f8 to do the same thing so when i click
55:37 - the button
55:39 - i'm getting a message about how the
55:40 - stepping facility will behave i'm not
55:43 - too worried about this for now i'm just
55:45 - going to say i don't want to see these
55:46 - messages again
55:50 - it's highlighting the line of code that
55:52 - it's about to execute next
55:57 - and now it's about to execute this line
55:59 - of code
56:01 - and again
56:03 - it's about to execute this line of code
56:07 - when i'm in debug mode i can hover over
56:10 - the name of a variable to see its
56:12 - contents
56:15 - so i can see that the string male has
56:17 - been assigned to this variable
56:20 - drum has gone into this one
56:23 - and kevin has gone into that one
56:27 - if i take a look at this variable it
56:28 - hasn't been assigned a value yet because
56:31 - this line hasn't executed yet
56:33 - let's continue stepping
56:38 - and i can see there's something inside
56:40 - that variable now
56:44 - final line of code in this procedure
56:45 - will do some output
56:49 - so i've been switched back to the user
56:51 - interface
56:53 - and finally the procedure will come to
56:55 - an end
56:59 - my application is still running the form
57:01 - is still on the screen but the procedure
57:04 - which i launched when i clicked on the
57:05 - button has now finished
57:11 - i can use as few or as many break points
57:13 - as i like i'm going to remove this break
57:16 - point just by clicking on it again and
57:18 - i'll place a break point here instead
57:21 - i'm also going to place a break point on
57:23 - the forms load event handler
57:27 - let's run it again
57:32 - now as i told you in the previous video
57:34 - when you launch a windows forms
57:36 - application the form is loaded into
57:38 - memory before it hits the screen so the
57:41 - forms load event handler is running
57:43 - first
57:44 - i'll step through that
57:47 - and it's populating the list box
57:50 - when that's complete
57:52 - the form can hit the screen
58:01 - and clicking the button causes the
58:03 - button's click event handler to start
58:05 - running
58:09 - and we've seen this before
58:12 - when we're in debug mode there's some
58:14 - extra windows that you might want to
58:16 - switch on a particularly useful one is
58:19 - called the locals window
58:21 - you can find it here
58:24 - on the debug menu
58:26 - debug windows
58:29 - locals
58:33 - what it's showing me is the contents of
58:36 - any local variables in other words
58:39 - variables which have been declared
58:41 - within this procedure
58:44 - i'll say more about the difference
58:46 - between local and global variables later
58:49 - on suffice to say for now this is an
58:52 - alternative way of finding out what's
58:54 - inside a variable i can see a nice
58:56 - summary down here
58:59 - there's additional information in this
59:00 - window as well which pertains to these
59:03 - parameters which i mentioned in another
59:05 - video we'll say more about these later
59:08 - with the locals window i can actually
59:10 - change the contents of a variable on the
59:13 - fly as it were
59:16 - i just double click it here
59:18 - and retype it
59:21 - i've overwritten the existing value of
59:23 - that variable
59:25 - if you've finished stepping through your
59:27 - program you can stop the execution just
59:29 - by clicking on this red square or you
59:32 - can press continue and it will jump you
59:35 - straight to the next breakpoint if there
59:37 - is one
59:46 - at this point i just want to return to a
59:48 - type of error that you've seen already
59:51 - and that's the so-called syntax error
59:55 - for example if i misspell the word text
59:57 - i type text on the end
59:59 - i've got a red wavy line
60:02 - if i open a bracket but forget to close
60:04 - it
60:05 - again that's a syntax error
60:07 - i can see a red wavy line on the end of
60:09 - this
60:11 - keep an eye out for these because your
60:13 - program won't run properly if you don't
60:15 - fix them
60:16 - i like to fix them as i go along but
60:18 - let's see what happens when i try to run
60:20 - a program which has got syntax errors
60:22 - like this in it
60:26 - there were build errors would you like
60:28 - to continue and run the last successful
60:32 - build
60:33 - well that begs the question what does it
60:35 - mean by build
60:37 - so let's say no
60:39 - and i'm going to switch on something
60:40 - called the output window
60:49 - watch what happens when i try to run the
60:50 - program again
60:55 - build xero succeeded one failed
61:00 - this tells us something very important
61:03 - about vb.net programs
61:06 - when you write a program you're writing
61:08 - source code code that a human being can
61:12 - understand
61:13 - but before you can run a program it has
61:16 - to be compiled
61:18 - what that means is it has to be turned
61:20 - into machine code binary ones and zeros
61:24 - that the computer can understand
61:26 - when you press the start button visual
61:29 - studio will automatically try to compile
61:32 - the program first
61:34 - another name for compiling a program or
61:36 - compilation is to build the program
61:41 - so you can see here the program has
61:43 - failed to compile the build failed and
61:46 - i'm very kindly being asked would i like
61:49 - to use the last successful build would i
61:52 - like to run the version of the program
61:54 - that compiled successfully previously
61:57 - well in this case the answer is no i
61:59 - want to fix this version of the program
62:01 - so i'm going to click on no
62:03 - and now i have a list of errors
62:05 - this is really just a summary of the
62:07 - same information that i saw with the red
62:09 - wavy lines
62:12 - i'm being told that it's expecting a
62:14 - closing bracket a double click on there
62:16 - and it jumps me to where i need to do
62:18 - the fix
62:20 - and i'm being told that text is not a
62:22 - member of text box
62:24 - in other words text is not a property of
62:27 - a text box a double click and it will
62:29 - jump me straight to that line i can fix
62:31 - it here now
62:33 - as i said before though i like to watch
62:35 - out for the red wavy lines while i'm
62:37 - coding and fix them as i go along
62:41 - i'll show you some more debugging
62:42 - facilities as and when i need them in
62:45 - later videos
62:54 - in this video i'm going to talk about
62:55 - how we can work with numeric input from
62:58 - the user in other words how we can do
63:01 - calculations with number data
63:04 - before i do i'm going to build myself a
63:06 - simple little interface with a couple of
63:08 - text boxes and a button
63:45 - notice how i've been naming the controls
63:47 - as i go along this will make the code
63:49 - easier to understand
63:52 - the first thing i'd like to do is add
63:54 - together two numbers that the user types
63:57 - onto the form
63:58 - so i'll start by declaring a couple of
64:00 - variables
64:06 - remember the data type integer means a
64:09 - whole number
64:10 - i'm going to declare another variable to
64:13 - store the result of the calculation
64:17 - and now i'm going to capture the data
64:19 - that the user types into those text
64:21 - boxes
64:27 - adding these together couldn't be
64:29 - simpler
64:32 - i result equals i number one plus i
64:35 - number two let's output the result
64:39 - and see if it works
64:46 - 12 plus 5 is 17.
64:51 - let's try something
64:52 - else let's subtract one number from the
64:56 - other
64:58 - i result equals i number one minus i
65:02 - number two i'll just borrow that message
65:04 - box statement
65:07 - and we'll run the program again
65:12 - so that's the two numbers added together
65:16 - and that's what we get when we subtract
65:18 - 5 from 12.
65:21 - what about multiplication
65:30 - to multiply two numbers together we use
65:32 - an asterisk that's the multiplication
65:35 - symbol when you're programming
65:39 - twelve plus five is seventeen
65:42 - twelve minus five is seven
65:45 - and twelve times five is sixty
65:50 - bit of copying and pasting to speed
65:51 - things up
65:54 - to divide one number by another use a
65:57 - forward slash
65:58 - so this reads as i number one divided by
66:02 - i number two
66:06 - twelve plus five is seventeen twelve
66:08 - minus five is seven
66:10 - twelve times five is sixty
66:12 - and twelve divided by five
66:14 - is two
66:16 - well not quite but remember we're
66:18 - working with integers here we're working
66:21 - with whole numbers
66:22 - when i divide one integer by another and
66:25 - store the result in an integer variable
66:28 - vb is automatically going to round to
66:30 - the result either up or down
66:32 - let's improve on this
66:35 - instead of using integer variables
66:38 - i'm going to use a real number type
66:41 - let's use a double
66:45 - i'm also going to change the naming i've
66:47 - used here
66:48 - dbl for a double
67:03 - strictly speaking it doesn't matter what
67:05 - i call these variables but i want the
67:07 - names to be meaningful and i want the
67:09 - names to reflect the data type
67:12 - let's see what we get this time
67:16 - same as before 12 plus 5 is 17 12 minus
67:20 - 5 is 7.
67:21 - 12 times 5 is 60
67:24 - but 12 divided by 5 is 2.4
67:27 - that makes more sense
67:33 - just to be clear about the way a
67:35 - variable works
67:37 - i'm multiplying two numbers together
67:39 - here
67:40 - and i'm storing the result in this
67:42 - variable called dbl result
67:45 - when i perform a second calculation i'm
67:48 - storing the result in the same variable
67:51 - what's happening is i'm overwriting the
67:54 - existing value in dbl result
67:57 - i lose the value which was generated by
67:59 - the first calculation
68:01 - when i do the third calculation i
68:03 - overwrite the value inside dbl result
68:06 - again so i lose the result of the second
68:08 - calculation by the time my program comes
68:10 - to an end this contains the result of
68:12 - the first number divided by the second
68:14 - number
68:16 - if i wanted to keep the result of each
68:18 - of these calculations then i should have
68:20 - declared four separate variables
68:24 - these are called arithmetic operators
68:28 - these are the basic operations that we
68:30 - might want to perform with numbers
68:34 - there are a couple more let me show you
68:35 - them
68:40 - that's the carry symbol which is
68:42 - normally above the number six on your
68:44 - keyboard and what it means is raised to
68:47 - the power of
68:48 - so it's going to raise number one to the
68:50 - power of number two
68:55 - twelve plus five
68:58 - twelve minus five
69:00 - twelve times five
69:02 - twelve divided by five
69:05 - and twelve to the power of five
69:08 - that's twelve times twelve times twelve
69:10 - times twelve times twelve
69:15 - another useful operator is integer
69:18 - division
69:19 - i'm going to use a backslash instead of
69:22 - a forward slash
69:24 - in some programming languages you would
69:26 - use the word div in fact the pseudo code
69:29 - that you see on most exam papers will
69:31 - use the word div in visual basic we use
69:34 - a backslash
69:36 - let's take a look
69:40 - that's the effect of using a backslash
69:43 - instead of a forward slash
69:45 - 12 is being divided by five but only the
69:48 - whole number part of the result is being
69:50 - kept
69:51 - twelve divided by five is two with two
69:54 - remainder we're ignoring the remainder
69:57 - let's try fifteen and four
70:01 - fifteen plus four is nineteen fifteen
70:03 - minus four is eleven fifteen times four
70:06 - is sixty fifteen divided by four is
70:09 - three point seven five
70:11 - that's fifteen raised to the power of
70:13 - four
70:14 - and that's 15 divided by 4 ignoring the
70:18 - remainder 4 goes into 15 three times
70:24 - the last arithmetic operator that i'd
70:26 - like to show you now is mod
70:31 - number one mod number two
70:35 - mod is the remainder after whole number
70:38 - division
70:39 - let's see what this does
70:42 - let's go with 24
70:45 - and 9 this time
70:48 - i'll just move the form across so you
70:50 - can see the code as well
70:55 - 24 plus 9 is three
70:59 - twenty four minus nine is fifteen
71:04 - twenty four multiplied by nine is two
71:06 - hundred and sixteen
71:10 - twenty four divided by 9 is 2.6
71:14 - recurring the number of decimal places
71:16 - you can see there is governed by the
71:18 - data type
71:21 - 24 raised to the power of 9 is this
71:25 - rather large number
71:29 - 24 divided by 9 using integer division
71:32 - is 2
71:34 - 9 goes into 24 twice
71:37 - and 9 goes into 24 twice
71:40 - with 6 remaining that's what mod is
71:43 - giving me it's the remainder after whole
71:46 - number division
71:50 - let me finish with a word of warning
71:53 - i'm going to run this program again but
71:55 - i'm not going to enter any data
72:01 - i'm going to leave these two text boxes
72:04 - empty
72:09 - straight away i have an error message
72:12 - conversion from string to type double is
72:15 - not valid
72:17 - this tells me something about what's
72:19 - going on behind the scenes
72:21 - let's stop the program
72:24 - and put a break point on this line
72:35 - when you type something into a text box
72:38 - it's actually a string
72:40 - notice here text equals 5 7 in double
72:44 - quotes
72:45 - when this line of code executes vb will
72:48 - automatically convert the string five
72:51 - seven into a number
72:54 - you can see dbl number one has got a
72:56 - zero in it at the moment that's the
72:58 - initial value of any numeric variable
73:01 - until you assign something else to it
73:05 - step through the code
73:08 - the text box contained five seven
73:11 - but the variable contains fifty seven
73:15 - behind the scenes visual basic is
73:18 - automatically converting the string into
73:21 - a double because it can
73:23 - but notice that my second text box
73:26 - contains a zero length string a pair of
73:29 - double quotes with nothing in between
73:31 - them it's a string but it just doesn't
73:33 - have any length
73:35 - and when this line of code executes vb
73:38 - will attempt to convert that zero length
73:40 - string into a number but of course it
73:43 - can't
73:47 - and my program has crashed
73:51 - this is what we call a run time error
73:54 - the program crashed while it was running
73:56 - it crashed at run time
73:59 - another name for a runtime error is an
74:01 - exception so you can see here i have an
74:04 - unhandled exception
74:07 - i'll talk more about runtime error
74:10 - handling or exception handling in a
74:12 - later video
74:14 - but for now with this program we just
74:16 - have to expect the user to do the right
74:19 - thing not to leave any of the text boxes
74:21 - blank
74:30 - in this video i'll say something about
74:33 - complex arithmetic
74:35 - that is arithmetic expressions that
74:37 - contain more than one arithmetic
74:39 - operator
74:41 - let's write some code
74:43 - let's imagine we're building an
74:45 - application for a cake shop and the
74:47 - application will calculate the total
74:49 - cost of a number of cakes
74:52 - i'm not going to capture any input i'm
74:54 - just going to hard code the data to keep
74:56 - things simple
75:05 - so i've declared three variables one for
75:08 - the price of a cake one for the quantity
75:11 - of cakes and one to store the total cost
75:14 - of however many cakes being bought
75:16 - let's initialize these variables with
75:18 - some data
75:24 - as i said i'm hard coding the data so i
75:27 - can focus on the calculations but of
75:29 - course i would probably want to capture
75:31 - this data from text boxes on the form
75:35 - so to calculate the total cost of ten
75:37 - cakes at a price of five pounds per cake
75:41 - these are good cakes by the way i'll use
75:43 - the multiplication operator
75:47 - and let's output the result
75:53 - fifty pounds worth of cakes no surprises
75:56 - there
75:58 - now suppose for a moment we want to
76:00 - calculate a discount of let's say two
76:03 - pounds per cake
76:09 - you might be tempted to try this
76:13 - take the original price subtract the
76:16 - discount
76:17 - and multiply it by the quantity five
76:20 - pounds per cake
76:22 - minus two pounds per cake
76:24 - that's three pounds per cake multiplied
76:28 - by ten i might expect a result of thirty
76:31 - pounds let's take a look
76:35 - minus 15 pounds
76:38 - not only are we giving the cakes away
76:40 - we're giving money to the customers as
76:42 - well
76:43 - that's totally unsatisfactory what's
76:46 - going
76:46 - on well there's an order of operations
76:50 - that applies when it comes to complex
76:52 - arithmetic expressions by a complex
76:55 - arithmetic expression i simply mean an
76:58 - expression with more than one operator
77:01 - this expression includes a minus sign
77:03 - and the multiply sign
77:06 - the order of priority is that
77:08 - multiplication is done first so in this
77:12 - case the discount is being multiplied by
77:15 - the quantity which is twenty
77:18 - and then that is being subtracted from
77:21 - the price
77:22 - five minus twenty is indeed minus
77:25 - fifteen
77:27 - if i want the discount to be applied
77:29 - first in other words i want the
77:30 - subtraction to happen first i can
77:33 - control it using brackets or parentheses
77:36 - as they're otherwise known
77:38 - like this
77:43 - so now anything inside the brackets will
77:46 - happen first
77:50 - and there's the 30 pounds i was
77:52 - expecting
77:55 - you may well have come across this
77:57 - already
77:58 - you might have heard of bodmas
78:09 - bodmas stands for brackets order
78:11 - division multiplication addition and
78:14 - subtraction
78:15 - that's the order of priority of the
78:18 - arithmetic operators
78:21 - order by the way means exponentiation
78:24 - raising something to the power of
78:26 - something else
78:28 - so what we're saying is anything inside
78:30 - brackets will be done first if there's
78:32 - an exponentiation operator in the
78:34 - expression that will happen next
78:36 - followed by division multiplication
78:39 - addition
78:41 - and subtraction
78:43 - the truth is division and multiplication
78:46 - have the same priority
78:48 - also addition and subtraction have the
78:50 - same priority
78:52 - so perhaps we should say
78:56 - to indicate the fact
79:00 - by the way
79:01 - i typed a single apostrophe before i
79:04 - wrote this
79:05 - this is not code this is simply a
79:08 - comment which i've added to my code
79:11 - comments aren't executed they're not
79:13 - part of the program
79:14 - a comment is just something that i can
79:16 - put in my code to help me to understand
79:19 - it
79:20 - now let's suppose for a moment i want to
79:22 - add a charge for postage and packaging
79:25 - to the total cost of this order
79:33 - we'll have a flat charge of three pounds
79:37 - and i'm just going to add it to the end
79:39 - of this calculation
79:43 - thinking about the order of operations
79:45 - whatever's in brackets will happen first
79:48 - then that will be multiplied by the
79:50 - quantity
79:51 - and then finally the postage will be
79:54 - added on so i don't actually need to
79:56 - include any brackets here
79:59 - 33 pounds as expected
80:02 - but there's nothing to stop you from
80:04 - adding brackets if it helps you to
80:06 - understand the code so for example i
80:08 - might do this
80:12 - i'm saying do all of this first and then
80:15 - have the postage at the end
80:23 - something else you may have come across
80:24 - is this
80:29 - pemdas
80:30 - this stands for
80:36 - it's essentially the same thing as
80:38 - bodmas
80:39 - you might have noticed that the m and
80:41 - the d are the other way around
80:44 - but that just makes the point that the
80:46 - order of operations when it comes to
80:48 - division and multiplication is
80:50 - irrelevant
80:53 - now beware you might come across this
81:08 - that's the cost of my cakes
81:12 - that's 10 minus five plus two
81:16 - of course ten minus five is five plus
81:18 - two is seven
81:21 - that is ten plus two
81:24 - minus five
81:26 - ten plus two is twelve minus five is
81:29 - also seven all i've actually done is
81:31 - swap around the order of the operations
81:36 - but ten minus two plus five
81:40 - is thirteen
81:42 - let's be clear i haven't just swapped
81:45 - around the order of the operations i'm
81:48 - changing the number which i'm
81:50 - subtracting from 10 10 minus 2 is 8 plus
81:53 - 5 is 13. it's a different calculation
81:58 - the same applies here
82:14 - in the first two examples all i've done
82:16 - is change the order of operations i've
82:19 - got 10 divided by 5 times 2 or 2 times
82:23 - ten divided by five
82:25 - but in the third example it's a
82:27 - different calculation
82:29 - it's five divided by two
82:32 - multiplied by ten
82:35 - so beware
82:36 - bodmas and pemdas both apply they do
82:40 - tell us the order of operations when it
82:42 - comes to complex calculations
82:44 - but complex calculations can also be
82:47 - quite deceptive
82:56 - there are three fundamental constructs
82:58 - in most high-level procedural
83:01 - programming languages such as vb.net
83:05 - and they are sequence
83:07 - selection
83:08 - and iteration
83:11 - in this video i'm going to introduce
83:13 - selection
83:15 - that means executing one block of code
83:18 - or another depending on the outcome of a
83:20 - test
83:21 - one way we can do this is using the if
83:24 - statement
83:25 - let's start with a simple user interface
83:46 - i've said it before and i'll say it
83:48 - again get in the habit of naming your
83:50 - form controls as you place them on the
83:53 - form
83:54 - i'm going to ask the user what country
83:56 - they come from and then give them an
83:58 - appropriate greeting
84:02 - i'll capture the input from the form by
84:04 - assigning it to a variable
84:10 - and now i'm going to use an if statement
84:13 - to test the contents of that variable
84:20 - if the country is equal to australia
84:22 - then i'm going to output the message
84:24 - g'day mate
84:26 - i want you to notice that i'm using the
84:28 - equal sign to check if two things are
84:31 - equal
84:32 - whereas here i'm using the equal sign to
84:35 - assign something to a variable
84:37 - in some programming languages you'll use
84:40 - a slightly different approach
84:42 - for example in python if you were
84:44 - checking for equality you would use two
84:46 - equal signs
84:49 - in vb a single equal sign can be used
84:52 - either for checking or for assignment
84:56 - so let's try it out
85:01 - if i input australia
85:04 - i get the australian greeting
85:07 - if i input something else
85:11 - nothing at all
85:13 - that doesn't mean my code isn't working
85:15 - it's doing exactly what it's supposed to
85:17 - do
85:18 - this is what we call a one line if
85:21 - statement
85:22 - i can execute one command depending on
85:25 - the outcome of the test
85:28 - but if i want to execute multiple
85:30 - commands depending on the outcome of a
85:32 - test i'm going to use a block if
85:34 - statement
85:37 - i've moved that command to the next line
85:39 - down
85:40 - visual studio has automatically added an
85:44 - end if
85:46 - and now between the if and the end if i
85:49 - can have as many commands as i like
85:55 - so watch what happens now
86:00 - g'day mate
86:02 - good on ya
86:04 - no worries
86:08 - if i don't type australia if i type
86:10 - something else
86:12 - nothing happens at all
86:16 - now a word of warning if i put something
86:18 - after the word then
86:23 - that's a syntax error
86:26 - end if must be preceded by a matching if
86:31 - this line of code is complete it's
86:34 - syntactically correct
86:36 - however you can't have an end if on its
86:38 - own
86:40 - if you're going to use a block if there
86:42 - should be nothing after the word then
86:46 - if there's nothing after the word then
86:48 - and i forget to use end if
86:51 - again i've got a syntax error
86:54 - if must end with a matching end if
87:00 - so you have a choice you can either use
87:02 - a block if or a one line if but
87:04 - whichever one you use you have to use it
87:06 - correctly
87:08 - when it comes to a block if i can have
87:11 - multiple else if clauses as part of it
87:15 - like this
87:25 - else if country equals france bonjour
87:28 - commented
87:30 - let's try it out
87:35 - those are my three australian greetings
87:38 - and if the country is france
87:41 - bonjour commented
87:45 - however if i enter something which isn't
87:47 - france and isn't australia
87:50 - nothing
87:52 - let's include another elsif
88:01 - else if country equals japan konichiwa
88:04 - chelsea
88:07 - i think i pronounced that correctly
88:10 - let's try it out now
88:15 - and there are my japanese messages
88:18 - i can have as many else if clauses as i
88:22 - like in a block if statement
88:24 - and i can finish with a single else
88:27 - clause
88:32 - if i don't type australia france or
88:34 - japan
88:36 - then it will say hello there i hope you
88:38 - are well
88:55 - so everybody gets something
88:58 - now just a small word of warning
89:01 - the tests that you perform with an if
89:03 - statement
89:04 - are case sensitive
89:07 - watch what happens if i type australia
89:09 - in lower case
89:18 - the block of code in the else clause is
89:20 - executing
89:22 - because i didn't use a capital a
89:30 - i can remove the case sensitivity of
89:32 - this test by converting the contents of
89:34 - the variable st country into uppercase
89:37 - like this
89:39 - i'm saying take the content of st
89:41 - country convert it to uppercase
89:45 - and then put the uppercase version of it
89:47 - back into the variable overwriting the
89:50 - original contents of that variable
89:52 - and now i'm going to check to see if
89:55 - that is equal to this
90:13 - it doesn't matter what type of case i
90:15 - use when i'm typing in the country
90:18 - i've removed the case sensitivity from
90:21 - the test
90:22 - let's just step through this to be sure
90:24 - what's going on
90:26 - i'll put a break point on the procedure
90:30 - so i've typed in lowercase australia
90:39 - that's what i've captured into this
90:40 - variable
90:44 - and then i've converted it to uppercase
90:46 - australia
90:48 - so i'm asking if uppercase australia is
90:51 - equal to uppercase australia
91:04 - and notice how execution has passed to
91:07 - the end of the if block
91:09 - because the australian greetings have
91:11 - been displayed there's no need to
91:13 - perform these other tests
91:21 - one final thing to say i've converted
91:23 - the user's input into uppercase and i
91:26 - might not want to leave it in
91:28 - uppercase notice this
91:39 - once the if block has completed any code
91:42 - which comes after it then executes for
91:44 - example this message box statement but
91:46 - notice that st country now contains
91:49 - uppercase japan i might want to leave it
91:51 - the way it was when it was input by the
91:54 - user
91:57 - so rather than doing this which replaces
92:00 - the existing contents of the variable
92:03 - i'm going to do this
92:11 - the content of the variable
92:13 - is only being converted to uppercase for
92:16 - the purpose of the test but i'm not
92:18 - reassigning the uppercase text back into
92:20 - the variable i'm converting the text to
92:23 - uppercase on the fly as it were
92:27 - watch what happens now
92:36 - by the time we get to the end of the
92:37 - program the contents of the variable are
92:40 - still in their original state
92:47 - you might like to try writing a similar
92:49 - program yourself have a single if block
92:52 - with lots of else if clauses to greet
92:54 - people from different countries
93:04 - in the previous video of this series i
93:06 - showed you how to use an if block to
93:08 - execute a block of code conditionally in
93:11 - other words to decide whether or not to
93:14 - execute a block of code
93:16 - the if block allows you to use one of
93:18 - the three constructs of high-level
93:20 - programming languages
93:22 - namely selection
93:25 - in this video i want to say more about
93:27 - the if block and the kind of tests that
93:30 - we can perform with an if block
93:32 - i've already created a new windows forms
93:35 - application and i've put three controls
93:37 - on the form i have a label a text box
93:40 - and a button
93:41 - notice that i've named the text box txt
93:45 - exam score
93:47 - and i've named the button
93:49 - btn get grade
93:51 - the idea is that the user of this
93:53 - application will type in an exam score
93:55 - and then the program will calculate the
93:57 - grade
93:59 - let's write the code and see how we can
94:01 - use logical operators to build complex
94:04 - conditions
94:06 - i'll start by capturing the score into a
94:08 - variable
94:12 - i'm assigning the contents of the text
94:14 - box to an integer variable called i
94:17 - score
94:18 - now the first thing i want to do is
94:20 - check whether it's a valid score
94:22 - let's suppose that you can only score
94:24 - between 0 and 100 on this test
94:39 - there's a few things to notice here
94:41 - i'm asking if the score is less than
94:45 - zero this is the less than symbol
94:48 - and let me be clear less than zero means
94:51 - minus one minus two minus three
94:54 - zero is not actually less than zero zero
94:57 - is equal to zero
94:59 - i'm also checking to see if the score is
95:02 - bigger than one hundred
95:04 - given that you can't score more than one
95:06 - hundred on this particular exam anything
95:09 - bigger than one hundred would be invalid
95:12 - if the score is less than zero or the
95:15 - score is greater than 100 then we'll
95:17 - display a message saying this is not a
95:19 - valid score
95:21 - i'm also giving the user of my
95:22 - application some guidance i'm not just
95:25 - telling them what they did was wrong i'm
95:27 - telling them what they should do instead
95:28 - which is good practice for an error
95:30 - message
95:31 - then notice i'm exiting the program
95:35 - i've put another line of code here just
95:37 - to prove the point
95:38 - when we drop out of the if block
95:40 - normally this line of code would be
95:42 - executed
95:44 - but because i've said exit sub this will
95:47 - force the program to stop there and then
95:51 - let's give it a try
95:56 - if i type a score of let's say -1
96:01 - this is not a valid score i'm getting
96:02 - the error message
96:04 - let's try a score of 101.
96:09 - again not a valid score let's try a
96:12 - score of 99
96:16 - and i want you to notice that we've
96:18 - dropped out of the if block and we're
96:20 - getting that message at the end of the
96:21 - program saying all done it hasn't
96:23 - actually done anything yet we'll deal
96:24 - with that in a moment
96:28 - just to be sure
96:29 - i should really test the value zero
96:34 - zero is valid zero is a perfectly good
96:36 - value and i should also test the value
96:39 - 100
96:41 - and that's fine as well
96:45 - so that's the beginning of my exam
96:47 - checker program and i'm using something
96:50 - called a logical operator
96:52 - the word or is one of three logical
96:55 - operators which you'll come across
96:59 - the less than symbol
97:01 - and the greater than symbol are called
97:03 - relational operators
97:08 - that is the condition clause of my if
97:10 - statement and because it's effectively
97:12 - performing more than one test we call it
97:15 - a complex condition
97:19 - now before i try and work out what the
97:21 - grade for a particular score is i'm
97:24 - going to keep it really simple and just
97:26 - test to see whether somebody has passed
97:28 - or failed
97:36 - so if the score is bigger than or equal
97:40 - to 50 it's a pass
97:42 - if the score is less than 50 it's a fail
97:46 - notice the greater than or equal to
97:49 - symbol that's another relational
97:51 - operator
97:53 - let's give it a whirl
97:56 - a score of 45
97:59 - is a fail
98:02 - and notice all done is being displayed
98:04 - unconditionally
98:06 - that's going to happen one way or the
98:07 - other
98:13 - a score of 55 is a pass
98:18 - now it's good practice when you're
98:20 - testing a program like this to try all
98:22 - of the boundary values and by boundary
98:24 - values i mean 50 is a boundary
98:28 - 100 is a boundary zero is a boundary
98:32 - so let's try a score of 50.
98:35 - 50 is a pass
98:38 - it's also a good idea to test parts of
98:41 - the program that we've already tested
98:43 - because when you add new code you might
98:46 - introduce bugs
98:47 - so i'm going to test less than zero
98:49 - again
98:52 - minus five is not valid
98:56 - and neither is 105
98:58 - it seems to be working
99:01 - now you might have already noticed that
99:04 - i've used three
99:06 - separate if blocks
99:08 - in the previous video i showed you one
99:10 - if block with multiple else if clauses
99:13 - and i'd like to point out the difference
99:15 - between the two
99:17 - i'm going to set a breakpoint on this
99:19 - program and run it up again
99:21 - and we'll put in a failing score
99:26 - let's say
99:27 - 30
99:28 - and now i'll step through the code
99:32 - so we assign the contents of the text
99:34 - box to the variable
99:37 - we check to see if the contents of the
99:39 - variable are within range in this case
99:42 - they are so we jump to the end of this
99:44 - if block
99:46 - then we check to see if the score is
99:48 - greater than or equal to 50 which it
99:50 - isn't
99:51 - so we jump to the end of this if block
99:53 - and then finally we check to see if the
99:55 - score is less than 50 which it is
99:57 - and we report that it's a fail
100:03 - all done
100:08 - let's do that again but this time i'm
100:10 - going to put in a passing score
100:15 - let's say 75
100:20 - assign the content of the text box to
100:22 - the variable check that it's in range
100:24 - which of course it is so we jump to the
100:26 - end of the first if block
100:28 - check to see if the score is bigger than
100:30 - or equal to 50 which it is
100:32 - report that it's a pass
100:36 - and now we're checking to see if the
100:38 - score is less than 50 which of course is
100:41 - unnecessary we're doing a test that we
100:44 - don't need to do we've already
100:46 - established that it's a pass
100:53 - to make my program more efficient
100:56 - i'm going to use a single if block
100:59 - with multiple else ifs
101:08 - my validation test where i checked to
101:11 - see that the score was actually within
101:13 - range i could have left as a completely
101:16 - separate if block but don't forget there
101:19 - was an exit sub in there and it may well
101:21 - be that there's some code i want to
101:23 - execute unconditionally at the bottom of
101:26 - the program
101:27 - if you use exit sub early on that won't
101:30 - happen
101:31 - so i've included this as well inside the
101:33 - if block with multiple lcif's let's give
101:36 - it a go
101:40 - a score of 67 is a pass all done let's
101:43 - step through it and watch what's
101:44 - happening
101:51 - the score is in range
101:54 - the score is bigger than or equal to 50
101:57 - so we report a
101:58 - pass and then we drop out of the if
102:01 - block we don't need to do any more tests
102:10 - so although it's perfectly reasonable to
102:12 - have multiple if blocks each performing
102:15 - a separate test
102:16 - it may be better to use a single if
102:19 - block with multiple else ifs and then
102:21 - the program doesn't have to work as hard
102:24 - now admittedly with a little program
102:26 - like this i'm not going to notice a lot
102:28 - of difference but as you start writing
102:30 - longer more complex programs then small
102:33 - adjustments will add up and your program
102:36 - will run faster
102:39 - okay it's one thing writing a program
102:42 - that works efficiently
102:44 - but it also has to be robust we want a
102:48 - program that you can't crash and i can
102:51 - crash this one easily watch
102:55 - i'm typing text into the text box rather
102:58 - than a number
103:03 - invalid cast exception conversion from
103:06 - string 10 to type integer is not valid
103:10 - this makes the point that when you type
103:13 - something into a text box it's a string
103:15 - there's the word ten with double quotes
103:17 - around it
103:19 - and i'm trying to put that string into a
103:21 - variable that's designed to hold
103:24 - integers whole numbers
103:26 - i'll run the program again with a
103:27 - breakpoint but this time i'll be a
103:29 - well-behaved user
103:38 - notice that the text box contains the
103:41 - string 1-0
103:44 - the text box does not contain a number
103:46 - it's a string of characters but because
103:48 - i'm trying to assign it to an integer
103:50 - variable vb will attempt to convert it
103:54 - into an integer and the string 1 0 can
103:57 - be converted into the number 10 so
103:59 - everything is fine
104:01 - the program does not crash
104:03 - the text 1 0 in double quotes has been
104:06 - converted into the number 10.
104:10 - converting data from one type to another
104:14 - is called casting and vb was able to do
104:16 - the cast
104:17 - let's run it again with something it
104:19 - can't handle
104:26 - vb will attempt to convert the string
104:28 - five into a number and of course
104:33 - that is an invalid cast it can't do it
104:38 - the last thing i want to do is give my
104:41 - program to a user who can inadvertently
104:44 - crash it
104:45 - so let's add some extra code to get
104:47 - around this problem
104:52 - before i attempt to initialize the
104:55 - variable i score with the contents of
104:57 - the text box i'm going to test to see
105:00 - whether or not vb will be able to
105:02 - convert it into a number
105:05 - like this
105:14 - is numeric is a special built-in
105:17 - function which will allow me to test
105:19 - whether or not something can be
105:21 - converted into a number in this case i'm
105:24 - testing the contents of the text box
105:27 - let me be clear it doesn't convert it
105:29 - into a number it simply asks the
105:31 - question can it be converted into a
105:33 - number
105:34 - when i perform this test the outcome
105:37 - will either be true if it can be
105:38 - converted or false if it can't so i'm
105:41 - saying if is numeric equals true if it
105:44 - can be converted into a number then
105:48 - i will do this line of code i'm
105:50 - initializing the variable conditionally
105:53 - if it can't be converted then i give an
105:56 - appropriate error message and i am
105:58 - exiting the program this time because
106:00 - there isn't much i can do with that data
106:02 - unless it is actually a number
106:06 - so there's my little validation routine
106:08 - let's give it a go
106:12 - in some text
106:15 - you must enter a number
106:17 - and i'm not getting the all done message
106:19 - because i've forced an exit from the
106:21 - program
106:24 - now there's one more thing i can do
106:26 - just to improve the efficiency of the
106:28 - program a little bit and that's to tell
106:30 - vp that i want to convert the contents
106:32 - of the text box into an integer rather
106:35 - than allowing vb to make the decision
106:38 - for me and i can do it like this
106:43 - c int is short for convert to integer
106:48 - and of course my program is only going
106:50 - to do this if it can i've already made
106:52 - sure of that with my is numeric test
106:56 - if i left this out it would still work
106:59 - but i'm leaving it up to vb to decide
107:02 - what to convert the contents of the text
107:04 - box into an integer a double a single
107:07 - and it will make that decision based on
107:09 - the variables data type
107:11 - i'm just taking the decision out of vb's
107:14 - hands and it will result in a very
107:16 - slight improvement in performance
107:21 - i'll talk more about special inbuilt
107:24 - functions in another video but you've
107:26 - seen two already is numeric and c int
107:37 - in the previous video i showed you how
107:39 - to write this little routine to check if
107:41 - an exam score was a passing score or a
107:44 - failing score
107:46 - i made use of one of three logical
107:48 - operators i used the or operator
107:52 - in this video i want to say a little bit
107:54 - about the other two logical operators
107:57 - namely and
107:59 - and not
108:01 - i'll be adding more else if clauses to
108:03 - my if block to come up with a grade for
108:05 - a particular score rather than just pass
108:08 - or fail
108:09 - in the previous video i also paid
108:11 - particular attention to validating the
108:13 - user's input
108:15 - you can see my program has an if block
108:17 - right at the start to check if the
108:19 - user's input can be converted into a
108:22 - number and if it can then it does it
108:24 - converts it into an integer
108:26 - i've explicitly performed the type
108:28 - conversion also known as a cast using
108:31 - the c inter function
108:34 - if i hadn't used c int then v b would
108:37 - have done the cast for me if it could
108:40 - if v b does it it's known as implicit
108:43 - type conversion
108:45 - explicit type conversion is more
108:47 - efficient
108:48 - before we add some more logic to this
108:51 - program i just want to point out that
108:53 - it's not perfectly robust yet
108:56 - i can still crash this let me show you
108:58 - how
109:02 - you've seen that if i type text i've
109:04 - essentially trapped the error but what
109:07 - if i put in a number which is too big
109:12 - that is an extremely large number
109:16 - and it's crashed my program
109:19 - an integer variable occupies four bytes
109:22 - of memory that is 32 bits
109:26 - so the maximum number of values that you
109:29 - can store in an integer variable is 2 to
109:32 - the power 32
109:34 - it works out to about 4 billion
109:37 - now since we also need to store negative
109:39 - integers that means we can go from about
109:42 - minus 2 billion to positive 2 billion
109:46 - the number i entered was bigger than 2
109:48 - billion and i've got what's known as an
109:50 - overflow exception
109:52 - there's a possibility that the person
109:54 - who's using my program might type in a
109:57 - very large number and trigger this
109:59 - runtime error
110:00 - this is a fairly easy one to sort out
110:03 - i'm just going to change the user
110:04 - interface
110:09 - notice that my text box has a max length
110:12 - property that's the maximum number of
110:14 - characters i can type into the text box
110:17 - you can see it's over 32 000. i can type
110:20 - 32
110:21 - 767 characters into this text box well
110:25 - my exam score is never going to be
110:27 - bigger than let's say a hundred so if i
110:30 - limit the number of characters that you
110:31 - can type into the text box to let's say
110:34 - three then the maximum value you can put
110:37 - in there is 999 a simple fix
110:44 - i can't enter a number bigger than three
110:47 - characters long
110:51 - now let's add some more logic to the if
110:54 - block
110:55 - depending on the score i want to award a
110:57 - grade which is either a b c d e or f
111:02 - i'm going to keep the test which checks
111:04 - to see if the data is within range but
111:07 - i'll add some more else if clauses
111:14 - if you score less than or equal to 20
111:17 - that is a grade f
111:26 - if you score more than 20
111:28 - and less than or equal to 30 that is a
111:31 - grade e
111:33 - notice the use of the logical operator
111:36 - and what i'm saying is the score must be
111:39 - bigger than 20
111:41 - and it must also be less than or equal
111:44 - to 30.
111:52 - a score between 31 and 40 will get you a
111:56 - d
112:02 - and anything between 41 and 50 we'll
112:05 - call that a c
112:12 - in this particular examination anything
112:15 - between 51 and 70 will get you a b
112:19 - notice i've got a syntax error there's a
112:21 - red wavy line what's it telling me
112:26 - expression expected not particularly
112:29 - helpful
112:30 - but this is actually quite a common
112:32 - mistake when you're writing complex
112:34 - expressions which include logical and
112:36 - relational operators
112:39 - i need to include i score again right
112:42 - here
112:45 - if i'm using a relational operator to
112:47 - compare two things such as a variable
112:50 - and a number then i have to say what two
112:53 - things i am comparing i have to be
112:56 - explicit
112:59 - okay so every other school is going to
113:01 - get you a grade a so i can just use an
113:04 - else clause now
113:08 - and that is all of the possibilities
113:10 - taken care of now notice i've been very
113:13 - very careful not to overlap the ranges
113:17 - of scores
113:19 - this range is between 21 and 30
113:22 - inclusive
113:24 - this range is between 31 and 40
113:28 - inclusive there's no overlap
113:32 - if for example i made this mistake
113:35 - and i said greater than or equal to 30
113:38 - then a score of 30 falls into this range
113:41 - and it falls into this range then my
113:44 - program might not work i might get some
113:46 - peculiar results so just be very careful
113:49 - about that
113:54 - if you think about what's going on here
113:56 - a score of 30 is not covered either by
113:59 - this test or by this test think it
114:02 - through and you'll see that a score of
114:03 - 30 will actually get you a grade a
114:11 - but that should be fine
114:14 - there's one more logical operator which
114:16 - i haven't mentioned and to be honest i
114:19 - don't really need it in this scenario
114:22 - but i can make use of it just to
114:23 - illustrate how it works
114:25 - instead of asking if the score is out of
114:28 - range
114:29 - i'm going to just turn the logic of that
114:31 - question around and ask if the score is
114:34 - not in range
114:42 - in a sense it's the same question if the
114:45 - score is not in between one and a
114:49 - hundred then it must be out of range
114:52 - now all that remains is to test the
114:55 - program thoroughly
114:57 - there are several possible execution
115:00 - paths and i should really test them all
115:04 - i should also make a point of testing
115:06 - things which i've tested before for
115:08 - example my validation routine here
115:11 - i need to make sure that i haven't
115:13 - introduced any bugs when i added new
115:15 - functionality
115:17 - this is called regression testing
115:20 - i should also check all of the boundary
115:22 - values i should try a value of 0 a value
115:25 - of 100 a value of 20 30 40 70 and i
115:30 - should also try valid values within the
115:32 - ranges which i've specified in my if
115:34 - statement namely 25 35 45 60 75.
115:41 - if you don't test thoroughly and then
115:44 - you start adding more code to this then
115:46 - you're building on shifting sand
115:49 - do it carefully now and you'll save
115:51 - yourself a lot more work later on
115:59 - and straight away i found a problem it
116:02 - is possible to score zero on an exam
116:11 - that should have been greater than or
116:13 - equal to zero
116:17 - that's better
116:22 - as i said make sure that you test every
116:25 - possible pathway through the program
116:42 - i'm going to show you an alternative to
116:44 - the if block
116:46 - another way to perform selection in your
116:48 - code
116:49 - i've created a new project let's pop a
116:51 - text box on there to capture some input
116:53 - and a button to run my program
117:03 - the idea is that the user types in the
117:06 - temperature maybe 15 degrees and then
117:09 - the check temperature button will tell
117:11 - the user whether it's cold freezing warm
117:13 - hot that kind of thing
117:19 - and although i could allow vb to do the
117:21 - implicit type conversion for me i'm
117:24 - going to do it explicitly
117:28 - remember a text box captures text input
117:31 - i'm converting it into an integer
117:34 - i'm not going to worry about my program
117:36 - crashing if the user doesn't behave
117:38 - themselves and type in a number
117:42 - now this is what the select case
117:44 - construct looks like
117:46 - it begins with the word select
117:48 - case and then the name of the variable
117:50 - which i want to test
117:53 - in this case i temperature
117:55 - and it finishes with end select
117:58 - and now i'm going to say in case i
118:01 - temperature is
118:02 - equal to zero
118:05 - i will output the message freezing
118:09 - if the temperature is less than zero i'm
118:12 - going to output an appropriate message
118:14 - for that as well
118:19 - if the temperature is between 1 and 10
118:22 - that's cold
118:26 - notice the syntax case 1 2 10 that means
118:30 - everything between 1 and 10 inclusive so
118:33 - 1 and 10 are included as well
118:36 - if it's between 11 and 20 it's warm
118:43 - and let's say everything else is hot
118:48 - and there it is the select case
118:51 - construct
118:52 - now i could have done exactly the same
118:54 - thing using an if block but arguably
118:56 - this is a little easier to read it's
118:59 - somewhat easier to see what's going on
119:02 - by the way i could execute multiple
119:05 - lines of code as a result of each test
119:15 - okay it's a bit silly but you get the
119:17 - point
119:18 - i'm selecting one block of code or
119:21 - another depending on the outcome of a
119:23 - test
119:24 - let's give it a try
119:30 - minus five is sub zero
119:34 - zero is freezing
119:36 - water will freeze and you can go skating
119:41 - hate is cold
119:44 - 15 is warm
119:47 - and 200 is hot
119:54 - you should really test all of the
119:56 - boundaries as well so you should see
119:58 - what happens if you enter a 1 or a 10 or
120:00 - 11 20 and then something incredibly big
120:04 - this program can be crashed as well
120:06 - because we could type in some text but
120:08 - of course we could add some additional
120:10 - logic to validate the data before the
120:12 - code gets into the select case block
120:16 - by the way there are some other things i
120:18 - can use in a case statement for example
120:22 - i could say case 1 comma two comma three
120:26 - comma four five
120:29 - and that's an alternative to saying one
120:31 - to ten
120:32 - so if it isn't a continuous range of
120:34 - values which i'm testing that would be
120:36 - the way to go
120:39 - and i can use all of my relational
120:41 - operators when i'm composing a test as
120:43 - well so for example here i've used a
120:46 - less than sign but i could use greater
120:48 - than i could use less than or equal to
120:50 - greater than or equal to not equal to
120:53 - the same as if i was building a test for
120:55 - an if block
120:58 - now you might be wondering why bother
121:00 - with an if block at all why not use
121:02 - select case every time
121:04 - well there is a particular limitation
121:07 - when it comes to select case you can
121:09 - only test one variable at a time
121:14 - let's say for example we've also
121:16 - captured the wind speed
121:23 - i've just hard coded a value for the
121:25 - purpose of demonstration
121:27 - i can't do something like this with a
121:30 - select case construct
121:36 - i'm testing the contents of two
121:39 - variables using a logical operator
121:42 - with a select case construct i can only
121:45 - test one variable at a time
121:50 - i could however nest an if block inside
121:54 - the select case construct something like
121:56 - this
122:02 - so if the temperature is less than zero
122:05 - we'll report that it is sub-zero and
122:07 - then we'll check the wind speed and if
122:09 - the wind speed is bigger than 20 we'll
122:11 - report that it's going to feel really
122:13 - cold
122:18 - you'd like to give it a try yourself
122:20 - maybe rewrite the exam grading program
122:22 - to use a select case construct instead
122:25 - of an if block
122:28 - by the way
122:29 - different programming languages might
122:31 - well have their own equivalent to the
122:33 - select case construct
122:35 - c sharp for example uses the switch
122:38 - construct but it does pretty much the
122:40 - same thing
122:42 - if you see pseudo code on an exam paper
122:45 - it may well be written like this i've
122:47 - commented it out because it won't work
122:49 - in visual basic but you can see the
122:51 - concept is pretty much the same
123:03 - i'm going to show you the third of the
123:06 - three fundamental constructs of high
123:09 - level programming
123:10 - namely iteration
123:13 - it's iteration means executing a block
123:16 - of code repeatedly
123:18 - iteration is also known as looping and
123:21 - there are two ways you can do this in
123:22 - vb.net
123:24 - one of them is with a for loop and the
123:27 - other is with a do loop
123:29 - in this video i'm going to focus on the
123:31 - for loop
123:32 - i've already created a new windows forms
123:34 - application and i've placed a button on
123:37 - the form so let's get right into the
123:39 - code
123:41 - to make something execute repeatedly i
123:44 - need a way to count the number of
123:45 - repetitions i need a way to count the
123:48 - number of iterations so i'm going to
123:50 - declare a variable of type integer
123:55 - it doesn't really matter what i call the
123:57 - variable i've called it i count because
123:59 - i'm going to count my way through a loop
124:02 - the for loop looks like this
124:07 - any code that i write between for and
124:09 - next will execute repeatedly in this
124:12 - case five times because i'm counting
124:14 - from one to five let's begin with a
124:17 - simple message
124:20 - give it a try
124:23 - hello once
124:25 - twice
124:26 - three times
124:27 - four times
124:28 - five times
124:32 - now that was a single line of code but
124:34 - let's put a couple more inside the loop
124:39 - try it again
124:40 - hello how are you well i hope once
124:45 - hello how are you well i hope twice
124:53 - so these three lines of code are
124:55 - executing in sequence
124:57 - five times
124:59 - let's take it back down to one line for
125:01 - now
125:05 - i can display the value of i count as
125:07 - part of the message like this
125:14 - hello1 hello2 3
125:17 - 4
125:18 - 5.
125:20 - let's do something a little more
125:21 - interesting my program will beep every
125:24 - time we pass through the loop
125:32 - the beep command is very straightforward
125:37 - threading.thread.sleep
125:38 - means pause for three seconds
126:01 - something nice about a looping construct
126:03 - such as the for loop is i can change the
126:05 - number of iterations as easily as this
126:11 - the code inside the loop will now
126:13 - execute 50 times i can also change the
126:17 - step value like this
126:23 - so i'm going to count up from one to
126:25 - fifty five at a time
126:39 - perhaps it makes more sense to count
126:41 - from zero
126:54 - i can also count backwards
127:01 - in this case i'm counting from 50 to
127:04 - zero and i'm stepping minus five at a
127:07 - time
127:18 - if i want to display the output in a
127:20 - single message box rather than separate
127:23 - message boxes i could do something like
127:25 - this
127:33 - inside the loop i'm not doing any output
127:36 - i'm simply building the output string
127:38 - i'm saying let st out equal whatever it
127:42 - used to be
127:43 - and then something else in this case the
127:45 - value of i count along with a new line
127:48 - operator
127:49 - this time i only have one message box
127:52 - outside of the loop
127:57 - and that's quite a common technique
128:03 - so there it is the for loop
128:05 - in the next video we'll look at the do
128:07 - loop
128:08 - and then following that you'll see how
128:10 - the looping constructs really come into
128:12 - their own when working with array
128:14 - variables
128:23 - before we move on and look at another
128:25 - iteration construct i thought it would
128:27 - be a good idea to get some practice in
128:29 - with what you've already learned
128:32 - i've written a program here which makes
128:34 - use of an if block and a couple of for
128:37 - loops
128:39 - i'll show you what it does first then
128:41 - you can pause the video and try to write
128:43 - it yourself
128:45 - when you're ready you can look at my
128:46 - solution
128:48 - my button has the text count up od or
128:51 - even because that's what it does let's
128:54 - see
128:58 - first i'm asked what number do you want
129:00 - to count up to i'd like to count up to
129:02 - 10.
129:05 - then i'm asked do you want odd numbers
129:07 - or even numbers
129:09 - notice i'm using an input box here
129:12 - you've seen this in an earlier video
129:15 - i want
129:16 - the even numbers
129:19 - and my program comes back with 2
129:23 - 4
129:24 - 6
129:25 - 8
129:26 - 10.
129:28 - let's run it again
129:31 - what number do you want to count up to i
129:32 - can choose any number i like i'll go
129:34 - with 10 again
129:36 - odd or even numbers let's try the odd
129:38 - numbers this time
129:40 - 1
129:41 - 3
129:43 - 5
129:44 - 7
129:45 - nine
129:46 - and that's it let's just give it one
129:47 - more try
129:49 - let's count up to 20.
129:52 - odd or even let's go with odd again
130:01 - so that's the idea
130:03 - if you want to try writing this program
130:05 - yourself pause the video now and give it
130:08 - a go and then you can resume the video
130:10 - when you're ready to see my solution
130:13 - i should say there's no one way to solve
130:16 - this problem
130:31 - and here's my solution
130:34 - i've declared a variable called imax
130:37 - which is the number the program will
130:39 - count up to
130:41 - it's an integer variable
130:42 - i've declared a string variable called
130:45 - st odor even which will store order or
130:48 - even depending on what the user types in
130:50 - and then i have another variable called
130:51 - x which will be my loop counter
130:54 - it'll control passage through the count
130:56 - controlled loops
130:58 - i start by asking the user what number
131:00 - they would like to count up to that
131:02 - value gets assigned to imax then i ask
131:05 - the user do you want odd numbers or even
131:07 - numbers and that gets assigned to st odd
131:10 - or even
131:11 - i now have an if block where i'm testing
131:14 - the value of st odd or even if the user
131:17 - typed in even
131:19 - then we have a for loop which will count
131:21 - up in even numbers
131:23 - notice that i'm starting from two
131:27 - and counting up to imax and i'm using
131:30 - the step clause to say that i want to
131:32 - step two at a time so that's going to
131:35 - give me the even numbers up to the
131:37 - number that the user types in
131:40 - else if st odd or even is equal to odd
131:44 - then i have a for loop which starts at
131:47 - one
131:48 - runs to imax but also steps two at a
131:51 - time so we start with one then we add
131:53 - two then we add two and so on
131:57 - as i said this is just my solution you
132:00 - might have come up with something
132:01 - slightly different for example you might
132:03 - have used two separate if statements
132:06 - like this
132:09 - and that's fine because it will work
132:11 - having said that using a single if block
132:15 - with an else if clause is a little bit
132:17 - more efficient because this program will
132:20 - have to perform both tests
132:30 - did you get something similar
132:32 - did yours work if not why not try my
132:35 - approach
132:44 - you previously saw how to make a line of
132:46 - code or indeed a block of code execute
132:49 - repeatedly using a for next loop like
132:52 - this one here
132:54 - i'm using a variable which i've named x
132:56 - to count my way through the loop let's
132:59 - just remind ourselves what it does
133:09 - personally i tend to avoid using letters
133:11 - of the alphabet for variable names i
133:14 - like the names to be a little bit more
133:15 - meaningful so i'm going to rename x to
133:18 - something a little more appropriate
133:25 - i've called it i count instead
133:28 - i because it's an integer and count
133:31 - because that's what it's for it's to
133:33 - count my way through the loop
133:35 - in this video i want to show you an
133:37 - alternative way to make a line of code
133:39 - or a block of code execute repeatedly
133:42 - i'm going to show you something called
133:44 - the do while loop
133:46 - i'm referring to it as the do while loop
133:49 - because most people do but as you'll see
133:52 - in a moment it comes in a number of
133:54 - different forms
133:55 - here's one of them
134:02 - now you might be tempted to give this a
134:05 - try as it stands i strongly recommend
134:08 - that whenever you're writing code that
134:10 - contains looping constructs you should
134:12 - always save your code first
134:16 - watch what happens when i run this
134:20 - hello hello
134:27 - this will go on forever just saying
134:29 - hello zero let's see if we can work out
134:32 - why
134:33 - i need to stop the program fortunately i
134:36 - can still see this red square
134:38 - here so that will force the execution to
134:41 - stop
134:44 - i've said that i want the loop to repeat
134:48 - while the value of i count is less than
134:51 - or equal to
134:52 - five immediately after you've declared a
134:56 - numeric variable it will contain zero
134:59 - so by the time we get to this line of
135:01 - code i count contains the value zero
135:04 - which of course is less than or equal to
135:06 - five
135:07 - so we output hello zero
135:10 - when the loop repeats i count is still
135:13 - zero its value hasn't changed so we
135:16 - output the message again
135:18 - and then the loop repeats again and
135:21 - again and again it's called an infinite
135:24 - loop
135:25 - it will go on forever
135:28 - because i'm using a do while loop i need
135:31 - to make sure that i write some code to
135:34 - increment the value of i count
135:36 - i'm going to increment the value of i
135:38 - count before i do the output like this
135:45 - so all this line of code says is take
135:47 - the value of i count add one to it and
135:50 - then put the result back into high count
135:53 - overwriting what's already there in
135:55 - other words add one to i count
135:58 - so at the top of the loop we check if
136:00 - the value of i count is less than or
136:02 - equal to five which first time around it
136:04 - is it's equal to zero
136:07 - then we increment it so now i count has
136:09 - the value one
136:11 - then we do the output hello one
136:14 - we go back to the top of the loop and
136:16 - because i count is still less than or
136:18 - equal to five we get back into the loop
136:20 - code and we add one to it
136:23 - highcount now has a value of two so we
136:26 - can output hello2
136:29 - and around and around we go until such
136:31 - time as i count is no longer less than
136:35 - or equal to five
136:36 - we've met the so-called exit condition
136:39 - of the loop
136:41 - so we can exit the loop and the program
136:43 - will continue
136:44 - down here let's just put a line of code
136:47 - in here just to prove that the program
136:49 - has dropped out of the loop
136:52 - now let's give it a go
136:55 - hello one
136:57 - two
136:58 - three four five
137:02 - six
137:03 - we'll have to look at that and think
137:04 - about why that's happening
137:07 - and then all done
137:13 - i only wanted to count up to five but it
137:16 - actually counted up to six and that has
137:18 - to do with the exit condition of my loop
137:21 - i said i want to loop while i count is
137:24 - less than or equal to five which means
137:26 - my loop will continue if i count is
137:29 - equal to five
137:31 - when i count is equal to five i add one
137:33 - to it so it becomes six and i do another
137:36 - output
137:37 - all i need to change
137:40 - is that exit condition
137:43 - do while i count is less than five
137:53 - that's
137:54 - better you need to be mindful of the
137:57 - contents of the variable which you are
137:59 - using to count your way through the loop
138:03 - now you might be wondering why do we
138:05 - bother with do while loops when we have
138:08 - four next loops i've had to write more
138:11 - code to get the same effect
138:13 - the answer to that question is that the
138:16 - do while loop is more flexible
138:19 - for example i can say do until
138:24 - i count is equal to five
138:27 - strictly speaking this is not a do while
138:30 - loop this is a do until loop
138:34 - watch what happens when i run it
138:40 - exactly the same effect
138:42 - but it means that i can build an
138:44 - alternative exit condition for a loop
138:47 - and as you'll see later sometimes it's
138:49 - more appropriate to use do until rather
138:52 - than do while
138:54 - i can also do this
138:56 - i'm just going to move this piece of
138:58 - code
139:01 - so i'm saying do
139:03 - this block of code and loop until i
139:07 - count is equal to five
139:09 - let's take a look
139:15 - exactly the same effect
139:17 - but sometimes it's appropriate to put
139:19 - the exit condition at the bottom of the
139:21 - loop
139:22 - this means that the code inside the loop
139:25 - will execute at least once
139:29 - if the exit condition is at the top of
139:31 - the loop it might not execute at all
139:35 - if for example something has set the
139:38 - value of i count to be equal to 5 before
139:41 - we go into the loop like this
139:44 - then the code inside the loop won't
139:46 - execute at all we've already met the
139:49 - exit condition
139:51 - and there's one more form of the do
139:53 - while loop if i may call it that which
139:55 - i'd like to show you
140:05 - loop while i count is less than five
140:13 - does the same thing let's look at those
140:16 - four variations next to each other so we
140:19 - can compare them
140:28 - for loops that do exactly the same thing
140:33 - now we need to be careful here i need to
140:35 - re-initialize the value of i count in
140:37 - between each of these loops
140:40 - it starts off here with a value of zero
140:43 - but by the time we've dropped out of the
140:45 - first loop it will have a value of five
140:53 - as i said you need to be mindful of the
140:56 - value inside the variable which you are
140:58 - using to count your way through the loop
141:01 - for good practice i'm going to
141:03 - explicitly initialize it here as well
141:06 - although i know in this particular
141:08 - program it will have a value of 0 at
141:11 - that point
141:13 - so there you have it
141:14 - four different variations of the do
141:17 - while loop or the do until loop if you'd
141:20 - rather call it that
141:30 - i'm going to show you a useful
141:31 - application of a do while loop
141:35 - i want the user to enter a number and
141:38 - only a number a do loop can be used to
141:41 - repeatedly prompt the user if the data
141:44 - is invalid
141:46 - i'm also going to show you why a do loop
141:48 - is called a condition controlled loop
141:51 - you might remember that a for next loop
141:53 - is called a count controlled loop
141:56 - let's write some code
142:00 - let me show you something which might
142:01 - strike you as rather silly but it makes
142:03 - a very important point
142:17 - i'm using an input box function to
142:19 - prompt the user to type in their name
142:22 - but the name must be kevin so i've
142:26 - placed this instruction inside a do
142:28 - while loop and look at my exit condition
142:31 - do while st name is not equal to kevin
142:36 - when we drop out of the loop i simply
142:39 - output the name that was entered
142:41 - let's give it a try
142:45 - i'll try john
142:46 - that's no good ben
142:48 - nope
142:49 - enzo
142:52 - anything i type is invalid unless
142:56 - it's kevin
143:00 - you can see why this is called a
143:02 - condition controlled loop rather than a
143:05 - count controlled loop
143:07 - i'm not incrementing a variable to
143:09 - determine how many times i pass through
143:12 - the loop
143:13 - there's no loop counter involved
143:17 - let me show you another approach
143:23 - do while true
143:25 - equals true
143:27 - i could have just as easily said do
143:29 - while one is equal to one
143:32 - that might strike you as a rather
143:34 - ridiculous exit condition because one
143:36 - always equals one essentially what i've
143:39 - written here is an infinite loop
143:42 - true equals true is more
143:44 - typical in fact i can just say do while
143:49 - true it means exactly the same thing
143:52 - but if i have an infinite loop well how
143:54 - do i get out of it
143:56 - i can do this
144:00 - i capture the input test it to see if
144:02 - it's what i'm looking for and if it is
144:04 - then i force an exit from the do loop by
144:07 - using the command exit do
144:10 - once again you can see that i'm not
144:12 - counting my way through the loop i'm
144:14 - exiting the loop in a different way
144:18 - so how is all of this useful well as i
144:21 - said i want to write a program to prompt
144:23 - the user to enter a number and only a
144:26 - number take a look at this
144:48 - i've declared two variables
144:50 - one called sth
144:53 - because i want to capture the user's age
144:55 - but notice i've declared it as a string
144:59 - and then i've declared another variable
145:01 - called i age which is an integer
145:04 - i'm prompting the user to enter their
145:07 - age
145:08 - and i'm assigning the value to sth
145:12 - this is a temporary measure so that i
145:14 - can test sth
145:17 - and look at my exit condition
145:19 - do while is numeric sth equals false
145:25 - in other words while whatever the user
145:27 - types in cannot be converted into a
145:30 - number
145:31 - to understand this you need to
145:34 - appreciate that the input box function
145:36 - always captures a string
145:39 - so for example if i'm prompted to type a
145:42 - number and i type let's say 59 i'm
145:45 - actually typing the string
145:47 - five nine
145:50 - if i attempt to assign that string to a
145:52 - numeric variable like i age it'll be
145:56 - fine visual basic will do something
145:58 - called implicit type conversion it will
146:01 - automatically convert it into an integer
146:04 - because it can for example this line of
146:08 - code
146:11 - will be absolutely fine as long as the
146:14 - user types in a string that can be
146:17 - converted into an integer
146:19 - if however when this line of code
146:21 - executes the user types in a string like
146:24 - hello it will crash the program because
146:27 - visual basic can't automatically convert
146:30 - that string into something we can save
146:32 - into an integer variable
146:35 - i'm trying to prevent my program
146:37 - crashing for that reason
146:39 - so instead i'm asking the user to type
146:42 - in their age but i'm storing it into a
146:44 - string variable it doesn't matter what
146:47 - they type when we assign it to a string
146:49 - variable it'll work
146:52 - but because i want a number i keep
146:54 - asking the user to type something until
146:56 - such time as i can convert it into a
146:58 - number and that's what is numeric is
147:00 - telling me whether or not a variable's
147:03 - contents can be converted into a number
147:06 - i could ask the same question in a
147:08 - slightly different way like this for
147:10 - example
147:14 - do while is numeric is not equal to true
147:17 - it means the same thing as do while is
147:19 - numeric equals false i can even ask the
147:21 - question like this
147:25 - do while not is numeric
147:28 - it's the same exit condition just
147:29 - phrased in a different way
147:31 - i'm using a logical operator this time
147:34 - instead of a relational operator
147:36 - it really is a case of take your pick
147:41 - so we are repeatedly prompting the user
147:43 - to type in something we can convert into
147:46 - a number and when the user finally types
147:48 - in something that we can convert into a
147:50 - number
147:51 - we do so
147:53 - i'm using one of the type conversion
147:55 - functions this time c int that's short
147:58 - for convert to integer so i'm converting
148:01 - this string into an integer and i know
148:04 - that this line of code is not going to
148:06 - crash because we wouldn't have got this
148:08 - far in the program unless the user typed
148:10 - in something that i could convert
148:13 - this is called explicit type conversion
148:16 - it's also called casting when we change
148:19 - the data from one data type to another
148:23 - let's give it a try
148:26 - i'll start with some text
148:29 - that's invalid so i'm being prompted
148:31 - again let's try some different text
148:34 - again i didn't type something which can
148:36 - be converted into a number so the loop
148:38 - continues
148:39 - let's try typing nothing at all
148:42 - i'll just click ok
148:44 - well that's no good either because
148:46 - that's what we call a zero length string
148:48 - think of a pair of quotes with nothing
148:50 - in between
148:52 - if i press the cancel button
148:55 - again that's invalid
148:58 - i can't get out of this until i type
149:00 - something that can be converted into a
149:02 - number
149:06 - remember that might look like 123
149:09 - but it's actually the string one two
149:11 - three
149:12 - but it's a string that can be converted
149:15 - into a number
149:19 - so we drop out of the loop convert the
149:21 - input into a number store it in ih and
149:24 - then display it in the message box
149:28 - so there you go a condition controlled
149:30 - do while loop which i'm using to capture
149:34 - input and validate it at the same time
149:45 - in this video i'm going to talk about
149:47 - array variables
149:49 - as you'll see array variables are
149:51 - particularly useful when you want to
149:53 - store a large number of related data
149:56 - items
149:57 - in fact once you've learned about array
150:00 - variables you'll be able to write some
150:02 - very very useful programs
150:06 - before i begin let's quickly review
150:08 - what's going on inside the computer's
150:09 - memory when we use regular variables
150:14 - when this line of code executes the
150:17 - operating system will set aside a piece
150:20 - of memory and it will give it the name s
150:23 - t fruit
150:25 - the exact location of this piece of
150:27 - memory is entirely up to the operating
150:29 - system it doesn't really concern us as
150:32 - programmers
150:33 - but suffice to say no other program can
150:36 - use that piece of memory it belongs to
150:39 - this program
150:41 - immediately after a string variable has
150:44 - been declared it will contain something
150:48 - it contains a zero length string think
150:51 - of a pair of double quotes with nothing
150:53 - in between them
150:56 - if you declare a numeric variable for
150:58 - example an integer then immediately
151:01 - after declaration it will contain the
151:03 - value zero
151:05 - for the purposes of this discussion we
151:07 - don't really need to worry about this
151:10 - zero length string
151:12 - when this line of code executes
151:14 - i'm assigning a value to the variable
151:18 - i'm putting the text banana in there
151:21 - when i output the contents of a variable
151:24 - it doesn't change the contents of the
151:26 - variable we're simply taking a copy of
151:29 - what's in the variable and then
151:30 - displaying it on the screen
151:33 - my variable still contains the text
151:35 - banana
151:37 - this line of code will overwrite the
151:40 - existing contents of the variable we're
151:43 - replacing the text banana with the text
151:46 - orange
151:47 - the original contents of the variable
151:49 - are now lost
151:51 - when this line of code executes
151:54 - a separate piece of memory is being set
151:56 - aside
151:57 - this time the piece of memory is called
151:59 - st fruit 2. no prizes for guessing what
152:02 - that's going to be storing
152:05 - the exact location of this second
152:08 - variable again depends on the operating
152:10 - system
152:11 - one of the main functions of the
152:12 - operating system in my case windows 10
152:16 - is to manage the memory
152:20 - this line of code assigns the string
152:22 - pineapple to st fruit 2.
152:26 - when this line of code executes a copy
152:30 - of the contents of st fruit are assigned
152:33 - to st fruit 2.
152:36 - so orange overwrites pineapple
152:40 - by the time we get to the final message
152:42 - box statement both variables contain the
152:45 - same thing
152:50 - now
152:50 - let's talk about
152:52 - array variables
152:54 - suppose that i want to store and process
152:57 - several different items of fruit
153:01 - i could do it like this
153:25 - i've declared five separate variables
153:29 - and i've initialized them individually
153:33 - if i want to output the contents of one
153:35 - of those variables that's
153:36 - straightforward enough as long as i know
153:38 - the name of the variable
153:43 - that will output pineapple
153:45 - but using regular variables like this to
153:49 - store a group of related data items is
153:52 - actually quite cumbersome what if i
153:54 - wanted to store 10 items of fruit or
153:57 - even 100 items of fruit
154:00 - i'm going to end up with rather a lot of
154:02 - code
154:04 - instead of using five separate string
154:08 - variables i'm going to use one array
154:10 - variable like this
154:28 - i've used quite a lot of copying and
154:30 - pasting to speed things up
154:32 - i'm also going to change the name of
154:34 - this variable just to indicate that it
154:37 - is actually an array variable i'm going
154:40 - to prefix the name with hey
154:49 - a because it's an array
154:51 - st because it's an array of strings and
154:54 - fruits because well that's what these
154:56 - are
154:57 - you could actually call your array
154:59 - anything you like but as you write more
155:02 - code you'll see the benefits of a naming
155:04 - convention
155:05 - to understand what's going on here again
155:08 - we should visualize what's going on
155:09 - inside the computer's memory when i
155:12 - declare an array variable like this i'm
155:15 - actually saying that i want to set aside
155:18 - a group
155:19 - of memory locations
155:21 - to be more precise i'm setting aside a
155:24 - group of contiguous memory locations
155:28 - contiguous means adjacent next to each
155:31 - other
155:32 - the number four means that i want a
155:35 - group of five memory locations
155:39 - it might strike you as odd but in
155:40 - computer science we generally count from
155:43 - zero we say that the array is zero based
155:49 - each location in that group of memory
155:51 - locations is referred to as an element
155:55 - so i have five elements numbered from
155:57 - zero to four
156:00 - when this line of code executes i'm
156:02 - putting the text banana into element
156:05 - zero
156:07 - this line of code puts orange into
156:09 - element one
156:10 - pineapple into element two strawberry
156:13 - into element three and mango goes into
156:17 - element number four
156:20 - i'm referring to each element by its
156:23 - index number
156:25 - when i want to reference one of those
156:27 - data items again i use the index number
156:30 - so in this case i'm outputting the
156:32 - contents of ast fruits 2 element number
156:36 - 2
156:37 - pineapple
156:40 - let's give it a try
156:43 - as expected
156:47 - let's output orange i just have to
156:50 - change the two to a one
156:57 - if i want to output mango i'll type a
156:59 - four here
157:03 - i can also reference an element of an
157:05 - array less directly let's declare an
157:08 - integer variable
157:10 - i'm just giving it the name i
157:12 - i'm going to assign a value to that
157:14 - variable
157:15 - and now i'm going to use the contents of
157:17 - i to reference an element of the array
157:23 - can you see what the program will output
157:26 - this time
157:27 - i is equal to 3
157:29 - so this reads as ast fruits 3
157:34 - it will output strawberry
157:38 - indeed it does
157:42 - let's change the value of i to 0.
157:47 - now i'm out putting banana
157:50 - banana is the zeroth element of the
157:52 - array
157:54 - we can run into trouble though watch
157:56 - this
157:58 - i'm setting the value of i to be equal
158:01 - to eight
158:02 - my array variable only has five elements
158:05 - numbered from zero to four there is no
158:08 - element number eight
158:10 - so what happens when i run the program
158:12 - now
158:16 - index out of range exception
158:19 - my program has crashed it's crashed
158:22 - because it can't find element number
158:25 - eight there's no such thing
158:27 - let's reset the program
158:30 - now there's one more thing i would like
158:33 - to show you
158:34 - which is where the real power of array
158:37 - variables comes in
158:40 - i want to output each of those items in
158:43 - turn
158:44 - so i am going to iterate through the
158:47 - array using a for next loop
158:49 - watch this
158:54 - for i equals naught to four output ast
158:58 - fruits i
159:00 - first time through the loop i is equal
159:02 - to zero so this
159:04 - will output banana
159:07 - second time through the loop i will be
159:08 - equal to one so we output orange then i
159:12 - is incremented to two and we output
159:15 - pineapple and so on until such time as i
159:18 - equals four
159:20 - let's give it a try
159:30 - and you can imagine i can iterate
159:33 - through a hundred array elements
159:35 - just as easily as i can iterate through
159:38 - five
159:40 - give this a try yourself
159:42 - perhaps you can set up an array with ten
159:44 - elements instead of five
159:53 - in this video i'm going to invite you to
159:56 - practice what you've already learned
159:59 - there are eight exercises here involving
160:01 - array variables and loops which you
160:04 - might like to try coding up yourself
160:06 - i'll show you what they do and then it's
160:08 - up to you if you want to give them a go
160:10 - alternatively you can jump straight to
160:12 - my solutions later on in this video
160:16 - by the way all of these programs start
160:19 - with the same six lines of code
160:21 - all of them declare an array variable of
160:24 - integers with five elements
160:27 - and then the array is initialized as you
160:30 - can see here
160:32 - but it's important to realize that your
160:34 - programs have to work with any data not
160:36 - just these
160:39 - so let's see what they do
160:42 - the first exercise is to output each
160:45 - item in a separate message box one after
160:48 - another well you've already seen how to
160:50 - do this in a previous video
160:53 - i'm using a loop to scan through the
160:55 - array
160:59 - exercise 2 output all of the items in
161:02 - the same message box but on separate
161:05 - lines
161:09 - exercise three is to add up all of the
161:12 - items and output the total in a message
161:14 - box
161:17 - they add up to seventy five
161:21 - in exercise four we calculate the
161:24 - average of the items
161:28 - the average value is fifteen
161:33 - very similar to exercise three except
161:35 - we're dividing the total by the number
161:37 - of items
161:42 - in exercise five we are only adding up
161:45 - the items that are bigger than twenty
161:49 - there are two items in the array which
161:51 - are bigger than twenty namely thirty
161:53 - three and twenty two and they add up to
161:55 - fifty five
161:56 - we're still doing this with a loop but
161:59 - as we visit each item we're deciding
162:01 - whether it's bigger than 20 or not
162:05 - in exercise six this is a little bit
162:07 - trickier you have to find the largest
162:10 - item and output it in a message box
162:13 - the biggest item is thirty three
162:16 - and let's be clear the program is
162:19 - working out which is the biggest item
162:23 - if you can do exercise six you'll find
162:25 - exercise 7 very easy exercise 7 is
162:29 - finding the smallest item
162:32 - and exercise 8 is replacing each item in
162:36 - the array with a new value that is twice
162:39 - as big
162:40 - and then we output those values in
162:42 - pretty much the same way as we did in
162:44 - exercise two
162:48 - so if you want to give them a try
162:50 - yourself pause the video now and see
162:52 - what you can come up with alternatively
162:54 - you can jump straight to the solutions
163:00 - so let's take a look at my solutions
163:02 - the objective of exercise one was to
163:05 - output each item in a separate message
163:07 - box one after another
163:10 - you've seen how to do this in a previous
163:12 - video i start by declaring an array of
163:15 - five integers and then i initialize the
163:18 - array
163:20 - in order to scan the array i need a loop
163:22 - counter so i've declared an integer
163:24 - variable called i and that controls the
163:27 - number of passes through the for loop
163:30 - then i say for i equals naught to 4
163:34 - output ai data
163:36 - element number i
163:38 - so first time through the loop i is zero
163:41 - that outputs the first item second time
163:43 - i is one i output the second item and so
163:46 - on until i is equal to four we output
163:49 - the last item and we drop out of the
163:51 - loop
163:56 - in exercise 2 we want to output all of
163:59 - the items in the same message box
164:02 - so we don't have an output command
164:04 - within the loop we're simply building a
164:07 - string
164:08 - i've declared a string variable called
164:10 - st out and inside the loop i say st out
164:14 - equals whatever it used to be plus the
164:17 - next item in the array
164:19 - i'm also concatenating a new line
164:22 - operator on there as well so the string
164:24 - actually contains the information needed
164:26 - to throw a new line between each item
164:30 - when we drop out of the loop we display
164:33 - the output string in one go
164:41 - the solution to exercise 3 is similar to
164:44 - the solution to exercise 2.
164:47 - we want to calculate the total of the
164:49 - data items so i've declared a variable
164:52 - called i total to contain this
164:55 - and then as we visit each item in the
164:57 - loop i say i total equals whatever it
164:59 - used to be
165:01 - plus
165:02 - the next item
165:04 - i'm using the addition operator instead
165:06 - of the concatenation operator this time
165:11 - when we drop out of the loop i display
165:13 - the total
165:14 - in one message
165:19 - the objective of exercise 4 was to
165:22 - calculate the average well this is
165:24 - pretty much the same as the previous
165:26 - exercise i calculate the total first
165:29 - and then when i display the message i
165:31 - simply divide the total by five
165:38 - with exercise five the objective was to
165:41 - add up all of the items bigger than 20.
165:45 - so in some ways it's similar to the
165:47 - previous program i've declared a
165:49 - variable to hold the total
165:51 - but look what's going on inside the for
165:53 - loop
165:54 - i'm adding the next value to the total
165:57 - conditionally
165:59 - i'm testing each value first to see if
166:02 - it's bigger than 20 and if it is i add
166:05 - it to the total if it isn't well i don't
166:09 - if you think about it adding up all of
166:11 - the items which are let's say smaller
166:13 - than 20 would require a very simple
166:15 - change all i'd need to do is change this
166:17 - relational operator to a less than sign
166:24 - in exercise 6 you were invited to write
166:27 - a program to find the largest item in
166:29 - the array
166:32 - the principle behind this program is to
166:34 - visit each item in the array and if it's
166:37 - bigger than the previous item then keep
166:39 - a record of it so i've declared a
166:41 - variable called imax which will hold the
166:44 - maximum value and i've initialized it to
166:47 - zero which pretty much guarantees that
166:49 - everything is going to be bigger than
166:51 - imax to begin with
166:53 - assuming i'm only working with positive
166:55 - numbers
166:57 - when i visit the first item inside my
167:00 - loop i ask is it bigger than i max
167:04 - well of course item zero the number five
167:07 - is bigger than imax it's bigger than
167:09 - zero
167:10 - so i'm assigning the first item to imax
167:14 - overwriting its previous value
167:17 - imax now contains a five five is the
167:20 - biggest item we've found so far
167:23 - second time through the loop i examine
167:25 - the second item and i ask is it bigger
167:28 - than imax in this case well seven is
167:30 - bigger than five so i replace five with
167:34 - seven
167:35 - i'm keeping track of the biggest item
167:38 - third time through the loop same
167:40 - question and i replace seven with 33
167:44 - but fourth time through the loop i find
167:47 - that 22 is not bigger than 33
167:51 - so this line of code doesn't execute
167:55 - by the time the program's finished imax
167:57 - contains the biggest value
168:05 - if you can solve exercise 6 then you can
168:07 - solve exercise 7 very very easily
168:11 - this time i have a variable called i min
168:13 - which is going to hold the minimum value
168:16 - and i'm initializing it with a very
168:18 - large value something that i know is
168:20 - bigger than anything else in the array
168:23 - i've made it ten thousand
168:25 - when i visit the first item i ask is it
168:28 - smaller than i min well of course it is
168:31 - 5 is smaller than 10 000.
168:34 - so i min becomes the first value and
168:36 - then we proceed pretty much as we did in
168:38 - the previous program by the time we drop
168:41 - out of the loop we have the smallest
168:43 - value
168:49 - the objective of exercise eight was to
168:51 - replace each item in the array with a
168:54 - new value twice as big
168:57 - i actually want to change the contents
168:59 - of the array and that's what this loop
169:01 - does
169:02 - it's actually very simple
169:04 - i say let a i data the item i'm looking
169:07 - at be equal to itself
169:10 - multiplied by two
169:13 - so by the time we drop out of this loop
169:15 - the array contains a completely
169:16 - different set of data
169:19 - and then the remaining code simply
169:21 - outputs those data in a single message
169:24 - box just like in exercise two
169:32 - now even if you didn't solve these
169:34 - problems yourself it's well worth trying
169:36 - to duplicate the code that you can see
169:38 - here it will definitely help you get a
169:41 - feel for using array variables with
169:44 - loops
169:51 - in this video i'm going to show you how
169:53 - to implement a linear search
169:56 - a linear search is one of many standard
169:59 - algorithms that you'll come across as a
170:02 - programmer
170:03 - the principle of a linear search is to
170:05 - examine a list of items one at a time to
170:08 - see if it contains an item that we're
170:10 - looking for
170:13 - i've already declared an array of ten
170:15 - strings and you can see i've initialized
170:17 - it with various items of fruit
170:20 - by the way you can see that the program
170:22 - contains the data that we're going to
170:24 - search we say that the data has been
170:27 - hard coded into the program
170:30 - this is untypical in reality a program
170:33 - wouldn't normally have the data written
170:35 - into it like this
170:37 - you'll see in later videos that a
170:39 - program can actually read the data in
170:41 - from an external file perhaps a database
170:44 - or a text file or a spreadsheet or even
170:47 - a web page
170:49 - you'll also see how one program can call
170:52 - another and pass it some data to work
170:54 - with
170:55 - for the purposes of demonstrating a
170:57 - linear search hard coding the data like
171:00 - this is absolutely fine
171:04 - we'll start by prompting the user for an
171:07 - item to search for we'll call it the
171:10 - target value
171:13 - so i've declared a variable to store it
171:15 - and to keep things simple i'll use an
171:17 - input box to prompt the user
171:24 - now i'm going to use a loop to scan
171:27 - through the array to visit each item one
171:30 - at a time
171:31 - i'll need a loop counter
171:34 - and i'm going to use a for loop i could
171:36 - use a do loop it's a matter of
171:37 - preference a for loop will mean i can
171:40 - write slightly less code
171:42 - as i visit each item i'm going to check
171:46 - to see if it's the target value i can do
171:48 - this with an if statement
171:58 - now this isn't the finished product but
172:00 - it's well on the way let's see what
172:02 - happens
172:22 - i'm getting a message for every item
172:25 - which is not the one i'm searching for
172:28 - but i did get a message saying it found
172:30 - it
172:31 - let's try it again
172:35 - i'm looking for a star fruit this time
172:38 - there is no star fruit in the list
172:50 - well it's on the way but i don't want a
172:53 - message for every item which isn't the
172:56 - one i'm looking for
172:57 - so let's improve it
173:00 - rather than doing some output inside the
173:03 - loop
173:04 - i'm simply going to keep a record of
173:06 - whether or not i found it
173:09 - and to do this i'm going to use a
173:11 - boolean variable
173:16 - a boolean variable can have one of two
173:18 - possible values true or false
173:22 - immediately after it's been declared
173:24 - it'll have a value of false
173:27 - so inside the loop if i find what i'm
173:30 - looking for i'm going to set b found to
173:33 - be equal to true
173:37 - and i don't need an else clause
173:40 - because if we don't find what we're
173:42 - looking for b found will never get set
173:45 - to true and when we exit the loop b
173:47 - found will still be false
173:50 - all that remains to be done now is to
173:52 - test be found once we get out of the
173:55 - loop to see if it's equal to true
174:03 - let's see what happens
174:08 - we'll start by looking for something
174:09 - that we know is in the list
174:13 - found it just one message
174:16 - let's try again we'll search for
174:18 - something else that we know is in the
174:20 - list
174:23 - yes there's a fig
174:26 - what about something that isn't in the
174:28 - list
174:32 - not found
174:35 - now just a couple of words of warning
174:36 - when you're comparing strings in vb.net
174:40 - string comparisons are case sensitive so
174:43 - for example if i search for banana with
174:46 - a small b
174:50 - not found however banana with a large b
174:55 - is found
174:58 - you've seen something similar to this in
175:01 - an earlier video i can remove the case
175:03 - sensitivity of a string comparison like
175:06 - this
175:11 - so i'm comparing the uppercase version
175:13 - of the target with the uppercase version
175:16 - of the array item
175:19 - i can achieve exactly the same effect
175:21 - like this
175:24 - l case means lowercase so i'm comparing
175:26 - the lowercase version of the target with
175:29 - the lowercase version of the item in the
175:31 - array
175:32 - and it's probably worth mentioning this
175:34 - as well
175:39 - i can use dot 2 upper instead of u case
175:44 - now there's one more improvement i can
175:46 - make to the efficiency of my program if
175:49 - i find what i'm looking for there's no
175:51 - point in examining all of the other
175:53 - items in the array
175:58 - if b found gets set to true then we can
176:02 - force an exit from the for loop
176:05 - for example if we're searching for apple
176:08 - and we set b found to true there's no
176:10 - point in looking at all of the other
176:12 - items in the array we already know it's
176:15 - there
176:18 - so there you have it
176:19 - a standard linear search
176:30 - if you're going to write code to create
176:33 - and manipulate a two-dimensional array
176:35 - variable
176:36 - it's essential that you can visualize
176:39 - the data you're working with
176:41 - very often a two-dimensional array
176:43 - variable is used to store groups of
176:46 - related data items like the data you can
176:49 - see here
176:50 - a two-dimensional array can therefore be
176:53 - thought of as a table
176:56 - these are the data we're going to use in
176:58 - this video
177:00 - each row of the table contains the
177:02 - details of a different famous person
177:06 - the first column contains their first
177:08 - names the second contains their last
177:10 - names
177:11 - the third column is gender
177:14 - then we have nationalities and finally
177:16 - their occupations what it is each person
177:19 - is famous for
177:21 - notice that each column has an index
177:23 - number
177:24 - counting starts from zero so the fifth
177:27 - column is column number four
177:30 - each row also has an index number and
177:33 - these are also numbered from zero
177:37 - it's useful to think of this table as
177:39 - having a horizontal dimension which
177:42 - we'll refer to as the x dimension
177:45 - and the vertical dimension which we'll
177:47 - refer to as y
177:49 - just like the x and y axes of a line
177:51 - chart
177:53 - when you're coding up a two-dimensional
177:55 - array for a different set of data i
177:58 - strongly recommend that you keep a
178:00 - sketch of it handy like i'm going to do
178:02 - now
178:09 - i can declare my two-dimensional array
178:11 - variable like this
178:17 - i'm using a naming convention here
178:20 - a because it's an array variable st
178:23 - because it's an array of strings and
178:25 - people because that's what the data is
178:29 - in brackets i've specified the x
178:31 - dimension first followed by a comma and
178:34 - then the y dimension
178:36 - and i've used the as clause to specify
178:39 - that this is an array of strings
178:43 - now i'm keeping my sketch of the data
178:45 - handy while i populate this array
178:48 - it's important to get this right
178:50 - otherwise you might get some very
178:51 - peculiar behavior when you run your
178:54 - program
178:56 - i want to put barrack in the first
178:59 - column and the first row
179:04 - i want obama in the second column and
179:07 - the first row
179:13 - the third column first row contains mail
179:19 - and column number three row number zero
179:22 - contains american
179:28 - it takes a little bit of getting used to
179:30 - counting from zero
179:32 - and the final piece of data for this
179:34 - person is president
179:40 - now it's tempting to start copying and
179:42 - pasting but i want to make sure i get
179:44 - this absolutely right so i'm going to
179:46 - continue entering the values
179:48 - individually just for now working from
179:50 - my sketch
179:52 - let's get the new zealand prime minister
179:54 - in next
180:10 - as with the previous famous person i've
180:13 - specified the column number first
180:16 - followed by the row number i've
180:18 - specified x followed by y
180:22 - notice that the value of x is different
180:24 - for each data item but the value of y is
180:27 - always the same because y is the row
180:29 - number
180:32 - let's do one more very carefully and
180:35 - then i'll speed things up with a bit of
180:36 - copying and pasting
180:51 - and i've just realized that i've made a
180:53 - mistake it's very easy to do
181:04 - that's more like it now you could
181:06 - initialize each individual element of
181:08 - this array in any order you like the
181:11 - important thing being that it's fully
181:13 - initialized but taking a systematic
181:16 - approach like this will help to ensure
181:18 - if not guarantee you won't make any
181:20 - silly mistakes a systematic approach
181:22 - will also help to ensure that all of the
181:24 - data gets in there
181:26 - but i can see a pattern emerging now so
181:29 - i'm going to start copying and pasting
181:30 - to speed things up a little bit
182:06 - now one last look at my sketch just to
182:08 - make sure i've got everything there that
182:10 - should be there
182:11 - and straight away i can see i need to
182:12 - change these twos to fives
182:17 - and there it is the code i need to
182:19 - declare and populate my two-dimensional
182:23 - array
182:25 - so that's how we get data in how do we
182:27 - get data out
182:29 - it's actually very simple if you've ever
182:31 - played a game like battleships
182:38 - with this message box statement i'm
182:40 - going to output whatever is in column 4
182:43 - row three in this case the word
182:46 - scientist
182:50 - what if i want to output let's say new
182:52 - zealand
182:54 - that's in column three row one
183:02 - or perhaps the word swiss that's row
183:05 - three column three
183:10 - it's just a matter of supplying the
183:12 - appropriate coordinates
183:15 - i can also supply these coordinates
183:17 - using
183:24 - variables now i could call these
183:26 - variables anything i like but it makes
183:28 - perfect sense to call them x and y
183:32 - can you see which data item will be
183:34 - output by this message box
183:37 - let's see
183:43 - now just like a one-dimensional array
183:45 - the real power of a two-dimensional
183:48 - array is realized when you combine it
183:50 - with looping constructs
183:53 - let's suppose i want to output all of
183:55 - the information about barack obama
183:59 - notice that with barack obama it's the x
184:02 - dimension which is changing from zero to
184:05 - four but the y dimension remains at zero
184:09 - i can do this
184:19 - in fact i don't even need the variable y
184:31 - suppose instead i want to output the
184:33 - details of mahatma gandhi again it's the
184:36 - x value which varies but the y value
184:39 - stays the same in this case y remains at
184:42 - four
184:55 - you should make sure that you're
184:56 - comfortable with this idea before you
184:58 - continue
185:00 - let's try ada lovelace ada lovelace is
185:03 - in row number two so the value of y has
185:06 - to remain the same inside this loop it
185:08 - has to be two
185:17 - alternatively i might decide that i want
185:20 - to display all of the values in a
185:21 - particular column for example i might
185:24 - want to display all of the last names
185:27 - if we examine the data we can see that
185:29 - every last name has the same value of x
185:33 - obama is one zero ardern is one one
185:37 - lovelace one two einstein won three
185:41 - gandhi is one four and van gogh is one
185:44 - five
185:45 - it's the value of y which is changing
185:48 - this time
185:49 - so i could write my loop like this
185:54 - but notice that y varies from zero to
185:57 - five
186:02 - so this time it's the value of x which
186:04 - is remaining the same inside the loop
186:07 - but y is the value that changes
186:18 - perhaps i want to display all of the
186:20 - nationalities
186:21 - looking at the code i can see that all
186:23 - of the nationalities have an x value of
186:26 - 3.
186:42 - again you should make sure that you're
186:43 - comfortable with doing this before you
186:45 - proceed
186:47 - in the next video i'll show you how we
186:49 - can get all of the data out using nested
186:53 - loops
187:05 - in this video i'm going to show you how
187:07 - you can systematically visit each and
187:10 - every item in a two-dimensional array
187:13 - as in the previous video i recommend
187:15 - that you keep a sketch of your data
187:17 - handy to help you visualize what's going
187:20 - on
187:20 - here's a sketch of the data i'm working
187:22 - with
187:23 - you may for example want to display all
187:26 - of the data items one at a time row by
187:29 - row like this
187:30 - the data are being visited one whole row
187:33 - at a time but as each row is visited
187:36 - every column in the row is visited
187:39 - we say that the data in the array are
187:41 - being visited row wise
187:44 - here's what the output of a program that
187:45 - does this looks like
188:02 - alternatively you might want to visit
188:04 - the data column wise like this
188:07 - a program that does this deals with one
188:09 - complete column at a time
188:11 - but as each column is visited all of the
188:14 - rows in that column are visited
188:17 - and here's what the output would look
188:18 - like
188:31 - if you can systematically visit all of
188:33 - the data items in an array one way or
188:36 - another then you can collect the data
188:38 - into a single output string then output
188:41 - everything at once like this
188:48 - visiting the data also allows you to
188:51 - search for something in particular
188:53 - for example you can ask the user for a
188:55 - surname and then find all the details of
188:57 - that person like this
189:00 - so let's take a look at some code and
189:01 - see how this can be done
189:05 - i'll begin by writing some code to
189:07 - display the data row wise
189:10 - i've already declared the array and i've
189:13 - already initialized all of the elements
189:15 - of the array just to speed things up
189:17 - this is the same data which you saw in
189:19 - the previous video
189:23 - i need two loop counters because i'm
189:25 - going to use
189:27 - nested for loops
189:31 - if i want to visit one row at a time i
189:35 - need a for loop like this
189:39 - because each row is numbered from zero
189:41 - to five
189:42 - but while i'm visiting a particular row
189:46 - i want to visit each column and i can do
189:49 - it with a for loop like this
189:53 - the columns are numbered from 0 to 4.
189:56 - think of it this way for each pass of
189:59 - the outer loop there will be several
190:01 - passes of the inner loop
190:03 - and now i'm going to output a data item
190:06 - for each pass of the inner loop
190:12 - let's see what happens when we run the
190:13 - program
190:44 - now let's display the data column wise
190:51 - i'm using a different button to run this
190:53 - program but i'm going to copy and paste
190:55 - some code
191:03 - it's the same code i used to declare and
191:06 - initialize the array
191:08 - in a later video i'll show you how two
191:10 - different procedures can share the same
191:13 - data
191:14 - for now we'll proceed like this
191:16 - to visit the data column wise i'm going
191:19 - to use nested loops again
191:27 - but this time i'm going to scan the
191:29 - columns primarily so i'm going to scan
191:32 - across the x dimension using my outer
191:35 - loop
191:37 - and as i visit each column i'm going to
191:40 - visit each row within that column
191:44 - and i need another message box as before
191:50 - let's see how it looks this time
192:04 - to display all of the data in a single
192:06 - message box i need to decide whether i'm
192:09 - going to build the output string in a
192:10 - row-wise fashion or a column-wise
192:13 - fashion
192:14 - i'm going to do it row-wise so again i'm
192:16 - going to borrow some code
192:24 - this is the code that displays the data
192:26 - items individually but column wise
192:34 - i need a string variable to collect the
192:36 - data into
192:39 - and then rather than displaying a
192:40 - message box for each pass of the inner
192:42 - loop i'm going to concatenate some new
192:44 - data to the output string
192:49 - and between each data item i'd like a
192:52 - space
192:54 - because i want each row of data to
192:57 - appear on a separate line within the
192:59 - message box i'm going to concatenate a
193:02 - vb new line character onto the output
193:05 - string but only with each pass of the
193:07 - outer loop
193:13 - and once the nested loops have both
193:15 - finished i can do one output with a
193:18 - single message box
193:21 - let's see if it works
193:30 - the final thing i want to show you is
193:32 - how we can search for the details of a
193:34 - particular person based on their surname
193:36 - for example
193:38 - i don't actually need nested loops to do
193:40 - this i'm going to use the same technique
193:42 - which i showed you in the previous video
193:46 - let's start by declaring and
193:47 - initializing the array
193:54 - and i need some loop counters
193:58 - and i'm going to use a boolean variable
194:00 - to record whether or not i found what
194:02 - i'm looking for
194:05 - i'm going to initialize it as false
194:07 - although to be honest i don't need to do
194:09 - that because immediately after it's been
194:11 - declared it will have a value of false i
194:14 - just want my code to be explicit
194:18 - i'll prompt the user for the target
194:20 - surname using an input box just to keep
194:23 - things simple
194:24 - so i'm going to need a variable to hold
194:26 - the target value
194:35 - i know that the surnames are in column
194:38 - number one so i'm going to write a loop
194:41 - to scan down the rows of column number
194:44 - one only testing each value as i go
194:55 - notice how i've hard coded the value of
194:57 - the x dimension here i'm always looking
195:00 - at column number one
195:02 - as i scan down the column if the data
195:05 - item which i'm looking at matches the
195:07 - target then i'll set my boolean variable
195:10 - to be equal to true and i can force an
195:12 - exit from this for loop
195:15 - by the time i've dropped out of the loop
195:17 - i know whether or not i've found what
195:19 - i'm looking for
195:20 - if i have then i can retrieve the rest
195:22 - of the data for that particular person
195:40 - notice this time i'm scanning across the
195:43 - row
195:44 - the value of y will be whatever it was
195:46 - when the first for loop came to an end
195:49 - so i know this loop is looking at the
195:51 - correct row
195:53 - if b found was equal to false
195:56 - then we simply display a message saying
195:58 - that we can't find what the user was
195:59 - looking for
196:02 - there's one final thing we need to add
196:04 - to this code
196:09 - let's see it in action
196:17 - that seems to be working fine
196:19 - and just to be sure let's look for
196:21 - somebody who isn't in the array
196:27 - that looks okay as well
196:30 - having said that we have an additional
196:32 - message box here which is rather untidy
196:35 - let's put this right
197:00 - that's better
197:03 - you should try writing some of these
197:04 - programs yourself
197:06 - perhaps you could display the data
197:08 - column wise but within the same message
197:10 - box or maybe build a search facility
197:13 - where you enter the person's occupation
197:15 - to retrieve all of their details

Cleaned transcript:

this beginner's course will help you learn the fundamentals of programming with visualbasic.net visual basic is an objectoriented programming language developed by microsoft it's often used to make desktop apps for windows but you can use the programming language for a wide variety of applications and not just on windows kevin drum teaches this course kevin is the head of computer science at a school in the uk kevin will teach you everything from getting visual studio set up for programming to understanding the basic constructs of highlevel programming languages this is an excellent course for anyone who wants to learn visual basic leave a comment with the most interesting thing you learned in this course in this series of videos i'm going to introduce you to programming with visual basic.net inside visual studio so let's begin by launching visual studio and taking a look at some of the features exactly what you see here will depend on which version of visual studio you're using you can see that i'm using visual studio 2019 but essentially the features will be the same you can see i have a list of my most recently used projects on the left hand side on the right i'm going to choose the option to create a new project and again what you see next will depend on which version of visual studio you're using it will also depend on which programming languages you installed you can see that i've installed a number of different programming languages which tells you visual studio itself is not a programming language it's an environment in which you can use a programming language i'm going to use visual basic on the right hand side i can see a number of different project templates which i can choose from and i'm going to create a windows forms app so with the correct option chosen click next you're now invited to give the project a name it's offering me the name windows app2 this is because it's the second application which i've created it's not a very meaningful name so i strongly recommend that you change that perhaps perhaps not i think that's been done before that'll do for now you also need to be mindful of where the project will be saved the location of your project you can see the location of mine will be d visual studio 2019 projects but you can change this in fact i'll show you later that once you're in visual studio you can change the default location this is particularly important if you're working in a school or a college or an organization it may be that you only have permission to save visual studio projects in particular locations notice there's a browse button here if you do want to change the location my solution has the same name as the project i'll say a little bit about the difference between a solution and a project in a moment and i'm going to say that i want to place the solution and the project in the same directory by ticking this box since this is a brand new project i'm not going to worry too much about which version of the net framework i'm using more about that later as well so let's hit create and here is visual studio i can see a little message on the bottom right there telling me that there's a new version of visual studio which can be downloaded i'll maybe do that a little bit later i'll just ignore it for now now there are lots of options here which i'll be talking about as we go along but suffice to say for now we have a menu of options across the top and each of these has a number of sub options which in turn might have a number of sub options there's a toolbar i can add extra toolbars which you'll see later but the most useful one is here to start with on the right hand side i can see my solution explorer a solution is a collection of files that make up my application and we'll take a closer look at these files later i have a properties window which will become important when i start building my user interface and on the left hand side there's a toolbox if i just click on this it will move into view if i click away from it it disappears i actually like the toolbox in place all the time so i'm going to click on this little drawing pin to keep it there and i can resize it if i need to in the middle i've got my form this is where i'm going to start building my user interface so let's write some code i'm going to start by dropping a button onto the form so from my toolbox i click on button draw the button onto the form because the button is selected i can see properties of the button in the properties window on the right hand side i can see for example we have the text property of the button which is currently button one i'm going to change that to press here and notice how it's changed the appearance of the button on the form the other thing i want to change is the name of the button every object that you place on a form will have a name property now it's currently button one because it's the first button which i placed on the form and i could leave it as button one but i want to start using a naming convention btn in lowercase because it's a button and then something meaningful which tells me what the button does for example start you could call the button pretty much anything you like as long as the name doesn't start with a number and as long as there are no spaces or special characters like question marks or exclamation marks in there this naming convention makes it clear what the button does and it also makes it clear that it's a button and that will become important later on when i start writing code there are other properties which i can change as well for example the background color and i have a color palette here which i can use we'll stick with this for now but you'll learn about other properties as and when you need them what i want to do now is write some code that will run when the user of my application clicks on the button to write some code for the button i can double click it the way to think of this is that the code is behind the form my form is still there you can see there's a tab here that's the design view of my form and this is the visual basic view of my form notice that the toolbox no longer has anything on it because it's inappropriate to use it while i'm coding i have line numbers down the left hand side to be honest i don't like these and i'll turn them off in a moment and i can see some code already there and i have to be very careful not to break it for example i can see public class form 1 at the top and end class at the bottom i'm not going to change this these need to be in place in order for the form to work later when you find out more about object oriented programming these two lines will make more sense i can also see the stub of a procedure which will run when the button is clicked private sub button start click notice that's the name that i gave to my button and notice that it's going to handle the click of the button to be more precise it will handle the click event of the button object there's also some stuff going on in brackets here these are called parameters and you'll find out more about parameters later suffice to say leave this exactly as it is for now we're going to write code between sub and end sub so i'm just going to press the enter key a few times and give myself some more room i can also give myself some more room above the procedure and below the procedure sub by the way stands for sub procedure so let's write our first program i'm going to use the message box command notice i'm typing in lowercase and as i type a list of options has appeared visual studio is looking at the letters i'm typing and offering me a command to choose from so i can see msg box here i can ignore it and carry on typing or i can actually select it from the list i'll show you how we can do this more quickly in a moment i'll just press the space bar and i'm going to open a bracket and again there's some more information appearing on the screen it's quite daunting the first time you see this but as you get used to it you'll find it's incredibly useful again i'm just going to ignore it notice how visual studios automatically put the closing bracket on there for me i'm going to open a double quote and again visual studio has automatically put the closing double quote on there and finally i'll type the text of my message hello world all kinds of things have happened here for example notice that msg box has automatically recapitalized that tells me that i typed it correctly i'm getting visual feedback notice also the color coding the literal string which i'm using in my text message is colored differently from the command itself again i'm getting visual feedback on how to use this this is why it's called visual studio let's put another message in now i've just typed the first few letters this time and i'm going to press the tab key on my keyboard to select the rest of it i've saved myself some typing when you get used to it you can write code very very quickly hello world how are you and one more spelling mistake there i'm just going to hold down my control key and tap the left arrow key which will jump me one word at a time through that text and then i can correct my spelling to be honest it doesn't matter what i put inside these double quotes it won't be a problem if on the other hand i mistyped the command i see a red wiggly line underneath it telling me that i've made an error this is what we call a syntax error i'm breaking the rules of the programming language if i move my mouse over it i can see some kind of error message there msg boxes not declared visual studio thinks i'm trying to use something called a variable and i haven't announced that i want to use it more about variables later on let's just get rid of this line altogether okay so there's my program i'll just close up a little bit of the white space i don't need it and i'm going to run the code there's a start button at the top and my form is now on the screen and to test it i'll simply click on the button there's my first message there's my second message and there's my third message and the program has stopped running my procedure may have stopped running but the application itself is still running the form is still on the screen and i can stop this running by pressing the red square up here or i can simply close the form with the red cross here and everything is stopped so there we have it our first program which is just a sequence of messages but it's a program there's one more thing i want to do now and that is to save my work remember a visual studio application can consist of several files so rather than just clicking this little button here which will save the form i'm going to click this button which will save all of the files in my application i can now close down visual studio and return to my application tomorrow in this video i just want to show you how we can customize the integrated development environment the ide that is visual studio so let's start it up again and i'm going to open up the project that i was working on last time notice that it's in the recent files list so i could just click on it here alternatively i can click on open a project or solution let's do it this way for now so we can see which file we need to open up here's my d drive this is where i'm storing my projects and here's the one i was working on last time notice it's a folder inside that folder there's a solution file sln that's the file which ties together all of the other files that make up my application that's the file which i need to open and here's the application i was working on last time here's my form and here's the code behind it a little word of warning first of all sometimes you might accidentally double click on the background of the form itself watch what happens when i do this i've got another procedure stub here called form1 load any code which i write in here will automatically run when i run up the application which will cause the form to load but i don't need this so i'm going to get rid of it i'm simply going to delete this procedure stub another word of warning you might accidentally or even deliberately click on this where it says one reference let's take a look i've clicked on that something has appeared and i'm going to click on this as well i have another tab across the top and what i can see here looks very complicated indeed this is code which runs when you run the form but you don't really need to see it if you're a beginner in fact it's quite daunting when you look at it suffice to say for now it's actually initializing the form it's setting up the form and it's placing the button on there and it's changing various properties of the button i strongly recommend you leave this alone until you have a better understanding of what it does i'm just going to close down this tab and i'm back to something more familiar anyway what i want to talk about now is how we can customize this programming environment you were given some options when you ran it up for the first time but you can change those options inside tools options notice i'm using a color theme blue but you can change it to dark if you wish some people much prefer this to be honest i don't i prefer black on white not white on black it really is a matter of preference i'm going to switch it back to the way it was i can also have finer control over the keyword colors and over the text colors and any other colours that you see on here for that matter we can do this by selecting fonts and colours you can see there's a lot of options here keyword the default color is blue and i can switch that to magenta you do need to be a little bit careful though because some colors have special meanings and it can start looking very messy as well if needs be you can change things back notice there's an option here to use defaults some people like to increase the font size as well it's entirely up to you something else i want to change to give myself some more room on the screen is to switch off these line numbers i can do that by going to text editor all languages and then here line numbers notice i can have different configurations depending on the programming language i'm using and there's one more thing i want to change and that's some of the default file locations i can do that underneath projects and solutions locations you can see i've already set my project's location to my d drive needless to say there are lots more options which you can set in here and i'll be honest i don't know what half of them are but when i need them i'll find them click ok for your changes to take effect in this video about visual basic.net i want to say more about output and i'm going to introduce you to variables i'll start by creating a new project as before it'll be a windows forms application in visual basic give the project a meaningful name and think about where it's going to be saved you can change this if necessary let's start with a button on the form and i'm going to rename the button get in the habit of renaming things that you place on the form as you go along btn that's my convention and then go this is called camel notation because of the capital g it looks like a camel with a hump on its back i'm also going to change the text property of the button and let's write some code that will run when the user clicks on the button to get to the code behind the form i doubleclick the button let me just remind you you mustn't change or delete this if you do you'll start seeing errors on the screen watch straight away i've got a syntax error up here class statement must end with matching end class i'll just use the undo button to put it back again and i'm going to give myself some white space just give myself a bit more room on the screen here we've already seen that we can display a message on the screen using the message box command like this to test it i simply press the start button that will run the form up and then i can run my code by clicking on the button itself now there are three fundamental constructs when it comes to programming that i'd like to mention now the first of these is sequence the second is selection which you'll see in a later video and the third is iteration which you'll also see in a later video for now let's just say a little bit about sequence sequence simply means that each statement in a program or a block of code will run one after another in sequence so for example i could display each of these words separately run the program press the button and one message after another and i'll stop my application with this red square if i want to display these words in reverse order i can simply change the order of the commands i'm just dragging and dropping and tidy up some of the white space you can have as much or as little white space as you like whatever makes it easy for you to read the program let's give this a try before i continue and talk about variables i just want to show you another command i can use to display a message on the screen messagebox dot show let's take a look this is another message it does exactly the same thing to be honest this is a bit of an old style command which has existed from very early versions of visual basic this is a more modern way of doing things this is an objectoriented approach and it'll make more sense why you might do it this way later when you find out more about object oriented programming for now you can either use msgbox or messagebox.show i'm going to continue with msg box so now let's talk about variables i'll start by placing another button on the form because i want to write a separate procedure switch to the form and drop another button on there notice i'm getting some guidelines as i drag the button around and resize it this helps me to create a nice layout for my form okay let's get in the good habits of naming objects as we go along so i'm going to call this btn variables and i'll change the text property as well to write the code as before double click and you can see i now have a new procedure stub i can start writing my code here let's give myself a little bit more white space below and a little bit less at the top here so what is a variable well a variable is actually a location in the computer's memory where a program can temporarily store data while it's running and while that sounds a little bit complicated they're actually very easy to set up and use let's say for example i want to create a variable to store somebody's first name the first thing i need to do is declare it i need to announce that i want to use a new variable and i do this using the dim statement like this now there are a number of things going on in this command first of all the word dim is short for dimension because i'm actually setting aside a certain amount of memory i'm specifying the size or the dimension of the variable the amount of memory being set aside depends on this which is the data type of the variable when it comes to string variables one byte of memory will be needed for each character in the string but to be honest i don't need to worry too much about that visual basic will look after the memory for me or to be more precise the runtime engine that visual basic depends on will take care of the memory for me the other thing i'm doing is i'm giving my variable a name and again notice that i'm using camel notation and i've prefixed it with st because it's a string variable that's just a convention which i'm going to encourage you to use you might want to know what data type a variable is just by glancing at its name so that's my variable declaration i've got a green wavy line underneath it to tell me that i haven't done anything with it yet unused local variable so let's now assign a value to it notice i'm typing in lowercase i'm being offered the name of the variable in a list so i'll just press the tab key to select it and i'll say st first name is equal to my first name notice that the green wavy line has disappeared now because i'm using the variable in earlier versions of visual basic you would have to use the let command in front of this you'd say let st first name equal kevin let it become kevin in this version of visual basic we don't use let at all but what you need to appreciate here is i'm putting the string kevin into that piece of memory which i set aside because the string is one two three four five characters long it's going to take up five bytes of memory as i said before though you don't really need to worry too much about that okay now i'm going to output the contents of that variable and i'll do that using messagebox notice that i haven't put double quotes around the name of the variable because i want to output its contents i don't literally want to output the string st first name let's see what happens i'm outputting the contents of the variable i want to make the message a little bit more friendly so i'm going to join the contents of the variable with some literal text like this you can see that this is a literal string because it's inside double quotes and this is the contents of my variable and i'm using the concatenation operator which is an ampersand to join the two together we call this string concatenation i can concatenate something onto the end of it as well again another concatenation operator let's see the effect hello and welcome kevin i hope you are well i want you to notice that i put spaces inside these text strings notice there's a space after the letter e let's just remove it for a second and see what happens i've also got a space there inside the string immediately before the eye i'll just take that out as well look what happens you can see the message is a little bit messy let's tidy it up okay i'm going to declare another variable to hold my last name so another dim statement and i'll assign a value to this variable as well and i'll include the last name as part of the message a common mistake is to not use enough ampersands watch what happens if i get rid of this one you can see i have a syntax error the message isn't particularly helpful but i know that there's something wrong with the way i've concatenated this string together so let's put the concatenation operator back in place another common mistake is not to use enough double quotes so again i'll take out one of those double quotes and you can see that the whole thing seems to be a problem one little error and i've got red wavy lines all over the place this is not particularly helpful just remember double quotes and brackets come in pairs if you have an opening double quote there has to be a matching closing double quote if you have an opening bracket there has to be a matching closing bracket let's try this now you can see kevin drum has come out as one word there's no space in between the two i can fix this easily i need to concatenate a space in between those two variables a space is just another character let's take a look much better notice that i've put my dim statements my variable declarations at the top of the procedure i didn't have to do this as long as i declare a variable before i try to assign a value to it i can put my dim statement wherever i like so for example i could declare the last name here and then assign a value to it that's absolutely fine what i mustn't do is try to assign a value to it before i declare it you can see i have a syntax error local variable st last name cannot be used before it has been declared the sequence of operations is important although what you can see here is perfectly okay i like to put all of my declarations at the top of the procedure keep them all together it actually makes the code easier to manage particularly when you have a lot of code i told you that a variable was a temporary storage location which your program can use while it's running when this program has done its job and it comes to an end the memory being used by the variables will be released it'll be freed up for something else to use but i can change the contents of a variable while the program is running that's why it's called a variable its contents can vary so for example i can do this i'm just going to copy these two lines of code paste them underneath they're still part of the procedure and i'm assigning new values to those variables which i'll output in the same way as i did before i can just borrow this line of code and copy it so watch what happens when i run the program hello and welcome kevin drumm i hope you are well hello and welcome mervyn drake i hope you are well this makes the point that the contents of a variable can change while the program is running i can assign different values to those variables at run time in the next video i'll say more about the different data types that you can use when you declare a variable and what implications this has for your code in this video i want to say more about different variable data types i'm going to store some details about a car let's start with a new button on the form give it a name and change the text property doubleclicking will allow me to write the code okay so i'm going to start with a couple of string variables to store the make and the model we've come across string variables already let's assign some values a ford escort a classic car i also want to store the number of doors that this car has this time i'm using a data type of integer an integer is just another name for a whole number notice the naming convention i'm using i doors i for integer i want to store the color of the car this is going to be another string variable i want to store some information about whether or not this car has been taxed this time i'm using a data type of boolean named after the computer scientist george boole a boolean variable can have one of two values true or false this car has been taxed boolean variables are good when you have yes no type data for example whether somebody is a vegetarian or not whether something is switched on or something is switched off i also want to store the engine size another integer 1200cc i'd like to store the price of this car i'm using a data type of decimal decimal is the most suitable data type when you want to store money values i could have used double and i could have used single because all three data types decimal double single allow me to have a decimal point with decimal places after it but double is twice as accurate as single i can have more decimal places and the data type decimal is the most accurate of them all which makes sense when you're doing calculations with money the final thing i want to store is the date that the car was registered so i'm going to use a data type of date there's a special way that i have to assign a value to a data variable notice i'm using the hash symbols to enclose the date i should also point out that this is not the 11th of february but the 2nd of november when you type a date you need to type it in american format which is the month followed by the day followed by the year when i display this on the screen for example in a message box it'll be displayed according to the settings in my computer's control panel you'll see in a moment that my computer is set up to display dates in british format now let's build a message box command to display all of this data notice the concatenation operators between the variable names and notice also that i'm concatenating spaces between these data items now you can see i have a bit of a problem here with reading the code i've written on the screen nevertheless let's test it and see if it runs there's my message and it looks okay notice that the day and the month of the date are the other way around from the way i coded it i've written the date in american format but it's being displayed in british format what i'd really like to be able to do is display each data item on a separate line within the same message box let's see how to do that instead of concatenating spaces in between each data item i'm going to type a special constant i'll say more about constants later suffice to say i'm just going to type vbnewline and i'll replace each space with this let's just copy and paste it ctrl c to copy ctrl v to paste i still need the same number of concatenation operators to join all these different bits and pieces together let's see how it looks now well that is certainly a nicer message but now i want to do something about the problem that i can't actually read the whole line of code i could give myself some more space on the screen by just dragging this bar across a little bit but even then i can't read the whole line of code i essentially want to wrap this text on the screen well i can do this after the ampersand here in fact i can put this pretty much anywhere i'm just going to leave a space and then type an underscore character when i press enter i've moved the rest of the line onto the next line down i can do that again here notice the underscore characters have actually disappeared but this is still just one line of code it won't change the appearance of the message box but it just allows me to read the code more easily on the screen let's make sure it still works yeah that's absolutely fine in the next video i'll show you how we can capture input from the user of an application so we can assign the contents of these variables at runtime rather than hard coding the data like we've done here i want to show you how to capture input from the user of your application and i'll be doing it by means of this form and you'll also see how to use some of these extra controls that we can place onto a form before i do let me just show you a quick and easy way we can capture input from the user by means of the input box function i'll drop a button on the form first give it a name and a text property doubleclick to write the code the input box function will capture one piece of data specifically it'll capture a string i'll need a variable to put that piece of data into so let's declare a string variable first of all and then i can assign a value to it by means of the input box function just like this and to prove it works i'll output the contents of that variable i'm concatenating the word hello in front of it let's give it a try press the button to launch the procedure and there's the input box prompt please enter your first name that's working fine so it's a quick and easy way to prompt the user for some input but what i really want to talk about in this video is how we can use controls on the form to capture input so i'm going to delete the code you can see here and do something else instead let's go back to the form i'm going to place a text box on the form here it is in the control toolbox i'll give the text box a name notice at the moment it's called text box one i've prefixed the new name with txt to indicate that it's a text box and then i'm calling it first name because that's the data i want to capture i'm trying to keep the name meaningful notice the camel notation as well you'll see the benefit of doing it this way in a few moments i'm also going to put a label on the form so that the user of the form knows what to type into the text box here's the label control and again i'm going to change its name to keep it meaningful lbl for a label and then something to indicate its purpose a label also has a text property which i'm going to change and you can see that is what appears on the form while i'm at it i'm going to add another text box to capture the user's last name and a matching label and one more text box to capture the user's gender notice that a text box also has a text property but anything i type in here will actually appear in the text box it will become the default data if a user doesn't type something into the text box i'm going to leave it blank and we'll have another matching label to go with this text box there are a couple of things you need to be aware of when you're placing controls on the form each control must have a unique name so this one you can see i called it txt first name there's the name property and this one i called txt last name let me just make the mistake of giving this text box the same name as the other one and see what happens property value is not valid take a look at the details and it's telling me that the name is already in use by another component something else on the form has already been called txt first name if this happens just cancel and find out which one is the offending control something else i should mention is you can't have spaces in a control name so let's put a space in this text box name again an error message and maybe i'll even try putting a question mark on the end of the name another error message so there are some limitations as to what you can call a text box or indeed any other control on the form the text property on the other hand of a label or a button can be pretty much anything you like okay let's just tidy up the layout a little bit i'm watching the guidelines for assistance and you can also use the format menu to help you control the layout of a form see i have options for alignment horizontal and vertical spacing this one is particularly handy if i select all of these text boxes i can say i want to make them all the same width for example and i can make them all the same height if i want to move things around as a group i just draw a box around them to highlight them and i can drag them to a new position you can play around with the various tools available to improve the cosmetic appearance of your form when you have time but for now i just want to show you how we can capture some data so let's write the code for the button i'm going to start by declaring three variables into which i'm going to load the data that i capture i'm using a standard naming convention again st because these are string variables and then of course something meaningful in camel notation i've just spotted a spelling mistake as well let's fix this now i'm going to take the information that the user types onto the form and load it into these variables starting with the first name st first name equals a single equal sign means i'm about to assign something to this variable and the information i want is on the form in a text box called txt first name i've just typed the first three characters of the text box name txt and i'm being presented with a list of the text boxes on the form you can see why i use this naming convention as long as i make sure that all of my text boxes begin with txt i'll get a nice little list of them so i'll select txt first name and i want to take the text property in other words the text that the user typed into that text box and i'm going to load that into my variable so this reads as take the text from the text box called txt first name and assign it to that variable let's do the same with the other variables and finally i'm going to output the data in a message box just to make sure it worked i've included a space between the first name and the last name and i've concatenated some extra text in my message as well let's see what happens when we run it then type in some information and there's the output from my procedure if i dismiss the message box the application is still running so i can change the data here the program is assigning new values to those variables overwriting the existing ones one more time so there you have it capturing data from a user by means of text boxes on a form let's quickly take a look at another control which i can use on the form i want to show you a list box and i'm going to use this to capture the user's occupation so let's give it a name lst occupation lst because it's a list box i'll put a label on the form to go with it so that the user knows what the list box is for and i'm going to include some occupations in the list box that the user can choose from first of all make sure that the list box is actually selected and then use the items property there's a little button here which will allow me to add a collection of items click ok and i now have a populated list box let's capture the user's selection i need a variable to store it in and i can capture the user's selection in a slightly different way i'm using the selected item property let's try it out hello kevin drumm you are a male teacher i can also add items to the list box programmatically in other words in my code i'll quickly show you this and then you can experiment with it yourself you might remember in an earlier video i showed you how you could write code when the form loads i'm going into the form design environment and i'll double click the form itself i now have a procedure called form1 load any code i write here will run immediately after i start the application but before the form appears on the screen and i'm going to add some extra code to put a few more items into my list box i am adding something to the collection of items which are inside that list box i'm just going to make sure that the list box is big enough to display everything and let's give it a try hello beatrix potter you are a female writer before we look at some more code i want to introduce you to some of the facilities that come with visual studio for debugging your code in other words tracking down errors in the code the first and probably most useful one that i want to talk about is being able to set a breakpoint and then step through the code i can set a breakpoint by clicking on the grey bar here that's a break point now i'm going to run the program watch what happens i'm now in what's called break mode or debugging mode my application ran at full speed until it came to the break point and now it's suspended and i can step through the code one line at a time there are a number of buttons i can use to do this up here step into step over step out i'll say more about these two later the most useful one is step into notice i can also use the function key f8 to do the same thing so when i click the button i'm getting a message about how the stepping facility will behave i'm not too worried about this for now i'm just going to say i don't want to see these messages again it's highlighting the line of code that it's about to execute next and now it's about to execute this line of code and again it's about to execute this line of code when i'm in debug mode i can hover over the name of a variable to see its contents so i can see that the string male has been assigned to this variable drum has gone into this one and kevin has gone into that one if i take a look at this variable it hasn't been assigned a value yet because this line hasn't executed yet let's continue stepping and i can see there's something inside that variable now final line of code in this procedure will do some output so i've been switched back to the user interface and finally the procedure will come to an end my application is still running the form is still on the screen but the procedure which i launched when i clicked on the button has now finished i can use as few or as many break points as i like i'm going to remove this break point just by clicking on it again and i'll place a break point here instead i'm also going to place a break point on the forms load event handler let's run it again now as i told you in the previous video when you launch a windows forms application the form is loaded into memory before it hits the screen so the forms load event handler is running first i'll step through that and it's populating the list box when that's complete the form can hit the screen and clicking the button causes the button's click event handler to start running and we've seen this before when we're in debug mode there's some extra windows that you might want to switch on a particularly useful one is called the locals window you can find it here on the debug menu debug windows locals what it's showing me is the contents of any local variables in other words variables which have been declared within this procedure i'll say more about the difference between local and global variables later on suffice to say for now this is an alternative way of finding out what's inside a variable i can see a nice summary down here there's additional information in this window as well which pertains to these parameters which i mentioned in another video we'll say more about these later with the locals window i can actually change the contents of a variable on the fly as it were i just double click it here and retype it i've overwritten the existing value of that variable if you've finished stepping through your program you can stop the execution just by clicking on this red square or you can press continue and it will jump you straight to the next breakpoint if there is one at this point i just want to return to a type of error that you've seen already and that's the socalled syntax error for example if i misspell the word text i type text on the end i've got a red wavy line if i open a bracket but forget to close it again that's a syntax error i can see a red wavy line on the end of this keep an eye out for these because your program won't run properly if you don't fix them i like to fix them as i go along but let's see what happens when i try to run a program which has got syntax errors like this in it there were build errors would you like to continue and run the last successful build well that begs the question what does it mean by build so let's say no and i'm going to switch on something called the output window watch what happens when i try to run the program again build xero succeeded one failed this tells us something very important about vb.net programs when you write a program you're writing source code code that a human being can understand but before you can run a program it has to be compiled what that means is it has to be turned into machine code binary ones and zeros that the computer can understand when you press the start button visual studio will automatically try to compile the program first another name for compiling a program or compilation is to build the program so you can see here the program has failed to compile the build failed and i'm very kindly being asked would i like to use the last successful build would i like to run the version of the program that compiled successfully previously well in this case the answer is no i want to fix this version of the program so i'm going to click on no and now i have a list of errors this is really just a summary of the same information that i saw with the red wavy lines i'm being told that it's expecting a closing bracket a double click on there and it jumps me to where i need to do the fix and i'm being told that text is not a member of text box in other words text is not a property of a text box a double click and it will jump me straight to that line i can fix it here now as i said before though i like to watch out for the red wavy lines while i'm coding and fix them as i go along i'll show you some more debugging facilities as and when i need them in later videos in this video i'm going to talk about how we can work with numeric input from the user in other words how we can do calculations with number data before i do i'm going to build myself a simple little interface with a couple of text boxes and a button notice how i've been naming the controls as i go along this will make the code easier to understand the first thing i'd like to do is add together two numbers that the user types onto the form so i'll start by declaring a couple of variables remember the data type integer means a whole number i'm going to declare another variable to store the result of the calculation and now i'm going to capture the data that the user types into those text boxes adding these together couldn't be simpler i result equals i number one plus i number two let's output the result and see if it works 12 plus 5 is 17. let's try something else let's subtract one number from the other i result equals i number one minus i number two i'll just borrow that message box statement and we'll run the program again so that's the two numbers added together and that's what we get when we subtract 5 from 12. what about multiplication to multiply two numbers together we use an asterisk that's the multiplication symbol when you're programming twelve plus five is seventeen twelve minus five is seven and twelve times five is sixty bit of copying and pasting to speed things up to divide one number by another use a forward slash so this reads as i number one divided by i number two twelve plus five is seventeen twelve minus five is seven twelve times five is sixty and twelve divided by five is two well not quite but remember we're working with integers here we're working with whole numbers when i divide one integer by another and store the result in an integer variable vb is automatically going to round to the result either up or down let's improve on this instead of using integer variables i'm going to use a real number type let's use a double i'm also going to change the naming i've used here dbl for a double strictly speaking it doesn't matter what i call these variables but i want the names to be meaningful and i want the names to reflect the data type let's see what we get this time same as before 12 plus 5 is 17 12 minus 5 is 7. 12 times 5 is 60 but 12 divided by 5 is 2.4 that makes more sense just to be clear about the way a variable works i'm multiplying two numbers together here and i'm storing the result in this variable called dbl result when i perform a second calculation i'm storing the result in the same variable what's happening is i'm overwriting the existing value in dbl result i lose the value which was generated by the first calculation when i do the third calculation i overwrite the value inside dbl result again so i lose the result of the second calculation by the time my program comes to an end this contains the result of the first number divided by the second number if i wanted to keep the result of each of these calculations then i should have declared four separate variables these are called arithmetic operators these are the basic operations that we might want to perform with numbers there are a couple more let me show you them that's the carry symbol which is normally above the number six on your keyboard and what it means is raised to the power of so it's going to raise number one to the power of number two twelve plus five twelve minus five twelve times five twelve divided by five and twelve to the power of five that's twelve times twelve times twelve times twelve times twelve another useful operator is integer division i'm going to use a backslash instead of a forward slash in some programming languages you would use the word div in fact the pseudo code that you see on most exam papers will use the word div in visual basic we use a backslash let's take a look that's the effect of using a backslash instead of a forward slash 12 is being divided by five but only the whole number part of the result is being kept twelve divided by five is two with two remainder we're ignoring the remainder let's try fifteen and four fifteen plus four is nineteen fifteen minus four is eleven fifteen times four is sixty fifteen divided by four is three point seven five that's fifteen raised to the power of four and that's 15 divided by 4 ignoring the remainder 4 goes into 15 three times the last arithmetic operator that i'd like to show you now is mod number one mod number two mod is the remainder after whole number division let's see what this does let's go with 24 and 9 this time i'll just move the form across so you can see the code as well 24 plus 9 is three twenty four minus nine is fifteen twenty four multiplied by nine is two hundred and sixteen twenty four divided by 9 is 2.6 recurring the number of decimal places you can see there is governed by the data type 24 raised to the power of 9 is this rather large number 24 divided by 9 using integer division is 2 9 goes into 24 twice and 9 goes into 24 twice with 6 remaining that's what mod is giving me it's the remainder after whole number division let me finish with a word of warning i'm going to run this program again but i'm not going to enter any data i'm going to leave these two text boxes empty straight away i have an error message conversion from string to type double is not valid this tells me something about what's going on behind the scenes let's stop the program and put a break point on this line when you type something into a text box it's actually a string notice here text equals 5 7 in double quotes when this line of code executes vb will automatically convert the string five seven into a number you can see dbl number one has got a zero in it at the moment that's the initial value of any numeric variable until you assign something else to it step through the code the text box contained five seven but the variable contains fifty seven behind the scenes visual basic is automatically converting the string into a double because it can but notice that my second text box contains a zero length string a pair of double quotes with nothing in between them it's a string but it just doesn't have any length and when this line of code executes vb will attempt to convert that zero length string into a number but of course it can't and my program has crashed this is what we call a run time error the program crashed while it was running it crashed at run time another name for a runtime error is an exception so you can see here i have an unhandled exception i'll talk more about runtime error handling or exception handling in a later video but for now with this program we just have to expect the user to do the right thing not to leave any of the text boxes blank in this video i'll say something about complex arithmetic that is arithmetic expressions that contain more than one arithmetic operator let's write some code let's imagine we're building an application for a cake shop and the application will calculate the total cost of a number of cakes i'm not going to capture any input i'm just going to hard code the data to keep things simple so i've declared three variables one for the price of a cake one for the quantity of cakes and one to store the total cost of however many cakes being bought let's initialize these variables with some data as i said i'm hard coding the data so i can focus on the calculations but of course i would probably want to capture this data from text boxes on the form so to calculate the total cost of ten cakes at a price of five pounds per cake these are good cakes by the way i'll use the multiplication operator and let's output the result fifty pounds worth of cakes no surprises there now suppose for a moment we want to calculate a discount of let's say two pounds per cake you might be tempted to try this take the original price subtract the discount and multiply it by the quantity five pounds per cake minus two pounds per cake that's three pounds per cake multiplied by ten i might expect a result of thirty pounds let's take a look minus 15 pounds not only are we giving the cakes away we're giving money to the customers as well that's totally unsatisfactory what's going on well there's an order of operations that applies when it comes to complex arithmetic expressions by a complex arithmetic expression i simply mean an expression with more than one operator this expression includes a minus sign and the multiply sign the order of priority is that multiplication is done first so in this case the discount is being multiplied by the quantity which is twenty and then that is being subtracted from the price five minus twenty is indeed minus fifteen if i want the discount to be applied first in other words i want the subtraction to happen first i can control it using brackets or parentheses as they're otherwise known like this so now anything inside the brackets will happen first and there's the 30 pounds i was expecting you may well have come across this already you might have heard of bodmas bodmas stands for brackets order division multiplication addition and subtraction that's the order of priority of the arithmetic operators order by the way means exponentiation raising something to the power of something else so what we're saying is anything inside brackets will be done first if there's an exponentiation operator in the expression that will happen next followed by division multiplication addition and subtraction the truth is division and multiplication have the same priority also addition and subtraction have the same priority so perhaps we should say to indicate the fact by the way i typed a single apostrophe before i wrote this this is not code this is simply a comment which i've added to my code comments aren't executed they're not part of the program a comment is just something that i can put in my code to help me to understand it now let's suppose for a moment i want to add a charge for postage and packaging to the total cost of this order we'll have a flat charge of three pounds and i'm just going to add it to the end of this calculation thinking about the order of operations whatever's in brackets will happen first then that will be multiplied by the quantity and then finally the postage will be added on so i don't actually need to include any brackets here 33 pounds as expected but there's nothing to stop you from adding brackets if it helps you to understand the code so for example i might do this i'm saying do all of this first and then have the postage at the end something else you may have come across is this pemdas this stands for it's essentially the same thing as bodmas you might have noticed that the m and the d are the other way around but that just makes the point that the order of operations when it comes to division and multiplication is irrelevant now beware you might come across this that's the cost of my cakes that's 10 minus five plus two of course ten minus five is five plus two is seven that is ten plus two minus five ten plus two is twelve minus five is also seven all i've actually done is swap around the order of the operations but ten minus two plus five is thirteen let's be clear i haven't just swapped around the order of the operations i'm changing the number which i'm subtracting from 10 10 minus 2 is 8 plus 5 is 13. it's a different calculation the same applies here in the first two examples all i've done is change the order of operations i've got 10 divided by 5 times 2 or 2 times ten divided by five but in the third example it's a different calculation it's five divided by two multiplied by ten so beware bodmas and pemdas both apply they do tell us the order of operations when it comes to complex calculations but complex calculations can also be quite deceptive there are three fundamental constructs in most highlevel procedural programming languages such as vb.net and they are sequence selection and iteration in this video i'm going to introduce selection that means executing one block of code or another depending on the outcome of a test one way we can do this is using the if statement let's start with a simple user interface i've said it before and i'll say it again get in the habit of naming your form controls as you place them on the form i'm going to ask the user what country they come from and then give them an appropriate greeting i'll capture the input from the form by assigning it to a variable and now i'm going to use an if statement to test the contents of that variable if the country is equal to australia then i'm going to output the message g'day mate i want you to notice that i'm using the equal sign to check if two things are equal whereas here i'm using the equal sign to assign something to a variable in some programming languages you'll use a slightly different approach for example in python if you were checking for equality you would use two equal signs in vb a single equal sign can be used either for checking or for assignment so let's try it out if i input australia i get the australian greeting if i input something else nothing at all that doesn't mean my code isn't working it's doing exactly what it's supposed to do this is what we call a one line if statement i can execute one command depending on the outcome of the test but if i want to execute multiple commands depending on the outcome of a test i'm going to use a block if statement i've moved that command to the next line down visual studio has automatically added an end if and now between the if and the end if i can have as many commands as i like so watch what happens now g'day mate good on ya no worries if i don't type australia if i type something else nothing happens at all now a word of warning if i put something after the word then that's a syntax error end if must be preceded by a matching if this line of code is complete it's syntactically correct however you can't have an end if on its own if you're going to use a block if there should be nothing after the word then if there's nothing after the word then and i forget to use end if again i've got a syntax error if must end with a matching end if so you have a choice you can either use a block if or a one line if but whichever one you use you have to use it correctly when it comes to a block if i can have multiple else if clauses as part of it like this else if country equals france bonjour commented let's try it out those are my three australian greetings and if the country is france bonjour commented however if i enter something which isn't france and isn't australia nothing let's include another elsif else if country equals japan konichiwa chelsea i think i pronounced that correctly let's try it out now and there are my japanese messages i can have as many else if clauses as i like in a block if statement and i can finish with a single else clause if i don't type australia france or japan then it will say hello there i hope you are well so everybody gets something now just a small word of warning the tests that you perform with an if statement are case sensitive watch what happens if i type australia in lower case the block of code in the else clause is executing because i didn't use a capital a i can remove the case sensitivity of this test by converting the contents of the variable st country into uppercase like this i'm saying take the content of st country convert it to uppercase and then put the uppercase version of it back into the variable overwriting the original contents of that variable and now i'm going to check to see if that is equal to this it doesn't matter what type of case i use when i'm typing in the country i've removed the case sensitivity from the test let's just step through this to be sure what's going on i'll put a break point on the procedure so i've typed in lowercase australia that's what i've captured into this variable and then i've converted it to uppercase australia so i'm asking if uppercase australia is equal to uppercase australia and notice how execution has passed to the end of the if block because the australian greetings have been displayed there's no need to perform these other tests one final thing to say i've converted the user's input into uppercase and i might not want to leave it in uppercase notice this once the if block has completed any code which comes after it then executes for example this message box statement but notice that st country now contains uppercase japan i might want to leave it the way it was when it was input by the user so rather than doing this which replaces the existing contents of the variable i'm going to do this the content of the variable is only being converted to uppercase for the purpose of the test but i'm not reassigning the uppercase text back into the variable i'm converting the text to uppercase on the fly as it were watch what happens now by the time we get to the end of the program the contents of the variable are still in their original state you might like to try writing a similar program yourself have a single if block with lots of else if clauses to greet people from different countries in the previous video of this series i showed you how to use an if block to execute a block of code conditionally in other words to decide whether or not to execute a block of code the if block allows you to use one of the three constructs of highlevel programming languages namely selection in this video i want to say more about the if block and the kind of tests that we can perform with an if block i've already created a new windows forms application and i've put three controls on the form i have a label a text box and a button notice that i've named the text box txt exam score and i've named the button btn get grade the idea is that the user of this application will type in an exam score and then the program will calculate the grade let's write the code and see how we can use logical operators to build complex conditions i'll start by capturing the score into a variable i'm assigning the contents of the text box to an integer variable called i score now the first thing i want to do is check whether it's a valid score let's suppose that you can only score between 0 and 100 on this test there's a few things to notice here i'm asking if the score is less than zero this is the less than symbol and let me be clear less than zero means minus one minus two minus three zero is not actually less than zero zero is equal to zero i'm also checking to see if the score is bigger than one hundred given that you can't score more than one hundred on this particular exam anything bigger than one hundred would be invalid if the score is less than zero or the score is greater than 100 then we'll display a message saying this is not a valid score i'm also giving the user of my application some guidance i'm not just telling them what they did was wrong i'm telling them what they should do instead which is good practice for an error message then notice i'm exiting the program i've put another line of code here just to prove the point when we drop out of the if block normally this line of code would be executed but because i've said exit sub this will force the program to stop there and then let's give it a try if i type a score of let's say 1 this is not a valid score i'm getting the error message let's try a score of 101. again not a valid score let's try a score of 99 and i want you to notice that we've dropped out of the if block and we're getting that message at the end of the program saying all done it hasn't actually done anything yet we'll deal with that in a moment just to be sure i should really test the value zero zero is valid zero is a perfectly good value and i should also test the value 100 and that's fine as well so that's the beginning of my exam checker program and i'm using something called a logical operator the word or is one of three logical operators which you'll come across the less than symbol and the greater than symbol are called relational operators that is the condition clause of my if statement and because it's effectively performing more than one test we call it a complex condition now before i try and work out what the grade for a particular score is i'm going to keep it really simple and just test to see whether somebody has passed or failed so if the score is bigger than or equal to 50 it's a pass if the score is less than 50 it's a fail notice the greater than or equal to symbol that's another relational operator let's give it a whirl a score of 45 is a fail and notice all done is being displayed unconditionally that's going to happen one way or the other a score of 55 is a pass now it's good practice when you're testing a program like this to try all of the boundary values and by boundary values i mean 50 is a boundary 100 is a boundary zero is a boundary so let's try a score of 50. 50 is a pass it's also a good idea to test parts of the program that we've already tested because when you add new code you might introduce bugs so i'm going to test less than zero again minus five is not valid and neither is 105 it seems to be working now you might have already noticed that i've used three separate if blocks in the previous video i showed you one if block with multiple else if clauses and i'd like to point out the difference between the two i'm going to set a breakpoint on this program and run it up again and we'll put in a failing score let's say 30 and now i'll step through the code so we assign the contents of the text box to the variable we check to see if the contents of the variable are within range in this case they are so we jump to the end of this if block then we check to see if the score is greater than or equal to 50 which it isn't so we jump to the end of this if block and then finally we check to see if the score is less than 50 which it is and we report that it's a fail all done let's do that again but this time i'm going to put in a passing score let's say 75 assign the content of the text box to the variable check that it's in range which of course it is so we jump to the end of the first if block check to see if the score is bigger than or equal to 50 which it is report that it's a pass and now we're checking to see if the score is less than 50 which of course is unnecessary we're doing a test that we don't need to do we've already established that it's a pass to make my program more efficient i'm going to use a single if block with multiple else ifs my validation test where i checked to see that the score was actually within range i could have left as a completely separate if block but don't forget there was an exit sub in there and it may well be that there's some code i want to execute unconditionally at the bottom of the program if you use exit sub early on that won't happen so i've included this as well inside the if block with multiple lcif's let's give it a go a score of 67 is a pass all done let's step through it and watch what's happening the score is in range the score is bigger than or equal to 50 so we report a pass and then we drop out of the if block we don't need to do any more tests so although it's perfectly reasonable to have multiple if blocks each performing a separate test it may be better to use a single if block with multiple else ifs and then the program doesn't have to work as hard now admittedly with a little program like this i'm not going to notice a lot of difference but as you start writing longer more complex programs then small adjustments will add up and your program will run faster okay it's one thing writing a program that works efficiently but it also has to be robust we want a program that you can't crash and i can crash this one easily watch i'm typing text into the text box rather than a number invalid cast exception conversion from string 10 to type integer is not valid this makes the point that when you type something into a text box it's a string there's the word ten with double quotes around it and i'm trying to put that string into a variable that's designed to hold integers whole numbers i'll run the program again with a breakpoint but this time i'll be a wellbehaved user notice that the text box contains the string 10 the text box does not contain a number it's a string of characters but because i'm trying to assign it to an integer variable vb will attempt to convert it into an integer and the string 1 0 can be converted into the number 10 so everything is fine the program does not crash the text 1 0 in double quotes has been converted into the number 10. converting data from one type to another is called casting and vb was able to do the cast let's run it again with something it can't handle vb will attempt to convert the string five into a number and of course that is an invalid cast it can't do it the last thing i want to do is give my program to a user who can inadvertently crash it so let's add some extra code to get around this problem before i attempt to initialize the variable i score with the contents of the text box i'm going to test to see whether or not vb will be able to convert it into a number like this is numeric is a special builtin function which will allow me to test whether or not something can be converted into a number in this case i'm testing the contents of the text box let me be clear it doesn't convert it into a number it simply asks the question can it be converted into a number when i perform this test the outcome will either be true if it can be converted or false if it can't so i'm saying if is numeric equals true if it can be converted into a number then i will do this line of code i'm initializing the variable conditionally if it can't be converted then i give an appropriate error message and i am exiting the program this time because there isn't much i can do with that data unless it is actually a number so there's my little validation routine let's give it a go in some text you must enter a number and i'm not getting the all done message because i've forced an exit from the program now there's one more thing i can do just to improve the efficiency of the program a little bit and that's to tell vp that i want to convert the contents of the text box into an integer rather than allowing vb to make the decision for me and i can do it like this c int is short for convert to integer and of course my program is only going to do this if it can i've already made sure of that with my is numeric test if i left this out it would still work but i'm leaving it up to vb to decide what to convert the contents of the text box into an integer a double a single and it will make that decision based on the variables data type i'm just taking the decision out of vb's hands and it will result in a very slight improvement in performance i'll talk more about special inbuilt functions in another video but you've seen two already is numeric and c int in the previous video i showed you how to write this little routine to check if an exam score was a passing score or a failing score i made use of one of three logical operators i used the or operator in this video i want to say a little bit about the other two logical operators namely and and not i'll be adding more else if clauses to my if block to come up with a grade for a particular score rather than just pass or fail in the previous video i also paid particular attention to validating the user's input you can see my program has an if block right at the start to check if the user's input can be converted into a number and if it can then it does it converts it into an integer i've explicitly performed the type conversion also known as a cast using the c inter function if i hadn't used c int then v b would have done the cast for me if it could if v b does it it's known as implicit type conversion explicit type conversion is more efficient before we add some more logic to this program i just want to point out that it's not perfectly robust yet i can still crash this let me show you how you've seen that if i type text i've essentially trapped the error but what if i put in a number which is too big that is an extremely large number and it's crashed my program an integer variable occupies four bytes of memory that is 32 bits so the maximum number of values that you can store in an integer variable is 2 to the power 32 it works out to about 4 billion now since we also need to store negative integers that means we can go from about minus 2 billion to positive 2 billion the number i entered was bigger than 2 billion and i've got what's known as an overflow exception there's a possibility that the person who's using my program might type in a very large number and trigger this runtime error this is a fairly easy one to sort out i'm just going to change the user interface notice that my text box has a max length property that's the maximum number of characters i can type into the text box you can see it's over 32 000. i can type 32 767 characters into this text box well my exam score is never going to be bigger than let's say a hundred so if i limit the number of characters that you can type into the text box to let's say three then the maximum value you can put in there is 999 a simple fix i can't enter a number bigger than three characters long now let's add some more logic to the if block depending on the score i want to award a grade which is either a b c d e or f i'm going to keep the test which checks to see if the data is within range but i'll add some more else if clauses if you score less than or equal to 20 that is a grade f if you score more than 20 and less than or equal to 30 that is a grade e notice the use of the logical operator and what i'm saying is the score must be bigger than 20 and it must also be less than or equal to 30. a score between 31 and 40 will get you a d and anything between 41 and 50 we'll call that a c in this particular examination anything between 51 and 70 will get you a b notice i've got a syntax error there's a red wavy line what's it telling me expression expected not particularly helpful but this is actually quite a common mistake when you're writing complex expressions which include logical and relational operators i need to include i score again right here if i'm using a relational operator to compare two things such as a variable and a number then i have to say what two things i am comparing i have to be explicit okay so every other school is going to get you a grade a so i can just use an else clause now and that is all of the possibilities taken care of now notice i've been very very careful not to overlap the ranges of scores this range is between 21 and 30 inclusive this range is between 31 and 40 inclusive there's no overlap if for example i made this mistake and i said greater than or equal to 30 then a score of 30 falls into this range and it falls into this range then my program might not work i might get some peculiar results so just be very careful about that if you think about what's going on here a score of 30 is not covered either by this test or by this test think it through and you'll see that a score of 30 will actually get you a grade a but that should be fine there's one more logical operator which i haven't mentioned and to be honest i don't really need it in this scenario but i can make use of it just to illustrate how it works instead of asking if the score is out of range i'm going to just turn the logic of that question around and ask if the score is not in range in a sense it's the same question if the score is not in between one and a hundred then it must be out of range now all that remains is to test the program thoroughly there are several possible execution paths and i should really test them all i should also make a point of testing things which i've tested before for example my validation routine here i need to make sure that i haven't introduced any bugs when i added new functionality this is called regression testing i should also check all of the boundary values i should try a value of 0 a value of 100 a value of 20 30 40 70 and i should also try valid values within the ranges which i've specified in my if statement namely 25 35 45 60 75. if you don't test thoroughly and then you start adding more code to this then you're building on shifting sand do it carefully now and you'll save yourself a lot more work later on and straight away i found a problem it is possible to score zero on an exam that should have been greater than or equal to zero that's better as i said make sure that you test every possible pathway through the program i'm going to show you an alternative to the if block another way to perform selection in your code i've created a new project let's pop a text box on there to capture some input and a button to run my program the idea is that the user types in the temperature maybe 15 degrees and then the check temperature button will tell the user whether it's cold freezing warm hot that kind of thing and although i could allow vb to do the implicit type conversion for me i'm going to do it explicitly remember a text box captures text input i'm converting it into an integer i'm not going to worry about my program crashing if the user doesn't behave themselves and type in a number now this is what the select case construct looks like it begins with the word select case and then the name of the variable which i want to test in this case i temperature and it finishes with end select and now i'm going to say in case i temperature is equal to zero i will output the message freezing if the temperature is less than zero i'm going to output an appropriate message for that as well if the temperature is between 1 and 10 that's cold notice the syntax case 1 2 10 that means everything between 1 and 10 inclusive so 1 and 10 are included as well if it's between 11 and 20 it's warm and let's say everything else is hot and there it is the select case construct now i could have done exactly the same thing using an if block but arguably this is a little easier to read it's somewhat easier to see what's going on by the way i could execute multiple lines of code as a result of each test okay it's a bit silly but you get the point i'm selecting one block of code or another depending on the outcome of a test let's give it a try minus five is sub zero zero is freezing water will freeze and you can go skating hate is cold 15 is warm and 200 is hot you should really test all of the boundaries as well so you should see what happens if you enter a 1 or a 10 or 11 20 and then something incredibly big this program can be crashed as well because we could type in some text but of course we could add some additional logic to validate the data before the code gets into the select case block by the way there are some other things i can use in a case statement for example i could say case 1 comma two comma three comma four five and that's an alternative to saying one to ten so if it isn't a continuous range of values which i'm testing that would be the way to go and i can use all of my relational operators when i'm composing a test as well so for example here i've used a less than sign but i could use greater than i could use less than or equal to greater than or equal to not equal to the same as if i was building a test for an if block now you might be wondering why bother with an if block at all why not use select case every time well there is a particular limitation when it comes to select case you can only test one variable at a time let's say for example we've also captured the wind speed i've just hard coded a value for the purpose of demonstration i can't do something like this with a select case construct i'm testing the contents of two variables using a logical operator with a select case construct i can only test one variable at a time i could however nest an if block inside the select case construct something like this so if the temperature is less than zero we'll report that it is subzero and then we'll check the wind speed and if the wind speed is bigger than 20 we'll report that it's going to feel really cold you'd like to give it a try yourself maybe rewrite the exam grading program to use a select case construct instead of an if block by the way different programming languages might well have their own equivalent to the select case construct c sharp for example uses the switch construct but it does pretty much the same thing if you see pseudo code on an exam paper it may well be written like this i've commented it out because it won't work in visual basic but you can see the concept is pretty much the same i'm going to show you the third of the three fundamental constructs of high level programming namely iteration it's iteration means executing a block of code repeatedly iteration is also known as looping and there are two ways you can do this in vb.net one of them is with a for loop and the other is with a do loop in this video i'm going to focus on the for loop i've already created a new windows forms application and i've placed a button on the form so let's get right into the code to make something execute repeatedly i need a way to count the number of repetitions i need a way to count the number of iterations so i'm going to declare a variable of type integer it doesn't really matter what i call the variable i've called it i count because i'm going to count my way through a loop the for loop looks like this any code that i write between for and next will execute repeatedly in this case five times because i'm counting from one to five let's begin with a simple message give it a try hello once twice three times four times five times now that was a single line of code but let's put a couple more inside the loop try it again hello how are you well i hope once hello how are you well i hope twice so these three lines of code are executing in sequence five times let's take it back down to one line for now i can display the value of i count as part of the message like this hello1 hello2 3 4 5. let's do something a little more interesting my program will beep every time we pass through the loop the beep command is very straightforward threading.thread.sleep means pause for three seconds something nice about a looping construct such as the for loop is i can change the number of iterations as easily as this the code inside the loop will now execute 50 times i can also change the step value like this so i'm going to count up from one to fifty five at a time perhaps it makes more sense to count from zero i can also count backwards in this case i'm counting from 50 to zero and i'm stepping minus five at a time if i want to display the output in a single message box rather than separate message boxes i could do something like this inside the loop i'm not doing any output i'm simply building the output string i'm saying let st out equal whatever it used to be and then something else in this case the value of i count along with a new line operator this time i only have one message box outside of the loop and that's quite a common technique so there it is the for loop in the next video we'll look at the do loop and then following that you'll see how the looping constructs really come into their own when working with array variables before we move on and look at another iteration construct i thought it would be a good idea to get some practice in with what you've already learned i've written a program here which makes use of an if block and a couple of for loops i'll show you what it does first then you can pause the video and try to write it yourself when you're ready you can look at my solution my button has the text count up od or even because that's what it does let's see first i'm asked what number do you want to count up to i'd like to count up to 10. then i'm asked do you want odd numbers or even numbers notice i'm using an input box here you've seen this in an earlier video i want the even numbers and my program comes back with 2 4 6 8 10. let's run it again what number do you want to count up to i can choose any number i like i'll go with 10 again odd or even numbers let's try the odd numbers this time 1 3 5 7 nine and that's it let's just give it one more try let's count up to 20. odd or even let's go with odd again so that's the idea if you want to try writing this program yourself pause the video now and give it a go and then you can resume the video when you're ready to see my solution i should say there's no one way to solve this problem and here's my solution i've declared a variable called imax which is the number the program will count up to it's an integer variable i've declared a string variable called st odor even which will store order or even depending on what the user types in and then i have another variable called x which will be my loop counter it'll control passage through the count controlled loops i start by asking the user what number they would like to count up to that value gets assigned to imax then i ask the user do you want odd numbers or even numbers and that gets assigned to st odd or even i now have an if block where i'm testing the value of st odd or even if the user typed in even then we have a for loop which will count up in even numbers notice that i'm starting from two and counting up to imax and i'm using the step clause to say that i want to step two at a time so that's going to give me the even numbers up to the number that the user types in else if st odd or even is equal to odd then i have a for loop which starts at one runs to imax but also steps two at a time so we start with one then we add two then we add two and so on as i said this is just my solution you might have come up with something slightly different for example you might have used two separate if statements like this and that's fine because it will work having said that using a single if block with an else if clause is a little bit more efficient because this program will have to perform both tests did you get something similar did yours work if not why not try my approach you previously saw how to make a line of code or indeed a block of code execute repeatedly using a for next loop like this one here i'm using a variable which i've named x to count my way through the loop let's just remind ourselves what it does personally i tend to avoid using letters of the alphabet for variable names i like the names to be a little bit more meaningful so i'm going to rename x to something a little more appropriate i've called it i count instead i because it's an integer and count because that's what it's for it's to count my way through the loop in this video i want to show you an alternative way to make a line of code or a block of code execute repeatedly i'm going to show you something called the do while loop i'm referring to it as the do while loop because most people do but as you'll see in a moment it comes in a number of different forms here's one of them now you might be tempted to give this a try as it stands i strongly recommend that whenever you're writing code that contains looping constructs you should always save your code first watch what happens when i run this hello hello this will go on forever just saying hello zero let's see if we can work out why i need to stop the program fortunately i can still see this red square here so that will force the execution to stop i've said that i want the loop to repeat while the value of i count is less than or equal to five immediately after you've declared a numeric variable it will contain zero so by the time we get to this line of code i count contains the value zero which of course is less than or equal to five so we output hello zero when the loop repeats i count is still zero its value hasn't changed so we output the message again and then the loop repeats again and again and again it's called an infinite loop it will go on forever because i'm using a do while loop i need to make sure that i write some code to increment the value of i count i'm going to increment the value of i count before i do the output like this so all this line of code says is take the value of i count add one to it and then put the result back into high count overwriting what's already there in other words add one to i count so at the top of the loop we check if the value of i count is less than or equal to five which first time around it is it's equal to zero then we increment it so now i count has the value one then we do the output hello one we go back to the top of the loop and because i count is still less than or equal to five we get back into the loop code and we add one to it highcount now has a value of two so we can output hello2 and around and around we go until such time as i count is no longer less than or equal to five we've met the socalled exit condition of the loop so we can exit the loop and the program will continue down here let's just put a line of code in here just to prove that the program has dropped out of the loop now let's give it a go hello one two three four five six we'll have to look at that and think about why that's happening and then all done i only wanted to count up to five but it actually counted up to six and that has to do with the exit condition of my loop i said i want to loop while i count is less than or equal to five which means my loop will continue if i count is equal to five when i count is equal to five i add one to it so it becomes six and i do another output all i need to change is that exit condition do while i count is less than five that's better you need to be mindful of the contents of the variable which you are using to count your way through the loop now you might be wondering why do we bother with do while loops when we have four next loops i've had to write more code to get the same effect the answer to that question is that the do while loop is more flexible for example i can say do until i count is equal to five strictly speaking this is not a do while loop this is a do until loop watch what happens when i run it exactly the same effect but it means that i can build an alternative exit condition for a loop and as you'll see later sometimes it's more appropriate to use do until rather than do while i can also do this i'm just going to move this piece of code so i'm saying do this block of code and loop until i count is equal to five let's take a look exactly the same effect but sometimes it's appropriate to put the exit condition at the bottom of the loop this means that the code inside the loop will execute at least once if the exit condition is at the top of the loop it might not execute at all if for example something has set the value of i count to be equal to 5 before we go into the loop like this then the code inside the loop won't execute at all we've already met the exit condition and there's one more form of the do while loop if i may call it that which i'd like to show you loop while i count is less than five does the same thing let's look at those four variations next to each other so we can compare them for loops that do exactly the same thing now we need to be careful here i need to reinitialize the value of i count in between each of these loops it starts off here with a value of zero but by the time we've dropped out of the first loop it will have a value of five as i said you need to be mindful of the value inside the variable which you are using to count your way through the loop for good practice i'm going to explicitly initialize it here as well although i know in this particular program it will have a value of 0 at that point so there you have it four different variations of the do while loop or the do until loop if you'd rather call it that i'm going to show you a useful application of a do while loop i want the user to enter a number and only a number a do loop can be used to repeatedly prompt the user if the data is invalid i'm also going to show you why a do loop is called a condition controlled loop you might remember that a for next loop is called a count controlled loop let's write some code let me show you something which might strike you as rather silly but it makes a very important point i'm using an input box function to prompt the user to type in their name but the name must be kevin so i've placed this instruction inside a do while loop and look at my exit condition do while st name is not equal to kevin when we drop out of the loop i simply output the name that was entered let's give it a try i'll try john that's no good ben nope enzo anything i type is invalid unless it's kevin you can see why this is called a condition controlled loop rather than a count controlled loop i'm not incrementing a variable to determine how many times i pass through the loop there's no loop counter involved let me show you another approach do while true equals true i could have just as easily said do while one is equal to one that might strike you as a rather ridiculous exit condition because one always equals one essentially what i've written here is an infinite loop true equals true is more typical in fact i can just say do while true it means exactly the same thing but if i have an infinite loop well how do i get out of it i can do this i capture the input test it to see if it's what i'm looking for and if it is then i force an exit from the do loop by using the command exit do once again you can see that i'm not counting my way through the loop i'm exiting the loop in a different way so how is all of this useful well as i said i want to write a program to prompt the user to enter a number and only a number take a look at this i've declared two variables one called sth because i want to capture the user's age but notice i've declared it as a string and then i've declared another variable called i age which is an integer i'm prompting the user to enter their age and i'm assigning the value to sth this is a temporary measure so that i can test sth and look at my exit condition do while is numeric sth equals false in other words while whatever the user types in cannot be converted into a number to understand this you need to appreciate that the input box function always captures a string so for example if i'm prompted to type a number and i type let's say 59 i'm actually typing the string five nine if i attempt to assign that string to a numeric variable like i age it'll be fine visual basic will do something called implicit type conversion it will automatically convert it into an integer because it can for example this line of code will be absolutely fine as long as the user types in a string that can be converted into an integer if however when this line of code executes the user types in a string like hello it will crash the program because visual basic can't automatically convert that string into something we can save into an integer variable i'm trying to prevent my program crashing for that reason so instead i'm asking the user to type in their age but i'm storing it into a string variable it doesn't matter what they type when we assign it to a string variable it'll work but because i want a number i keep asking the user to type something until such time as i can convert it into a number and that's what is numeric is telling me whether or not a variable's contents can be converted into a number i could ask the same question in a slightly different way like this for example do while is numeric is not equal to true it means the same thing as do while is numeric equals false i can even ask the question like this do while not is numeric it's the same exit condition just phrased in a different way i'm using a logical operator this time instead of a relational operator it really is a case of take your pick so we are repeatedly prompting the user to type in something we can convert into a number and when the user finally types in something that we can convert into a number we do so i'm using one of the type conversion functions this time c int that's short for convert to integer so i'm converting this string into an integer and i know that this line of code is not going to crash because we wouldn't have got this far in the program unless the user typed in something that i could convert this is called explicit type conversion it's also called casting when we change the data from one data type to another let's give it a try i'll start with some text that's invalid so i'm being prompted again let's try some different text again i didn't type something which can be converted into a number so the loop continues let's try typing nothing at all i'll just click ok well that's no good either because that's what we call a zero length string think of a pair of quotes with nothing in between if i press the cancel button again that's invalid i can't get out of this until i type something that can be converted into a number remember that might look like 123 but it's actually the string one two three but it's a string that can be converted into a number so we drop out of the loop convert the input into a number store it in ih and then display it in the message box so there you go a condition controlled do while loop which i'm using to capture input and validate it at the same time in this video i'm going to talk about array variables as you'll see array variables are particularly useful when you want to store a large number of related data items in fact once you've learned about array variables you'll be able to write some very very useful programs before i begin let's quickly review what's going on inside the computer's memory when we use regular variables when this line of code executes the operating system will set aside a piece of memory and it will give it the name s t fruit the exact location of this piece of memory is entirely up to the operating system it doesn't really concern us as programmers but suffice to say no other program can use that piece of memory it belongs to this program immediately after a string variable has been declared it will contain something it contains a zero length string think of a pair of double quotes with nothing in between them if you declare a numeric variable for example an integer then immediately after declaration it will contain the value zero for the purposes of this discussion we don't really need to worry about this zero length string when this line of code executes i'm assigning a value to the variable i'm putting the text banana in there when i output the contents of a variable it doesn't change the contents of the variable we're simply taking a copy of what's in the variable and then displaying it on the screen my variable still contains the text banana this line of code will overwrite the existing contents of the variable we're replacing the text banana with the text orange the original contents of the variable are now lost when this line of code executes a separate piece of memory is being set aside this time the piece of memory is called st fruit 2. no prizes for guessing what that's going to be storing the exact location of this second variable again depends on the operating system one of the main functions of the operating system in my case windows 10 is to manage the memory this line of code assigns the string pineapple to st fruit 2. when this line of code executes a copy of the contents of st fruit are assigned to st fruit 2. so orange overwrites pineapple by the time we get to the final message box statement both variables contain the same thing now let's talk about array variables suppose that i want to store and process several different items of fruit i could do it like this i've declared five separate variables and i've initialized them individually if i want to output the contents of one of those variables that's straightforward enough as long as i know the name of the variable that will output pineapple but using regular variables like this to store a group of related data items is actually quite cumbersome what if i wanted to store 10 items of fruit or even 100 items of fruit i'm going to end up with rather a lot of code instead of using five separate string variables i'm going to use one array variable like this i've used quite a lot of copying and pasting to speed things up i'm also going to change the name of this variable just to indicate that it is actually an array variable i'm going to prefix the name with hey a because it's an array st because it's an array of strings and fruits because well that's what these are you could actually call your array anything you like but as you write more code you'll see the benefits of a naming convention to understand what's going on here again we should visualize what's going on inside the computer's memory when i declare an array variable like this i'm actually saying that i want to set aside a group of memory locations to be more precise i'm setting aside a group of contiguous memory locations contiguous means adjacent next to each other the number four means that i want a group of five memory locations it might strike you as odd but in computer science we generally count from zero we say that the array is zero based each location in that group of memory locations is referred to as an element so i have five elements numbered from zero to four when this line of code executes i'm putting the text banana into element zero this line of code puts orange into element one pineapple into element two strawberry into element three and mango goes into element number four i'm referring to each element by its index number when i want to reference one of those data items again i use the index number so in this case i'm outputting the contents of ast fruits 2 element number 2 pineapple let's give it a try as expected let's output orange i just have to change the two to a one if i want to output mango i'll type a four here i can also reference an element of an array less directly let's declare an integer variable i'm just giving it the name i i'm going to assign a value to that variable and now i'm going to use the contents of i to reference an element of the array can you see what the program will output this time i is equal to 3 so this reads as ast fruits 3 it will output strawberry indeed it does let's change the value of i to 0. now i'm out putting banana banana is the zeroth element of the array we can run into trouble though watch this i'm setting the value of i to be equal to eight my array variable only has five elements numbered from zero to four there is no element number eight so what happens when i run the program now index out of range exception my program has crashed it's crashed because it can't find element number eight there's no such thing let's reset the program now there's one more thing i would like to show you which is where the real power of array variables comes in i want to output each of those items in turn so i am going to iterate through the array using a for next loop watch this for i equals naught to four output ast fruits i first time through the loop i is equal to zero so this will output banana second time through the loop i will be equal to one so we output orange then i is incremented to two and we output pineapple and so on until such time as i equals four let's give it a try and you can imagine i can iterate through a hundred array elements just as easily as i can iterate through five give this a try yourself perhaps you can set up an array with ten elements instead of five in this video i'm going to invite you to practice what you've already learned there are eight exercises here involving array variables and loops which you might like to try coding up yourself i'll show you what they do and then it's up to you if you want to give them a go alternatively you can jump straight to my solutions later on in this video by the way all of these programs start with the same six lines of code all of them declare an array variable of integers with five elements and then the array is initialized as you can see here but it's important to realize that your programs have to work with any data not just these so let's see what they do the first exercise is to output each item in a separate message box one after another well you've already seen how to do this in a previous video i'm using a loop to scan through the array exercise 2 output all of the items in the same message box but on separate lines exercise three is to add up all of the items and output the total in a message box they add up to seventy five in exercise four we calculate the average of the items the average value is fifteen very similar to exercise three except we're dividing the total by the number of items in exercise five we are only adding up the items that are bigger than twenty there are two items in the array which are bigger than twenty namely thirty three and twenty two and they add up to fifty five we're still doing this with a loop but as we visit each item we're deciding whether it's bigger than 20 or not in exercise six this is a little bit trickier you have to find the largest item and output it in a message box the biggest item is thirty three and let's be clear the program is working out which is the biggest item if you can do exercise six you'll find exercise 7 very easy exercise 7 is finding the smallest item and exercise 8 is replacing each item in the array with a new value that is twice as big and then we output those values in pretty much the same way as we did in exercise two so if you want to give them a try yourself pause the video now and see what you can come up with alternatively you can jump straight to the solutions so let's take a look at my solutions the objective of exercise one was to output each item in a separate message box one after another you've seen how to do this in a previous video i start by declaring an array of five integers and then i initialize the array in order to scan the array i need a loop counter so i've declared an integer variable called i and that controls the number of passes through the for loop then i say for i equals naught to 4 output ai data element number i so first time through the loop i is zero that outputs the first item second time i is one i output the second item and so on until i is equal to four we output the last item and we drop out of the loop in exercise 2 we want to output all of the items in the same message box so we don't have an output command within the loop we're simply building a string i've declared a string variable called st out and inside the loop i say st out equals whatever it used to be plus the next item in the array i'm also concatenating a new line operator on there as well so the string actually contains the information needed to throw a new line between each item when we drop out of the loop we display the output string in one go the solution to exercise 3 is similar to the solution to exercise 2. we want to calculate the total of the data items so i've declared a variable called i total to contain this and then as we visit each item in the loop i say i total equals whatever it used to be plus the next item i'm using the addition operator instead of the concatenation operator this time when we drop out of the loop i display the total in one message the objective of exercise 4 was to calculate the average well this is pretty much the same as the previous exercise i calculate the total first and then when i display the message i simply divide the total by five with exercise five the objective was to add up all of the items bigger than 20. so in some ways it's similar to the previous program i've declared a variable to hold the total but look what's going on inside the for loop i'm adding the next value to the total conditionally i'm testing each value first to see if it's bigger than 20 and if it is i add it to the total if it isn't well i don't if you think about it adding up all of the items which are let's say smaller than 20 would require a very simple change all i'd need to do is change this relational operator to a less than sign in exercise 6 you were invited to write a program to find the largest item in the array the principle behind this program is to visit each item in the array and if it's bigger than the previous item then keep a record of it so i've declared a variable called imax which will hold the maximum value and i've initialized it to zero which pretty much guarantees that everything is going to be bigger than imax to begin with assuming i'm only working with positive numbers when i visit the first item inside my loop i ask is it bigger than i max well of course item zero the number five is bigger than imax it's bigger than zero so i'm assigning the first item to imax overwriting its previous value imax now contains a five five is the biggest item we've found so far second time through the loop i examine the second item and i ask is it bigger than imax in this case well seven is bigger than five so i replace five with seven i'm keeping track of the biggest item third time through the loop same question and i replace seven with 33 but fourth time through the loop i find that 22 is not bigger than 33 so this line of code doesn't execute by the time the program's finished imax contains the biggest value if you can solve exercise 6 then you can solve exercise 7 very very easily this time i have a variable called i min which is going to hold the minimum value and i'm initializing it with a very large value something that i know is bigger than anything else in the array i've made it ten thousand when i visit the first item i ask is it smaller than i min well of course it is 5 is smaller than 10 000. so i min becomes the first value and then we proceed pretty much as we did in the previous program by the time we drop out of the loop we have the smallest value the objective of exercise eight was to replace each item in the array with a new value twice as big i actually want to change the contents of the array and that's what this loop does it's actually very simple i say let a i data the item i'm looking at be equal to itself multiplied by two so by the time we drop out of this loop the array contains a completely different set of data and then the remaining code simply outputs those data in a single message box just like in exercise two now even if you didn't solve these problems yourself it's well worth trying to duplicate the code that you can see here it will definitely help you get a feel for using array variables with loops in this video i'm going to show you how to implement a linear search a linear search is one of many standard algorithms that you'll come across as a programmer the principle of a linear search is to examine a list of items one at a time to see if it contains an item that we're looking for i've already declared an array of ten strings and you can see i've initialized it with various items of fruit by the way you can see that the program contains the data that we're going to search we say that the data has been hard coded into the program this is untypical in reality a program wouldn't normally have the data written into it like this you'll see in later videos that a program can actually read the data in from an external file perhaps a database or a text file or a spreadsheet or even a web page you'll also see how one program can call another and pass it some data to work with for the purposes of demonstrating a linear search hard coding the data like this is absolutely fine we'll start by prompting the user for an item to search for we'll call it the target value so i've declared a variable to store it and to keep things simple i'll use an input box to prompt the user now i'm going to use a loop to scan through the array to visit each item one at a time i'll need a loop counter and i'm going to use a for loop i could use a do loop it's a matter of preference a for loop will mean i can write slightly less code as i visit each item i'm going to check to see if it's the target value i can do this with an if statement now this isn't the finished product but it's well on the way let's see what happens i'm getting a message for every item which is not the one i'm searching for but i did get a message saying it found it let's try it again i'm looking for a star fruit this time there is no star fruit in the list well it's on the way but i don't want a message for every item which isn't the one i'm looking for so let's improve it rather than doing some output inside the loop i'm simply going to keep a record of whether or not i found it and to do this i'm going to use a boolean variable a boolean variable can have one of two possible values true or false immediately after it's been declared it'll have a value of false so inside the loop if i find what i'm looking for i'm going to set b found to be equal to true and i don't need an else clause because if we don't find what we're looking for b found will never get set to true and when we exit the loop b found will still be false all that remains to be done now is to test be found once we get out of the loop to see if it's equal to true let's see what happens we'll start by looking for something that we know is in the list found it just one message let's try again we'll search for something else that we know is in the list yes there's a fig what about something that isn't in the list not found now just a couple of words of warning when you're comparing strings in vb.net string comparisons are case sensitive so for example if i search for banana with a small b not found however banana with a large b is found you've seen something similar to this in an earlier video i can remove the case sensitivity of a string comparison like this so i'm comparing the uppercase version of the target with the uppercase version of the array item i can achieve exactly the same effect like this l case means lowercase so i'm comparing the lowercase version of the target with the lowercase version of the item in the array and it's probably worth mentioning this as well i can use dot 2 upper instead of u case now there's one more improvement i can make to the efficiency of my program if i find what i'm looking for there's no point in examining all of the other items in the array if b found gets set to true then we can force an exit from the for loop for example if we're searching for apple and we set b found to true there's no point in looking at all of the other items in the array we already know it's there so there you have it a standard linear search if you're going to write code to create and manipulate a twodimensional array variable it's essential that you can visualize the data you're working with very often a twodimensional array variable is used to store groups of related data items like the data you can see here a twodimensional array can therefore be thought of as a table these are the data we're going to use in this video each row of the table contains the details of a different famous person the first column contains their first names the second contains their last names the third column is gender then we have nationalities and finally their occupations what it is each person is famous for notice that each column has an index number counting starts from zero so the fifth column is column number four each row also has an index number and these are also numbered from zero it's useful to think of this table as having a horizontal dimension which we'll refer to as the x dimension and the vertical dimension which we'll refer to as y just like the x and y axes of a line chart when you're coding up a twodimensional array for a different set of data i strongly recommend that you keep a sketch of it handy like i'm going to do now i can declare my twodimensional array variable like this i'm using a naming convention here a because it's an array variable st because it's an array of strings and people because that's what the data is in brackets i've specified the x dimension first followed by a comma and then the y dimension and i've used the as clause to specify that this is an array of strings now i'm keeping my sketch of the data handy while i populate this array it's important to get this right otherwise you might get some very peculiar behavior when you run your program i want to put barrack in the first column and the first row i want obama in the second column and the first row the third column first row contains mail and column number three row number zero contains american it takes a little bit of getting used to counting from zero and the final piece of data for this person is president now it's tempting to start copying and pasting but i want to make sure i get this absolutely right so i'm going to continue entering the values individually just for now working from my sketch let's get the new zealand prime minister in next as with the previous famous person i've specified the column number first followed by the row number i've specified x followed by y notice that the value of x is different for each data item but the value of y is always the same because y is the row number let's do one more very carefully and then i'll speed things up with a bit of copying and pasting and i've just realized that i've made a mistake it's very easy to do that's more like it now you could initialize each individual element of this array in any order you like the important thing being that it's fully initialized but taking a systematic approach like this will help to ensure if not guarantee you won't make any silly mistakes a systematic approach will also help to ensure that all of the data gets in there but i can see a pattern emerging now so i'm going to start copying and pasting to speed things up a little bit now one last look at my sketch just to make sure i've got everything there that should be there and straight away i can see i need to change these twos to fives and there it is the code i need to declare and populate my twodimensional array so that's how we get data in how do we get data out it's actually very simple if you've ever played a game like battleships with this message box statement i'm going to output whatever is in column 4 row three in this case the word scientist what if i want to output let's say new zealand that's in column three row one or perhaps the word swiss that's row three column three it's just a matter of supplying the appropriate coordinates i can also supply these coordinates using variables now i could call these variables anything i like but it makes perfect sense to call them x and y can you see which data item will be output by this message box let's see now just like a onedimensional array the real power of a twodimensional array is realized when you combine it with looping constructs let's suppose i want to output all of the information about barack obama notice that with barack obama it's the x dimension which is changing from zero to four but the y dimension remains at zero i can do this in fact i don't even need the variable y suppose instead i want to output the details of mahatma gandhi again it's the x value which varies but the y value stays the same in this case y remains at four you should make sure that you're comfortable with this idea before you continue let's try ada lovelace ada lovelace is in row number two so the value of y has to remain the same inside this loop it has to be two alternatively i might decide that i want to display all of the values in a particular column for example i might want to display all of the last names if we examine the data we can see that every last name has the same value of x obama is one zero ardern is one one lovelace one two einstein won three gandhi is one four and van gogh is one five it's the value of y which is changing this time so i could write my loop like this but notice that y varies from zero to five so this time it's the value of x which is remaining the same inside the loop but y is the value that changes perhaps i want to display all of the nationalities looking at the code i can see that all of the nationalities have an x value of 3. again you should make sure that you're comfortable with doing this before you proceed in the next video i'll show you how we can get all of the data out using nested loops in this video i'm going to show you how you can systematically visit each and every item in a twodimensional array as in the previous video i recommend that you keep a sketch of your data handy to help you visualize what's going on here's a sketch of the data i'm working with you may for example want to display all of the data items one at a time row by row like this the data are being visited one whole row at a time but as each row is visited every column in the row is visited we say that the data in the array are being visited row wise here's what the output of a program that does this looks like alternatively you might want to visit the data column wise like this a program that does this deals with one complete column at a time but as each column is visited all of the rows in that column are visited and here's what the output would look like if you can systematically visit all of the data items in an array one way or another then you can collect the data into a single output string then output everything at once like this visiting the data also allows you to search for something in particular for example you can ask the user for a surname and then find all the details of that person like this so let's take a look at some code and see how this can be done i'll begin by writing some code to display the data row wise i've already declared the array and i've already initialized all of the elements of the array just to speed things up this is the same data which you saw in the previous video i need two loop counters because i'm going to use nested for loops if i want to visit one row at a time i need a for loop like this because each row is numbered from zero to five but while i'm visiting a particular row i want to visit each column and i can do it with a for loop like this the columns are numbered from 0 to 4. think of it this way for each pass of the outer loop there will be several passes of the inner loop and now i'm going to output a data item for each pass of the inner loop let's see what happens when we run the program now let's display the data column wise i'm using a different button to run this program but i'm going to copy and paste some code it's the same code i used to declare and initialize the array in a later video i'll show you how two different procedures can share the same data for now we'll proceed like this to visit the data column wise i'm going to use nested loops again but this time i'm going to scan the columns primarily so i'm going to scan across the x dimension using my outer loop and as i visit each column i'm going to visit each row within that column and i need another message box as before let's see how it looks this time to display all of the data in a single message box i need to decide whether i'm going to build the output string in a rowwise fashion or a columnwise fashion i'm going to do it rowwise so again i'm going to borrow some code this is the code that displays the data items individually but column wise i need a string variable to collect the data into and then rather than displaying a message box for each pass of the inner loop i'm going to concatenate some new data to the output string and between each data item i'd like a space because i want each row of data to appear on a separate line within the message box i'm going to concatenate a vb new line character onto the output string but only with each pass of the outer loop and once the nested loops have both finished i can do one output with a single message box let's see if it works the final thing i want to show you is how we can search for the details of a particular person based on their surname for example i don't actually need nested loops to do this i'm going to use the same technique which i showed you in the previous video let's start by declaring and initializing the array and i need some loop counters and i'm going to use a boolean variable to record whether or not i found what i'm looking for i'm going to initialize it as false although to be honest i don't need to do that because immediately after it's been declared it will have a value of false i just want my code to be explicit i'll prompt the user for the target surname using an input box just to keep things simple so i'm going to need a variable to hold the target value i know that the surnames are in column number one so i'm going to write a loop to scan down the rows of column number one only testing each value as i go notice how i've hard coded the value of the x dimension here i'm always looking at column number one as i scan down the column if the data item which i'm looking at matches the target then i'll set my boolean variable to be equal to true and i can force an exit from this for loop by the time i've dropped out of the loop i know whether or not i've found what i'm looking for if i have then i can retrieve the rest of the data for that particular person notice this time i'm scanning across the row the value of y will be whatever it was when the first for loop came to an end so i know this loop is looking at the correct row if b found was equal to false then we simply display a message saying that we can't find what the user was looking for there's one final thing we need to add to this code let's see it in action that seems to be working fine and just to be sure let's look for somebody who isn't in the array that looks okay as well having said that we have an additional message box here which is rather untidy let's put this right that's better you should try writing some of these programs yourself perhaps you could display the data column wise but within the same message box or maybe build a search facility where you enter the person's occupation to retrieve all of their details
