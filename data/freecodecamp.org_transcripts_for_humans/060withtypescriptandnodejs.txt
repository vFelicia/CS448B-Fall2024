With timestamps:

00:00 - my name is bowen kelly i work at
00:01 - microsoft i'm a program manager working
00:03 - on javascript tools including typescript
00:06 - node.js and other tooling support in
00:08 - visual studio and visual studio code but
00:10 - today we're looking at specifically how
00:12 - to get you from 0 to 60 with typescript
00:14 - in node.js
00:16 - we only have 25 minutes so we're going
00:17 - to go kind of fast and be very demo
00:18 - driven
00:20 - if you have questions hold them to the
00:22 - end and i'll try to get them in time
00:24 - if you get nothing else from this
00:26 - session i want you to understand why
00:28 - typescript is worth your time you know
00:30 - there's a lot of tools out there there's
00:31 - a lot of technologies these days for a
00:32 - javascript developer to consider
00:34 - and if you take nothing else away you
00:36 - should understand why why typescript
00:38 - what does it aim to do and we'll get to
00:39 - that right off the bat i'm also going to
00:41 - show you how to get productive fast in
00:43 - whatever environment you're currently in
00:44 - and then finally i'm going to show you
00:45 - just a little bit of typescript in
00:46 - action
00:48 - so why typescript
00:50 - we think it's pretty simple
00:52 - we believe that developers should be
00:53 - able to focus on creating amazing things
00:57 - and creating is bold here because that's
00:59 - what we all aim to do with code you know
01:00 - code is just a tool at the end of the
01:02 - day to help us build services and
01:03 - products and experiences to truly wow
01:06 - our users
01:07 - but in reality that's not really how we
01:09 - spend our time
01:10 - if you take every activity you do on a
01:12 - week-to-week basis in your development
01:13 - cycles they can fall into three broad
01:15 - categories
01:16 - understanding code this is you know
01:18 - reading the existing code looking up
01:20 - documentation finding bugs
01:22 - maintaining existing code so this
01:24 - includes refactoring and preparing for
01:26 - new features
01:27 - and fixing those bugs that you know
01:28 - already exist and then finally finally
01:31 - after you've done all of those things if
01:32 - you've paid all that tax you can
01:34 - actually write new code and deliver new
01:35 - experiences
01:37 - and we found with javascript in
01:39 - particular the larger your code base
01:41 - grows uh the more complicated it gets
01:44 - and the harder it gets to focus on
01:45 - creation
01:47 - is anyone familiar with monaco
01:49 - how about vs code
01:51 - so monaco is where vs code started the
01:54 - idea was we wanted to take an editor
01:56 - environment and put it in the browser
01:58 - and so as such this was all written in
01:59 - javascript
02:01 - and we found that as this code base hit
02:03 - 300 400 000 lines of code it became
02:06 - really hard to focus on creation and we
02:08 - actually kind of measured we said how
02:09 - long are we spending on each of these
02:11 - buckets and what we found is a vast
02:13 - majority of our time was just trying to
02:15 - understand what our code was even doing
02:18 - then we spent about 25 of our time
02:20 - maintaining and then finally five
02:22 - percent or two hours and a 40 hour work
02:24 - week actually trying to build uh that
02:26 - that editor in the browser
02:28 - and we said you know this this is not
02:30 - this is not good enough we can
02:31 - definitely do better
02:33 - what would it take what if we could take
02:35 - this split and just build some tools
02:37 - such that minor savings from
02:39 - understanding and maintenance
02:41 - could add to creation time instead and
02:43 - what would that tool look like
02:45 - and it was chasing that idea that we
02:47 - created typescript now what exactly is
02:49 - typescript the technical definition is
02:52 - an optionally typed superset of
02:53 - javascript that compiles to plain
02:55 - javascript but i've always found it
02:56 - easier just to
02:58 - show rather than tell
03:02 - so here we are in a javascript file this
03:03 - is a random javascript file that we took
03:05 - out of a random project
03:07 - and to get started with typescript to
03:08 - see what typescript does uh all we're
03:10 - going to do is add a single comment and
03:12 - it's going to be ts check at the top of
03:14 - our file and what this is going to do is
03:15 - it's going to flag this in vs code
03:18 - and this is you know vs code by the way
03:20 - if you're unfamiliar you should check it
03:21 - out it's a great editor
03:23 - but if you just put ts check at the top
03:24 - it's going to flag this file and say hey
03:26 - i want you to go type check this
03:28 - javascript for me you do nothing else
03:30 - just run the typescript type checker and
03:31 - tell me if anything looks off
03:33 - and right off the bat you see we have
03:35 - some red squiggles this is actually not
03:37 - even part of the demo but z object i
03:39 - guess that's a typo
03:40 - my bad but uh
03:42 - typescript's going to look at all these
03:43 - things and see what makes sense or what
03:45 - it doesn't make sense and in this case z
03:46 - object they don't know what that is and
03:48 - so they flag it in fact it was a typo it
03:51 - was a mistake so we can delete that out
03:53 - we could look at the next mistake
03:55 - argument of type this string literal
03:58 - value and read only
04:00 - is not assignable to the parameter
04:01 - property descriptor and so what's
04:03 - happening here is javascript has types
04:05 - it is dynamically typed so they can
04:07 - change and they're not necessarily
04:09 - enforced ever but they do have types
04:11 - types exist under the scenes and that's
04:12 - what typescript's looking at and so if
04:14 - we look at this define property method
04:16 - we can see that
04:18 - there are in fact types that javascript
04:20 - expects at runtime
04:22 - and if we look at this property
04:23 - descriptor there are a limited set of
04:25 - options that you can pass through and
04:27 - anything that isn't in this set just is
04:29 - going to get ignored by javascript at
04:31 - runtime it doesn't care right and so
04:32 - we're going to look at this we see
04:33 - configurable enumerable value and
04:35 - writable and we can see that back in our
04:38 - code we used read-only so probably what
04:40 - we intended was to say writable false
04:45 - or actually true
04:46 - and you see our error goes away but what
04:48 - would i have in a run time again if i
04:50 - pass in read only into this method it's
04:52 - going to look at it it's going to see
04:54 - that it doesn't match what's expecting
04:55 - and it's going to pretend like it never
04:56 - saw anything and so now you have a
04:58 - misconfigured object your method may be
05:00 - behaving in a way that you didn't expect
05:02 - and you don't even have an error to
05:03 - point you to the right direction where
05:05 - where your code went wrong and that's
05:07 - what typescript does it points you in
05:08 - the right direction here we have another
05:10 - mistake where we see operator greater
05:13 - than cannot be applied to some function
05:15 - and a number if we look at ship weight
05:17 - sure enough it's a function that returns
05:19 - the parse end of some text so probably
05:21 - what we intended to do was call this
05:23 - function
05:24 - but we didn't right and this is this is
05:26 - a common mistake i've done this
05:27 - thousands of times but you won't catch
05:29 - this until run time
05:31 - and in fact at run time what's going to
05:32 - happen when you compare a function and a
05:34 - number
05:35 - it's false
05:36 - it's not an error it's not true it's
05:38 - false and so this code is going to be
05:41 - misbehaving you will never find that
05:43 - your you know shipping weight is over a
05:45 - hundred
05:46 - it will always return false and you'll
05:47 - have no idea why your code's misbehaving
05:49 - typescript can help you save you from
05:51 - these little mistakes
05:53 - but this is just javascript we haven't
05:54 - done anything to change what's going on
05:56 - here typescript is just looking at your
05:58 - existing javascript because typescript
05:59 - is a superset of javascript
06:01 - but what else can we do with typescript
06:03 - well we can start adding types
06:05 - in this function we have an email
06:08 - address parameter
06:09 - and typescript's saying this is an any
06:12 - and so right now it doesn't know
06:13 - anything about this parameter but we can
06:15 - tell it we can say hey i've got this
06:16 - comment here that says it can be a
06:18 - string or a string array so i'm going to
06:20 - use a js doc comment because again we're
06:22 - still in a js file
06:24 - i'm going to say this is a string or a
06:26 - string array
06:28 - and now typescript knows from this js
06:30 - doc comment that we want this to be a
06:32 - string or a string array and now i can
06:34 - continue type checking the rest of your
06:35 - code with this assumption that this is
06:38 - what you're saying it is
06:39 - and here we find a final mistake where
06:42 - we have misspelled trim
06:45 - because trin is not a function off of
06:47 - email address
06:49 - and so basically what you're seeing here
06:51 - is typescript is just javascript
06:53 - typescript is just additional tools to
06:56 - help you write better javascript to take
06:58 - care of the little mistakes and let you
07:00 - focus on what you're actually trying to
07:01 - build
07:05 - and so
07:05 - what are you supposed to take away from
07:07 - that quick demo really
07:09 - you can start using
07:10 - type checking javascript today it's very
07:12 - simple in vs code all you have to do is
07:14 - add a comment to the top of your file
07:16 - using ts check will get you started fast
07:18 - you don't have to deal with
07:19 - configuration you don't have to deal
07:20 - with
07:21 - config files or build setups all you
07:23 - have to do is add that comment and then
07:25 - you can slowly start adding jsdoc
07:27 - comments with types in them to
07:29 - experiment with what types would be like
07:31 - what is it like to work with a type
07:32 - system you don't have to jump in all at
07:34 - once
07:36 - so you get it you see you can add type
07:38 - system type checking to javascript but
07:40 - does it really work a lot of people
07:42 - think that you know
07:44 - i'm fine without type checking it
07:46 - wouldn't really help me that much
07:48 - well for the skeptics out there there
07:50 - has been
07:51 - empirical research on this where they
07:53 - took
07:54 - 400 code bases on github they looked at
07:56 - bugs that made it into production and
07:58 - then they went back and applied
08:00 - both flow and typescript to those code
08:02 - bases to see if a compile-time type
08:05 - checker would have prevented that bug
08:06 - from ever making it to production and
08:08 - they found that 15 percent of those 400
08:10 - bugs would have never made it into
08:12 - production
08:13 - and been caught by type checker
08:16 - and so it works type systems work
08:19 - so so you saw how we can start type
08:22 - checking javascript but typescript's
08:24 - more than that typescript is a superset
08:26 - and it really allows a lot more features
08:28 - than you just saw
08:30 - and so to show you how you can convert
08:31 - an entire
08:32 - existing express code base
08:35 - i'm going to take this
08:37 - simple app
08:39 - which is a basic express app it's
08:41 - actually a
08:43 - paired down
08:44 - sample
08:45 - from a quick start
08:49 - and basically it gives you a boilerplate
08:52 - for a node.js express application it's
08:54 - got some basic plug templates it's got
08:56 - authentication using passport you know i
08:59 - can log in
09:01 - and it's really just a starting point
09:03 - you know many people use these to get
09:04 - started with their applications these
09:05 - days
09:07 - and so this is what we're going to start
09:08 - with and i'm going to convert this
09:10 - javascript code base to typescript just
09:12 - to show you how easy it is and some of
09:14 - the things you get once you do and so as
09:16 - you can see we've got
09:18 - a node modules folder a node modules
09:20 - backup folder because i'm very paranoid
09:21 - about having internet during demos
09:23 - you've got a source folder a lot of
09:25 - javascript files in here
09:28 - and then your basic config files
09:30 - and so the first thing to do to get
09:31 - going with you know the full-blown
09:33 - typescript is you need a ts config and
09:35 - so i'm going to type tsc init from the
09:37 - integrated terminal in vs code and it's
09:39 - going to generate me a ts config file
09:42 - and what you're going to see in this ts
09:43 - config file is a ton of options right
09:45 - but these are all commented out these
09:46 - are basically every option you could
09:48 - pass into ts config with an explanation
09:50 - of what it is and so it's very useful
09:52 - for getting familiar with what your
09:53 - options are
09:54 - but
09:55 - we already know what we need and so i'm
09:57 - just going to delete this and cut
09:59 - straight to the chase we're targeting
10:01 - node
10:02 - so we can use es6
10:04 - common js is fine
10:06 - we want to use allow js and what this is
10:08 - going to let us do is pass both
10:10 - javascript and typescript into the
10:11 - compiler and i'll show you what that
10:12 - means in a second
10:14 - we then want a out directory
10:17 - and we'll call this dist for
10:19 - distribution
10:21 - and then finally we want a module
10:23 - resolution to be node and this is just
10:25 - going to tell the types of compiler i'm
10:27 - in a node application i'm targeting a
10:28 - node environment you should do module
10:30 - resolution in the same kind of way that
10:32 - i would expect in node
10:34 - the last thing i'm going to do is i'm
10:35 - going to include
10:38 - my source files you see here i have a
10:40 - source directory
10:42 - and
10:44 - that will basically set the
10:46 - route in which typescript consumes
10:48 - source files
10:50 - and so now when i run tsc which invokes
10:52 - the typescript compiler
10:54 - you will see that i made a mistake
11:04 - oh you're right thank you
11:10 - so this is just a globbing pattern and i
11:11 - reversed that on accident so we're going
11:13 - to run it you're going to see we now
11:14 - have a dist folder inside this disk
11:16 - folder is the same thing we put in we
11:18 - just passed in javascript files and we
11:19 - got out javascript files and you'll
11:21 - notice these are
11:22 - exactly the same
11:25 - which is good
11:26 - so we can now convert
11:29 - we have our compiler set up we can now
11:30 - convert our first file from js to ts and
11:33 - once we've done this
11:34 - we can now
11:36 - you know
11:37 - write typescript as we would expect
11:38 - where we can add
11:40 - type annotations in line to functions
11:43 - and then when we call the function if we
11:46 - don't pass in the correct type it will
11:48 - complain right we are now in a
11:49 - typescript file a typescript environment
11:51 - the compiler is checking this by default
11:53 - now
11:54 - but notice the rest of my files are
11:56 - still javascript
11:58 - so i can now run tsc again and it will
12:00 - take all of the typescript files in the
12:02 - source file convert them to javascript
12:04 - and we'll take all of the javascript
12:05 - files and just basically pass them
12:07 - through the compiler and we'll put them
12:09 - all in my distribution folder so that i
12:11 - can still run my app so now i can still
12:13 - do node and this time we'll go from
12:16 - dist and we'll put server that's not it
12:20 - and
12:22 - fire it up and you'll see that it is in
12:25 - fact
12:26 - still working as we'd expect nothing has
12:27 - changed
12:32 - so this is the part where if you have a
12:33 - large project you might want to go file
12:35 - by file one file at a time convert it to
12:37 - typescript do your work and and make it
12:40 - the conversion in a piecemeal fashion
12:42 - but because this is a small project and
12:44 - there's only a handful of files i'm just
12:46 - going to go ahead and convert these all
12:47 - to ts
12:49 - just so you can see
12:51 - what that conversion is going to be like
12:56 - and so we're going to run tsc again and
12:57 - this is where you start to run into the
12:58 - first kind of friction from converting
13:01 - right we're going to get a couple of
13:02 - errors and you see a bunch of them or
13:03 - cannot redeclare this block scoped
13:05 - variable passport right and basically
13:07 - what's happening here is if we go look
13:09 - at passport ts
13:11 - we can see we've got squiggles on our
13:13 - imports and
13:15 - this is a kind of complicated subject if
13:17 - you dealt with modules in javascript
13:18 - before you know that it's a pretty deep
13:20 - rabbit hole and so i'm not going to go
13:22 - too in depth here but basically
13:24 - this this code is written and required
13:27 - using you know common js
13:29 - what we need it to be is an es6 so the
13:31 - typescript compiler can understand it
13:33 - and then return it back to common js and
13:35 - so to do that
13:37 - we can just use this handy regex that i
13:39 - have in this sketchy unsaved notepad
13:41 - file
13:45 - and
13:46 - what this regex is going to do is it's
13:48 - going to take all of our import
13:49 - statements and convert them to the es6
13:52 - import star syntax
13:54 - and so when i do that you'll see it
13:55 - highlights all of my imports
13:57 - i can go ahead and execute that
13:59 - and it's going to replace them all in
14:00 - line and i now have import star as
14:02 - passport from passport and you see the
14:04 - types of compiler is now happy
14:06 - the other thing i have to do is if i
14:07 - change my imports i also got to change
14:09 - my exports
14:15 - and so we'll do that real quick too
14:19 - i'm gonna make sure we don't change
14:20 - anything in jquery that would be bad
14:23 - and all of our exports get changed as
14:25 - well
14:26 - now this isn't a perfect conversion this
14:28 - was just a real quick regex i wrote
14:30 - right you know before this and so
14:32 - there's a couple places where it doesn't
14:33 - do exactly what we want
14:35 - for example when we're trying to export
14:37 - our model we use modules.export instead
14:40 - of export equals or exports equals
14:42 - rather
14:43 - and so we have to go clean this up by
14:45 - hand
14:47 - but you could write a much better regex
14:49 - than i could and make this actually work
14:51 - and so we're going to switch this to
14:52 - export default user you'll see why we
14:54 - want to default in a while
14:56 - and then we also need to switch
15:00 - this module export to
15:03 - export
15:06 - app
15:07 - export equals app there we go
15:10 - so now we're going to go ahead and check
15:12 - our problems list to see where our
15:14 - remaining problems are
15:16 - and it looks like we've got one more
15:18 - error again this is another module thing
15:21 - because of the way expressvalidator
15:23 - exposes
15:24 - itself in in their module we have to use
15:28 - a slightly separate syntax for this
15:29 - module this is pretty rare but
15:32 - expressvalidator is the one that you'll
15:33 - experience in a node project where you
15:35 - have to say import express validator
15:38 - equals require instead of from
15:39 - expressvalidator again kind of a
15:42 - nuisance but it comes into this whole
15:44 - inherited module problem that we have
15:47 - so now let's look at
15:49 - some of the remaining errors we have
15:51 - and so this one will tell us that
15:54 - property id does not exist on this type
15:56 - which is an empty object
15:58 - and if we look at this we can see that
16:00 - you know serialize user has a full
16:02 - function body and if we look at that
16:04 - this is actually a dts file
16:07 - that we have hiding in the project and
16:08 - this is where i have to to lie to you a
16:11 - little bit i went ahead and downloaded
16:13 - all the dts files for this project ahead
16:15 - of time
16:17 - again for internet reasons but
16:19 - basically what happens here is if we go
16:21 - to our package json
16:24 - we can get the
16:25 - type definitions for
16:27 - just about every single node module
16:30 - by going to at types which is
16:33 - basically a community that's on github
16:36 - that just contributes all of their own
16:38 - typings to a community and we can
16:40 - download them by using the at type scope
16:42 - on npm and so when i say at types slash
16:45 - express session i'm getting the dts file
16:48 - for express session and you can see i
16:50 - have a number of dts files that i've
16:52 - gone ahead and grabbed and all of these
16:54 - are imports that i use somewhere in this
16:56 - project and what this does is in my node
16:59 - modules folder
17:00 - you will see i have an at types folder
17:02 - and in here i have a dts file for every
17:05 - single one of these which contains the
17:06 - types which will let me type check the
17:08 - code
17:09 - this is really great because this is
17:11 - basically free
17:12 - value right typically when you're using
17:15 - a type checker you have to provide the
17:17 - types for them to check when you use a
17:19 - dts file someone has already gone and
17:20 - done all of the work of adding those
17:22 - types for you and you just get to
17:23 - benefit from their labor
17:25 - so that's great but so we're looking at
17:27 - this and we're saying okay well there's
17:28 - a problem here
17:30 - id does not exist on this you know
17:33 - user but this is our user model this is
17:35 - the thing that you know we defined uh
17:38 - used for mongoose right
17:40 - and
17:41 - basically what we need to tell
17:42 - typescript here is this is a little more
17:44 - specific than just an empty object in
17:47 - fact
17:48 - it is a mongoose document and so we can
17:50 - import
17:52 - a
17:53 - document
17:56 - sorry
18:00 - we can import from mongoose
18:04 - document which is a type again that has
18:06 - already been defined for us if we look
18:08 - at that we can see
18:09 - this is a dts file again and someone has
18:11 - gone ahead and defined all of the things
18:13 - that exist on a mongoose document
18:16 - and now we can say this user is actually
18:19 - of type document
18:23 - and that that error will go away
18:26 - but not all of the errors go away and if
18:28 - we look at
18:31 - ah okay we have another problem here
18:32 - where we're importing user incorrectly
18:35 - if we
18:36 - right click and go to definition on this
18:38 - user we see we just end up in this file
18:39 - but not on the actual user we export
18:43 - and so the issue in this case is because
18:45 - we use the default export
18:48 - we have to
18:49 - [Music]
18:50 - alias the import so we say default as
18:54 - user and then we're all better
18:58 - anyways back to our back to our
19:01 - user model if we look at this user model
19:03 - we'll add document here again and we'll
19:05 - expect to resolve this error
19:08 - except in this case it doesn't work and
19:10 - that's because compare password is a
19:12 - method that we added
19:14 - onto our user model in mongoose and so
19:17 - we've added this custom method it
19:19 - doesn't exist on the document and so we
19:21 - need some way to extend document and say
19:23 - you know this isn't just a document this
19:25 - is a user document
19:27 - and so what you can do is you can create
19:29 - a type in typescript so we'll export
19:32 - type user document
19:34 - and we'll say that this is
19:37 - a
19:39 - mongoose.document
19:42 - and
19:44 - some additional stuff and what this is
19:45 - is an intersection type this ampersand
19:48 - basically says i have one type that i
19:50 - want to start with and i want to throw
19:51 - more stuff into it to create some new
19:53 - type which we'll call user document and
19:55 - so we'll add compare password here and
19:58 - we'll make it an any just for now
20:00 - and when we go back
20:03 - to
20:08 - our document and we make this now a user
20:10 - document
20:14 - oh we got to import it first
20:17 - sorry
20:23 - wrong place
20:27 - when we now make this a user document
20:32 - you'll see that
20:33 - our error goes away and indeed if we
20:35 - look at this user we can see that we
20:37 - have the base document stuff on it like
20:40 - id for example but we also have our
20:42 - function compare password which is of
20:44 - type any
20:46 - so we can actually do much better than
20:47 - this because when we defined this model
20:49 - there was a bunch of stuff in it right
20:51 - we have you know profile which has a
20:53 - bunch of strings and password and
20:54 - password token and so again back to my
20:57 - sketchy
20:58 - notepad we can grab the type and type
21:02 - out exactly what we want this type to be
21:07 - we'll go ahead and format this real
21:08 - quick
21:10 - and now
21:11 - when we refer to it
21:13 - now that we've added you know all of the
21:15 - properties that exist on this type
21:17 - when we actually use it
21:21 - we're in passport
21:22 - we can see that we have access to all of
21:25 - those things so if i look at profile we
21:27 - have profile and we can see all of the
21:28 - properties that exist inside profile and
21:31 - so again typescript is just helping you
21:33 - here it's telling you what your options
21:34 - are what's available if you make a
21:36 - mistake and try to you know
21:38 - do something that's not there it's going
21:40 - to tell you this property does not exist
21:42 - on this model that you created
21:44 - and it's going to give you basically the
21:46 - help you need to focus on what you're
21:47 - trying to build
21:50 - let's see
21:53 - last one this is also an import error
21:56 - where we're importing user this needs to
21:58 - be a default
22:00 - and with that we should be
22:02 - done we've now converted all of our
22:04 - files to typescript
22:06 - we can run tsc
22:09 - and see that it does compile to our
22:12 - distributed folder
22:13 - and it comes back clean there's no
22:15 - errors
22:16 - if we
22:19 - run node on that server
22:22 - and we start it up we can see that our
22:23 - application still works
22:27 - as we expect right
22:29 - but now we're in like a fully typed
22:31 - environment
22:32 - we're not fully typed yet we're in a
22:33 - typescript capable environment so we can
22:35 - start adding types wherever we want and
22:37 - so from here on out you can use
22:38 - typescript or types when it's helpful
22:41 - and ignore them when it's not
22:43 - and so if we go look at
22:45 - user ts this controller for example you
22:47 - can see that we have requests and
22:49 - responses all throughout this file
22:52 - where we don't have types yet and so if
22:54 - we want to
22:55 - we can import from
22:58 - express
23:01 - request and response
23:05 - and now we can add these types inline
23:08 - and so what this does is if you look at
23:10 - you know before we add it if i do
23:11 - request dot i get nothing right our
23:14 - editor knows nothing about this thing
23:17 - but as soon as i tell it what it is
23:19 - and again we're taking advantage of
23:22 - types that other users have already
23:24 - defined for us
23:25 - if we look at this we can see that there
23:27 - is really a lot of work that has been
23:28 - done here that we can just take
23:30 - advantage of right away
23:33 - when we start using these things we now
23:35 - get great help great tools great support
23:38 - if we make mistakes the compiler is
23:39 - going to catch it
23:41 - if we just want to you know
23:44 - write code and see what the
23:46 - you know functions do or their
23:48 - signatures do you can get all of that
23:49 - right in your editor and so you don't
23:51 - have to flip back and forth between
23:52 - documentation you don't have to spend
23:54 - your time trying to figure out what
23:55 - those methods are that you can call
23:57 - you can spend more time actually doing
23:59 - the work you want to do
24:01 - that looks like that's about all the
24:03 - time i have i want to call out that
24:05 - this is a tiny sample
24:08 - taken from a larger sample if you go to
24:10 - microsoft typescript node starter
24:13 - this is a repo that we maintain so that
24:15 - you can see what a node and typescript
24:17 - repository looks like and look at other
24:19 - best practices like testing and ci and
24:23 - setting up vs code with task.json and
24:25 - debugging configurations all of that
24:27 - stuff lives in this repository we don't
24:29 - have time to go over it today but i
24:31 - encourage you to check it out if you're
24:32 - interested
24:34 - final kind of kind of takeaways i
24:36 - encourage you if if you've never used a
24:38 - type checker before
24:39 - download vs code throw at ts check at
24:42 - the top of your file just to see what
24:43 - happens you may be surprised and find
24:45 - that you have a couple bugs lurking
24:48 - it also may be totally clean the worst
24:50 - that could happen is nothing right
24:52 - i also would encourage you to
24:54 - think about adding typescript to any of
24:56 - your current workflows because it really
24:58 - works anywhere you can lay it on top in
24:59 - about what 10 minutes we just added it
25:01 - to an express application but you can
25:03 - really add it to any kind of node
25:05 - project you're using today
25:06 - and finally the point of all of this
25:08 - whether it's using node whether it's
25:10 - using typescript any of these tools is
25:12 - to help you focus on building cool stuff
25:14 - you know services products experiences
25:17 - for customers and i encourage you to
25:18 - think about that next time you're you're
25:20 - working on a project how can i be more
25:22 - productive we think typescript and node
25:24 - can help you do that thank you
25:27 - [Applause]

Cleaned transcript:

my name is bowen kelly i work at microsoft i'm a program manager working on javascript tools including typescript node.js and other tooling support in visual studio and visual studio code but today we're looking at specifically how to get you from 0 to 60 with typescript in node.js we only have 25 minutes so we're going to go kind of fast and be very demo driven if you have questions hold them to the end and i'll try to get them in time if you get nothing else from this session i want you to understand why typescript is worth your time you know there's a lot of tools out there there's a lot of technologies these days for a javascript developer to consider and if you take nothing else away you should understand why why typescript what does it aim to do and we'll get to that right off the bat i'm also going to show you how to get productive fast in whatever environment you're currently in and then finally i'm going to show you just a little bit of typescript in action so why typescript we think it's pretty simple we believe that developers should be able to focus on creating amazing things and creating is bold here because that's what we all aim to do with code you know code is just a tool at the end of the day to help us build services and products and experiences to truly wow our users but in reality that's not really how we spend our time if you take every activity you do on a weektoweek basis in your development cycles they can fall into three broad categories understanding code this is you know reading the existing code looking up documentation finding bugs maintaining existing code so this includes refactoring and preparing for new features and fixing those bugs that you know already exist and then finally finally after you've done all of those things if you've paid all that tax you can actually write new code and deliver new experiences and we found with javascript in particular the larger your code base grows uh the more complicated it gets and the harder it gets to focus on creation is anyone familiar with monaco how about vs code so monaco is where vs code started the idea was we wanted to take an editor environment and put it in the browser and so as such this was all written in javascript and we found that as this code base hit 300 400 000 lines of code it became really hard to focus on creation and we actually kind of measured we said how long are we spending on each of these buckets and what we found is a vast majority of our time was just trying to understand what our code was even doing then we spent about 25 of our time maintaining and then finally five percent or two hours and a 40 hour work week actually trying to build uh that that editor in the browser and we said you know this this is not this is not good enough we can definitely do better what would it take what if we could take this split and just build some tools such that minor savings from understanding and maintenance could add to creation time instead and what would that tool look like and it was chasing that idea that we created typescript now what exactly is typescript the technical definition is an optionally typed superset of javascript that compiles to plain javascript but i've always found it easier just to show rather than tell so here we are in a javascript file this is a random javascript file that we took out of a random project and to get started with typescript to see what typescript does uh all we're going to do is add a single comment and it's going to be ts check at the top of our file and what this is going to do is it's going to flag this in vs code and this is you know vs code by the way if you're unfamiliar you should check it out it's a great editor but if you just put ts check at the top it's going to flag this file and say hey i want you to go type check this javascript for me you do nothing else just run the typescript type checker and tell me if anything looks off and right off the bat you see we have some red squiggles this is actually not even part of the demo but z object i guess that's a typo my bad but uh typescript's going to look at all these things and see what makes sense or what it doesn't make sense and in this case z object they don't know what that is and so they flag it in fact it was a typo it was a mistake so we can delete that out we could look at the next mistake argument of type this string literal value and read only is not assignable to the parameter property descriptor and so what's happening here is javascript has types it is dynamically typed so they can change and they're not necessarily enforced ever but they do have types types exist under the scenes and that's what typescript's looking at and so if we look at this define property method we can see that there are in fact types that javascript expects at runtime and if we look at this property descriptor there are a limited set of options that you can pass through and anything that isn't in this set just is going to get ignored by javascript at runtime it doesn't care right and so we're going to look at this we see configurable enumerable value and writable and we can see that back in our code we used readonly so probably what we intended was to say writable false or actually true and you see our error goes away but what would i have in a run time again if i pass in read only into this method it's going to look at it it's going to see that it doesn't match what's expecting and it's going to pretend like it never saw anything and so now you have a misconfigured object your method may be behaving in a way that you didn't expect and you don't even have an error to point you to the right direction where where your code went wrong and that's what typescript does it points you in the right direction here we have another mistake where we see operator greater than cannot be applied to some function and a number if we look at ship weight sure enough it's a function that returns the parse end of some text so probably what we intended to do was call this function but we didn't right and this is this is a common mistake i've done this thousands of times but you won't catch this until run time and in fact at run time what's going to happen when you compare a function and a number it's false it's not an error it's not true it's false and so this code is going to be misbehaving you will never find that your you know shipping weight is over a hundred it will always return false and you'll have no idea why your code's misbehaving typescript can help you save you from these little mistakes but this is just javascript we haven't done anything to change what's going on here typescript is just looking at your existing javascript because typescript is a superset of javascript but what else can we do with typescript well we can start adding types in this function we have an email address parameter and typescript's saying this is an any and so right now it doesn't know anything about this parameter but we can tell it we can say hey i've got this comment here that says it can be a string or a string array so i'm going to use a js doc comment because again we're still in a js file i'm going to say this is a string or a string array and now typescript knows from this js doc comment that we want this to be a string or a string array and now i can continue type checking the rest of your code with this assumption that this is what you're saying it is and here we find a final mistake where we have misspelled trim because trin is not a function off of email address and so basically what you're seeing here is typescript is just javascript typescript is just additional tools to help you write better javascript to take care of the little mistakes and let you focus on what you're actually trying to build and so what are you supposed to take away from that quick demo really you can start using type checking javascript today it's very simple in vs code all you have to do is add a comment to the top of your file using ts check will get you started fast you don't have to deal with configuration you don't have to deal with config files or build setups all you have to do is add that comment and then you can slowly start adding jsdoc comments with types in them to experiment with what types would be like what is it like to work with a type system you don't have to jump in all at once so you get it you see you can add type system type checking to javascript but does it really work a lot of people think that you know i'm fine without type checking it wouldn't really help me that much well for the skeptics out there there has been empirical research on this where they took 400 code bases on github they looked at bugs that made it into production and then they went back and applied both flow and typescript to those code bases to see if a compiletime type checker would have prevented that bug from ever making it to production and they found that 15 percent of those 400 bugs would have never made it into production and been caught by type checker and so it works type systems work so so you saw how we can start type checking javascript but typescript's more than that typescript is a superset and it really allows a lot more features than you just saw and so to show you how you can convert an entire existing express code base i'm going to take this simple app which is a basic express app it's actually a paired down sample from a quick start and basically it gives you a boilerplate for a node.js express application it's got some basic plug templates it's got authentication using passport you know i can log in and it's really just a starting point you know many people use these to get started with their applications these days and so this is what we're going to start with and i'm going to convert this javascript code base to typescript just to show you how easy it is and some of the things you get once you do and so as you can see we've got a node modules folder a node modules backup folder because i'm very paranoid about having internet during demos you've got a source folder a lot of javascript files in here and then your basic config files and so the first thing to do to get going with you know the fullblown typescript is you need a ts config and so i'm going to type tsc init from the integrated terminal in vs code and it's going to generate me a ts config file and what you're going to see in this ts config file is a ton of options right but these are all commented out these are basically every option you could pass into ts config with an explanation of what it is and so it's very useful for getting familiar with what your options are but we already know what we need and so i'm just going to delete this and cut straight to the chase we're targeting node so we can use es6 common js is fine we want to use allow js and what this is going to let us do is pass both javascript and typescript into the compiler and i'll show you what that means in a second we then want a out directory and we'll call this dist for distribution and then finally we want a module resolution to be node and this is just going to tell the types of compiler i'm in a node application i'm targeting a node environment you should do module resolution in the same kind of way that i would expect in node the last thing i'm going to do is i'm going to include my source files you see here i have a source directory and that will basically set the route in which typescript consumes source files and so now when i run tsc which invokes the typescript compiler you will see that i made a mistake oh you're right thank you so this is just a globbing pattern and i reversed that on accident so we're going to run it you're going to see we now have a dist folder inside this disk folder is the same thing we put in we just passed in javascript files and we got out javascript files and you'll notice these are exactly the same which is good so we can now convert we have our compiler set up we can now convert our first file from js to ts and once we've done this we can now you know write typescript as we would expect where we can add type annotations in line to functions and then when we call the function if we don't pass in the correct type it will complain right we are now in a typescript file a typescript environment the compiler is checking this by default now but notice the rest of my files are still javascript so i can now run tsc again and it will take all of the typescript files in the source file convert them to javascript and we'll take all of the javascript files and just basically pass them through the compiler and we'll put them all in my distribution folder so that i can still run my app so now i can still do node and this time we'll go from dist and we'll put server that's not it and fire it up and you'll see that it is in fact still working as we'd expect nothing has changed so this is the part where if you have a large project you might want to go file by file one file at a time convert it to typescript do your work and and make it the conversion in a piecemeal fashion but because this is a small project and there's only a handful of files i'm just going to go ahead and convert these all to ts just so you can see what that conversion is going to be like and so we're going to run tsc again and this is where you start to run into the first kind of friction from converting right we're going to get a couple of errors and you see a bunch of them or cannot redeclare this block scoped variable passport right and basically what's happening here is if we go look at passport ts we can see we've got squiggles on our imports and this is a kind of complicated subject if you dealt with modules in javascript before you know that it's a pretty deep rabbit hole and so i'm not going to go too in depth here but basically this this code is written and required using you know common js what we need it to be is an es6 so the typescript compiler can understand it and then return it back to common js and so to do that we can just use this handy regex that i have in this sketchy unsaved notepad file and what this regex is going to do is it's going to take all of our import statements and convert them to the es6 import star syntax and so when i do that you'll see it highlights all of my imports i can go ahead and execute that and it's going to replace them all in line and i now have import star as passport from passport and you see the types of compiler is now happy the other thing i have to do is if i change my imports i also got to change my exports and so we'll do that real quick too i'm gonna make sure we don't change anything in jquery that would be bad and all of our exports get changed as well now this isn't a perfect conversion this was just a real quick regex i wrote right you know before this and so there's a couple places where it doesn't do exactly what we want for example when we're trying to export our model we use modules.export instead of export equals or exports equals rather and so we have to go clean this up by hand but you could write a much better regex than i could and make this actually work and so we're going to switch this to export default user you'll see why we want to default in a while and then we also need to switch this module export to export app export equals app there we go so now we're going to go ahead and check our problems list to see where our remaining problems are and it looks like we've got one more error again this is another module thing because of the way expressvalidator exposes itself in in their module we have to use a slightly separate syntax for this module this is pretty rare but expressvalidator is the one that you'll experience in a node project where you have to say import express validator equals require instead of from expressvalidator again kind of a nuisance but it comes into this whole inherited module problem that we have so now let's look at some of the remaining errors we have and so this one will tell us that property id does not exist on this type which is an empty object and if we look at this we can see that you know serialize user has a full function body and if we look at that this is actually a dts file that we have hiding in the project and this is where i have to to lie to you a little bit i went ahead and downloaded all the dts files for this project ahead of time again for internet reasons but basically what happens here is if we go to our package json we can get the type definitions for just about every single node module by going to at types which is basically a community that's on github that just contributes all of their own typings to a community and we can download them by using the at type scope on npm and so when i say at types slash express session i'm getting the dts file for express session and you can see i have a number of dts files that i've gone ahead and grabbed and all of these are imports that i use somewhere in this project and what this does is in my node modules folder you will see i have an at types folder and in here i have a dts file for every single one of these which contains the types which will let me type check the code this is really great because this is basically free value right typically when you're using a type checker you have to provide the types for them to check when you use a dts file someone has already gone and done all of the work of adding those types for you and you just get to benefit from their labor so that's great but so we're looking at this and we're saying okay well there's a problem here id does not exist on this you know user but this is our user model this is the thing that you know we defined uh used for mongoose right and basically what we need to tell typescript here is this is a little more specific than just an empty object in fact it is a mongoose document and so we can import a document sorry we can import from mongoose document which is a type again that has already been defined for us if we look at that we can see this is a dts file again and someone has gone ahead and defined all of the things that exist on a mongoose document and now we can say this user is actually of type document and that that error will go away but not all of the errors go away and if we look at ah okay we have another problem here where we're importing user incorrectly if we right click and go to definition on this user we see we just end up in this file but not on the actual user we export and so the issue in this case is because we use the default export we have to alias the import so we say default as user and then we're all better anyways back to our back to our user model if we look at this user model we'll add document here again and we'll expect to resolve this error except in this case it doesn't work and that's because compare password is a method that we added onto our user model in mongoose and so we've added this custom method it doesn't exist on the document and so we need some way to extend document and say you know this isn't just a document this is a user document and so what you can do is you can create a type in typescript so we'll export type user document and we'll say that this is a mongoose.document and some additional stuff and what this is is an intersection type this ampersand basically says i have one type that i want to start with and i want to throw more stuff into it to create some new type which we'll call user document and so we'll add compare password here and we'll make it an any just for now and when we go back to our document and we make this now a user document oh we got to import it first sorry wrong place when we now make this a user document you'll see that our error goes away and indeed if we look at this user we can see that we have the base document stuff on it like id for example but we also have our function compare password which is of type any so we can actually do much better than this because when we defined this model there was a bunch of stuff in it right we have you know profile which has a bunch of strings and password and password token and so again back to my sketchy notepad we can grab the type and type out exactly what we want this type to be we'll go ahead and format this real quick and now when we refer to it now that we've added you know all of the properties that exist on this type when we actually use it we're in passport we can see that we have access to all of those things so if i look at profile we have profile and we can see all of the properties that exist inside profile and so again typescript is just helping you here it's telling you what your options are what's available if you make a mistake and try to you know do something that's not there it's going to tell you this property does not exist on this model that you created and it's going to give you basically the help you need to focus on what you're trying to build let's see last one this is also an import error where we're importing user this needs to be a default and with that we should be done we've now converted all of our files to typescript we can run tsc and see that it does compile to our distributed folder and it comes back clean there's no errors if we run node on that server and we start it up we can see that our application still works as we expect right but now we're in like a fully typed environment we're not fully typed yet we're in a typescript capable environment so we can start adding types wherever we want and so from here on out you can use typescript or types when it's helpful and ignore them when it's not and so if we go look at user ts this controller for example you can see that we have requests and responses all throughout this file where we don't have types yet and so if we want to we can import from express request and response and now we can add these types inline and so what this does is if you look at you know before we add it if i do request dot i get nothing right our editor knows nothing about this thing but as soon as i tell it what it is and again we're taking advantage of types that other users have already defined for us if we look at this we can see that there is really a lot of work that has been done here that we can just take advantage of right away when we start using these things we now get great help great tools great support if we make mistakes the compiler is going to catch it if we just want to you know write code and see what the you know functions do or their signatures do you can get all of that right in your editor and so you don't have to flip back and forth between documentation you don't have to spend your time trying to figure out what those methods are that you can call you can spend more time actually doing the work you want to do that looks like that's about all the time i have i want to call out that this is a tiny sample taken from a larger sample if you go to microsoft typescript node starter this is a repo that we maintain so that you can see what a node and typescript repository looks like and look at other best practices like testing and ci and setting up vs code with task.json and debugging configurations all of that stuff lives in this repository we don't have time to go over it today but i encourage you to check it out if you're interested final kind of kind of takeaways i encourage you if if you've never used a type checker before download vs code throw at ts check at the top of your file just to see what happens you may be surprised and find that you have a couple bugs lurking it also may be totally clean the worst that could happen is nothing right i also would encourage you to think about adding typescript to any of your current workflows because it really works anywhere you can lay it on top in about what 10 minutes we just added it to an express application but you can really add it to any kind of node project you're using today and finally the point of all of this whether it's using node whether it's using typescript any of these tools is to help you focus on building cool stuff you know services products experiences for customers and i encourage you to think about that next time you're you're working on a project how can i be more productive we think typescript and node can help you do that thank you
