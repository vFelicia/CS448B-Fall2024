With timestamps:

00:03 - hey there in this lecture you're going
00:05 - to learn how to create your very first
00:07 - flexbox layout using the example you can
00:09 - see on the page here i've already added
00:11 - a little bit of styling in the basic.css
00:14 - file though this has nothing to do with
00:16 - flexbox itself here in the index.html
00:19 - you can see the markup for the example
00:21 - it contains a nav element with the class
00:23 - of container and inside of that
00:25 - container we have three divs which are
00:27 - the flex items as you might guess we're
00:30 - going to create a navbar here as this
00:32 - displays home search and logout
00:35 - now the first thing you need to
00:36 - understand is the concept of a container
00:40 - and its items as that's always how you
00:42 - build up your flexbox layout they don't
00:44 - have to be divs or navs could have been
00:46 - ul element and this could be list
00:48 - elements or whatever you want as long as
00:50 - they are direct children of the flexbox
00:53 - container they turn into flex items so
00:56 - let's turn this example here into a
00:59 - flexbox layout i'm going to head over to
01:01 - the index.css and i've already given the
01:04 - container a border which you can see
01:06 - around the example here but as we
01:09 - haven't done anything else with this
01:10 - layout these divs will now just stack
01:13 - themselves on top of each other
01:15 - so to turn this into a flexbox layout
01:18 - simply give the container a display of
01:21 - flex as you can see it automatically
01:24 - lines up the elements horizontally as
01:26 - opposed to vertically as it was before
01:29 - so by default flexbox will distribute
01:31 - the items going from left to right and
01:33 - as you also can see the flexbox
01:35 - container is by default a block element
01:38 - as it takes up all available space in
01:40 - the width except for the little margin
01:42 - i've added to the left and right hand
01:43 - side
01:44 - okay so that was a very quick
01:46 - introduction to flexbox in the next
01:48 - lecture i'm going to teach you about the
01:50 - concept of axis as that is core in order
01:52 - to understand flexbox properly so i'll
01:55 - see you there
02:00 - hey in this lecture i'm going to teach
02:02 - you about access as that is a core
02:04 - concept you need to understand in order
02:06 - to work properly with flexbox
02:08 - because a flexbox container always has a
02:11 - direction and by default this direction
02:14 - is horizontal as that's how it lays out
02:16 - its items starting here on the left hand
02:18 - side and going towards the right hand
02:20 - side what we then say is that our main
02:23 - axis goes
02:24 - from left to right
02:27 - along the row
02:28 - and we also have a cross axis which goes
02:32 - from top to bottom now the reason you
02:34 - need to understand this is that we're
02:36 - using different css properties in order
02:38 - to position our content along the main
02:41 - axis which goes horizontally in this
02:43 - case and the cross axis which goes
02:45 - vertically in this case however that's
02:48 - not always the case as we can also flip
02:50 - the direction of the flexbox container
02:52 - let's do that
02:54 - we'll head over to the container and
02:56 - give it a flex direction
03:00 - by default this one is set to row so if
03:02 - we write row nothing will happen however
03:05 - if we change this to
03:07 - column
03:08 - now as you can see
03:09 - that results in stacking the items from
03:12 - top to bottom going downwards instead of
03:15 - going from left to right and now the
03:17 - main axis actually goes from top to
03:19 - bottom and the cross axis goes from left
03:22 - to right now we're going to flip this
03:25 - back to row as i've found that i've used
03:27 - the default direction much more often
03:30 - than the column direction when building
03:32 - websites so i want to focus on that in
03:34 - this course as i wanted to be as
03:36 - practical as possible but i want you to
03:38 - be aware that the main axis is
03:40 - horizontal because the flex direction is
03:43 - set to row however it can be vertical as
03:46 - well okay in the next lecture i'm going
03:48 - to teach you how to position items along
03:50 - the main axis so stay tuned and i'll see
03:53 - you there
03:57 - hey there in this lecture i'm going to
03:59 - teach you how to position the items
04:01 - along the main axis which goes as you
04:04 - hopefully remember from left to right
04:07 - and that's because we probably don't
04:09 - want all of our items to be squeezed
04:11 - together over here at the left hand side
04:14 - because we might for example want a
04:16 - little bit of spacing in between them or
04:18 - maybe move the log out item over to the
04:21 - right hand side so let's jump into the
04:23 - code and see how we can achieve this
04:25 - we're going to use the property called
04:27 - justify
04:28 - content
04:29 - as that's the one which controls the
04:31 - content along the main axis justify
04:34 - content can take a range of different
04:35 - values i actually want to paste in a few
04:38 - of them here for you to experiment with
04:40 - towards the end of this lecture
04:42 - by default justify content is set to
04:45 - flex start meaning that the content is
04:48 - squeezed together at the start of the
04:50 - main axis which is the left hand side if
04:53 - we change it to flex end and as you can
04:56 - see the content will move over to the
04:58 - end of the main axis on the right hand
05:00 - side we can also use
05:03 - center and that will of course center it
05:06 - now it also has a few other nice
05:08 - properties which start with space
05:11 - let's try this space round this value
05:14 - will give each item an equal amount of
05:16 - space on its left hand side and right
05:19 - hand side
05:20 - because as you can see when two items
05:22 - are beside each other the space is twice
05:25 - as wide as if as if it's only an item
05:28 - and then the start of the container or
05:30 - the end of the container because this
05:33 - space here is twice as wide as this
05:35 - space here and this space here so what i
05:38 - want you to do now is try out these last
05:41 - two values for yourself
05:42 - space between and space evenly
05:45 - so pause the screencast and change this
05:48 - value here to these two and observe how
05:51 - the items are laid out in the main
05:53 - direction and try to understand how
05:55 - these three space between space evenly
05:57 - and space around differ from each other
06:00 - once you've done that just resume back
06:02 - to the screen cost and then we'll
06:03 - continue with the course
06:06 - okay so hopefully you have been doing a
06:08 - little bit of experimentations
06:10 - if you have any questions feel free to
06:12 - ask them in the q a section and in the
06:14 - next lecture you're going to learn even
06:15 - more about how to position items along
06:17 - the main axis so i'll see you there
06:24 - hey in this lecture i'm going to explain
06:26 - how you can adjust the position of
06:28 - single items along the main axis using
06:31 - the good old technique of margin auto
06:34 - because these various justify content
06:36 - values are nice and handy but they don't
06:38 - always do what you want them to do for
06:40 - example i might not want to have the
06:42 - items spread around the container like
06:44 - this perhaps i want the home and search
06:47 - over on the left hand side and the log
06:49 - out over on the right hand side and
06:51 - that's not something you can do with any
06:53 - of the justify content values alone
06:55 - so let's actually remove justify content
06:58 - so that they're all squeezed together on
06:59 - the left hand side as that's the default
07:02 - layout
07:03 - now what i want to do is move the logout
07:05 - item over to the right hand side
07:08 - and as that forces us to target that
07:10 - item itself i've given all three items
07:13 - class names
07:14 - home search and log out so to change the
07:18 - log out item we'll simply target it
07:22 - and give it a margin
07:24 - on the left hand side and set that to
07:27 - auto
07:28 - and as you can see that pushes the log
07:29 - out item all the way over to the right
07:31 - hand side and this space here now is the
07:34 - margin left of the log out item so this
07:38 - is normally how i adding single items
07:40 - along the main axis if we want to have
07:43 - both the log out and the search item
07:45 - over on the right hand side
07:48 - we could simply target the search item
07:50 - instead
07:51 - so if i remove it from logout it'll be
07:53 - placed in the default layout and then
07:55 - i'll simply give the
07:57 - search a margin on the left side instead
08:01 - and as the search is before the logout
08:04 - in the markup
08:06 - it'll push the logout as well to the
08:08 - right hand side when it adds a margin to
08:11 - its own left hand side
08:13 - now i want to give you a little task
08:15 - first i'm going to remove this one here
08:17 - and i'm going to set the justify content
08:20 - to flex and pushing all the items over
08:24 - to the right hand side what i want you
08:26 - to do now is to make the home item
08:29 - rather appear here on the left hand side
08:31 - i want you to do it by adding a margin
08:34 - to the home item so go ahead and do that
08:37 - then just resume and come back to the
08:39 - screencast when you've managed to do it
08:41 - and then i will show you the solution as
08:43 - well
08:46 - okay so hopefully you pause the
08:47 - screencast and try that out what you
08:50 - need to do
08:51 - is to give this home item margin on its
08:54 - right hand side
08:56 - so we'll do
08:58 - margin
08:59 - right
09:01 - and set that to auto and boom that
09:04 - purchase the home item from this space
09:06 - here to this space here and this is now
09:10 - the margin
09:12 - okay that was it for this lecture in the
09:14 - next one you're going to learn a really
09:16 - cool property called flex which allows
09:18 - you to have responsive width on the
09:20 - items themself so i'll see you there
09:26 - hey in this lecture you're going to
09:28 - learn about the flex property which
09:30 - allows you to set the width of the items
09:33 - according to the width of the entire
09:35 - container meaning that they will become
09:37 - responsive that's unlike our current
09:39 - items which stay the same regardless of
09:41 - the width of the container so if we want
09:44 - all of these items to stretch across the
09:46 - entire container
09:48 - and grow and shrink with it we'll simply
09:50 - target the items with dot container
09:54 - select all the direct children which
09:56 - also are divs and then give them a flex
09:59 - property of one and as you can see they
10:02 - now take up an equal amount of space a
10:04 - third each and they grow and shrink with
10:07 - the size of the container now there's a
10:09 - little bit of magic here as flex is
10:12 - actually a shorthand for three other
10:14 - properties radar flex grow
10:17 - flex shrink
10:19 - and flex basis
10:22 - however i don't want to dwell about this
10:24 - now because i think there are other
10:25 - parts of flexbox that are more important
10:28 - to learn before you jump into
10:30 - understanding these three
10:32 - so we'll start by using flex the easy
10:34 - way and then in a later screencast i'll
10:37 - explain these three in depth but for now
10:39 - i'll just keep them here to remind you
10:41 - that this is a shorthand now setting
10:43 - flex to 1 is much better than the old
10:46 - way of doing it where you'd probably set
10:47 - the width to a percentage
10:52 - like
10:53 - this
10:55 - apple
10:57 - works
10:58 - however now you have to change this
11:00 - number whenever you wanted to add a new
11:03 - item in the container whereas with flex
11:05 - you can simply add as many items as you
11:07 - want and flexbox will take care of doing
11:10 - the math for you and making all of them
11:12 - responsive so
11:14 - let's actually try that out we'll
11:17 - turn on the flex again and
11:20 - let's simply add a fourth item here
11:24 - we'll call it profile
11:28 - let's run the code
11:30 - and as you can see let's automatically
11:32 - allocate space for all of the items
11:35 - according to how we've specified it here
11:38 - now each of them take up 25 of the width
11:41 - and they grow and shrink with the
11:43 - container we can also target specific
11:45 - items let's say that for example we want
11:48 - the search item here to be twice as wide
11:51 - as the rest of the items
11:53 - then we'll simply do
11:54 - container
11:57 - search
11:58 - and set flex to
12:01 - 2.
12:01 - as you can see it's now
12:04 - twice as wide as the three other items
12:07 - the reason i'm specifying container and
12:09 - then the child that container which i
12:11 - have the class of search is because
12:13 - doing just dot search wouldn't work as
12:15 - this selector here is more specific than
12:18 - this one and that's how css works works
12:21 - if this one is more specific given that
12:23 - it has both a class name and tag name
12:26 - its styling will be prioritized above
12:28 - the less specific styling added here as
12:30 - that's only using just a class name
12:33 - so let's use both that container and the
12:36 - child of the container has its class of
12:38 - search
12:39 - so that was just a little digression
12:41 - about css selectors
12:43 - so while this example here is nice for
12:46 - learning i can say that i very often use
12:48 - this way of creating layouts where all
12:50 - of the items are one and then some of
12:52 - them are two or three or whatever what
12:54 - i've found to be a more realistic use
12:56 - case is to have one of the items doing
12:59 - all the flexing while the others stay at
13:02 - a fixed width and we can achieve that by
13:04 - simply removing the flex 1 on all the
13:07 - items except the search
13:09 - now as you can see the home logout
13:12 - profile have a fixed width while the
13:15 - search item is growing and shrinking
13:17 - with the width of the container and now
13:19 - we can also remove the
13:21 - specification here and just use dot
13:24 - search
13:24 - okay now i want to give you a little
13:26 - task
13:27 - and before that i'm going to remove this
13:30 - profile item
13:32 - so that we only have three
13:35 - now as you can see the search in the
13:36 - middle does all the flexing while the
13:38 - home and log out are fixed with
13:40 - what i want you to do now is to make
13:42 - this layout do the exact opposite
13:45 - meaning that the search item will have a
13:47 - fixed width while the home and the
13:49 - logout will grow as you widen the
13:52 - container so pause the screencast and do
13:55 - that and when you come back i'm going to
13:56 - show you how i would do it
13:58 - okay so hopefully you paused the
14:00 - screencast and did the task now i'm
14:02 - going to show you how i would do it
14:04 - so i'll start by making the search item
14:07 - fixed with again to do that i can just
14:09 - remove this here and here now it's fixed
14:11 - with and rather give this value to the
14:14 - home icon
14:15 - now that is doing all the flexing
14:17 - and what i also want to do now is
14:20 - to change this to one because when this
14:23 - is the only item doing the flexing it
14:25 - doesn't matter if this is one or two or
14:28 - a hundred or a thousand or whatever you
14:29 - want and therefore i think it's easiest
14:32 - to just have it as one
14:34 - now we also have to give the same
14:37 - behavior to the logout item so i'll
14:39 - simply do log out and just as that we
14:43 - have both the home and the logout item
14:45 - growing and shrinking while the search
14:47 - has a fixed width
14:50 - now i really don't know why you would
14:52 - create a layout like this but this is at
14:54 - least how you would do it
14:56 - and that was it for this lecture i'll
14:58 - see you in the next one
15:03 - hey now that you know quite a bit about
15:05 - how to control the items along the main
15:08 - axis using stuff like justify content
15:11 - margins and flex i want to teach you how
15:13 - to control the content along the cross
15:15 - axis which in our case goes from top to
15:18 - bottom and by default the items stretch
15:22 - themselves across the cross axis
15:24 - to make this a little bit more apparent
15:26 - let's set the height of the container
15:28 - here to
15:31 - 100
15:32 - now as you can see they stretch across
15:35 - the axis going from top to bottom
15:37 - regardless of how tall it is now a quick
15:41 - note on this height hundred percent
15:43 - this only works because we've set the
15:45 - height of the html and the body to a
15:49 - hundred percent
15:50 - if we hadn't done that then the height
15:52 - of the html and the body would just be
15:54 - whatever the container forces it to be
15:57 - meaning whatever height the container
15:58 - needs in order to display its content
16:00 - and thereby setting the height to 100
16:03 - wouldn't have any effect at all just
16:05 - remove it doesn't do anything
16:08 - so this is a nice technique for having
16:10 - the container responsive in the height
16:13 - as well
16:14 - setting the html and the body to 100
16:17 - and
16:18 - the container as well
16:20 - okay so by default
16:22 - align items
16:24 - is set to stretch
16:26 - so this align items here is the property
16:29 - that controls the items in the cross
16:31 - axis
16:32 - if we change it to for example flex
16:35 - start
16:36 - as you can see then they're pushed all
16:38 - the way to the top the start of the
16:40 - cross axis and they only take up as much
16:42 - space in the height as they need in
16:44 - order to display their content we can
16:46 - also do
16:47 - flex and that'll push them downwards to
16:50 - the end of the axis
16:52 - and of course you can also do
16:54 - center
16:55 - that'll center it
16:57 - now as a little side note here i want to
16:59 - point out that flexbox is great for
17:02 - centering an item inside of a container
17:05 - for example let's say that
17:08 - we only had
17:10 - one item here it could be
17:13 - a button with the x inside of it like
17:15 - this for example
17:17 - and we could easily center this
17:19 - inside of the container
17:21 - using align items and combining it with
17:24 - justify content and doing center there
17:27 - as well
17:28 - now as you can see the button is
17:30 - centered no matter how you change the
17:33 - container
17:34 - so that's a nice little trick which i've
17:36 - found often comes in handy when building
17:38 - various layouts
17:41 - okay so let's change this back again
17:46 - and remove this one
17:51 - because finally i want to show you how
17:52 - to align a single item at a time
17:56 - let's for example target the logout item
18:03 - we can then do align
18:05 - self
18:06 - after that for example to flex start
18:09 - that will push just that item to the top
18:12 - of the axis
18:14 - now what i want you to do
18:16 - is to make this home
18:18 - item appear all the way at the bottom
18:20 - here so go ahead and pause the
18:22 - screencast jump into the code and make
18:24 - that happen when you've done it come
18:26 - back and i'll show you how to do it as
18:27 - well
18:30 - okay so hopefully you managed to do that
18:32 - let's look at how i would do it i'm
18:34 - going to first target the
18:36 - home item
18:38 - and we're going to give it
18:39 - a line itself
18:42 - and set that to flex
18:44 - and
18:45 - because the end of the cross axis is all
18:48 - the way here at the bottom and now we
18:50 - have this really weird layout kind of a
18:52 - diagonal nav bar which also works
18:55 - responsively in a very weird way so i
18:58 - have no idea how you want layout like
19:00 - this you've at least learned how to do
19:02 - it using align self and align items and
19:05 - that was it i'll see you in the next
19:07 - screencast
19:11 - hey in this lecture we're going to talk
19:13 - about flex direction column because up
19:15 - until now we've used the default way of
19:18 - laying out items which is flex direction
19:20 - row
19:21 - meaning that the flex container lays out
19:24 - items along the row
19:26 - going from left to right so now let's
19:28 - try flex direction column
19:37 - as you can see that changes the
19:39 - container so that it lays out the items
19:41 - going from top to bottom and this again
19:44 - means that justify content no longer
19:46 - controls how the items are stacked
19:48 - across the horizontal line but rather
19:51 - how they're stacked across the vertical
19:53 - line and that's because the main axis
19:56 - now is vertical going from top to bottom
19:58 - and not horizontal going from left to
20:00 - right which it was when we had flex
20:03 - direction row like that
20:06 - okay
20:10 - so let's try and add justify content
20:14 - and set it to for example flex end
20:17 - that doesn't result in any change
20:19 - actually so why is that well it's
20:21 - because the height of the container is
20:23 - not set explicitly
20:25 - it's just as tall as the content inside
20:27 - of it forces it to be
20:29 - meaning that it has no extra space when
20:31 - it's trying to push all the content
20:34 - towards the flex end which is the bottom
20:36 - of the container what we have to do is
20:39 - explicitly set the height of the
20:41 - container to 100
20:44 - and there you can see now the container
20:46 - takes up the entire window or almost at
20:49 - least and the justify content
20:52 - purchases all the content down to the
20:54 - bottom of the main axis now just as a
20:57 - reminder when using this height 100
21:00 - you also have to set the height of the
21:03 - html and the body to 100
21:06 - here
21:09 - okay
21:09 - if we change the flex end to flex start
21:13 - all the content will just be on top here
21:15 - that's also the default way
21:18 - of doing it
21:19 - as you can see
21:20 - we can also do
21:22 - center and that will center it
21:25 - okay let's now look at align items which
21:28 - controls the layout in the cross axis
21:30 - which now is horizontal going from left
21:33 - to right if we want to shove the items
21:36 - over to the right hand side for example
21:38 - we can do
21:40 - line items
21:42 - and do flex and that'll push the item
21:45 - towards the end of the cross axis as you
21:48 - might remember
21:49 - by default it's set to
21:51 - stretch
21:52 - to stretch
21:54 - so they stretch themselves all the way
21:56 - from the start of the axis to the end of
21:58 - the axis
22:00 - let's also try
22:01 - flex
22:02 - start
22:03 - and of course we can do
22:06 - center
22:07 - now i want to give you a little task
22:10 - i want you to make the content appear in
22:13 - the bottom right corner here so go ahead
22:16 - and pause the screencast do that and
22:17 - when you come back i'll show you the
22:19 - solution as well
22:22 - okay so hopefully you paused the
22:24 - screencast and completed the task let's
22:26 - look at the solution
22:28 - we want this
22:30 - chunk of items here to appear down in
22:32 - the bottom right corner and let's first
22:35 - push it all the way over to the right
22:37 - then we'll need to target the
22:39 - cross axis
22:40 - the align items and change that to flex
22:43 - end as this is the end of the cross axis
22:47 - the horizontal one
22:49 - now we also need to place it in the end
22:51 - of the main axis which now goes from top
22:54 - to bottom meaning that we'll also set
22:56 - justify content to
22:58 - flex end and there you go
23:01 - in the next lecture we're going to look
23:03 - at wrapping so stay tuned and i'll see
23:06 - you there
23:11 - hey in this lecture you're going to
23:12 - learn how to wrap items in flexbox so
23:15 - here we have our standard navbar it
23:17 - contains three items and each of them
23:19 - are just as wide as the content inside
23:22 - of them forced them to be
23:24 - what i want to do now is target each of
23:27 - the icons
23:30 - give them width of
23:32 - 300 pixels as you can see they now fill
23:35 - the entire width of the container
23:36 - however they're clearly not 300 pixels
23:40 - wide each they're scaled downwards as
23:43 - the container is less than 900 pixels
23:45 - wide in total however if we widen it
23:49 - here as you can see they become 300
23:52 - pixels wide when the container is wide
23:54 - enough
23:56 - so what happens here is that flexbox
23:59 - won't allow you to set the width
24:01 - explicitly if there's not enough within
24:03 - the container itself to fill that
24:06 - content it'll automatically scale it
24:08 - down and by default it won't allow you
24:10 - to for example push any of the items
24:13 - down to the next row
24:15 - and that's because flexbox has a flex
24:18 - rat property set to
24:20 - no wrap by default it doesn't allow
24:23 - wrapping meaning you can only have one
24:25 - row or one column along your given main
24:28 - axis
24:29 - but if we change this to app instead you
24:33 - can see that it now allows you to wrap
24:35 - the content because you have the home
24:36 - here the search here and when it tries
24:39 - to fit in the log out it doesn't have
24:41 - enough room to add the item so
24:44 - it wraps and puts it on the next line
24:46 - the next row if we shrink the container
24:49 - even more it'll wrap so that there's
24:51 - only one item in each row
24:54 - now the total width of the container is
24:56 - less than 600 pixels meaning it can only
24:58 - fit one 300 pixel item on each row
25:02 - however if it has enough room it fills
25:04 - up with as many items it can on each row
25:07 - okay so that was a quick intro to
25:10 - flexwrap i'll see you in the next
25:12 - lecture
25:17 - hey there in this lecture we're going to
25:19 - take a deep dive into the flex property
25:22 - which we talked about in a previous
25:23 - lesson so now i have a very simple
25:25 - version of our navbar this time it only
25:28 - contains two items the home item and the
25:30 - logout item and they both have a flex of
25:33 - one that means that they'll take up half
25:35 - the space each and they'll grow and
25:37 - shrink with the size of the container
25:38 - however as i mentioned earlier
25:41 - flex is actually a shorthand property
25:44 - for three other properties
25:46 - they're called flex
25:48 - bro
25:50 - flex
25:52 - shrink
25:54 - flex aces
25:57 - and setting flex equal to
25:59 - run
26:00 - and when we set the flex value we're
26:03 - actually setting all three of these
26:06 - and even just writing one is actually
26:08 - also kind of a shorthand because what
26:11 - we're actually saying here is one
26:14 - one
26:15 - zero
26:16 - the first number is the grow value the
26:18 - second is the shrink value and the third
26:21 - is the basis value
26:23 - so this
26:24 - is also the same as setting
26:27 - one
26:27 - [Music]
26:28 - one
26:30 - zero so it's kind of three levels here
26:33 - you can write it the hard way doing like
26:36 - this
26:36 - or the slightly easier way doing it like
26:40 - this or the absolutely easiest way doing
26:43 - it like this
26:45 - okay this might seem confusing so let's
26:48 - actually go through these properties
26:49 - here one by one i'll remove this one
26:53 - and also comment out the flex
26:56 - grow and flex shrink
26:59 - now
27:00 - copy that over here
27:02 - now what we're going to do is set the
27:04 - flex bases on both of the items we'll
27:06 - set it to
27:08 - 200 pixels
27:11 - and
27:12 - edit that
27:14 - on both
27:15 - now we have a container with two items
27:18 - which each are set to 200 pixels at
27:20 - least they'll be 200 pixels if the
27:22 - container is more than 400 pixels wide
27:25 - so flex basis is a way of setting the
27:27 - base width of the element so they'll now
27:30 - stay at 200 pixels regardless of how
27:33 - much extra space there is in the
27:34 - container if there's less than 400
27:37 - pixels they'll actually start to shrink
27:39 - but that's something we're going to look
27:41 - at a little bit later so let's not get
27:43 - ahead of ourselves there let's move on
27:45 - to the flex grow
27:47 - if we
27:48 - cut this out here and
27:51 - paste it in there
27:53 - and do the
27:54 - same thing
27:56 - here
27:56 - now you can see
27:58 - they actually grow with the width of the
28:00 - container so flex grow basically decides
28:03 - how much of the extra space should be
28:06 - distributed to the various items if we
28:09 - set them to
28:11 - zero
28:12 - on both of these
28:14 - this extra space will not be distributed
28:16 - to either home or log out since they
28:18 - both have a flex grow of zero however if
28:21 - for example log out gets a flex scroll
28:23 - of one
28:24 - it'll take up all of the remaining space
28:26 - and home will get nothing of the
28:28 - remaining space but as you saw if the
28:31 - home also has value 1 it too will grow
28:34 - with the size of the container and now
28:36 - as these values are identical both have
28:39 - one the flexbox layout will distribute
28:41 - the extra space evenly across the two
28:44 - items so these two numbers also work in
28:47 - relation to each other if we set log out
28:49 - to two you'll see that the logout
28:52 - grows twice as quick as the home
28:56 - this will be a bit more apparent if we
28:57 - use a larger number for example five now
29:01 - when it grows you can see that the log
29:02 - out is clearly glowing faster than the
29:05 - home item and actually it's growing five
29:07 - times faster
29:10 - so just to reiterate on that if we set
29:12 - both of these to
29:15 - zero then we have the extra space on the
29:17 - side and the wider we make the container
29:19 - the more extra space we have however if
29:21 - we give the logout next grove one it
29:24 - will take up all of the available space
29:26 - and grow into it
29:28 - we make only the home have a flex grove
29:31 - one it will take up all the available
29:33 - space grow into it
29:35 - and if both of them are set to one they
29:37 - will distribute the extra space evenly
29:39 - across each other okay so now let's move
29:42 - on to flex shrink let's set these like
29:45 - scroll values back to zero copy the
29:48 - shrink down here and down here
29:51 - so as you remember even though
29:53 - we've set the bases here to 200 pixels
29:56 - the flex container will force them to be
29:59 - less than 200 pixels if the container is
30:02 - less than 400 pixels like now now there
30:04 - may be 150 150 pixels each or something
30:07 - like that and that is because flex
30:09 - shrink is set to one meaning that they
30:12 - will both shrink at an equal rate
30:15 - and this is actually the default value
30:17 - for flex shrink
30:19 - so while the grow is by default set to
30:20 - zero the flex shrink is by default set
30:22 - to one meaning that if i remove this one
30:26 - and this one
30:27 - will still have the same behavior they
30:29 - both shrink at an equal rate let's get
30:32 - them back again okay now let's change
30:35 - the flex shrink to zero for the home
30:38 - item what'll happen now is that when we
30:40 - reach the 400 pixel threshold and the
30:43 - items will have to start shrinking the
30:46 - log out will do all the shrinking while
30:48 - the home
30:49 - stays at 200 pixels so the log out is
30:52 - doing all the drinking since it has flex
30:54 - shrink set to one
30:56 - while home
30:57 - does none of the shrinking since it has
31:00 - flex shrink set to zero
31:06 - now let's change the
31:08 - flex shrink on this one to something
31:10 - greater than one and see what happens
31:12 - then let's add five for example rapids
31:14 - now is that when we reach the threshold
31:17 - the home item is shrinking much quicker
31:19 - than the logout item it's actually
31:21 - shrinking five times faster than the
31:24 - logout item so these numbers work in
31:27 - relation to each other
31:28 - meaning that you have to look at both
31:30 - the numbers this one and this one to
31:33 - understand how one of the numbers play
31:35 - out on the page
31:37 - because now
31:38 - log out has a flex string of one and as
31:41 - you can see it shrinks really slowly
31:43 - because one is a small number in
31:45 - relation to five however if we take this
31:48 - back again and
31:49 - set the flex ring of home to zero
31:53 - then suddenly log out does all the
31:55 - shrinking because one in relation to
31:57 - zero is infinitely more okay so let's
32:01 - rewrite these two here to the behavior
32:04 - we want we want flex grow actually to be
32:07 - at one and we want flick string to be at
32:10 - one and
32:11 - do the same thing here
32:13 - and have
32:14 - the flex spaces stay at 200 so now they
32:17 - grow and shrink at the same rate and
32:20 - they have and they are 200 pixels by
32:22 - default so now we can get back to the
32:24 - shorthand again
32:25 - we're going to do flex and do 1 1
32:30 - 200 pixels
32:33 - this is the exact same thing as this
32:36 - meaning we can remove this
32:40 - and also copy it over to this
32:43 - logout icon
32:44 - okay so finally i want to give you the
32:46 - task for this lecture
32:48 - what i want you to do now is that once
32:50 - this container here crosses the
32:52 - threshold of 400 pixels i want you to
32:55 - make the log out item
32:57 - grow 10 times as fast as the home item
33:02 - so go ahead and do that
33:04 - and when you come back to the screencast
33:06 - i'll show you the solution
33:10 - okay hopefully you paused the screencast
33:11 - and did the assignment it's really easy
33:14 - actually if you want the logout to grow
33:16 - 10 times as fast as the home item you
33:19 - simply set the flex grow which is the
33:21 - first one of the three
33:23 - to
33:24 - ten
33:25 - and now
33:26 - as you can see the log out grows really
33:28 - fast and home grows really slowly
33:31 - however when they start shrinking they
33:33 - both shrink at an equal rate
33:36 - meaning when they're less than 200
33:38 - pixels
33:39 - they both shrink and grow actually
33:43 - at the
33:44 - same rate but once they cross the 200
33:46 - pixel threshold about here the log out
33:49 - takes over
33:51 - okay so that was it and i'll see you in
33:53 - the next lecture
33:59 - hey there really nice thing about
34:01 - flexbox is that it has so-called source
34:03 - order independence
34:05 - meaning that you can move around on the
34:07 - items regardless of how they're laid out
34:09 - in the markup and an example of this is
34:12 - the order property so let's see how it
34:14 - works we have the three items home
34:17 - search and log out in the container here
34:20 - and i've given them number as that
34:22 - simply makes it easier to follow what's
34:23 - going on here
34:24 - i've also given them classes of item 1
34:27 - item 2 and item 3.
34:29 - let's head over to the css and give the
34:31 - item 2 for example
34:33 - order property one and what happened
34:36 - here is that the search jumped over to
34:38 - the third spot where the logout used to
34:41 - be and i've not changed anything in the
34:44 - html the source order is still one two
34:46 - three but the order on the page is one
34:48 - three two and you might be a little bit
34:51 - confused about why setting the value to
34:53 - one results in it being placed all the
34:55 - way at the end and that is because by
34:58 - default the order is set to zero so
35:02 - whatever items that have an order above
35:04 - zero for example one will be placed at
35:06 - the end
35:08 - however if we give it a value below zero
35:10 - for example minus one it'll be placed in
35:14 - the beginning
35:15 - so let's also add a selector for
35:19 - item one
35:22 - and
35:23 - item three
35:25 - and by default we're all set to zero so
35:28 - if we set them
35:30 - to 0
35:31 - that won't result in anything if we want
35:33 - the
35:34 - first item to for example appear at the
35:36 - last spot can give a value above
35:40 - 0 for example
35:42 - 5
35:43 - or four or three or two
35:45 - doesn't matter
35:47 - stay at the end of the main axis as long
35:49 - as its order is above the order of the
35:52 - rest of the items
35:54 - so what i want you to do now is to make
35:57 - these three items appear in the opposite
35:59 - direction of how they're originally laid
36:02 - out meaning it's three to one instead of
36:05 - one two three
36:07 - and i want you to do that using both
36:09 - positive and negative numbers in the
36:12 - order here
36:13 - so go ahead and do that now and when you
36:16 - come back i'll show you how to do it as
36:17 - well
36:19 - okay so hopefully you completed that
36:21 - task let's now do it ourselves
36:24 - the second item here stay at the same
36:27 - place that's the first and the third
36:29 - which will basically be swapped and
36:31 - we're going to use positive and negative
36:33 - numbers so i'll start with targeting the
36:36 - third item the log out one and set this
36:38 - to minus one now that's first
36:42 - and then we have to set the item one the
36:44 - whole to a positive number one
36:47 - and now that is laid out towards the end
36:50 - three two one and that was it i hope you
36:52 - managed to do this as well
36:54 - and congratulations you've completed the
36:56 - main section of this flexbox course so
36:59 - give yourself a pat on the back and if
37:01 - you have any questions feel free to ask
37:03 - that in the q a section and
37:05 - i'll answer it as soon as possible thank
37:08 - you
37:12 - hey in this bonus lecture you're going
37:14 - to learn how to create a fully
37:16 - responsive navbar which adapts itself to
37:20 - various screen sizes using a bunch of
37:22 - the concepts you've learned so far
37:24 - including flex grow flex shrink flex
37:26 - basis flex wrap and the order property
37:29 - so here is our nav bar
37:31 - it has four items
37:33 - and it's only the search item which is
37:36 - flexing as you can see it grows and
37:38 - shrinks with the size of the container
37:41 - and that's because we've given the
37:43 - search item a flex value of one while
37:46 - the others are only as wide as the
37:48 - content inside of them forces them to be
37:51 - i've also added a bit different styling
37:53 - to this example as you can see we're
37:55 - only using one background color as that
37:57 - looks a little bit nicer and the reason
38:00 - we used different background colors in
38:02 - previous examples was because it was a
38:04 - bit more pedagogical however by now you
38:06 - should know the basics of how flexbox
38:09 - works so we don't need different colors
38:11 - in the html you'll also see a few
38:14 - changes as the container we're using an
38:16 - unordered list
38:18 - and list items as the flex items as this
38:22 - is a little bit more semantically
38:23 - correct for creating a navbar the search
38:26 - item can be found here
38:28 - and as you can see i've added an input
38:30 - field
38:31 - so you can actually write inside this
38:33 - search field
38:35 - so nothing happens if you try searching
38:37 - for anything now this navbar works well
38:39 - on wide screens and it works well to
38:42 - right about here where it starts
38:44 - breaking because the search suddenly
38:46 - can't fit anymore
38:47 - so what we want to do here is actually
38:50 - allow the
38:51 - container to wrap and to place two items
38:54 - instead of four on each of the two rows
38:58 - so let's do that head over to the
39:00 - index.css
39:02 - and we'll simply create a media query
39:09 - set it to 600 pixels
39:13 - and inside of it
39:15 - target the container
39:18 - and allow it to wrap because right now
39:21 - it won't wrap
39:22 - regardless of how narrow you make it
39:24 - simply will not allow you to add items
39:27 - on multiple rows it'll only allow one
39:29 - row
39:31 - to change that
39:32 - we'll do flicks
39:34 - wrap and set it to wrap
39:37 - as you can see now it'll allow wrapping
39:40 - here the logout wrap down to the second
39:42 - row
39:43 - though this doesn't look very nice let's
39:46 - go back here
39:47 - and we'll target the
39:49 - items
39:52 - at let's appear flex value to flex grow
39:56 - one flex shrink one however flex bases
40:00 - fifty percent because that'll make each
40:02 - row fit two items like that and as you
40:06 - can see we have home and profile in the
40:08 - first row and search and log out on the
40:10 - second row each taking up 50 percent of
40:13 - the total width
40:14 - now i actually want to align the search
40:16 - placeholder text in the center instead
40:18 - of at the left hand side so i'll do
40:22 - search
40:24 - input
40:26 - and do
40:27 - line
40:30 - so that looks a bit better
40:32 - this has nothing to do with the flexbox
40:34 - itself it's just a design choice
40:37 - okay so now we have two different states
40:40 - this one and this one and it's actually
40:42 - pretty nice however if the screen
40:45 - becomes even narrower
40:47 - look what will happen
40:49 - it'll actually break at this point
40:52 - pushing the search and the log out onto
40:55 - a row each however home and profile can
40:57 - still fit on one row so flexbox will
41:00 - allow them to stay on the same row when
41:02 - it reaches this point each item's a
41:04 - single each so i don't want this middle
41:07 - stage here this one the vertical layout
41:09 - is good for very narrow screens
41:12 - mobile phones for example
41:14 - and this one is good for a bit wider
41:15 - screens
41:16 - but
41:17 - this layout isn't really that useful so
41:19 - let's rather control this by creating
41:22 - another media query this time simply
41:24 - copy it from here and
41:26 - we'll add it at 400 for example and what
41:30 - we need to do now is at this point
41:32 - target each of the items like we're
41:34 - doing here however instead of giving
41:36 - each item 50 of the row and the width
41:38 - we'll give them 100
41:40 - so i'll just copy this actually and
41:42 - change this to 100
41:44 - and as you can see now the breakpoint at
41:47 - 400 pixels
41:48 - to reach here gives us a clean
41:50 - transition from this state to this state
41:53 - now finally what i want to do is move
41:55 - the search all the way to the bottom
41:57 - because i think it makes sense to have
41:59 - the search at the bottom when the layout
42:01 - is fully vertical
42:03 - to do that we'll target the search
42:05 - and simply give it an order
42:08 - of one and
42:10 - it jumped down to the bottom
42:12 - and remember that's because by default
42:15 - order is set to zero for all these items
42:18 - and whatever item which has an order
42:20 - above the others for example this one
42:22 - has one which is above zero will appear
42:25 - after the others
42:27 - so that was it i hope you learned
42:29 - something feel free to play around with
42:31 - this and change it however you want and
42:33 - if you have any questions just leave
42:35 - them in the q a section
42:37 - thank you
42:42 - hey and welcome to this bonus lecture
42:44 - where we are simply going to experiment
42:46 - a little bit with an image grid in
42:48 - flexbox if you've seen my css grid
42:51 - course you'll probably recognize this
42:54 - grid as i've simply cloned one of the
42:57 - screencasts there and changed around on
42:59 - things a little bit and i actually do
43:01 - recommend you to create image grids in
43:03 - css grid as that is made for
43:05 - two-dimensional layouts while flexbox is
43:07 - mainly one-dimensional however you can't
43:09 - recreate quite a lot of cool grids in
43:11 - flexbox as well so let's just jump into
43:14 - it and play around with it a little bit
43:17 - here we have our images they can also be
43:19 - found in the img folder over here we
43:22 - have the basic setup here the container
43:25 - just has a display of flex and as you
43:27 - can see that just
43:29 - lines up the images after each other and
43:32 - there are a bunch of them and they're
43:34 - way out of the flexbox container because
43:37 - flexbox won't allow you to wrap any of
43:40 - the items it'll force everything to be
43:42 - on the same line so let's first actually
43:45 - scale these images down a little bit
43:48 - let's give them a width of
43:51 - 850 pixels and a height
43:55 - of 100 pixels now that'll change their
43:59 - aspect ratio a little bit but let's not
44:01 - care about that because it looks
44:03 - kind of nice
44:05 - okay um now we want the images to wrap
44:08 - of course and as you remember to do that
44:10 - we do flex wrap and which by default is
44:14 - no wrap and we're just going to remove
44:16 - the no
44:17 - and boom
44:18 - there you can see now wraps
44:20 - to a nice little image grid
44:23 - however as you can see at this point
44:25 - they're skewed over to the left hand
44:28 - side
44:29 - so one thing we can do to make it a
44:30 - little bit nicer is
44:32 - to do
44:33 - justify
44:34 - content
44:36 - and set that to center
44:38 - that'll center it
44:42 - looks pretty decent
44:43 - we can also try these around for example
44:47 - that'll add some space around the images
44:50 - though here you can see the problem
44:52 - when flexbox only can fill three items
44:55 - on the last row the space around the
44:57 - images will be different than these of
44:59 - course resulting in this funny looking
45:02 - grid-ish layout here but with a
45:04 - different type of grid down here there's
45:06 - not an easy way to have these three
45:08 - images over at the left hand side for
45:10 - example so that only the last spot here
45:13 - will be open when you do space around
45:15 - it'll do space around on each of the
45:17 - rows separately
45:20 - if we did
45:21 - [Music]
45:22 - x start
45:24 - wouldn't center it like it did
45:26 - previously now we have much more space
45:28 - here and here even though we have this
45:31 - more gridish layout
45:34 - okay so what if we want these images
45:36 - here to be
45:37 - flexible in their width
45:40 - now we've just hard coded their width
45:42 - and height
45:43 - though what we can do instead is
45:45 - actually use
45:46 - percentages here let's do 100 and 100
45:50 - and we'll also do
45:52 - object
45:53 - fit
45:54 - cover remove this justify content and
45:57 - now it looks really broken just hang on
45:59 - a minute
46:00 - what we'll also do
46:01 - is we'll target the items themselves
46:06 - and we'll give them a flex value of flex
46:08 - grow one flex shrink one
46:11 - and
46:12 - a base width for example 150 pixels
46:15 - which we previously had
46:19 - now you can see
46:21 - they scale up and down and also shuffle
46:24 - around when needed so here their base
46:26 - width 150 pixels but they're allowed to
46:29 - grow and shrink and the images
46:31 - themselves just take up whatever space
46:34 - each of the flex item has got available
46:37 - and with the object fit cover they take
46:39 - up all the width and all the height and
46:42 - cover the entire window and that will
46:44 - result in you not seeing all of the
46:46 - images any given time so if that's
46:48 - important this is not a good solution
46:51 - however if you just want most of the
46:52 - images to appear in the box don't care
46:54 - if it's cropped a little bit this is
46:56 - actually a pretty nice solution
47:00 - so however xbox lays out as many items
47:02 - as it can on each of the rows doesn't
47:05 - evenly distribute it throughout rows so
47:07 - when it gets to this point where we have
47:10 - 10 images here and our 11th image which
47:12 - is the last one
47:14 - down here
47:16 - it'll be placed on a single row meaning
47:18 - it'll be five times as wide as the
47:20 - others which isn't optimal
47:22 - however these widths looks pretty nice
47:26 - now we also have
47:29 - some big images here i've given them
47:32 - class names of big here
47:35 - what i want to try out is
47:37 - actually
47:38 - do container
47:40 - and then target those big ones
47:45 - and here i'll actually target the normal
47:48 - ones specifically as i've given them
47:50 - classes of normal as you can see here
47:53 - and now they're the same however if we
47:55 - give the big ones 250 pixels in base
47:58 - width you can see that that works as
48:00 - well
48:02 - it scales up and down
48:06 - however now we've said that we want the
48:08 - big images to start at 250 pixels with
48:11 - and the normal images to start at 150
48:13 - pixels with and they are both to grow
48:15 - the container has room for it
48:18 - meaning you have this pretty cool
48:21 - looking grid
48:24 - okay
48:25 - feel free to play around with this
48:26 - perhaps adjust the values here
48:29 - you can drag and drop some more images
48:31 - in here maybe some vertical and
48:33 - horizontal images and try to adjust
48:35 - their flick spaces basically do whatever
48:38 - you want
48:39 - so that was it i hope you learned
48:40 - something thank you

Cleaned transcript:

hey there in this lecture you're going to learn how to create your very first flexbox layout using the example you can see on the page here i've already added a little bit of styling in the basic.css file though this has nothing to do with flexbox itself here in the index.html you can see the markup for the example it contains a nav element with the class of container and inside of that container we have three divs which are the flex items as you might guess we're going to create a navbar here as this displays home search and logout now the first thing you need to understand is the concept of a container and its items as that's always how you build up your flexbox layout they don't have to be divs or navs could have been ul element and this could be list elements or whatever you want as long as they are direct children of the flexbox container they turn into flex items so let's turn this example here into a flexbox layout i'm going to head over to the index.css and i've already given the container a border which you can see around the example here but as we haven't done anything else with this layout these divs will now just stack themselves on top of each other so to turn this into a flexbox layout simply give the container a display of flex as you can see it automatically lines up the elements horizontally as opposed to vertically as it was before so by default flexbox will distribute the items going from left to right and as you also can see the flexbox container is by default a block element as it takes up all available space in the width except for the little margin i've added to the left and right hand side okay so that was a very quick introduction to flexbox in the next lecture i'm going to teach you about the concept of axis as that is core in order to understand flexbox properly so i'll see you there hey in this lecture i'm going to teach you about access as that is a core concept you need to understand in order to work properly with flexbox because a flexbox container always has a direction and by default this direction is horizontal as that's how it lays out its items starting here on the left hand side and going towards the right hand side what we then say is that our main axis goes from left to right along the row and we also have a cross axis which goes from top to bottom now the reason you need to understand this is that we're using different css properties in order to position our content along the main axis which goes horizontally in this case and the cross axis which goes vertically in this case however that's not always the case as we can also flip the direction of the flexbox container let's do that we'll head over to the container and give it a flex direction by default this one is set to row so if we write row nothing will happen however if we change this to column now as you can see that results in stacking the items from top to bottom going downwards instead of going from left to right and now the main axis actually goes from top to bottom and the cross axis goes from left to right now we're going to flip this back to row as i've found that i've used the default direction much more often than the column direction when building websites so i want to focus on that in this course as i wanted to be as practical as possible but i want you to be aware that the main axis is horizontal because the flex direction is set to row however it can be vertical as well okay in the next lecture i'm going to teach you how to position items along the main axis so stay tuned and i'll see you there hey there in this lecture i'm going to teach you how to position the items along the main axis which goes as you hopefully remember from left to right and that's because we probably don't want all of our items to be squeezed together over here at the left hand side because we might for example want a little bit of spacing in between them or maybe move the log out item over to the right hand side so let's jump into the code and see how we can achieve this we're going to use the property called justify content as that's the one which controls the content along the main axis justify content can take a range of different values i actually want to paste in a few of them here for you to experiment with towards the end of this lecture by default justify content is set to flex start meaning that the content is squeezed together at the start of the main axis which is the left hand side if we change it to flex end and as you can see the content will move over to the end of the main axis on the right hand side we can also use center and that will of course center it now it also has a few other nice properties which start with space let's try this space round this value will give each item an equal amount of space on its left hand side and right hand side because as you can see when two items are beside each other the space is twice as wide as if as if it's only an item and then the start of the container or the end of the container because this space here is twice as wide as this space here and this space here so what i want you to do now is try out these last two values for yourself space between and space evenly so pause the screencast and change this value here to these two and observe how the items are laid out in the main direction and try to understand how these three space between space evenly and space around differ from each other once you've done that just resume back to the screen cost and then we'll continue with the course okay so hopefully you have been doing a little bit of experimentations if you have any questions feel free to ask them in the q a section and in the next lecture you're going to learn even more about how to position items along the main axis so i'll see you there hey in this lecture i'm going to explain how you can adjust the position of single items along the main axis using the good old technique of margin auto because these various justify content values are nice and handy but they don't always do what you want them to do for example i might not want to have the items spread around the container like this perhaps i want the home and search over on the left hand side and the log out over on the right hand side and that's not something you can do with any of the justify content values alone so let's actually remove justify content so that they're all squeezed together on the left hand side as that's the default layout now what i want to do is move the logout item over to the right hand side and as that forces us to target that item itself i've given all three items class names home search and log out so to change the log out item we'll simply target it and give it a margin on the left hand side and set that to auto and as you can see that pushes the log out item all the way over to the right hand side and this space here now is the margin left of the log out item so this is normally how i adding single items along the main axis if we want to have both the log out and the search item over on the right hand side we could simply target the search item instead so if i remove it from logout it'll be placed in the default layout and then i'll simply give the search a margin on the left side instead and as the search is before the logout in the markup it'll push the logout as well to the right hand side when it adds a margin to its own left hand side now i want to give you a little task first i'm going to remove this one here and i'm going to set the justify content to flex and pushing all the items over to the right hand side what i want you to do now is to make the home item rather appear here on the left hand side i want you to do it by adding a margin to the home item so go ahead and do that then just resume and come back to the screencast when you've managed to do it and then i will show you the solution as well okay so hopefully you pause the screencast and try that out what you need to do is to give this home item margin on its right hand side so we'll do margin right and set that to auto and boom that purchase the home item from this space here to this space here and this is now the margin okay that was it for this lecture in the next one you're going to learn a really cool property called flex which allows you to have responsive width on the items themself so i'll see you there hey in this lecture you're going to learn about the flex property which allows you to set the width of the items according to the width of the entire container meaning that they will become responsive that's unlike our current items which stay the same regardless of the width of the container so if we want all of these items to stretch across the entire container and grow and shrink with it we'll simply target the items with dot container select all the direct children which also are divs and then give them a flex property of one and as you can see they now take up an equal amount of space a third each and they grow and shrink with the size of the container now there's a little bit of magic here as flex is actually a shorthand for three other properties radar flex grow flex shrink and flex basis however i don't want to dwell about this now because i think there are other parts of flexbox that are more important to learn before you jump into understanding these three so we'll start by using flex the easy way and then in a later screencast i'll explain these three in depth but for now i'll just keep them here to remind you that this is a shorthand now setting flex to 1 is much better than the old way of doing it where you'd probably set the width to a percentage like this apple works however now you have to change this number whenever you wanted to add a new item in the container whereas with flex you can simply add as many items as you want and flexbox will take care of doing the math for you and making all of them responsive so let's actually try that out we'll turn on the flex again and let's simply add a fourth item here we'll call it profile let's run the code and as you can see let's automatically allocate space for all of the items according to how we've specified it here now each of them take up 25 of the width and they grow and shrink with the container we can also target specific items let's say that for example we want the search item here to be twice as wide as the rest of the items then we'll simply do container search and set flex to 2. as you can see it's now twice as wide as the three other items the reason i'm specifying container and then the child that container which i have the class of search is because doing just dot search wouldn't work as this selector here is more specific than this one and that's how css works works if this one is more specific given that it has both a class name and tag name its styling will be prioritized above the less specific styling added here as that's only using just a class name so let's use both that container and the child of the container has its class of search so that was just a little digression about css selectors so while this example here is nice for learning i can say that i very often use this way of creating layouts where all of the items are one and then some of them are two or three or whatever what i've found to be a more realistic use case is to have one of the items doing all the flexing while the others stay at a fixed width and we can achieve that by simply removing the flex 1 on all the items except the search now as you can see the home logout profile have a fixed width while the search item is growing and shrinking with the width of the container and now we can also remove the specification here and just use dot search okay now i want to give you a little task and before that i'm going to remove this profile item so that we only have three now as you can see the search in the middle does all the flexing while the home and log out are fixed with what i want you to do now is to make this layout do the exact opposite meaning that the search item will have a fixed width while the home and the logout will grow as you widen the container so pause the screencast and do that and when you come back i'm going to show you how i would do it okay so hopefully you paused the screencast and did the task now i'm going to show you how i would do it so i'll start by making the search item fixed with again to do that i can just remove this here and here now it's fixed with and rather give this value to the home icon now that is doing all the flexing and what i also want to do now is to change this to one because when this is the only item doing the flexing it doesn't matter if this is one or two or a hundred or a thousand or whatever you want and therefore i think it's easiest to just have it as one now we also have to give the same behavior to the logout item so i'll simply do log out and just as that we have both the home and the logout item growing and shrinking while the search has a fixed width now i really don't know why you would create a layout like this but this is at least how you would do it and that was it for this lecture i'll see you in the next one hey now that you know quite a bit about how to control the items along the main axis using stuff like justify content margins and flex i want to teach you how to control the content along the cross axis which in our case goes from top to bottom and by default the items stretch themselves across the cross axis to make this a little bit more apparent let's set the height of the container here to 100 now as you can see they stretch across the axis going from top to bottom regardless of how tall it is now a quick note on this height hundred percent this only works because we've set the height of the html and the body to a hundred percent if we hadn't done that then the height of the html and the body would just be whatever the container forces it to be meaning whatever height the container needs in order to display its content and thereby setting the height to 100 wouldn't have any effect at all just remove it doesn't do anything so this is a nice technique for having the container responsive in the height as well setting the html and the body to 100 and the container as well okay so by default align items is set to stretch so this align items here is the property that controls the items in the cross axis if we change it to for example flex start as you can see then they're pushed all the way to the top the start of the cross axis and they only take up as much space in the height as they need in order to display their content we can also do flex and that'll push them downwards to the end of the axis and of course you can also do center that'll center it now as a little side note here i want to point out that flexbox is great for centering an item inside of a container for example let's say that we only had one item here it could be a button with the x inside of it like this for example and we could easily center this inside of the container using align items and combining it with justify content and doing center there as well now as you can see the button is centered no matter how you change the container so that's a nice little trick which i've found often comes in handy when building various layouts okay so let's change this back again and remove this one because finally i want to show you how to align a single item at a time let's for example target the logout item we can then do align self after that for example to flex start that will push just that item to the top of the axis now what i want you to do is to make this home item appear all the way at the bottom here so go ahead and pause the screencast jump into the code and make that happen when you've done it come back and i'll show you how to do it as well okay so hopefully you managed to do that let's look at how i would do it i'm going to first target the home item and we're going to give it a line itself and set that to flex and because the end of the cross axis is all the way here at the bottom and now we have this really weird layout kind of a diagonal nav bar which also works responsively in a very weird way so i have no idea how you want layout like this you've at least learned how to do it using align self and align items and that was it i'll see you in the next screencast hey in this lecture we're going to talk about flex direction column because up until now we've used the default way of laying out items which is flex direction row meaning that the flex container lays out items along the row going from left to right so now let's try flex direction column as you can see that changes the container so that it lays out the items going from top to bottom and this again means that justify content no longer controls how the items are stacked across the horizontal line but rather how they're stacked across the vertical line and that's because the main axis now is vertical going from top to bottom and not horizontal going from left to right which it was when we had flex direction row like that okay so let's try and add justify content and set it to for example flex end that doesn't result in any change actually so why is that well it's because the height of the container is not set explicitly it's just as tall as the content inside of it forces it to be meaning that it has no extra space when it's trying to push all the content towards the flex end which is the bottom of the container what we have to do is explicitly set the height of the container to 100 and there you can see now the container takes up the entire window or almost at least and the justify content purchases all the content down to the bottom of the main axis now just as a reminder when using this height 100 you also have to set the height of the html and the body to 100 here okay if we change the flex end to flex start all the content will just be on top here that's also the default way of doing it as you can see we can also do center and that will center it okay let's now look at align items which controls the layout in the cross axis which now is horizontal going from left to right if we want to shove the items over to the right hand side for example we can do line items and do flex and that'll push the item towards the end of the cross axis as you might remember by default it's set to stretch to stretch so they stretch themselves all the way from the start of the axis to the end of the axis let's also try flex start and of course we can do center now i want to give you a little task i want you to make the content appear in the bottom right corner here so go ahead and pause the screencast do that and when you come back i'll show you the solution as well okay so hopefully you paused the screencast and completed the task let's look at the solution we want this chunk of items here to appear down in the bottom right corner and let's first push it all the way over to the right then we'll need to target the cross axis the align items and change that to flex end as this is the end of the cross axis the horizontal one now we also need to place it in the end of the main axis which now goes from top to bottom meaning that we'll also set justify content to flex end and there you go in the next lecture we're going to look at wrapping so stay tuned and i'll see you there hey in this lecture you're going to learn how to wrap items in flexbox so here we have our standard navbar it contains three items and each of them are just as wide as the content inside of them forced them to be what i want to do now is target each of the icons give them width of 300 pixels as you can see they now fill the entire width of the container however they're clearly not 300 pixels wide each they're scaled downwards as the container is less than 900 pixels wide in total however if we widen it here as you can see they become 300 pixels wide when the container is wide enough so what happens here is that flexbox won't allow you to set the width explicitly if there's not enough within the container itself to fill that content it'll automatically scale it down and by default it won't allow you to for example push any of the items down to the next row and that's because flexbox has a flex rat property set to no wrap by default it doesn't allow wrapping meaning you can only have one row or one column along your given main axis but if we change this to app instead you can see that it now allows you to wrap the content because you have the home here the search here and when it tries to fit in the log out it doesn't have enough room to add the item so it wraps and puts it on the next line the next row if we shrink the container even more it'll wrap so that there's only one item in each row now the total width of the container is less than 600 pixels meaning it can only fit one 300 pixel item on each row however if it has enough room it fills up with as many items it can on each row okay so that was a quick intro to flexwrap i'll see you in the next lecture hey there in this lecture we're going to take a deep dive into the flex property which we talked about in a previous lesson so now i have a very simple version of our navbar this time it only contains two items the home item and the logout item and they both have a flex of one that means that they'll take up half the space each and they'll grow and shrink with the size of the container however as i mentioned earlier flex is actually a shorthand property for three other properties they're called flex bro flex shrink flex aces and setting flex equal to run and when we set the flex value we're actually setting all three of these and even just writing one is actually also kind of a shorthand because what we're actually saying here is one one zero the first number is the grow value the second is the shrink value and the third is the basis value so this is also the same as setting one one zero so it's kind of three levels here you can write it the hard way doing like this or the slightly easier way doing it like this or the absolutely easiest way doing it like this okay this might seem confusing so let's actually go through these properties here one by one i'll remove this one and also comment out the flex grow and flex shrink now copy that over here now what we're going to do is set the flex bases on both of the items we'll set it to 200 pixels and edit that on both now we have a container with two items which each are set to 200 pixels at least they'll be 200 pixels if the container is more than 400 pixels wide so flex basis is a way of setting the base width of the element so they'll now stay at 200 pixels regardless of how much extra space there is in the container if there's less than 400 pixels they'll actually start to shrink but that's something we're going to look at a little bit later so let's not get ahead of ourselves there let's move on to the flex grow if we cut this out here and paste it in there and do the same thing here now you can see they actually grow with the width of the container so flex grow basically decides how much of the extra space should be distributed to the various items if we set them to zero on both of these this extra space will not be distributed to either home or log out since they both have a flex grow of zero however if for example log out gets a flex scroll of one it'll take up all of the remaining space and home will get nothing of the remaining space but as you saw if the home also has value 1 it too will grow with the size of the container and now as these values are identical both have one the flexbox layout will distribute the extra space evenly across the two items so these two numbers also work in relation to each other if we set log out to two you'll see that the logout grows twice as quick as the home this will be a bit more apparent if we use a larger number for example five now when it grows you can see that the log out is clearly glowing faster than the home item and actually it's growing five times faster so just to reiterate on that if we set both of these to zero then we have the extra space on the side and the wider we make the container the more extra space we have however if we give the logout next grove one it will take up all of the available space and grow into it we make only the home have a flex grove one it will take up all the available space grow into it and if both of them are set to one they will distribute the extra space evenly across each other okay so now let's move on to flex shrink let's set these like scroll values back to zero copy the shrink down here and down here so as you remember even though we've set the bases here to 200 pixels the flex container will force them to be less than 200 pixels if the container is less than 400 pixels like now now there may be 150 150 pixels each or something like that and that is because flex shrink is set to one meaning that they will both shrink at an equal rate and this is actually the default value for flex shrink so while the grow is by default set to zero the flex shrink is by default set to one meaning that if i remove this one and this one will still have the same behavior they both shrink at an equal rate let's get them back again okay now let's change the flex shrink to zero for the home item what'll happen now is that when we reach the 400 pixel threshold and the items will have to start shrinking the log out will do all the shrinking while the home stays at 200 pixels so the log out is doing all the drinking since it has flex shrink set to one while home does none of the shrinking since it has flex shrink set to zero now let's change the flex shrink on this one to something greater than one and see what happens then let's add five for example rapids now is that when we reach the threshold the home item is shrinking much quicker than the logout item it's actually shrinking five times faster than the logout item so these numbers work in relation to each other meaning that you have to look at both the numbers this one and this one to understand how one of the numbers play out on the page because now log out has a flex string of one and as you can see it shrinks really slowly because one is a small number in relation to five however if we take this back again and set the flex ring of home to zero then suddenly log out does all the shrinking because one in relation to zero is infinitely more okay so let's rewrite these two here to the behavior we want we want flex grow actually to be at one and we want flick string to be at one and do the same thing here and have the flex spaces stay at 200 so now they grow and shrink at the same rate and they have and they are 200 pixels by default so now we can get back to the shorthand again we're going to do flex and do 1 1 200 pixels this is the exact same thing as this meaning we can remove this and also copy it over to this logout icon okay so finally i want to give you the task for this lecture what i want you to do now is that once this container here crosses the threshold of 400 pixels i want you to make the log out item grow 10 times as fast as the home item so go ahead and do that and when you come back to the screencast i'll show you the solution okay hopefully you paused the screencast and did the assignment it's really easy actually if you want the logout to grow 10 times as fast as the home item you simply set the flex grow which is the first one of the three to ten and now as you can see the log out grows really fast and home grows really slowly however when they start shrinking they both shrink at an equal rate meaning when they're less than 200 pixels they both shrink and grow actually at the same rate but once they cross the 200 pixel threshold about here the log out takes over okay so that was it and i'll see you in the next lecture hey there really nice thing about flexbox is that it has socalled source order independence meaning that you can move around on the items regardless of how they're laid out in the markup and an example of this is the order property so let's see how it works we have the three items home search and log out in the container here and i've given them number as that simply makes it easier to follow what's going on here i've also given them classes of item 1 item 2 and item 3. let's head over to the css and give the item 2 for example order property one and what happened here is that the search jumped over to the third spot where the logout used to be and i've not changed anything in the html the source order is still one two three but the order on the page is one three two and you might be a little bit confused about why setting the value to one results in it being placed all the way at the end and that is because by default the order is set to zero so whatever items that have an order above zero for example one will be placed at the end however if we give it a value below zero for example minus one it'll be placed in the beginning so let's also add a selector for item one and item three and by default we're all set to zero so if we set them to 0 that won't result in anything if we want the first item to for example appear at the last spot can give a value above 0 for example 5 or four or three or two doesn't matter stay at the end of the main axis as long as its order is above the order of the rest of the items so what i want you to do now is to make these three items appear in the opposite direction of how they're originally laid out meaning it's three to one instead of one two three and i want you to do that using both positive and negative numbers in the order here so go ahead and do that now and when you come back i'll show you how to do it as well okay so hopefully you completed that task let's now do it ourselves the second item here stay at the same place that's the first and the third which will basically be swapped and we're going to use positive and negative numbers so i'll start with targeting the third item the log out one and set this to minus one now that's first and then we have to set the item one the whole to a positive number one and now that is laid out towards the end three two one and that was it i hope you managed to do this as well and congratulations you've completed the main section of this flexbox course so give yourself a pat on the back and if you have any questions feel free to ask that in the q a section and i'll answer it as soon as possible thank you hey in this bonus lecture you're going to learn how to create a fully responsive navbar which adapts itself to various screen sizes using a bunch of the concepts you've learned so far including flex grow flex shrink flex basis flex wrap and the order property so here is our nav bar it has four items and it's only the search item which is flexing as you can see it grows and shrinks with the size of the container and that's because we've given the search item a flex value of one while the others are only as wide as the content inside of them forces them to be i've also added a bit different styling to this example as you can see we're only using one background color as that looks a little bit nicer and the reason we used different background colors in previous examples was because it was a bit more pedagogical however by now you should know the basics of how flexbox works so we don't need different colors in the html you'll also see a few changes as the container we're using an unordered list and list items as the flex items as this is a little bit more semantically correct for creating a navbar the search item can be found here and as you can see i've added an input field so you can actually write inside this search field so nothing happens if you try searching for anything now this navbar works well on wide screens and it works well to right about here where it starts breaking because the search suddenly can't fit anymore so what we want to do here is actually allow the container to wrap and to place two items instead of four on each of the two rows so let's do that head over to the index.css and we'll simply create a media query set it to 600 pixels and inside of it target the container and allow it to wrap because right now it won't wrap regardless of how narrow you make it simply will not allow you to add items on multiple rows it'll only allow one row to change that we'll do flicks wrap and set it to wrap as you can see now it'll allow wrapping here the logout wrap down to the second row though this doesn't look very nice let's go back here and we'll target the items at let's appear flex value to flex grow one flex shrink one however flex bases fifty percent because that'll make each row fit two items like that and as you can see we have home and profile in the first row and search and log out on the second row each taking up 50 percent of the total width now i actually want to align the search placeholder text in the center instead of at the left hand side so i'll do search input and do line so that looks a bit better this has nothing to do with the flexbox itself it's just a design choice okay so now we have two different states this one and this one and it's actually pretty nice however if the screen becomes even narrower look what will happen it'll actually break at this point pushing the search and the log out onto a row each however home and profile can still fit on one row so flexbox will allow them to stay on the same row when it reaches this point each item's a single each so i don't want this middle stage here this one the vertical layout is good for very narrow screens mobile phones for example and this one is good for a bit wider screens but this layout isn't really that useful so let's rather control this by creating another media query this time simply copy it from here and we'll add it at 400 for example and what we need to do now is at this point target each of the items like we're doing here however instead of giving each item 50 of the row and the width we'll give them 100 so i'll just copy this actually and change this to 100 and as you can see now the breakpoint at 400 pixels to reach here gives us a clean transition from this state to this state now finally what i want to do is move the search all the way to the bottom because i think it makes sense to have the search at the bottom when the layout is fully vertical to do that we'll target the search and simply give it an order of one and it jumped down to the bottom and remember that's because by default order is set to zero for all these items and whatever item which has an order above the others for example this one has one which is above zero will appear after the others so that was it i hope you learned something feel free to play around with this and change it however you want and if you have any questions just leave them in the q a section thank you hey and welcome to this bonus lecture where we are simply going to experiment a little bit with an image grid in flexbox if you've seen my css grid course you'll probably recognize this grid as i've simply cloned one of the screencasts there and changed around on things a little bit and i actually do recommend you to create image grids in css grid as that is made for twodimensional layouts while flexbox is mainly onedimensional however you can't recreate quite a lot of cool grids in flexbox as well so let's just jump into it and play around with it a little bit here we have our images they can also be found in the img folder over here we have the basic setup here the container just has a display of flex and as you can see that just lines up the images after each other and there are a bunch of them and they're way out of the flexbox container because flexbox won't allow you to wrap any of the items it'll force everything to be on the same line so let's first actually scale these images down a little bit let's give them a width of 850 pixels and a height of 100 pixels now that'll change their aspect ratio a little bit but let's not care about that because it looks kind of nice okay um now we want the images to wrap of course and as you remember to do that we do flex wrap and which by default is no wrap and we're just going to remove the no and boom there you can see now wraps to a nice little image grid however as you can see at this point they're skewed over to the left hand side so one thing we can do to make it a little bit nicer is to do justify content and set that to center that'll center it looks pretty decent we can also try these around for example that'll add some space around the images though here you can see the problem when flexbox only can fill three items on the last row the space around the images will be different than these of course resulting in this funny looking gridish layout here but with a different type of grid down here there's not an easy way to have these three images over at the left hand side for example so that only the last spot here will be open when you do space around it'll do space around on each of the rows separately if we did x start wouldn't center it like it did previously now we have much more space here and here even though we have this more gridish layout okay so what if we want these images here to be flexible in their width now we've just hard coded their width and height though what we can do instead is actually use percentages here let's do 100 and 100 and we'll also do object fit cover remove this justify content and now it looks really broken just hang on a minute what we'll also do is we'll target the items themselves and we'll give them a flex value of flex grow one flex shrink one and a base width for example 150 pixels which we previously had now you can see they scale up and down and also shuffle around when needed so here their base width 150 pixels but they're allowed to grow and shrink and the images themselves just take up whatever space each of the flex item has got available and with the object fit cover they take up all the width and all the height and cover the entire window and that will result in you not seeing all of the images any given time so if that's important this is not a good solution however if you just want most of the images to appear in the box don't care if it's cropped a little bit this is actually a pretty nice solution so however xbox lays out as many items as it can on each of the rows doesn't evenly distribute it throughout rows so when it gets to this point where we have 10 images here and our 11th image which is the last one down here it'll be placed on a single row meaning it'll be five times as wide as the others which isn't optimal however these widths looks pretty nice now we also have some big images here i've given them class names of big here what i want to try out is actually do container and then target those big ones and here i'll actually target the normal ones specifically as i've given them classes of normal as you can see here and now they're the same however if we give the big ones 250 pixels in base width you can see that that works as well it scales up and down however now we've said that we want the big images to start at 250 pixels with and the normal images to start at 150 pixels with and they are both to grow the container has room for it meaning you have this pretty cool looking grid okay feel free to play around with this perhaps adjust the values here you can drag and drop some more images in here maybe some vertical and horizontal images and try to adjust their flick spaces basically do whatever you want so that was it i hope you learned something thank you
