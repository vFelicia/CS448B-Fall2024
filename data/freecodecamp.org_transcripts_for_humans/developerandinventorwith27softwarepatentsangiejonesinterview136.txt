With timestamps:

00:00 - no one is like handing out these sorts
00:02 - of opportunities out of Charity like
00:05 - they just are not right and so if the
00:08 - seat at its table then that means that
00:10 - you earned it
00:12 - [Music]
00:51 - welcome back to the free Cod Camp
00:53 - podcast I'm Quincy Larsson teacher and
00:56 - founder of freecodecamp.org each week
00:59 - we're bringing you Insight from Founders
01:01 - developers and ambitious people getting
01:03 - into Tech this week we're joined by
01:06 - Angie Jones she's a teacher speaker
01:11 - developer and holder of 27 software
01:14 - patents she's also the global vice
01:17 - president of developer relations for TBD
01:20 - which is a financial technology company
01:22 - Angie it's great to have you here thanks
01:24 - Quincy good to be here yeah you're
01:27 - somebody whom I have admired uh for many
01:30 - years and you know you've been involved
01:33 - with the Freo Camp community in the past
01:35 - as well uh we we I think you were at
01:38 - lock lockdown conf back in the day yeah
01:41 - yes that's right yeah when uh the
01:44 - pandemic hit and everybody was first
01:45 - going into lockdown we had this
01:47 - conference and uh yeah it was cool to
01:49 - have you there too so yeah it much
01:52 - overdue like having you here on the
01:55 - freeo cam podcast yeah I'm honored to be
01:57 - here a a huge fan of
02:00 - um of you Quincy as well as free code
02:03 - Camp so the pleasure is all mine awesome
02:07 - well uh thanks for your kind words and
02:09 - uh I'm excited to to dive in we're going
02:12 - to talk a lot about your background
02:14 - we're going to talk a little bit about
02:15 - test automation which is kind of your
02:18 - area of specialization uh before you
02:20 - went into uh developer relations uh and
02:24 - uh we're also going to talk a lot about
02:26 - education and teaching because you are
02:29 - an experienc teacher both at the
02:30 - Collegiate level and through you know
02:33 - educ like instructional design
02:35 - essentially designing these uh awesome
02:37 - learning paths um uh through test
02:40 - automation University so um before we
02:43 - dive into all that though I just want to
02:45 - get a feel for your early days like what
02:50 - where you grew up and what your
02:52 - interests were when you grew up yeah um
02:55 - so I'm born and raised in New Orleans um
02:59 - actually moved back during the pandemic
03:01 - so I'm back home now um early days so I
03:05 - didn't grow up around like computers or
03:09 - like the internet or like anything like
03:13 - that so I wasn't even aware that you
03:15 - know technology was you know an industry
03:20 - that I might be able to work in um upon
03:23 - graduating from high school I knew I
03:28 - wanted to go to college but had I
03:30 - literally had no idea what I wanted to
03:32 - focus on I just really didn't um so I
03:36 - chose business as a major because I
03:38 - figured like that'll give me enough
03:41 - skills to figure it out um once I'm an
03:44 - actual working adult and um my father
03:49 - who was an accountant he recognized that
03:54 - uh technology was becoming this emerging
03:57 - Trend and he recommended did that I take
04:01 - at least one computer class Quincy so
04:04 - he's like you should know how to use the
04:06 - thing because I'm starting to see them
04:09 - you know in in pretty much all
04:11 - Industries and so um me not knowing
04:15 - anything I just kind of looked at the
04:17 - the um the course catalog for anything
04:21 - that looked related to computers and uh
04:26 - I enrolled in a C++ programming course
04:29 - course um I didn't even know what
04:32 - program it was but I enrolled in that
04:34 - course and um I actually like did really
04:38 - well and I I really enjoyed it and and
04:41 - so my professor um at that time
04:45 - recommended that I switch Majors to the
04:48 - rest is
04:49 - history that's awesome so early on it
04:51 - sounds like your dad was pushing you to
04:53 - learn about computer science and then
04:54 - you had uh some additional guidance from
04:57 - a uh from a professor who took an
05:00 - interest in in your future and uh
05:03 - business like in the United States for
05:05 - everybody like in our International
05:07 - audience like 20% or something like 20%
05:11 - of students study business when they go
05:14 - to university just because it's like a
05:16 - general purpose thing that you can study
05:18 - and people who don't know what they're
05:19 - going to study it's very common for
05:20 - people to go into business so uh you're
05:23 - pretty representative like I'm not sure
05:25 - what to study hey making money that
05:27 - sounds good yeah yeah yeah right right
05:30 - right yeah so um that's that's pretty
05:34 - cool so what were your um early
05:36 - experiences like with programming so
05:38 - you're at the you know the college level
05:41 - and you're you're learning C++ I think
05:43 - which is kind of like an Infamous
05:46 - infamously difficult to code in but very
05:48 - important programming language that a
05:50 - lot of uh important applications are
05:52 - written in like do you remember kind of
05:54 - those first few um weeks of just sitting
05:58 - down and trying to get things done yeah
06:01 - I do and um I don't know this might be
06:04 - abnormal and maybe I'm a a weirdo but it
06:07 - was it wasn't scary I mean I didn't know
06:09 - what to be scared of right and so um
06:12 - that's one of the things I was just like
06:14 - super naive and oblivious to it all and
06:18 - so I I wasn't fearful at all um and I
06:23 - think that set me up for Success so I
06:25 - just kind of went in with like this open
06:27 - mindset and no fear and and and just
06:31 - soaked up the knowledge like a sponge
06:33 - but I remember it being appealing to me
06:37 - because um it felt a lot
06:40 - like the challenges and the excitement
06:45 - that I get when I would play games at
06:48 - home like with my family right there's
06:50 - like some sort of challenge you need to
06:53 - kind of put the pieces together um in
06:56 - order to like come up with some sort of
06:58 - solution right right and so that that
07:01 - has always been fun to me and so this
07:03 - kind of felt the same way I remember
07:06 - like getting the program in assignments
07:08 - and like you know maybe they'll be due
07:11 - in like two days so let's say the course
07:13 - was Tuesday and Thursday right so you
07:15 - get it on Tuesday it'll be done by
07:17 - Thursday I
07:19 - remember like let out now mind you this
07:22 - is back in the day so I still don't have
07:24 - a computer or anything like that um as a
07:28 - computer science major but we had a
07:30 - computer lab um I remember like leaving
07:32 - the classroom and running to the
07:35 - computer lab cuz I can't wait till like
07:37 - start working on my homework assignment
07:40 - um and I was sitting there until I like
07:42 - did it and like one take and then we
07:44 - would submit these on like a floppy
07:47 - disc um to to our instructors so yeah
07:51 - those I remember like that that
07:53 - excitement and honestly that excitement
07:55 - hasn't gone away it's been uh decades
07:58 - later at this point point and they'll
08:01 - get joy when when I do get to
08:03 - Cod that's awesome uh I'm thrilled that
08:07 - you still have that that kind of Joy uh
08:11 - I'm sure I'm not pronouncing that word
08:12 - prce word correctly but like when it
08:14 - comes to like being on the computer you
08:16 - just it sounds like it's your happy
08:17 - place yeah I don't do C++ anymore but um
08:22 - yeah um somewhere in those College Years
08:24 - I was introduced to Java and and and I
08:27 - fell in love with that and and and still
08:29 - in love with Java yeah and we're going
08:31 - to talk about your Java
08:34 - relationship your extended uh kind of
08:37 - advocacy of java so not only did you
08:40 - fall in love with Java but you've since
08:43 - been a big advocate for Java a as a
08:46 - developer and uh have have become a
08:49 - known quantity among like Java
08:51 - developers and uh been a big part of the
08:54 - Java ecosystem I want to talk about that
08:56 - but one thing that you did when you were
08:59 - in University is a lot of people they
09:01 - graduate they go into industry
09:02 - immediately you decided to stick around
09:05 - and teach for a while can you talk about
09:07 - that yeah actually I did both so I went
09:12 - um into the industry right after uh
09:16 - undergrad and uh I went to IBM and I
09:20 - worked there as a software engineer and
09:23 - I'm I I
09:26 - have I don't know where I recognize that
09:29 - said I like to teach maybe I would help
09:31 - students or something like that but I
09:33 - mean I didn't have formal um training or
09:37 - anything and teaching right and when I
09:40 - first graduated you know you have all
09:43 - this time on your hands now that you're
09:45 - out of college like work is 9 to 5 where
09:48 - you're used to like going to class from
09:50 - like 9 to 4: and then um and then you
09:54 - would work on homework and all of this
09:57 - and so now all of a sudden I had all of
09:59 - this extra time because I didn't have
10:00 - homework and stuff to do so I remember
10:03 - um signing up to do like online tutoring
10:06 - and I would help uh like high school and
10:08 - college students with uh with math
10:11 - problems or uh computer science problems
10:16 - and I think maybe oh I really like you
10:18 - know helping other people learn and uh
10:21 - teaching and so that's when I went back
10:24 - for my M's in computer science and I did
10:28 - that while working at IBM I did both of
10:31 - those yeah okay awesome and this is
10:33 - great because I wanted to establish like
10:35 - a kind of a timeline uh so you uh worked
10:38 - at IBM and my understanding is that you
10:42 - just started out kind of like doing more
10:44 - software General software development
10:46 - and you were able to specialize on the
10:48 - job and this is something that I often
10:50 - tell people uh don't worry about
10:52 - specialization when you're just learning
10:54 - to code and trying to get your first
10:55 - developer job I often tell people try to
10:58 - get a developer job job and then see
11:00 - where they put you and which direction
11:01 - they push you in and then you can kind
11:03 - of specialize on the job while you're
11:06 - you know making money and not just while
11:08 - you're kind of like working a day job
11:10 - trying to get into Tech like I I I feel
11:12 - like people premature optimize for oh I
11:16 - want to be in security but it's much
11:17 - easier to get into security I guess once
11:19 - you're already a a developer like a
11:21 - general purpose developer right would
11:23 - you would you agree with that sentiment
11:25 - I would but I also think that having
11:29 - like some sort of specialty kind of
11:31 - opened the door for me as well and this
11:34 - was unique try to apply it like across
11:36 - the board but yeah um when I say that I
11:39 - like really love Java like I really love
11:41 - Java and so my Java Professor was um
11:47 - someone he had you know he was he was
11:50 - like this young Professor and he was in
11:52 - love with Java and his passion for it
11:55 - just kind of was
11:56 - contagious but what he did was he's he
12:01 - stayed back during the summer um and did
12:04 - like this Java boot camp for anyone who
12:07 - like really wanted to go into the depths
12:11 - of the language and he did that to
12:14 - prepare us to uh take the job the Java
12:19 - certification so back then that's when
12:21 - sun still owned Java so it was the sun
12:24 - you know Java programmer certification
12:28 - and so I did that
12:30 - um now during this time Java was
12:34 - actually um relatively new and so this
12:39 - is when we started seeing like these big
12:41 - corporations such as IBM begin to adopt
12:44 - Java as like a language of choice and so
12:47 - me this put me in a really um
12:51 - advantageous position where I was able
12:55 - to use that that specialty um um as a
13:00 - weigh in right now that doesn't mean I'm
13:03 - like Java Guru in IBM or whatever but it
13:07 - did hope open the door and you're right
13:09 - I did kind of work as just general
13:11 - purpose software developer and even like
13:15 - as much as I talk about Java right now
13:18 - um I've had to code in various languages
13:21 - throughout my career like right now
13:24 - we're not even using Java in my shop
13:26 - like so it's like JavaScript and
13:29 - um and and Swift and like all of these
13:33 - other languages right um and so I I
13:37 - agree with you that people shouldn't
13:39 - like limit themselves or box themselves
13:41 - into one specific technology um as the
13:45 - one all be all and that's their only
13:47 - shot but like put your eggs in a couple
13:49 - of assets make sure you understand the
13:51 - foundations and can work um in any
13:54 - capacity and and of course you can have
13:56 - your favorites like I do but um don't
13:58 - limit yourself to that right yeah so
14:02 - tell me about like the the first few I
14:05 - guess months at IBM this giant
14:09 - stored American uh Computer Company
14:12 - software company and now doing all kinds
14:14 - of Consulting Services as well but you
14:17 - know just imagine uh like like take us
14:21 - back to what it was like joining you
14:23 - know perhaps the biggest tech company at
14:25 - the time or or one of them I mean this
14:28 - you know this this was like the early
14:30 - 2000s probably 90s I'm I don't want to
14:33 - date you too much early 2000s don't P me
14:36 - that far back quiny um it was it was
14:40 - exciting like I I I I remember feeling
14:43 - like super excited that um and I
14:47 - actually did a couple of internships at
14:50 - IBM as well as Boeing while I was in uh
14:53 - undergrad and so um I was able to kind
14:56 - of get a taste of what life would be
14:58 - like there um and so I knew that it was
15:01 - a super Innovative company and so I was
15:04 - really excited to join there were like
15:07 - lots of smart um who were working on
15:09 - really cool things and so the first
15:12 - couple of years um they were great like
15:15 - I got to learn a lot I got to work with
15:18 - like you know some really brilliant
15:20 - people um but it was also intimidating
15:23 - so you know it was much different than
15:26 - my college environment where we were
15:28 - kind of all learning together and you
15:30 - know remember I talked about how oh
15:32 - there was no fear I didn't know what to
15:34 - be fearful of well that really changed
15:37 - in the workforce when you have like you
15:39 - know these amazing distinguished
15:41 - Engineers just kind of walking down the
15:44 - hallway um and you're like on a team
15:47 - with them and expected to contribute and
15:49 - so I remember um print uh from everyone
15:55 - like you know I'm young I'm I'm a woman
15:59 - of color like I don't know I just felt
16:01 - like I like not a sense of belonging
16:04 - right um and it's not that anyone like
16:06 - made me feel that way it just was a
16:10 - reality of what it was like there there
16:12 - aren't people at the table like me and
16:15 - so it was a bit
16:17 - intimidating and um that actually came
16:20 - back to bite me so um I
16:25 - would be hesitant to like share my ideas
16:30 - uh or speak up in meetings where you
16:32 - know we're brainstorming Solutions
16:34 - because like some of the ideas that I
16:36 - had were like really different than what
16:39 - everyone else was was suggesting and so
16:42 - you know you automatically just assume
16:44 - like oh my idea must be pretty dumb or
16:46 - whatever so I wouldn't speak up and uh I
16:50 - remember I got uh my performance review
16:54 - and it wasn't good and I didn't
16:57 - understand that back then because all
16:59 - you know on time and by deadlines and
17:03 - yet you know there's this bad review
17:06 - that's in it's and I remember that
17:08 - feedback was like it's not about what
17:10 - you do but how you do it and you know
17:13 - you're you're you're you not talking in
17:15 - the meetings you're not engaging with
17:17 - the teams you're not collaborating like
17:20 - those I remember just saying to myself
17:22 - like all right well I guess I have to
17:24 - say my dumb ideas or I'm going to like
17:26 - get fired but at least at least I said
17:29 - something and they won't be able to give
17:30 - me this feedback
17:32 - again and so I started sharing these uh
17:36 - quote unquote dumb ideas and uh people
17:39 - thought they were brilliant actually um
17:43 - and different and Innovative right and
17:45 - so we got to the point where I started
17:48 - patenting these ideas um within IBM and
17:52 - so that was a a a nice lesson for me I'm
17:55 - glad I had it like earlier in my career
17:59 - um so that I could course correct and uh
18:02 - from there I mean now I I if I tell
18:06 - people that I work with this story they
18:09 - probably wouldn't believe it because
18:10 - like I'm always speaking up now and like
18:13 - you know saying when things don't sound
18:16 - like a great idea and when they do you
18:18 - know yeah that's that's a really cool um
18:22 - you you went from to just like not not
18:25 - being so I guess concerned about what
18:28 - other people thought if it sounded like
18:30 - a good idea to yourself maybe there's
18:32 - some Merit there maybe it's worth
18:33 - sharing the idea uh I mean what would
18:36 - you say to somebody else who's coming
18:37 - into a Workforce where they are
18:41 - underrepresented and they may be feeling
18:43 - similar kind of trepidation about
18:46 - sharing their ideas or speaking up
18:47 - because they're like I'm surrounded by
18:49 - all these smart accomplished people like
18:52 - who am I to like have anything to say I
18:55 - would say that um no one is like handing
19:00 - out these sorts of opportunities out of
19:03 - Charity like they just are not right and
19:06 - so if the seat at is table then that
19:08 - means that you earned it and you know um
19:12 - it's warranted and so you're there for a
19:15 - reason and and step into that those
19:18 - shoes and you know um and do what you
19:21 - came to do like when when you went to
19:23 - that job you had ideas of like the
19:27 - impact that you were going to make and
19:29 - when you got there like yeah maybe it
19:31 - doesn't look like what you thought it
19:33 - would look like and maybe there's not
19:35 - people um who are like you in your
19:39 - immediate team but that's okay um you
19:42 - bring a unique perspective and what I've
19:44 - learned is like my differences are my
19:47 - superpowers right and so your cultural
19:50 - upbringing and how you experience life
19:53 - and your outlook on the world may be
19:56 - different and that's that's a great
19:58 - thing that's a great
20:00 - thing yeah awesome uh if you found
20:04 - yourself with a seat at the table you've
20:06 - earned it you earned it I love that
20:09 - because it just kind of gives you that
20:11 - that agency to push forward and it's
20:13 - like you have a mandate to share your
20:15 - thoughts because hey they they gave you
20:16 - the the podium right they gave you the
20:18 - mic
20:19 - like what you gonna do with it that's
20:21 - right yeah awesome well that that's
20:23 - really cool so uh of course you know
20:26 - you've done so much since IBM I do want
20:29 - to progress through that but but it
20:30 - sounds like those first few years at IBM
20:33 - you really found your footing and that
20:35 - this weird kind of out of nowhere uh
20:37 - negative feedback that you received was
20:40 - actually like a profoundly good thing in
20:42 - terms of uh you you know make a Mark um
20:47 - you you said that you started patenting
20:48 - things I do want to ask about that
20:50 - because I don't know anybody who has 27
20:53 - patents uh I think like there are
20:56 - probably some people in the free C game
20:58 - community and have like one or two
20:59 - patents but like you're like very
21:01 - prolific in getting uh software related
21:05 - you know processes and things like that
21:07 - patented can you just talk a little bit
21:09 - about what that what your first few
21:12 - patents were and like what kind of what
21:15 - that process was like in case anybody
21:16 - has an idea and they're thinking about
21:18 - getting it patented yeah so I remember I
21:20 - was working on a brand new product um it
21:25 - never actually even saw the light of day
21:28 - um
21:29 - but at IBM you know we would we would
21:32 - always work on like really Innovative
21:34 - things and um you know pushing the
21:37 - needle um in regards to software and I
21:41 - had the pleasure like doing my
21:42 - internships to um a distinguished
21:46 - engineer at IBM so that's like one of
21:49 - the top levels you can get to as an
21:52 - engineer um within the company and so I
21:55 - worked with him every day and his work
21:58 - was very different than what I expected
22:02 - um a corporate job to be right and so at
22:06 - that level he wasn't like sitting around
22:08 - and coding all day he was doing a lot of
22:12 - brainstorming and a lot of innovating
22:15 - with other distinguished Engineers like
22:17 - I remember um just frequent meetings and
22:21 - whiteboard sessions and things like that
22:24 - and so I think I picked up a lot um over
22:27 - that summer about
22:29 - problem solving and thinking outside of
22:31 - the box um to come up with like
22:34 - innovative solutions and so I carry that
22:37 - with me um you know throughout my career
22:41 - and I'm always trying to work on like
22:44 - The Cutting Edge of tech because that's
22:46 - that's what excites me right um there's
22:48 - so many problems that are yet to be
22:50 - solved and uh technology is constantly
22:54 - improving and evolving and it's really
22:57 - fun to take like
22:58 - maybe even an old existing solution and
23:01 - apply it to a new problem and see like
23:04 - what comes from that right and so um a
23:08 - lot of my ideas or the the first patents
23:11 - were around like you know software
23:14 - Improvement and so it could be things
23:17 - even tools that I was using so email
23:19 - tools I have a whole bunch of patents
23:21 - and like collaborative software so
23:23 - better ways that email could work better
23:26 - ways that like um chats systems and
23:29 - things like that could work and
23:30 - especially across different systems um I
23:34 - remember when Second Life first came out
23:36 - do you know life is okay who don't know
23:39 - that's a virtual world um they call them
23:42 - metaverses now so Second Life um I
23:46 - remember like as me and like some other
23:50 - folks at my job we would kind of just
23:52 - set you know these lunchtime
23:54 - brainstorming sessions where we you that
23:56 - we're not necessarily working not but
23:59 - like this second life thing was
24:01 - fascinating so like wow I can I can
24:04 - basically have an avatar representation
24:07 - of myself and go like experience a a
24:10 - virtual world while I'm teleporting
24:12 - across this thing and speaking to people
24:15 - like this was before you know like Prime
24:18 - Time social media like before Twitter
24:21 - and like Instagram and stuff like that
24:24 - right so this was like next level where
24:26 - you were talking and and actually
24:28 - engaging with other people um over the
24:31 - internet and if there was like this kind
24:33 - of physical representation to it and so
24:36 - anyway so we went in there and just came
24:38 - up with like all sorts of like ideas and
24:40 - things of things that you can do and so
24:43 - a lot of my patents are in in that area
24:45 - as well um smarter planet was another
24:49 - big initiative at the time and so um
24:52 - thinking about a lot of things to
24:55 - improve like our um our environment like
25:00 - um automated systems and things like
25:03 - that so it's a it's a a great variety um
25:07 - another thing as I started inventing I I
25:10 - started recognizing like when to see
25:12 - problems and how to have like this
25:14 - inventor mindset on how to innovatively
25:18 - solve those problems and so it became a
25:21 - lot more natural to just be in the
25:23 - grocery store I'll tell you a fun one
25:25 - where it's like um you know how you go
25:27 - in the grocery store and and you
25:28 - inadvertently always choose the wrong
25:31 - line to get in right whatever line you
25:33 - choose is going to be the one that's
25:34 - moving the slowest right it's feels that
25:36 - way yeah there's some law to that like
25:38 - somebody should name that so anyway as I
25:41 - like chose the wrong line and I'm
25:43 - standing there there's this situation
25:46 - where like where you become annoyed with
25:49 - something would be a trigger like how
25:51 - would I solve this with technology right
25:54 - and so right then and there you know I
25:56 - came up with an idea of how you might be
25:58 - able to calculate um the weight times in
26:02 - like a queue right um and this could
26:05 - spend like a physical queue or whatever
26:07 - but in the context of the grocery store
26:10 - like so you start thinking like what
26:11 - technologies can I pull in right okay I
26:14 - have a basket of groceries everyone in
26:16 - the line has a basket of groceries can
26:18 - we some kind of way like count how many
26:21 - items are here and like count how many
26:24 - of these are scannable items versus
26:27 - produce or something that they have to
26:28 - punch in we know who's in line as well
26:31 - can we use things like Loyalty cards to
26:35 - um determine like what are they going to
26:37 - do when they get to the register are
26:38 - they going to like go ask for cigarettes
26:40 - and the cashier has to go walk off to go
26:43 - get the cigarettes that holds the lines
26:45 - up um what method of payment are they
26:47 - going to choose like are they going to
26:49 - write a check you know um which takes a
26:53 - lot longer than swiping a card yeah is
26:55 - this a is this a a a coupon queen who's
26:58 - going to pull out like a book of coupons
27:00 - in the line right and you start
27:02 - factoring all of these things in to come
27:04 - up with a calculation so that's one of
27:06 - my uh wow so you have a patent for like
27:09 - a system that like looks at those
27:11 - different factors determines like a
27:13 - weight time so that people I mean I
27:15 - could easily see in the future when like
27:17 - the these kinds of sensors and all this
27:19 - data is pervading like everything that
27:22 - you could basically be walking up and it
27:24 - would just say this line one minute this
27:26 - line this one or just say go over here
27:28 - like really simple like right this one
27:30 - you know and this one once people gets
27:32 - in that line it's just like kind of
27:34 - almost like direct like a police officer
27:36 - directing traffic or something like that
27:38 - yeah that's pretty cool so a lot of your
27:41 - patents are around like pretty abstract
27:44 - thinking like you get annoyed by a
27:47 - problem and then you're like how would
27:48 - we solve this with technology and then
27:51 - that's like kind of is that a common
27:53 - theme through a lot of your patents or
27:55 - um for a lot of them then I would also
27:58 - like targeted towards at some point I
28:00 - started like leading um patent sessions
28:03 - and this is interesting cuz remember I'm
28:05 - still pretty new in so I'm about two or
28:07 - three years into my career at this point
28:10 - a lot of these folks are senior but like
28:13 - I'm collecting these patents like
28:16 - Infinity stuff getting a reputation and
28:19 - respect within the company and so I
28:21 - started leading the uh patent mining
28:25 - sessions like after or right before
28:27 - relase release right and so okay we've
28:29 - done all of this cool work let's sit
28:32 - down and look at what we've done before
28:34 - we actually ship it and determine if
28:37 - there's anything in here that's worth
28:39 - you know um protecting
28:42 - intellectually okay and what is the
28:45 - actual process like if you don't want me
28:47 - diving more into it again I have zero
28:49 - patents so I don't know what what this
28:51 - entails like like what the patent office
28:53 - requires like like the more you can go
28:55 - into detail about the workflow okay I
28:58 - think a lot of people listening would be
28:59 - very interested in this yeah sure okay
29:01 - so um IBM is a big company and so they
29:05 - have like patent attorneys on staff
29:08 - which made life a lot easier so whenever
29:12 - I would have an idea I would just like
29:13 - open Microsoft Word or something like
29:15 - that and just kind of write the idea as
29:18 - if you were writing a blog post right
29:20 - you write what's the problem statement
29:22 - how might you go about solving this the
29:24 - interesting thing about patents is that
29:26 - you don't actually have to go through
29:27 - the trouble of implementing the thing
29:29 - like I didn't have to implement that um
29:32 - checkout calculator but I had to
29:34 - describe it and design it so you think
29:36 - about this almost like um a architecture
29:40 - skill right where you're thinking
29:42 - through the entire system and like what
29:45 - technology could be used to solve that
29:47 - problem and so you need a stepbystep
29:50 - guide on how to do this it can't be
29:52 - abstract but you don't actually have to
29:54 - go through with implementing it so
29:57 - anyway I would do that that in like a
29:58 - Word document and then there um you can
30:01 - submit it so every company I've worked
30:03 - in has had like some sort of patent
30:06 - submission um or patent program right
30:09 - where when people have ideas within the
30:11 - company they can submit it through some
30:13 - form some channel right and um someone
30:16 - will evaluate that and so at IBM you
30:20 - know that it was the same we was
30:21 - submitted and we had a board of um also
30:27 - prolific inventors to evaluate it from
30:31 - technical Merit but there would also be
30:33 - a patent attorney on those meetings as
30:35 - well to evaluate it from a legal
30:38 - standpoint right um and So eventually I
30:41 - even became a part of the these boards
30:44 - where I was evaluating patents across
30:47 - IBM and that was a pretty cool
30:48 - experience so anyway you go and you
30:50 - pitch basically um so they schedule a
30:53 - they review it sometimes if it was
30:56 - something like oh this has already been
30:58 - done they'll just go ahead and like
30:59 - close it out but you know if it sounds
31:02 - interesting enough it's like all right
31:04 - well here's a schedule time and you come
31:06 - and Pitch the idea to this board of
31:09 - inventors and like patent attorneys
31:11 - right so so maybe that's where I got my
31:14 - present if you can like present to folks
31:17 - like that like okay whatever like you
31:19 - can do it anywhere yeah I mean if you
31:21 - add the hourly rates of all the
31:23 - different people in the room when you're
31:25 - talking expensive right
31:29 - yeah so anyway you would have maybe I
31:31 - don't know 15 minutes or something and
31:34 - that includes like pitching the idea and
31:36 - then them like asking you questions
31:39 - about how it would work or any prior art
31:43 - that you found or that they found
31:45 - because if there's any prior art you
31:47 - can't patent it right yeah so um so we
31:51 - would go through that process and it
31:53 - would be like one of three outcomes so
31:55 - one would be uh we don't want to pursue
31:58 - with like our like business um you know
32:02 - realm or maybe it's just not a good idea
32:06 - maybe no nobody would want to license
32:09 - this you know um or it could already
32:12 - have been done or whatever so the three
32:14 - options were to close it meaning okay
32:16 - we're done with this let's act like it
32:18 - never happened um or you could publish
32:21 - it meaning it's not a patent but we'll
32:24 - publish this into the public domain and
32:26 - once it's in the public domain
32:28 - that prevents anybody else from
32:30 - patenting it so it's a way to um say
32:34 - okay yeah we can do it is a cool idea
32:36 - but we don't want to patent it but we
32:38 - don't want anybody else to patent it and
32:39 - we can't do it you know yeah and then
32:42 - the the third outcome is the one you're
32:44 - aiming for and that's the okay let's
32:47 - file let's file a patent application so
32:50 - from there the lawyers would take over
32:52 - they would take your Your Word document
32:55 - that's like a blog post and it's written
32:57 - in human langu language and they would
32:58 - put this into legal Le um and start
33:02 - drawing little you know diagrams and
33:04 - figures and stuff um that the courts
33:08 - would would appreciate and so your idea
33:10 - turns into like your one page idea turns
33:13 - into this 15 page like legal document
33:16 - that they then submit to the patent
33:18 - office um that's pretty expensive to do
33:22 - and so it was great to have a company
33:24 - kind of uh you know foot in the build
33:27 - there um or not so um you pay this fee
33:33 - and then you wait you wait years in fact
33:36 - um before you get a yay or nay on if
33:39 - this will become an actual patent yeah
33:42 - that's so cool so I mean like Einstein
33:44 - worked in a patent office right and his
33:47 - job was to review that you know the
33:49 - legal Lees and everything of these it's
33:52 - interesting like the the inventor's
33:53 - original idea and maybe this wasn't like
33:55 - this back in Einstein's day but uh
33:57 - having like a bunch of very experienced
34:00 - lawyers who basically specialize in
34:02 - creating patent applications submitting
34:04 - them to this US patent office um yeah I
34:08 - it's a really interesting process it
34:09 - must feel really Str originated this
34:12 - idea and be on one end of this giant
34:14 - kind of like uh rub Goldberg machine of
34:18 - like all the different things going on
34:20 - and then out the other side comes you
34:22 - know a patent number hopefully or years
34:25 - later right right
34:28 - yeah but it's so cool I mean it's super
34:30 - cool
34:32 - um I mean some of these
34:35 - ideas like they weren't issued as a
34:38 - patent or granted as a patent until like
34:41 - I was long gone from IBM so like it'll
34:45 - like some might still come through now
34:47 - and it's still like oh wow that's so
34:50 - cool do you have like the pieces of
34:52 - paper like framed anywhere like do they
34:53 - send you anything when they send it yeah
34:55 - so they would they would pay me um um
34:58 - money and then we would also get like um
35:02 - these certificates and when they're
35:04 - granted you would get like the actual
35:06 - patent in like a frame or whatever so I
35:10 - do have a bunch of those yeah that's so
35:13 - cool I'm going to tell a very quick
35:14 - story if anybody's interested in patents
35:17 - uh the water bed you may have heard this
35:21 - before the water bed that was very
35:23 - popular in like the the 70s and 1980s in
35:25 - the United States basically a giant
35:27 - cushion of water that sits on top of
35:29 - like kind of like a box spring type bed
35:32 - uh so you can like kind of like bounce
35:34 - around it's it's really comfortable it's
35:36 - good for your back I guess uh they've
35:37 - fallen out of favor recently but the uh
35:41 - the inventor of the water bed was unable
35:43 - to Pat it because it turned out that
35:45 - Robert heinan yes the the novelist who
35:48 - wrote I think he wrote like a lot of
35:49 - like Starship Troopers and he had
35:51 - described a water bed in extreme detail
35:54 - in one of his books and so the courts
35:57 - rule red or the patent office ruled that
35:59 - that was prior art and that uh it
36:02 - couldn't be patented so essentially what
36:04 - he had done inadvertently was he put the
36:06 - idea of water beds out into the public
36:08 - domain yeah that's right it could be a
36:11 - movie it doesn't have to be real life
36:13 - like even in movies or you know some
36:15 - sort of fictional uh scenario if it's
36:18 - been described and like you didn't come
36:20 - up with the idea like it exists already
36:24 - yeah but then you got things like one
36:26 - click checkout which very obvious uh but
36:30 - they were able to patent that and that
36:32 - was like a you know hundred million doll
36:34 - billion dollar multi-billion dollar
36:35 - patent I don't know how many people
36:37 - licensed that from Amazon but but yeah
36:40 - that's cool like that thanks for giving
36:42 - us that quick tour of the process of
36:44 - getting a patent made um and telling us
36:47 - a little bit about what some of your
36:48 - your ideas have been so I want to talk a
36:52 - little bit more about your progression
36:54 - because you didn't say at IBM forever
36:56 - like you've moved on and you done a lot
36:58 - of things uh one of the things that I
37:01 - think was really important for a long
37:03 - period of your life was test Automation
37:06 - and just writing tests essentially doing
37:08 - like quality assurance and and just
37:11 - making sure that the code did what it
37:13 - was supposed to do um can you talk about
37:16 - like your journey into test automation
37:20 - yeah um this one is actually fascinating
37:24 - because um I did a couple of stance in
37:28 - like feature development and then also
37:32 - like in test Automation and test
37:36 - automation sometimes gets like a rep or
37:39 - you know this stigma as if it's
37:42 - like less than you know feature
37:45 - development or whatever but I'll tell
37:47 - you um I really enjoyed my time doing
37:51 - test automation much more than the
37:54 - feature development so for the feature
37:56 - development you know
37:58 - all right I'm giving a ticket like okay
38:00 - you make like a widget or something like
38:03 - that and like the fun is over after that
38:06 - like okay and now it's on to the next
38:09 - ticket whereas with test automation I
38:11 - don't know I just feel personally like
38:14 - it really strengthened my engineering
38:16 - skills um because like it's really hard
38:20 - like you one you write way more code to
38:23 - test something than to actually um
38:26 - especially as you come up with like all
38:28 - the various scenarios to test a specific
38:31 - feature right and so I was coding a lot
38:34 - more um and then I was thinking you know
38:37 - a lot broader so when you're pretty much
38:40 - going to have like the Happy path in
38:42 - mind like what is the what is the use
38:45 - case and that's what you build for with
38:47 - test automation it was like this way to
38:49 - explore all of these various um paths
38:52 - and scenarios and like what happens when
38:55 - the customer does this that and the
38:57 - third or they have this this like kind
38:59 - of oneoff use case or something like
39:02 - that and making sure like the the system
39:05 - was built um to handle that right and so
39:09 - I really developed like this
39:13 - um customer focused approach to
39:16 - development and always just thinking
39:19 - about like who is going to use this and
39:21 - how can I make this like a good
39:23 - experience for them um and how do I like
39:27 - capture all of the various ways that
39:30 - this can go wrong and so when I did
39:33 - build features like I just had that
39:36 - customer Centric mindset right and it
39:38 - made me a much stronger developer
39:40 - because I was no longer only developing
39:42 - for the happy path like I had a
39:45 - gazillion um error cases in mind as well
39:48 - that like oh I better make sure like the
39:50 - code handles this that and the third um
39:54 - and so yeah I just had like a much
39:57 - broader view of how everything operated
40:00 - it's like scope to one feature where
40:02 - when I was in feature development like I
40:04 - don't know it just felt like you this is
40:07 - all I know don't ask me about anything
40:09 - else in the system this is my domain
40:12 - this is what I am the subject matter
40:13 - expert whereas talk test automation you
40:16 - take like this this uh step back and
40:18 - this this uh big picture view of the
40:22 - application and all that you can do with
40:24 - it you know and so um I don't know I
40:27 - just just really I really enjoy that
40:29 - yeah can you maybe we could do like a
40:31 - quick like kind of like role play um
40:35 - like maybe an interaction between uh
40:38 - kind of a a naive feature developer
40:41 - developer I'll play that person uh
40:44 - they're like oh uh May we're just trying
40:46 - to do a very basic like uh e-commerce
40:48 - shopping cart feature okay okay so I'll
40:50 - be like hey Angie uh I finished like my
40:54 - shopping cart feature is perfect uh I
40:56 - don't think there will be any bugs in it
40:57 - or anything here you go uh take a look
41:00 - at the code all right and then now you
41:02 - destroy
41:05 - me right and
41:07 - so I might get in trouble but like I
41:11 - found that a lot of developers like are
41:13 - not really great at testing their code
41:16 - and I can say this because when I do
41:18 - feature development I'm wearing a
41:21 - different hat and I notice I'm not very
41:23 - great at testing my Cod right um because
41:27 - you're you just have Tunnel Vision on
41:29 - making that scenario work so what I know
41:32 - that that developer has done you Quincy
41:34 - you have basically added an item to the
41:38 - cart you say yep it's in there all right
41:41 - I'm good to go right and so what I'm
41:43 - going to do is take that and I'm going
41:46 - to say okay so what happens when like I
41:50 - add another quantity before I add it to
41:53 - the card and then what happens when I
41:55 - add another quantity once it's in the
41:57 - cart and what about subtracting a
41:59 - quantity and what about deleting it from
42:02 - the cart right to read it to the cart
42:04 - when it's already in there right and so
42:06 - my mind just starts going all over the
42:08 - place with various scenarios and then I
42:11 - automate all of these scenarios like
42:14 - with code so that they're
42:16 - repeatable um and like what that does I
42:19 - want to take a moment here because a lot
42:21 - of people don't appreciate this benefit
42:24 - of automated test um it's one yes to
42:28 - make C is okay but more importantly than
42:30 - that is to make sure it stays that way
42:33 - and so with proper test in place you
42:37 - have the the luxury and the comfort of
42:40 - kind of like adding whatever you want
42:42 - and changing the code base in any ways
42:45 - that you want because you have those
42:47 - tests that'll be able to catch if you
42:48 - mess something up if you don't have
42:51 - these repeatable automated tests in
42:54 - place it's much harder to refactor your
42:56 - C code it's much harder to add new
42:59 - features or definitely edit existing
43:03 - features because you don't know if
43:05 - you've broken something right and so
43:07 - gives you like that kind of leeway to be
43:09 - able to really go in and like modify the
43:13 - Cod however you want so it's almost like
43:15 - the the larger a project gets the more
43:17 - things you can realizing it uh and so
43:20 - you end up shipping code that uh is
43:22 - regressive in the sense that yeah you
43:23 - added this tests kind of give you the
43:26 - confidence
43:27 - to push forward with feature development
43:29 - or later complexity will just become too
43:32 - much for one person to hold in their
43:33 - head doesn't matter how familiar you are
43:36 - with a large legy working on it and it's
43:38 - constantly changing so you need to have
43:40 - the confidence that like okay I ran all
43:41 - the tests yeah push this production
43:44 - because we're all we're all greenl right
43:46 - yep and it gives you like a source of
43:49 - Truth as well because like I said you
43:52 - work on one feature then you move on to
43:54 - the next and now it's like two years
43:56 - later and you're like X number of
43:59 - features removed from from this one that
44:01 - you worked on right um and and now like
44:04 - maybe someone asked a question or you
44:06 - want to ask something or like you don't
44:08 - know how this thing was supposed to work
44:10 - like somebody is it supposed to do this
44:12 - or this and you go oh gosh I don't know
44:14 - I don't remember right um you're and
44:17 - let's say you don't have the
44:18 - documentation around like that level of
44:20 - detail well your tests are there to tell
44:23 - you exactly like what was expected and
44:26 - you say oh okay yeah according to the
44:28 - test like it's supposed to do it's also
44:32 - um leave your software in a great state
44:34 - if you moving on to a new team or a new
44:37 - company um people who pick this up have
44:40 - that historical data as well yeah so the
44:44 - tests kind of serve as like a backup
44:46 - form of documentation essentially or in
44:47 - many case probably the only
44:49 - documentation because let's face it a
44:51 - lot of people are they they finish the
44:52 - feature maybe they finish the test
44:54 - hopefully they finish the test and they
44:55 - probably move on and and you know maybe
44:58 - they mention it in some meeting that is
45:00 - lost of time but the tests are still
45:02 - there right almost kind of like comments
45:04 - in a way that like assert that you know
45:06 - if shopping cart you know I'm not sure
45:08 - how you exactly you'd structure it
45:10 - depending on the different tool you're
45:11 - using but like that scenario where I say
45:13 - I'm adding another one of these things
45:15 - to the cart what should happen so
45:17 - someone might say what should happen
45:19 - should we have two of these identical
45:21 - items or should the one item just
45:24 - increase to a quantity of two well I
45:26 - don't know but if we have tests we do
45:29 - know like exactly what's supposed to
45:30 - happen yeah so it's kind kind of the
45:33 - intention of the the consensus of the
45:36 - team that was developing that feature
45:38 - like every designed decision is some
45:40 - sort of trade-off right like that's
45:42 - right there might be some Corner case
45:44 - where yeah I actually do want to have a
45:46 - second instance of this particular item
45:48 - in here um but often the most sensible
45:53 - thing would be to just have two of the
45:54 - same item and so you have to like figure
45:56 - out you want to do in those scenarios
45:58 - and in a way by writing those tests
46:00 - you're kind of like codifying what
46:02 - should happen that's right right that's
46:04 - exactly right yeah so I'm really excited
46:08 - about testing which like may seem weird
46:11 - thing to like geek out on and get really
46:12 - interested in but I mean compared to you
46:15 - who been writing tests and doing all
46:17 - this stuff but like I am I consider
46:19 - myself someone who very much appreciates
46:21 - test and the roles that they play and I
46:23 - think it's you know the the era of the
46:26 - cowboy coach who doesn't write tests and
46:29 - just kind of like quickly blazes through
46:31 - knocking out tickets and stuff I think
46:33 - that era is done and the larger an
46:36 - organization becomes the more
46:37 - complicated a code base becomes the more
46:41 - absolutely non-negotiable testing
46:43 - becomes yeah that's that's true yeah so
46:47 - I I do have some testing related
46:48 - questions that I want to ask uh for a
46:52 - long time uh I think like Google and
46:54 - some other companies would like Pride
46:55 - themselves on like people write their
46:57 - own tests we have like one test engineer
47:00 - per like every 20 feature developers or
47:02 - something like that like what what are
47:04 - your thoughts on that approach and what
47:07 - do you think like a more realistic
47:09 - balance of uh test engineers and feature
47:13 - development Engineers should
47:14 - be so when I first started um
47:19 - blogging I I wrote this um one piece
47:22 - that was kind of controversial um and it
47:27 - was probably the title um that led it
47:30 - but it was like developers should not
47:33 - lead your automation
47:35 - initiatives and even though
47:38 - developers and this is a generalization
47:41 - forgive me but developer even though
47:43 - they hate to write test um they were
47:47 - offended right
47:50 - um like I hate having to go to the get
47:53 - the
47:54 - groceries you know and then my wife's
47:56 - like cool I'll go get the groceries no
47:58 - wait I want to be able to get the
47:59 - groceries even though I hate doing it I
48:01 - don't say that I can't
48:03 - geter yeah exactly so they took it as an
48:06 - affront like we're not good enough at
48:07 - writing tests you're trying to take away
48:09 - our privileges our you know yeah but my
48:13 - my my point there was that um writing
48:18 - tests like is is a discipline um which
48:23 - is one that you need to study like you
48:26 - have to learn like different techniques
48:28 - you have to keep up with them and
48:30 - maintain them you have to write them in
48:32 - a way that will last and stand the test
48:36 - of time right there's a lot that goes
48:39 - into test Automation and it's a craft in
48:41 - and of itself as is software development
48:45 - and so my point there was like you're
48:47 - asking a lot of people when you ask them
48:50 - to um basically like lead both of these
48:54 - initiatives and there's an opportunity
48:56 - CA that comes with that right like I
48:58 - said when I'm in full
49:00 - mode um full developer mode future
49:04 - development I'm I'm not as great um on
49:08 - writing my test as when I'm in like just
49:11 - full test automation mode right um and I
49:15 - don't think it's like a totally
49:16 - different mindset that you find yourself
49:19 - in um when doing either one of these
49:22 - tasks you know what I mean yeah yeah so
49:27 - I mean how many uh like when it when a
49:30 - company says oh we don't have any
49:32 - dedicated QA folks uh we don't have any
49:35 - dedicated test Engineers everybody just
49:36 - writes their own test and it just works
49:38 - like what would generally like at what
49:41 - point do you think a team is large
49:43 - enough or codebase is large enough that
49:44 - they they need to get serious about
49:45 - having dedicated people I think whenever
49:48 - you have multiple features that can
49:51 - integrate with one another right and so
49:54 - if you have like these Standalone
49:55 - features that never talk to each other
49:58 - like okay maybe it is fine like the
50:00 - developer writes their own cuz when a
50:02 - developer writes their own they're like
50:04 - typically writing unit tests that are
50:06 - just for that feature right and so it
50:08 - might be um scoped specifically to just
50:14 - the cart or something like that right
50:16 - like maybe just that API call that sends
50:20 - the the I the item to the card and
50:23 - that's like what that's the extent of
50:25 - what they're focused on
50:27 - versus like a integration scenario that
50:30 - goes all the way through like someone
50:32 - shopping right and going through
50:35 - multiple items and placing these items
50:37 - in the cart and then doing other things
50:39 - within the cart until they get to the
50:41 - part of payment right that's a total
50:44 - flow and if I only was responsible for
50:48 - the button the add button I'm not doing
50:51 - that whole flow in my testing right and
50:53 - the people who were responsible for the
50:55 - other pieces of that flow are only
50:57 - testing their flow so who's testing the
50:59 - integration of these things together no
51:02 - one is unless you bring in a dedicated
51:05 - person to do that sort of thing yeah
51:08 - that makes perfect sense and that's a
51:10 - good way of thinking about it like
51:11 - because developers are mostly focused on
51:13 - developing unit tests for their own code
51:16 - because like like at free code camp we
51:17 - have a policy that you can't check in a
51:18 - poll request without having tests that
51:22 - unit tests for the part of the code that
51:24 - is uh you know affected uh but that says
51:27 - nothing of the integration tests
51:30 - necessary so so how many types of tests
51:32 - are there there's obviously there's unit
51:34 - test integration tests kind of sit on
51:35 - top and Arch between different
51:37 - functionalities uh are there even more
51:40 - types of tests that people should be
51:41 - aware of yeah there's like these kind of
51:44 - in to end tests too that like well like
51:47 - more than just the integration of two or
51:49 - more components but kind of go through a
51:52 - a really big flow um from beginning to
51:55 - end there's like
51:57 - smoke tests that are written to kind of
51:59 - just make sure like your environments
52:01 - and everything is like UPS aart before
52:03 - you get into like real testing um
52:07 - there's performance testing of course
52:10 - like how performant is this and like are
52:13 - we meeting our which are service level
52:16 - agreements there's security testing like
52:18 - can people like hack this H you know
52:21 - like um can they penetrate this right in
52:24 - in a in a malicious way way um there's
52:28 - regression testing so those tests could
52:30 - be like some of your your integration
52:33 - tests as well could fall in that bucket
52:35 - there's lots of different things that
52:38 - like like I'm saying like if I'm just a
52:39 - feature developer I'm not thinking
52:42 - through all of these various concerns
52:44 - you know yeah and you can definitely
52:47 - tell like a developer okay be sure to
52:48 - keep Security in mind be sure to keep
52:50 - you know um all these other different
52:53 - considerations in mind but at the end of
52:55 - the day like like you said they're going
52:57 - to somewhat have tunnel vision and just
52:58 - like I'm trying to get this piece of
52:59 - work done and I can't spend like you
53:02 - know an entire day reflecting on like
53:05 - what if scenarios and stuff like that
53:06 - but that's basically the job of the test
53:09 - engineer is what if you know yeah yeah
53:12 - exactly yeah that's well not only did
53:15 - you work as a test engineer but you've
53:17 - taught a lot of test engineering
53:20 - Concepts over the years and that that
53:23 - brings me to something I want to talk
53:25 - about uh that you've been involved with
53:26 - which is test automation University can
53:29 - you tell us a little bit about that yeah
53:32 - so test automation University um was
53:35 - amazing so this was an initiative I
53:37 - started at um which is an AI uh test
53:42 - automation startup um but like yeah
53:45 - there was like a lot of Education I
53:48 - thought um how to properly test how to
53:51 - come up with test strategies as well as
53:54 - like how to use various tools that are
53:56 - out there in the market and so um we
54:00 - started this initiative there where uh
54:03 - we had community members to create like
54:07 - courses on the things that they were
54:08 - experts about um and I specifically
54:12 - sought out like the best in the business
54:14 - so who is the security testing Guru
54:18 - right who is like the master at
54:21 - performance testing and let's have them
54:23 - to teach a course on this um and offer
54:26 - it all for free and so all of these
54:28 - courses are are freely available still
54:31 - today on test automation.com um and
54:35 - people can basically follow paths or
54:39 - things like this we've seen like
54:41 - companies uh send their teams here if
54:44 - you like don't want to go the route of
54:48 - hiring testers and maybe you do need to
54:50 - educate your developers on like how this
54:52 - stuff actually works this is a resource
54:55 - for them and then if you do have like
54:58 - dedicated testers but they just want to
55:00 - level up or they're considering like
55:02 - switching to a new tool or something
55:04 - like that they found this to be very
55:06 - useful as well yeah I mean this is like
55:09 - a super powerful resarch resource uh
55:13 - that I think everybody should be aware
55:14 - of and I'm going to link to it in the
55:15 - show notes okay but just to verbally
55:18 - describe it for everybody who's
55:19 - listening to the audio version I won't I
55:20 - won't like do a screen share but like
55:23 - there there are so many different paths
55:24 - there's playright for example very
55:26 - popular uh framework uh Cyprus which we
55:30 - use with JavaScript there are um devops
55:33 - testing Pathways that talk about like
55:36 - you know continuous testing and things
55:37 - like that uh they're JavaScript specific
55:41 - Java specific uh there's even like you
55:43 - know a c and Ruby testing path and each
55:46 - of these is like probably like three or
55:48 - four hours some of them are like 12
55:49 - hours uh and this is all free content
55:53 - like free learning resources that you
55:55 - can use if you are just want to expand
55:59 - your skill set as a developer or if you
56:01 - get a job as a test engineer this this
56:04 - seems like an amazing resource so thank
56:05 - you for helping put all these together
56:08 - um yeah yeah like biggest challenges in
56:12 - trying to document all these different
56:14 - practices that you had been using as a
56:16 - test engineer like and then figuring out
56:18 - how to like turn around and teach that
56:21 - were were were there like a lot of
56:22 - instinctual skills that you never really
56:24 - thought about until you had to turn
56:25 - around and teach
56:27 - yeah and and there are some techniques
56:30 - that um so I so I had this experience I
56:33 - worked
56:34 - um at a company called Terra dat and
56:38 - there like this was the sharpest like
56:41 - test automation team I'd ever worked on
56:44 - um it was just like packed with like all
56:47 - stars and so we were you know just kind
56:50 - of learning from one another and had
56:53 - come up with like all of these wonderful
56:55 - techniques
56:57 - um that I thought should be shared to
57:00 - the broader like engineering uh
57:02 - community and so around that time is
57:05 - when I started like writing blog posts
57:08 - and doing conference talks just to share
57:10 - like some of these techniques for
57:12 - example I'll give I'll give you one that
57:15 - is not very uh instinctive it's like
57:18 - okay let's say that you're task to do
57:21 - like some in to end scenario or even
57:24 - just a simple gooey scenario so for
57:26 - example I need to test like that from a
57:30 - shopping cart like that's the test right
57:32 - so there's a lot of setup and stuff that
57:35 - goes into that and these UI tests are
57:38 - notoriously known for being flaky um and
57:42 - because like as you're like automating
57:44 - clicks there's just timing issues
57:46 - there's like all sorts of things that
57:47 - come into play right and so like we
57:50 - started doing different techniques to
57:52 - like streamline this like and focus on
57:55 - what are you testing all you really care
57:58 - about on that UI is if that delete
58:00 - button works so what if you use like API
58:02 - calls for example to get the in the the
58:06 - application in the state that you need
58:08 - it to this is going to speed up your
58:10 - test right it's going to byass all of
58:12 - that searching and clicking around that
58:15 - you're doing to set the test up and then
58:17 - you can just open that window the
58:20 - product is already there you your test
58:22 - clicks the button and you make sure that
58:25 - that's gone boom so that's something
58:27 - that's like pretty straightforward but
58:29 - it's not really intuitive for people who
58:32 - are developing these tests and so like
58:34 - just sharing like those sorts of
58:36 - techniques and things like that um I
58:39 - think has really resonated with people
58:42 - yeah yeah and that's the next thing I
58:44 - want to talk with you about is is just
58:46 - sharing you've been incredibly prolific
58:48 - in terms of creating blog posts um and
58:52 - uh of course like sharing a lot of your
58:54 - thoughts on mentor ship I know that's
58:56 - something near and dear to your heart
58:58 - journey in toward becoming kind of like
59:01 - a developer educator in addition to
59:03 - being a developer and a test engineer
59:06 - and and I I imagine that's ultimately
59:08 - helped lead to your your current role uh
59:11 - your current area of expertise which is
59:13 - developed can you talk about that
59:15 - progression a little bit yeah yeah so
59:17 - okay around that time when I was like
59:20 - yeah I want to share things with people
59:22 - whatever um so I started like writing um
59:26 - um the blog post and I started attending
59:29 - conferences I had a goal to speak at
59:33 - just one conference Quincy and that
59:35 - would like make me really
59:38 - happy and so um I I did the one
59:41 - conference and then I started doing
59:44 - podcasts like these and um and then at
59:48 - some point like I started receiving
59:50 - these invitations to speak at
59:52 - conferences and it it took on a life of
59:55 - its own so at that time um I was working
59:59 - at Lexus these sorts of of like
60:02 - Community engagement I started building
60:05 - like a little name a little brand for
60:07 - myself um and so I was uh hired by
60:12 - Twitter to come and do um test
60:15 - automation there and so it's like oh wow
60:19 - I made it to the big Le you know it's
60:21 - like leaving and then I was living in
60:23 - North Carolina so leaving little North
60:25 - Carolina and I'm headed to to uh Silicon
60:29 - Valley you know with with the big
60:32 - fishing Tech I remember just being so
60:34 - excited about that and so yeah I went to
60:36 - work even more of these like conference
60:39 - engagements started coming up and I went
60:42 - from just doing this speaking to also
60:45 - teaching workshops at these conferences
60:47 - you know like full day workshops on
60:50 - something like if this is before
60:52 - playwright's day but that would be a
60:54 - prime example like everybody wants to
60:56 - learn about playright it's the hot new
60:58 - tool Angie Jones is going to do a
61:00 - workshop oh you know um so um and so
61:05 - yeah I started doing that a lot and it
61:08 - became where I was like on the road
61:11 - probably about 75 80% of the time and
61:15 - that's not my job like my job is
61:18 - literally to do engineering at Twitter
61:21 - and so I would find myself like out of
61:23 - the country like let's say I'm in Europe
61:25 - or or something on a totally different
61:28 - time zone and I'm doing like a full day
61:30 - workshop and then I would have to go
61:32 - back to my hotel room and do like eight
61:35 - hours of my engineering work for Twitter
61:38 - and so I started uh burning out pretty
61:40 - quickly Quincy it's like all right I got
61:43 - to figure something out I was like I
61:45 - really enjoy the teaching um and the
61:49 - speaking aspect but like I don't know
61:51 - how to make money from that right these
61:53 - conferences are in pain like they might
61:57 - a tiet to get the But it right and so I
62:01 - was like I got to figure out how to make
62:03 - money and um I actually met like the CEO
62:08 - or sorry one of the co-founders um of
62:11 - APPL toes while doing like the whole
62:13 - conference circus scene and so we were
62:16 - at dinner once and he was just telling
62:18 - me I was like kind of ranting about like
62:21 - how exhausted I was how to make money
62:25 - from doing this and he told me about
62:27 - developer relations so I didn't even
62:29 - know that that was a thing again with me
62:32 - and like being oblivious to like what's
62:35 - what's available as a career path um so
62:38 - yeah he told me about it and and also
62:41 - said like you know we could use someone
62:43 - like you um at our company like we do
62:47 - test automation it's AI so that's like
62:50 - Cutting Edge Innovation what you like or
62:53 - whatever and so um I made the Le deep
62:56 - into developer relations there yeah and
62:59 - what is developer relations for people
63:01 - who are uninitiated as you
63:04 - were yeah so it's basically um a role
63:09 - where you educate external developers
63:13 - about primarily about like how to use
63:16 - tools that your company makes but it
63:18 - could also be broader as well so for
63:21 - example in that um test automation role
63:24 - at APPL toe so I would talk and teach
63:28 - about like the cool products that they
63:30 - were building but also again about test
63:32 - automation just in general um in
63:35 - practices so it was cool you basically
63:38 - go all around the world your your scope
63:40 - expands from just the four walls that
63:43 - you work in and now you're like
63:46 - basically a part of everyone showing
63:48 - them like new techniques or new features
63:51 - in your favorite products or languages
63:53 - or things like that so yes it's like are
63:57 - talking shop and teaching like other
63:59 - developers about like new and cool
64:01 - things okay that's so I always viewed it
64:06 - as kind of like a hybrid kind of like
64:09 - like developer experience type role
64:12 - where like yes you're a developer and
64:14 - you can potentially turn around and like
64:15 - spec out or even implement but you're
64:17 - like almost the front line in terms of
64:19 - think of the product what kind of
64:21 - questions they have about it where
64:22 - they're having trouble getting things
64:23 - done is that accurate like you're kind
64:26 - of doing a lot of user research yeah
64:28 - you're basically like their contact
64:30 - person right they don't want to go to
64:32 - the help desk or you know do a ticket
64:35 - but like I'mma just ping Angie Jones on
64:38 - Twitter and I'm gonna ask her how how do
64:42 - I do X Y and Z with that product um
64:46 - where she works right and then Angie
64:48 - Jones is GNA respond to you with like
64:50 - probably a gist link with some code in
64:52 - it or something like that right um and
64:55 - so yeah like and you're getting a lot of
64:58 - insight so as these conversations happen
65:01 - more and more you learn some things you
65:04 - see some patterns like dang this is like
65:07 - the fifth person this month who asked me
65:10 - how do I use that feature that mean it's
65:12 - not intuitive and so that's information
65:14 - I can bring back in house and say y'all
65:16 - we got to fix this like no one knows how
65:19 - to how to do this it's not intuitive at
65:21 - all here's some suggestions on a better
65:23 - developer experience right
65:26 - um and I do a lot of that proactively
65:28 - and so I'm very involved in like the
65:31 - design and the development phases of
65:33 - features as well I'm like still today um
65:37 - reviewing pull requests on a daily basis
65:40 - and you know I call things out even
65:43 - before it gets into production like
65:45 - y'all that's not that's not a good name
65:47 - for that feature or that API or like why
65:51 - do I have to like provide so much data
65:53 - could we not like slim this down or you
65:55 - know you know what I mean and so um that
65:57 - that's definitely a part of the the role
65:59 - to advocate for the developers that are
66:01 - going to use your product yeah that's a
66:03 - great way of looking at it like
66:04 - basically you're trying stress free and
66:06 - experienc as possible using your tools
66:09 - because they don't want to be like
66:10 - having to read like tons of
66:12 - documentation to implement something
66:14 - really simple or they don't want to have
66:15 - confusing names or like so much of
66:19 - software development is a communication
66:21 - challenge right it's like figuring out
66:24 - how to
66:25 - get somebody on the same page as you and
66:28 - understand the same Concepts and once
66:29 - you can establish that like pretty much
66:31 - everything can be made
66:33 - simpler to tell you like an anecdote
66:35 - like Steve
66:37 - Jobs was very adamant with his Engineers
66:40 - that the iPhone should only have one
66:42 - button and so many people fought him and
66:45 - pushed back we can't have a phone with
66:46 - one button that's ridiculous we'll never
66:48 - be able to do that and and yet he was
66:51 - like kind of advocating for the typical
66:53 - you know what would ultimately become
66:55 - the master Market iPhone user who didn't
66:57 - want to have a phone with like 50
66:59 - buttons like like a Blackberry or
67:01 - something right they they just wanted a
67:02 - simple device right and uh ultimately
67:06 - the engineers were able to get it done
67:08 - with just one button and then a few
67:10 - years after Steve Jobs's death like they
67:13 - figured out a way to like get it down to
67:14 - like zero buttons essentially where you
67:16 - just swipe and everything's like a
67:19 - about um what you've been doing since
67:21 - then like so you're uh you've risen
67:23 - several positions I don't don't know
67:25 - exactly like what I don't have your
67:27 - LinkedIn right in front of me but you've
67:28 - been promoted a lot over the years and
67:32 - uh what is your work Quincy I do good
67:34 - work what can I say there we go yeah
67:37 - what what is like a typical kind of like
67:40 - week in the life of Angie Jones like
67:43 - like are you do you spend most of your
67:44 - time in New Orleans or are you still
67:45 - traveling a lot I travel a ton um so New
67:49 - Orleans is home which basically might as
67:52 - well be like a vacation spot for me um
67:55 - cuz I'm I'm on the road quite a bit um
67:59 - which is fun I'm not complaining like
68:01 - that's really exciting to be able to
68:04 - like actually go and talk to people and
68:06 - in real life and like you know kind of
68:09 - geek out over software um or whatever
68:12 - but yeah what what I'm doing now um you
68:16 - know like I love working on The Cutting
68:18 - Edge of innovation and so right now I'm
68:21 - working on some Open Standards um that
68:24 - are actually part of
68:26 - w3c w um which is the web 3 what is what
68:31 - is it called the web
68:34 - the Consortium the worldwide web that's
68:38 - why it's three W's world yeah people
68:40 - always think like W3 schools is
68:42 - associated with that it's not it's not
68:44 - an official w3c
68:47 - thing but they chose a name that was
68:49 - like confusing enough and they so a lot
68:51 - of people just thought it was a standard
68:52 - documentation kind of like if if like
68:54 - freeo cam called itself like the the uh
68:58 - Mozilla developer Network or something
68:59 - like mdn uh when it's actually you know
69:02 - that's like yeah anyway okay so yeah
69:05 - some of these standards are around like
69:07 - digital identity and like um credentials
69:11 - and things and so it's really exciting
69:14 - work and it can be applied to so many
69:17 - domains at TBD we are a fintech company
69:21 - um we're part of block and so we're
69:23 - looking at it from like fintech use case
69:27 - like how do I move money across borders
69:30 - because that's super hard Quincy I know
69:32 - you have like a lot of
69:34 - people from like you know Nigeria and
69:37 - other African countries that frequent
69:40 - free Cod Camp so like I went to Nigeria
69:44 - last year and I hired this uh
69:47 - videographer to just kind of follow me
69:49 - around and capture my first time in
69:52 - Nigeria and I sent him the payment um
69:56 - before I even left right and I had to do
69:59 - this with a bank transfer because
70:02 - there's no easy way for me to just like
70:04 - cash app him across borders and so I
70:08 - sent him this wire payment by time I got
70:11 - there he still hadn't received it but he
70:14 - was kind enough to still do the work by
70:17 - time the trip was over he still hadn't
70:19 - received it by the time I got home he
70:20 - still hadn't received it so I'm just
70:22 - like showing him receipts where I swear
70:25 - I paid you or whatever and he's having
70:27 - to take these receipts to his bank and
70:30 - so anyway it's just like super
70:31 - complicated to send money across borders
70:34 - and so we're looking at like um these
70:38 - these new like uh digital standards that
70:43 - allow you to do this um in a
70:45 - frictionless way so that it's easy like
70:48 - that would be very nice if I could just
70:50 - like open VMO and like send send this
70:53 - guy money or whatever and so
70:55 - um like I said these Technologies
70:57 - they're called like um uh verifiable
71:00 - credentials verifiable credentials verif
71:03 - verifiable credentials so um I actually
71:07 - have this talk that I'm touring right
71:09 - now called like how I bought booze with
71:11 - with jots um which are Json web tokens
71:14 - so verifiable credentials are basically
71:17 - just a form of Json web tokens and Json
71:20 - web tokens are using web app development
71:22 - for authentication right so you had like
71:26 - um a server and they might send like
71:29 - this jot um to the client so that the
71:33 - Cent um anytime the user wants to take
71:36 - further actions right and so they don't
71:38 - have to reauthenticate with every action
71:41 - and so what we've done is taken like
71:43 - that same technology the J consists of
71:46 - like a body which is just Json and so
71:49 - it's like hm what else can you can
71:52 - basically represent almost anything and
71:55 - Json format so what about like claims
71:58 - and things like that so for my case my
72:02 - uh Louisiana in case you didn't know
72:04 - Quincy Louisiana is the first uh C the
72:09 - first state in the United States to roll
72:11 - out the mobile driver's license so
72:14 - there's been more States since us but we
72:16 - were the first so with this mobile
72:19 - driver's license I basically have this
72:21 - digital identification that lives in a
72:25 - wallet on my phone and what's cool about
72:28 - this is like it can issue like these
72:31 - jots these tokens these verifiable
72:33 - credentials to other businesses that
72:35 - might need to verify my Identity or like
72:38 - any other information about me so um the
72:41 - scenario that I experienced was like I
72:44 - needed to order wine off like a delivery
72:48 - service app and so I did that and the
72:51 - way that that typically would work is
72:54 - like not the identity part they can't
72:56 - verify my age and then when the driver
72:59 - shows up they have to remember to check
73:03 - my ID right and if they don't then you
73:05 - know they can be legally liable so could
73:08 - the delivery company so so this is a
73:12 - huge burden on like small business
73:14 - owners like bodegas and places like that
73:16 - the fact that they can get like serious
73:17 - funds for SC up and like misreading an
73:20 - ID or forgetting to ask for an ID and
73:21 - yeah like right I just want to emphasize
73:24 - like I I am 100 % in favor of people
73:26 - under 21 not being able to drink alcohol
73:28 - it can interfere with like their mental
73:29 - development and you know their loss of
73:31 - alcohol related accidents and stuff but
73:33 - we need better systems so that like you
73:37 - know people that are working in a
73:38 - comedian store like 12 hours a day don't
73:40 - have to like aren't like potentially
73:43 - going to get become extinct like their
73:45 - business isn't going to go under because
73:46 - they get some massive fine for for
73:49 - getting to like card some undercover cop
73:51 - or something like that right yeah that's
73:53 - right and so
73:55 - um what this does is now allows a wave
73:59 - to basically digitally um share this
74:04 - information and verify it right and so
74:07 - my mobile driver's license app right so
74:12 - that app basically connected with the
74:15 - delivery app before the purchase was
74:18 - question is she over 21 is she of
74:21 - drinking age and my app didn't have to
74:24 - show them my entire ID and say you
74:27 - figure it out for yourself right Bodega
74:30 - person no they were able to say okay
74:34 - yeah I'll issue a jot a verifiable
74:37 - credential that says yes true she's over
74:41 - 21 because that's all the information
74:44 - that you need right and because these
74:46 - jots are basically cryptographically
74:49 - sign like you know they haven't been
74:51 - tampered with you know who was the
74:53 - source of issuing this information and
74:56 - you can just trust
74:58 - government saying that she is over 21
75:01 - and so cool cool so now all of that is
75:04 - done before the purchase is made and now
75:06 - is able to like this that burden is not
75:09 - on like you know the stores or the the
75:12 - poor delivery driver or whatever so
75:14 - that's how um it's being used I'm seeing
75:16 - it across the board Quincy and things
75:19 - like education you should do this Quincy
75:22 - I'm going to work with you offline but
75:24 - um you can issue like these verifiable
75:27 - credentials to like say yes someone has
75:29 - completed a course or they've completed
75:31 - a degree or something like that um
75:34 - people are using them and like uba has
75:38 - basically started using these to allow
75:41 - people to enter the country so you can
75:43 - basically obtain this credential before
75:45 - you even leave the house and you're good
75:47 - to go and it's like really speeding up
75:49 - like um their their lines at the at the
75:53 - airport and stuff and so it's really
75:55 - cool technology I'm having a really good
75:57 - time yeah and just one of the things
75:59 - that that uh I think is very important
76:02 - uh and is perhaps like I hadn't really
76:05 - even thought about this before until I
76:06 - was talking to with one of my security
76:09 - friends and he was telling me like it's
76:11 - ridiculous that you have to show your
76:12 - entire driver's license to anybody like
76:15 - that includes your address it includes
76:18 - your date of birth it includes like so
76:20 - much information that could be used to
76:22 - to gain access to your bank account or
76:24 - if if
76:25 - you know people know where you live they
76:27 - can send armed thugs to your house to
76:28 - like you know take your money or
76:30 - passwords right or something like that
76:32 - right so like I I love the idea of
76:35 - having credentials that just share
76:37 - exactly what is needed and nothing more
76:39 - and nothing more if I authenticate with
76:41 - like an app and I'm like okay I'm and it
76:43 - says Google uh uh Google will give them
76:46 - your email address and nothing else or
76:48 - something like that then I'm like okay
76:50 - cool my email address that's not a big
76:51 - deal but like if they're asking for like
76:53 - 10 different things I can say never mind
76:54 - I don't want to use this app right yeah
76:56 - don't worry about it it's just good data
76:58 - hygiene to not have you know your
77:00 - passport or like like like all this KY
77:03 - like know your customer type stuff
77:05 - anti-money laundering stuff floating
77:07 - around in The Ether right like that's
77:10 - exactly the cases we're working on at
77:12 - TBD so the kyc the anti-money laar like
77:15 - all of these like compliance things you
77:17 - need in order to move money um cool you
77:22 - need them but can we do this in a form
77:25 - that's like privacy preserving and not
77:27 - like just like sharing my info back and
77:30 - forth across the web you know yeah and
77:33 - you earlier you mentioned like the
77:35 - difficulty of sending funds to Nigeria I
77:37 - sent funds you know from Nigeria on our
77:39 - staff uh we also have people in like
77:41 - Kenya Bangladesh places uh that have
77:44 - frankly like less it uh Financial
77:47 - technology infrastructure right like and
77:50 - a lot of that is not because of
77:51 - Technology it's because like government
77:52 - regulations or something like that like
77:54 - it's
77:55 - complicated I have had to use like
77:57 - pretty much every different tool Under
77:59 - the Sun to send funds over the past few
78:01 - years uh you know like there are a lot
78:04 - of people that are you know crypto
78:06 - detractors and I'm not going to say that
78:08 - I'm like a huge crypto time to send
78:10 - funds need to money yeah um and and uh
78:14 - there there have been some really nice
78:16 - Innovations like this tool sendwave
78:18 - works pretty well uh that that's what
78:20 - I've been using for Bangladesh it still
78:22 - works for Bangladesh but it's not
78:23 - working for Nigeria so now we're using
78:25 - USD coin uh to send funds to developers
78:28 - in Nigeria so so like I'm very excited
78:31 - about the work you're doing it's going
78:32 - to make it a lot easier because
78:33 - currently people have to like spend a
78:36 - whole lot of time and energy getting the
78:37 - right bank account and like for whatever
78:39 - reason right now Nigeria uh their
78:41 - currency like locked down and you can't
78:43 - send funds there or like sending funds
78:45 - to Ukraine we have a Dev in Ukraine and
78:48 - I have to send it as multiple
78:50 - transactions because they're like these
78:52 - really low transaction limits and there
78:54 - are so many trans action costs it's
78:56 - ridiculous like Western Union Western
78:58 - Union is great it's like the bank for
79:00 - the unbanked essentially but the
79:03 - transaction fees are absurd when you
79:05 - compare them with like like you and I
79:07 - Angie we live in the United States of
79:09 - America you and I can send ACH back and
79:12 - forth all day long for zero fees like I
79:15 - think taste gives you like a certain
79:17 - amount for free and then you have to
79:18 - start paying but it's like I don't know
79:20 - it's like 25 cents a transaction or
79:21 - something nothing compared to like if
79:23 - you if you try to use use coinbase or if
79:25 - you try to use uh some of these other
79:27 - tools it's exorbitant so yeah that like
79:30 - so security transaction cost and just
79:33 - general availability and not having to
79:35 - wait for days and days and you know I I
79:38 - just feel really bad for your
79:39 - videographer see you already got it
79:41 - that's exactly right so those are the
79:43 - problems that we're looking to solve um
79:46 - with the verifiable credentials as well
79:48 - as the other like fintech open basically
79:51 - like a new open rail for money movement
79:54 - across um border so I'm going to send
79:57 - you some info I'm you can put it in the
79:59 - links but I want absolutely yeah yeah
80:02 - that that's so cool so I want to make
80:05 - sure that we've talked we've been
80:06 - talking for a long time we've covered a
80:08 - lot of ground but I want to make sure
80:09 - that like uh We've cover there are so
80:12 - many different facets to you as a person
80:14 - as a developer as a as a manager um and
80:17 - and just uh I have just a few quick
80:21 - questions first I want to I want to
80:22 - shout out this quote that you have that
80:23 - I think is so uh powerful and that
80:27 - everybody should keep this in mind don't
80:29 - trust a test you've never seen
80:33 - fail yeah yeah like there's so many
80:37 - situations where I forget to go red
80:40 - light oh green light my test fast the
80:43 - first time my must be
80:45 - perfect do you have any like really
80:47 - quick tips for people that are writing
80:49 - tests like don't do this like like uh
80:53 - any horror stories
80:56 - yeah like um I've seen it all pretty
80:59 - much I review a lot of codes I've seen
81:03 - the like true
81:05 - equals you know and things like that and
81:08 - I've seen ones where people are trying
81:10 - to actually test but has broken that and
81:14 - you go and evaluate the test and you
81:16 - realiz oh my God this test is will never
81:19 - fail right because the way that it was
81:22 - designed was not correct and so I always
81:26 - anytime I write a test like yeah I do
81:28 - want to see that green but I don't trust
81:30 - that green until like I then break the
81:33 - feature and I run the test again I say
81:36 - okay now I can try doing this job and I
81:39 - can fix it and and go ahead and submit
81:41 - that test yeah that's awesome and
81:45 - uh as far as like mentoring people and
81:48 - encouraging them to get better at
81:49 - testing like are there any like
81:50 - exercises or anything that you would
81:53 - recommend that people could try at home
81:54 - of course they can check out uh test
81:56 - automation University but like are there
81:59 - any like just general like fun things
82:02 - that you'll do in like a classroom or
82:04 - like a mentorship setting like I know
82:06 - you you Mentor a lot of uh kids um
82:09 - through is it called Diva chicks yeah
82:13 - yeah so like when you Mentor kids like
82:16 - do you have any like creative ways to
82:19 - like get them to like perk up and like
82:21 - become more interested in writing code
82:23 - or even writing test
82:25 - yeah I actually like give for the Cod
82:29 - piece or just like how to Think Through
82:31 - like software right and how software
82:34 - Works um I typically give them some sort
82:36 - of scenario
82:39 - um that used to be like getting money
82:42 - from an ATM but that might be like a
82:44 - little played out now Queen I I haven't
82:47 - used an ATM in like at least a year or
82:50 - two but um like some sort of scenario
82:54 - where they need to think through like a
82:56 - human action right and then equate that
82:59 - to what you know what do you have to
83:01 - tell the computer to do and it's a
83:04 - really good exercise the computer is
83:07 - just as smart as like the instructions
83:10 - that you give it and it's not going to
83:11 - think on your behalf right and so if you
83:14 - don't tell it something very explicitly
83:17 - to do like if this do this otherwise do
83:21 - that it's always just going to do the
83:24 - that right um and so just helping them
83:27 - to see like logical thinking and how to
83:31 - express that in terms that a computer
83:33 - could understand like I think that's
83:34 - really powerful even with like pseudo
83:37 - code right you don't even have to get
83:38 - into the code of it but just the logical
83:40 - thinking behind it so those are the
83:42 - sorts of exercises I love to do with
83:44 - students and nowadays like with the AI
83:47 - hype um there's one great one exercise
83:51 - that I did I really like um I did it
83:53 - with scratch so we don't have to like
83:55 - get into like straight up programming or
83:58 - anything but this was not even just for
83:59 - kids this was for adults too I I took
84:02 - this the conferences Quincy but it was
84:04 - like um basically like you're training
84:07 - uh a AI model um in a certain way but
84:12 - then you ask the AI model to make
84:14 - something and you see that it totally
84:17 - gets it wrong and so you take a step
84:19 - back and say why did that happen and you
84:22 - start evaluating the data that you
84:24 - trained it on and you realized like oh
84:28 - okay that was not great data how can I
84:32 - diversify this data so that it's able to
84:35 - accurately recognize patterns and things
84:38 - like that and then retrain it to do a
84:40 - better job so that's a really good one
84:42 - too um it has a little bit of testing in
84:45 - there awesome and since we're on the
84:47 - topic of AI and like I know you're
84:49 - somebody who's very much like up on like
84:51 - probably the new tools and everything uh
84:54 - I have to ask this to everybody because
84:55 - everybody ask this to me like how do you
84:58 - see AI like sofware development and
85:00 - especially test automation like when I
85:03 - say I'm talking about tools like uh gp4
85:06 - for example um over the next few years
85:08 - like like are there do you do you think
85:10 - it's going to be powerful and and
85:12 - time-saving for test
85:15 - Engineers I do um I do and I think that
85:20 - it'll help like there's a lot of tedious
85:23 - work that goes goes into test automation
85:25 - right um one of them I have like this
85:28 - really great talk that I gave on how do
85:32 - you identify which test you should even
85:34 - automate and that was great for its time
85:38 - and now when I look at AI I'm like well
85:40 - you know to do that is pretty tedious
85:43 - because I walk you through like several
85:45 - things that you should think about and
85:47 - metrics you should collect and stuff
85:49 - like that to determine this this takes a
85:52 - quite a bit of time and effort to do do
85:54 - that and you like realistically probably
85:56 - don't have that time to do on a regular
85:59 - basis and so the things like AI can help
86:01 - with that sort of thing where you
86:03 - describe you know some of what you're
86:05 - building and ask for like scenarios or
86:08 - whatever now I wouldn't trust it 100% to
86:11 - like actually write all of the code and
86:14 - like um and then like we're just good to
86:17 - go or whatever but it it's definitely
86:19 - helpful in getting you started as well
86:22 - as like brainstorming in
86:24 - debugging um when you run into errors
86:27 - and things like that so from a testing
86:30 - standpoint um I going to just say from a
86:33 - software development standpoint like
86:35 - we've utilized it on this last release
86:39 - that we just did quite heavily um and
86:42 - I'll tell you how so we built an SDK in
86:47 - typescript so that was built pretty much
86:49 - you know just straight up Engineers
86:51 - building that then we needed to convert
86:55 - this uh to have also a cotlin SDK we
86:58 - needed um a swift SDK and so it's like
87:02 - oh my gosh so we need all of this within
87:04 - like two months um no one on the team is
87:07 - an expert in those languages and so this
87:10 - was a great exercise where we didn't
87:13 - just give the code base to like chat GPT
87:16 - and say spit it out and Swift or
87:18 - anything like that but like as you are
87:21 - basically like rewriting these features
87:24 - in like take a function and say Here's
87:27 - this function in like uh cotlin how
87:31 - might I be able to do this in Swift and
87:34 - it's been very helpful for that it's not
87:36 - 100% accurate but you can take that you
87:39 - can modify it you can makeing me your
87:41 - codings definitely a lot for us to do I
87:44 - I believe like software developers
87:47 - should be using these tools um as an
87:51 - assistant yeah 100% it sounds like it's
87:54 - really great for porting an SDK like a
87:57 - software development kit I think or is
88:00 - that what for yeah uh like porting it
88:03 - from one programming language to another
88:05 - for example is that I mean that can be a
88:08 - very tedious process like I don't want
88:09 - to have to be like okay let me dust off
88:11 - my my uh you know Swift let me go let me
88:14 - go Lear
88:16 - Swift yeah I mean that's something that
88:18 - that these tools are very good at is it
88:21 - has read every Swift book Under the Sun
88:23 - so here and and it kind of I've already
88:26 - written the logic right and so I can
88:29 - just say I just need this in a different
88:31 - language or where you say I know what I
88:33 - want to say in English can you help me
88:35 - translate this in Spanish and you know
88:38 - whatever you get from there might not be
88:40 - 100% right for that um but for the most
88:45 - part it's pretty good right so yeah I
88:49 - think it's kind of same thing yeah 100%
88:52 - well yeah Angie it's been so awesome
88:55 - catching up with you getting your
88:56 - insights learning more about your own
88:58 - journey into software development and uh
89:01 - I'm so grateful uh that your dad pushed
89:03 - you to pick up computers uh and I mean
89:08 - my goodness like so much has transpired
89:10 - from there I'm so uh you know happy that
89:13 - that Professor encouraged you to switch
89:16 - your major over to computer science and
89:19 - I mean this sound kind of weird but I'm
89:20 - really happy that that manager at IBM
89:23 - told you like hey you're trouble you
89:25 - need to share your opinions for we give
89:27 - him no credit
89:28 - Quincy I won't give him credit but but
89:31 - I'm happy it sounds like it worked out
89:32 - for the better right we may eliminate we
89:35 - may
89:36 - eliminate yeah and uh I just want to
89:39 - encourage everybody like to uh just
89:42 - follow Angie on Twitter she's super
89:44 - active there of course she used to work
89:45 - it at Twitter so it's like social media
89:49 - and is like the water you're swimming
89:51 - practically as you swim from one
89:53 - conference to the other
89:54 - that's right it sounds like uh you're
89:57 - you're going to get a lot of miles this
89:59 - year I hope you uh get you know don't
90:02 - get sick too many times and I hope you
90:04 - don't miss too many flights and
90:05 - everything but uh yeah it's just it's
90:07 - really inspiring to have you in the
90:09 - community just out there getting things
90:11 - done uh sharing your wisdom as you go
90:14 - through blog post through tools like uh
90:16 - test automation University and uh yeah
90:19 - like I I just want to emphasize like we
90:23 - except to have you in the community and
90:25 - uh I hope many people listening to this
90:28 - go on to learn a great deal from you
90:30 - thank you so much for having me Quincy
90:32 - it's a pleasure all right everyone well
90:35 - until next week happy coding

Cleaned transcript:

no one is like handing out these sorts of opportunities out of Charity like they just are not right and so if the seat at its table then that means that you earned it welcome back to the free Cod Camp podcast I'm Quincy Larsson teacher and founder of freecodecamp.org each week we're bringing you Insight from Founders developers and ambitious people getting into Tech this week we're joined by Angie Jones she's a teacher speaker developer and holder of 27 software patents she's also the global vice president of developer relations for TBD which is a financial technology company Angie it's great to have you here thanks Quincy good to be here yeah you're somebody whom I have admired uh for many years and you know you've been involved with the Freo Camp community in the past as well uh we we I think you were at lock lockdown conf back in the day yeah yes that's right yeah when uh the pandemic hit and everybody was first going into lockdown we had this conference and uh yeah it was cool to have you there too so yeah it much overdue like having you here on the freeo cam podcast yeah I'm honored to be here a a huge fan of um of you Quincy as well as free code Camp so the pleasure is all mine awesome well uh thanks for your kind words and uh I'm excited to to dive in we're going to talk a lot about your background we're going to talk a little bit about test automation which is kind of your area of specialization uh before you went into uh developer relations uh and uh we're also going to talk a lot about education and teaching because you are an experienc teacher both at the Collegiate level and through you know educ like instructional design essentially designing these uh awesome learning paths um uh through test automation University so um before we dive into all that though I just want to get a feel for your early days like what where you grew up and what your interests were when you grew up yeah um so I'm born and raised in New Orleans um actually moved back during the pandemic so I'm back home now um early days so I didn't grow up around like computers or like the internet or like anything like that so I wasn't even aware that you know technology was you know an industry that I might be able to work in um upon graduating from high school I knew I wanted to go to college but had I literally had no idea what I wanted to focus on I just really didn't um so I chose business as a major because I figured like that'll give me enough skills to figure it out um once I'm an actual working adult and um my father who was an accountant he recognized that uh technology was becoming this emerging Trend and he recommended did that I take at least one computer class Quincy so he's like you should know how to use the thing because I'm starting to see them you know in in pretty much all Industries and so um me not knowing anything I just kind of looked at the the um the course catalog for anything that looked related to computers and uh I enrolled in a C++ programming course course um I didn't even know what program it was but I enrolled in that course and um I actually like did really well and I I really enjoyed it and and so my professor um at that time recommended that I switch Majors to the rest is history that's awesome so early on it sounds like your dad was pushing you to learn about computer science and then you had uh some additional guidance from a uh from a professor who took an interest in in your future and uh business like in the United States for everybody like in our International audience like 20% or something like 20% of students study business when they go to university just because it's like a general purpose thing that you can study and people who don't know what they're going to study it's very common for people to go into business so uh you're pretty representative like I'm not sure what to study hey making money that sounds good yeah yeah yeah right right right yeah so um that's that's pretty cool so what were your um early experiences like with programming so you're at the you know the college level and you're you're learning C++ I think which is kind of like an Infamous infamously difficult to code in but very important programming language that a lot of uh important applications are written in like do you remember kind of those first few um weeks of just sitting down and trying to get things done yeah I do and um I don't know this might be abnormal and maybe I'm a a weirdo but it was it wasn't scary I mean I didn't know what to be scared of right and so um that's one of the things I was just like super naive and oblivious to it all and so I I wasn't fearful at all um and I think that set me up for Success so I just kind of went in with like this open mindset and no fear and and and just soaked up the knowledge like a sponge but I remember it being appealing to me because um it felt a lot like the challenges and the excitement that I get when I would play games at home like with my family right there's like some sort of challenge you need to kind of put the pieces together um in order to like come up with some sort of solution right right and so that that has always been fun to me and so this kind of felt the same way I remember like getting the program in assignments and like you know maybe they'll be due in like two days so let's say the course was Tuesday and Thursday right so you get it on Tuesday it'll be done by Thursday I remember like let out now mind you this is back in the day so I still don't have a computer or anything like that um as a computer science major but we had a computer lab um I remember like leaving the classroom and running to the computer lab cuz I can't wait till like start working on my homework assignment um and I was sitting there until I like did it and like one take and then we would submit these on like a floppy disc um to to our instructors so yeah those I remember like that that excitement and honestly that excitement hasn't gone away it's been uh decades later at this point point and they'll get joy when when I do get to Cod that's awesome uh I'm thrilled that you still have that that kind of Joy uh I'm sure I'm not pronouncing that word prce word correctly but like when it comes to like being on the computer you just it sounds like it's your happy place yeah I don't do C++ anymore but um yeah um somewhere in those College Years I was introduced to Java and and and I fell in love with that and and and still in love with Java yeah and we're going to talk about your Java relationship your extended uh kind of advocacy of java so not only did you fall in love with Java but you've since been a big advocate for Java a as a developer and uh have have become a known quantity among like Java developers and uh been a big part of the Java ecosystem I want to talk about that but one thing that you did when you were in University is a lot of people they graduate they go into industry immediately you decided to stick around and teach for a while can you talk about that yeah actually I did both so I went um into the industry right after uh undergrad and uh I went to IBM and I worked there as a software engineer and I'm I I have I don't know where I recognize that said I like to teach maybe I would help students or something like that but I mean I didn't have formal um training or anything and teaching right and when I first graduated you know you have all this time on your hands now that you're out of college like work is 9 to 5 where you're used to like going to class from like 9 to 4 and then um and then you would work on homework and all of this and so now all of a sudden I had all of this extra time because I didn't have homework and stuff to do so I remember um signing up to do like online tutoring and I would help uh like high school and college students with uh with math problems or uh computer science problems and I think maybe oh I really like you know helping other people learn and uh teaching and so that's when I went back for my M's in computer science and I did that while working at IBM I did both of those yeah okay awesome and this is great because I wanted to establish like a kind of a timeline uh so you uh worked at IBM and my understanding is that you just started out kind of like doing more software General software development and you were able to specialize on the job and this is something that I often tell people uh don't worry about specialization when you're just learning to code and trying to get your first developer job I often tell people try to get a developer job job and then see where they put you and which direction they push you in and then you can kind of specialize on the job while you're you know making money and not just while you're kind of like working a day job trying to get into Tech like I I I feel like people premature optimize for oh I want to be in security but it's much easier to get into security I guess once you're already a a developer like a general purpose developer right would you would you agree with that sentiment I would but I also think that having like some sort of specialty kind of opened the door for me as well and this was unique try to apply it like across the board but yeah um when I say that I like really love Java like I really love Java and so my Java Professor was um someone he had you know he was he was like this young Professor and he was in love with Java and his passion for it just kind of was contagious but what he did was he's he stayed back during the summer um and did like this Java boot camp for anyone who like really wanted to go into the depths of the language and he did that to prepare us to uh take the job the Java certification so back then that's when sun still owned Java so it was the sun you know Java programmer certification and so I did that um now during this time Java was actually um relatively new and so this is when we started seeing like these big corporations such as IBM begin to adopt Java as like a language of choice and so me this put me in a really um advantageous position where I was able to use that that specialty um um as a weigh in right now that doesn't mean I'm like Java Guru in IBM or whatever but it did hope open the door and you're right I did kind of work as just general purpose software developer and even like as much as I talk about Java right now um I've had to code in various languages throughout my career like right now we're not even using Java in my shop like so it's like JavaScript and um and and Swift and like all of these other languages right um and so I I agree with you that people shouldn't like limit themselves or box themselves into one specific technology um as the one all be all and that's their only shot but like put your eggs in a couple of assets make sure you understand the foundations and can work um in any capacity and and of course you can have your favorites like I do but um don't limit yourself to that right yeah so tell me about like the the first few I guess months at IBM this giant stored American uh Computer Company software company and now doing all kinds of Consulting Services as well but you know just imagine uh like like take us back to what it was like joining you know perhaps the biggest tech company at the time or or one of them I mean this you know this this was like the early 2000s probably 90s I'm I don't want to date you too much early 2000s don't P me that far back quiny um it was it was exciting like I I I I remember feeling like super excited that um and I actually did a couple of internships at IBM as well as Boeing while I was in uh undergrad and so um I was able to kind of get a taste of what life would be like there um and so I knew that it was a super Innovative company and so I was really excited to join there were like lots of smart um who were working on really cool things and so the first couple of years um they were great like I got to learn a lot I got to work with like you know some really brilliant people um but it was also intimidating so you know it was much different than my college environment where we were kind of all learning together and you know remember I talked about how oh there was no fear I didn't know what to be fearful of well that really changed in the workforce when you have like you know these amazing distinguished Engineers just kind of walking down the hallway um and you're like on a team with them and expected to contribute and so I remember um print uh from everyone like you know I'm young I'm I'm a woman of color like I don't know I just felt like I like not a sense of belonging right um and it's not that anyone like made me feel that way it just was a reality of what it was like there there aren't people at the table like me and so it was a bit intimidating and um that actually came back to bite me so um I would be hesitant to like share my ideas uh or speak up in meetings where you know we're brainstorming Solutions because like some of the ideas that I had were like really different than what everyone else was was suggesting and so you know you automatically just assume like oh my idea must be pretty dumb or whatever so I wouldn't speak up and uh I remember I got uh my performance review and it wasn't good and I didn't understand that back then because all you know on time and by deadlines and yet you know there's this bad review that's in it's and I remember that feedback was like it's not about what you do but how you do it and you know you're you're you're you not talking in the meetings you're not engaging with the teams you're not collaborating like those I remember just saying to myself like all right well I guess I have to say my dumb ideas or I'm going to like get fired but at least at least I said something and they won't be able to give me this feedback again and so I started sharing these uh quote unquote dumb ideas and uh people thought they were brilliant actually um and different and Innovative right and so we got to the point where I started patenting these ideas um within IBM and so that was a a a nice lesson for me I'm glad I had it like earlier in my career um so that I could course correct and uh from there I mean now I I if I tell people that I work with this story they probably wouldn't believe it because like I'm always speaking up now and like you know saying when things don't sound like a great idea and when they do you know yeah that's that's a really cool um you you went from to just like not not being so I guess concerned about what other people thought if it sounded like a good idea to yourself maybe there's some Merit there maybe it's worth sharing the idea uh I mean what would you say to somebody else who's coming into a Workforce where they are underrepresented and they may be feeling similar kind of trepidation about sharing their ideas or speaking up because they're like I'm surrounded by all these smart accomplished people like who am I to like have anything to say I would say that um no one is like handing out these sorts of opportunities out of Charity like they just are not right and so if the seat at is table then that means that you earned it and you know um it's warranted and so you're there for a reason and and step into that those shoes and you know um and do what you came to do like when when you went to that job you had ideas of like the impact that you were going to make and when you got there like yeah maybe it doesn't look like what you thought it would look like and maybe there's not people um who are like you in your immediate team but that's okay um you bring a unique perspective and what I've learned is like my differences are my superpowers right and so your cultural upbringing and how you experience life and your outlook on the world may be different and that's that's a great thing that's a great thing yeah awesome uh if you found yourself with a seat at the table you've earned it you earned it I love that because it just kind of gives you that that agency to push forward and it's like you have a mandate to share your thoughts because hey they they gave you the the podium right they gave you the mic like what you gonna do with it that's right yeah awesome well that that's really cool so uh of course you know you've done so much since IBM I do want to progress through that but but it sounds like those first few years at IBM you really found your footing and that this weird kind of out of nowhere uh negative feedback that you received was actually like a profoundly good thing in terms of uh you you know make a Mark um you you said that you started patenting things I do want to ask about that because I don't know anybody who has 27 patents uh I think like there are probably some people in the free C game community and have like one or two patents but like you're like very prolific in getting uh software related you know processes and things like that patented can you just talk a little bit about what that what your first few patents were and like what kind of what that process was like in case anybody has an idea and they're thinking about getting it patented yeah so I remember I was working on a brand new product um it never actually even saw the light of day um but at IBM you know we would we would always work on like really Innovative things and um you know pushing the needle um in regards to software and I had the pleasure like doing my internships to um a distinguished engineer at IBM so that's like one of the top levels you can get to as an engineer um within the company and so I worked with him every day and his work was very different than what I expected um a corporate job to be right and so at that level he wasn't like sitting around and coding all day he was doing a lot of brainstorming and a lot of innovating with other distinguished Engineers like I remember um just frequent meetings and whiteboard sessions and things like that and so I think I picked up a lot um over that summer about problem solving and thinking outside of the box um to come up with like innovative solutions and so I carry that with me um you know throughout my career and I'm always trying to work on like The Cutting Edge of tech because that's that's what excites me right um there's so many problems that are yet to be solved and uh technology is constantly improving and evolving and it's really fun to take like maybe even an old existing solution and apply it to a new problem and see like what comes from that right and so um a lot of my ideas or the the first patents were around like you know software Improvement and so it could be things even tools that I was using so email tools I have a whole bunch of patents and like collaborative software so better ways that email could work better ways that like um chats systems and things like that could work and especially across different systems um I remember when Second Life first came out do you know life is okay who don't know that's a virtual world um they call them metaverses now so Second Life um I remember like as me and like some other folks at my job we would kind of just set you know these lunchtime brainstorming sessions where we you that we're not necessarily working not but like this second life thing was fascinating so like wow I can I can basically have an avatar representation of myself and go like experience a a virtual world while I'm teleporting across this thing and speaking to people like this was before you know like Prime Time social media like before Twitter and like Instagram and stuff like that right so this was like next level where you were talking and and actually engaging with other people um over the internet and if there was like this kind of physical representation to it and so anyway so we went in there and just came up with like all sorts of like ideas and things of things that you can do and so a lot of my patents are in in that area as well um smarter planet was another big initiative at the time and so um thinking about a lot of things to improve like our um our environment like um automated systems and things like that so it's a it's a a great variety um another thing as I started inventing I I started recognizing like when to see problems and how to have like this inventor mindset on how to innovatively solve those problems and so it became a lot more natural to just be in the grocery store I'll tell you a fun one where it's like um you know how you go in the grocery store and and you inadvertently always choose the wrong line to get in right whatever line you choose is going to be the one that's moving the slowest right it's feels that way yeah there's some law to that like somebody should name that so anyway as I like chose the wrong line and I'm standing there there's this situation where like where you become annoyed with something would be a trigger like how would I solve this with technology right and so right then and there you know I came up with an idea of how you might be able to calculate um the weight times in like a queue right um and this could spend like a physical queue or whatever but in the context of the grocery store like so you start thinking like what technologies can I pull in right okay I have a basket of groceries everyone in the line has a basket of groceries can we some kind of way like count how many items are here and like count how many of these are scannable items versus produce or something that they have to punch in we know who's in line as well can we use things like Loyalty cards to um determine like what are they going to do when they get to the register are they going to like go ask for cigarettes and the cashier has to go walk off to go get the cigarettes that holds the lines up um what method of payment are they going to choose like are they going to write a check you know um which takes a lot longer than swiping a card yeah is this a is this a a a coupon queen who's going to pull out like a book of coupons in the line right and you start factoring all of these things in to come up with a calculation so that's one of my uh wow so you have a patent for like a system that like looks at those different factors determines like a weight time so that people I mean I could easily see in the future when like the these kinds of sensors and all this data is pervading like everything that you could basically be walking up and it would just say this line one minute this line this one or just say go over here like really simple like right this one you know and this one once people gets in that line it's just like kind of almost like direct like a police officer directing traffic or something like that yeah that's pretty cool so a lot of your patents are around like pretty abstract thinking like you get annoyed by a problem and then you're like how would we solve this with technology and then that's like kind of is that a common theme through a lot of your patents or um for a lot of them then I would also like targeted towards at some point I started like leading um patent sessions and this is interesting cuz remember I'm still pretty new in so I'm about two or three years into my career at this point a lot of these folks are senior but like I'm collecting these patents like Infinity stuff getting a reputation and respect within the company and so I started leading the uh patent mining sessions like after or right before relase release right and so okay we've done all of this cool work let's sit down and look at what we've done before we actually ship it and determine if there's anything in here that's worth you know um protecting intellectually okay and what is the actual process like if you don't want me diving more into it again I have zero patents so I don't know what what this entails like like what the patent office requires like like the more you can go into detail about the workflow okay I think a lot of people listening would be very interested in this yeah sure okay so um IBM is a big company and so they have like patent attorneys on staff which made life a lot easier so whenever I would have an idea I would just like open Microsoft Word or something like that and just kind of write the idea as if you were writing a blog post right you write what's the problem statement how might you go about solving this the interesting thing about patents is that you don't actually have to go through the trouble of implementing the thing like I didn't have to implement that um checkout calculator but I had to describe it and design it so you think about this almost like um a architecture skill right where you're thinking through the entire system and like what technology could be used to solve that problem and so you need a stepbystep guide on how to do this it can't be abstract but you don't actually have to go through with implementing it so anyway I would do that that in like a Word document and then there um you can submit it so every company I've worked in has had like some sort of patent submission um or patent program right where when people have ideas within the company they can submit it through some form some channel right and um someone will evaluate that and so at IBM you know that it was the same we was submitted and we had a board of um also prolific inventors to evaluate it from technical Merit but there would also be a patent attorney on those meetings as well to evaluate it from a legal standpoint right um and So eventually I even became a part of the these boards where I was evaluating patents across IBM and that was a pretty cool experience so anyway you go and you pitch basically um so they schedule a they review it sometimes if it was something like oh this has already been done they'll just go ahead and like close it out but you know if it sounds interesting enough it's like all right well here's a schedule time and you come and Pitch the idea to this board of inventors and like patent attorneys right so so maybe that's where I got my present if you can like present to folks like that like okay whatever like you can do it anywhere yeah I mean if you add the hourly rates of all the different people in the room when you're talking expensive right yeah so anyway you would have maybe I don't know 15 minutes or something and that includes like pitching the idea and then them like asking you questions about how it would work or any prior art that you found or that they found because if there's any prior art you can't patent it right yeah so um so we would go through that process and it would be like one of three outcomes so one would be uh we don't want to pursue with like our like business um you know realm or maybe it's just not a good idea maybe no nobody would want to license this you know um or it could already have been done or whatever so the three options were to close it meaning okay we're done with this let's act like it never happened um or you could publish it meaning it's not a patent but we'll publish this into the public domain and once it's in the public domain that prevents anybody else from patenting it so it's a way to um say okay yeah we can do it is a cool idea but we don't want to patent it but we don't want anybody else to patent it and we can't do it you know yeah and then the the third outcome is the one you're aiming for and that's the okay let's file let's file a patent application so from there the lawyers would take over they would take your Your Word document that's like a blog post and it's written in human langu language and they would put this into legal Le um and start drawing little you know diagrams and figures and stuff um that the courts would would appreciate and so your idea turns into like your one page idea turns into this 15 page like legal document that they then submit to the patent office um that's pretty expensive to do and so it was great to have a company kind of uh you know foot in the build there um or not so um you pay this fee and then you wait you wait years in fact um before you get a yay or nay on if this will become an actual patent yeah that's so cool so I mean like Einstein worked in a patent office right and his job was to review that you know the legal Lees and everything of these it's interesting like the the inventor's original idea and maybe this wasn't like this back in Einstein's day but uh having like a bunch of very experienced lawyers who basically specialize in creating patent applications submitting them to this US patent office um yeah I it's a really interesting process it must feel really Str originated this idea and be on one end of this giant kind of like uh rub Goldberg machine of like all the different things going on and then out the other side comes you know a patent number hopefully or years later right right yeah but it's so cool I mean it's super cool um I mean some of these ideas like they weren't issued as a patent or granted as a patent until like I was long gone from IBM so like it'll like some might still come through now and it's still like oh wow that's so cool do you have like the pieces of paper like framed anywhere like do they send you anything when they send it yeah so they would they would pay me um um money and then we would also get like um these certificates and when they're granted you would get like the actual patent in like a frame or whatever so I do have a bunch of those yeah that's so cool I'm going to tell a very quick story if anybody's interested in patents uh the water bed you may have heard this before the water bed that was very popular in like the the 70s and 1980s in the United States basically a giant cushion of water that sits on top of like kind of like a box spring type bed uh so you can like kind of like bounce around it's it's really comfortable it's good for your back I guess uh they've fallen out of favor recently but the uh the inventor of the water bed was unable to Pat it because it turned out that Robert heinan yes the the novelist who wrote I think he wrote like a lot of like Starship Troopers and he had described a water bed in extreme detail in one of his books and so the courts rule red or the patent office ruled that that was prior art and that uh it couldn't be patented so essentially what he had done inadvertently was he put the idea of water beds out into the public domain yeah that's right it could be a movie it doesn't have to be real life like even in movies or you know some sort of fictional uh scenario if it's been described and like you didn't come up with the idea like it exists already yeah but then you got things like one click checkout which very obvious uh but they were able to patent that and that was like a you know hundred million doll billion dollar multibillion dollar patent I don't know how many people licensed that from Amazon but but yeah that's cool like that thanks for giving us that quick tour of the process of getting a patent made um and telling us a little bit about what some of your your ideas have been so I want to talk a little bit more about your progression because you didn't say at IBM forever like you've moved on and you done a lot of things uh one of the things that I think was really important for a long period of your life was test Automation and just writing tests essentially doing like quality assurance and and just making sure that the code did what it was supposed to do um can you talk about like your journey into test automation yeah um this one is actually fascinating because um I did a couple of stance in like feature development and then also like in test Automation and test automation sometimes gets like a rep or you know this stigma as if it's like less than you know feature development or whatever but I'll tell you um I really enjoyed my time doing test automation much more than the feature development so for the feature development you know all right I'm giving a ticket like okay you make like a widget or something like that and like the fun is over after that like okay and now it's on to the next ticket whereas with test automation I don't know I just feel personally like it really strengthened my engineering skills um because like it's really hard like you one you write way more code to test something than to actually um especially as you come up with like all the various scenarios to test a specific feature right and so I was coding a lot more um and then I was thinking you know a lot broader so when you're pretty much going to have like the Happy path in mind like what is the what is the use case and that's what you build for with test automation it was like this way to explore all of these various um paths and scenarios and like what happens when the customer does this that and the third or they have this this like kind of oneoff use case or something like that and making sure like the the system was built um to handle that right and so I really developed like this um customer focused approach to development and always just thinking about like who is going to use this and how can I make this like a good experience for them um and how do I like capture all of the various ways that this can go wrong and so when I did build features like I just had that customer Centric mindset right and it made me a much stronger developer because I was no longer only developing for the happy path like I had a gazillion um error cases in mind as well that like oh I better make sure like the code handles this that and the third um and so yeah I just had like a much broader view of how everything operated it's like scope to one feature where when I was in feature development like I don't know it just felt like you this is all I know don't ask me about anything else in the system this is my domain this is what I am the subject matter expert whereas talk test automation you take like this this uh step back and this this uh big picture view of the application and all that you can do with it you know and so um I don't know I just just really I really enjoy that yeah can you maybe we could do like a quick like kind of like role play um like maybe an interaction between uh kind of a a naive feature developer developer I'll play that person uh they're like oh uh May we're just trying to do a very basic like uh ecommerce shopping cart feature okay okay so I'll be like hey Angie uh I finished like my shopping cart feature is perfect uh I don't think there will be any bugs in it or anything here you go uh take a look at the code all right and then now you destroy me right and so I might get in trouble but like I found that a lot of developers like are not really great at testing their code and I can say this because when I do feature development I'm wearing a different hat and I notice I'm not very great at testing my Cod right um because you're you just have Tunnel Vision on making that scenario work so what I know that that developer has done you Quincy you have basically added an item to the cart you say yep it's in there all right I'm good to go right and so what I'm going to do is take that and I'm going to say okay so what happens when like I add another quantity before I add it to the card and then what happens when I add another quantity once it's in the cart and what about subtracting a quantity and what about deleting it from the cart right to read it to the cart when it's already in there right and so my mind just starts going all over the place with various scenarios and then I automate all of these scenarios like with code so that they're repeatable um and like what that does I want to take a moment here because a lot of people don't appreciate this benefit of automated test um it's one yes to make C is okay but more importantly than that is to make sure it stays that way and so with proper test in place you have the the luxury and the comfort of kind of like adding whatever you want and changing the code base in any ways that you want because you have those tests that'll be able to catch if you mess something up if you don't have these repeatable automated tests in place it's much harder to refactor your C code it's much harder to add new features or definitely edit existing features because you don't know if you've broken something right and so gives you like that kind of leeway to be able to really go in and like modify the Cod however you want so it's almost like the the larger a project gets the more things you can realizing it uh and so you end up shipping code that uh is regressive in the sense that yeah you added this tests kind of give you the confidence to push forward with feature development or later complexity will just become too much for one person to hold in their head doesn't matter how familiar you are with a large legy working on it and it's constantly changing so you need to have the confidence that like okay I ran all the tests yeah push this production because we're all we're all greenl right yep and it gives you like a source of Truth as well because like I said you work on one feature then you move on to the next and now it's like two years later and you're like X number of features removed from from this one that you worked on right um and and now like maybe someone asked a question or you want to ask something or like you don't know how this thing was supposed to work like somebody is it supposed to do this or this and you go oh gosh I don't know I don't remember right um you're and let's say you don't have the documentation around like that level of detail well your tests are there to tell you exactly like what was expected and you say oh okay yeah according to the test like it's supposed to do it's also um leave your software in a great state if you moving on to a new team or a new company um people who pick this up have that historical data as well yeah so the tests kind of serve as like a backup form of documentation essentially or in many case probably the only documentation because let's face it a lot of people are they they finish the feature maybe they finish the test hopefully they finish the test and they probably move on and and you know maybe they mention it in some meeting that is lost of time but the tests are still there right almost kind of like comments in a way that like assert that you know if shopping cart you know I'm not sure how you exactly you'd structure it depending on the different tool you're using but like that scenario where I say I'm adding another one of these things to the cart what should happen so someone might say what should happen should we have two of these identical items or should the one item just increase to a quantity of two well I don't know but if we have tests we do know like exactly what's supposed to happen yeah so it's kind kind of the intention of the the consensus of the team that was developing that feature like every designed decision is some sort of tradeoff right like that's right there might be some Corner case where yeah I actually do want to have a second instance of this particular item in here um but often the most sensible thing would be to just have two of the same item and so you have to like figure out you want to do in those scenarios and in a way by writing those tests you're kind of like codifying what should happen that's right right that's exactly right yeah so I'm really excited about testing which like may seem weird thing to like geek out on and get really interested in but I mean compared to you who been writing tests and doing all this stuff but like I am I consider myself someone who very much appreciates test and the roles that they play and I think it's you know the the era of the cowboy coach who doesn't write tests and just kind of like quickly blazes through knocking out tickets and stuff I think that era is done and the larger an organization becomes the more complicated a code base becomes the more absolutely nonnegotiable testing becomes yeah that's that's true yeah so I I do have some testing related questions that I want to ask uh for a long time uh I think like Google and some other companies would like Pride themselves on like people write their own tests we have like one test engineer per like every 20 feature developers or something like that like what what are your thoughts on that approach and what do you think like a more realistic balance of uh test engineers and feature development Engineers should be so when I first started um blogging I I wrote this um one piece that was kind of controversial um and it was probably the title um that led it but it was like developers should not lead your automation initiatives and even though developers and this is a generalization forgive me but developer even though they hate to write test um they were offended right um like I hate having to go to the get the groceries you know and then my wife's like cool I'll go get the groceries no wait I want to be able to get the groceries even though I hate doing it I don't say that I can't geter yeah exactly so they took it as an affront like we're not good enough at writing tests you're trying to take away our privileges our you know yeah but my my my point there was that um writing tests like is is a discipline um which is one that you need to study like you have to learn like different techniques you have to keep up with them and maintain them you have to write them in a way that will last and stand the test of time right there's a lot that goes into test Automation and it's a craft in and of itself as is software development and so my point there was like you're asking a lot of people when you ask them to um basically like lead both of these initiatives and there's an opportunity CA that comes with that right like I said when I'm in full mode um full developer mode future development I'm I'm not as great um on writing my test as when I'm in like just full test automation mode right um and I don't think it's like a totally different mindset that you find yourself in um when doing either one of these tasks you know what I mean yeah yeah so I mean how many uh like when it when a company says oh we don't have any dedicated QA folks uh we don't have any dedicated test Engineers everybody just writes their own test and it just works like what would generally like at what point do you think a team is large enough or codebase is large enough that they they need to get serious about having dedicated people I think whenever you have multiple features that can integrate with one another right and so if you have like these Standalone features that never talk to each other like okay maybe it is fine like the developer writes their own cuz when a developer writes their own they're like typically writing unit tests that are just for that feature right and so it might be um scoped specifically to just the cart or something like that right like maybe just that API call that sends the the I the item to the card and that's like what that's the extent of what they're focused on versus like a integration scenario that goes all the way through like someone shopping right and going through multiple items and placing these items in the cart and then doing other things within the cart until they get to the part of payment right that's a total flow and if I only was responsible for the button the add button I'm not doing that whole flow in my testing right and the people who were responsible for the other pieces of that flow are only testing their flow so who's testing the integration of these things together no one is unless you bring in a dedicated person to do that sort of thing yeah that makes perfect sense and that's a good way of thinking about it like because developers are mostly focused on developing unit tests for their own code because like like at free code camp we have a policy that you can't check in a poll request without having tests that unit tests for the part of the code that is uh you know affected uh but that says nothing of the integration tests necessary so so how many types of tests are there there's obviously there's unit test integration tests kind of sit on top and Arch between different functionalities uh are there even more types of tests that people should be aware of yeah there's like these kind of in to end tests too that like well like more than just the integration of two or more components but kind of go through a a really big flow um from beginning to end there's like smoke tests that are written to kind of just make sure like your environments and everything is like UPS aart before you get into like real testing um there's performance testing of course like how performant is this and like are we meeting our which are service level agreements there's security testing like can people like hack this H you know like um can they penetrate this right in in a in a malicious way way um there's regression testing so those tests could be like some of your your integration tests as well could fall in that bucket there's lots of different things that like like I'm saying like if I'm just a feature developer I'm not thinking through all of these various concerns you know yeah and you can definitely tell like a developer okay be sure to keep Security in mind be sure to keep you know um all these other different considerations in mind but at the end of the day like like you said they're going to somewhat have tunnel vision and just like I'm trying to get this piece of work done and I can't spend like you know an entire day reflecting on like what if scenarios and stuff like that but that's basically the job of the test engineer is what if you know yeah yeah exactly yeah that's well not only did you work as a test engineer but you've taught a lot of test engineering Concepts over the years and that that brings me to something I want to talk about uh that you've been involved with which is test automation University can you tell us a little bit about that yeah so test automation University um was amazing so this was an initiative I started at um which is an AI uh test automation startup um but like yeah there was like a lot of Education I thought um how to properly test how to come up with test strategies as well as like how to use various tools that are out there in the market and so um we started this initiative there where uh we had community members to create like courses on the things that they were experts about um and I specifically sought out like the best in the business so who is the security testing Guru right who is like the master at performance testing and let's have them to teach a course on this um and offer it all for free and so all of these courses are are freely available still today on test automation.com um and people can basically follow paths or things like this we've seen like companies uh send their teams here if you like don't want to go the route of hiring testers and maybe you do need to educate your developers on like how this stuff actually works this is a resource for them and then if you do have like dedicated testers but they just want to level up or they're considering like switching to a new tool or something like that they found this to be very useful as well yeah I mean this is like a super powerful resarch resource uh that I think everybody should be aware of and I'm going to link to it in the show notes okay but just to verbally describe it for everybody who's listening to the audio version I won't I won't like do a screen share but like there there are so many different paths there's playright for example very popular uh framework uh Cyprus which we use with JavaScript there are um devops testing Pathways that talk about like you know continuous testing and things like that uh they're JavaScript specific Java specific uh there's even like you know a c and Ruby testing path and each of these is like probably like three or four hours some of them are like 12 hours uh and this is all free content like free learning resources that you can use if you are just want to expand your skill set as a developer or if you get a job as a test engineer this this seems like an amazing resource so thank you for helping put all these together um yeah yeah like biggest challenges in trying to document all these different practices that you had been using as a test engineer like and then figuring out how to like turn around and teach that were were were there like a lot of instinctual skills that you never really thought about until you had to turn around and teach yeah and and there are some techniques that um so I so I had this experience I worked um at a company called Terra dat and there like this was the sharpest like test automation team I'd ever worked on um it was just like packed with like all stars and so we were you know just kind of learning from one another and had come up with like all of these wonderful techniques um that I thought should be shared to the broader like engineering uh community and so around that time is when I started like writing blog posts and doing conference talks just to share like some of these techniques for example I'll give I'll give you one that is not very uh instinctive it's like okay let's say that you're task to do like some in to end scenario or even just a simple gooey scenario so for example I need to test like that from a shopping cart like that's the test right so there's a lot of setup and stuff that goes into that and these UI tests are notoriously known for being flaky um and because like as you're like automating clicks there's just timing issues there's like all sorts of things that come into play right and so like we started doing different techniques to like streamline this like and focus on what are you testing all you really care about on that UI is if that delete button works so what if you use like API calls for example to get the in the the application in the state that you need it to this is going to speed up your test right it's going to byass all of that searching and clicking around that you're doing to set the test up and then you can just open that window the product is already there you your test clicks the button and you make sure that that's gone boom so that's something that's like pretty straightforward but it's not really intuitive for people who are developing these tests and so like just sharing like those sorts of techniques and things like that um I think has really resonated with people yeah yeah and that's the next thing I want to talk with you about is is just sharing you've been incredibly prolific in terms of creating blog posts um and uh of course like sharing a lot of your thoughts on mentor ship I know that's something near and dear to your heart journey in toward becoming kind of like a developer educator in addition to being a developer and a test engineer and and I I imagine that's ultimately helped lead to your your current role uh your current area of expertise which is developed can you talk about that progression a little bit yeah yeah so okay around that time when I was like yeah I want to share things with people whatever um so I started like writing um um the blog post and I started attending conferences I had a goal to speak at just one conference Quincy and that would like make me really happy and so um I I did the one conference and then I started doing podcasts like these and um and then at some point like I started receiving these invitations to speak at conferences and it it took on a life of its own so at that time um I was working at Lexus these sorts of of like Community engagement I started building like a little name a little brand for myself um and so I was uh hired by Twitter to come and do um test automation there and so it's like oh wow I made it to the big Le you know it's like leaving and then I was living in North Carolina so leaving little North Carolina and I'm headed to to uh Silicon Valley you know with with the big fishing Tech I remember just being so excited about that and so yeah I went to work even more of these like conference engagements started coming up and I went from just doing this speaking to also teaching workshops at these conferences you know like full day workshops on something like if this is before playwright's day but that would be a prime example like everybody wants to learn about playright it's the hot new tool Angie Jones is going to do a workshop oh you know um so um and so yeah I started doing that a lot and it became where I was like on the road probably about 75 80% of the time and that's not my job like my job is literally to do engineering at Twitter and so I would find myself like out of the country like let's say I'm in Europe or or something on a totally different time zone and I'm doing like a full day workshop and then I would have to go back to my hotel room and do like eight hours of my engineering work for Twitter and so I started uh burning out pretty quickly Quincy it's like all right I got to figure something out I was like I really enjoy the teaching um and the speaking aspect but like I don't know how to make money from that right these conferences are in pain like they might a tiet to get the But it right and so I was like I got to figure out how to make money and um I actually met like the CEO or sorry one of the cofounders um of APPL toes while doing like the whole conference circus scene and so we were at dinner once and he was just telling me I was like kind of ranting about like how exhausted I was how to make money from doing this and he told me about developer relations so I didn't even know that that was a thing again with me and like being oblivious to like what's what's available as a career path um so yeah he told me about it and and also said like you know we could use someone like you um at our company like we do test automation it's AI so that's like Cutting Edge Innovation what you like or whatever and so um I made the Le deep into developer relations there yeah and what is developer relations for people who are uninitiated as you were yeah so it's basically um a role where you educate external developers about primarily about like how to use tools that your company makes but it could also be broader as well so for example in that um test automation role at APPL toe so I would talk and teach about like the cool products that they were building but also again about test automation just in general um in practices so it was cool you basically go all around the world your your scope expands from just the four walls that you work in and now you're like basically a part of everyone showing them like new techniques or new features in your favorite products or languages or things like that so yes it's like are talking shop and teaching like other developers about like new and cool things okay that's so I always viewed it as kind of like a hybrid kind of like like developer experience type role where like yes you're a developer and you can potentially turn around and like spec out or even implement but you're like almost the front line in terms of think of the product what kind of questions they have about it where they're having trouble getting things done is that accurate like you're kind of doing a lot of user research yeah you're basically like their contact person right they don't want to go to the help desk or you know do a ticket but like I'mma just ping Angie Jones on Twitter and I'm gonna ask her how how do I do X Y and Z with that product um where she works right and then Angie Jones is GNA respond to you with like probably a gist link with some code in it or something like that right um and so yeah like and you're getting a lot of insight so as these conversations happen more and more you learn some things you see some patterns like dang this is like the fifth person this month who asked me how do I use that feature that mean it's not intuitive and so that's information I can bring back in house and say y'all we got to fix this like no one knows how to how to do this it's not intuitive at all here's some suggestions on a better developer experience right um and I do a lot of that proactively and so I'm very involved in like the design and the development phases of features as well I'm like still today um reviewing pull requests on a daily basis and you know I call things out even before it gets into production like y'all that's not that's not a good name for that feature or that API or like why do I have to like provide so much data could we not like slim this down or you know you know what I mean and so um that that's definitely a part of the the role to advocate for the developers that are going to use your product yeah that's a great way of looking at it like basically you're trying stress free and experienc as possible using your tools because they don't want to be like having to read like tons of documentation to implement something really simple or they don't want to have confusing names or like so much of software development is a communication challenge right it's like figuring out how to get somebody on the same page as you and understand the same Concepts and once you can establish that like pretty much everything can be made simpler to tell you like an anecdote like Steve Jobs was very adamant with his Engineers that the iPhone should only have one button and so many people fought him and pushed back we can't have a phone with one button that's ridiculous we'll never be able to do that and and yet he was like kind of advocating for the typical you know what would ultimately become the master Market iPhone user who didn't want to have a phone with like 50 buttons like like a Blackberry or something right they they just wanted a simple device right and uh ultimately the engineers were able to get it done with just one button and then a few years after Steve Jobs's death like they figured out a way to like get it down to like zero buttons essentially where you just swipe and everything's like a about um what you've been doing since then like so you're uh you've risen several positions I don't don't know exactly like what I don't have your LinkedIn right in front of me but you've been promoted a lot over the years and uh what is your work Quincy I do good work what can I say there we go yeah what what is like a typical kind of like week in the life of Angie Jones like like are you do you spend most of your time in New Orleans or are you still traveling a lot I travel a ton um so New Orleans is home which basically might as well be like a vacation spot for me um cuz I'm I'm on the road quite a bit um which is fun I'm not complaining like that's really exciting to be able to like actually go and talk to people and in real life and like you know kind of geek out over software um or whatever but yeah what what I'm doing now um you know like I love working on The Cutting Edge of innovation and so right now I'm working on some Open Standards um that are actually part of w3c w um which is the web 3 what is what is it called the web the Consortium the worldwide web that's why it's three W's world yeah people always think like W3 schools is associated with that it's not it's not an official w3c thing but they chose a name that was like confusing enough and they so a lot of people just thought it was a standard documentation kind of like if if like freeo cam called itself like the the uh Mozilla developer Network or something like mdn uh when it's actually you know that's like yeah anyway okay so yeah some of these standards are around like digital identity and like um credentials and things and so it's really exciting work and it can be applied to so many domains at TBD we are a fintech company um we're part of block and so we're looking at it from like fintech use case like how do I move money across borders because that's super hard Quincy I know you have like a lot of people from like you know Nigeria and other African countries that frequent free Cod Camp so like I went to Nigeria last year and I hired this uh videographer to just kind of follow me around and capture my first time in Nigeria and I sent him the payment um before I even left right and I had to do this with a bank transfer because there's no easy way for me to just like cash app him across borders and so I sent him this wire payment by time I got there he still hadn't received it but he was kind enough to still do the work by time the trip was over he still hadn't received it by the time I got home he still hadn't received it so I'm just like showing him receipts where I swear I paid you or whatever and he's having to take these receipts to his bank and so anyway it's just like super complicated to send money across borders and so we're looking at like um these these new like uh digital standards that allow you to do this um in a frictionless way so that it's easy like that would be very nice if I could just like open VMO and like send send this guy money or whatever and so um like I said these Technologies they're called like um uh verifiable credentials verifiable credentials verif verifiable credentials so um I actually have this talk that I'm touring right now called like how I bought booze with with jots um which are Json web tokens so verifiable credentials are basically just a form of Json web tokens and Json web tokens are using web app development for authentication right so you had like um a server and they might send like this jot um to the client so that the Cent um anytime the user wants to take further actions right and so they don't have to reauthenticate with every action and so what we've done is taken like that same technology the J consists of like a body which is just Json and so it's like hm what else can you can basically represent almost anything and Json format so what about like claims and things like that so for my case my uh Louisiana in case you didn't know Quincy Louisiana is the first uh C the first state in the United States to roll out the mobile driver's license so there's been more States since us but we were the first so with this mobile driver's license I basically have this digital identification that lives in a wallet on my phone and what's cool about this is like it can issue like these jots these tokens these verifiable credentials to other businesses that might need to verify my Identity or like any other information about me so um the scenario that I experienced was like I needed to order wine off like a delivery service app and so I did that and the way that that typically would work is like not the identity part they can't verify my age and then when the driver shows up they have to remember to check my ID right and if they don't then you know they can be legally liable so could the delivery company so so this is a huge burden on like small business owners like bodegas and places like that the fact that they can get like serious funds for SC up and like misreading an ID or forgetting to ask for an ID and yeah like right I just want to emphasize like I I am 100 % in favor of people under 21 not being able to drink alcohol it can interfere with like their mental development and you know their loss of alcohol related accidents and stuff but we need better systems so that like you know people that are working in a comedian store like 12 hours a day don't have to like aren't like potentially going to get become extinct like their business isn't going to go under because they get some massive fine for for getting to like card some undercover cop or something like that right yeah that's right and so um what this does is now allows a wave to basically digitally um share this information and verify it right and so my mobile driver's license app right so that app basically connected with the delivery app before the purchase was question is she over 21 is she of drinking age and my app didn't have to show them my entire ID and say you figure it out for yourself right Bodega person no they were able to say okay yeah I'll issue a jot a verifiable credential that says yes true she's over 21 because that's all the information that you need right and because these jots are basically cryptographically sign like you know they haven't been tampered with you know who was the source of issuing this information and you can just trust government saying that she is over 21 and so cool cool so now all of that is done before the purchase is made and now is able to like this that burden is not on like you know the stores or the the poor delivery driver or whatever so that's how um it's being used I'm seeing it across the board Quincy and things like education you should do this Quincy I'm going to work with you offline but um you can issue like these verifiable credentials to like say yes someone has completed a course or they've completed a degree or something like that um people are using them and like uba has basically started using these to allow people to enter the country so you can basically obtain this credential before you even leave the house and you're good to go and it's like really speeding up like um their their lines at the at the airport and stuff and so it's really cool technology I'm having a really good time yeah and just one of the things that that uh I think is very important uh and is perhaps like I hadn't really even thought about this before until I was talking to with one of my security friends and he was telling me like it's ridiculous that you have to show your entire driver's license to anybody like that includes your address it includes your date of birth it includes like so much information that could be used to to gain access to your bank account or if if you know people know where you live they can send armed thugs to your house to like you know take your money or passwords right or something like that right so like I I love the idea of having credentials that just share exactly what is needed and nothing more and nothing more if I authenticate with like an app and I'm like okay I'm and it says Google uh uh Google will give them your email address and nothing else or something like that then I'm like okay cool my email address that's not a big deal but like if they're asking for like 10 different things I can say never mind I don't want to use this app right yeah don't worry about it it's just good data hygiene to not have you know your passport or like like like all this KY like know your customer type stuff antimoney laundering stuff floating around in The Ether right like that's exactly the cases we're working on at TBD so the kyc the antimoney laar like all of these like compliance things you need in order to move money um cool you need them but can we do this in a form that's like privacy preserving and not like just like sharing my info back and forth across the web you know yeah and you earlier you mentioned like the difficulty of sending funds to Nigeria I sent funds you know from Nigeria on our staff uh we also have people in like Kenya Bangladesh places uh that have frankly like less it uh Financial technology infrastructure right like and a lot of that is not because of Technology it's because like government regulations or something like that like it's complicated I have had to use like pretty much every different tool Under the Sun to send funds over the past few years uh you know like there are a lot of people that are you know crypto detractors and I'm not going to say that I'm like a huge crypto time to send funds need to money yeah um and and uh there there have been some really nice Innovations like this tool sendwave works pretty well uh that that's what I've been using for Bangladesh it still works for Bangladesh but it's not working for Nigeria so now we're using USD coin uh to send funds to developers in Nigeria so so like I'm very excited about the work you're doing it's going to make it a lot easier because currently people have to like spend a whole lot of time and energy getting the right bank account and like for whatever reason right now Nigeria uh their currency like locked down and you can't send funds there or like sending funds to Ukraine we have a Dev in Ukraine and I have to send it as multiple transactions because they're like these really low transaction limits and there are so many trans action costs it's ridiculous like Western Union Western Union is great it's like the bank for the unbanked essentially but the transaction fees are absurd when you compare them with like like you and I Angie we live in the United States of America you and I can send ACH back and forth all day long for zero fees like I think taste gives you like a certain amount for free and then you have to start paying but it's like I don't know it's like 25 cents a transaction or something nothing compared to like if you if you try to use use coinbase or if you try to use uh some of these other tools it's exorbitant so yeah that like so security transaction cost and just general availability and not having to wait for days and days and you know I I just feel really bad for your videographer see you already got it that's exactly right so those are the problems that we're looking to solve um with the verifiable credentials as well as the other like fintech open basically like a new open rail for money movement across um border so I'm going to send you some info I'm you can put it in the links but I want absolutely yeah yeah that that's so cool so I want to make sure that we've talked we've been talking for a long time we've covered a lot of ground but I want to make sure that like uh We've cover there are so many different facets to you as a person as a developer as a as a manager um and and just uh I have just a few quick questions first I want to I want to shout out this quote that you have that I think is so uh powerful and that everybody should keep this in mind don't trust a test you've never seen fail yeah yeah like there's so many situations where I forget to go red light oh green light my test fast the first time my must be perfect do you have any like really quick tips for people that are writing tests like don't do this like like uh any horror stories yeah like um I've seen it all pretty much I review a lot of codes I've seen the like true equals you know and things like that and I've seen ones where people are trying to actually test but has broken that and you go and evaluate the test and you realiz oh my God this test is will never fail right because the way that it was designed was not correct and so I always anytime I write a test like yeah I do want to see that green but I don't trust that green until like I then break the feature and I run the test again I say okay now I can try doing this job and I can fix it and and go ahead and submit that test yeah that's awesome and uh as far as like mentoring people and encouraging them to get better at testing like are there any like exercises or anything that you would recommend that people could try at home of course they can check out uh test automation University but like are there any like just general like fun things that you'll do in like a classroom or like a mentorship setting like I know you you Mentor a lot of uh kids um through is it called Diva chicks yeah yeah so like when you Mentor kids like do you have any like creative ways to like get them to like perk up and like become more interested in writing code or even writing test yeah I actually like give for the Cod piece or just like how to Think Through like software right and how software Works um I typically give them some sort of scenario um that used to be like getting money from an ATM but that might be like a little played out now Queen I I haven't used an ATM in like at least a year or two but um like some sort of scenario where they need to think through like a human action right and then equate that to what you know what do you have to tell the computer to do and it's a really good exercise the computer is just as smart as like the instructions that you give it and it's not going to think on your behalf right and so if you don't tell it something very explicitly to do like if this do this otherwise do that it's always just going to do the that right um and so just helping them to see like logical thinking and how to express that in terms that a computer could understand like I think that's really powerful even with like pseudo code right you don't even have to get into the code of it but just the logical thinking behind it so those are the sorts of exercises I love to do with students and nowadays like with the AI hype um there's one great one exercise that I did I really like um I did it with scratch so we don't have to like get into like straight up programming or anything but this was not even just for kids this was for adults too I I took this the conferences Quincy but it was like um basically like you're training uh a AI model um in a certain way but then you ask the AI model to make something and you see that it totally gets it wrong and so you take a step back and say why did that happen and you start evaluating the data that you trained it on and you realized like oh okay that was not great data how can I diversify this data so that it's able to accurately recognize patterns and things like that and then retrain it to do a better job so that's a really good one too um it has a little bit of testing in there awesome and since we're on the topic of AI and like I know you're somebody who's very much like up on like probably the new tools and everything uh I have to ask this to everybody because everybody ask this to me like how do you see AI like sofware development and especially test automation like when I say I'm talking about tools like uh gp4 for example um over the next few years like like are there do you do you think it's going to be powerful and and timesaving for test Engineers I do um I do and I think that it'll help like there's a lot of tedious work that goes goes into test automation right um one of them I have like this really great talk that I gave on how do you identify which test you should even automate and that was great for its time and now when I look at AI I'm like well you know to do that is pretty tedious because I walk you through like several things that you should think about and metrics you should collect and stuff like that to determine this this takes a quite a bit of time and effort to do do that and you like realistically probably don't have that time to do on a regular basis and so the things like AI can help with that sort of thing where you describe you know some of what you're building and ask for like scenarios or whatever now I wouldn't trust it 100% to like actually write all of the code and like um and then like we're just good to go or whatever but it it's definitely helpful in getting you started as well as like brainstorming in debugging um when you run into errors and things like that so from a testing standpoint um I going to just say from a software development standpoint like we've utilized it on this last release that we just did quite heavily um and I'll tell you how so we built an SDK in typescript so that was built pretty much you know just straight up Engineers building that then we needed to convert this uh to have also a cotlin SDK we needed um a swift SDK and so it's like oh my gosh so we need all of this within like two months um no one on the team is an expert in those languages and so this was a great exercise where we didn't just give the code base to like chat GPT and say spit it out and Swift or anything like that but like as you are basically like rewriting these features in like take a function and say Here's this function in like uh cotlin how might I be able to do this in Swift and it's been very helpful for that it's not 100% accurate but you can take that you can modify it you can makeing me your codings definitely a lot for us to do I I believe like software developers should be using these tools um as an assistant yeah 100% it sounds like it's really great for porting an SDK like a software development kit I think or is that what for yeah uh like porting it from one programming language to another for example is that I mean that can be a very tedious process like I don't want to have to be like okay let me dust off my my uh you know Swift let me go let me go Lear Swift yeah I mean that's something that that these tools are very good at is it has read every Swift book Under the Sun so here and and it kind of I've already written the logic right and so I can just say I just need this in a different language or where you say I know what I want to say in English can you help me translate this in Spanish and you know whatever you get from there might not be 100% right for that um but for the most part it's pretty good right so yeah I think it's kind of same thing yeah 100% well yeah Angie it's been so awesome catching up with you getting your insights learning more about your own journey into software development and uh I'm so grateful uh that your dad pushed you to pick up computers uh and I mean my goodness like so much has transpired from there I'm so uh you know happy that that Professor encouraged you to switch your major over to computer science and I mean this sound kind of weird but I'm really happy that that manager at IBM told you like hey you're trouble you need to share your opinions for we give him no credit Quincy I won't give him credit but but I'm happy it sounds like it worked out for the better right we may eliminate we may eliminate yeah and uh I just want to encourage everybody like to uh just follow Angie on Twitter she's super active there of course she used to work it at Twitter so it's like social media and is like the water you're swimming practically as you swim from one conference to the other that's right it sounds like uh you're you're going to get a lot of miles this year I hope you uh get you know don't get sick too many times and I hope you don't miss too many flights and everything but uh yeah it's just it's really inspiring to have you in the community just out there getting things done uh sharing your wisdom as you go through blog post through tools like uh test automation University and uh yeah like I I just want to emphasize like we except to have you in the community and uh I hope many people listening to this go on to learn a great deal from you thank you so much for having me Quincy it's a pleasure all right everyone well until next week happy coding
