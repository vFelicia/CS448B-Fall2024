With timestamps:

00:28 - hello everyone and welcome to another
00:30 - episode of project Euler 100 in which
00:34 - we're going over the problems in the
00:37 - project Euler series I think we should
00:41 - call it series right so far we did
00:44 - problems from 1 to 23 and 25 last time
00:49 - we had some issues figuring out how to
00:53 - solve problem 24 which is a bummer but
00:57 - well I looked up some resources and
01:00 - hopefully today we can solve that and
01:03 - move on to the next month
01:06 - hello Laurent and welcome whoops I have
01:10 - drawn over later yeah I did I did have
01:15 - to run on less than T all right if you
01:18 - are in the chat if you support the free
01:21 - code camp community and become a
01:22 - subscriber on YouTube then you will be
01:27 - able to chat and help me figure out the
01:31 - solutions here because some of them will
01:36 - be pretty tough I've looked at the next
01:40 - one 26 and they're not getting easier
01:43 - that they could tell I don't know how
01:46 - long we will be able to go they're
01:50 - getting very mad heavy so yeah we'll see
01:53 - them now for the problem 24 let's go
01:57 - over again what we had to do and then
02:01 - eventually solve it hopefully this time
02:05 - we can like so lexicographic permutation
02:11 - this is a hard word to pronounce a
02:14 - permutation is an ordered arrangement of
02:17 - objects for example three one two four
02:20 - is one possible permutation of the
02:22 - digits 1 2 3 & 4
02:25 - if all of the preparations are listed
02:27 - numerically or alphabetically we call it
02:31 - lexicographic order and the
02:34 - lexicographic permutations of 0 1 & 2
02:38 - are these right you can see there go in
02:42 - order and what we have to do we need to
02:48 - see what is the nth lexicographic
02:52 - permutation of the digits 0 1 2 3 4 up
02:56 - to 9 so for that I think we need to get
03:04 - all the permutations
03:08 - order and that get the end one right
03:13 - okay now last time we looked at one
03:18 - algorithm which well I it's pretty much
03:21 - the same algorithm we have here
03:23 - I found this on Quora thanks to Daniel
03:25 - Shipman
03:26 - he solved this using this algorithm so I
03:30 - took a pic and I think I know now how to
03:34 - do it so basically we have four steps
03:39 - let's first create that array which will
03:43 - be the let's see so we could have an
03:47 - array of arrays
03:49 - or we could have an array of strings I'm
03:52 - thinking which one should be better
03:56 - let's start with an array of arrays so
03:59 - maybe let's see permutations and first
04:04 - one will be 0 1 2 3 let's start with the
04:09 - smaller one and see that we have it
04:12 - correct and afterwards
04:16 - I don't like this for some reason my
04:21 - raver that's Hartley
04:23 - oops I ran it maybe have initial and
04:28 - let's have it as a string
04:32 - I'm think this should okay let's look at
04:35 - the algorithm now so it's all about the
04:39 - indexes inside that array as you can see
04:45 - here we have an array of arrays so
04:47 - inside this array we have indexes index
04:50 - 0 1 2 now they are the same as the
04:52 - numbers we have in the array but they
04:56 - will change so look at what this says
05:00 - find the largest X such that P of X is
05:04 - less than P of X plus 1 if there are no
05:08 - such X then P is the last permutation so
05:12 - we go inside the array and we go over
05:16 - all of them up to the last one and we
05:20 - check is this index P of X is this
05:26 - number let's see less than the next one
05:32 - if it is then we save the index and we
05:35 - go that way does it make sense and I
05:39 - guess it will do when we write a code
05:41 - then the next step will be to find the
05:43 - largest Y so the index such that P of X
05:47 - is less than P of Y then we swap the two
05:53 - elements inside the array and then we
05:55 - reverse from P of X plus 1 up to the end
06:00 - of the array so let's copy this and have
06:04 - it here so we don't change the tab that
06:08 - match so this is 1 then this is 2 this
06:14 - is 3 and this is 4 ok so let's do that
06:20 - what we want to do
06:24 - should we have DeRay initially then push
06:27 - it somewhere I'm thinking
06:33 - okay or we could go over the string
06:40 - yeah let's start with initial to be a
06:42 - string actually zero one two and then
06:46 - permutations and we can even put them
06:51 - inside function here okay
07:00 - yeah I didn't check can you hear me well
07:02 - can you see everything well hopefully
07:06 - okay so we don't have any permutations
07:09 - now
07:16 - let's see how long do we want to do this
07:23 - this is the thing which will stop it
07:26 - right
07:30 - so we get a wild yeah it can do wild my
07:36 - freaking cam platform well complain
07:39 - about this I think there we can even
07:46 - find out how many permutations there
07:48 - might be and we can just loop until we
07:53 - have all the permutations that could be
07:56 - one solution to avoid wild through
07:59 - but yeah let's look for this now okay so
08:02 - one find the largest X such that P of X
08:06 - less than P of X plus one so for that we
08:09 - need a loop I 0 I less than initial I
08:18 - initial this will be changed
08:21 - yeah so let's call it current or array
08:26 - because we're going to work on this
08:28 - array and we're going to swap elements
08:30 - inside it and then we're going to push
08:33 - them here guess we can put the first one
08:38 - and then I'm going to push the next ones
08:41 - all right let's see how this goes
08:43 - so array that flanked minus one so we
08:49 - don't want to go up to this so we want
08:51 - to check this with this and then this
08:54 - one with the last one I plus plus if so
09:01 - we have here find the largest X such
09:03 - that P of X less than P of X plus one
09:06 - if array of I is less than array of I
09:10 - plus 1 then we want to store this index
09:13 - so let's call it with let let's call it
09:17 - X and B minus 1 by default as if we
09:24 - don't find it we will break out of the
09:27 - loop that's the base condition if there
09:29 - is no such X then P is the last
09:32 - fermentation ok and here so if we find
09:37 - this then X will be Y right so it will
09:42 - be the current let's see so find a large
09:45 - sector that yeah so we need that now
09:49 - this is the base so the let's call it
09:53 - the break break condition step one or
10:00 - let's just put one here this will be the
10:05 - break
10:07 - so if X is minus one so we don't find
10:12 - here then we just want to break out of
10:15 - the of the while loop all right if not
10:21 - then we want to go to the step two and
10:24 - here we need to find the largest Y such
10:27 - that P of X less than P of Y so again we
10:32 - need Y which will be minus one for left
10:37 - I is less than zero I I 0 I less than
10:41 - array that length I plus plus we can go
10:46 - up to the end of the right now so now if
10:51 - array of I is less than array of y
11:02 - to store that right
11:05 - yeah so Y will be high let's see so X is
11:13 - y yeah well X is I whites hi
11:16 - good
11:22 - so that should be doing that part and
11:26 - weapon to disappear and for the well the
11:31 - next one we want for three we want to
11:37 - swap the two elements now swapping
11:41 - elements
11:44 - for that if we swap the elements inside
11:47 - this array well first the nudes accounts
11:50 - so we can't really manipulate this array
11:53 - so for that let's create a new array so
11:59 - that new array which will be a copy of
12:02 - the old array right so we copy
12:05 - everything is inside here
12:12 - okay now issue is that I will still need
12:18 - this new array in the next loop so let's
12:21 - just work with this one then we're going
12:24 - to change this array on here okay so we
12:28 - want to swap to them how we're going to
12:30 - swap we need temporary file the
12:34 - temporary variable to store one of the
12:38 - items
12:38 - so maybe array index X then array index
12:42 - X will be array index Y and array index
12:48 - Y will be array will be tapped right so
12:53 - we store X array index X in the temp and
12:56 - we use it then later we swap the two
12:59 - elements here
13:03 - yeah let me write something here find
13:07 - largest largest X large X and next one
13:16 - is fine largest why find largest why
13:20 - okay and then we swap and at the end we
13:24 - want to reverse this array from X plus 1
13:31 - up to the end so how we're going to do
13:35 - that
13:36 - reverse array
13:42 - let's see so we go up to that element
13:45 - would keep it like that then we take the
13:49 - rest of the array and we reverse it and
13:53 - put it back right so array will be
14:00 - arrey slice from zero to X
14:08 - we want to add this oaken cat or we
14:12 - could do something like well spread it
14:17 - inside this new array array dot slice X
14:22 - plus one and reverse so we take the
14:29 - first half we add it inside new array
14:32 - and then the second half from X plus one
14:35 - we reverse and then we add it in this
14:39 - array and now hopefully if we did it
14:42 - right let's add it to the permutations
14:46 - array so permutations that push the
14:51 - array which will basically be the new
14:53 - array in the loop and let's just return
14:56 - the permutation here so we can see them
14:59 - if we cancel that vlog
15:04 - all right let's see zero undefined 2
15:06 - minus 1 1
15:09 - okay that's not good what's happening
15:13 - here
15:14 - so permutations and then we push their
15:19 - way is there something
15:30 - counsel that loud permutations
15:35 - okay that's good I think
15:41 - [Music]
15:42 - we're messing with the array and doesn't
15:47 - like it
15:49 - all right facts yeah but then
15:53 - Oh
15:57 - so when we put here to Ray
16:03 - and we change the array
16:06 - you
16:07 - [Music]
16:10 - also change its place inside this array
16:13 - so let's then do something else let's
16:17 - just join this array I have a string and
16:20 - whenever we push with two just join
16:23 - again
16:27 - are
16:29 - that's that's a start you can see that
16:31 - we kind of have the pattern we just miss
16:33 - something let's see so slice from 0 to X
16:41 - alright and slice from X plus 1
16:48 - and then reverse
16:54 - let's see these two values so we can see
16:57 - exactly what's happening so yes and
17:06 - console o'clock this any obviously
17:11 - that's not - dad
17:16 - I'll put this here actually
17:22 - so 0-2
17:28 - oops let's
17:32 - 0 & 2 mmm that's not what we want X
17:41 - minus 1
17:47 - so in this instance I think so we want
17:51 - to swap these two
17:56 - shouldn't
17:59 - ah
18:03 - this shouldn't be reversed because it's
18:07 - the last one let's see do we have here
18:09 - an example suppose P is this number that
18:14 - represented file starting at the end we
18:16 - see for greater than to the native
18:19 - waited up for the nine greater than
18:21 - eight and finally three less than nine
18:24 - hence our X is five zero one two three
18:28 - four
18:30 - zero one two three four five
18:39 - why is five zero one oh one two three
18:43 - four five it's one it's not zero based
18:49 - I'll do that's why okay
18:52 - then starting from X plus one we can see
18:55 - that
18:59 - 3908
19:02 - three less than four but really created
19:05 - until the last value that was still
19:07 - greater than three was four and its
19:11 - index was I eight one two three four
19:14 - five six seven eight okay so it's one
19:20 - the first slice would just reverse
19:22 - nothing because one item right yeah and
19:25 - we want that
19:29 - one item it shouldn't be reversed
19:35 - swapping py we obtained so we should
19:38 - swap three with four yeah that's what it
19:42 - does for three okay
19:44 - by reversing the part from X plus 1/2
19:46 - then we're going to resolve the
19:47 - permutation so it should swap these yeah
19:55 - I got write logic so this will pose X
20:01 - and we need to swap all these now maybe
20:04 - the slice does here's something we don't
20:06 - want
20:09 - undefined undefined
20:16 - first half second half
20:24 - zero to undefined all right so some
20:28 - things going on there we have undefined
20:31 - at least now we have the correct length
20:34 - I guess
20:40 - console that plug let's see the array we
20:47 - have an undefined there which is not
20:49 - good
20:51 - zero undefined 2 minus 1 1 what is this
21:04 - let's break after one loop
21:07 - you
21:11 - that's definitely not what we want so X
21:16 - is minus one we go from 1 up 2 from 0 up
21:20 - to the right then I minus 1
21:23 - and that's that let's see cuz of that
21:26 - log X logging here X is 1 okay good now
21:32 - why should be 2 so let's see console
21:38 - that log why this should be 2
21:41 - all right that works on the swap the
21:46 - swap is maybe doing something tricky
21:50 - here
21:52 - array of x-ray
21:58 - also the clock temporary okay
22:03 - temporary is an array of one yeah yet
22:08 - then cancel the vlog array of X
22:15 - we're a of X is undefined
22:18 - why
22:23 - arrey of Y is one
22:28 - gets from tap but why it's ray of X
22:31 - undefined
22:40 - one and then afterwards
22:44 - undefined why what's array of why okay
22:56 - array of why
22:59 - very wise and find
23:07 - you
23:11 - also the fog array of y:real why I think
23:17 - here is undefined - but why why is 2 y
23:22 - is minus 1 ok ok ok
23:27 - oh I think I know
23:32 - did console.log why
23:41 - and I can select the value it should be
23:47 - that's where didn't see all right so
23:49 - it's minus one so here we have an issue
23:51 - let's go with that look so find the
23:54 - largest Y such that P of X less than P
23:59 - of Y so P of X
24:03 - [Music]
24:06 - yeah so if P of X less than R a of i-10
24:10 - that's alright cut so that was the case
24:15 - we used the wrong indexes here my bad so
24:23 - now it should let me remove all these
24:27 - consoles oops
24:34 - okay maybe it's the slice now it's wrong
24:40 - we should have let see console that lava
24:42 - right here should be the correct yeah
24:45 - okay good good good good if we remove
24:48 - the break
24:50 - goody-goody almost so then this breaks
24:55 - Americans console that log array again
25:01 - all right so
25:05 - zero-one
25:12 - let me see these again what I'm doing
25:15 - here
25:19 - slice and the reverse and everything and
25:22 - let's see this before we actually do it
25:26 - so many console logs please break here
25:32 - so this is the array this is slice 0 X 0
25:38 - X should be that included 0 2 and then
25:46 - the end would be dead okay so that's and
25:49 - slice goes up to up to but not included
25:55 - so then we go from 0 to X plus 1 which
25:59 - is not included so gets only up to X and
26:02 - then from X plus 1 we go up to the end
26:05 - if you don't specify the second one and
26:07 - goes to the end ok so now this should
26:12 - work
26:14 - let me move the console logs here
26:19 - you'll have one console.log here and one
26:22 - here oh that works alright finally
26:27 - finally finally finally finally after
26:30 - years of work a week we got it so now it
26:37 - should work with zero one two three
26:39 - should work with zero one two three four
26:45 - finally thank you let's see who wrote
26:48 - this although as so we saw this
26:52 - algorithm less than but I didn't know
26:54 - exactly how to take it thank you Michael
26:56 - and thank you daniel shipment for
26:58 - explaining it much better
27:00 - oh he kinda did - think I am doing
27:05 - failed bunch of times and then
27:09 - eventually he got it right
27:11 - alright good so this is it now what we
27:17 - want to do is to put five six seven
27:22 - eight nine let's not
27:28 - console.log so witness not turn the
27:31 - permutations but rather permutations
27:37 - all right that will break let me remove
27:42 - this
27:47 - and it's long so it might break s of
27:52 - permutations of n right we are given the
27:57 - N and we want that
28:00 - although we can do one thing when the
28:05 - permutations has the length M then we
28:07 - can stop let's see will this work
28:10 - properly undefined
28:15 - that's one way
28:19 - rotations are nice yeah let's see will
28:23 - this be too much
28:28 - test timed out oops
28:32 - tests timed out tests timed out
28:38 - if this doesn't work then well
28:42 - I mean it could should work we just need
28:45 - more time it is an M factorial
28:53 - it's just then
28:58 - yes of this let's just do if
29:04 - permutations that length is equal equals
29:08 - 2n
29:10 - right and we just do permutations of n o
29:14 - if then break
29:21 - they should be faster it doesn't go up
29:24 - to the end should return number she
29:26 - returned oh I think it works we just
29:29 - returned our string because we have an
29:33 - array of strings not the number
29:37 - you
29:39 - hey I won't argue
29:50 - should return should
29:53 - to return return
29:57 - to get a number so something is still
29:59 - wrong here
30:02 - all right let's do what we did last time
30:05 - and run this on directing this code so
30:10 - that we can see exactly what's happening
30:12 - although it will take some time so
30:15 - permutations
30:18 - let's open this with vs code
30:31 - and the browser might be
30:33 - and their thing you might fail although
30:38 - it might tempt I'm not okay
30:42 - fermentations I'll just scrape the chess
30:46 - paste this in and
30:49 - [Music]
30:56 - yeah from tier seven Oh equals n plus
31:01 - one because we want from days of of n
31:05 - and permutations of n will be undefined
31:12 - right because it's zero based so here up
31:18 - to n plus one
31:22 - you
31:25 - no no that's what's happening
31:30 - we want to see yeah that when it is
31:34 - returned the number and for 909 we
31:38 - should get it oh yeah so it worked all
31:42 - right I didn't have to run it again that
31:45 - was the issue so we were we wanted
31:47 - permutations of n but we only went up to
31:52 - permutations n minus one because it's
31:55 - zero based all right good what we could
32:03 - put the link here from chora in case
32:06 - someone wants to take a big okay run the
32:11 - tests again
32:17 - it's slow but eventually it works we
32:22 - don't need this anymore so we can close
32:24 - it
32:28 - so
32:31 - is has some issues don't let the curve
32:33 - yeah that's what I want once it works
32:37 - now it might take timeout sometimes
32:40 - depending on
32:43 - yeah let's save these quickly submit and
32:46 - by go to the next one okay so we did
32:51 - this baby thank you in the name of
32:55 - freaky camp for becoming a supporter now
32:57 - you can join chat and help us
33:00 - so all this we finished 25% of 100 I
33:08 - honestly don't know how far I could
33:12 - personally go because they're getting
33:14 - met heavy really really met heavy you'll
33:18 - see the next one I took a look and
33:24 - like this area but it seems expensive
33:26 - yeah
33:29 - you
33:35 - all right so break water break yeah look
33:39 - at this and can't even really this is
33:43 - another map have you won what I'm going
33:45 - to do from now on is if I get stuck for
33:50 - a long time I'm just going to go to the
33:53 - next one maybe we can solve it I don't
33:57 - know if you were in the previous stream
33:59 - but this is what happens so we worked
34:01 - like an hour for this one we couldn't do
34:04 - it and then we solve this in like five
34:06 - minutes so yeah we might skip a few if
34:12 - we don't know we can research and find
34:15 - up ways to do it and we can come back
34:19 - later and solve it or yeah I honestly
34:22 - don't know if I can finish all the 100
34:26 - project if it can then we're going to do
34:29 - something simpler maybe code words or
34:32 - other coding challenges depends on what
34:35 - you want sorry I feel free to let me
34:38 - know okay problem 26 Ritchie Procol
34:43 - cycles hopefully I pronounced this right
34:46 - a unit fraction contains one in the
34:49 - numerator the decimal representation of
34:53 - the unit fractions with denominators two
34:56 - to ten are given so
35:01 - days when you divide one to two we'll
35:05 - get that what's up pop become a member
35:09 - just for you oh thank you you're great
35:13 - yeah we're solving these challenges or
35:15 - at least we're trying alright okay so we
35:20 - get all of this now the parentheses
35:23 - means that that number will repeat the
35:26 - infinite
35:29 - so yeah it's a recurring cycle it can be
35:33 - seen as one over seven has a six digit
35:36 - recurring cycle this one now what we
35:40 - need to do and I honestly don't think I
35:42 - know I don't think you know I don't know
35:47 - find the value of D less than n so we
35:53 - get and here we need to go over all the
35:55 - numbers for which 1 over D contains the
35:59 - longest recurring cycle in its decimal
36:02 - fraction part so in this case the
36:07 - longest recurring cycle is 1 over 7
36:10 - right right because it has 6 digits
36:17 - yeah it looks like fun
36:21 - although how we're going to do this so
36:29 - basically we need to do the division 1
36:35 - over D while going over the numbers so
36:38 - let's do that let I will be to I less
36:42 - than n I plus plus and here we need to
36:47 - do the division so result will be I
36:52 - weight 1 over I or I guess let's call it
36:57 - D so then it will be easier to see so D
37:01 - we start with 2 and we go over that we
37:05 - get the result
37:08 - hairpin welcome so we get the result and
37:14 - now we should look inside the digits and
37:19 - see
37:23 - how many of recurring digits we have
37:27 - any ideas in the chat Lauren leave it
37:32 - upon anyone
37:36 - let's get the result let's see what we
37:39 - have here
37:42 - all right so
37:45 - we get something like this which we
37:50 - might be able to use or not
37:55 - how we're going to find out
37:59 - click the result into an array and then
38:01 - irate at full length
38:06 - I don't know
38:12 - and long division
38:16 - so I keep dividing but then how
38:25 - have a cycle
38:32 - so here we go three then with zero then
38:35 - we see three again we can kind of
38:41 - check these three again so this is the
38:46 - thing how can we find out when we have
38:52 - a recurring cycle
38:55 - look at this 285 whoop seven one four
39:00 - two eight five seven one four you can
39:03 - kind of see visually but for something
39:10 - like this
39:13 - the same number again then the division
39:15 - will give the same result so they cannot
39:18 - repeat
39:23 - okay okay something something I see
39:26 - something there
39:28 - again look at this here we have the 515
39:36 - decks we have that three which will
39:38 - repeat
39:49 - and you know what about
39:52 - this where it will repeat
39:57 - infinite loop we can't find something to
40:00 - be repeated
40:04 - you can see this is repeating one seven
40:10 - eight five seven one four two eight five
40:16 - you
40:18 - eight five seven one four two eight five
40:21 - seven one four two these styles here
40:31 - yeah I don't know
40:35 - sick sick sick sick sick sick so and
40:38 - over
40:44 - yeah I don't know exactly
40:49 - I can find out
40:53 - it can kind of get the digits and maybe
40:55 - using the vision we
40:58 - get it
41:05 - you
41:08 - yeah I don't know maybe we should
41:11 - research this and
41:14 - then come back late yeah let's see what
41:23 - about the next one
41:28 - 26
41:32 - oh this is Tennessee's if you do the
41:35 - long division you multiply by 10 and
41:37 - then and that is your new numerator yeah
41:40 - but when we need to multiply by the the
41:43 - length of the number
41:48 - [Music]
41:50 - so if we have five six seven then we
41:54 - multiply so we get a thousand we divide
41:57 - it in a thousand and
42:03 - - Matti let's go to the next one
42:05 - quadratic primes this doesn't look well
42:09 - night
42:14 - [Music]
42:17 - if the numerator repeats then you are in
42:18 - elope
42:21 - when do you know it repeat
42:23 - Oh
42:27 - [Music]
42:29 - quadratic Prime's Euler discovered the
42:34 - remarkable quadratic formula
42:37 - and squared plus an plus 41 it returns
42:40 - out that the formula will produce 40
42:42 - primes for the consecutive integer
42:45 - values between 0 & 39
42:48 - however when n is 40
42:52 - is divisible 41 and certain one yeah
42:57 - okay so that doesn't work the incredible
43:00 - formula was discovered which produce 80
43:03 - primes for the consecutive values the
43:06 - product of the coefficients
43:10 - - 79 and yeah so methi consider
43:14 - quadratics of the form n square plus a n
43:18 - plus B where modulus of n that's the
43:23 - range and be less than I bet oiler will
43:28 - be terrible parties what else depends on
43:31 - the party it might be a cutting party so
43:34 - then it won't be a genius or a math
43:37 - party
43:44 - and modest modulus yeah good find the
43:48 - product of the coefficients a and B for
43:51 - the quadratic expression that produces
43:52 - the maximum number of prime for
43:53 - consecutive values of n starting with N
43:55 - equals zero
43:58 - oh boy
44:05 - this is not
44:09 - easy again
44:14 - one second
44:26 - you
44:29 - okay
44:31 - [Music]
44:36 - I might expire diagonals
44:41 - starting with the
44:44 - want to move into the right
44:47 - one two three so we kind of did
44:49 - something like this
45:06 - what is the sum of the numbers of
45:08 - diagonals
45:12 - oh so this should be doable
45:17 - finally finally some something doable
45:24 - what I see here
45:29 - is actually not that that so you can see
45:33 - there is a pattern so from in the inner
45:36 - circle we get one three five seven nine
45:42 - then we get plus 4 plus 4 plus 4 plus 4
45:49 - they are all doable yeah but not by
45:55 - spirit what is the sum of the numbers on
45:59 - the diagonals in an N by n spiral formed
46:02 - in the same way and by a what
46:11 - till 100 well so yeah we definitely
46:20 - won't have to draw the well
46:27 - how do you call it the matrix
46:33 - these took you two days
46:36 - have it have video rates far you you did
46:40 - all of them
46:44 - oh that's pretty good if you did then
46:48 - pitch yeah so I kind of see a pattern
46:54 - starts with one the next one are two
46:57 - bigger the next one are four bigger the
46:59 - next ones are probably six bigger so for
47:04 - that they want to just draw well write
47:07 - it 21 22 23 24
47:11 - 25 you got that one the one you
47:15 - mentioned zero seven zero eight zero
47:18 - nine ten nineteen six one two
47:26 - 11:18 five or three twelve whoa eighteen
47:35 - 18 17 16 15 14 13 okay so what's next
47:44 - like that okay so here we go 26 27 28 29
47:53 - thirty
47:57 - let me put some boilerplate here 31 32
48:01 - 33 that for I just want to write them
48:05 - down so that we can probably find a
48:08 - pattern 38 39 for time I mean visually
48:14 - and then we can kind of create some kind
48:17 - of formula 42 43 44 45 46 7 8 & 9 one
48:28 - thing you can notice that are they're
48:29 - all odd numbers okay so as I said these
48:37 - ones are like double plus 2 plus 2 plus
48:42 - 2 plus 2 then plus 4 plus 4 plus 4 plus
48:47 - 4 and if I'm right hopefully the next
48:51 - one should be plus 6 yeah 25 plus 6 plus
48:59 - 6 plus 6 plus 6 all right so then this
49:03 - is not that hard
49:06 - we start with 1 we add 2 4 times with 4
49:10 - 4 then and we just increase the number
49:13 - we adding by 2
49:18 - see that should be I don't have the same
49:21 - where this Zoey's and and the previous
49:23 - one was so hard but maybe for some
49:25 - people it's the other way around
49:27 - all right so let's some will be one let
49:32 - add addition this will be the number one
49:35 - tread and for let's see let 0 I less
49:42 - than n I plus plus so if n is 1 we don't
49:48 - add and it's one we have 1 we have we
49:51 - start with sorry I is zero we don't want
49:55 - to do that with Annies
49:59 - right I'm losing my train of thoughts
50:02 - now so if n is one we yeah I can't get
50:07 - now if n is two we want to start doing
50:10 - the sum plus equals ad like that
50:16 - and we want to do it four times I guess
50:20 - we could do J equals zero J less than
50:26 - four J plus plus and we do that and here
50:31 - at the end we just do ad plus equals two
50:37 - turn the sir
50:40 - as fast cancel that plug
50:48 - that doesn't seem to work
50:53 - what is the sum of the numbers on the
50:55 - diagonals
50:58 - so what happened
51:06 - what time is let's see so for 101
51:16 - Oh
51:19 - so the sum is not that number it's the
51:25 - sum plus the addition so we start with
51:28 - one
51:30 - and then we add 1 plus so some will be
51:36 - ok let me think again so the next number
51:39 - will be 3 so we increased some ok ok
51:44 - let's keep track of the current number
51:47 - number will be 1 the some old number and
51:50 - here the number will be plus equals E
51:55 - and then the sum will be plus equals
52:03 - very close
52:06 - so now it's one then is three then is
52:09 - five seven and nine right
52:13 - let's check cancel that log
52:18 - well first let me just this so we don't
52:21 - get a lot consular lock number okay if
52:26 - we do for three we get three five seven
52:30 - nine twenty five
52:37 - 25
52:41 - why
52:48 - for
52:52 - Oh Oh okay 25 is there okay
52:56 - he's just the return of the Sun here so
52:58 - the Sun is dead all right so now yeah my
53:00 - bad my bad
53:01 - so the next numbers let's see 3 5 7 9 13
53:07 - 17 21 25 the next ones will be
53:14 - 31 37 43 49 cyborgs should start from 1
53:21 - now it is apparently works maybe I just
53:25 - don't need to
53:30 - go up to n
53:34 - okay so it can be verified that as some
53:38 - of the numbers on the diagonals is 101
53:42 - yeah so we have N equals three
53:48 - ok 4 4 will be one yeah
53:53 - we need to go up to n plus one or
53:58 - inconclusive
54:01 - and now if we do three here we should
54:04 - get 101 yes I was going one less than we
54:08 - should have so now this should work we
54:12 - don't need to cancel this we get 101 for
54:16 - 101 we should get that number
54:22 - that's yes now currently we're failing
54:36 - you
54:39 - what is the sum of numbers and diagrams
54:42 - in an N and M spiral formed
54:45 - the second
54:53 - starting with the number one and moving
54:55 - to the right in a clockwise direction
54:58 - five by five spiral is formed but we're
55:03 - not then maybe missing the last round
55:05 - yeah it was initially but wait so this
55:09 - is not three by three this is five by
55:11 - five
55:17 - so
55:21 - we're missing here the ends
55:27 - because for an N of went five by five we
55:32 - get this big number but actually we
55:34 - should only get 101 so maybe minus one
55:44 - we'll work now what for
55:48 - get 10 you get that
55:53 - three by three so this doesn't feel like
55:58 - being right we're going way further
56:11 - mmm
56:15 - and divided by two
56:20 - plus one I really don't know don't ask
56:30 - me why today
56:39 - yeah it works if n is three and you
56:45 - start with I equals two then you have
56:48 - only one look yeah
56:52 - [Music]
56:54 - you know there are two questions the
56:57 - programmer is asking it would it doesn't
57:00 - work
57:00 - why and then the second one is it works
57:03 - why so yeah I figured something
57:13 - somewhere so basically here we have a
57:18 - 5x5 but we only increase one two times
57:23 - right
57:26 - yeah say so we have a 5x5 grade but this
57:31 - goes one and two so then we have
57:38 - five divided by two which is two point
57:42 - five plus one is three point five so we
57:46 - go twice because we all have one in the
57:50 - ice two and then goes for is three
57:55 - yeah I the reason why I used / - in my
57:59 - mind I think so I noticed that it's kind
58:02 - of half so I did / - and then I saw that
58:08 - this number is just a bit smaller than
58:11 - this one and then oh well why not plus
58:13 - one and that worked
58:16 - [Laughter]
58:18 - yeah
58:24 - life of a programmer
58:27 - yeah let's download it this is
58:31 - this is one of a kind
58:39 - let's go to the next one there are so
58:45 - many numbers here again let's see
58:48 - consider so distinct powers consider all
58:51 - all integers combination of a B for to
58:55 - the less than equals a left includes
58:58 - five so a between two and five P between
59:00 - two and five dot a dot these ^ to the
59:07 - power three power four or five if there
59:09 - then sorry so if they are then placed in
59:16 - numerical order with any repeats removed
59:20 - we get the following sequence of 15
59:22 - distinct herbs
59:24 - how many distinct terms are in a
59:27 - sequence generated by a ^ B
59:33 - for to less than so a between two N and
59:38 - B root into a net
59:42 - okay
59:50 - so basically be
59:54 - over this loop twice
59:58 - so from I or we could just a a from 2 to
60:04 - n be from 2 to n we get a to the power
60:08 - of B we get the numbers and then remove
60:13 - the duplicates and we check how many
60:18 - distinct numbers there right I think so
60:25 - let a let's use a this time to a less
60:29 - than equals the end a plus plus 4 let B
60:34 - equals to B s equals death and coups and
60:39 - B plus plus and then we need to do and a
60:48 - result will be mapped up how a ^ b
60:57 - you
60:59 - I'm thinking now we need to put them in
61:01 - an array we could do const array like
61:05 - that and do array that push result and
61:09 - then well we need to filter out the
61:11 - duplicates but let's see what we get
61:13 - here also that flog that we get all
61:21 - these numbers look at that
61:25 - go go go go so many numbers
61:31 - but you want
61:34 - not double gate number so we could
61:36 - convert this to an object and do object
61:44 - of res object of rest to be true and
61:50 - then here we have object which you'll
61:54 - have all the values and they will be
61:56 - unique so we can just do object that
62:02 - keys of object that white
62:10 - that works
62:16 - right so we have all the distinct
62:20 - numbers we put them in the subject and
62:23 - at the end we get the keys the length of
62:25 - the keys
62:28 - alright get this wasn't that part
62:34 - thinking to the ones we skipped don't
62:36 - like that we skipped em but there or so
62:38 - is it there so hard this was easy
62:45 - yeah by the way if you're watching and
62:47 - did you enjoy what you're saying and you
62:49 - want to support me cut camp if you learn
62:51 - don't freak out camp feel free to donate
62:53 - support the nonprofit organization and
62:57 - help others learn how to code for free
63:02 - alright digit and powers surprisingly
63:07 - there are only three numbers that can be
63:09 - written as the sum of four powers of
63:14 - their digit oh that's interesting so if
63:22 - you get a digit to the power of four
63:26 - you get that as one over four is then is
63:31 - not a sum it is oh it's not the sound so
63:35 - it's not included all right the sum of
63:38 - these numbers is that okay find the sum
63:42 - of all the numbers that can be written
63:47 - as the sum of n powers of their digits
63:55 - but
64:00 - days so all the numbers I mean what's
64:06 - the limit all the numbers like a
64:08 - gazillion do we need to go up to this
64:13 - zillion
64:22 - how do we check for that
64:25 - what's this top the breaking point
64:30 - I mean you can see that the power of
64:32 - four you can go up to 9000
64:40 - you
64:43 - any idea so we could simply just well
64:50 - take a number break digits
64:53 - raise them to the power of n and do the
65:01 - sum so that's easy but then what's the
65:06 - stuff so where do we stop how many
65:09 - numbers do we check
65:13 - there must be a way
65:17 - we know that this is the last number
65:26 - you
65:27 - [Music]
65:30 - you
65:32 - there are only three numbers that can be
65:34 - written as a sum of fourth powers of
65:36 - their digit digit
65:40 - these numbers that find the sum of all
65:43 - the numbers that can be written as the
65:45 - sum of em powers of their digits
65:49 - if they would say
65:51 - find the sum of the all the numbers from
65:53 - up to n that can be written then that
65:57 - would have been yeah easy
66:11 - you
66:23 - yeah C sub 1 is too easy the next one is
66:30 - not too easy
66:35 - have no idea where to look what to think
66:38 - to be the stop condition I mean do I go
66:43 - up to 10,000 do I go up to 100,000
66:48 - how can we find out there are no more
66:56 - I mean yeah this is surprising that it's
66:59 - only three because after nine here we go
67:04 - you can go 1-0 when something but yeah
67:08 - but after only three I'll trust them but
67:12 - how do they know did they check like all
67:15 - the numbers in the universe
67:24 - you
67:28 - you
67:30 - no idea honestly don't have any idea how
67:34 - to do that I mean only for passing the
67:38 - test I can kind of see that this goes up
67:42 - to probably 100,000 because we have a
67:45 - sum of numbers which go up too which
67:48 - will result in 443,000 right
67:59 - that won't be a good solution
68:05 - maybe brute force first yeah and have a
68:08 - like Burt stop
68:12 - you
68:19 - so we have zero look at this
68:23 - we have zero numbers which
68:28 - there DG ^ to equal the number
68:36 - zero numbers
68:40 - so then basically
68:46 - when you finish the vailable yeah that
68:50 - old timer
68:51 - thank you for becoming the supporter in
68:55 - the name of Wicca camp thank you very
68:57 - much for supporting the channel and
68:59 - another nonprofit organization
69:04 - yeah let's go to the next one at the end
69:10 - we're going to have like a lot of empty
69:13 - spots here coin sums
69:19 - this looks like a fun thing
69:23 - Koen sums in england the currencies made
69:25 - up of pound and pence and there are
69:29 - eight coins in general circulation 110:1
69:34 - pens to pen isn't finished
69:37 - I don't know in England coins all right
69:43 - it is possible to make two dollars in
69:46 - the following way
69:48 - one pound one times fifty pence
69:55 - all right how how many different ways
69:58 - can n pens be made using any number of
70:02 - points
70:04 - that does this feel like permutations
70:06 - again
70:13 - how many different ways
70:16 - this is definitely an algorithm
70:19 - somewhere
70:23 - I mean you can do okay first you can do
70:26 - it by having so n is 50 right you can do
70:31 - it by having 51 then that's I don't know
70:36 - how to pronounce that sorry and then you
70:40 - can do it by having 48 of one and one of
70:45 - two then you can have it 46 of one and
70:50 - two of to say where I'm going with this
70:53 - then you can have it 45 of one and 105
70:58 - so that's a gazillion this is definitely
71:03 - an algorithm and unfortunately I don't
71:05 - know it so I won't spend a lot of time
71:09 - to to try to get it because I'd have no
71:14 - idea these are getting harder and harder
71:17 - so I don't know
71:23 - I could start to learn about algorithms
71:26 - more in depth but then
71:31 - I need to learn them in a wait so that I
71:34 - could teach it
71:38 - yeah it's come becoming complicated or
71:41 - we could switch we can put project order
71:45 - and pause it's very much happy this is
71:48 - why it's getting harder but I guess
71:52 - that's the idea
71:54 - then digital products we shall say that
71:58 - an end digit number is pandigital if it
72:02 - makes up if it makes use of all the
72:06 - digits 1 to n exactly once for example
72:10 - the five digit number 1 5 2 3 4 is 1
72:14 - through 5 and digital the product 7 2 5
72:20 - 4 in his unit is unusual as the identity
72:25 - 3 9 times 1 8 6 equals the number
72:32 - contains multiple oh boy so fancy words
72:37 - words containing multiplicand
72:41 - multiplicand multiplied and product is 1
72:46 - 2 9 so you basically have all the
72:48 - numbers
72:51 - the sum of all products whose day things
72:55 - can be written as one through nine
72:59 - pen digital hint some products can be
73:02 - obtained in more than one way so be sure
73:05 - to own included ones in your son
73:12 - okay
73:19 - yeah
73:22 - we kind of hit and here
73:26 - Laurent what do you think are they
73:30 - getting harder and harder
73:34 - so we
73:38 - we can go over the numbers and find prod
73:44 - products
73:50 - find the sum of all products whose
73:51 - multiple multiplicand the multiplier
73:54 - product that it can be written as one
73:56 - through nine and we have it here so we
74:00 - basically we can just return that and
74:03 - with that don't do this this is just for
74:09 - fun then this you should fit you should
74:13 - solve it
74:15 - [Music]
74:24 - Guga let's learn together
74:28 - know where to start
74:36 - mazie clay
74:39 - we can get a number which does it have
74:42 - similar digits and then get two more
74:46 - numbers all of those digits should be
74:51 - available from one to nine and then
74:55 - somehow the multiplication of those
74:57 - numbers should end up to the third
75:00 - number
75:05 - all right I don't know
75:09 - keep trying
75:13 - he's this all we could do
75:16 - digit cancelling fraction digit
75:19 - factorials circular primes double bass
75:22 - palindromes strong capable primes
75:29 - numbers numbers numbers powers primes
75:36 - was it the same at the beginning number
75:38 - number yeah that was with numbers but it
75:42 - was like simple
75:46 - 32 is hard yeah
75:50 - aren't they all everything's hard if you
75:55 - don't know what to do let's say that x1
75:58 - fractions
76:01 - again we need to find out everything
76:04 - [Music]
76:06 - exactly for non-trivial examples
76:13 - okay I think I hit my and here digit
76:18 - factorials one four five is a curious
76:22 - number as one factorial 5 4 factorial 5
76:24 - factorial is the number and the numbers
76:27 - and the sum of the numbers which are
76:30 - equal to sum of the factorial of the
76:32 - digits
76:39 - you
76:45 - find the numbers and the sum of the
76:48 - numbers which are equal to the sum of
76:50 - the factors so again going over all the
76:54 - numbers I mean we can see here that we
76:57 - have only two numbers two curious
77:00 - numbers
77:05 - what
77:08 - I could just do it like go up to 100,000
77:11 - right do that find factorials
77:17 - oh let me check something project Euler
77:22 - dotnet I want to see what what they want
77:25 - in this prize what's D requirements for
77:32 - [Music]
77:35 - where is it 34
77:41 - find the server sorry finally some of
77:44 - our numbers which are equal to Samuel
77:45 - factorial of their digit
77:50 - same problem which we had before yeah
78:01 - all right I think I'm going to stop here
78:04 - unfortunately and yeah I don't want to
78:09 - keep you all here to see me not know how
78:12 - to do this and I'm going to look all of
78:16 - them see if we could find if we could
78:20 - solve them or other were other problems
78:24 - and if not we're going to start in
78:26 - another series yeah they are getting
78:33 - harder but oh well we did 27 so let's
78:38 - start
78:39 - someone with more knowledge of
78:41 - algorithms should be able to do more so
78:44 - I encourage you to try and you can rub
78:47 - it on my nose think that's the same
78:50 - right and yeah
78:56 - all right
78:59 - you
79:01 - yeah seem to discard thinker for doing
79:04 - sorry for yeah I don't want to just keep
79:07 - you here watching me fail that art I
79:13 - mean you won't learn much so I will look
79:17 - at them and when I found solutions the
79:23 - way I could probably explain we're going
79:25 - to get back and continue this thank you
79:29 - for watching thank you for being part I
79:31 - think this was the fifth or the sixth so
79:35 - we had a good run maybe one day we can
79:38 - continue but we need to learn so let's
79:42 - that NSE you the next step
79:44 - bye

Cleaned transcript:

hello everyone and welcome to another episode of project Euler 100 in which we're going over the problems in the project Euler series I think we should call it series right so far we did problems from 1 to 23 and 25 last time we had some issues figuring out how to solve problem 24 which is a bummer but well I looked up some resources and hopefully today we can solve that and move on to the next month hello Laurent and welcome whoops I have drawn over later yeah I did I did have to run on less than T all right if you are in the chat if you support the free code camp community and become a subscriber on YouTube then you will be able to chat and help me figure out the solutions here because some of them will be pretty tough I've looked at the next one 26 and they're not getting easier that they could tell I don't know how long we will be able to go they're getting very mad heavy so yeah we'll see them now for the problem 24 let's go over again what we had to do and then eventually solve it hopefully this time we can like so lexicographic permutation this is a hard word to pronounce a permutation is an ordered arrangement of objects for example three one two four is one possible permutation of the digits 1 2 3 & 4 if all of the preparations are listed numerically or alphabetically we call it lexicographic order and the lexicographic permutations of 0 1 & 2 are these right you can see there go in order and what we have to do we need to see what is the nth lexicographic permutation of the digits 0 1 2 3 4 up to 9 so for that I think we need to get all the permutations order and that get the end one right okay now last time we looked at one algorithm which well I it's pretty much the same algorithm we have here I found this on Quora thanks to Daniel Shipman he solved this using this algorithm so I took a pic and I think I know now how to do it so basically we have four steps let's first create that array which will be the let's see so we could have an array of arrays or we could have an array of strings I'm thinking which one should be better let's start with an array of arrays so maybe let's see permutations and first one will be 0 1 2 3 let's start with the smaller one and see that we have it correct and afterwards I don't like this for some reason my raver that's Hartley oops I ran it maybe have initial and let's have it as a string I'm think this should okay let's look at the algorithm now so it's all about the indexes inside that array as you can see here we have an array of arrays so inside this array we have indexes index 0 1 2 now they are the same as the numbers we have in the array but they will change so look at what this says find the largest X such that P of X is less than P of X plus 1 if there are no such X then P is the last permutation so we go inside the array and we go over all of them up to the last one and we check is this index P of X is this number let's see less than the next one if it is then we save the index and we go that way does it make sense and I guess it will do when we write a code then the next step will be to find the largest Y so the index such that P of X is less than P of Y then we swap the two elements inside the array and then we reverse from P of X plus 1 up to the end of the array so let's copy this and have it here so we don't change the tab that match so this is 1 then this is 2 this is 3 and this is 4 ok so let's do that what we want to do should we have DeRay initially then push it somewhere I'm thinking okay or we could go over the string yeah let's start with initial to be a string actually zero one two and then permutations and we can even put them inside function here okay yeah I didn't check can you hear me well can you see everything well hopefully okay so we don't have any permutations now let's see how long do we want to do this this is the thing which will stop it right so we get a wild yeah it can do wild my freaking cam platform well complain about this I think there we can even find out how many permutations there might be and we can just loop until we have all the permutations that could be one solution to avoid wild through but yeah let's look for this now okay so one find the largest X such that P of X less than P of X plus one so for that we need a loop I 0 I less than initial I initial this will be changed yeah so let's call it current or array because we're going to work on this array and we're going to swap elements inside it and then we're going to push them here guess we can put the first one and then I'm going to push the next ones all right let's see how this goes so array that flanked minus one so we don't want to go up to this so we want to check this with this and then this one with the last one I plus plus if so we have here find the largest X such that P of X less than P of X plus one if array of I is less than array of I plus 1 then we want to store this index so let's call it with let let's call it X and B minus 1 by default as if we don't find it we will break out of the loop that's the base condition if there is no such X then P is the last fermentation ok and here so if we find this then X will be Y right so it will be the current let's see so find a large sector that yeah so we need that now this is the base so the let's call it the break break condition step one or let's just put one here this will be the break so if X is minus one so we don't find here then we just want to break out of the of the while loop all right if not then we want to go to the step two and here we need to find the largest Y such that P of X less than P of Y so again we need Y which will be minus one for left I is less than zero I I 0 I less than array that length I plus plus we can go up to the end of the right now so now if array of I is less than array of y to store that right yeah so Y will be high let's see so X is y yeah well X is I whites hi good so that should be doing that part and weapon to disappear and for the well the next one we want for three we want to swap the two elements now swapping elements for that if we swap the elements inside this array well first the nudes accounts so we can't really manipulate this array so for that let's create a new array so that new array which will be a copy of the old array right so we copy everything is inside here okay now issue is that I will still need this new array in the next loop so let's just work with this one then we're going to change this array on here okay so we want to swap to them how we're going to swap we need temporary file the temporary variable to store one of the items so maybe array index X then array index X will be array index Y and array index Y will be array will be tapped right so we store X array index X in the temp and we use it then later we swap the two elements here yeah let me write something here find largest largest X large X and next one is fine largest why find largest why okay and then we swap and at the end we want to reverse this array from X plus 1 up to the end so how we're going to do that reverse array let's see so we go up to that element would keep it like that then we take the rest of the array and we reverse it and put it back right so array will be arrey slice from zero to X we want to add this oaken cat or we could do something like well spread it inside this new array array dot slice X plus one and reverse so we take the first half we add it inside new array and then the second half from X plus one we reverse and then we add it in this array and now hopefully if we did it right let's add it to the permutations array so permutations that push the array which will basically be the new array in the loop and let's just return the permutation here so we can see them if we cancel that vlog all right let's see zero undefined 2 minus 1 1 okay that's not good what's happening here so permutations and then we push their way is there something counsel that loud permutations okay that's good I think we're messing with the array and doesn't like it all right facts yeah but then Oh so when we put here to Ray and we change the array you also change its place inside this array so let's then do something else let's just join this array I have a string and whenever we push with two just join again are that's that's a start you can see that we kind of have the pattern we just miss something let's see so slice from 0 to X alright and slice from X plus 1 and then reverse let's see these two values so we can see exactly what's happening so yes and console o'clock this any obviously that's not dad I'll put this here actually so 02 oops let's 0 & 2 mmm that's not what we want X minus 1 so in this instance I think so we want to swap these two shouldn't ah this shouldn't be reversed because it's the last one let's see do we have here an example suppose P is this number that represented file starting at the end we see for greater than to the native waited up for the nine greater than eight and finally three less than nine hence our X is five zero one two three four zero one two three four five why is five zero one oh one two three four five it's one it's not zero based I'll do that's why okay then starting from X plus one we can see that 3908 three less than four but really created until the last value that was still greater than three was four and its index was I eight one two three four five six seven eight okay so it's one the first slice would just reverse nothing because one item right yeah and we want that one item it shouldn't be reversed swapping py we obtained so we should swap three with four yeah that's what it does for three okay by reversing the part from X plus 1/2 then we're going to resolve the permutation so it should swap these yeah I got write logic so this will pose X and we need to swap all these now maybe the slice does here's something we don't want undefined undefined first half second half zero to undefined all right so some things going on there we have undefined at least now we have the correct length I guess console that plug let's see the array we have an undefined there which is not good zero undefined 2 minus 1 1 what is this let's break after one loop you that's definitely not what we want so X is minus one we go from 1 up 2 from 0 up to the right then I minus 1 and that's that let's see cuz of that log X logging here X is 1 okay good now why should be 2 so let's see console that log why this should be 2 all right that works on the swap the swap is maybe doing something tricky here array of xray also the clock temporary okay temporary is an array of one yeah yet then cancel the vlog array of X we're a of X is undefined why arrey of Y is one gets from tap but why it's ray of X undefined one and then afterwards undefined why what's array of why okay array of why very wise and find you also the fog array of yreal why I think here is undefined but why why is 2 y is minus 1 ok ok ok oh I think I know did console.log why and I can select the value it should be that's where didn't see all right so it's minus one so here we have an issue let's go with that look so find the largest Y such that P of X less than P of Y so P of X yeah so if P of X less than R a of i10 that's alright cut so that was the case we used the wrong indexes here my bad so now it should let me remove all these consoles oops okay maybe it's the slice now it's wrong we should have let see console that lava right here should be the correct yeah okay good good good good if we remove the break goodygoody almost so then this breaks Americans console that log array again all right so zeroone let me see these again what I'm doing here slice and the reverse and everything and let's see this before we actually do it so many console logs please break here so this is the array this is slice 0 X 0 X should be that included 0 2 and then the end would be dead okay so that's and slice goes up to up to but not included so then we go from 0 to X plus 1 which is not included so gets only up to X and then from X plus 1 we go up to the end if you don't specify the second one and goes to the end ok so now this should work let me move the console logs here you'll have one console.log here and one here oh that works alright finally finally finally finally finally after years of work a week we got it so now it should work with zero one two three should work with zero one two three four finally thank you let's see who wrote this although as so we saw this algorithm less than but I didn't know exactly how to take it thank you Michael and thank you daniel shipment for explaining it much better oh he kinda did think I am doing failed bunch of times and then eventually he got it right alright good so this is it now what we want to do is to put five six seven eight nine let's not console.log so witness not turn the permutations but rather permutations all right that will break let me remove this and it's long so it might break s of permutations of n right we are given the N and we want that although we can do one thing when the permutations has the length M then we can stop let's see will this work properly undefined that's one way rotations are nice yeah let's see will this be too much test timed out oops tests timed out tests timed out if this doesn't work then well I mean it could should work we just need more time it is an M factorial it's just then yes of this let's just do if permutations that length is equal equals 2n right and we just do permutations of n o if then break they should be faster it doesn't go up to the end should return number she returned oh I think it works we just returned our string because we have an array of strings not the number you hey I won't argue should return should to return return to get a number so something is still wrong here all right let's do what we did last time and run this on directing this code so that we can see exactly what's happening although it will take some time so permutations let's open this with vs code and the browser might be and their thing you might fail although it might tempt I'm not okay fermentations I'll just scrape the chess paste this in and yeah from tier seven Oh equals n plus one because we want from days of of n and permutations of n will be undefined right because it's zero based so here up to n plus one you no no that's what's happening we want to see yeah that when it is returned the number and for 909 we should get it oh yeah so it worked all right I didn't have to run it again that was the issue so we were we wanted permutations of n but we only went up to permutations n minus one because it's zero based all right good what we could put the link here from chora in case someone wants to take a big okay run the tests again it's slow but eventually it works we don't need this anymore so we can close it so is has some issues don't let the curve yeah that's what I want once it works now it might take timeout sometimes depending on yeah let's save these quickly submit and by go to the next one okay so we did this baby thank you in the name of freaky camp for becoming a supporter now you can join chat and help us so all this we finished 25% of 100 I honestly don't know how far I could personally go because they're getting met heavy really really met heavy you'll see the next one I took a look and like this area but it seems expensive yeah you all right so break water break yeah look at this and can't even really this is another map have you won what I'm going to do from now on is if I get stuck for a long time I'm just going to go to the next one maybe we can solve it I don't know if you were in the previous stream but this is what happens so we worked like an hour for this one we couldn't do it and then we solve this in like five minutes so yeah we might skip a few if we don't know we can research and find up ways to do it and we can come back later and solve it or yeah I honestly don't know if I can finish all the 100 project if it can then we're going to do something simpler maybe code words or other coding challenges depends on what you want sorry I feel free to let me know okay problem 26 Ritchie Procol cycles hopefully I pronounced this right a unit fraction contains one in the numerator the decimal representation of the unit fractions with denominators two to ten are given so days when you divide one to two we'll get that what's up pop become a member just for you oh thank you you're great yeah we're solving these challenges or at least we're trying alright okay so we get all of this now the parentheses means that that number will repeat the infinite so yeah it's a recurring cycle it can be seen as one over seven has a six digit recurring cycle this one now what we need to do and I honestly don't think I know I don't think you know I don't know find the value of D less than n so we get and here we need to go over all the numbers for which 1 over D contains the longest recurring cycle in its decimal fraction part so in this case the longest recurring cycle is 1 over 7 right right because it has 6 digits yeah it looks like fun although how we're going to do this so basically we need to do the division 1 over D while going over the numbers so let's do that let I will be to I less than n I plus plus and here we need to do the division so result will be I weight 1 over I or I guess let's call it D so then it will be easier to see so D we start with 2 and we go over that we get the result hairpin welcome so we get the result and now we should look inside the digits and see how many of recurring digits we have any ideas in the chat Lauren leave it upon anyone let's get the result let's see what we have here all right so we get something like this which we might be able to use or not how we're going to find out click the result into an array and then irate at full length I don't know and long division so I keep dividing but then how have a cycle so here we go three then with zero then we see three again we can kind of check these three again so this is the thing how can we find out when we have a recurring cycle look at this 285 whoop seven one four two eight five seven one four you can kind of see visually but for something like this the same number again then the division will give the same result so they cannot repeat okay okay something something I see something there again look at this here we have the 515 decks we have that three which will repeat and you know what about this where it will repeat infinite loop we can't find something to be repeated you can see this is repeating one seven eight five seven one four two eight five you eight five seven one four two eight five seven one four two these styles here yeah I don't know sick sick sick sick sick sick so and over yeah I don't know exactly I can find out it can kind of get the digits and maybe using the vision we get it you yeah I don't know maybe we should research this and then come back late yeah let's see what about the next one 26 oh this is Tennessee's if you do the long division you multiply by 10 and then and that is your new numerator yeah but when we need to multiply by the the length of the number so if we have five six seven then we multiply so we get a thousand we divide it in a thousand and Matti let's go to the next one quadratic primes this doesn't look well night if the numerator repeats then you are in elope when do you know it repeat Oh quadratic Prime's Euler discovered the remarkable quadratic formula and squared plus an plus 41 it returns out that the formula will produce 40 primes for the consecutive integer values between 0 & 39 however when n is 40 is divisible 41 and certain one yeah okay so that doesn't work the incredible formula was discovered which produce 80 primes for the consecutive values the product of the coefficients 79 and yeah so methi consider quadratics of the form n square plus a n plus B where modulus of n that's the range and be less than I bet oiler will be terrible parties what else depends on the party it might be a cutting party so then it won't be a genius or a math party and modest modulus yeah good find the product of the coefficients a and B for the quadratic expression that produces the maximum number of prime for consecutive values of n starting with N equals zero oh boy this is not easy again one second you okay I might expire diagonals starting with the want to move into the right one two three so we kind of did something like this what is the sum of the numbers of diagonals oh so this should be doable finally finally some something doable what I see here is actually not that that so you can see there is a pattern so from in the inner circle we get one three five seven nine then we get plus 4 plus 4 plus 4 plus 4 they are all doable yeah but not by spirit what is the sum of the numbers on the diagonals in an N by n spiral formed in the same way and by a what till 100 well so yeah we definitely won't have to draw the well how do you call it the matrix these took you two days have it have video rates far you you did all of them oh that's pretty good if you did then pitch yeah so I kind of see a pattern starts with one the next one are two bigger the next one are four bigger the next ones are probably six bigger so for that they want to just draw well write it 21 22 23 24 25 you got that one the one you mentioned zero seven zero eight zero nine ten nineteen six one two 1118 five or three twelve whoa eighteen 18 17 16 15 14 13 okay so what's next like that okay so here we go 26 27 28 29 thirty let me put some boilerplate here 31 32 33 that for I just want to write them down so that we can probably find a pattern 38 39 for time I mean visually and then we can kind of create some kind of formula 42 43 44 45 46 7 8 & 9 one thing you can notice that are they're all odd numbers okay so as I said these ones are like double plus 2 plus 2 plus 2 plus 2 then plus 4 plus 4 plus 4 plus 4 and if I'm right hopefully the next one should be plus 6 yeah 25 plus 6 plus 6 plus 6 plus 6 all right so then this is not that hard we start with 1 we add 2 4 times with 4 4 then and we just increase the number we adding by 2 see that should be I don't have the same where this Zoey's and and the previous one was so hard but maybe for some people it's the other way around all right so let's some will be one let add addition this will be the number one tread and for let's see let 0 I less than n I plus plus so if n is 1 we don't add and it's one we have 1 we have we start with sorry I is zero we don't want to do that with Annies right I'm losing my train of thoughts now so if n is one we yeah I can't get now if n is two we want to start doing the sum plus equals ad like that and we want to do it four times I guess we could do J equals zero J less than four J plus plus and we do that and here at the end we just do ad plus equals two turn the sir as fast cancel that plug that doesn't seem to work what is the sum of the numbers on the diagonals so what happened what time is let's see so for 101 Oh so the sum is not that number it's the sum plus the addition so we start with one and then we add 1 plus so some will be ok let me think again so the next number will be 3 so we increased some ok ok let's keep track of the current number number will be 1 the some old number and here the number will be plus equals E and then the sum will be plus equals very close so now it's one then is three then is five seven and nine right let's check cancel that log well first let me just this so we don't get a lot consular lock number okay if we do for three we get three five seven nine twenty five 25 why for Oh Oh okay 25 is there okay he's just the return of the Sun here so the Sun is dead all right so now yeah my bad my bad so the next numbers let's see 3 5 7 9 13 17 21 25 the next ones will be 31 37 43 49 cyborgs should start from 1 now it is apparently works maybe I just don't need to go up to n okay so it can be verified that as some of the numbers on the diagonals is 101 yeah so we have N equals three ok 4 4 will be one yeah we need to go up to n plus one or inconclusive and now if we do three here we should get 101 yes I was going one less than we should have so now this should work we don't need to cancel this we get 101 for 101 we should get that number that's yes now currently we're failing you what is the sum of numbers and diagrams in an N and M spiral formed the second starting with the number one and moving to the right in a clockwise direction five by five spiral is formed but we're not then maybe missing the last round yeah it was initially but wait so this is not three by three this is five by five so we're missing here the ends because for an N of went five by five we get this big number but actually we should only get 101 so maybe minus one we'll work now what for get 10 you get that three by three so this doesn't feel like being right we're going way further mmm and divided by two plus one I really don't know don't ask me why today yeah it works if n is three and you start with I equals two then you have only one look yeah you know there are two questions the programmer is asking it would it doesn't work why and then the second one is it works why so yeah I figured something somewhere so basically here we have a 5x5 but we only increase one two times right yeah say so we have a 5x5 grade but this goes one and two so then we have five divided by two which is two point five plus one is three point five so we go twice because we all have one in the ice two and then goes for is three yeah I the reason why I used / in my mind I think so I noticed that it's kind of half so I did / and then I saw that this number is just a bit smaller than this one and then oh well why not plus one and that worked [Laughter] yeah life of a programmer yeah let's download it this is this is one of a kind let's go to the next one there are so many numbers here again let's see consider so distinct powers consider all all integers combination of a B for to the less than equals a left includes five so a between two and five P between two and five dot a dot these ^ to the power three power four or five if there then sorry so if they are then placed in numerical order with any repeats removed we get the following sequence of 15 distinct herbs how many distinct terms are in a sequence generated by a ^ B for to less than so a between two N and B root into a net okay so basically be over this loop twice so from I or we could just a a from 2 to n be from 2 to n we get a to the power of B we get the numbers and then remove the duplicates and we check how many distinct numbers there right I think so let a let's use a this time to a less than equals the end a plus plus 4 let B equals to B s equals death and coups and B plus plus and then we need to do and a result will be mapped up how a ^ b you I'm thinking now we need to put them in an array we could do const array like that and do array that push result and then well we need to filter out the duplicates but let's see what we get here also that flog that we get all these numbers look at that go go go go so many numbers but you want not double gate number so we could convert this to an object and do object of res object of rest to be true and then here we have object which you'll have all the values and they will be unique so we can just do object that keys of object that white that works right so we have all the distinct numbers we put them in the subject and at the end we get the keys the length of the keys alright get this wasn't that part thinking to the ones we skipped don't like that we skipped em but there or so is it there so hard this was easy yeah by the way if you're watching and did you enjoy what you're saying and you want to support me cut camp if you learn don't freak out camp feel free to donate support the nonprofit organization and help others learn how to code for free alright digit and powers surprisingly there are only three numbers that can be written as the sum of four powers of their digit oh that's interesting so if you get a digit to the power of four you get that as one over four is then is not a sum it is oh it's not the sound so it's not included all right the sum of these numbers is that okay find the sum of all the numbers that can be written as the sum of n powers of their digits but days so all the numbers I mean what's the limit all the numbers like a gazillion do we need to go up to this zillion how do we check for that what's this top the breaking point I mean you can see that the power of four you can go up to 9000 you any idea so we could simply just well take a number break digits raise them to the power of n and do the sum so that's easy but then what's the stuff so where do we stop how many numbers do we check there must be a way we know that this is the last number you you there are only three numbers that can be written as a sum of fourth powers of their digit digit these numbers that find the sum of all the numbers that can be written as the sum of em powers of their digits if they would say find the sum of the all the numbers from up to n that can be written then that would have been yeah easy you yeah C sub 1 is too easy the next one is not too easy have no idea where to look what to think to be the stop condition I mean do I go up to 10,000 do I go up to 100,000 how can we find out there are no more I mean yeah this is surprising that it's only three because after nine here we go you can go 10 when something but yeah but after only three I'll trust them but how do they know did they check like all the numbers in the universe you you no idea honestly don't have any idea how to do that I mean only for passing the test I can kind of see that this goes up to probably 100,000 because we have a sum of numbers which go up too which will result in 443,000 right that won't be a good solution maybe brute force first yeah and have a like Burt stop you so we have zero look at this we have zero numbers which there DG ^ to equal the number zero numbers so then basically when you finish the vailable yeah that old timer thank you for becoming the supporter in the name of Wicca camp thank you very much for supporting the channel and another nonprofit organization yeah let's go to the next one at the end we're going to have like a lot of empty spots here coin sums this looks like a fun thing Koen sums in england the currencies made up of pound and pence and there are eight coins in general circulation 1101 pens to pen isn't finished I don't know in England coins all right it is possible to make two dollars in the following way one pound one times fifty pence all right how how many different ways can n pens be made using any number of points that does this feel like permutations again how many different ways this is definitely an algorithm somewhere I mean you can do okay first you can do it by having so n is 50 right you can do it by having 51 then that's I don't know how to pronounce that sorry and then you can do it by having 48 of one and one of two then you can have it 46 of one and two of to say where I'm going with this then you can have it 45 of one and 105 so that's a gazillion this is definitely an algorithm and unfortunately I don't know it so I won't spend a lot of time to to try to get it because I'd have no idea these are getting harder and harder so I don't know I could start to learn about algorithms more in depth but then I need to learn them in a wait so that I could teach it yeah it's come becoming complicated or we could switch we can put project order and pause it's very much happy this is why it's getting harder but I guess that's the idea then digital products we shall say that an end digit number is pandigital if it makes up if it makes use of all the digits 1 to n exactly once for example the five digit number 1 5 2 3 4 is 1 through 5 and digital the product 7 2 5 4 in his unit is unusual as the identity 3 9 times 1 8 6 equals the number contains multiple oh boy so fancy words words containing multiplicand multiplicand multiplied and product is 1 2 9 so you basically have all the numbers the sum of all products whose day things can be written as one through nine pen digital hint some products can be obtained in more than one way so be sure to own included ones in your son okay yeah we kind of hit and here Laurent what do you think are they getting harder and harder so we we can go over the numbers and find prod products find the sum of all products whose multiple multiplicand the multiplier product that it can be written as one through nine and we have it here so we basically we can just return that and with that don't do this this is just for fun then this you should fit you should solve it Guga let's learn together know where to start mazie clay we can get a number which does it have similar digits and then get two more numbers all of those digits should be available from one to nine and then somehow the multiplication of those numbers should end up to the third number all right I don't know keep trying he's this all we could do digit cancelling fraction digit factorials circular primes double bass palindromes strong capable primes numbers numbers numbers powers primes was it the same at the beginning number number yeah that was with numbers but it was like simple 32 is hard yeah aren't they all everything's hard if you don't know what to do let's say that x1 fractions again we need to find out everything exactly for nontrivial examples okay I think I hit my and here digit factorials one four five is a curious number as one factorial 5 4 factorial 5 factorial is the number and the numbers and the sum of the numbers which are equal to sum of the factorial of the digits you find the numbers and the sum of the numbers which are equal to the sum of the factors so again going over all the numbers I mean we can see here that we have only two numbers two curious numbers what I could just do it like go up to 100,000 right do that find factorials oh let me check something project Euler dotnet I want to see what what they want in this prize what's D requirements for where is it 34 find the server sorry finally some of our numbers which are equal to Samuel factorial of their digit same problem which we had before yeah all right I think I'm going to stop here unfortunately and yeah I don't want to keep you all here to see me not know how to do this and I'm going to look all of them see if we could find if we could solve them or other were other problems and if not we're going to start in another series yeah they are getting harder but oh well we did 27 so let's start someone with more knowledge of algorithms should be able to do more so I encourage you to try and you can rub it on my nose think that's the same right and yeah all right you yeah seem to discard thinker for doing sorry for yeah I don't want to just keep you here watching me fail that art I mean you won't learn much so I will look at them and when I found solutions the way I could probably explain we're going to get back and continue this thank you for watching thank you for being part I think this was the fifth or the sixth so we had a good run maybe one day we can continue but we need to learn so let's that NSE you the next step bye
