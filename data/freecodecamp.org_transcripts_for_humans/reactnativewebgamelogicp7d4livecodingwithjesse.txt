With timestamps:

00:04 - hey everybody welcome to live coding
00:06 - with jesse i'm jesse and today we're
00:08 - going to try to add some logic to our
00:11 - game that we were working on earlier in
00:13 - the week
00:14 - uh let me go to the live chat real quick
00:17 - and say hello
00:20 - oh wow there's a lot in the live chat
00:22 - already
00:23 - um
00:26 - they have goop to ask if
00:28 - uh
00:29 - if i teach react while streaming and if
00:32 - i do a
00:34 - new project every time
00:36 - no we work on
00:38 - the same project usually over a series
00:41 - of streams and i i do try to
00:45 - explain a little bit what i'm doing so
00:46 - it's not really a tutorial but
00:49 - hopefully you'll learn a little bit
00:50 - about react
00:52 - as
00:53 - as we go through the project
00:56 - um
01:01 - nobody savage says hi jesse you
01:03 - beautiful sob you with a little heart
01:06 - emoji thank you i appreciate that
01:11 - all right
01:13 - let's see
01:18 - i'm skipping through a lot there's just
01:19 - a lot of
01:21 - message retracted stuff so that was most
01:24 - of is on here
01:26 - um
01:29 - all right then a couple questions about
01:31 - what we're going to learn about so
01:34 - yeah we're using react native web
01:37 - and that's basically
01:39 - it's basically the same as react native
01:43 - but
01:44 - we are
01:46 - our target
01:47 - right instead of
01:49 - android or ios our target is the dom
01:52 - right the the web so we're building a
01:54 - web app using react native
01:57 - why would we want to do that
01:58 - because
02:00 - eventually first we're going to build a
02:01 - web app but then we're going to
02:03 - also make
02:05 - android app and maybe an ios app out of
02:07 - this and we'll be be able to do that
02:10 - with pretty much the same code
02:13 - so i'm aiming for 90 plus percent
02:17 - uh of the same code to be used
02:21 - everywhere
02:24 - all right so
02:27 - here's the code but let me start with
02:28 - the ui just to give a refresher and for
02:31 - everybody that hasn't seen it yet
02:33 - i'll show you the ui i'm gonna start
02:36 - this pomodoro timer okay when i start
02:38 - this timer if that means for the next 25
02:40 - minutes i'm going to focus mainly on the
02:42 - code and i'm not really going to look at
02:44 - the chat very often after this timer
02:46 - goes up i'm going to go back to the chat
02:47 - and try to catch up on all the questions
02:49 - there if you have a question just hang
02:51 - in there and i'll get to it
02:53 - in about 25 minutes
02:55 - so here's our ui
02:58 - basic concept is
03:00 - we have our hero over here we have our
03:02 - enemies over here
03:04 - you're given a math problem if you get
03:06 - the problem right
03:07 - one of the enemies disappears if you get
03:09 - all the enemies to disappear you win
03:12 - if you get the problem wrong a new enemy
03:14 - appears
03:16 - right uh and it'll so the the logic that
03:19 - we want to make today is
03:21 - we want to
03:23 - verify that the user has the right
03:25 - answer
03:27 - um or wrong answer right when they enter
03:30 - something in and hit submit
03:33 - and we want to generate
03:35 - uh
03:36 - random
03:37 - math problems
03:38 - right we're only going to worry about
03:40 - addition for now
03:42 - that'll be the
03:44 - the our proof of concept uh our our mvp
03:48 - right is just gonna be addition problems
03:51 - right and that'll basically be level one
03:53 - single digit edition is usually where
03:55 - they start children out
03:57 - so that that'll be level one of our of
04:00 - our math game
04:01 - okay
04:02 - um
04:04 - let's go to
04:06 - the code
04:08 - and
04:10 - well let's decide what we're going to do
04:12 - first um
04:15 - i'd say
04:18 - the first thing
04:20 - i think it'd be easier to do
04:21 - is let's stick with a hard-coded math
04:24 - problem two plus two
04:25 - and then let's try to verify a correct
04:28 - answer first
04:30 - and then
04:32 - if there's a correct answer we'll remove
04:34 - this if one of these enemies if it's a
04:37 - wrong answer we'll add an enemy
04:39 - once we get that down
04:41 - then
04:43 - we'll add in
04:45 - basically changing
04:47 - the problem
04:48 - uh every time
04:51 - yeah every time that's a there's a
04:53 - submission
04:54 - we change the problem
04:56 - okay that'll be step two
04:59 - so step one is just
05:02 - verifying the answer
05:06 - okay
05:08 - so our entire app right now
05:11 - is pretty much just this app.js file
05:14 - for the purposes of the stream it's
05:17 - easier to have everything in this file
05:18 - right now once it starts to get too
05:20 - complicated
05:22 - we can break some of it out um but
05:26 - this just kind of simplifies there's way
05:28 - less clicking around in different files
05:31 - uh because i want the font size to be
05:33 - big enough for you all to see i can't
05:34 - really have screens side by side
05:36 - uh so it does make it harder to have
05:39 - multiple files open
05:42 - all right so
05:45 - we already have our
05:46 - controlled input so we know what the
05:49 - input's going to be and it's going to be
05:51 - in state it's going to be text
05:54 - now
05:54 - [Music]
05:57 - let's change that
06:00 - text was what we copied and pasted in
06:01 - here from
06:03 - an example of a controlled input but
06:05 - really
06:08 - it's going to be a number right
06:11 - so let's call it
06:15 - answer
06:17 - it'll might eventually when it gets more
06:19 - complicated it might make it a bit
06:21 - easier to reason about if we say answer
06:34 - is the answer
06:37 - okay
06:38 - so now
06:40 - the value of this input
06:43 - is whatever this state answer is
06:46 - and then every time the text
06:49 - text is entered
06:51 - it changes the state
06:53 - of answer right so
06:56 - text on text or on change text changes
06:59 - the state and change in state triggers a
07:02 - change in value
07:03 - right
07:04 - and that's that's the concept of a
07:06 - controlled input in
07:08 - react
07:13 - okay
07:14 - so we have that
07:19 - and our submit button right now
07:22 - is just console logging
07:25 - well this a text but
07:28 - really it's it's going to be answered
07:29 - but we're going to get rid of this
07:30 - console log
07:33 - because on submit now we're going to
07:35 - check so let's say this dot
07:38 - um
07:41 - check answer
07:43 - right
07:46 - so now let's make
07:48 - a check answer
07:54 - oops
07:55 - and
07:56 - we're going to use an arrow function
07:58 - here
08:00 - for check answer
08:02 - forgot an equals
08:04 - there we go so we're going to use an
08:06 - arrow function uh i definitely recommend
08:08 - using arrow functions inside your your
08:10 - class components because it helps to
08:13 - reason about the value of this um
08:16 - a lot easier
08:18 - and you don't have to worry about
08:19 - binding this
08:21 - somewhere else so
08:23 - uh i prefer this
08:26 - sorry i prefer arrow functions
08:30 - in this case
08:31 - all right so
08:33 - when we check the answer
08:36 - we're gonna say
08:39 - um
08:43 - all right so
08:45 - for now
08:47 - it's gonna be
08:48 - two plus two
08:49 - um
08:53 - let's see how we're going to do this
08:56 - i guess we could just say
09:03 - um
09:14 - this state answer
09:17 - um
09:19 - equals
09:24 - to
09:27 - where's the plus side
09:29 - uh the keyboard i'm using on this
09:31 - computer like for streaming is just um
09:39 - it's a different so
09:41 - my typing is a little off
09:43 - okay and actually so like right now this
09:45 - is very simple check answer is just
09:47 - gonna return true or false
09:52 - um
09:54 - actually
09:55 - um
10:00 - yeah let's change that a little bit
10:01 - check answer returns true or false
10:04 - [Music]
10:06 - we don't want to return that though we
10:08 - would say
10:17 - all right so we're going to say let
10:19 - correct equal
10:21 - so basically this is going to return
10:22 - true if it's true
10:24 - obviously false if it's false so if
10:27 - correct is true
10:29 - then we'll say
10:36 - if correct
10:37 - we're going to call
10:40 - this dot
10:44 - remove
10:45 - enemy
10:48 - else
10:50 - we're gonna call
10:54 - dot add
10:56 - enemy
10:58 - okay
10:59 - so we haven't created these yet
11:02 - uh we need to though
11:04 - so
11:08 - i'm going to add enemy remove enemy and
11:10 - then
11:12 - no matter what
11:13 - we need to
11:15 - after that
11:16 - uh say
11:19 - this dot
11:21 - um
11:23 - new
11:24 - problem
11:26 - so we're we're going to
11:29 - actually let me
11:31 - just put this outside of it since we're
11:33 - going to do it no matter what so
11:35 - new problem so every time we check an
11:37 - answer no matter what happens we're
11:38 - going to get a new problem and then
11:39 - depending on the
11:41 - whether the answer is right or wrong
11:42 - we're going to either add or remove an
11:44 - enemy
11:45 - okay
11:48 - and
11:49 - yeah that's going to run
11:59 - okay
12:02 - all right i'm just gonna save this just
12:03 - to make sure we don't have any uh like
12:06 - syntax errors going on
12:08 - okay everything looks good
12:12 - let me check my timer too
12:15 - okay in about 15 minutes i'm gonna go
12:17 - back to the
12:22 - chat and
12:27 - let's create
12:29 - some of these
12:30 - remove enemies at enemies
12:36 - i think i may want to do it like this
12:38 - um
12:40 - enemy
12:50 - enemies uh how about this about
12:56 - number of enemies
12:58 - so we're gonna start always we're gonna
13:00 - start with three for now
13:08 - and then our remove enemy and add enemy
13:12 - is just going to affect the state
13:28 - so we can say
13:31 - remove enemy we'll do this dot set state
13:39 - and we're going to say
13:44 - number of enemies
13:46 - is gonna be
13:54 - number of enemies
13:56 - plus
13:59 - oops minus one sorry
14:01 - almost added one
14:04 - okay
14:11 - for this one we'll just do a plus sign
14:17 - and we'll change this to add
14:20 - okay
14:22 - all right so now we should be able to
14:24 - test out
14:26 - whether or not this is working we're not
14:29 - doing anything with the ui yet
14:33 - we haven't defined this we'll probably
14:35 - get an error when i try to do that so
14:37 - let's define this at least
14:40 - oops
14:44 - new problem
14:50 - okay
14:51 - so new problem for now is just going to
14:57 - log something
15:00 - console log new just to make sure it's
15:02 - working
15:06 - all right okay
15:09 - so let's try this
15:13 - so
15:14 - let's look at our
15:18 - our state
15:20 - so here's our
15:22 - uh you can't oh yeah you can see that i
15:24 - wonder if i can make it bigger though
15:28 - okay
15:29 - so
15:30 - you should be able to see hopefully this
15:32 - number of enemies
15:34 - three
15:36 - and we should see this number change so
15:40 - let's try to do
15:42 - so already see our answer
15:44 - changed right let's submit
15:46 - all right so we got it wrong so now the
15:48 - number enemies is four
15:53 - we got it
16:04 - okay i think i know what's happening
16:08 - let's answer
16:12 - we need to change this state answer to
16:15 - be a number
16:21 - so let's check really quick
16:23 - um
16:30 - string to number
16:32 - and java no that's not what i wanted
16:36 - i don't want a number with comma i just
16:38 - want to string to a number
16:40 - parseint there we go
16:44 - for now person will work i don't think
16:46 - we're going to be dealing with decimals
16:48 - uh since this is a very basic math game
16:51 - so let's just go with parse int
16:54 - normally uh
16:56 - i
16:57 - would recommend going to
16:59 - mozilla developer network
17:01 - so that's a great resource if you check
17:03 - out mdn
17:06 - there's so much info
17:08 - on on everything and then examples
17:11 - so that's usually the first thing to
17:12 - come up when you look up something like
17:14 - that it wasn't this time but i i
17:16 - definitely recommend
17:18 - mozilla developer network so it's
17:20 - developer.mozilla.org
17:23 - okay but anyway for for our purposes
17:26 - uh for parse in it takes two arguments
17:29 - so the first one is whatever the string
17:31 - is that you're trying to turn into an
17:33 - integer and then the second one is the
17:37 - uh
17:38 - the the base so um
17:41 - like we could do
17:43 - like base 16 which is like hex stuff
17:45 - base 2 which is binary in this case we
17:48 - want base 10 which is the normal number
17:50 - system that that we're using right
17:53 - so let's do that
17:56 - we'll go back to our code
17:58 - and say
18:02 - pars
18:03 - int
18:09 - so our first argument is our string and
18:11 - our second argument is the base
18:14 - base 10 might be the default i'm not
18:16 - sure
18:17 - but
18:18 - it's not going to hurt to put 10 in
18:20 - there it'll make it clear to anybody
18:22 - that we are using base 10 which most of
18:26 - the time you're probably going to use
18:27 - base 10.
18:29 - let's save that and see if that was the
18:30 - issue
18:37 - let's see so
18:40 - number of enemies is three
18:44 - there we are okay so
18:46 - the issue was simply that it was
18:48 - comparing
18:50 - a string to a number and those of course
18:53 - are not going to be equal
18:55 - right so even if it seemed like it was
18:56 - the right answer it wasn't because
18:59 - behind the scenes it was comparing two
19:01 - different types
19:02 - and so let's let's verify that
19:05 - the wrong answer still increases yep all
19:08 - right awesome so our logic works there
19:12 - the next step would be to
19:14 - actually add or remove enemies on the
19:16 - screen
19:21 - and i think i'm maybe almost all right
19:23 - eight minutes in about eight minutes i'm
19:25 - gonna go back to the chat
19:27 - and um
19:28 - and answer some questions i can i can
19:30 - see there's a lot going on in the chat
19:31 - so
19:32 - uh hang in there i will get to the chat
19:35 - soon
19:36 - oh we got a lot of viewers so hey
19:38 - everybody
19:40 - thanks for watching
19:44 - so here is where we are
19:47 - actually adding in the enemies so what
19:49 - we want to do now
19:51 - is
19:52 - add
19:54 - in enemies based on the value of
19:58 - in state of number of enemies
20:00 - so now we're gonna do
20:03 - we're gonna drop into some javascript
20:05 - right so in
20:06 - react inside of a component that kind of
20:09 - looks like html this is called jsx
20:12 - we can
20:13 - do javascript if we put these little
20:15 - curly brackets
20:17 - and so
20:18 - we're going to do
20:22 - this state
20:24 - number of enemies
20:28 - and
20:32 - see how we'll do this i guess
20:40 - i was gonna normally when i do this i'm
20:42 - like going over an object so
20:46 - all right this is this is not
20:50 - normally i'm just like here take this
20:52 - bit of data that's an array and let's
20:53 - map over it right but that's not the
20:55 - case we just we actually just have a
20:58 - number
20:58 - okay
21:00 - at some point it might be different if
21:01 - we have different types of enemies but
21:03 - for now let's just say
21:06 - we can do
21:11 - a for loop
21:16 - actually now i'm confused i don't think
21:18 - i've ever tried to do uh like a a loop
21:21 - just a simple loop in
21:23 - uh inside of jsx
21:31 - all right well let's give it a shot
21:34 - i don't think you can do a for loop
21:35 - though
21:41 - let's check this
21:42 - out actually i do want to look this up
21:45 - so
21:46 - let's say uh
21:48 - loop
21:50 - in jsx
21:55 - there we are how to loop inside react um
21:59 - let's go to stack overflow
22:01 - first
22:02 - let's see
22:05 - um
22:06 - trying to do loop okay yeah that's
22:08 - basically what we're trying to do
22:12 - i'll make this bigger
22:18 - you can't lose use a for loop
22:21 - yeah
22:25 - you can make an array and pass that as
22:26 - an argument okay
22:38 - hmm
22:43 - all right yeah i think we're gonna
22:47 - situation off and map is a good answer
22:51 - yeah i think we're gonna have to make an
22:53 - array and then
22:54 - maybe map over that
22:57 - oh actually
23:01 - that arrow function stop map
23:08 - all right this looks interesting let's
23:09 - look into this
23:25 - all right let's try this uh the idea is
23:27 - we're going to use this a spread
23:28 - operator to basically just create an
23:30 - array on the fly and then map over that
23:37 - i like that i like that idea let's try
23:39 - that
23:41 - let's just copy this for now and we'll
23:43 - modify it as we need it
23:46 - okay
23:49 - so
23:50 - in here
23:52 - this will have this so
23:55 - i also don't need
23:57 - these curly brackets i already have them
24:00 - and this is gonna be
24:03 - this state
24:06 - um
24:08 - number of enemies
24:10 - we're gonna map over that
24:12 - i don't know why we're gonna have i
24:14 - don't really need x i just need i
24:18 - and in that case i don't need these
24:23 - i don't need this object row but i would
24:26 - like to have this key
24:35 - okay
24:36 - i'll explain what i just did here
24:39 - okay so
24:41 - what i think is gonna happen
24:43 - we'll see uh is that
24:45 - an array will be created
24:48 - with
24:50 - the
24:51 - the number of elements in the array will
24:53 - be equal to the number of enemies
24:56 - then we'll map over that
24:58 - we're going to get the uh the index of
25:02 - of each one of these and add it as a key
25:04 - so in react any time you're you're
25:06 - adding the same elements
25:08 - uh to
25:10 - to the dom you need to have a key to
25:11 - differentiate the the elements okay all
25:15 - right so let's see if that works
25:18 - so you should be able to tell right away
25:19 - hey
25:21 - cool
25:21 - number of enemies now we don't actually
25:23 - even need to do the math we could just
25:26 - change it four nice
25:30 - let's see how it does when we add a
25:32 - bunch
25:33 - whoa 12 okay
25:35 - so
25:38 - yeah
25:40 - so for right now this is imperfect
25:42 - because right once we get high enough up
25:44 - there it it's just a wall of enemies so
25:47 - we'll have to add in some logic to
25:49 - handle that uh maybe
25:52 - drop into like two rows like we'll
25:54 - figure that out but for now
25:56 - [Music]
25:58 - basically
25:59 - you know this works right
26:05 - uh
26:06 - probably the best thing to do for now
26:07 - would be to place a limit like
26:10 - you know they'll never be more than
26:13 - let's say if with the six work yeah so
26:16 - like let's say they'll never be more
26:17 - than six enemies at once we won't let
26:20 - you get above six
26:22 - and that'll be like a temporary solution
26:24 - to that issue
26:28 - um
26:34 - we can add this in
26:36 - i guess to add enemies
26:43 - if
26:44 - a
26:50 - number of enemies if this state number
26:53 - of enemies is
26:55 - less than
26:56 - six
27:01 - then we will do this
27:06 - okay
27:08 - so otherwise we won't so let's uh let's
27:11 - try this out again
27:13 - say like
27:17 - so we can see
27:19 - i can never get more than six enemies at
27:21 - once that's not bad realistically like
27:23 - if there were a kid
27:25 - you know a young kid learning math and
27:27 - he kept getting the answer he or she
27:28 - kept getting the answer wrong
27:30 - it would be pretty discouraging if there
27:32 - were a ton of enemies they'd feel like
27:33 - they'd never be able to win so
27:36 - this is probably a reasonable thing to
27:38 - do anyway
27:40 - uh all right cool so the timer just went
27:43 - off so i'm gonna set five minute break
27:45 - here and go back to the chat answer as
27:47 - many questions as i can
27:51 - let me scroll up a bit
27:55 - let's see where i left off
28:00 - wow there's a lot in the chat i'll try
28:02 - to do as much as i can i don't know if
28:03 - i'm gonna get through it all in five
28:04 - minutes though
28:11 - uh all right so
28:13 - education says
28:15 - uh hello bro can we add native code in
28:18 - react native project yes you can add
28:21 - native so i'm assuming you're you're
28:22 - talking about adding
28:24 - um like
28:26 - native android or ios code right in that
28:30 - case the answer is yes so there's there
28:32 - are definitely ways to do that
28:36 - so i mean i would like look at the
28:38 - documentation for specifically how you
28:40 - would do that in android or
28:42 - ios let's see
28:45 - oh michael says i know what proof of
28:47 - concept is what is nvp
28:49 - uh mvp is minimum viable product
28:54 - so sometimes you'll hear people talk
28:56 - about
28:57 - really
28:59 - a proof of concept um is usually like a
29:02 - step before minimum viable product so
29:05 - your proof of concept is just like okay
29:07 - like is this idea like even doable at
29:10 - all like we need something to show like
29:12 - people higher up in the organization
29:14 - that this actually can work and then
29:16 - your minimum viable product would be
29:18 - what you actually launch with
29:20 - um
29:22 - so they might be like
29:24 - your your very first version of the
29:26 - product it's supposed to be like
29:29 - have minimum functionality
29:31 - and the idea is that you would then add
29:33 - functionality as it becomes more popular
29:37 - oh and i see mana already said it so
29:40 - thanks for that
29:43 - and amman uh put the link right in there
29:46 - to uh be able to use native code with
29:48 - with react native so thank you so much
29:53 - a lot of people are saying hi i'm just
29:55 - going to wave and say hi to everybody
29:58 - because i don't want to take up um
30:03 - too much time since we only have an hour
30:10 - let's see if he's been on programming uh
30:13 - ahmed says i want to learn programming
30:17 - uh that's awesome
30:22 - uh nino says are there any free courses
30:24 - for game developers i'm sure they're out
30:26 - there i don't know of any good ones
30:27 - myself because i i don't
30:29 - normally really do game development
30:33 - but if anybody in the chat knows of any
30:35 - good free courses you know let let nino
30:37 - know please
30:39 - uh wallace says i need a 3js tutorial
30:42 - anyone here can help me yeah i don't
30:44 - know of any tutorials in 3js off the top
30:46 - of my head but if somebody does please
30:47 - put that in the chat
30:57 - menthon says every time i open
30:58 - programming live stream the first word i
31:00 - hear is um
31:02 - i apologize for that i noticed on the
31:05 - last stream that i was saying um a lot
31:07 - more i think i'm out of practice
31:10 - you know when i used to stream pretty
31:11 - much every day
31:13 - i don't think i was as bad
31:15 - and now that i've gotten out of practice
31:17 - i i think i'm not communicating as well
31:21 - as i did before
31:23 - so i'm gonna work on that i'm gonna try
31:26 - it definitely takes
31:28 - mental effort to stop myself from saying
31:30 - it
31:40 - dragon hunter says i'm just getting
31:42 - interested in writing a react native
31:44 - game using a webview component and boom
31:47 - a live coding with jesse oh awesome
31:49 - that's really cool
31:51 - that that worked like that
31:57 - nobody savage says hit that like button
32:00 - awesome
32:01 - so my uh i i do have to say this so my
32:03 - team at work
32:05 - is
32:06 - i'm going to keep the story short but
32:08 - like basically they claim that they that
32:11 - at on one of my live streams i ended
32:14 - with smash that like button fam
32:17 - i never remember saying that and they've
32:19 - never been able to actually show me the
32:20 - stream where that happened
32:22 - but they always want me to actually say
32:24 - it so i'm gonna say it just one time
32:28 - to make them happy so anybody watching
32:30 - right now
32:31 - smash that like button fam
32:33 - all right
32:34 - there i i said it now it's it's uh
32:37 - official
32:42 - um rabbitworks says make your life
32:44 - easier and either do it fully native
32:46 - views or just do react at building apps
32:48 - to run inside a webview component is
32:50 - counterproductive
32:52 - um yeah actually so
32:54 - dragon hunter was talking about doing a
32:56 - native game inside a webview
32:58 - yeah i don't
33:00 - i don't think you need the the webview
33:03 - um
33:05 - yeah i would try to do if you're gonna
33:07 - do react native you know just do react
33:09 - native uh don't worry about the the
33:11 - webview
33:14 - if if you can do it i mean if there's
33:16 - some reason why you need the webview
33:17 - that's cool obviously i don't know the
33:19 - details of the project but uh you know i
33:21 - do recommend that there are advantages
33:23 - to not doing the the webview
33:25 - all right let me
33:28 - i don't have any pens or anything to
33:29 - write with i was going to write down
33:31 - where i left off so i could find it
33:33 - later but
33:35 - ah here it is
33:36 - i had a cup with pens in it and it just
33:38 - got knocked over so
33:42 - let's see
33:50 - all right
33:52 - oh wait a second it's not giving me time
33:54 - stamps no
33:57 - toggle times there we go
33:59 - i had had the time stamps turned off
34:05 - okay
34:06 - now i should be able to get right back
34:08 - to where i left off in the chat so if i
34:10 - didn't get to your question right now i
34:12 - will get to it after our next pomodoro
34:14 - session
34:18 - all right so where do we leave off at
34:21 - right now we can add and remove enemies
34:25 - depending on whether or not we get the
34:28 - correct answer
34:29 - but we still only have two plus two
34:33 - next step let's give a random
34:36 - math problem for now the constraints are
34:39 - we want it to be single digit addition
34:42 - so it's always going to be addition and
34:44 - it's always going to be something that
34:46 - is
34:47 - uh zero through nine
34:49 - okay so that should be pretty simple
34:52 - you know given those constraints
35:00 - i i just noticed
35:03 - uh nikki says loving the beige screen
35:05 - green screens are overrated
35:09 - it's jus it's this is a temporary office
35:12 - in the corner of my basement those are
35:13 - tablecloths hanging up to make walls so
35:18 - everybody gets on me for my
35:21 - my terrible looking
35:23 - office
35:25 - but i am
35:26 - i made a bid i put a bid in on a house
35:28 - and i think everything's gonna work out
35:30 - i'm gonna move and uh the house will
35:33 - have
35:34 - uh it has a basement that has enough
35:36 - space for me to build a real office in
35:38 - so hopefully
35:40 - it'll be a little bit better of a
35:42 - background i'll try to do like
35:44 - soundproofing and stuff and make it a
35:46 - legit office that i can do these youtube
35:49 - streams from
35:51 - okay
35:53 - let's see how we're gonna do this
36:00 - let's make
36:04 - some of this in state so
36:15 - i guess we can just make two values in
36:17 - state
36:20 - and then set them to a random number
36:22 - each time
36:24 - right
36:31 - okay um
36:35 - about one
36:37 - and let's just start out with
36:42 - 0
36:44 - about 2
36:46 - 0
36:50 - and
36:52 - let's make
36:59 - random number
37:00 - so we're just going to make a function
37:02 - that will give us a random number
37:10 - we probably don't need a random number
37:12 - function i could just do this but let's
37:13 - just let's do it since we we wouldn't we
37:16 - already did this
37:17 - uh
37:18 - so
37:20 - actually i'll just look up the syntax
37:23 - instead of messing it up and then
37:24 - looking it up
37:26 - um
37:36 - random number
37:38 - there we are
37:40 - so math random
37:42 - there's what i wanna i knew we'd have to
37:43 - do math floor
37:46 - um
37:47 - get random and
37:50 - that's basically what we want right um
37:58 - it's output
38:02 - all right cool yeah this is perfect
38:04 - let's just
38:05 - take all of this
38:07 - um
38:08 - but i'm just gonna take this much
38:23 - okay so our random number generator
38:26 - um is we're gonna give it a max and this
38:29 - is actually good because right now we
38:30 - only want like one through nine but
38:34 - eventually we
38:36 - could increase the difficulty of the
38:38 - game by giving this
38:40 - a higher
38:41 - max right
38:45 - so then what we can do is
38:51 - oop you know we already have a new
38:53 - problem don't we
38:54 - we do
38:55 - okay so when we go for a new problem it
38:58 - could just be
39:00 - this dot set state
39:06 - and we'll go
39:09 - val 1
39:12 - is going to be this dot
39:16 - um randomnum
39:18 - and we'll say
39:22 - max is nine
39:24 - and then
39:27 - we'll do the same thing
39:35 - here
39:37 - for val2
39:45 - let's make sure i got that number right
39:47 - um if we pass in three okay let's pass
39:50 - in 10 then
39:56 - okay
39:57 - uh
39:59 - all right so this should give us when
40:01 - you say new problem all right great now
40:03 - let's plug in there's gonna be a couple
40:06 - places we're gonna we're going to need
40:08 - to plug in these values so
40:10 - here it's going to be this state
40:15 - oops
40:16 - val one
40:24 - state
40:26 - val
40:27 - 2.
40:28 - okay so now we'll actually know what the
40:31 - the values are the problem that comes up
40:33 - and then in our ui
40:35 - we also want to have the correct values
40:39 - where do we have that so instead of hard
40:40 - coding two plus two we'll do this state
40:44 - oops we gotta put these in in brackets
40:47 - here
40:48 - so this state
40:52 - one
40:54 - and
40:55 - this state
40:58 - vowel
41:00 - two
41:02 - all right
41:03 - let's try that out
41:06 - it should we should see zero zero first
41:09 - and this should actually be zero
41:14 - wait did we get the wrong answer for
41:15 - that
41:19 - hold on a second
41:21 - zero plus zero should equal zero right
41:24 - what what the heck
41:28 - why did that happen
41:38 - okay that one is zero well two is zero
41:42 - our answer is going to be zero right
41:48 - all right we found a bug for some reason
41:51 - when the answer is zero
41:53 - um
41:54 - it doesn't work
41:56 - that's not going to matter for right now
41:57 - we will have to solve that eventually
41:59 - like when we get
42:00 - to um
42:04 - let's say i'm i'm basically just gonna
42:06 - skip it for now right let me see if
42:08 - somebody
42:13 - oh did i misspell something all right
42:16 - sorry
42:18 - where did i misspell
42:21 - masso says i mistyped val1 and i wrote
42:23 - va1
42:26 - okay let's see where did i do that
42:30 - va1
42:34 - all right
42:37 - thank you i'm glad i looked up there
42:41 - all right let's test this out now
42:47 - all right let's try zero zero
42:49 - all right that works now now i don't
42:52 - want the first problem to always be
42:56 - zero plus zero
42:59 - so we're going to do
43:02 - component did mount
43:07 - and on component did mount
43:09 - we are going to call
43:11 - new problem
43:17 - right
43:18 - so
43:19 - now we should get a random problem
43:22 - every time right so we're going to
43:24 - refresh random problem
43:27 - random problem great
43:29 - let's play through the game
43:31 - uh and
43:33 - just to make sure that it works so
43:37 - oops you know what i just noticed we
43:39 - didn't uh add a way for the user to
43:41 - press enter and for this to work so
43:45 - let's do that
43:50 - oh three plus six
43:56 - i'm interested to see what will happen
43:58 - now will it go negative
44:03 - ah we got an error
44:05 - cool
44:11 - so we definitely need to
44:14 - make sure we can't go negative
44:19 - so let's say
44:21 - when we go to
44:25 - check the answer if it's correct
44:32 - we remove the enemy
44:36 - and then let's check
44:38 - and say if
44:43 - this state
44:48 - number
44:51 - number of enemies
44:53 - equals
44:55 - zero
44:55 - [Music]
44:58 - then we'll say
45:04 - let's say display
45:08 - u1 i'm just going to name the function
45:10 - u1 because that sounds cool right
45:13 - this
45:15 - this dot u1
45:22 - u1 is going to
45:27 - for now all it's going to do is just
45:29 - display
45:30 - um
45:37 - state
45:40 - it's going to set states and we'll go
45:42 - this
45:44 - state
45:46 - 1
45:48 - which will create that value
45:51 - oops that's not what i want
45:53 - i'm just going to say 1 equals true
45:59 - and
46:01 - yeah for now that's that's what we'll do
46:02 - so we'll say one equals true
46:05 - and then up here let's add
46:07 - one false
46:11 - all right uh anytime you have anything
46:12 - that's going to affect the ui
46:15 - at all you probably want to keep track
46:17 - of it in state because a change in state
46:20 - will trigger a re-render of the
46:21 - component and that's what you want to
46:24 - change your ui
46:25 - so if that happens
46:28 - we're going to want to display
46:32 - [Music]
46:34 - let's see so instead of
46:37 - this math container
46:39 - let's just put in
46:43 - one
46:45 - if one is true then let's put in this
46:49 - um
46:57 - let's just say victory
46:59 - and then
47:00 - otherwise
47:02 - let's display this
47:07 - this view right and this obviously isn't
47:09 - styled yet
47:12 - oh yeah i say this state one right
47:16 - all right so let's see if that
47:17 - works
47:21 - and we can skip the actual game and just
47:24 - set this right
47:26 - no
47:29 - all right let's try it again if this
47:30 - one's nine oh yeah you know what it
47:34 - hm
47:36 - one is still false
47:39 - all right i think there's something
47:40 - wrong with my logic here
47:43 - so
47:44 - let me check up here
47:54 - um
47:57 - let's see
48:00 - all right so we're checking
48:03 - so we're doing this dot remove enemy
48:06 - which should
48:08 - take the state down
48:10 - and then we're checking for
48:15 - if the state number of enemies is equal
48:17 - to
48:18 - zero you know we could do
48:22 - i mean we probably could move this
48:24 - honestly
48:26 - to here anyway
48:28 - um
48:40 - okay
48:47 - all right let's see now
48:49 - uh
48:50 - 9
48:54 - 14
48:55 - [Music]
48:57 - 4.
48:59 - hmm
49:02 - still something wrong with it
49:05 - let me see
49:06 - shouldn't it be inside the if
49:27 - all right let's see
49:33 - okay nikki said this headstate is not
49:35 - sync
49:36 - use updated function to guarantee you
49:39 - get the latest value
49:41 - uh um yeah i was worried about that so
49:44 - you think the problem then is that
49:47 - i'm i'm checking state before state has
49:51 - had a chance to actually update
49:55 - use updater function
50:05 - nikki what's the updater function
50:15 - let me check my time to all right we've
50:17 - got about nine minutes
50:19 - this sets the previous state equals
50:21 - logic all right awesome
50:36 - uh so nikki let me know if i'm using
50:38 - this wrong set state
50:43 - like this
51:06 - yep all right
51:08 - let's see if this works
51:12 - i'm glad we set these as really easy
51:13 - math problems
51:15 - be embarrassing if i couldn't figure out
51:16 - the problems
51:19 - no
51:21 - all right still didn't work actually we
51:22 - can just test to see what comes up
51:24 - anyway all right so we did
51:26 - if we can get one to signal true then we
51:29 - will get this victory to come up okay so
51:32 - it doesn't look great now but
51:34 - at least that that does come up and then
51:36 - i evidently i did this wrong
51:48 - all right let's see hey horseshit's here
51:49 - how's it going
51:55 - because we'll change the number in state
51:57 - first
52:17 - so
52:37 - all right
52:40 - oh okay this pre-state number enemy that
52:42 - would ensure the state is updated and
52:45 - you get the right value
52:48 - all right let's see
52:52 - [Music]
52:56 - all right let me i'm getting a lot of
52:58 - advice here so let me read this so
53:00 - um
53:01 - harsh is saying the syntax is wrong
53:05 - you can use callback as a second
53:06 - parameter
53:08 - uh this free state number of enemies
53:11 - this will ensure the state is updated
53:12 - and you get the right value replace that
53:15 - first set state
53:17 - um
53:20 - syntax is wrong use the second parameter
53:25 - okay
53:33 - all right
53:35 - i did so many
53:36 - so many things here okay
53:38 - um so
53:43 - nikki saying const
53:51 - and call your logic with number two
53:53 - enemies if that
53:56 - all right so nikki's saying i could do
53:58 - const
54:02 - oops and then hardship has one too so
54:06 - michael said start over
54:08 - for number of enemies previous numbers
54:10 - enemies on this one
54:13 - oh i see what you're saying with the
54:15 - callback now
54:17 - all right let me
54:20 - let's uh
54:34 - all right let's
54:36 - so
54:39 - this dot set state
54:43 - previous
54:44 - number of enemies
54:46 - okay so we're setting number of enemies
54:47 - the previous number of enemies minus one
54:50 - and then as our callback
54:53 - then we're gonna do
54:55 - this stuff
55:11 - right
55:16 - what the heck
55:18 - unexpected character
55:39 - hang it i think since i copied and
55:40 - pasted it it's giving me
55:43 - it's messing me up here
55:48 - have to type this out this dot
55:50 - set state
55:53 - tree
56:42 - yeah let me see
56:45 - i guess
56:58 - all right
57:03 - okay
57:14 - let me just copy and paste this for now
57:16 - so i'll type it all out
57:20 - and say
57:35 - um
57:48 - line 32 as the error
57:51 - all right where's my my error here
57:53 - after that first preview number 10 is
57:55 - minus one put
57:58 - uh
57:58 - [Music]
57:59 - this one
58:02 - okay
58:27 - all right there we go
58:37 - i spelled i spelled enemies wrong
58:40 - enemies
58:45 - know what
58:48 - now it's now it's suggesting that
58:50 - spelling to me
58:51 - enemies
58:57 - there we are
59:04 - all right
59:08 - let's uh let's walk through this
59:11 - for my sake and for everybody's sake
59:13 - so
59:15 - um
59:18 - so what we're doing here is saying uh
59:20 - when we go to remove the enemy
59:23 - then we're going to call this set state
59:25 - we're going to look at the previous
59:26 - state
59:28 - and
59:29 - we're going to set the new state the new
59:31 - number of enemies to the previous number
59:34 - of enemies minus one
59:36 - then
59:38 - after that occurs
59:40 - and that's it's in this callback right
59:42 - we're gonna say
59:43 - if the number of enemies is
59:49 - why does it say less than what the heck
59:50 - was i doing um if the number of enemies
59:54 - equals
59:56 - zero
59:58 - then
60:01 - whoa why did i just do that
60:03 - no i copied the wrong stuff
60:06 - dang it
60:07 - um
60:09 - all right let me
60:11 - let me go back here for a second because
60:13 - i totally copied the wrong thing
60:22 - all right so now our ad enemy is here
60:25 - what i wanted to do here was
60:29 - if the number of enemies equals
60:33 - zero
60:35 - then
60:37 - i want to call
60:41 - you won
60:46 - okay
60:53 - all right now let's try this
61:07 - yay i won
61:08 - victory
61:13 - all right my timer definitely buzz what
61:15 - time is it yeah okay so
61:19 - that's pretty
61:21 - i mean we basically achieved what i had
61:24 - hoped to achieve for this one so
61:27 - got a little crazy there at the end
61:32 - but i'm kind of glad we went through
61:33 - that because uh that's some cool syntax
61:36 - and
61:38 - it's nice that that i learned that and
61:40 - that we learn that here on the stream
61:42 - let me commit this
61:55 - for
62:00 - all right so i'm going to git commit uh
62:02 - with the am flag that means we're adding
62:05 - in
62:05 - we're doing a git add then a git commit
62:07 - with the message in line
62:09 - uh i'm saying it's a new feature right
62:12 - and this is we add the logic for single
62:15 - digit edition
62:20 - i'm gonna push that
62:23 - all right cool so that's now on github
62:26 - uh at this point i'm gonna go to the
62:29 - chat and try to get in as many questions
62:31 - as i can
62:36 - and
62:39 - i'm also going to turn on my work labs
62:42 - up just to make sure that i don't have
62:44 - any meetings coming up i don't think i
62:46 - have a meeting but
62:48 - better safe than sorry right
63:02 - okay
63:14 - okay
63:30 - all right i'm gonna skip through like a
63:32 - lot of the discussion and and kind of
63:34 - just focus on questions
63:50 - okay i'm good i don't have any meetings
63:52 - right now so i can't get through this
64:21 - uh okay so mayor says hey uh how can you
64:24 - get the output of
64:26 - a
64:27 - js on microsoft studio 2019
64:32 - um i have no idea
64:36 - so i've never used microsoft studio
64:38 - so sorry about that if anybody knows the
64:40 - answer that question please put it in
64:42 - the chat
64:55 - okay pavin says which one is good for
64:58 - creating a discord bot node.js or python
65:02 - uh i don't i don't really know because
65:04 - i've never created a discord bot if i
65:06 - was going to do it i would do it node.js
65:08 - because i i know node.js and i'm not
65:11 - good with python
65:13 - um so
65:15 - that's just me but i don't know what the
65:18 - official like but if there is a best way
65:21 - to do it i don't i don't know
65:37 - like john hanson says the musketeers are
65:39 - here for our yeah i like so for for
65:41 - those of you that didn't watch before
65:43 - there's a couple of people for that used
65:45 - to watch the live streams regularly uh
65:48 - kind of a couple months back when i was
65:50 - doing them pretty pretty much every day
65:52 - uh so it's it is really cool to have you
65:54 - all have you all back i gotta i i missed
65:58 - i missed hanging out uh all the time you
66:01 - know
66:11 - all right so uh david put in a link to
66:15 - an edx course on game dev so when you
66:18 - paste the link into the chat it's hidden
66:20 - automatically i just unhid it so you all
66:22 - can check that out
66:33 - let's see
66:39 - um is it true so you have a question
66:41 - that says uh is it true if you get a
66:43 - certificate with free code camp i can
66:45 - use it on my resume yeah i mean you do
66:47 - get a certificate at least like an
66:49 - electronic certificate and yeah i would
66:51 - definitely put it on a resume um under
66:54 - like certificates
66:57 - or
66:58 - education you know like i i got a
67:00 - certificate for um
67:02 - the udacity react nano degree program
67:05 - and that that is on my resume so
67:08 - uh i yeah i would definitely put that on
67:10 - there anybody that's familiar with free
67:11 - code camp will know you know what that
67:13 - means
67:24 - is making fun of me here it says looks
67:26 - around for paper and pencil we're having
67:28 - a computer with notepad
67:30 - that's so true i definitely i could have
67:33 - just like i had an editor open
67:35 - why did i think i needed a notepad oh
67:49 - yeah patrick says that background makes
67:51 - you look like a hardcore hacker all
67:54 - right i feel better about it now so
67:58 - that's
68:00 - that's a good way to look at it
68:06 - harshit says oh classes twitter people
68:09 - will say it's a crime now
68:10 - yeah so if
68:13 - now that react hooks are out they're
68:15 - actually not out officially yet in react
68:17 - native so
68:19 - um i think they're gonna come out
68:21 - the latest i saw was either monday or
68:24 - tuesday of next week
68:27 - they'll come out in a stable version
68:30 - 0.59.0
68:34 - but
68:35 - yeah so for now i think classes are
68:37 - still acceptable and react native
68:39 - but otherwise everybody's
68:41 - saying just use hooks right
68:43 - and go with your functional components
68:47 - i'm going to try to add in hooks as much
68:48 - as i can but really realistically
68:51 - i'm so used to classes at this point it
68:53 - would it's faster for me to just use
68:55 - classes
69:00 - john says install a disco ball there's
69:02 - not enough of that effect on coder
69:04 - streams at the moment
69:06 - you know what i'm gonna do
69:08 - about uh once i i get enough uh views on
69:11 - my personal channel to do the um
69:15 - like the super chat
69:16 - i'll make it a thing on the super chat
69:18 - that like if you donate five dollars the
69:21 - like disco ball will spin around and
69:23 - lights will go off or something how
69:24 - about that
69:43 - let's see
69:58 - all right john hanson's
70:00 - just to give you a little bit more info
70:01 - about hooks john says hooks are very
70:03 - simple and efficient when you realize
70:04 - how to get them to work
70:06 - when you change a complex class
70:08 - component with a lot of state props and
70:10 - timing involved to a function
70:12 - getting there yeah a hooks look amazing
70:14 - if you don't know about hooks
70:16 - look up
70:17 - dan abramoff's talk introducing react
70:20 - hooks
70:21 - and um
70:23 - also
70:24 - oh what's his name
70:28 - right after that talk at the same
70:29 - conference uh someone else did a talk
70:32 - where they actually demoed react hooks
70:34 - and i can't remember what this guy's
70:35 - name was like i actually went to an
70:37 - in-person training with him and i can't
70:39 - remember his name
70:41 - um
70:43 - anyway but that was at
70:46 - oh what conference was that at
70:51 - it was like
70:53 - the end
70:54 - end of last year maybe or something that
70:56 - it was announced
70:58 - i don't know if anybody knows what
71:00 - videos i'm talking about if you put the
71:02 - link in the chat i'll unhide the link
71:10 - um kubiworld says what vs code font is
71:12 - that
71:14 - i do not know it's i guess it's whatever
71:17 - the default font was because i don't
71:18 - think i ever changed my font
71:23 - the theme is called seti scti
71:42 - oh nikki says remember the uh prevent
71:45 - default in your submit handler though
71:48 - okay yeah
71:50 - we can
71:54 - so uh nikki's idea
71:56 - earlier we were talking about how i
71:57 - can't right now i can't hit enter to
72:00 - submit
72:01 - so i said if i just make it a form of
72:03 - automatic access accessibility support
72:07 - but i have to remember to prevent
72:08 - default so it doesn't do your normal
72:10 - like post back on the form and refresh
72:12 - the page that's a really good idea
72:16 - i have to make sure though
72:19 - would that work
72:20 - because like in react native would that
72:23 - work if i want to turn it into a
72:26 - a mobile app
72:29 - i have to double check on that
72:37 - uh matt asks says i'm just starting off
72:40 - with python does anyone have any advice
72:41 - on fun codes to learn starting off
72:44 - uh i'm not really sure i don't do much
72:46 - with python
72:50 - oh
72:52 - nikki just said oh does that work in
72:54 - react native so
72:55 - you realize that before i did
73:06 - all right i'm gonna skip a lot here
73:08 - because a lot of it was just that back
73:09 - and forth trying to figure out what
73:11 - syntax i should use
73:13 - uh right here
73:33 - all right uh
73:34 - dash dash mook says please make
73:36 - tutorials on react native navigation in
73:39 - 2019
73:40 - um
73:42 - okay i'll think about that i am
73:45 - i am going to have to work with react
73:46 - native navigation
73:49 - at some point like at my
73:51 - my real job
73:52 - so
73:54 - i'll think about doing a tutorial like
73:55 - when i when i get into that as well
74:07 - uh rabbit work says cheers jesse another
74:09 - fun stream i'll be back for more good
74:10 - luck thanks thanks i appreciate it
74:21 - uh marion says is the source available
74:24 - online yes the source is available
74:26 - online the link is in the description
74:37 - michael says back in the day there only
74:39 - be five or six of us yelling at
74:41 - at freecodecam.org now there's 100.
74:44 - yeah there's a lot a lot more viewers
74:47 - which is great
74:48 - um we were well over 100 viewers at one
74:51 - point we dropped down a little bit now
74:53 - but um yeah it's free code cam channels
74:56 - just took off like there's so many
74:58 - subscribers now
75:06 - um we have any channel for react
75:09 - beginners
75:10 - uh i'm not sure
75:12 - i do have
75:15 - my my channel does have some react stuff
75:17 - on it um
75:20 - i don't know which channel would you all
75:22 - suggest now for react videos
75:28 - oro says another great stream
75:31 - uh i have motivation overdose thank you
75:33 - mr jesse oh you're welcome thanks for
75:36 - watching
75:44 - alright somebody put
75:49 - no
75:49 - [Music]
75:51 - all right somebody did put a link into
75:56 - uh
75:58 - hold on a second
76:00 - let me put a link in
76:01 - [Music]
76:03 - to this react
76:05 - react today and tomorrow 90 cleaner with
76:07 - react hooks this is this is the talk
76:10 - that
76:11 - i was talking about and unfortunately
76:15 - oh there we go all right now it's coming
76:17 - back i lost all the chat for a second
76:19 - because i i clicked on the link and
76:21 - navigated away now it's coming back it's
76:23 - just going to take a second to load
76:26 - but anyway i i pasted that in there
76:30 - i'll also show the the link m4t got the
76:33 - link
76:34 - uh that is the one ryan florence there
76:36 - we go
76:37 - the the man who did the
76:40 - like demo on react hooks where he
76:42 - actually took an existing project and
76:44 - converted it over to using hooks is ryan
76:47 - florence
76:50 - yeah then he is the guy that made react
76:52 - router
77:01 - um nation says uh can i use react
77:05 - for ui
77:06 - validation only without needing back end
77:10 - uh you can use react only on the front
77:12 - end i'm not exactly sure if that's what
77:13 - you're asking but
77:16 - you you can do just front and react
77:23 - um tanya says how many languages do we
77:25 - need to make a responsive website um you
77:28 - can make a responsive site with just
77:29 - html and css
77:31 - if you want to do anything more
77:33 - complicated though you will need
77:34 - javascript
77:37 - somebody asked if the screen is stuck no
77:39 - probably not i'm just not coding right
77:41 - now and
77:42 - i maybe my face was really still
77:49 - um
77:50 - make a video of how to make a ludo star
77:52 - game i don't know what ludo star is so
77:55 - i
77:57 - probably not the right person to make
77:58 - that video
78:01 - all right cool so
78:03 - i think i've gotten through everything
78:04 - if i missed your question i'm sorry you
78:06 - can put it in the
78:07 - comments below the video and i'll try to
78:09 - answer it later or
78:11 - you can wait till the next stream and
78:12 - ask me
78:13 - or you know feel free anybody if you
78:15 - have questions to message me on any
78:17 - social media
78:18 - uh i'm i'm active on twitter and
78:21 - instagram mostly uh the links
78:24 - to uh my social media stuff and my
78:26 - youtube channel are down in the
78:28 - description
78:29 - um so i'll be back next week
78:32 - probably be back on wednesday
78:35 - i may do a graphql tutorial at some
78:39 - point this weekend on my channel so if
78:41 - you're interested in that
78:44 - i'm going to be using apollo server to
78:46 - wrap an existing rest api in
78:49 - graphql
78:52 - so hopefully i can get that done this
78:53 - weekend if you're interested subscribe
78:54 - to my channel
78:56 - um and then you'll be notified whenever
78:58 - whenever that video comes out uh
79:01 - otherwise have a have a great weekend
79:04 - uh thanks for thanks for watching and
79:07 - helping me out and i'll see you next
79:09 - week

Cleaned transcript:

hey everybody welcome to live coding with jesse i'm jesse and today we're going to try to add some logic to our game that we were working on earlier in the week uh let me go to the live chat real quick and say hello oh wow there's a lot in the live chat already um they have goop to ask if uh if i teach react while streaming and if i do a new project every time no we work on the same project usually over a series of streams and i i do try to explain a little bit what i'm doing so it's not really a tutorial but hopefully you'll learn a little bit about react as as we go through the project um nobody savage says hi jesse you beautiful sob you with a little heart emoji thank you i appreciate that all right let's see i'm skipping through a lot there's just a lot of message retracted stuff so that was most of is on here um all right then a couple questions about what we're going to learn about so yeah we're using react native web and that's basically it's basically the same as react native but we are our target right instead of android or ios our target is the dom right the the web so we're building a web app using react native why would we want to do that because eventually first we're going to build a web app but then we're going to also make android app and maybe an ios app out of this and we'll be be able to do that with pretty much the same code so i'm aiming for 90 plus percent uh of the same code to be used everywhere all right so here's the code but let me start with the ui just to give a refresher and for everybody that hasn't seen it yet i'll show you the ui i'm gonna start this pomodoro timer okay when i start this timer if that means for the next 25 minutes i'm going to focus mainly on the code and i'm not really going to look at the chat very often after this timer goes up i'm going to go back to the chat and try to catch up on all the questions there if you have a question just hang in there and i'll get to it in about 25 minutes so here's our ui basic concept is we have our hero over here we have our enemies over here you're given a math problem if you get the problem right one of the enemies disappears if you get all the enemies to disappear you win if you get the problem wrong a new enemy appears right uh and it'll so the the logic that we want to make today is we want to verify that the user has the right answer um or wrong answer right when they enter something in and hit submit and we want to generate uh random math problems right we're only going to worry about addition for now that'll be the the our proof of concept uh our our mvp right is just gonna be addition problems right and that'll basically be level one single digit edition is usually where they start children out so that that'll be level one of our of our math game okay um let's go to the code and well let's decide what we're going to do first um i'd say the first thing i think it'd be easier to do is let's stick with a hardcoded math problem two plus two and then let's try to verify a correct answer first and then if there's a correct answer we'll remove this if one of these enemies if it's a wrong answer we'll add an enemy once we get that down then we'll add in basically changing the problem uh every time yeah every time that's a there's a submission we change the problem okay that'll be step two so step one is just verifying the answer okay so our entire app right now is pretty much just this app.js file for the purposes of the stream it's easier to have everything in this file right now once it starts to get too complicated we can break some of it out um but this just kind of simplifies there's way less clicking around in different files uh because i want the font size to be big enough for you all to see i can't really have screens side by side uh so it does make it harder to have multiple files open all right so we already have our controlled input so we know what the input's going to be and it's going to be in state it's going to be text now let's change that text was what we copied and pasted in here from an example of a controlled input but really it's going to be a number right so let's call it answer it'll might eventually when it gets more complicated it might make it a bit easier to reason about if we say answer is the answer okay so now the value of this input is whatever this state answer is and then every time the text text is entered it changes the state of answer right so text on text or on change text changes the state and change in state triggers a change in value right and that's that's the concept of a controlled input in react okay so we have that and our submit button right now is just console logging well this a text but really it's it's going to be answered but we're going to get rid of this console log because on submit now we're going to check so let's say this dot um check answer right so now let's make a check answer oops and we're going to use an arrow function here for check answer forgot an equals there we go so we're going to use an arrow function uh i definitely recommend using arrow functions inside your your class components because it helps to reason about the value of this um a lot easier and you don't have to worry about binding this somewhere else so uh i prefer this sorry i prefer arrow functions in this case all right so when we check the answer we're gonna say um all right so for now it's gonna be two plus two um let's see how we're going to do this i guess we could just say um this state answer um equals to where's the plus side uh the keyboard i'm using on this computer like for streaming is just um it's a different so my typing is a little off okay and actually so like right now this is very simple check answer is just gonna return true or false um actually um yeah let's change that a little bit check answer returns true or false we don't want to return that though we would say all right so we're going to say let correct equal so basically this is going to return true if it's true obviously false if it's false so if correct is true then we'll say if correct we're going to call this dot remove enemy else we're gonna call dot add enemy okay so we haven't created these yet uh we need to though so i'm going to add enemy remove enemy and then no matter what we need to after that uh say this dot um new problem so we're we're going to actually let me just put this outside of it since we're going to do it no matter what so new problem so every time we check an answer no matter what happens we're going to get a new problem and then depending on the whether the answer is right or wrong we're going to either add or remove an enemy okay and yeah that's going to run okay all right i'm just gonna save this just to make sure we don't have any uh like syntax errors going on okay everything looks good let me check my timer too okay in about 15 minutes i'm gonna go back to the chat and let's create some of these remove enemies at enemies i think i may want to do it like this um enemy enemies uh how about this about number of enemies so we're gonna start always we're gonna start with three for now and then our remove enemy and add enemy is just going to affect the state so we can say remove enemy we'll do this dot set state and we're going to say number of enemies is gonna be number of enemies plus oops minus one sorry almost added one okay for this one we'll just do a plus sign and we'll change this to add okay all right so now we should be able to test out whether or not this is working we're not doing anything with the ui yet we haven't defined this we'll probably get an error when i try to do that so let's define this at least oops new problem okay so new problem for now is just going to log something console log new just to make sure it's working all right okay so let's try this so let's look at our our state so here's our uh you can't oh yeah you can see that i wonder if i can make it bigger though okay so you should be able to see hopefully this number of enemies three and we should see this number change so let's try to do so already see our answer changed right let's submit all right so we got it wrong so now the number enemies is four we got it okay i think i know what's happening let's answer we need to change this state answer to be a number so let's check really quick um string to number and java no that's not what i wanted i don't want a number with comma i just want to string to a number parseint there we go for now person will work i don't think we're going to be dealing with decimals uh since this is a very basic math game so let's just go with parse int normally uh i would recommend going to mozilla developer network so that's a great resource if you check out mdn there's so much info on on everything and then examples so that's usually the first thing to come up when you look up something like that it wasn't this time but i i definitely recommend mozilla developer network so it's developer.mozilla.org okay but anyway for for our purposes uh for parse in it takes two arguments so the first one is whatever the string is that you're trying to turn into an integer and then the second one is the uh the the base so um like we could do like base 16 which is like hex stuff base 2 which is binary in this case we want base 10 which is the normal number system that that we're using right so let's do that we'll go back to our code and say pars int so our first argument is our string and our second argument is the base base 10 might be the default i'm not sure but it's not going to hurt to put 10 in there it'll make it clear to anybody that we are using base 10 which most of the time you're probably going to use base 10. let's save that and see if that was the issue let's see so number of enemies is three there we are okay so the issue was simply that it was comparing a string to a number and those of course are not going to be equal right so even if it seemed like it was the right answer it wasn't because behind the scenes it was comparing two different types and so let's let's verify that the wrong answer still increases yep all right awesome so our logic works there the next step would be to actually add or remove enemies on the screen and i think i'm maybe almost all right eight minutes in about eight minutes i'm gonna go back to the chat and um and answer some questions i can i can see there's a lot going on in the chat so uh hang in there i will get to the chat soon oh we got a lot of viewers so hey everybody thanks for watching so here is where we are actually adding in the enemies so what we want to do now is add in enemies based on the value of in state of number of enemies so now we're gonna do we're gonna drop into some javascript right so in react inside of a component that kind of looks like html this is called jsx we can do javascript if we put these little curly brackets and so we're going to do this state number of enemies and see how we'll do this i guess i was gonna normally when i do this i'm like going over an object so all right this is this is not normally i'm just like here take this bit of data that's an array and let's map over it right but that's not the case we just we actually just have a number okay at some point it might be different if we have different types of enemies but for now let's just say we can do a for loop actually now i'm confused i don't think i've ever tried to do uh like a a loop just a simple loop in uh inside of jsx all right well let's give it a shot i don't think you can do a for loop though let's check this out actually i do want to look this up so let's say uh loop in jsx there we are how to loop inside react um let's go to stack overflow first let's see um trying to do loop okay yeah that's basically what we're trying to do i'll make this bigger you can't lose use a for loop yeah you can make an array and pass that as an argument okay hmm all right yeah i think we're gonna situation off and map is a good answer yeah i think we're gonna have to make an array and then maybe map over that oh actually that arrow function stop map all right this looks interesting let's look into this all right let's try this uh the idea is we're going to use this a spread operator to basically just create an array on the fly and then map over that i like that i like that idea let's try that let's just copy this for now and we'll modify it as we need it okay so in here this will have this so i also don't need these curly brackets i already have them and this is gonna be this state um number of enemies we're gonna map over that i don't know why we're gonna have i don't really need x i just need i and in that case i don't need these i don't need this object row but i would like to have this key okay i'll explain what i just did here okay so what i think is gonna happen we'll see uh is that an array will be created with the the number of elements in the array will be equal to the number of enemies then we'll map over that we're going to get the uh the index of of each one of these and add it as a key so in react any time you're you're adding the same elements uh to to the dom you need to have a key to differentiate the the elements okay all right so let's see if that works so you should be able to tell right away hey cool number of enemies now we don't actually even need to do the math we could just change it four nice let's see how it does when we add a bunch whoa 12 okay so yeah so for right now this is imperfect because right once we get high enough up there it it's just a wall of enemies so we'll have to add in some logic to handle that uh maybe drop into like two rows like we'll figure that out but for now basically you know this works right uh probably the best thing to do for now would be to place a limit like you know they'll never be more than let's say if with the six work yeah so like let's say they'll never be more than six enemies at once we won't let you get above six and that'll be like a temporary solution to that issue um we can add this in i guess to add enemies if a number of enemies if this state number of enemies is less than six then we will do this okay so otherwise we won't so let's uh let's try this out again say like so we can see i can never get more than six enemies at once that's not bad realistically like if there were a kid you know a young kid learning math and he kept getting the answer he or she kept getting the answer wrong it would be pretty discouraging if there were a ton of enemies they'd feel like they'd never be able to win so this is probably a reasonable thing to do anyway uh all right cool so the timer just went off so i'm gonna set five minute break here and go back to the chat answer as many questions as i can let me scroll up a bit let's see where i left off wow there's a lot in the chat i'll try to do as much as i can i don't know if i'm gonna get through it all in five minutes though uh all right so education says uh hello bro can we add native code in react native project yes you can add native so i'm assuming you're you're talking about adding um like native android or ios code right in that case the answer is yes so there's there are definitely ways to do that so i mean i would like look at the documentation for specifically how you would do that in android or ios let's see oh michael says i know what proof of concept is what is nvp uh mvp is minimum viable product so sometimes you'll hear people talk about really a proof of concept um is usually like a step before minimum viable product so your proof of concept is just like okay like is this idea like even doable at all like we need something to show like people higher up in the organization that this actually can work and then your minimum viable product would be what you actually launch with um so they might be like your your very first version of the product it's supposed to be like have minimum functionality and the idea is that you would then add functionality as it becomes more popular oh and i see mana already said it so thanks for that and amman uh put the link right in there to uh be able to use native code with with react native so thank you so much a lot of people are saying hi i'm just going to wave and say hi to everybody because i don't want to take up um too much time since we only have an hour let's see if he's been on programming uh ahmed says i want to learn programming uh that's awesome uh nino says are there any free courses for game developers i'm sure they're out there i don't know of any good ones myself because i i don't normally really do game development but if anybody in the chat knows of any good free courses you know let let nino know please uh wallace says i need a 3js tutorial anyone here can help me yeah i don't know of any tutorials in 3js off the top of my head but if somebody does please put that in the chat menthon says every time i open programming live stream the first word i hear is um i apologize for that i noticed on the last stream that i was saying um a lot more i think i'm out of practice you know when i used to stream pretty much every day i don't think i was as bad and now that i've gotten out of practice i i think i'm not communicating as well as i did before so i'm gonna work on that i'm gonna try it definitely takes mental effort to stop myself from saying it dragon hunter says i'm just getting interested in writing a react native game using a webview component and boom a live coding with jesse oh awesome that's really cool that that worked like that nobody savage says hit that like button awesome so my uh i i do have to say this so my team at work is i'm going to keep the story short but like basically they claim that they that at on one of my live streams i ended with smash that like button fam i never remember saying that and they've never been able to actually show me the stream where that happened but they always want me to actually say it so i'm gonna say it just one time to make them happy so anybody watching right now smash that like button fam all right there i i said it now it's it's uh official um rabbitworks says make your life easier and either do it fully native views or just do react at building apps to run inside a webview component is counterproductive um yeah actually so dragon hunter was talking about doing a native game inside a webview yeah i don't i don't think you need the the webview um yeah i would try to do if you're gonna do react native you know just do react native uh don't worry about the the webview if if you can do it i mean if there's some reason why you need the webview that's cool obviously i don't know the details of the project but uh you know i do recommend that there are advantages to not doing the the webview all right let me i don't have any pens or anything to write with i was going to write down where i left off so i could find it later but ah here it is i had a cup with pens in it and it just got knocked over so let's see all right oh wait a second it's not giving me time stamps no toggle times there we go i had had the time stamps turned off okay now i should be able to get right back to where i left off in the chat so if i didn't get to your question right now i will get to it after our next pomodoro session all right so where do we leave off at right now we can add and remove enemies depending on whether or not we get the correct answer but we still only have two plus two next step let's give a random math problem for now the constraints are we want it to be single digit addition so it's always going to be addition and it's always going to be something that is uh zero through nine okay so that should be pretty simple you know given those constraints i i just noticed uh nikki says loving the beige screen green screens are overrated it's jus it's this is a temporary office in the corner of my basement those are tablecloths hanging up to make walls so everybody gets on me for my my terrible looking office but i am i made a bid i put a bid in on a house and i think everything's gonna work out i'm gonna move and uh the house will have uh it has a basement that has enough space for me to build a real office in so hopefully it'll be a little bit better of a background i'll try to do like soundproofing and stuff and make it a legit office that i can do these youtube streams from okay let's see how we're gonna do this let's make some of this in state so i guess we can just make two values in state and then set them to a random number each time right okay um about one and let's just start out with 0 about 2 0 and let's make random number so we're just going to make a function that will give us a random number we probably don't need a random number function i could just do this but let's just let's do it since we we wouldn't we already did this uh so actually i'll just look up the syntax instead of messing it up and then looking it up um random number there we are so math random there's what i wanna i knew we'd have to do math floor um get random and that's basically what we want right um it's output all right cool yeah this is perfect let's just take all of this um but i'm just gonna take this much okay so our random number generator um is we're gonna give it a max and this is actually good because right now we only want like one through nine but eventually we could increase the difficulty of the game by giving this a higher max right so then what we can do is oop you know we already have a new problem don't we we do okay so when we go for a new problem it could just be this dot set state and we'll go val 1 is going to be this dot um randomnum and we'll say max is nine and then we'll do the same thing here for val2 let's make sure i got that number right um if we pass in three okay let's pass in 10 then okay uh all right so this should give us when you say new problem all right great now let's plug in there's gonna be a couple places we're gonna we're going to need to plug in these values so here it's going to be this state oops val one state val 2. okay so now we'll actually know what the the values are the problem that comes up and then in our ui we also want to have the correct values where do we have that so instead of hard coding two plus two we'll do this state oops we gotta put these in in brackets here so this state one and this state vowel two all right let's try that out it should we should see zero zero first and this should actually be zero wait did we get the wrong answer for that hold on a second zero plus zero should equal zero right what what the heck why did that happen okay that one is zero well two is zero our answer is going to be zero right all right we found a bug for some reason when the answer is zero um it doesn't work that's not going to matter for right now we will have to solve that eventually like when we get to um let's say i'm i'm basically just gonna skip it for now right let me see if somebody oh did i misspell something all right sorry where did i misspell masso says i mistyped val1 and i wrote va1 okay let's see where did i do that va1 all right thank you i'm glad i looked up there all right let's test this out now all right let's try zero zero all right that works now now i don't want the first problem to always be zero plus zero so we're going to do component did mount and on component did mount we are going to call new problem right so now we should get a random problem every time right so we're going to refresh random problem random problem great let's play through the game uh and just to make sure that it works so oops you know what i just noticed we didn't uh add a way for the user to press enter and for this to work so let's do that oh three plus six i'm interested to see what will happen now will it go negative ah we got an error cool so we definitely need to make sure we can't go negative so let's say when we go to check the answer if it's correct we remove the enemy and then let's check and say if this state number number of enemies equals zero then we'll say let's say display u1 i'm just going to name the function u1 because that sounds cool right this this dot u1 u1 is going to for now all it's going to do is just display um state it's going to set states and we'll go this state 1 which will create that value oops that's not what i want i'm just going to say 1 equals true and yeah for now that's that's what we'll do so we'll say one equals true and then up here let's add one false all right uh anytime you have anything that's going to affect the ui at all you probably want to keep track of it in state because a change in state will trigger a rerender of the component and that's what you want to change your ui so if that happens we're going to want to display let's see so instead of this math container let's just put in one if one is true then let's put in this um let's just say victory and then otherwise let's display this this view right and this obviously isn't styled yet oh yeah i say this state one right all right so let's see if that works and we can skip the actual game and just set this right no all right let's try it again if this one's nine oh yeah you know what it hm one is still false all right i think there's something wrong with my logic here so let me check up here um let's see all right so we're checking so we're doing this dot remove enemy which should take the state down and then we're checking for if the state number of enemies is equal to zero you know we could do i mean we probably could move this honestly to here anyway um okay all right let's see now uh 9 14 4. hmm still something wrong with it let me see shouldn't it be inside the if all right let's see okay nikki said this headstate is not sync use updated function to guarantee you get the latest value uh um yeah i was worried about that so you think the problem then is that i'm i'm checking state before state has had a chance to actually update use updater function nikki what's the updater function let me check my time to all right we've got about nine minutes this sets the previous state equals logic all right awesome uh so nikki let me know if i'm using this wrong set state like this yep all right let's see if this works i'm glad we set these as really easy math problems be embarrassing if i couldn't figure out the problems no all right still didn't work actually we can just test to see what comes up anyway all right so we did if we can get one to signal true then we will get this victory to come up okay so it doesn't look great now but at least that that does come up and then i evidently i did this wrong all right let's see hey horseshit's here how's it going because we'll change the number in state first so all right oh okay this prestate number enemy that would ensure the state is updated and you get the right value all right let's see all right let me i'm getting a lot of advice here so let me read this so um harsh is saying the syntax is wrong you can use callback as a second parameter uh this free state number of enemies this will ensure the state is updated and you get the right value replace that first set state um syntax is wrong use the second parameter okay all right i did so many so many things here okay um so nikki saying const and call your logic with number two enemies if that all right so nikki's saying i could do const oops and then hardship has one too so michael said start over for number of enemies previous numbers enemies on this one oh i see what you're saying with the callback now all right let me let's uh all right let's so this dot set state previous number of enemies okay so we're setting number of enemies the previous number of enemies minus one and then as our callback then we're gonna do this stuff right what the heck unexpected character hang it i think since i copied and pasted it it's giving me it's messing me up here have to type this out this dot set state tree yeah let me see i guess all right okay let me just copy and paste this for now so i'll type it all out and say um line 32 as the error all right where's my my error here after that first preview number 10 is minus one put uh this one okay all right there we go i spelled i spelled enemies wrong enemies know what now it's now it's suggesting that spelling to me enemies there we are all right let's uh let's walk through this for my sake and for everybody's sake so um so what we're doing here is saying uh when we go to remove the enemy then we're going to call this set state we're going to look at the previous state and we're going to set the new state the new number of enemies to the previous number of enemies minus one then after that occurs and that's it's in this callback right we're gonna say if the number of enemies is why does it say less than what the heck was i doing um if the number of enemies equals zero then whoa why did i just do that no i copied the wrong stuff dang it um all right let me let me go back here for a second because i totally copied the wrong thing all right so now our ad enemy is here what i wanted to do here was if the number of enemies equals zero then i want to call you won okay all right now let's try this yay i won victory all right my timer definitely buzz what time is it yeah okay so that's pretty i mean we basically achieved what i had hoped to achieve for this one so got a little crazy there at the end but i'm kind of glad we went through that because uh that's some cool syntax and it's nice that that i learned that and that we learn that here on the stream let me commit this for all right so i'm going to git commit uh with the am flag that means we're adding in we're doing a git add then a git commit with the message in line uh i'm saying it's a new feature right and this is we add the logic for single digit edition i'm gonna push that all right cool so that's now on github uh at this point i'm gonna go to the chat and try to get in as many questions as i can and i'm also going to turn on my work labs up just to make sure that i don't have any meetings coming up i don't think i have a meeting but better safe than sorry right okay okay all right i'm gonna skip through like a lot of the discussion and and kind of just focus on questions okay i'm good i don't have any meetings right now so i can't get through this uh okay so mayor says hey uh how can you get the output of a js on microsoft studio 2019 um i have no idea so i've never used microsoft studio so sorry about that if anybody knows the answer that question please put it in the chat okay pavin says which one is good for creating a discord bot node.js or python uh i don't i don't really know because i've never created a discord bot if i was going to do it i would do it node.js because i i know node.js and i'm not good with python um so that's just me but i don't know what the official like but if there is a best way to do it i don't i don't know like john hanson says the musketeers are here for our yeah i like so for for those of you that didn't watch before there's a couple of people for that used to watch the live streams regularly uh kind of a couple months back when i was doing them pretty pretty much every day uh so it's it is really cool to have you all have you all back i gotta i i missed i missed hanging out uh all the time you know all right so uh david put in a link to an edx course on game dev so when you paste the link into the chat it's hidden automatically i just unhid it so you all can check that out let's see um is it true so you have a question that says uh is it true if you get a certificate with free code camp i can use it on my resume yeah i mean you do get a certificate at least like an electronic certificate and yeah i would definitely put it on a resume um under like certificates or education you know like i i got a certificate for um the udacity react nano degree program and that that is on my resume so uh i yeah i would definitely put that on there anybody that's familiar with free code camp will know you know what that means is making fun of me here it says looks around for paper and pencil we're having a computer with notepad that's so true i definitely i could have just like i had an editor open why did i think i needed a notepad oh yeah patrick says that background makes you look like a hardcore hacker all right i feel better about it now so that's that's a good way to look at it harshit says oh classes twitter people will say it's a crime now yeah so if now that react hooks are out they're actually not out officially yet in react native so um i think they're gonna come out the latest i saw was either monday or tuesday of next week they'll come out in a stable version 0.59.0 but yeah so for now i think classes are still acceptable and react native but otherwise everybody's saying just use hooks right and go with your functional components i'm going to try to add in hooks as much as i can but really realistically i'm so used to classes at this point it would it's faster for me to just use classes john says install a disco ball there's not enough of that effect on coder streams at the moment you know what i'm gonna do about uh once i i get enough uh views on my personal channel to do the um like the super chat i'll make it a thing on the super chat that like if you donate five dollars the like disco ball will spin around and lights will go off or something how about that let's see all right john hanson's just to give you a little bit more info about hooks john says hooks are very simple and efficient when you realize how to get them to work when you change a complex class component with a lot of state props and timing involved to a function getting there yeah a hooks look amazing if you don't know about hooks look up dan abramoff's talk introducing react hooks and um also oh what's his name right after that talk at the same conference uh someone else did a talk where they actually demoed react hooks and i can't remember what this guy's name was like i actually went to an inperson training with him and i can't remember his name um anyway but that was at oh what conference was that at it was like the end end of last year maybe or something that it was announced i don't know if anybody knows what videos i'm talking about if you put the link in the chat i'll unhide the link um kubiworld says what vs code font is that i do not know it's i guess it's whatever the default font was because i don't think i ever changed my font the theme is called seti scti oh nikki says remember the uh prevent default in your submit handler though okay yeah we can so uh nikki's idea earlier we were talking about how i can't right now i can't hit enter to submit so i said if i just make it a form of automatic access accessibility support but i have to remember to prevent default so it doesn't do your normal like post back on the form and refresh the page that's a really good idea i have to make sure though would that work because like in react native would that work if i want to turn it into a a mobile app i have to double check on that uh matt asks says i'm just starting off with python does anyone have any advice on fun codes to learn starting off uh i'm not really sure i don't do much with python oh nikki just said oh does that work in react native so you realize that before i did all right i'm gonna skip a lot here because a lot of it was just that back and forth trying to figure out what syntax i should use uh right here all right uh dash dash mook says please make tutorials on react native navigation in 2019 um okay i'll think about that i am i am going to have to work with react native navigation at some point like at my my real job so i'll think about doing a tutorial like when i when i get into that as well uh rabbit work says cheers jesse another fun stream i'll be back for more good luck thanks thanks i appreciate it uh marion says is the source available online yes the source is available online the link is in the description michael says back in the day there only be five or six of us yelling at at freecodecam.org now there's 100. yeah there's a lot a lot more viewers which is great um we were well over 100 viewers at one point we dropped down a little bit now but um yeah it's free code cam channels just took off like there's so many subscribers now um we have any channel for react beginners uh i'm not sure i do have my my channel does have some react stuff on it um i don't know which channel would you all suggest now for react videos oro says another great stream uh i have motivation overdose thank you mr jesse oh you're welcome thanks for watching alright somebody put no all right somebody did put a link into uh hold on a second let me put a link in to this react react today and tomorrow 90 cleaner with react hooks this is this is the talk that i was talking about and unfortunately oh there we go all right now it's coming back i lost all the chat for a second because i i clicked on the link and navigated away now it's coming back it's just going to take a second to load but anyway i i pasted that in there i'll also show the the link m4t got the link uh that is the one ryan florence there we go the the man who did the like demo on react hooks where he actually took an existing project and converted it over to using hooks is ryan florence yeah then he is the guy that made react router um nation says uh can i use react for ui validation only without needing back end uh you can use react only on the front end i'm not exactly sure if that's what you're asking but you you can do just front and react um tanya says how many languages do we need to make a responsive website um you can make a responsive site with just html and css if you want to do anything more complicated though you will need javascript somebody asked if the screen is stuck no probably not i'm just not coding right now and i maybe my face was really still um make a video of how to make a ludo star game i don't know what ludo star is so i probably not the right person to make that video all right cool so i think i've gotten through everything if i missed your question i'm sorry you can put it in the comments below the video and i'll try to answer it later or you can wait till the next stream and ask me or you know feel free anybody if you have questions to message me on any social media uh i'm i'm active on twitter and instagram mostly uh the links to uh my social media stuff and my youtube channel are down in the description um so i'll be back next week probably be back on wednesday i may do a graphql tutorial at some point this weekend on my channel so if you're interested in that i'm going to be using apollo server to wrap an existing rest api in graphql so hopefully i can get that done this weekend if you're interested subscribe to my channel um and then you'll be notified whenever whenever that video comes out uh otherwise have a have a great weekend uh thanks for thanks for watching and helping me out and i'll see you next week
