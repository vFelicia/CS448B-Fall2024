With timestamps:

00:00 - functions are one of the fundamental
00:02 - building blocks of javascript a function
00:04 - is a javascript procedure which is just
00:07 - a set of statements that performs a task
00:09 - or calculates a value to use a function
00:12 - you must define it somewhere in the
00:13 - scope from what you want to call it a
00:15 - function definition which is also called
00:17 - a declaration or function statement
00:20 - consists of the function keyword so in
00:23 - this example here's the function keyword
00:25 - and then there's also going to be the
00:26 - name of the function which is square in
00:28 - this case so you're you're always going
00:30 - to have this keyword function it's
00:32 - always going to be function the name is
00:33 - always going to be different and this
00:35 - function is called square because that's
00:37 - what we're going to do in the function
00:38 - we're going to square a number now
00:40 - you're also going to have a list of
00:41 - arguments to the function enclosed in
00:44 - parentheses so the argument in this
00:46 - function is number this is the uh what
00:48 - we're going to pass into the function
00:51 - these are called parameters which are
00:53 - variables that act as placeholders for
00:56 - the values that are to be input into a
00:59 - function when it is called so you're
01:01 - going to input or pass these values into
01:03 - the function
01:05 - so when you call the function
01:07 - you are going to write the you're going
01:09 - to type the word square but you're not
01:10 - going to type the word number you are
01:12 - going to pass in a number and this
01:15 - becomes a variable within the scope of
01:17 - the function
01:18 - the last thing the function hat is going
01:20 - to have which is the main body part of
01:22 - the function are the statements that
01:24 - define the function these are enclosed
01:26 - in these curly brackets
01:28 - so some function
01:30 - some functions will have a lot of lines
01:31 - this one just has one line
01:34 - and you can see the return keyword
01:36 - that's going to return something from
01:38 - the function when you call the square
01:40 - function it's going to return number
01:42 - times number which is how you square a
01:44 - number you multiply a number by itself
01:46 - so here's how you could call that
01:48 - function i'm going to pass in that
01:51 - function into console.log so we can log
01:54 - the the answer to that function i'm
01:56 - going to put square
02:00 - four
02:02 - and when we run that we can see it's
02:04 - going to log 16. we're going to call
02:06 - square which is the function instead of
02:08 - the word number we're gonna pass in four
02:11 - and it's going to return number times
02:13 - number which is four times four and then
02:15 - when we it'll console.log what this
02:17 - returns
02:18 - okay here's another another function and
02:21 - i'm going to use this as an example to
02:23 - explain scope in javascript scope refers
02:26 - to the visibility of variables so
02:28 - variables that are defined outside of a
02:30 - function block have a global scope so
02:33 - here's the actual function the function
02:34 - is my fun we're not going to pass in any
02:37 - variables or parameters or arguments
02:40 - and it's just going to console.log some
02:42 - var which is defined before the function
02:46 - so because this variable is defined
02:48 - before the function
02:50 - it is a global variable
02:52 - and so then the func the variable can be
02:55 - accessed inside the functions
02:57 - however variables which are declared
02:59 - within a function
03:01 - as well as the function parameters have
03:03 - local scope that means they're only
03:05 - visible within that function so let's
03:08 - call
03:09 - mindfun
03:11 - and so that's
03:12 - how you would call a function that does
03:15 - not have any parameter or anything you
03:16 - just have to put parentheses after the
03:18 - name of the function if we run that
03:21 - and you can see it's going to
03:23 - console.log hat even though hat is not
03:26 - within the function
03:27 - so a variable defined within the
03:29 - function is a local variable
03:33 - so a local variable can actually have
03:35 - the same name as a global variable so
03:38 - here some we have varsamvar equals hat
03:41 - var sumvar equals shoes these are the
03:43 - same name so when they have the same
03:46 - name a local variable is going to take
03:48 - precedence over the global variable
03:52 - so if we run that
03:54 - it's going to say shoes over here
03:57 - but now if we do console.log
04:02 - some var
04:04 - and we're going to run that
04:07 - so it's going to console.log shoes here
04:10 - but when i console.log sumvar again
04:13 - it's going to console.log hat
04:15 - because this is a local variable and
04:18 - it's not accessible from outside the
04:20 - function so when i try to console.log
04:23 - the variable outside the function we're
04:25 - console.logging the global variable that
04:28 - we define outside the function
04:30 - and now i'm going to talk about nesting
04:32 - a function within another function
04:36 - so when you nest a function within
04:38 - another function or when you put a
04:40 - function inside a function
04:42 - the nested or inner function is private
04:45 - to its containing outer function
04:48 - so in this example we have the function
04:51 - add square
04:53 - and
04:54 - this function is this whole block here
04:57 - but inside that function is another
04:59 - function the function is square
05:03 - so the inner function which is square
05:06 - can only be accessed from the statements
05:09 - in the outer function
05:11 - so you can see this inner function
05:13 - square we're accessing it here we're
05:15 - calling the inner function here and here
05:18 - if we were um here and we called square
05:21 - it wouldn't work we would get an error
05:23 - because that's outside
05:26 - of the function the inner function can
05:27 - be only
05:28 - accessed within the function that it's
05:30 - in the inner function forms a closure
05:32 - the inner function the inner function
05:34 - can use the arguments and variables of
05:36 - the outer function while the outer
05:38 - function cannot use the arguments and
05:40 - variables of the inner function
05:42 - learn more about closures in my closure
05:44 - video a is going to equal add square and
05:46 - we're going to pass in two values 2 and
05:49 - 3.
05:50 - so we passed in two and three here
05:53 - now we're going to ignore this for now
05:55 - because we're not calling it yet but now
05:57 - we're going to return
05:59 - square okay here we are calling it we're
06:01 - going to pass in a
06:03 - which is going to be 2
06:04 - and it's going to square it 2 times 2 is
06:06 - 4.
06:08 - now we're going to add that and we're
06:09 - going to call square again we're going
06:11 - to pass in b which is 3 so it's going to
06:14 - pass in 3 and do 3 times 3 which is 9.
06:17 - so now we have 4 plus 9 equals 13 and
06:20 - that's going to return 13. you could
06:22 - console.log it or use it in another
06:24 - function we also can do this if you pass
06:26 - in three and four you're going to get 25
06:28 - if you pass in four and five you're
06:29 - going to get 41.
06:30 - another thing to know is that a function
06:32 - declaration is hoisted that means no
06:34 - matter where it is in the code it's kind
06:36 - of brought up to the top of the code
06:39 - so let me show you what i mean by that
06:43 - so look what i did here i had
06:45 - console.log and then i'm calling the add
06:47 - squares function
06:49 - which actually isn't defined until right
06:51 - after that line over here so i'm passing
06:54 - in 1 and 3 1 squared is 1 3 squared is 9
06:56 - 1 1 plus 9 is 10 and it's going to
06:59 - control that log 10.
07:01 - you can call a function before
07:04 - it is actually appears in the code see
07:07 - my hoisting video for more information
07:09 - about that well that's the basics of
07:11 - functions thanks for watching my name is
07:13 - beau carnes don't forget to subscribe
07:15 - and remember use your code for good

Cleaned transcript:

functions are one of the fundamental building blocks of javascript a function is a javascript procedure which is just a set of statements that performs a task or calculates a value to use a function you must define it somewhere in the scope from what you want to call it a function definition which is also called a declaration or function statement consists of the function keyword so in this example here's the function keyword and then there's also going to be the name of the function which is square in this case so you're you're always going to have this keyword function it's always going to be function the name is always going to be different and this function is called square because that's what we're going to do in the function we're going to square a number now you're also going to have a list of arguments to the function enclosed in parentheses so the argument in this function is number this is the uh what we're going to pass into the function these are called parameters which are variables that act as placeholders for the values that are to be input into a function when it is called so you're going to input or pass these values into the function so when you call the function you are going to write the you're going to type the word square but you're not going to type the word number you are going to pass in a number and this becomes a variable within the scope of the function the last thing the function hat is going to have which is the main body part of the function are the statements that define the function these are enclosed in these curly brackets so some function some functions will have a lot of lines this one just has one line and you can see the return keyword that's going to return something from the function when you call the square function it's going to return number times number which is how you square a number you multiply a number by itself so here's how you could call that function i'm going to pass in that function into console.log so we can log the the answer to that function i'm going to put square four and when we run that we can see it's going to log 16. we're going to call square which is the function instead of the word number we're gonna pass in four and it's going to return number times number which is four times four and then when we it'll console.log what this returns okay here's another another function and i'm going to use this as an example to explain scope in javascript scope refers to the visibility of variables so variables that are defined outside of a function block have a global scope so here's the actual function the function is my fun we're not going to pass in any variables or parameters or arguments and it's just going to console.log some var which is defined before the function so because this variable is defined before the function it is a global variable and so then the func the variable can be accessed inside the functions however variables which are declared within a function as well as the function parameters have local scope that means they're only visible within that function so let's call mindfun and so that's how you would call a function that does not have any parameter or anything you just have to put parentheses after the name of the function if we run that and you can see it's going to console.log hat even though hat is not within the function so a variable defined within the function is a local variable so a local variable can actually have the same name as a global variable so here some we have varsamvar equals hat var sumvar equals shoes these are the same name so when they have the same name a local variable is going to take precedence over the global variable so if we run that it's going to say shoes over here but now if we do console.log some var and we're going to run that so it's going to console.log shoes here but when i console.log sumvar again it's going to console.log hat because this is a local variable and it's not accessible from outside the function so when i try to console.log the variable outside the function we're console.logging the global variable that we define outside the function and now i'm going to talk about nesting a function within another function so when you nest a function within another function or when you put a function inside a function the nested or inner function is private to its containing outer function so in this example we have the function add square and this function is this whole block here but inside that function is another function the function is square so the inner function which is square can only be accessed from the statements in the outer function so you can see this inner function square we're accessing it here we're calling the inner function here and here if we were um here and we called square it wouldn't work we would get an error because that's outside of the function the inner function can be only accessed within the function that it's in the inner function forms a closure the inner function the inner function can use the arguments and variables of the outer function while the outer function cannot use the arguments and variables of the inner function learn more about closures in my closure video a is going to equal add square and we're going to pass in two values 2 and 3. so we passed in two and three here now we're going to ignore this for now because we're not calling it yet but now we're going to return square okay here we are calling it we're going to pass in a which is going to be 2 and it's going to square it 2 times 2 is 4. now we're going to add that and we're going to call square again we're going to pass in b which is 3 so it's going to pass in 3 and do 3 times 3 which is 9. so now we have 4 plus 9 equals 13 and that's going to return 13. you could console.log it or use it in another function we also can do this if you pass in three and four you're going to get 25 if you pass in four and five you're going to get 41. another thing to know is that a function declaration is hoisted that means no matter where it is in the code it's kind of brought up to the top of the code so let me show you what i mean by that so look what i did here i had console.log and then i'm calling the add squares function which actually isn't defined until right after that line over here so i'm passing in 1 and 3 1 squared is 1 3 squared is 9 1 1 plus 9 is 10 and it's going to control that log 10. you can call a function before it is actually appears in the code see my hoisting video for more information about that well that's the basics of functions thanks for watching my name is beau carnes don't forget to subscribe and remember use your code for good
