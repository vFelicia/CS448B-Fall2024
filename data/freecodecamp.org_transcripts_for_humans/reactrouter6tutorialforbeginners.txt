With timestamps:

00:00 - React router is extremely 
common to use in React projects.  
00:04 - John Smith yoga has created many popular courses. 
And now he will teach you about React router.  
00:10 - What's up everybody? This is John from coding. 
And welcome to React Router six tutorial video.  
00:17 - Now, if you're not familiar with React Router, 
it's an awesome library that mentioned building  
00:22 - single page applications with React a breeze. So 
unlike the traditional multi page applications,  
00:30 - where we run back to the server 
every time we navigate to the page  
00:35 - with single page applications, we load all of our 
HTML and JavaScript in one page, more specifically  
00:43 - in one div, and handle the rest of the logic 
with the help of JavaScript. And as a result, our  
00:50 - project get that snappy app light feel. Now, since 
react does not have built in routing solutions,  
00:59 - that's why we reach for extra library. And 
by far, the most popular option out there  
01:05 - is React router. And version six is 
just the latest and greatest option  
01:09 - with a bunch of cool new features and custom 
hooks. So if we take a look at the typical multi  
01:16 - page application, we'll notice that every time we 
navigate to a page, we trigger full page refresh,  
01:26 - because browser needs to run back to the 
server, get a competence and display them.  
01:34 - Unlike the React application, where changes happen 
instantly. Notice, get this snappy response. And  
01:44 - the reason for that is because we have single page 
application. So like I said, we have single page.  
01:51 - More specifically, we have a single div with an 
id of root. And then all the changes then handled  
01:59 - by JavaScript, and therefore the contents of 
the page, load instantly without the full page  
02:06 - refresh. In order to follow along, you'll need a 
star and it's located in this repo. So look for  
02:13 - my GitHub, and then more specifically 
the repo by the name of React Router,  
02:18 - six tutorial, then I'm going to go for download 
option. After that, navigate my downloads,  
02:26 - crack it open, drag and drop. So now it's sitting 
on my desktop, then I think I'll rename it,  
02:35 - I'm just gonna go with React Router, how's that I 
want to open up Visual Studio Code, drag and drop,  
02:44 - set right away, side by side with a browser. And 
LAN, we want to open up the integrated terminal.  
02:54 - And we want to go with npm install, and right away 
npm start. And essentially, this is a boilerplate  
03:04 - react application. Effectively I created with 
create react app. And in here, you'll just find  
03:10 - some useful resources. So we don't have to type 
out some boilerplate code. So in the source,  
03:18 - there's a final folder, where you'll find 
complete application. So if you ever need to  
03:24 - reference the code that I type in the videos, you 
can find it over there. We also have Pages folder.  
03:32 - You'll see in the following videos, why 
we haven't there effectively is just  
03:36 - a bunch of React components. And again, we'll talk 
about them in future videos. After that, we have  
03:43 - app Jas, where we just have a heading to with this 
text, data j is also something that will implement  
03:51 - all with later index CSS with all of the styling. 
Now there's not much to it. But still, I added  
03:59 - a little bit of styling here. And of course index 
Jas. And also in the route, you'll find readme,  
04:07 - where I wrote down all the steps we're going to 
take throughout this project. And if you see in  
04:15 - the browser, react, router, six tutorial, then 
we're in good shape. And we can start exploring  
04:21 - React Router six. Okay, before we start typing 
away, let me just mention a few things. First,  
04:29 - if you ever want to run the complete application, 
so not just reference the code in the final one,  
04:36 - but if you actually want to see some feature 
in action, just go to index j s, and swap the  
04:45 - app js files. So essentially, you want to get the 
objects from the final folder. So like I said,  
04:53 - final folder is where you find complete 
application. And in here, there's also a  
04:59 - app J Yes, so just go to index Jas, get the app 
js from the final folder. And I already added  
05:06 - the code, you just need to comment the first one 
out on common the last one, that if you ever need  
05:14 - a reference to official documentation, I left it 
in a readme a link. So if you click on this link,  
05:22 - you will navigate to the official docs off React 
Router, six. And when it comes to install for  
05:29 - yarn projects, the command you're looking for 
is NPM, install react, router DOM at six. Now,  
05:37 - of course, I already installed this package in 
this project, but just so you don't think that  
05:42 - there's some funny business going on. 
With me, open up here of the terminal,  
05:48 - I'll clear everything, I'll run the command. Once 
the install is complete, and the package json,  
05:54 - we'll see or React Router DOM package. And as 
far as the setup, here's what we want to do.  
06:03 - We want to go to app J S. And let me start this 
up. So npm start, we want to import three things,  
06:12 - we want to get the browser router, which is 
going to connect to the actual browser, the  
06:18 - routes component, which is going to be a parent 
for all our routes, and then route component,  
06:26 - which we'll use to set up a single page. So let's 
go there. Let's start setting up the code. And  
06:33 - then I'll talk about the props and rest of the 
stuff. So let me first navigate to app J S,  
06:40 - like I said, we want to grab three components. 
Now eventually, we'll also get a link  
06:46 - and some other ones as well. But for now, 
these are the ones that we want. So browser,  
06:51 - router, routes, and a route. And as a quick 
side note, if you want, you can add browser  
07:00 - router in the index js, basically where you wrap 
the whole application, but in my case, I'll settle  
07:06 - for app. Jas, then we want to go with React, 
and then router DOM. Like I said, first,  
07:13 - we want to connect to the actual browser. So 
we'll go with browser router, we'll set up  
07:20 - the route component. So let's go here with routes. 
And then we need to set up those single routes.  
07:28 - And basically the idea is following where we go 
with route, then we need to go with path. So this  
07:34 - is going to reflect whatever we have in the URL. 
And when it comes to the homepage, we have special  
07:43 - syntax where we go forward slash now in this local 
setup, that forward slash means localhost 3000. In  
07:53 - production, that is going to be whatever is your 
domain, whether that is udemy.com, or youtube.com,  
08:00 - or John smell, good outcome. And hopefully you 
see where I'm going with this. So this is special,  
08:05 - this forward slash, but basically, where we have 
the path will set up whatever URL is going to be  
08:13 - here in the URL bar. So for example, if I want 
to have a page by the name of best thing, then  
08:20 - instead of forward slash, I'll type path equals 
to testing. And if I want to set up a nested one,  
08:26 - let's say I want to go with products, and then 
forward slash INFO, then yes, you guessed it,  
08:32 - one of the ways we can set it up is going with 
products here, and then forward slash testing. And  
08:38 - if you're a little bit iffy on that, don't worry. 
As we cover more examples, it's going to be easier  
08:45 - to understand that. So first, let's go with path 
forward slash, again, path means our homepage, and  
08:50 - then we want to go with element at the very basic 
level, we can just pass in the code directly here  
08:58 - in the element. And in the upcoming videos, we'll 
see how we can use components for that. But at  
09:04 - the very basic level, we just need to set up here 
what we want to see on the screen. So in my case,  
09:09 - I'm gonna go with a simple div here. And I'll say, 
homepage, like so. So let me close out the route  
09:16 - component. And once we save, we should see on page 
unreal. So that is my home page. And like I said,  
09:24 - Now let's set up some dummy page. And I'll call 
this testing. So instead of forward slash, which  
09:31 - is a syntax for the homepage, and simply go here 
with testing. Now, if I'm going to write about,  
09:37 - then, of course, in the URL, I'll have to type 
forward slash about. Now if I have testing,  
09:44 - and you guessed it, I'll go with forward slash 
testing. And when I want to display here, well,  
09:49 - let's make this one a little bit more complex 
just to showcase that of course, we can set up  
09:54 - whatever logic we want over here. So I'm gonna go 
with Dave and then inside of it We're going to go  
10:00 - with heading two, and then the testing. Let's save 
it. And eventually, of course, there's going to  
10:06 - be a navbar, and all that good stuff. But for 
now, yes, we'll have to do all the navigation  
10:13 - in the URL bar. So let me navigate there. And 
what is the page name? Well, it is best thing  
10:18 - correct. So we go forward slash, and manifesting. 
Once we navigate there, check it out. Now we  
10:25 - have our page. And if we want to go back to the 
homepage, you guessed it, we just need to go back  
10:30 - to the localhost 3000. So again, we install the 
package, we grab three components, browser router,  
10:39 - routes, and route browser, our connect to 
the browser route is going to be a parent  
10:46 - for all our routes. And then for every page, 
we'll set up a route component with two props,  
10:52 - a path. So what is going to be the URL. And what 
we want to render, we pass into the element about  
11:02 - about and we created our first pages, life is 
great. But you would have to agree with me that  
11:09 - when it comes to any realistic application, 
hard coding, the page content in app js, is  
11:17 - probably not going to be very good on your health, 
you'll just end up screaming at your computer.  
11:24 - So here's the thing, we can also pass in component 
directly. So path setup stays the same. Again,  
11:34 - whatever we type over here, will match in the URL 
bar. So if it's forward slash than its own page,  
11:41 - if it's about, hopefully you see where I'm 
going with this. But when it comes to element,  
11:46 - we can pass here the component, and therefore, 
you'll find in the pages a bunch of components.  
11:54 - Again, the only reason why I set them up 
is just so we can save a little bit of time  
12:00 - on setting up the boilerplate. So for the most 
components, it will just find this section with  
12:05 - the class name of section. So in here, we just 
add a little bit of CSS, you can take a look  
12:10 - at it in the index, CSS, and heading to with 
about. So these are the pages that we will have  
12:19 - in our project. So here's what I want to do. I 
want to go to app. Jas, I want to import them all.  
12:27 - So for now, just home about product. Notice 
all of them are coming from the pages. And as,  
12:34 - of course, you don't have to name 
your folder pages. It can be anything,  
12:41 - it can be banana pudding. Also, there's nothing 
special about these components. They're straight  
12:47 - up components. The only difference is that now we 
will use them in the app js. And we'll pass them  
12:54 - into the element prop. And as a result, 
whatever we have in the component, we'll  
13:02 - be the content of the page. And yes, in those 
components, you can import another component,  
13:09 - which also is something we're going to do. And 
as you can see, as a result, it's going to be  
13:16 - easier to manage your application instead of hard 
coding everything in the app J S. So let's try  
13:25 - this one out where I want to go to app J S. And 
I want to import three components. And lastly,  
13:32 - if you want to set up here, index j s, that 
is your preference. Or basically in the pages,  
13:37 - you import all of the components and then 
export them, you can also do so. But in my case,  
13:43 - I'll just go the long route where I'll say 
import, then home. Now when it's coming from,  
13:50 - now I'm looking for the Pages folder, and more 
specifically home one, let me copy and paste here.  
13:57 - Let me just change a few things around where I 
want to go with a about one. So let me select  
14:04 - that one. And we also want to go with the product. 
So let's go here. And let's say product. Once we  
14:13 - have all of the imports in place. Now let's keep 
the path forward slash again, this is going to  
14:19 - be for the homepage. But let's change it around 
for testing one where I will remove it first.  
14:26 - And I'll actually pass here the home component. 
Let's close it. That's also unnecessary.  
14:34 - And check it out. Now we have that too. Let's copy 
and paste and let's just change the round where  
14:39 - it's going to be about this one will be 
product and when it comes to path in here we'll  
14:46 - say about as well as product. And again, we're 
gonna test that out if we navigate to URL.  
14:54 - And then if we go with forward slash about, 
check it out and then we have about page Now,  
15:00 - you can probably already guess that if I'm 
going to go to product will navigate to  
15:05 - the product page. So that's how we can set 
up our page content. As components. Again,  
15:12 - we set up most likely a folder, since there's 
going to be multiple pages. And we're just set up  
15:18 - straight up components. There's nothing special 
about them. They're straight up components. The  
15:24 - only one that has more info in here is the login 
one. But we'll talk about this one a little bit  
15:30 - later. Once we actually get there. Whatever you 
set up over here, whether that's a bunch of other  
15:36 - components coming from other folders, and all that 
will be the content of the page. And as a result,  
15:43 - it's easier to manage your entire application. 
Alright, next, let's take a look at how we can  
15:50 - navigate around our project. Because at the 
moment, the only way how we can do that using URL  
15:55 - bar, not as probably not the best user experience, 
unlike the traditional multi page application  
16:03 - where we use the href, the link element, in this 
case, if we want to navigate around our project.  
16:12 - So internally, we want to grab the link component 
from React Router DOM. Now, if we want to go  
16:19 - somewhere externally, for example, if I want to 
go to google.com, or John's milk.com, then yes,  
16:26 - you still need to use the link component like so. 
So you'll set up a link component h ref, and then  
16:33 - whatever the URL. But in order to navigate around 
our project, we'll use the link component instead.  
16:41 - And then blink and bone and is looking for 
one thing, swung for to prop. And then notice,  
16:48 - we just pass in the URL. Now again, we don't need 
to go with full URL in here, we just need to go  
16:56 - with forward slash and then whatever we have 
in the app J S. So since I have these pages,  
17:03 - forward slash, so the homepage about and product 
kind of makes sense. In the homepage, if I want  
17:09 - to go to About page, I need to go with forward 
slash and then the name is about Now these ones  
17:16 - do need to match. So make sure that the syntax is 
correct. So in home, Jess, I want to set up a link  
17:24 - to about just right after the heading two. And 
then in the about Jess, I want to send back the  
17:32 - link to the homepage. So let me try this one out. 
Where first I guess I'm gonna go to the homepage.  
17:40 - So with me navigate through the pages, then 
we're looking for home. Jas, when we want to get  
17:46 - the link one. So import, it's a named imports a 
link from React Router DOM. And then right after  
17:55 - the home page, let's go with link to and again, 
I want to navigate to your product, we're gonna  
18:01 - go with forward slash product. Now if I want to go 
to about I'm gonna go to forward slash and about,  
18:07 - and let's add name. So whatever we want to 
display here, and a little bit of styling,  
18:12 - therefore I'm gonna go with class name. I'm just 
gonna say BTN. So once we save, notice, now I have  
18:20 - this link to the about page. Now we navigate 
to about without that full page refresh. And in  
18:29 - order to make this a little bit more interesting, 
why don't we also do the same thing in the about,  
18:34 - so then we will be able to go from one 
to another one. So let's go to about Jas.  
18:41 - Same deal, want to grab the link, import, and 
link probably should have copied and pasted.  
18:48 - But anyway, so React Router DOM right after the 
heading two, let's go with link two. In this case,  
18:54 - I want to go back to the homepage, say back 
home. Online. Let's also add that class name,  
19:02 - a little bit of styling class BTN. So now we can 
nicely go from page to page without that full  
19:10 - page refresh. Again, if we want to navigate around 
our project, we want to grab the link component,  
19:17 - it's looking for one thing and one thing only 
looking for to prop. And in here, you want to  
19:23 - pass in the same value that you already have here 
as far as the path. So if you want to go to about  
19:31 - you go forward slash about. And if you want to go 
to product, you go to forward slash products and  
19:36 - hopefully you see where I'm going with this. 
Okay, but what if by mistake, the user types,  
19:44 - some kind of path that doesn't exist. So 
let's say I'm gonna go with forward slash,  
19:50 - and then hello. The moment basically will display 
nothing. Why? Well, because if we take a look at  
19:57 - our app js were only unlink these routes, we have 
Ford slash home and about products. And in order  
20:08 - to handle this type of scenario, we want to set 
up an error page, where essentially will display  
20:16 - some kind of error message for every request 
that doesn't match any of our routes.  
20:23 - And we want to do that with a route component, 
we want to pass in the path with a star. So  
20:30 - essentially, this will match everything. 
So if we can't find those pages over here,  
20:37 - then this will collect all of them. And then we 
want to set up some kind of error page. So first,  
20:43 - let's set up this in the app J S. And then we'll 
work on the error page. Now there is already  
20:49 - a page in the pages. But I just want to add a 
little bit more content. So first, let's go to  
20:56 - app. Jas. Let's copy and paste. And yes, we 
want to place here all the way at the end,  
21:01 - because this catches pretty much everything. So we 
want to go here with the star. And now let's work  
21:07 - on the error page. Or essentially at the 
moment, again, we have this section with a  
21:11 - class of section I'm heading to with an error. But 
I want to set up a link back home. And I said this  
21:18 - is what we're going to be working on. So we want 
to get the link component from React Router Dom,  
21:23 - we want to add some kind of logic. So 404 
Page not found. And then we want to navigate  
21:30 - back home. So let's try this one out where in 
this case, I'll speed this up, I'll grab the link,  
21:38 - since will mean that one, then after the heading 
two, or you know what, let's change this one  
21:44 - around, we're gonna go 404. So Page Not Found 
a paragraph page found. And then we want to go  
21:52 - with link component to where I want to navigate, 
well, I want to go back home. And in this case,  
21:59 - let's just say back home, let's save this, we 
want to import a new page. So let's try out the  
22:06 - auto import. So I'm gonna go here with error. 
And let's see whether I got actually the page  
22:13 - now it doesn't look like it. So let's try one 
more time. Yep, over here, I can use the auto  
22:18 - import. And notice now we have a nice 404 page. So 
if I'm gonna go with forward slash, and testing,  
22:25 - same deal with don't have that particular page in 
our project. So basically, there is no URL that  
22:33 - matches that, and therefore we display this 
error page. Now, if we click on Back home,  
22:37 - we naturally navigate back home. Alright, next, 
let's see how we can add navbar and footer to our  
22:45 - project. Now in this video, I'll quickly show 
you the most basic approach, which clearly has  
22:51 - its limitations, since it adds the same components 
or elements to all of the pages. But don't worry,  
22:59 - in the following videos, we're also going to cover 
more fine grained approach, where we will nest our  
23:06 - pages and set up the shared layout. As far as the 
basic setup, we simply want to set up the elements  
23:15 - above or below the URLs. Again, please don't make 
the mistake and place the elements inside of it,  
23:22 - you will get an error. But if you place it 
above or below the routes, this will be added  
23:28 - to all of the routes, like I said, most basic 
approach. But there's definitely situations  
23:34 - where this is a nice solution. So let's navigate 
back, we're going to go above the routes,  
23:41 - we're going to set up the nav component, 
basically an element. And yes, of course,  
23:46 - you can set up the component import it here. And 
also, of course, you can add the links. Now I'm  
23:52 - not going to add the links in this scenario, since 
we're going to do that in the upcoming examples.  
23:58 - And I don't want to repeat myself and waste your 
time. Basically, I'll go here with our app bar.  
24:04 - The same thing we can do with footer, I'll say 
our footer. And once you save, you'll notice that  
24:12 - in all of the pages have the number as well 
as the footer, if we navigate your route,  
24:18 - same is going to work with products. And it's not 
going to be surprised if we navigate to another  
24:24 - page. And we get the same result number and four 
gets added to all of the pages. So this is the  
24:31 - most basic approach, how we can set up some shared 
layout, where essentially in this case, we're  
24:38 - adding both of these elements to all of our pages. 
Alright, next let's add a navbar to our project.  
24:48 - And in the process, we'll learn how to set up 
mess the drought shared layout index page. Since  
24:55 - I want to cover everything step by step, please be 
prepared. to refactor our application few times.  
25:04 - So if I want to nest some routes inside 
of the another route, I just need to  
25:11 - go with the parent route. So notice, instead of 
self closing the home one, I'm going to go with  
25:19 - an opening tag and the closing tag. And then I 
just decide which routes I want to set up in here.  
25:28 - There's going to be multiple issues with our 
original setup, the main focus is that now, all  
25:35 - of these routes will be nested inside of the home 
one. Basically, they will be relative to whatever  
25:44 - we have as a path to a home road. And don't 
worry, I'll show you also with another example,  
25:51 - just so you can see better again, we'll refactor 
our application multiple time, so don't worry  
25:56 - if in the beginning, some stuff break. So 
let's navigate back to app. Jas, like I said,  
26:05 - I want to nest about product and the error page 
inside of the home one, because I do want to  
26:13 - set up a shared layout. And I want to set 
up also a navbar. So let's try this out,  
26:20 - where instead of self closing, let's go here, 
let's say route, and then close it. And,  
26:28 - of course, there's a syntax error like so. Like 
I said, there's going to be multiple issues,  
26:34 - if I go to about, I'll actually see the homepage. 
And yes, that is something we're going to fix in  
26:40 - a few videos. Now the main idea right now 
is the fact that these are all relative  
26:47 - to the homepage. And it's kind of hard to see, 
since this is homepage, since we're doing the  
26:52 - setup on homepage. So therefore, let me showcase 
that if I'm gonna go here with dashboard instead.  
27:01 - Right now, you'll notice that you won't be able 
to navigate to an about page, you'll have to go  
27:06 - to a dashboard, forward slash vote. So that's the 
key about nesting routes, where whatever you have  
27:14 - here as a parent will be the main route. And 
then whatever is inside is going to be forward  
27:20 - slash and whatever path is over here. So let me 
save it notice, we cannot see anything. But if we  
27:27 - go to dashboard, which is technically our home 
run right now, and then about when everything  
27:36 - technically works. Now, we still don't display 
the about one, but we'll fix that in a second.  
27:41 - So hopefully this is clear. Where are they in our 
case, we are using as a parent, our home one. But  
27:49 - for example, if I'm going to go outside of this 
home one, if I'm just gonna say okay, let me set  
27:55 - up the dashboard, you'll see how basically this 
works again, you won't be able to see actually,  
28:03 - what is displayed in the stats, for example, the 
page that I'm about to set up, but you will be  
28:09 - able to see that this is how it works. So element. 
And let me go quickly with them over here,  
28:15 - I'll say, dashboard. So and then we want to match 
this. So let me go here with the route. And then  
28:24 - inside of it, we'll set a path, and then whatever 
path I want. So in my case, I'm gonna go with  
28:30 - stat. So now we're looking for dashboard, and 
then stats. So this is how we normally will nest  
28:38 - routes. And again, we won't be able to see 
this stat there. Because we need to add  
28:45 - a little bit more logic, which we'll do 
in the next video. This is just showcase  
28:49 - how this nesting is going to work. If we're going 
to go to a dashboard and stat. Now you'll see  
28:58 - that we'll have this dashboard one, but the route 
exists. So technically, there are no issues over  
29:06 - there. Now if I go to dashboard, this is where 
I'm displayed. And now if I go to about again,  
29:11 - since our parent over here is the home route, 
that's why we see the about page again, that's the  
29:18 - first step how we can nest routes inside of the 
parent route. And then whatever we have for a path  
29:28 - is going to be the main path. Whatever we 
set up over here is going to be the parent  
29:34 - plus this value over here. So if you go here 
with dashboard, then it's going to be dashboard  
29:40 - about dashboard product. And since in our case, 
it's a homepage, we go with about product. Okay,  
29:47 - so our initial setup works somewhat Alright, where 
your all's are matching, whatever we set up there  
29:53 - with nested routes, but the problem is the result. 
We keep seeing all the time The homepage. So how  
30:02 - we can fix that and how we can also set up a 
shared layout? Well, we need to go to the parent,  
30:10 - in our case, home and import outlet, the 
outlet component. And then we just need to  
30:18 - display this ultimate component. Whatever 
we'll set up around this outlet component  
30:25 - is going to be the shared layout across the 
pages that are nested inside of the parent.  
30:33 - And then the actual page content will 
be displayed here. In the output of one,  
30:40 - I think it's going to make a little bit more sense 
if we set it up. And that way, you're right away,  
30:45 - see what I'm talking about. So let me go to home 
a Jas, we want to grab this outlet component. And  
30:55 - the position is really up to you. Again, 
you'll see once we add navbar, that of course,  
31:00 - however you set up this return, that is going to 
be how your shared layout is going to look like.  
31:06 - Now I'm not going to keep this link, I think 
we're good to go. So I'm gonna go with outlet.  
31:12 - And now, once I save, actually, I see this 
homepage. So at the moment, this will be  
31:20 - shared all across the pages. But I nicely also see 
the about page. And if I'm going to navigate to a  
31:28 - product, same deal, I still see this homepage. So 
this one is shared all across these nested pages.  
31:37 - Also, I see the actual content from the product 
page. So now we can put two and two together.  
31:45 - If this is shared all across the nested 
pages. Why don't we set up the navbar.  
31:54 - Add some links. And as a result, we'll be able 
to navigate from page to page from home to about  
32:02 - until the product now notes up, we need 
to go with new components. So I'll set up  
32:09 - the components folder. And in there, I'll create 
navbar J S. And we want to import a link one.  
32:16 - And then let's set up the nav, then let's 
import that in home J S and again, whatever,  
32:24 - return your set up over here. That's how all those 
pages will be displayed. So if you do the side,  
32:31 - let's say underneath the section to set up a 
footer, you can definitely do so again, this  
32:36 - is going to be that shared layout all across the 
pages. And don't worry, the homepage, the actual  
32:44 - parent is going to look somewhat funky. 
We'll work on that one next. So first,  
32:49 - let's worry about Napa. And I want to do 
that by navigating here. Please don't set  
32:55 - this one up on the finals. Because it's already 
there, we have the components. So in the source,  
33:01 - I want to create actually not a new file, I 
want to create a new folder component. And this,  
33:07 - of course also showcases that, of course, like 
I said, all of the components in the pages,  
33:12 - we can use other components because they're just 
good all the regular components. I'll set up  
33:17 - navbar je s now there's going to be one more file 
because I'll show you the active link as well. But  
33:23 - let's not worry about it right now. I'm using this 
extension to create my component, this is going  
33:30 - to be number like I said, I do want to get the 
link. So let me close the sidebar here. I'll say  
33:37 - link from and then we're looking for 
React Router DOM. And then we want to go  
33:44 - with a nav now I did add a little bit of styling 
and CSS. That's well add here class name, nav bar,  
33:50 - and then we're just want to set up the links. 
Now I will set up links for about products,  
33:59 - and homepage. But we might add one more for login 
one little bit later. So let's go here with Link  
34:05 - to this is going to be through the homepage. 
And then let's add a text. Let's copy and paste.  
34:12 - Now this one will be through about page again, 
whatever pages you have. So in our case, we have  
34:19 - about and products as well as the home page. Let's 
set up about let's set up all of your products.  
34:27 - And now we want to navigate to the home one 
and import that navbar. So let's go with import  
34:35 - nav bar. And basically, you're 
gonna get the component.  
34:41 - Like I keep saying whatever structure we will 
set up over here is going to be the result  
34:48 - in the browser show. I don't want to keep this 
section right now as it is. Instead I'm going to  
34:55 - go with React fragments since we need to return 
one element. Then I'll play In navbar, on top,  
35:02 - after that, I will remove this homepage. 
And then let me bring this section up.  
35:09 - So I'll display the navbar. Mike. So with 
these links, and in here in the section,  
35:17 - I will have that outlet, basically, whatever 
we have inside of the page. So whatever we  
35:24 - have in the amount in the product, essentially 
all the pages that we have nested as a result,  
35:32 - notice, not only I display the contents of the 
about page or the Products page, but we also have  
35:40 - the number. So if you want to add the footer, 
go ahead. Most likely, you'll want to do that  
35:47 - beneath the section. With this in place, now we 
can set up the index page, because at the moment,  
35:54 - if we navigate here, nothing is displayed. 
So let's fix that in next video. Alright,  
36:01 - so our functionality is almost complete. The only 
thing that's missing is the content in homepage.  
36:09 - First, let's understand why that is happening in 
the app. Jas, we have nicely nested the routes.  
36:17 - For the parent, we have the home. And inside of 
the home, we have the outlet. And there we display  
36:23 - product about as well as the error page, something 
that I actually forgot to add last video. So if  
36:29 - I'm gonna go with Hello, notice, again, we'll 
still have that mesh layout, the shared one with  
36:34 - the navbar and all that. And in here, we display 
the content. But when it comes to actual homepage,  
36:41 - well, we don't have any specific content here. 
That's why we render pretty much nothing, we just  
36:47 - have the number. And technically, if you want 
you can add that heading to or whatever content  
36:52 - you want. But just keep in mind that that will 
be shared all across the components, basically  
36:58 - the pages we have nested. So what is the solution? 
Well, the solution is to set up index route. And  
37:06 - here I just added some text from the React Router 
docs, you can definitely read it through but I  
37:15 - think it's going to be faster if I just showcase 
the syntax. So if we have these nested routes,  
37:22 - for the main one for the parent, we can set up 
the index route. And it has a special syntax.  
37:30 - Whenever we go route, then we pass in the 
Prop by the name of index. And this will  
37:36 - always always always match whatever we have here 
for the parent path. So if this is going to be  
37:43 - dashboard, that yes, this index is going to match 
the dashboard. However, since in our case, we have  
37:50 - home we have home. And then again the same deal, 
we go with element. Now the gotcha here is that  
37:57 - we still want to set up some kind of shared 
layout. Correct. And therefore we'll have to  
38:02 - create a new component in that new component, 
and basically take whatever we have right now  
38:10 - in the home one. And we'll add that one 
as a shared layout in here as an element.  
38:17 - So whatever we have right now in the home, we'll 
create a new component, we'll call the share  
38:21 - layout. So now always share this layout all across 
these pages, but then the home one will have its  
38:30 - own content. Hopefully this makes sense. So now 
let me save this. And let me first go to a pages,  
38:40 - then we want to create a new one. And I'm going to 
call this shared layout. As always, you can call  
38:46 - this shake and bake doesn't really matter. Let's 
grab the home one. And you know, also, as we will  
38:54 - be setting this up, we're going to remove that 
section because each of them have already that  
39:00 - section with a class name of section. So that is 
an overkill. So let me navigate to shared layout,  
39:05 - copy and paste. Now let me remove this section, 
we don't need it. So now we have only two things.  
39:12 - We have layout, which will have the page 
content, whatever is the page, the homepage,  
39:18 - the about page, the product page, and also 
whatever we want to put around it. So in my case,  
39:26 - that is just the number. And once we have this one 
in place, let's navigate to app. Jas. We want to  
39:34 - set up that shared layout first. So let's say he 
shared layout. Yep, of course it breaks. So let  
39:43 - me copy and paste. I'll say here shared layout. 
And now we just need to work on that index page.  
39:50 - So if we want to set up a page that 
will match the parent. In this nested  
39:57 - URL structure we go route Then index, and then 
we're passing the element. So in this case,  
40:04 - you want to go with home. And now we need to 
navigate. And first of all, we need to close it  
40:09 - here, when we want to navigate to the home one. 
And since the moment I'm displaying the navbar,  
40:16 - we want to remove some stuff where I think I will 
remove both the Lincoln outlet, I don't think  
40:21 - we'll need it, since we already have the knob. But 
anyway, and then we're just need to come up with  
40:26 - whatever we want to render. So I don't want the 
outlet. I don't want to navbar I just want to go  
40:31 - with my good old heading to and I'll say homepage. 
And, yes, we can also remove the second lag. I  
40:38 - said, Yes, I purposely did this the long way to 
kind of showcase how we get to that shared layout  
40:46 - and what issues we're going to get along the way. 
So yes, there was a little bit of refactoring. The  
40:52 - good news is that check out through our result, we 
have homepage, which displays home and about one  
40:58 - product. And if we have some kind of page that 
doesn't exist, let's say product. And hello,  
41:03 - when we display homepage, and we nicely 
navigate back. So hopefully, this is clear,  
41:11 - where if we want to set up this shared layout, 
first, we need to come up with the parent in  
41:16 - our case that is index. But again, I showed you 
example, with dashboard, whatever you type over  
41:23 - here, that's going to be the parent, then most 
likely, you will come up with some kind of shared  
41:27 - layout. So what you want to share across those 
pages, and as far as the parent, you'll set up  
41:32 - the index. So that will be the content only for 
the actual index. And then rest of the pages.  
41:40 - And remember, we need to use outlet to render 
those results. All right. Before we start working  
41:49 - with URL parameters, let's also see how we can set 
up active links. And effectively what that means  
41:57 - is that once we're on the page, this link will 
have specific styling, whatever we want to set up.  
42:06 - And in order to do that, I will create a new file, 
just so typical setup stays for your reference.  
42:14 - And instead of link, we want to grab the nav 
link. Now what's special about the novel link  
42:22 - is the fact that in style, and also in the 
class name, we can pass in the function  
42:30 - where there's a property by the name of is 
active. Again, this is provided right away  
42:36 - by React Router, a man based on that value, we 
can set up some type of styling. Again, this is  
42:45 - the straight up inline CSS approach. But we 
can also do that with classes. And of course,  
42:52 - we'll take a look at both examples. Let's 
start working on the main setup first,  
42:58 - where in the components let's create styled 
navbar. And again, the reason why I'm setting  
43:05 - up a separate file is just so you have right 
away a reference for the basic setup. Let's  
43:10 - copy and paste again, we're looking for nav link 
instead. And let's change these suckers as well.  
43:18 - So we're looking for nav link. For now let's not 
do anything, let's not add any kind of logic,  
43:24 - we simply want to navigate to Baba Baba app, Jas, 
or I'm sorry, what app js shared layout, my bad.  
43:33 - And I'll copy and paste. And I'll just say, shared 
layout shared, or I'm sorry, not shared layout.  
43:42 - For some reason, I'm totally tripping there. 
So styled and navbar. Of course, my apologies.  
43:49 - And for some reason, I didn't change this one 
as well, instead of typical navbar. Let's go  
43:56 - here with styled number. And once we save, we 
will right away notice that our active link  
44:02 - gets different styling. And first, let's just 
quickly cover why is that happening? And second,  
44:11 - we'll take a look at the code that controls that. 
So first, why is that happening? Well, again,  
44:16 - by default, if we use that Novolin, 
the React router by default, even  
44:22 - without us doing anything adds this class of 
active to it. If you take a look at index CSS,  
44:30 - and more specifically, if you just keep on 
scrolling somewhere on the Navbar you'll find this  
44:36 - active class. So if you just set up an active 
class, if you use network, the class will be  
44:43 - automatically added. As a result, you'll get the 
styles. So now let's see how we can control that  
44:51 - code a little bit more. First of all, let me 
close all my files and all that here. So let  
44:56 - me start from scratch. I think it's getting 
quite busy. Let's just take a look at how  
45:02 - we can add good old regular CSS to it. So I'm 
in the style number, then we want to go with  
45:11 - style over here, and I'm not going to add to all 
of them, but I will showcase for the home one.  
45:18 - So I'm gonna go with style, I want to 
go with interpolation. And like I said,  
45:22 - we want to pass here, the function, this function, 
the value and all that is provided by React  
45:29 - Router DOM. Now, keep in mind, this is not just 
good old parameter here. So don't say is active,  
45:34 - we need to specifically look for objects and then 
is active. That's how we can properly access that.  
45:41 - And then since we're setting up here, inline 
styles, we can just use a ternary operator,  
45:48 - where we go with returns. So what are we returning 
this object will be applied to this link.  
45:53 - And more specifically, I want to look for the 
color. And then I want to check is active. So  
45:59 - what is the value. So if it is true, I want to 
add color red. And if it's not, then I want to  
46:06 - go with gray. Please keep in mind that we can 
set up whatever functionality you want over here,  
46:11 - I'm just going for straight up color. Of course, 
if you prefer setting up your CSS in line, you can  
46:18 - add whatever the properties with values you want. 
And now check it out. If we navigate to home page,  
46:25 - the style will be red. So the color of the link 
was going to be red. And yes, if we add this to  
46:30 - the rest of the links, it's also going to work, 
I already set up the reference for your here.  
46:38 - So in my case, in the style nine bar, 
I'll just showcase the class approach,  
46:44 - since in my opinion, that's probably is going 
to be something you will use more often. So if  
46:49 - you ever need this reference, it's available in 
the readme. So let me remove this style here.  
46:55 - And now instead of style, I'm gonna go with class 
name. And if we take a look at the CSS, you'll  
47:02 - notice that not only I have the active one, I also 
have some general style for the link. And yes,  
47:09 - of course, like I keep repeating, you 
would normally add more code over here.  
47:13 - So instead of just relying on the active one, I'll 
say, All right, what is the value for is active.  
47:22 - If it's true, then I want to add link class, 
as well as the actor one. Basically, this is  
47:27 - where I'll have more styles normally. And if it's 
not, then just going to be link class, which just  
47:37 - gives those general stuff. So let's try this one 
out, where again, we are going forward a function  
47:43 - in the function, we're looking for the object, and 
then we go with E is active. And then let's set up  
47:50 - that ternary operator, where we want to go with is 
active and you're not thinking in this case, I'm  
47:57 - just gonna go with implicit return, so is active, 
if it's the case, then I'm gonna go with Link  
48:03 - and active. And then if it's not, then I'm just 
gonna go with link one, I do want to grab this  
48:12 - entire thing. So copy, hopefully, there are 
no bugs there. And then let's just set up on  
48:20 - all of these ones, let's save, this is going to 
be our default setup. And then once we click,  
48:26 - now, of course, we get that active class, as well. 
And as you saw, there's multiple ways that we can  
48:34 - set up. If you just an act of class, it will 
be added by default that now. So technically,  
48:41 - you don't need to do anything. But most likely, 
you will set up the class approach. Also, keep in  
48:47 - mind that, of course, you do have this inline CSS 
option as well. Most importantly, mavlink, then  
48:55 - the function, then object in the object, you have 
these actor, and then you can use this value to  
49:02 - set up your logic. Alright, and now let's see how 
we can read URL parameters. And as a result, we'll  
49:10 - have some dynamic pages. For this, I just want 
you to imagine a product page where we display a  
49:17 - bunch of products. And then once we click on that 
one specific product, we display it in a separate  
49:23 - page. However, here's the key. I don't want to set 
up a separate page for every product that I have.  
49:32 - It makes more sense for me to set up one 
page, which is going to act as a placeholder.  
49:39 - And then I'll just get the data that I need 
to display. So that way I can use the same  
49:44 - page for example 4000 products or 3000. On 
hopefully you see where I'm going with it.  
49:51 - And in order to set up your URL parameters, you 
want to go with this colon, and then whatever the  
49:58 - parameter name, call this I can bake all 
this vegan food truck in my cache, since  
50:03 - will display product, I just thought is going to 
make more sense if I'm going to go with colon,  
50:09 - and then product ID. But this name is 
really up to you. Now, as far as this URL,  
50:16 - this can be straight up like so, where we go 
with colon and product ID, this can be product  
50:25 - stats, and then product ID. Again, 
this part is really up to you.  
50:31 - I just thought that going with product, and 
then product IV is going to make more sense.  
50:38 - Before we begin, I also want to quickly mention 
that yes, you can set up that nested structure,  
50:46 - like we did over here, for a product and product 
ID as well. I just went with this setup for two  
50:53 - reasons. First, I really, really, really want to 
focus on the URL params. And I think it's gonna  
51:01 - be better if we use this setup. For that way, 
it's easier for us, we don't need to do this  
51:07 - whole song and dance. And second, I also want to 
showcase that if you don't have the shared layout,  
51:14 - which in this case, we want, you don't always 
have to use that approach. You can also use  
51:19 - this approach as well, where you go with whatever 
is the main URL. And then in here, specifically,  
51:26 - we go with this dynamic option. Hopefully that 
is clear. So first, let's navigate right now  
51:34 - to app Jas and get that single product. So if 
we take a look at the pages, there is already a  
51:40 - single product, there's just a heading two. So why 
don't we in the app js, first of all, set it up,  
51:47 - and I'll do that right after the product. So 
let's go with route event path, then we'll go  
51:53 - with a product and that product ID. And you'll 
see that it is essentially a property. So again,  
52:03 - we can name it whatever we want. So go with colon 
product, ID and then what is going to be the  
52:09 - placeholder, well, we want to go with LM meant. 
And then we want to go with that single product,  
52:15 - which hopefully is going to work but doesn't look 
like it. So that's why sometimes this auto import  
52:21 - is annoying, because it doesn't work. So let 
me save this. And yes, of course I have there.  
52:26 - So let me go here with import, and then single, 
single product like so. And that is coming from.  
52:34 - And we're looking in the pages, I believe, 
right. And then we have single product.  
52:40 - So not everything works, we have that 
similar product. And now if we go to URL,  
52:47 - if we just type whatever gibberish we 
want. So eventually, there's going to be  
52:51 - actual data, because they already prepared 
for you. But I'd say if we type 123,  
52:56 - we have single product. If we type in a three 
through three, we'll also get that single product.  
53:03 - So that's the placeholder we're going to use. 
So now let's navigate to the single product. And  
53:09 - let's take a look how we can access it. So this 
is the setup, where we go with that colon and then  
53:17 - whatever is going to be the parameter names or 
macros product ID. Now, if we need to access it,  
53:24 - we need to get the hook from React Router DOM. 
So use, use params. And we'll also get the link.  
53:31 - And then we want to invoke that hook. And notice 
how this name now needs to match whatever we have  
53:37 - over here. So as long as they match, you'll be in 
good shape. And then for timing legends displayed.  
53:44 - And let's navigate back to the main product page. 
So let's set this one up. Where I don't think I'll  
53:51 - need styled navbar anymore. But I do want to 
navigate to single product. Like I said, we're  
53:56 - going to be looking for two things, we're gonna 
get the link first. And also we want to get that  
54:02 - hook use parameter, which is going to access those 
parameters in the URL when all that is coming from  
54:11 - react. Yep, that's not correct. We need 
to go with import my apologies, not const.  
54:16 - So let's go with React Router Dom, then as far as 
the return, first we want to grab that product ID.  
54:25 - And you know, as a side note, why don't we do 
this? Why don't we just log the sucker? So let's  
54:31 - say you're used params. And you'll clearly see, 
what am I talking about? So let's invoke this. And  
54:37 - then let's navigate to the console and check it 
out. We have the object. What do you know? We have  
54:43 - product ID 333. So you fill changes around 123. 
And of course that value will be also 123. So now  
54:52 - we want to pull this out from the use params from 
the object so let's go with product. And then Id  
54:59 - Now that is equal to use params. Let's invoke 
it. And like I said, let's set up that link back  
55:07 - to the product, push if you want to navigate 
also back home. But my guess it's going to be  
55:12 - back to the products back product. Where we have 
right now the single product for time being let's  
55:20 - go with adding four. And let's display the ID. 
So let's say here, product, and then it would  
55:28 - save it and check it out. Now we have 123. 
Again, if we'll change this around to 4567,  
55:38 - this is going to be the value show. Next video, 
we'll iterate over the products that I provided  
55:45 - in I believe data address, we'll run them all of 
them in the Products page. And then from there,  
55:54 - we'll set up a single product page as well. All 
right, and once we have the single product page  
56:02 - in place, now in the products J S, let's iterate 
over the products that are coming from the beta.  
56:12 - And then for every item, I want to return an 
article will have to use the key since of course,  
56:19 - this is react. And then I want to access product 
name, as well as product ID, which I'll pass into  
56:25 - this link. And notice the URL. Again, this needs 
to match whatever we have in app J S. Since in  
56:33 - the app J S, we have products and product ID, this 
is where we dynamically pass in the ID property,  
56:40 - which is going to be in every product. Once we 
set this one up, then in the single product,  
56:49 - we'll use that ID. And instead of rendering it on 
the screen, like we have right now, basically pull  
56:56 - out that one specific product, then we'll get 
the image and name. And then we'll display it.  
57:02 - Now before we continue with me right away 
say that, yes, normally we'll get this  
57:06 - data from the API or database or whatever. 
But since I want to keep this nice and cute,  
57:13 - that's why I'm prepared this data Jas, 
which essentially is just an array  
57:18 - of products, each product has the ID. So this 
is something else see over here in Euro name,  
57:24 - as well as the image, which is just an 
external URL. So these images are stored  
57:30 - on a cloud somewhere. So that way, we don't need 
to bother with the local image setup. So first,  
57:37 - let's go to a product js. And we want to 
get the data. Now if you want, of course,  
57:44 - you can log it, but I'm just gonna assume that 
it's there. And also, we want to get the link,  
57:50 - because each and every product will be 
wrapped in a link. So React Router Dom,  
57:55 - then off the bat, let's go import that product 
from. Like I said, we're looking forward to data.  
58:03 - Jas. As far as they return, it looks like for 
some reason, I set it up as a React fragment.  
58:10 - My bad, let me just remove, we'll have section 
here, we'll have product. And then right after  
58:16 - that, we want to go div with a class of product. 
So then there's little bit of styling over there.  
58:22 - Let's go with product map or mapping over. And 
then as far as the return, let's go for product.  
58:29 - Again, if you want to log it, you can definitely 
do so in my case, I know that, essentially, there  
58:36 - is going to be all those properties. So I want 
to return article, I do want to add right away  
58:42 - a key. And I'll just say here, product ID, then 
I also want to go with heading five, and I'll say  
58:50 - product name. And also we want to set up that 
link. Now, I believe previously, I mentioned  
58:56 - that we'll wrap it, my apologies. We'll just set 
up the link here. So let's go here with link to  
59:02 - Now remember, this is dynamic. So now, we are not 
passing this manually 456 Or seven, we actually  
59:10 - go with product, bath and then that dynamic 
Id rather so let's go with template string,  
59:18 - then product, and forward slash and now let's 
access that sucker. Let's say product, then ID  
59:26 - and then set it with let's just 
say more info. Let's save it.  
59:33 - This is that single product, so we won't see 
anything. But if we navigate back, check it out.  
59:39 - Now we have a list of products title, as well 
as the link. So this is going to be more info.  
59:46 - Now notice we have this unique ID in two places. 
We have it over here. And we also render it.  
59:52 - So now we just need to add some code to single 
product. Well first, I'll grab it okay. as good,  
60:00 - but I also want to get the product from there 
right from the data product from that data. Very  
60:08 - good. Like I keep saying, normally this is going 
to happen with some kind of fetch request from the  
60:14 - API and all that, but not in this case. So I want 
to get the single product. And that is going to be  
60:20 - with products, then use Find. And now we'll just 
say, get me the product whose ID matches the  
60:26 - product product here, and then return a product 
ID equals to product id like so. So product.id  
60:35 - equals to product that beautiful, then let's pull 
out image, nine, we don't need the ID anymore.  
60:44 - And then let's set it up in our return, we're 
first we're gonna go with a heading five, I guess.  
60:51 - And instead of product ID, I want to 
display the name, and then right above it,  
60:56 - or below it or whatever. Just go with IMG source 
mount will be equal to that external image.  
61:05 - So let's set up the image over here. If you 
want, we can also set up the alternative.  
61:09 - Let's close the image. And as a result, we 
get the single product. And like I said, Now  
61:17 - consider 1000 products, so we can render them 
in the product page. And then for each product,  
61:24 - there's going to be a single product page, 
essentially, which act as a placeholder will  
61:30 - fetch some data about that one specific product. 
And we'll render that in the single product page.  
61:38 - And now let's see how we can navigate around 
our project programmatically, ie in our case,  
61:43 - that is going to be once we submit the form. 
And also, let's see how we can restrict access  
61:50 - to certain routes. Before we begin, though, please 
keep in mind that normally, we will use context  
61:57 - to store our user value. In this 
case, I just didn't see the point of  
62:02 - setting up the entire boilerplate. And we want to 
start in the app J S, wherever you want to set up  
62:10 - user state value with your state, an initial 
value will be known. Then we want to import  
62:16 - two more pages, we want to import the login 
page, as well as the dashboard one, again,  
62:22 - the boilerplate placeholders are already there. 
And then in the login one, we want to pass in the  
62:30 - function, the one that sets up the user in the 
dashboard, we want to pass in the actual user.  
62:37 - So let's start in the app js, where we want to 
get the use state from react or import use state  
62:47 - that is coming from react. And let's set up that 
state value. So in here, let's go with const.  
62:56 - User Set user that is equal to use state. Let's 
pass in and then let's grab both of those pages.  
63:08 - So we're talking about the dashboard, as well 
as the login one. Now dashboard doesn't have  
63:15 - anything, pretty much the same boilerplate and 
login has a little bit more, and I'll cover that  
63:20 - in a second. Now, since my auto imports were 
not particularly successful, let's try it here,  
63:26 - where I'm gonna go with the dashboard, dashboard. 
And again, it's not working. So know what's  
63:33 - up with that. So let's go with pages. Yvonne, 
let's access the dashboard on copy and paste.  
63:42 - This case, let's delete. Let's just go with login. 
And right after that single product, first of all,  
63:50 - I'll make my browser bigger here, I want to go 
above the arrow one. Let's set up that route,  
63:59 - the login one, so path will be login. 
And then we want to go with element.  
64:07 - And let's pass in the login one. And then inside 
of the login element, let's also pass in set user  
64:16 - is equal to set user. So now we're passing in 
this function. Now we do want to close this one,  
64:23 - meaning the route. So at service, learn, we'll 
copy and paste. This is going to be dashboard  
64:31 - dashboard. And the components will be dashboard 
as well. And set of set user go to User  
64:38 - so user is equal to user let's save this. Now 
let's navigate to the login one and you're not  
64:48 - actually I also want to add the link to the login 
one so not to dashboard but to the login one.  
64:55 - And if you remember that was in the style number 
two So let's navigate here. And let's add one more  
65:02 - link. Let's copy and paste, this is not going to 
go to product, this is going to go to login. And  
65:09 - then also the text will be login. Let's save 
it, we have the login. Once we navigate here,  
65:15 - we notice that we have the form, which is 
awesome. So now let's navigate to the page.  
65:22 - And we'll take a look at what we have and what 
changes we need to add. So I important you state  
65:28 - I have two states values have name and email and 
I right away have the handle submit where we have  
65:33 - prevent default, pretty much basic setup. Also, 
both of them are set up as controlled inputs. So  
65:40 - they're tied to the state value. So as you start 
typing, you basically will have both of the values  
65:46 - over there. Now if you want to test this out, 
let's go with log and then say name, and email,  
65:53 - and pretty typical setup. So I'm gonna go here 
with John, John gmail.com. And once we log,  
66:00 - check this out, we have both of the values. So 
here's what we want to do. In the login one,  
66:07 - we want to check whether both values are there. If 
there they are, first, we want to set the user. So  
66:14 - this one was coming from the app Jas and yes, I 
purposely went here the long route. And then we  
66:21 - want to get us navigate from React Router DOM. 
And we want to navigate programmatically to a  
66:28 - dashboard. So notice, in this case, not 
happening once we're clicking on a link,  
66:32 - or Novolin. In this case, we'll navigate there 
using navigate. And in order to invoke that we  
66:38 - get to use navigate, we invoke it, this is going 
to be equal to navigate. And then in here, we  
66:43 - just provide where we want to navigate. And then 
in the dashboard, since we can access the user,  
66:49 - I just want to say hello, and then the user 
name. Now we are using optional chaining,  
66:54 - because remember, initially, it's going 
to be no. So let's try to set this one up.  
67:01 - Where in the login, first let's grab that navigate 
us navigate that is coming from React Router Dom,  
67:08 - then I already have the console log. 
Okay, beautiful. Let me remove it.  
67:13 - And in here, above the house submit, 
let's set up that navigate. So now we are  
67:19 - equal to use navigate, let's invoke that. 
And then we're gonna go with if condition.  
67:25 - So if there is no name, or there is no email, so 
if one of them is missing, then we want to return.  
67:33 - And yes, that is the check that I'm going 
to set up right now. So there's going to be  
67:37 - no error messages, nothing like that. I just 
want to check whether one of them is empty.  
67:42 - If one of them is empty, we'll simply return. 
Now, if both of them are provided, we'll go  
67:48 - set user. Now we just want to grab it from the 
params. So let's set up here, set user. Again,  
67:54 - this is coming from the app jet, like So first, 
we want to invoke it, we want to go set user,  
68:02 - let's pass in the name equals the name and email 
equals email. If you want to shorten this up,  
68:07 - of course, you can definitely do so. And then 
let's go with navigate. And where we want to go,  
68:13 - we want to go to forward slash dashboard. Let's 
save this one right now. Let's try to do that  
68:22 - with only John. So if I just provide one 
value, notice I can undo anything. Or if I go  
68:28 - John and gmail.com will notice that we'll nicely 
navigate to the dashboard one. And in dashboard,  
68:38 - I just want to display the name. The way we 
set it up. If we take a look at the dashboard,  
68:43 - we just want to grab the user since that is 
what we're passing in the app js again. More  
68:50 - specifically, I'll look for name however, there 
is going to be optional chaining, since initially,  
68:55 - it's going to be no. So let me now get right 
now to the dashboard one, let me grab the user.  
69:04 - And then once we destructured where we have 
the heading for instead, I'll say hello.  
69:12 - And let's just access the user name, like I said 
optional chaining. And then let's go for name once  
69:18 - we save we have Hello John. So if we'll navigate 
to a login and we'll go with Peter instead  
69:25 - and peter@gmail.com First, we'll programmatically 
navigate once we submit the form using the US  
69:34 - navigate which we imported, then invoke that 
and we just passing the path, the dashboard one.  
69:43 - In the Dashboard page, we actually display the 
name of the user which in this case is better.  
69:51 - Alright, and now let's see how we can restrict 
access to certain route and first in the pages  
69:59 - We'll have to create that component. So in 
this case is going to be protected route.  
70:05 - And then in the app js, you want to wrap whatever 
page you want to restrict access to, in that  
70:16 - protected route. So yes, in the element, you'll 
have to go to protected route. And then whatever  
70:23 - page you want to render, so automatically, this 
page will be restricted. So let's start here in  
70:30 - the pages, let's set up a new file. I'll 
call this protected route. For time being,  
70:39 - it doesn't really matter what we display here, 
since the logic is going to change anyway. And  
70:45 - once we have the file ready to go, let's navigate 
back to app J. S, we want to go with protected  
70:53 - route. And since I don't want to restrict access 
to the dashboard, now I want to wrap the dashboard  
71:01 - with a protected route. I'll set it up as 
self closing. Let's go here with protected  
71:10 - route. Like I said, normally will pass in 
the user using use context. Our in this case,  
71:16 - since it's right away in the app js, I just go 
with user equals to user since we'll need to  
71:22 - check it. And if the user exists, only then 
will display the dashboard. So now notice,  
71:31 - even though technically URL says dashboard, we're 
displaying this protected route, because now we're  
71:38 - wrapping dashboard with protected route. So up 
next, let's set up the functionality. Where in  
71:45 - the protected route, we want to import, 
navigate component from React Router DOM.  
71:51 - And then we want access to things. 
We want to access the children.  
71:56 - So this is going to be that dashboard page, or 
whatever page we place in that protected route,  
72:01 - and also a user. And then we'll check if the user 
doesn't exist, we want to use navigate component.  
72:09 - And we'll just say where we want to 
navigate. However, if everything is correct,  
72:14 - we'll return children, in our case is going 
to be our dashboard. So let's go to protected  
72:22 - route. And first, let's grab that 
navigate. So I'm gonna go here with import,  
72:29 - then navigate. So navigate component from 
React Router Dom, very much access both props,  
72:38 - so children's prop, so children, and then also 
user. And let's set up that logic where if there  
72:46 - is no user, then we want to go with return and 
navigate to I'm just going to go to homepage.  
72:55 - Please keep in mind, we can navigate wherever 
we want. And then if everything is correct,  
73:01 - then we'll just return children. So with this in 
place, what's going to happen once we refresh,  
73:09 - we'll have homepage. If let's say we try to 
somehow manually get to the dashboard, the axis  
73:16 - will be restricted. Notice how we navigate back 
why? Well, because there is no user. So only if  
73:22 - we go to a login one, add that user my case, 
John john@gmail.com, then we'll be successful.  
73:34 - And we'll navigate through a dashboard. The split. 
Again, I guess the biggest gotcha is the fact that  
73:41 - in the app js where you render the pages, you do 
need to wrap it, you need to wrap whichever page  
73:48 - you want to restrict access to in the protected 
route component. Beautiful. At the very end,  
73:56 - I just want to set up of the product and product 
ID as a nested route. And this is the case where  
74:06 - if you want to challenge yourself, you can 
stop the video and try doing it yourself.  
74:11 - So basically, whatever we have right now, here 
with a homepage, where we nested rest of the  
74:19 - route. I also want to do the same thing with a 
product where we want to place a product ID inside  
74:26 - of the product, we do want to set up the index 
one, as well as some shared layout. So again,  
74:33 - if you want to try doing that for yourself, 
stop the video, try to solve this puzzle again.  
74:39 - Basically, the setup is exactly the same, you'll 
probably want to use a different shared component.  
74:45 - That's it. So let's start here by setting 
up that component. So I'm gonna go here with  
74:52 - shared product and layout. I know it's somewhat 
long name, but we'll deal with up, then let's  
75:01 - grab quickly to code over here, since I don't 
want to waste my time on imports and all that.  
75:05 - So I have here link, I don't think I'll need that. 
What I want is outlet, I won't need the navbar.  
75:13 - And as far as the shared layout, well, there's 
not really much that I want to add over here.  
75:19 - And guess I'm just gonna take a look at the 
products one. So in here, I just have heading  
75:24 - two. So let's do it this way where we'll go with 
heading to go with products. We'll keep that one.  
75:32 - And we won't need the import for the 
style bar as well learn let's go back  
75:40 - to our app J Yes, we want to grab that 
long component. So let's say here import,  
75:48 - shared, shared, and it was product product 
layout, J S. So that is coming from the  
75:59 - pages, I believe. All right. So shared product 
layout. Let's close this, before we continue  
76:06 - in the product j s, we can just remove 
the heading to let's set up the entire  
76:14 - logic here, where first we want to go with the 
route, the path will be products correct. So  
76:21 - we're gonna go here with products. Now as far as 
the element, we'll go with that shared product  
76:29 - layout. Let's close this one. And then in 
here, let's set up both of these routes. Now  
76:37 - we can remove the path and just say index. And 
for this sucker, just going to be product ID.  
76:45 - And once we save, I'll make this one bigger. 
Now, as you can see, the result did not change.  
76:51 - So the functionality is exactly the same. The only 
difference is that now again, we're using this  
76:56 - nested routes approach, where we have the parent. 
We have the shared layout by the way, this is  
77:04 - a tiny typo here. So shared layout. 
And this is going to be our index page,  
77:10 - which is our product page. And we'll also have 
a single product page. I'm not sure that for  
77:17 - React Router six tutorial Hopefully everyone 
enjoyed it. And I'll see you in the next videos.

Cleaned transcript:

React router is extremely common to use in React projects. John Smith yoga has created many popular courses. And now he will teach you about React router. What's up everybody? This is John from coding. And welcome to React Router six tutorial video. Now, if you're not familiar with React Router, it's an awesome library that mentioned building single page applications with React a breeze. So unlike the traditional multi page applications, where we run back to the server every time we navigate to the page with single page applications, we load all of our HTML and JavaScript in one page, more specifically in one div, and handle the rest of the logic with the help of JavaScript. And as a result, our project get that snappy app light feel. Now, since react does not have built in routing solutions, that's why we reach for extra library. And by far, the most popular option out there is React router. And version six is just the latest and greatest option with a bunch of cool new features and custom hooks. So if we take a look at the typical multi page application, we'll notice that every time we navigate to a page, we trigger full page refresh, because browser needs to run back to the server, get a competence and display them. Unlike the React application, where changes happen instantly. Notice, get this snappy response. And the reason for that is because we have single page application. So like I said, we have single page. More specifically, we have a single div with an id of root. And then all the changes then handled by JavaScript, and therefore the contents of the page, load instantly without the full page refresh. In order to follow along, you'll need a star and it's located in this repo. So look for my GitHub, and then more specifically the repo by the name of React Router, six tutorial, then I'm going to go for download option. After that, navigate my downloads, crack it open, drag and drop. So now it's sitting on my desktop, then I think I'll rename it, I'm just gonna go with React Router, how's that I want to open up Visual Studio Code, drag and drop, set right away, side by side with a browser. And LAN, we want to open up the integrated terminal. And we want to go with npm install, and right away npm start. And essentially, this is a boilerplate react application. Effectively I created with create react app. And in here, you'll just find some useful resources. So we don't have to type out some boilerplate code. So in the source, there's a final folder, where you'll find complete application. So if you ever need to reference the code that I type in the videos, you can find it over there. We also have Pages folder. You'll see in the following videos, why we haven't there effectively is just a bunch of React components. And again, we'll talk about them in future videos. After that, we have app Jas, where we just have a heading to with this text, data j is also something that will implement all with later index CSS with all of the styling. Now there's not much to it. But still, I added a little bit of styling here. And of course index Jas. And also in the route, you'll find readme, where I wrote down all the steps we're going to take throughout this project. And if you see in the browser, react, router, six tutorial, then we're in good shape. And we can start exploring React Router six. Okay, before we start typing away, let me just mention a few things. First, if you ever want to run the complete application, so not just reference the code in the final one, but if you actually want to see some feature in action, just go to index j s, and swap the app js files. So essentially, you want to get the objects from the final folder. So like I said, final folder is where you find complete application. And in here, there's also a app J Yes, so just go to index Jas, get the app js from the final folder. And I already added the code, you just need to comment the first one out on common the last one, that if you ever need a reference to official documentation, I left it in a readme a link. So if you click on this link, you will navigate to the official docs off React Router, six. And when it comes to install for yarn projects, the command you're looking for is NPM, install react, router DOM at six. Now, of course, I already installed this package in this project, but just so you don't think that there's some funny business going on. With me, open up here of the terminal, I'll clear everything, I'll run the command. Once the install is complete, and the package json, we'll see or React Router DOM package. And as far as the setup, here's what we want to do. We want to go to app J S. And let me start this up. So npm start, we want to import three things, we want to get the browser router, which is going to connect to the actual browser, the routes component, which is going to be a parent for all our routes, and then route component, which we'll use to set up a single page. So let's go there. Let's start setting up the code. And then I'll talk about the props and rest of the stuff. So let me first navigate to app J S, like I said, we want to grab three components. Now eventually, we'll also get a link and some other ones as well. But for now, these are the ones that we want. So browser, router, routes, and a route. And as a quick side note, if you want, you can add browser router in the index js, basically where you wrap the whole application, but in my case, I'll settle for app. Jas, then we want to go with React, and then router DOM. Like I said, first, we want to connect to the actual browser. So we'll go with browser router, we'll set up the route component. So let's go here with routes. And then we need to set up those single routes. And basically the idea is following where we go with route, then we need to go with path. So this is going to reflect whatever we have in the URL. And when it comes to the homepage, we have special syntax where we go forward slash now in this local setup, that forward slash means localhost 3000. In production, that is going to be whatever is your domain, whether that is udemy.com, or youtube.com, or John smell, good outcome. And hopefully you see where I'm going with this. So this is special, this forward slash, but basically, where we have the path will set up whatever URL is going to be here in the URL bar. So for example, if I want to have a page by the name of best thing, then instead of forward slash, I'll type path equals to testing. And if I want to set up a nested one, let's say I want to go with products, and then forward slash INFO, then yes, you guessed it, one of the ways we can set it up is going with products here, and then forward slash testing. And if you're a little bit iffy on that, don't worry. As we cover more examples, it's going to be easier to understand that. So first, let's go with path forward slash, again, path means our homepage, and then we want to go with element at the very basic level, we can just pass in the code directly here in the element. And in the upcoming videos, we'll see how we can use components for that. But at the very basic level, we just need to set up here what we want to see on the screen. So in my case, I'm gonna go with a simple div here. And I'll say, homepage, like so. So let me close out the route component. And once we save, we should see on page unreal. So that is my home page. And like I said, Now let's set up some dummy page. And I'll call this testing. So instead of forward slash, which is a syntax for the homepage, and simply go here with testing. Now, if I'm going to write about, then, of course, in the URL, I'll have to type forward slash about. Now if I have testing, and you guessed it, I'll go with forward slash testing. And when I want to display here, well, let's make this one a little bit more complex just to showcase that of course, we can set up whatever logic we want over here. So I'm gonna go with Dave and then inside of it We're going to go with heading two, and then the testing. Let's save it. And eventually, of course, there's going to be a navbar, and all that good stuff. But for now, yes, we'll have to do all the navigation in the URL bar. So let me navigate there. And what is the page name? Well, it is best thing correct. So we go forward slash, and manifesting. Once we navigate there, check it out. Now we have our page. And if we want to go back to the homepage, you guessed it, we just need to go back to the localhost 3000. So again, we install the package, we grab three components, browser router, routes, and route browser, our connect to the browser route is going to be a parent for all our routes. And then for every page, we'll set up a route component with two props, a path. So what is going to be the URL. And what we want to render, we pass into the element about about and we created our first pages, life is great. But you would have to agree with me that when it comes to any realistic application, hard coding, the page content in app js, is probably not going to be very good on your health, you'll just end up screaming at your computer. So here's the thing, we can also pass in component directly. So path setup stays the same. Again, whatever we type over here, will match in the URL bar. So if it's forward slash than its own page, if it's about, hopefully you see where I'm going with this. But when it comes to element, we can pass here the component, and therefore, you'll find in the pages a bunch of components. Again, the only reason why I set them up is just so we can save a little bit of time on setting up the boilerplate. So for the most components, it will just find this section with the class name of section. So in here, we just add a little bit of CSS, you can take a look at it in the index, CSS, and heading to with about. So these are the pages that we will have in our project. So here's what I want to do. I want to go to app. Jas, I want to import them all. So for now, just home about product. Notice all of them are coming from the pages. And as, of course, you don't have to name your folder pages. It can be anything, it can be banana pudding. Also, there's nothing special about these components. They're straight up components. The only difference is that now we will use them in the app js. And we'll pass them into the element prop. And as a result, whatever we have in the component, we'll be the content of the page. And yes, in those components, you can import another component, which also is something we're going to do. And as you can see, as a result, it's going to be easier to manage your application instead of hard coding everything in the app J S. So let's try this one out where I want to go to app J S. And I want to import three components. And lastly, if you want to set up here, index j s, that is your preference. Or basically in the pages, you import all of the components and then export them, you can also do so. But in my case, I'll just go the long route where I'll say import, then home. Now when it's coming from, now I'm looking for the Pages folder, and more specifically home one, let me copy and paste here. Let me just change a few things around where I want to go with a about one. So let me select that one. And we also want to go with the product. So let's go here. And let's say product. Once we have all of the imports in place. Now let's keep the path forward slash again, this is going to be for the homepage. But let's change it around for testing one where I will remove it first. And I'll actually pass here the home component. Let's close it. That's also unnecessary. And check it out. Now we have that too. Let's copy and paste and let's just change the round where it's going to be about this one will be product and when it comes to path in here we'll say about as well as product. And again, we're gonna test that out if we navigate to URL. And then if we go with forward slash about, check it out and then we have about page Now, you can probably already guess that if I'm going to go to product will navigate to the product page. So that's how we can set up our page content. As components. Again, we set up most likely a folder, since there's going to be multiple pages. And we're just set up straight up components. There's nothing special about them. They're straight up components. The only one that has more info in here is the login one. But we'll talk about this one a little bit later. Once we actually get there. Whatever you set up over here, whether that's a bunch of other components coming from other folders, and all that will be the content of the page. And as a result, it's easier to manage your entire application. Alright, next, let's take a look at how we can navigate around our project. Because at the moment, the only way how we can do that using URL bar, not as probably not the best user experience, unlike the traditional multi page application where we use the href, the link element, in this case, if we want to navigate around our project. So internally, we want to grab the link component from React Router DOM. Now, if we want to go somewhere externally, for example, if I want to go to google.com, or John's milk.com, then yes, you still need to use the link component like so. So you'll set up a link component h ref, and then whatever the URL. But in order to navigate around our project, we'll use the link component instead. And then blink and bone and is looking for one thing, swung for to prop. And then notice, we just pass in the URL. Now again, we don't need to go with full URL in here, we just need to go with forward slash and then whatever we have in the app J S. So since I have these pages, forward slash, so the homepage about and product kind of makes sense. In the homepage, if I want to go to About page, I need to go with forward slash and then the name is about Now these ones do need to match. So make sure that the syntax is correct. So in home, Jess, I want to set up a link to about just right after the heading two. And then in the about Jess, I want to send back the link to the homepage. So let me try this one out. Where first I guess I'm gonna go to the homepage. So with me navigate through the pages, then we're looking for home. Jas, when we want to get the link one. So import, it's a named imports a link from React Router DOM. And then right after the home page, let's go with link to and again, I want to navigate to your product, we're gonna go with forward slash product. Now if I want to go to about I'm gonna go to forward slash and about, and let's add name. So whatever we want to display here, and a little bit of styling, therefore I'm gonna go with class name. I'm just gonna say BTN. So once we save, notice, now I have this link to the about page. Now we navigate to about without that full page refresh. And in order to make this a little bit more interesting, why don't we also do the same thing in the about, so then we will be able to go from one to another one. So let's go to about Jas. Same deal, want to grab the link, import, and link probably should have copied and pasted. But anyway, so React Router DOM right after the heading two, let's go with link two. In this case, I want to go back to the homepage, say back home. Online. Let's also add that class name, a little bit of styling class BTN. So now we can nicely go from page to page without that full page refresh. Again, if we want to navigate around our project, we want to grab the link component, it's looking for one thing and one thing only looking for to prop. And in here, you want to pass in the same value that you already have here as far as the path. So if you want to go to about you go forward slash about. And if you want to go to product, you go to forward slash products and hopefully you see where I'm going with this. Okay, but what if by mistake, the user types, some kind of path that doesn't exist. So let's say I'm gonna go with forward slash, and then hello. The moment basically will display nothing. Why? Well, because if we take a look at our app js were only unlink these routes, we have Ford slash home and about products. And in order to handle this type of scenario, we want to set up an error page, where essentially will display some kind of error message for every request that doesn't match any of our routes. And we want to do that with a route component, we want to pass in the path with a star. So essentially, this will match everything. So if we can't find those pages over here, then this will collect all of them. And then we want to set up some kind of error page. So first, let's set up this in the app J S. And then we'll work on the error page. Now there is already a page in the pages. But I just want to add a little bit more content. So first, let's go to app. Jas. Let's copy and paste. And yes, we want to place here all the way at the end, because this catches pretty much everything. So we want to go here with the star. And now let's work on the error page. Or essentially at the moment, again, we have this section with a class of section I'm heading to with an error. But I want to set up a link back home. And I said this is what we're going to be working on. So we want to get the link component from React Router Dom, we want to add some kind of logic. So 404 Page not found. And then we want to navigate back home. So let's try this one out where in this case, I'll speed this up, I'll grab the link, since will mean that one, then after the heading two, or you know what, let's change this one around, we're gonna go 404. So Page Not Found a paragraph page found. And then we want to go with link component to where I want to navigate, well, I want to go back home. And in this case, let's just say back home, let's save this, we want to import a new page. So let's try out the auto import. So I'm gonna go here with error. And let's see whether I got actually the page now it doesn't look like it. So let's try one more time. Yep, over here, I can use the auto import. And notice now we have a nice 404 page. So if I'm gonna go with forward slash, and testing, same deal with don't have that particular page in our project. So basically, there is no URL that matches that, and therefore we display this error page. Now, if we click on Back home, we naturally navigate back home. Alright, next, let's see how we can add navbar and footer to our project. Now in this video, I'll quickly show you the most basic approach, which clearly has its limitations, since it adds the same components or elements to all of the pages. But don't worry, in the following videos, we're also going to cover more fine grained approach, where we will nest our pages and set up the shared layout. As far as the basic setup, we simply want to set up the elements above or below the URLs. Again, please don't make the mistake and place the elements inside of it, you will get an error. But if you place it above or below the routes, this will be added to all of the routes, like I said, most basic approach. But there's definitely situations where this is a nice solution. So let's navigate back, we're going to go above the routes, we're going to set up the nav component, basically an element. And yes, of course, you can set up the component import it here. And also, of course, you can add the links. Now I'm not going to add the links in this scenario, since we're going to do that in the upcoming examples. And I don't want to repeat myself and waste your time. Basically, I'll go here with our app bar. The same thing we can do with footer, I'll say our footer. And once you save, you'll notice that in all of the pages have the number as well as the footer, if we navigate your route, same is going to work with products. And it's not going to be surprised if we navigate to another page. And we get the same result number and four gets added to all of the pages. So this is the most basic approach, how we can set up some shared layout, where essentially in this case, we're adding both of these elements to all of our pages. Alright, next let's add a navbar to our project. And in the process, we'll learn how to set up mess the drought shared layout index page. Since I want to cover everything step by step, please be prepared. to refactor our application few times. So if I want to nest some routes inside of the another route, I just need to go with the parent route. So notice, instead of self closing the home one, I'm going to go with an opening tag and the closing tag. And then I just decide which routes I want to set up in here. There's going to be multiple issues with our original setup, the main focus is that now, all of these routes will be nested inside of the home one. Basically, they will be relative to whatever we have as a path to a home road. And don't worry, I'll show you also with another example, just so you can see better again, we'll refactor our application multiple time, so don't worry if in the beginning, some stuff break. So let's navigate back to app. Jas, like I said, I want to nest about product and the error page inside of the home one, because I do want to set up a shared layout. And I want to set up also a navbar. So let's try this out, where instead of self closing, let's go here, let's say route, and then close it. And, of course, there's a syntax error like so. Like I said, there's going to be multiple issues, if I go to about, I'll actually see the homepage. And yes, that is something we're going to fix in a few videos. Now the main idea right now is the fact that these are all relative to the homepage. And it's kind of hard to see, since this is homepage, since we're doing the setup on homepage. So therefore, let me showcase that if I'm gonna go here with dashboard instead. Right now, you'll notice that you won't be able to navigate to an about page, you'll have to go to a dashboard, forward slash vote. So that's the key about nesting routes, where whatever you have here as a parent will be the main route. And then whatever is inside is going to be forward slash and whatever path is over here. So let me save it notice, we cannot see anything. But if we go to dashboard, which is technically our home run right now, and then about when everything technically works. Now, we still don't display the about one, but we'll fix that in a second. So hopefully this is clear. Where are they in our case, we are using as a parent, our home one. But for example, if I'm going to go outside of this home one, if I'm just gonna say okay, let me set up the dashboard, you'll see how basically this works again, you won't be able to see actually, what is displayed in the stats, for example, the page that I'm about to set up, but you will be able to see that this is how it works. So element. And let me go quickly with them over here, I'll say, dashboard. So and then we want to match this. So let me go here with the route. And then inside of it, we'll set a path, and then whatever path I want. So in my case, I'm gonna go with stat. So now we're looking for dashboard, and then stats. So this is how we normally will nest routes. And again, we won't be able to see this stat there. Because we need to add a little bit more logic, which we'll do in the next video. This is just showcase how this nesting is going to work. If we're going to go to a dashboard and stat. Now you'll see that we'll have this dashboard one, but the route exists. So technically, there are no issues over there. Now if I go to dashboard, this is where I'm displayed. And now if I go to about again, since our parent over here is the home route, that's why we see the about page again, that's the first step how we can nest routes inside of the parent route. And then whatever we have for a path is going to be the main path. Whatever we set up over here is going to be the parent plus this value over here. So if you go here with dashboard, then it's going to be dashboard about dashboard product. And since in our case, it's a homepage, we go with about product. Okay, so our initial setup works somewhat Alright, where your all's are matching, whatever we set up there with nested routes, but the problem is the result. We keep seeing all the time The homepage. So how we can fix that and how we can also set up a shared layout? Well, we need to go to the parent, in our case, home and import outlet, the outlet component. And then we just need to display this ultimate component. Whatever we'll set up around this outlet component is going to be the shared layout across the pages that are nested inside of the parent. And then the actual page content will be displayed here. In the output of one, I think it's going to make a little bit more sense if we set it up. And that way, you're right away, see what I'm talking about. So let me go to home a Jas, we want to grab this outlet component. And the position is really up to you. Again, you'll see once we add navbar, that of course, however you set up this return, that is going to be how your shared layout is going to look like. Now I'm not going to keep this link, I think we're good to go. So I'm gonna go with outlet. And now, once I save, actually, I see this homepage. So at the moment, this will be shared all across the pages. But I nicely also see the about page. And if I'm going to navigate to a product, same deal, I still see this homepage. So this one is shared all across these nested pages. Also, I see the actual content from the product page. So now we can put two and two together. If this is shared all across the nested pages. Why don't we set up the navbar. Add some links. And as a result, we'll be able to navigate from page to page from home to about until the product now notes up, we need to go with new components. So I'll set up the components folder. And in there, I'll create navbar J S. And we want to import a link one. And then let's set up the nav, then let's import that in home J S and again, whatever, return your set up over here. That's how all those pages will be displayed. So if you do the side, let's say underneath the section to set up a footer, you can definitely do so again, this is going to be that shared layout all across the pages. And don't worry, the homepage, the actual parent is going to look somewhat funky. We'll work on that one next. So first, let's worry about Napa. And I want to do that by navigating here. Please don't set this one up on the finals. Because it's already there, we have the components. So in the source, I want to create actually not a new file, I want to create a new folder component. And this, of course also showcases that, of course, like I said, all of the components in the pages, we can use other components because they're just good all the regular components. I'll set up navbar je s now there's going to be one more file because I'll show you the active link as well. But let's not worry about it right now. I'm using this extension to create my component, this is going to be number like I said, I do want to get the link. So let me close the sidebar here. I'll say link from and then we're looking for React Router DOM. And then we want to go with a nav now I did add a little bit of styling and CSS. That's well add here class name, nav bar, and then we're just want to set up the links. Now I will set up links for about products, and homepage. But we might add one more for login one little bit later. So let's go here with Link to this is going to be through the homepage. And then let's add a text. Let's copy and paste. Now this one will be through about page again, whatever pages you have. So in our case, we have about and products as well as the home page. Let's set up about let's set up all of your products. And now we want to navigate to the home one and import that navbar. So let's go with import nav bar. And basically, you're gonna get the component. Like I keep saying whatever structure we will set up over here is going to be the result in the browser show. I don't want to keep this section right now as it is. Instead I'm going to go with React fragments since we need to return one element. Then I'll play In navbar, on top, after that, I will remove this homepage. And then let me bring this section up. So I'll display the navbar. Mike. So with these links, and in here in the section, I will have that outlet, basically, whatever we have inside of the page. So whatever we have in the amount in the product, essentially all the pages that we have nested as a result, notice, not only I display the contents of the about page or the Products page, but we also have the number. So if you want to add the footer, go ahead. Most likely, you'll want to do that beneath the section. With this in place, now we can set up the index page, because at the moment, if we navigate here, nothing is displayed. So let's fix that in next video. Alright, so our functionality is almost complete. The only thing that's missing is the content in homepage. First, let's understand why that is happening in the app. Jas, we have nicely nested the routes. For the parent, we have the home. And inside of the home, we have the outlet. And there we display product about as well as the error page, something that I actually forgot to add last video. So if I'm gonna go with Hello, notice, again, we'll still have that mesh layout, the shared one with the navbar and all that. And in here, we display the content. But when it comes to actual homepage, well, we don't have any specific content here. That's why we render pretty much nothing, we just have the number. And technically, if you want you can add that heading to or whatever content you want. But just keep in mind that that will be shared all across the components, basically the pages we have nested. So what is the solution? Well, the solution is to set up index route. And here I just added some text from the React Router docs, you can definitely read it through but I think it's going to be faster if I just showcase the syntax. So if we have these nested routes, for the main one for the parent, we can set up the index route. And it has a special syntax. Whenever we go route, then we pass in the Prop by the name of index. And this will always always always match whatever we have here for the parent path. So if this is going to be dashboard, that yes, this index is going to match the dashboard. However, since in our case, we have home we have home. And then again the same deal, we go with element. Now the gotcha here is that we still want to set up some kind of shared layout. Correct. And therefore we'll have to create a new component in that new component, and basically take whatever we have right now in the home one. And we'll add that one as a shared layout in here as an element. So whatever we have right now in the home, we'll create a new component, we'll call the share layout. So now always share this layout all across these pages, but then the home one will have its own content. Hopefully this makes sense. So now let me save this. And let me first go to a pages, then we want to create a new one. And I'm going to call this shared layout. As always, you can call this shake and bake doesn't really matter. Let's grab the home one. And you know, also, as we will be setting this up, we're going to remove that section because each of them have already that section with a class name of section. So that is an overkill. So let me navigate to shared layout, copy and paste. Now let me remove this section, we don't need it. So now we have only two things. We have layout, which will have the page content, whatever is the page, the homepage, the about page, the product page, and also whatever we want to put around it. So in my case, that is just the number. And once we have this one in place, let's navigate to app. Jas. We want to set up that shared layout first. So let's say he shared layout. Yep, of course it breaks. So let me copy and paste. I'll say here shared layout. And now we just need to work on that index page. So if we want to set up a page that will match the parent. In this nested URL structure we go route Then index, and then we're passing the element. So in this case, you want to go with home. And now we need to navigate. And first of all, we need to close it here, when we want to navigate to the home one. And since the moment I'm displaying the navbar, we want to remove some stuff where I think I will remove both the Lincoln outlet, I don't think we'll need it, since we already have the knob. But anyway, and then we're just need to come up with whatever we want to render. So I don't want the outlet. I don't want to navbar I just want to go with my good old heading to and I'll say homepage. And, yes, we can also remove the second lag. I said, Yes, I purposely did this the long way to kind of showcase how we get to that shared layout and what issues we're going to get along the way. So yes, there was a little bit of refactoring. The good news is that check out through our result, we have homepage, which displays home and about one product. And if we have some kind of page that doesn't exist, let's say product. And hello, when we display homepage, and we nicely navigate back. So hopefully, this is clear, where if we want to set up this shared layout, first, we need to come up with the parent in our case that is index. But again, I showed you example, with dashboard, whatever you type over here, that's going to be the parent, then most likely, you will come up with some kind of shared layout. So what you want to share across those pages, and as far as the parent, you'll set up the index. So that will be the content only for the actual index. And then rest of the pages. And remember, we need to use outlet to render those results. All right. Before we start working with URL parameters, let's also see how we can set up active links. And effectively what that means is that once we're on the page, this link will have specific styling, whatever we want to set up. And in order to do that, I will create a new file, just so typical setup stays for your reference. And instead of link, we want to grab the nav link. Now what's special about the novel link is the fact that in style, and also in the class name, we can pass in the function where there's a property by the name of is active. Again, this is provided right away by React Router, a man based on that value, we can set up some type of styling. Again, this is the straight up inline CSS approach. But we can also do that with classes. And of course, we'll take a look at both examples. Let's start working on the main setup first, where in the components let's create styled navbar. And again, the reason why I'm setting up a separate file is just so you have right away a reference for the basic setup. Let's copy and paste again, we're looking for nav link instead. And let's change these suckers as well. So we're looking for nav link. For now let's not do anything, let's not add any kind of logic, we simply want to navigate to Baba Baba app, Jas, or I'm sorry, what app js shared layout, my bad. And I'll copy and paste. And I'll just say, shared layout shared, or I'm sorry, not shared layout. For some reason, I'm totally tripping there. So styled and navbar. Of course, my apologies. And for some reason, I didn't change this one as well, instead of typical navbar. Let's go here with styled number. And once we save, we will right away notice that our active link gets different styling. And first, let's just quickly cover why is that happening? And second, we'll take a look at the code that controls that. So first, why is that happening? Well, again, by default, if we use that Novolin, the React router by default, even without us doing anything adds this class of active to it. If you take a look at index CSS, and more specifically, if you just keep on scrolling somewhere on the Navbar you'll find this active class. So if you just set up an active class, if you use network, the class will be automatically added. As a result, you'll get the styles. So now let's see how we can control that code a little bit more. First of all, let me close all my files and all that here. So let me start from scratch. I think it's getting quite busy. Let's just take a look at how we can add good old regular CSS to it. So I'm in the style number, then we want to go with style over here, and I'm not going to add to all of them, but I will showcase for the home one. So I'm gonna go with style, I want to go with interpolation. And like I said, we want to pass here, the function, this function, the value and all that is provided by React Router DOM. Now, keep in mind, this is not just good old parameter here. So don't say is active, we need to specifically look for objects and then is active. That's how we can properly access that. And then since we're setting up here, inline styles, we can just use a ternary operator, where we go with returns. So what are we returning this object will be applied to this link. And more specifically, I want to look for the color. And then I want to check is active. So what is the value. So if it is true, I want to add color red. And if it's not, then I want to go with gray. Please keep in mind that we can set up whatever functionality you want over here, I'm just going for straight up color. Of course, if you prefer setting up your CSS in line, you can add whatever the properties with values you want. And now check it out. If we navigate to home page, the style will be red. So the color of the link was going to be red. And yes, if we add this to the rest of the links, it's also going to work, I already set up the reference for your here. So in my case, in the style nine bar, I'll just showcase the class approach, since in my opinion, that's probably is going to be something you will use more often. So if you ever need this reference, it's available in the readme. So let me remove this style here. And now instead of style, I'm gonna go with class name. And if we take a look at the CSS, you'll notice that not only I have the active one, I also have some general style for the link. And yes, of course, like I keep repeating, you would normally add more code over here. So instead of just relying on the active one, I'll say, All right, what is the value for is active. If it's true, then I want to add link class, as well as the actor one. Basically, this is where I'll have more styles normally. And if it's not, then just going to be link class, which just gives those general stuff. So let's try this one out, where again, we are going forward a function in the function, we're looking for the object, and then we go with E is active. And then let's set up that ternary operator, where we want to go with is active and you're not thinking in this case, I'm just gonna go with implicit return, so is active, if it's the case, then I'm gonna go with Link and active. And then if it's not, then I'm just gonna go with link one, I do want to grab this entire thing. So copy, hopefully, there are no bugs there. And then let's just set up on all of these ones, let's save, this is going to be our default setup. And then once we click, now, of course, we get that active class, as well. And as you saw, there's multiple ways that we can set up. If you just an act of class, it will be added by default that now. So technically, you don't need to do anything. But most likely, you will set up the class approach. Also, keep in mind that, of course, you do have this inline CSS option as well. Most importantly, mavlink, then the function, then object in the object, you have these actor, and then you can use this value to set up your logic. Alright, and now let's see how we can read URL parameters. And as a result, we'll have some dynamic pages. For this, I just want you to imagine a product page where we display a bunch of products. And then once we click on that one specific product, we display it in a separate page. However, here's the key. I don't want to set up a separate page for every product that I have. It makes more sense for me to set up one page, which is going to act as a placeholder. And then I'll just get the data that I need to display. So that way I can use the same page for example 4000 products or 3000. On hopefully you see where I'm going with it. And in order to set up your URL parameters, you want to go with this colon, and then whatever the parameter name, call this I can bake all this vegan food truck in my cache, since will display product, I just thought is going to make more sense if I'm going to go with colon, and then product ID. But this name is really up to you. Now, as far as this URL, this can be straight up like so, where we go with colon and product ID, this can be product stats, and then product ID. Again, this part is really up to you. I just thought that going with product, and then product IV is going to make more sense. Before we begin, I also want to quickly mention that yes, you can set up that nested structure, like we did over here, for a product and product ID as well. I just went with this setup for two reasons. First, I really, really, really want to focus on the URL params. And I think it's gonna be better if we use this setup. For that way, it's easier for us, we don't need to do this whole song and dance. And second, I also want to showcase that if you don't have the shared layout, which in this case, we want, you don't always have to use that approach. You can also use this approach as well, where you go with whatever is the main URL. And then in here, specifically, we go with this dynamic option. Hopefully that is clear. So first, let's navigate right now to app Jas and get that single product. So if we take a look at the pages, there is already a single product, there's just a heading two. So why don't we in the app js, first of all, set it up, and I'll do that right after the product. So let's go with route event path, then we'll go with a product and that product ID. And you'll see that it is essentially a property. So again, we can name it whatever we want. So go with colon product, ID and then what is going to be the placeholder, well, we want to go with LM meant. And then we want to go with that single product, which hopefully is going to work but doesn't look like it. So that's why sometimes this auto import is annoying, because it doesn't work. So let me save this. And yes, of course I have there. So let me go here with import, and then single, single product like so. And that is coming from. And we're looking in the pages, I believe, right. And then we have single product. So not everything works, we have that similar product. And now if we go to URL, if we just type whatever gibberish we want. So eventually, there's going to be actual data, because they already prepared for you. But I'd say if we type 123, we have single product. If we type in a three through three, we'll also get that single product. So that's the placeholder we're going to use. So now let's navigate to the single product. And let's take a look how we can access it. So this is the setup, where we go with that colon and then whatever is going to be the parameter names or macros product ID. Now, if we need to access it, we need to get the hook from React Router DOM. So use, use params. And we'll also get the link. And then we want to invoke that hook. And notice how this name now needs to match whatever we have over here. So as long as they match, you'll be in good shape. And then for timing legends displayed. And let's navigate back to the main product page. So let's set this one up. Where I don't think I'll need styled navbar anymore. But I do want to navigate to single product. Like I said, we're going to be looking for two things, we're gonna get the link first. And also we want to get that hook use parameter, which is going to access those parameters in the URL when all that is coming from react. Yep, that's not correct. We need to go with import my apologies, not const. So let's go with React Router Dom, then as far as the return, first we want to grab that product ID. And you know, as a side note, why don't we do this? Why don't we just log the sucker? So let's say you're used params. And you'll clearly see, what am I talking about? So let's invoke this. And then let's navigate to the console and check it out. We have the object. What do you know? We have product ID 333. So you fill changes around 123. And of course that value will be also 123. So now we want to pull this out from the use params from the object so let's go with product. And then Id Now that is equal to use params. Let's invoke it. And like I said, let's set up that link back to the product, push if you want to navigate also back home. But my guess it's going to be back to the products back product. Where we have right now the single product for time being let's go with adding four. And let's display the ID. So let's say here, product, and then it would save it and check it out. Now we have 123. Again, if we'll change this around to 4567, this is going to be the value show. Next video, we'll iterate over the products that I provided in I believe data address, we'll run them all of them in the Products page. And then from there, we'll set up a single product page as well. All right, and once we have the single product page in place, now in the products J S, let's iterate over the products that are coming from the beta. And then for every item, I want to return an article will have to use the key since of course, this is react. And then I want to access product name, as well as product ID, which I'll pass into this link. And notice the URL. Again, this needs to match whatever we have in app J S. Since in the app J S, we have products and product ID, this is where we dynamically pass in the ID property, which is going to be in every product. Once we set this one up, then in the single product, we'll use that ID. And instead of rendering it on the screen, like we have right now, basically pull out that one specific product, then we'll get the image and name. And then we'll display it. Now before we continue with me right away say that, yes, normally we'll get this data from the API or database or whatever. But since I want to keep this nice and cute, that's why I'm prepared this data Jas, which essentially is just an array of products, each product has the ID. So this is something else see over here in Euro name, as well as the image, which is just an external URL. So these images are stored on a cloud somewhere. So that way, we don't need to bother with the local image setup. So first, let's go to a product js. And we want to get the data. Now if you want, of course, you can log it, but I'm just gonna assume that it's there. And also, we want to get the link, because each and every product will be wrapped in a link. So React Router Dom, then off the bat, let's go import that product from. Like I said, we're looking forward to data. Jas. As far as they return, it looks like for some reason, I set it up as a React fragment. My bad, let me just remove, we'll have section here, we'll have product. And then right after that, we want to go div with a class of product. So then there's little bit of styling over there. Let's go with product map or mapping over. And then as far as the return, let's go for product. Again, if you want to log it, you can definitely do so in my case, I know that, essentially, there is going to be all those properties. So I want to return article, I do want to add right away a key. And I'll just say here, product ID, then I also want to go with heading five, and I'll say product name. And also we want to set up that link. Now, I believe previously, I mentioned that we'll wrap it, my apologies. We'll just set up the link here. So let's go here with link to Now remember, this is dynamic. So now, we are not passing this manually 456 Or seven, we actually go with product, bath and then that dynamic Id rather so let's go with template string, then product, and forward slash and now let's access that sucker. Let's say product, then ID and then set it with let's just say more info. Let's save it. This is that single product, so we won't see anything. But if we navigate back, check it out. Now we have a list of products title, as well as the link. So this is going to be more info. Now notice we have this unique ID in two places. We have it over here. And we also render it. So now we just need to add some code to single product. Well first, I'll grab it okay. as good, but I also want to get the product from there right from the data product from that data. Very good. Like I keep saying, normally this is going to happen with some kind of fetch request from the API and all that, but not in this case. So I want to get the single product. And that is going to be with products, then use Find. And now we'll just say, get me the product whose ID matches the product product here, and then return a product ID equals to product id like so. So product.id equals to product that beautiful, then let's pull out image, nine, we don't need the ID anymore. And then let's set it up in our return, we're first we're gonna go with a heading five, I guess. And instead of product ID, I want to display the name, and then right above it, or below it or whatever. Just go with IMG source mount will be equal to that external image. So let's set up the image over here. If you want, we can also set up the alternative. Let's close the image. And as a result, we get the single product. And like I said, Now consider 1000 products, so we can render them in the product page. And then for each product, there's going to be a single product page, essentially, which act as a placeholder will fetch some data about that one specific product. And we'll render that in the single product page. And now let's see how we can navigate around our project programmatically, ie in our case, that is going to be once we submit the form. And also, let's see how we can restrict access to certain routes. Before we begin, though, please keep in mind that normally, we will use context to store our user value. In this case, I just didn't see the point of setting up the entire boilerplate. And we want to start in the app J S, wherever you want to set up user state value with your state, an initial value will be known. Then we want to import two more pages, we want to import the login page, as well as the dashboard one, again, the boilerplate placeholders are already there. And then in the login one, we want to pass in the function, the one that sets up the user in the dashboard, we want to pass in the actual user. So let's start in the app js, where we want to get the use state from react or import use state that is coming from react. And let's set up that state value. So in here, let's go with const. User Set user that is equal to use state. Let's pass in and then let's grab both of those pages. So we're talking about the dashboard, as well as the login one. Now dashboard doesn't have anything, pretty much the same boilerplate and login has a little bit more, and I'll cover that in a second. Now, since my auto imports were not particularly successful, let's try it here, where I'm gonna go with the dashboard, dashboard. And again, it's not working. So know what's up with that. So let's go with pages. Yvonne, let's access the dashboard on copy and paste. This case, let's delete. Let's just go with login. And right after that single product, first of all, I'll make my browser bigger here, I want to go above the arrow one. Let's set up that route, the login one, so path will be login. And then we want to go with element. And let's pass in the login one. And then inside of the login element, let's also pass in set user is equal to set user. So now we're passing in this function. Now we do want to close this one, meaning the route. So at service, learn, we'll copy and paste. This is going to be dashboard dashboard. And the components will be dashboard as well. And set of set user go to User so user is equal to user let's save this. Now let's navigate to the login one and you're not actually I also want to add the link to the login one so not to dashboard but to the login one. And if you remember that was in the style number two So let's navigate here. And let's add one more link. Let's copy and paste, this is not going to go to product, this is going to go to login. And then also the text will be login. Let's save it, we have the login. Once we navigate here, we notice that we have the form, which is awesome. So now let's navigate to the page. And we'll take a look at what we have and what changes we need to add. So I important you state I have two states values have name and email and I right away have the handle submit where we have prevent default, pretty much basic setup. Also, both of them are set up as controlled inputs. So they're tied to the state value. So as you start typing, you basically will have both of the values over there. Now if you want to test this out, let's go with log and then say name, and email, and pretty typical setup. So I'm gonna go here with John, John gmail.com. And once we log, check this out, we have both of the values. So here's what we want to do. In the login one, we want to check whether both values are there. If there they are, first, we want to set the user. So this one was coming from the app Jas and yes, I purposely went here the long route. And then we want to get us navigate from React Router DOM. And we want to navigate programmatically to a dashboard. So notice, in this case, not happening once we're clicking on a link, or Novolin. In this case, we'll navigate there using navigate. And in order to invoke that we get to use navigate, we invoke it, this is going to be equal to navigate. And then in here, we just provide where we want to navigate. And then in the dashboard, since we can access the user, I just want to say hello, and then the user name. Now we are using optional chaining, because remember, initially, it's going to be no. So let's try to set this one up. Where in the login, first let's grab that navigate us navigate that is coming from React Router Dom, then I already have the console log. Okay, beautiful. Let me remove it. And in here, above the house submit, let's set up that navigate. So now we are equal to use navigate, let's invoke that. And then we're gonna go with if condition. So if there is no name, or there is no email, so if one of them is missing, then we want to return. And yes, that is the check that I'm going to set up right now. So there's going to be no error messages, nothing like that. I just want to check whether one of them is empty. If one of them is empty, we'll simply return. Now, if both of them are provided, we'll go set user. Now we just want to grab it from the params. So let's set up here, set user. Again, this is coming from the app jet, like So first, we want to invoke it, we want to go set user, let's pass in the name equals the name and email equals email. If you want to shorten this up, of course, you can definitely do so. And then let's go with navigate. And where we want to go, we want to go to forward slash dashboard. Let's save this one right now. Let's try to do that with only John. So if I just provide one value, notice I can undo anything. Or if I go John and gmail.com will notice that we'll nicely navigate to the dashboard one. And in dashboard, I just want to display the name. The way we set it up. If we take a look at the dashboard, we just want to grab the user since that is what we're passing in the app js again. More specifically, I'll look for name however, there is going to be optional chaining, since initially, it's going to be no. So let me now get right now to the dashboard one, let me grab the user. And then once we destructured where we have the heading for instead, I'll say hello. And let's just access the user name, like I said optional chaining. And then let's go for name once we save we have Hello John. So if we'll navigate to a login and we'll go with Peter instead and peter@gmail.com First, we'll programmatically navigate once we submit the form using the US navigate which we imported, then invoke that and we just passing the path, the dashboard one. In the Dashboard page, we actually display the name of the user which in this case is better. Alright, and now let's see how we can restrict access to certain route and first in the pages We'll have to create that component. So in this case is going to be protected route. And then in the app js, you want to wrap whatever page you want to restrict access to, in that protected route. So yes, in the element, you'll have to go to protected route. And then whatever page you want to render, so automatically, this page will be restricted. So let's start here in the pages, let's set up a new file. I'll call this protected route. For time being, it doesn't really matter what we display here, since the logic is going to change anyway. And once we have the file ready to go, let's navigate back to app J. S, we want to go with protected route. And since I don't want to restrict access to the dashboard, now I want to wrap the dashboard with a protected route. I'll set it up as self closing. Let's go here with protected route. Like I said, normally will pass in the user using use context. Our in this case, since it's right away in the app js, I just go with user equals to user since we'll need to check it. And if the user exists, only then will display the dashboard. So now notice, even though technically URL says dashboard, we're displaying this protected route, because now we're wrapping dashboard with protected route. So up next, let's set up the functionality. Where in the protected route, we want to import, navigate component from React Router DOM. And then we want access to things. We want to access the children. So this is going to be that dashboard page, or whatever page we place in that protected route, and also a user. And then we'll check if the user doesn't exist, we want to use navigate component. And we'll just say where we want to navigate. However, if everything is correct, we'll return children, in our case is going to be our dashboard. So let's go to protected route. And first, let's grab that navigate. So I'm gonna go here with import, then navigate. So navigate component from React Router Dom, very much access both props, so children's prop, so children, and then also user. And let's set up that logic where if there is no user, then we want to go with return and navigate to I'm just going to go to homepage. Please keep in mind, we can navigate wherever we want. And then if everything is correct, then we'll just return children. So with this in place, what's going to happen once we refresh, we'll have homepage. If let's say we try to somehow manually get to the dashboard, the axis will be restricted. Notice how we navigate back why? Well, because there is no user. So only if we go to a login one, add that user my case, John john@gmail.com, then we'll be successful. And we'll navigate through a dashboard. The split. Again, I guess the biggest gotcha is the fact that in the app js where you render the pages, you do need to wrap it, you need to wrap whichever page you want to restrict access to in the protected route component. Beautiful. At the very end, I just want to set up of the product and product ID as a nested route. And this is the case where if you want to challenge yourself, you can stop the video and try doing it yourself. So basically, whatever we have right now, here with a homepage, where we nested rest of the route. I also want to do the same thing with a product where we want to place a product ID inside of the product, we do want to set up the index one, as well as some shared layout. So again, if you want to try doing that for yourself, stop the video, try to solve this puzzle again. Basically, the setup is exactly the same, you'll probably want to use a different shared component. That's it. So let's start here by setting up that component. So I'm gonna go here with shared product and layout. I know it's somewhat long name, but we'll deal with up, then let's grab quickly to code over here, since I don't want to waste my time on imports and all that. So I have here link, I don't think I'll need that. What I want is outlet, I won't need the navbar. And as far as the shared layout, well, there's not really much that I want to add over here. And guess I'm just gonna take a look at the products one. So in here, I just have heading two. So let's do it this way where we'll go with heading to go with products. We'll keep that one. And we won't need the import for the style bar as well learn let's go back to our app J Yes, we want to grab that long component. So let's say here import, shared, shared, and it was product product layout, J S. So that is coming from the pages, I believe. All right. So shared product layout. Let's close this, before we continue in the product j s, we can just remove the heading to let's set up the entire logic here, where first we want to go with the route, the path will be products correct. So we're gonna go here with products. Now as far as the element, we'll go with that shared product layout. Let's close this one. And then in here, let's set up both of these routes. Now we can remove the path and just say index. And for this sucker, just going to be product ID. And once we save, I'll make this one bigger. Now, as you can see, the result did not change. So the functionality is exactly the same. The only difference is that now again, we're using this nested routes approach, where we have the parent. We have the shared layout by the way, this is a tiny typo here. So shared layout. And this is going to be our index page, which is our product page. And we'll also have a single product page. I'm not sure that for React Router six tutorial Hopefully everyone enjoyed it. And I'll see you in the next videos.
