With timestamps:

00:03 - all right welcome to the introduction to
00:06 - JavaScript course at scrim be calm we're
00:09 - gonna be talking about a lot of things a
00:11 - lot of important concepts in JavaScript
00:14 - starting with data types and control
00:17 - flow and basically everything that
00:18 - you're gonna need to get up and running
00:20 - by the end of this course it's gonna be
00:23 - covered over 14 lessons with seven
00:25 - different challenges these challenges
00:27 - are going to be some concepts that you
00:29 - may know the answer to if you're paying
00:31 - attention in the course or you may not
00:33 - they're they are designed to introduce
00:36 - you to some of the stranger or weirder
00:38 - parts of JavaScript a little bit about
00:41 - javascript javascript is written in ten
00:43 - days it's an event-driven language and
00:46 - object based language and it was
00:49 - originally designed to make web pages
00:52 - more dynamic that's where it has grown
00:55 - and flourished although you can use
00:57 - javascript for databases for the backend
01:01 - for mobile applications java scripts
01:04 - home is in the front end client-side
01:07 - development with HTML and CSS it's one
01:10 - of those core three things HTML is sort
01:13 - of the body CSS is how it looks and
01:16 - JavaScript is making sure that it's
01:18 - dynamic a little bit about me I've been
01:21 - working in JavaScript for about two and
01:23 - a half three years as a I've been I'm
01:26 - currently a front-end engineer although
01:27 - I do full stack I'm also a content
01:30 - creator on YouTube if you click on the
01:31 - icon you can go check out my channel I
01:33 - do software tutorials and talk about
01:35 - topics related software as well as my
01:39 - own udemy course I'm really excited to
01:41 - be making this course let's go ahead and
01:43 - jump right into it
01:48 - so in any programming language you're
01:50 - gonna need a way to store a language and
01:52 - values and the way that we can do that
01:54 - in JavaScript are with three main
01:56 - keywords var which is essentially
01:59 - deprecated and I don't recommend we use
02:01 - so we're not going to cover that because
02:02 - I don't even want that to be part of
02:04 - your mind but if you see var you know
02:06 - example equal to true for instance we
02:09 - now can console.log example like so save
02:16 - it it's kind of logging it out right so
02:18 - if it's gonna print it out that's what
02:19 - console.log does but here we're storing
02:22 - a reference to the value true and if we
02:24 - wanted to make this you know Dylan for
02:27 - instance and we save just update it
02:29 - you'll see it's gonna print out Dylan
02:31 - right don't worry about var and so do
02:34 - using var what you want to use is let
02:36 - and when we get to for loops I'll go
02:38 - into a little bit more detail as to why
02:40 - devar has been deprecated but right now
02:42 - when you're storing values that you're
02:44 - gonna override in the way that we
02:46 - override variables we already have
02:48 - example defined here well you know I
02:50 - didn't say example is now equal to we'll
02:53 - do my last name Israel right is our ad
02:57 - I'll save it it's here we're never we're
03:00 - not getting done although Dylan is
03:02 - originally set I think it's overwritten
03:05 - by example here with our let now if we
03:09 - wanted to make a constant we would use
03:13 - cons but you see we get this syntax
03:16 - error the reason for that is when you're
03:19 - dealing with a constant when it when
03:23 - you're talking about strings when you're
03:26 - talking about boolean x' when you're
03:28 - talking about numbers and we'll dive
03:29 - into datatypes in the next video but
03:31 - constants cannot be overwritten when
03:34 - dealing with the primitive values and
03:36 - we'll talk a little bit more about
03:38 - primitive values in Dave College but
03:39 - typically if you're gonna override
03:41 - values like so or if we wanted to
03:44 - override right here get rid of that
03:47 - that's resetting the value we would use
03:50 - a Const right but if we're gonna reset a
03:52 - value potentially we're gonna use let
03:55 - we're gonna dive a little bit more into
03:57 - detail about how that is typically true
04:00 - unless we're dealing with a
04:02 - or objects in the next video we're going
04:04 - to talk about data types but in terms of
04:07 - storing data what you're going to be
04:08 - using this letting kant's
04:14 - all right let's start by talking about
04:16 - what a string is you saw earlier we
04:18 - printed out my name and with we're
04:23 - putting out my name is in console.log
04:25 - and we have this variable here called
04:26 - name and so it's gonna go ahead and
04:29 - print out Dylan right we showcased that
04:30 - earlier so what this is called this
04:32 - datatype here is a string we can
04:35 - actually use this type of word here one
04:38 - word to actually find out what it is if
04:40 - we want to print it out and you'll see
04:41 - that it's printing out string so that's
04:44 - one way if you ever get confusing and
04:46 - kind of check that out right there's not
04:47 - too many data types in JavaScript which
04:49 - is nice but you'll see here we have
04:52 - double quotes around it we can also do
04:54 - single quotes but the the quotes have to
04:56 - match right we can't have a double quote
04:57 - on one side and a single quote on the
05:00 - other and that will work as well so one
05:04 - other thing let's let's actually go
05:06 - ahead and make this first name and let's
05:09 - create another variable called last name
05:11 - and like I said this Israel and notice
05:18 - how I'm ending these statements with
05:20 - semicolons as well this is a good
05:22 - convention so what we'd want to do say
05:27 - we wanted to concatenate this well we
05:29 - could do something very very strong will
05:34 - you do something like this where we do
05:35 - first name plus then we want a space
05:38 - write an empty character plus last name
05:41 - and we save it and then we're gonna get
05:43 - this nice spaced out we're here well and
05:46 - you'll notice we'll showcase it without
05:48 - the space it's gonna look all they're
05:52 - gonna be touching right and that doesn't
05:53 - look very good and it used to be up
05:55 - until es6 which is the 2015 edition of
05:59 - javascript every year the Ekman script
06:02 - foundation which runs javascript adds
06:04 - new updates to the language that we
06:07 - would have to do something like that now
06:09 - in in as of 2015 which was three years
06:13 - ago
06:13 - it has browsers for throughout the
06:16 - throughout the world so you don't have
06:18 - to worry about it not working in any
06:20 - language we can use what's called string
06:22 - and full string interpolation you'll
06:25 - notice these backtick icons
06:28 - if you're having the issue following
06:29 - finding them on your keyboard it's that
06:31 - to the left of the one what does this
06:34 - gun allow us to do is essentially throw
06:36 - in our variables with this dollar sign
06:39 - curly brace opening curly brace closing
06:41 - brace then we can put first name and
06:44 - then we could just put space and then
06:46 - another insert our variable here
06:48 - last name and we can then add have it
06:53 - print out nice and clean so when you're
06:56 - trying to concatenate or add strings
06:58 - together you might want to consider
07:00 - using the curly braces alright now let's
07:04 - go and give some methods that you're
07:07 - going to be using with strings so what
07:09 - is a method a method is a function what
07:11 - is a function a function is a set of
07:14 - instructions it's essentially how we are
07:15 - gonna store our code and we'll go into a
07:17 - little bit more detail about that later
07:18 - on but in our example here javascript
07:22 - strings come with some methods that
07:24 - allow them to do certain things for us
07:27 - and a good example of that is let's say
07:30 - we wanted to have this print out will
07:34 - have this long long length here we can
07:37 - call this property dot length just to
07:39 - get an idea here you'll see we have 24
07:41 - spaces which is a lot right so each one
07:44 - of these is a single space and we've
07:46 - added a bunch and we had some more on
07:48 - here it's gonna be up to 32 so that's
07:51 - one string property that is going to
07:54 - exist on every string another thing to
07:57 - keep in mind is that maybe we want to
07:59 - not have all this empty space on the end
08:02 - what we can use is called the trim
08:06 - property we're go ahead and drop this
08:07 - down and you'll see dot trim and this is
08:10 - going to remove all the empty space on
08:12 - the end of the string and at the start
08:14 - of the string and so when we save it
08:16 - it's going to trim it and then you'll
08:18 - see that our 32 length and we added more
08:20 - on it's going to be just 12 right you
08:23 - know Dylan Israel and then that plus one
08:25 - empty character all right let's showcase
08:28 - a few other methods about strings now
08:30 - there's over 20 methods for pretty much
08:33 - any data type and strings I think has
08:36 - even more than that so we're just going
08:37 - to touch on a few of these let's let's
08:40 - start by cleaning this up
08:42 - we don't we already showcase what trim
08:44 - is we can go ahead and clean this up and
08:45 - we showcase its length
08:47 - we'll get the total amount of characters
08:49 - that are in there so there's the two
08:52 - upper case so you want to change the
08:53 - whole world whole word to be to upper
08:56 - case you'll see it's out there and as
08:58 - you might have guessed there's also two
08:59 - lower case they've that you'll see
09:03 - everything's now lower case and there's
09:06 - also split
09:07 - so what splits going to do is this is
09:11 - going to take in a parameter which
09:14 - essentially means hey we want to a value
09:18 - that's going to be used in this method
09:19 - and by default if we pass so we're gonna
09:23 - pass it in a single parameter you'll see
09:25 - here I'm passing in an empty space one
09:28 - empty space and what's that's going to
09:29 - do it's just going to take this string
09:31 - and then it's going to break up the
09:33 - string based on all the empty spaces and
09:35 - so you'll see we only have one empty
09:36 - space so what we're going to get when we
09:38 - save this is an array which is a which
09:42 - is another data type we're gonna dive
09:44 - into a little bit more that is going to
09:46 - break our strings out into an array of
09:49 - strings essentially going to find every
09:52 - value in which there is a gap in here
09:55 - and if we wanted to do it on every
09:57 - character all we would do is pass in an
09:59 - empty character and then you'll see
10:00 - we'll get our entire string broken out
10:03 - and even our empty character in that so
10:06 - those are just a few of the more popular
10:07 - if you will and widely use string
10:10 - methods let's go ahead and talk a little
10:12 - bit about numbers next
10:18 - all right we're at our first challenge
10:19 - here for the strings and what we're what
10:22 - the objective here is we have our first
10:24 - name and we have our last name what we
10:26 - want to do is we want to concatenate a
10:28 - value with full that called full name
10:30 - that is then going to be printed out
10:33 - you'll see right now full name is not
10:34 - defined so let's go ahead and pause the
10:36 - video real quick and see if you can fix
10:39 - this to work come work well with your
10:41 - first name and last and I spaced out
10:43 - alright so hopefully you're able to do
10:47 - this if not don't sweat it you're just
10:48 - getting started so we're gonna define a
10:50 - constable here because we're not going
10:52 - to modify full name in reality we could
10:57 - have done the same for first name and
10:58 - last name as well if we want it to be
11:00 - stay clear about it so there's two
11:02 - different ways we can go about it we're
11:03 - gonna do the first name plus the empty
11:06 - space plus last name and this would work
11:09 - just fine as well this would be
11:10 - considered bad convention now that we
11:12 - have that we have our standards and es6
11:16 - as i mentioned earlier
11:17 - so instead hopefully what you did was
11:19 - use the back picks a dollar sign you
11:22 - passed it in first name space last name
11:28 - to get going here and that should have
11:30 - worked for you just fine and of course
11:32 - the semicolon at the end
11:39 - all right so let's dive into numbers so
11:42 - let's let's create a variable here
11:44 - called example and we're set equal to 7
11:47 - all right and then we just want to
11:50 - console.log our example value out well 7
11:54 - so this is a number it's pretty much
11:56 - exactly how you'd expect it now if
11:58 - you're more familiar with object
11:59 - oriented languages one of the things
12:00 - that may be a little bit different is
12:03 - other languages have multiple number
12:05 - types javascript does not JavaScript has
12:07 - one number type and that is number so if
12:10 - we created seven point seven seven
12:11 - repeating that it's still a number and
12:14 - we can check it again just with the type
12:16 - of keyword and you'll see it's gonna
12:19 - print out a number all right let's go
12:23 - you have an example of parse int so
12:26 - right now this is a floating-point
12:27 - number right there's decimal places but
12:29 - let's say that we only wanted to get the
12:32 - integer value we'd use the park's int
12:35 - function and just wrap it like so and
12:41 - now we're just gonna get the whole
12:43 - number seven which is nice right so
12:45 - sometimes we may not want to you'll
12:46 - notice it doesn't do any rounding or
12:48 - anything like that all it's getting is
12:49 - the integer here now sometimes you may
12:52 - want to get the floating-point number
12:54 - which is we can do with parsefloat just
12:58 - as easily because we may not want to
13:02 - drop that value want the whole value so
13:04 - that's one way we can use it you'll also
13:06 - notice that we can eat this out of a
13:07 - string of ID number like so and save
13:10 - that and you'll see we'll actually get
13:12 - the number value from it so we can parse
13:14 - and float from a string as well as parse
13:18 - that int from a string of five number as
13:21 - well now let's say that we wanted to
13:25 - return a certain amount of decimal
13:28 - places for our number that we have here
13:31 - what we could do is it's going to get
13:33 - rid of this percent we can use the to
13:36 - fix which will return it and this is not
13:38 - only just make dot to fix
13:41 - let's say we want to do it five decimal
13:43 - places like so you'll actually see it's
13:45 - going to add zeros on there so it's
13:47 - going to go seven point seven seven and
13:48 - add these three zeros because that
13:50 - doesn't exist but maybe we just want it
13:52 - to the
13:53 - one place right and you'll see it's
13:55 - actually gonna round it up to seven
13:58 - point eight so that's one way that we
14:01 - can you know handle add additional
14:04 - decimal places or set rather set a
14:07 - certain amount of additional decimal
14:09 - decimals while working with numbers
14:16 - all right welcome to challenge number
14:17 - two you'll see we have our the numbers
14:20 - challenge rather you see we have four
14:22 - values set up period one using partial
14:25 - with a string with some numbers in it
14:27 - one using parsefloat with a string with
14:30 - some numbers in it and then we have a
14:32 - number with two fix if you thought that
14:35 - perhaps we could only call these methods
14:36 - on variables that's not true we can
14:38 - actually just put in the value directly
14:40 - like so and then we have to fix on 200
14:44 - with two so let's see if you guys can
14:47 - guess what these values are actually
14:49 - gonna output all right so at first you
14:52 - may have thought that this percent was
14:53 - kind of weird and you're right so when
14:56 - we actually go ahead and put out example
14:58 - one will comment these out like so and
15:01 - save it you're gonna see that it's gonna
15:03 - get null okay that makes sense this
15:06 - isn't really a string but what do you
15:08 - think is going to happen when we do the
15:09 - same thing for parsefloat here well you
15:13 - may be surprised with the results and
15:15 - this is one of those things I was
15:16 - mentioning earlier where people are
15:18 - guessing well that's kind of wonky
15:19 - you'll notice it actually pulls the 44
15:21 - so whenever you parse it in or parse the
15:23 - float and we'll go ahead and delete this
15:25 - hello from this you'll notice it will
15:27 - actually pull it out so if your string
15:29 - starts with a number it will find it and
15:32 - then pull it out this is probably not
15:35 - something you ever want to do bad
15:37 - convention but there's something worth
15:38 - noting and then we have our number here
15:40 - and I went to fix what do you think it's
15:43 - gonna be should be 55 right so we're
15:45 - gonna pass in example 3 save it like so
15:48 - 55 very nice and then finally we're
15:52 - gonna call to fix on example 4 and
15:58 - continue on great you may be wondering
16:01 - why these are different colors what do
16:03 - you think the types of all these are
16:05 - let's go ahead and continue with part
16:06 - two of this challenge
16:07 - so if trying to figure out what each one
16:10 - of these console.log types are all right
16:13 - hopefully at a moment to think about it
16:14 - so this first one is going to be a
16:16 - number because we're actually pulling
16:18 - out a number from it same thing with
16:20 - this second one even though we're
16:22 - pulling it out of the string number now
16:24 - this to fix the to fix number property
16:27 - what do you think that's going to be to
16:29 - be
16:29 - drink it actually converts it to a
16:31 - string when it when it rounds it up or
16:33 - drops or adds those values on a same
16:36 - thing here so just a little wonkiness in
16:39 - JavaScript worth mentioning
16:45 - so up next we're gonna be talking about
16:47 - boolean values so let's create a
16:49 - variable here called example 1 and we're
16:51 - set to true this is a true value there
16:54 - is also a false value and as crazy as it
16:58 - sounds that's pretty much it for boolean
17:00 - x' really boolean czar a true or false
17:03 - value you can kind of think of it as a
17:05 - quarter there's a heads and there's a
17:07 - tails it's a boolean czar true or false
17:08 - it either has to be one or the other
17:10 - where things get a little tricky with
17:12 - billions are when we start dealing with
17:15 - truth ii values and falsity values now
17:17 - one thing i did want to mention is that
17:20 - we have this boolean function here
17:25 - that's going to evaluate if something is
17:27 - a true or false value so you'll see here
17:30 - if we save it it's gonna print out false
17:32 - right because it is a false boolean and
17:34 - it's gonna print out true because it is
17:37 - a true boolean now if we pass in a
17:39 - number what do you think it's gonna put
17:41 - print out well it's gonna print out a
17:43 - true because this is a value that is a
17:46 - truth devalue and in that in our
17:49 - challenge we're going to be talking a
17:50 - little bit about that
17:55 - all right we have eight examples here of
17:58 - truthy and falsy values and what I want
18:01 - you to do is just sort of make a mental
18:04 - note or maybe comment below a line of
18:06 - code or on piece of paper what you think
18:08 - these outputs are going to be which ones
18:10 - are going to be truthy which ones are
18:11 - going to be false
18:13 - let's start with the example one here we
18:16 - already showcased this earlier that
18:18 - false the boolean value of false is a
18:21 - false e value and likewise with example
18:23 - two
18:23 - the true value here is a true value as
18:27 - well okay what is null this is going to
18:30 - be my only introduction to null in this
18:32 - course it's not something I think we
18:34 - really need to cover too much in detail
18:35 - but no is really a referent of value
18:39 - that we are referencing that essentially
18:42 - says a developer plans on setting this
18:46 - value later on and we're giving null as
18:49 - a placeholder as an empty false e value
18:52 - as you might see here as well and then
18:55 - there's undefined which typically means
18:56 - that this is also a false true value but
19:00 - that usually means that either this
19:01 - variable wasn't defined a lot of times
19:04 - you'll see that okay if we can actually
19:06 - assign undefined this way as well which
19:08 - also be a false value but undefined
19:11 - usually just means that there's a
19:12 - variable or a property that doesn't
19:15 - exist that you're trying to reference
19:16 - it's usually a bug in your code when you
19:17 - see an undefined so this is string this
19:20 - empty character here what do you think
19:23 - that's gonna be you might be surprised
19:25 - to find out that's also a false e value
19:27 - however what do you think if we put a
19:28 - space there well that's gonna be it's
19:30 - gonna be a truth eval you so empty empty
19:33 - strings like that are false e values and
19:36 - then we have this other value here na n
19:38 - what is that stanford not a number
19:40 - you're gonna get not a number when you
19:42 - try to parse a string or something like
19:44 - that where it's not going to return a
19:47 - value properly or you know you're gonna
19:49 - check there's there's some not a number
19:51 - methods that we can check out to say hey
19:53 - is this not a number but this is a
19:56 - essentially value type just to tell you
19:57 - that's not number and that's a false e
19:59 - value as well and then we have negative
20:01 - five and you're saying negative five I
20:04 - wonder our negative numbers falsity or
20:06 - truth values well negative numbers are
20:08 - truth
20:09 - values as well as positive numbers the
20:12 - only false e value when it comes to
20:14 - numbers is zero so be careful when
20:17 - you're getting started with that so
20:18 - that's some of a little bit more walking
20:19 - this when it comes to the truth of your
20:20 - false values in JavaScript
20:26 - so next up is a race well whenever
20:29 - you're trying to deal with multiple
20:30 - values you're probably going to need to
20:32 - deal with in a race so how do you
20:33 - instantiate it all right have you said
20:35 - that well you just use these square
20:37 - brackets this is essentially our
20:39 - container and then we can have multiple
20:40 - things in here like so and then we can
20:43 - have access to them later on but
20:45 - essentially it's a list of items that
20:47 - you're going to be using in your code
20:49 - now remember earlier when we were
20:51 - checking the length of the string we can
20:53 - do the same thing with our example one
20:56 - so with our array rather so let's go
20:59 - ahead and print this out and we're gonna
21:01 - call dot length on it and this is gonna
21:04 - give us the length of array now one
21:07 - thing to keep in mind when working with
21:08 - the race so you'll see 0 1 a 1 2 3 the
21:12 - length of this is 3 but say we wanted to
21:14 - let's go ahead and change this to a 7
21:16 - say we wanted to get this first value a
21:20 - race start on the zero index and so
21:24 - you're gonna see 0 that's 5 and then 1
21:27 - that's 7 and then 2 that's gonna be 6
21:31 - when you think 3 is going to return well
21:33 - let's go returning all this doesn't
21:35 - exist
21:35 - NOLA undefined so something keep in mind
21:40 - when working with a race is that they do
21:42 - start on 0 and the length is always
21:44 - going to be one greater than the last
21:45 - index value now we're gonna be talking
21:48 - about a few of the more common methods
21:51 - when it comes to arrays but one thing to
21:54 - keep in mind is there's about 20 or 25
21:56 - methods with arrays that you're gonna
21:58 - need to know inside and out and we're
22:00 - only going to touch on about 3 or 4 just
22:02 - to give you an idea of a few of them but
22:04 - you're gonna probably need to review all
22:07 - of these and perhaps in a set in a
22:10 - separate course we can deep dive into
22:11 - every single single function I have a
22:13 - udemy course that does exactly that but
22:16 - and say we want to add a value here to
22:19 - example 1 we use the push method and
22:23 - let's so go ahead and and push the
22:25 - number 8 on there and we'll change this
22:28 - to console.log what we want to put out
22:30 - you'll see now we're gonna add that last
22:33 - value we use push to add multiple values
22:36 - so there 8 9 10
22:39 - save that
22:40 - BAM so it's gonna add all them but let's
22:42 - say we want to remove the last value we
22:45 - can use the pop method here it's gonna
22:49 - remove the last value now one thing
22:53 - that's so that's that's one way to add
22:56 - and and add and remove the last values
23:02 - in other ways of adding the beginning
23:04 - values and adding and certain index
23:06 - value we're not gonna worry about that
23:07 - too much one more thing I want to show
23:09 - you is how to override values so
23:11 - remember earlier we were like oh well we
23:13 - can target values to print out but let's
23:15 - say we want to reset the value on that
23:17 - index zero we do and we'll just put one
23:20 - in there and you'll notice that we're
23:21 - gonna overwrite what comes up on that
23:25 - value and say we want to iterate through
23:28 - the entire array like so we do that with
23:32 - a for each statement and then the
23:34 - element is going to be the current index
23:36 - value or iterating on so in our case
23:39 - it's going to be 1 then 7 then 6 then 8
23:41 - and we just instead all we want to do is
23:45 - console.log the element out here go
23:50 - ahead and save it and what we're gonna
23:51 - get is essentially 1 7 6 8 9 and then
23:55 - the final rake because it's going to
23:56 - iterate through each element in our
23:59 - array
24:05 - all right in our array challenge you'll
24:07 - see we have a value here in rate value
24:10 - so you'll notice that there's different
24:12 - data types in here we have a string we
24:14 - have a number and we have a truth a
24:15 - value this is something that you can do
24:18 - in JavaScript as well so we have a new
24:21 - value here example 2 new variable and we
24:25 - are sending it equal to example 1 and
24:27 - then we are pushing 11 to example 2 now
24:31 - my question for this challenge is what
24:33 - do you think the value of example 1 is
24:34 - going to be and what do you think the
24:36 - value of example 2 is now it may
24:39 - surprise you to find out that the values
24:41 - are going to be identical you're going
24:44 - to see that if I spell console dot log
24:46 - right you're gonna see that we have
24:49 - example 1 with the 11 as well as example
24:52 - 2 why is that why is that even though we
24:55 - only pushed 11 on to example 2 that's
24:57 - still getting exam passed you example 1
25:00 - the reason for that is that when you're
25:02 - dealing with arrays and objects you're
25:04 - passing by reference what that basically
25:07 - means is example 2 is setting a
25:09 - reference or referring to example 1 it's
25:12 - not actually creating a new array so
25:14 - when you push the example 2 you're
25:15 - actually pushing to example 1 and how
25:20 - can we how can we create a new array but
25:21 - still have these values in it well a
25:23 - couple of different ways we can use the
25:25 - spread operator which is going to dot
25:29 - dot dot going to unwrap these values in
25:32 - a new array like so and so this is gonna
25:36 - this three dots is some es6 is going to
25:39 - take all these values and essentially
25:40 - push them through this new ring you'll
25:42 - see that's going to create a brand new
25:44 - array so it's not passing by reference
25:46 - anymore another way that you can do this
25:49 - is using the map functionality with is
25:52 - which is an array method that creates a
25:55 - brand new array like so and this is
25:58 - going to be an element remember the
25:59 - element really just refers to the
26:01 - current index value we're iterating over
26:04 - and we can return that element it's just
26:09 - going to create a new array this is
26:10 - going to be identical to the spread
26:11 - operator I'd probably recommend doing
26:13 - the sprite operator because it's less
26:14 - code so just keep that in mind is that
26:17 - when you're dealing with objects and
26:18 - arrays
26:18 - you are passing by references and
26:21 - sometimes you may not want to do that
26:23 - probably most the time and then you're
26:25 - gonna actually want to create a new
26:26 - array so that you can change the values
26:30 - without affecting the original array
26:36 - so objects much like arrays are probably
26:38 - the two most important items that you
26:40 - need to be intimately familiar with
26:42 - objects are defined by these curly
26:45 - braces like so and they can take in what
26:51 - are called properties so remember how we
26:53 - had our first name we can do it like
26:55 - this and we'll put in Dylan and then we
26:57 - can have another property and that can
26:59 - be last name and that will be Israel
27:05 - you'll see when we print it out it's
27:08 - gonna print out this entire object but
27:10 - we don't you know most of time when
27:12 - we're displaying it for the user we
27:13 - don't want the entire object we just
27:15 - want the first name so we can use the
27:17 - adult property and then we can get the
27:19 - value that we want and this will
27:21 - actually give us the first name property
27:23 - so example one dot first name and we can
27:25 - chain these downward as well and let's
27:29 - say we do something like address and we
27:32 - want to do city and we'll do Austin and
27:36 - then we'll do state Texas so we have
27:43 - this object here and excuse me and these
27:47 - are strings right so they need to be
27:49 - wrapped in quotes to develop that their
27:51 - string and we could continue downwards
27:55 - so we have address and then we do dot
27:58 - city and then we'll get Austin now when
28:02 - dealing with objects you can not just
28:04 - use strings you also do like age for
28:06 - instance on here I'm 30 you can do a
28:09 - raise so how many cats do I have I
28:12 - happen to have three one name is Milo
28:15 - and then another is Tito and then
28:19 - another its Achilles and I apologize I
28:22 - don't know how to spell my cat's name
28:24 - but you can use multiple data types with
28:26 - many objects as well and you can also
28:30 - reset the values in our object so let's
28:34 - say we want to say you know it's my
28:35 - birthday and we wanted to reset age for
28:38 - instance time now 31 we could do that
28:41 - and then we would target it if we wanted
28:43 - to print it out to confirm you'll see we
28:46 - now get 31
28:48 - all right so some of the methods you
28:50 - want to know about objects are objects
28:53 - so I don't know if I made this clear
28:56 - earlier or not but this property name
28:58 - yeah will also be referred to as a key
29:00 - and then its value here will be the
29:04 - value so one would say we wanted to get
29:06 - all the keys from our object we do that
29:08 - with object the object type got keys and
29:13 - then just wrap this like so and you'll
29:16 - see when we print it out it's gonna
29:18 - print out all our cubes notice how it
29:19 - doesn't print out the nested keys as
29:21 - well it's only gonna do it on the level
29:22 - that you're doing that but let's say we
29:24 - want all the values we do that as well
29:27 - and we'd get our values had done Israel
29:29 - we're gonna get a you know the object
29:32 - here which is city and state 31 and then
29:35 - our array of values sometimes you may
29:39 - want to check if a property or a key
29:41 - exists on our object one way that you
29:44 - can do that is to say example one dot
29:48 - has own property and then in there we're
29:55 - gonna pass in a string value and this is
29:57 - going to be the key that we're checking
29:58 - for and that's gonna be first name
30:00 - you'll notice it's true if we put first
30:01 - name to return false that that key does
30:04 - not exist in our object
30:10 - now if you remember earlier when I said
30:12 - that a race passed by reference so do
30:15 - objects so what do you think when we
30:18 - create this example one and then we set
30:20 - example two equal to example one you'll
30:22 - notice that we're actually assigning a
30:24 - value to a property that doesn't exist
30:27 - what do you think is gonna happen in our
30:28 - object here well your first guess might
30:32 - have been that this isn't even gonna
30:34 - work but that would be mistaken example
30:36 - two here is definitely going to add the
30:39 - last name property on there now where
30:41 - there might be an issue is say well and
30:42 - do last name and then we do mother's
30:44 - last name or something like that that
30:47 - wouldn't work and the reason for that is
30:49 - that last name it's not defined as an
30:52 - object but example two is which is why
30:55 - we can assign B last name property
30:59 - directly to it and it works just fine
31:01 - but you might have already guessed as I
31:04 - told you earlier this will pass by
31:07 - reference as well and so when we're
31:10 - setting example two two example one
31:13 - we're gonna go ahead and have these
31:15 - values that are gonna get added to
31:18 - example one as well so keep that in mind
31:20 - when you're creating objects that you're
31:21 - gonna need to instantiate a new object
31:23 - and you're gonna need to pass in the
31:26 - values directly instead of actually
31:28 - having to go and and set and it's gonna
31:32 - pass by reference so it may overwrite
31:34 - your original object now how might we
31:37 - create that object that class you know
31:41 - typically the easiest way is using the
31:45 - object method and when you're working in
31:46 - classes we're not going to dive into
31:48 - classes in this introduction course but
31:51 - you might have a class that you would
31:53 - create a new instance of but how do you
31:54 - do it with objects well object has the
31:58 - object prototype has this assign
32:00 - property or method excuse me method oh
32:05 - oh sorry a little bit of a issue here
32:12 - and it's going to take in two properties
32:14 - first what you want to assign it to
32:17 - which in our case is an empty object and
32:19 - second
32:21 - what it is that we're going to assign it
32:23 - to so you'll see here when we call
32:25 - object of sign it's going to create a
32:27 - brand new object which is I'm going to
32:29 - go ahead and put the example one values
32:32 - into example two and thus when we assign
32:35 - a new property to example two it's not
32:37 - going to pass by reference to example
32:40 - one because here we're instantiating a
32:42 - new object
32:46 - so let's come back to working with
32:48 - numbers again so we're gonna be talking
32:51 - a little bit about the arithmetic
32:52 - operators that are available in
32:54 - JavaScript so right here we have our
32:56 - example five we can add as you might
32:59 - imagine and then we'll get ten we can
33:01 - subtract like four and then we'll get
33:04 - six we can of course times by four which
33:10 - would be 16 my censoring at negative six
33:13 - like so and you'll notice we don't have
33:15 - to group these together
33:17 - javascript is intelligent enough to know
33:20 - the order of operations of math by
33:22 - default and then we come of course
33:24 - divide this by 4 so this is going to be
33:27 - 16 divided by 4 would be 4 10 minus 4 is
33:31 - gonna return 6 so we have all the
33:34 - standard math functionality when we're
33:36 - dealing with our arithmetic operators
33:38 - all right so hopefully those math
33:40 - operators here were a little bit of
33:42 - introduction or repetitive and you're
33:45 - like out man I know how to plus and
33:46 - minus excellent so let's hit you with
33:48 - something that you may not be familiar
33:49 - with
33:49 - that's the modulo operator or modulus
33:52 - operator so you see this percent sign
33:54 - this is gonna return 0 why is that well
33:57 - modulo returns remainders of numbers so
34:01 - when we modulo 5 by 5 it divides evenly
34:04 - and there's no remainder what you think
34:06 - happens when we modulo by 6
34:09 - well it's going to return the whole
34:11 - number because it doesn't ever evenly
34:14 - divide but if we modulo by 4 it's gonna
34:17 - return 1 modulo by 3 gonna return 2
34:20 - modulo by 2 it's gonna return 1 right
34:24 - because it goes to 4 and then there's a
34:26 - 1 remainder so that's the modulo
34:29 - operator
34:34 - let's talk a little bit about relational
34:36 - operators we have our two numbers here
34:39 - 10 and 15 and so this is a sort of
34:42 - relation to the math operators we don't
34:44 - really dive into it but relational
34:46 - operators will compare two items and
34:48 - then return a boolean value of a true or
34:51 - false value so when we take example 1
34:53 - which is 10 and we say greater than
34:56 - greater than or equal to example 2 what
35:00 - you're gonna expect it to return is
35:01 - false right because 10 is not greater
35:04 - than or equal to hover if this was 15 it
35:08 - equals it so it is greater than or equal
35:10 - to of course have less than or equal to
35:12 - as well which will evaluate the true as
35:16 - 10 is indeed less than or equal to 15
35:21 - now the other relational operators are
35:24 - are these values equal are these double
35:28 - equals is 15 equal to 10 that's false
35:31 - right it's not but if we change example
35:33 - 2 to 10 that's true and if we use triple
35:38 - equals that's true as well and we're
35:41 - gonna talk in the challenge about what
35:43 - the difference between the double equals
35:44 - and the triple equals is and and why
35:47 - that's really important so here you'll
35:51 - see that we are comparing the values so
35:53 - let's say we want to see if they're not
35:55 - equal how can we do that well we can use
35:57 - this exclamation point and equal sign to
36:01 - be false right you guess 10 is equal to
36:03 - 10 thus that's false now is 10 not equal
36:06 - to 12 that is true so it's going to
36:08 - return true and then vice versa with
36:11 - this extra equals here to return true as
36:14 - well before we move on to the challenge
36:18 - I want to actually talk about this
36:19 - double equals and triple equals and what
36:21 - that basically means remember earlier
36:23 - when we were console logging out the
36:27 - data type so in our example here we're
36:30 - going to log out example the type of
36:32 - example 1 and the type of example 2
36:35 - which is going to return a number and
36:37 - number right now so javascript is a
36:40 - dynamically typed language what that
36:42 - means is in JavaScript we have no
36:44 - problem taking this very
36:47 - here which has a type of number and
36:49 - going head and setting it to a boolean
36:52 - for instance that's something that we
36:54 - can do in JavaScript all day it's it's
36:56 - not a big deal
36:58 - now most languages are statically typed
37:00 - so what that means is that if I wanted
37:04 - to have a number here I'd probably have
37:06 - to create and reset it assigned to a
37:08 - boolean I would have to have some
37:09 - additional logic or a new variable or
37:11 - something like that but we have console
37:14 - so each one these are numbers and when
37:17 - we want to do the comparison there is a
37:20 - strictly equals comparison that compares
37:23 - the value and type and then there is a a
37:29 - sort of less strict comparison that
37:31 - compares only the value so that's the
37:34 - real difference here when we do this
37:35 - double equals all we're checking is that
37:38 - the values are the same so example one
37:40 - is equal to example two it's going to
37:43 - return false right but let's say we
37:45 - change this to the number 10 the number
37:48 - 10 or excuse me the value 10 is equal to
37:50 - the value 10 is double equals that's a
37:52 - true statement however if we change this
37:54 - to a string and the Loosli equals here
37:57 - it's still going to be true even though
37:59 - that this is a number 10 and and a a
38:03 - string 10 because all it cares about is
38:06 - the value however if we use the strictly
38:09 - equals and we take example one as triple
38:12 - equals to example two what it's going to
38:16 - check is not only that 10 is equal to 10
38:19 - but also what is the data type is number
38:21 - equal to string in that case it's not
38:23 - which is why it's going to return false
38:24 - and the double equals on the not
38:29 - remember the bang this and this it's the
38:33 - same same there as well as checking the
38:35 - type and the value
38:41 - all right let's get a little practice in
38:43 - with the triple equals and the not
38:45 - equals so in our four examples here
38:47 - let's think a little bit about what is
38:49 - it that we're checking and we're
38:51 - checking are these values equal are
38:53 - these values equal are these values not
38:55 - equal and are these values not equal
38:57 - let's think about it for a second and
38:59 - then dive into it alright so in our
39:03 - first example it's going to console the
39:05 - log out example one so remember with the
39:07 - strictly equals this is checking type in
39:09 - value they both their numbers and they
39:11 - both have the value of five so we're
39:14 - going to expect that to be true now
39:16 - example two is five
39:20 - equal equal to string five now the
39:23 - Loosli equals is just checking the type
39:26 - so it's a value five equal to the other
39:29 - value five and that is indeed true
39:31 - unless we're going to expect that to be
39:32 - true and let's go move on to the knot as
39:35 - well so in example three here is the
39:38 - value six not equals to the value six
39:41 - and that's gonna return what do you
39:44 - think it's fair return false because it
39:47 - is actually a true statement six number
39:50 - is equal to six string because we're
39:52 - doing a loosely comparison in vice versa
39:57 - when we do console.log example four
40:02 - that's going to return true because the
40:07 - console that low is not a thing so
40:09 - console dot log true because the string
40:12 - value seven is unequal to the number
40:15 - value seven and thus that returns true
40:22 - all right so sometimes we may just want
40:24 - to increment a number by one a lot of
40:27 - times what we're doing is for loops or
40:29 - we're dealing with iteration as well as
40:31 - subtract by one so how might we do that
40:33 - well at at first glance you may do
40:36 - something like this where you said
40:37 - example 1 is equal to example 1 plus 1
40:41 - right and then you'd see oh of course it
40:44 - go up by two but this is such a common
40:46 - thing that JavaScript has built in a
40:49 - very easy way to increase by one by
40:51 - throwing this plus plus on our variable
40:53 - and you'll see now we still get the same
40:55 - result if we were to call it again we're
40:57 - gonna get we're gonna get three because
41:00 - we've now added one then we've add
41:02 - another one to get three it also has a
41:06 - easy way to subtract and we can do that
41:09 - with - - and so our one minus one will
41:13 - become zero but let's say that we don't
41:16 - want to add or subtract by one how might
41:19 - we do that well pretty straightforward
41:23 - so we take example one and we're gonna
41:24 - use this plus equals and then we're
41:26 - gonna say five and this is gonna add 5
41:28 - to it 6 this is exactly the same thing
41:33 - again as us doing example 1 is equal to
41:36 - example 1 plus 5 similar to how we did
41:41 - plus plus except now it's plus equals
41:42 - now this isn't only relevant to adding
41:47 - or subtracting subtraction would work as
41:49 - well you'll see we'll get 4 but also we
41:52 - can multiply 1 times 5 is 5 we can
41:55 - divide so we'll get point 2 we can even
41:58 - do our modulus operator that we showcase
42:01 - earlier where modulo when u modulo by a
42:04 - number of greater than the number is
42:05 - gonna return the whole number so if we
42:07 - did something like 10 for instance scan
42:09 - return 0 if we did 13 it have a
42:11 - remainder of 3 so that's a couple ways
42:14 - that we can increment decrement in
42:15 - JavaScript
42:20 - all right and their increment and
42:22 - decrement challenge we're gonna hit you
42:23 - with something you really haven't been
42:24 - exposed to one of the stranger parts so
42:28 - you'll see here we have example1
42:29 - example2 you both equal to five and then
42:31 - you're seeing here we're adding one to
42:33 - example five million we get we didn't
42:34 - talk about plus plus on the front of a
42:37 - variable what do you think the
42:38 - difference between these two might be
42:40 - there is a difference it's subtle but
42:42 - there is a difference what do you think
42:44 - it might be all right so let's go ahead
42:46 - and uncomment these lines of code here
42:48 - and see what the values are you can see
42:51 - it's six and six you're saying you know
42:52 - doing this is the you know want two ways
42:56 - to do the same thing and at first glance
42:58 - it may appear that way but in reality
42:59 - not so let's instead of console logging
43:03 - the value out here put our example plus
43:05 - plus as the value in our console logs
43:08 - and see what happens this is going to be
43:12 - a plus example two so what do you what
43:16 - are you expecting these values to be
43:17 - you're saying what look probably gonna
43:18 - be six and six you'd be wrong so you see
43:22 - it's five and six the reason for that is
43:24 - when we do the plus plus on the end it's
43:26 - going to add this value after this line
43:30 - of code if you do it on the beginning
43:33 - it's essentially gonna do it within the
43:35 - line of code now he depends is there you
43:39 - know there's very few instances where
43:40 - I've ever found need to have to do the
43:42 - plus plus on the beginning typically
43:44 - you'll see most lines of code will just
43:46 - have this as its own line of code but if
43:48 - you wanted to add it the iteration on
43:51 - the exact line of code you'd have to
43:52 - throw it on the beginning of your
43:56 - variable so that's one difference that
43:58 - you may never known and this this will
43:59 - be the same with - - as well
44:06 - let's go ahead and talk a little bit
44:08 - about control flow using if else--if and
44:12 - and else and what they are so sometimes
44:15 - you only want your code to run for
44:17 - certain reasons so in our if statement
44:20 - like so we can say we can pass an
44:23 - example which is v we're saying if this
44:26 - is equal equal to five meaning does this
44:28 - evaluate to true go ahead and
44:31 - console.log we want to put this will put
44:34 - true statement or we'll just put runs so
44:40 - you'll see when we run this it's run
44:42 - because it is equal to this however if
44:45 - we were to say that this is equal to six
44:47 - this wouldn't run right we get no
44:49 - printout and so our code nested within
44:52 - our curly braces here never actually
44:54 - runs in our if statement so this if
44:56 - statement essentially is a gatekeeper
44:58 - that evaluates this logic here to tell
45:01 - us if something is true or not now what
45:06 - is else--if else--if
45:07 - is a statement that runs only if this
45:12 - statement here if this if statement
45:15 - failed so you have to have an if for
45:17 - there to be an else if so this else if
45:19 - is directly court connected to this if
45:21 - statement so if this fails we're gonna
45:23 - run another if statement here that's
45:26 - going to say uh in our case we'll just
45:28 - put true that's gonna run and and it
45:32 - will just put console dot log else if
45:38 - and you'll see now this is going to
45:40 - print out else if because this failed
45:43 - and then checks is this true it is
45:46 - unless it prints so if we change this
45:48 - back to five and evaluate it you'll see
45:50 - it's now printing out run so it's not
45:52 - printing out the else if because this
45:53 - already evaluated is true and thus it
45:58 - never runs our else--if because again it
46:00 - only runs if the F fails so what is else
46:02 - else is the default value so if the F
46:06 - fails if the ELSA fails and there's no
46:09 - true values between between them we're
46:12 - gonna go ahead and print the console dot
46:14 - law or we're gonna go ahead and run our
46:16 - code in our else statement which in our
46:18 - case we're just going to print out
46:19 - you'll see runs runs ok so if we changes
46:23 - the six that's going to fail so this
46:25 - fails and that runs ok cool itself so if
46:28 - oh it is true
46:29 - so print elsif but what if this was
46:30 - false it's gonna finally get all the way
46:35 - down to the cells because this fails
46:36 - then this fails and then we finally hit
46:38 - our else all right one other thing worth
46:41 - mentioning that we haven't talked about
46:43 - is and and or so so far we've only been
46:47 - evaluating statements one statement at
46:49 - time what if we wanted to evaluate two
46:52 - statements to make sure both of them
46:54 - weren't sure not only is example in our
46:57 - case equal equal to five and we'll just
47:01 - say true is equal equal to true so what
47:05 - this and statement this double ampersand
47:07 - here saying is hey when we run our code
47:10 - check that not only is this true but and
47:13 - this is true as well which is why this
47:15 - runs and vice versa if we change this so
47:19 - that example is equal to go to six which
47:21 - it's not it's gonna fail and this is
47:24 - false so it's gonna hit our else
47:25 - statement even though this is true but
47:28 - let's say we wanted to have it where if
47:31 - either one of these conditions are true
47:33 - run our code we would use an or
47:35 - statement like so which is these two
47:37 - pipes and then we've run our code so
47:41 - it's example equal to six no that's
47:43 - false but true is in fact equal to true
47:46 - and thus this runs now if false was
47:50 - equal to true it's gonna fail right
47:52 - because this is false there this
47:54 - statement here is false in this
47:55 - statement and here is false so that's
47:57 - and an or it allows us to concatenate
48:00 - essentially our conditions and check
48:02 - multiple conditions again or is saying
48:05 - hey if either one and then and would be
48:08 - you know if both are true and we can do
48:11 - this as many times as we need in our
48:12 - code
48:17 - all right let's see if you can guess the
48:19 - true or false values using our an and or
48:22 - operators we have three of them take a
48:25 - second take a look and then we'll go
48:27 - piece by piece all right hopefully you
48:30 - took a second take a look let's take a
48:32 - look at this first one we have a triple
48:34 - equals comparison on ten being equal to
48:37 - ten and five is less than four so we're
48:40 - going to evaluate these two statements
48:41 - this is true and this is false thus it
48:46 - should return false and hopefully that
48:48 - was what you got here
48:49 - false very nice let's look at a very
48:52 - similar statement with the only change
48:54 - in the logic here being an or statement
48:56 - well on the left hand side we have a
48:58 - true statement on the right hand side we
49:00 - have a false statement but because we're
49:03 - using an or operator because one of them
49:07 - is true this is going to return true
49:09 - very nice so last but not least a little
49:12 - bit more of a complex one we did we
49:15 - didn't I said earlier that you can
49:17 - increase the complexity of this very
49:19 - quickly but you'll see here that we are
49:22 - essentially wrapping this statement here
49:25 - and then doing an and to compare this
49:27 - side so it may look like there's three
49:30 - comparisons but but really are more than
49:34 - two comparisons but there's just this or
49:37 - and there's this and so in here we're
49:40 - saying is five less than or equal to
49:41 - five
49:42 - or excuse me greater than equals five
49:43 - that's a true statement or is 4 greater
49:46 - than four that's a false statement but
49:48 - because one of these is true which is
49:51 - this statement this whole block here
49:53 - evaluates the true and then we evaluate
49:56 - this side it's 3 plus 2 equal to 5 it is
49:58 - and thus we return true as well so you
50:01 - can see how this can get a little bit
50:02 - crazy relatively quickly but I think
50:05 - that some good practice and if you're
50:07 - interested in practicing this you just
50:08 - want to get it down just Google control
50:11 - flow practice on practice JavaScript
50:14 - online you'll come across a bunch of
50:16 - like you know 20 30 questions of things
50:18 - like this at a time that you can
50:20 - practice with
50:26 - so let's talk about switch statements
50:28 - really quickly switch statements are
50:30 - gonna feel very similar to an if-else
50:32 - if-else statement because it is again
50:36 - some control flow on your code but the
50:39 - difference with the switch statement is
50:41 - say we're checking a finite amount of
50:43 - answers and you want to know you only
50:46 - want to run some code for three or four
50:48 - answers and then you have a default to
50:50 - assume is really a different way of
50:52 - writing if-else if-else statement let's
50:54 - go ahead and give an example say we are
50:56 - taking a test and we answer a four-hour
50:59 - test so our student answer in our switch
51:02 - statement we're going to have this value
51:04 - here and we're gonna pass in a student
51:06 - answer and what that is to say hey check
51:08 - our answer for each one of these cases
51:11 - and then run some code so in a tech a
51:14 - case follows by a value so we have you
51:17 - know case a and then in in right below
51:22 - it we'll have something that says
51:23 - something like you know we'll console
51:26 - dot log wrong and then we have to break
51:31 - out of the switch name and this break is
51:32 - very important because if you don't
51:34 - break out of it basically this code is
51:36 - gonna run if our student answer here is
51:38 - a but if we don't break out of it when
51:40 - we have another case like B it's gonna
51:43 - continue to it's gonna continue checking
51:46 - your code to make sure that it's right
51:48 - and we'll just put console dot log B is
51:54 - wrong
51:56 - just forsake a is wrong and then we'll
52:00 - say C is the answer and then again for
52:02 - our case here we need to break out of
52:05 - the logic otherwise we're gonna have
52:07 - some issues with it checking multiple
52:09 - answers when really the switch statement
52:11 - is designed to only it should only go
52:14 - for the correct answer and C and we're
52:16 - going to put will just call us alot log
52:21 - C is correct period and then we want to
52:25 - break out of here so let's actually run
52:28 - our code like so and save it and you'll
52:32 - see we'll get a is wrong so our answer a
52:34 - here it's wrong if we change this to be
52:37 - we're going it B is wrong and if we
52:39 - change it to see we're gonna get see
52:42 - it's correct very nice so what happens
52:44 - we put this to be a nothing rinse none
52:47 - of these is correct but maybe we want a
52:49 - default answer so if a value comes in
52:52 - well there's this default keyword here
52:56 - which is essentially our else where if
52:59 - all the other answers fail go ahead and
53:01 - console B is wrong as well because
53:03 - there's only four answers or but not a
53:08 - real answer and you'll see we get not a
53:14 - real answer here because it is an A it
53:18 - isn't B it isn't C and then we get not a
53:21 - real answer because this is a default
53:23 - value you'll notice how I don't break
53:25 - from here the break here is so that no
53:28 - additional things are ran you don't
53:31 - really need a break on default it's I
53:34 - couldn't tell you if it's clean
53:35 - convention or not but there's no reason
53:37 - to do it unless code is better typically
53:39 - but that's a switch statement you pass
53:41 - in a value you then check a case to see
53:44 - if it matches any and then you also have
53:46 - the default here just make sure you
53:48 - break otherwise you might run into a lot
53:51 - of errors down the road where you know
53:52 - has multiple correct answers or your
53:55 - logics not going to work properly
54:01 - now let's say that we wanted to iterate
54:04 - through up to the numbers 0 to 5 to add
54:08 - those values to total how might we do
54:10 - that well for loop would be an excellent
54:12 - way of doing that and when you create
54:14 - one by first instantiate a variable
54:16 - essentially a counter variable usually
54:18 - initialized by I for iteration we're
54:22 - gonna started off at 0 and then this
54:25 - statement here I is less than 5
54:27 - this essentially will continue to run
54:29 - our for loop until this statement no
54:31 - longer is true and then we're gonna
54:33 - increase number the I plus plus by 1
54:35 - every iteration and so if we were to
54:38 - console dot log out I right now what
54:42 - we're gonna see here the number is 0 1 2
54:44 - 3 4 and then I is not less than 4 I when
54:48 - it's 5 is not less than 5 thus it breaks
54:51 - the for loop doesn't run the logic
54:53 - inside here and then exits out so how
54:56 - might we now modify our code to add the
55:00 - values of I to total what we can do that
55:02 - by just doing total plus equals 2 I now
55:07 - let's let's go ahead and console dot log
55:09 - out the values of total which we know
55:12 - are those index values so when we
55:15 - console dot log out total you'll see
55:18 - that is now added all of our values to
55:20 - equal 10 so 0 plus 1 is 1 plus 2 is 3
55:23 - plus 3 is 6 plus 4 is 10 and we get our
55:27 - value there now this is of a for loop
55:32 - where we're gonna actually know how many
55:34 - iterations it's going to be 5 but how
55:37 - might we iterate through an array when
55:39 - we don't know how many values did it
55:41 - rate through so let's create an array
55:42 - here and we'll just call this a number a
55:44 - and this is gonna be equal to we'll just
55:47 - throw in some numbers of 10 10 20 30 40
55:51 - 50 60 70 and 80 so we could in theory
55:59 - say you know go ahead and put less than
56:02 - 8 but that's not good practice that's
56:03 - not what you want to do with the race
56:04 - because maybe we add a value to this
56:06 - later on so how might we make this a bit
56:09 - more dynamic well we can set our our
56:12 - right side here to no more
56:15 - a length remember that dot length
56:17 - property which is going to have this run
56:21 - for as many iterations that are in our
56:25 - in our array for the length of the array
56:28 - but instead of actually adding the total
56:32 - value of just being the index value we
56:34 - want the values out of the no more rate
56:35 - how might we do that well remember the
56:37 - index values are accessed with numbers
56:41 - right so if we want to just add index
56:43 - zero we've put that in there or index
56:44 - one or index 2 but we want it to be on
56:47 - the con for every value so every
56:51 - iteration our I gets updated and thus
56:54 - you'll see when we console dot log out
56:57 - that value here right above total no
57:00 - more a I it's gonna hit the zero and
57:04 - then one and ten and you'll see that we
57:06 - get all our values in the console so
57:09 - we're already adding all those values
57:11 - and now this we've been able to access
57:13 - them with our I variable here and so so
57:16 - at the end we get a very large 360
57:20 - number because we've added all the
57:23 - values in our number right and vice
57:24 - first if we added 90 on here you'll see
57:27 - that it will run and we don't have to
57:28 - refactor any of our code
57:34 - so let's say we want to repeat our code
57:36 - but we don't know there's not a finite
57:38 - amount of answers so we can't use a
57:39 - switch case we don't know what the
57:42 - length of the array is gonna be or we
57:44 - don't know how many iterations to run we
57:46 - just want it to run until a value is
57:48 - true so a while loop might be what
57:51 - you're looking to do here while loops
57:53 - are another way to run iterations of our
57:56 - code and so what a while loop does is it
57:59 - runs until some sort of value here is
58:02 - false in our case we'll just let's go
58:04 - ahead and say count is greater than 20
58:10 - you know this could be anything in here
58:13 - and in our while loop we're gonna go
58:16 - ahead and and add we're gonna say uh you
58:21 - know we're gonna do some logic and then
58:23 - maybe at the animal cell count plus plus
58:25 - now the the reason that this may seem
58:28 - very similar and in its current setup it
58:30 - is and then at the end we'll go ahead
58:33 - and complement log count if we want to
58:38 - and so this never runs as you notice
58:43 - here because count is never greater than
58:45 - 20 because this is false statement but
58:48 - let's go ahead and change it so less
58:49 - than it's gonna run 20 times and you
58:52 - could do this in a for loop that's true
58:54 - but you can do some things with this
58:56 - where we're let's let's forget about
59:01 - numbers for a second maybe we want to
59:03 - have a local value where we're just you
59:09 - know where we're gonna run this while
59:11 - it's true and in here we're gonna put
59:14 - true but we need to make sure now that
59:16 - we've put hard-coded a true value in
59:18 - here that we are going to break out of
59:20 - this so what we can do is if we want to
59:24 - if if count is less than 20 go ahead and
59:36 - greater than or equal to 20 what we want
59:39 - to do is we're gonna start off first off
59:41 - by adding and then you'd have an
59:43 - additional logic then you would say
59:47 - you'd say something like break so this
59:50 - will break us out of our for loop so
59:52 - when it's 20 we're gonna exit out of our
59:54 - for loop here as well so while loops are
59:57 - a way to run your logic run your code
59:59 - for a set amount of time when you don't
60:02 - know how many times that's going to be
60:04 - now there's also do-while loops at which
60:07 - are a little bit different than then
60:11 - while loops the main difference between
60:13 - a while loop and a do-while loop is a
60:16 - do-while loop will run at least once
60:18 - remember when we set this to false
60:19 - earlier and this is a false statement
60:22 - count never got touched and never ran
60:24 - this code not even once - to see -
60:28 - update count but if we had a do-while
60:30 - loop it would do it so let's go ahead
60:33 - and convert this while loop to a
60:34 - do-while loop it's pretty straight
60:36 - forward so we're gonna do with these
60:38 - closing braces these curly braces and
60:42 - basically all our logic here is gonna be
60:44 - in our do-while loop and we're gonna
60:47 - remove the curly braces on the wall'
60:50 - loop and just have wall after-the-fact
60:52 - like so now you'll see when we save our
60:55 - code here count is actually going to be
60:57 - equal to 1 even though our while loop is
60:59 - false so it's gonna run this one
61:01 - iteration count is still not greater
61:04 - than or equal to 20 so we don't break
61:06 - out of the do-while loop but the actual
61:09 - while statement itself is false we only
61:12 - run at the one time because it's a
61:14 - do-while loop so just something keep in
61:17 - mind I it's very rare that I use a while
61:20 - loop or do a loop but is worth
61:22 - mentioning for those times where you
61:24 - don't have any way of knowing how many
61:28 - iterations and you're basically checking
61:30 - a value until you get a right value to
61:33 - break you out of it and that could be
61:34 - anything from more count is you know
61:37 - equal equal to you know feeling or
61:41 - something like that where you can't
61:43 - check the the length right so you can do
61:46 - check properties the the main thing to
61:49 - keep in mind is that is that you are
61:53 - going to be it's usually not used with
61:56 - numbers but it's a for a set amount
61:57 - iterations that you don't know you just
61:59 - need to keep doing it
62:00 - till you get the result you're looking
62:01 - for but it is also a word of caution a
62:04 - good way to create an infinite loop
62:06 - which will crash your program and and
62:08 - maybe stop it all together
62:14 - all right last but not least functions
62:17 - so we need to define a function what is
62:22 - a function a function is a way of
62:24 - storing our code so that we can call it
62:26 - again and again and reuse it
62:28 - part of being a software developer prior
62:31 - to being any developer is writing
62:32 - reusable code and it's a a part of
62:36 - development that you're gonna have to
62:38 - get comfortable with so let's go ahead
62:39 - and define a function well write a
62:41 - simple function called add in JavaScript
62:44 - you just noted by the keyword the name
62:46 - of the function and then these
62:47 - parentheses and then we have our curly
62:49 - braces for our logic so in our example
62:52 - here if we just want a console table add
62:54 - o and you'll see well save nothing
62:58 - happens well we have to actually invoke
62:59 - the function like so by just calling it
63:03 - by its name curly braces or excuse me
63:05 - parentheses and you'll see here we
63:06 - actually print out add very nice and we
63:10 - can do this time and time and time again
63:13 - so you'll see we actually get add to
63:15 - print out four times just the power of a
63:18 - function is that we have the same item
63:20 - being able to work with multiple be able
63:25 - to be used multiple times now this isn't
63:29 - a very impressive function so let's adds
63:32 - let's actually add some logic to it so
63:35 - this return word here what say we wanted
63:39 - to return a value return in a function
63:43 - will allow us to do that so let's return
63:45 - five and you'll see nothing prints out
63:47 - but we can go ahead and console dot log
63:49 - three wrap these ads in a console dot
63:51 - log will actually print out the value
63:53 - that's being returned which is in our
63:55 - case five and you'll see we get the five
63:58 - like so so now we're returning a value
64:01 - so this return keyword will return a
64:04 - string return a number return a boolean
64:05 - whatever it is that you need will return
64:09 - it within the function now that's still
64:11 - not very impressive we're not adding
64:13 - anything and based off our name here a
64:15 - function name you think something would
64:16 - need to be at so functions can take in
64:20 - what are called parameters in our case
64:23 - we're gonna call this number one and the
64:27 - way that
64:28 - so this is our prime parameter and what
64:30 - we're gonna pass into the actual
64:32 - function call is an argument it's
64:34 - basically the value for num1 so we're
64:36 - gonna pass in let's pass in 10 here and
64:39 - so in our case we're gonna still print
64:44 - out 5 because we're not using them 1 but
64:45 - let's say we return num1 we're now gonna
64:47 - get 10 and if we did the same thing here
64:50 - we can now put 15 and now put 20 and
64:55 - we'd get it to return 10 15 and 20 still
65:00 - not that impressive but you can add
65:01 - multiple parameters in our case here
65:03 - num2 or now we want to add these two
65:07 - numbers together so what is no 1 plus
65:09 - num2 so if we put 10 and then we add 6
65:13 - and we take 15 and we add 7 and we take
65:16 - 20 and we had to what are we gonna get
65:20 - we are now getting 16 22 and 22 which is
65:25 - now we have a function add that will add
65:27 - two numbers anytime we need and we've
65:29 - created this reusable code so when we're
65:31 - writing our when we're solving problems
65:33 - typically you're gonna write it in a
65:35 - function so that you can reuse it and
65:37 - call it and not have to duplicate your
65:40 - code that's really the point of
65:41 - functions and how you use them
65:47 - our first and foremost
65:50 - so finishing the course is an amazing
65:52 - thing taking on the task of learning a
65:54 - new concept learning a new programming
65:56 - language and I commend you for that now
66:00 - might I ask on my behalf as well
66:03 - screaming calm to go ahead and share the
66:05 - course if you enjoyed it I think it
66:06 - covers a lot of great introductory
66:09 - topics to Java scripting can be a great
66:12 - benefit now where do we go from here
66:14 - because the in learning it's all about
66:17 - practicing and retaining that
66:19 - information right it may all make sense
66:21 - as at that moment but we want to make
66:22 - sure that it makes sense for the rest of
66:24 - your life and you need to do that you
66:26 - need to start practicing with it there
66:28 - is a wonderful playlist on scramble
66:30 - column called Jas algorithms it'll give
66:32 - you the opportunity to take some of
66:33 - these methods to dive a little bit
66:34 - deeper with these data types and
66:37 - understand them and actually use what we
66:38 - discussed in here so I encourage you to
66:40 - check that out and you can just go on
66:43 - and go in search for Jas algorithms on
66:46 - screen Metacom thank you so much for
66:47 - watching the course in being a part of
66:50 - it I hope you learned a lot and I wish
66:52 - you the best of luck in your JavaScript
66:54 - endeavors

Cleaned transcript:

all right welcome to the introduction to JavaScript course at scrim be calm we're gonna be talking about a lot of things a lot of important concepts in JavaScript starting with data types and control flow and basically everything that you're gonna need to get up and running by the end of this course it's gonna be covered over 14 lessons with seven different challenges these challenges are going to be some concepts that you may know the answer to if you're paying attention in the course or you may not they're they are designed to introduce you to some of the stranger or weirder parts of JavaScript a little bit about javascript javascript is written in ten days it's an eventdriven language and object based language and it was originally designed to make web pages more dynamic that's where it has grown and flourished although you can use javascript for databases for the backend for mobile applications java scripts home is in the front end clientside development with HTML and CSS it's one of those core three things HTML is sort of the body CSS is how it looks and JavaScript is making sure that it's dynamic a little bit about me I've been working in JavaScript for about two and a half three years as a I've been I'm currently a frontend engineer although I do full stack I'm also a content creator on YouTube if you click on the icon you can go check out my channel I do software tutorials and talk about topics related software as well as my own udemy course I'm really excited to be making this course let's go ahead and jump right into it so in any programming language you're gonna need a way to store a language and values and the way that we can do that in JavaScript are with three main keywords var which is essentially deprecated and I don't recommend we use so we're not going to cover that because I don't even want that to be part of your mind but if you see var you know example equal to true for instance we now can console.log example like so save it it's kind of logging it out right so if it's gonna print it out that's what console.log does but here we're storing a reference to the value true and if we wanted to make this you know Dylan for instance and we save just update it you'll see it's gonna print out Dylan right don't worry about var and so do using var what you want to use is let and when we get to for loops I'll go into a little bit more detail as to why devar has been deprecated but right now when you're storing values that you're gonna override in the way that we override variables we already have example defined here well you know I didn't say example is now equal to we'll do my last name Israel right is our ad I'll save it it's here we're never we're not getting done although Dylan is originally set I think it's overwritten by example here with our let now if we wanted to make a constant we would use cons but you see we get this syntax error the reason for that is when you're dealing with a constant when it when you're talking about strings when you're talking about boolean x' when you're talking about numbers and we'll dive into datatypes in the next video but constants cannot be overwritten when dealing with the primitive values and we'll talk a little bit more about primitive values in Dave College but typically if you're gonna override values like so or if we wanted to override right here get rid of that that's resetting the value we would use a Const right but if we're gonna reset a value potentially we're gonna use let we're gonna dive a little bit more into detail about how that is typically true unless we're dealing with a or objects in the next video we're going to talk about data types but in terms of storing data what you're going to be using this letting kant's all right let's start by talking about what a string is you saw earlier we printed out my name and with we're putting out my name is in console.log and we have this variable here called name and so it's gonna go ahead and print out Dylan right we showcased that earlier so what this is called this datatype here is a string we can actually use this type of word here one word to actually find out what it is if we want to print it out and you'll see that it's printing out string so that's one way if you ever get confusing and kind of check that out right there's not too many data types in JavaScript which is nice but you'll see here we have double quotes around it we can also do single quotes but the the quotes have to match right we can't have a double quote on one side and a single quote on the other and that will work as well so one other thing let's let's actually go ahead and make this first name and let's create another variable called last name and like I said this Israel and notice how I'm ending these statements with semicolons as well this is a good convention so what we'd want to do say we wanted to concatenate this well we could do something very very strong will you do something like this where we do first name plus then we want a space write an empty character plus last name and we save it and then we're gonna get this nice spaced out we're here well and you'll notice we'll showcase it without the space it's gonna look all they're gonna be touching right and that doesn't look very good and it used to be up until es6 which is the 2015 edition of javascript every year the Ekman script foundation which runs javascript adds new updates to the language that we would have to do something like that now in in as of 2015 which was three years ago it has browsers for throughout the throughout the world so you don't have to worry about it not working in any language we can use what's called string and full string interpolation you'll notice these backtick icons if you're having the issue following finding them on your keyboard it's that to the left of the one what does this gun allow us to do is essentially throw in our variables with this dollar sign curly brace opening curly brace closing brace then we can put first name and then we could just put space and then another insert our variable here last name and we can then add have it print out nice and clean so when you're trying to concatenate or add strings together you might want to consider using the curly braces alright now let's go and give some methods that you're going to be using with strings so what is a method a method is a function what is a function a function is a set of instructions it's essentially how we are gonna store our code and we'll go into a little bit more detail about that later on but in our example here javascript strings come with some methods that allow them to do certain things for us and a good example of that is let's say we wanted to have this print out will have this long long length here we can call this property dot length just to get an idea here you'll see we have 24 spaces which is a lot right so each one of these is a single space and we've added a bunch and we had some more on here it's gonna be up to 32 so that's one string property that is going to exist on every string another thing to keep in mind is that maybe we want to not have all this empty space on the end what we can use is called the trim property we're go ahead and drop this down and you'll see dot trim and this is going to remove all the empty space on the end of the string and at the start of the string and so when we save it it's going to trim it and then you'll see that our 32 length and we added more on it's going to be just 12 right you know Dylan Israel and then that plus one empty character all right let's showcase a few other methods about strings now there's over 20 methods for pretty much any data type and strings I think has even more than that so we're just going to touch on a few of these let's let's start by cleaning this up we don't we already showcase what trim is we can go ahead and clean this up and we showcase its length we'll get the total amount of characters that are in there so there's the two upper case so you want to change the whole world whole word to be to upper case you'll see it's out there and as you might have guessed there's also two lower case they've that you'll see everything's now lower case and there's also split so what splits going to do is this is going to take in a parameter which essentially means hey we want to a value that's going to be used in this method and by default if we pass so we're gonna pass it in a single parameter you'll see here I'm passing in an empty space one empty space and what's that's going to do it's just going to take this string and then it's going to break up the string based on all the empty spaces and so you'll see we only have one empty space so what we're going to get when we save this is an array which is a which is another data type we're gonna dive into a little bit more that is going to break our strings out into an array of strings essentially going to find every value in which there is a gap in here and if we wanted to do it on every character all we would do is pass in an empty character and then you'll see we'll get our entire string broken out and even our empty character in that so those are just a few of the more popular if you will and widely use string methods let's go ahead and talk a little bit about numbers next all right we're at our first challenge here for the strings and what we're what the objective here is we have our first name and we have our last name what we want to do is we want to concatenate a value with full that called full name that is then going to be printed out you'll see right now full name is not defined so let's go ahead and pause the video real quick and see if you can fix this to work come work well with your first name and last and I spaced out alright so hopefully you're able to do this if not don't sweat it you're just getting started so we're gonna define a constable here because we're not going to modify full name in reality we could have done the same for first name and last name as well if we want it to be stay clear about it so there's two different ways we can go about it we're gonna do the first name plus the empty space plus last name and this would work just fine as well this would be considered bad convention now that we have that we have our standards and es6 as i mentioned earlier so instead hopefully what you did was use the back picks a dollar sign you passed it in first name space last name to get going here and that should have worked for you just fine and of course the semicolon at the end all right so let's dive into numbers so let's let's create a variable here called example and we're set equal to 7 all right and then we just want to console.log our example value out well 7 so this is a number it's pretty much exactly how you'd expect it now if you're more familiar with object oriented languages one of the things that may be a little bit different is other languages have multiple number types javascript does not JavaScript has one number type and that is number so if we created seven point seven seven repeating that it's still a number and we can check it again just with the type of keyword and you'll see it's gonna print out a number all right let's go you have an example of parse int so right now this is a floatingpoint number right there's decimal places but let's say that we only wanted to get the integer value we'd use the park's int function and just wrap it like so and now we're just gonna get the whole number seven which is nice right so sometimes we may not want to you'll notice it doesn't do any rounding or anything like that all it's getting is the integer here now sometimes you may want to get the floatingpoint number which is we can do with parsefloat just as easily because we may not want to drop that value want the whole value so that's one way we can use it you'll also notice that we can eat this out of a string of ID number like so and save that and you'll see we'll actually get the number value from it so we can parse and float from a string as well as parse that int from a string of five number as well now let's say that we wanted to return a certain amount of decimal places for our number that we have here what we could do is it's going to get rid of this percent we can use the to fix which will return it and this is not only just make dot to fix let's say we want to do it five decimal places like so you'll actually see it's going to add zeros on there so it's going to go seven point seven seven and add these three zeros because that doesn't exist but maybe we just want it to the one place right and you'll see it's actually gonna round it up to seven point eight so that's one way that we can you know handle add additional decimal places or set rather set a certain amount of additional decimal decimals while working with numbers all right welcome to challenge number two you'll see we have our the numbers challenge rather you see we have four values set up period one using partial with a string with some numbers in it one using parsefloat with a string with some numbers in it and then we have a number with two fix if you thought that perhaps we could only call these methods on variables that's not true we can actually just put in the value directly like so and then we have to fix on 200 with two so let's see if you guys can guess what these values are actually gonna output all right so at first you may have thought that this percent was kind of weird and you're right so when we actually go ahead and put out example one will comment these out like so and save it you're gonna see that it's gonna get null okay that makes sense this isn't really a string but what do you think is going to happen when we do the same thing for parsefloat here well you may be surprised with the results and this is one of those things I was mentioning earlier where people are guessing well that's kind of wonky you'll notice it actually pulls the 44 so whenever you parse it in or parse the float and we'll go ahead and delete this hello from this you'll notice it will actually pull it out so if your string starts with a number it will find it and then pull it out this is probably not something you ever want to do bad convention but there's something worth noting and then we have our number here and I went to fix what do you think it's gonna be should be 55 right so we're gonna pass in example 3 save it like so 55 very nice and then finally we're gonna call to fix on example 4 and continue on great you may be wondering why these are different colors what do you think the types of all these are let's go ahead and continue with part two of this challenge so if trying to figure out what each one of these console.log types are all right hopefully at a moment to think about it so this first one is going to be a number because we're actually pulling out a number from it same thing with this second one even though we're pulling it out of the string number now this to fix the to fix number property what do you think that's going to be to be drink it actually converts it to a string when it when it rounds it up or drops or adds those values on a same thing here so just a little wonkiness in JavaScript worth mentioning so up next we're gonna be talking about boolean values so let's create a variable here called example 1 and we're set to true this is a true value there is also a false value and as crazy as it sounds that's pretty much it for boolean x' really boolean czar a true or false value you can kind of think of it as a quarter there's a heads and there's a tails it's a boolean czar true or false it either has to be one or the other where things get a little tricky with billions are when we start dealing with truth ii values and falsity values now one thing i did want to mention is that we have this boolean function here that's going to evaluate if something is a true or false value so you'll see here if we save it it's gonna print out false right because it is a false boolean and it's gonna print out true because it is a true boolean now if we pass in a number what do you think it's gonna put print out well it's gonna print out a true because this is a value that is a truth devalue and in that in our challenge we're going to be talking a little bit about that all right we have eight examples here of truthy and falsy values and what I want you to do is just sort of make a mental note or maybe comment below a line of code or on piece of paper what you think these outputs are going to be which ones are going to be truthy which ones are going to be false let's start with the example one here we already showcased this earlier that false the boolean value of false is a false e value and likewise with example two the true value here is a true value as well okay what is null this is going to be my only introduction to null in this course it's not something I think we really need to cover too much in detail but no is really a referent of value that we are referencing that essentially says a developer plans on setting this value later on and we're giving null as a placeholder as an empty false e value as you might see here as well and then there's undefined which typically means that this is also a false true value but that usually means that either this variable wasn't defined a lot of times you'll see that okay if we can actually assign undefined this way as well which also be a false value but undefined usually just means that there's a variable or a property that doesn't exist that you're trying to reference it's usually a bug in your code when you see an undefined so this is string this empty character here what do you think that's gonna be you might be surprised to find out that's also a false e value however what do you think if we put a space there well that's gonna be it's gonna be a truth eval you so empty empty strings like that are false e values and then we have this other value here na n what is that stanford not a number you're gonna get not a number when you try to parse a string or something like that where it's not going to return a value properly or you know you're gonna check there's there's some not a number methods that we can check out to say hey is this not a number but this is a essentially value type just to tell you that's not number and that's a false e value as well and then we have negative five and you're saying negative five I wonder our negative numbers falsity or truth values well negative numbers are truth values as well as positive numbers the only false e value when it comes to numbers is zero so be careful when you're getting started with that so that's some of a little bit more walking this when it comes to the truth of your false values in JavaScript so next up is a race well whenever you're trying to deal with multiple values you're probably going to need to deal with in a race so how do you instantiate it all right have you said that well you just use these square brackets this is essentially our container and then we can have multiple things in here like so and then we can have access to them later on but essentially it's a list of items that you're going to be using in your code now remember earlier when we were checking the length of the string we can do the same thing with our example one so with our array rather so let's go ahead and print this out and we're gonna call dot length on it and this is gonna give us the length of array now one thing to keep in mind when working with the race so you'll see 0 1 a 1 2 3 the length of this is 3 but say we wanted to let's go ahead and change this to a 7 say we wanted to get this first value a race start on the zero index and so you're gonna see 0 that's 5 and then 1 that's 7 and then 2 that's gonna be 6 when you think 3 is going to return well let's go returning all this doesn't exist NOLA undefined so something keep in mind when working with a race is that they do start on 0 and the length is always going to be one greater than the last index value now we're gonna be talking about a few of the more common methods when it comes to arrays but one thing to keep in mind is there's about 20 or 25 methods with arrays that you're gonna need to know inside and out and we're only going to touch on about 3 or 4 just to give you an idea of a few of them but you're gonna probably need to review all of these and perhaps in a set in a separate course we can deep dive into every single single function I have a udemy course that does exactly that but and say we want to add a value here to example 1 we use the push method and let's so go ahead and and push the number 8 on there and we'll change this to console.log what we want to put out you'll see now we're gonna add that last value we use push to add multiple values so there 8 9 10 save that BAM so it's gonna add all them but let's say we want to remove the last value we can use the pop method here it's gonna remove the last value now one thing that's so that's that's one way to add and and add and remove the last values in other ways of adding the beginning values and adding and certain index value we're not gonna worry about that too much one more thing I want to show you is how to override values so remember earlier we were like oh well we can target values to print out but let's say we want to reset the value on that index zero we do and we'll just put one in there and you'll notice that we're gonna overwrite what comes up on that value and say we want to iterate through the entire array like so we do that with a for each statement and then the element is going to be the current index value or iterating on so in our case it's going to be 1 then 7 then 6 then 8 and we just instead all we want to do is console.log the element out here go ahead and save it and what we're gonna get is essentially 1 7 6 8 9 and then the final rake because it's going to iterate through each element in our array all right in our array challenge you'll see we have a value here in rate value so you'll notice that there's different data types in here we have a string we have a number and we have a truth a value this is something that you can do in JavaScript as well so we have a new value here example 2 new variable and we are sending it equal to example 1 and then we are pushing 11 to example 2 now my question for this challenge is what do you think the value of example 1 is going to be and what do you think the value of example 2 is now it may surprise you to find out that the values are going to be identical you're going to see that if I spell console dot log right you're gonna see that we have example 1 with the 11 as well as example 2 why is that why is that even though we only pushed 11 on to example 2 that's still getting exam passed you example 1 the reason for that is that when you're dealing with arrays and objects you're passing by reference what that basically means is example 2 is setting a reference or referring to example 1 it's not actually creating a new array so when you push the example 2 you're actually pushing to example 1 and how can we how can we create a new array but still have these values in it well a couple of different ways we can use the spread operator which is going to dot dot dot going to unwrap these values in a new array like so and so this is gonna this three dots is some es6 is going to take all these values and essentially push them through this new ring you'll see that's going to create a brand new array so it's not passing by reference anymore another way that you can do this is using the map functionality with is which is an array method that creates a brand new array like so and this is going to be an element remember the element really just refers to the current index value we're iterating over and we can return that element it's just going to create a new array this is going to be identical to the spread operator I'd probably recommend doing the sprite operator because it's less code so just keep that in mind is that when you're dealing with objects and arrays you are passing by references and sometimes you may not want to do that probably most the time and then you're gonna actually want to create a new array so that you can change the values without affecting the original array so objects much like arrays are probably the two most important items that you need to be intimately familiar with objects are defined by these curly braces like so and they can take in what are called properties so remember how we had our first name we can do it like this and we'll put in Dylan and then we can have another property and that can be last name and that will be Israel you'll see when we print it out it's gonna print out this entire object but we don't you know most of time when we're displaying it for the user we don't want the entire object we just want the first name so we can use the adult property and then we can get the value that we want and this will actually give us the first name property so example one dot first name and we can chain these downward as well and let's say we do something like address and we want to do city and we'll do Austin and then we'll do state Texas so we have this object here and excuse me and these are strings right so they need to be wrapped in quotes to develop that their string and we could continue downwards so we have address and then we do dot city and then we'll get Austin now when dealing with objects you can not just use strings you also do like age for instance on here I'm 30 you can do a raise so how many cats do I have I happen to have three one name is Milo and then another is Tito and then another its Achilles and I apologize I don't know how to spell my cat's name but you can use multiple data types with many objects as well and you can also reset the values in our object so let's say we want to say you know it's my birthday and we wanted to reset age for instance time now 31 we could do that and then we would target it if we wanted to print it out to confirm you'll see we now get 31 all right so some of the methods you want to know about objects are objects so I don't know if I made this clear earlier or not but this property name yeah will also be referred to as a key and then its value here will be the value so one would say we wanted to get all the keys from our object we do that with object the object type got keys and then just wrap this like so and you'll see when we print it out it's gonna print out all our cubes notice how it doesn't print out the nested keys as well it's only gonna do it on the level that you're doing that but let's say we want all the values we do that as well and we'd get our values had done Israel we're gonna get a you know the object here which is city and state 31 and then our array of values sometimes you may want to check if a property or a key exists on our object one way that you can do that is to say example one dot has own property and then in there we're gonna pass in a string value and this is going to be the key that we're checking for and that's gonna be first name you'll notice it's true if we put first name to return false that that key does not exist in our object now if you remember earlier when I said that a race passed by reference so do objects so what do you think when we create this example one and then we set example two equal to example one you'll notice that we're actually assigning a value to a property that doesn't exist what do you think is gonna happen in our object here well your first guess might have been that this isn't even gonna work but that would be mistaken example two here is definitely going to add the last name property on there now where there might be an issue is say well and do last name and then we do mother's last name or something like that that wouldn't work and the reason for that is that last name it's not defined as an object but example two is which is why we can assign B last name property directly to it and it works just fine but you might have already guessed as I told you earlier this will pass by reference as well and so when we're setting example two two example one we're gonna go ahead and have these values that are gonna get added to example one as well so keep that in mind when you're creating objects that you're gonna need to instantiate a new object and you're gonna need to pass in the values directly instead of actually having to go and and set and it's gonna pass by reference so it may overwrite your original object now how might we create that object that class you know typically the easiest way is using the object method and when you're working in classes we're not going to dive into classes in this introduction course but you might have a class that you would create a new instance of but how do you do it with objects well object has the object prototype has this assign property or method excuse me method oh oh sorry a little bit of a issue here and it's going to take in two properties first what you want to assign it to which in our case is an empty object and second what it is that we're going to assign it to so you'll see here when we call object of sign it's going to create a brand new object which is I'm going to go ahead and put the example one values into example two and thus when we assign a new property to example two it's not going to pass by reference to example one because here we're instantiating a new object so let's come back to working with numbers again so we're gonna be talking a little bit about the arithmetic operators that are available in JavaScript so right here we have our example five we can add as you might imagine and then we'll get ten we can subtract like four and then we'll get six we can of course times by four which would be 16 my censoring at negative six like so and you'll notice we don't have to group these together javascript is intelligent enough to know the order of operations of math by default and then we come of course divide this by 4 so this is going to be 16 divided by 4 would be 4 10 minus 4 is gonna return 6 so we have all the standard math functionality when we're dealing with our arithmetic operators all right so hopefully those math operators here were a little bit of introduction or repetitive and you're like out man I know how to plus and minus excellent so let's hit you with something that you may not be familiar with that's the modulo operator or modulus operator so you see this percent sign this is gonna return 0 why is that well modulo returns remainders of numbers so when we modulo 5 by 5 it divides evenly and there's no remainder what you think happens when we modulo by 6 well it's going to return the whole number because it doesn't ever evenly divide but if we modulo by 4 it's gonna return 1 modulo by 3 gonna return 2 modulo by 2 it's gonna return 1 right because it goes to 4 and then there's a 1 remainder so that's the modulo operator let's talk a little bit about relational operators we have our two numbers here 10 and 15 and so this is a sort of relation to the math operators we don't really dive into it but relational operators will compare two items and then return a boolean value of a true or false value so when we take example 1 which is 10 and we say greater than greater than or equal to example 2 what you're gonna expect it to return is false right because 10 is not greater than or equal to hover if this was 15 it equals it so it is greater than or equal to of course have less than or equal to as well which will evaluate the true as 10 is indeed less than or equal to 15 now the other relational operators are are these values equal are these double equals is 15 equal to 10 that's false right it's not but if we change example 2 to 10 that's true and if we use triple equals that's true as well and we're gonna talk in the challenge about what the difference between the double equals and the triple equals is and and why that's really important so here you'll see that we are comparing the values so let's say we want to see if they're not equal how can we do that well we can use this exclamation point and equal sign to be false right you guess 10 is equal to 10 thus that's false now is 10 not equal to 12 that is true so it's going to return true and then vice versa with this extra equals here to return true as well before we move on to the challenge I want to actually talk about this double equals and triple equals and what that basically means remember earlier when we were console logging out the data type so in our example here we're going to log out example the type of example 1 and the type of example 2 which is going to return a number and number right now so javascript is a dynamically typed language what that means is in JavaScript we have no problem taking this very here which has a type of number and going head and setting it to a boolean for instance that's something that we can do in JavaScript all day it's it's not a big deal now most languages are statically typed so what that means is that if I wanted to have a number here I'd probably have to create and reset it assigned to a boolean I would have to have some additional logic or a new variable or something like that but we have console so each one these are numbers and when we want to do the comparison there is a strictly equals comparison that compares the value and type and then there is a a sort of less strict comparison that compares only the value so that's the real difference here when we do this double equals all we're checking is that the values are the same so example one is equal to example two it's going to return false right but let's say we change this to the number 10 the number 10 or excuse me the value 10 is equal to the value 10 is double equals that's a true statement however if we change this to a string and the Loosli equals here it's still going to be true even though that this is a number 10 and and a a string 10 because all it cares about is the value however if we use the strictly equals and we take example one as triple equals to example two what it's going to check is not only that 10 is equal to 10 but also what is the data type is number equal to string in that case it's not which is why it's going to return false and the double equals on the not remember the bang this and this it's the same same there as well as checking the type and the value all right let's get a little practice in with the triple equals and the not equals so in our four examples here let's think a little bit about what is it that we're checking and we're checking are these values equal are these values equal are these values not equal and are these values not equal let's think about it for a second and then dive into it alright so in our first example it's going to console the log out example one so remember with the strictly equals this is checking type in value they both their numbers and they both have the value of five so we're going to expect that to be true now example two is five equal equal to string five now the Loosli equals is just checking the type so it's a value five equal to the other value five and that is indeed true unless we're going to expect that to be true and let's go move on to the knot as well so in example three here is the value six not equals to the value six and that's gonna return what do you think it's fair return false because it is actually a true statement six number is equal to six string because we're doing a loosely comparison in vice versa when we do console.log example four that's going to return true because the console that low is not a thing so console dot log true because the string value seven is unequal to the number value seven and thus that returns true all right so sometimes we may just want to increment a number by one a lot of times what we're doing is for loops or we're dealing with iteration as well as subtract by one so how might we do that well at at first glance you may do something like this where you said example 1 is equal to example 1 plus 1 right and then you'd see oh of course it go up by two but this is such a common thing that JavaScript has built in a very easy way to increase by one by throwing this plus plus on our variable and you'll see now we still get the same result if we were to call it again we're gonna get we're gonna get three because we've now added one then we've add another one to get three it also has a easy way to subtract and we can do that with and so our one minus one will become zero but let's say that we don't want to add or subtract by one how might we do that well pretty straightforward so we take example one and we're gonna use this plus equals and then we're gonna say five and this is gonna add 5 to it 6 this is exactly the same thing again as us doing example 1 is equal to example 1 plus 5 similar to how we did plus plus except now it's plus equals now this isn't only relevant to adding or subtracting subtraction would work as well you'll see we'll get 4 but also we can multiply 1 times 5 is 5 we can divide so we'll get point 2 we can even do our modulus operator that we showcase earlier where modulo when u modulo by a number of greater than the number is gonna return the whole number so if we did something like 10 for instance scan return 0 if we did 13 it have a remainder of 3 so that's a couple ways that we can increment decrement in JavaScript all right and their increment and decrement challenge we're gonna hit you with something you really haven't been exposed to one of the stranger parts so you'll see here we have example1 example2 you both equal to five and then you're seeing here we're adding one to example five million we get we didn't talk about plus plus on the front of a variable what do you think the difference between these two might be there is a difference it's subtle but there is a difference what do you think it might be all right so let's go ahead and uncomment these lines of code here and see what the values are you can see it's six and six you're saying you know doing this is the you know want two ways to do the same thing and at first glance it may appear that way but in reality not so let's instead of console logging the value out here put our example plus plus as the value in our console logs and see what happens this is going to be a plus example two so what do you what are you expecting these values to be you're saying what look probably gonna be six and six you'd be wrong so you see it's five and six the reason for that is when we do the plus plus on the end it's going to add this value after this line of code if you do it on the beginning it's essentially gonna do it within the line of code now he depends is there you know there's very few instances where I've ever found need to have to do the plus plus on the beginning typically you'll see most lines of code will just have this as its own line of code but if you wanted to add it the iteration on the exact line of code you'd have to throw it on the beginning of your variable so that's one difference that you may never known and this this will be the same with as well let's go ahead and talk a little bit about control flow using if elseif and and else and what they are so sometimes you only want your code to run for certain reasons so in our if statement like so we can say we can pass an example which is v we're saying if this is equal equal to five meaning does this evaluate to true go ahead and console.log we want to put this will put true statement or we'll just put runs so you'll see when we run this it's run because it is equal to this however if we were to say that this is equal to six this wouldn't run right we get no printout and so our code nested within our curly braces here never actually runs in our if statement so this if statement essentially is a gatekeeper that evaluates this logic here to tell us if something is true or not now what is elseif elseif is a statement that runs only if this statement here if this if statement failed so you have to have an if for there to be an else if so this else if is directly court connected to this if statement so if this fails we're gonna run another if statement here that's going to say uh in our case we'll just put true that's gonna run and and it will just put console dot log else if and you'll see now this is going to print out else if because this failed and then checks is this true it is unless it prints so if we change this back to five and evaluate it you'll see it's now printing out run so it's not printing out the else if because this already evaluated is true and thus it never runs our elseif because again it only runs if the F fails so what is else else is the default value so if the F fails if the ELSA fails and there's no true values between between them we're gonna go ahead and print the console dot law or we're gonna go ahead and run our code in our else statement which in our case we're just going to print out you'll see runs runs ok so if we changes the six that's going to fail so this fails and that runs ok cool itself so if oh it is true so print elsif but what if this was false it's gonna finally get all the way down to the cells because this fails then this fails and then we finally hit our else all right one other thing worth mentioning that we haven't talked about is and and or so so far we've only been evaluating statements one statement at time what if we wanted to evaluate two statements to make sure both of them weren't sure not only is example in our case equal equal to five and we'll just say true is equal equal to true so what this and statement this double ampersand here saying is hey when we run our code check that not only is this true but and this is true as well which is why this runs and vice versa if we change this so that example is equal to go to six which it's not it's gonna fail and this is false so it's gonna hit our else statement even though this is true but let's say we wanted to have it where if either one of these conditions are true run our code we would use an or statement like so which is these two pipes and then we've run our code so it's example equal to six no that's false but true is in fact equal to true and thus this runs now if false was equal to true it's gonna fail right because this is false there this statement here is false in this statement and here is false so that's and an or it allows us to concatenate essentially our conditions and check multiple conditions again or is saying hey if either one and then and would be you know if both are true and we can do this as many times as we need in our code all right let's see if you can guess the true or false values using our an and or operators we have three of them take a second take a look and then we'll go piece by piece all right hopefully you took a second take a look let's take a look at this first one we have a triple equals comparison on ten being equal to ten and five is less than four so we're going to evaluate these two statements this is true and this is false thus it should return false and hopefully that was what you got here false very nice let's look at a very similar statement with the only change in the logic here being an or statement well on the left hand side we have a true statement on the right hand side we have a false statement but because we're using an or operator because one of them is true this is going to return true very nice so last but not least a little bit more of a complex one we did we didn't I said earlier that you can increase the complexity of this very quickly but you'll see here that we are essentially wrapping this statement here and then doing an and to compare this side so it may look like there's three comparisons but but really are more than two comparisons but there's just this or and there's this and so in here we're saying is five less than or equal to five or excuse me greater than equals five that's a true statement or is 4 greater than four that's a false statement but because one of these is true which is this statement this whole block here evaluates the true and then we evaluate this side it's 3 plus 2 equal to 5 it is and thus we return true as well so you can see how this can get a little bit crazy relatively quickly but I think that some good practice and if you're interested in practicing this you just want to get it down just Google control flow practice on practice JavaScript online you'll come across a bunch of like you know 20 30 questions of things like this at a time that you can practice with so let's talk about switch statements really quickly switch statements are gonna feel very similar to an ifelse ifelse statement because it is again some control flow on your code but the difference with the switch statement is say we're checking a finite amount of answers and you want to know you only want to run some code for three or four answers and then you have a default to assume is really a different way of writing ifelse ifelse statement let's go ahead and give an example say we are taking a test and we answer a fourhour test so our student answer in our switch statement we're going to have this value here and we're gonna pass in a student answer and what that is to say hey check our answer for each one of these cases and then run some code so in a tech a case follows by a value so we have you know case a and then in in right below it we'll have something that says something like you know we'll console dot log wrong and then we have to break out of the switch name and this break is very important because if you don't break out of it basically this code is gonna run if our student answer here is a but if we don't break out of it when we have another case like B it's gonna continue to it's gonna continue checking your code to make sure that it's right and we'll just put console dot log B is wrong just forsake a is wrong and then we'll say C is the answer and then again for our case here we need to break out of the logic otherwise we're gonna have some issues with it checking multiple answers when really the switch statement is designed to only it should only go for the correct answer and C and we're going to put will just call us alot log C is correct period and then we want to break out of here so let's actually run our code like so and save it and you'll see we'll get a is wrong so our answer a here it's wrong if we change this to be we're going it B is wrong and if we change it to see we're gonna get see it's correct very nice so what happens we put this to be a nothing rinse none of these is correct but maybe we want a default answer so if a value comes in well there's this default keyword here which is essentially our else where if all the other answers fail go ahead and console B is wrong as well because there's only four answers or but not a real answer and you'll see we get not a real answer here because it is an A it isn't B it isn't C and then we get not a real answer because this is a default value you'll notice how I don't break from here the break here is so that no additional things are ran you don't really need a break on default it's I couldn't tell you if it's clean convention or not but there's no reason to do it unless code is better typically but that's a switch statement you pass in a value you then check a case to see if it matches any and then you also have the default here just make sure you break otherwise you might run into a lot of errors down the road where you know has multiple correct answers or your logics not going to work properly now let's say that we wanted to iterate through up to the numbers 0 to 5 to add those values to total how might we do that well for loop would be an excellent way of doing that and when you create one by first instantiate a variable essentially a counter variable usually initialized by I for iteration we're gonna started off at 0 and then this statement here I is less than 5 this essentially will continue to run our for loop until this statement no longer is true and then we're gonna increase number the I plus plus by 1 every iteration and so if we were to console dot log out I right now what we're gonna see here the number is 0 1 2 3 4 and then I is not less than 4 I when it's 5 is not less than 5 thus it breaks the for loop doesn't run the logic inside here and then exits out so how might we now modify our code to add the values of I to total what we can do that by just doing total plus equals 2 I now let's let's go ahead and console dot log out the values of total which we know are those index values so when we console dot log out total you'll see that is now added all of our values to equal 10 so 0 plus 1 is 1 plus 2 is 3 plus 3 is 6 plus 4 is 10 and we get our value there now this is of a for loop where we're gonna actually know how many iterations it's going to be 5 but how might we iterate through an array when we don't know how many values did it rate through so let's create an array here and we'll just call this a number a and this is gonna be equal to we'll just throw in some numbers of 10 10 20 30 40 50 60 70 and 80 so we could in theory say you know go ahead and put less than 8 but that's not good practice that's not what you want to do with the race because maybe we add a value to this later on so how might we make this a bit more dynamic well we can set our our right side here to no more a length remember that dot length property which is going to have this run for as many iterations that are in our in our array for the length of the array but instead of actually adding the total value of just being the index value we want the values out of the no more rate how might we do that well remember the index values are accessed with numbers right so if we want to just add index zero we've put that in there or index one or index 2 but we want it to be on the con for every value so every iteration our I gets updated and thus you'll see when we console dot log out that value here right above total no more a I it's gonna hit the zero and then one and ten and you'll see that we get all our values in the console so we're already adding all those values and now this we've been able to access them with our I variable here and so so at the end we get a very large 360 number because we've added all the values in our number right and vice first if we added 90 on here you'll see that it will run and we don't have to refactor any of our code so let's say we want to repeat our code but we don't know there's not a finite amount of answers so we can't use a switch case we don't know what the length of the array is gonna be or we don't know how many iterations to run we just want it to run until a value is true so a while loop might be what you're looking to do here while loops are another way to run iterations of our code and so what a while loop does is it runs until some sort of value here is false in our case we'll just let's go ahead and say count is greater than 20 you know this could be anything in here and in our while loop we're gonna go ahead and and add we're gonna say uh you know we're gonna do some logic and then maybe at the animal cell count plus plus now the the reason that this may seem very similar and in its current setup it is and then at the end we'll go ahead and complement log count if we want to and so this never runs as you notice here because count is never greater than 20 because this is false statement but let's go ahead and change it so less than it's gonna run 20 times and you could do this in a for loop that's true but you can do some things with this where we're let's let's forget about numbers for a second maybe we want to have a local value where we're just you know where we're gonna run this while it's true and in here we're gonna put true but we need to make sure now that we've put hardcoded a true value in here that we are going to break out of this so what we can do is if we want to if if count is less than 20 go ahead and greater than or equal to 20 what we want to do is we're gonna start off first off by adding and then you'd have an additional logic then you would say you'd say something like break so this will break us out of our for loop so when it's 20 we're gonna exit out of our for loop here as well so while loops are a way to run your logic run your code for a set amount of time when you don't know how many times that's going to be now there's also dowhile loops at which are a little bit different than then while loops the main difference between a while loop and a dowhile loop is a dowhile loop will run at least once remember when we set this to false earlier and this is a false statement count never got touched and never ran this code not even once to see update count but if we had a dowhile loop it would do it so let's go ahead and convert this while loop to a dowhile loop it's pretty straight forward so we're gonna do with these closing braces these curly braces and basically all our logic here is gonna be in our dowhile loop and we're gonna remove the curly braces on the wall' loop and just have wall afterthefact like so now you'll see when we save our code here count is actually going to be equal to 1 even though our while loop is false so it's gonna run this one iteration count is still not greater than or equal to 20 so we don't break out of the dowhile loop but the actual while statement itself is false we only run at the one time because it's a dowhile loop so just something keep in mind I it's very rare that I use a while loop or do a loop but is worth mentioning for those times where you don't have any way of knowing how many iterations and you're basically checking a value until you get a right value to break you out of it and that could be anything from more count is you know equal equal to you know feeling or something like that where you can't check the the length right so you can do check properties the the main thing to keep in mind is that is that you are going to be it's usually not used with numbers but it's a for a set amount iterations that you don't know you just need to keep doing it till you get the result you're looking for but it is also a word of caution a good way to create an infinite loop which will crash your program and and maybe stop it all together all right last but not least functions so we need to define a function what is a function a function is a way of storing our code so that we can call it again and again and reuse it part of being a software developer prior to being any developer is writing reusable code and it's a a part of development that you're gonna have to get comfortable with so let's go ahead and define a function well write a simple function called add in JavaScript you just noted by the keyword the name of the function and then these parentheses and then we have our curly braces for our logic so in our example here if we just want a console table add o and you'll see well save nothing happens well we have to actually invoke the function like so by just calling it by its name curly braces or excuse me parentheses and you'll see here we actually print out add very nice and we can do this time and time and time again so you'll see we actually get add to print out four times just the power of a function is that we have the same item being able to work with multiple be able to be used multiple times now this isn't a very impressive function so let's adds let's actually add some logic to it so this return word here what say we wanted to return a value return in a function will allow us to do that so let's return five and you'll see nothing prints out but we can go ahead and console dot log three wrap these ads in a console dot log will actually print out the value that's being returned which is in our case five and you'll see we get the five like so so now we're returning a value so this return keyword will return a string return a number return a boolean whatever it is that you need will return it within the function now that's still not very impressive we're not adding anything and based off our name here a function name you think something would need to be at so functions can take in what are called parameters in our case we're gonna call this number one and the way that so this is our prime parameter and what we're gonna pass into the actual function call is an argument it's basically the value for num1 so we're gonna pass in let's pass in 10 here and so in our case we're gonna still print out 5 because we're not using them 1 but let's say we return num1 we're now gonna get 10 and if we did the same thing here we can now put 15 and now put 20 and we'd get it to return 10 15 and 20 still not that impressive but you can add multiple parameters in our case here num2 or now we want to add these two numbers together so what is no 1 plus num2 so if we put 10 and then we add 6 and we take 15 and we add 7 and we take 20 and we had to what are we gonna get we are now getting 16 22 and 22 which is now we have a function add that will add two numbers anytime we need and we've created this reusable code so when we're writing our when we're solving problems typically you're gonna write it in a function so that you can reuse it and call it and not have to duplicate your code that's really the point of functions and how you use them our first and foremost so finishing the course is an amazing thing taking on the task of learning a new concept learning a new programming language and I commend you for that now might I ask on my behalf as well screaming calm to go ahead and share the course if you enjoyed it I think it covers a lot of great introductory topics to Java scripting can be a great benefit now where do we go from here because the in learning it's all about practicing and retaining that information right it may all make sense as at that moment but we want to make sure that it makes sense for the rest of your life and you need to do that you need to start practicing with it there is a wonderful playlist on scramble column called Jas algorithms it'll give you the opportunity to take some of these methods to dive a little bit deeper with these data types and understand them and actually use what we discussed in here so I encourage you to check that out and you can just go on and go in search for Jas algorithms on screen Metacom thank you so much for watching the course in being a part of it I hope you learned a lot and I wish you the best of luck in your JavaScript endeavors
