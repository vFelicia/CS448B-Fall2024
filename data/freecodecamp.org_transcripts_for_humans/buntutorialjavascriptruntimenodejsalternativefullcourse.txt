With timestamps:

00:00 - welcome to this bun crash course bun is
00:03 - a cuttingedge toolkit designed to
00:05 - supercharge your JavaScript and
00:06 - typescript applications with its
00:09 - Lightning Fast startup times built in
00:11 - support for typescript and jsx and a
00:14 - range of powerful features designed to
00:16 - seamlessly replace node.js bun promises
00:20 - to revolutionize your development
00:22 - experience whether you're looking to
00:24 - optimize serverless functions or enhance
00:26 - your workflow this course will Empower
00:29 - you to leverage Bun's full potential and
00:32 - seamlessly integrate it into your
00:34 - projects hder Malik developed this
00:36 - course he is a full stack developer and
00:39 - entrepreneur bun is a JavaScript runtime
00:43 - it's a similar or alternative of nodejs
00:46 - but it but it is faster than node.js you
00:49 - can execute JavaScript and typescript
00:52 - with one you can also install the
00:55 - packages with the help of bun it will
00:58 - also have provide function ality to run
01:01 - test cases you will have all in one
01:05 - toolkit you can develop test run and
01:10 - bundle JavaScript and typescript
01:13 - projects that is the definition of
01:16 - bun it can execute JavaScript and
01:19 - typescript on the server it will also
01:23 - compatible with nodejs package
01:27 - manager under the hood it's a Javas
01:29 - script run time it helps to run
01:32 - JavaScript similarly in the Chrome you
01:35 - can run
01:38 - JavaScript let's do that here I'm going
01:42 - to run the
01:44 - JavaScript I can
01:46 - say y a z is equal to
01:50 - 10 let me print Z I got the value so I
01:54 - can run JavaScript on the Chrome browser
01:57 - bun can run JavaScript on the server
02:02 - side bun is a new JavaScript runtime
02:06 - built from scratch to serve the modern
02:08 - JavaScript
02:09 - ecosystem the reasons to use burn it's
02:15 - faster burn starts fast and runs fast it
02:20 - extends JavaScript core the performance
02:23 - minded JS engine built for
02:25 - Safari it also provide the API key API
02:29 - for like starting an HTTP server and
02:32 - writing
02:35 - files bun is designed as a drop-in
02:38 - replacement for node.js it natively
02:41 - implements hundreds of nodejs and web
02:43 - apis including FS path and
02:46 - buffer the goal of the bun is to run
02:49 - most of the World server side JavaScript
02:52 - alternative to nodejs and provide tools
02:55 - to improve performance reduce complexity
02:58 - and multiply developer
03:02 - productivity you can also use external
03:04 - nodejs packages with with bur you can
03:08 - also execute typescript fast fast
03:12 - running
03:13 - performance web standard apis you can
03:16 - also run TSX like typescript with
03:20 - react works with node modules no more
03:23 - module Madness you can also use the
03:27 - watch mode run test in the watch mode
03:30 - starting an HTTP server websocket server
03:33 - read and write hash password write a
03:36 - test this is the result they got Benn is
03:41 - BN took 36 seconds PNP took more
03:47 - seconds and npm took more
03:50 - seconds 36 second here and yarn is a bit
03:56 - slower Nots compatible crazy fast Let's
04:00 - test it how burn is fast this is a test
04:04 - result of a burn burn is also a test
04:06 - Runner you can also run test with the
04:08 - help of burn just like you did with just
04:12 - framework just compatible syntax crazy
04:16 - fast enough Theory now we're going to
04:20 - install the burn on our
04:28 - machine
04:32 - I have a
04:34 - Mac I can install the burn by using this
04:45 - one if you are
04:49 - windows you can also install
04:53 - burn if you are windows you can use this
04:58 - option
05:08 - I am on the
05:09 - Mac I'm going to install
05:14 - burn if you want to install specific
05:16 - version you can do that but I'm going to
05:19 - install
05:20 - the current version or the latest
05:28 - version
05:55 - bun was installed successfully let's
06:00 - check it
06:01 - out if I write
06:05 - burn Das Das
06:08 - help to get started you got to run this
06:12 - one this
06:14 - [Music]
06:16 - command now I can run bur Das D help it
06:20 - can recognize the command oh my God it
06:23 - took it took a few seconds to install
06:26 - the bun burn run run J JavaScript a
06:30 - package.json file or a script run unit
06:33 - test you can use this command if you
06:36 - want to run in a depal mode you can do
06:38 - this command if you want to in create an
06:40 - empty project you can use this one if
06:43 - you want to create a next GS project you
06:45 - can use this command if you have to
06:47 - install any dependency you can use burn
06:50 - I or add a dependency bu a or bun add
06:55 - remove dependency bun
06:57 - RM link link and npm globally you can
07:01 - use Link PM more commands for managing
07:04 - packages BN build build bundle
07:08 - typescript and JavaScript into a single
07:10 - file upgrade to the latest version you
07:13 - can use this
07:16 - command we have installed burn
07:24 - successfully now we're going to create a
07:27 - new project burn project
07:40 - let's create a new folder I can say in
07:44 - my code file in my code
07:46 - folder you can say burn
07:50 - first oh make directory burn
07:55 - first let's go to the burn first
08:01 - let's create a new project by using bun
08:04 - in
08:05 - [Music]
08:06 - it you can provide your package name I
08:09 - can use bur first entry file should be
08:13 - index.ts
08:16 - file please run that so it has also
08:21 - executed the
08:22 - file so I'm going to open the code into
08:25 - my visual studio code
08:28 - editor
08:30 - oh oh my God I got the node modules
08:33 - folder inside the node modules I got the
08:36 - bun
08:37 - types we have the package.json file TS
08:41 - config
08:42 - file so I got the node modules bun lock
08:47 - file I cannot see that we have the
08:50 - index.ts file we also have typescript
08:55 - configuration that's amazing you can run
08:59 - run the
09:01 - typescript with the help of burn now
09:06 - this project is compatible with
09:08 - typescript you can run any type of
09:10 - typescript project or any kind of nodejs
09:13 - project let's say I'm going to run the
09:15 - node file as a
09:17 - node let's create a new
09:20 - function read
09:22 - do or
09:24 - read I'm going to take I'm going to
09:26 - provide the text the string
09:30 - I'm going to provide the arrow function
09:31 - and it is going to return hello or
09:35 - return text I'm just
09:37 - adding a typescript I can call the
09:40 - message hello
09:43 - world and I can print the hello world
09:48 - here
09:51 - const text I got the
09:54 - text or I can say the
09:58 - message
10:00 - so I can print the message
10:03 - here by using the log you can run
10:09 - typescript I can use this command bun
10:13 - run to run the typescript
10:18 - project Bun Run
10:24 - index.ts that's amazing hello world you
10:27 - don't need to set up any type of if you
10:30 - are working with nodejs you have to set
10:32 - up you have to install depth
10:35 - dependencies of typescript you have to
10:37 - do some configuration you don't need to
10:39 - do that it is automatically compatible
10:43 - or already configuration conf already
10:47 - configured with typescript that's
10:56 - amazing now we're going to move forward
11:00 - uh I can create a web server with with
11:02 - the bun let's create a get
11:08 - repository get in it I'll push that git
11:11 - repository into a
11:13 - project get
11:14 - [Music]
11:16 - commit first commit setup
11:20 - burn oh I did not add
11:25 - that get
11:27 - commit
11:29 - [Music]
11:30 - DM
11:35 - setup and I can push that code I don't I
11:38 - think I did not set the repository let's
11:41 - set the
11:42 - repository I can say
11:48 - GitHub let's create a new repository you
11:51 - can find the source source code at this
11:55 - repository what I can do I can create a
11:57 - new branch I can start from here I can
12:01 - say setup or init I can use the
12:06 - init burn
12:10 - course I can say source
12:14 - code for
12:16 - bur
12:19 - YouTube source code for burn course
12:22 - that's
12:27 - it
12:29 - let me push my code it will create the
12:33 - master BR or main
12:45 - branch now you should see the main
12:51 - branch this is the entry
12:54 - point we have only single branch which
12:56 - is main which is entry point
12:59 - you can
13:01 - start uh you can start checking out this
13:04 - repository and start with main branch
13:07 - that's it let's move forward let's
13:09 - create a new Branch I can say web
13:13 - server
13:14 - server web
13:17 - server
13:19 - [Music]
13:20 - so I'm going to delete everything from
13:23 - index. let's create a new
13:27 - server we can use burn.
13:32 - Serve Port should be
13:35 - 3,000 and fetch should be there's a
13:39 - fetch method it will take request
13:45 - argument let's return the
13:48 - response hello
13:52 - world that is it it's a simple the
13:56 - fastest the simple way to create create
13:58 - a web server that's amazing I like that
14:02 - listening on
14:07 - Port
14:10 - HTTP Local
14:13 - Host colon and uh I can use back tick
14:22 - here listening
14:24 - [Music]
14:26 - to server I can get the port from here
14:30 - server. Port that's
14:32 - it so now we need to run the project I
14:36 - can run
14:40 - that I was running the project bur
14:43 - [Music]
14:46 - run
14:50 - index.ts oh it's not a
14:53 - bin it's a
14:57 - one
14:59 - so I got the
15:02 - issue template string was
15:09 - not now my server is running at Local
15:12 - Host colum 3000 I can check that from
15:16 - Local Host colon
15:20 - 3000 amazing you can see the hello world
15:23 - message here if I
15:27 - change
15:30 - if I change anything hello
15:32 - world are you
15:35 - learning
15:41 - burn but we have to set configure the
15:44 - automatically uh Auto reloading I didn't
15:47 - set
15:55 - that we can also configure a script
16:01 - for
16:03 - start I can say bur run index.ts that's
16:09 - it there is nothing new here npm or you
16:15 - can run burn instead of npm you don't
16:18 - need to install external npm I can say
16:21 - Burns Run start that looks
16:25 - good so you want to install the package
16:28 - you can also do that burn add I can I
16:32 - can add a packet
16:35 - fidget or F figlet I don't
16:39 - know bur add it's going to install the
16:47 - dependency let's add burn a new package
16:51 - you can also install the typing of the
16:55 - burn types and fig let oops oops oops
17:01 - oops fake
17:13 - let now let's use that package
17:18 - figlet I can import
17:22 - figlet from figlet figlet I can see the
17:27 - suggestion
17:29 - what I need to do I I need to do a
17:31 - little bit changing
17:34 - here
17:36 - body figet dot text
17:39 - [Music]
17:41 - sync
17:43 - hello
17:47 - hola instead of response I can provide
17:50 - the
17:51 - body in the response let's run the
17:57 - project
18:02 - so oh my God so you
18:05 - can add a little bit changing in the
18:08 - text or modify the
18:10 - text I am learning
18:13 - burn don't worry I'll figure it out how
18:16 - to run in the development mode
18:19 - project you can see I am learning
18:21 - [Music]
18:27 - burn
18:29 - if you want to R run the bur in a
18:32 - development mode or a watch mode you can
18:35 - add a
18:36 - script I can say dript
18:41 - burn Das
18:44 - dwat I have to provide my entry file
18:47 - which is index.ts so I can say burn def
18:52 - bur
18:54 - runev so my application is running on
18:58 - listening
18:59 - mode hello I'm learning
19:02 - burn from my video oh
19:07 - nice so I
19:09 - have I got
19:14 - that now you can see a simple video that
19:18 - looks
19:24 - good so we have created the web server
19:28 - let's create new routes in the
19:32 - server inside the fetch I can get the
19:36 - URL by using
19:38 - the new
19:41 - URL it's a it's a function I can get the
19:48 - URL I can add the logic if url. path
19:52 - name should be root
19:56 - URL then you you can return this
20:05 - response otherwise you can return new
20:11 - response and I can save
20:15 - 404 I can also add a new check url. path
20:20 - [Music]
20:26 - name here let's say I'm going to add a
20:29 - triple sign strict equal in
20:33 - JavaScript if we have the about about
20:36 - page I can say return new
20:41 - response about me I can rended the HTML
20:46 - text
20:47 - here about
20:54 - me my application is running now
21:00 - let's look at the root
21:03 - route I'll get the video if I look at
21:05 - the about I'll get the about me page
21:09 - what about the contact page if URL do
21:14 - path name should
21:16 - be I can say the
21:22 - contact return new
21:25 - response contact us
21:34 - let's visit the
21:36 - contact so I can see the contact
21:39 - as I can create a new Branch it should
21:42 - be
21:45 - routes adding
21:49 - routes and I can push that into
21:57 - Repository
22:01 - now I'm going to teach you how to handle
22:04 - error let's create a new
22:08 - route path
22:11 - [Music]
22:14 - name I'm going to create a new route
22:16 - which is
22:18 - feed and this I don't I'm not going to
22:21 - send any content in the response so I
22:24 - can return the
22:25 - error could not
22:29 - fetch
22:30 - feed if error comes it is going to throw
22:34 - the error otherwise it is going to
22:35 - return the response 404 if I try to
22:38 - fetch the invalid route I will get the
22:42 - 404 if I try to fetch the FED route I'll
22:45 - I'll get the I got the error but I want
22:49 - to I want to render the error in
22:52 - readable format I don't want to break
22:55 - the complete application you can do that
22:58 - here there is an error method it is
23:01 - going to take the error
23:03 - argument here I can return the
23:08 - response so let me render the HTML here
23:14 - PR and we have to provide the
23:17 - error and you can also render or log the
23:22 - eror
23:24 - tag I'm going to log the eror Stag let
23:28 - me close the pre- tag so we are
23:30 - rendering the HTML we have to set the
23:33 - header for
23:36 - HTML let me set the content
23:41 - type let me set it as an
23:48 - HTML whenever you call this throw method
23:51 - it is going to call the error method if
23:53 - error comes it is going to call the
23:56 - error function this one so I got the
23:59 - error could not feed error this is the
24:02 - complete error message and in the new
24:05 - line it is going to print the error
24:06 - stack error could not error could not
24:09 - find could not fetch the
24:13 - feed in this video I'm going to teach
24:16 - you how to stream a file in bun let's
24:20 - create a new file you can use any name
24:25 - here I'm going to create txt file let's
24:28 - call it g. txt hello guys
24:32 - hello bun
24:36 - developer so now we need to read this
24:40 - file in the index.ts
24:47 - file let's create a new
24:51 - route URL
24:53 - dot path
24:54 - [Music]
24:56 - name should be
25:00 - create then we need to read this file I
25:04 - can say new
25:06 - response 1.
25:08 - file we need to provide the path of the
25:12 - file in our case gr.
25:15 - txt let's look at I'm going to access
25:18 - the gr
25:21 - route the path does not exist oh I
25:25 - forgot to add this back slash
25:30 - now hello burn
25:32 - developer uh we have learned the basics
25:36 - of burn now I'm going to teach you how
25:39 - can we build a restful
25:42 - apis uh we have used if you have worked
25:45 - with
25:46 - nodejs I'm sure you used expressjs
25:49 - framework to build rest
25:51 - apis uh if you want to build rest API in
25:54 - bun you can use a framework it's built
25:58 - on the top of BUN and you can use the
26:01 - typescript typescript supported
26:03 - supercharge by
26:04 - bun so it
26:07 - provides a framework you can see it's a
26:10 - faster than all of these framework fast
26:13 - fastify Kaa Express in the nest that is
26:18 - amazing so 18x faster than Express let's
26:22 - look
26:26 - at so we have to install the app let we
26:31 - I've already installed bun let's create
26:36 - a new project I'm in the my project
26:39 - folder if you want to do in in terminal
26:42 - you can also do that but I have open the
26:44 - vs code burn create
26:49 - Alysia and Alysia and I'm going to call
26:52 - it my application you can use
26:56 - bndr
27:00 - API awesome it's going to create a rest
27:15 - API let me go to the
27:18 - CD uh to my rest
27:20 - API and I can open that project into my
27:24 - vs code editor I'm going to close the
27:28 - previous code
27:30 - editor now you can see the index.ts file
27:35 - we have bulog package.json
27:39 - file and we have TS config they have
27:42 - already created a Dev script to run the
27:45 - project in development
27:48 - mode and I can see new Alysia doget we
27:51 - have a root route this is how you can
27:54 - create a new server that's amazing so
27:57 - let's run the project burn run
28:03 - oops
28:04 - awesome we have created a new server
28:08 - like in
28:11 - Express awesome hello Alisia I can
28:14 - change
28:16 - that hello
28:21 - Bund I'm going to
28:23 - build restful
28:26 - API
28:31 - so it has it is listening on the port
28:34 - 3000 so here I have mentioned the host
28:38 - and the port server Port Lisa is running
28:42 - at local host and here is our
28:47 - Port let's look at hello Dev Bev I'm
28:50 - going to build restful apis this is
28:56 - amazing
29:03 - now we're going to talk about routing in
29:06 - Alicia
29:08 - Alysia we have already created the get
29:11 - route we can create a
29:15 - route by using the chaining let's create
29:18 - a new
29:20 - route I'm going to create the get
29:22 - route this time I would like to
29:26 - add the V or path parameter let's
29:31 - say
29:33 - post and I get the ID so I can get the
29:37 - prams here I can use the destructuring
29:40 - here this is a request Handler and it is
29:44 - going to destructure the prams and I
29:47 - would like to extract the
29:52 - ID here I can return anything let's say
29:56 - if I want to return the ID I can do
30:03 - that one run
30:07 - Dev so I would like to test this
30:14 - route let's try to access the
30:17 - route Local Host column 3000 SL post ID
30:24 - I would like to provide the ID which is
30:26 - one here
30:28 - so I'm returning the Json object and
30:31 - here I got the ID you can also do that
30:35 - let's say it's an ID and I can return
30:37 - the title learn
30:43 - burn so now you will
30:46 - get title and the
30:53 - ID I also want to talk about let's
30:58 - complete that get
31:01 - route or here I can
31:05 - say
31:07 - route so we have created the get route
31:11 - now let's define the post route or
31:13 - delete route you can also do that let's
31:16 - say I
31:17 - post and it's going to get the request
31:23 - body so I'm going to use the call back
31:26 - function
31:28 - it's going to give me the
31:30 - body let's return something
31:36 - here so we need to perform the post
31:38 - request I'm going to use the postman if
31:41 - you don't have a postman you can install
31:45 - this software we're going to use this
31:46 - software to test the
31:53 - API I have to send the post request
31:57 - Local Host call in
32:00 - 3000 and/
32:03 - poost let's provide the body you can
32:06 - provide the body by going to the raw and
32:11 - Json ID one title should be Lear
32:18 - note so I got
32:22 - request PA
32:24 - post I don't get the body
32:28 - we'll talk more about how will you get
32:30 - the
32:40 - party so let's create another
32:44 - route this time I can
32:47 - say
32:49 - track everything like when you send
32:54 - request track SL1 SL track SL anything
32:59 - it's going to call this method let me
33:02 - show you the
33:04 - demo
33:06 - return track
33:10 - route Let's test it out I can send the
33:14 - request I have to send the get
33:21 - request so I'm going to send the get
33:24 - request I don't need to provide the
33:26 - party for the get request track
33:32 - slash2 I'll get the track rout if I say
33:36 - track
33:37 - slash to/
33:42 - learn I got the track
33:45 - route whatever you send after this track
33:49 - matching it's going to call this method
33:52 - track
33:55 - route
34:01 - so we did not talk about the context
34:04 - object here we
34:06 - are uh we are getting the prems from the
34:09 - context object this should be the
34:12 - context so here I'm going to return the
34:17 - context
34:19 - let's add a new
34:21 - out so I can
34:24 - send the post
34:28 - post
34:30 - out let's provide some
34:35 - body
34:38 - ID or title should be learn
34:43 - anything so I got the
34:47 - context here I got the
34:55 - context
34:58 - so context has request property request
35:02 - object it's a raw request for accessing
35:05 - data as a FB standard
35:08 - type so party which come with request
35:12 - but I don't I'm not getting any body
35:16 - here we will I will you will also get
35:19 - the query prems store which is a global
35:22 - store is
35:24 - a uh store is a global mutable
35:27 - store for Alicia
35:32 - instance you will also get the set
35:35 - response
35:36 - representation I get the status code and
35:39 - the
35:55 - header
35:59 - what about here if I try to get the
36:04 - body Lia Lysa
36:07 - follow you use the destructuring
36:12 - pattern if I do
36:15 - that let's send the request that looks
36:19 - good I got the body when I was not using
36:25 - the destructuring I was using this
36:28 - one context I'm returning the context in
36:32 - the
36:34 - response I was not getting the body
36:37 - request
36:38 - body so if you have worked with Express
36:42 - you have to use a Json middleware you
36:45 - don't need to use Json middleware here I
36:49 - can destructure the body and I can
36:54 - return the body that's it
37:01 - so now I got the
37:03 - party let's say
37:05 - [Music]
37:07 - description
37:09 - learning pun from
37:13 - course so I got description and the
37:22 - title you can also get the set property
37:27 - set if you want to set these status code
37:31 - you can also do that let's
37:35 - say it's returning a
37:39 - body it's returning an
37:42 - object and inside the function let me do
37:46 - that
37:49 - here I'm going to
37:51 - set set do status code let's say if I
37:55 - set the for 43 it's going to return the
37:58 - 403 status
38:03 - code you can see the 403 Forbidden but I
38:07 - want to I want to have 2011 let's say a
38:10 - record created
38:12 - successfully now I got 2011 that looks
38:25 - good
38:39 - if you want to return the array Json
38:42 - array you have to stringify that let's
38:45 - create a new route I can say
38:50 - tracks so what I want to
38:53 - do I want to return a new response
38:59 - here I want to send the Json array so
39:02 - have we have to
39:05 - stringify I can say songs or
39:13 - tracks let's provide a
39:17 - tracks can say dancing
39:22 - feed here I can
39:25 - say whatever song
39:27 - [Music]
39:29 - name let's try to fetch all the tracks I
39:34 - can send the get request let's send the
39:37 - tracks to fetch all the tracks so I got
39:41 - this one
39:43 - tracks but we did not set the header for
39:49 - the this response type that's why we are
39:52 - not seeing adjacent
39:55 - response
40:00 - so we have to set the
40:16 - headers here we have to provide the
40:19 - header content
40:21 - type it should be application
40:25 - sljs
40:30 - now you can see that I can see adjacent
40:34 - response back
40:36 - here I got the tracks I have all of
40:39 - these
40:51 - tracks one more thing I would like to
40:54 - mention if you don't want to use json.
41:00 - stringify Alysia will convert that for
41:03 - you if you return the simple let me
41:06 - comment
41:11 - that if you comment that and if you
41:16 - return a simple
41:18 - array Alysia will do that for
41:25 - you
41:29 - it's I'm going to return the
41:33 - array
41:35 - so that's
41:39 - it so we have to return the object here
41:43 - I can say
41:47 - tracks
41:48 - and we can close the
41:54 - object let's send
41:57 - now I got the same
41:59 - response let's add a new new
42:03 - song so I got a new song
42:18 - here now we're going to talk about how
42:21 - to build a state
42:25 - edit now we're going to talk about if
42:27 - you want to extend the Handler function
42:29 - you can also do that this is this is
42:33 - useful when you need to access extra
42:35 - values in a Handler like database
42:38 - connection or any variable or any
42:42 - variable you
42:43 - need uh I can set the state here
42:49 - here I can call the state let me Define
42:53 - the state I can say version one or you
42:56 - can provide any value
42:59 - here so I can
43:01 - also add a decorate it's additional
43:05 - properties let's say you want to map any
43:09 - value or you can say get
43:12 - dat it's a function it's going it's
43:15 - going to return the date current date
43:18 - and you can destructure the value here
43:22 - in your Handler function let's say I
43:25 - want to
43:26 - use the date and the state here I can
43:33 - access the store and I can access the
43:35 - get dat function you can see
43:38 - that uh now I can use that I can log the
43:43 - state let me log the
43:47 - store and I can log the I can call the
43:51 - get dat
43:53 - function or you can call get dat dat
43:56 - it's returning the date so all I need is
43:59 - to call all I need to use the get
44:08 - dat let's try to run the
44:13 - project my application is running so we
44:16 - have to fetch all the
44:19 - tracks I'm going to send the get
44:21 - request so I got all of these tracks in
44:26 - here you can see the version and this is
44:28 - a function so it's returning dat do now
44:32 - is returning a function so we have we
44:35 - got to call that function let's do that
44:37 - I'm going to call this
44:40 - function let's use
44:43 - it and I got the exact let's use let's
44:48 - add more
44:50 - values so if you want to add a multiple
44:53 - Properties or you can add the object
44:55 - here
44:57 - here a let's
44:59 - say uh ID should be one
45:04 - or whatever variable you want to store
45:07 - here
45:09 - email should
45:11 - be let's provide the email
45:14 - Jan
45:16 - gmail.com so I have accessed the store
45:20 - let's say I want to use the I want to
45:22 - access the I want to access the store
45:24 - here inside the while creating the post
45:27 - so I got the store so I can
45:31 - log the
45:38 - store let's do
45:41 - that uh so we going to create a new po
45:44 - post to access the to log this store so
45:50 - let me create a new post so here I got
45:54 - the
45:54 - store
45:56 - now we're going to talk about plug-in a
45:59 - plugin is a way to decouple logic into
46:02 - smaller parts and defining reusable
46:06 - components across the
46:09 - server defining a plugin is as simple as
46:13 - defining a new Alysia
46:15 - instance let's create a new
46:19 - plug-in I'm going to create plugin
46:21 - inside the index.ts
46:24 - file
46:26 - here I'm going to define a
46:29 - plugin Define
46:32 - plug-in con
46:35 - plugin new
46:38 - Alysia let's define the state for the
46:41 - plug-in here you can Define plugin
46:43 - version let's say I'm going to use the
46:46 - one do
46:48 - get let's define the
46:51 - route I can say form
46:54 - plugin
46:57 - it's a Handler function and it's just
46:59 - returning a simple string or let's
47:02 - define a new method slash
47:05 - create this simple message hello hello
47:11 - Dev so we have created a plug-in now we
47:15 - need to register that plug-in you can
47:17 - use the use method in the application
47:20 - instance
47:21 - here so I would like to register this
47:24 - plug-in with the help of plugin you can
47:27 - uh break your code into multiple
47:32 - components now I have this is a separate
47:36 - code this is my
47:39 - application so you can also move that
47:42 - plug-in into a separate file I'll also
47:45 - show you how to do that but let's say I
47:47 - have registered that plug-in now I want
47:50 - to use that plug-in into my application
47:53 - how can you do
47:54 - that you can extract a plug-in from the
48:00 - store or you can uh use the let's let's
48:05 - get let's access the the state from the
48:09 - plug-in you can do
48:11 - that
48:13 - so where I want to I want to
48:16 - get let's
48:20 - say for in here I want to get access
48:24 - here in the tracks route
48:27 - so I would like to
48:30 - log
48:32 - the
48:34 - store and I would like to access the
48:37 - plug-in version that looks good it's
48:40 - also giving the syntax highlighting I
48:43 - have registered the plugin in the
48:44 - application and inside the plugin I have
48:47 - defined the route this
48:49 - one so I have defined the state plug-in
48:52 - version now we need to call this get
48:56 - tracks it should
48:59 - log this uh oh I got the plugin version
49:04 - here inside the store we got the plugin
49:06 - version what about these routes let's
49:09 - let me access these
49:11 - routes did the did did the application
49:14 - create these routes so I'm going to copy
49:18 - that let me paste it let me paste it
49:21 - here and I'm going to use the create
49:26 - let's do that oh my God that's amazing
49:30 - hello def I got the route what about
49:33 - this this form plugin let me access
49:40 - that oh God awesome I got the
49:44 - high so you can uh plugin also
49:48 - registered these routes so in the
49:51 - application by using the application
49:54 - instance you can use these routes these
50:03 - routes so registering a plug-in will
50:06 - combine the types between plug-in and a
50:10 - current instance and the scope of hooks
50:13 - and schema got merged as well so scope
50:16 - and the schema get merged here the store
50:19 - object is merged now you can see
50:22 - that you can also place a plugin into a
50:26 - separate file I can I can use plugin. TS
50:30 - file uh let me move the plug-in
50:34 - code
50:37 - here we need to import
50:45 - Alysia so we also need to export the
50:48 - plugin so I can use the plugin here let
50:51 - me import
50:54 - plug-in plugin that looks good so we got
50:57 - the
50:58 - plugin our application still working I
51:02 - can access these
51:04 - routes let's say I want to access GRE
51:08 - route it should give me the
51:10 - message what about fetching the tracks
51:13 - it should log the store this plug-in
51:18 - version that's powerful concept you can
51:21 - break your application into multiple
51:23 - components let's say you are building
51:25 - the Spotify clone you can
51:27 - create plugin for tracks plug-in for
51:30 - artists plugin for
51:33 - users you can divide your application
51:35 - into
51:39 - plugins
51:41 - now now I'm going to talk about how can
51:45 - you group multiple
51:47 - routes I've already implemented that
51:51 - feature you can use the app Group I have
51:56 - converted listen method into separate
52:00 - app. listen here I have created a routes
52:06 - this is a group a user group you can say
52:10 - if we need to create a new route related
52:13 - to user you can do it here let's say I
52:16 - want to define a get route user dot uh
52:21 - whatever you want to say package let's
52:24 - say that
52:26 - org get user by
52:28 - ID
52:33 - so it's going to give me the user by ID
52:38 - so now we need to test this
52:40 - [Music]
52:41 - function let's test it out we need to
52:45 - send the get
52:47 - request I can send the user and I'm
52:50 - going to provide the
52:54 - ID
52:56 - so I got the user by ID
53:01 - route you can also make versioning of
53:04 - your API just like I did here version
53:09 - one and I can I'm getting the app as an
53:13 - argument into my Handler function here
53:16 - I'm defining all of my routes let's
53:19 - define a new route for a products I can
53:23 - define a put route
53:26 - or update
53:27 - product here I can say update product by
53:32 - ID we can also
53:35 - Define delete
53:39 - route delete product by
53:41 - ID so this should be the delete
53:44 - route delete product by
53:47 - ID so this is how you can group your
53:52 - routes let's try to access the route V1
53:58 - products and the
54:01 - ID so I got the get product by ID what
54:04 - about the delete one or what about the
54:06 - update one I got update product by ID
54:10 - let's try to access delete I got the
54:13 - delete product by ID this is how you can
54:16 - group multiple routes into single route
54:20 - if you want to if you want to add the
54:23 - validation for your route
54:26 - Handler Alysia provides a models
54:30 - approach let's
54:33 - define a new route actually we have
54:36 - defined the sign in
54:39 - route this is a post route so we need to
54:43 - get the
54:45 - body for the sign in in the body a user
54:51 - need need to provide username and the
54:56 - password we are returning the complete
55:00 - body or I can say I'm returning the body
55:04 - dot
55:06 - [Music]
55:07 - username I'm returning the object
55:11 - username body dot actually return the
55:15 - complete part let's return
55:18 - that so let's send the signin request
55:22 - for the user and the signin
55:28 - here to send the body we need to select
55:30 - the Json select the raw select
55:34 - Json and you need to provide the body
55:40 - here I'm going to provide the username
55:43 - Jan
55:46 - gmail.com let's provide the
55:50 - password 1 2 3 4
55:53 - 5 so I'm getting the the username in the
55:56 - password back but how can you add the
56:00 - validation let's say if I send invalid
56:04 - field anything it will accept I don't
56:08 - want that we need to add the validations
56:11 - so in Alysia you need some you need a
56:14 - model you need to define the type of
56:17 - your body you want to
56:20 - accept let me do that
56:23 - here
56:26 - here you need to add the
56:30 - body it's asking me the
56:33 - body what is T you can get that typing
56:39 - from thisa they call the T I don't
56:44 - know this is here you can Define the
56:47 - type it's like an interface
56:50 - here and I'm defining the type for the
56:53 - body so I can say I need to define the
56:58 - type should be
57:01 - string
57:02 - [Music]
57:05 - string
57:09 - and what about the password
57:12 - field D do
57:14 - [Music]
57:21 - string that looks
57:23 - good
57:26 - now you can see it will not accept the
57:28 - invalid let's say if I add
57:34 - invalid oh I got the I got the error
57:38 - invalid
57:40 - body you got to provide the username and
57:44 - the
57:46 - password you cannot add any additional
57:50 - field just like that it's going to give
57:53 - me the error
57:57 - here we have validated the request party
57:59 - it's like a dto data transfer
58:02 - object what about the
58:05 - response for the
58:08 - response I can
58:12 - say d doob let's define the object
58:17 - type we would like to send the object or
58:21 - not the type of the username should be
58:26 - string and the type of
58:29 - password should be
58:33 - string so this is the uh dto or or
58:40 - typing for the
58:45 - response if I add now you can see that
58:50 - so in the response it will send only
58:53 - username and password
59:02 - you can also create a separate file and
59:06 - say models.
59:09 - TS and you
59:11 - can use your
59:15 - models here I'm going to copy
59:22 - that you need to get the typing
59:26 - from
59:29 - Alysia T
59:31 - from
59:35 - lysia let's store into sign in dto I
59:40 - call it data transfer
59:45 - object and we can export
59:49 - that now we can use the model dto here
59:54 - Here sign in dto call
59:58 - it sign
60:00 - in
60:04 - dto I'm also going to replace this
60:07 - response object to sign in D to
60:13 - you
60:15 - so it's going to fine it's going to
60:17 - working fine and let me add invalid
60:19 - field any field I should get the error
60:23 - so this is how you validate the request
60:30 - body so I'm returning the ID let's add
60:35 - the validation for the
60:36 - [Music]
60:40 - prams I can use the prms
60:43 - object let's define the object
60:48 - type here we need to provide the ID and
60:51 - and I'm going to use numeric type
60:57 - let's run the
61:05 - project this will convert a string into
61:08 - number
61:14 - automatically so I'm going to open the
61:17 - [Music]
61:18 - postman so we have to send this request
61:22 - V1 SL products and the
61:26 - ID we need to send the get request to V1
61:31 - product and the ID which is
61:35 - one it's going to return the one ID in
61:39 - the response if I
61:42 - provide string and it's a numeric it's
61:46 - a it's a number so it should give me the
61:52 - eror invalid pram
61:55 - ID expected Union
61:58 - value so if you
62:01 - provide a b c
62:03 - d it's going to return me the error if I
62:08 - provide the
62:10 - integer it will work so this is how you
62:13 - will apply the validation on
62:17 - parameters in this lesson I'm going to
62:19 - teach you how to build a front Ed
62:22 - application with
62:25 - one let's create a new application I'm
62:29 - going to use as a
62:31 - v white provides a lot of template for
62:34 - react View and
62:36 - angular I'm going to provide the name of
62:38 - my application I can say
62:41 - react react
62:46 - application it will ask me the framework
62:49 - I'll choose the react whatever front end
62:53 - application you want to
62:54 - create let's say I want to create with
62:59 - react uh I'm going to use typescript
63:01 - with s swc Speedy web
63:07 - compiler it it's going to create uh it
63:10 - it has set up the project for me so I
63:13 - can do that go to react B
63:16 - install install all the
63:22 - dependencies now my project has created
63:25 - so I'm going to go to my react
63:29 - app uh I have already in my react app
63:34 - let me run the
63:38 - project now I would like to run the
63:41 - project by using this command let me
63:43 - open the project in my VSS
63:52 - code so let's run the
63:56 - project you can see the project is
63:59 - running
64:00 - on Local Host colum
64:09 - 5173 if you want to run the
64:12 - v as a bun you can change a script here
64:16 - you can write bun X Das
64:20 - dasb and
64:23 - theide
64:26 - you should see the react project is
64:28 - running
64:30 - now I've also modified that script so it
64:33 - will run the white CLI as a bun not a
64:40 - nodejs now I'm going to teach you how to
64:43 - build an HTTP server using Express and
64:49 - burn so make D make directory Express
64:54 - with
64:55 - bun you can choose any
64:59 - name CD
65:02 - Express with pun go to this
65:06 - directory open the open with code
65:15 - editor I can create a server. TS
65:19 - [Music]
65:21 - file let's import Express
65:25 - I don't need to do any setting for
65:27 - typescript it will automatically run
65:30 - it let's create the
65:33 - [Music]
65:38 - application we have to set the
65:40 - port I can set the
65:44 - 8080 let's define a root
65:48 - route uh it will take request Handler
65:51 - with two arguments request and response
65:55 - so I'm going to send the
65:57 - response say hello
66:00 - world now we need to listen the
66:03 - application we need to set the
66:06 - port for app I can say
66:09 - Port here I can run a simple
66:14 - message
66:16 - listening on
66:19 - Port I have to use backtick
66:23 - here
66:26 - here we also need to replace colon to
66:30 - pactic now I can add variable which is
66:34 - Port so when you run the application you
66:38 - will get the error because we don't have
66:41 - installed burn so I can install
66:45 - burn actually we we did not install
66:48 - Express we need to add the Express
66:51 - package as a
66:53 - dependency
67:05 - it has installed Express so the error
67:08 - should be gone now now we need to run
67:11 - the project we can say burn server. we
67:15 - don't need to write node server.
67:20 - yes I didn't set any configuration for
67:23 - TI script not yes config nothing
67:29 - here app
67:31 - is listening on port
67:34 - 8080 you can verify that go to the Local
67:37 - Host colon
67:41 - 8080 now you can see the hello
67:44 - world this is how the burn is powerful
67:47 - and the fastest to build
67:52 - application

Cleaned transcript:

welcome to this bun crash course bun is a cuttingedge toolkit designed to supercharge your JavaScript and typescript applications with its Lightning Fast startup times built in support for typescript and jsx and a range of powerful features designed to seamlessly replace node.js bun promises to revolutionize your development experience whether you're looking to optimize serverless functions or enhance your workflow this course will Empower you to leverage Bun's full potential and seamlessly integrate it into your projects hder Malik developed this course he is a full stack developer and entrepreneur bun is a JavaScript runtime it's a similar or alternative of nodejs but it but it is faster than node.js you can execute JavaScript and typescript with one you can also install the packages with the help of bun it will also have provide function ality to run test cases you will have all in one toolkit you can develop test run and bundle JavaScript and typescript projects that is the definition of bun it can execute JavaScript and typescript on the server it will also compatible with nodejs package manager under the hood it's a Javas script run time it helps to run JavaScript similarly in the Chrome you can run JavaScript let's do that here I'm going to run the JavaScript I can say y a z is equal to 10 let me print Z I got the value so I can run JavaScript on the Chrome browser bun can run JavaScript on the server side bun is a new JavaScript runtime built from scratch to serve the modern JavaScript ecosystem the reasons to use burn it's faster burn starts fast and runs fast it extends JavaScript core the performance minded JS engine built for Safari it also provide the API key API for like starting an HTTP server and writing files bun is designed as a dropin replacement for node.js it natively implements hundreds of nodejs and web apis including FS path and buffer the goal of the bun is to run most of the World server side JavaScript alternative to nodejs and provide tools to improve performance reduce complexity and multiply developer productivity you can also use external nodejs packages with with bur you can also execute typescript fast fast running performance web standard apis you can also run TSX like typescript with react works with node modules no more module Madness you can also use the watch mode run test in the watch mode starting an HTTP server websocket server read and write hash password write a test this is the result they got Benn is BN took 36 seconds PNP took more seconds and npm took more seconds 36 second here and yarn is a bit slower Nots compatible crazy fast Let's test it how burn is fast this is a test result of a burn burn is also a test Runner you can also run test with the help of burn just like you did with just framework just compatible syntax crazy fast enough Theory now we're going to install the burn on our machine I have a Mac I can install the burn by using this one if you are windows you can also install burn if you are windows you can use this option I am on the Mac I'm going to install burn if you want to install specific version you can do that but I'm going to install the current version or the latest version bun was installed successfully let's check it out if I write burn Das Das help to get started you got to run this one this command now I can run bur Das D help it can recognize the command oh my God it took it took a few seconds to install the bun burn run run J JavaScript a package.json file or a script run unit test you can use this command if you want to run in a depal mode you can do this command if you want to in create an empty project you can use this one if you want to create a next GS project you can use this command if you have to install any dependency you can use burn I or add a dependency bu a or bun add remove dependency bun RM link link and npm globally you can use Link PM more commands for managing packages BN build build bundle typescript and JavaScript into a single file upgrade to the latest version you can use this command we have installed burn successfully now we're going to create a new project burn project let's create a new folder I can say in my code file in my code folder you can say burn first oh make directory burn first let's go to the burn first let's create a new project by using bun in it you can provide your package name I can use bur first entry file should be index.ts file please run that so it has also executed the file so I'm going to open the code into my visual studio code editor oh oh my God I got the node modules folder inside the node modules I got the bun types we have the package.json file TS config file so I got the node modules bun lock file I cannot see that we have the index.ts file we also have typescript configuration that's amazing you can run run the typescript with the help of burn now this project is compatible with typescript you can run any type of typescript project or any kind of nodejs project let's say I'm going to run the node file as a node let's create a new function read do or read I'm going to take I'm going to provide the text the string I'm going to provide the arrow function and it is going to return hello or return text I'm just adding a typescript I can call the message hello world and I can print the hello world here const text I got the text or I can say the message so I can print the message here by using the log you can run typescript I can use this command bun run to run the typescript project Bun Run index.ts that's amazing hello world you don't need to set up any type of if you are working with nodejs you have to set up you have to install depth dependencies of typescript you have to do some configuration you don't need to do that it is automatically compatible or already configuration conf already configured with typescript that's amazing now we're going to move forward uh I can create a web server with with the bun let's create a get repository get in it I'll push that git repository into a project get commit first commit setup burn oh I did not add that get commit DM setup and I can push that code I don't I think I did not set the repository let's set the repository I can say GitHub let's create a new repository you can find the source source code at this repository what I can do I can create a new branch I can start from here I can say setup or init I can use the init burn course I can say source code for bur YouTube source code for burn course that's it let me push my code it will create the master BR or main branch now you should see the main branch this is the entry point we have only single branch which is main which is entry point you can start uh you can start checking out this repository and start with main branch that's it let's move forward let's create a new Branch I can say web server server web server so I'm going to delete everything from index. let's create a new server we can use burn. Serve Port should be 3,000 and fetch should be there's a fetch method it will take request argument let's return the response hello world that is it it's a simple the fastest the simple way to create create a web server that's amazing I like that listening on Port HTTP Local Host colon and uh I can use back tick here listening to server I can get the port from here server. Port that's it so now we need to run the project I can run that I was running the project bur run index.ts oh it's not a bin it's a one so I got the issue template string was not now my server is running at Local Host colum 3000 I can check that from Local Host colon 3000 amazing you can see the hello world message here if I change if I change anything hello world are you learning burn but we have to set configure the automatically uh Auto reloading I didn't set that we can also configure a script for start I can say bur run index.ts that's it there is nothing new here npm or you can run burn instead of npm you don't need to install external npm I can say Burns Run start that looks good so you want to install the package you can also do that burn add I can I can add a packet fidget or F figlet I don't know bur add it's going to install the dependency let's add burn a new package you can also install the typing of the burn types and fig let oops oops oops oops fake let now let's use that package figlet I can import figlet from figlet figlet I can see the suggestion what I need to do I I need to do a little bit changing here body figet dot text sync hello hola instead of response I can provide the body in the response let's run the project so oh my God so you can add a little bit changing in the text or modify the text I am learning burn don't worry I'll figure it out how to run in the development mode project you can see I am learning burn if you want to R run the bur in a development mode or a watch mode you can add a script I can say dript burn Das dwat I have to provide my entry file which is index.ts so I can say burn def bur runev so my application is running on listening mode hello I'm learning burn from my video oh nice so I have I got that now you can see a simple video that looks good so we have created the web server let's create new routes in the server inside the fetch I can get the URL by using the new URL it's a it's a function I can get the URL I can add the logic if url. path name should be root URL then you you can return this response otherwise you can return new response and I can save 404 I can also add a new check url. path name here let's say I'm going to add a triple sign strict equal in JavaScript if we have the about about page I can say return new response about me I can rended the HTML text here about me my application is running now let's look at the root route I'll get the video if I look at the about I'll get the about me page what about the contact page if URL do path name should be I can say the contact return new response contact us let's visit the contact so I can see the contact as I can create a new Branch it should be routes adding routes and I can push that into Repository now I'm going to teach you how to handle error let's create a new route path name I'm going to create a new route which is feed and this I don't I'm not going to send any content in the response so I can return the error could not fetch feed if error comes it is going to throw the error otherwise it is going to return the response 404 if I try to fetch the invalid route I will get the 404 if I try to fetch the FED route I'll I'll get the I got the error but I want to I want to render the error in readable format I don't want to break the complete application you can do that here there is an error method it is going to take the error argument here I can return the response so let me render the HTML here PR and we have to provide the error and you can also render or log the eror tag I'm going to log the eror Stag let me close the pre tag so we are rendering the HTML we have to set the header for HTML let me set the content type let me set it as an HTML whenever you call this throw method it is going to call the error method if error comes it is going to call the error function this one so I got the error could not feed error this is the complete error message and in the new line it is going to print the error stack error could not error could not find could not fetch the feed in this video I'm going to teach you how to stream a file in bun let's create a new file you can use any name here I'm going to create txt file let's call it g. txt hello guys hello bun developer so now we need to read this file in the index.ts file let's create a new route URL dot path name should be create then we need to read this file I can say new response 1. file we need to provide the path of the file in our case gr. txt let's look at I'm going to access the gr route the path does not exist oh I forgot to add this back slash now hello burn developer uh we have learned the basics of burn now I'm going to teach you how can we build a restful apis uh we have used if you have worked with nodejs I'm sure you used expressjs framework to build rest apis uh if you want to build rest API in bun you can use a framework it's built on the top of BUN and you can use the typescript typescript supported supercharge by bun so it provides a framework you can see it's a faster than all of these framework fast fastify Kaa Express in the nest that is amazing so 18x faster than Express let's look at so we have to install the app let we I've already installed bun let's create a new project I'm in the my project folder if you want to do in in terminal you can also do that but I have open the vs code burn create Alysia and Alysia and I'm going to call it my application you can use bndr API awesome it's going to create a rest API let me go to the CD uh to my rest API and I can open that project into my vs code editor I'm going to close the previous code editor now you can see the index.ts file we have bulog package.json file and we have TS config they have already created a Dev script to run the project in development mode and I can see new Alysia doget we have a root route this is how you can create a new server that's amazing so let's run the project burn run oops awesome we have created a new server like in Express awesome hello Alisia I can change that hello Bund I'm going to build restful API so it has it is listening on the port 3000 so here I have mentioned the host and the port server Port Lisa is running at local host and here is our Port let's look at hello Dev Bev I'm going to build restful apis this is amazing now we're going to talk about routing in Alicia Alysia we have already created the get route we can create a route by using the chaining let's create a new route I'm going to create the get route this time I would like to add the V or path parameter let's say post and I get the ID so I can get the prams here I can use the destructuring here this is a request Handler and it is going to destructure the prams and I would like to extract the ID here I can return anything let's say if I want to return the ID I can do that one run Dev so I would like to test this route let's try to access the route Local Host column 3000 SL post ID I would like to provide the ID which is one here so I'm returning the Json object and here I got the ID you can also do that let's say it's an ID and I can return the title learn burn so now you will get title and the ID I also want to talk about let's complete that get route or here I can say route so we have created the get route now let's define the post route or delete route you can also do that let's say I post and it's going to get the request body so I'm going to use the call back function it's going to give me the body let's return something here so we need to perform the post request I'm going to use the postman if you don't have a postman you can install this software we're going to use this software to test the API I have to send the post request Local Host call in 3000 and/ poost let's provide the body you can provide the body by going to the raw and Json ID one title should be Lear note so I got request PA post I don't get the body we'll talk more about how will you get the party so let's create another route this time I can say track everything like when you send request track SL1 SL track SL anything it's going to call this method let me show you the demo return track route Let's test it out I can send the request I have to send the get request so I'm going to send the get request I don't need to provide the party for the get request track slash2 I'll get the track rout if I say track slash to/ learn I got the track route whatever you send after this track matching it's going to call this method track route so we did not talk about the context object here we are uh we are getting the prems from the context object this should be the context so here I'm going to return the context let's add a new out so I can send the post post out let's provide some body ID or title should be learn anything so I got the context here I got the context so context has request property request object it's a raw request for accessing data as a FB standard type so party which come with request but I don't I'm not getting any body here we will I will you will also get the query prems store which is a global store is a uh store is a global mutable store for Alicia instance you will also get the set response representation I get the status code and the header what about here if I try to get the body Lia Lysa follow you use the destructuring pattern if I do that let's send the request that looks good I got the body when I was not using the destructuring I was using this one context I'm returning the context in the response I was not getting the body request body so if you have worked with Express you have to use a Json middleware you don't need to use Json middleware here I can destructure the body and I can return the body that's it so now I got the party let's say description learning pun from course so I got description and the title you can also get the set property set if you want to set these status code you can also do that let's say it's returning a body it's returning an object and inside the function let me do that here I'm going to set set do status code let's say if I set the for 43 it's going to return the 403 status code you can see the 403 Forbidden but I want to I want to have 2011 let's say a record created successfully now I got 2011 that looks good if you want to return the array Json array you have to stringify that let's create a new route I can say tracks so what I want to do I want to return a new response here I want to send the Json array so have we have to stringify I can say songs or tracks let's provide a tracks can say dancing feed here I can say whatever song name let's try to fetch all the tracks I can send the get request let's send the tracks to fetch all the tracks so I got this one tracks but we did not set the header for the this response type that's why we are not seeing adjacent response so we have to set the headers here we have to provide the header content type it should be application sljs now you can see that I can see adjacent response back here I got the tracks I have all of these tracks one more thing I would like to mention if you don't want to use json. stringify Alysia will convert that for you if you return the simple let me comment that if you comment that and if you return a simple array Alysia will do that for you it's I'm going to return the array so that's it so we have to return the object here I can say tracks and we can close the object let's send now I got the same response let's add a new new song so I got a new song here now we're going to talk about how to build a state edit now we're going to talk about if you want to extend the Handler function you can also do that this is this is useful when you need to access extra values in a Handler like database connection or any variable or any variable you need uh I can set the state here here I can call the state let me Define the state I can say version one or you can provide any value here so I can also add a decorate it's additional properties let's say you want to map any value or you can say get dat it's a function it's going it's going to return the date current date and you can destructure the value here in your Handler function let's say I want to use the date and the state here I can access the store and I can access the get dat function you can see that uh now I can use that I can log the state let me log the store and I can log the I can call the get dat function or you can call get dat dat it's returning the date so all I need is to call all I need to use the get dat let's try to run the project my application is running so we have to fetch all the tracks I'm going to send the get request so I got all of these tracks in here you can see the version and this is a function so it's returning dat do now is returning a function so we have we got to call that function let's do that I'm going to call this function let's use it and I got the exact let's use let's add more values so if you want to add a multiple Properties or you can add the object here here a let's say uh ID should be one or whatever variable you want to store here email should be let's provide the email Jan gmail.com so I have accessed the store let's say I want to use the I want to access the I want to access the store here inside the while creating the post so I got the store so I can log the store let's do that uh so we going to create a new po post to access the to log this store so let me create a new post so here I got the store now we're going to talk about plugin a plugin is a way to decouple logic into smaller parts and defining reusable components across the server defining a plugin is as simple as defining a new Alysia instance let's create a new plugin I'm going to create plugin inside the index.ts file here I'm going to define a plugin Define plugin con plugin new Alysia let's define the state for the plugin here you can Define plugin version let's say I'm going to use the one do get let's define the route I can say form plugin it's a Handler function and it's just returning a simple string or let's define a new method slash create this simple message hello hello Dev so we have created a plugin now we need to register that plugin you can use the use method in the application instance here so I would like to register this plugin with the help of plugin you can uh break your code into multiple components now I have this is a separate code this is my application so you can also move that plugin into a separate file I'll also show you how to do that but let's say I have registered that plugin now I want to use that plugin into my application how can you do that you can extract a plugin from the store or you can uh use the let's let's get let's access the the state from the plugin you can do that so where I want to I want to get let's say for in here I want to get access here in the tracks route so I would like to log the store and I would like to access the plugin version that looks good it's also giving the syntax highlighting I have registered the plugin in the application and inside the plugin I have defined the route this one so I have defined the state plugin version now we need to call this get tracks it should log this uh oh I got the plugin version here inside the store we got the plugin version what about these routes let's let me access these routes did the did did the application create these routes so I'm going to copy that let me paste it let me paste it here and I'm going to use the create let's do that oh my God that's amazing hello def I got the route what about this this form plugin let me access that oh God awesome I got the high so you can uh plugin also registered these routes so in the application by using the application instance you can use these routes these routes so registering a plugin will combine the types between plugin and a current instance and the scope of hooks and schema got merged as well so scope and the schema get merged here the store object is merged now you can see that you can also place a plugin into a separate file I can I can use plugin. TS file uh let me move the plugin code here we need to import Alysia so we also need to export the plugin so I can use the plugin here let me import plugin plugin that looks good so we got the plugin our application still working I can access these routes let's say I want to access GRE route it should give me the message what about fetching the tracks it should log the store this plugin version that's powerful concept you can break your application into multiple components let's say you are building the Spotify clone you can create plugin for tracks plugin for artists plugin for users you can divide your application into plugins now now I'm going to talk about how can you group multiple routes I've already implemented that feature you can use the app Group I have converted listen method into separate app. listen here I have created a routes this is a group a user group you can say if we need to create a new route related to user you can do it here let's say I want to define a get route user dot uh whatever you want to say package let's say that org get user by ID so it's going to give me the user by ID so now we need to test this function let's test it out we need to send the get request I can send the user and I'm going to provide the ID so I got the user by ID route you can also make versioning of your API just like I did here version one and I can I'm getting the app as an argument into my Handler function here I'm defining all of my routes let's define a new route for a products I can define a put route or update product here I can say update product by ID we can also Define delete route delete product by ID so this should be the delete route delete product by ID so this is how you can group your routes let's try to access the route V1 products and the ID so I got the get product by ID what about the delete one or what about the update one I got update product by ID let's try to access delete I got the delete product by ID this is how you can group multiple routes into single route if you want to if you want to add the validation for your route Handler Alysia provides a models approach let's define a new route actually we have defined the sign in route this is a post route so we need to get the body for the sign in in the body a user need need to provide username and the password we are returning the complete body or I can say I'm returning the body dot username I'm returning the object username body dot actually return the complete part let's return that so let's send the signin request for the user and the signin here to send the body we need to select the Json select the raw select Json and you need to provide the body here I'm going to provide the username Jan gmail.com let's provide the password 1 2 3 4 5 so I'm getting the the username in the password back but how can you add the validation let's say if I send invalid field anything it will accept I don't want that we need to add the validations so in Alysia you need some you need a model you need to define the type of your body you want to accept let me do that here here you need to add the body it's asking me the body what is T you can get that typing from thisa they call the T I don't know this is here you can Define the type it's like an interface here and I'm defining the type for the body so I can say I need to define the type should be string string and what about the password field D do string that looks good now you can see it will not accept the invalid let's say if I add invalid oh I got the I got the error invalid body you got to provide the username and the password you cannot add any additional field just like that it's going to give me the error here we have validated the request party it's like a dto data transfer object what about the response for the response I can say d doob let's define the object type we would like to send the object or not the type of the username should be string and the type of password should be string so this is the uh dto or or typing for the response if I add now you can see that so in the response it will send only username and password you can also create a separate file and say models. TS and you can use your models here I'm going to copy that you need to get the typing from Alysia T from lysia let's store into sign in dto I call it data transfer object and we can export that now we can use the model dto here Here sign in dto call it sign in dto I'm also going to replace this response object to sign in D to you so it's going to fine it's going to working fine and let me add invalid field any field I should get the error so this is how you validate the request body so I'm returning the ID let's add the validation for the prams I can use the prms object let's define the object type here we need to provide the ID and and I'm going to use numeric type let's run the project this will convert a string into number automatically so I'm going to open the postman so we have to send this request V1 SL products and the ID we need to send the get request to V1 product and the ID which is one it's going to return the one ID in the response if I provide string and it's a numeric it's a it's a number so it should give me the eror invalid pram ID expected Union value so if you provide a b c d it's going to return me the error if I provide the integer it will work so this is how you will apply the validation on parameters in this lesson I'm going to teach you how to build a front Ed application with one let's create a new application I'm going to use as a v white provides a lot of template for react View and angular I'm going to provide the name of my application I can say react react application it will ask me the framework I'll choose the react whatever front end application you want to create let's say I want to create with react uh I'm going to use typescript with s swc Speedy web compiler it it's going to create uh it it has set up the project for me so I can do that go to react B install install all the dependencies now my project has created so I'm going to go to my react app uh I have already in my react app let me run the project now I would like to run the project by using this command let me open the project in my VSS code so let's run the project you can see the project is running on Local Host colum 5173 if you want to run the v as a bun you can change a script here you can write bun X Das dasb and theide you should see the react project is running now I've also modified that script so it will run the white CLI as a bun not a nodejs now I'm going to teach you how to build an HTTP server using Express and burn so make D make directory Express with bun you can choose any name CD Express with pun go to this directory open the open with code editor I can create a server. TS file let's import Express I don't need to do any setting for typescript it will automatically run it let's create the application we have to set the port I can set the 8080 let's define a root route uh it will take request Handler with two arguments request and response so I'm going to send the response say hello world now we need to listen the application we need to set the port for app I can say Port here I can run a simple message listening on Port I have to use backtick here here we also need to replace colon to pactic now I can add variable which is Port so when you run the application you will get the error because we don't have installed burn so I can install burn actually we we did not install Express we need to add the Express package as a dependency it has installed Express so the error should be gone now now we need to run the project we can say burn server. we don't need to write node server. yes I didn't set any configuration for TI script not yes config nothing here app is listening on port 8080 you can verify that go to the Local Host colon 8080 now you can see the hello world this is how the burn is powerful and the fastest to build application
