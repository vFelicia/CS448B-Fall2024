With timestamps:

00:00 - [Applause]
00:02 - hello everyone thank you for having me
00:04 - in this beautiful city of edinburgh um
00:06 - so whether you're no matter what you're
00:08 - building with python whether it's web
00:10 - applications simple scripts or even
00:12 - machine learning models your choice of
00:13 - editor is one of the most important
00:15 - decisions you can make for your personal
00:16 - productivity and today developers are
00:19 - choosing visual studio code as the
00:21 - number one choice on the most recent
00:24 - stack overflow developer survey
00:26 - and
00:27 - for a variety of reasons because it's
00:28 - fast it's lightweight it's free it's
00:30 - cross-platform and has great support for
00:32 - multiple languages so i'm the program
00:34 - manager for our python developer tools
00:36 - at microsoft and i'm here to talk to you
00:38 - about how you can make the most out of
00:40 - using visual studio code for python
00:42 - no matter if you've used it already for
00:44 - python used it for other languages or
00:46 - never even heard of it before i
00:48 - guarantee you'll learn something useful
00:49 - in today's session
00:51 - so first of all for those of you who are
00:53 - new to vs code what is vs code so it is
00:56 - a free cross-platform and open source
00:59 - code editor from microsoft it's fast and
01:02 - it's lightweight you can just open any
01:03 - folder and start working with various
01:05 - files it has a very rich extension
01:07 - ecosystem provided by the community i'm
01:09 - partially because it's actually one of
01:10 - the largest open source projects on
01:12 - github there's a very active community
01:14 - it's got very it's got very good
01:16 - built-in support for javascript and
01:18 - typescript including rich features like
01:20 - intellisense debugging and source
01:22 - control among other things
01:24 - and i mentioned the rich extension
01:26 - ecosystem uh the part that my team
01:28 - builds is the python extension and with
01:30 - the python extension you get those same
01:32 - rich capabilities for python so with the
01:34 - python extension you get intellisense
01:36 - debugging linting testing and
01:38 - refactoring
01:39 - and because of the work that we're doing
01:41 - python is actually the fastest growing
01:43 - language in visual studio code and it's
01:45 - the most popular extension for visual
01:47 - studio code on the vs code marketplace
01:50 - this extension is fully open source and
01:51 - was actually originally created by a
01:53 - member of our community uh don j amani
01:55 - from australia who's sitting here in the
01:56 - front row
01:58 - give a wave to everyone don thank you
02:04 - so we love the work that don was doing
02:06 - and we hired him on and put a full team
02:08 - on the python extension we first publish
02:10 - it as microsoft in november and we've
02:13 - been putting out a new release with
02:14 - updated features and better capabilities
02:16 - every single month since then
02:19 - and so i want to call out a few other
02:20 - key extensions that i want to make you
02:22 - aware of before i dive in
02:24 - if you're coming from other code editors
02:26 - i hear a lot of people struggle to
02:27 - change their keyboard shortcuts so there
02:30 - are great keyboard binding shortcuts for
02:32 - vim sublime text
02:34 - emacs and the intellij suite of products
02:37 - so if you're using other editors you can
02:40 - install those extensions to make the
02:41 - transition easier
02:43 - and specifically for python developers
02:46 - there's extensions that add django
02:48 - template syntax and django snippets as
02:50 - well as jinja template syntax and flask
02:53 - snippets i'm not going to show these
02:54 - today but i just wanted to call them out
02:56 - before we dive in
02:57 - so for the rest of the talk i'm going to
02:59 - do a whirlwind tour of the python
03:02 - extension and python development and vs
03:04 - code we're going to start with the
03:06 - essentials setting it up selecting your
03:08 - python interpreter adding and running
03:09 - code and configuring things like linting
03:12 - and refactoring then we'll go into some
03:13 - more powerful features like debugging
03:15 - unit testing
03:16 - tasks and using docker extensions
03:20 - and then some preview capabilities that
03:22 - you can try out today
03:24 - including intellicode which we just
03:26 - launched here at the euro python
03:27 - conference visual studio liveshare and
03:30 - the new python language server that
03:32 - that we released last week
03:34 - so without further ado let's go ahead
03:36 - and dive in and start looking with the
03:38 - essentials of visual studio code so if
03:41 - you want to get started with visual
03:42 - studio code simply go to
03:43 - code.visualstudio.com
03:45 - and click on the bright green download
03:48 - square you can hit that and one thing
03:51 - while it downloads it's a very quick
03:52 - download
03:54 - you get taken right to the getting
03:56 - started documentation this is great
03:58 - documentation i definitely recommend
03:59 - reading it and for python developers you
04:01 - want to move your mouse over to that
04:03 - little python link over there and click
04:04 - on the python tutorial which this python
04:07 - tutorial takes you through all the
04:08 - basics of getting set up so if you're
04:10 - very new to it i definitely recommend
04:12 - going through that tutorial
04:14 - you'll learn all the basic features that
04:15 - you need to get going
04:17 - so after you download visual studio code
04:20 - you'll be taken to a welcome screen that
04:22 - looks something like this and as i
04:24 - mentioned before you need to install the
04:25 - python extension luckily we've made that
04:28 - easy we've got the python link which is
04:31 - right there and you can just simply
04:33 - click on that to install the python
04:34 - extension and it will download and
04:37 - reload after you click ok
04:39 - if you don't like bright blue links you
04:42 - can also go to the extensions tab in
04:44 - visual studio code
04:45 - where you can search for python and you
04:48 - can go to the python extension
04:50 - right there and install it another quick
04:52 - thing to call out about this page here
04:54 - is that we've got a really good quick
04:56 - start
04:57 - set of steps for getting started
05:00 - and then at the bottom that is a link to
05:02 - our python tutorial if you're not sure
05:04 - where to find it it's right there built
05:05 - in
05:07 - okay so one of the first things i like
05:09 - to do after installing visual studio
05:11 - code is to put
05:13 - vs code on the path so that i can load
05:16 - it from the command line this happens
05:17 - automatically if you install it on
05:19 - windows but if you're on mac or linux
05:21 - you need to run a command now to run a
05:22 - command with visual studio code you
05:24 - press command shift p or control shift p
05:27 - to bring up the command palette where
05:29 - you have all the commands available to
05:30 - you in vs code in our case we want to
05:34 - type shell and
05:35 - run the install code command in path
05:39 - that will allow us to open vs code from
05:41 - the command line
05:44 - which i'll show now
05:45 - so let's create a basic application here
05:48 - with vs code
05:51 - to do this i usually start by from the
05:53 - command line creating a new folder
05:55 - i will call it make door new app and
05:57 - then we'll go into that folder
05:59 - and then because i put it on the command
06:01 - line i can just type code dot
06:03 - and that will open up vs code in this
06:05 - folder now you don't need to do that you
06:07 - can also just click the open folder
06:09 - button here or do file open folder but i
06:10 - find it very convenient to launch it
06:12 - from the command line
06:14 - so building our first
06:16 - app here i like to just click the new
06:18 - file button and we'll call this hello.py
06:21 - press enter it immediately gets
06:23 - recognized as a python file
06:26 - you can tell that when you see the
06:27 - python interpreter listed in the bottom
06:29 - left-hand corner quick tip you can click
06:31 - on that interpreter to change to python
06:33 - 3 or anaconda or any other interpreter
06:35 - that you have installed
06:36 - so we can select that interpreter there
06:39 - and we can say print
06:41 - hello
06:42 - euro python
06:44 - and
06:45 - command s to save and then to run this
06:48 - we can simply right click and say run
06:50 - the python file in the terminal and then
06:52 - the built-in terminal will pop up and
06:54 - run that file
06:56 - so that was a quick tour of getting
06:58 - started just to recap we downloaded from
07:00 - code.visualstudio.com
07:02 - we added code to the path installed the
07:04 - python extension created the file and
07:06 - ran it in the terminal
07:09 - now let's do a little bit more scripting
07:10 - with python
07:14 - and
07:14 - i mentioned the stack overflow developer
07:16 - survey earlier so one of the things that
07:17 - i like to do as a demo is actually
07:20 - download the stack overflow survey data
07:22 - and play with it
07:24 - to
07:25 - poke around in some of the results
07:29 - so i'm going to create a new file called
07:30 - stack overflow.py
07:34 - and to use the stack overflow survey i'm
07:36 - going to use the requests library to
07:38 - download the stack overflow survey and
07:41 - so i need to install that but instead of
07:42 - installing that in my global python
07:44 - interpreter i'm going to create a
07:46 - virtual environment
07:48 - this is
07:48 - some people get scared by virtual
07:50 - environments it's a it's a simple and
07:51 - useful concept it basically creates a
07:54 - local copy of the python interpreter
07:56 - that's local to your application so i
07:57 - can install packages without affecting
07:59 - the other applications that i have
08:00 - installed on my machine
08:02 - so
08:03 - i'll use the built-in terminal here
08:06 - and i'll run python3
08:09 - dash m
08:10 - m and that will invoke the vn module to
08:13 - create a virtual environment and i'll
08:15 - pass it the argument end which will put
08:17 - that into a folder name env so python 3
08:20 - just guarantees that i run
08:22 - python 3 if there's multiple python
08:23 - inversions installed which there are and
08:25 - you can see that virtual environment was
08:27 - created here in the vs code
08:30 - file explorer i can see that this is
08:32 - simply just
08:33 - sim links to the python interpreter and
08:36 - a local copy of the site packages folder
08:39 - that i have here
08:40 - so i can activate this environment by
08:42 - typing source
08:43 - and
08:45 - bin
08:46 - activate
08:48 - that will activate that virtual
08:49 - environment for me now if i say which
08:52 - python 3 you'll see that when i run
08:54 - python it runs out of this
08:57 - this local copy in this folder here
09:00 - you don't need to activate the virtual
09:01 - environment with vs code you can
09:02 - actually have vs code activate it for
09:04 - you
09:06 - but first i need to reload vs code with
09:07 - command shift p
09:09 - i'll select reload window just so it
09:10 - picks up that new environment that i've
09:12 - put in this folder
09:13 - and so now when i click on this
09:15 - interpreter in the bottom left-hand
09:16 - corner
09:17 - that virtual environment will be
09:19 - available
09:20 - from this virtual environment list
09:22 - so i select that vm there
09:25 - this time i'm going to
09:27 - pay attention to this pylint
09:28 - installation warning here so i'll
09:30 - install
09:31 - linting tools there
09:33 - so after i've activated that virtual
09:35 - environment now vs code uses this
09:37 - interpreter for all the commands it runs
09:38 - so it installed pylint into this virtual
09:41 - environment
09:42 - if you want to create a terminal that
09:44 - has this environment activated you run
09:46 - command shift p and say python
09:49 - create terminal
09:51 - and so that will activate that
09:53 - interpreter automatically so again if i
09:55 - say which python is running out of that
09:56 - folder so now i can pip install the
09:59 - requests library from this command line
10:02 - there
10:03 - and so now i can start using it in code
10:06 - so to do that we'll type import requests
10:10 - now i mentioned i want to
10:12 - download the survey so i'll create a new
10:14 - request and say requests.get
10:18 - and i need the survey url
10:21 - so i'll go to the
10:23 - website where they've published all
10:24 - these results these are fascinating data
10:26 - sets to look at by the way they have all
10:28 - sorts of interesting insights
10:30 - into what developers are doing
10:32 - and so we paste that
10:34 - url and then we say with
10:37 - uh open
10:39 - we'll save that into a zip file called
10:41 - survey2017.zip
10:43 - we'll open this as a writable file as
10:46 - file
10:48 - and we'll say file.right you notice i
10:50 - get this intellisense as i'm typing
10:52 - here in code
10:53 - request dot
10:56 - content
11:00 - and we'll go ahead and right click and
11:02 - run this piece of code in the terminal
11:04 - again this time it runs with the virtual
11:06 - environment that we have selected in the
11:07 - bottom left-hand corner
11:09 - and it will download this as a zip file
11:12 - into my local folder
11:14 - great now i want to unpack this zip file
11:17 - and and i'm going to write a bunch of
11:18 - code that takes the csv file out of this
11:20 - zip file so i can start using it
11:23 - but instead of making you watch me type
11:24 - everything here they've advised us
11:26 - against doing too much live coding here
11:28 - at the conference i'm going to use a
11:30 - feature called snippets in vs code so
11:32 - i've predefined a bunch of snippets that
11:34 - i have and i have one called so extract
11:37 - and when i
11:38 - and it's available in my snippets list
11:41 - and when i press enter that
11:43 - inserts that code snippet for me and it
11:45 - pre-selects
11:46 - this survey 2017 field here which i've
11:49 - defined as a parameter to the snippet so
11:51 - i can say my
11:52 - survey
11:53 - and i can make that i can make that a
11:55 - customizable
11:56 - snippet that i can type and if there's
11:57 - multiple of those you can tab between
11:59 - all of them
12:01 - so now
12:02 - i want to run just this piece of code
12:04 - here that i've typed into vs code
12:06 - i don't want to run the first part so i
12:08 - don't run the whole file so i can run
12:10 - this just the selected piece by right
12:13 - clicking and saying run selection or
12:15 - line in python terminal or i can just
12:17 - press shift enter which will activate
12:19 - that python interpreter
12:21 - paste it into the command and you see
12:23 - that zip file was replaced with the csv
12:26 - file containing the survey results
12:30 - another cool thing you can do with
12:32 - snippets is you can put variables in
12:33 - there so i have a to do snippet that
12:35 - when i type to do it puts the current
12:37 - date and i can leave a message for
12:39 - myself that says
12:40 - refactor this code
12:43 - and just a quick look at how you
12:44 - actually edit snippets to go edit
12:47 - snippets you go file
12:49 - or
12:50 - on windows it's file but here it's code
12:52 - preferences user snippets
12:54 - uh we select the python snippets
12:56 - and uh here's where we've defined that
12:58 - extract file snippets it was very easy
13:00 - to put a variable in you put just this
13:03 - dollar sign zero and this provides the
13:04 - default value
13:07 - so one final thing to wrap this up i
13:09 - left a to do here to refactor this code
13:11 - so let's go ahead and do that so i will
13:13 - select this whole block of code right
13:15 - click and say extract method
13:18 - it's going to prompt me to install the
13:21 - rope library
13:26 - and i'll select yes so that
13:28 - we use the rope package for refactoring
13:31 - so i'll right click again after that's
13:33 - installed and say
13:34 - extract method
13:36 - define the method name as download
13:38 - underscore survey
13:40 - and there we go it's done that
13:42 - refactoring
13:45 - so just a quick recap we selected our
13:47 - interpreter we ran the file in a
13:49 - terminal oh i missed linting here so i i
13:52 - have pilot turned on by default but you
13:54 - notice there's not very many warnings
13:56 - inside of this piece of code that's
13:58 - because we have a default set of linter
14:00 - rules it's very non-aggressive the
14:02 - default pilot warnings can contain a lot
14:05 - of style information so if you want to
14:07 - customize your code style for your team
14:09 - one cool thing you can do is just check
14:11 - in a pilot rc file
14:14 - so simply by having the presence of a
14:16 - pilintrc file we throw away our default
14:19 - pilot rules um here
14:22 - so if i go back and un
14:24 - untap this you'll see it'll give me some
14:27 - warnings here doesn't like the names of
14:29 - my variables and all sorts of stuff like
14:30 - that
14:31 - if i want to customize those warnings i
14:33 - can just put a block in the pilot rc
14:35 - file that says messages control and just
14:38 - a quick tip on how to do this it's very
14:40 - difficult to find the syntax for this
14:42 - online but you put disable equals all
14:45 - and then say enable equals just the
14:47 - categories so you can say warnings
14:49 - convention or errors
14:51 - in this case i just want errors and you
14:53 - can put individual pilot codes which you
14:55 - can look up online there so if i go back
14:57 - to the file and now it just gives me the
14:59 - error and it's telling me that this
15:01 - download survey
15:03 - method is undefined
15:06 - great
15:07 - so there's some information on using
15:08 - virtual environments very useful another
15:10 - thing you can do with virtual
15:11 - environments is uh you can a lot of
15:13 - people check in a requirements.txt file
15:16 - into their repo so this is a lot enables
15:18 - you to easily package up the
15:19 - dependencies that your python code has
15:22 - so you can pip install dashr a
15:23 - requirements.txt file and you can
15:25 - generate one of those files using the
15:27 - pip freeze command
15:29 - and that puts the currently installed
15:30 - packages into that file and when you're
15:32 - done you can type deactivate from
15:34 - the terminal we also have support for pi
15:36 - end pip and conda environments in vs
15:38 - code codes if you're using those
15:41 - we support those as well and they'll
15:42 - just show up in that interpreter list
15:44 - that i brought up earlier
15:47 - all right so let's jump into a few more
15:49 - powerful features of vs code and for
15:52 - this i'm going to go through debugging
15:53 - unit testing and some tasks and a few
15:55 - keyboard shortcuts
15:58 - so
15:59 - i've got this csv file i actually want
16:01 - to analyze some of the data in the csv
16:03 - file i'm going to
16:05 - jump to some code where i've actually
16:07 - pulled out and some of the information
16:09 - and done some analysis
16:12 - so
16:13 - i've got this in a folder called hello
16:15 - stack overflow and just like i did
16:17 - before i'll
16:19 - change to that folder and type code dot
16:21 - to open it up you'll see that the folder
16:24 - comes right up
16:25 - and i've got
16:27 - all my python files here so
16:30 - just some quick keyboard shortcut tips
16:33 - i press command p that allows me to
16:35 - quickly switch between all the files in
16:37 - my current workspace i can switch to the
16:40 - stackoverflow.py file
16:42 - by the way if you press alt and press
16:44 - enter it'll actually open one of those
16:46 - files in the right-hand vertical tab
16:48 - window so that's a neat tip if you want
16:50 - to quickly peek into another file
16:53 - you can also do that just by clicking
16:54 - this button here another tip here if you
16:56 - want to split your editor vertically is
16:58 - you press the alt key and it changes
17:00 - that little icon from a horizontal split
17:02 - to a vertical split so i can split the
17:04 - editor
17:04 - vertically there and we can go on so on
17:07 - and so forth in a recursive manner
17:09 - another quick tip if you want to open
17:11 - the terminal it's control back tick
17:14 - that will open that terminal up and you
17:16 - can also split the terminals so you can
17:17 - split the terminal right
17:19 - so if you want to
17:20 - do something like have the
17:22 - zen of python up on your screen down in
17:25 - the terminal you can have a dedicated
17:26 - terminal window for that although in the
17:28 - lightning talk on wednesday they advised
17:30 - against reading the python zen of python
17:33 - too seriously
17:34 - you can also put your terminal on the
17:35 - right hand side of your windows if you
17:37 - want
17:38 - which works better if you're not
17:39 - projecting at a conference
17:41 - but it's i find that very useful on
17:44 - larger monitors
17:46 - okay so let's get back to um our
17:49 - previous configuration
17:52 - i seem to have got myself into a bind
17:54 - here with these terminal windows
17:57 - there we let's just close everything
18:02 - put that back on the bottom
18:04 - okay
18:07 - so some other shortcuts here
18:10 - command shift o lets me open various
18:12 - symbols that i have in the workspace so
18:14 - you can see as i'm going through this
18:16 - list i can look at the different methods
18:17 - that i have
18:18 - so i've basically refactored my
18:21 - previous code example to download all
18:23 - years of the stack overflow developer
18:25 - surveys back to 2011.
18:27 - there's a method here which does some
18:30 - analysis of those stack overflow surveys
18:32 - called download survey
18:34 - um so i can press enter to look at that
18:36 - you can also command click on a method
18:38 - if you want to go to definition on a
18:40 - method so for example if i want to look
18:42 - at the requests.get implementation i can
18:44 - command click and that will
18:46 - that will open that
18:48 - file directly there
18:52 - and
18:55 - another quick tip is you can right click
18:57 - and say peak definition if you want to
18:59 - quickly look at the definition of that
19:00 - method in line
19:03 - okay so aside from just reading the code
19:05 - let's actually debug this and step
19:06 - through and see how it works so to use
19:08 - the debugger it's actually very simple
19:10 - you just click in the gutter and select
19:13 - put a break point there that will have
19:16 - vs code stop on this line when we start
19:17 - the debugger
19:19 - and go to the debug tab and press the
19:22 - bright green play button
19:24 - another keyboard shortcut for play is
19:27 - just
19:28 - f5 so i can press
19:30 - f5 here and it will actually let me pick
19:32 - my choice of debuggers this is because
19:34 - we have the next version over debugger
19:36 - available as an experimental version
19:38 - it's much faster it's based on an open
19:40 - source debug engine called pi dev d
19:42 - and so this is going to become the
19:43 - default soon so let's go ahead and use
19:45 - that python experimental version
19:47 - and we'll run and we'll stop at that
19:49 - break point right so this just debugs
19:52 - the current file whatever python file
19:53 - i'm at if i want to debug it just press
19:55 - f5
19:56 - so now that i'm stopped at this break
19:58 - point i can see the variables in the
19:59 - left-hand side of the window here
20:02 - i can see the year and various things
20:03 - like that
20:06 - and
20:09 - this analyzes uh one year one year of
20:11 - survey for every iteration of this for
20:13 - loop so if i want to run one iteration
20:15 - of this for loop i can click the play
20:17 - button here the continue button or f5
20:20 - that will run and that will stop after
20:21 - it's downloaded one year of the stack
20:23 - overflow developer surveys
20:28 - so if we want to actually look at how
20:29 - this code works we can use the step into
20:31 - button
20:32 - or f11 so we can step into that code
20:35 - uh here
20:36 - and we can press step over to run over
20:39 - at one line at a time
20:41 - so that line downloaded the survey and
20:44 - then we actually
20:45 - here on this line we crack open the
20:47 - survey csv file we load it into a pandas
20:50 - data frame using a pandas library which
20:52 - if you're not familiar is a very popular
20:54 - library for data analysis and data
20:56 - frames
20:57 - so we step over that
20:59 - line we load the
21:00 - survey and if we actually look at
21:04 - some of the columns that are in this csv
21:06 - file
21:07 - we can type an expression into the watch
21:08 - window for example like data.columns
21:13 - if you look at this it contains a lot of
21:14 - internal information from panda's data
21:16 - frames so if we want we can customize
21:20 - this expression here and say list data
21:22 - dot columns so we can just cast it into
21:24 - a list to get rid of all the
21:26 - other items
21:27 - and then we just get a list of columns
21:28 - that are inside of this data frame this
21:30 - is a little bit
21:32 - this is not the best window to view this
21:34 - information so i'm going to switch over
21:36 - to the debug console
21:38 - here by clicking this dot dot go to the
21:40 - debug console i can also type
21:42 - expressions in here so if i type list
21:44 - data.columns
21:46 - i can
21:48 - view that here in the output window and
21:50 - i can see all of the questions that were
21:52 - present on the stack overflow survey for
21:54 - this year you can see the one we're
21:56 - interested in is the which languages are
21:58 - you proficient in which are people
22:00 - telling us which programming languages
22:02 - that they use
22:04 - and so as we step through our code we
22:06 - want to extract just this question plus
22:07 - the related columns that come after it
22:10 - so we can step over this one line at a
22:12 - time um and we're just iterating through
22:14 - all the columns in the list until we
22:16 - find the right question i don't want to
22:18 - sit here and step through all the items
22:20 - in the for loop so i'm going to skip
22:21 - past all of this
22:23 - by using a
22:25 - run to cursor uh function so i could set
22:27 - a breakpoint down here and run to that
22:28 - break point but i can also right click
22:30 - and say run to cursor which is kind of
22:32 - like a one time break point as soon as
22:34 - you hit it the breakpoint disappears if
22:36 - you actually looked closely you'd see a
22:37 - break point briefly appeared there
22:39 - in the editor so that skips all of that
22:42 - looping and now we can again look at
22:46 - the
22:47 - languages.columns
22:48 - basically what we did was we extracted
22:50 - the languages into a languages data
22:52 - frame
22:53 - and we can see that if we look at
22:54 - languages.columns in the debug console
22:58 - and we can see that this data frame just
22:59 - has this information in it
23:02 - we can also see that there's a total of
23:04 - 2300 people who answered the survey in
23:06 - this year so that's pretty neat all
23:08 - right let's pop out
23:10 - using the step out function we'll pop
23:12 - back up the stack to that outer for loop
23:15 - and we'll let it run to completion now i
23:18 - don't want to download all of the
23:19 - surveys with you guys watching me on the
23:22 - poor wi-fi here in the uh in this hall
23:24 - so i'm going to use a task that i have
23:27 - defined that
23:28 - pre-copies cached versions of these
23:30 - files into my workspace to do that i'll
23:32 - go to the tasks window
23:34 - and i'll say run task
23:37 - we'll select these custom shell commands
23:39 - that i've defined one of them is copy
23:41 - cache surveys and when i run that the
23:43 - csv files magically appear so i can kind
23:45 - of automate some of the things that i do
23:47 - in my
23:49 - day-to-day environment
23:51 - with those custom tasks and then we'll
23:53 - just let this run to completion and let
23:55 - it generate the results of these surveys
23:59 - it'll put that out in a json file so if
24:02 - you want to define your tasks simply go
24:04 - to the tasks configure tasks window
24:06 - and you can see that it's as simple as
24:09 - putting shell commands this also has
24:11 - integration with npm so if you have npm
24:13 - tasks here they will they'll show up in
24:15 - this list
24:17 - okay so that data is now available in a
24:19 - json file where i can see for every year
24:22 - how many people indicated using each
24:25 - language we can see that python was used
24:27 - by 575 people on the 2011 stack overflow
24:30 - survey that's pretty neat we'll take a
24:33 - look at this in a second but how do we
24:35 - know that this data here is correct
24:40 - well we run unit tests hopefully
24:43 - so i've got some unit tests defined in
24:45 - this oh something someone would shout
24:47 - out the answer but
24:49 - we've got unit tests defined here
24:51 - in this test folder so visual studio
24:53 - code has integration with unit tests if
24:56 - we want to configure those
24:59 - we we're using the unit test framework
25:00 - but we support support multiple testing
25:02 - frameworks so to configure those again
25:04 - we run a command command shift p
25:07 - discover unit tests
25:09 - um that will prompt us to enable and
25:11 - configure a unit test framework so we
25:13 - just click that bright blue button there
25:15 - and so we can configure unit test pi
25:17 - test or nose unit tests we'll go with
25:19 - the unit test framework
25:22 - it will ask us a series of questions
25:24 - like where is our tests folder so we're
25:28 - in
25:28 - our tests are defined in this tests
25:30 - folder here
25:31 - and the file convention that we use is
25:33 - test underscore star.py so we'll select
25:36 - that
25:37 - and a really neat feature
25:39 - that we have with vs code is we have
25:40 - these unit testing code lenses so this
25:42 - lets us run
25:44 - one test at a time i can run just the
25:45 - test for the 2017 survey or i can click
25:48 - the run test on the entire class so i
25:50 - can run an entire class of tests
25:52 - and of course you can run all the tests
25:54 - in your workspace but
25:56 - after you run the test what's really
25:58 - neat is that these indicators actually
25:59 - show you
26:00 - little check marks and x's when the
26:02 - tests pass or fail
26:04 - we're not going to worry about fixing
26:05 - this unit test right now i will come
26:07 - back to that later but it looks like our
26:09 - 2017 day is correct but our 2015 data is
26:12 - a little bit off
26:16 - okay so just a quick recap we just went
26:18 - through debugging start debugging
26:20 - stepping inspecting variables using the
26:22 - debug console typing expressions in
26:24 - using run to cursor to run to a
26:26 - particular line of code
26:27 - keyboard shortcuts for jumping to files
26:30 - various symbols and going definition
26:33 - configuring unit testing and tasks
26:36 - within your workspace
26:42 - now we're going to do a little bit of
26:43 - web development and we'll show you how
26:45 - you set up more advanced debug
26:47 - configurations for flask and django as
26:48 - well as using the docker extension
26:54 - so
26:56 - this data is currently in a csv file i'd
26:57 - like to render this in a nice web page
27:00 - to do that i'm going to start writing a
27:02 - web application
27:03 - i'm going to put my web application in a
27:05 - folder called app so here's a neat
27:08 - productivity tip
27:09 - if you create a new file and you just
27:11 - type a folder name that you want to put
27:13 - that file into in this case i want to
27:14 - put a file in app called main.py
27:17 - if you press enter it'll go ahead and
27:19 - create that folder and put the file
27:20 - within the folder
27:22 - so i've got another snippet here that
27:23 - will create a basic flask web
27:25 - application
27:27 - it's called flask app
27:30 - so that's something i've defined so this
27:32 - gives me just the general boilerplate
27:34 - for creating a flask application
27:36 - and
27:37 - what it does is simply import the flask
27:39 - object from the flask module
27:41 - creates an app object and then defines a
27:43 - home page route which returns some
27:45 - index.html
27:47 - so i need to create this index.html file
27:50 - let me do that again i'll put that in a
27:51 - templates folder
27:55 - index.html and a really cool built-in
27:58 - feature vs code we have integration with
27:59 - emit so if you can
28:02 - type the exclamation mark here and press
28:05 - enter
28:06 - that will generate an html boilerplate
28:08 - template for you including all the tags
28:11 - that you need for it to render correctly
28:14 - on mobile devices i don't know why this
28:16 - isn't default for html but it takes me a
28:18 - long time to find this so it's built
28:19 - right here into vs code and then we can
28:21 - just start editing our html file
28:27 - okay so
28:29 - i have a i'm going to switch over to a
28:30 - version of this ooh an update to docker
28:32 - is available let's skip it for now
28:36 - i'm going to switch over to a version of
28:37 - this code that has a little bit more
28:41 - html written for me it's called stack
28:44 - overflow flask
28:46 - i'll run code dot here and we'll just
28:48 - take a quick look at
28:50 - what's in this code
28:52 - in that main.py
28:54 - i have an api that returns the data file
28:56 - that we just generated from that that
28:58 - stack overflow survey analysis
29:00 - and the index.html
29:03 - has a renders that data with some pretty
29:05 - charts
29:07 - so if we want to run this file here just
29:10 - a quick tip you can right click on that
29:11 - file and say run python file in terminal
29:14 - that will again activate the virtual
29:15 - environment and run that on localhost
29:18 - but i'm going to actually run this
29:19 - inside of debugger
29:22 - so no matter where i am in my workspace
29:25 - when i'm working on a web application i
29:27 - always wanted to start the main.py file
29:30 - so to configure that i can go to the
29:31 - debug tab and i can add a debug
29:33 - configuration by clicking on this little
29:36 - settings gear link or
29:38 - this ad configuration button here
29:41 - so let's add a configuration again we'll
29:43 - use the experimental debugger because
29:44 - that's going to be the default one soon
29:47 - and it adds a default set of
29:49 - configurations here
29:51 - we have debug configurations for flask
29:53 - and django
29:54 - and one of the reasons that you want to
29:55 - do this is it lets you set your entry
29:57 - point in our case our entry point is in
29:59 - the app
30:01 - slash main.py file but it also turns on
30:05 - jinja template debugging or django
30:06 - template debugging for these types of
30:09 - apps so that's a feature that we do
30:10 - support in vs code
30:13 - for web developers
30:15 - so
30:16 - once i've got these different
30:17 - configurations defined i can pick which
30:18 - one i want so i can i can continue
30:20 - debugging the current file if i use the
30:22 - current file configuration or i can use
30:24 - the flask configuration if i want it to
30:26 - launch my flask application
30:28 - so we'll click play there
30:30 - and that will start our flask
30:31 - application
30:32 - and this time let's browse to the url a
30:36 - little quick tip here if you have a url
30:38 - or any file link in your terminal you
30:40 - can press command click to open that
30:42 - link and it just it opened the browser
30:44 - and then i hit the breakpoint right away
30:47 - so we'll just switch back here and we'll
30:49 - let it run
30:51 - and there's my simple chart of the
30:53 - survey data for the past few years
30:57 - python is actually
30:58 - growing super fast more than 20 percent
31:00 - year over year now used by more than
31:02 - 38.8 percent of developers worldwide so
31:05 - you guys are all doing great work in
31:06 - this room
31:10 - okay so um it's very common to use
31:13 - docker containers um i was told that
31:15 - docker was actually launched at pycon so
31:18 - docker is a very popular technology used
31:20 - by python developers so let's go ahead
31:22 - and throw this into a docker container
31:24 - so to do that i'm going to install the
31:26 - docker extension into vs code so we go
31:28 - to the extensions tab go to the
31:30 - marketplace search for docker
31:33 - and
31:34 - we install that i have it disabled in my
31:37 - install so i don't have to download this
31:39 - live on stage but i'll just click enable
31:41 - there
31:43 - and
31:44 - after we install that extension you have
31:45 - to click reload
31:48 - so now that this extension is installed
31:50 - into my workspace it adds a few useful
31:52 - commands
31:53 - so we'll go command shift p to open the
31:55 - command palette
31:57 - and
31:59 - the the first command we'll use is the
32:01 - add docker files to workspace commands
32:03 - so
32:05 - if you're
32:06 - new to docker this is very helpful it
32:08 - puts some pre-defined
32:09 - docker files in there for you for
32:11 - different languages we've got python go
32:12 - java node.js and ruby and.net core so
32:15 - we'll use a python template here for our
32:17 - docker file
32:19 - and then it also asks which app we want
32:21 - which port we want our app to listen on
32:22 - we'll go with the default port 3000
32:26 - and that just puts in uh some of the
32:28 - useful docker files that we need um and
32:31 - in particular let's go ahead and take a
32:32 - look at the docker file and customize
32:34 - this a little bit
32:35 - so some of the features that you get
32:37 - after these docker files have been
32:38 - created is that the docker extension
32:40 - adds
32:42 - completions for the docker base images
32:45 - so i want to actually use a different
32:47 - base image that loads a flask web server
32:51 - and so i'm going to change this here
32:53 - there's one great image out there
32:54 - created by docker hub user tangolo
32:58 - and you can see i get auto completion so
32:59 - these are loading the images that are
33:01 - available on docker hub for me so i'm
33:03 - going to select this nginx
33:05 - flask one because i want to host flask
33:09 - and an nginx web server so that it's
33:10 - nice and fast and production ready and i
33:13 - can pick um
33:14 - i get auto completion for the various
33:16 - tags that are available so i can easily
33:17 - pick the python version that i want to
33:19 - run here so i pick python 3.6 running an
33:22 - alpine alpine is a very
33:25 - small version of
33:27 - debian
33:28 - it's really good for production smaller
33:30 - images make everything faster in the
33:32 - entire build tool chain and running at
33:35 - runtime as well
33:37 - and i'm just going to configure this
33:38 - image a little bit
33:40 - i'm going to set the listen port
33:42 - this is a
33:43 - configuration variable for that's
33:45 - specific to this image that tells flask
33:46 - to listen on port 3000
33:49 - so that it matches the exposed port
33:50 - there
33:51 - i'll copy the app
33:53 - folder into the app folder within the
33:55 - docker container and then i'm going to
33:57 - comment out these lines here because the
33:59 - docker container already has this base
34:01 - image already has these
34:03 - commands that install
34:05 - python packages
34:06 - we also have commands built in if you're
34:08 - using pipbem verconda you can uncomment
34:10 - these versions that'll help you get your
34:11 - condo environments installed or pip band
34:13 - environments or packages installed there
34:15 - easily
34:17 - so now that i've set up my file i can
34:20 - run another command called docker
34:22 - compose up which will
34:25 - it'll build this image here and it will
34:28 - actually
34:29 - start it locally running on port 3000
34:31 - because that's what's been defined in
34:33 - these docker compose file here and after
34:36 - i do that i can go to the docker
34:38 - tab
34:39 - and i here in the docker tab i can see
34:41 - all the images that are available on my
34:42 - machine i can delete manage them and i
34:45 - can see the docker container here
34:47 - is running a really neat thing i can
34:50 - stop restart remove this container
34:53 - attach a shell and i can also show logs
34:55 - so just to prove that we're running
34:57 - locally here i'm going to use that same
34:58 - control command click and there is the
35:00 - app running inside of a docker container
35:03 - that i've just created using vs code
35:07 - all right
35:08 - so now we're on to some exciting new
35:11 - preview features that we've just
35:12 - announced now these are things that you
35:13 - can try today but they're in beta so
35:16 - we're still learning and experimenting
35:18 - and fixing bugs in some of these
35:20 - the first of which i mentioned visual
35:21 - studio and telecode which we've launched
35:23 - here at euro python and launching at 7
35:26 - 00 a.m uk time really
35:28 - was interesting from a perspective of
35:30 - having your entire team
35:32 - up at 11 p.m on the u.s west coast
35:35 - so that was fun but uh we're very proud
35:37 - to announce this this is machine
35:38 - learning-based auto-completions for
35:40 - python code and this is based on
35:42 - training on more than 2 000 public and
35:45 - high quality open source repos that
35:47 - infers that sorts the completion list
35:49 - based on your current code context and
35:51 - let me go ahead and show you exactly
35:52 - what i mean by that
35:56 - so if i switch over to a different repo
35:57 - that i have here
36:00 - called telesense samples we'll open this
36:02 - up in vs code
36:04 - so intellicode is a separate extension
36:06 - that you can install if we go to the
36:08 - extensions tab
36:09 - type intellicode
36:15 - you got this wi-fi
36:19 - we'll install that intellicode extension
36:22 - and that's going to
36:23 - after i reload vs code we'll take a look
36:25 - at some various code samples here
36:28 - so the first thing it does is that
36:30 - actually prompts you to install the
36:31 - microsoft python language server this is
36:34 - a new intellisense engine that we've
36:35 - just
36:36 - released last week
36:38 - so it's a preview so it's something you
36:40 - do have to opt into
36:42 - but when we turn that intellisense
36:43 - engine on intellicode is able to use
36:46 - that new intellisense engine
36:48 - to power some of its results so let's
36:50 - take a look at a few examples of what
36:52 - this means so normally when you're
36:54 - getting completions on things like the
36:56 - file
36:57 - operator there's you know a few there's
36:59 - about 100 items in this list but the
37:01 - intellicode machine learning model has
37:03 - learned and said that these are the most
37:04 - likely options here that are asterisked
37:07 - so
37:08 - it suggests using file.write
37:11 - so i can
37:12 - do that and say file.close
37:15 - is another suggestion that comes up and
37:17 - this works great for you know the system
37:19 - modules if you import os and type os dot
37:21 - it suggests common things like os dot
37:23 - path get current working directory
37:26 - if you import sys
37:28 - and type sys dot you get uh rv and path
37:30 - and standard out and some various things
37:32 - like that
37:34 - and this works on a broad variety of
37:35 - applications
37:36 - that we've trained
37:38 - the the model on so if we go back to our
37:40 - flask application and we use the app
37:42 - variable
37:43 - it pulls up app.route as the top of the
37:46 - list here
37:49 - and we'll go ahead and
37:51 - fill in this code here
37:53 - and then within the actual method if i
37:55 - use app.again
37:57 - it actually gives me different results
37:59 - because it knows i'm inside of that
38:01 - route method there so here it's now
38:03 - suggesting config and send static file
38:06 - send static file is the one that we want
38:12 - and let's quickly switch over to another
38:15 - code example where we do a little bit of
38:16 - machine learning code here this is the
38:18 - tensorflow getting started code
38:21 - from the tensorflow website
38:23 - so i'm just going to follow along with
38:25 - the code samples here if i do tf dot
38:27 - it brings a variable to the top of the
38:29 - list
38:34 - and i'll just finish typing this
38:38 - code here
38:40 - so float32 that's also in the suggestion
38:42 - list and if i come down here and use
38:44 - tf.again
38:45 - now it's giving me tf.placeholder as the
38:47 - top item in the list
38:50 - and tf.now it's suggesting float32 so as
38:54 - i'm working through different sections
38:55 - of this code it's giving me better and
38:57 - better
38:58 - suggestions and my favorite example here
39:02 - is if i do tf dot at the bottom it
39:04 - suggests the global variables
39:06 - initializer which is at the top of the
39:07 - list and then right after that if i use
39:10 - create a tensorflow session
39:13 - it suggests the session variable
39:16 - so one of the benefits also if you've
39:17 - noticed with the microsoft python
39:19 - language server is as i type i actually
39:20 - get syntax errors
39:22 - live in code so if i put things like
39:24 - semicolons in it flags those right away
39:27 - as different issues and in general i get
39:29 - much richer intellisense here provided
39:32 - by
39:32 - the open source type shed definition
39:35 - files so that's another benefit
39:37 - of the language server
39:40 - okay so that's intellicode i encourage
39:43 - you to try it out today personally i
39:44 - really miss it when i have the extension
39:46 - turned off
39:47 - um so it definitely improves my personal
39:49 - productivity
39:50 - and
39:51 - the other thing i mentioned was the
39:52 - microsoft python language server
39:54 - intellicode turns this on by default but
39:56 - if you want to use just the language
39:57 - server you can turn that on by going to
39:59 - your preferences and settings and
40:01 - setting the python.jedi enabled to false
40:05 - and
40:06 - one final demo that i'll share with you
40:08 - another preview feature is visual studio
40:10 - live share this is an extension for
40:12 - visual studio code that allows you to do
40:14 - real-time collaborative editing and
40:16 - debugging with vs code and for this part
40:19 - of the demo i'm going to go back to that
40:20 - unit test that i had that was failing
40:23 - and i'm going to get a more proficient
40:26 - developer to help me solve that unit
40:28 - test and in fact i'm going to ask don to
40:30 - help me code that live with me sitting
40:33 - from the front row
40:35 - and right in front of us
40:41 - okay so
40:42 - let's go back to that uh repo that we
40:44 - had earlier
40:49 - i'm gonna get back to the code example
40:52 - where i had the
40:54 - that failing unit test
41:02 - okay so this was that failing unit test
41:04 - here
41:06 - give it a quick run
41:07 - and so while that's running i'm going to
41:09 - install the vs live share extension
41:13 - so if you install this extension
41:16 - you just have to sign in you can sign in
41:19 - with a microsoft account or a github
41:21 - account and then you can easily generate
41:24 - a sharing link
41:25 - from your workspace so this share button
41:27 - has now appeared on the bottom of my
41:29 - window
41:33 - and
41:35 - if i click it it's going to copy a
41:37 - sharing link to the clipboard
41:42 - and then i can go and chat and say
41:45 - dawn please help
41:50 - and so don can just go click that link
41:53 - and that will actually stream all the
41:55 - files from my workspace over to him and
41:57 - just for a quick idea of what this looks
41:59 - like on his side i have a video recorded
42:02 - where this link pops up
42:03 - and he can click on that
42:06 - link that opens the collaboration
42:07 - session on his machine
42:10 - and just by clicking that link it will
42:12 - open up vs code on his side
42:15 - and it actually streams all the files
42:17 - into a visual studio liveshare workspace
42:19 - so he doesn't need to have a copy of the
42:21 - code and he can actually go and look at
42:23 - the code and he gets all the
42:25 - intellisense and features like that
42:26 - working
42:28 - so
42:28 - now that i see dawn's joined my
42:31 - collaborative session i can actually see
42:33 - where don's cursor is this is dawn right
42:36 - here in this little yellow link
42:38 - um don why don't you go ahead and take a
42:40 - look around on code so he's gone and
42:42 - looked at some other file here and i can
42:44 - follow him by clicking this little
42:45 - button here and say follow
42:48 - don giamani and so he's scrolling around
42:50 - looking at the code
42:52 - he can highlight text and look at
42:54 - interesting things
42:56 - and you know no hands over here
42:59 - so um he's he's seeing some interesting
43:01 - stuff he's getting familiar i can
43:03 - actually go off and look at different
43:04 - code than he's looking at so we can um
43:07 - get a good sense of the code base we can
43:10 - also do some collaborative debugging so
43:12 - i'm going to start debugging this unit
43:13 - test that i have that's failing and
43:14 - we're going to land right at that break
43:16 - point that i've just set there
43:20 - so let's give us a second
43:22 - all right so don can actually now
43:24 - control the debugger right so he can
43:26 - step through code
43:27 - he can step down into that method
43:30 - and he can go down to the bottom here
43:32 - and he can actually see if he can fix
43:34 - this unit test for us
43:36 - so he's set a breakpoint
43:38 - there he says this looks interesting
43:43 - and if you put a blank line
43:45 - here
43:49 - right so he's a put a piece of code in
43:51 - there which i can then take and if we
43:53 - rerun our unit test
43:56 - quickly here
43:58 - we'll see that he's now fixed our unit
44:00 - test for us
44:08 - there we go thanks don for fixing my bug
44:16 - so that was vs live share get the vs
44:19 - live share extension and start doing
44:21 - pair programming and code reviews with
44:23 - your co-workers
44:24 - and that concludes all the tips and
44:26 - tricks and features in this talk you can
44:28 - get productive with vs code today just
44:31 - go to code.visualstudio.com
44:33 - and for more information about what
44:34 - we're doing with the vs code extension
44:36 - or anything for python and microsoft
44:38 - including python and visual studio and
44:39 - python and azure check out our python
44:42 - blog codes and slides are available up
44:44 - here at this repo and follow us on
44:46 - twitter thank you so much for having me
44:48 - here this is just a wonderful conference
44:50 - and i really love this city thank you

Cleaned transcript:

hello everyone thank you for having me in this beautiful city of edinburgh um so whether you're no matter what you're building with python whether it's web applications simple scripts or even machine learning models your choice of editor is one of the most important decisions you can make for your personal productivity and today developers are choosing visual studio code as the number one choice on the most recent stack overflow developer survey and for a variety of reasons because it's fast it's lightweight it's free it's crossplatform and has great support for multiple languages so i'm the program manager for our python developer tools at microsoft and i'm here to talk to you about how you can make the most out of using visual studio code for python no matter if you've used it already for python used it for other languages or never even heard of it before i guarantee you'll learn something useful in today's session so first of all for those of you who are new to vs code what is vs code so it is a free crossplatform and open source code editor from microsoft it's fast and it's lightweight you can just open any folder and start working with various files it has a very rich extension ecosystem provided by the community i'm partially because it's actually one of the largest open source projects on github there's a very active community it's got very it's got very good builtin support for javascript and typescript including rich features like intellisense debugging and source control among other things and i mentioned the rich extension ecosystem uh the part that my team builds is the python extension and with the python extension you get those same rich capabilities for python so with the python extension you get intellisense debugging linting testing and refactoring and because of the work that we're doing python is actually the fastest growing language in visual studio code and it's the most popular extension for visual studio code on the vs code marketplace this extension is fully open source and was actually originally created by a member of our community uh don j amani from australia who's sitting here in the front row give a wave to everyone don thank you so we love the work that don was doing and we hired him on and put a full team on the python extension we first publish it as microsoft in november and we've been putting out a new release with updated features and better capabilities every single month since then and so i want to call out a few other key extensions that i want to make you aware of before i dive in if you're coming from other code editors i hear a lot of people struggle to change their keyboard shortcuts so there are great keyboard binding shortcuts for vim sublime text emacs and the intellij suite of products so if you're using other editors you can install those extensions to make the transition easier and specifically for python developers there's extensions that add django template syntax and django snippets as well as jinja template syntax and flask snippets i'm not going to show these today but i just wanted to call them out before we dive in so for the rest of the talk i'm going to do a whirlwind tour of the python extension and python development and vs code we're going to start with the essentials setting it up selecting your python interpreter adding and running code and configuring things like linting and refactoring then we'll go into some more powerful features like debugging unit testing tasks and using docker extensions and then some preview capabilities that you can try out today including intellicode which we just launched here at the euro python conference visual studio liveshare and the new python language server that that we released last week so without further ado let's go ahead and dive in and start looking with the essentials of visual studio code so if you want to get started with visual studio code simply go to code.visualstudio.com and click on the bright green download square you can hit that and one thing while it downloads it's a very quick download you get taken right to the getting started documentation this is great documentation i definitely recommend reading it and for python developers you want to move your mouse over to that little python link over there and click on the python tutorial which this python tutorial takes you through all the basics of getting set up so if you're very new to it i definitely recommend going through that tutorial you'll learn all the basic features that you need to get going so after you download visual studio code you'll be taken to a welcome screen that looks something like this and as i mentioned before you need to install the python extension luckily we've made that easy we've got the python link which is right there and you can just simply click on that to install the python extension and it will download and reload after you click ok if you don't like bright blue links you can also go to the extensions tab in visual studio code where you can search for python and you can go to the python extension right there and install it another quick thing to call out about this page here is that we've got a really good quick start set of steps for getting started and then at the bottom that is a link to our python tutorial if you're not sure where to find it it's right there built in okay so one of the first things i like to do after installing visual studio code is to put vs code on the path so that i can load it from the command line this happens automatically if you install it on windows but if you're on mac or linux you need to run a command now to run a command with visual studio code you press command shift p or control shift p to bring up the command palette where you have all the commands available to you in vs code in our case we want to type shell and run the install code command in path that will allow us to open vs code from the command line which i'll show now so let's create a basic application here with vs code to do this i usually start by from the command line creating a new folder i will call it make door new app and then we'll go into that folder and then because i put it on the command line i can just type code dot and that will open up vs code in this folder now you don't need to do that you can also just click the open folder button here or do file open folder but i find it very convenient to launch it from the command line so building our first app here i like to just click the new file button and we'll call this hello.py press enter it immediately gets recognized as a python file you can tell that when you see the python interpreter listed in the bottom lefthand corner quick tip you can click on that interpreter to change to python 3 or anaconda or any other interpreter that you have installed so we can select that interpreter there and we can say print hello euro python and command s to save and then to run this we can simply right click and say run the python file in the terminal and then the builtin terminal will pop up and run that file so that was a quick tour of getting started just to recap we downloaded from code.visualstudio.com we added code to the path installed the python extension created the file and ran it in the terminal now let's do a little bit more scripting with python and i mentioned the stack overflow developer survey earlier so one of the things that i like to do as a demo is actually download the stack overflow survey data and play with it to poke around in some of the results so i'm going to create a new file called stack overflow.py and to use the stack overflow survey i'm going to use the requests library to download the stack overflow survey and so i need to install that but instead of installing that in my global python interpreter i'm going to create a virtual environment this is some people get scared by virtual environments it's a it's a simple and useful concept it basically creates a local copy of the python interpreter that's local to your application so i can install packages without affecting the other applications that i have installed on my machine so i'll use the builtin terminal here and i'll run python3 dash m m and that will invoke the vn module to create a virtual environment and i'll pass it the argument end which will put that into a folder name env so python 3 just guarantees that i run python 3 if there's multiple python inversions installed which there are and you can see that virtual environment was created here in the vs code file explorer i can see that this is simply just sim links to the python interpreter and a local copy of the site packages folder that i have here so i can activate this environment by typing source and bin activate that will activate that virtual environment for me now if i say which python 3 you'll see that when i run python it runs out of this this local copy in this folder here you don't need to activate the virtual environment with vs code you can actually have vs code activate it for you but first i need to reload vs code with command shift p i'll select reload window just so it picks up that new environment that i've put in this folder and so now when i click on this interpreter in the bottom lefthand corner that virtual environment will be available from this virtual environment list so i select that vm there this time i'm going to pay attention to this pylint installation warning here so i'll install linting tools there so after i've activated that virtual environment now vs code uses this interpreter for all the commands it runs so it installed pylint into this virtual environment if you want to create a terminal that has this environment activated you run command shift p and say python create terminal and so that will activate that interpreter automatically so again if i say which python is running out of that folder so now i can pip install the requests library from this command line there and so now i can start using it in code so to do that we'll type import requests now i mentioned i want to download the survey so i'll create a new request and say requests.get and i need the survey url so i'll go to the website where they've published all these results these are fascinating data sets to look at by the way they have all sorts of interesting insights into what developers are doing and so we paste that url and then we say with uh open we'll save that into a zip file called survey2017.zip we'll open this as a writable file as file and we'll say file.right you notice i get this intellisense as i'm typing here in code request dot content and we'll go ahead and right click and run this piece of code in the terminal again this time it runs with the virtual environment that we have selected in the bottom lefthand corner and it will download this as a zip file into my local folder great now i want to unpack this zip file and and i'm going to write a bunch of code that takes the csv file out of this zip file so i can start using it but instead of making you watch me type everything here they've advised us against doing too much live coding here at the conference i'm going to use a feature called snippets in vs code so i've predefined a bunch of snippets that i have and i have one called so extract and when i and it's available in my snippets list and when i press enter that inserts that code snippet for me and it preselects this survey 2017 field here which i've defined as a parameter to the snippet so i can say my survey and i can make that i can make that a customizable snippet that i can type and if there's multiple of those you can tab between all of them so now i want to run just this piece of code here that i've typed into vs code i don't want to run the first part so i don't run the whole file so i can run this just the selected piece by right clicking and saying run selection or line in python terminal or i can just press shift enter which will activate that python interpreter paste it into the command and you see that zip file was replaced with the csv file containing the survey results another cool thing you can do with snippets is you can put variables in there so i have a to do snippet that when i type to do it puts the current date and i can leave a message for myself that says refactor this code and just a quick look at how you actually edit snippets to go edit snippets you go file or on windows it's file but here it's code preferences user snippets uh we select the python snippets and uh here's where we've defined that extract file snippets it was very easy to put a variable in you put just this dollar sign zero and this provides the default value so one final thing to wrap this up i left a to do here to refactor this code so let's go ahead and do that so i will select this whole block of code right click and say extract method it's going to prompt me to install the rope library and i'll select yes so that we use the rope package for refactoring so i'll right click again after that's installed and say extract method define the method name as download underscore survey and there we go it's done that refactoring so just a quick recap we selected our interpreter we ran the file in a terminal oh i missed linting here so i i have pilot turned on by default but you notice there's not very many warnings inside of this piece of code that's because we have a default set of linter rules it's very nonaggressive the default pilot warnings can contain a lot of style information so if you want to customize your code style for your team one cool thing you can do is just check in a pilot rc file so simply by having the presence of a pilintrc file we throw away our default pilot rules um here so if i go back and un untap this you'll see it'll give me some warnings here doesn't like the names of my variables and all sorts of stuff like that if i want to customize those warnings i can just put a block in the pilot rc file that says messages control and just a quick tip on how to do this it's very difficult to find the syntax for this online but you put disable equals all and then say enable equals just the categories so you can say warnings convention or errors in this case i just want errors and you can put individual pilot codes which you can look up online there so if i go back to the file and now it just gives me the error and it's telling me that this download survey method is undefined great so there's some information on using virtual environments very useful another thing you can do with virtual environments is uh you can a lot of people check in a requirements.txt file into their repo so this is a lot enables you to easily package up the dependencies that your python code has so you can pip install dashr a requirements.txt file and you can generate one of those files using the pip freeze command and that puts the currently installed packages into that file and when you're done you can type deactivate from the terminal we also have support for pi end pip and conda environments in vs code codes if you're using those we support those as well and they'll just show up in that interpreter list that i brought up earlier all right so let's jump into a few more powerful features of vs code and for this i'm going to go through debugging unit testing and some tasks and a few keyboard shortcuts so i've got this csv file i actually want to analyze some of the data in the csv file i'm going to jump to some code where i've actually pulled out and some of the information and done some analysis so i've got this in a folder called hello stack overflow and just like i did before i'll change to that folder and type code dot to open it up you'll see that the folder comes right up and i've got all my python files here so just some quick keyboard shortcut tips i press command p that allows me to quickly switch between all the files in my current workspace i can switch to the stackoverflow.py file by the way if you press alt and press enter it'll actually open one of those files in the righthand vertical tab window so that's a neat tip if you want to quickly peek into another file you can also do that just by clicking this button here another tip here if you want to split your editor vertically is you press the alt key and it changes that little icon from a horizontal split to a vertical split so i can split the editor vertically there and we can go on so on and so forth in a recursive manner another quick tip if you want to open the terminal it's control back tick that will open that terminal up and you can also split the terminals so you can split the terminal right so if you want to do something like have the zen of python up on your screen down in the terminal you can have a dedicated terminal window for that although in the lightning talk on wednesday they advised against reading the python zen of python too seriously you can also put your terminal on the right hand side of your windows if you want which works better if you're not projecting at a conference but it's i find that very useful on larger monitors okay so let's get back to um our previous configuration i seem to have got myself into a bind here with these terminal windows there we let's just close everything put that back on the bottom okay so some other shortcuts here command shift o lets me open various symbols that i have in the workspace so you can see as i'm going through this list i can look at the different methods that i have so i've basically refactored my previous code example to download all years of the stack overflow developer surveys back to 2011. there's a method here which does some analysis of those stack overflow surveys called download survey um so i can press enter to look at that you can also command click on a method if you want to go to definition on a method so for example if i want to look at the requests.get implementation i can command click and that will that will open that file directly there and another quick tip is you can right click and say peak definition if you want to quickly look at the definition of that method in line okay so aside from just reading the code let's actually debug this and step through and see how it works so to use the debugger it's actually very simple you just click in the gutter and select put a break point there that will have vs code stop on this line when we start the debugger and go to the debug tab and press the bright green play button another keyboard shortcut for play is just f5 so i can press f5 here and it will actually let me pick my choice of debuggers this is because we have the next version over debugger available as an experimental version it's much faster it's based on an open source debug engine called pi dev d and so this is going to become the default soon so let's go ahead and use that python experimental version and we'll run and we'll stop at that break point right so this just debugs the current file whatever python file i'm at if i want to debug it just press f5 so now that i'm stopped at this break point i can see the variables in the lefthand side of the window here i can see the year and various things like that and this analyzes uh one year one year of survey for every iteration of this for loop so if i want to run one iteration of this for loop i can click the play button here the continue button or f5 that will run and that will stop after it's downloaded one year of the stack overflow developer surveys so if we want to actually look at how this code works we can use the step into button or f11 so we can step into that code uh here and we can press step over to run over at one line at a time so that line downloaded the survey and then we actually here on this line we crack open the survey csv file we load it into a pandas data frame using a pandas library which if you're not familiar is a very popular library for data analysis and data frames so we step over that line we load the survey and if we actually look at some of the columns that are in this csv file we can type an expression into the watch window for example like data.columns if you look at this it contains a lot of internal information from panda's data frames so if we want we can customize this expression here and say list data dot columns so we can just cast it into a list to get rid of all the other items and then we just get a list of columns that are inside of this data frame this is a little bit this is not the best window to view this information so i'm going to switch over to the debug console here by clicking this dot dot go to the debug console i can also type expressions in here so if i type list data.columns i can view that here in the output window and i can see all of the questions that were present on the stack overflow survey for this year you can see the one we're interested in is the which languages are you proficient in which are people telling us which programming languages that they use and so as we step through our code we want to extract just this question plus the related columns that come after it so we can step over this one line at a time um and we're just iterating through all the columns in the list until we find the right question i don't want to sit here and step through all the items in the for loop so i'm going to skip past all of this by using a run to cursor uh function so i could set a breakpoint down here and run to that break point but i can also right click and say run to cursor which is kind of like a one time break point as soon as you hit it the breakpoint disappears if you actually looked closely you'd see a break point briefly appeared there in the editor so that skips all of that looping and now we can again look at the languages.columns basically what we did was we extracted the languages into a languages data frame and we can see that if we look at languages.columns in the debug console and we can see that this data frame just has this information in it we can also see that there's a total of 2300 people who answered the survey in this year so that's pretty neat all right let's pop out using the step out function we'll pop back up the stack to that outer for loop and we'll let it run to completion now i don't want to download all of the surveys with you guys watching me on the poor wifi here in the uh in this hall so i'm going to use a task that i have defined that precopies cached versions of these files into my workspace to do that i'll go to the tasks window and i'll say run task we'll select these custom shell commands that i've defined one of them is copy cache surveys and when i run that the csv files magically appear so i can kind of automate some of the things that i do in my daytoday environment with those custom tasks and then we'll just let this run to completion and let it generate the results of these surveys it'll put that out in a json file so if you want to define your tasks simply go to the tasks configure tasks window and you can see that it's as simple as putting shell commands this also has integration with npm so if you have npm tasks here they will they'll show up in this list okay so that data is now available in a json file where i can see for every year how many people indicated using each language we can see that python was used by 575 people on the 2011 stack overflow survey that's pretty neat we'll take a look at this in a second but how do we know that this data here is correct well we run unit tests hopefully so i've got some unit tests defined in this oh something someone would shout out the answer but we've got unit tests defined here in this test folder so visual studio code has integration with unit tests if we want to configure those we we're using the unit test framework but we support support multiple testing frameworks so to configure those again we run a command command shift p discover unit tests um that will prompt us to enable and configure a unit test framework so we just click that bright blue button there and so we can configure unit test pi test or nose unit tests we'll go with the unit test framework it will ask us a series of questions like where is our tests folder so we're in our tests are defined in this tests folder here and the file convention that we use is test underscore star.py so we'll select that and a really neat feature that we have with vs code is we have these unit testing code lenses so this lets us run one test at a time i can run just the test for the 2017 survey or i can click the run test on the entire class so i can run an entire class of tests and of course you can run all the tests in your workspace but after you run the test what's really neat is that these indicators actually show you little check marks and x's when the tests pass or fail we're not going to worry about fixing this unit test right now i will come back to that later but it looks like our 2017 day is correct but our 2015 data is a little bit off okay so just a quick recap we just went through debugging start debugging stepping inspecting variables using the debug console typing expressions in using run to cursor to run to a particular line of code keyboard shortcuts for jumping to files various symbols and going definition configuring unit testing and tasks within your workspace now we're going to do a little bit of web development and we'll show you how you set up more advanced debug configurations for flask and django as well as using the docker extension so this data is currently in a csv file i'd like to render this in a nice web page to do that i'm going to start writing a web application i'm going to put my web application in a folder called app so here's a neat productivity tip if you create a new file and you just type a folder name that you want to put that file into in this case i want to put a file in app called main.py if you press enter it'll go ahead and create that folder and put the file within the folder so i've got another snippet here that will create a basic flask web application it's called flask app so that's something i've defined so this gives me just the general boilerplate for creating a flask application and what it does is simply import the flask object from the flask module creates an app object and then defines a home page route which returns some index.html so i need to create this index.html file let me do that again i'll put that in a templates folder index.html and a really cool builtin feature vs code we have integration with emit so if you can type the exclamation mark here and press enter that will generate an html boilerplate template for you including all the tags that you need for it to render correctly on mobile devices i don't know why this isn't default for html but it takes me a long time to find this so it's built right here into vs code and then we can just start editing our html file okay so i have a i'm going to switch over to a version of this ooh an update to docker is available let's skip it for now i'm going to switch over to a version of this code that has a little bit more html written for me it's called stack overflow flask i'll run code dot here and we'll just take a quick look at what's in this code in that main.py i have an api that returns the data file that we just generated from that that stack overflow survey analysis and the index.html has a renders that data with some pretty charts so if we want to run this file here just a quick tip you can right click on that file and say run python file in terminal that will again activate the virtual environment and run that on localhost but i'm going to actually run this inside of debugger so no matter where i am in my workspace when i'm working on a web application i always wanted to start the main.py file so to configure that i can go to the debug tab and i can add a debug configuration by clicking on this little settings gear link or this ad configuration button here so let's add a configuration again we'll use the experimental debugger because that's going to be the default one soon and it adds a default set of configurations here we have debug configurations for flask and django and one of the reasons that you want to do this is it lets you set your entry point in our case our entry point is in the app slash main.py file but it also turns on jinja template debugging or django template debugging for these types of apps so that's a feature that we do support in vs code for web developers so once i've got these different configurations defined i can pick which one i want so i can i can continue debugging the current file if i use the current file configuration or i can use the flask configuration if i want it to launch my flask application so we'll click play there and that will start our flask application and this time let's browse to the url a little quick tip here if you have a url or any file link in your terminal you can press command click to open that link and it just it opened the browser and then i hit the breakpoint right away so we'll just switch back here and we'll let it run and there's my simple chart of the survey data for the past few years python is actually growing super fast more than 20 percent year over year now used by more than 38.8 percent of developers worldwide so you guys are all doing great work in this room okay so um it's very common to use docker containers um i was told that docker was actually launched at pycon so docker is a very popular technology used by python developers so let's go ahead and throw this into a docker container so to do that i'm going to install the docker extension into vs code so we go to the extensions tab go to the marketplace search for docker and we install that i have it disabled in my install so i don't have to download this live on stage but i'll just click enable there and after we install that extension you have to click reload so now that this extension is installed into my workspace it adds a few useful commands so we'll go command shift p to open the command palette and the the first command we'll use is the add docker files to workspace commands so if you're new to docker this is very helpful it puts some predefined docker files in there for you for different languages we've got python go java node.js and ruby and.net core so we'll use a python template here for our docker file and then it also asks which app we want which port we want our app to listen on we'll go with the default port 3000 and that just puts in uh some of the useful docker files that we need um and in particular let's go ahead and take a look at the docker file and customize this a little bit so some of the features that you get after these docker files have been created is that the docker extension adds completions for the docker base images so i want to actually use a different base image that loads a flask web server and so i'm going to change this here there's one great image out there created by docker hub user tangolo and you can see i get auto completion so these are loading the images that are available on docker hub for me so i'm going to select this nginx flask one because i want to host flask and an nginx web server so that it's nice and fast and production ready and i can pick um i get auto completion for the various tags that are available so i can easily pick the python version that i want to run here so i pick python 3.6 running an alpine alpine is a very small version of debian it's really good for production smaller images make everything faster in the entire build tool chain and running at runtime as well and i'm just going to configure this image a little bit i'm going to set the listen port this is a configuration variable for that's specific to this image that tells flask to listen on port 3000 so that it matches the exposed port there i'll copy the app folder into the app folder within the docker container and then i'm going to comment out these lines here because the docker container already has this base image already has these commands that install python packages we also have commands built in if you're using pipbem verconda you can uncomment these versions that'll help you get your condo environments installed or pip band environments or packages installed there easily so now that i've set up my file i can run another command called docker compose up which will it'll build this image here and it will actually start it locally running on port 3000 because that's what's been defined in these docker compose file here and after i do that i can go to the docker tab and i here in the docker tab i can see all the images that are available on my machine i can delete manage them and i can see the docker container here is running a really neat thing i can stop restart remove this container attach a shell and i can also show logs so just to prove that we're running locally here i'm going to use that same control command click and there is the app running inside of a docker container that i've just created using vs code all right so now we're on to some exciting new preview features that we've just announced now these are things that you can try today but they're in beta so we're still learning and experimenting and fixing bugs in some of these the first of which i mentioned visual studio and telecode which we've launched here at euro python and launching at 7 00 a.m uk time really was interesting from a perspective of having your entire team up at 11 p.m on the u.s west coast so that was fun but uh we're very proud to announce this this is machine learningbased autocompletions for python code and this is based on training on more than 2 000 public and high quality open source repos that infers that sorts the completion list based on your current code context and let me go ahead and show you exactly what i mean by that so if i switch over to a different repo that i have here called telesense samples we'll open this up in vs code so intellicode is a separate extension that you can install if we go to the extensions tab type intellicode you got this wifi we'll install that intellicode extension and that's going to after i reload vs code we'll take a look at some various code samples here so the first thing it does is that actually prompts you to install the microsoft python language server this is a new intellisense engine that we've just released last week so it's a preview so it's something you do have to opt into but when we turn that intellisense engine on intellicode is able to use that new intellisense engine to power some of its results so let's take a look at a few examples of what this means so normally when you're getting completions on things like the file operator there's you know a few there's about 100 items in this list but the intellicode machine learning model has learned and said that these are the most likely options here that are asterisked so it suggests using file.write so i can do that and say file.close is another suggestion that comes up and this works great for you know the system modules if you import os and type os dot it suggests common things like os dot path get current working directory if you import sys and type sys dot you get uh rv and path and standard out and some various things like that and this works on a broad variety of applications that we've trained the the model on so if we go back to our flask application and we use the app variable it pulls up app.route as the top of the list here and we'll go ahead and fill in this code here and then within the actual method if i use app.again it actually gives me different results because it knows i'm inside of that route method there so here it's now suggesting config and send static file send static file is the one that we want and let's quickly switch over to another code example where we do a little bit of machine learning code here this is the tensorflow getting started code from the tensorflow website so i'm just going to follow along with the code samples here if i do tf dot it brings a variable to the top of the list and i'll just finish typing this code here so float32 that's also in the suggestion list and if i come down here and use tf.again now it's giving me tf.placeholder as the top item in the list and tf.now it's suggesting float32 so as i'm working through different sections of this code it's giving me better and better suggestions and my favorite example here is if i do tf dot at the bottom it suggests the global variables initializer which is at the top of the list and then right after that if i use create a tensorflow session it suggests the session variable so one of the benefits also if you've noticed with the microsoft python language server is as i type i actually get syntax errors live in code so if i put things like semicolons in it flags those right away as different issues and in general i get much richer intellisense here provided by the open source type shed definition files so that's another benefit of the language server okay so that's intellicode i encourage you to try it out today personally i really miss it when i have the extension turned off um so it definitely improves my personal productivity and the other thing i mentioned was the microsoft python language server intellicode turns this on by default but if you want to use just the language server you can turn that on by going to your preferences and settings and setting the python.jedi enabled to false and one final demo that i'll share with you another preview feature is visual studio live share this is an extension for visual studio code that allows you to do realtime collaborative editing and debugging with vs code and for this part of the demo i'm going to go back to that unit test that i had that was failing and i'm going to get a more proficient developer to help me solve that unit test and in fact i'm going to ask don to help me code that live with me sitting from the front row and right in front of us okay so let's go back to that uh repo that we had earlier i'm gonna get back to the code example where i had the that failing unit test okay so this was that failing unit test here give it a quick run and so while that's running i'm going to install the vs live share extension so if you install this extension you just have to sign in you can sign in with a microsoft account or a github account and then you can easily generate a sharing link from your workspace so this share button has now appeared on the bottom of my window and if i click it it's going to copy a sharing link to the clipboard and then i can go and chat and say dawn please help and so don can just go click that link and that will actually stream all the files from my workspace over to him and just for a quick idea of what this looks like on his side i have a video recorded where this link pops up and he can click on that link that opens the collaboration session on his machine and just by clicking that link it will open up vs code on his side and it actually streams all the files into a visual studio liveshare workspace so he doesn't need to have a copy of the code and he can actually go and look at the code and he gets all the intellisense and features like that working so now that i see dawn's joined my collaborative session i can actually see where don's cursor is this is dawn right here in this little yellow link um don why don't you go ahead and take a look around on code so he's gone and looked at some other file here and i can follow him by clicking this little button here and say follow don giamani and so he's scrolling around looking at the code he can highlight text and look at interesting things and you know no hands over here so um he's he's seeing some interesting stuff he's getting familiar i can actually go off and look at different code than he's looking at so we can um get a good sense of the code base we can also do some collaborative debugging so i'm going to start debugging this unit test that i have that's failing and we're going to land right at that break point that i've just set there so let's give us a second all right so don can actually now control the debugger right so he can step through code he can step down into that method and he can go down to the bottom here and he can actually see if he can fix this unit test for us so he's set a breakpoint there he says this looks interesting and if you put a blank line here right so he's a put a piece of code in there which i can then take and if we rerun our unit test quickly here we'll see that he's now fixed our unit test for us there we go thanks don for fixing my bug so that was vs live share get the vs live share extension and start doing pair programming and code reviews with your coworkers and that concludes all the tips and tricks and features in this talk you can get productive with vs code today just go to code.visualstudio.com and for more information about what we're doing with the vs code extension or anything for python and microsoft including python and visual studio and python and azure check out our python blog codes and slides are available up here at this repo and follow us on twitter thank you so much for having me here this is just a wonderful conference and i really love this city thank you
