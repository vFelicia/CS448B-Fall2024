With timestamps:

00:07 - hey everybody it's
00:09 - Jesse
00:11 - and today we're going to learn
00:14 - about parameterized routing I'm actually
00:17 - going to set it up uh I started working
00:20 - on it
00:22 - before uh this this live stream because
00:26 - I thought it would take a long time and
00:27 - it turns out I pretty much got most of
00:30 - it
00:31 - done beforehand which is a good problem
00:35 - to
00:36 - have but I'm going to go through
00:39 - it and kind of test it uh with all of
00:44 - you and I'm I'm a little bit nervous
00:46 - because it worked so fast with very few
00:50 - problems so I'm expecting something to
00:52 - break I don't know if if you all have
00:54 - that that same feeling sometimes when
00:56 - things just work you get a little bit
00:59 - nervous like oh it's it's going to break
01:01 - I I know it um
01:06 - so I
01:08 - have a lot of things to share with you
01:11 - it's
01:13 - been it's been a while since my last
01:16 - live stream was Tuesday yeah so it's
01:19 - been a while so the W I went to syntax
01:22 - conon in Charleston South Carolina last
01:25 - week and so that's why I wasn't
01:28 - streaming the wi-fi at the conference
01:32 - was not reliable enough uh to stream
01:36 - from it kept making me sign back in uh
01:40 - and so I don't think there was any way I
01:43 - couldn't I couldn't even do a speed test
01:45 - to see uh the speed test just fail the
01:48 - wi-fi at the hotel was better but uh by
01:52 - the time I I got done with the
01:54 - conference got something to eat and got
01:56 - back to my hotel I was honestly just
02:00 - I was kind of tired and um I didn't
02:03 - think it would be a great stream so uh I
02:07 - missed streaming uh but now I'm back and
02:11 - I'm refreshed I did some interviews with
02:14 - some people at syntax conon and I'm
02:16 - going to share uh those with you uh we I
02:19 - think we're going to watch one at the
02:20 - end of this video so the way I did is I
02:23 - just filmed people asked them a few
02:25 - questions and I filmed them on on my
02:27 - phone and I'll just play the video what
02:31 - I'm hoping will happen is I can play the
02:33 - video and you guys will watch it on my
02:35 - screen and
02:38 - the audio will come through the speakers
02:41 - and hopefully the mic will pick it
02:42 - up I didn't try it yet I'm not sure if
02:45 - it'll work if you know of any other way
02:47 - that I could get working in like two
02:49 - minutes uh that would be better let me
02:52 - know I'm using OBS for for my streaming
02:57 - so if anybody's familiar with that but I
03:00 - think it it should work we'll see how it
03:02 - goes uh but I have I think maybe about
03:05 - five videos so as I stream I'll just do
03:08 - like one a day I also took a lot of
03:11 - notes and you know some of my thoughts
03:14 - on the different talks in the conference
03:15 - so I'll be sharing those with you uh
03:18 - from time to time and kind of giving you
03:21 - a just a quick summary of some of the
03:23 - things that we're talked about there's
03:24 - some some really cool stuff exciting
03:26 - things uh Charleston's a a great City if
03:29 - you ever get a chance to visit there uh
03:31 - or to go to syntax con I definitely
03:34 - recommend it great food uh especially
03:37 - great Seafood they're right you know
03:39 - right on the ocean there uh so anyway
03:43 - enough enough about my
03:45 - trip uh let's let's get to
03:48 - it I want to show
03:51 - you I'll show you the
03:56 - code so here's what we've done
04:00 - probably since let me let me think
04:03 - what's the last thing you all
04:05 - saw
04:08 - um okay so I think the last time I I
04:11 - didn't have we definitely didn't have a
04:13 - server.js file we were using the default
04:16 - routing that comes with nextjs so if if
04:19 - you're just joining us and you haven't
04:21 - seen any of the other videos where we're
04:24 - building uh a site with react but we use
04:27 - nextjs as our boiler plate and that
04:30 - comes built in with routing and with
04:32 - server side rendering so it it allowed
04:35 - us to get a react app up and running
04:37 - really
04:40 - fast but what we want to be able to do
04:44 - and this is where the parameterized
04:46 - routing comes in is when you go so
04:50 - normally when you go to a website that
04:53 - has a
04:55 - Blog you click to go to a certain post
04:59 - to an individual blog
05:01 - post we don't we don't know how many
05:03 - blog posts are going to be there so I
05:06 - I'm not going to manually
05:09 - hardcode pages in uh in next so you see
05:14 - let me let me zoom in
05:17 - here so if you see this Pages section
05:22 - with next everything you want to be a
05:24 - page has to be in this Page's folder so
05:26 - we definitely don't want to hardc code
05:29 - all of this
05:33 - this so what we need to do is make a way
05:37 - for pages to just be kind of built on
05:39 - the
05:40 - Fly and that's the parameterized routing
05:43 - so what we want to happen is when
05:45 - someone goes to the URL that has slash
05:48 - news at the end then there's going to be
05:50 - another slash and whatever's on the end
05:51 - of that that's going to be a new
05:55 - essentially it's going to be like a blog
05:56 - post but we're calling it news instead
05:58 - of blog
06:02 - so does that make sense I know there's a
06:04 - delay so you probably won't be able to
06:07 - answer me for another minute but
06:08 - hopefully it'll make sense as we go
06:10 - through and you actually see it
06:13 - demonstrated so we are
06:16 - pulling data from the WordPress API to
06:20 - do this so that adds another layer of
06:22 - complexity uh and we'll get to that so
06:24 - let me show you what I've done I'll go
06:26 - back to my my package Json file and this
06:29 - shows us all the dependencies so in
06:31 - order to get this this kind of custom
06:33 - routing going which next next is pretty
06:36 - cool in that if you need something more
06:40 - than what comes you know right off the
06:42 - bat with
06:43 - next all you have to do is add a
06:46 - server.js file and you can set up your
06:51 - you know your routing however you want
06:53 - really
06:54 - easy so all I've added here is
06:58 - Express and this lru cache which we
07:02 - don't we don't really need for routing
07:03 - but it's really cool I I'll show you
07:05 - what that does after we get done with
07:07 - the routing so that's it I just added
07:10 - basically to get the routing done just
07:12 - one more npm
07:13 - package so now let's go to the the
07:17 - server.js so if you're not familiar with
07:21 - node this might look weird to you if you
07:23 - are familiar with node it might still
07:25 - look weird to you
07:26 - maybe if I'm not doing it quite right
07:29 - but uh some some of the I am using es6
07:35 - so you'll see there's like Arrow
07:36 - functions I'm using const and let
07:39 - so when you see constant let just think
07:42 - there if you're not familiar with with
07:44 - es6 or es25 as it's called Uh and then
07:48 - when you see an arrow function just
07:49 - think like regular for now at least just
07:52 - think regular function like think that
07:54 - I've put the word function here and
07:56 - these are all you know normal functions
07:59 - uh
08:00 - basically they behave in pretty much the
08:02 - same way and for our purposes here
08:04 - that's uh that's all we need to worry
08:07 - about uh so I've required Express I've
08:11 - required next we're not going to worry
08:14 - about this cash for
08:15 - now here I've just set up a
08:18 - variable uh to so it'll know whether or
08:21 - not we're in you know development mode
08:23 - or whether we're in
08:27 - production I've set up
08:30 - uh the
08:34 - directory and I've told it where what
08:37 - directory to go to and let's see this is
08:40 - for the cash so we
08:42 - don't we don't need to worry about
08:46 - that this also for the cash also for the
08:49 - cash all right so here's what where it
08:54 - starts so we have Express as our server
08:58 - and so now we we can go server doget and
09:02 - now it's getting anything that's the
09:03 - slash basically we're going to render
09:06 - now I have this setup to render in Cache
09:09 - so it wouldn't if you weren't doing the
09:10 - caching it wouldn't necessarily do this
09:12 - so let me go down to our function here
09:14 - where it says render and cash so
09:18 - basically if we've rendered this before
09:20 - and we have a cash it's going to send
09:22 - the uh the cash version of the HTML
09:28 - otherwise
09:30 - it's going
09:32 - to yeah where we at sorry I'm trying to
09:36 - look at this uh R HTML okay otherwise
09:40 - it's going to say render to
09:42 - HTML so that's going to render on the
09:45 - server side all the HTML so it's going
09:48 - to get our
09:50 - calls sorry guys I was pretty much
09:52 - ignoring the live chat for a couple
09:55 - minutes
09:57 - um looks like it's not
10:00 - to I'm either boring you guys or uh I'm
10:03 - being confusing the live chat is pretty
10:06 - dead but
10:11 - um basically what it's going to do is
10:14 - render on the server all the HTML and
10:17 - then send all of that to the client so
10:19 - it's going to make the API calls to get
10:21 - the data we need from WordPress it's
10:23 - going to put that all
10:26 - together then once we do that once it's
10:29 - not going to do it again the next time
10:31 - it's just going to cash all that so
10:33 - think how much time that's going to save
10:34 - it's going to be really fast uh it
10:37 - doesn't have to make that whole trip to
10:40 - Wordpress and to get the data it's just
10:43 - going to be able to spit out that HTML
10:47 - it's it's not even going to have to go
10:48 - through the process of rendering at all
10:51 - uh so that's really cool now one thing
10:53 - you'll you'll notice I'll go back up to
10:55 - the top when we're just doing in Dev
10:58 - mode the cash time is really low uh so I
11:02 - it's like 100 milliseconds so we're not
11:04 - actually going to get the benefit and
11:06 - that's because I I want to be able to
11:08 - see the changes quickly I don't want to
11:10 - have to mess with with caching but once
11:13 - this goes onto the server and it's live
11:15 - then we set a much more reasonable Cash
11:18 - Time in this case we have one
11:20 - hour I will say this I grabbed a lot of
11:23 - this code and modified it from other
11:25 - places and I I'm sorry I I didn't put in
11:30 - all the places where I got it uh
11:33 - normally I do that I'm not sure what I
11:35 - was
11:36 - thinking uh I actually grabbed this code
11:39 - from a project that I did in March so I
11:42 - can't remember where I got this in March
11:44 - so uh if if this is your code and you
11:47 - see this let me know and I will um I
11:51 - will attribute it to you so I mean I
11:53 - have changed it so uh it might not be as
11:55 - easy to recognize but some of this is
11:58 - actually just from the next JS uh
12:00 - examples in their git
12:02 - repo
12:04 - so this is actually a part of their
12:08 - documentation um let's see all right so
12:11 - enough about the caching I think we know
12:13 - enough about that to understand what's
12:14 - going on so basically all you're doing
12:16 - here is I'm telling this server is if if
12:19 - we get this
12:21 - URL then we're going to render and cache
12:24 - the page that corresponds to that URL so
12:28 - uh in this case say if if the page says
12:30 - news then give us if the URL says news
12:34 - then give us the news page right what
12:36 - would normally be rendered with next is
12:38 - anything in this Pages folder so just
12:40 - kind of passing that on and rendering it
12:43 - uh as as next would
12:46 - do now here's the the different
12:49 - part this section
12:53 - here let me know if uh if the font's too
12:56 - small let me you know what I'm just
12:58 - going to make it bigger
12:59 - uh sometimes I I shrink it up to when
13:03 - I'm not streaming and I forget to make
13:05 - it bigger
13:06 - again okay so here's the cool part now
13:11 - when the URL has news plus
13:14 - some some string at the
13:17 - end we're going to do something
13:19 - different okay we're going to make this
13:22 - variable we call it query
13:24 - pams and this is just going to be an uh
13:27 - an object and it's going to say
13:30 - ID Rec prams ID this is just going to
13:34 - give us whatever this string is after
13:37 - the slash okay so we want that and we're
13:40 - going to pass that so we're going to do
13:42 - Rend rendering cach but we're going to
13:46 - we're going to tell it to render this
13:48 - single news page I'll show you the the
13:50 - markup for that in a second and then
13:52 - we're going to pass it this query
13:54 - pams okay so let's check out what's
13:57 - going on in the news
14:00 - page and so I did this all ahead of time
14:03 - because I I assumed that the server
14:05 - setting up the routing and stuff would
14:07 - take a really long time but it didn't so
14:10 - but here's what's different we already
14:12 - saw in a previous video how to make an
14:15 - API call using this get initial props uh
14:19 - function but now there's something
14:21 - different we didn't have this before
14:24 - this query ID this is giving us what we
14:28 - passed passed in on the server right so
14:31 - we passed in whatever the end of that
14:33 - URL
14:35 - was as ID and now we're getting it here
14:39 - so we can use inside of here ID and
14:43 - we've used it
14:45 - here so we've used
14:48 - ID as a variable and that's going to
14:50 - give us whatever that that string was
14:53 - after the final the slash at the end of
14:56 - the URL okay so this is just basic what
14:58 - we've already already done this is our
14:59 - base URL to our WordPress site and these
15:02 - are we're getting posts and then we have
15:05 - this filter we're going to filter by by
15:07 - name which is basically like the the
15:10 - slug uh if you're familiar with
15:12 - WordPress every post has this slug it's
15:14 - a unique um identifier unique
15:20 - string so we want that and we're going
15:22 - to search for that post we're basic
15:24 - we're going to make a call to the
15:25 - WordPress API to give us data for just
15:29 - that post with this with a slug name
15:32 - that that is going to be the same as
15:35 - that name uh at the end of the URL that
15:38 - we pulled in all this extra stuff is
15:41 - just I'm just telling the API what I
15:43 - want so I want these
15:47 - fields I don't need everything about the
15:50 - post because I'm not going to use it all
15:52 - I just need these these
15:55 - things so now we're just going to use
15:57 - fetch we're using isomorphic fetch
16:00 - meaning it's a version of fetch that can
16:02 - run on the
16:04 - server and if you're not familiar with
16:07 - fetch when I say fetch think like Ajax
16:11 - uh if you would have used jQuery for
16:13 - Ajax calls so all I'm doing here is just
16:17 - putting these two strings together
16:19 - because I want to search I want to use
16:21 - fetch to get the whole thing together
16:24 - and then what we return what we get back
16:28 - from that response is going to be some
16:30 - Json data and it's going to get the
16:32 - variable of data okay so down here we're
16:35 - going to do a lot of stuff with that
16:37 - that data some of this is just checking
16:40 - to make sure we don't get errors to make
16:42 - sure our data is really there and I can
16:44 - show
16:46 - you maybe it'll help if I show you what
16:49 - the data will look like so let me go
16:52 - I'll just grab
16:54 - these and I'll show you an example of
16:57 - what this data will be
17:04 - if you have questions as I'm going along
17:06 - I'll try to check back in on the the
17:08 - live
17:10 - chat if I don't see it right away at the
17:13 - end I will check out everything in the
17:16 - live chat and I will answer them if you
17:19 - can't stick around for the end then just
17:21 - put the question in the comments for the
17:25 - video and then I'll answer it later on I
17:28 - try to answer every question in the
17:30 - comments sometimes it it might take me a
17:32 - week or so if I'm busy but I do try to
17:34 - answer everything uh if you ask in the
17:38 - comments okay so let's
17:44 - go all right so on my other screen I was
17:47 - just making
17:49 - this this call okay so I'm going to have
17:53 - to make this a little bigger because I
17:55 - know this is this is really small even
17:57 - for me so I'm sure on your screen
17:58 - screens it's super
18:00 - small okay so this is what's returned
18:04 - this is the data we get back and that's
18:06 - in that this this data variable
18:11 - here so we've got this post in this case
18:15 - this the slug the ID for this at Le the
18:19 - ID in string form is hello world so
18:22 - we've gotten this hello world post we
18:25 - have a title we have the content
18:31 - we
18:32 - have category the category number not
18:35 - necessarily the name of the category and
18:37 - we have some additions a lot I have a
18:40 - lot of extra things in addition to the
18:43 - just basic WordPress API going on so if
18:45 - you're using the API you might not see
18:48 - all of these
18:50 - things uh I'm not sure if anybody's
18:52 - interested in me going over how I set up
18:54 - the WordPress API but if you are let me
18:56 - know in the comments and uh maybe I'll
18:59 - do a video on
19:00 - that so basically we've got the image in
19:03 - this case I just I threw in an image uh
19:06 - just so we could see the data from it so
19:08 - if you're not familiar with WordPress
19:10 - when you upload an image normally if the
19:12 - image is big enough it will
19:13 - automatically resize that image into
19:15 - several sizes so we have a thumbnail
19:17 - version of our image medium medium large
19:20 - large uh we have 2017 featured image so
19:24 - evidently the theme I'm running right
19:26 - now is
19:27 - 2017 um
19:30 - which it doesn't really matter what
19:31 - theme you're running if you're just
19:32 - pulling data from the API but it
19:35 - actually gives us two more
19:38 - versions and then we have the original
19:41 - version here at the bottom if we just
19:43 - pull Source URL we get the original
19:46 - version okay we have categories here so
19:49 - by default you just get the ID of the
19:51 - category but that's not very useful so I
19:55 - want the actual name of the category in
19:57 - this case we just have uncategorized
19:59 - because I didn't set up categories yet
20:02 - so we could also have tags I have no tag
20:05 - set up yet but we would see uh a similar
20:08 - thing uh if we wanted to uh to pull all
20:11 - the tags we could see that all right so
20:13 - that's the
20:14 - data which is useful if if you're not
20:17 - familiar with the API uh hopefully this
20:20 - will make a little bit more sense about
20:21 - what we're doing so let's just see when
20:23 - we want to work with this data variable
20:26 - we do we have to say this props right
20:29 - because what we've done here when it
20:31 - returns this data it's become a prop if
20:34 - you're not familiar with props last week
20:36 - at some point I did a video where we
20:38 - talked about props you can check that
20:41 - out so this props everything we do has
20:45 - to have this at the beginning and then
20:46 - we can get to the variable which is data
20:49 - okay so this props data now we're we're
20:53 - actually getting into that Json data
20:56 - that I just showed you okay so all this
20:58 - is checking for is do we actually have
21:00 - any data here if so then we want to grab
21:04 - the title so we want uh and I'm using a
21:08 - template literal syntax this is es6 or
21:11 - ES 20105 syntax when you do this it's
21:15 - just like a string except within the
21:18 - string if you put a dollar sign and a
21:20 - curly bracket anything in there is
21:23 - Javascript so you don't have
21:26 - to end your string put put a plus and
21:29 - then do your JavaScript put another plus
21:31 - and then start your string again you can
21:34 - just do it all in line so it's
21:36 - really a lot more clean looking takes up
21:39 - a lot less
21:41 - space so we' we've dropped down into
21:44 - here and into JavaScript here and we're
21:47 - we're getting that data but we just want
21:50 - the first item of that data
21:54 - so the way the uh the data comes in from
21:58 - word
21:59 - is uh everything's in an array right so
22:03 - we're grabbing the first item in the
22:05 - array and since we only grabbed one item
22:10 - right we only grabbed one post we're
22:12 - only going to have one item so I just
22:13 - want that first
22:14 - item and I want the title and then the
22:18 - what we always have to put rendered when
22:21 - we want the title or the content that's
22:23 - just the way they set up uh the um the
22:28 - the data from the API I'm not exactly
22:30 - sure why but I'm sure they had a good
22:31 - reason for doing that but we always have
22:33 - to add this rendered all right and then
22:35 - this is just going to be our page title
22:37 - so if you see we're actually going to
22:39 - use this down here we have title and
22:41 - then I am using dangerously set enter
22:43 - HTML and it sounds a lot scarier than it
22:46 - is it is scary if you don't know where
22:48 - your data is coming from but in this
22:49 - case we control all the
22:51 - data we we are going to be the only ones
22:54 - putting in the data and pulling it in
22:56 - now why would I need to set this
22:58 - uh normally I would set this if there
23:00 - were going to be some HTML Tags I'm
23:01 - bringing in but I'll never bring HTML
23:03 - tags in through this title but what
23:06 - might be brought in is a character
23:08 - that's not going to display properly uh
23:11 - so maybe like an and sign um I I've made
23:15 - it so that no you know WordPress default
23:18 - for titles is that you can't put HTML in
23:20 - there but you can put those special
23:21 - characters in there that will not look
23:24 - right you'll end up getting like the
23:26 - HTML encoding version of that character
23:28 - so that's why we do it like this when we
23:30 - do it like
23:31 - this we will
23:34 - get it we'll get it to display how it's
23:37 - supposed to display with the correct
23:39 - characters and not the HTML codes for
23:41 - those characters uh and so we've simply
23:44 - put
23:45 - in inside you know react component
23:49 - inside the uh the render function if we
23:52 - put a curly brace now we've dropped back
23:54 - into JavaScript and
23:56 - then now we're just adding this this is
24:00 - you know the react way of of putting
24:02 - this in here and we've just this title
24:05 - tag right because we've made
24:08 - this this uh title tag
24:12 - function and it's just going to return
24:15 - whatever is here now if let's say this
24:20 - page uh returns nothing maybe we
24:23 - misspelled it or that post just doesn't
24:24 - exist then we're just going to put news
24:27 - in the title
24:31 - well what would happen if we just tried
24:32 - to do this is that we get an error if it
24:35 - returned nothing so we always need to
24:37 - check to see if the data exists before
24:40 - you try to do anything with it otherwise
24:42 - you'll get an error you'll get the um
24:44 - the pink screen that react throws uh and
24:48 - you you don't want that certainly uh for
24:51 - your
24:53 - users okay that's the basic
24:56 - principle I'll go through and show you
24:58 - you at least one more time how we've
25:01 - done
25:03 - this down here in the
25:07 - body let me check um let me check the
25:11 - chat really quick to see if you had any
25:13 - questions okay good everybody's at this
25:17 - point either lost or you're
25:19 - understanding everything and you don't
25:20 - have questions so
25:24 - um okay so down
25:26 - here in this page
25:29 - page I want to be able to display
25:33 - something if the user tries to get a
25:35 - post that doesn't
25:38 - exist so I've created this error
25:42 - component I'll show you the error
25:45 - component I'm sure I have it up here
25:47 - somewhere there we go let's bring it
25:50 - over
25:51 - here okay so the eror component all it
25:54 - does is it gives us this you know Main
25:58 - which all our content goes in main
26:00 - except for uh navigation and Footers and
26:03 - it just has a little tag that says no
26:06 - content exists at this address please
26:08 - try another page just to let people know
26:12 - um and a more visually appealing way
26:15 - that they've essentially got a 404 here
26:18 - they've tried to look for Content that
26:19 - doesn't exist uh but it'll look a lot
26:21 - nicer and I'll show you what it looks
26:22 - like uh in a second okay so this is just
26:26 - checking if the data length equals zero
26:29 - meaning if there's no
26:31 - data show the error otherwise so this
26:35 - this is uh a Turner uh operator so this
26:39 - is basically an if statement uh a
26:42 - shorthand for an if
26:45 - statement within react with within the
26:47 - render
26:49 - function you normally you can't put if
26:52 - statements directly in here so if you
26:54 - want to do an if statement you have to
26:56 - do it in this way with theary uh
27:00 - operator okay
27:03 - so this is our if if there's no data
27:07 - then do this put throw the the error
27:11 - otherwise and that's what this uh colon
27:14 - is we're going to do this so otherwise
27:17 - we want to
27:19 - show this bit of
27:23 - HTML so we're going to you know just our
27:25 - regular markup we're going to put
27:27 - everything in Main we're going to wrap
27:28 - it all in that uh we're going to bring
27:30 - in our sticky nav just like we're doing
27:32 - on all our pages okay our sticky nav
27:34 - component and then we're going to drop
27:38 - down into a little bit of JavaScript and
27:39 - this is the
27:40 - check so we always have to check for
27:43 - data in this case I'm checking to see
27:46 - if a image has been uploaded if no image
27:50 - has been
27:52 - uploaded then better featured image is
27:54 - going to equal
27:56 - null and then we don't want to try to
27:58 - get that image because we'll have an
28:00 - error so first is we're going to check
28:03 - see is it equal to
28:04 - null and we want to make sure not only
28:07 - is it we want to see if it's equal to
28:09 - null but we also want to see if it has
28:12 - an image size of large because we don't
28:16 - want to show this image here is going to
28:18 - be like a big full screen
28:25 - image so we don't want to show a small
28:28 - image so somebody happened to upload a
28:30 - really tiny image I don't want to show a
28:32 - pixelated image I want to just kind of
28:34 - stop that image from showing up because
28:37 - you don't know somebody might be putting
28:40 - in content into your WordPress you know
28:42 - admin panel and they don't really
28:45 - understand you know image sizes and how
28:47 - that that works so we want to just
28:49 - protect the user from from uh seeing a
28:53 - really pixelated image so that's what
28:56 - that check does so assuming there is an
28:58 - image and that image is large enough
29:03 - then or I'm sorry the first thing so if
29:06 - there is isn't an image or if that image
29:09 - isn't large enough then we're just going
29:11 - to show this
29:14 - title
29:16 - and wait how do that I'm sorry I had it
29:19 - backwards let me start over so I don't
29:21 - confuse you guys
29:23 - so
29:25 - if the featured image is not equal to
29:28 - null so we have an image and that image
29:31 - is large the then we will add our title
29:35 - component we're going to pass the title
29:38 - the props to the title component of you
29:40 - know what is the title that we pulled
29:42 - from that that API
29:44 - data then we're going to give it the URL
29:47 - of the image and we've pulled that right
29:50 - from our data as well it's just kind of
29:52 - long so this is just the same thing
29:54 - we've got the data we're accessing the
29:56 - first uh and in this case only item in
30:00 - that array we're going to go better
30:02 - featured image media details sizes large
30:06 - and then in this case I'm pulling the
30:07 - source URL I wouldn't always want to do
30:11 - that because somebody could upload an
30:13 - insanely large image so we'll probably
30:16 - change this but for now it it
30:19 - works if we don't have a large enough
30:21 - image or any image at all then we're
30:23 - going to display the same thing we're
30:24 - going to do the title we're going to
30:26 - pass in same dat as we did before for
30:29 - the for the title but then for the image
30:32 - path I just have an image file in there
30:35 - we can set that up differently I've set
30:38 - it up in different sites to actually
30:40 - pull a random image from an array of
30:43 - images uh we could set it up so there's
30:45 - no image at
30:47 - all however we want to set that up but
30:49 - for now I'm just putting this image in
30:51 - just so there's something there okay and
30:54 - the rest of it's really a lot more
30:55 - simple we just have our basic you know
30:58 - container a row column and then within
31:00 - that column we're we're doing the
31:02 - dangerously set enter HTML again so
31:04 - don't only do this if you really have
31:06 - complete control over what data is
31:08 - coming in don't grab somebody's random
31:11 - data for this uh but I'm setting this to
31:14 - pull in that data and I need to do it
31:16 - like this because that's going to have
31:17 - HTML tags and things in there that we
31:20 - need to be able to bring in and have it
31:22 - render properly as HTML otherwise if we
31:26 - just try to do this down here and not do
31:28 - it this way with dangry set in HTML we
31:31 - would actually see those tags printed on
31:33 - the
31:34 - screen uh so in this case we're just
31:36 - grabbing the content the rendered
31:39 - content and that's it let me show you
31:41 - what it looks
31:43 - like so let's go in if you notice we
31:46 - have some UI changes uh this is probably
31:49 - what this is going to end up looking
31:51 - like I had a lot of good suggestions
31:52 - from you all as to what this should look
31:54 - like um I ended up not being able to do
31:57 - any type of sh because this is an image
32:00 - that is very much wanted this little
32:02 - flourish thing here and this is just uh
32:05 - I think it's a ping so I I can't get the
32:09 - shadow behind all this uh I'm sure
32:11 - there's probably some way to do it but
32:13 - I'm not great with image editing and I
32:14 - don't have a lot of time left so I'm
32:16 - going to do something like this it could
32:17 - definitely use a little bit more padding
32:19 - but uh we'll see I'm not like 100% super
32:23 - happy with how it looks
32:25 - but that's probably going to end up with
32:27 - it
32:28 - uh what we have at least for now so we
32:31 - have to launch on Thursday all right so
32:33 - let me go to news the news
32:38 - page and you can see over here this is
32:42 - actually you know we've started our our
32:45 - server
32:47 - and we did have to make one change don't
32:50 - let me forget to show you that we had to
32:52 - make a change in how we start our server
32:55 - uh I'll show you that in a second but
32:57 - it's actually told told us that this is
32:58 - a cash Miss so we didn't have this page
33:02 - cached so it had to build the page all
33:05 - right so here's our just demo data but
33:08 - now we want to go in and let's let's
33:12 - type go to Hello World right so I know I
33:16 - have a post that says hello
33:18 - world okay and this is our this is the
33:21 - content from that post so it's pulled it
33:24 - in I don't have a page hardcoded in the
33:28 - pages folder that says hello world so
33:30 - this has actually created this page that
33:32 - wasn't there before and as long as
33:35 - there's a page with this slug within
33:38 - WordPress we're going to get it and I
33:40 - could have thousands of pages within
33:41 - WordPress thousands of of
33:43 - posts and I can pull all of those so
33:47 - just you know we've built one template
33:49 - file this is not like a New Concept at
33:51 - all but we built one template file and
33:54 - now we can have thousands of pages based
33:56 - on that one template
33:58 - so uh yeah I know templates have been
34:00 - around for a long time but uh it's still
34:03 - cool when you uh to do that to set that
34:06 - up because it saves so much time and
34:09 - your site looks huge uh even though
34:11 - you've only really made one
34:13 - page so for some reason uh it's giving
34:17 - me a chors error when I try to pull this
34:20 - image from Local Host so I'm not really
34:22 - sure maybe uh I'll have to set something
34:24 - different in WordPress so it's not
34:26 - actually pulling the image uh but
34:28 - normally the image would be behind
34:30 - here now let's see if if I did something
34:33 - so let me just put an extra D on the
34:37 - Endor
34:40 - Oops why did it give me that we might
34:44 - have found a
34:49 - bug I think we did find a
34:56 - bug
34:58 - yes we did for some
35:02 - reason I'm actually kind of glad this
35:04 - happened because now I'll get to really
35:06 - do some
35:07 - coding um for some reason we keep
35:11 - getting to the hello world
35:16 - page let's see now now it's not taking
35:19 - us
35:21 - there all right while we're waiting for
35:23 - that let me check
35:26 - out
35:29 - someone actually commented design flaw
35:33 - um let me know what what is the design
35:35 - flow are we talking about this not
35:38 - working right now or are we talking
35:39 - about this um this thing behind the
35:44 - title I I think I would probably agree
35:46 - with you if you're talking about this
35:47 - title or or even the the other thing I'm
35:51 - gonna actually restart the server I've
35:52 - been having a weird error where um it
35:56 - just hangs
35:58 - and won't load the page I've never had
36:01 - that happen before I do have an error
36:02 - showing up in Dev tools and I'll just
36:05 - have to research that and figure out
36:07 - what's going on okay now let's try to
36:13 - reload
36:19 - wow
36:22 - H all
36:26 - right
36:30 - whoa it's not working okay which
36:34 - is this is why I do this live so you can
36:37 - see when things get messed up and how we
36:39 - work through it I may not be able to get
36:41 - this completely fixed before we stop the
36:44 - live stream uh which is crazy I did test
36:46 - it right before the live stream and it
36:48 - was
36:49 - working uh I can
36:51 - maybe try to do a hard
36:55 - refresh hey well at least I got the
36:57 - image to load now um that's really weird
37:02 - let me see if it'll load this now I do
37:04 - have another post that I know post to
37:08 - that is a real post no it's it's still
37:10 - showing the same
37:12 - thing
37:15 - um let's check our server well let me
37:18 - show you real quick what I did have to
37:19 - do we changed the uh the dev it used to
37:22 - be the command used to be just next now
37:25 - since we're using our our custom server
37:28 - instead of the next one we have to say
37:30 - node and then server.js as our Command
37:34 - so that's the the only kind of
37:36 - difference uh when I first tried this I
37:39 - forgot to do this part and I left it as
37:40 - an accident it was acting weird and I
37:42 - couldn't figure it out then I remembered
37:44 - that
37:46 - so really only one other file you have
37:49 - to edit to see get this working or at
37:51 - least somewhat
37:54 - working
37:56 - so what I
37:59 - guessing is
38:02 - happening is that
38:04 - somehow something is getting cashed
38:06 - somewhere along the way because it keeps
38:08 - showing me this same data uh when it
38:11 - shouldn't show me that same
38:14 - data so I'll have to figure that out
38:17 - because I
38:19 - shouldn't it shouldn't be
38:24 - caching cashing okay I'll figure that
38:28 - out I I think we've gone through enough
38:30 - to see how this works how it at least
38:32 - should work and uh I'll have to double
38:36 - check I'll go back and look at my code
38:38 - when I did this sometime in March and it
38:40 - worked in March and I'll see if I missed
38:43 - any steps and I'll let you know
38:47 - tomorrow what actually was the problem
38:50 - assuming I figured out by tomorrow which
38:51 - I think I will I'm going to go to um I'm
38:56 - going to check out the live chat oh and
38:58 - I want to show you the um the video from
39:01 - syntox conon so let me check real
39:05 - quick in the live
39:08 - chat we have somebody from latia
39:12 - Netherlands somebody asked the text
39:14 - editor okay they got a response it is
39:17 - Adam uh the theme is the seti theme SE
39:22 - TI someone said this is awesome thank
39:26 - you soone asked about shortcuts uh Adam
39:29 - does have shortcuts they asked
39:30 - specifically if the shortcuts were like
39:32 - Sublime I have not used Sublime so I
39:34 - don't know if they are the same
39:37 - shortcuts someone asked if it's like
39:40 - Visual Studio code does um yeah it's I
39:45 - do use Visual Studio code and atom uh so
39:49 - visual studio code can let you import
39:51 - shortcuts so I actually have it set to
39:52 - use all the same shortcuts as
39:56 - adom someone from uh
40:02 - Nairobi oh okay somebody says they're
40:04 - watching and learning in Charleston
40:05 - South Carolina and the attendant stox
40:07 - conon as well
40:10 - awesome so really that that's really
40:13 - cool uh I Love Charleston I love being
40:17 - down there hopefully I can come back
40:18 - again uh next year for uh for SX con I
40:22 - think it's in first week of June next
40:23 - year if you're interested uh uh check it
40:26 - out
40:27 - somebody said my video becomes fuzzy
40:30 - sometimes um that's probably the
40:34 - internet uh wherever you're at uh
40:37 - because my stream so far it says the
40:40 - analytics on this says the stream has
40:42 - been in good health uh the whole time so
40:44 - I'm assuming maybe it's it's somewhere
40:47 - else uh is the connection
40:49 - problem um why can't I get my navbar
40:52 - collapse to work in
40:54 - react I would check is is is your Navar
40:59 - um are you running that with
41:03 - jQuery sometimes depending like I'll
41:06 - notice things won't work when I just use
41:08 - like the hot module reloading if I then
41:10 - do a hard like a refresh in the browser
41:13 - manually sometimes they do work the
41:16 - other problem could be
41:18 - um it it's possible it could be an issue
41:21 - with uh when the page is loading so
41:23 - normally you have that document. ready
41:25 - function with jQuery uh and it needs to
41:28 - be able to to grab the element once it's
41:31 - already on the page so I would say those
41:33 - two things to look out for um just see
41:37 - see about a refresh and if it's the
41:39 - refresh issue with the hot module
41:40 - reloading it won't be an issue when you
41:42 - go to production because you're no
41:44 - longer using that
41:46 - reloading uh if it's some issue with the
41:49 - uh document ready function
41:52 - uh it's possible that you may be able to
41:55 - put it inside the component did Mount uh
41:58 - function that that you can use in
42:01 - reacts you just need to make uh a
42:04 - function available to be used there
42:08 - so I guess I've done that before there
42:11 - is a way to import jQuery into your
42:14 - react component and use it and then
42:16 - there's
42:19 - also I've actually made I don't know how
42:21 - great this is but I've made a function
42:25 - outside of the document. ready function
42:27 - so it's basically in the global scope
42:30 - and inside that function I've done
42:32 - whatever jQuery thing I need to do then
42:35 - I've called that function from within
42:38 - the component did
42:40 - Mount uh function within my
42:43 - component so at that point everything's
42:46 - been loaded then the function gets
42:49 - called so you don't need that document
42:51 - already function and that has worked for
42:54 - me sometimes so hopefully that was that
42:56 - made sense to
42:58 - you uh ideally if you can just rework
43:01 - that
43:03 - into like some vanilla JavaScript you
43:05 - can just put that JavaScript directly in
43:07 - the component in the
43:10 - um You probably won't even depending on
43:14 - how it works you might have to put it
43:15 - inside like component demount or
43:16 - something like that but uh that would be
43:19 - the best thing if you
43:26 - can
43:33 - okay and somebody's talking about uh so
43:35 - I mentioned before the design flaw it
43:36 - said the homepage soft software design
43:38 - flaw flow control I okay I'm still not
43:42 - quite
43:43 - understanding so uh Nazar if you could
43:46 - maybe explain it to me maybe in the
43:47 - comments or something uh I definitely
43:49 - want to know uh if I have a flaw here
43:53 - what's going on uh I'm just not kind of
43:55 - not following uh what you're saying
43:57 - there maybe I just don't know enough
43:59 - about it to realize what you're talking
44:04 - about someone says hit the API endpoint
44:06 - for a non-existent page see what data is
44:07 - returning great idea let's do that right
44:10 - now let me bring this
44:13 - back
44:14 - and we'll go filter name hello world so
44:18 - let's take out this D here and let's
44:21 - just search okay we are we are getting
44:23 - no data returned uh when I switch that
44:26 - out so
44:27 - so the caching isn't on the WordPress
44:31 - side of things so that at least narrows
44:33 - it down so thank you uh Patrick for that
44:36 - advice uh I'll just give it another shot
44:39 - here just to see no yeah it's still
44:41 - doing that so at least I know whatever
44:43 - thing is wrong which I'm assuming is
44:46 - cashing we'll see is happening on on the
44:49 - react side of things and not uh not on
44:52 - the WordPress
44:56 - side
45:03 - oh okay someone uh has said you know if
45:06 - you want to squiggle with the shadowing
45:08 - can send it to you two SE wow actually
45:12 - um that's that's a really good
45:15 - I'm
45:18 - uh I'm I'm very grateful that you would
45:20 - uh offer to do that if you could I'd
45:23 - love to try it out and see uh if it if
45:26 - it looks good if it works if it makes it
45:29 - readable um I can't guarantee that I'd
45:31 - actually use it so I'd hate to have you
45:32 - do you know work uh for nothing uh just
45:36 - because I don't make the final design
45:38 - decisions I actually have to go back and
45:40 - and uh get consensus on these design
45:43 - decisions so I can't guarantee that I'll
45:46 - use it but I'd love to see how it looks
45:48 - uh if if you're still watching and you
45:49 - don't mind uh you
45:52 - can
45:53 - um you can check I don't wonder if I
45:56 - have my email I don't know I I have a
45:58 - lot of my contact info either put a
45:59 - comment in or direct message me on
46:01 - Twitter uh and I can let you know where
46:03 - to send the file
46:06 - to all
46:12 - right all right thank
46:18 - you okay so I've gotten through uh what
46:21 - was on the live chat so far um if you're
46:24 - still sticking around uh thanks for
46:26 - watching I'm going to try to play this
46:28 - video that I I mentioned at the
46:29 - beginning uh if you didn't if you didn't
46:31 - hear I've done some interviews some very
46:33 - short interviews with people at syntax
46:35 - Con in the conference I went to last
46:37 - week and I'm just going to play them I
46:39 - asked them four questions just four I
46:42 - asked them who they were what their name
46:44 - was uh what they
46:46 - did uh you know for a job I asked them
46:50 - what was one technology that they're
46:53 - really excited about one new technology
46:56 - and then I also o asked them what advice
46:58 - they would have for people who are just
46:59 - getting started in in programming uh so
47:03 - I just asked those four questions to
47:05 - everybody I interviewed because I
47:07 - thought that might be helpful for for
47:08 - you all watching especially if you're
47:10 - just starting
47:11 - out so let me go
47:15 - over okay here's the video um and this
47:19 - is uh Jabari
47:22 - Dawkins
47:23 - and let me bring this back to the
47:26 - beginning
47:27 - hopefully this will
47:32 - play
47:37 - maybe an error occurred it figures I
47:42 - haded playing earlier today let me try
47:44 - to get it going uh on my other
47:55 - screen
47:58 - I feel
47:59 - like I'm I'm Rusty at this I haven't
48:02 - done it in like almost a week so sorry
48:06 - about
48:07 - that things just aren't going as
48:09 - smoothly as they normally do okay I got
48:11 - it playing on my other screen so let me
48:14 - um let me pull this
48:17 - over if I
48:24 - can okay
48:29 - okay so here's what I'm going to try to
48:33 - do I'm going to unplug my headphones
48:37 - first and see if I can get this to play
48:40 - over the
48:43 - speakers let's make sure my volume's
48:47 - up all right that sounds like it'll end
48:49 - up being pretty loud so let me know if
48:51 - you can hear this there's a little
48:53 - background noise in the video I took
48:54 - this like right when we were kind of
48:56 - hanging out out before the conference
48:58 - started having breakfast so let's give
49:01 - it a
49:04 - shot software engineer over at snack um
49:08 - some pretty cool interesting technology
49:10 - I'm interested in learning about is uh
49:13 - uh what Microsoft is doing with the duet
49:17 - framework learning C what the uh new
49:21 - technologies they have going on um as
49:24 - far as advice I'd say uh really network
49:29 - network and get to know the people in
49:32 - Tex they can definitely help you out uh
49:36 - not only just exposing you to new
49:38 - technologies but also just uh acting as
49:41 - a ventor um so you never know you
49:46 - might thank
49:49 - you okay let me know could you hear
49:53 - that and was the background noise too
49:55 - much the other videos should be better
49:57 - with background noise I ended up doing
49:58 - the last few videos uh
50:00 - outside uh just so that I didn't have uh
50:04 - all the people talking from the
50:06 - conference so I'll wait I know there's a
50:08 - little bit of a delay I'll wait a few
50:10 - seconds here and see um which if you
50:13 - guys could hear
50:25 - that
50:34 - okay the delay must be pretty crazy
50:38 - um okay all right now it's finally
50:40 - coming in okay we said the background
50:42 - noise was a bit much but it was doable
50:44 - thanks for sharing I could hear him
50:46 - actually met him there but it was a lot
50:48 - of background noise yeah sorry about the
50:49 - background noise I didn't realized until
50:51 - I watched it later on uh how bad the
50:54 - background noise was so I I wish I would
50:56 - have like maybe watched it immediately
50:58 - and tried to do it again uh we're
51:00 - actually we're kind of running out of
51:01 - time before the conference started but
51:04 - um yeah the the other ones should be
51:06 - better there's only maybe one other
51:07 - video where some people started talking
51:10 - loudly in the middle of it but all the
51:11 - rest of them should be fine I think I
51:13 - only did
51:14 - five uh
51:17 - but anyway that's all I have for now I'm
51:20 - going to get to work on trying to figure
51:22 - out what I messed up so that it keeps
51:25 - returning the same pay to me and I will
51:29 - um I'll let you know maybe either in the
51:32 - comments to this recording uh when when
51:34 - the video gets posted or uh tomorrow
51:37 - maybe when when we start the next stream
51:39 - I'll let you know what uh what went
51:41 - wrong uh but I actually like when things
51:44 - go wrong because that's like that's just
51:47 - how things go sometimes you got to deal
51:49 - with with failure uh and temporary
51:53 - setbacks uh but thanks for watching
51:56 - especially if you're still sticking
51:57 - around uh thank you for sticking around
52:00 - all this time I went well over my normal
52:03 - uh half
52:04 - hour and uh I'll see you all tomorrow
52:08 - and especially thank you to um tus
52:11 - Durant sorry if I messed up your name at
52:14 - all um thank you for uh editing that
52:18 - file for me and uh I'll I'll check
52:21 - Twitter and check your uh your DM on
52:23 - Twitter and see how that looks
52:27 - the uh I'll put the link to this site I
52:29 - do have this on an actual server now too
52:31 - so I'll sync everything up to the server
52:34 - and I'll put the link in the description
52:35 - so you guys can check that out there's
52:37 - already a link to the uh GitHub repo for
52:40 - this so you can play around with it if
52:42 - you want um and make any suggestions
52:47 - that you might have I'm certainly no no
52:49 - expert and I'm open to your help thanks
52:51 - for watching I'll be back tomorrow have
52:54 - a great day

Cleaned transcript:

hey everybody it's Jesse and today we're going to learn about parameterized routing I'm actually going to set it up uh I started working on it before uh this this live stream because I thought it would take a long time and it turns out I pretty much got most of it done beforehand which is a good problem to have but I'm going to go through it and kind of test it uh with all of you and I'm I'm a little bit nervous because it worked so fast with very few problems so I'm expecting something to break I don't know if if you all have that that same feeling sometimes when things just work you get a little bit nervous like oh it's it's going to break I I know it um so I have a lot of things to share with you it's been it's been a while since my last live stream was Tuesday yeah so it's been a while so the W I went to syntax conon in Charleston South Carolina last week and so that's why I wasn't streaming the wifi at the conference was not reliable enough uh to stream from it kept making me sign back in uh and so I don't think there was any way I couldn't I couldn't even do a speed test to see uh the speed test just fail the wifi at the hotel was better but uh by the time I I got done with the conference got something to eat and got back to my hotel I was honestly just I was kind of tired and um I didn't think it would be a great stream so uh I missed streaming uh but now I'm back and I'm refreshed I did some interviews with some people at syntax conon and I'm going to share uh those with you uh we I think we're going to watch one at the end of this video so the way I did is I just filmed people asked them a few questions and I filmed them on on my phone and I'll just play the video what I'm hoping will happen is I can play the video and you guys will watch it on my screen and the audio will come through the speakers and hopefully the mic will pick it up I didn't try it yet I'm not sure if it'll work if you know of any other way that I could get working in like two minutes uh that would be better let me know I'm using OBS for for my streaming so if anybody's familiar with that but I think it it should work we'll see how it goes uh but I have I think maybe about five videos so as I stream I'll just do like one a day I also took a lot of notes and you know some of my thoughts on the different talks in the conference so I'll be sharing those with you uh from time to time and kind of giving you a just a quick summary of some of the things that we're talked about there's some some really cool stuff exciting things uh Charleston's a a great City if you ever get a chance to visit there uh or to go to syntax con I definitely recommend it great food uh especially great Seafood they're right you know right on the ocean there uh so anyway enough enough about my trip uh let's let's get to it I want to show you I'll show you the code so here's what we've done probably since let me let me think what's the last thing you all saw um okay so I think the last time I I didn't have we definitely didn't have a server.js file we were using the default routing that comes with nextjs so if if you're just joining us and you haven't seen any of the other videos where we're building uh a site with react but we use nextjs as our boiler plate and that comes built in with routing and with server side rendering so it it allowed us to get a react app up and running really fast but what we want to be able to do and this is where the parameterized routing comes in is when you go so normally when you go to a website that has a Blog you click to go to a certain post to an individual blog post we don't we don't know how many blog posts are going to be there so I I'm not going to manually hardcode pages in uh in next so you see let me let me zoom in here so if you see this Pages section with next everything you want to be a page has to be in this Page's folder so we definitely don't want to hardc code all of this this so what we need to do is make a way for pages to just be kind of built on the Fly and that's the parameterized routing so what we want to happen is when someone goes to the URL that has slash news at the end then there's going to be another slash and whatever's on the end of that that's going to be a new essentially it's going to be like a blog post but we're calling it news instead of blog so does that make sense I know there's a delay so you probably won't be able to answer me for another minute but hopefully it'll make sense as we go through and you actually see it demonstrated so we are pulling data from the WordPress API to do this so that adds another layer of complexity uh and we'll get to that so let me show you what I've done I'll go back to my my package Json file and this shows us all the dependencies so in order to get this this kind of custom routing going which next next is pretty cool in that if you need something more than what comes you know right off the bat with next all you have to do is add a server.js file and you can set up your you know your routing however you want really easy so all I've added here is Express and this lru cache which we don't we don't really need for routing but it's really cool I I'll show you what that does after we get done with the routing so that's it I just added basically to get the routing done just one more npm package so now let's go to the the server.js so if you're not familiar with node this might look weird to you if you are familiar with node it might still look weird to you maybe if I'm not doing it quite right but uh some some of the I am using es6 so you'll see there's like Arrow functions I'm using const and let so when you see constant let just think there if you're not familiar with with es6 or es25 as it's called Uh and then when you see an arrow function just think like regular for now at least just think regular function like think that I've put the word function here and these are all you know normal functions uh basically they behave in pretty much the same way and for our purposes here that's uh that's all we need to worry about uh so I've required Express I've required next we're not going to worry about this cash for now here I've just set up a variable uh to so it'll know whether or not we're in you know development mode or whether we're in production I've set up uh the directory and I've told it where what directory to go to and let's see this is for the cash so we don't we don't need to worry about that this also for the cash also for the cash all right so here's what where it starts so we have Express as our server and so now we we can go server doget and now it's getting anything that's the slash basically we're going to render now I have this setup to render in Cache so it wouldn't if you weren't doing the caching it wouldn't necessarily do this so let me go down to our function here where it says render and cash so basically if we've rendered this before and we have a cash it's going to send the uh the cash version of the HTML otherwise it's going to yeah where we at sorry I'm trying to look at this uh R HTML okay otherwise it's going to say render to HTML so that's going to render on the server side all the HTML so it's going to get our calls sorry guys I was pretty much ignoring the live chat for a couple minutes um looks like it's not to I'm either boring you guys or uh I'm being confusing the live chat is pretty dead but um basically what it's going to do is render on the server all the HTML and then send all of that to the client so it's going to make the API calls to get the data we need from WordPress it's going to put that all together then once we do that once it's not going to do it again the next time it's just going to cash all that so think how much time that's going to save it's going to be really fast uh it doesn't have to make that whole trip to Wordpress and to get the data it's just going to be able to spit out that HTML it's it's not even going to have to go through the process of rendering at all uh so that's really cool now one thing you'll you'll notice I'll go back up to the top when we're just doing in Dev mode the cash time is really low uh so I it's like 100 milliseconds so we're not actually going to get the benefit and that's because I I want to be able to see the changes quickly I don't want to have to mess with with caching but once this goes onto the server and it's live then we set a much more reasonable Cash Time in this case we have one hour I will say this I grabbed a lot of this code and modified it from other places and I I'm sorry I I didn't put in all the places where I got it uh normally I do that I'm not sure what I was thinking uh I actually grabbed this code from a project that I did in March so I can't remember where I got this in March so uh if if this is your code and you see this let me know and I will um I will attribute it to you so I mean I have changed it so uh it might not be as easy to recognize but some of this is actually just from the next JS uh examples in their git repo so this is actually a part of their documentation um let's see all right so enough about the caching I think we know enough about that to understand what's going on so basically all you're doing here is I'm telling this server is if if we get this URL then we're going to render and cache the page that corresponds to that URL so uh in this case say if if the page says news then give us if the URL says news then give us the news page right what would normally be rendered with next is anything in this Pages folder so just kind of passing that on and rendering it uh as as next would do now here's the the different part this section here let me know if uh if the font's too small let me you know what I'm just going to make it bigger uh sometimes I I shrink it up to when I'm not streaming and I forget to make it bigger again okay so here's the cool part now when the URL has news plus some some string at the end we're going to do something different okay we're going to make this variable we call it query pams and this is just going to be an uh an object and it's going to say ID Rec prams ID this is just going to give us whatever this string is after the slash okay so we want that and we're going to pass that so we're going to do Rend rendering cach but we're going to we're going to tell it to render this single news page I'll show you the the markup for that in a second and then we're going to pass it this query pams okay so let's check out what's going on in the news page and so I did this all ahead of time because I I assumed that the server setting up the routing and stuff would take a really long time but it didn't so but here's what's different we already saw in a previous video how to make an API call using this get initial props uh function but now there's something different we didn't have this before this query ID this is giving us what we passed passed in on the server right so we passed in whatever the end of that URL was as ID and now we're getting it here so we can use inside of here ID and we've used it here so we've used ID as a variable and that's going to give us whatever that that string was after the final the slash at the end of the URL okay so this is just basic what we've already already done this is our base URL to our WordPress site and these are we're getting posts and then we have this filter we're going to filter by by name which is basically like the the slug uh if you're familiar with WordPress every post has this slug it's a unique um identifier unique string so we want that and we're going to search for that post we're basic we're going to make a call to the WordPress API to give us data for just that post with this with a slug name that that is going to be the same as that name uh at the end of the URL that we pulled in all this extra stuff is just I'm just telling the API what I want so I want these fields I don't need everything about the post because I'm not going to use it all I just need these these things so now we're just going to use fetch we're using isomorphic fetch meaning it's a version of fetch that can run on the server and if you're not familiar with fetch when I say fetch think like Ajax uh if you would have used jQuery for Ajax calls so all I'm doing here is just putting these two strings together because I want to search I want to use fetch to get the whole thing together and then what we return what we get back from that response is going to be some Json data and it's going to get the variable of data okay so down here we're going to do a lot of stuff with that that data some of this is just checking to make sure we don't get errors to make sure our data is really there and I can show you maybe it'll help if I show you what the data will look like so let me go I'll just grab these and I'll show you an example of what this data will be if you have questions as I'm going along I'll try to check back in on the the live chat if I don't see it right away at the end I will check out everything in the live chat and I will answer them if you can't stick around for the end then just put the question in the comments for the video and then I'll answer it later on I try to answer every question in the comments sometimes it it might take me a week or so if I'm busy but I do try to answer everything uh if you ask in the comments okay so let's go all right so on my other screen I was just making this this call okay so I'm going to have to make this a little bigger because I know this is this is really small even for me so I'm sure on your screen screens it's super small okay so this is what's returned this is the data we get back and that's in that this this data variable here so we've got this post in this case this the slug the ID for this at Le the ID in string form is hello world so we've gotten this hello world post we have a title we have the content we have category the category number not necessarily the name of the category and we have some additions a lot I have a lot of extra things in addition to the just basic WordPress API going on so if you're using the API you might not see all of these things uh I'm not sure if anybody's interested in me going over how I set up the WordPress API but if you are let me know in the comments and uh maybe I'll do a video on that so basically we've got the image in this case I just I threw in an image uh just so we could see the data from it so if you're not familiar with WordPress when you upload an image normally if the image is big enough it will automatically resize that image into several sizes so we have a thumbnail version of our image medium medium large large uh we have 2017 featured image so evidently the theme I'm running right now is 2017 um which it doesn't really matter what theme you're running if you're just pulling data from the API but it actually gives us two more versions and then we have the original version here at the bottom if we just pull Source URL we get the original version okay we have categories here so by default you just get the ID of the category but that's not very useful so I want the actual name of the category in this case we just have uncategorized because I didn't set up categories yet so we could also have tags I have no tag set up yet but we would see uh a similar thing uh if we wanted to uh to pull all the tags we could see that all right so that's the data which is useful if if you're not familiar with the API uh hopefully this will make a little bit more sense about what we're doing so let's just see when we want to work with this data variable we do we have to say this props right because what we've done here when it returns this data it's become a prop if you're not familiar with props last week at some point I did a video where we talked about props you can check that out so this props everything we do has to have this at the beginning and then we can get to the variable which is data okay so this props data now we're we're actually getting into that Json data that I just showed you okay so all this is checking for is do we actually have any data here if so then we want to grab the title so we want uh and I'm using a template literal syntax this is es6 or ES 20105 syntax when you do this it's just like a string except within the string if you put a dollar sign and a curly bracket anything in there is Javascript so you don't have to end your string put put a plus and then do your JavaScript put another plus and then start your string again you can just do it all in line so it's really a lot more clean looking takes up a lot less space so we' we've dropped down into here and into JavaScript here and we're we're getting that data but we just want the first item of that data so the way the uh the data comes in from word is uh everything's in an array right so we're grabbing the first item in the array and since we only grabbed one item right we only grabbed one post we're only going to have one item so I just want that first item and I want the title and then the what we always have to put rendered when we want the title or the content that's just the way they set up uh the um the the data from the API I'm not exactly sure why but I'm sure they had a good reason for doing that but we always have to add this rendered all right and then this is just going to be our page title so if you see we're actually going to use this down here we have title and then I am using dangerously set enter HTML and it sounds a lot scarier than it is it is scary if you don't know where your data is coming from but in this case we control all the data we we are going to be the only ones putting in the data and pulling it in now why would I need to set this uh normally I would set this if there were going to be some HTML Tags I'm bringing in but I'll never bring HTML tags in through this title but what might be brought in is a character that's not going to display properly uh so maybe like an and sign um I I've made it so that no you know WordPress default for titles is that you can't put HTML in there but you can put those special characters in there that will not look right you'll end up getting like the HTML encoding version of that character so that's why we do it like this when we do it like this we will get it we'll get it to display how it's supposed to display with the correct characters and not the HTML codes for those characters uh and so we've simply put in inside you know react component inside the uh the render function if we put a curly brace now we've dropped back into JavaScript and then now we're just adding this this is you know the react way of of putting this in here and we've just this title tag right because we've made this this uh title tag function and it's just going to return whatever is here now if let's say this page uh returns nothing maybe we misspelled it or that post just doesn't exist then we're just going to put news in the title well what would happen if we just tried to do this is that we get an error if it returned nothing so we always need to check to see if the data exists before you try to do anything with it otherwise you'll get an error you'll get the um the pink screen that react throws uh and you you don't want that certainly uh for your users okay that's the basic principle I'll go through and show you you at least one more time how we've done this down here in the body let me check um let me check the chat really quick to see if you had any questions okay good everybody's at this point either lost or you're understanding everything and you don't have questions so um okay so down here in this page page I want to be able to display something if the user tries to get a post that doesn't exist so I've created this error component I'll show you the error component I'm sure I have it up here somewhere there we go let's bring it over here okay so the eror component all it does is it gives us this you know Main which all our content goes in main except for uh navigation and Footers and it just has a little tag that says no content exists at this address please try another page just to let people know um and a more visually appealing way that they've essentially got a 404 here they've tried to look for Content that doesn't exist uh but it'll look a lot nicer and I'll show you what it looks like uh in a second okay so this is just checking if the data length equals zero meaning if there's no data show the error otherwise so this this is uh a Turner uh operator so this is basically an if statement uh a shorthand for an if statement within react with within the render function you normally you can't put if statements directly in here so if you want to do an if statement you have to do it in this way with theary uh operator okay so this is our if if there's no data then do this put throw the the error otherwise and that's what this uh colon is we're going to do this so otherwise we want to show this bit of HTML so we're going to you know just our regular markup we're going to put everything in Main we're going to wrap it all in that uh we're going to bring in our sticky nav just like we're doing on all our pages okay our sticky nav component and then we're going to drop down into a little bit of JavaScript and this is the check so we always have to check for data in this case I'm checking to see if a image has been uploaded if no image has been uploaded then better featured image is going to equal null and then we don't want to try to get that image because we'll have an error so first is we're going to check see is it equal to null and we want to make sure not only is it we want to see if it's equal to null but we also want to see if it has an image size of large because we don't want to show this image here is going to be like a big full screen image so we don't want to show a small image so somebody happened to upload a really tiny image I don't want to show a pixelated image I want to just kind of stop that image from showing up because you don't know somebody might be putting in content into your WordPress you know admin panel and they don't really understand you know image sizes and how that that works so we want to just protect the user from from uh seeing a really pixelated image so that's what that check does so assuming there is an image and that image is large enough then or I'm sorry the first thing so if there is isn't an image or if that image isn't large enough then we're just going to show this title and wait how do that I'm sorry I had it backwards let me start over so I don't confuse you guys so if the featured image is not equal to null so we have an image and that image is large the then we will add our title component we're going to pass the title the props to the title component of you know what is the title that we pulled from that that API data then we're going to give it the URL of the image and we've pulled that right from our data as well it's just kind of long so this is just the same thing we've got the data we're accessing the first uh and in this case only item in that array we're going to go better featured image media details sizes large and then in this case I'm pulling the source URL I wouldn't always want to do that because somebody could upload an insanely large image so we'll probably change this but for now it it works if we don't have a large enough image or any image at all then we're going to display the same thing we're going to do the title we're going to pass in same dat as we did before for the for the title but then for the image path I just have an image file in there we can set that up differently I've set it up in different sites to actually pull a random image from an array of images uh we could set it up so there's no image at all however we want to set that up but for now I'm just putting this image in just so there's something there okay and the rest of it's really a lot more simple we just have our basic you know container a row column and then within that column we're we're doing the dangerously set enter HTML again so don't only do this if you really have complete control over what data is coming in don't grab somebody's random data for this uh but I'm setting this to pull in that data and I need to do it like this because that's going to have HTML tags and things in there that we need to be able to bring in and have it render properly as HTML otherwise if we just try to do this down here and not do it this way with dangry set in HTML we would actually see those tags printed on the screen uh so in this case we're just grabbing the content the rendered content and that's it let me show you what it looks like so let's go in if you notice we have some UI changes uh this is probably what this is going to end up looking like I had a lot of good suggestions from you all as to what this should look like um I ended up not being able to do any type of sh because this is an image that is very much wanted this little flourish thing here and this is just uh I think it's a ping so I I can't get the shadow behind all this uh I'm sure there's probably some way to do it but I'm not great with image editing and I don't have a lot of time left so I'm going to do something like this it could definitely use a little bit more padding but uh we'll see I'm not like 100% super happy with how it looks but that's probably going to end up with it uh what we have at least for now so we have to launch on Thursday all right so let me go to news the news page and you can see over here this is actually you know we've started our our server and we did have to make one change don't let me forget to show you that we had to make a change in how we start our server uh I'll show you that in a second but it's actually told told us that this is a cash Miss so we didn't have this page cached so it had to build the page all right so here's our just demo data but now we want to go in and let's let's type go to Hello World right so I know I have a post that says hello world okay and this is our this is the content from that post so it's pulled it in I don't have a page hardcoded in the pages folder that says hello world so this has actually created this page that wasn't there before and as long as there's a page with this slug within WordPress we're going to get it and I could have thousands of pages within WordPress thousands of of posts and I can pull all of those so just you know we've built one template file this is not like a New Concept at all but we built one template file and now we can have thousands of pages based on that one template so uh yeah I know templates have been around for a long time but uh it's still cool when you uh to do that to set that up because it saves so much time and your site looks huge uh even though you've only really made one page so for some reason uh it's giving me a chors error when I try to pull this image from Local Host so I'm not really sure maybe uh I'll have to set something different in WordPress so it's not actually pulling the image uh but normally the image would be behind here now let's see if if I did something so let me just put an extra D on the Endor Oops why did it give me that we might have found a bug I think we did find a bug yes we did for some reason I'm actually kind of glad this happened because now I'll get to really do some coding um for some reason we keep getting to the hello world page let's see now now it's not taking us there all right while we're waiting for that let me check out someone actually commented design flaw um let me know what what is the design flow are we talking about this not working right now or are we talking about this um this thing behind the title I I think I would probably agree with you if you're talking about this title or or even the the other thing I'm gonna actually restart the server I've been having a weird error where um it just hangs and won't load the page I've never had that happen before I do have an error showing up in Dev tools and I'll just have to research that and figure out what's going on okay now let's try to reload wow H all right whoa it's not working okay which is this is why I do this live so you can see when things get messed up and how we work through it I may not be able to get this completely fixed before we stop the live stream uh which is crazy I did test it right before the live stream and it was working uh I can maybe try to do a hard refresh hey well at least I got the image to load now um that's really weird let me see if it'll load this now I do have another post that I know post to that is a real post no it's it's still showing the same thing um let's check our server well let me show you real quick what I did have to do we changed the uh the dev it used to be the command used to be just next now since we're using our our custom server instead of the next one we have to say node and then server.js as our Command so that's the the only kind of difference uh when I first tried this I forgot to do this part and I left it as an accident it was acting weird and I couldn't figure it out then I remembered that so really only one other file you have to edit to see get this working or at least somewhat working so what I guessing is happening is that somehow something is getting cashed somewhere along the way because it keeps showing me this same data uh when it shouldn't show me that same data so I'll have to figure that out because I shouldn't it shouldn't be caching cashing okay I'll figure that out I I think we've gone through enough to see how this works how it at least should work and uh I'll have to double check I'll go back and look at my code when I did this sometime in March and it worked in March and I'll see if I missed any steps and I'll let you know tomorrow what actually was the problem assuming I figured out by tomorrow which I think I will I'm going to go to um I'm going to check out the live chat oh and I want to show you the um the video from syntox conon so let me check real quick in the live chat we have somebody from latia Netherlands somebody asked the text editor okay they got a response it is Adam uh the theme is the seti theme SE TI someone said this is awesome thank you soone asked about shortcuts uh Adam does have shortcuts they asked specifically if the shortcuts were like Sublime I have not used Sublime so I don't know if they are the same shortcuts someone asked if it's like Visual Studio code does um yeah it's I do use Visual Studio code and atom uh so visual studio code can let you import shortcuts so I actually have it set to use all the same shortcuts as adom someone from uh Nairobi oh okay somebody says they're watching and learning in Charleston South Carolina and the attendant stox conon as well awesome so really that that's really cool uh I Love Charleston I love being down there hopefully I can come back again uh next year for uh for SX con I think it's in first week of June next year if you're interested uh uh check it out somebody said my video becomes fuzzy sometimes um that's probably the internet uh wherever you're at uh because my stream so far it says the analytics on this says the stream has been in good health uh the whole time so I'm assuming maybe it's it's somewhere else uh is the connection problem um why can't I get my navbar collapse to work in react I would check is is is your Navar um are you running that with jQuery sometimes depending like I'll notice things won't work when I just use like the hot module reloading if I then do a hard like a refresh in the browser manually sometimes they do work the other problem could be um it it's possible it could be an issue with uh when the page is loading so normally you have that document. ready function with jQuery uh and it needs to be able to to grab the element once it's already on the page so I would say those two things to look out for um just see see about a refresh and if it's the refresh issue with the hot module reloading it won't be an issue when you go to production because you're no longer using that reloading uh if it's some issue with the uh document ready function uh it's possible that you may be able to put it inside the component did Mount uh function that that you can use in reacts you just need to make uh a function available to be used there so I guess I've done that before there is a way to import jQuery into your react component and use it and then there's also I've actually made I don't know how great this is but I've made a function outside of the document. ready function so it's basically in the global scope and inside that function I've done whatever jQuery thing I need to do then I've called that function from within the component did Mount uh function within my component so at that point everything's been loaded then the function gets called so you don't need that document already function and that has worked for me sometimes so hopefully that was that made sense to you uh ideally if you can just rework that into like some vanilla JavaScript you can just put that JavaScript directly in the component in the um You probably won't even depending on how it works you might have to put it inside like component demount or something like that but uh that would be the best thing if you can okay and somebody's talking about uh so I mentioned before the design flaw it said the homepage soft software design flaw flow control I okay I'm still not quite understanding so uh Nazar if you could maybe explain it to me maybe in the comments or something uh I definitely want to know uh if I have a flaw here what's going on uh I'm just not kind of not following uh what you're saying there maybe I just don't know enough about it to realize what you're talking about someone says hit the API endpoint for a nonexistent page see what data is returning great idea let's do that right now let me bring this back and we'll go filter name hello world so let's take out this D here and let's just search okay we are we are getting no data returned uh when I switch that out so so the caching isn't on the WordPress side of things so that at least narrows it down so thank you uh Patrick for that advice uh I'll just give it another shot here just to see no yeah it's still doing that so at least I know whatever thing is wrong which I'm assuming is cashing we'll see is happening on on the react side of things and not uh not on the WordPress side oh okay someone uh has said you know if you want to squiggle with the shadowing can send it to you two SE wow actually um that's that's a really good I'm uh I'm I'm very grateful that you would uh offer to do that if you could I'd love to try it out and see uh if it if it looks good if it works if it makes it readable um I can't guarantee that I'd actually use it so I'd hate to have you do you know work uh for nothing uh just because I don't make the final design decisions I actually have to go back and and uh get consensus on these design decisions so I can't guarantee that I'll use it but I'd love to see how it looks uh if if you're still watching and you don't mind uh you can um you can check I don't wonder if I have my email I don't know I I have a lot of my contact info either put a comment in or direct message me on Twitter uh and I can let you know where to send the file to all right all right thank you okay so I've gotten through uh what was on the live chat so far um if you're still sticking around uh thanks for watching I'm going to try to play this video that I I mentioned at the beginning uh if you didn't if you didn't hear I've done some interviews some very short interviews with people at syntax Con in the conference I went to last week and I'm just going to play them I asked them four questions just four I asked them who they were what their name was uh what they did uh you know for a job I asked them what was one technology that they're really excited about one new technology and then I also o asked them what advice they would have for people who are just getting started in in programming uh so I just asked those four questions to everybody I interviewed because I thought that might be helpful for for you all watching especially if you're just starting out so let me go over okay here's the video um and this is uh Jabari Dawkins and let me bring this back to the beginning hopefully this will play maybe an error occurred it figures I haded playing earlier today let me try to get it going uh on my other screen I feel like I'm I'm Rusty at this I haven't done it in like almost a week so sorry about that things just aren't going as smoothly as they normally do okay I got it playing on my other screen so let me um let me pull this over if I can okay okay so here's what I'm going to try to do I'm going to unplug my headphones first and see if I can get this to play over the speakers let's make sure my volume's up all right that sounds like it'll end up being pretty loud so let me know if you can hear this there's a little background noise in the video I took this like right when we were kind of hanging out out before the conference started having breakfast so let's give it a shot software engineer over at snack um some pretty cool interesting technology I'm interested in learning about is uh uh what Microsoft is doing with the duet framework learning C what the uh new technologies they have going on um as far as advice I'd say uh really network network and get to know the people in Tex they can definitely help you out uh not only just exposing you to new technologies but also just uh acting as a ventor um so you never know you might thank you okay let me know could you hear that and was the background noise too much the other videos should be better with background noise I ended up doing the last few videos uh outside uh just so that I didn't have uh all the people talking from the conference so I'll wait I know there's a little bit of a delay I'll wait a few seconds here and see um which if you guys could hear that okay the delay must be pretty crazy um okay all right now it's finally coming in okay we said the background noise was a bit much but it was doable thanks for sharing I could hear him actually met him there but it was a lot of background noise yeah sorry about the background noise I didn't realized until I watched it later on uh how bad the background noise was so I I wish I would have like maybe watched it immediately and tried to do it again uh we're actually we're kind of running out of time before the conference started but um yeah the the other ones should be better there's only maybe one other video where some people started talking loudly in the middle of it but all the rest of them should be fine I think I only did five uh but anyway that's all I have for now I'm going to get to work on trying to figure out what I messed up so that it keeps returning the same pay to me and I will um I'll let you know maybe either in the comments to this recording uh when when the video gets posted or uh tomorrow maybe when when we start the next stream I'll let you know what uh what went wrong uh but I actually like when things go wrong because that's like that's just how things go sometimes you got to deal with with failure uh and temporary setbacks uh but thanks for watching especially if you're still sticking around uh thank you for sticking around all this time I went well over my normal uh half hour and uh I'll see you all tomorrow and especially thank you to um tus Durant sorry if I messed up your name at all um thank you for uh editing that file for me and uh I'll I'll check Twitter and check your uh your DM on Twitter and see how that looks the uh I'll put the link to this site I do have this on an actual server now too so I'll sync everything up to the server and I'll put the link in the description so you guys can check that out there's already a link to the uh GitHub repo for this so you can play around with it if you want um and make any suggestions that you might have I'm certainly no no expert and I'm open to your help thanks for watching I'll be back tomorrow have a great day
