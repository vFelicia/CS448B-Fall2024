With timestamps:

00:00 - hello everyone and welcome to a brand
00:01 - new python tutorial series so in this
00:04 - series i'm going to be teaching you the
00:05 - basics and fundamentals of the python
00:07 - programming language and we're going to
00:09 - immediately be applying those into our
00:10 - own project slash game so the idea
00:13 - behind this series is that not only do i
00:15 - want to teach you these concepts but i
00:16 - want us to actually apply them into a
00:18 - project so we can see where they're used
00:20 - and how we use them so at the end of
00:22 - this series you will have a complete
00:24 - finished game that you will be able to
00:25 - show off and the way that we're going to
00:27 - be making this game makes it really
00:28 - extendable and flexible so you can add
00:30 - your own stuff and really customize it
00:32 - as we go through so before i say
00:34 - anything else let me just note that this
00:36 - tutorial series is really for complete
00:38 - beginners this is for people looking to
00:39 - get up and running in python as fast as
00:42 - possible and in these next three videos
00:44 - we're going to be learning a bunch of
00:45 - different skills and syntax and then by
00:47 - the end we're going to have that
00:48 - complete project so let me show you an
00:50 - example of what this project could look
00:52 - like keep in mind this is just like kind
00:54 - of a smaller version of what it might be
00:56 - this is very flexible and we might make
00:57 - it a little bit different as we go
00:58 - through so let me run this and the type
01:00 - of project that we're really making here
01:02 - is a choose your own adventure game now
01:04 - in my opinion this is one of the best
01:06 - projects you can work on as a beginner
01:08 - because of how flexible it really is so
01:10 - let me just show you what it is and then
01:12 - you guys should get an idea pretty
01:13 - quickly of why this is a great project
01:15 - to work on so you can see it says
01:17 - welcome to my first game what is your
01:18 - name i'm going to put tim what is your
01:20 - age let's put 19
01:22 - and says you are old enough to play do
01:24 - you want to play
01:25 - let's type yes it says you are starting
01:27 - with 10 health all right let's play
01:29 - first choice left or right let's decide
01:32 - to go left you can see that what's kind
01:33 - of happening here is these first steps
01:35 - we're just setting up in the game but
01:37 - now it's going to give me a bunch of
01:38 - decisions to make and based on what i
01:40 - choose at previous steps it will give me
01:42 - different decisions so i decide to go
01:44 - left here
01:45 - it says nice you follow the path and
01:47 - reach a lake you swim across or go
01:49 - around
01:49 - what do we think do we go across or go
01:51 - around let's go across
01:53 - so i go across it says you managed to
01:54 - get across but you were bit by a fish
01:56 - and lost five health you notice a house
01:58 - in a river which do you go to the river
02:00 - or the house so let's decide to go to
02:01 - the river and let's see you fell in the
02:03 - river and you lost so hopefully that
02:05 - gives you an idea of how this works let
02:07 - me run it one more time and i'll show
02:08 - you that there's different options that
02:10 - will pop up based on where you decide to
02:12 - go
02:13 - so tim 19 yes you're starting with 10
02:16 - health let's play if i decide to go
02:18 - right notice that immediately i just
02:20 - lose right so there's all these
02:22 - different paths and kind of decision
02:23 - trees and branches that we can go down
02:25 - and it makes this game really cool
02:27 - because it's pretty simple to create
02:28 - obviously for beginners that's what
02:30 - we're going to be doing but it's also
02:31 - really cool and really flexible and you
02:33 - can kind of make whatever you want out
02:34 - of it so with that being said we need to
02:36 - get our coding environment set up here
02:38 - fortunately for us we're actually going
02:40 - to be using a platform called replit so
02:42 - it's repple.it so
02:44 - repl.it this is an online browser-based
02:47 - coding environment and i'm just going to
02:49 - walk us through how we can actually set
02:50 - this environment up and get started
02:52 - right away without having to download or
02:54 - install any software so as i mentioned
02:56 - we're going to be using an online coding
02:58 - platform called replit so it's spelt
03:00 - repl
03:02 - it that is the website url i will link
03:04 - that in the description as well but this
03:06 - is a free browser-based coding
03:08 - environment so what that means is that
03:09 - the only prerequisite for this series is
03:12 - that you have a browser and you have
03:13 - internet connection so to get started
03:15 - you need to go to this link and
03:17 - obviously sign up if you don't have an
03:18 - account or log in so i'm going to log in
03:20 - but when you sign up it's going to ask
03:23 - you to input your favorite programming
03:24 - language i would recommend you just
03:26 - select python it doesn't matter but
03:28 - that's just something that you will have
03:29 - to go through to get this set up so i'm
03:31 - going to go here to new rapple and i'm
03:33 - going to select python and give this a
03:35 - name
03:36 - now the name that i'm going to give mine
03:38 - is first game feel free to name yours
03:39 - whatever you'd like and then just notice
03:41 - that this will be a public rebel which
03:44 - means it'll show up on your profile and
03:45 - everyone can see it if you want to go
03:47 - for private rebels that is kind of a
03:49 - premium feature but i wouldn't worry
03:51 - about that we're not making anything
03:52 - that we care if someone steals so let's
03:54 - go create repple
03:56 - and let's boot up into our first
03:58 - environment all right so the first
04:00 - important thing that we need to
04:01 - understand is how we can actually print
04:03 - things and get things to show up in the
04:05 - console so before remember how when i
04:08 - ran the code we would see some kind of
04:09 - output right it said like do you want to
04:10 - play the game or it would tell us some
04:12 - kind of message so how do we actually go
04:14 - ahead and do that well the first command
04:16 - we're going to learn in python is known
04:18 - as print so all of the things i'm about
04:20 - to show you are pretty much called
04:22 - syntax syntax is really like the grammar
04:25 - of a programming language it's like
04:26 - where does the period go where do we
04:28 - have parentheses it's just the structure
04:30 - the way that we write the code and if
04:32 - you hear me use the word syntax that's
04:34 - what that means but the syntax to print
04:36 - something out in python is really simple
04:39 - we just put print we put an open
04:41 - parenthesis
04:42 - and a close parenthesis and then inside
04:44 - of the print statement we put a set of
04:46 - single or double quotation marks and
04:49 - inside of these quotation marks whatever
04:51 - we want to print to the screen so you
04:53 - can think of it as like we're printing a
04:54 - quote right if you wanted to say that
04:56 - although this is going to be referred to
04:57 - as something else that i'll talk about
04:58 - in a second and whatever is inside of
05:00 - these quotation marks that text will
05:02 - just show up in the console so if i say
05:04 - hello world the classic first program
05:07 - then let's run and we get
05:09 - hello world popping up in the console so
05:11 - this is the easiest way to print
05:13 - something out there's a bunch of other
05:14 - ways we can use this statement but again
05:16 - it's just print open parentheses and
05:19 - then you need these um these double
05:21 - quotation marks or single quotation
05:23 - marks it doesn't matter which one but
05:24 - make sure the set is obviously the same
05:26 - so you don't go like single quotation
05:28 - mark double quotation mark that won't
05:29 - work and then whatever inside of here
05:31 - that you want to print out
05:33 - so let's apply this now immediately into
05:35 - our project like i said the first thing
05:37 - we want to do in our choose your own
05:38 - adventure game is probably introduce the
05:40 - user or whoever is playing to the game
05:42 - right so what i'm gonna say is
05:45 - uh welcome oops if i could type welcome
05:49 - to my first
05:51 - game now you guys can obviously put
05:53 - whatever you want inside of here i'm
05:54 - just going to say welcome to my first
05:56 - game maybe you want to be more creative
05:57 - and put the name of your game although
05:59 - we might not even know what that is yet
06:01 - but don't worry we can always go back
06:02 - and change that all right so print
06:04 - welcome to my first game great so that
06:06 - is the print
06:07 - now what i need to talk about is
06:09 - variables and data types now this is a
06:12 - really important concept this is going
06:13 - to be a little bit more theoretical it's
06:15 - hard to apply this but we definitely
06:16 - need to understand this so inside of
06:19 - python we kind of have four main types
06:21 - of information or data so in our
06:24 - programming languages we have data right
06:26 - that's information that we're maybe
06:27 - gonna store that we're gonna pass around
06:29 - that we're gonna manipulate if you think
06:31 - of an application where we're just
06:32 - counting say we're just counting up well
06:34 - we're going to have to have some notion
06:35 - of like what the counts at right that
06:37 - would be an example of data that we're
06:39 - going to store in our program there's
06:41 - lots of examples of this but
06:43 - these data this data that we have has
06:46 - different data types and there's kind of
06:48 - four main ones that we need to cover so
06:49 - the first one is string the second one
06:52 - is int
06:53 - then we have float and then we have bull
06:56 - now a string which is represented by str
06:59 - i'll actually just type out string here
07:00 - so you can see it fully
07:02 - is anything wrapped inside of double
07:05 - quotation marks or single quotation
07:07 - marks so like hello is an example of a
07:10 - string
07:11 - hi is an example of a string
07:13 - 9 89 is an example of a string anything
07:16 - that's inside of double or single
07:17 - quotation marks is a string
07:19 - and strings are just a collection of
07:21 - characters they're just text right and
07:23 - usually we're going to use strings just
07:25 - to print stuff out to the console um
07:27 - there's a bunch of other use cases of
07:28 - them of course but for now that's what
07:30 - we can kind of think of as strings
07:32 - next we have ins now ins are any whole
07:36 - number so just the number they're not
07:37 - wrapped in quotation marks or anything
07:39 - like that just any whole number it could
07:41 - be negative as well that's totally fine
07:42 - it could be a really big number any
07:44 - whole number that does not have any
07:46 - decimal points is an int otherwise known
07:48 - as an integer so that kind of follows
07:50 - our understanding for math so hopefully
07:52 - that one makes sense next we have float
07:55 - now a float is any number that has a
07:57 - floating decimal point so if i have
07:59 - something like 6.0 that's a float
08:01 - because we have a decimal point and then
08:03 - something after we have a number like
08:05 - 7.5 that's a float
08:07 - negative 9.8 that's a float and
08:11 - negative 100.0 again if float so even if
08:14 - it's a dot o which technically is still
08:16 - a whole number right because 100.00 is a
08:18 - whole number if it has the decimal point
08:20 - anywhere it's considered a float and
08:22 - lastly we have a boolean
08:24 - a boolean is one of two values
08:27 - true or false so these two exact things
08:30 - that i typed nothing different about
08:32 - them so the capital t and the capital f
08:34 - is very important
08:35 - if you see one of these two things and
08:37 - you can see they're kind of highlighting
08:38 - in blue telling us their fancy
08:41 - fancy thing in the language and those
08:42 - are booleans so i'll leave this and what
08:45 - i'm going to call a comment which is
08:46 - actually interesting to show you guys so
08:48 - if i do three quotation marks and then i
08:50 - do another three quotation marks like
08:52 - this this is actually what represents a
08:54 - comment or a multi-line comment inside
08:57 - of python this isn't super important to
08:59 - understand but what this means is that
09:00 - whatever i wrap inside of these triple
09:03 - quotation marks and i can put these
09:04 - anywhere i want this will just be
09:06 - ignored by my program so right now we're
09:08 - going to print this right and that's
09:10 - going to work fine but if i were to wrap
09:12 - this inside of triple quotation marks we
09:14 - can see it kind of gets commented out
09:16 - and now that means our program is just
09:18 - going to ignore whatever's inside of
09:19 - these sets of triple quotation marks so
09:21 - if i run my program i no longer am
09:23 - printing that out and there's actually
09:25 - another way to make a comment as well
09:27 - and that's to use a pound sign and what
09:29 - this does is simply comment at one line
09:31 - so it just comments out whatever comes
09:33 - after it on the line this sometimes is
09:35 - useful if you just want to comment at
09:36 - one line not a whole block of code like
09:38 - i've done here
09:40 - so i'll leave this down a little bit at
09:41 - the bottom of the screen and now we'll
09:43 - actually start writing a bit more code
09:45 - so there we go we understand data types
09:48 - now we need to talk about variables so
09:50 - variables are essentially a way of
09:52 - storing data now you can think of a
09:54 - variable like in math right where we had
09:56 - like x equals 5 x equals 7. that's a
09:59 - really similar way that they work here
10:01 - in programming and to make a variable
10:03 - just show you a few examples it's quite
10:04 - easy you simply pick a name for your
10:07 - variable in this case let's say x you
10:09 - put an equal sign and on the right hand
10:11 - side you put some data type or you
10:14 - assign it equal to another variable or
10:16 - some other things that we'll talk about
10:18 - later but essentially you put something
10:19 - on the right hand side that you want to
10:21 - be stored in the variable
10:23 - so in this case maybe i want my variable
10:25 - x to store an int which is uh the value
10:27 - 5.
10:28 - awesome there we go that's all i need to
10:30 - do to make a variable x that stores the
10:32 - value 5. now if i actually go ahead and
10:34 - write another print statement here which
10:36 - is totally valid we can write as many
10:38 - print statements as we want what's going
10:40 - to happen now is we're going to print
10:41 - welcome to my first game we're going to
10:43 - read the next line because we do read
10:45 - code top to bottom most times
10:48 - other than certain circumstances but you
10:50 - can think that when we execute the
10:52 - program we read from the top so left to
10:54 - right top to bottom that's just the way
10:55 - it works so then we we do this we set x
10:58 - equal to 5 and now what i'm going to do
11:00 - is actually print x now notice that i
11:03 - didn't surround x in quotation marks
11:06 - the reason i didn't surround it in
11:07 - quotation marks is because it's a
11:09 - variable so a variable is actually
11:11 - something that i can print
11:12 - totally fine right inside of the print
11:14 - statement because i'm not trying to
11:16 - print out the letter x i'm trying to
11:18 - print out whatever the value is that's
11:20 - stored in the variable x so in this case
11:22 - i'm going to print out 5 because x
11:24 - equals 5. so if i run this let's have a
11:26 - look welcome to my first game five
11:28 - awesome there we go we now kind of
11:30 - understand variables
11:32 - so of course i can store other things in
11:33 - variables too i could store the value
11:36 - true right this would be considered a
11:38 - boolean or a bool let's have a look at
11:40 - this now so now we print out true and
11:42 - that's kind of the basics on variables
11:44 - they can store things so you set a
11:45 - variable name equal to something now
11:48 - there's a few rules with our variables
11:49 - the first has to do with their naming so
11:52 - when we create a variable all we kind of
11:54 - have to do is just type something out
11:55 - and set it equal to something else but
11:58 - the thing that we type out or the
11:59 - variable name has to follow these rules
12:02 - it can only contain
12:04 - lowercase and uppercase letters
12:06 - underscores and numbers so it cannot
12:09 - contain any special characters other
12:10 - than an underscore and it cannot start
12:13 - with a number
12:14 - so something like hello one is totally
12:17 - valid hello one equals nine awesome
12:19 - hello one underscore totally balanced
12:21 - but as soon as i go one hello note you
12:24 - can see we're getting this red squiggly
12:26 - line not allowed we can not start a
12:28 - variable with a number but i can go
12:30 - ahead and do something like that that's
12:31 - fine i can put a number in between just
12:34 - follow those rules and typically you
12:36 - don't really use numbers in your
12:37 - variable names you're just going to use
12:38 - some text maybe uppercase and lowercase
12:40 - letters and in python if you want to do
12:42 - a space because there's no spaces
12:44 - allowed in variable names just use an
12:46 - underscore so something like hello
12:47 - underscore world
12:49 - this is the convention for making
12:50 - variables you separate anything that's
12:52 - kind of two words using an underscore so
12:54 - let's say hello equals nine right and
12:56 - then we can print out hello and we'd get
12:57 - the value nine now of course we can make
12:59 - a lot of other variables two we can say
13:01 - the variable yes equals and maybe it's
13:04 - equal to the string hello i can actually
13:06 - do something crazy and say hello equals
13:09 - yes now what that's saying is that hello
13:12 - this variable hello is equal to whatever
13:15 - is stored in the variable yes so in this
13:17 - case hello will be equal to hello funny
13:20 - right but that's how that will work so
13:22 - we can assign variables to other
13:23 - variables we can do something like hello
13:25 - equals
13:27 - hello plus nine totally fine and in fact
13:30 - what i'm going to do now
13:32 - excuse me is uh i'm gonna try to
13:34 - actually show you how we can ask the
13:36 - user for some input and store what they
13:38 - type in in a variable so now we're on to
13:41 - the next part which is getting user
13:42 - input so to get user input what that
13:44 - means is that in the console here we're
13:46 - gonna let the user type something in
13:48 - because right now if i run this you see
13:50 - that it says welcome to my first game
13:51 - and then the program kind of just ends
13:53 - after that ideally i would like to ask
13:55 - the user what their name is and store
13:57 - that in a variable
13:58 - so let's go ahead and do that i'll just
14:00 - print it out and then i'll talk about
14:02 - how this actually works
14:03 - so i'm going to make a variable called
14:05 - name the reason i've called it name is
14:07 - because it's going to store my user's
14:08 - name and usually we want to name our
14:10 - variables something that are meaningful
14:12 - and i've set that equal to input and
14:14 - inside of this here i'm going to put a
14:15 - string that is the question i want to
14:17 - ask the user so what is
14:20 - your name question mark now notice i did
14:22 - a little space at the end try to think
14:24 - of why i would have done this space in
14:26 - just a second but just keep in mind i
14:28 - did do this space
14:29 - just remember that so now what i'm going
14:31 - to show you is what happens when i run
14:33 - this program so let me move this over
14:34 - here
14:36 - let's zoom in
14:37 - welcome to my first game what is your
14:39 - name let me type tim
14:41 - alright so i typed him and notice that
14:43 - here the cursor is going and i can type
14:45 - stuff right into the console that's
14:47 - because i used this input key
14:49 - so what this says if i have input and
14:52 - then i put what's known as a prompt
14:54 - inside of here that whenever we read
14:56 - this line of codes when our program
14:57 - actually reads this it will say okay
15:00 - print this out and then wait for the
15:02 - user to hit enter so let them type
15:04 - something whenever after we print this
15:06 - out so on the same line as what is your
15:08 - name and then as soon as they hit enter
15:10 - we're actually going to take whatever
15:12 - they typed and we're going to store it
15:14 - in the variable name so if i type tim
15:16 - like that what actually ends up
15:18 - happening and i'll have to zoom back out
15:20 - here
15:20 - is that the variable name is going to be
15:23 - equal to tim because i typed tim and
15:26 - then if i type joe the variable name is
15:28 - going to be equal to joe because i typed
15:30 - joe so to prove that to you let me print
15:33 - out name because we can print out
15:34 - variables right so this variable should
15:36 - equal the name we typed in and then
15:37 - let's just print it out so let's have a
15:39 - look what is your name
15:40 - tim and there we go it prints out tim
15:43 - now notice i'm not just lying to you
15:44 - here if i type joe it prints out joe so
15:47 - we are grabbing and storing the user's
15:49 - name by using this input tag now the
15:51 - next thing i actually want to grab from
15:53 - the user is their age we're going to do
15:55 - a cool thing here that make sure they're
15:56 - a certain age before we let them play
15:58 - the game so let's say age equals input
16:01 - and then what do you guys think we
16:02 - should put inside of here well have a
16:04 - think about it for a second because i am
16:06 - about to start typing pause if you need
16:07 - to but i'm going to put what is
16:10 - your age and now what's going to happen
16:12 - is we're going to ask the user for their
16:13 - name then we're going to ask the user
16:15 - for their age and they're going to type
16:16 - both of those values in so let's run
16:18 - this and let's say what is your name tim
16:20 - what is your age 19. boom stops there we
16:23 - go now age will store 19 and name will
16:26 - store tim so if i want to show you those
16:29 - two things what i can do is actually
16:31 - print them out and i'm going to show you
16:33 - the last thing kind of for this video is
16:35 - how we print out multiple things on the
16:37 - same line so let's say i wanted to say
16:39 - something like hello tim you are 19
16:42 - right so i want to print their name and
16:44 - then i want to print their age and i
16:45 - want to combine that with a few other
16:46 - words just to kind of welcome the user
16:48 - well how do i do that
16:50 - there's a few different ways to do it
16:52 - but the way that i'm going to show you
16:53 - is kind of the most common and it's
16:54 - something like this
16:56 - essentially you can separate anything
16:58 - that you want to print on the same line
16:59 - with a bunch of commas so i can do
17:01 - something like hello
17:03 - comma name and what this will do is
17:05 - print out the string hello that we've
17:07 - already talked about we understand we
17:09 - can print out this and it'll show the
17:10 - text then we'll print out whatever the
17:12 - variable name is so whatever's stored
17:14 - inside of there and this comma will
17:16 - automatically put a space in between
17:18 - them
17:18 - so hello space name where name will be
17:21 - equal to whatever we typed in
17:23 - then i can say
17:25 - hello tim
17:26 - you are
17:28 - and then i'll put age
17:30 - comma
17:31 - years old
17:33 - like that and there we go that's all we
17:35 - need to do to print out hello whatever
17:37 - their name is you are whatever their age
17:39 - is years old so we've just separated
17:41 - them by commas and now it'll print all
17:43 - those things out so let's have a look
17:44 - here
17:45 - let's go tim
17:46 - 19 hello tim you are 19 years old and
17:49 - let's say um
17:51 - actually let's just leave it like that
17:52 - for now i got rid of some of the
17:54 - comments i had below and we've just left
17:56 - this now and what this program does at
17:58 - this point is just welcomes us to the
17:59 - game asks us for our name and age and
18:01 - then prints out the name and age of the
18:04 - user so whoever typed that in now what i
18:06 - want to do here and there's a few things
18:08 - we're going to have to learn to be able
18:09 - to do this is check if the user is old
18:11 - enough to play our game so i want to
18:13 - check if they are you know
18:15 - older than 18 or if maybe this game is
18:17 - pg-13 or something right that's what i
18:19 - want to make sure that they're the
18:20 - correct age before we actually prompt
18:22 - them you know do you want to play so
18:23 - before we let them start playing we want
18:25 - to check that they're older than a
18:26 - certain age so how do we actually do
18:28 - that well that leads me to an important
18:31 - thing called conditions so first we need
18:33 - to talk a little bit about arithmetic so
18:35 - arithmetic is just math there's four
18:38 - main operators in uh are not four sorry
18:41 - there's actually more than four there
18:42 - are some main operators inside of python
18:44 - that allow us to do arithmetic
18:46 - arithmetic is just math right so we have
18:48 - the asterisk the star the plus the minus
18:52 - and the modulus now there's also a
18:54 - double slash 2 which we'll talk about
18:55 - very briefly
18:57 - and these are important these are the
18:58 - operators for math operations so the
19:01 - asterisk is multiplication the slash the
19:03 - forward slash is division the plus is
19:05 - addition obviously the minus is
19:07 - subtraction the percent sign is actually
19:09 - modulus which gets us the remainder of a
19:12 - division i'll show you and the double
19:13 - slash stands for integer division so
19:16 - these are the main operators that we can
19:17 - use and i just want to show you how we
19:19 - can do some basic math uh just so you
19:22 - have that skill if you need to use it we
19:23 - may not use it in this kind of project
19:25 - but it is something important so i
19:26 - figured i'd show it so let's say we have
19:28 - the variable x equals 9 and y equals 8.
19:32 - what do i do if i want to add x and y
19:34 - well i could do x plus y right that
19:36 - technically would add them but i want to
19:39 - store that addition somewhere else so
19:41 - just something important to understand
19:43 - is that when you do something like x
19:45 - plus y this does not
19:47 - assign x to 17. it might make sense
19:50 - right if you say oh x plus y you might
19:52 - be saying like oh add y to x i could
19:54 - understand why that may seem logical to
19:56 - some people but this doesn't really work
19:58 - in programming when i do this all that
20:00 - happens is this gives me a value 17 but
20:02 - it doesn't get stored anywhere so what i
20:05 - need to do if i wanted to say
20:07 - add the value y to the variable x is do
20:10 - something like x equals x plus y now i'm
20:14 - going to say the variable x is equal to
20:15 - whatever the previous value of x was
20:17 - plus y
20:19 - that will actually do that addition for
20:20 - me now same thing
20:22 - if i do this so plus equals is a
20:24 - shortcut for what i just showed you the
20:26 - people that made python know that a
20:28 - common operation is to add one variable
20:31 - to another so rather than having to
20:32 - rewrite you know x equals x plus y
20:36 - you can just do x plus equals y which
20:38 - stands for x is equal to
20:40 - the addition of x plus y right that's
20:42 - pretty much what that's doing so that
20:43 - will assign the value of 17 to x if you
20:46 - did something like that now when you're
20:48 - doing arithmetic the order of operations
20:50 - apply so let's say i have a variable z
20:52 - and i said z is equal to 9 times or not
20:55 - 9 times 8.
20:56 - x asterisk y
20:58 - plus y
21:00 - well the order of operations that we
21:02 - know uh will follow which means this
21:04 - multiplication will happen before this
21:06 - addition now let's say we didn't want
21:07 - that and we wanted to you know change
21:09 - the order of operations well
21:11 - we could use parentheses like we would
21:13 - in any other map or any other
21:15 - programming language or math or whatever
21:17 - and then this will follow so we will do
21:19 - the parentheses first now these are the
21:21 - common operations right so this is
21:23 - multiplication that's division uh now
21:25 - i'll just show you the kind of two or
21:26 - three ones that you might not know so
21:28 - the exponential operator which i
21:30 - actually haven't shown it is the two
21:31 - asterisks so when you do two asterisks
21:33 - that stands for raised to the power so x
21:36 - raised to the power of y plus y so
21:39 - whatever that would be so 16 i guess and
21:41 - then the other two operators i wanted to
21:43 - show you were the mod operator and the
21:46 - integer division operator so the mod
21:48 - operator what this does is get the
21:50 - remainder after division so if i say x
21:53 - mod y this is actually equal to 1.
21:57 - now the reason this is equal to one is
21:59 - because the way you do this is you say
22:00 - okay how many times does eight go into
22:04 - uh nine how many times it goes in one
22:05 - time fully right it goes in one full
22:07 - time what is the remainder what after
22:10 - you take that eight out of the nine well
22:12 - it's one right so if you do nine divided
22:13 - by eight you get one point something but
22:16 - really it's one remainder one that's the
22:18 - way you can think of it so like if i had
22:20 - say five
22:22 - and two then the mod again would be one
22:25 - because you say how many times does two
22:26 - go into five well it goes in two times
22:28 - okay so what is that that's four let's
22:30 - take four out of five okay what's the
22:32 - remainder now well there's one left so
22:34 - that's remainder one it's pretty
22:35 - straightforward that's how that works
22:37 - whenever you do something mod 1
22:39 - obviously the remainder is going to be 0
22:41 - because 5 can be divided by 1 perfectly
22:43 - fine and if i did something like 0 mod 1
22:46 - then that would be equal to 0 because 0
22:48 - does not go into 1 at all so what's the
22:49 - remainder 0. i hope that makes sense
22:52 - that's the mod operator for you it's not
22:53 - super important so i won't spend too
22:54 - much time on it and then we have the
22:57 - integer division so integer division is
22:59 - two slashes and this is kind of the
23:01 - opposite of mod it doesn't give you the
23:03 - remainder after division it gives you
23:05 - the whole number um division or the
23:07 - whole number quotient i think is what
23:09 - it's called so if i do 5 divided by 2
23:12 - how many times does 2 evenly go into 5
23:15 - well it goes in twice so the integer
23:17 - division of x by y is going to be 2
23:20 - right and then if i change this to 7
23:22 - same thing so how many times does 2 go
23:24 - into 7 well it goes in 3 times so the
23:27 - integer division would be 3.
23:29 - that is the basics of those mathematical
23:31 - operators just in case you need to use
23:33 - them i felt they are important to show
23:34 - now with those operators there's also a
23:36 - bunch of other operators too we have a
23:38 - less than we have a greater than we have
23:40 - a less than or equal to a greater than
23:42 - or equal to and is equal to and then not
23:45 - equal to now these are what are known as
23:47 - our comparison operators and this is how
23:48 - we actually check equality between
23:50 - different things you know you might
23:52 - imagine that it's actually pretty
23:53 - important for us to for example check if
23:55 - someone is older than a certain age so
23:58 - if we wanted to check if the person's
24:00 - age was older than 14 we would have to
24:02 - use one of these operators to do that
24:04 - now this is where we start talking about
24:06 - booleans i'm trying not to go too fast
24:08 - here but again i really do want to get
24:09 - to the project but some of these things
24:11 - are pretty fundamental to go through so
24:13 - actually can i type in here let me just
24:16 - see if this works ah perfect so i'll
24:18 - actually do some stuff in the console
24:19 - for us and don't worry i'll zoom in
24:20 - quite a bit so you guys can see this all
24:22 - right so zoom zoom zoom
24:24 - okay and now i'm just going to do a few
24:26 - examples of what we call conditions or
24:28 - boolean expressions so remember i showed
24:30 - you that type before that was bool right
24:33 - that doesn't matter that you see that
24:34 - but it was a bool and those were the
24:36 - values true
24:37 - or
24:38 - false right so when we use these
24:40 - conditional operators so that greater
24:42 - than that less than the less than or
24:44 - equal to the greater than or equal to
24:46 - the is equal to the not equal to when we
24:49 - use those whatever we put on the
24:51 - left-hand side and the right-hand side
24:53 - will be compared using that operator and
24:56 - we'll either get a true or false value
24:58 - so if i said something and this is like
25:00 - a really common example 3 is less than
25:02 - 4. well what do you think right if i
25:04 - tell you this is going to be either true
25:06 - or false so it's going to be one of
25:07 - those boolean types what do you think
25:08 - this would be well of course that's true
25:11 - because 3 is indeed less than four right
25:14 - and then if i swatch uh switch this
25:16 - around i say three greater than four
25:19 - well we get false because three is not
25:21 - greater than four so this is the basics
25:23 - on how these conditional operators work
25:25 - and i can do something like you know 45
25:29 - less than or equal to 45. now is this
25:32 - true or false well that's true because
25:34 - the way that this works is it checks if
25:36 - the value on the left-hand side is less
25:38 - than or equal to this value right and
25:40 - that's kind of the basics on how some of
25:42 - these things work now let me see can i
25:43 - clear there we go awesome
25:45 - let's hit enter here and see if we can
25:47 - start typing now the important ones that
25:49 - we want to go through though are
25:50 - comparing for equality that's something
25:52 - we want to do a lot of time so comparing
25:54 - numbers using the less than and greater
25:56 - than signs that's pretty easy i think
25:57 - that makes sense to most of you you know
25:59 - it's either true or false you can read
26:01 - it and pretty well figure it out but
26:02 - sometimes uh when we have checking for
26:05 - equality it can be a little bit
26:06 - different so if i have something like 5
26:08 - equals equals five what this is what
26:10 - this says is is five equal to five so
26:13 - what i did before right when we made a
26:15 - variable we could do something like x
26:16 - equals five
26:17 - and that is an assignment that means
26:19 - we're assigning five to the value x
26:22 - but if i go x equals equals five what
26:26 - i'm asking is is like is x equal to five
26:30 - the two equal sign is like a question
26:31 - mark almost like is this true give me
26:33 - the result whereas the one equal sign is
26:35 - an assignment you're telling x that yes
26:38 - it is equal to 5. so if i say x equals
26:40 - equals 5 we get the value true right and
26:43 - in fact what i can do is make a variable
26:45 - called y let's say y equals 5 and i
26:47 - could say x equals equals y and we'll
26:49 - get true all that happens when i use the
26:52 - variables here is it will just check
26:53 - what their value is so we've assigned
26:55 - their values here and it will compare
26:56 - their values and tell me if that's true
26:58 - or false so that is the very basics of
27:00 - how we can use that equality so equals
27:02 - equals and then there's one more which
27:04 - is the not equals two
27:06 - and what this does is tell us if two
27:08 - values are not the same so whatever the
27:10 - result of the two equal sign would be
27:12 - it's just reverse so in this case x is
27:15 - equal to y so since they're not equal to
27:18 - each other
27:19 - or since they are equal to each other
27:20 - then not equal to will give us false
27:22 - right so if we look at false it says no
27:24 - these actually are equal to each other
27:26 - so we're getting false for the not equal
27:28 - to operator i hope that makes sense now
27:30 - lastly we can compare strings right so i
27:32 - can do something like hello
27:34 - equals equals hello and boom that works
27:37 - fine that's totally true but what
27:39 - happens if i try to do this hello equals
27:41 - five
27:42 - no we cannot assign oh sorry not hello
27:44 - equals five hello equals equals five
27:46 - what am i saying we get the value false
27:48 - right so we c when we compare different
27:50 - types like an int and a string together
27:52 - obviously those aren't going to be the
27:53 - same and what if i actually go ahead and
27:55 - do something like this 5 equals equals
27:57 - 5.
27:58 - well that's false 2. so even though
28:00 - these values are technically the same
28:03 - since this is a string and this is an
28:05 - int we're going to get false so that's
28:07 - very important that when we're checking
28:09 - things they are the same type
28:11 - because if they're not then we're going
28:12 - to get errors like this where they might
28:14 - actually be the same value but it's not
28:16 - showing up as the same value
28:18 - so i'm hoping this is making sense of
28:19 - course we're going to go through more
28:20 - examples but last thing i'll show you is
28:22 - that when i do like hello
28:24 - equals equals
28:26 - hello do we think this is going to be
28:28 - equal or not if you have a look at it
28:30 - yes no what do you think let's run this
28:32 - we get false so whenever there's any
28:34 - capital letters that really matters so
28:36 - just make sure you understand that
28:38 - the types really matter and the
28:40 - capitalization matters as well and i'm
28:42 - going to show you ways that we can deal
28:44 - with that because you could imagine like
28:45 - if we're checking
28:47 - to see if the user types something in we
28:49 - want them if they type it in with a
28:50 - capital letter or not with a capital
28:52 - letter we still want that to work right
28:53 - we still want to check and see that that
28:55 - value is uh is what we want it to be
28:57 - equal to so anyways that was kind of the
29:00 - theory that we needed to go through now
29:01 - let's get it into the project and start
29:02 - working on it apologize if that was
29:04 - longer than uh
29:05 - than anticipated all right
29:07 - so what did i want to do
29:09 - i wanted to check if the user's age
29:12 - was over a certain value so what i need
29:15 - to do is i need to write an expression
29:17 - that pretty much checks if age is
29:19 - greater than you know some some value
29:21 - right so let's first of all check this
29:23 - let's print
29:25 - and we're actually going to go and we're
29:26 - going to say is underscore older so i'm
29:28 - going to get a variable called is older
29:30 - i'm going to set that equal to age and
29:33 - we'll say age greater or equal to 18. so
29:36 - what this is going to do is it's going
29:38 - to assign whatever the value of this
29:39 - expression is so this will either be
29:41 - true or false to the variable is older
29:43 - and then i'll print
29:45 - is underscore older just like that so
29:47 - this will just tell us true or false and
29:49 - let's actually have a look at what we
29:51 - get here because it might surprise you a
29:53 - bit so let's run this
29:55 - and let's have a look at what we get so
29:57 - let's go name tim age 19 and we get a
30:00 - bunch of red text this is our first red
30:02 - text that we've seen so this is an error
30:04 - message i did this purposely and i want
30:07 - us to read what actually happened here
30:09 - and see what line it happened at so that
30:11 - we understand what happens when we get
30:12 - an error message so if you see this red
30:14 - text don't worry it just means you've
30:16 - done something wrong uh you know
30:18 - could be well it definitely is your
30:19 - fault because you typed it but you can
30:21 - definitely figure out what's wrong just
30:23 - by reading through this error message
30:24 - quite easily so you can see it says
30:26 - traceback most recent call last you know
30:28 - don't worry about this gibberish if it
30:29 - doesn't make sense that's fine what
30:31 - you're really looking for here is the
30:32 - line number
30:34 - the actual line where the thing went
30:36 - wrong and then what the error was so in
30:37 - this case it says file main dot pi so
30:39 - that's the file we're working in line
30:41 - seven okay so line seven this is the
30:43 - expression so is older equals age
30:45 - greater than or equal to eighteen
30:47 - and then type error greater than or
30:49 - equal to is not supported between
30:50 - instance of string and int so what that
30:53 - actually means is that this age variable
30:56 - here is a string and this here on the
30:58 - right hand side is an int so i cannot
31:01 - compare if the string like because
31:03 - imagine if i had a string like you know
31:05 - hello i can't say hello greater than or
31:07 - equal to 18. that doesn't make any sense
31:09 - i can't do that and since age is a
31:11 - string we can't do that but what why is
31:14 - age a string didn't i type in 19 that's
31:16 - weird well by default whenever you type
31:20 - something in using input it
31:22 - automatically comes in as a string so
31:24 - even though i typed in 19 like this and
31:26 - i didn't put the two quotation marks
31:27 - around it it automatically looks like
31:29 - this
31:30 - inside of my program
31:32 - that's just the way it works because
31:34 - this input doesn't know what we're going
31:36 - to type right so it has to just assume
31:38 - it's going to be a string because a
31:39 - string can hold anything inside of it so
31:41 - long as it's wrapped in the quotation
31:42 - marks so that's why we have to do that
31:46 - so anyways that's what we do
31:48 - and yeah so we now need to actually find
31:50 - a way that we can convert this age to an
31:53 - integer so we need to take that string
31:56 - value and we need to convert it to an
31:58 - int so that we can actually compare
31:59 - these two things so the way that i do
32:01 - that is i write int and then i wrap the
32:04 - variable age with this in so i say int
32:07 - open bracket close bracket around h now
32:10 - that says whatever this age is is so
32:12 - whatever number this age is because in
32:14 - this case it's a string that's 19. let's
32:16 - just strip out the number from that so
32:19 - get rid of the quotation marks and make
32:20 - this an int value so now if i say is
32:23 - older equals the int value of whatever
32:26 - the age is so take those quotation marks
32:28 - away just make it an integer and check
32:30 - if that's greater than or equal to 18.
32:32 - so that's
32:33 - this will work now so let's actually
32:34 - have a look at this so what is your name
32:36 - tim what's your age 19 hello tim you are
32:39 - 19 years old and then it says true
32:41 - so that totally worked and that was fine
32:43 - we were able to convert the string that
32:45 - we typed in into a number so just keep
32:47 - that in mind if you're asking a user to
32:49 - type in a number then you want to make
32:51 - sure you convert whatever they typed
32:52 - into an integer so that when you want to
32:56 - compare it or you want to use it it's
32:57 - actually an integer value and there's
32:59 - another way to do this i can type int
33:01 - around the input statement up here and
33:04 - the reason this works is because this is
33:06 - pretty much doing the exact same thing
33:07 - we're doing down here except now we're
33:10 - going to actually assign an integer
33:12 - value to the age variable rather than
33:14 - just convert the age variable later on
33:16 - to an end
33:17 - so it takes the input whatever the user
33:19 - types in and then immediately just
33:21 - converts it right into an integer and
33:23 - now i can remove this
33:25 - and this will still work because this is
33:27 - being converted to an integer
33:28 - immediately so let's run this
33:30 - let's say what is your name tim what is
33:32 - your age 19 and now we get hello to him
33:35 - you're 19 years old true all right so
33:37 - we've covered a lot of stuff there's one
33:38 - more thing to go through and this will
33:40 - be kind of the most exciting thing we do
33:41 - so far so i'm excited to do it and this
33:43 - is called the if statement so right now
33:45 - we just printed true but ideally you
33:47 - know i want to give the user some
33:48 - different messages based on if they're
33:50 - old enough or not right i don't want to
33:51 - just print out true
33:53 - so how do i do that well this is where
33:55 - we use the if statement so you've seen
33:57 - that we make these little conditions
33:59 - right by using these conditional
34:00 - operators and these are either true or
34:02 - false now the reason we use these is
34:04 - because we can use them inside of an if
34:05 - statement so actually what i can do is i
34:08 - don't need brackets but i'm going to
34:09 - remove this variable is older and i'm
34:11 - going to take this age greater than 18.
34:13 - i'm just going to kind of code something
34:15 - out and then i'll talk about how this
34:16 - works
34:20 - if we could get this typing right you
34:22 - are old enough okay
34:24 - so
34:25 - what this is saying
34:27 - is this is an if statement what the if
34:29 - statement does it says if
34:31 - the condition here is true do this
34:34 - that's as simple as it is you literally
34:36 - read it like plain english you write the
34:38 - keyword if so if you write some
34:40 - condition here whatever you want to
34:42 - check but this needs to compare or it
34:44 - needs to be true or false so this needs
34:46 - to evaluate to true or false and then
34:48 - you put a colon it's important you add
34:50 - the colon
34:51 - then down here you do a tab right so you
34:54 - tab in so one indent level and whatever
34:56 - is inside of this indented block
34:59 - underneath the if statement will happen
35:01 - if this condition is true if it's not
35:04 - true it will simply skip whatever's
35:06 - indented
35:07 - and just keep moving on in the program
35:08 - so i'll just show you because i'm going
35:10 - to print this twice
35:11 - just so that this makes sense so i'll
35:12 - print this two times so now if the age
35:15 - is greater than equal to 18 we'll print
35:17 - you're old enough twice so let's run
35:19 - this
35:20 - and let's go ahead what's your name
35:22 - tim
35:23 - was your age 19
35:25 - hello tim you're 19 years old you are
35:27 - old enough you are old enough so that is
35:28 - exactly how that works now there's one
35:31 - more component to show to this and i
35:32 - think that was easy enough hopefully
35:34 - that makes sense it's just if you write
35:36 - some condition here and then if that
35:38 - condition is true you go ahead and you
35:40 - do whatever's in this block
35:42 - now what about if they're not older than
35:44 - 18 right so if i run this again and i
35:46 - say what is your name tim 19 hello tim
35:49 - you're an uh well i should i should have
35:51 - selected an age that was younger let's
35:53 - do tim 17 hello tim you are 17 years old
35:56 - what if i want to tell them that they're
35:57 - not old enough to play
35:59 - well i could do another if statement
36:01 - right i could do if age is less than 18
36:04 - and then i could print that out there's
36:05 - actually an easier way to do this and
36:07 - this is using an else so this else
36:10 - statement kind of combines with the if
36:12 - and whenever you write an if you have
36:13 - the option you don't have to but it's up
36:15 - to you if you want to put an else
36:17 - statement afterwards that tells you what
36:19 - to do if this condition is not true so
36:22 - essentially this is saying if this is
36:23 - true do this otherwise do this and now
36:26 - we're going to put another indented
36:28 - statement and we're going to say you
36:31 - are not
36:33 - old enough
36:35 - to play dot dot so let's try this now
36:38 - and just see how this works so let's go
36:39 - tim let's go 17 and now it says hello
36:42 - tim you're 17 years old you are not old
36:44 - enough to play whereas before it told us
36:46 - we were old enough to play
36:48 - so that is the basics of the if
36:49 - statements we have the if and the else
36:51 - now i'll show you one more thing with
36:53 - the if statement and then we'll kind of
36:54 - start the very beginning of our game and
36:56 - then continue the rest of it in the next
36:57 - one but we've almost learned pretty much
36:59 - everything we need to know
37:01 - so now we're going to go else
37:04 - if so ellis if is another statement that
37:07 - we can use and the way that this works
37:09 - is essentially we're checking for one
37:11 - more thing so let's say we had three
37:12 - options right maybe if they were younger
37:14 - than 14 um they just couldn't play if
37:17 - they were older than 14 but they had a
37:19 - parent with them they're allowed to play
37:20 - and if they're older than 19 they could
37:22 - play along maybe those are the three
37:24 - options we have so what i could actually
37:26 - do is i could change this around a bit
37:27 - and i can say if age is greater than or
37:29 - equal to 18 you're old enough to play
37:31 - then i could say else if
37:33 - so if this isn't true but this is true
37:36 - so what i put here
37:37 - age is greater than
37:39 - or equal to 14
37:41 - then what i can do is print
37:45 - you can play
37:47 - with
37:48 - supervision or something supervision
37:50 - okay so now what i'm saying is uh what
37:53 - is this sorry not elsif this should be
37:55 - el if i'm coding another language here
37:57 - sorry not elsif l if e l i f apologize
38:01 - about that but l if then you put the
38:03 - condition and then whatever you put in
38:05 - the indented block below that will
38:06 - happen if this is not true but this is
38:09 - true so i hope that makes sense but it
38:11 - goes like you know check this if it's
38:13 - true do this and skip the rest of it
38:16 - and then if this is not true check this
38:18 - if this is true do this skip the rest of
38:20 - it if this is not true go into the else
38:23 - and do this that is kind of the way that
38:25 - this works and you can actually put
38:27 - multiple l if statements uh underneath
38:29 - each other so you can do if l if l if l
38:31 - if l if else and these again are all
38:33 - optional but just remember that the else
38:35 - always comes at the end the lfs go in
38:37 - between and that you can have as many of
38:39 - them as you want but you don't need to
38:41 - so that's an important thing but let's
38:42 - just have a look at what happens now and
38:44 - say what is your name tim
38:46 - what is your age let's do 15 and now it
38:49 - says hello tim you're 15 years old you
38:50 - can play with supervision so that is the
38:53 - basics of the if elif else now let me
38:55 - scrap this actually i won't scrap this
38:58 - but i'll get rid of the else if and
38:59 - let's leave it at this for now because
39:01 - it's going to say okay
39:02 - actually we'll add one more thing to
39:04 - finish it up if age is greater than or
39:05 - equal to 18 print you are old enough
39:09 - to play and now what i want to do to
39:11 - wrap this up is ask them a question do
39:13 - you want to play so if they're old
39:15 - enough to play let's ask them if they
39:17 - want to play and let's do that inside of
39:19 - here
39:20 - so only if they're older than 18
39:23 - and they're old enough to play then i
39:25 - will ask them if they want to play
39:26 - otherwise i'm not going to so inside
39:28 - this if statement i'm actually going to
39:30 - say
39:31 - you know
39:32 - wants underscore to underscore play you
39:35 - can name this variable anything you want
39:36 - i just like to make mine descriptive
39:38 - i'll say input
39:40 - do you want
39:43 - oops
39:44 - do you want to play
39:47 - now i'm doing a space here just so that
39:49 - when they start typing and i forgot to
39:50 - mention this in the last video when they
39:52 - start typing it doesn't get squished
39:54 - right beside the text so i just add a
39:56 - space afterwards and it makes it a
39:58 - little bit nicer but wants to play
39:59 - equals input do you want to play and now
40:02 - i'm going to check
40:03 - if they want to play so i'm going to say
40:05 - if
40:07 - and i will actually say wants to play
40:09 - equals equals
40:10 - yes so if what they type in is equal to
40:13 - yes
40:14 - then print
40:18 - let's
40:20 - play exclamation point so i know that
40:22 - was a lot let me zoom out a bit here
40:23 - just so we can read this a little bit
40:24 - easier and now let's run this program
40:26 - for the last time before we wrap up this
40:27 - video so what is your name
40:29 - tim what is your age
40:31 - 18
40:33 - hello tim you're 18 years old you're old
40:35 - enough to play do you want to play let's
40:36 - type yes and it says let's play awesome
40:39 - let's run this one more time what is
40:40 - your name tim
40:42 - what is your age let's go younger than
40:44 - this time so let's go 17. hello tim
40:46 - you're 17 years old you're not old
40:48 - enough to play so i hope this is
40:50 - starting to make sense but i'll just
40:51 - give you a really quick summary so we
40:53 - welcome the user we ask them for their
40:55 - name and their age we convert their age
40:57 - right away to a number so that we can
40:59 - actually compare it later on we then say
41:01 - hello whatever their name is you are
41:04 - whatever their age is years old we then
41:06 - check how old they are if they're older
41:08 - than 18 we tell them they're old enough
41:10 - to play and then we ask them if they
41:12 - want to play
41:14 - if they say yes so if they type in the
41:16 - string yes we print let's play otherwise
41:19 - we tell them they're not old enough to
41:21 - play and that is the very beginning of
41:23 - our game and i hope you can see what's
41:25 - going to happen here in the future right
41:27 - so when they want to play now what i'm
41:29 - going to do is inside of here i'm going
41:31 - to ask them their first question so i'm
41:32 - going to say okay you know your first
41:34 - decision is do you want to go left or
41:35 - right or we'll make something up and
41:37 - we're going to keep kind of chaining
41:39 - inwards and nesting if statements
41:40 - together
41:41 - just to make all these blocks with all
41:43 - these different decisions
41:45 - and you're going to see it's going to
41:45 - get pretty intricate pretty quickly but
41:47 - i think this is pretty cool and right
41:49 - now you've learned almost everything you
41:51 - need to know to make this full game so
41:53 - the first thing i'm going to do is just
41:54 - kind of recap and just kind of run this
41:56 - program and see what we actually have so
41:58 - far so we know where we're going from
41:59 - here so welcome to my first game what is
42:01 - your name my name is tim what is your
42:03 - age 19 hello tim you're 19 years old
42:06 - you're old enough to play do you want to
42:08 - play let's type yes
42:10 - like that and boom it says let's play
42:12 - awesome now i just want to show you a
42:14 - case that we may not have considered yet
42:16 - so if i do tim
42:17 - 19 and do you want to play now what
42:20 - happens if i do something like this so y
42:22 - capital e s
42:24 - well i'll give you guys an opportunity
42:25 - to take a look at it if we have our
42:27 - condition here right so we say wants to
42:28 - play equals input do you want to play
42:30 - and we say if wants to play equals yes
42:33 - let's play so do we think when i type y
42:35 - with a capital e and then s that this is
42:37 - going to work
42:39 - well no it's not so if i do this it
42:41 - actually doesn't this if statement is
42:43 - not true this condition is not true and
42:44 - therefore this doesn't run so how can i
42:47 - actually go about and fix that well
42:49 - this is the first thing that i wanted to
42:51 - show you and that i guarantee you guys
42:53 - will find very useful for the rest of
42:54 - this kind of game and anything in the
42:56 - future there is this method and it's
42:58 - called a method that's it's not that
43:00 - important you don't have to understand
43:01 - what that means uh called dot lower so
43:03 - it actually looks like this dot lower
43:05 - and i'm typing it in the correct place
43:06 - here but what this does is it takes any
43:08 - string and immediately converts it into
43:11 - lower cases so all lower cases it takes
43:13 - any letters it has and just put it puts
43:15 - it to lower case so this is really
43:17 - useful because what we can do is we can
43:19 - take the input that we typed in
43:22 - immediately convert it all into lower
43:23 - cases and now when we want to check for
43:26 - equality it doesn't matter what
43:28 - capitalization we used in the string it
43:30 - will still be true because it'll just
43:32 - automatically go to lower case so we
43:34 - could type capital e and that will still
43:36 - this condition will be true and we'll
43:38 - still do let's play so in fact let me
43:40 - show you so notice i just put dot lower
43:41 - here
43:42 - and guess what there's actually another
43:44 - method called dot upper that we could
43:47 - use as well and dot upper will make it
43:48 - all uppercase so if we wanted to do this
43:51 - and make this all uppercase and then
43:53 - make this
43:55 - dot upper same thing right so i'm hoping
43:56 - this is making sense but essentially
43:58 - whatever you're going to compare here is
44:00 - going to have to be in all lowercase or
44:02 - all uppercase and that's going to
44:03 - correspond to whether you use lower or
44:05 - dot upper all right so let's run this
44:08 - now and let's see what we get
44:10 - so what is your name tim what is your
44:12 - age 19 do you want to play y e s okay so
44:15 - we have a capital y and a capital s and
44:18 - let's play that still works fine so
44:20 - that's cool i think that's an important
44:22 - method to know that's pretty quick so i
44:23 - just wanted to show that to you guys and
44:25 - now let's actually start building a game
44:26 - let's start making something cool and
44:28 - then we'll implement like maybe a health
44:30 - or some other interesting things into
44:32 - our game that i didn't have in the demo
44:33 - game
44:34 - so the first thing we want to do is
44:35 - actually i'm going to add an else
44:37 - statement here and i'm just going to
44:38 - print
44:40 - sia dot dot so if they don't want to
44:42 - play we'll simply tell them you know
44:44 - goodbye like see you later and then
44:46 - inside of here if they want to play so
44:48 - notice i'm nesting all these things
44:50 - right like there's an if and else inside
44:52 - of another if statement and that's
44:54 - totally fine because all the if
44:55 - statement says as well if this is true
44:58 - do whatever is indented and here we are
45:00 - and then inside here
45:02 - this if statement says if this is true
45:04 - do whatever's indented right so we go
45:06 - ahead and do that so what i'm going to
45:08 - do in here now is i'm going to ask
45:09 - another question and this will be the
45:11 - first decision that we want to make so i
45:12 - don't know what i want to make it i
45:14 - think i'm going to go with the classic
45:15 - do you want to go left or right just as
45:17 - our first kind of path but you guys can
45:19 - make this whatever you want and feel
45:20 - free at this point to kind of change
45:22 - around some of the stuff that i'm doing
45:23 - and make it your own so long as you
45:25 - understand what's happening so i'm going
45:26 - to say left underscore or underscore
45:28 - right equals
45:31 - input
45:33 - first choice
45:36 - dot dot dot
45:37 - left
45:39 - or right now it might be a good idea in
45:41 - your game to put brackets at the end
45:44 - of your answer and just put inside of
45:46 - the brackets what the user should type
45:48 - so left or right because technically
45:50 - right they might not know like they
45:52 - might type i want to go left or i want
45:53 - to go right so it might be a good idea
45:55 - to just put brackets inside of the
45:56 - prompt just so they kind of know what
45:59 - options they have like what they can
46:00 - actually type right and then what i'm
46:02 - going to do after this is i'm going to
46:04 - check if
46:05 - left underscore
46:07 - or underscore right is equal to
46:11 - left this will be my correct decision if
46:13 - i go left then what we'll do is we'll
46:15 - print something or we'll do something
46:17 - otherwise
46:19 - we'll we'll just print out to the screen
46:22 - u
46:23 - fell
46:24 - down and lost
46:26 - dot dot you can see i'm not super
46:27 - creative when it comes to making these
46:28 - games but the idea is i'm just trying to
46:30 - show you how the paths work um so this
46:32 - is like if they lose so if they decide
46:34 - to go right or they type anything other
46:35 - than left
46:37 - then we'll print out you fell down and
46:38 - lost otherwise if they go left
46:41 - then what i'll ask them is another
46:43 - question so say okay if they go left
46:44 - they're going the right direction so
46:46 - let's ask them another question awesome
46:48 - and in fact inside of else i don't even
46:50 - have to make them lose i could ask them
46:52 - another question in here too right we
46:54 - can make it as confusing as complicated
46:56 - as we want and make it really hard for
46:57 - the user to figure out what way they're
46:59 - kind of going so they have to play the
47:00 - game a bunch of times so anyways let's
47:03 - go here inside of left
47:04 - and let's say i'm just going to put ans
47:06 - that's short form for answer that's what
47:08 - i usually end up doing as we get longer
47:10 - and longer rather than making these
47:11 - variable names but i'm going to say ans
47:14 - equals input
47:17 - nice
47:19 - you follow the path
47:21 - and reach a
47:24 - lake
47:26 - do you swim across
47:29 - or go
47:30 - around question mark and then inside of
47:32 - here i'm going to put
47:34 - a cross as the answer right is that a
47:36 - cross i don't think you need two c's so
47:38 - across or
47:40 - around just telling them what they can
47:42 - type in right and now i'm gonna have to
47:43 - zoom out a little bit just so we can
47:46 - read oh that's better okay and now
47:48 - inside of here what i'm gonna do is i'm
47:50 - gonna check what their answer was right
47:52 - so i'm going to say if ans
47:53 - is equal to and maybe we'll say that
47:56 - going across was the correct answer
47:58 - actually let's say going around was the
47:59 - correct answer so if a and s equals a
48:01 - round then we'll do something and then
48:03 - we'll say l if so i'm actually going to
48:05 - switch it up here just to show you
48:06 - something else l if
48:08 - um
48:10 - lf ns equals equals
48:15 - across
48:17 - and then else so the reason i've done
48:19 - this is because what i actually want to
48:20 - do
48:21 - right now is i want to make it so that
48:22 - if they type across or they type around
48:25 - both options are correct they can go
48:27 - both way
48:28 - but both ways will lead them to
48:30 - different types of decisions right so
48:31 - we'll get asked now different questions
48:33 - inside of here
48:34 - but if they don't type around or across
48:37 - right then i want them to lose so i'm
48:39 - just going to go down here and say print
48:43 - you
48:43 - lost
48:44 - again i don't have really good like you
48:46 - know lose messages but that's totally
48:47 - fine and then inside of here in round
48:50 - what i'm actually going to say is that
48:51 - one of these options is better than the
48:53 - other so here is where i'm going to
48:54 - implement something that i hope is you
48:56 - guys will appreciate because it is a
48:57 - little bit more complicated but i want
48:58 - to show you how we can do something like
49:00 - this if they decide to go across the
49:02 - lake i'm going to kind of make up a
49:04 - story and say they got bit by something
49:06 - and they lose health and maybe we'll put
49:08 - something inside of here that checks you
49:10 - know what their health is so if their
49:11 - health goes lower than zero then they
49:13 - lose right then they lose the game
49:15 - completely i think that'll be
49:16 - interesting to do so let's do something
49:18 - like that so if i want to keep track of
49:20 - health right and maybe we set them off
49:22 - with like default health of one or
49:24 - default health of 10 or something and
49:26 - they lose health we'll need a variable
49:28 - to store their health and then we'll
49:29 - need to subtract from that variable so
49:31 - what i'm going to do is on line 7 i'm
49:33 - going to make a variable called health
49:35 - i'm going to set that equal to 10. so
49:37 - they could technically have 10 health
49:39 - and we'll tell them how much health they
49:40 - start with and how much health they lose
49:42 - so maybe to start we'll print out
49:46 - you
49:47 - are starting with and then in this case
49:50 - comma
49:52 - the number
49:54 - and then comma
49:55 - health so you are starting with 10
49:57 - health that'll print out 10. the reason
49:59 - i put health here instead of 10 is
50:00 - because if i change this number maybe i
50:02 - change it later to 15 20 something like
50:04 - that i want this to automatically update
50:07 - i don't want to have to rewrite the
50:08 - number two times it's better just to
50:10 - have it stored in one place so that's
50:11 - why i've done that so we've definitely
50:13 - have a health
50:14 - and we'll say if ans equals around um
50:17 - then you know whatever if a and s equals
50:19 - a cross then we'll print something else
50:21 - in fact actually what we can do is
50:22 - something cool here and i'm going to get
50:24 - rid of the else and just just change
50:26 - this a bit so i'm going to say print
50:28 - and inside of here i'm going to put
50:31 - you
50:32 - went around
50:35 - and reached the other
50:38 - side
50:40 - of the lake and then here i'll print
50:45 - you
50:46 - managed to get
50:48 - across
50:50 - but were bit
50:52 - by a fish i don't know let's just say
50:54 - that you were bit by a fish and lost
50:57 - five health so i'm gonna tell them that
51:00 - they lost five health here and then what
51:01 - i'm gonna do is because they lost health
51:03 - and i'll put some periods here is i will
51:05 - say health
51:07 - minus equals five so we'll just you know
51:10 - remove five health from their health so
51:12 - now they only have five health and now
51:14 - what we can do down here is we can ask
51:16 - them another question right and we can
51:17 - keep going and in fact what i'll do now
51:19 - is i'll pause and we'll run this just to
51:21 - see where we're at right now and then
51:23 - i'll just kind of keep going and just
51:24 - coding out my version of the game just
51:26 - showing you guys some different cool
51:27 - things that we can do and hopefully you
51:29 - guys take this upon yourself to make
51:31 - your own cool game right and change the
51:33 - paths and decisions and this will be
51:34 - like really good template for you to
51:36 - figure out what to do so let's run this
51:37 - and let's go what is your name so my
51:39 - name is tim i'm 19. hello tim you're 19
51:41 - years old you're starting with 10 health
51:43 - you're old enough to play do you want to
51:45 - play so actually maybe i should put the
51:46 - hell somewhere else this is great so i
51:48 - tested i realized something was wrong so
51:50 - now i only want to tell them how much
51:51 - help they have right if they're older
51:54 - than 18. so in fact let's get rid of
51:56 - this
51:57 - you know telling them what they are i
51:58 - don't need that anymore and then after
52:00 - we ask them do you want to play
52:02 - we'll print out you're starting with 10
52:04 - health let's play and we can leave the
52:06 - health defined up here it doesn't matter
52:08 - where we have it but we'll just put it
52:09 - here so that we can access it throughout
52:11 - all of the stuff down here great so
52:13 - let's run this now
52:15 - and let's zoom in a bit it says what is
52:17 - your name tim what is your age 19 uh
52:20 - you're old enough to play do you want to
52:22 - play yes you're starting with 10 health
52:24 - let's play first choice left or right so
52:26 - where should we go let's go left nice
52:28 - you follow the path and reach a lake do
52:29 - you want to swim across or go around
52:31 - let's go across
52:33 - and it says you managed to get across
52:34 - but you were bit by fish and lost five
52:36 - health so you can see that the game is
52:37 - actually working right and we'll run it
52:38 - one more time just to test out another
52:40 - path so tim
52:42 - 19 you're old enough to play do you want
52:43 - to play yes
52:45 - first choice left or right let's go
52:46 - right
52:47 - you fell down and lost boom so the game
52:49 - is functioning okay so let's keep going
52:51 - and let's add some more stuff into this
52:53 - so health minus equals five so now we're
52:55 - at five health now what i'm gonna do
52:57 - here
52:58 - is we'll have to do something to check
53:01 - if they are lower than zero health right
53:04 - so they'll be at some point where they
53:05 - could potentially lose all their health
53:07 - and if they're at lower than zero health
53:09 - or they're at zero health then we'll
53:10 - have to tell them that they lost so
53:12 - that's going to be interesting to do
53:13 - actually
53:14 - but first let's just ask another
53:16 - question so let's say announce equals
53:18 - input
53:20 - and inside here what do we want them to
53:22 - do next maybe i'll tell them that i'm
53:23 - going to take an example from my
53:25 - previous game i'll say you see a river
53:26 - and you see a house do you go towards
53:28 - the river or do you follow the house
53:29 - right or other way around you go towards
53:31 - the house or do you follow the river
53:32 - okay
53:35 - you notice
53:37 - a house
53:39 - and a river
53:41 - which
53:42 - do you go to
53:45 - and then again i'll give them what they
53:46 - need to type in here just to make it
53:47 - easy so we'll say river
53:50 - slash house
53:53 - and make sure we add a space here in
53:54 - between the question mark and the end of
53:56 - the quote just so there's a
53:58 - a space when they're actually typing it
53:59 - in and now let's check if ans
54:02 - equals equals in this case
54:05 - house
54:06 - then we'll do something
54:08 - else we'll do something else so what i'm
54:10 - actually going to say here this will be
54:11 - kind of an interesting little twist to
54:13 - this game i wasn't even thinking about
54:14 - adding is if they decide to go the river
54:16 - we'll just tell them that they like fell
54:18 - in the river and they lost okay and then
54:20 - if they go towards the house we'll tell
54:22 - them that they went towards the house
54:23 - but they lost five health
54:25 - because like the guy at the house hit
54:27 - them or something i don't know i'm
54:28 - trying not to be too uh too violent in
54:30 - these answers but the idea being that i
54:33 - wanted to make i want to make it so that
54:34 - they can get past this but if they
54:36 - decide to go across it will actually end
54:39 - up being the wrong decision because they
54:41 - lose five health right and then down
54:43 - here they'll lose another five so
54:45 - they'll lose the game i hope that makes
54:46 - sense but you'll see as i start coding
54:48 - it so if ans equals house then what
54:50 - we'll say is we'll say parent
54:54 - you end you go to the house
54:59 - go to the house
55:01 - and
55:03 - are greeted
55:05 - by the owner dot dot dot
55:09 - he
55:11 - doesn't like you and
55:13 - you lose
55:15 - five help
55:17 - why not all right we'll just go with
55:18 - that we don't need any more deeper
55:20 - explanations then we'll say health
55:22 - minus equals five so we're removing five
55:24 - health again that's equivalent to health
55:26 - equals health minus five so whatever the
55:28 - value of health is we'll subtract five
55:29 - from it the reason i wouldn't just set
55:31 - health to fiber i wouldn't just set it
55:32 - to zero is because we don't know if they
55:34 - lost five health above here so we need
55:36 - to make sure we just subtract that value
55:38 - and then else
55:40 - we'll print down here
55:43 - you fell in the
55:45 - river
55:46 - and lost dot dot okay
55:49 - so now what we'll do after this right so
55:52 - you can kind of see the way that i'm
55:55 - actually let's see here managed to get
55:56 - across so now actually inside of this if
55:58 - statement sorry i'm just trying to think
56:00 - of what we're actually going to do here
56:01 - on line 30 i'm going to check if their
56:03 - health is lower than zero so if they
56:05 - have lower than zero health because this
56:07 - will be the first point in the game
56:08 - where they could potentially be at zero
56:10 - health if they lost it twice then we'll
56:12 - tell them that they lost otherwise we'll
56:13 - keep going right and then maybe we'll
56:15 - wrap up the game with one more path or
56:16 - something so we'll say if
56:19 - health
56:20 - is less than or equal to zero
56:22 - then what we'll do is we'll print
56:26 - you
56:28 - now have
56:29 - zero health
56:31 - and we don't need a comma and you
56:34 - lose
56:35 - the game
56:36 - dot dot dot all right so there we go you
56:39 - lost the game actually we'll just do and
56:41 - you lost the game
56:43 - all right so if their health is lower
56:45 - than zero they lose otherwise then
56:47 - inside of here we'll say print
56:51 - you
56:52 - um
56:54 - have
56:55 - survived
56:57 - you win i don't know we'll just say that
56:58 - they win at that point and i'll show you
56:59 - how we can add some more cool things too
57:01 - all right so that pretty much wraps it
57:03 - up let's test this game a few times and
57:04 - make sure that everything's working fine
57:07 - uh and then we'll add anything we need
57:08 - to so what is your name tim let's
57:10 - actually test one if i go like 14
57:12 - uh you're not allowed to play okay so
57:13 - let's go again
57:15 - tim
57:16 - 19
57:17 - yes
57:18 - first choice left or right let's go left
57:20 - nice you follow the path and reach a
57:22 - lake do you swim across you go around
57:23 - let's go
57:25 - across you managed to get across but you
57:27 - were bit by a fish and lost five health
57:29 - you notice a house and a river which do
57:31 - you go to the river the house let's go
57:32 - to the river
57:33 - and you fell in the river and lost okay
57:35 - let's try a few more paths just want to
57:37 - make sure this works but i hope you guys
57:39 - understand the point of this right is to
57:40 - go down like all these different
57:41 - branching paths and you know if you make
57:43 - a bad decision at the beginning you're
57:45 - gonna have to keep going down all the
57:46 - roots until you realize that oh no i
57:48 - should have gone right instead of left
57:49 - right so you can make these really
57:51 - intricate and a lot of people that i've
57:52 - taught to do this before have made
57:55 - really cool games they're like hundreds
57:56 - of lines of code that take you a really
57:58 - long time to actually figure out so i
57:59 - think it's pretty interesting okay but
58:01 - first choice left or right
58:03 - let's go left nice you follow the path
58:05 - and reach a lake do you swim across or
58:06 - go around
58:07 - let's actually go across and let's test
58:09 - out this health stuff so we go across
58:11 - and then it says you know it's a house
58:12 - and a river so let's go to the house it
58:14 - says you go to the house and you are
58:15 - greeted oops i should probably spell
58:17 - that right by the owner he doesn't like
58:19 - you and you lose five health you know
58:20 - you now have zero health and you lost
58:22 - the game right so you didn't technically
58:24 - lose because you went to the um
58:27 - what is it because you went to the house
58:29 - it just you lost because you lost five
58:30 - health right now i'll show you the
58:31 - example
58:33 - where if we don't lose five health at
58:35 - the first step we can actually survive
58:37 - by going to the house so what is your
58:38 - name tim what is your age 19
58:41 - do you want to play yes let's play first
58:43 - choice left or right so let's go left
58:45 - let's say nice you follow let's go
58:47 - around this time you went around and
58:49 - reached the other side of the lake you
58:50 - know it's a house and river which you go
58:51 - to let's go to the house
58:53 - and you go to health and you're greeted
58:54 - by the owner he doesn't like you and you
58:55 - lose five health you have survived you
58:56 - win so even though we lost five health
58:58 - we still won because in the previous
59:00 - step we didn't lose five health so i
59:02 - hope that me showing you the health
59:03 - thing gave you some ideas for some stuff
59:05 - that you can do what you also can do is
59:08 - you can ask
59:09 - you can do something like let the user
59:11 - pick a weapon or something right so a
59:12 - cool example and i'll just talk about
59:14 - some kind of add-ons now because we're
59:16 - kind of wrapping up the video anyways
59:18 - you could do something like
59:20 - you can start by asking them what weapon
59:22 - you want so you could say you know
59:24 - weapon equals
59:26 - input
59:30 - pick a weapon question mark or pick a
59:33 - weapon colon and then your options could
59:35 - be something like
59:36 - sword um i don't know maybe like a baton
59:40 - i'm trying not to be too violent and i
59:42 - don't know let's go something like taser
59:43 - right so you can tell them to pick one
59:45 - of these weapons and then based on the
59:46 - weapon they pick you can say oh well if
59:48 - they have this weapon then they're able
59:50 - to get past this obstacle if they don't
59:52 - have this weapon then they can't so what
59:53 - you would do if you want to check
59:54 - something like that is you'd say if
59:57 - weapon
59:58 - equals equals whatever it equals and if
60:00 - it equals that then boom they're good to
60:03 - go right and they can continue on now
60:04 - the last thing i'll show you because we
60:06 - have one minute left
60:08 - kind of before i'm planning on wrapping
60:09 - this up is how you can actually check
60:11 - multiple things on the same line now i'm
60:13 - just going to kind of introduce this to
60:14 - you guys because then you can kind of
60:16 - look at it yourself it's pretty easy
60:17 - there's these things called and and or
60:20 - now and and or are ways that we can
60:23 - chain conditions together i'm not going
60:25 - to explain them in depth but if you do
60:26 - something like true or
60:29 - false
60:30 - the result of this
60:31 - is true
60:33 - the reason this is true is because when
60:34 - you have an or this pretty much says
60:37 - look at the left side look at the right
60:39 - side if one of them are true the whole
60:41 - thing is true so if you go ahead and do
60:43 - something like you know
60:46 - x
60:47 - let's i would say like
60:49 - 5 equals 5
60:52 - 7
60:53 - equals equals 8 then this would be true
60:55 - right because this condition is true
60:57 - this condition is false so since one of
60:59 - them is true the whole thing is true now
61:01 - contrasting that with and
61:03 - so when you do and what this does is it
61:06 - checks if
61:07 - both of the things on the left and right
61:09 - hand side are true if they are the whole
61:11 - thing is true if they're not it's false
61:13 - so in this case this would be false
61:14 - because one of them is false but if i
61:16 - change this to be like 7 equals equals 7
61:18 - then
61:19 - this is true
61:21 - so you can use this and and or to
61:24 - actually chain conditions together so
61:26 - you could check like inside of here if
61:28 - left or right and
61:32 - you know weapon
61:34 - equals equals whatever you can do
61:36 - something like that oops so i put this
61:37 - in the wrong
61:39 - if left left or right equals equals left
61:42 - oops
61:44 - and weapon equals equals whatever it
61:46 - equals right inside of here
61:48 - then this whole thing will work so you
61:50 - can check if this whole condition is
61:52 - true or false and then execute an if
61:54 - statement based on that
61:55 - so with that being said i think that's
61:57 - pretty much it i'm going to zoom out
61:58 - here so you guys can have a look at all
62:00 - of the code at once i understand this
62:02 - maybe isn't mobile friendly but at least
62:03 - now you can kind of see what we've
62:05 - actually created and i really hope that
62:07 - throughout this series you guys have
62:08 - learned something about python you've
62:10 - learned kind of the basics of the
62:11 - language and if and else and i've given
62:13 - you enough knowledge that you now feel a
62:15 - little bit confident to go out there and
62:16 - make some kind of cool game i will say
62:18 - there's a ton more stuff you can do with
62:20 - this there's a lot more things to learn
62:22 - but again the focus of this series was
62:23 - around building a project and i really
62:25 - hope that this helped you do that so
62:26 - with that being said that has been it i
62:28 - hope you guys enjoyed if you did make
62:30 - sure you leave a like subscribe and i
62:32 - will see you in another youtube video

Cleaned transcript:

hello everyone and welcome to a brand new python tutorial series so in this series i'm going to be teaching you the basics and fundamentals of the python programming language and we're going to immediately be applying those into our own project slash game so the idea behind this series is that not only do i want to teach you these concepts but i want us to actually apply them into a project so we can see where they're used and how we use them so at the end of this series you will have a complete finished game that you will be able to show off and the way that we're going to be making this game makes it really extendable and flexible so you can add your own stuff and really customize it as we go through so before i say anything else let me just note that this tutorial series is really for complete beginners this is for people looking to get up and running in python as fast as possible and in these next three videos we're going to be learning a bunch of different skills and syntax and then by the end we're going to have that complete project so let me show you an example of what this project could look like keep in mind this is just like kind of a smaller version of what it might be this is very flexible and we might make it a little bit different as we go through so let me run this and the type of project that we're really making here is a choose your own adventure game now in my opinion this is one of the best projects you can work on as a beginner because of how flexible it really is so let me just show you what it is and then you guys should get an idea pretty quickly of why this is a great project to work on so you can see it says welcome to my first game what is your name i'm going to put tim what is your age let's put 19 and says you are old enough to play do you want to play let's type yes it says you are starting with 10 health all right let's play first choice left or right let's decide to go left you can see that what's kind of happening here is these first steps we're just setting up in the game but now it's going to give me a bunch of decisions to make and based on what i choose at previous steps it will give me different decisions so i decide to go left here it says nice you follow the path and reach a lake you swim across or go around what do we think do we go across or go around let's go across so i go across it says you managed to get across but you were bit by a fish and lost five health you notice a house in a river which do you go to the river or the house so let's decide to go to the river and let's see you fell in the river and you lost so hopefully that gives you an idea of how this works let me run it one more time and i'll show you that there's different options that will pop up based on where you decide to go so tim 19 yes you're starting with 10 health let's play if i decide to go right notice that immediately i just lose right so there's all these different paths and kind of decision trees and branches that we can go down and it makes this game really cool because it's pretty simple to create obviously for beginners that's what we're going to be doing but it's also really cool and really flexible and you can kind of make whatever you want out of it so with that being said we need to get our coding environment set up here fortunately for us we're actually going to be using a platform called replit so it's repple.it so repl.it this is an online browserbased coding environment and i'm just going to walk us through how we can actually set this environment up and get started right away without having to download or install any software so as i mentioned we're going to be using an online coding platform called replit so it's spelt repl it that is the website url i will link that in the description as well but this is a free browserbased coding environment so what that means is that the only prerequisite for this series is that you have a browser and you have internet connection so to get started you need to go to this link and obviously sign up if you don't have an account or log in so i'm going to log in but when you sign up it's going to ask you to input your favorite programming language i would recommend you just select python it doesn't matter but that's just something that you will have to go through to get this set up so i'm going to go here to new rapple and i'm going to select python and give this a name now the name that i'm going to give mine is first game feel free to name yours whatever you'd like and then just notice that this will be a public rebel which means it'll show up on your profile and everyone can see it if you want to go for private rebels that is kind of a premium feature but i wouldn't worry about that we're not making anything that we care if someone steals so let's go create repple and let's boot up into our first environment all right so the first important thing that we need to understand is how we can actually print things and get things to show up in the console so before remember how when i ran the code we would see some kind of output right it said like do you want to play the game or it would tell us some kind of message so how do we actually go ahead and do that well the first command we're going to learn in python is known as print so all of the things i'm about to show you are pretty much called syntax syntax is really like the grammar of a programming language it's like where does the period go where do we have parentheses it's just the structure the way that we write the code and if you hear me use the word syntax that's what that means but the syntax to print something out in python is really simple we just put print we put an open parenthesis and a close parenthesis and then inside of the print statement we put a set of single or double quotation marks and inside of these quotation marks whatever we want to print to the screen so you can think of it as like we're printing a quote right if you wanted to say that although this is going to be referred to as something else that i'll talk about in a second and whatever is inside of these quotation marks that text will just show up in the console so if i say hello world the classic first program then let's run and we get hello world popping up in the console so this is the easiest way to print something out there's a bunch of other ways we can use this statement but again it's just print open parentheses and then you need these um these double quotation marks or single quotation marks it doesn't matter which one but make sure the set is obviously the same so you don't go like single quotation mark double quotation mark that won't work and then whatever inside of here that you want to print out so let's apply this now immediately into our project like i said the first thing we want to do in our choose your own adventure game is probably introduce the user or whoever is playing to the game right so what i'm gonna say is uh welcome oops if i could type welcome to my first game now you guys can obviously put whatever you want inside of here i'm just going to say welcome to my first game maybe you want to be more creative and put the name of your game although we might not even know what that is yet but don't worry we can always go back and change that all right so print welcome to my first game great so that is the print now what i need to talk about is variables and data types now this is a really important concept this is going to be a little bit more theoretical it's hard to apply this but we definitely need to understand this so inside of python we kind of have four main types of information or data so in our programming languages we have data right that's information that we're maybe gonna store that we're gonna pass around that we're gonna manipulate if you think of an application where we're just counting say we're just counting up well we're going to have to have some notion of like what the counts at right that would be an example of data that we're going to store in our program there's lots of examples of this but these data this data that we have has different data types and there's kind of four main ones that we need to cover so the first one is string the second one is int then we have float and then we have bull now a string which is represented by str i'll actually just type out string here so you can see it fully is anything wrapped inside of double quotation marks or single quotation marks so like hello is an example of a string hi is an example of a string 9 89 is an example of a string anything that's inside of double or single quotation marks is a string and strings are just a collection of characters they're just text right and usually we're going to use strings just to print stuff out to the console um there's a bunch of other use cases of them of course but for now that's what we can kind of think of as strings next we have ins now ins are any whole number so just the number they're not wrapped in quotation marks or anything like that just any whole number it could be negative as well that's totally fine it could be a really big number any whole number that does not have any decimal points is an int otherwise known as an integer so that kind of follows our understanding for math so hopefully that one makes sense next we have float now a float is any number that has a floating decimal point so if i have something like 6.0 that's a float because we have a decimal point and then something after we have a number like 7.5 that's a float negative 9.8 that's a float and negative 100.0 again if float so even if it's a dot o which technically is still a whole number right because 100.00 is a whole number if it has the decimal point anywhere it's considered a float and lastly we have a boolean a boolean is one of two values true or false so these two exact things that i typed nothing different about them so the capital t and the capital f is very important if you see one of these two things and you can see they're kind of highlighting in blue telling us their fancy fancy thing in the language and those are booleans so i'll leave this and what i'm going to call a comment which is actually interesting to show you guys so if i do three quotation marks and then i do another three quotation marks like this this is actually what represents a comment or a multiline comment inside of python this isn't super important to understand but what this means is that whatever i wrap inside of these triple quotation marks and i can put these anywhere i want this will just be ignored by my program so right now we're going to print this right and that's going to work fine but if i were to wrap this inside of triple quotation marks we can see it kind of gets commented out and now that means our program is just going to ignore whatever's inside of these sets of triple quotation marks so if i run my program i no longer am printing that out and there's actually another way to make a comment as well and that's to use a pound sign and what this does is simply comment at one line so it just comments out whatever comes after it on the line this sometimes is useful if you just want to comment at one line not a whole block of code like i've done here so i'll leave this down a little bit at the bottom of the screen and now we'll actually start writing a bit more code so there we go we understand data types now we need to talk about variables so variables are essentially a way of storing data now you can think of a variable like in math right where we had like x equals 5 x equals 7. that's a really similar way that they work here in programming and to make a variable just show you a few examples it's quite easy you simply pick a name for your variable in this case let's say x you put an equal sign and on the right hand side you put some data type or you assign it equal to another variable or some other things that we'll talk about later but essentially you put something on the right hand side that you want to be stored in the variable so in this case maybe i want my variable x to store an int which is uh the value 5. awesome there we go that's all i need to do to make a variable x that stores the value 5. now if i actually go ahead and write another print statement here which is totally valid we can write as many print statements as we want what's going to happen now is we're going to print welcome to my first game we're going to read the next line because we do read code top to bottom most times other than certain circumstances but you can think that when we execute the program we read from the top so left to right top to bottom that's just the way it works so then we we do this we set x equal to 5 and now what i'm going to do is actually print x now notice that i didn't surround x in quotation marks the reason i didn't surround it in quotation marks is because it's a variable so a variable is actually something that i can print totally fine right inside of the print statement because i'm not trying to print out the letter x i'm trying to print out whatever the value is that's stored in the variable x so in this case i'm going to print out 5 because x equals 5. so if i run this let's have a look welcome to my first game five awesome there we go we now kind of understand variables so of course i can store other things in variables too i could store the value true right this would be considered a boolean or a bool let's have a look at this now so now we print out true and that's kind of the basics on variables they can store things so you set a variable name equal to something now there's a few rules with our variables the first has to do with their naming so when we create a variable all we kind of have to do is just type something out and set it equal to something else but the thing that we type out or the variable name has to follow these rules it can only contain lowercase and uppercase letters underscores and numbers so it cannot contain any special characters other than an underscore and it cannot start with a number so something like hello one is totally valid hello one equals nine awesome hello one underscore totally balanced but as soon as i go one hello note you can see we're getting this red squiggly line not allowed we can not start a variable with a number but i can go ahead and do something like that that's fine i can put a number in between just follow those rules and typically you don't really use numbers in your variable names you're just going to use some text maybe uppercase and lowercase letters and in python if you want to do a space because there's no spaces allowed in variable names just use an underscore so something like hello underscore world this is the convention for making variables you separate anything that's kind of two words using an underscore so let's say hello equals nine right and then we can print out hello and we'd get the value nine now of course we can make a lot of other variables two we can say the variable yes equals and maybe it's equal to the string hello i can actually do something crazy and say hello equals yes now what that's saying is that hello this variable hello is equal to whatever is stored in the variable yes so in this case hello will be equal to hello funny right but that's how that will work so we can assign variables to other variables we can do something like hello equals hello plus nine totally fine and in fact what i'm going to do now excuse me is uh i'm gonna try to actually show you how we can ask the user for some input and store what they type in in a variable so now we're on to the next part which is getting user input so to get user input what that means is that in the console here we're gonna let the user type something in because right now if i run this you see that it says welcome to my first game and then the program kind of just ends after that ideally i would like to ask the user what their name is and store that in a variable so let's go ahead and do that i'll just print it out and then i'll talk about how this actually works so i'm going to make a variable called name the reason i've called it name is because it's going to store my user's name and usually we want to name our variables something that are meaningful and i've set that equal to input and inside of this here i'm going to put a string that is the question i want to ask the user so what is your name question mark now notice i did a little space at the end try to think of why i would have done this space in just a second but just keep in mind i did do this space just remember that so now what i'm going to show you is what happens when i run this program so let me move this over here let's zoom in welcome to my first game what is your name let me type tim alright so i typed him and notice that here the cursor is going and i can type stuff right into the console that's because i used this input key so what this says if i have input and then i put what's known as a prompt inside of here that whenever we read this line of codes when our program actually reads this it will say okay print this out and then wait for the user to hit enter so let them type something whenever after we print this out so on the same line as what is your name and then as soon as they hit enter we're actually going to take whatever they typed and we're going to store it in the variable name so if i type tim like that what actually ends up happening and i'll have to zoom back out here is that the variable name is going to be equal to tim because i typed tim and then if i type joe the variable name is going to be equal to joe because i typed joe so to prove that to you let me print out name because we can print out variables right so this variable should equal the name we typed in and then let's just print it out so let's have a look what is your name tim and there we go it prints out tim now notice i'm not just lying to you here if i type joe it prints out joe so we are grabbing and storing the user's name by using this input tag now the next thing i actually want to grab from the user is their age we're going to do a cool thing here that make sure they're a certain age before we let them play the game so let's say age equals input and then what do you guys think we should put inside of here well have a think about it for a second because i am about to start typing pause if you need to but i'm going to put what is your age and now what's going to happen is we're going to ask the user for their name then we're going to ask the user for their age and they're going to type both of those values in so let's run this and let's say what is your name tim what is your age 19. boom stops there we go now age will store 19 and name will store tim so if i want to show you those two things what i can do is actually print them out and i'm going to show you the last thing kind of for this video is how we print out multiple things on the same line so let's say i wanted to say something like hello tim you are 19 right so i want to print their name and then i want to print their age and i want to combine that with a few other words just to kind of welcome the user well how do i do that there's a few different ways to do it but the way that i'm going to show you is kind of the most common and it's something like this essentially you can separate anything that you want to print on the same line with a bunch of commas so i can do something like hello comma name and what this will do is print out the string hello that we've already talked about we understand we can print out this and it'll show the text then we'll print out whatever the variable name is so whatever's stored inside of there and this comma will automatically put a space in between them so hello space name where name will be equal to whatever we typed in then i can say hello tim you are and then i'll put age comma years old like that and there we go that's all we need to do to print out hello whatever their name is you are whatever their age is years old so we've just separated them by commas and now it'll print all those things out so let's have a look here let's go tim 19 hello tim you are 19 years old and let's say um actually let's just leave it like that for now i got rid of some of the comments i had below and we've just left this now and what this program does at this point is just welcomes us to the game asks us for our name and age and then prints out the name and age of the user so whoever typed that in now what i want to do here and there's a few things we're going to have to learn to be able to do this is check if the user is old enough to play our game so i want to check if they are you know older than 18 or if maybe this game is pg13 or something right that's what i want to make sure that they're the correct age before we actually prompt them you know do you want to play so before we let them start playing we want to check that they're older than a certain age so how do we actually do that well that leads me to an important thing called conditions so first we need to talk a little bit about arithmetic so arithmetic is just math there's four main operators in uh are not four sorry there's actually more than four there are some main operators inside of python that allow us to do arithmetic arithmetic is just math right so we have the asterisk the star the plus the minus and the modulus now there's also a double slash 2 which we'll talk about very briefly and these are important these are the operators for math operations so the asterisk is multiplication the slash the forward slash is division the plus is addition obviously the minus is subtraction the percent sign is actually modulus which gets us the remainder of a division i'll show you and the double slash stands for integer division so these are the main operators that we can use and i just want to show you how we can do some basic math uh just so you have that skill if you need to use it we may not use it in this kind of project but it is something important so i figured i'd show it so let's say we have the variable x equals 9 and y equals 8. what do i do if i want to add x and y well i could do x plus y right that technically would add them but i want to store that addition somewhere else so just something important to understand is that when you do something like x plus y this does not assign x to 17. it might make sense right if you say oh x plus y you might be saying like oh add y to x i could understand why that may seem logical to some people but this doesn't really work in programming when i do this all that happens is this gives me a value 17 but it doesn't get stored anywhere so what i need to do if i wanted to say add the value y to the variable x is do something like x equals x plus y now i'm going to say the variable x is equal to whatever the previous value of x was plus y that will actually do that addition for me now same thing if i do this so plus equals is a shortcut for what i just showed you the people that made python know that a common operation is to add one variable to another so rather than having to rewrite you know x equals x plus y you can just do x plus equals y which stands for x is equal to the addition of x plus y right that's pretty much what that's doing so that will assign the value of 17 to x if you did something like that now when you're doing arithmetic the order of operations apply so let's say i have a variable z and i said z is equal to 9 times or not 9 times 8. x asterisk y plus y well the order of operations that we know uh will follow which means this multiplication will happen before this addition now let's say we didn't want that and we wanted to you know change the order of operations well we could use parentheses like we would in any other map or any other programming language or math or whatever and then this will follow so we will do the parentheses first now these are the common operations right so this is multiplication that's division uh now i'll just show you the kind of two or three ones that you might not know so the exponential operator which i actually haven't shown it is the two asterisks so when you do two asterisks that stands for raised to the power so x raised to the power of y plus y so whatever that would be so 16 i guess and then the other two operators i wanted to show you were the mod operator and the integer division operator so the mod operator what this does is get the remainder after division so if i say x mod y this is actually equal to 1. now the reason this is equal to one is because the way you do this is you say okay how many times does eight go into uh nine how many times it goes in one time fully right it goes in one full time what is the remainder what after you take that eight out of the nine well it's one right so if you do nine divided by eight you get one point something but really it's one remainder one that's the way you can think of it so like if i had say five and two then the mod again would be one because you say how many times does two go into five well it goes in two times okay so what is that that's four let's take four out of five okay what's the remainder now well there's one left so that's remainder one it's pretty straightforward that's how that works whenever you do something mod 1 obviously the remainder is going to be 0 because 5 can be divided by 1 perfectly fine and if i did something like 0 mod 1 then that would be equal to 0 because 0 does not go into 1 at all so what's the remainder 0. i hope that makes sense that's the mod operator for you it's not super important so i won't spend too much time on it and then we have the integer division so integer division is two slashes and this is kind of the opposite of mod it doesn't give you the remainder after division it gives you the whole number um division or the whole number quotient i think is what it's called so if i do 5 divided by 2 how many times does 2 evenly go into 5 well it goes in twice so the integer division of x by y is going to be 2 right and then if i change this to 7 same thing so how many times does 2 go into 7 well it goes in 3 times so the integer division would be 3. that is the basics of those mathematical operators just in case you need to use them i felt they are important to show now with those operators there's also a bunch of other operators too we have a less than we have a greater than we have a less than or equal to a greater than or equal to and is equal to and then not equal to now these are what are known as our comparison operators and this is how we actually check equality between different things you know you might imagine that it's actually pretty important for us to for example check if someone is older than a certain age so if we wanted to check if the person's age was older than 14 we would have to use one of these operators to do that now this is where we start talking about booleans i'm trying not to go too fast here but again i really do want to get to the project but some of these things are pretty fundamental to go through so actually can i type in here let me just see if this works ah perfect so i'll actually do some stuff in the console for us and don't worry i'll zoom in quite a bit so you guys can see this all right so zoom zoom zoom okay and now i'm just going to do a few examples of what we call conditions or boolean expressions so remember i showed you that type before that was bool right that doesn't matter that you see that but it was a bool and those were the values true or false right so when we use these conditional operators so that greater than that less than the less than or equal to the greater than or equal to the is equal to the not equal to when we use those whatever we put on the lefthand side and the righthand side will be compared using that operator and we'll either get a true or false value so if i said something and this is like a really common example 3 is less than 4. well what do you think right if i tell you this is going to be either true or false so it's going to be one of those boolean types what do you think this would be well of course that's true because 3 is indeed less than four right and then if i swatch uh switch this around i say three greater than four well we get false because three is not greater than four so this is the basics on how these conditional operators work and i can do something like you know 45 less than or equal to 45. now is this true or false well that's true because the way that this works is it checks if the value on the lefthand side is less than or equal to this value right and that's kind of the basics on how some of these things work now let me see can i clear there we go awesome let's hit enter here and see if we can start typing now the important ones that we want to go through though are comparing for equality that's something we want to do a lot of time so comparing numbers using the less than and greater than signs that's pretty easy i think that makes sense to most of you you know it's either true or false you can read it and pretty well figure it out but sometimes uh when we have checking for equality it can be a little bit different so if i have something like 5 equals equals five what this is what this says is is five equal to five so what i did before right when we made a variable we could do something like x equals five and that is an assignment that means we're assigning five to the value x but if i go x equals equals five what i'm asking is is like is x equal to five the two equal sign is like a question mark almost like is this true give me the result whereas the one equal sign is an assignment you're telling x that yes it is equal to 5. so if i say x equals equals 5 we get the value true right and in fact what i can do is make a variable called y let's say y equals 5 and i could say x equals equals y and we'll get true all that happens when i use the variables here is it will just check what their value is so we've assigned their values here and it will compare their values and tell me if that's true or false so that is the very basics of how we can use that equality so equals equals and then there's one more which is the not equals two and what this does is tell us if two values are not the same so whatever the result of the two equal sign would be it's just reverse so in this case x is equal to y so since they're not equal to each other or since they are equal to each other then not equal to will give us false right so if we look at false it says no these actually are equal to each other so we're getting false for the not equal to operator i hope that makes sense now lastly we can compare strings right so i can do something like hello equals equals hello and boom that works fine that's totally true but what happens if i try to do this hello equals five no we cannot assign oh sorry not hello equals five hello equals equals five what am i saying we get the value false right so we c when we compare different types like an int and a string together obviously those aren't going to be the same and what if i actually go ahead and do something like this 5 equals equals 5. well that's false 2. so even though these values are technically the same since this is a string and this is an int we're going to get false so that's very important that when we're checking things they are the same type because if they're not then we're going to get errors like this where they might actually be the same value but it's not showing up as the same value so i'm hoping this is making sense of course we're going to go through more examples but last thing i'll show you is that when i do like hello equals equals hello do we think this is going to be equal or not if you have a look at it yes no what do you think let's run this we get false so whenever there's any capital letters that really matters so just make sure you understand that the types really matter and the capitalization matters as well and i'm going to show you ways that we can deal with that because you could imagine like if we're checking to see if the user types something in we want them if they type it in with a capital letter or not with a capital letter we still want that to work right we still want to check and see that that value is uh is what we want it to be equal to so anyways that was kind of the theory that we needed to go through now let's get it into the project and start working on it apologize if that was longer than uh than anticipated all right so what did i want to do i wanted to check if the user's age was over a certain value so what i need to do is i need to write an expression that pretty much checks if age is greater than you know some some value right so let's first of all check this let's print and we're actually going to go and we're going to say is underscore older so i'm going to get a variable called is older i'm going to set that equal to age and we'll say age greater or equal to 18. so what this is going to do is it's going to assign whatever the value of this expression is so this will either be true or false to the variable is older and then i'll print is underscore older just like that so this will just tell us true or false and let's actually have a look at what we get here because it might surprise you a bit so let's run this and let's have a look at what we get so let's go name tim age 19 and we get a bunch of red text this is our first red text that we've seen so this is an error message i did this purposely and i want us to read what actually happened here and see what line it happened at so that we understand what happens when we get an error message so if you see this red text don't worry it just means you've done something wrong uh you know could be well it definitely is your fault because you typed it but you can definitely figure out what's wrong just by reading through this error message quite easily so you can see it says traceback most recent call last you know don't worry about this gibberish if it doesn't make sense that's fine what you're really looking for here is the line number the actual line where the thing went wrong and then what the error was so in this case it says file main dot pi so that's the file we're working in line seven okay so line seven this is the expression so is older equals age greater than or equal to eighteen and then type error greater than or equal to is not supported between instance of string and int so what that actually means is that this age variable here is a string and this here on the right hand side is an int so i cannot compare if the string like because imagine if i had a string like you know hello i can't say hello greater than or equal to 18. that doesn't make any sense i can't do that and since age is a string we can't do that but what why is age a string didn't i type in 19 that's weird well by default whenever you type something in using input it automatically comes in as a string so even though i typed in 19 like this and i didn't put the two quotation marks around it it automatically looks like this inside of my program that's just the way it works because this input doesn't know what we're going to type right so it has to just assume it's going to be a string because a string can hold anything inside of it so long as it's wrapped in the quotation marks so that's why we have to do that so anyways that's what we do and yeah so we now need to actually find a way that we can convert this age to an integer so we need to take that string value and we need to convert it to an int so that we can actually compare these two things so the way that i do that is i write int and then i wrap the variable age with this in so i say int open bracket close bracket around h now that says whatever this age is is so whatever number this age is because in this case it's a string that's 19. let's just strip out the number from that so get rid of the quotation marks and make this an int value so now if i say is older equals the int value of whatever the age is so take those quotation marks away just make it an integer and check if that's greater than or equal to 18. so that's this will work now so let's actually have a look at this so what is your name tim what's your age 19 hello tim you are 19 years old and then it says true so that totally worked and that was fine we were able to convert the string that we typed in into a number so just keep that in mind if you're asking a user to type in a number then you want to make sure you convert whatever they typed into an integer so that when you want to compare it or you want to use it it's actually an integer value and there's another way to do this i can type int around the input statement up here and the reason this works is because this is pretty much doing the exact same thing we're doing down here except now we're going to actually assign an integer value to the age variable rather than just convert the age variable later on to an end so it takes the input whatever the user types in and then immediately just converts it right into an integer and now i can remove this and this will still work because this is being converted to an integer immediately so let's run this let's say what is your name tim what is your age 19 and now we get hello to him you're 19 years old true all right so we've covered a lot of stuff there's one more thing to go through and this will be kind of the most exciting thing we do so far so i'm excited to do it and this is called the if statement so right now we just printed true but ideally you know i want to give the user some different messages based on if they're old enough or not right i don't want to just print out true so how do i do that well this is where we use the if statement so you've seen that we make these little conditions right by using these conditional operators and these are either true or false now the reason we use these is because we can use them inside of an if statement so actually what i can do is i don't need brackets but i'm going to remove this variable is older and i'm going to take this age greater than 18. i'm just going to kind of code something out and then i'll talk about how this works if we could get this typing right you are old enough okay so what this is saying is this is an if statement what the if statement does it says if the condition here is true do this that's as simple as it is you literally read it like plain english you write the keyword if so if you write some condition here whatever you want to check but this needs to compare or it needs to be true or false so this needs to evaluate to true or false and then you put a colon it's important you add the colon then down here you do a tab right so you tab in so one indent level and whatever is inside of this indented block underneath the if statement will happen if this condition is true if it's not true it will simply skip whatever's indented and just keep moving on in the program so i'll just show you because i'm going to print this twice just so that this makes sense so i'll print this two times so now if the age is greater than equal to 18 we'll print you're old enough twice so let's run this and let's go ahead what's your name tim was your age 19 hello tim you're 19 years old you are old enough you are old enough so that is exactly how that works now there's one more component to show to this and i think that was easy enough hopefully that makes sense it's just if you write some condition here and then if that condition is true you go ahead and you do whatever's in this block now what about if they're not older than 18 right so if i run this again and i say what is your name tim 19 hello tim you're an uh well i should i should have selected an age that was younger let's do tim 17 hello tim you are 17 years old what if i want to tell them that they're not old enough to play well i could do another if statement right i could do if age is less than 18 and then i could print that out there's actually an easier way to do this and this is using an else so this else statement kind of combines with the if and whenever you write an if you have the option you don't have to but it's up to you if you want to put an else statement afterwards that tells you what to do if this condition is not true so essentially this is saying if this is true do this otherwise do this and now we're going to put another indented statement and we're going to say you are not old enough to play dot dot so let's try this now and just see how this works so let's go tim let's go 17 and now it says hello tim you're 17 years old you are not old enough to play whereas before it told us we were old enough to play so that is the basics of the if statements we have the if and the else now i'll show you one more thing with the if statement and then we'll kind of start the very beginning of our game and then continue the rest of it in the next one but we've almost learned pretty much everything we need to know so now we're going to go else if so ellis if is another statement that we can use and the way that this works is essentially we're checking for one more thing so let's say we had three options right maybe if they were younger than 14 um they just couldn't play if they were older than 14 but they had a parent with them they're allowed to play and if they're older than 19 they could play along maybe those are the three options we have so what i could actually do is i could change this around a bit and i can say if age is greater than or equal to 18 you're old enough to play then i could say else if so if this isn't true but this is true so what i put here age is greater than or equal to 14 then what i can do is print you can play with supervision or something supervision okay so now what i'm saying is uh what is this sorry not elsif this should be el if i'm coding another language here sorry not elsif l if e l i f apologize about that but l if then you put the condition and then whatever you put in the indented block below that will happen if this is not true but this is true so i hope that makes sense but it goes like you know check this if it's true do this and skip the rest of it and then if this is not true check this if this is true do this skip the rest of it if this is not true go into the else and do this that is kind of the way that this works and you can actually put multiple l if statements uh underneath each other so you can do if l if l if l if l if else and these again are all optional but just remember that the else always comes at the end the lfs go in between and that you can have as many of them as you want but you don't need to so that's an important thing but let's just have a look at what happens now and say what is your name tim what is your age let's do 15 and now it says hello tim you're 15 years old you can play with supervision so that is the basics of the if elif else now let me scrap this actually i won't scrap this but i'll get rid of the else if and let's leave it at this for now because it's going to say okay actually we'll add one more thing to finish it up if age is greater than or equal to 18 print you are old enough to play and now what i want to do to wrap this up is ask them a question do you want to play so if they're old enough to play let's ask them if they want to play and let's do that inside of here so only if they're older than 18 and they're old enough to play then i will ask them if they want to play otherwise i'm not going to so inside this if statement i'm actually going to say you know wants underscore to underscore play you can name this variable anything you want i just like to make mine descriptive i'll say input do you want oops do you want to play now i'm doing a space here just so that when they start typing and i forgot to mention this in the last video when they start typing it doesn't get squished right beside the text so i just add a space afterwards and it makes it a little bit nicer but wants to play equals input do you want to play and now i'm going to check if they want to play so i'm going to say if and i will actually say wants to play equals equals yes so if what they type in is equal to yes then print let's play exclamation point so i know that was a lot let me zoom out a bit here just so we can read this a little bit easier and now let's run this program for the last time before we wrap up this video so what is your name tim what is your age 18 hello tim you're 18 years old you're old enough to play do you want to play let's type yes and it says let's play awesome let's run this one more time what is your name tim what is your age let's go younger than this time so let's go 17. hello tim you're 17 years old you're not old enough to play so i hope this is starting to make sense but i'll just give you a really quick summary so we welcome the user we ask them for their name and their age we convert their age right away to a number so that we can actually compare it later on we then say hello whatever their name is you are whatever their age is years old we then check how old they are if they're older than 18 we tell them they're old enough to play and then we ask them if they want to play if they say yes so if they type in the string yes we print let's play otherwise we tell them they're not old enough to play and that is the very beginning of our game and i hope you can see what's going to happen here in the future right so when they want to play now what i'm going to do is inside of here i'm going to ask them their first question so i'm going to say okay you know your first decision is do you want to go left or right or we'll make something up and we're going to keep kind of chaining inwards and nesting if statements together just to make all these blocks with all these different decisions and you're going to see it's going to get pretty intricate pretty quickly but i think this is pretty cool and right now you've learned almost everything you need to know to make this full game so the first thing i'm going to do is just kind of recap and just kind of run this program and see what we actually have so far so we know where we're going from here so welcome to my first game what is your name my name is tim what is your age 19 hello tim you're 19 years old you're old enough to play do you want to play let's type yes like that and boom it says let's play awesome now i just want to show you a case that we may not have considered yet so if i do tim 19 and do you want to play now what happens if i do something like this so y capital e s well i'll give you guys an opportunity to take a look at it if we have our condition here right so we say wants to play equals input do you want to play and we say if wants to play equals yes let's play so do we think when i type y with a capital e and then s that this is going to work well no it's not so if i do this it actually doesn't this if statement is not true this condition is not true and therefore this doesn't run so how can i actually go about and fix that well this is the first thing that i wanted to show you and that i guarantee you guys will find very useful for the rest of this kind of game and anything in the future there is this method and it's called a method that's it's not that important you don't have to understand what that means uh called dot lower so it actually looks like this dot lower and i'm typing it in the correct place here but what this does is it takes any string and immediately converts it into lower cases so all lower cases it takes any letters it has and just put it puts it to lower case so this is really useful because what we can do is we can take the input that we typed in immediately convert it all into lower cases and now when we want to check for equality it doesn't matter what capitalization we used in the string it will still be true because it'll just automatically go to lower case so we could type capital e and that will still this condition will be true and we'll still do let's play so in fact let me show you so notice i just put dot lower here and guess what there's actually another method called dot upper that we could use as well and dot upper will make it all uppercase so if we wanted to do this and make this all uppercase and then make this dot upper same thing right so i'm hoping this is making sense but essentially whatever you're going to compare here is going to have to be in all lowercase or all uppercase and that's going to correspond to whether you use lower or dot upper all right so let's run this now and let's see what we get so what is your name tim what is your age 19 do you want to play y e s okay so we have a capital y and a capital s and let's play that still works fine so that's cool i think that's an important method to know that's pretty quick so i just wanted to show that to you guys and now let's actually start building a game let's start making something cool and then we'll implement like maybe a health or some other interesting things into our game that i didn't have in the demo game so the first thing we want to do is actually i'm going to add an else statement here and i'm just going to print sia dot dot so if they don't want to play we'll simply tell them you know goodbye like see you later and then inside of here if they want to play so notice i'm nesting all these things right like there's an if and else inside of another if statement and that's totally fine because all the if statement says as well if this is true do whatever is indented and here we are and then inside here this if statement says if this is true do whatever's indented right so we go ahead and do that so what i'm going to do in here now is i'm going to ask another question and this will be the first decision that we want to make so i don't know what i want to make it i think i'm going to go with the classic do you want to go left or right just as our first kind of path but you guys can make this whatever you want and feel free at this point to kind of change around some of the stuff that i'm doing and make it your own so long as you understand what's happening so i'm going to say left underscore or underscore right equals input first choice dot dot dot left or right now it might be a good idea in your game to put brackets at the end of your answer and just put inside of the brackets what the user should type so left or right because technically right they might not know like they might type i want to go left or i want to go right so it might be a good idea to just put brackets inside of the prompt just so they kind of know what options they have like what they can actually type right and then what i'm going to do after this is i'm going to check if left underscore or underscore right is equal to left this will be my correct decision if i go left then what we'll do is we'll print something or we'll do something otherwise we'll we'll just print out to the screen u fell down and lost dot dot you can see i'm not super creative when it comes to making these games but the idea is i'm just trying to show you how the paths work um so this is like if they lose so if they decide to go right or they type anything other than left then we'll print out you fell down and lost otherwise if they go left then what i'll ask them is another question so say okay if they go left they're going the right direction so let's ask them another question awesome and in fact inside of else i don't even have to make them lose i could ask them another question in here too right we can make it as confusing as complicated as we want and make it really hard for the user to figure out what way they're kind of going so they have to play the game a bunch of times so anyways let's go here inside of left and let's say i'm just going to put ans that's short form for answer that's what i usually end up doing as we get longer and longer rather than making these variable names but i'm going to say ans equals input nice you follow the path and reach a lake do you swim across or go around question mark and then inside of here i'm going to put a cross as the answer right is that a cross i don't think you need two c's so across or around just telling them what they can type in right and now i'm gonna have to zoom out a little bit just so we can read oh that's better okay and now inside of here what i'm gonna do is i'm gonna check what their answer was right so i'm going to say if ans is equal to and maybe we'll say that going across was the correct answer actually let's say going around was the correct answer so if a and s equals a round then we'll do something and then we'll say l if so i'm actually going to switch it up here just to show you something else l if um lf ns equals equals across and then else so the reason i've done this is because what i actually want to do right now is i want to make it so that if they type across or they type around both options are correct they can go both way but both ways will lead them to different types of decisions right so we'll get asked now different questions inside of here but if they don't type around or across right then i want them to lose so i'm just going to go down here and say print you lost again i don't have really good like you know lose messages but that's totally fine and then inside of here in round what i'm actually going to say is that one of these options is better than the other so here is where i'm going to implement something that i hope is you guys will appreciate because it is a little bit more complicated but i want to show you how we can do something like this if they decide to go across the lake i'm going to kind of make up a story and say they got bit by something and they lose health and maybe we'll put something inside of here that checks you know what their health is so if their health goes lower than zero then they lose right then they lose the game completely i think that'll be interesting to do so let's do something like that so if i want to keep track of health right and maybe we set them off with like default health of one or default health of 10 or something and they lose health we'll need a variable to store their health and then we'll need to subtract from that variable so what i'm going to do is on line 7 i'm going to make a variable called health i'm going to set that equal to 10. so they could technically have 10 health and we'll tell them how much health they start with and how much health they lose so maybe to start we'll print out you are starting with and then in this case comma the number and then comma health so you are starting with 10 health that'll print out 10. the reason i put health here instead of 10 is because if i change this number maybe i change it later to 15 20 something like that i want this to automatically update i don't want to have to rewrite the number two times it's better just to have it stored in one place so that's why i've done that so we've definitely have a health and we'll say if ans equals around um then you know whatever if a and s equals a cross then we'll print something else in fact actually what we can do is something cool here and i'm going to get rid of the else and just just change this a bit so i'm going to say print and inside of here i'm going to put you went around and reached the other side of the lake and then here i'll print you managed to get across but were bit by a fish i don't know let's just say that you were bit by a fish and lost five health so i'm gonna tell them that they lost five health here and then what i'm gonna do is because they lost health and i'll put some periods here is i will say health minus equals five so we'll just you know remove five health from their health so now they only have five health and now what we can do down here is we can ask them another question right and we can keep going and in fact what i'll do now is i'll pause and we'll run this just to see where we're at right now and then i'll just kind of keep going and just coding out my version of the game just showing you guys some different cool things that we can do and hopefully you guys take this upon yourself to make your own cool game right and change the paths and decisions and this will be like really good template for you to figure out what to do so let's run this and let's go what is your name so my name is tim i'm 19. hello tim you're 19 years old you're starting with 10 health you're old enough to play do you want to play so actually maybe i should put the hell somewhere else this is great so i tested i realized something was wrong so now i only want to tell them how much help they have right if they're older than 18. so in fact let's get rid of this you know telling them what they are i don't need that anymore and then after we ask them do you want to play we'll print out you're starting with 10 health let's play and we can leave the health defined up here it doesn't matter where we have it but we'll just put it here so that we can access it throughout all of the stuff down here great so let's run this now and let's zoom in a bit it says what is your name tim what is your age 19 uh you're old enough to play do you want to play yes you're starting with 10 health let's play first choice left or right so where should we go let's go left nice you follow the path and reach a lake do you want to swim across or go around let's go across and it says you managed to get across but you were bit by fish and lost five health so you can see that the game is actually working right and we'll run it one more time just to test out another path so tim 19 you're old enough to play do you want to play yes first choice left or right let's go right you fell down and lost boom so the game is functioning okay so let's keep going and let's add some more stuff into this so health minus equals five so now we're at five health now what i'm gonna do here is we'll have to do something to check if they are lower than zero health right so they'll be at some point where they could potentially lose all their health and if they're at lower than zero health or they're at zero health then we'll have to tell them that they lost so that's going to be interesting to do actually but first let's just ask another question so let's say announce equals input and inside here what do we want them to do next maybe i'll tell them that i'm going to take an example from my previous game i'll say you see a river and you see a house do you go towards the river or do you follow the house right or other way around you go towards the house or do you follow the river okay you notice a house and a river which do you go to and then again i'll give them what they need to type in here just to make it easy so we'll say river slash house and make sure we add a space here in between the question mark and the end of the quote just so there's a a space when they're actually typing it in and now let's check if ans equals equals in this case house then we'll do something else we'll do something else so what i'm actually going to say here this will be kind of an interesting little twist to this game i wasn't even thinking about adding is if they decide to go the river we'll just tell them that they like fell in the river and they lost okay and then if they go towards the house we'll tell them that they went towards the house but they lost five health because like the guy at the house hit them or something i don't know i'm trying not to be too uh too violent in these answers but the idea being that i wanted to make i want to make it so that they can get past this but if they decide to go across it will actually end up being the wrong decision because they lose five health right and then down here they'll lose another five so they'll lose the game i hope that makes sense but you'll see as i start coding it so if ans equals house then what we'll say is we'll say parent you end you go to the house go to the house and are greeted by the owner dot dot dot he doesn't like you and you lose five help why not all right we'll just go with that we don't need any more deeper explanations then we'll say health minus equals five so we're removing five health again that's equivalent to health equals health minus five so whatever the value of health is we'll subtract five from it the reason i wouldn't just set health to fiber i wouldn't just set it to zero is because we don't know if they lost five health above here so we need to make sure we just subtract that value and then else we'll print down here you fell in the river and lost dot dot okay so now what we'll do after this right so you can kind of see the way that i'm actually let's see here managed to get across so now actually inside of this if statement sorry i'm just trying to think of what we're actually going to do here on line 30 i'm going to check if their health is lower than zero so if they have lower than zero health because this will be the first point in the game where they could potentially be at zero health if they lost it twice then we'll tell them that they lost otherwise we'll keep going right and then maybe we'll wrap up the game with one more path or something so we'll say if health is less than or equal to zero then what we'll do is we'll print you now have zero health and we don't need a comma and you lose the game dot dot dot all right so there we go you lost the game actually we'll just do and you lost the game all right so if their health is lower than zero they lose otherwise then inside of here we'll say print you um have survived you win i don't know we'll just say that they win at that point and i'll show you how we can add some more cool things too all right so that pretty much wraps it up let's test this game a few times and make sure that everything's working fine uh and then we'll add anything we need to so what is your name tim let's actually test one if i go like 14 uh you're not allowed to play okay so let's go again tim 19 yes first choice left or right let's go left nice you follow the path and reach a lake do you swim across you go around let's go across you managed to get across but you were bit by a fish and lost five health you notice a house and a river which do you go to the river the house let's go to the river and you fell in the river and lost okay let's try a few more paths just want to make sure this works but i hope you guys understand the point of this right is to go down like all these different branching paths and you know if you make a bad decision at the beginning you're gonna have to keep going down all the roots until you realize that oh no i should have gone right instead of left right so you can make these really intricate and a lot of people that i've taught to do this before have made really cool games they're like hundreds of lines of code that take you a really long time to actually figure out so i think it's pretty interesting okay but first choice left or right let's go left nice you follow the path and reach a lake do you swim across or go around let's actually go across and let's test out this health stuff so we go across and then it says you know it's a house and a river so let's go to the house it says you go to the house and you are greeted oops i should probably spell that right by the owner he doesn't like you and you lose five health you know you now have zero health and you lost the game right so you didn't technically lose because you went to the um what is it because you went to the house it just you lost because you lost five health right now i'll show you the example where if we don't lose five health at the first step we can actually survive by going to the house so what is your name tim what is your age 19 do you want to play yes let's play first choice left or right so let's go left let's say nice you follow let's go around this time you went around and reached the other side of the lake you know it's a house and river which you go to let's go to the house and you go to health and you're greeted by the owner he doesn't like you and you lose five health you have survived you win so even though we lost five health we still won because in the previous step we didn't lose five health so i hope that me showing you the health thing gave you some ideas for some stuff that you can do what you also can do is you can ask you can do something like let the user pick a weapon or something right so a cool example and i'll just talk about some kind of addons now because we're kind of wrapping up the video anyways you could do something like you can start by asking them what weapon you want so you could say you know weapon equals input pick a weapon question mark or pick a weapon colon and then your options could be something like sword um i don't know maybe like a baton i'm trying not to be too violent and i don't know let's go something like taser right so you can tell them to pick one of these weapons and then based on the weapon they pick you can say oh well if they have this weapon then they're able to get past this obstacle if they don't have this weapon then they can't so what you would do if you want to check something like that is you'd say if weapon equals equals whatever it equals and if it equals that then boom they're good to go right and they can continue on now the last thing i'll show you because we have one minute left kind of before i'm planning on wrapping this up is how you can actually check multiple things on the same line now i'm just going to kind of introduce this to you guys because then you can kind of look at it yourself it's pretty easy there's these things called and and or now and and or are ways that we can chain conditions together i'm not going to explain them in depth but if you do something like true or false the result of this is true the reason this is true is because when you have an or this pretty much says look at the left side look at the right side if one of them are true the whole thing is true so if you go ahead and do something like you know x let's i would say like 5 equals 5 7 equals equals 8 then this would be true right because this condition is true this condition is false so since one of them is true the whole thing is true now contrasting that with and so when you do and what this does is it checks if both of the things on the left and right hand side are true if they are the whole thing is true if they're not it's false so in this case this would be false because one of them is false but if i change this to be like 7 equals equals 7 then this is true so you can use this and and or to actually chain conditions together so you could check like inside of here if left or right and you know weapon equals equals whatever you can do something like that oops so i put this in the wrong if left left or right equals equals left oops and weapon equals equals whatever it equals right inside of here then this whole thing will work so you can check if this whole condition is true or false and then execute an if statement based on that so with that being said i think that's pretty much it i'm going to zoom out here so you guys can have a look at all of the code at once i understand this maybe isn't mobile friendly but at least now you can kind of see what we've actually created and i really hope that throughout this series you guys have learned something about python you've learned kind of the basics of the language and if and else and i've given you enough knowledge that you now feel a little bit confident to go out there and make some kind of cool game i will say there's a ton more stuff you can do with this there's a lot more things to learn but again the focus of this series was around building a project and i really hope that this helped you do that so with that being said that has been it i hope you guys enjoyed if you did make sure you leave a like subscribe and i will see you in another youtube video
