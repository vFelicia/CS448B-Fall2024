With timestamps:

00:00 - this is the perfect course if you want
00:01 - to improve your skills with angular you
00:04 - will learn to create a project from
00:05 - scratch using a public api slobodan who
00:08 - created this course is very experienced
00:10 - and he's worked at many top companies
00:13 - in this tutorial i'm building an angular
00:15 - application from scratch and i'm using
00:17 - public api to create this interesting
00:20 - game database website i will show you
00:22 - how to set up a project using angular
00:24 - cli how to create components how to make
00:27 - http calls how to implement http
00:30 - interceptors how to make services
00:32 - also you will learn how to set up routes
00:34 - for your application how to pass data
00:37 - with routes in between the components we
00:39 - will use pipes for data formatting
00:41 - various angular directives like ng4 and
00:44 - ngif and so much more so stay until end
00:47 - of it and you'll be in a good place to
00:49 - have a great foundation for building
00:51 - angular applications
00:53 - [Music]
01:00 - for project setup i'm gonna be using for
01:02 - this angular cli so for generating all
01:05 - the components it's going to be angle
01:07 - cli and npm packages for others so first
01:10 - i'm gonna name our project ng video game
01:14 - db stands for database
01:16 - and i'm going to set the style to be
01:19 - scss because i like using more css for
01:23 - our stylings
01:24 - i'll skip strict checking for this
01:27 - project right now but i would like to
01:29 - add the angular routing
01:37 - now the project creation has been done
01:39 - successfully we want to head over into
01:41 - our root folder of our application which
01:43 - is ng video game db and the first
01:46 - package which i want to add is angular
01:48 - material
01:49 - i will add all the packages at the
01:51 - beginning and import them into our
01:53 - application so that later on we can
01:55 - focus on
01:57 - just coding type ng add angular material
02:03 - for material pre-built theme you can use
02:05 - whatever you want i'm going to use the
02:06 - second one in this list
02:10 - and i want angle material to set up the
02:12 - typography styles and to set up the
02:14 - animations for our angular material
02:17 - and the last package which i want to add
02:19 - to our
02:20 - project is angular gadge
02:23 - this plugin i will be using for
02:24 - displaying the rating of our games
02:28 - so just type in npm i angular
02:31 - dash gauge and now when we successfully
02:33 - install all these packages we want to
02:35 - import them inside of the app.module.ts
02:39 - first i want to import the angular
02:41 - modules forms module and http client
02:43 - module
02:44 - next are the modules from the external
02:46 - packages like gadge module then we will
02:49 - import the angular material modules we
02:51 - will need mat tabs module mat icon
02:53 - module mat form field module and mat
02:55 - select module and now all of these
02:57 - imports we want to include inside of our
02:59 - ng module in imports array and for gauge
03:03 - module we want to call for root method
03:05 - the next thing i want to remove some of
03:08 - the global styles which are pretty
03:10 - default set up in angular application
03:12 - and i will set up some my own rules
03:15 - so
03:16 - for the body i will use the roboto
03:19 - fun family i will set this dark
03:20 - background i will add some height and
03:23 - batting top also i will set the same
03:25 - font family for all the child elements
03:26 - of body and reset the margin padding and
03:29 - box sizing
03:33 - and the last thing is that we want to
03:35 - actually run our application inside of
03:38 - terminal
03:39 - cd to our folder directory into a root
03:42 - of our application and run ng server
03:48 - and when this eventually starts our
03:49 - application successfully we can head
03:52 - over to localhost 4200 to see our
03:55 - application
03:56 - voila
03:57 - setup has been done now let's start
03:59 - coding
04:03 - first component which i want to create
04:04 - is going to be search bar component this
04:07 - component is gonna stay on top of our
04:09 - application for searching the games so i
04:12 - want to head over into our
04:14 - app
04:15 - directory and make new one called
04:17 - components all the components are going
04:19 - to be stored here for generating all
04:21 - components i'm going to be using angular
04:24 - cli so run the command ng generate
04:27 - component
04:29 - search bar
04:31 - these are shorthand nggc
04:35 - now once that has been generated i want
04:38 - to place that search bar component into
04:40 - our main app component so let's take the
04:43 - selector of this component
04:45 - and let's put it inside of our app
04:47 - component first let me remove all this
04:49 - boilerplate code from the app components
04:51 - html file we don't need that anymore and
04:54 - i'll put search bar app search bar
04:56 - selector there
04:58 - that is our component now
05:00 - inside of the app component.ts we don't
05:03 - need this title anymore
05:05 - so i will remove that and now let's see
05:07 - how our component looks like in the
05:09 - browser
05:13 - and we can barely see it because of our
05:15 - dark background but that's going to be
05:17 - fixed in no time i'll remove this
05:19 - boilerplate code from the search bar
05:22 - component and this component is going to
05:24 - be very simple
05:26 - i'm going to create on top of our
05:27 - component search container class div and
05:30 - inside of that we'll have a form with a
05:33 - class of search form the next is the
05:35 - logo actually and clicking on this logo
05:37 - will redirect to the home page so router
05:40 - link is going to be a slash
05:42 - the next element is our input element
05:44 - this one is going to be used for actual
05:46 - searching
05:47 - and it's going to have a class of search
05:49 - input and the name of search this one is
05:51 - going to be used in our template and the
05:53 - last element is our submit button which
05:56 - is going to be a class search button
05:58 - with the text of search once we click
06:01 - this button it's actually going to
06:03 - submit our form and we can take it from
06:05 - there
06:06 - and this is how it looks without any css
06:08 - so it's horrible let's apply some css
06:11 - styles to it
06:13 - first i'm going to create search
06:15 - selector which is going to be the main
06:16 - selector of our component and inside of
06:19 - it it's going to be search container
06:21 - first with it's going to be full 100
06:25 - with a height of 60
06:26 - background it's going to have this color
06:29 - and also
06:30 - we want to position this fixed so it's
06:32 - always on top of our screen with
06:33 - position of top and left zero and z
06:36 - index one to be four
06:38 - we want to align the items to the center
06:40 - of that
06:41 - and this starts to look a little bit
06:43 - better now
06:44 - for our form we want to set the width to
06:46 - be a hundred percent and to set the max
06:49 - width uh 1200 pixels because we want to
06:53 - set the max width for our large screens
06:55 - and to center it with margin zero auto
06:57 - for our input margin is going to be 10
06:59 - pixels on the left side we're going to
07:01 - give some small padding to 10 pixels
07:03 - width it's going to be 300 pixels and
07:06 - we're going to give a border radius to
07:08 - the left side on the right side it's
07:09 - going to be the button and we want to
07:11 - reset the outline in border to be none
07:15 - for our button i'm going to reset border
07:17 - and outline to be none background is set
07:19 - to blue
07:20 - padding to 10 pixels also border left
07:23 - it's going to give some small edge on
07:26 - the right side we're going to set the
07:27 - radius to 5 pixels color is going to be
07:31 - white font weight bold
07:33 - you're also going to give some
07:35 - transition for the hover effect and
07:36 - curse to be pointer
07:40 - it looks better but it doesn't have any
07:41 - hover effect so let's add that color is
07:44 - going to be blue and hover background is
07:46 - going to be white and the border is
07:49 - going also to be blue as well as the
07:51 - color so it has some separation on the
07:53 - left side
07:55 - nice
07:57 - the last element of our search bar which
07:59 - needs styling is our logo so i will
08:01 - apply some margin to the left side color
08:04 - to reset to be white font weight to be
08:06 - bold so it's nice and separated cursor
08:09 - to be pointer is it's going to be a link
08:11 - and text the creation to be none
08:13 - that's sweet
08:14 - now we want to handle submitting of our
08:16 - form and we are going to catch ng submit
08:19 - event and we are going to create
08:21 - onsubmit method which we will going to
08:24 - be passing our form as an argument
08:27 - inside of our search bar component we
08:29 - want to inject angular router as a
08:31 - dependency and we will use this router
08:33 - to redirect our application to our
08:35 - search page which we will be building
08:37 - later on and to pass in the value of our
08:40 - input field from our form
08:42 - inside of our unsubmit method we're
08:44 - receiving form as an argument which is a
08:46 - type of ng form and we're using this
08:49 - router to navigate to a search
08:51 - page which we'll be building later like
08:53 - i said before
08:54 - from the form which we are getting will
08:56 - extract in the value and the search
08:58 - which is actually from our input which
09:00 - is called the search as a name
09:05 - also we want to import the missing
09:06 - module which is ng form and router from
09:09 - angular router
09:11 - now let's test if this works let's just
09:14 - type in some random text and sub it now
09:16 - form to see do we get any redirection
09:19 - as if we check the console we can see
09:21 - that it's getting the error so as we
09:23 - haven't set up this routing yet but it's
09:25 - redirecting to search
09:30 - and once our search bar has been
09:32 - completed i want to create our first
09:34 - component from our two components which
09:36 - we are going to have in our application
09:38 - which is home component so we want to
09:40 - create new directory inside of component
09:42 - directory which we will call home
09:44 - directory
09:45 - and then using angular cli i'm going to
09:47 - type in ng generate component home
09:51 - which will generate our new component
09:54 - then i want to create routes for this
09:56 - component so inside of the app
09:58 - routing.module i will create
10:01 - path which will be default path and the
10:02 - component will be home component and
10:05 - also
10:06 - we want to all of our searches to land
10:08 - on this page as well so we'll add path
10:11 - search slash
10:12 - game search which will be our parameter
10:14 - sent with our route
10:16 - so the component for both of these route
10:19 - is going to be home component and then
10:21 - the last thing is i want to create
10:23 - router outlet inside of our app
10:25 - component so basically all our
10:28 - components or actually the both of our
10:29 - pages is going to be loaded in this
10:31 - router outlet and on top we will have
10:34 - this search bar
10:36 - and now if we check our application into
10:38 - browser we can see that home component
10:40 - has been loaded although we can barely
10:42 - see it
10:43 - as the text
10:45 - is dark the first thing we want to
10:48 - implement in our home application is
10:50 - actually our filters
10:52 - component which will be used for
10:54 - filtering the games which which are
10:55 - going to be displayed on home page as we
10:57 - first initially when we reload our
10:59 - application it's going to have a lot of
11:02 - game cards in it
11:04 - so we will create create a div with a
11:06 - class of filters and we will use mat
11:09 - form field for our fields this is from
11:12 - angular material we'll use matte label
11:14 - and we will put a label of sort
11:17 - for uh our selection we'll use mat
11:19 - select
11:20 - uh component from angular material for
11:23 - class we will set to be sort select so
11:25 - that we can style it
11:27 - will attach ng model sort so this is
11:29 - going to be a variable from component
11:31 - which will be attached to matte select
11:34 - and we want to add some values so we
11:37 - will have value name
11:39 - released added created updated rating
11:43 - and metacritic
11:46 - now to attach this math select we want
11:48 - to create this sort variable we just
11:51 - created inside of our html file so we
11:53 - want to add that to our home component
11:55 - ts file
11:57 - and once we created that we can preview
11:58 - what we have
12:00 - created in our home component as you can
12:02 - see we have all the options we just
12:04 - added but it's barely visible so we need
12:07 - to add some styling so let's head over
12:10 - to our home component scss file
12:15 - first let's select the filters class
12:17 - which is a wrapper around our
12:20 - mat select component so we will set the
12:22 - max width to match the containers with
12:26 - some margin and also padding left so
12:27 - it's aligned on the
12:29 - top navigation and the games which we
12:31 - will be creating later on so the next
12:33 - thing is we want to use ngdp selector
12:36 - this selector is used when you want to
12:37 - select some of the components which are
12:40 - generated from for example matte matte
12:43 - select in this case so
12:45 - for my matte form field in fix we will
12:48 - set the background color to be this blue
12:50 - color
12:51 - so it's so it's actually visible because
12:53 - right now it's transparent
12:55 - for for the following properties matte
12:58 - select value arrow
13:00 - for the placeholders and for the form
13:02 - film label we want to set the color to
13:04 - be white and opacity to one
13:06 - for matte form field infix we will set
13:09 - the border color to be white board top
13:11 - to be removed and padding left to be 5
13:13 - pixels
13:15 - format form field
13:17 - label we want to set it to to have
13:19 - padding left five pixels so it's so it
13:22 - has some padding on the text and for the
13:25 - uh matte form field underline so this is
13:27 - basically an underline uh underneath the
13:30 - selection we want to set the background
13:32 - color to be white
13:34 - and now let's preview what we got
13:38 - okay the next thing which we want to
13:39 - build is our actual game boxes
13:42 - so first i want to create a wrapper for
13:44 - games it's going to have class of games
13:48 - then in this
13:49 - game's deal we will have all the games
13:52 - generated and loop through angular and
13:54 - g4 but we will build that later so first
13:57 - create a class game and inside of that
13:59 - class you want to have an image so it
14:02 - will have a div of class game thumb
14:04 - container
14:05 - inside of that container i will put an
14:07 - image this image is going to have a
14:09 - source
14:10 - i just put some randomly picked image
14:12 - from the web and it's going to have a
14:14 - class of game thumbnail
14:16 - so we can style it later
14:18 - then i want to have a description below
14:22 - the image and i will add a div with a
14:24 - class of game description
14:26 - and paragraph with a class of game name
14:28 - so this will be the name of our
14:30 - game actually
14:32 - and then on the bottom i want to display
14:34 - all the platforms which are supporting
14:37 - this game so they will have a class of
14:39 - game platforms and an image is going to
14:41 - have a class of a game platform also for
14:44 - the url i will put now just some
14:46 - randomly picked image from the web which
14:48 - but we will later on fill in all the
14:50 - real data and that is going to be a slug
14:53 - so let's preview what we have
14:56 - now as you can see the image is really
14:58 - large and you can and you can barely see
15:00 - anything here so let's apply some styles
15:03 - to this
15:04 - let me head over to
15:05 - homecomponent.scss file and first let's
15:08 - create games selector which is for our
15:10 - wrapper so i'm going to put display flex
15:14 - and flex wrap
15:16 - to be wrap so we want to wrap our our
15:19 - boxes actually into uh three or four we
15:22 - will decide later on in a row justify
15:24 - content to be center max width to be
15:26 - 1200 pixels and to put margin 20 pixel
15:30 - auto
15:31 - and those were stylings for our game
15:33 - wrapper that hasn't been affecting a lot
15:36 - our game box itself so let me set the so
15:39 - it's like the selector of game for our
15:42 - game box the width of our games are
15:44 - going to be 280 pixels
15:47 - margin is going to be that 10 pixels so
15:49 - we'll have some margin around our boxes
15:51 - height is going to be 330 pixels
15:54 - everything will which overflows it's
15:56 - going to be hidden
15:58 - we'll have slight border radius of 5
16:00 - pixels background color is going to be
16:02 - dark
16:03 - we'll have some slight yellow box shadow
16:06 - so and later on we will apply the hover
16:09 - effect so once you hover over this box
16:11 - it will expand
16:13 - so and we will add some duration of
16:15 - transition so it has nice animation and
16:18 - the cursor pointer because eventually
16:20 - when you click on these boxes it will
16:23 - redirect to details page
16:25 - now let me apply this hover effect when
16:28 - we actually apply uh when we actually
16:30 - hover over these boxes so box shadow is
16:33 - going to expand and it's going to be
16:37 - it's going to move so transform
16:38 - translate y is going to be 3 pixels so
16:41 - it's going to jump a little bit up
16:44 - the next thing is we want to style our
16:46 - thumb container
16:48 - which is of our thumbnail or image
16:50 - background color is going to be black
16:53 - so this is for when we are missing the
16:55 - actual image the background color is
16:58 - going to be
16:59 - black position is going to be relative
17:01 - height
17:02 - 172 pixels color is going to be white
17:05 - and text is going to be align center so
17:07 - we will display there is no image once
17:10 - when when we actually don't have an
17:11 - image for our game
17:14 - and for the thumbnail itself we want to
17:16 - position it absolutely and to give top
17:19 - left and right zero
17:21 - position and we want to set margin zero
17:24 - auto so it's centered also for the
17:25 - height we want to have 172 pixels
17:29 - for description box we want slight
17:32 - padding so 20 pixels
17:34 - it's going to have display flex and flex
17:37 - direction is going to be column
17:39 - we want to justify content to flex end
17:42 - and height of 157 pixels
17:46 - for our name or title of our game we
17:48 - want color to be
17:49 - white and bold font size to be 22 pixels
17:52 - not nice and large for margin bottom we
17:55 - want to have 20 pixels white space is
17:57 - going to be no wrap so that you know
18:00 - you're not wrapping and we're applying
18:02 - ellipses of text which overflows so we
18:05 - have that three dots if the text is too
18:07 - long and it doesn't break the layout
18:10 - for our platforms on the bottom we want
18:13 - to have a display of flex
18:15 - so they are all aligned
18:18 - and for our platforms you want to have
18:20 - width of 20 pixels and to have slight
18:22 - margin on the right side
18:26 - so at this point we are done at coding
18:29 - html and csf on our code page so now we
18:32 - want to create our service which is
18:34 - which will actually fetch the url and
18:37 - the real data which will be fitting in
18:39 - to our
18:40 - home component so first thing which i
18:43 - want to do is i will create a services
18:46 - folder and inside of that services
18:48 - folder i will
18:49 - create http service file using the
18:52 - angular cli so i will type ng generate
18:56 - service
18:57 - and name for this service is going to be
18:59 - http
19:01 - and the angular cli is
19:04 - responsible for injecting our service
19:06 - into our application itself so we don't
19:07 - have to do that manually
19:09 - the thing which we want to do inside of
19:11 - our constructor in http service we want
19:14 - to inject the http client which will be
19:18 - dependency to communicate with our
19:20 - backend so the first method which i want
19:23 - to create is get game list so this is
19:26 - the method which i'm going to be calling
19:28 - from our home component
19:30 - and fetching the list of the games
19:33 - this method is going to receive two
19:36 - arguments ordering and search search is
19:38 - not going to be
19:40 - required both of these are going to be
19:42 - string and we are going to be re
19:45 - returning observable api response game
19:48 - this
19:50 - interfaces i'm going to be creating
19:52 - later on
19:53 - so first i'm going to create the
19:55 - parameters for our method and
19:59 - the default one is going to be ordering
20:01 - so in order which we want to sort the
20:04 - game list and if a user is providing a
20:07 - search if he's typing in anything into
20:09 - our search box we want to add append
20:12 - also the search parameter as well
20:15 - and the last thing we want to return the
20:17 - http get method which will be returning
20:20 - api response this interface and the game
20:23 - interface we'll be creating later
20:26 - the base url of our service is going to
20:30 - be created inside of the environment
20:31 - file and the route for this
20:35 - call is going to be games and we are
20:37 - setting the parameters of params now
20:39 - let's create that base url
20:41 - constant which we want to put inside of
20:43 - the environments folder inside of the
20:45 - environments file both in those inside
20:47 - of the prod and whatever the environment
20:50 - you have inside of your application
20:52 - and then we want to import that
20:55 - environment as an and it's a shorthand
20:58 - and to use that as our
21:00 - as sr url
21:02 - and now i want to import missing
21:05 - modules so observable from rxjs and http
21:09 - params
21:10 - and now let's create
21:12 - interfaces for our types api response
21:15 - and game so i will create new file which
21:18 - will be called
21:20 - models.ts and inside of that
21:23 - file i want to export interface game
21:26 - this is the
21:27 - main interface which we'll be using to
21:29 - define
21:30 - our data so this interface is going to
21:32 - have
21:34 - types of background image name released
21:37 - metacritic url website description
21:40 - metacritic
21:41 - genres
21:42 - this one is going to receive an array of
21:44 - genre we will create this interface
21:46 - later
21:47 - parent platforms
21:49 - also array of parent platform
21:51 - we will create this one as well later
21:53 - publishers array of publishers ratings
21:57 - again array of ratings screenshots it's
22:00 - going to receive the array of
22:01 - screenshots trailers it's going to
22:03 - receive
22:04 - array of trailer so this all these array
22:08 - interfaces i'm going to create later on
22:10 - the bottom the next one i want to create
22:13 - an export interface api response and t
22:17 - is a dynamic type so whatever type we
22:20 - pass into our api response it will
22:22 - return that as an array results of array
22:25 - of data type
22:26 - and now let's create the interface of
22:28 - jar it will just have a name
22:30 - now
22:31 - let's create interface of parent
22:33 - platform it will have a platform and a
22:36 - name property
22:37 - interface publishers is going to have a
22:39 - name property of type string
22:41 - interface of rating will have id account
22:44 - and title
22:46 - interface interface of screenshots will
22:48 - have image of type string
22:51 - and the last one is interface trailer
22:53 - this one is going to have data and max
22:55 - which is going to be a property of type
22:57 - string
22:58 - and now we created all the models we
23:00 - need for our application and which we
23:03 - are going to be using
23:04 - in this
23:05 - in this application now let's import
23:07 - them into our service so
23:09 - for api response and game
23:12 - now in order to consume our api it's not
23:15 - enough just to set the url which we need
23:18 - so it requires some of the parameters
23:20 - and some of the headers to be attached
23:22 - to our requests so
23:25 - uh in order to do that i'm not going to
23:27 - set up the parameters and
23:29 - the headers to every single request i'm
23:32 - going to do that on the application
23:33 - level so to do that i will use the
23:35 - interceptors
23:37 - so angular provides a way to do that on
23:39 - the application level like i said before
23:41 - the first thing which i want to do i
23:42 - will create a separate folder for these
23:44 - interceptors the folder name is called
23:47 - obviously interceptors and i'm going to
23:49 - create three interceptors for our use
23:51 - cases
23:52 - http
23:54 - errors.interceptors.ts file this one
23:56 - will be handling the errors obviously
23:58 - the http
24:00 - headers.interceptor.ts file this one
24:02 - will be attaching the headers which we
24:04 - want and the http
24:06 - dash params dot interceptor.ts file and
24:10 - this one is
24:11 - attaching the parameters to our requests
24:14 - so now inside of our http errors
24:17 - file i want to create an injectable
24:21 - service and i'm going to export the
24:23 - class of http errors interceptor
24:26 - this class is going to implement our
24:29 - http interceptor
24:31 - and we're going to have a constructor
24:33 - empty constructor for now and on all of
24:36 - these interceptor we need to implement
24:38 - intercept method from our http
24:41 - interceptor interface
24:43 - so this intercept method requires two
24:46 - arguments first one is htv request and
24:49 - the second one is http handler
24:53 - and it's going to be a returning
24:55 - observable of http event this is going
24:58 - to be type of any
25:00 - so we want to return of next which is a
25:02 - handler for our request with a method of
25:05 - handle and we're going to call a pipe
25:08 - which is going to catch an error so you
25:11 - want to do whatever you want in your
25:12 - application but in my application i'm
25:14 - going to log the error and i'm going to
25:17 - be returning the observable throw error
25:19 - so you can handle
25:20 - however it suits for your needs
25:23 - and now i will just import all the
25:25 - missing modules
25:26 - from our file and the quick import
25:29 - feature from the vs code is really
25:31 - useful for for this your purpose
25:34 - and the next interceptor which i want to
25:36 - implement is http headers interceptor
25:39 - all these interceptors are pretty much
25:41 - going to have like 90 the same uh code
25:44 - we are implementing http interceptor
25:47 - interface and this class is going to
25:49 - have a name http headers interceptor
25:52 - so we also have intercept method same as
25:56 - on the previous one but the body of the
25:58 - method is a little bit different so
26:01 - i want to clone the request and the set
26:03 - the headers in the headers i will set
26:05 - the two
26:06 - two headers first one is rapid api key
26:09 - and the second one is host and the key
26:11 - host uh instructions you will get on the
26:14 - public api documentation where you will
26:16 - register for free and get all the tokens
26:19 - which you need and i will put all the
26:21 - links of this public api into
26:23 - description of this video so that you
26:25 - can go and register and follow along
26:26 - with me as well and also we can set
26:28 - actually on this interceptor
26:30 - the params as well so that we don't need
26:33 - actually this http params interceptor
26:35 - anymore so we so i will remove actually
26:37 - that file
26:38 - and i will put the params inside of a
26:40 - key property in set headers and at the
26:42 - end i will just return next handle
26:45 - request which is the request we just
26:48 - created so it basically attached all
26:50 - these headers to the previous
26:52 - request which we cloned and it just
26:55 - emits
26:56 - the attached uh request with these
26:59 - headers
27:00 - and once again
27:01 - just
27:02 - import missing modules
27:04 - from you can use visual studio code
27:06 - quick import if you're using visual
27:07 - studio code but pretty much all the uh
27:11 - editors do have their import uh features
27:14 - and now when we are done creating our
27:16 - interceptors uh we're actually not done
27:18 - we need to insert them import them into
27:21 - our application so we need to go to
27:23 - app.module.ts file and inside of the
27:26 - providers array
27:28 - we are going to provide these
27:29 - interceptors so
27:32 - i'm going to create an object with the
27:34 - property of provide http interceptors
27:37 - use class http headers interceptor this
27:41 - is the interceptor we actually created
27:44 - and i'm going to set the property multi
27:46 - to true
27:47 - and i'm gonna provide exactly the same
27:50 - object for our http errors interceptor
27:53 - and i'm gonna import these interceptors
27:56 - using quick import feature of the visual
27:58 - studio code
28:00 - now as we finally created our http
28:02 - service and our interceptors we want to
28:05 - start utilizing our service and the data
28:08 - actual data which we want to get and the
28:10 - feeding into our page so let's head over
28:12 - to home component the component
28:14 - which will be loading first initially
28:17 - and
28:18 - i want to create a public property of
28:20 - games which will
28:22 - be a type of array of games
28:25 - this is the interface we created a
28:27 - couple steps before
28:29 - in the constructor i want to inject http
28:32 - service
28:33 - this is the service we created just a
28:35 - couple seconds ago and i want to
28:38 - inject activated route this is the
28:40 - angular service
28:42 - it is angular service we want in inside
28:45 - of the ngo init lifecycle hook this is
28:47 - the hook which runs the first when your
28:50 - component builds
28:51 - and we want to use the activated route
28:55 - params to subscribe to this event
28:58 - this event returns the params which is a
29:00 - type of params
29:02 - and basically we want to check in uh we
29:05 - will implement later when somebody
29:07 - searches our games to this query of
29:09 - search text to be attached to the url of
29:12 - our page so when we actually load the
29:15 - page we want to check first here is
29:17 - there any game search queries into our
29:20 - url if there is we want to call a search
29:23 - games method this is the method which we
29:25 - are going to create like in in next
29:28 - couple of minutes
29:29 - so for this method we we're going to
29:32 - send two parameters and the first
29:33 - parameter is going to be the sorting and
29:36 - this public api lets you choose couple
29:38 - of different
29:39 - options like date when it's updated when
29:41 - it's created and metagrid this is by the
29:44 - rating
29:45 - the rating methods and the second uh
29:48 - argument is game search this is the
29:50 - actual filtering
29:52 - so
29:52 - if there is a search query into our url
29:55 - we will call this method to be these
29:56 - parameters if there is no search queries
29:59 - into into our url we want to just call
30:02 - the search games with only sorting
30:05 - parameter
30:06 - and now let's create the search and
30:08 - games method which will actually call
30:10 - the api and fetch the these games this
30:13 - data
30:14 - so search games method we will have
30:17 - we'll have two
30:19 - two arguments like we said before first
30:22 - one is going to be sort and the second
30:23 - one is going to be search second one
30:25 - isn't necessary isn't required so the
30:28 - both of these is going to be string type
30:31 - and the return type of this method
30:32 - obviously is going to be void so it's
30:34 - not returning anything so we are going
30:36 - to call the http service and the get
30:39 - game list method this method is the only
30:41 - method we created into our http service
30:44 - and this method
30:45 - accepts two parameters first one is sort
30:48 - and the second one is search like we
30:49 - said we want to subscribe to this event
30:52 - and we are expecting back to get the
30:54 - game list which is going to be api
30:57 - response
30:58 - the interface we created
31:00 - before and the type is going to be the
31:02 - game
31:04 - and when we get that result we want to
31:07 - fit in
31:08 - this game list property results into our
31:11 - games
31:12 - and i'm just going to log this result so
31:15 - that we actually can see in our log what
31:17 - we actually got
31:20 - let's import all the missing modules the
31:22 - same way as we did it before
31:24 - and now finally if we go to our
31:26 - application into browser and if we open
31:29 - up the console
31:32 - we can see the log object and if you
31:34 - check
31:36 - our results array we can see the actual
31:38 - games which we finally got so
31:41 - the next step is to use these precious
31:44 - data and to fit that into our html and
31:47 - to make our page finally dynamic so that
31:50 - we get
31:51 - the games in our home page instead of
31:53 - this static content so let's do that
31:56 - and now inside of our html file of home
31:58 - component you actually can
32:00 - access the games variable which is now
32:03 - filled in with all the games which we
32:04 - retrieve from from our api so i'm going
32:07 - to create inside of the games
32:10 - div
32:11 - with a class of games i'm going to
32:12 - create ngcontainer and this container is
32:15 - going to be using ng4 to loop through
32:18 - all the games and display this play them
32:20 - basically i will assign the variable of
32:22 - game for each of these games so
32:26 - first i want to check uh if there is a
32:30 - game background image property so if
32:32 - there isn't we want to display a
32:35 - paragraph so
32:36 - i'm gonna assign ng if if he doesn't
32:38 - have a background image and i will just
32:40 - display text of no image but if there is
32:43 - a background image inside of our game i
32:46 - will use that as a source
32:48 - the next thing which i want to implement
32:51 - i i want to if there is a game name
32:53 - obviously every game should have a name
32:55 - so i will use game.name to to access the
32:58 - property of name from our game
33:00 - and then
33:01 - on the bottom we have a game platform so
33:04 - some of the games have multiple
33:05 - platforms like playstation android xbox
33:09 - a pc you name it
33:10 - so we are returning this information as
33:12 - an array so we want that once again when
33:15 - you use when you're using arrays you
33:17 - want to loop through these arrays and
33:19 - just
33:20 - display them as a separate item so we're
33:22 - using once again ng4 to loop through
33:25 - game parent platforms
33:27 - and
33:28 - i'm going to create a variable name game
33:30 - platform to access these items so i have
33:33 - downloaded from the web
33:36 - different icons for the platforms you
33:38 - can use whatever i mean style you want
33:40 - but and i have created a folder inside
33:43 - of the assets images platforms and
33:46 - put all of these uh platforms over there
33:49 - with the extension of svg so this is the
33:51 - reason why i'm using this url and i'm
33:53 - accessing the property of
33:55 - game platform
33:56 - dot platform dot slug to access this um
33:59 - this url this is on my local machine on
34:02 - my on my application and for the alt of
34:04 - the image i will just use platform.slog
34:08 - and now we can go and preview what we
34:10 - actually what we got now
34:13 - so if you open the browser we can see
34:14 - that finally we have multiple games so
34:17 - we have four games in a row and you can
34:20 - see this we have this nice images of the
34:22 - background we have the names the title
34:25 - names of the games and also the various
34:27 - platforms
34:29 - uh this looks interesting right yeah so
34:31 - the next thing which we want to do here
34:33 - so as you can see this sword
34:35 - doesn't work at the moment
34:37 - so this is the thing which we want to do
34:38 - we actually want when you choose some of
34:40 - the stored items we want to sort our
34:43 - games based on these sorting items so
34:47 - i mean a lot of things could be done
34:48 - here we could obviously improve like the
34:50 - loading we can add pagination we can add
34:53 - infinite scroll a lot of things can be
34:55 - done but this is like the basic thing
34:57 - how how would you
34:59 - add some of the data into your page how
35:01 - to make page dynamic and yeah
35:04 - and now let's make this sort select menu
35:07 - actually working yep
35:09 - so what we want to do is in our mat
35:11 - select we want to catch an event
35:13 - whenever our selection changes
35:15 - so match like has a default event for
35:17 - this and we want to
35:19 - call certain action upon it so obviously
35:22 - i want to catch that event and the name
35:23 - is selection change so when selection
35:26 - changes i want to call a function which
35:28 - is uh called search games this is the
35:30 - function we already defined inside of
35:32 - home component and this game this
35:35 - function we are calling on ngon init
35:37 - already
35:38 - passing some default uh values
35:40 - for sorting but now on every selection
35:43 - change we want to pass in the sort
35:45 - variable which is connected to our
35:46 - selection menu and it's defined inside
35:48 - of the home component it's a public sort
35:50 - type of string
35:52 - so
35:53 - every time the selection changes we will
35:54 - pass in the new value which is updated
35:57 - and
35:58 - our uh our
35:59 - games list is going to get updated as
36:01 - this is already connected and hooked up
36:03 - so we should see the changes right away
36:06 - so let's test this out
36:08 - and if we open our application now let's
36:11 - see what we have there so
36:13 - if we click on a sort and let's say just
36:16 - whatever
36:17 - let's say released
36:20 - and you can see that
36:22 - games has been already updated i mean
36:24 - instantly so let's choose something else
36:27 - added
36:30 - boom yeah
36:32 - so it gets updated right away and if we
36:34 - check the if we inspect our page and go
36:37 - to network tab
36:39 - and
36:40 - if you try to
36:42 - let just another one we can see that the
36:44 - request is sending with the parameters
36:47 - of ordering and the
36:49 - the thing which we actually selected so
36:51 - in this case it's created so
36:53 - yeah looks uh looks perfect and the
36:56 - final thing which i want to do on a home
36:57 - page so if you remember that i said
37:00 - uh that we want to click on one of these
37:02 - games and one once we click
37:05 - it means that we want to see more about
37:07 - the game and we want to see more details
37:09 - so what i want to do
37:11 - is i want to bind new event
37:14 - uh on our div
37:16 - game
37:16 - with the class of game
37:18 - so i will buy the click event and i will
37:21 - call a method which will
37:23 - be named open game details and this
37:26 - event we will just create in a second
37:29 - to this event we will pass in a game id
37:32 - so that we can open that game fetch the
37:34 - api and retrieve the more information
37:37 - about
37:38 - this game so
37:40 - now uh let we head over to home
37:42 - component yes file and that we created
37:44 - open game details so first thing which
37:46 - we want to do we want to uh reroute our
37:50 - application to that new page details
37:52 - page so we will need a router for that
37:54 - and i will inject inside of the
37:56 - constructor private router which is a
37:58 - type of router
38:01 - so i will use auto import from the
38:04 - visual studio code
38:06 - and now let's create the game let's
38:08 - create this opengamedetails method it's
38:10 - really simple method this method will
38:13 - receive an argument of type of string it
38:15 - will be ide
38:17 - will return return void so we are not
38:19 - returning anything
38:21 - so we will call this router which which
38:23 - we just injected and we will navigate to
38:25 - details page and send in id as a
38:28 - parameter so the url will be
38:31 - our localhost then slash details and
38:34 - then id of our game
38:36 - and that's pretty much it now it will
38:38 - give us error because we haven't created
38:40 - that game yet so we will do that in the
38:41 - next step but before we finish
38:44 - everything i want i want just to do a
38:45 - little bit of refactoring
38:47 - on our on our uh home component ds file
38:50 - so uh we have two uh subscribers which
38:53 - are left hanging so we don't we don't
38:55 - want that because we can avoid some uh
38:58 - memory leaks so i want to create two
39:00 - subscriptions to watch out to our
39:03 - subscribers
39:04 - so on top of our class uh create route
39:06 - sub subscription and game sub
39:08 - subscription
39:10 - and inside of ng united lifecycle i will
39:13 - sign routes up to
39:15 - this activated route param subscription
39:20 - and
39:20 - inside of our search game i will assign
39:23 - this game sub to this http service get
39:26 - games list to this subscriber so
39:30 - we are catching the subscribers in these
39:32 - two variables and we want to implement
39:34 - new uh on destroy lifecycle hook so i
39:37 - will implement that inside of our class
39:41 - insert there and now we want to
39:44 - create uh to implement engine destroy
39:47 - method which actually implements on
39:48 - destroy interface so we want to check if
39:52 - this game sub exists so if there is a
39:54 - subscription existing we want to
39:56 - unsubscribe this is when our
39:58 - page is closing so that there is no any
40:00 - memory leaks and we want to check
40:03 - exactly the same for route sub we are
40:05 - checking if there is any routes up uh
40:07 - subscription you want to unsubscribe
40:10 - and now i will just add on destroy
40:12 - interface into our class and import the
40:15 - missing modules for the subscription and
40:17 - the router and we're good to go to go
40:20 - and implement our details page let's
40:22 - start doing that
40:23 - first let me create a details page and
40:26 - inside of components folder i will use
40:29 - angular angular cli to generate new
40:31 - component so just type in command ng
40:34 - generate component
40:36 - details and once that is generated it's
40:40 - connected to our application inserted
40:42 - automatically and i want to go into
40:44 - approaching.modules file
40:46 - and there i will create
40:48 - a new route for our details component so
40:51 - that new path will be
40:53 - detailed slash
40:55 - uh
40:56 - column id so this is the id which we are
40:59 - going to get in the url which which we
41:02 - are sending from our home page and we
41:04 - are catching that idea of the game which
41:06 - we're which we'll be using for uh
41:08 - showing the details of our games
41:11 - so the path is detailed
41:13 - id
41:14 - which is going to be a number and then
41:16 - component is going to be details
41:17 - component
41:18 - and then we just need to import that
41:21 - component
41:22 - and now let me test this new route which
41:24 - we just created so open the browser
41:26 - again in our application and if we click
41:28 - on any of the games
41:30 - we should get the details new route and
41:32 - the id of this this game and you can see
41:34 - that detail works this is the html code
41:37 - of our new component so the route works
41:39 - perfectly we just need to
41:41 - start uh
41:42 - coding and put
41:44 - the details of our game in html code so
41:46 - let's start doing that
41:48 - on the very top i will create a deal
41:50 - with the class of details so we'll so
41:52 - this will be the main class of our page
41:55 - and then on the top we want to have a
41:57 - banner big banner with the image of our
41:59 - game so i will create another div with
42:01 - the class name a game banner
42:04 - so inside of this banner we'll have this
42:05 - image and the class of the image
42:08 - is game better image
42:10 - i will put some random image for now but
42:12 - later on we will make this dynamic
42:14 - and for dalt i'll put background image
42:17 - and this is for accessibility purpose
42:20 - and below that below the game banner we
42:22 - want to create new div with a class name
42:24 - of game content inside of this div
42:27 - we're going to display more information
42:29 - more details about this game that is the
42:31 - reason why user wants to
42:33 - actually navigate to this page so
42:36 - uh i will click i will create uh another
42:39 - with a class named details wrapper and
42:41 - inside of that tip
42:43 - i will create another one
42:45 - with the class uh game header so this is
42:48 - this is going to be a header of our
42:50 - content and below we will have uh tabs
42:53 - actually because it's going to be more
42:56 - um nicely
42:59 - laid out if we have the tabs on our page
43:02 - so inside of uh game header we want to
43:04 - have a title uh and i will create a h1
43:07 - tag with a class name game header title
43:10 - and i will just put game name here for
43:12 - now uh below that we want to have a
43:15 - issue tag
43:17 - and the class will be game header
43:19 - release date so we'll have our release
43:22 - date here
43:23 - and below that we want to have a john of
43:25 - our game so
43:27 - class well i will create a paragraph of
43:30 - class uh game header genres and inside
43:32 - of that uh span but i will just put rpg
43:36 - for now this is also of course going to
43:38 - be a dynamic and then on the right side
43:41 - we want to display uh graphical dis the
43:44 - representation of our rating of our game
43:47 - so i'm using the plug-in mvl gauge
43:50 - so
43:51 - i will create a div with the class name
43:53 - game gauge and inside of that i will put
43:56 - our
43:57 - extension so
43:59 - we will have a couple of properties here
44:01 - so i will put
44:05 - i mean i don't have to explain all of
44:06 - these properties but you can see we're
44:08 - setting the class the max of course this
44:10 - is the max rating uh start and end angle
44:14 - of our
44:15 - gauge
44:16 - then the value we're gonna
44:18 - put the game rating so this value is
44:20 - going to be a variable which we are
44:22 - going to define right away on our class
44:25 - details component so uh it's going to be
44:28 - zero it's going to start at zero and
44:30 - then when you fetch the data it's going
44:32 - to animate to the value which we which
44:35 - we retrieved from the api animated
44:38 - obviously we want that to be true
44:40 - then color uh we are gonna
44:43 - create a function gut color so color
44:45 - will be changing depending on the value
44:47 - which we're getting
44:49 - so inside of details component the ts
44:51 - file i'll create a new method named get
44:54 - color and this method is going to
44:56 - receive a value which is the type of a
44:58 - number so this is uh the value we're
45:00 - passing in from our
45:01 - widget and the return type is going to
45:03 - be a stirring so we are returning back
45:05 - the color which we just is going to be
45:07 - using to display the color
45:09 - on their bar so if the value is above
45:12 - the 75 so it means the rating is good
45:14 - and we want to return this color which
45:16 - represent the green color then else if
45:19 - the color is the value is lower than 75
45:22 - but it's greater than 50 so we want in
45:24 - that case to return this is the orange
45:27 - color and if the value is less than 50
45:31 - but greater than 30
45:33 - we want to display this yellowish
45:36 - color and for everything else below the
45:38 - 30 we want to display the red color
45:41 - which means that game is bad so the
45:44 - rating is terrible
45:46 - and that's with our
45:49 - get color
45:50 - function and then we want to set the
45:52 - animation duration i will set two
45:54 - seconds so it's nice slow and uh it can
45:56 - catch the user's attention yeah and on
45:59 - the bottom
46:00 - uh of this uh
46:02 - of this uh widget we want to place uh
46:05 - anchor tag uh with the class name game
46:08 - gadget label
46:09 - and the target is going to be underscore
46:11 - blank so we want basically to put a link
46:13 - here to our rating where the rating has
46:16 - took to place on metacritic website
46:19 - and that is for our header of our
46:21 - content uh below that you will have uh
46:23 - tabs material tabs and we will store
46:26 - that in a separate component which we'll
46:29 - be generating uh just in a second but
46:31 - first let's first
46:33 - style what we got here
46:35 - and let me first preview what is our
46:36 - html how it looks like and then we can
46:39 - style all of that and continue with our
46:41 - tabs
46:44 - so we have this big image which will be
46:46 - our background image but it needs to be
46:48 - sized better
46:51 - and our title game title i mean is very
46:54 - simple we have release date we have
46:56 - darjean this is our plugin for rating so
46:59 - it's zero at the moment
47:01 - and yeah and this is metacritic link so
47:05 - uh this is how it looks
47:07 - like now let's style
47:09 - so inside of our details component uh i
47:12 - will create a details wrapper selector
47:15 - and uh this is a wrapper which i have
47:17 - created the same on our home page so max
47:19 - width is going to be 900 pixels and the
47:21 - margin 20 pixels auto so this is to
47:23 - center our content and to give slide
47:26 - separation on top and bottom so position
47:29 - is going to be relative as we are going
47:31 - to have a
47:32 - image floating
47:34 - and to be positioned absolutely so
47:36 - inside of our details div i want to
47:39 - start first our widget for the rating
47:42 - i'm i'm going to use ngdp selector
47:44 - angular selector for the elements inside
47:46 - of uh
47:48 - as a child components so this is the
47:50 - basic elements which are be generated i
47:52 - compiled
47:54 - at the runtime
47:55 - the width and the height is going to be
47:57 - 150 pixels and this space going to be
47:59 - blocked
48:00 - and slight padding to 10 pixels
48:02 - for the dial and this is a width of our
48:05 - stroke so it's going to be 10
48:07 - and for the value i want to set dash
48:10 - right to be none and the stroke width to
48:11 - be 13.
48:13 - and then for our value text this is the
48:14 - text
48:16 - which at the moment shows zero so the
48:18 - color will be
48:20 - white
48:21 - weight is going to be bold and one side
48:23 - 24 pixels
48:25 - for our game garage
48:27 - dev position is going to be absolute
48:29 - we are going to position it top 50
48:32 - pixels and on the right side zero and
48:35 - for our label which says metacritic font
48:38 - size is going to be 20 pixels color
48:41 - white position relative and at from the
48:43 - bottom 60 pixels
48:45 - now we want to style the game div and
48:47 - for the banner
48:48 - uh the height is going to be
48:51 - 442 pixels and overflow hidden for the
48:54 - image we want to be the full with and to
48:57 - blur a little bit so that the text is
48:59 - separated from the background for the
49:02 - content we want to center it and
49:04 - position relatively and to move a little
49:07 - bit on uh i mean 200 pixels on top
49:10 - because we want the text to be
49:12 - on the background on the banner
49:15 - so for the header title
49:17 - i'm going to set this huge font size and
49:20 - to set the color to be white also to be
49:22 - bold
49:23 - and to set the line height to be the
49:25 - same as the font size and i don't want
49:28 - it to wrap so white space no wrap for
49:31 - the release date also the color uh
49:34 - white and the font weight bold and for
49:36 - john is the same
49:38 - and that's
49:40 - what we're going to do for our top part
49:42 - and now we want to grab our data and to
49:45 - make this page dynamic so inside of our
49:48 - details component es file i want to
49:50 - create a couple of variables first so
49:53 - game id this is the id which which we
49:55 - are going to be retrieving from the
49:57 - route
49:58 - type is string uh the variable game this
50:01 - is the variable which is going to hold
50:04 - all the data of our game so the type is
50:06 - going to be a game this is the custom
50:08 - type which we created in inside of our
50:10 - models file and then two subscriptions
50:13 - for because we are going to have two
50:15 - subscribers on our page so route sub
50:18 - subscription and game sub subscription
50:20 - now we want to
50:21 - inject a couple of dependencies inside
50:23 - of our constructor so
50:25 - the first one is activated route uh it's
50:27 - going to be private of course and the
50:29 - type is activated route so this
50:32 - dependency basically
50:34 - uh provides you with the api of the
50:36 - route once it's activated
50:38 - and the private http service this is the
50:41 - service uh custom service which should
50:43 - be created to communicate with our api
50:46 - so
50:47 - now we want to create uh inside of ngo
50:50 - and in it basically we want to we can
50:53 - assign our subscription to our route sub
50:57 - and we can call this activated route
51:00 - params subscribe so we are subscribing
51:02 - to our params
51:04 - and we are getting back the params which
51:06 - is a type of params so we want to assign
51:09 - to our game id what is sent to our
51:12 - parameters through our details slash id
51:15 - url so we are assigning this game id
51:17 - equals params id
51:20 - and then we will use this id to pass
51:22 - into our uh our method which we are
51:24 - which we are cr we are going to create
51:26 - in a couple of seconds this game details
51:29 - and we are passing uh this game id
51:32 - so let's define this method
51:34 - get game detail so it's going to receive
51:37 - id which is type of string and we're not
51:38 - going to return here anything it's type
51:40 - of void so
51:42 - here we're going to have another
51:43 - subscription so we are assigning this
51:45 - game sub to our subscription
51:48 - so that we can later on clear all these
51:50 - subscriptions once the details page is
51:52 - closed so we are going to call the http
51:55 - service and
51:56 - this method doesn't exist yet but we are
51:58 - going to create that one in a second get
52:01 - game details and we are going to pass in
52:03 - this parameter id which we're getting
52:06 - from the route
52:07 - uh we're gonna subscribe to that and
52:09 - from the response we should get a game
52:11 - the actual game which we want yay
52:14 - and we will just pass in to our game a
52:16 - game response
52:18 - and actually we want to update our game
52:21 - rating
52:22 - if you remember that we have that widget
52:24 - for uh displaying animated rating of our
52:26 - game so i want to set a timeout set that
52:28 - the user has some time to load the page
52:30 - and to
52:31 - sit a little bit delayed so i will set a
52:33 - timeout
52:35 - and i will assign this game rating to
52:38 - this game metacritic so this rating
52:41 - after one second
52:42 - yeah
52:43 - and now i will just import all the
52:45 - missing modules uh from our file using
52:47 - quick import feature of the visual
52:49 - studio code and now we want to define
52:51 - this game details
52:53 - method inside of our service because we
52:55 - don't have that created yet so let us
52:57 - head over to http service ds file and
53:00 - inside of this file
53:01 - let me create this method so the name is
53:04 - game details
53:05 - get game details
53:07 - the parameter which is reserving is the
53:10 - retrieving is the id
53:12 - of our game so id is type of string and
53:14 - we're returning observable of type game
53:18 - so we will have uh three requests here
53:20 - because actually we are combining uh all
53:23 - all the information from these three
53:25 - requests into single one so we will
53:27 - define three constant game in for
53:30 - request and the url of this get request
53:33 - is our base url slash game slash id
53:36 - so this here we will get the majority of
53:39 - information then we want to trailer so
53:41 - we will display
53:42 - video trailers on our page so
53:45 - this request is for that so constant
53:48 - game trailers request equals http get
53:50 - method and the url is space url games
53:54 - slash id slash movies and the next one
53:57 - is we want to display some screenshots
53:58 - of our game so the next one is this http
54:02 - get base url slash game slash id slash
54:05 - screenshots
54:06 - and now we want to use a fork join to
54:10 - retrieve all of these uh
54:12 - get methods and combine them into one so
54:16 - i'm passing gaming info game screenshots
54:17 - again trail game trailers request and
54:20 - i'm using pipe to map this response um
54:24 - so i'm returning one object
54:26 - and
54:27 - i'm gonna use
54:29 - uh the old information uh i'm gonna use
54:31 - spread operator to use all the
54:33 - properties from
54:35 - our gaming for request and i'm going to
54:37 - create two additional properties
54:39 - screenshots and trailers to fade in the
54:42 - results of the additional two requests
54:44 - which we are getting so we'll get
54:46 - everything but we need
54:47 - inside of this get request and the last
54:50 - thing of course is to import all the
54:51 - missing modules again
54:54 - and now we can head over to details
54:56 - component html file and inside of the
54:59 - source of the image we will change this
55:01 - to be game background image
55:04 - so we're going to implement now our data
55:06 - for our title we're going to set the
55:09 - game
55:10 - dot name
55:11 - property for a name
55:13 - then for the release date
55:15 - i'm going to use game.released and here
55:18 - i'm using datepipe to
55:20 - to format our
55:22 - output format of our date so this is a
55:25 - pipe which formats uh the html for our
55:27 - needs or strings now for genres
55:31 - as we can have more of these i will use
55:33 - ng4 to loop through the array which
55:35 - we're retrieving and i will set the last
55:38 - uh index so we will need last index in
55:41 - order to
55:42 - uh display the commas so for for name i
55:45 - will use genre names
55:47 - name and then i will use ng if to see if
55:50 - the last only for the last you you don't
55:52 - want to display comma obviously so for
55:55 - all the others we want to display comma
55:59 - then
56:00 - i want to the last thing is for our
56:02 - label
56:04 - we want to set the url of the review
56:06 - where it has been order rating so i will
56:09 - set the game metacritic url
56:12 - and now as you can see
56:14 - this rating bar is animating nicely and
56:16 - we have attached the metacritic urls
56:19 - here so if you click on it it actually
56:21 - gets us to their site and you can see
56:23 - the breakdown of this rating and get
56:25 - more information about how they got to
56:27 - this rating uh the name obviously game
56:30 - name has been cooked up in the release
56:32 - date so we're using date pipe here to
56:34 - you know format this but you can use
56:36 - whatever format you want as long as
56:38 - you're you're using a date pipe and at
56:40 - the bottom we have the genres
56:42 - so as you can see the comma is not in
56:44 - the last place
56:45 - so the next thing which we want to do is
56:47 - we want to build the bottom part of this
56:50 - page and provide more information so i
56:51 - will be using uh single material tabs
56:54 - for this element so let's call that
56:57 - but before we actually hold this we want
57:00 - to do a little bit of pre-factoring on
57:02 - our details component page so i want to
57:04 - clean up all the subscriptions once the
57:06 - component is destroyed again the same
57:08 - thing which we did on the home component
57:10 - so
57:11 - i'm gonna implement on and destroy and
57:13 - destroy
57:14 - uh lifecycle hook and uh i will create
57:17 - ng on destroy method to implement that
57:19 - the return type is void obviously and
57:21 - i'm just going to check if there is a
57:23 - game sub and if there is i'm going to
57:25 - unsubscribe and the same thing for the
57:27 - route sub
57:28 - and then i'm just going to import on
57:31 - destroy
57:32 - uh interface and that's done now let's
57:35 - let me create using angular cli or tabs
57:38 - component and inside of the terminal i
57:41 - want to open our directory source app
57:44 - component
57:45 - and i will type in ng generate component
57:48 - game tabs
57:51 - and once that is generated i just want
57:53 - to head over to our details
57:56 - component html
57:59 - page and on the very bottom i want to
58:02 - include this app game type tabs
58:06 - so let me preview is that hookup
58:07 - correctly
58:09 - and as you can see it is so now we want
58:12 - to head over to our
58:13 - newly created app game tabs uh component
58:16 - and want to start coding uh all the
58:18 - details we want to display on this we're
58:21 - gonna have three tabs so you will see in
58:23 - a bit
58:24 - so on very top of our game tabs dot
58:27 - component.html file
58:28 - i'm creating uh div with the class name
58:31 - game tabs
58:33 - so this is our main wrapper then i'm
58:35 - creating mat tab group this is the group
58:37 - of our tabs using angular material
58:40 - metal line tabs is going to be start and
58:42 - the background color is primary so the
58:44 - color is going to be the color you
58:46 - choose for a theme when you install them
58:48 - in your material uh first tab which i'm
58:51 - going to create is a mat tab labeled
58:54 - about so we're going to have about
58:57 - screenshots and trailer section
58:59 - so in our about section uh on very top i
59:03 - will create a paragraph game tab spare
59:06 - and the label is going to be platforms
59:08 - and here we're going to list all the
59:10 - platforms of our game so for now i'm
59:12 - going to put the pc
59:13 - underneath uh i'm going to create
59:15 - another
59:16 - paragraph game tabs pair
59:19 - with the label of publishers
59:21 - and here we're going to display
59:23 - obviously publishers so i will put
59:24 - konami
59:26 - underneath i want to create another
59:29 - paragraph game types power so all the
59:32 - classes are going to be the same for
59:34 - these paragraphs the label for this one
59:36 - is going to be a website so we want to
59:38 - link a website to a game if there is any
59:41 - inside of a paragraph i will put a link
59:43 - anchor link with the class name games
59:45 - apps link
59:46 - href is going to be a pound now and
59:48 - target underscore blank so we open that
59:50 - in a new browser
59:52 - in a new tab
59:53 - and uh i'm gonna leave that without a
59:55 - link for now
59:56 - then we want to put some a description
59:58 - of the game so i will put another div
60:01 - with a class game description and put
60:03 - some random text
60:05 - and below that i will create new
60:07 - paragraph with a claim a video class
60:09 - game to have votes so we want to have a
60:12 - voice of our game every game has a votes
60:14 - in a rating so
60:15 - i will create two icons
60:17 - uh with the game with thumbs up and
60:20 - thumbs down so i will use uh two spans
60:24 - so span and then i will use matte icon
60:26 - which we included with the angle
60:28 - material
60:30 - class name for this one will be games
60:32 - game votes up and uh icon
60:35 - text is thumb up
60:37 - and uh we want to display the count of
60:40 - the thumbs up so span
60:43 - uh will be class name game votes count
60:46 - and here i'll just put some random
60:47 - numbers so same thing we want for the
60:49 - games thumbs down uh
60:52 - but the class name will be game votes
60:54 - down and obviously the icon will be
60:56 - thumb down
60:58 - so this is a font icon and you just put
61:00 - in the text and you get
61:02 - the icon
61:03 - so this is the icon for the thumb down
61:07 - and i think that's all what we want to
61:09 - hear for about label about tab so let me
61:12 - preview what we got
61:14 - okay
61:15 - uh that looks
61:17 - ugly for now but we will start in a bit
61:20 - so for the second tab uh it's going to
61:22 - be a screenshot this one is going to be
61:23 - very very simple so we're just going to
61:25 - have an image
61:27 - and the image is going to have a class
61:29 - name of game screenshot so we'll have
61:32 - multiple screenshots but for now it's
61:33 - going to be just this one for source i
61:35 - will put a link
61:37 - from the web and i'll i'm just going to
61:39 - put a screenshot and the last tab is uh
61:42 - trailers tab and as you can see
61:45 - uh here we're going to display some
61:47 - game trailers and so i will create a
61:49 - video html tag with a clay stamp class
61:52 - name of game trailer
61:55 - and i'll put controls as well so the
61:56 - user can
61:58 - navigate uh source is gonna be just
62:00 - random video right now but we're gonna
62:03 - implement that later on type is going to
62:05 - be video mp4
62:07 - and we're just going to display text
62:09 - your browser doesn't support video tag
62:10 - if you're using some older browsers
62:13 - and finally let me preview what we
62:16 - created so as you can see we have tabs
62:18 - and we just need to style it a little
62:20 - bit better and apply some styles to
62:22 - screenshots and trailers as well so
62:25 - let's do that
62:27 - inside of the game tabs components scss
62:30 - file so i'll create a main game
62:33 - selector on top and all the styles are
62:35 - going to be inside of this selector so
62:38 - uh dash tabs for the game tabs selector
62:42 - we want to set the background
62:46 - then we want to set the color to be
62:47 - white to align all the text on the left
62:49 - side and give some slight padding
62:51 - for all the paragraphs we want to so
62:54 - game types power
62:55 - we want to get some uh padding and to
62:58 - get the margin bottom to be zero so that
63:00 - we don't have any separation on the
63:01 - bottom for the links we want to set only
63:03 - color to be white so as our background
63:05 - is dark we want all the colors to be all
63:08 - the text colors to be white
63:10 - so for the votes i will give some margin
63:13 - on the left side and display flex so
63:14 - they're all aligned and for the count
63:17 - i will give a slight margin on the left
63:20 - side so it's 5 pixels
63:22 - and for the labels i want just to center
63:24 - centrify them so justify content center
63:27 - for our votes
63:29 - i will put the colors obviously for
63:30 - what's up i will put this green color
63:32 - and for the votes down the color is
63:34 - going to be this red one
63:36 - and for the counts uh we want just to
63:38 - keep a slight separation on the left on
63:40 - the right side on the right side is
63:41 - going to be 10 pixels because i want to
63:43 - separate
63:44 - both down and votes up
63:46 - a little bit and to align them a
63:49 - vertical line is going to be super so
63:51 - they're like in the middle
63:53 - for text description i'm just going to
63:56 - set this padding to be 20 pixels and
63:58 - that's it
63:59 - then for screenshots uh i want to give a
64:02 - little bit margin on top so it's uh five
64:05 - pixels then for the width i want to give
64:07 - it uh 50
64:09 - minus 10px because
64:11 - we want to display two screenshots in a
64:14 - row so this is why the width is 50
64:16 - pixels minus 10 pixels is going to be uh
64:20 - our margin so on every even child and
64:23 - child even we want to set the margin
64:25 - left to be 10 pixels so that we only
64:26 - have the separation in the middle and
64:29 - for our trailers we want to have a width
64:32 - 100 so the full width and to give it
64:35 - just slight margin on top and the bottom
64:38 - and with that i'm happy with the results
64:40 - what we have for now so
64:42 - the next thing which i want to do is i
64:44 - want to connect the data to your html
64:47 - page to to our html code so we actually
64:51 - have fetched already our uh all the
64:53 - information which we are going to be uh
64:55 - displaying here and the information is
64:57 - inside of our details component inside
65:00 - of the game variable so what we want to
65:02 - do inside of this child component this
65:04 - game tabs component inside of our ts
65:06 - file we want to create a new input so
65:09 - this is the input property which will be
65:11 - receiving uh the information so input is
65:14 - going to have a name of game and type of
65:17 - game so this is the game
65:19 - interface which we created before so i'm
65:21 - going to import that
65:22 - and then inside of our
65:24 - details component inside of the html5
65:27 - file we want to add a property input
65:30 - game and to pass in our game
65:32 - so this is the way how to share the data
65:35 - between the parent and child components
65:37 - so we're just setting up the input and
65:39 - we're passing in our game so
65:41 - at this point we have all the available
65:44 - information inside of our game tabs and
65:46 - now we just want to go and to hook up
65:49 - that inside of our html file so let's do
65:51 - that
65:53 - so first thing which i want to do is on
65:55 - our game platforms i want to check if
65:58 - there is any platforms at all so that we
66:00 - don't display this platform's label if
66:02 - there isn't so i'm setting up ng if game
66:05 - platforms
66:06 - dot length so if it exits if the length
66:09 - is more than a zero
66:10 - so if it is i'm gonna use uh ng4 for
66:14 - looping to right through our array of
66:16 - platforms i'll let game of game parent
66:20 - platform so i'm using i'm setting up
66:22 - this game variable
66:24 - half our platforms and i'm just going to
66:26 - use the lat uh last so that we detect
66:29 - which one is lacks last so that we don't
66:32 - display the comma
66:33 - on the last item so i will just put in
66:36 - the game platform the name so the name
66:38 - of our platform and uh after that i will
66:41 - just
66:42 - set ng if if it's not the last element
66:45 - set the comma if it's last element don't
66:47 - display
66:48 - this comma into our array
66:51 - so similar similar thing i want to do
66:53 - for publishers as well so we'll check if
66:56 - there is any publishers if there is the
66:58 - length grade of zero if there is i want
67:01 - to loop through our game publishers
67:03 - array and i will set the variable uh let
67:06 - publishers
67:07 - again i'm gonna use the last index and i
67:10 - will from publishers as well i'm just
67:12 - using name so
67:14 - again i'm checking if it's not the last
67:17 - element display the comma if it is don't
67:19 - display this comma
67:21 - then for our game website again i will
67:24 - check if there is a game website website
67:27 - property if it's not so that we don't
67:29 - display this website
67:31 - a label
67:33 - i will put inside of href game website
67:36 - which is the link of the website
67:38 - and
67:39 - i will display exactly the same text
67:42 - so i will put inside of the brackets
67:44 - game website so it will display
67:47 - the link the url inside of the text for
67:50 - the for the game description i will use
67:52 - the inner html input and i will just
67:56 - pass in the game description so we'll so
67:58 - this will just put in the raw text
68:01 - now for the ratings the ratings uh i
68:04 - will as we are also getting the the
68:06 - array return type so i will loop using
68:09 - the ng4
68:10 - because we can have multiple ratings
68:13 - usually it's just
68:14 - it's just a one but we can have multiple
68:16 - them so i will assign the variable
68:18 - rating from game
68:20 - dot ratings array
68:23 - and i will check
68:25 - we get uh multiple ratings and i will
68:27 - just display the two ones so the first
68:29 - one is exceptional so i'm checking ng if
68:32 - if the rating title is equal to
68:34 - exceptional so this is like the top
68:37 - we will display our thumbs up and
68:41 - we want to use the variable
68:43 - account so from rating dot count if
68:46 - there is no count you want just to
68:47 - display zero
68:49 - and then afford our thumbs down i want
68:52 - to use the rating skip so basically if
68:55 - user has rated game as a skip
68:57 - uh we want to display the thumbs down so
69:00 - rating title is equal to skip and again
69:02 - we're using rating count for this
69:05 - rating as well and if it's not
69:07 - i'm gonna just set up the zero
69:09 - then i want to check if there is
69:12 - screenshots at all so
69:14 - ng if game screenshots length if it's
69:16 - greater than zero we want to display
69:17 - tabs sometimes we don't have screenshots
69:19 - so we don't want to display this tab at
69:22 - all
69:23 - and if we have a screenshot we want to
69:25 - loop through the array of screenshots
69:28 - and display the image so i will use ng
69:30 - for last screenshot of game screenshots
69:34 - so in the screenshot i will just use the
69:37 - image
69:38 - for our source and that will loop and
69:40 - display all the source images this can
69:42 - be optimized i mean
69:45 - sometimes to display just uh above the
69:48 - fold of the page so it's uh so it
69:50 - doesn't load all images before it's seen
69:52 - but we will leave it like this for now
69:55 - and the last tab is our trailers and the
69:57 - same thing as a four screenshots i will
69:59 - check if there is uh any trailers
70:01 - because uh trailers as well are not
70:04 - displayed for every game so ng if game
70:06 - trailers length is greater than zero
70:08 - obviously
70:09 - so we'll we want to loop through the
70:11 - game trailers array i will set the
70:13 - variable that trailer
70:15 - and just going to loop
70:16 - and then just in the source uh input i
70:19 - will put
70:20 - trailer data max
70:23 - which is actually the max resolution we
70:25 - want to display the trailers of the max
70:27 - resolution that is the property they
70:29 - used
70:30 - and now let your preview that is the all
70:32 - the data which will be hooking up in our
70:34 - games
70:36 - component so let me review what we
70:38 - actually got
70:40 - and now if you refresh our page you can
70:42 - see that uh on the about section the
70:45 - platforms are now hooked up array and as
70:47 - you can see the commas are just for the
70:49 - elements which are not the last
70:51 - so the platforms are displayed correctly
70:53 - publishers rockstar games so this looks
70:55 - good for the
70:56 - website it's hooked up to their website
71:00 - and you can click them it redirects you
71:02 - to a new tab so this is this looks
71:04 - awesome and uh below that we have the
71:07 - description
71:08 - and as you can see the ratings
71:10 - yes look i mean they look okay to me
71:13 - there is a lot of thumbs up so this is
71:14 - very very popular game so if you look on
71:17 - the screenshots tab
71:18 - that is nice we have uh loaded these
71:20 - screenshots so it gets you in a row
71:23 - this nice american circulation
71:26 - and for the last one with the trailers
71:29 - uh actually for this game we have
71:30 - multiple trailers so let me see
71:34 - yeah
71:34 - i'm not gonna
71:36 - play them longer but as you can see it
71:38 - looks correct
71:39 - so this basically wraps up
71:41 - our application so we have we have built
71:44 - everything from scratch so just to sum
71:46 - up we have this homepage
71:49 - which loads our games
71:51 - uh by default on metagrader ratings so
71:54 - and we can build this search on top so
71:56 - if
71:57 - you type in
71:59 - some game let's say soccer july soccer
72:02 - you can get the preview of the games
72:04 - also except sorting
72:06 - so it's probably quite released or any
72:09 - other
72:10 - uh criteria so that looks nice also if
72:12 - you want to check more about the game
72:14 - itself you can click
72:16 - any of the games and we load up
72:18 - the details game and you can see
72:22 - as well
72:24 - and uh for this game you can see now
72:26 - there is no trailer so it doesn't
72:27 - display through the last tab but it
72:30 - displays screenshots clicking
72:33 - in about section as well so
72:36 - that's it
72:42 - [Music]
72:53 - you

Cleaned transcript:

this is the perfect course if you want to improve your skills with angular you will learn to create a project from scratch using a public api slobodan who created this course is very experienced and he's worked at many top companies in this tutorial i'm building an angular application from scratch and i'm using public api to create this interesting game database website i will show you how to set up a project using angular cli how to create components how to make http calls how to implement http interceptors how to make services also you will learn how to set up routes for your application how to pass data with routes in between the components we will use pipes for data formatting various angular directives like ng4 and ngif and so much more so stay until end of it and you'll be in a good place to have a great foundation for building angular applications for project setup i'm gonna be using for this angular cli so for generating all the components it's going to be angle cli and npm packages for others so first i'm gonna name our project ng video game db stands for database and i'm going to set the style to be scss because i like using more css for our stylings i'll skip strict checking for this project right now but i would like to add the angular routing now the project creation has been done successfully we want to head over into our root folder of our application which is ng video game db and the first package which i want to add is angular material i will add all the packages at the beginning and import them into our application so that later on we can focus on just coding type ng add angular material for material prebuilt theme you can use whatever you want i'm going to use the second one in this list and i want angle material to set up the typography styles and to set up the animations for our angular material and the last package which i want to add to our project is angular gadge this plugin i will be using for displaying the rating of our games so just type in npm i angular dash gauge and now when we successfully install all these packages we want to import them inside of the app.module.ts first i want to import the angular modules forms module and http client module next are the modules from the external packages like gadge module then we will import the angular material modules we will need mat tabs module mat icon module mat form field module and mat select module and now all of these imports we want to include inside of our ng module in imports array and for gauge module we want to call for root method the next thing i want to remove some of the global styles which are pretty default set up in angular application and i will set up some my own rules so for the body i will use the roboto fun family i will set this dark background i will add some height and batting top also i will set the same font family for all the child elements of body and reset the margin padding and box sizing and the last thing is that we want to actually run our application inside of terminal cd to our folder directory into a root of our application and run ng server and when this eventually starts our application successfully we can head over to localhost 4200 to see our application voila setup has been done now let's start coding first component which i want to create is going to be search bar component this component is gonna stay on top of our application for searching the games so i want to head over into our app directory and make new one called components all the components are going to be stored here for generating all components i'm going to be using angular cli so run the command ng generate component search bar these are shorthand nggc now once that has been generated i want to place that search bar component into our main app component so let's take the selector of this component and let's put it inside of our app component first let me remove all this boilerplate code from the app components html file we don't need that anymore and i'll put search bar app search bar selector there that is our component now inside of the app component.ts we don't need this title anymore so i will remove that and now let's see how our component looks like in the browser and we can barely see it because of our dark background but that's going to be fixed in no time i'll remove this boilerplate code from the search bar component and this component is going to be very simple i'm going to create on top of our component search container class div and inside of that we'll have a form with a class of search form the next is the logo actually and clicking on this logo will redirect to the home page so router link is going to be a slash the next element is our input element this one is going to be used for actual searching and it's going to have a class of search input and the name of search this one is going to be used in our template and the last element is our submit button which is going to be a class search button with the text of search once we click this button it's actually going to submit our form and we can take it from there and this is how it looks without any css so it's horrible let's apply some css styles to it first i'm going to create search selector which is going to be the main selector of our component and inside of it it's going to be search container first with it's going to be full 100 with a height of 60 background it's going to have this color and also we want to position this fixed so it's always on top of our screen with position of top and left zero and z index one to be four we want to align the items to the center of that and this starts to look a little bit better now for our form we want to set the width to be a hundred percent and to set the max width uh 1200 pixels because we want to set the max width for our large screens and to center it with margin zero auto for our input margin is going to be 10 pixels on the left side we're going to give some small padding to 10 pixels width it's going to be 300 pixels and we're going to give a border radius to the left side on the right side it's going to be the button and we want to reset the outline in border to be none for our button i'm going to reset border and outline to be none background is set to blue padding to 10 pixels also border left it's going to give some small edge on the right side we're going to set the radius to 5 pixels color is going to be white font weight bold you're also going to give some transition for the hover effect and curse to be pointer it looks better but it doesn't have any hover effect so let's add that color is going to be blue and hover background is going to be white and the border is going also to be blue as well as the color so it has some separation on the left side nice the last element of our search bar which needs styling is our logo so i will apply some margin to the left side color to reset to be white font weight to be bold so it's nice and separated cursor to be pointer is it's going to be a link and text the creation to be none that's sweet now we want to handle submitting of our form and we are going to catch ng submit event and we are going to create onsubmit method which we will going to be passing our form as an argument inside of our search bar component we want to inject angular router as a dependency and we will use this router to redirect our application to our search page which we will be building later on and to pass in the value of our input field from our form inside of our unsubmit method we're receiving form as an argument which is a type of ng form and we're using this router to navigate to a search page which we'll be building later like i said before from the form which we are getting will extract in the value and the search which is actually from our input which is called the search as a name also we want to import the missing module which is ng form and router from angular router now let's test if this works let's just type in some random text and sub it now form to see do we get any redirection as if we check the console we can see that it's getting the error so as we haven't set up this routing yet but it's redirecting to search and once our search bar has been completed i want to create our first component from our two components which we are going to have in our application which is home component so we want to create new directory inside of component directory which we will call home directory and then using angular cli i'm going to type in ng generate component home which will generate our new component then i want to create routes for this component so inside of the app routing.module i will create path which will be default path and the component will be home component and also we want to all of our searches to land on this page as well so we'll add path search slash game search which will be our parameter sent with our route so the component for both of these route is going to be home component and then the last thing is i want to create router outlet inside of our app component so basically all our components or actually the both of our pages is going to be loaded in this router outlet and on top we will have this search bar and now if we check our application into browser we can see that home component has been loaded although we can barely see it as the text is dark the first thing we want to implement in our home application is actually our filters component which will be used for filtering the games which which are going to be displayed on home page as we first initially when we reload our application it's going to have a lot of game cards in it so we will create create a div with a class of filters and we will use mat form field for our fields this is from angular material we'll use matte label and we will put a label of sort for uh our selection we'll use mat select uh component from angular material for class we will set to be sort select so that we can style it will attach ng model sort so this is going to be a variable from component which will be attached to matte select and we want to add some values so we will have value name released added created updated rating and metacritic now to attach this math select we want to create this sort variable we just created inside of our html file so we want to add that to our home component ts file and once we created that we can preview what we have created in our home component as you can see we have all the options we just added but it's barely visible so we need to add some styling so let's head over to our home component scss file first let's select the filters class which is a wrapper around our mat select component so we will set the max width to match the containers with some margin and also padding left so it's aligned on the top navigation and the games which we will be creating later on so the next thing is we want to use ngdp selector this selector is used when you want to select some of the components which are generated from for example matte matte select in this case so for my matte form field in fix we will set the background color to be this blue color so it's so it's actually visible because right now it's transparent for for the following properties matte select value arrow for the placeholders and for the form film label we want to set the color to be white and opacity to one for matte form field infix we will set the border color to be white board top to be removed and padding left to be 5 pixels format form field label we want to set it to to have padding left five pixels so it's so it has some padding on the text and for the uh matte form field underline so this is basically an underline uh underneath the selection we want to set the background color to be white and now let's preview what we got okay the next thing which we want to build is our actual game boxes so first i want to create a wrapper for games it's going to have class of games then in this game's deal we will have all the games generated and loop through angular and g4 but we will build that later so first create a class game and inside of that class you want to have an image so it will have a div of class game thumb container inside of that container i will put an image this image is going to have a source i just put some randomly picked image from the web and it's going to have a class of game thumbnail so we can style it later then i want to have a description below the image and i will add a div with a class of game description and paragraph with a class of game name so this will be the name of our game actually and then on the bottom i want to display all the platforms which are supporting this game so they will have a class of game platforms and an image is going to have a class of a game platform also for the url i will put now just some randomly picked image from the web which but we will later on fill in all the real data and that is going to be a slug so let's preview what we have now as you can see the image is really large and you can and you can barely see anything here so let's apply some styles to this let me head over to homecomponent.scss file and first let's create games selector which is for our wrapper so i'm going to put display flex and flex wrap to be wrap so we want to wrap our our boxes actually into uh three or four we will decide later on in a row justify content to be center max width to be 1200 pixels and to put margin 20 pixel auto and those were stylings for our game wrapper that hasn't been affecting a lot our game box itself so let me set the so it's like the selector of game for our game box the width of our games are going to be 280 pixels margin is going to be that 10 pixels so we'll have some margin around our boxes height is going to be 330 pixels everything will which overflows it's going to be hidden we'll have slight border radius of 5 pixels background color is going to be dark we'll have some slight yellow box shadow so and later on we will apply the hover effect so once you hover over this box it will expand so and we will add some duration of transition so it has nice animation and the cursor pointer because eventually when you click on these boxes it will redirect to details page now let me apply this hover effect when we actually apply uh when we actually hover over these boxes so box shadow is going to expand and it's going to be it's going to move so transform translate y is going to be 3 pixels so it's going to jump a little bit up the next thing is we want to style our thumb container which is of our thumbnail or image background color is going to be black so this is for when we are missing the actual image the background color is going to be black position is going to be relative height 172 pixels color is going to be white and text is going to be align center so we will display there is no image once when when we actually don't have an image for our game and for the thumbnail itself we want to position it absolutely and to give top left and right zero position and we want to set margin zero auto so it's centered also for the height we want to have 172 pixels for description box we want slight padding so 20 pixels it's going to have display flex and flex direction is going to be column we want to justify content to flex end and height of 157 pixels for our name or title of our game we want color to be white and bold font size to be 22 pixels not nice and large for margin bottom we want to have 20 pixels white space is going to be no wrap so that you know you're not wrapping and we're applying ellipses of text which overflows so we have that three dots if the text is too long and it doesn't break the layout for our platforms on the bottom we want to have a display of flex so they are all aligned and for our platforms you want to have width of 20 pixels and to have slight margin on the right side so at this point we are done at coding html and csf on our code page so now we want to create our service which is which will actually fetch the url and the real data which will be fitting in to our home component so first thing which i want to do is i will create a services folder and inside of that services folder i will create http service file using the angular cli so i will type ng generate service and name for this service is going to be http and the angular cli is responsible for injecting our service into our application itself so we don't have to do that manually the thing which we want to do inside of our constructor in http service we want to inject the http client which will be dependency to communicate with our backend so the first method which i want to create is get game list so this is the method which i'm going to be calling from our home component and fetching the list of the games this method is going to receive two arguments ordering and search search is not going to be required both of these are going to be string and we are going to be re returning observable api response game this interfaces i'm going to be creating later on so first i'm going to create the parameters for our method and the default one is going to be ordering so in order which we want to sort the game list and if a user is providing a search if he's typing in anything into our search box we want to add append also the search parameter as well and the last thing we want to return the http get method which will be returning api response this interface and the game interface we'll be creating later the base url of our service is going to be created inside of the environment file and the route for this call is going to be games and we are setting the parameters of params now let's create that base url constant which we want to put inside of the environments folder inside of the environments file both in those inside of the prod and whatever the environment you have inside of your application and then we want to import that environment as an and it's a shorthand and to use that as our as sr url and now i want to import missing modules so observable from rxjs and http params and now let's create interfaces for our types api response and game so i will create new file which will be called models.ts and inside of that file i want to export interface game this is the main interface which we'll be using to define our data so this interface is going to have types of background image name released metacritic url website description metacritic genres this one is going to receive an array of genre we will create this interface later parent platforms also array of parent platform we will create this one as well later publishers array of publishers ratings again array of ratings screenshots it's going to receive the array of screenshots trailers it's going to receive array of trailer so this all these array interfaces i'm going to create later on the bottom the next one i want to create an export interface api response and t is a dynamic type so whatever type we pass into our api response it will return that as an array results of array of data type and now let's create the interface of jar it will just have a name now let's create interface of parent platform it will have a platform and a name property interface publishers is going to have a name property of type string interface of rating will have id account and title interface interface of screenshots will have image of type string and the last one is interface trailer this one is going to have data and max which is going to be a property of type string and now we created all the models we need for our application and which we are going to be using in this in this application now let's import them into our service so for api response and game now in order to consume our api it's not enough just to set the url which we need so it requires some of the parameters and some of the headers to be attached to our requests so uh in order to do that i'm not going to set up the parameters and the headers to every single request i'm going to do that on the application level so to do that i will use the interceptors so angular provides a way to do that on the application level like i said before the first thing which i want to do i will create a separate folder for these interceptors the folder name is called obviously interceptors and i'm going to create three interceptors for our use cases http errors.interceptors.ts file this one will be handling the errors obviously the http headers.interceptor.ts file this one will be attaching the headers which we want and the http dash params dot interceptor.ts file and this one is attaching the parameters to our requests so now inside of our http errors file i want to create an injectable service and i'm going to export the class of http errors interceptor this class is going to implement our http interceptor and we're going to have a constructor empty constructor for now and on all of these interceptor we need to implement intercept method from our http interceptor interface so this intercept method requires two arguments first one is htv request and the second one is http handler and it's going to be a returning observable of http event this is going to be type of any so we want to return of next which is a handler for our request with a method of handle and we're going to call a pipe which is going to catch an error so you want to do whatever you want in your application but in my application i'm going to log the error and i'm going to be returning the observable throw error so you can handle however it suits for your needs and now i will just import all the missing modules from our file and the quick import feature from the vs code is really useful for for this your purpose and the next interceptor which i want to implement is http headers interceptor all these interceptors are pretty much going to have like 90 the same uh code we are implementing http interceptor interface and this class is going to have a name http headers interceptor so we also have intercept method same as on the previous one but the body of the method is a little bit different so i want to clone the request and the set the headers in the headers i will set the two two headers first one is rapid api key and the second one is host and the key host uh instructions you will get on the public api documentation where you will register for free and get all the tokens which you need and i will put all the links of this public api into description of this video so that you can go and register and follow along with me as well and also we can set actually on this interceptor the params as well so that we don't need actually this http params interceptor anymore so we so i will remove actually that file and i will put the params inside of a key property in set headers and at the end i will just return next handle request which is the request we just created so it basically attached all these headers to the previous request which we cloned and it just emits the attached uh request with these headers and once again just import missing modules from you can use visual studio code quick import if you're using visual studio code but pretty much all the uh editors do have their import uh features and now when we are done creating our interceptors uh we're actually not done we need to insert them import them into our application so we need to go to app.module.ts file and inside of the providers array we are going to provide these interceptors so i'm going to create an object with the property of provide http interceptors use class http headers interceptor this is the interceptor we actually created and i'm going to set the property multi to true and i'm gonna provide exactly the same object for our http errors interceptor and i'm gonna import these interceptors using quick import feature of the visual studio code now as we finally created our http service and our interceptors we want to start utilizing our service and the data actual data which we want to get and the feeding into our page so let's head over to home component the component which will be loading first initially and i want to create a public property of games which will be a type of array of games this is the interface we created a couple steps before in the constructor i want to inject http service this is the service we created just a couple seconds ago and i want to inject activated route this is the angular service it is angular service we want in inside of the ngo init lifecycle hook this is the hook which runs the first when your component builds and we want to use the activated route params to subscribe to this event this event returns the params which is a type of params and basically we want to check in uh we will implement later when somebody searches our games to this query of search text to be attached to the url of our page so when we actually load the page we want to check first here is there any game search queries into our url if there is we want to call a search games method this is the method which we are going to create like in in next couple of minutes so for this method we we're going to send two parameters and the first parameter is going to be the sorting and this public api lets you choose couple of different options like date when it's updated when it's created and metagrid this is by the rating the rating methods and the second uh argument is game search this is the actual filtering so if there is a search query into our url we will call this method to be these parameters if there is no search queries into into our url we want to just call the search games with only sorting parameter and now let's create the search and games method which will actually call the api and fetch the these games this data so search games method we will have we'll have two two arguments like we said before first one is going to be sort and the second one is going to be search second one isn't necessary isn't required so the both of these is going to be string type and the return type of this method obviously is going to be void so it's not returning anything so we are going to call the http service and the get game list method this method is the only method we created into our http service and this method accepts two parameters first one is sort and the second one is search like we said we want to subscribe to this event and we are expecting back to get the game list which is going to be api response the interface we created before and the type is going to be the game and when we get that result we want to fit in this game list property results into our games and i'm just going to log this result so that we actually can see in our log what we actually got let's import all the missing modules the same way as we did it before and now finally if we go to our application into browser and if we open up the console we can see the log object and if you check our results array we can see the actual games which we finally got so the next step is to use these precious data and to fit that into our html and to make our page finally dynamic so that we get the games in our home page instead of this static content so let's do that and now inside of our html file of home component you actually can access the games variable which is now filled in with all the games which we retrieve from from our api so i'm going to create inside of the games div with a class of games i'm going to create ngcontainer and this container is going to be using ng4 to loop through all the games and display this play them basically i will assign the variable of game for each of these games so first i want to check uh if there is a game background image property so if there isn't we want to display a paragraph so i'm gonna assign ng if if he doesn't have a background image and i will just display text of no image but if there is a background image inside of our game i will use that as a source the next thing which i want to implement i i want to if there is a game name obviously every game should have a name so i will use game.name to to access the property of name from our game and then on the bottom we have a game platform so some of the games have multiple platforms like playstation android xbox a pc you name it so we are returning this information as an array so we want that once again when you use when you're using arrays you want to loop through these arrays and just display them as a separate item so we're using once again ng4 to loop through game parent platforms and i'm going to create a variable name game platform to access these items so i have downloaded from the web different icons for the platforms you can use whatever i mean style you want but and i have created a folder inside of the assets images platforms and put all of these uh platforms over there with the extension of svg so this is the reason why i'm using this url and i'm accessing the property of game platform dot platform dot slug to access this um this url this is on my local machine on my on my application and for the alt of the image i will just use platform.slog and now we can go and preview what we actually what we got now so if you open the browser we can see that finally we have multiple games so we have four games in a row and you can see this we have this nice images of the background we have the names the title names of the games and also the various platforms uh this looks interesting right yeah so the next thing which we want to do here so as you can see this sword doesn't work at the moment so this is the thing which we want to do we actually want when you choose some of the stored items we want to sort our games based on these sorting items so i mean a lot of things could be done here we could obviously improve like the loading we can add pagination we can add infinite scroll a lot of things can be done but this is like the basic thing how how would you add some of the data into your page how to make page dynamic and yeah and now let's make this sort select menu actually working yep so what we want to do is in our mat select we want to catch an event whenever our selection changes so match like has a default event for this and we want to call certain action upon it so obviously i want to catch that event and the name is selection change so when selection changes i want to call a function which is uh called search games this is the function we already defined inside of home component and this game this function we are calling on ngon init already passing some default uh values for sorting but now on every selection change we want to pass in the sort variable which is connected to our selection menu and it's defined inside of the home component it's a public sort type of string so every time the selection changes we will pass in the new value which is updated and our uh our games list is going to get updated as this is already connected and hooked up so we should see the changes right away so let's test this out and if we open our application now let's see what we have there so if we click on a sort and let's say just whatever let's say released and you can see that games has been already updated i mean instantly so let's choose something else added boom yeah so it gets updated right away and if we check the if we inspect our page and go to network tab and if you try to let just another one we can see that the request is sending with the parameters of ordering and the the thing which we actually selected so in this case it's created so yeah looks uh looks perfect and the final thing which i want to do on a home page so if you remember that i said uh that we want to click on one of these games and one once we click it means that we want to see more about the game and we want to see more details so what i want to do is i want to bind new event uh on our div game with the class of game so i will buy the click event and i will call a method which will be named open game details and this event we will just create in a second to this event we will pass in a game id so that we can open that game fetch the api and retrieve the more information about this game so now uh let we head over to home component yes file and that we created open game details so first thing which we want to do we want to uh reroute our application to that new page details page so we will need a router for that and i will inject inside of the constructor private router which is a type of router so i will use auto import from the visual studio code and now let's create the game let's create this opengamedetails method it's really simple method this method will receive an argument of type of string it will be ide will return return void so we are not returning anything so we will call this router which which we just injected and we will navigate to details page and send in id as a parameter so the url will be our localhost then slash details and then id of our game and that's pretty much it now it will give us error because we haven't created that game yet so we will do that in the next step but before we finish everything i want i want just to do a little bit of refactoring on our on our uh home component ds file so uh we have two uh subscribers which are left hanging so we don't we don't want that because we can avoid some uh memory leaks so i want to create two subscriptions to watch out to our subscribers so on top of our class uh create route sub subscription and game sub subscription and inside of ng united lifecycle i will sign routes up to this activated route param subscription and inside of our search game i will assign this game sub to this http service get games list to this subscriber so we are catching the subscribers in these two variables and we want to implement new uh on destroy lifecycle hook so i will implement that inside of our class insert there and now we want to create uh to implement engine destroy method which actually implements on destroy interface so we want to check if this game sub exists so if there is a subscription existing we want to unsubscribe this is when our page is closing so that there is no any memory leaks and we want to check exactly the same for route sub we are checking if there is any routes up uh subscription you want to unsubscribe and now i will just add on destroy interface into our class and import the missing modules for the subscription and the router and we're good to go to go and implement our details page let's start doing that first let me create a details page and inside of components folder i will use angular angular cli to generate new component so just type in command ng generate component details and once that is generated it's connected to our application inserted automatically and i want to go into approaching.modules file and there i will create a new route for our details component so that new path will be detailed slash uh column id so this is the id which we are going to get in the url which which we are sending from our home page and we are catching that idea of the game which we're which we'll be using for uh showing the details of our games so the path is detailed id which is going to be a number and then component is going to be details component and then we just need to import that component and now let me test this new route which we just created so open the browser again in our application and if we click on any of the games we should get the details new route and the id of this this game and you can see that detail works this is the html code of our new component so the route works perfectly we just need to start uh coding and put the details of our game in html code so let's start doing that on the very top i will create a deal with the class of details so we'll so this will be the main class of our page and then on the top we want to have a banner big banner with the image of our game so i will create another div with the class name a game banner so inside of this banner we'll have this image and the class of the image is game better image i will put some random image for now but later on we will make this dynamic and for dalt i'll put background image and this is for accessibility purpose and below that below the game banner we want to create new div with a class name of game content inside of this div we're going to display more information more details about this game that is the reason why user wants to actually navigate to this page so uh i will click i will create uh another with a class named details wrapper and inside of that tip i will create another one with the class uh game header so this is this is going to be a header of our content and below we will have uh tabs actually because it's going to be more um nicely laid out if we have the tabs on our page so inside of uh game header we want to have a title uh and i will create a h1 tag with a class name game header title and i will just put game name here for now uh below that we want to have a issue tag and the class will be game header release date so we'll have our release date here and below that we want to have a john of our game so class well i will create a paragraph of class uh game header genres and inside of that uh span but i will just put rpg for now this is also of course going to be a dynamic and then on the right side we want to display uh graphical dis the representation of our rating of our game so i'm using the plugin mvl gauge so i will create a div with the class name game gauge and inside of that i will put our extension so we will have a couple of properties here so i will put i mean i don't have to explain all of these properties but you can see we're setting the class the max of course this is the max rating uh start and end angle of our gauge then the value we're gonna put the game rating so this value is going to be a variable which we are going to define right away on our class details component so uh it's going to be zero it's going to start at zero and then when you fetch the data it's going to animate to the value which we which we retrieved from the api animated obviously we want that to be true then color uh we are gonna create a function gut color so color will be changing depending on the value which we're getting so inside of details component the ts file i'll create a new method named get color and this method is going to receive a value which is the type of a number so this is uh the value we're passing in from our widget and the return type is going to be a stirring so we are returning back the color which we just is going to be using to display the color on their bar so if the value is above the 75 so it means the rating is good and we want to return this color which represent the green color then else if the color is the value is lower than 75 but it's greater than 50 so we want in that case to return this is the orange color and if the value is less than 50 but greater than 30 we want to display this yellowish color and for everything else below the 30 we want to display the red color which means that game is bad so the rating is terrible and that's with our get color function and then we want to set the animation duration i will set two seconds so it's nice slow and uh it can catch the user's attention yeah and on the bottom uh of this uh of this uh widget we want to place uh anchor tag uh with the class name game gadget label and the target is going to be underscore blank so we want basically to put a link here to our rating where the rating has took to place on metacritic website and that is for our header of our content uh below that you will have uh tabs material tabs and we will store that in a separate component which we'll be generating uh just in a second but first let's first style what we got here and let me first preview what is our html how it looks like and then we can style all of that and continue with our tabs so we have this big image which will be our background image but it needs to be sized better and our title game title i mean is very simple we have release date we have darjean this is our plugin for rating so it's zero at the moment and yeah and this is metacritic link so uh this is how it looks like now let's style so inside of our details component uh i will create a details wrapper selector and uh this is a wrapper which i have created the same on our home page so max width is going to be 900 pixels and the margin 20 pixels auto so this is to center our content and to give slide separation on top and bottom so position is going to be relative as we are going to have a image floating and to be positioned absolutely so inside of our details div i want to start first our widget for the rating i'm i'm going to use ngdp selector angular selector for the elements inside of uh as a child components so this is the basic elements which are be generated i compiled at the runtime the width and the height is going to be 150 pixels and this space going to be blocked and slight padding to 10 pixels for the dial and this is a width of our stroke so it's going to be 10 and for the value i want to set dash right to be none and the stroke width to be 13. and then for our value text this is the text which at the moment shows zero so the color will be white weight is going to be bold and one side 24 pixels for our game garage dev position is going to be absolute we are going to position it top 50 pixels and on the right side zero and for our label which says metacritic font size is going to be 20 pixels color white position relative and at from the bottom 60 pixels now we want to style the game div and for the banner uh the height is going to be 442 pixels and overflow hidden for the image we want to be the full with and to blur a little bit so that the text is separated from the background for the content we want to center it and position relatively and to move a little bit on uh i mean 200 pixels on top because we want the text to be on the background on the banner so for the header title i'm going to set this huge font size and to set the color to be white also to be bold and to set the line height to be the same as the font size and i don't want it to wrap so white space no wrap for the release date also the color uh white and the font weight bold and for john is the same and that's what we're going to do for our top part and now we want to grab our data and to make this page dynamic so inside of our details component es file i want to create a couple of variables first so game id this is the id which which we are going to be retrieving from the route type is string uh the variable game this is the variable which is going to hold all the data of our game so the type is going to be a game this is the custom type which we created in inside of our models file and then two subscriptions for because we are going to have two subscribers on our page so route sub subscription and game sub subscription now we want to inject a couple of dependencies inside of our constructor so the first one is activated route uh it's going to be private of course and the type is activated route so this dependency basically uh provides you with the api of the route once it's activated and the private http service this is the service uh custom service which should be created to communicate with our api so now we want to create uh inside of ngo and in it basically we want to we can assign our subscription to our route sub and we can call this activated route params subscribe so we are subscribing to our params and we are getting back the params which is a type of params so we want to assign to our game id what is sent to our parameters through our details slash id url so we are assigning this game id equals params id and then we will use this id to pass into our uh our method which we are which we are cr we are going to create in a couple of seconds this game details and we are passing uh this game id so let's define this method get game detail so it's going to receive id which is type of string and we're not going to return here anything it's type of void so here we're going to have another subscription so we are assigning this game sub to our subscription so that we can later on clear all these subscriptions once the details page is closed so we are going to call the http service and this method doesn't exist yet but we are going to create that one in a second get game details and we are going to pass in this parameter id which we're getting from the route uh we're gonna subscribe to that and from the response we should get a game the actual game which we want yay and we will just pass in to our game a game response and actually we want to update our game rating if you remember that we have that widget for uh displaying animated rating of our game so i want to set a timeout set that the user has some time to load the page and to sit a little bit delayed so i will set a timeout and i will assign this game rating to this game metacritic so this rating after one second yeah and now i will just import all the missing modules uh from our file using quick import feature of the visual studio code and now we want to define this game details method inside of our service because we don't have that created yet so let us head over to http service ds file and inside of this file let me create this method so the name is game details get game details the parameter which is reserving is the retrieving is the id of our game so id is type of string and we're returning observable of type game so we will have uh three requests here because actually we are combining uh all all the information from these three requests into single one so we will define three constant game in for request and the url of this get request is our base url slash game slash id so this here we will get the majority of information then we want to trailer so we will display video trailers on our page so this request is for that so constant game trailers request equals http get method and the url is space url games slash id slash movies and the next one is we want to display some screenshots of our game so the next one is this http get base url slash game slash id slash screenshots and now we want to use a fork join to retrieve all of these uh get methods and combine them into one so i'm passing gaming info game screenshots again trail game trailers request and i'm using pipe to map this response um so i'm returning one object and i'm gonna use uh the old information uh i'm gonna use spread operator to use all the properties from our gaming for request and i'm going to create two additional properties screenshots and trailers to fade in the results of the additional two requests which we are getting so we'll get everything but we need inside of this get request and the last thing of course is to import all the missing modules again and now we can head over to details component html file and inside of the source of the image we will change this to be game background image so we're going to implement now our data for our title we're going to set the game dot name property for a name then for the release date i'm going to use game.released and here i'm using datepipe to to format our output format of our date so this is a pipe which formats uh the html for our needs or strings now for genres as we can have more of these i will use ng4 to loop through the array which we're retrieving and i will set the last uh index so we will need last index in order to uh display the commas so for for name i will use genre names name and then i will use ng if to see if the last only for the last you you don't want to display comma obviously so for all the others we want to display comma then i want to the last thing is for our label we want to set the url of the review where it has been order rating so i will set the game metacritic url and now as you can see this rating bar is animating nicely and we have attached the metacritic urls here so if you click on it it actually gets us to their site and you can see the breakdown of this rating and get more information about how they got to this rating uh the name obviously game name has been cooked up in the release date so we're using date pipe here to you know format this but you can use whatever format you want as long as you're you're using a date pipe and at the bottom we have the genres so as you can see the comma is not in the last place so the next thing which we want to do is we want to build the bottom part of this page and provide more information so i will be using uh single material tabs for this element so let's call that but before we actually hold this we want to do a little bit of prefactoring on our details component page so i want to clean up all the subscriptions once the component is destroyed again the same thing which we did on the home component so i'm gonna implement on and destroy and destroy uh lifecycle hook and uh i will create ng on destroy method to implement that the return type is void obviously and i'm just going to check if there is a game sub and if there is i'm going to unsubscribe and the same thing for the route sub and then i'm just going to import on destroy uh interface and that's done now let's let me create using angular cli or tabs component and inside of the terminal i want to open our directory source app component and i will type in ng generate component game tabs and once that is generated i just want to head over to our details component html page and on the very bottom i want to include this app game type tabs so let me preview is that hookup correctly and as you can see it is so now we want to head over to our newly created app game tabs uh component and want to start coding uh all the details we want to display on this we're gonna have three tabs so you will see in a bit so on very top of our game tabs dot component.html file i'm creating uh div with the class name game tabs so this is our main wrapper then i'm creating mat tab group this is the group of our tabs using angular material metal line tabs is going to be start and the background color is primary so the color is going to be the color you choose for a theme when you install them in your material uh first tab which i'm going to create is a mat tab labeled about so we're going to have about screenshots and trailer section so in our about section uh on very top i will create a paragraph game tab spare and the label is going to be platforms and here we're going to list all the platforms of our game so for now i'm going to put the pc underneath uh i'm going to create another paragraph game tabs pair with the label of publishers and here we're going to display obviously publishers so i will put konami underneath i want to create another paragraph game types power so all the classes are going to be the same for these paragraphs the label for this one is going to be a website so we want to link a website to a game if there is any inside of a paragraph i will put a link anchor link with the class name games apps link href is going to be a pound now and target underscore blank so we open that in a new browser in a new tab and uh i'm gonna leave that without a link for now then we want to put some a description of the game so i will put another div with a class game description and put some random text and below that i will create new paragraph with a claim a video class game to have votes so we want to have a voice of our game every game has a votes in a rating so i will create two icons uh with the game with thumbs up and thumbs down so i will use uh two spans so span and then i will use matte icon which we included with the angle material class name for this one will be games game votes up and uh icon text is thumb up and uh we want to display the count of the thumbs up so span uh will be class name game votes count and here i'll just put some random numbers so same thing we want for the games thumbs down uh but the class name will be game votes down and obviously the icon will be thumb down so this is a font icon and you just put in the text and you get the icon so this is the icon for the thumb down and i think that's all what we want to hear for about label about tab so let me preview what we got okay uh that looks ugly for now but we will start in a bit so for the second tab uh it's going to be a screenshot this one is going to be very very simple so we're just going to have an image and the image is going to have a class name of game screenshot so we'll have multiple screenshots but for now it's going to be just this one for source i will put a link from the web and i'll i'm just going to put a screenshot and the last tab is uh trailers tab and as you can see uh here we're going to display some game trailers and so i will create a video html tag with a clay stamp class name of game trailer and i'll put controls as well so the user can navigate uh source is gonna be just random video right now but we're gonna implement that later on type is going to be video mp4 and we're just going to display text your browser doesn't support video tag if you're using some older browsers and finally let me preview what we created so as you can see we have tabs and we just need to style it a little bit better and apply some styles to screenshots and trailers as well so let's do that inside of the game tabs components scss file so i'll create a main game selector on top and all the styles are going to be inside of this selector so uh dash tabs for the game tabs selector we want to set the background then we want to set the color to be white to align all the text on the left side and give some slight padding for all the paragraphs we want to so game types power we want to get some uh padding and to get the margin bottom to be zero so that we don't have any separation on the bottom for the links we want to set only color to be white so as our background is dark we want all the colors to be all the text colors to be white so for the votes i will give some margin on the left side and display flex so they're all aligned and for the count i will give a slight margin on the left side so it's 5 pixels and for the labels i want just to center centrify them so justify content center for our votes i will put the colors obviously for what's up i will put this green color and for the votes down the color is going to be this red one and for the counts uh we want just to keep a slight separation on the left on the right side on the right side is going to be 10 pixels because i want to separate both down and votes up a little bit and to align them a vertical line is going to be super so they're like in the middle for text description i'm just going to set this padding to be 20 pixels and that's it then for screenshots uh i want to give a little bit margin on top so it's uh five pixels then for the width i want to give it uh 50 minus 10px because we want to display two screenshots in a row so this is why the width is 50 pixels minus 10 pixels is going to be uh our margin so on every even child and child even we want to set the margin left to be 10 pixels so that we only have the separation in the middle and for our trailers we want to have a width 100 so the full width and to give it just slight margin on top and the bottom and with that i'm happy with the results what we have for now so the next thing which i want to do is i want to connect the data to your html page to to our html code so we actually have fetched already our uh all the information which we are going to be uh displaying here and the information is inside of our details component inside of the game variable so what we want to do inside of this child component this game tabs component inside of our ts file we want to create a new input so this is the input property which will be receiving uh the information so input is going to have a name of game and type of game so this is the game interface which we created before so i'm going to import that and then inside of our details component inside of the html5 file we want to add a property input game and to pass in our game so this is the way how to share the data between the parent and child components so we're just setting up the input and we're passing in our game so at this point we have all the available information inside of our game tabs and now we just want to go and to hook up that inside of our html file so let's do that so first thing which i want to do is on our game platforms i want to check if there is any platforms at all so that we don't display this platform's label if there isn't so i'm setting up ng if game platforms dot length so if it exits if the length is more than a zero so if it is i'm gonna use uh ng4 for looping to right through our array of platforms i'll let game of game parent platform so i'm using i'm setting up this game variable half our platforms and i'm just going to use the lat uh last so that we detect which one is lacks last so that we don't display the comma on the last item so i will just put in the game platform the name so the name of our platform and uh after that i will just set ng if if it's not the last element set the comma if it's last element don't display this comma into our array so similar similar thing i want to do for publishers as well so we'll check if there is any publishers if there is the length grade of zero if there is i want to loop through our game publishers array and i will set the variable uh let publishers again i'm gonna use the last index and i will from publishers as well i'm just using name so again i'm checking if it's not the last element display the comma if it is don't display this comma then for our game website again i will check if there is a game website website property if it's not so that we don't display this website a label i will put inside of href game website which is the link of the website and i will display exactly the same text so i will put inside of the brackets game website so it will display the link the url inside of the text for the for the game description i will use the inner html input and i will just pass in the game description so we'll so this will just put in the raw text now for the ratings the ratings uh i will as we are also getting the the array return type so i will loop using the ng4 because we can have multiple ratings usually it's just it's just a one but we can have multiple them so i will assign the variable rating from game dot ratings array and i will check we get uh multiple ratings and i will just display the two ones so the first one is exceptional so i'm checking ng if if the rating title is equal to exceptional so this is like the top we will display our thumbs up and we want to use the variable account so from rating dot count if there is no count you want just to display zero and then afford our thumbs down i want to use the rating skip so basically if user has rated game as a skip uh we want to display the thumbs down so rating title is equal to skip and again we're using rating count for this rating as well and if it's not i'm gonna just set up the zero then i want to check if there is screenshots at all so ng if game screenshots length if it's greater than zero we want to display tabs sometimes we don't have screenshots so we don't want to display this tab at all and if we have a screenshot we want to loop through the array of screenshots and display the image so i will use ng for last screenshot of game screenshots so in the screenshot i will just use the image for our source and that will loop and display all the source images this can be optimized i mean sometimes to display just uh above the fold of the page so it's uh so it doesn't load all images before it's seen but we will leave it like this for now and the last tab is our trailers and the same thing as a four screenshots i will check if there is uh any trailers because uh trailers as well are not displayed for every game so ng if game trailers length is greater than zero obviously so we'll we want to loop through the game trailers array i will set the variable that trailer and just going to loop and then just in the source uh input i will put trailer data max which is actually the max resolution we want to display the trailers of the max resolution that is the property they used and now let your preview that is the all the data which will be hooking up in our games component so let me review what we actually got and now if you refresh our page you can see that uh on the about section the platforms are now hooked up array and as you can see the commas are just for the elements which are not the last so the platforms are displayed correctly publishers rockstar games so this looks good for the website it's hooked up to their website and you can click them it redirects you to a new tab so this is this looks awesome and uh below that we have the description and as you can see the ratings yes look i mean they look okay to me there is a lot of thumbs up so this is very very popular game so if you look on the screenshots tab that is nice we have uh loaded these screenshots so it gets you in a row this nice american circulation and for the last one with the trailers uh actually for this game we have multiple trailers so let me see yeah i'm not gonna play them longer but as you can see it looks correct so this basically wraps up our application so we have we have built everything from scratch so just to sum up we have this homepage which loads our games uh by default on metagrader ratings so and we can build this search on top so if you type in some game let's say soccer july soccer you can get the preview of the games also except sorting so it's probably quite released or any other uh criteria so that looks nice also if you want to check more about the game itself you can click any of the games and we load up the details game and you can see as well and uh for this game you can see now there is no trailer so it doesn't display through the last tab but it displays screenshots clicking in about section as well so that's it you
