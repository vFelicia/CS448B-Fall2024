With timestamps:

00:00 - hey coders i'm cody seifert and welcome
00:02 - to another tutorial where i'm going to
00:03 - show you how to build a tree browser
00:05 - using view js
00:08 - so basically on the right this is what
00:09 - we're going to be building it's a very
00:11 - simple
00:12 - component which if given a tree like
00:14 - data structure it's going to render out
00:17 - different divs that you can expand and
00:19 - collapse to view the file system or
00:21 - whatnot
00:23 - and we're using a an external module to
00:25 - kind of color the files based on the
00:27 - file extension we're doing some cool
00:29 - little stuff inside the component um and
00:31 - then lastly if you click on one of these
00:32 - files it's going to invoke a callback
00:34 - where we simply just display an alert
00:36 - but if you think abstractly you could do
00:38 - whatever you want such as render
00:40 - something over on the right hand side
00:42 - maybe even show the file contents after
00:43 - you click on one of these files so this
00:45 - is what we're going to build let's just
00:46 - go ahead and start building it so i went
00:48 - ahead and just started up a project
00:50 - using the vue cli version 3. so over
00:53 - here on the left you can see the the
00:54 - bare bones project is ready to go on the
00:56 - right we have it running if we wanted to
00:58 - get started with this component though
01:00 - let's go ahead and create a new file
01:02 - called tree browser
01:05 - dot view i'm going to go ahead and just
01:07 - scaffold out a new view file here
01:11 - and of course we need to go in the
01:12 - app.view and include that so let's go
01:15 - ahead and just
01:16 - bring in tree browser
01:19 - wherever we
01:20 - plan to use it
01:23 - i'll get rid of this image here
01:25 - save this file
01:27 - and just to verify that this is working
01:29 - let's just go ahead and display some
01:30 - text so i'm going to say h1
01:32 - hello and write that out
01:35 - cool so at this point we should be good
01:37 - to go to start developing our tree
01:39 - browser component
01:40 - [Music]
01:41 - the first thing i want to start with is
01:42 - let's look at how some
01:44 - json data may be represented
01:47 - to represent a tree structure like a
01:50 - file system right
01:52 - and we're going to define a json object
01:54 - and pass that down into our tree browser
01:57 - as a property so let's first inside our
01:59 - app component let's define a data
02:01 - function
02:02 - and let's return an object which has a
02:05 - root object on top of that or it has a
02:07 - root property
02:09 - and inside this root property
02:12 - basically a root is going to be a node
02:15 - which has children so if you know much
02:17 - about like graph theory or if you've
02:18 - done like computer science data
02:20 - structures and stuff we're basically
02:21 - just going to represent
02:23 - a tree using nodes that have children
02:27 - so in this case our root is going to
02:28 - have a name so in this case we'll do a
02:30 - slash
02:31 - and then our node will have children
02:33 - attached to it which is going to be an
02:34 - array and then inside that array we can
02:36 - have multiple other nodes so our first
02:38 - node could be let's say music
02:42 - and then of course that could have
02:43 - children
02:44 - keep doing a capital m and then that
02:47 - child node could be i don't know name of
02:50 - song.mp3 or something like that
02:53 - so that's one folder that could exist in
02:55 - our root directory
02:57 - if we wanted to make another child we
02:59 - could do name and we could say this is
03:01 - workspace
03:03 - that has children and inside our
03:04 - workspace
03:06 - we have multiple nodes and let's just
03:08 - say we have one called
03:10 - source.js
03:14 - so that's kind of the representation of
03:16 - what a file system looks like using
03:18 - javascript objects
03:20 - again we have a node which has a name
03:22 - and then inside that we have children
03:23 - which has nodes and names and nodes and
03:24 - names etc etc and that will go down to
03:27 - however deep your file system is
03:31 - so using that
03:33 - root data property let's go ahead and
03:35 - try to pass it into tree browser so the
03:37 - first thing i want to do
03:39 - is i'm going to go into tree browser i'm
03:40 - going to define a props object
03:44 - and again you could do a props array so
03:45 - i could do
03:46 - props as array of node
03:48 - in this case we're going to actually
03:49 - define some defaults for props in the
03:51 - future so i'm going to do a props object
03:54 - which is going to have node which is an
03:55 - object type
03:58 - and once you define this props property
04:00 - on your view component here
04:03 - you can use it so for example in our
04:06 - app.view i could simply just go over
04:08 - here i could bind node to my root
04:11 - property in my inside my data function
04:16 - and now inside of my tree browser i
04:18 - could simply do node.name
04:20 - to render out that first
04:22 - slash that we had to find
04:24 - in our root so hopefully that wasn't too
04:27 - confusing we have a good understanding
04:28 - of what the data structure is
04:30 - now we need to understand how to
04:31 - traverse it to display
04:34 - a file system so going back to our tree
04:36 - browser
04:37 - the first thing we kind of want to do
04:40 - is of course we're gonna have to wrap
04:41 - this in a div because view requires only
04:44 - one
04:45 - component which is exported in your
04:47 - template so i'm gonna wrap that in a div
04:48 - and just print out the name here
04:50 - and i'm gonna go ahead and split this
04:51 - out into two different sections so the
04:53 - first section is gonna be a div
04:55 - called node
04:56 - and that's where we're going to have
04:57 - like the
04:58 - the icons for if it was expanded or not
05:01 - and the name of the node etc
05:04 - so i'll put go ahead and put the h1 in
05:05 - that and then of course down here what
05:07 - we're going to do is we're going to call
05:08 - tree browser again and i'll i'll do this
05:10 - in one second in fact i'll just i'll
05:11 - just go ahead and do this now so
05:14 - if we take a step back and look at what
05:16 - we're trying to build it's a component
05:19 - which recursively renders itself
05:21 - multiple times
05:23 - so in order to recursively call yourself
05:25 - we can just say tree browser again
05:29 - but we need to make sure that we define
05:30 - a name over here on our component or
05:32 - else you're not you're not able to
05:33 - actually
05:34 - recursively render yourself it won't
05:36 - know what tree browser is let's take a
05:38 - step back and think about what we need
05:39 - to do so we already rendered out our
05:42 - name node
05:44 - but remember we have this
05:45 - children property which is an array that
05:47 - we need to loop over
05:50 - so inside view what we could do
05:52 - is just add a v4 on side that tree
05:54 - browser component and i'll say for
05:56 - node and node.children
06:00 - actually i'll name this um child not
06:02 - node
06:03 - and of course if you're doing a v4 in
06:05 - view you need to make sure you bind a
06:07 - key so for now i'll just do child.name
06:11 - um
06:13 - and that is basically going to loop over
06:15 - all the children of the node and create
06:18 - a new tree browser object and render out
06:20 - the name so the last step is we're
06:22 - looping over all the children and
06:23 - rendering a new trick browser component
06:26 - but remember we require a node property
06:28 - so over here i'm going to bind node
06:31 - equal to the child i'm going to go ahead
06:33 - and save that and notice here on the
06:35 - right
06:36 - it renders out all of our nodes
06:40 - and one thing to notice is that the
06:42 - indentation isn't really useful we can't
06:45 - tell like what is nested under other
06:47 - things so i'm going to go back to my
06:49 - style over here and just make it scoped
06:51 - and this will make sure that all the css
06:53 - inside the style is only scoped to this
06:54 - component that we're looking at
06:56 - and for node i'm going to say text align
06:59 - left
07:01 - and we're going to start working on some
07:02 - logic to be able to
07:04 - simply indent based on the level that
07:07 - we're at
07:08 - so notice we have everything along the
07:10 - left
07:11 - how do you think we could indent based
07:13 - on the depth right so if we're at the
07:16 - root level we don't want to add anything
07:18 - to the left but as we start going down
07:21 - the depth of the recursive calls we need
07:23 - to kind of indent
07:26 - so what we could do is as a property
07:29 - let's define yet another one called
07:30 - depth that's going to be a type of
07:32 - number
07:34 - and then we're going to default that to
07:36 - 0 for now
07:39 - and basically as we call tree browser
07:42 - we just want to
07:44 - pass depth of depth plus
07:47 - one
07:49 - so if we're on this first entry we're
07:52 - gonna be depth of zero music will be
07:54 - depth of one song will be depth of two
07:57 - workspace would be depth one and sources
07:59 - will be
08:00 - depth of two
08:02 - so now that we have the depth in
08:04 - incrementing by one every time we
08:06 - traverse down the recursive call stack
08:09 - how do we actually indent well we just
08:11 - have to use css right and in view we
08:14 - could simply just go over here and do a
08:16 - dynamic style binding so i'll say bind
08:18 - style is equal to an object
08:20 - and this is going to have a margin left
08:23 - of
08:24 - um
08:27 - the depth
08:28 - times some amount
08:30 - and i'm just going to go ahead and add
08:31 - pixel to it
08:33 - in fact if you want to be proper let's
08:34 - just go ahead and do string
08:35 - interpolation here
08:37 - like so
08:40 - so if i save this notice that now the
08:43 - entries or nodes are indented correctly
08:46 - based on the depth that we're at
08:49 - in fact i think the text is a little bit
08:52 - big so let me just make the font size
08:53 - like 18 pixels instead
08:55 - and i'm going to
09:03 - still seems kind of big let me look at
09:04 - it oh cause we're using h1 so instead of
09:06 - using h1 let's just go ahead and just
09:08 - get rid of that for now
09:10 - and we'll fix it up to make it a little
09:12 - bit better in the future
09:13 - okay so now we're making some progress
09:17 - now we need to move on to kind of the
09:19 - next step
09:22 - which is the ability to expand and
09:24 - collapse
09:25 - these different nodes depending on if
09:27 - they're clicked or none
09:28 - so of course let's go and add a new data
09:31 - property to keep track of if we've
09:33 - clicked the node and if it's expanded or
09:35 - not so if i go to data and return
09:37 - expanded is false
09:40 - we now have a property which is attached
09:42 - to the root level of all these different
09:44 - nodes
09:45 - and then we could just simply hide or
09:46 - show
09:47 - the children based on if that's true or
09:49 - not
09:51 - so over here i'm going to say v if
09:53 - expanded
09:54 - say that and notice that now we only see
09:56 - this slash
09:58 - and again vf is just a keyword in view
10:00 - where you can use it to hide or show dom
10:02 - elements based on a boolean value
10:05 - so the next step is how do we actually
10:07 - see or expand this view to see the
10:09 - children
10:10 - what we could do for right now
10:12 - is just add a click callback so say
10:14 - click and then we want to simply set
10:16 - expanded is equal to the opposite or
10:20 - negate of expanded that's basically
10:21 - going to toggle based on us clicking on
10:23 - stuff so
10:25 - just to show if i were to click on this
10:26 - now
10:27 - notice that it's toggling our different
10:30 - things
10:31 - but unfortunately it's hard to tell if
10:32 - something has been expanded or not so
10:34 - let's go ahead and add some icons to the
10:36 - node so we can tell if it's been
10:38 - expanded or not so let's add a span
10:41 - and i'm going to add the class of type
10:44 - and basically what i want to do
10:46 - is just display either the carrot to the
10:49 - downward position or carrot to the right
10:51 - depending on if we're expanded or not so
10:53 - in here i can do string interpolation
10:56 - and say expanded question mark and
10:58 - that's a ternary operator if you're not
10:59 - familiar with you know
11:01 - javascript's ternary operators so if
11:03 - expanded is true
11:05 - we simply want to display
11:07 - the string
11:10 - or the symbol 9660
11:13 - and then otherwise
11:16 - we want to display
11:20 - 9658 and 658
11:23 - and go ahead and save this and end the
11:25 - interpolation
11:30 - cool so now we have an actual
11:33 - icon
11:34 - which changes based on if we've clicked
11:36 - it or not
11:41 - and now that we've done that we notice
11:42 - that there's a bug right there's a
11:44 - there's a the icon is being rendered
11:46 - here for nodes that don't have any
11:48 - children so let's try to prevent that
11:50 - from happening so down here in our
11:52 - component i'm going to add a computed
11:55 - object
11:56 - and inside here we can add a has
11:59 - children property
12:01 - and that's just going to return
12:03 - this.node.children
12:05 - so if this is defined we have children
12:08 - if it's not we don't have children
12:11 - and what we can do is only display this
12:13 - stuff
12:14 - if we have children
12:17 - so here i'm going to do a v if
12:19 - we have children
12:21 - or has children
12:24 - and now when i save this i should be
12:26 - able to go down and the icon is hidden
12:29 - if we don't have any children
12:31 - the last thing i want to do is i want to
12:32 - add a little icon next to song
12:34 - for like just to kind of further
12:36 - indicate that it's not a folder it's
12:38 - more of a file
12:40 - so over here i'm going to add yet
12:41 - another span and i'm going to add a
12:44 - a symbol which is going to be a circle
12:45 - here and i want to display it if we
12:48 - don't have children so i'm going to just
12:50 - do v else here so basically now if we
12:53 - don't have any children it's going to
12:54 - show this little triangle icon
12:56 - so that's all cool and all but how do we
12:58 - actually
12:59 - figure out if we've interacted
13:01 - with clicking on one of these songs
13:03 - so what we could do is we could add a
13:05 - click callback here
13:08 - to the node
13:11 - and instead of doing expanded is equal
13:12 - to not equals expanded i could say node
13:14 - clicked
13:17 - of course pass that the node actually in
13:20 - fact i don't need to pass that anything
13:22 - um
13:25 - and then down here we can add yet
13:26 - another opera a property called methods
13:31 - and that's going to have a method name
13:33 - called node clicked
13:35 - which we're going to do that same logic
13:36 - so this dot expanded
13:39 - is equal to not expanded
13:41 - and let's save and just test that out to
13:43 - make sure we didn't break anything
13:45 - but also what we want to do
13:48 - is we want to check if the child has
13:51 - children we want to go ahead and just
13:52 - emit a
13:54 - event so that our app.view can kind of
13:57 - do something depending on what you
13:58 - clicked
14:00 - so over here i'm just going to say if
14:02 - this dot has children
14:06 - i'm going to simply
14:07 - this dot emit
14:10 - on click
14:11 - and i'm going to send back the node that
14:13 - was clicked so this dot node actually in
14:16 - fact we don't we want to do this when we
14:18 - don't have children so only when we
14:19 - click files
14:21 - so sorry about that just add a little
14:23 - negation there and we won't we wanted to
14:24 - check if we don't have children
14:27 - so this is another cool thing that is
14:28 - attached to view components the money
14:30 - sign emit and basically this is going to
14:32 - emit
14:34 - an event called on click and it's going
14:35 - to pass this as the data and it's going
14:37 - to bubble that up to any of the
14:38 - components that are listening so inside
14:40 - app.view
14:41 - which is our parent component which is
14:43 - kind of listening we could simply just
14:45 - do at on click
14:47 - and we could say i'll call some random
14:49 - functions so node
14:51 - was clicked
14:53 - and of course down here we could just
14:55 - say
14:56 - close my data and i'll say this is going
14:57 - to have a methods
14:59 - property and inside the methods we're
15:01 - going to say node was clicked
15:04 - and that's going to take a node
15:05 - as a parameter and we're going to simply
15:07 - just do alert node.name just to print
15:10 - out the name of what was clicked
15:14 - and don't forget hit your comma there so
15:16 - at this point let's go ahead and test it
15:18 - out and see if
15:19 - we're doing okay so we are getting a
15:21 - little error called this dot has
15:22 - children is
15:24 - not a function
15:25 - and because computed properties are not
15:27 - actually functions they're just booleans
15:28 - or they're just variables that you can
15:30 - use so instead i'll just go ahead and
15:31 - backspace those that function call
15:34 - i'll save that
15:36 - and make sure there's no errors in the
15:37 - console anymore so now when i click
15:39 - song.mp3
15:42 - it should be saying
15:44 - this dynamite on click and sending out
15:46 - the node
15:49 - and then over here we're listening to it
15:51 - and calling node was clicked
15:54 - but for some reason it's not actually
15:55 - doing anything so let's go ahead and
15:58 - just log out we are clicked
16:01 - and save it here to see what's going on
16:08 - so that's not being called so i'm
16:09 - assuming that there's an issue here so
16:11 - over here i can say
16:13 - console.log we are here
16:24 - okay so we are indeed getting to this
16:26 - point
16:27 - and we are emitting a on click
16:30 - event
16:31 - um and the issue is is that remember
16:33 - we're doing recursive
16:34 - calls so
16:36 - here if we want to bubble that up all
16:38 - the way to app.view we need to remember
16:40 - to listen to the click call back here so
16:42 - i can say at on click and i'm going to
16:45 - simply just do
16:47 - omit
16:49 - i'm going to say on click
16:52 - and then i could pass the node that was
16:53 - clicked
16:55 - in fact i think i need to do something
16:57 - like this
16:59 - node okay
17:02 - so give it a callback function which is
17:04 - going to take the node that was clicked
17:05 - and just simply propagate it up and
17:07 - there may be a different way to do this
17:09 - in view if anyone has a suggestion as to
17:11 - a better way to actually do this or i
17:13 - just want to propagate propagate
17:15 - that event up
17:17 - the tree and not worry about having to
17:19 - declare an on click and doing that
17:21 - um let me know but for now i think this
17:24 - should work so let's go back and try to
17:25 - expand and click on song
17:27 - and
17:28 - and this cannot read property emit of
17:30 - undefined
17:33 - and that is because we don't need to use
17:35 - this here
17:36 - let me just go ahead and remove that and
17:37 - see if we can actually get this to work
17:40 - there we go
17:42 - so sorry about that you got a little
17:44 - debugging session didn't mean to um take
17:46 - that long
17:47 - but as a recap what was wrong was
17:50 - we are recursively creating these tree
17:52 - browsers so when we click on song it's
17:54 - going to propagate up to tree browser so
17:56 - we need to make sure we're listening to
17:58 - that on click event and just simply
18:00 - propagate it up until we finally hit the
18:03 - parents on click callback
18:06 - which is going to be this
18:10 - so again we'd add this because like
18:11 - let's say you want to change some other
18:13 - view depending on what the person
18:14 - clicked and the tree browser component
18:16 - shouldn't really be responsible for
18:19 - knowing how to interact with that or i
18:21 - mean a different way is you could
18:22 - probably just pass in a callback
18:24 - function here and call it when we click
18:26 - on a node but i think this way is a
18:27 - little bit more cleaner to actually emit
18:29 - an event and then do something when it
18:31 - happens
18:32 - all right so now that we've made this
18:33 - progress let's just go ahead and add
18:36 - a i went ahead and just
18:38 - generated a json object which has more
18:40 - realistic data so inside our source
18:42 - folder i'm going to add a root.json file
18:46 - and i'm just going to go ahead and copy
18:47 - some json that i already created
18:49 - by traversing my file system basically i
18:51 - just took like one of my projects and it
18:53 - traversed the node modules folder and
18:55 - all this other stuff so if i save this
18:58 - we should have a better
19:00 - example piece of data to play around
19:01 - with
19:03 - so going back to app.view we could
19:05 - simply import that some say import root
19:08 - from
19:09 - dot slash root.json and that's going to
19:11 - import that json
19:14 - object
19:15 - and then instead of using it here or
19:17 - instead of defining this here i could
19:18 - just simply delete what we got
19:22 - and save that
19:23 - so now when we refresh the page notice
19:25 - that we have
19:26 - a
19:27 - much much larger file system example
19:29 - with a lot more files so now i think
19:32 - most the functionality is basically done
19:36 - we could probably just spend a little
19:37 - bit more time
19:39 - changing up the styles and centering
19:41 - this and stuff to make it look like i
19:43 - did before so if i go back to app.view
19:46 - let's just add a title here i'll call
19:48 - this h1
19:50 - tree browser or view tree browser
19:56 - i'll go ahead and save that
19:58 - okay so let's see if we can maybe style
20:00 - this a little bit more so i'm gonna do
20:03 - body background color
20:06 - i'm just gonna do a little bit of a gray
20:09 - and then i'm gonna add color as white
20:11 - for now
20:12 - should be setting this to white let me
20:13 - refresh
20:16 - uh i think it's oh that's why
20:20 - okay
20:22 - now we actually have a little bit
20:24 - nicer looking um
20:26 - sample application
20:28 - so as a little bonus um what i'm gonna
20:30 - do is i want to import a
20:32 - function which is going to take in a
20:35 - string
20:36 - and give us back a color hash
20:39 - basically i can set
20:41 - different string values depending on our
20:43 - different color values depending on what
20:44 - the extension is the javascript files
20:47 - may be red json objects may be like blue
20:49 - or something
20:51 - so in order to do that let's go ahead
20:52 - and go back to our terminal here
20:54 - i'll do an npm install and save there's
20:57 - a package called color hash
21:00 - which kind of gives us the opportunity
21:01 - to do something like that
21:03 - and while that's installing let's go
21:05 - back to tree browser and let's simply
21:06 - import that here so i can say import
21:08 - star as
21:10 - color hash
21:13 - from color hash
21:16 - and then once we've imported that we can
21:18 - say cons color hash is equal to new
21:20 - color hash
21:23 - and kind of ignore what's going on over
21:24 - here we're installing a node package so
21:27 - it's going to keep on refreshing until
21:28 - it's done
21:29 - but what we want to do is basically
21:31 - figure out the extension of the name
21:36 - if we're at a
21:38 - node that has like you know no children
21:42 - and what we want to do is change the
21:44 - style dynamically based on that
21:47 - hash
21:48 - so up here where we're rendering out the
21:50 - name here what i can do
21:54 - is simply wrap that in a span
22:00 - and i'm going to say
22:02 - bind that to style
22:05 - and it's going to call a
22:07 - it style for the node
22:10 - dot name
22:12 - actually i'll just do dot node
22:17 - and then down here we of course need to
22:19 - define a method right so over here i'm
22:21 - going to say
22:23 - get style i'm going to take a node
22:27 - and what we need to do
22:29 - is we need to first take the node if it
22:31 - has children so if no dot children
22:35 - then we need to return some style so i'm
22:36 - going to say return an object that has
22:38 - color of some hexadecimal so i'll just
22:41 - say like
22:42 - red for now
22:46 - and let's see what this does if we were
22:47 - to save this
22:49 - i'm going to try reinstalling my node
22:50 - modules i'm not sure what happened but
22:52 - uh something might have broken when i
22:55 - was doing my setup for this video so
22:57 - let's just reinstall everything and see
22:58 - what happens alright so now that that is
23:00 - done reinstalling let's try to set up
23:02 - our rerun our serve command
23:04 - and let's refresh this page
23:07 - cool
23:08 - so if you notice here if we have
23:10 - children it's going to be red
23:14 - so pretty much we can customize what we
23:17 - want our folder colors to be
23:20 - also one thing i'll notice is that the
23:22 - icon is really really close to the name
23:24 - so over here
23:26 - i'm going to just add a margin right of
23:29 - 10 pixels to these icons
23:31 - i don't know if i've actually added a
23:33 - style called type so over here i'm going
23:35 - to say
23:36 - oh class of type yep
23:38 - and add a class of type to this one too
23:42 - all right so that looks a little bit
23:44 - cleaner
23:45 - but back to what we're trying to do with
23:47 - that new package we imported is
23:49 - basically if we have children
23:54 - we want to return some hard-coded red
23:58 - for folders and else
24:01 - what we could do
24:02 - is we could simply call this method so
24:05 - i'm going to say
24:06 - return
24:07 - color of
24:10 - color hash dot
24:12 - x
24:13 - and then i'm going to get the extension
24:14 - of this
24:16 - file which i can do node
24:19 - node.name.split
24:20 - and then split it by the dot and just go
24:22 - ahead and give me the right side and
24:24 - this is probably not the safest way to
24:26 - do this
24:27 - um
24:28 - but it works for right now for this
24:30 - little simple tutorial that i'm giving
24:33 - let's go ahead and save that and see if
24:35 - this is working as expected
24:37 - so now you'll notice that all my
24:38 - different files depending on the
24:39 - extension will have a different type of
24:42 - color
24:43 - and it actually looks like it works for
24:44 - files that don't even have an extension
24:47 - so cool that's working pretty much
24:49 - exactly how we thought it was going to
24:50 - work
24:53 - and of course to kind of clean this up i
24:55 - feel like i could dry this up a little
24:56 - bit
24:57 - so here i'm just going to say let style
25:00 - is equal to red
25:02 - instead i'll say let color
25:04 - and then here what i'll simply do i'll
25:05 - say if
25:07 - node.children
25:08 - or if they don't have any children i'm
25:10 - going to say color is equal to
25:12 - that color hash logic
25:14 - and then down here i could just simply
25:16 - return
25:18 - color
25:22 - like so let's see if this works
25:27 - i'll do a hard refresh just in case
25:30 - awesome so that is working as we thought
25:32 - it would
25:34 - so there you have it there's how you
25:36 - build a tree browser
25:38 - using vue.js and really it wasn't too
25:41 - difficult
25:42 - feel free to um follow me on twitter or
25:44 - definitely subscribe to this channel if
25:46 - you thought this was a good tutorial
25:48 - and again i'm always open to feedbacks
25:50 - in the comments of how i can make my
25:51 - videos better
25:53 - and i'm also open to suggestions as to
25:56 - what other type of little modules or
25:58 - components i should try to build and
26:00 - record and demo for you all

Cleaned transcript:

hey coders i'm cody seifert and welcome to another tutorial where i'm going to show you how to build a tree browser using view js so basically on the right this is what we're going to be building it's a very simple component which if given a tree like data structure it's going to render out different divs that you can expand and collapse to view the file system or whatnot and we're using a an external module to kind of color the files based on the file extension we're doing some cool little stuff inside the component um and then lastly if you click on one of these files it's going to invoke a callback where we simply just display an alert but if you think abstractly you could do whatever you want such as render something over on the right hand side maybe even show the file contents after you click on one of these files so this is what we're going to build let's just go ahead and start building it so i went ahead and just started up a project using the vue cli version 3. so over here on the left you can see the the bare bones project is ready to go on the right we have it running if we wanted to get started with this component though let's go ahead and create a new file called tree browser dot view i'm going to go ahead and just scaffold out a new view file here and of course we need to go in the app.view and include that so let's go ahead and just bring in tree browser wherever we plan to use it i'll get rid of this image here save this file and just to verify that this is working let's just go ahead and display some text so i'm going to say h1 hello and write that out cool so at this point we should be good to go to start developing our tree browser component the first thing i want to start with is let's look at how some json data may be represented to represent a tree structure like a file system right and we're going to define a json object and pass that down into our tree browser as a property so let's first inside our app component let's define a data function and let's return an object which has a root object on top of that or it has a root property and inside this root property basically a root is going to be a node which has children so if you know much about like graph theory or if you've done like computer science data structures and stuff we're basically just going to represent a tree using nodes that have children so in this case our root is going to have a name so in this case we'll do a slash and then our node will have children attached to it which is going to be an array and then inside that array we can have multiple other nodes so our first node could be let's say music and then of course that could have children keep doing a capital m and then that child node could be i don't know name of song.mp3 or something like that so that's one folder that could exist in our root directory if we wanted to make another child we could do name and we could say this is workspace that has children and inside our workspace we have multiple nodes and let's just say we have one called source.js so that's kind of the representation of what a file system looks like using javascript objects again we have a node which has a name and then inside that we have children which has nodes and names and nodes and names etc etc and that will go down to however deep your file system is so using that root data property let's go ahead and try to pass it into tree browser so the first thing i want to do is i'm going to go into tree browser i'm going to define a props object and again you could do a props array so i could do props as array of node in this case we're going to actually define some defaults for props in the future so i'm going to do a props object which is going to have node which is an object type and once you define this props property on your view component here you can use it so for example in our app.view i could simply just go over here i could bind node to my root property in my inside my data function and now inside of my tree browser i could simply do node.name to render out that first slash that we had to find in our root so hopefully that wasn't too confusing we have a good understanding of what the data structure is now we need to understand how to traverse it to display a file system so going back to our tree browser the first thing we kind of want to do is of course we're gonna have to wrap this in a div because view requires only one component which is exported in your template so i'm gonna wrap that in a div and just print out the name here and i'm gonna go ahead and split this out into two different sections so the first section is gonna be a div called node and that's where we're going to have like the the icons for if it was expanded or not and the name of the node etc so i'll put go ahead and put the h1 in that and then of course down here what we're going to do is we're going to call tree browser again and i'll i'll do this in one second in fact i'll just i'll just go ahead and do this now so if we take a step back and look at what we're trying to build it's a component which recursively renders itself multiple times so in order to recursively call yourself we can just say tree browser again but we need to make sure that we define a name over here on our component or else you're not you're not able to actually recursively render yourself it won't know what tree browser is let's take a step back and think about what we need to do so we already rendered out our name node but remember we have this children property which is an array that we need to loop over so inside view what we could do is just add a v4 on side that tree browser component and i'll say for node and node.children actually i'll name this um child not node and of course if you're doing a v4 in view you need to make sure you bind a key so for now i'll just do child.name um and that is basically going to loop over all the children of the node and create a new tree browser object and render out the name so the last step is we're looping over all the children and rendering a new trick browser component but remember we require a node property so over here i'm going to bind node equal to the child i'm going to go ahead and save that and notice here on the right it renders out all of our nodes and one thing to notice is that the indentation isn't really useful we can't tell like what is nested under other things so i'm going to go back to my style over here and just make it scoped and this will make sure that all the css inside the style is only scoped to this component that we're looking at and for node i'm going to say text align left and we're going to start working on some logic to be able to simply indent based on the level that we're at so notice we have everything along the left how do you think we could indent based on the depth right so if we're at the root level we don't want to add anything to the left but as we start going down the depth of the recursive calls we need to kind of indent so what we could do is as a property let's define yet another one called depth that's going to be a type of number and then we're going to default that to 0 for now and basically as we call tree browser we just want to pass depth of depth plus one so if we're on this first entry we're gonna be depth of zero music will be depth of one song will be depth of two workspace would be depth one and sources will be depth of two so now that we have the depth in incrementing by one every time we traverse down the recursive call stack how do we actually indent well we just have to use css right and in view we could simply just go over here and do a dynamic style binding so i'll say bind style is equal to an object and this is going to have a margin left of um the depth times some amount and i'm just going to go ahead and add pixel to it in fact if you want to be proper let's just go ahead and do string interpolation here like so so if i save this notice that now the entries or nodes are indented correctly based on the depth that we're at in fact i think the text is a little bit big so let me just make the font size like 18 pixels instead and i'm going to still seems kind of big let me look at it oh cause we're using h1 so instead of using h1 let's just go ahead and just get rid of that for now and we'll fix it up to make it a little bit better in the future okay so now we're making some progress now we need to move on to kind of the next step which is the ability to expand and collapse these different nodes depending on if they're clicked or none so of course let's go and add a new data property to keep track of if we've clicked the node and if it's expanded or not so if i go to data and return expanded is false we now have a property which is attached to the root level of all these different nodes and then we could just simply hide or show the children based on if that's true or not so over here i'm going to say v if expanded say that and notice that now we only see this slash and again vf is just a keyword in view where you can use it to hide or show dom elements based on a boolean value so the next step is how do we actually see or expand this view to see the children what we could do for right now is just add a click callback so say click and then we want to simply set expanded is equal to the opposite or negate of expanded that's basically going to toggle based on us clicking on stuff so just to show if i were to click on this now notice that it's toggling our different things but unfortunately it's hard to tell if something has been expanded or not so let's go ahead and add some icons to the node so we can tell if it's been expanded or not so let's add a span and i'm going to add the class of type and basically what i want to do is just display either the carrot to the downward position or carrot to the right depending on if we're expanded or not so in here i can do string interpolation and say expanded question mark and that's a ternary operator if you're not familiar with you know javascript's ternary operators so if expanded is true we simply want to display the string or the symbol 9660 and then otherwise we want to display 9658 and 658 and go ahead and save this and end the interpolation cool so now we have an actual icon which changes based on if we've clicked it or not and now that we've done that we notice that there's a bug right there's a there's a the icon is being rendered here for nodes that don't have any children so let's try to prevent that from happening so down here in our component i'm going to add a computed object and inside here we can add a has children property and that's just going to return this.node.children so if this is defined we have children if it's not we don't have children and what we can do is only display this stuff if we have children so here i'm going to do a v if we have children or has children and now when i save this i should be able to go down and the icon is hidden if we don't have any children the last thing i want to do is i want to add a little icon next to song for like just to kind of further indicate that it's not a folder it's more of a file so over here i'm going to add yet another span and i'm going to add a a symbol which is going to be a circle here and i want to display it if we don't have children so i'm going to just do v else here so basically now if we don't have any children it's going to show this little triangle icon so that's all cool and all but how do we actually figure out if we've interacted with clicking on one of these songs so what we could do is we could add a click callback here to the node and instead of doing expanded is equal to not equals expanded i could say node clicked of course pass that the node actually in fact i don't need to pass that anything um and then down here we can add yet another opera a property called methods and that's going to have a method name called node clicked which we're going to do that same logic so this dot expanded is equal to not expanded and let's save and just test that out to make sure we didn't break anything but also what we want to do is we want to check if the child has children we want to go ahead and just emit a event so that our app.view can kind of do something depending on what you clicked so over here i'm just going to say if this dot has children i'm going to simply this dot emit on click and i'm going to send back the node that was clicked so this dot node actually in fact we don't we want to do this when we don't have children so only when we click files so sorry about that just add a little negation there and we won't we wanted to check if we don't have children so this is another cool thing that is attached to view components the money sign emit and basically this is going to emit an event called on click and it's going to pass this as the data and it's going to bubble that up to any of the components that are listening so inside app.view which is our parent component which is kind of listening we could simply just do at on click and we could say i'll call some random functions so node was clicked and of course down here we could just say close my data and i'll say this is going to have a methods property and inside the methods we're going to say node was clicked and that's going to take a node as a parameter and we're going to simply just do alert node.name just to print out the name of what was clicked and don't forget hit your comma there so at this point let's go ahead and test it out and see if we're doing okay so we are getting a little error called this dot has children is not a function and because computed properties are not actually functions they're just booleans or they're just variables that you can use so instead i'll just go ahead and backspace those that function call i'll save that and make sure there's no errors in the console anymore so now when i click song.mp3 it should be saying this dynamite on click and sending out the node and then over here we're listening to it and calling node was clicked but for some reason it's not actually doing anything so let's go ahead and just log out we are clicked and save it here to see what's going on so that's not being called so i'm assuming that there's an issue here so over here i can say console.log we are here okay so we are indeed getting to this point and we are emitting a on click event um and the issue is is that remember we're doing recursive calls so here if we want to bubble that up all the way to app.view we need to remember to listen to the click call back here so i can say at on click and i'm going to simply just do omit i'm going to say on click and then i could pass the node that was clicked in fact i think i need to do something like this node okay so give it a callback function which is going to take the node that was clicked and just simply propagate it up and there may be a different way to do this in view if anyone has a suggestion as to a better way to actually do this or i just want to propagate propagate that event up the tree and not worry about having to declare an on click and doing that um let me know but for now i think this should work so let's go back and try to expand and click on song and and this cannot read property emit of undefined and that is because we don't need to use this here let me just go ahead and remove that and see if we can actually get this to work there we go so sorry about that you got a little debugging session didn't mean to um take that long but as a recap what was wrong was we are recursively creating these tree browsers so when we click on song it's going to propagate up to tree browser so we need to make sure we're listening to that on click event and just simply propagate it up until we finally hit the parents on click callback which is going to be this so again we'd add this because like let's say you want to change some other view depending on what the person clicked and the tree browser component shouldn't really be responsible for knowing how to interact with that or i mean a different way is you could probably just pass in a callback function here and call it when we click on a node but i think this way is a little bit more cleaner to actually emit an event and then do something when it happens all right so now that we've made this progress let's just go ahead and add a i went ahead and just generated a json object which has more realistic data so inside our source folder i'm going to add a root.json file and i'm just going to go ahead and copy some json that i already created by traversing my file system basically i just took like one of my projects and it traversed the node modules folder and all this other stuff so if i save this we should have a better example piece of data to play around with so going back to app.view we could simply import that some say import root from dot slash root.json and that's going to import that json object and then instead of using it here or instead of defining this here i could just simply delete what we got and save that so now when we refresh the page notice that we have a much much larger file system example with a lot more files so now i think most the functionality is basically done we could probably just spend a little bit more time changing up the styles and centering this and stuff to make it look like i did before so if i go back to app.view let's just add a title here i'll call this h1 tree browser or view tree browser i'll go ahead and save that okay so let's see if we can maybe style this a little bit more so i'm gonna do body background color i'm just gonna do a little bit of a gray and then i'm gonna add color as white for now should be setting this to white let me refresh uh i think it's oh that's why okay now we actually have a little bit nicer looking um sample application so as a little bonus um what i'm gonna do is i want to import a function which is going to take in a string and give us back a color hash basically i can set different string values depending on our different color values depending on what the extension is the javascript files may be red json objects may be like blue or something so in order to do that let's go ahead and go back to our terminal here i'll do an npm install and save there's a package called color hash which kind of gives us the opportunity to do something like that and while that's installing let's go back to tree browser and let's simply import that here so i can say import star as color hash from color hash and then once we've imported that we can say cons color hash is equal to new color hash and kind of ignore what's going on over here we're installing a node package so it's going to keep on refreshing until it's done but what we want to do is basically figure out the extension of the name if we're at a node that has like you know no children and what we want to do is change the style dynamically based on that hash so up here where we're rendering out the name here what i can do is simply wrap that in a span and i'm going to say bind that to style and it's going to call a it style for the node dot name actually i'll just do dot node and then down here we of course need to define a method right so over here i'm going to say get style i'm going to take a node and what we need to do is we need to first take the node if it has children so if no dot children then we need to return some style so i'm going to say return an object that has color of some hexadecimal so i'll just say like red for now and let's see what this does if we were to save this i'm going to try reinstalling my node modules i'm not sure what happened but uh something might have broken when i was doing my setup for this video so let's just reinstall everything and see what happens alright so now that that is done reinstalling let's try to set up our rerun our serve command and let's refresh this page cool so if you notice here if we have children it's going to be red so pretty much we can customize what we want our folder colors to be also one thing i'll notice is that the icon is really really close to the name so over here i'm going to just add a margin right of 10 pixels to these icons i don't know if i've actually added a style called type so over here i'm going to say oh class of type yep and add a class of type to this one too all right so that looks a little bit cleaner but back to what we're trying to do with that new package we imported is basically if we have children we want to return some hardcoded red for folders and else what we could do is we could simply call this method so i'm going to say return color of color hash dot x and then i'm going to get the extension of this file which i can do node node.name.split and then split it by the dot and just go ahead and give me the right side and this is probably not the safest way to do this um but it works for right now for this little simple tutorial that i'm giving let's go ahead and save that and see if this is working as expected so now you'll notice that all my different files depending on the extension will have a different type of color and it actually looks like it works for files that don't even have an extension so cool that's working pretty much exactly how we thought it was going to work and of course to kind of clean this up i feel like i could dry this up a little bit so here i'm just going to say let style is equal to red instead i'll say let color and then here what i'll simply do i'll say if node.children or if they don't have any children i'm going to say color is equal to that color hash logic and then down here i could just simply return color like so let's see if this works i'll do a hard refresh just in case awesome so that is working as we thought it would so there you have it there's how you build a tree browser using vue.js and really it wasn't too difficult feel free to um follow me on twitter or definitely subscribe to this channel if you thought this was a good tutorial and again i'm always open to feedbacks in the comments of how i can make my videos better and i'm also open to suggestions as to what other type of little modules or components i should try to build and record and demo for you all
