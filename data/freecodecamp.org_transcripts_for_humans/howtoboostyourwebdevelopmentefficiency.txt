With timestamps:

00:00 - so welcome everyone to my talk about how
00:02 - to boost your web development efficiency
00:05 - um some of the stuff was already set by
00:08 - martin before because we have some
00:10 - overlapping topic called lean staged but
00:14 - as i'm sure you will still have some
00:16 - value out of this presentation
00:18 - what i did is i tried to compile all the
00:20 - most important tools that i use in my
00:22 - web development
00:24 - and i also have like my settings my
00:26 - configuration objects directly in the
00:29 - presentation and everything is linked to
00:30 - online so
00:32 - you can check out the slides after the
00:33 - talk and you can
00:35 - do the configurations yourself
00:37 - so the first topic is already lean
00:39 - staged so lean stage is basically a
00:41 - wrapper around git hook so it makes it
00:43 - more easily usable for you
00:45 - and like a git hook you could imagine it
00:48 - like being an angular life cycle hook so
00:50 - like engine in it ng on changes whatever
00:53 - and it's especially useful for doing a
00:55 - pre-commit hook so let's say you you and
00:59 - some
01:00 - colleagues of you fight over the code
01:02 - style and there's always like he leaves
01:03 - some white spaces in there and you
01:05 - remove them again and it's like a
01:06 - constant back and forth so with like a
01:09 - pre-commit hook
01:11 - where you say okay we use this tool to
01:13 - format our code
01:14 - you can always be sure that you only
01:16 - have really clean code and
01:18 - only changes that are relevant
01:21 - another possibility would be to use a
01:23 - pre-push hook so let's say you want to
01:25 - push something
01:26 - online and you want to push it to your
01:28 - cli
01:29 - and you always fear that your pipeline
01:31 - gonna fail your pipeline gonna fail this
01:32 - would be one way of
01:34 - maybe avoiding it so you would
01:36 - let your unit test and your end-to-end
01:38 - test run before you push it
01:41 - yeah so this would actually be a
01:44 - package like i you can also make like a
01:46 - lean staged rc config file to have it
01:49 - encapsulated but i
01:51 - implemented here in the package json
01:54 - first settings i used here is concurrent
01:56 - for subtest concurrency one this is used
01:59 - because
02:00 - i had the problems that because these
02:02 - linters run at the same time
02:04 - that sometimes
02:06 - the formatter went over it and changed
02:08 - files but it didn't add them to the to
02:10 - the actual commit so the commit went
02:12 - through and then there were some
02:14 - leftover changes in the in the actual um
02:17 - branch
02:18 - so this uh with using only subtest
02:21 - concurrency one it avoided that problem
02:26 - yeah for html files i use the autoformat
02:29 - html script you can
02:31 - see it down here
02:33 - it's using tslint with the fixed flag so
02:36 - the fixed flag already tries to fix as
02:39 - many issues as possible that it can do
02:41 - by itself
02:42 - and
02:44 - then also it takes the project wired
02:46 - configuration that is config json and
02:49 - tslin jason for the tslint rules
02:52 - for
02:53 - css and js i just use prettier because
02:56 - that was seemed like the obvious and
02:58 - easy choice to make
03:01 - and for the typescript i use something
03:03 - that is called clang format so this
03:05 - might not be the obvious choice like we
03:07 - heard before you can use prettier but
03:09 - for me it seemed that prettier
03:12 - like it prettier also wants to be
03:14 - like easy and it doesn't give you many
03:16 - customization options on purpose but i
03:19 - was like okay with the typescript with a
03:21 - typescript project i want to be
03:23 - able to change everything to my own
03:25 - needs
03:28 - yeah and then it goes through and uses
03:30 - the lean script and yeah i already
03:32 - explained this and what's also there is
03:34 - like the ignore so for minified files of
03:37 - course you don't want it to be
03:38 - reformatted into an unminified version
03:43 - so yeah about auto formatting typescript
03:45 - like prettier typescript formatter clank
03:47 - format these are three could be three
03:49 - possible options i looked at them and
03:51 - for me it was obvious to use clang
03:53 - format it's actually used for
03:55 - c plus plus and c sharp
03:57 - formatting but it works
03:59 - perfectly fine for typescript
04:02 - what i did here is at first i started
04:05 - using
04:06 - google style and that was the the base
04:08 - to work with but then step by step i
04:11 - started being not happy with it and i
04:13 - basically rewrote everything here
04:15 - so
04:16 - this is definitely oh i have this one
04:18 - huh this is definitely not necessary
04:20 - here
04:22 - um so i could at some point i would
04:23 - probably clean this up a little bit to
04:26 - have only the necessary rules
04:28 - what i also like about clang format is
04:30 - that it
04:31 - sorts your imports by specific criteria
04:34 - what i mean with criteria here is
04:36 - let's go into vs code here
04:40 - in my main browser ts you can see it
04:41 - easily so what clang format then does it
04:44 - like when you have
04:45 - the full module import it puts them at
04:47 - the top of your file then it leaves a
04:49 - blank space then it imports your
04:52 - dependencies out of the package json
04:55 - and then like down below here it would
04:57 - use your relative imports you are so you
04:59 - can always be sure where your imports
05:02 - are or you can see it usually uh with a
05:04 - single look
05:06 - and yeah i wrote here showcase time so
05:09 - i prepared um already staged changes so
05:14 - i actually
05:16 - made my file is this readable for you or
05:18 - sure
05:20 - yeah yeah sure
05:24 - um
05:27 - which one do you
05:28 - this one
05:30 - oh yeah much better okay
05:34 - so yeah you can see i it up
05:35 - pretty good
05:37 - i it up here i i
05:39 - um i can't look at it
05:41 - yeah the constructor stuff is unindented
05:44 - and here for example forces on the next
05:45 - line
05:47 - the
05:48 - the closing brace of the if is on the
05:49 - same light of the co line of the code
05:51 - stuff like that so it's quite horrible
05:54 - and what i would do now is like use the
05:58 - actual um
06:00 - is the actual script so i would say
06:02 - autoformat ts
06:05 - goes through the tree
06:07 - and the i flag is for interactive
06:09 - replacing it
06:12 - back in the editor you would see here
06:14 - i have now my changes here
06:17 - and if we're lucky it should be yeah it
06:19 - should be back in its place
06:21 - so nice and clean everything again
06:24 - and like stuff like this here for
06:25 - example to get it really
06:28 - wrap aligned underneath each other was a
06:29 - pain in the ass so
06:31 - it was a work it was quite a work to go
06:32 - through this clang format and look at
06:34 - all the options that there are
06:36 - yeah same of course we can do for the
06:39 - like here we have a details page and
06:41 - html page and you see that the h3 here
06:44 - is
06:44 - wrong and this one is just in the same
06:47 - line and also really horrible
06:49 - so therefore we have the
06:51 - html formatting
06:53 - yeah it outputs also unchanged files
06:56 - but
06:58 - it should have fixed this one yeah you
06:59 - see now
07:01 - the h3 is aligned on yeah
07:04 - do you mind templates
07:06 - sorry does it work with in-line oh i
07:08 - didn't try that out i'm not using any
07:10 - inline templates
07:12 - but that would be interesting
07:15 - [Laughter]
07:21 - but i guess it
07:22 - probably won't work because you're
07:23 - looking for the wildcard ts so
07:26 - probably not but here you see it's back
07:28 - to normal and should be fine
07:30 - and then also have here my shame css
07:32 - file and it also is
07:36 - you know what a shame css file is
07:39 - okay
07:40 - yeah so you have a lot of stuff here
07:43 - also have been wrong wrongly indented
07:45 - and stuff
07:46 - oh sorry
07:48 - so i would go back here again
07:50 - and do it with
07:53 - node modules being prettier write single
07:55 - quotes true print with hundred and then
07:58 - the
07:59 - path to the actual file
08:03 - and
08:04 - it should be yeah everything is also
08:06 - again back in its place where it should
08:08 - be
08:09 - nice and
08:10 - clean and oh sorry
08:13 - so what we can do now is um
08:17 - just gonna check out the changes here
08:19 - you see we still have these three
08:20 - modified files and now if i say git
08:23 - commit let's just call it test commit it
08:26 - starts running lean staged with husky
08:29 - and here you see other format blah blah
08:31 - and it's also pretty fast except for the
08:32 - linting
08:34 - for of the ts files
08:36 - but other than that it should be
08:39 - um
08:41 - result in a really nice clean commit
08:44 - here you see still it's the changes are
08:46 - still there because it's not yet added
08:48 - again to the stage changes
08:51 - let's see if it's through yet no
08:53 - okay now it's through
08:55 - so yeah everything is nice and clean now
08:57 - and
08:58 - we can verify this again
09:01 - um to this page
09:03 - so yeah everything is nice and clean
09:05 - committed
09:06 - and that's what we want that's what we
09:09 - expect
09:11 - um
09:12 - yeah so for the html i use js beautify
09:15 - it's called so
09:16 - i was like what the why is this
09:17 - library called js beautifier when it
09:19 - does stuff with html but that's
09:21 - something that vs code is actually using
09:24 - on their own like when you format
09:25 - something in vs code it's using js
09:27 - beautifier so i thought why not stick to
09:29 - that
09:30 - and yeah the most important feature that
09:32 - i like here is that is this force
09:34 - aligned here that leads to
09:36 - stuff being really clean
09:39 - um
09:42 - being really clean like the properties
09:43 - and the eight attributes are always like
09:45 - aligned like this so especially when you
09:47 - have a lot of stuff like that it's nice
09:49 - and easily readable still
09:52 - so that's what i like about this
09:56 - yeah and since we're talking about html
09:57 - there's also emmet
09:59 - probably most of you know
10:01 - if you don't know about it it's already
10:04 - implemented by by vs code as a standard
10:08 - and the way you would use it is let's
10:09 - say i want to write
10:12 - a container like bootstrap stuff a
10:13 - container with a row with three calls
10:16 - and then with the text hello angular
10:18 - meetup i would do it like this the dot
10:20 - is a class
10:21 - then i call the class container
10:24 - i would make another class called row
10:26 - and then i would say call 4
10:28 - times 3 because we want to have like
10:30 - we're always thinking in 12 12 steps
10:33 - and then in there i would have a h2
10:36 - with the content
10:37 - hello angular meetup
10:39 - and when i expand this now
10:41 - you see it nicely creates
10:44 - your
10:45 - html tags that you wanted
10:47 - and this is also really really nice when
10:49 - you let's say you want to have a lot of
10:51 - allies
10:52 - so you have a shit-ton of allies now
10:55 - um
10:56 - so this is definitely something to keep
10:58 - in mind and to also work with it and use
11:00 - its power
11:03 - um
11:04 - yeah the next topic is already
11:07 - auto prefixer
11:08 - in working together with browsers list
11:11 - so here on the right side
11:13 - sorry on the right side we have an
11:14 - example of how it would look if you
11:16 - would need to respect all the vendor
11:18 - prefixes that there are and then
11:20 - sometimes you also don't know okay what
11:22 - the what the hell actually what browser
11:23 - do i support and and since when is this
11:26 - flag required or since when is the
11:27 - vendor prefix required and since when
11:29 - not
11:30 - so what other prefix does i used it here
11:32 - for the only for the production model
11:34 - because in the development bundle you
11:35 - should not care
11:37 - what because you work in chrome or
11:39 - something useful
11:40 - elsewise so here it's like loading the
11:43 - sass files then it's using autoprefixer
11:46 - on this
11:47 - and then it's converting everything to
11:48 - css
11:50 - and
11:52 - what this results with is is depending
11:54 - on what you have here in your browsers
11:56 - list array
11:57 - so this is not what we use here but it
11:59 - could be something like that so you say
12:01 - please
12:02 - add all the vendor prefixes for the last
12:04 - one major
12:06 - major version of all browsers worldwide
12:09 - or here you could say okay only browsers
12:12 - please that that have a usage of one
12:14 - percent or more
12:16 - and here you could also even specify it
12:17 - for every browser individually
12:20 - and what we have at work is something
12:21 - like last two major versions to make
12:23 - sure in case someone has updated and
12:25 - with the rolling release browsers it
12:27 - should be no problem
12:29 - and then also add support for the last
12:31 - four internet explorer explorer versions
12:35 - but that's not something to be proud of
12:38 - yeah
12:39 - next topic is um
12:42 - cleaning out unused css out of your
12:44 - production bundle i think every one of
12:46 - you knows okay you use some kind of
12:47 - library like foundation or bootstrap or
12:50 - something else and you get this big
12:52 - boilerplate code and you probably only
12:54 - need
12:55 - some of it so you will never really use
12:57 - all the capacities of the
12:59 - or the already predefined css styles
13:02 - and the way you do it is um you would
13:04 - have your main content hash bundle css
13:07 - so this is already basically your
13:08 - finished bundle and then you would let
13:11 - purify css run over all your html files
13:14 - look for classes or ids if it finds it
13:17 - it keeps the classes in in the actual
13:19 - bundle
13:20 - and if it doesn't find it it would clean
13:22 - it out and you can already think okay
13:24 - this is probably a problem when you have
13:26 - dynamic dynamically created
13:28 - content
13:30 - so here in the purify options whitelist
13:32 - you could um specify which classes to
13:36 - always ignore
13:37 - and in this case you see i have some
13:39 - bootstrap stuff here and
13:41 - so actually you have to go through your
13:43 - whole web application and see what
13:45 - breaks and what doesn't
13:46 - but with this with this couple classes i
13:49 - was already able to make everything
13:50 - runnable and be fine
13:53 - and here you can see that i commented it
13:55 - out it's a verbose true flag and this
13:57 - would actually tell you how much percent
13:59 - percentage of your bundle got cleaned
14:02 - out and in our case this was about 30 to
14:04 - 40 percent so this is definitely
14:06 - something that you want to do
14:08 - and what's also very handy is that
14:10 - purify css also is able to minify your
14:13 - css
14:14 - bundle are there any questions so far
14:18 - okay so about the terminal workflow i
14:20 - see a lot of people just using the plain
14:22 - old bash and
14:23 - it always pains me
14:25 - it always pains me when i see that you
14:27 - have to go through the history and you
14:29 - don't know maybe you find this command
14:31 - or maybe you will never find it because
14:32 - you typed it on some other laptop or
14:34 - something
14:35 - so i'm a big fan of the set shell some
14:37 - of you maybe know it
14:41 - it's quite popular it has like 68 000
14:44 - stars and i put like the installation
14:47 - guide for you on there
14:49 - and also
14:50 - installing the omac framework what the
14:52 - framework actually does is
14:54 - it
14:55 - gives you the options to have different
14:57 - themes very easily and gives you the
15:00 - options to use a lot of custom plugins
15:03 - and for example you can see here what i
15:05 - use
15:06 - is the marant theme
15:08 - and what i like is when like for example
15:10 - i'm i really like to see the whole path
15:12 - of where i am actually right now and
15:15 - what i like of course is that it shows
15:17 - me the git branch and it shows me if i
15:19 - have changes in my git branch
15:22 - and i'm just really
15:24 - i'm really quite happy with this and
15:26 - what i also did here is
15:29 - same with your bash rc you have here a
15:32 - set shell rc
15:35 - and again here my theme is
15:37 - it says here my theme and the link also
15:39 - goes to all themes that are out there
15:42 - and there's a on of them so
15:44 - you can definitely find something that
15:46 - you will enjoy
15:48 - is there a white one
15:51 - a light one oh i think there's light
15:53 - ones
15:56 - oh
15:57 - because of the light yeah no i think
15:59 - there's no light one actually but this
16:01 - depends of
16:02 - where this step
16:04 - this
16:07 - well
16:08 - well it's theming the functionality of
16:10 - it so i guess you would still like me i
16:12 - set it to background ubuntu style
16:15 - so that's it and
16:18 - also here i have like some examples of
16:20 - the plugins that i use and again it's
16:22 - linking to all the plugins that are out
16:23 - there there's also stuff for docker and
16:25 - git aliases crazy stuff
16:28 - and what i especially like is this
16:29 - called vd it's called
16:31 - warp directory and the way i use this
16:34 - would be
16:35 - i type vd and then i tab and i get all
16:38 - the
16:39 - possible war points that i saved myself
16:41 - so this would bring me to the desktop
16:43 - and let's say i want to go back into the
16:44 - project i would type via front-end video
16:46 - via front-end and i'm back again on this
16:48 - on this one
16:50 - or like vr as the back end so in this
16:52 - case i would go back to via
16:54 - and the other thing that's very
16:56 - convenient is called less working
16:58 - directory so when i make a new tab i'm
17:00 - always back into
17:02 - what is open in my other terminal window
17:04 - so
17:06 - these two things i really appreciate a
17:07 - lot and what i also have here it says
17:11 - set shell auto suggestions and syntax
17:12 - highlighting
17:14 - and the way you can see it here let's
17:16 - say i write git status it's fine it
17:17 - works but if i write get status it
17:20 - already highlights me in red and tells
17:22 - me you don't have a global library
17:24 - installed that's called get and then of
17:26 - course it throws the command not found
17:29 - and what i also like is let's say you
17:30 - have this really long commands
17:32 - like this one
17:34 - so you already see in the like the
17:36 - history autocompletion is in line
17:39 - basically so
17:40 - when i
17:41 - put the right arrow key down then you
17:43 - you have it
17:44 - expanded and you can use it
17:46 - so this enables me to really easily and
17:49 - fast fastly see what i have what i have
17:51 - written so far like you see here i can
17:54 - go basically to all my things easily and
17:56 - don't have to type in the history and
17:58 - look for it or whatever
18:02 - yeah and i set my
18:03 - like suggestion style to yellow but this
18:05 - can already or this can depend on what
18:08 - kind of background color you have that
18:10 - is nicely for you
18:12 - yeah and because i don't like typing
18:14 - docker compose up and build i wrote like
18:16 - dcu and dcb into the
18:19 - chrc so this is also something you could
18:22 - do like work a lot with aliases and make
18:24 - some commands easier that you use
18:26 - frequently
18:29 - yeah you probably saw by now i'm using
18:31 - visuals to decode and i'm a big fan and
18:33 - i don't know why there's webstorm
18:34 - licenses today
18:38 - what i like about vs code is that it's
18:40 - really nice and transparent like you can
18:42 - can find anything you want on the github
18:44 - repository
18:45 - and they release monthly iterations of
18:48 - um updates to their vs code
18:52 - and here for example we could look into
18:53 - the one for april and it and you can see
18:55 - here what they have planned like all the
18:57 - check boxes here
18:59 - what they plan on adapting and improving
19:01 - and they always take a lot of feedback
19:03 - from the community and
19:05 - like for example if you notice um when
19:07 - you do changes in in atom you always get
19:10 - it when you save it you have it
19:11 - highlighted in yellow or when you add
19:13 - some stuff to git ignore you have it uh
19:16 - in gray like grayed out and this was not
19:18 - there in vs code up until probably half
19:20 - a year and they said that the community
19:22 - said okay we want this definitely and
19:24 - they made it work so they really listen
19:28 - to what the people actually want
19:30 - and you can of course also look into the
19:32 - iteration plan always and see if there's
19:34 - something coming up that you're really
19:35 - interested in
19:36 - and in case you definitely don't want to
19:38 - wait there's the insiders version and
19:41 - basically you could always build a new
19:43 - version as soon as they push a new
19:45 - commit into the master branch of theirs
19:47 - so you could install the vs code
19:49 - insiders version and always be up to
19:50 - date but this could also lead to
19:52 - breaking
19:53 - breaking things
19:55 - so this i would only recommend if you
19:56 - want to
19:58 - file bug reports for them if you want to
20:00 - contribute to the vs code repo something
20:03 - like that
20:07 - yeah so these are my settings so far in
20:09 - visual studio code so if you want to
20:11 - install it blank and you want to have
20:13 - something up and running already
20:16 - i would give this to you so i will
20:18 - suggest to you
20:19 - something that i like or that i think is
20:21 - necessary by default visual studio code
20:24 - also gives you angular 1
20:26 - suggestions in the html so i disabled
20:28 - this and also here
20:30 - again it's the force
20:33 - um aligned
20:33 - else is there
20:36 - yeah for example it's also i think this
20:38 - is not very long into envious code yet
20:40 - but you can actually use your
20:42 - vs code capabilities to type check
20:46 - javascript so that's really convenient
20:48 - so it would tell you you have a string
20:50 - but you should use a number stuff like
20:52 - that
20:53 - it's also really nice when you work on a
20:55 - back-end project and you discover what
20:57 - errors they have
20:58 - in there
20:59 - and what i also like is for example
21:01 - let's say you're working that
21:02 - you have your development branch open or
21:04 - your master branch and then in the
21:06 - meantime they have there were a lot of
21:07 - changes so this one like get out of
21:10 - fetch it always gives you the newest
21:12 - version of it
21:14 - yeah and one thing to keep in mind of i
21:16 - wrote like a hint here these files
21:18 - exclude on the top here
21:21 - um
21:22 - so
21:22 - for me it was annoying to have some
21:24 - files duplicate or you you only want to
21:26 - if you want to if you search for
21:27 - index.html you don't want to have the
21:29 - one in your compiled bundle stuff like
21:31 - that
21:32 - so you only want to have the the actual
21:34 - files that you want to work on but what
21:36 - this also does is it hides it in the
21:38 - file tree of vs code so what the problem
21:40 - i had is there was a package lock that
21:42 - always got committed and i was like
21:43 - where is this package log because i had
21:45 - it excluded here and
21:47 - so that is something to keep in mind not
21:49 - to do
21:52 - yeah here also listed for you all the
21:53 - plugins that i have the extensions
21:56 - and yeah this is a of course opinionated
21:59 - so maybe you don't need postgresql or
22:01 - you don't need apache something like
22:03 - that
22:04 - and the way you could install it is just
22:05 - write code install extension flag and
22:08 - then the offer name and the extension or
22:10 - you can just do it with the offer name
22:12 - or the extension in vs code itself
22:16 - yeah and one thing i like especially
22:18 - much is this settings sync it's called
22:21 - so when you have a github account you
22:22 - can upload your local settings and this
22:26 - as let's say you work on your laptop
22:28 - here and then you go back at home and
22:30 - then you can easily download all the
22:31 - settings again so it has all your
22:33 - extensions it has all your settings or
22:34 - your key bindings and you have it nice
22:37 - and clean through a gist on github
22:41 - yeah some other resources that i have
22:43 - here for you is angular starter
22:45 - boilerplate so yeah i'm not we're not
22:47 - using the angular cli
22:50 - what angular start the boilerplate is
22:51 - it's like the most
22:54 - most supported i would say like ten
22:55 - thousand like there's a lot of angular
22:57 - rappers that stopped um putting out new
22:59 - content and and updating them because of
23:01 - the angular cli but this one is still
23:03 - quite popular i would say
23:05 - yeah 11 days ago so that's fine and now
23:08 - they're right now working on upgrading
23:10 - it to angular 6 and webpack 4 this of
23:12 - course is like a big change again
23:14 - so if you want to depend on an external
23:17 - boilerplate template this would be a
23:19 - good one
23:20 - and yeah the franz app i saw actually at
23:23 - the door that
23:24 - the guy from france is working in the
23:26 - first uh
23:27 - in the upper floor
23:29 - so i'm a big fan of
23:30 - what it opened
23:33 - i'm actually a big fan of the franz app
23:37 - what this gives you is not really
23:38 - related to web development but you could
23:41 - definitely improve your workflow
23:44 - with all your social with the services
23:46 - you use so let's say you have a slack
23:48 - channel let's say you have a trello
23:50 - board or your work email something like
23:52 - that you could have it easily in one
23:53 - electron window and switch tabs on the
23:56 - on the left side here and always be up
23:58 - to date with something happen then you
24:00 - don't will not miss your emails or
24:02 - stuff like that because i always had to
24:05 - open my gmail in a chrome window and
24:07 - then in your home window in the chrome
24:09 - window you actually want to develop
24:10 - stuff and it always gets tangled up so
24:13 - this is a nice clean way of
24:15 - working or having it separately
24:19 - yeah that was my talk thank you for your
24:21 - attention
24:23 - [Applause]

Cleaned transcript:

so welcome everyone to my talk about how to boost your web development efficiency um some of the stuff was already set by martin before because we have some overlapping topic called lean staged but as i'm sure you will still have some value out of this presentation what i did is i tried to compile all the most important tools that i use in my web development and i also have like my settings my configuration objects directly in the presentation and everything is linked to online so you can check out the slides after the talk and you can do the configurations yourself so the first topic is already lean staged so lean stage is basically a wrapper around git hook so it makes it more easily usable for you and like a git hook you could imagine it like being an angular life cycle hook so like engine in it ng on changes whatever and it's especially useful for doing a precommit hook so let's say you you and some colleagues of you fight over the code style and there's always like he leaves some white spaces in there and you remove them again and it's like a constant back and forth so with like a precommit hook where you say okay we use this tool to format our code you can always be sure that you only have really clean code and only changes that are relevant another possibility would be to use a prepush hook so let's say you want to push something online and you want to push it to your cli and you always fear that your pipeline gonna fail your pipeline gonna fail this would be one way of maybe avoiding it so you would let your unit test and your endtoend test run before you push it yeah so this would actually be a package like i you can also make like a lean staged rc config file to have it encapsulated but i implemented here in the package json first settings i used here is concurrent for subtest concurrency one this is used because i had the problems that because these linters run at the same time that sometimes the formatter went over it and changed files but it didn't add them to the to the actual commit so the commit went through and then there were some leftover changes in the in the actual um branch so this uh with using only subtest concurrency one it avoided that problem yeah for html files i use the autoformat html script you can see it down here it's using tslint with the fixed flag so the fixed flag already tries to fix as many issues as possible that it can do by itself and then also it takes the project wired configuration that is config json and tslin jason for the tslint rules for css and js i just use prettier because that was seemed like the obvious and easy choice to make and for the typescript i use something that is called clang format so this might not be the obvious choice like we heard before you can use prettier but for me it seemed that prettier like it prettier also wants to be like easy and it doesn't give you many customization options on purpose but i was like okay with the typescript with a typescript project i want to be able to change everything to my own needs yeah and then it goes through and uses the lean script and yeah i already explained this and what's also there is like the ignore so for minified files of course you don't want it to be reformatted into an unminified version so yeah about auto formatting typescript like prettier typescript formatter clank format these are three could be three possible options i looked at them and for me it was obvious to use clang format it's actually used for c plus plus and c sharp formatting but it works perfectly fine for typescript what i did here is at first i started using google style and that was the the base to work with but then step by step i started being not happy with it and i basically rewrote everything here so this is definitely oh i have this one huh this is definitely not necessary here um so i could at some point i would probably clean this up a little bit to have only the necessary rules what i also like about clang format is that it sorts your imports by specific criteria what i mean with criteria here is let's go into vs code here in my main browser ts you can see it easily so what clang format then does it like when you have the full module import it puts them at the top of your file then it leaves a blank space then it imports your dependencies out of the package json and then like down below here it would use your relative imports you are so you can always be sure where your imports are or you can see it usually uh with a single look and yeah i wrote here showcase time so i prepared um already staged changes so i actually made my file is this readable for you or sure yeah yeah sure um which one do you this one oh yeah much better okay so yeah you can see i it up pretty good i it up here i i um i can't look at it yeah the constructor stuff is unindented and here for example forces on the next line the the closing brace of the if is on the same light of the co line of the code stuff like that so it's quite horrible and what i would do now is like use the actual um is the actual script so i would say autoformat ts goes through the tree and the i flag is for interactive replacing it back in the editor you would see here i have now my changes here and if we're lucky it should be yeah it should be back in its place so nice and clean everything again and like stuff like this here for example to get it really wrap aligned underneath each other was a pain in the ass so it was a work it was quite a work to go through this clang format and look at all the options that there are yeah same of course we can do for the like here we have a details page and html page and you see that the h3 here is wrong and this one is just in the same line and also really horrible so therefore we have the html formatting yeah it outputs also unchanged files but it should have fixed this one yeah you see now the h3 is aligned on yeah do you mind templates sorry does it work with inline oh i didn't try that out i'm not using any inline templates but that would be interesting [Laughter] but i guess it probably won't work because you're looking for the wildcard ts so probably not but here you see it's back to normal and should be fine and then also have here my shame css file and it also is you know what a shame css file is okay yeah so you have a lot of stuff here also have been wrong wrongly indented and stuff oh sorry so i would go back here again and do it with node modules being prettier write single quotes true print with hundred and then the path to the actual file and it should be yeah everything is also again back in its place where it should be nice and clean and oh sorry so what we can do now is um just gonna check out the changes here you see we still have these three modified files and now if i say git commit let's just call it test commit it starts running lean staged with husky and here you see other format blah blah and it's also pretty fast except for the linting for of the ts files but other than that it should be um result in a really nice clean commit here you see still it's the changes are still there because it's not yet added again to the stage changes let's see if it's through yet no okay now it's through so yeah everything is nice and clean now and we can verify this again um to this page so yeah everything is nice and clean committed and that's what we want that's what we expect um yeah so for the html i use js beautify it's called so i was like what the why is this library called js beautifier when it does stuff with html but that's something that vs code is actually using on their own like when you format something in vs code it's using js beautifier so i thought why not stick to that and yeah the most important feature that i like here is that is this force aligned here that leads to stuff being really clean um being really clean like the properties and the eight attributes are always like aligned like this so especially when you have a lot of stuff like that it's nice and easily readable still so that's what i like about this yeah and since we're talking about html there's also emmet probably most of you know if you don't know about it it's already implemented by by vs code as a standard and the way you would use it is let's say i want to write a container like bootstrap stuff a container with a row with three calls and then with the text hello angular meetup i would do it like this the dot is a class then i call the class container i would make another class called row and then i would say call 4 times 3 because we want to have like we're always thinking in 12 12 steps and then in there i would have a h2 with the content hello angular meetup and when i expand this now you see it nicely creates your html tags that you wanted and this is also really really nice when you let's say you want to have a lot of allies so you have a shitton of allies now um so this is definitely something to keep in mind and to also work with it and use its power um yeah the next topic is already auto prefixer in working together with browsers list so here on the right side sorry on the right side we have an example of how it would look if you would need to respect all the vendor prefixes that there are and then sometimes you also don't know okay what the what the hell actually what browser do i support and and since when is this flag required or since when is the vendor prefix required and since when not so what other prefix does i used it here for the only for the production model because in the development bundle you should not care what because you work in chrome or something useful elsewise so here it's like loading the sass files then it's using autoprefixer on this and then it's converting everything to css and what this results with is is depending on what you have here in your browsers list array so this is not what we use here but it could be something like that so you say please add all the vendor prefixes for the last one major major version of all browsers worldwide or here you could say okay only browsers please that that have a usage of one percent or more and here you could also even specify it for every browser individually and what we have at work is something like last two major versions to make sure in case someone has updated and with the rolling release browsers it should be no problem and then also add support for the last four internet explorer explorer versions but that's not something to be proud of yeah next topic is um cleaning out unused css out of your production bundle i think every one of you knows okay you use some kind of library like foundation or bootstrap or something else and you get this big boilerplate code and you probably only need some of it so you will never really use all the capacities of the or the already predefined css styles and the way you do it is um you would have your main content hash bundle css so this is already basically your finished bundle and then you would let purify css run over all your html files look for classes or ids if it finds it it keeps the classes in in the actual bundle and if it doesn't find it it would clean it out and you can already think okay this is probably a problem when you have dynamic dynamically created content so here in the purify options whitelist you could um specify which classes to always ignore and in this case you see i have some bootstrap stuff here and so actually you have to go through your whole web application and see what breaks and what doesn't but with this with this couple classes i was already able to make everything runnable and be fine and here you can see that i commented it out it's a verbose true flag and this would actually tell you how much percent percentage of your bundle got cleaned out and in our case this was about 30 to 40 percent so this is definitely something that you want to do and what's also very handy is that purify css also is able to minify your css bundle are there any questions so far okay so about the terminal workflow i see a lot of people just using the plain old bash and it always pains me it always pains me when i see that you have to go through the history and you don't know maybe you find this command or maybe you will never find it because you typed it on some other laptop or something so i'm a big fan of the set shell some of you maybe know it it's quite popular it has like 68 000 stars and i put like the installation guide for you on there and also installing the omac framework what the framework actually does is it gives you the options to have different themes very easily and gives you the options to use a lot of custom plugins and for example you can see here what i use is the marant theme and what i like is when like for example i'm i really like to see the whole path of where i am actually right now and what i like of course is that it shows me the git branch and it shows me if i have changes in my git branch and i'm just really i'm really quite happy with this and what i also did here is same with your bash rc you have here a set shell rc and again here my theme is it says here my theme and the link also goes to all themes that are out there and there's a on of them so you can definitely find something that you will enjoy is there a white one a light one oh i think there's light ones oh because of the light yeah no i think there's no light one actually but this depends of where this step this well well it's theming the functionality of it so i guess you would still like me i set it to background ubuntu style so that's it and also here i have like some examples of the plugins that i use and again it's linking to all the plugins that are out there there's also stuff for docker and git aliases crazy stuff and what i especially like is this called vd it's called warp directory and the way i use this would be i type vd and then i tab and i get all the possible war points that i saved myself so this would bring me to the desktop and let's say i want to go back into the project i would type via frontend video via frontend and i'm back again on this on this one or like vr as the back end so in this case i would go back to via and the other thing that's very convenient is called less working directory so when i make a new tab i'm always back into what is open in my other terminal window so these two things i really appreciate a lot and what i also have here it says set shell auto suggestions and syntax highlighting and the way you can see it here let's say i write git status it's fine it works but if i write get status it already highlights me in red and tells me you don't have a global library installed that's called get and then of course it throws the command not found and what i also like is let's say you have this really long commands like this one so you already see in the like the history autocompletion is in line basically so when i put the right arrow key down then you you have it expanded and you can use it so this enables me to really easily and fast fastly see what i have what i have written so far like you see here i can go basically to all my things easily and don't have to type in the history and look for it or whatever yeah and i set my like suggestion style to yellow but this can already or this can depend on what kind of background color you have that is nicely for you yeah and because i don't like typing docker compose up and build i wrote like dcu and dcb into the chrc so this is also something you could do like work a lot with aliases and make some commands easier that you use frequently yeah you probably saw by now i'm using visuals to decode and i'm a big fan and i don't know why there's webstorm licenses today what i like about vs code is that it's really nice and transparent like you can can find anything you want on the github repository and they release monthly iterations of um updates to their vs code and here for example we could look into the one for april and it and you can see here what they have planned like all the check boxes here what they plan on adapting and improving and they always take a lot of feedback from the community and like for example if you notice um when you do changes in in atom you always get it when you save it you have it highlighted in yellow or when you add some stuff to git ignore you have it uh in gray like grayed out and this was not there in vs code up until probably half a year and they said that the community said okay we want this definitely and they made it work so they really listen to what the people actually want and you can of course also look into the iteration plan always and see if there's something coming up that you're really interested in and in case you definitely don't want to wait there's the insiders version and basically you could always build a new version as soon as they push a new commit into the master branch of theirs so you could install the vs code insiders version and always be up to date but this could also lead to breaking breaking things so this i would only recommend if you want to file bug reports for them if you want to contribute to the vs code repo something like that yeah so these are my settings so far in visual studio code so if you want to install it blank and you want to have something up and running already i would give this to you so i will suggest to you something that i like or that i think is necessary by default visual studio code also gives you angular 1 suggestions in the html so i disabled this and also here again it's the force um aligned else is there yeah for example it's also i think this is not very long into envious code yet but you can actually use your vs code capabilities to type check javascript so that's really convenient so it would tell you you have a string but you should use a number stuff like that it's also really nice when you work on a backend project and you discover what errors they have in there and what i also like is for example let's say you're working that you have your development branch open or your master branch and then in the meantime they have there were a lot of changes so this one like get out of fetch it always gives you the newest version of it yeah and one thing to keep in mind of i wrote like a hint here these files exclude on the top here um so for me it was annoying to have some files duplicate or you you only want to if you want to if you search for index.html you don't want to have the one in your compiled bundle stuff like that so you only want to have the the actual files that you want to work on but what this also does is it hides it in the file tree of vs code so what the problem i had is there was a package lock that always got committed and i was like where is this package log because i had it excluded here and so that is something to keep in mind not to do yeah here also listed for you all the plugins that i have the extensions and yeah this is a of course opinionated so maybe you don't need postgresql or you don't need apache something like that and the way you could install it is just write code install extension flag and then the offer name and the extension or you can just do it with the offer name or the extension in vs code itself yeah and one thing i like especially much is this settings sync it's called so when you have a github account you can upload your local settings and this as let's say you work on your laptop here and then you go back at home and then you can easily download all the settings again so it has all your extensions it has all your settings or your key bindings and you have it nice and clean through a gist on github yeah some other resources that i have here for you is angular starter boilerplate so yeah i'm not we're not using the angular cli what angular start the boilerplate is it's like the most most supported i would say like ten thousand like there's a lot of angular rappers that stopped um putting out new content and and updating them because of the angular cli but this one is still quite popular i would say yeah 11 days ago so that's fine and now they're right now working on upgrading it to angular 6 and webpack 4 this of course is like a big change again so if you want to depend on an external boilerplate template this would be a good one and yeah the franz app i saw actually at the door that the guy from france is working in the first uh in the upper floor so i'm a big fan of what it opened i'm actually a big fan of the franz app what this gives you is not really related to web development but you could definitely improve your workflow with all your social with the services you use so let's say you have a slack channel let's say you have a trello board or your work email something like that you could have it easily in one electron window and switch tabs on the on the left side here and always be up to date with something happen then you don't will not miss your emails or stuff like that because i always had to open my gmail in a chrome window and then in your home window in the chrome window you actually want to develop stuff and it always gets tangled up so this is a nice clean way of working or having it separately yeah that was my talk thank you for your attention
