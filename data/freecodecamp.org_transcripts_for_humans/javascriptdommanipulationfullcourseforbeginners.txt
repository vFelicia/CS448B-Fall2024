With timestamps:

00:00 - in this course you will learn about
00:01 - javascript dom manipulation this is
00:04 - where you use javascript to modify
00:06 - change or delete elements of a website
00:09 - in the first part of this course you
00:11 - will learn the basic features of a
00:13 - website dom and the javascript commands
00:16 - you can use to manipulate the dom in the
00:18 - second part of the course you will use
00:20 - what you have learned to create
00:22 - practical examples from beginner to
00:25 - advanced this course was created by code
00:28 - lab
00:29 - so just before we begin we're just going
00:30 - to take a look at a few prerequisites so
00:32 - this two-part tutorial is primarily for
00:34 - beginners so if you've never heard about
00:36 - the dom or maybe you're a little
00:37 - familiar with it but don't know how to
00:39 - utilize and apply it this tutorial is
00:41 - for you
00:42 - now in order to effectively understand
00:43 - the dom and how it relates to working
00:45 - with the web it's necessary to have an
00:47 - existing knowledge of html and css and i
00:49 - have crash courses on both of those if
00:51 - you want to check those out before you
00:52 - start this tutorial it's also super
00:54 - beneficial to have a familiarity with
00:56 - fundamental javascript so the syntax and
00:58 - the code structure if you guys want to
01:00 - learn about fundamentals of javascript
01:02 - check out my javascript crash course
01:03 - which covers the fundamentals so there's
01:05 - a couple things you'll need if you want
01:07 - to follow along this tutorial you're
01:08 - going to need a web browser and a code
01:10 - editor now these are all the options you
01:12 - can use and you can mix up these options
01:14 - if you like but this tutorial i'm just
01:16 - going to be using chrome and visual
01:17 - studio code again you guys can choose
01:19 - any combination you like now the
01:21 - structure of this tutorial we're first
01:22 - going to take a look at what the dom is
01:24 - then we're going to take a look at
01:25 - methods to select elements in the dom
01:27 - how we can traverse the dom how we can
01:29 - manipulate the dom and then finally
01:31 - we're going to take a look at event
01:32 - handling so we'll start this off by
01:33 - explaining what the dom is so the dom
01:36 - stands for document object model now the
01:38 - document object is a built-in object
01:40 - that has many properties and methods
01:42 - that we can use to manipulate the
01:43 - content the structure and the style of a
01:45 - project and this ability to manipulate
01:47 - the dom or the document object model is
01:49 - one of the most unique and useful
01:50 - abilities in javascript so almost any
01:53 - time a website performs an action such
01:55 - as toggling a navigation menu or
01:57 - rotating between slideshow images or
01:59 - even displaying an error when a user
02:00 - attempts to submit an incomplete form
02:02 - this is the result of javascript
02:04 - accessing and manipulating the dom now
02:06 - another way of thinking about the dom
02:07 - and understanding how it works is
02:08 - thinking of it as a tree of nodes like
02:10 - you can see on the screen now so this is
02:12 - just a basic diagram of a dom tree and
02:14 - all of its nodes now everything in this
02:16 - diagram is a type of node the elements
02:18 - the attributes the text content and even
02:21 - line breaks and comments which we'll see
02:22 - a bit later on are even considered nodes
02:24 - and all of these make up the dom tree
02:26 - now the dom object itself is actually a
02:27 - property of the window object which is
02:29 - the global top level object representing
02:31 - a tab in the browser and this window
02:33 - object has access to such information as
02:35 - toolbars the height and width of the
02:36 - window prompts and even alerts but in
02:38 - this tutorial we're only interested in
02:40 - the document object which is what is
02:42 - inside of the inner window and the stuff
02:43 - we want to manipulate now another
02:45 - important thing to note here is that
02:46 - most of these nodes in this diagram have
02:48 - a parent child sibling relationship the
02:50 - topmost node are either document node
02:52 - here is the root node of the dom tree
02:54 - which we use to access the dom and
02:55 - manipulate all of the content now this
02:57 - document node has one child node which
02:59 - is the html element and the html element
03:02 - is a parent node to the head and the
03:03 - body element
03:05 - now the head and body elements are what
03:06 - you would call siblings since they're on
03:08 - the same level in the dom tree
03:09 - underneath the head element you see it
03:11 - has one child node which is the title
03:12 - element and the text this is my website
03:15 - is a child node of the title element and
03:16 - these relationships are similar over the
03:18 - other side but the body element is the
03:20 - parent of the paragraph and the h1 the
03:22 - paragraph and the h1 are siblings to
03:23 - each other and the text content inside
03:26 - each of these elements are child nodes
03:28 - to the paragraph and h1 so the my link
03:30 - and my header our child nodes to the h1
03:32 - and the paragraph element now we can
03:34 - also see by the paragraph tag we have a
03:36 - class attribute now html attributes such
03:38 - as ids or classes in this case styles
03:41 - etc also considers nodes in the dom
03:43 - hierarchy but they don't actually
03:45 - participate in this parent child sibling
03:46 - relationship like the other nodes do the
03:48 - way they are accessed is through
03:50 - properties of the element node that
03:51 - they're contained in now often there
03:53 - will be times you want to move
03:54 - throughout the dom so understanding this
03:56 - parent-child sibling relationship is
03:57 - crucial to understanding how javascript
03:59 - works with html
04:01 - all right guys so now we know a little
04:02 - bit more about what the dom is and learn
04:04 - about the dom tree the next thing to
04:06 - cover in the tutorial is how to select
04:08 - these nodes or elements in the dom tree
04:10 - for manipulation so before we take a
04:12 - look at all these methods of selecting
04:13 - elements let's just quickly go over the
04:15 - layout you see here in the browser so in
04:17 - the index.html file
04:19 - we've got a div of the class of
04:21 - container
04:22 - inside of that we've got a heading which
04:24 - has the id of main heading and then the
04:26 - text our favorite movie franchise
04:28 - underneath that we have a ul tag which
04:30 - has five list items inside of it and
04:33 - then each of these list items have a
04:35 - class of list items so super creative
04:38 - now this is what we're going to be
04:38 - working on when we're looking at
04:40 - selecting styling traversing and
04:42 - manipulating for the rest of this
04:43 - tutorial and then underneath that we
04:44 - have a script tag
04:46 - which has the attribute of source and
04:48 - this is just linked to the
04:50 - app.js file
04:52 - so again guys in order to be able to
04:54 - manipulate an element in the dom tree we
04:56 - first have to select that particular
04:57 - element now luckily for us there's
04:59 - several ways we can do this and the five
05:01 - major ways of selecting the elements are
05:03 - the ones you see on the screen now so
05:04 - we've got get element by d get element
05:06 - by class name tag name query selector
05:09 - and query selector all now some of these
05:11 - methods are pretty self-explanatory but
05:13 - we're going to go over each of them one
05:15 - by one now so the first one we're going
05:17 - to go over is get element by id and as
05:19 - you probably guess you can select an
05:21 - element using this method by its unique
05:23 - id and this is the easiest way to find
05:25 - the html element inside the dom tree
05:27 - because as we know from css the id
05:30 - attribute is used for something unique
05:32 - now if we remember back to the html file
05:35 - you can see that we've got the h1 here
05:37 - which you see in the browser has the id
05:39 - of main heading so this is the element
05:40 - we're going to be selecting so first we
05:42 - need to select the document object model
05:44 - which is just simply document then get
05:47 - the method of get element by id
05:50 - single quote marks really important that
05:52 - you include those and then we're just
05:54 - going to grab
05:55 - the id which is main heading
05:59 - close that off now what we can do with
06:01 - this selection is actually place it
06:03 - inside of variables so we can manipulate
06:05 - it so
06:06 - we're going to go at the front here and
06:08 - just say const
06:09 - title and we'll set this to the id of
06:12 - main heading and if we log this into the
06:14 - console now
06:16 - so we'll just look in title you see it
06:18 - shows up on the console now and if i
06:19 - hover over this you can see it
06:20 - highlights in the browser there so you
06:22 - know now we've selected this element and
06:24 - then what we can do from here is now
06:25 - select that variable we just created for
06:26 - the element and we can add styles to the
06:28 - element manipulate its attributes
06:30 - traverse the element so all of that good
06:32 - stuff which we'll be looking at in just
06:33 - a moment
06:34 - now next we have the element by class
06:36 - name again quite self-explanatory this
06:38 - method returns a collection of all the
06:40 - elements in the document with that
06:41 - specified class name so for example in
06:44 - our html file here you can see all of
06:46 - our list items have that really creative
06:48 - class name of list items so we can
06:50 - select all of these using the get
06:52 - element by class name method
06:55 - so we'll do the same thing we'll put
06:57 - inside a variable we'll just say list
07:00 - item
07:02 - and we'll set it to the document
07:05 - we'll say get element by class name
07:08 - put single quote marks in there and then
07:10 - we'll just say
07:12 - list
07:14 - items i think it's items yes items and
07:18 - then we'll just log this in the console
07:19 - so we know we've selected that element
07:22 - or these elements
07:23 - and as you can see using the method of
07:25 - get elements by class name we've now
07:27 - selected all of those elements now this
07:29 - method actually returns an array like
07:31 - object of all the child elements which
07:32 - have all the given class names so if we
07:34 - open this up you can see it's indexed
07:36 - and they're in the order that they are
07:37 - in the html file
07:39 - now the next method here which is get
07:40 - element by tag name is pretty similar to
07:42 - the get element by class name and that
07:44 - accepts a tag name and returns all of
07:46 - the elements of that specified tag name
07:48 - in the order in which they appear in a
07:50 - document so again return an array like
07:52 - object for all the child elements with
07:53 - the given tag name so for this example
07:56 - i'm going to do is just copy and paste
08:00 - the class name
08:01 - example comment this out
08:04 - and then we'll just say
08:06 - tag name
08:08 - and because the list items are list
08:10 - items we just type in li and if we take
08:12 - a look at the console now you can see
08:14 - it's got that html collection of all the
08:16 - five list items and they're all indexed
08:18 - in the order that they appear in the
08:19 - html file so you can see this method is
08:21 - pretty similar to the
08:22 - getelementbyclassname method
08:24 - now the query selected method that you
08:26 - see here is used to select one item or
08:28 - the first item that matches the selector
08:30 - is given so if you have multiple items
08:32 - with the same class name or the same id
08:35 - or even the same tag it will select the
08:37 - first one it comes across so the beauty
08:39 - of this method as you probably just
08:40 - guessed is that it can accept all css
08:42 - style selectors again allowing it to
08:44 - select it by its tag or its class or
08:46 - even its id so we can actually use this
08:48 - method to actually grab
08:49 - any element in our html file here so
08:51 - what i'm going to do is use it to grab
08:53 - the div of the class of container which
08:55 - is acting as a container for the rest of
08:56 - the content
08:58 - so
08:59 - we'll just go underneath here
09:00 - and we'll create a variable and we'll
09:02 - keep it super creative and call it
09:04 - container and we'll grab the document
09:08 - and then grab the query selector method
09:11 - and again with this method we can grab
09:12 - the div tag or we can grab the class
09:14 - name or if i had an id attribute we can
09:16 - grab that instead what i'm going to do
09:18 - is grab the div tag
09:20 - and then just log this into the console
09:21 - so we know it's working
09:24 - and as you can see in the console now
09:26 - using the query selector method we've
09:28 - selected that uh div with a class of
09:29 - container
09:31 - now as i just mentioned when we're using
09:32 - the query selector it selects the first
09:34 - item that matches the selector it's
09:36 - given which in this case is the div now
09:38 - if we go into the index.html file and we
09:40 - use several more divs
09:43 - again it's only going to select this
09:44 - first div here
09:45 - if we had more divs in this example and
09:48 - we wanted to select them all we then use
09:49 - the query selector all instead
09:52 - so uh what i'm going to do actually is
09:53 - just duplicate this
09:55 - uh one more time
09:57 - uh just zoom out a little bit and then
10:00 - uh just going to change a bit of the
10:02 - word in here so favorite
10:04 - sports
10:06 - and i'm not gonna bother changing the
10:07 - names here but just to show you guys
10:08 - that it selects all of them i'm just
10:10 - gonna copy
10:13 - and paste this but instead of query
10:15 - selector we're gonna say query selector
10:16 - all and then
10:19 - comment this out
10:20 - and quickly just comment all these out
10:22 - so we can only see
10:25 - that variable there
10:26 - and if you take a look at the console
10:28 - now you can see that this method returns
10:30 - a node list of collections of all the
10:32 - matching elements that matches that
10:33 - specific css selector which in this case
10:36 - is a div so similar to the get by tag
10:38 - name and get by class name where we get
10:40 - html collection
10:41 - in this method we get a node list and as
10:43 - you can see it selected both of the
10:45 - containers
10:46 - because unlike the query selector with
10:48 - query selector all it's selecting all of
10:50 - the divs in the index.html file so
10:53 - that's how we can select elements with
10:54 - the query selector and the
10:55 - queryselectoral method so to quickly
10:57 - summarize this section when you need to
10:59 - select a dom element you have five
11:00 - different options to choose from five
11:02 - different ways of essentially doing the
11:03 - same thing which is selecting an element
11:05 - or elements
11:07 - personally i primarily use query
11:08 - selector and query select all because
11:10 - these methods select elements through
11:12 - css selection and i primarily use this
11:14 - to select ids and classes mainly because
11:17 - these css selectors provide a really
11:18 - powerful and efficient way of selecting
11:20 - html documents especially ids because
11:23 - you likely understand that elements
11:24 - shouldn't have the same id that the id
11:27 - is a unique identifier of that element
11:29 - within the document so with that in mind
11:31 - selecting an element with its id is a
11:33 - safe bet because you wouldn't go and
11:34 - apply manipulation to different elements
11:36 - unless perhaps that's what you want to
11:38 - achieve in that case the query select
11:39 - all method and the class selector is
11:42 - what i typically use so now we know all
11:44 - the different methods that we can use to
11:45 - select an element in the dom tree we
11:47 - could finally start doing some
11:48 - manipulating now so firstly what we'll
11:50 - do is just get rid of all of this
11:52 - content here
11:54 - and then head in the index.html file and
11:57 - just get rid of the second container so
12:00 - we don't really need it
12:01 - so let's start things off by taking a
12:03 - look at how we can change the styling of
12:04 - an element so if you are familiar with
12:06 - css and css properties we have a way we
12:09 - can access these properties in
12:10 - javascript so the first thing we'll do
12:12 - is just select this main heading which
12:14 - we have in our index.html file here
12:16 - which is just the title of the container
12:19 - and so we're going to put that in a
12:20 - variable
12:22 - and we'll call this variable title
12:25 - and then document.queryselector
12:29 - method and we'll grab the id of this
12:32 - element which is main
12:33 - heading
12:35 - oh i need to put these in a
12:37 - single quote marks
12:39 - and then let's just log this in the
12:40 - console so we know
12:42 - this variable is working and as you can
12:45 - see now we've selected this element and
12:46 - stored inside the
12:48 - variable of title so what we can do now
12:50 - is actually manipulate the starting of
12:52 - this element and change it around using
12:53 - css properties so to access css
12:56 - properties in javascript we'll just
12:58 - first grab the variable we want to apply
13:00 - the styling to which in this case
13:02 - is the title or the main heading and
13:04 - then we simply type in the style
13:06 - property and then after this style
13:08 - property you just use any css property
13:10 - you want to apply to this element so
13:12 - what we'll do is just change the color
13:13 - of the text
13:14 - and we'll set this to
13:16 - let's say red
13:18 - and as you can see in the browser now
13:19 - we've changed the color of the main
13:21 - heading from white to red using the
13:23 - style property and then the css property
13:25 - of color now this type of styling is
13:27 - what you'd call inline styling and there
13:29 - are other methods to style elements with
13:31 - javascript but this is probably the most
13:32 - direct method now again if you take a
13:34 - look at the console you can see it's
13:35 - actually included the style attribute
13:37 - again because this is actually done
13:38 - through inline styling now it's
13:40 - important to know this because with
13:41 - inline styling this actually only works
13:43 - on a single element if i tried let's say
13:46 - applying it to all of the list items
13:48 - here this wouldn't actually work so just
13:50 - going to demonstrate that to you guys
13:53 - so let's uh create another variable
13:56 - and we'll call it list
13:57 - items
13:59 - and we'll grab all of those list items
14:02 - with query selector all
14:06 - uh they will have
14:08 - they all have um
14:11 - a class of list items
14:14 - and then let's just log in here
14:17 - list items
14:19 - uh
14:23 - so you see now in the console we've
14:24 - selected all of those list items now
14:26 - let's try and use the style property
14:28 - again on these list items and see if it
14:30 - works so we'll say style
14:32 - let's say let's try and change the color
14:33 - again or let's actually do the font size
14:37 - and just quickly guys i wanted to
14:38 - mention that it's important to remember
14:40 - while using the style property css
14:42 - properties are written in camel case and
14:44 - not with a more standard snake case
14:45 - which has the dash so the camel case is
14:48 - essentially just a capital letter to
14:49 - begin the second word and any subsequent
14:51 - word in the name or method or even a
14:53 - property
14:54 - font size in css would be written like
14:57 - this but in javascript we'll use camel
15:00 - case so just so you guys are aware of
15:03 - that now again back to what we were
15:05 - talking about if i tried changing all of
15:07 - the
15:08 - font size of these list items here so
15:10 - let's say to about two rem you can see
15:12 - this isn't actually working because it's
15:14 - trying to apply
15:15 - an inline style to uh five different
15:18 - list items which wouldn't work if we
15:20 - actually wanted to apply this styling to
15:22 - all of the list items we need to loop
15:23 - through the list items first
15:25 - so just to show you guys how that would
15:26 - work
15:28 - uh we'll say i equals
15:32 - zero
15:33 - and then uh we'll say i
15:36 - is less than the list
15:39 - dot length which just gives us the
15:41 - amount of list items
15:43 - inside of our um ul here which is five
15:47 - and then we want to say we want this to
15:48 - increment
15:50 - by one
15:52 - each time and then what we do now is
15:55 - just apply this
15:56 - and put it inside of our for loop and
15:59 - then
16:00 - we just need to index the eye and as you
16:02 - can see now it's quite subtle so let's
16:04 - just make it a bit bigger
16:06 - you can see all of the list items now
16:08 - have that styling because it's been
16:09 - looped through using the for loop so
16:11 - that's how we can apply inline style
16:12 - into elements um using the style
16:14 - property or multiple elements if we loop
16:17 - through them the next thing i want to
16:18 - take a look at is creating elements so
16:20 - what i'm going to do is just comment all
16:21 - of this out first
16:23 - get rid of
16:24 - the list items there i'm just going to
16:26 - put a comment here for
16:28 - styling
16:29 - elements
16:32 - and then now we'll do one for
16:34 - creating
16:38 - elements
16:39 - so again another really cool thing about
16:40 - dom manipulation is that we can create
16:42 - elements from our javascript file here
16:44 - and we do that with a simple method
16:46 - really of the create element
16:48 - so let's say we want to add another list
16:49 - item here in our favorite movie
16:51 - franchise uh container what we need to
16:54 - do first is
16:55 - just create a variable for the unordered
16:57 - list
16:59 - um because we need to enter this on
17:00 - order list
17:01 - uh so we'll say document dot
17:05 - query select that
17:08 - grab the ul
17:10 - and then what we'll do now is use the
17:12 - career elements method to create another
17:14 - list item
17:15 - so we'll just use another variable here
17:18 - so document
17:19 - dot
17:21 - create
17:22 - element
17:24 - and we'll create a list item
17:26 - now this isn't actually going to do
17:28 - anything at the moment this element
17:29 - we've just created in this variable here
17:31 - needs to be inserted into our document
17:33 - and the way we can add elements inside
17:34 - of the document is using the append
17:36 - method
17:37 - so what we'll do is first grab the ul
17:39 - because we want to append this list item
17:41 - inside this ul
17:43 - and then we grab the pen method
17:45 - and the element we want to append which
17:47 - is the variable of li which again is
17:49 - just this list item now you won't be
17:51 - able to see it currently at the moment
17:52 - but if we take a look at um the document
17:55 - here and if we open this up
17:57 - and then open up the div the classic
17:59 - container open up the ul you can see
18:01 - there's an extra list item inside of
18:03 - this ul now because we've inserted this
18:05 - element now using the append method now
18:08 - what we can do from here is add some
18:09 - content inside of our list item
18:12 - so i'm just going to
18:13 - bring this back down
18:15 - go back in the console
18:16 - and i'm just gonna put a comment here
18:18 - for
18:20 - adding
18:22 - elements
18:25 - and then off this we're just gonna say
18:27 - um
18:28 - modifying the text
18:31 - now we don't really need this console
18:32 - log anymore so there are several ways we
18:34 - can include text or modify text in our
18:36 - html and those ways are inner text text
18:39 - content and in html now there is a
18:42 - difference between three so to
18:43 - demonstrate those differences i'm just
18:45 - going to put another html tag inside of
18:49 - the first list item here
18:51 - so i'm just going to put a span
18:53 - i'm going to put neo
18:55 - because that's relevant to the matrix
18:57 - and then i'm just going to create
18:59 - another variable
19:01 - to grab that element there so we're
19:02 - going to say first
19:05 - list
19:06 - item
19:07 - set that to the document
19:10 - and say query selector and then we'll
19:13 - grab that list item
19:19 - and then i'm just going to grab the
19:21 - console log again actually and put in
19:23 - here first
19:25 - list item
19:32 - oh forgotten s
19:34 - so there's our first list item now what
19:36 - i'm going to do here is include in our
19:39 - text first
19:42 - so it just displays the text duplicate
19:44 - this a couple more times and i'm going
19:46 - to grab text content
19:49 - and then also grab
19:51 - in
19:52 - html so if i just pull this up a bit
19:54 - more now if you take a look at the
19:56 - console you can clearly see the
19:57 - differences uh between the three now and
20:00 - that is essentially just the way they're
20:01 - displayed so within a text here you can
20:03 - see we're simply getting the visible
20:04 - text contained inside that node with
20:06 - text content you see it's actually being
20:08 - displayed the same way it is in the html
20:10 - file so it's got all those indents and
20:12 - it's jumping onto a new line
20:15 - and within html a similar sort of thing
20:17 - with the indents and jumping on new
20:19 - lines but it's also showing the tags so
20:21 - showing us the span tags inside of our
20:23 - html here so again that's pretty much
20:25 - the differences between the three now
20:27 - another thing here is that within a html
20:29 - there is a bit of a danger using inner
20:31 - html and that's mainly at security
20:33 - issues you don't really want user input
20:35 - to be displayed in the inner html
20:37 - because this actually allows the user to
20:39 - control the javascript and the html on
20:41 - your web page which obviously has its
20:43 - problems there so in most cases you're
20:45 - just going to use inner text so let's go
20:46 - ahead and use that and implement that in
20:48 - our list item that we created
20:50 - so we're just going to grab the li grab
20:52 - in a text
20:55 - and
20:57 - we're going to set this
20:58 - to equal
21:00 - let's say x-men which is another
21:02 - franchise if you take a look at the
21:04 - browser now you can see that text has
21:05 - been included inside of our list item
21:07 - now all right guys so we've created our
21:09 - list item here we've added it into the
21:11 - ul using the append method and we've
21:13 - also given it some text the next thing i
21:15 - want to do now is make our list item
21:17 - look like the rest of the list items so
21:19 - to do that we're going to need to learn
21:20 - how to modify and manipulate an
21:22 - element's attributes or classes luckily
21:24 - for us javascript provides several
21:26 - methods and properties for add-in
21:27 - removing or changing the html elements
21:29 - attributes or classes
21:31 - so we're going to go underneath here and
21:32 - just put a comment of
21:34 - modifying
21:36 - attributes
21:38 - and classes
21:41 - and the first method we're going to take
21:42 - a look at is the set attribute method
21:44 - so we'll grab our list item and we'll
21:46 - say set attribute and as you probably
21:48 - guessed because it's pretty
21:49 - self-explanatory what it does is set an
21:51 - attribute to our specified element which
21:53 - in this case is our list item so for
21:55 - this attribute we need to include two
21:56 - values the first is the attribute you
21:58 - want to set which will just put an id
22:01 - and then the second is the name you want
22:02 - to give that attribute so we'll just
22:04 - give this attribute let's say
22:07 - let's give it the id of main heading
22:11 - and as you can see in the browser now
22:13 - because we've given this list item the
22:14 - same id as our main heading here which
22:16 - is main heading
22:18 - you can see it's got the exact same
22:19 - styling so as you can see the set
22:21 - attribute method is quite powerful now
22:22 - the next method i want to take a look at
22:24 - is how we can actually remove this
22:26 - attribute so we'll go underneath here
22:28 - and we'll say li dot
22:31 - remove
22:32 - attribute
22:34 - again pretty self-explanatory so let's
22:35 - say we want to remove the id from our
22:38 - list item there all we put in here is
22:40 - just id
22:41 - close that off and you can see now it's
22:43 - reverted back to its default styling and
22:46 - doesn't have that styling that the main
22:47 - heading does now there's also a way we
22:49 - can access attributes in javascript so
22:52 - which follows a similar sort of method
22:54 - so we'll say let's say we want to get
22:55 - the attribute of our
22:57 - main heading here what we need to do is
23:00 - first let's just create a variable for
23:01 - it so const
23:03 - and we'll say title
23:05 - equals document
23:07 - dot query selector
23:11 - and then grab the
23:13 - main heading
23:16 - and then let's just log this in the
23:18 - console so we'll say um title dot get
23:23 - attribute
23:25 - that we want is the id
23:28 - and as you can see in the console now
23:29 - it's giving us main heading which is the
23:30 - id associated with our main heading here
23:32 - so that's how we can deal with
23:34 - attributes here let's take a look at how
23:35 - we can deal with classes
23:37 - so i'll just get rid of all of this and
23:39 - we'll grab our list item again and then
23:41 - we'll use the property of class list now
23:43 - this classlist property has quite a few
23:46 - methods we can utilize and the first one
23:47 - we'll take a look at is how we can use
23:49 - the add method which of course will just
23:51 - add a class to our list item so we'll
23:53 - say dot add
23:55 - so let's say list
23:57 - items
24:00 - and as you can see when we add that
24:01 - class now our last list item here is the
24:03 - exact same styling as the other list
24:05 - items because again we've added the same
24:07 - class as the rest of the list items now
24:09 - what we can also do here is remove this
24:12 - so we'll say
24:13 - remove
24:14 - and again it will just revert back to
24:15 - its default styling because of course
24:17 - we've removed that class now
24:19 - now another thing we can find out is
24:20 - whether an element has that specific
24:22 - class
24:23 - so um i'm just going to log this item
24:27 - into the console here class list and
24:28 - we'll use the method of contains
24:31 - and we're going to find out if it
24:32 - contains
24:34 - list items
24:35 - and as you can see it's returning us
24:37 - false because of course we remove that
24:39 - class now
24:40 - up here so it's giving us false if we
24:42 - change this method to add instead you
24:46 - see now it's returning us true because
24:47 - of course a list item here now does
24:49 - contain uh this class here
24:51 - so that's how we can modify attributes
24:53 - and classes in the dom of course the dom
24:55 - has many more methods than this but
24:57 - these are just some of the core methods
24:58 - you'll likely need to use now there is
25:00 - still one method left to use and that's
25:02 - how we can remove an element and the
25:03 - method to remove an element or our list
25:05 - item in this case is a pretty simple
25:07 - method to remember i'm just putting here
25:09 - first remove
25:12 - elements
25:15 - so all we need is the remove method so
25:18 - we'll say li dot
25:20 - remove and if you take a look at the
25:22 - console now you can see that the list
25:23 - item has been removed and if we just
25:26 - open up
25:27 - all of the elements and we'll open up
25:29 - the div here
25:31 - and open up our url you can see that
25:33 - list item is no longer there so we've
25:35 - learned quite a bit about the dom now
25:37 - we've learned how to access elements and
25:38 - dom we've also learned how to create add
25:40 - modify style and remove elements in the
25:42 - dom too the next thing i want to take a
25:44 - look at is how we can navigate the dom
25:47 - so i'm just going to bring you guys back
25:48 - to the slide which we looked at at the
25:49 - beginning of this video where we have a
25:51 - really basic diagram of a dom tree and
25:53 - all of its nodes now everything in this
25:55 - diagram that you see here is a type of
25:57 - node so that includes the elements the
25:58 - attributes the text content and even
26:01 - line breaks and comments inside the html
26:03 - document are considered nodes and all
26:05 - these together make up the dom tree now
26:07 - the dom object itself is actually a
26:09 - property of the window object which is
26:11 - the global top level object representing
26:13 - the tab in the browser the window object
26:15 - has access to so much information such
26:17 - as the toolbar the height the width of
26:19 - the window
26:20 - even things like prompts and alerts but
26:22 - in this tutorial we're only interested
26:24 - in the document object which is what is
26:25 - inside of the inner window and the stuff
26:28 - that we want to manipulate now if you
26:29 - also remember back to the beginning of
26:31 - this tutorial
26:32 - most of these nodes in this diagram have
26:34 - a parent child sibling relationship the
26:36 - top most note i.e the document node is
26:38 - the root node of the dom tree which we
26:40 - use to access the dom and manipulate all
26:42 - the content now this document node here
26:44 - has one child node the html element the
26:47 - html element is a parent node to the
26:49 - head and the body elements now the head
26:51 - and body elements are what you would
26:52 - call siblings since they're at the same
26:54 - level in the dom tree underneath the
26:57 - head element you see it has a child node
26:58 - which is the title element and the text
27:00 - this is my website is a child node of
27:03 - the title
27:04 - element these relationships similar over
27:07 - on the other side here where the body
27:08 - element is parent to the paragraph and
27:10 - the h1 the paragraph and h1 are siblings
27:12 - and the text content inside of each of
27:14 - these elements are child nodes so the my
27:16 - link and then my header are child nodes
27:18 - the h1 and the paragraph element as you
27:21 - can see here we also have a class
27:22 - attribute and html attributes such as
27:24 - ids styles classes etc also considered
27:28 - as nodes in the dom hierarchy but they
27:30 - don't actually participate in the parent
27:32 - child relationship like other nodes do
27:34 - they're accessed as properties of the
27:36 - element node that contains them so they
27:38 - would be a property of the paragraph tag
27:39 - for example in this diagram now often
27:42 - there will be times where you want to
27:43 - move through the dom without specifying
27:45 - each and every element or node
27:46 - beforehand so learning how to traverse
27:48 - the dom tree is essential to
27:50 - understanding how to work with
27:51 - javascript and html so let's head back
27:53 - into vs go now and look at the different
27:54 - ways we can traverse the dom
27:56 - alright guys so it's pretty drilled in
27:57 - now that we're aware that the dom is
27:59 - full of different types of nodes which
28:00 - have parent child sibling relationships
28:03 - and if we just head into the html file
28:05 - here just to see this in action you can
28:08 - see that the html element is the parent
28:09 - of the head and body element and the
28:11 - body element is the parent to the div
28:13 - but not the h1 here or the ul since
28:16 - these are two levels down from the body
28:18 - now the h1 and the ul are what you would
28:19 - call siblings because they're on the
28:21 - same level
28:22 - so what we're going to do here is use
28:23 - this ul and traverse upwards in the dom
28:25 - and find out what the parent of the ul
28:27 - is and also the grandparent so we'll
28:29 - head back into the app.js file and go
28:31 - underneath parent no traversal and let's
28:34 - just first create a variable to grab
28:35 - that ul so we'll say let
28:38 - ul
28:39 - equals document
28:41 - dot query selector
28:46 - and then grab the ul
28:50 - and then just log this in the console
28:54 - so we've got a ul then you can see it
28:55 - hovers over it and as you know nodes in
28:57 - the dom are referred to as parents
28:58 - children or siblings depend on the
29:01 - relationship to other nodes now the
29:02 - parent of any node is a node that is one
29:04 - level above it or closer to the document
29:06 - in the dom hierarchy so to find out the
29:09 - parent node here we have two options so
29:11 - the first option
29:13 - is parent node
29:15 - duplicate this
29:17 - and we also have parent element and as
29:20 - you can see in the console now we're
29:21 - getting the div with the class of
29:22 - container because this is the parent of
29:25 - the ul here
29:26 - now say we wanted to actually traverse
29:28 - upwards again and find out the
29:30 - grandparent of the ul all we need to do
29:32 - is double down by chaining the property
29:33 - together so after parrot node we just
29:36 - write paranoid again
29:38 - and we'll do the same thing with parent
29:41 - element
29:43 - and as you can see now in the console
29:45 - we're getting the output of body because
29:47 - two levels up from the ul here first is
29:50 - a container and then the body so as you
29:52 - can see what we've done here is managed
29:53 - to traverse up the dom tree from the ul
29:55 - to figure out what the grandparent is so
29:57 - it's really useful to know these kind of
29:59 - properties now you may be wondering what
30:01 - the difference is between these two and
30:02 - it will make more sense when we take a
30:04 - look at how we can traverse child nodes
30:05 - in just a moment but basically the clue
30:08 - is in the name so you can see here we
30:09 - have parent element and parent node and
30:11 - we know that elements are a type of node
30:13 - and this is where it can confuse people
30:15 - because as we know notes can be text it
30:16 - can be a document
30:18 - comments or even line breaks so this
30:20 - distinction can help grasp the
30:21 - difference between the two now that
30:23 - might still confuse you guys a little
30:24 - bit so i'm just going to show you
30:26 - this in action so i'm going to comment
30:28 - all these out and i'm just going to
30:29 - create a variable for our html element
30:34 - so we're going to set this to document
30:37 - dot
30:38 - document element
30:41 - and then i'll just log this in the
30:42 - console again
30:43 - so we'll log in here html
30:46 - and you can see we've selected our html
30:48 - there now i'm going to do the same thing
30:50 - and apply the parent node and the parent
30:51 - element property to this html
30:54 - variable say parent
30:56 - node duplicate this and we'll say parent
31:00 - element
31:01 - and as you can see when we take a look
31:02 - at the console now the parent element is
31:04 - returning us null that's because the job
31:06 - of the parent element property here is
31:07 - to try and retrieve the parent element
31:09 - of the html element ie the document node
31:12 - however the document node and an element
31:14 - node aren't the same type of node hence
31:16 - why we're getting this null here so the
31:17 - parent node property will try to
31:19 - retrieve any node regardless that type
31:21 - of node so generally parrot node is more
31:23 - commonly used when we're traversing the
31:24 - dom again even if you use parent element
31:26 - you likely won't run into this problem
31:28 - so that's how we can navigate upwards of
31:30 - the dom let's now take a look at how we
31:31 - can traverse downwards in the dom by
31:33 - taking a look at the child node
31:34 - traversals in the dom tree so for this
31:36 - example we're still going to stick with
31:37 - the ul and we're going to traverse
31:38 - downwards into the list items so i'm
31:41 - just going to comment this out
31:42 - and then go underneath the comment and
31:44 - because we're sticking with the ul here
31:47 - i'm just going to
31:49 - put this
31:50 - here so we can see it and i'm just going
31:52 - to console log in ul now just like the
31:54 - property of paranormal and parent
31:56 - element we also have child node
31:57 - properties and child element properties
31:59 - which pretty much work in the exact same
32:01 - way so let's first take a look at the
32:03 - child nodes property and see what it
32:04 - gives us so after the ul i'm just going
32:07 - to type in here
32:08 - child nodes you can see in the console
32:10 - now it's giving us a node list and if i
32:12 - open this up we get a list of every
32:14 - child node inside of the ul now again
32:16 - this is where the distinction between
32:17 - nodes and elements becomes more evident
32:19 - because you might have expected this
32:20 - property here to give us the five list
32:22 - items but in addition to the five list
32:24 - items six text nodes this is because we
32:26 - actually wrote out our own html this
32:28 - wasn't generated by javascript and
32:30 - inside of the html here the indentation
32:33 - between element nodes is counted in the
32:35 - dom tree as text nodes that so just to
32:37 - show you guys what happens if i remove
32:39 - one of those indentations so i'm just
32:40 - going to put this list item
32:42 - in the same line as the fourth one you
32:44 - can see now in the node list it's saying
32:45 - 10 instead of 11 again because
32:47 - indentations are counting as text nodes
32:49 - so again that distinction between nodes
32:51 - and element nodes becomes even more
32:52 - evident
32:54 - so what we'll do is actually just put
32:55 - that in another line again so we get a
32:57 - node list of 11. now as well as this
32:59 - child noise property here we also have
33:01 - first and last child and as you probably
33:03 - guessed this just selects the first and
33:04 - last child node of our list here
33:07 - so
33:08 - i'm just going to duplicate this a few
33:09 - more times
33:10 - and for this example we need to write as
33:12 - just
33:13 - first child
33:15 - and
33:17 - last child
33:19 - and again this is just returning us text
33:21 - nodes because if we take a look at the
33:23 - um node list here you can see that the
33:26 - first index is a text node and then the
33:28 - last index is also a text node now when
33:30 - we're using first chart and last child
33:32 - here which is selecting the first and
33:34 - last node we need to be very mindful if
33:36 - we try styling element using this
33:37 - property so just to show you guys what i
33:40 - mean uh if i
33:42 - grab the ul here
33:44 - and i say first
33:45 - child
33:47 - and we're gonna style
33:49 - first child
33:50 - we'll say background
33:52 - color and we'll set it to
33:54 - let's say
33:55 - blue
33:56 - you can see we're getting an error now
33:58 - because the first
33:59 - child here is actually a text node it's
34:01 - not an element now to select the node we
34:03 - want to apply this styling to what we
34:05 - can do instead of using first child here
34:08 - is grab the
34:09 - child
34:10 - nodes
34:12 - property
34:13 - and then take a look at the node list
34:15 - and i think we wanted to apply the style
34:17 - into this item which is indexed.1
34:20 - so we grab our square brackets
34:22 - grab the first index number and if you
34:24 - take a look at the browser now you can
34:26 - see that our first list item here has
34:28 - the background color of blue which we
34:29 - applied here in this styling now again
34:32 - like the parent element here we also
34:33 - have the same thing for the children
34:35 - elements which is only going to select
34:37 - the element nodes
34:38 - so what we'll do is just
34:40 - comment all these out
34:42 - and we'll use that ul again
34:45 - and we'll log in uh let's log in ul and
34:49 - then grab
34:50 - children
34:52 - now instead of a node list you can see
34:53 - it's returning also html collection and
34:55 - it says it's five which is these five
34:57 - list items inside of our ul now again
35:00 - like first try on our last child we can
35:01 - do the exact same thing
35:03 - for the first child elements so we'll
35:05 - say first
35:08 - child
35:09 - element
35:10 - so that's how we convert downwards into
35:12 - the dom using child node properties so
35:14 - lastly now we're just going to take our
35:15 - sibling no traversal so again knows that
35:18 - our siblings are nodes that are on the
35:19 - same tree level in the dom so if we take
35:22 - a look at our html again we know that
35:24 - the h1 and the ul are siblings to each
35:27 - other because they're all on the same
35:28 - level now it's also important to note
35:30 - here that siblings don't have to be the
35:31 - same type of node like they are here as
35:34 - element nodes if i put a text comment
35:36 - between the two of these so i'm just
35:37 - going to put in here
35:39 - uh
35:40 - space
35:41 - between
35:42 - this too would classify as a sibling to
35:44 - the h1 and the ul because they're all on
35:46 - the same level so let's put that in a
35:47 - visual perspective for you guys so i'll
35:49 - go back into the app.js file and i'll
35:52 - underneath this comment here
35:54 - and i'm just going to grab our uo
35:56 - again and comment these out
36:01 - and just log this into the console here
36:04 - so we get our ul again
36:06 - now just like the two previous traversal
36:08 - properties we have properties for node
36:10 - which covers all the nodes and we also
36:12 - have properties which just cover element
36:13 - nodes so let's first take a look at
36:15 - select all types of nodes so after the
36:17 - ul here we've got the previous sibling
36:21 - and if i duplicate this we've also got
36:25 - the next sibling
36:27 - and you can see in the console now we're
36:28 - getting two text nodes and just to show
36:30 - you why we're getting two text nodes i'm
36:31 - just gonna create another variable for
36:33 - our div just call this div
36:41 - we'll grab the div
36:43 - and we want to find out
36:46 - all of the child nodes inside of that
36:48 - div
36:49 - oh it's about div wrong
36:52 - you can see we'll open this up now and
36:54 - as you can see when we've used these two
36:55 - properties here we've got the ul before
36:57 - the ul is a text node and after the ul
36:59 - is also a text node so that's how these
37:02 - two properties here are working now
37:04 - again like the other properties we used
37:05 - beforehand with parent element and all
37:07 - of these child element notes we have the
37:09 - exact same thing for sibling no
37:10 - traversal so again if you just wanted to
37:11 - find out the sibling element nodes
37:14 - instead of using previous sibling and
37:16 - next sibling we can use
37:19 - the
37:21 - previous element sibling
37:24 - and
37:26 - we can also use next
37:28 - element sibling
37:32 - and i'm just going to comment out this
37:34 - if you take a look at the console now
37:35 - you see we're getting the h1 because
37:37 - this is the previous element sibling
37:38 - node
37:40 - um beforehand in the html as you can see
37:42 - here and then for the next element
37:45 - sibling we're getting a null because
37:46 - there's no element nodes after the
37:48 - ul all right guys so we've gone through
37:51 - quite a bit of information now regarding
37:52 - the dom we've looked at what that dom is
37:54 - we've looked at how we can add elements
37:56 - to the dom style elements in the dom
37:58 - remove and modify elements in the dom
38:00 - and we've just learned how we can
38:01 - traverse the dom the last topic i want
38:03 - to cover in this tutorial is taking a
38:05 - look at event listeners now event
38:07 - listeners are among the most frequently
38:08 - used javascript structures in web design
38:11 - and what they do is basically just allow
38:12 - us to add interactive functionality to
38:14 - html elements by listening to different
38:16 - events that take place on the page such
38:18 - as when a user presses a key or when
38:20 - elements load or when a user clicks a
38:22 - button now the most common events you
38:24 - might listen out for are load events
38:26 - touch start events key down events mouse
38:29 - over events and of course click events
38:31 - now we'll take a look at some of these
38:33 - in just a moment and i will leave a link
38:35 - in the description if you guys want to
38:36 - check out all the other dumb events but
38:37 - let's learn about the two most common
38:39 - ways we can add event listeners in our
38:41 - projects now the first way we can
38:42 - include an event is actually inside of
38:44 - our index.html and directly inside one
38:47 - of these elements so what this event is
38:49 - is the global on event attribute and
38:51 - this way of creating an event to an
38:52 - element works pretty much like any
38:54 - attribute we inserted directly into the
38:56 - html element that's present on the page
38:58 - or the element we want to apply the
39:00 - event to and then apply a one line of
39:02 - script to that particular element which
39:03 - in this case is going to be this button
39:05 - here for our first example so we'll go
39:07 - inside the opening tag here like we did
39:09 - with any other sort of attribute and
39:11 - then we include whichever event we'd
39:12 - like to happen for this example we're
39:14 - going to use an on click event so we'll
39:16 - say on click and what i want to fire off
39:18 - when we click on this button is just to
39:20 - show us an alert box that has the
39:21 - content of i love javascript so we'll
39:24 - put in here
39:26 - alert and then we'll put the content of
39:29 - i
39:31 - love
39:33 - java
39:34 - script and that's all we need to write
39:36 - for this attribute so the syntax for
39:37 - this as you can see is pretty simple
39:39 - we've included the on click event
39:41 - attribute so when we click on the
39:42 - specific button in the browser now the
39:44 - event will fire off and the alert
39:46 - function will be executed which will
39:48 - have the text i love javascript inside
39:49 - of it so we'll head into the browser now
39:51 - and i'm going to click on this button
39:53 - here
39:54 - and as you can see when i click on the
39:55 - button the alert box pops up and it's
39:57 - got the content of our love javascript
39:59 - which we wrote inside of this attribute
40:00 - here so that's the first way we could
40:02 - include an event in our projects which
40:04 - is just direct into the html on that
40:07 - element we will apply the event to so
40:09 - pretty simple and probably the most
40:10 - direct method of including an event
40:12 - listener inside of our project now the
40:14 - next method to create an event listener
40:15 - is the javascript ad event listener
40:17 - method so to create that we'll head back
40:19 - inside our app.js file and the way this
40:21 - method works is first include a element
40:24 - that we want to apply the event listener
40:25 - to so we'll just put in here element
40:29 - and then we use the add
40:31 - event
40:32 - listener
40:33 - method and then inside of here we
40:36 - include the type of event in this
40:37 - example we'll use another click event
40:40 - and then after this the second parameter
40:42 - is the function we want to fire off
40:44 - and then we also have an option here for
40:46 - a third parameter which will take in a
40:48 - boolean data type so true or false and
40:50 - this is in relation to bubbling and
40:52 - capturing which we will speak about in a
40:53 - moment but we're not going to include
40:55 - that at the moment because by default
40:56 - it's already false so it's not too
40:58 - important yet so we'll just close that
41:00 - off so that's essentially the syntax
41:02 - i've had an event list now using the ad
41:04 - event listener method so for this
41:06 - example we're going to use the example 2
41:07 - button here and again we're going to
41:09 - create another alert box
41:11 - so the first thing we want to do is
41:13 - create a variable
41:14 - for us to
41:16 - reference from so we'll call it button
41:18 - 2.
41:20 - and
41:21 - the button
41:22 - two in the html here you can see has a
41:24 - class of btn so we're gonna retrieve
41:27 - that so document.queryselector
41:31 - and then
41:33 - grab the btn
41:35 - 2
41:37 - and then first we want to create a
41:38 - callback function
41:40 - so the function we'll call this
41:43 - alert
41:44 - btn
41:47 - and inside of here we'll just put
41:49 - another alert box
41:51 - and then type in here i
41:53 - also love
41:55 - java
41:56 - script and then what we need to do now
41:58 - is include our event listener so i'm
42:00 - just gonna copy the syntax
42:04 - paste in here the element
42:07 - is that button two so we've got our
42:08 - advent listener method there
42:10 - and then the function is gonna be that
42:13 - alert
42:14 - btn and we've got a little i'm saying oh
42:19 - we've got the e in listener
42:21 - so what we've done now is included a
42:23 - click event on the uh button two which
42:25 - is this button here so when we click on
42:27 - this this alert box should fire off and
42:29 - should appear at the top of the screen
42:31 - with the content again of i also love
42:33 - javascript so let's test this out
42:35 - and as you can see now this event is
42:38 - working and we're getting our alert box
42:39 - which has the content of i also love
42:41 - javascript so that's how we can use the
42:43 - advantage listener method here
42:45 - so let's take a look at a another
42:47 - example for example three so instead of
42:49 - a click event we'll look at a mouse over
42:51 - event
42:52 - so uh
42:53 - say mouse over here so for this example
42:56 - instead of clicking on a button here
42:58 - when i move the mouse over i want the
43:00 - background of this whole box to change
43:02 - so to do that let's first grab i think
43:06 - it's
43:07 - box three so we'll create a variable for
43:09 - it
43:10 - and we'll call this variable new
43:13 - background color
43:16 - grab the box so document.query selector
43:21 - and it's
43:22 - box
43:24 - three then we'll first create the
43:27 - function so we'll say function
43:30 - change
43:32 - vg
43:34 - color
43:35 - so we'll grab that variable now new
43:38 - background color
43:40 - style
43:42 - dot
43:43 - background
43:45 - color
43:48 - and let's set it to the color of blue
43:52 - and then uh
43:54 - we'll now include that mouse over event
43:56 - so we'll grab the variable add event
43:58 - listener method
44:00 - uh and we'll say
44:03 - mouse over
44:06 - and then the function which is change
44:08 - vg color
44:10 - so if i head over to example three if i
44:12 - now move the mouse over the box here it
44:15 - should change its background color to
44:16 - blue
44:17 - and as you can see that's working as it
44:19 - should manage to change the style of our
44:21 - third box using the mouse over event and
44:22 - the event listener method now generally
44:25 - people do tend to use the ad event
44:26 - listener method more than the html on
44:28 - event method typically because you can
44:29 - apply as many event listeners to an
44:31 - element through the ad event listener
44:33 - method whereas with the html on event
44:35 - method you can only apply it once so if
44:37 - you had one event already on a html
44:39 - element and then you try to plan another
44:41 - one that new one would override the old
44:43 - one but again if you only want to apply
44:44 - one event the on event method works
44:46 - perfectly fine so these were some really
44:48 - basic example guys of how we can
44:50 - implement event listeners we'll now take
44:52 - things a little step further by creating
44:54 - a reveal hide event where we click a
44:55 - button to display some text which is
44:57 - originally hidden
44:59 - all right guys so the really cool thing
45:00 - about event listeners is that we can
45:01 - combine them with css and other
45:03 - javascript tools to create interactive
45:05 - and fun constructs which for this part
45:07 - of the tutorial is our simple example
45:08 - here where we have a button and then
45:10 - when i click on this button you can see
45:12 - it reveals more text if i click on the
45:13 - button again it hides the text now the
45:16 - html for this example is really simple
45:17 - so we've got a div here with a colossal
45:19 - container inside of that div we've got a
45:21 - button element which has the class of
45:23 - reveal btn and the class of boxes which
45:25 - is just a general class underneath that
45:28 - we have it with a class of hidden
45:29 - content which has all of our dummy text
45:31 - inside of it this also has a class of
45:33 - boxes
45:34 - and this is what it currently looks like
45:35 - right now in our live server now the
45:38 - first thing i want to do here is go into
45:39 - app.js file and create two constants so
45:41 - we grab those two elements so the first
45:43 - one is going to be for our button we'll
45:45 - just call this
45:46 - reveal
45:48 - btn
45:50 - and then we'll say document
45:52 - dot query selector
45:55 - and we'll grab that element which has a
45:57 - class of reveal btn and then we want to
46:01 - create another constant for our hidden
46:03 - section so we'll call this uh
46:06 - let's call this hidden content
46:09 - and then document.queryselector
46:13 - and then grab a class of
46:15 - hidden
46:17 - content which i think
46:19 - yeah
46:20 - so we've got our two constants there the
46:22 - next thing i want to do now is create a
46:24 - callback function which will check if
46:26 - our hidden content here has the class of
46:28 - reveal btn now i will explain this in
46:30 - more depth but for now let's just create
46:32 - that function so we're going to create
46:34 - that function we'll call this function
46:35 - reveal content
46:37 - and then inside the curly braces here we
46:39 - want to use an if else statement so
46:41 - we'll use the if statement first
46:43 - inside the brackets is our condition so
46:44 - we'll say
46:46 - if our hidden content grab the class
46:48 - list property
46:49 - contains class of reveal btn
46:53 - so there's our condition the code that
46:55 - we want to execute if this condition is
46:57 - true grab the hidden content grab the
46:59 - classlist property and we want to
47:00 - actually remove
47:02 - this class if it does contain the class
47:05 - so
47:06 - we want to remove the class of reveal
47:08 - btn again this will make more sense in
47:10 - just a moment but we're just going to
47:11 - write this out for now
47:13 - else
47:15 - if it doesn't contain that class of
47:16 - reveal btn and we want to grab the
47:18 - hidden content classes property then we
47:21 - want to add that class
47:23 - of reveal
47:26 - btn
47:27 - now the next thing we want to do now
47:29 - is
47:30 - include our event listener so we want to
47:32 - apply the event list now on our uh
47:34 - button here
47:36 - so say reveal btn
47:38 - add event listener and we want to look
47:41 - out for a click event
47:44 - and then the function we want to run off
47:46 - is the reveal content function we just
47:48 - created and the last thing we'll do now
47:50 - is visually hide our div here which has
47:51 - the dummy text so we do that inside our
47:53 - style sheet so we'll go inside the
47:55 - internal style sheet here
47:58 - grab the class of hidden
48:00 - content
48:01 - and we'll say display none
48:05 - and then when the function runs off and
48:07 - it does include our class of reveal btn
48:10 - we want to grab the hidden content grab
48:13 - the reveal
48:14 - btn
48:16 - class and then we want to display as
48:18 - block
48:19 - so this now should be working so if i
48:20 - click on our button you can see it
48:22 - reveals our paragraph i click on the
48:24 - button again it hides the content so
48:26 - what we're essentially saying here is
48:27 - that depending on the current state of
48:28 - our hidden content here javascript will
48:30 - either add or remove the reveal btn
48:33 - class so in its current state right now
48:35 - this button here does not have the class
48:36 - of reveal btn and hence why it's not
48:38 - displaying because we've set this here
48:40 - to none when we do click on this button
48:42 - it will display as block because we've
48:44 - added our event listener here which
48:45 - looks out for a click it will run
48:47 - through this function it will check here
48:49 - if it does contain the reveal btn which
48:51 - it doesn't so if it doesn't we've got
48:53 - our else statement here which will add
48:55 - that class will reveal btn and because
48:57 - we've set it as block here it will now
48:59 - display it if we click on the button and
49:01 - as you can see it's displaying it now
49:02 - and if we click on this button again it
49:04 - will run through our function here and
49:06 - it will first check if it contains the
49:07 - class of reveal btn which it does
49:09 - currently in this state so it will
49:11 - remove that class of btn and because in
49:14 - our internal style sheet here we've set
49:15 - the display to none it will effectively
49:17 - hide our content and just show us the
49:18 - button here so if i just show you guys
49:21 - what that looks like if i just comment
49:23 - out the remove section if i click on the
49:25 - button it will display it because
49:26 - currently right now it's added the class
49:29 - of reveal btn if i click on this now you
49:31 - can see now it's still displaying the
49:32 - text because in our if statement here we
49:34 - no longer have the ability to remove
49:36 - that class so that's how we can create
49:38 - really basic reveal hard functionality
49:40 - using event listeners which looks pretty
49:42 - simple but this technique actually can
49:43 - be used for many different things so for
49:45 - instance you can use it for things like
49:46 - toggling a menu on small screens so when
49:48 - you see that hamburger menu or you can
49:50 - display error messages with this and
49:52 - many more things you can do so guys
49:54 - that's how we can create events in
49:55 - javascript how we can fire off different
49:57 - types of events and again there are
49:58 - loads of different types of events we
50:00 - can create and i'll leave a link in the
50:01 - description for you guys if you guys
50:02 - want to check those out now this is
50:04 - actually just scratching at the surface
50:05 - of event listeners there are some things
50:07 - lurking underneath or more appropriately
50:09 - put lurking behind the scenes of event
50:11 - listeners and that is event propagation
50:13 - and event delegation let's first take a
50:15 - look at what event propagation is and
50:16 - what it means now event propagation
50:18 - refers to how an event travels through
50:20 - the document object model or the dom
50:22 - tree and you can think of event
50:23 - propagation as electricity running
50:25 - through a wire until it reaches its
50:26 - destination now as we're fully aware the
50:29 - dom is full of nodes and when referring
50:31 - to event propagation and events the
50:32 - event needs to pass through every node
50:34 - on the dom until it reaches the end or
50:36 - is forcibly stopped
50:38 - now event propagation is also the
50:39 - umbrella term which is used to cover
50:41 - three phases when dealing with event
50:42 - listeners you first got the event
50:44 - capturing then you've got the target and
50:46 - then you've got the event bubbling now
50:47 - in the simplest definition the capturing
50:49 - phase starts from the root and travels
50:52 - all the way to the target after it's
50:53 - reached the target it goes into the
50:55 - bubbling phase which travels back up
50:57 - from the target to the root so to better
50:59 - understand this let's take a look at a
51:00 - visual representation of the event
51:01 - propagation so in this slide you can see
51:03 - we have a basic diagram of our three
51:05 - phases now imagine that our button at
51:07 - the bottom here has a click event
51:09 - attached to it and is being clicked now
51:12 - when this happens javascript behind the
51:13 - scenes starts three phases first it
51:15 - begins with the capture phase where it
51:17 - starts at the highest level of the dom
51:19 - and it'll trickle all the way down i
51:20 - will notify each element so it will
51:22 - notify the html element the body and the
51:25 - div and tell it that something
51:26 - underneath it is being clicked so again
51:27 - going back to that analogy of
51:28 - electricity running through a wire so
51:31 - this will trickle until it reaches the
51:32 - target phase this phase is a dom node in
51:35 - which we click so in our example the
51:36 - button here at the bottom has a click
51:38 - event attached to it so this would be
51:40 - the target and essentially our target
51:42 - phase so once this target phase is
51:44 - triggered the next phase is what we'd
51:45 - call the bubbling phase which is
51:47 - essentially just the opposite of the
51:48 - capture phase this travels back up the
51:50 - dom and notifies every element so the
51:53 - div the body the html the document all
51:55 - the way up to the highest level period
51:56 - of the target again this is all
51:58 - happening behind the scenes and it's
51:59 - almost instantaneous so let's go ahead
52:01 - into vs code now and take a look at what
52:02 - this looks like in the browser and the
52:04 - console all right guys so we're inside
52:06 - this code here and you can see in our
52:07 - example here we have several elements
52:09 - nesting inside of each other if you take
52:11 - a look at the html the markup is pretty
52:13 - simple for this so we've got our div
52:15 - which has a class of div two inside of
52:17 - that we've got another div with the
52:18 - class of div one and then inside of that
52:20 - div we have a button element so this is
52:23 - what it looks like in the browser and as
52:24 - you can see it just has some basic
52:25 - styling now if we head into the
52:27 - javascript here you can see we have
52:29 - event listings on pretty much everything
52:31 - in the dom tree so we've got one for the
52:33 - window we've got one for the document
52:35 - we've got one for the div two div one
52:38 - and then the button here now as you can
52:40 - see i've set this up a little bit
52:41 - differently in regards to the event
52:42 - listeners instead of creating a variable
52:44 - for the window the document as well as
52:46 - the elements here i've just added the
52:47 - event listeners directly after now
52:49 - creating a variable and doing it this
52:51 - way both work perfectly fine but for
52:53 - this example there's less code here and
52:54 - it just saves me scrolling up and down a
52:56 - bunch of times which can be a pain for
52:58 - people now in regards to the events
53:00 - themselves you can see their click
53:01 - events and as for the functions they
53:03 - just simply log in their respective name
53:05 - in the dom tree except for the button
53:07 - here now instead of the text you can see
53:09 - we've included an e inside of the
53:11 - functions parameters as well as the
53:13 - inside the function we're logging in
53:14 - that e now i will explain what this is
53:16 - in just a moment but first i just want
53:18 - to draw your attention to the third
53:19 - parameter inside of all these event
53:21 - listeners so if i highlight them all for
53:23 - you now
53:24 - you can see they all have a boolean
53:26 - value of true now if you guys remember
53:27 - back to a bit earlier in the video when
53:29 - we were learning about the ad event
53:30 - listener method there was a third
53:32 - optional parameter we could include well
53:34 - this the parameter dictates whether we
53:35 - want to use event capture or event
53:37 - bubbling so let's go ahead and click on
53:39 - the button here in the browser and see
53:40 - what this gives us in the console so as
53:42 - you can see now in the console it's
53:43 - giving us the first phase which is the
53:45 - capture phase so it's starting from the
53:47 - window and then it's going down and
53:49 - notifying all the other elements it
53:50 - comes across all the way down to the
53:52 - target which is saying is this pointer
53:54 - event
53:54 - now the stuff that you see here
53:56 - represents all of the information about
53:57 - that event so this is exactly what that
53:59 - e means inside of our function here
54:02 - which is inside of our button so this e
54:04 - represents the event object and again
54:05 - this is exactly what you see here in the
54:07 - console all this information is about
54:09 - that event that has occurred on this
54:10 - button so if i open this up you can see
54:13 - all the different properties and
54:14 - information about our event here so
54:16 - we've got all sorts of things we can
54:18 - take a look at and utilize so we can
54:20 - find out what type it is we know it's a
54:22 - click event we can check out where
54:24 - exactly that button is exactly on the
54:26 - screen in a browser on the x and y axis
54:29 - we can also check things like whether
54:31 - the shift key here has been pushed down
54:34 - same false because we didn't use the
54:35 - shift key
54:36 - so all sorts of things that we can use
54:38 - here and utilize now the main property i
54:40 - want to bring your attention to and the
54:41 - relevant one to the three phases is the
54:43 - target property here so this here you
54:45 - can see it's saying the button so this
54:48 - property represents the element that the
54:49 - event is actually on so again it relates
54:51 - to our target phase so if i actually go
54:53 - into our console here and i type in here
54:55 - dot target
54:58 - and i'll just refresh this and i click
55:00 - on the button again you can see now it's
55:02 - starting from the window going to the
55:03 - document div two div one because we're
55:05 - using the target property to show us
55:07 - what element the event is on which again
55:09 - is our button now again we can do some
55:10 - other cool things here so let's just say
55:12 - for example when we click on this button
55:14 - um we'll just change the text to say
55:16 - clicked so after the target
55:18 - we say dot in our text and set this to
55:22 - equal it to
55:24 - say clicked
55:25 - so what should happen if i click on the
55:27 - button it should change the text to
55:29 - click so as you can see now in the
55:30 - console when we've clicked the button
55:32 - it's changing the text to click because
55:34 - what we've done is use the event object
55:35 - to grab the target which is the button
55:37 - and then from there we use the inner
55:39 - text property and then change it to
55:41 - click so when this function files off
55:43 - the buttons text change to click so as
55:45 - you can see here in the browser and if
55:47 - you also take a look at the console you
55:49 - can see we also see phase one so the
55:51 - capturing phase so we start the window
55:53 - document div two div one and then click
55:55 - which is the button so that's the first
55:57 - and second phase how do we now initiate
55:59 - the third phase which is the bubbling
56:01 - phase well to do that all we need to do
56:03 - is just grab all of the true values here
56:07 - for our third parameter
56:08 - and just change them to false now these
56:10 - are actually false by default and if i
56:12 - click on the button now
56:14 - you can see it started from the button
56:15 - and then it's going to div 1 div 2
56:18 - document and then the window so it's
56:19 - bubbling upwards hence the term event
56:21 - bubbling so from the target it's
56:23 - bubbling up to the highest position in
56:25 - the dom tree now there are ways we can
56:27 - actually stop event propagation so let's
56:29 - just say we wanted to stop the bubbling
56:30 - um to happen at the second div we can do
56:33 - that with the stop propagation method
56:35 - so let's go to the second div here
56:38 - include our event object
56:40 - then inside of here we'll just say
56:43 - e dot stop
56:46 - propagation so what should happen now is
56:48 - when i click on this button once it
56:50 - reaches the second div we want the
56:51 - propagation to stop so we'll no longer
56:53 - be able to see the events on the
56:54 - document and the window so if i click on
56:56 - this you can see it's going from click
56:58 - to div one div two because we've stopped
56:59 - the propagation in our function here now
57:01 - this also applies to event capturing so
57:03 - if i grab all of the third parameters
57:06 - here and change them to true so we're in
57:07 - the capture phase
57:08 - and then i click on this button you can
57:11 - see the opposite is happening because
57:12 - we're starting from the window where the
57:13 - cap where the capture phase begins then
57:15 - goes to the document and then goes to
57:17 - div two and then stops at div two
57:18 - because we've stopped the propagation so
57:20 - that's how we can stop event propagation
57:21 - happening forward capturing and bubbling
57:24 - another useful ability we can utilize an
57:25 - event bubbling is to have events far off
57:27 - only once
57:29 - so for this example again we'll use div
57:31 - two and i'm just going to comment out
57:33 - the stop propagation method there
57:36 - take out the e and then
57:38 - change with these two false even though
57:40 - they're false by default um we'll just
57:41 - keep it like this for consistency so
57:43 - again if we only want div two to fire
57:45 - off once for our third parameter here
57:47 - what we can do is grab the once property
57:51 - and set this to true now if i click on
57:53 - this button you can see it fires it all
57:55 - off as normal so it starts from the
57:57 - click and bubbles up all the way to the
57:58 - window if i now click this button again
58:01 - you can see it's starting from the
58:03 - button or the target going to div one
58:06 - but now dev2 is no longer firing
58:08 - and then it goes on to the document and
58:10 - then the window and then again if i
58:11 - click this again you can see the div 2
58:13 - event isn't far enough because again
58:15 - what we've done here is defined that we
58:17 - only want this event to fire off once
58:19 - now another common method you likely run
58:21 - into is the prevent default method now
58:24 - what this method does is pretty
58:25 - self-explanatory really it just prevents
58:27 - any default behavior that might occur on
58:29 - an element or an event so this is quite
58:31 - dependent on the type of element
58:32 - involved and the context of an event so
58:34 - to see example of the prevent default
58:35 - method
58:36 - what i'm going to do is go into the
58:38 - index.html and i'm just going to change
58:40 - the button
58:41 - to an anchor tag
58:43 - and i'm going to give this a class
58:46 - of a button
58:48 - and i'm just going to put in here click
58:50 - and then
58:51 - uh we'll go where the styling is for the
58:53 - button and we'll make this a class
58:57 - and then what we'll also do is just put
59:00 - it on a new line so we'll say display
59:01 - block
59:02 - because
59:04 - anchor tags are inline by default
59:07 - so we'll head into the app.js file and
59:09 - what also do is just make sure our query
59:12 - selector here is targeting that class of
59:16 - button so our anchor tag now and this
59:18 - event listener here is now the target
59:20 - and the event and because we've changed
59:22 - the button to an anchor tag if i click
59:24 - on this now you can see it's firing off
59:26 - all the events but they quickly refresh
59:28 - and the reason it's doing this is
59:29 - because the default behavior of an
59:31 - anchor tag is to try and redirect us to
59:33 - somewhere else and this is what's
59:34 - causing this quick fire off of all the
59:36 - events and then a refresh now we can
59:38 - stop this from happening with the
59:39 - prevent default method so to do that
59:41 - we'll go inside
59:43 - our button here or the class of button
59:46 - and we'll grab the um
59:48 - event object
59:49 - prevent
59:51 - default
59:52 - and if i click on the button now you can
59:54 - see it's showing us the bubbling phase
59:56 - the content has changed to click that
59:58 - it's staying there and all this has
59:59 - happened now is because we apply the
60:01 - prevent default method onto our anchor
60:03 - tag so it's no longer trying to direct
60:05 - us somewhere else now we will see a more
60:07 - practical example of all the methods we
60:09 - just learned so the prevent default uh
60:11 - the stop propagation in part two of the
60:13 - tutorial where we look at practical
60:14 - examples and projects but i just wanted
60:16 - to make you guys aware of these um so
60:18 - they don't confuse you in that
60:19 - subsequent video
60:21 - now the last thing i want to mention in
60:22 - this tutorial guys is event delegation
60:24 - now event delegation is one of the most
60:25 - potent event handling patterns inside
60:27 - javascript and the dom and what it does
60:30 - is allows users to append a single event
60:32 - listener to a parent element that adds
60:34 - it to all of its present and future
60:36 - descendants that match that selector now
60:38 - what we'll do is actually break this
60:39 - definition down to show you guys exactly
60:41 - what it means now the first part here
60:43 - where it says it allows users to append
60:45 - the single event listener to a parent
60:47 - element adds it to all of its present
60:49 - children to find out why this is useful
60:51 - let's actually just go back a few steps
60:53 - and see how we get to event delegation
60:55 - so if we head back into the index.html
60:57 - file you can see we've got an unordered
60:59 - list which has a bunch of different
61:00 - sports inside of it now this honorable
61:02 - list has an id of sports and then each
61:05 - of these list items have their own id
61:07 - which is equivalent to the content that
61:08 - you see inside of each of the list items
61:11 - and this is what it looks like in the
61:12 - console now if i click on one of these
61:14 - list items you can see it's showing us
61:16 - in the console that football's click and
61:17 - it also changes its background to a
61:20 - light gray again to highlight that has
61:21 - been clicked and again this is going to
61:23 - be the same for each individual list
61:25 - item now to achieve this what we can do
61:27 - is apply event listeners to each
61:28 - individual
61:29 - list item that we have inside our
61:31 - unordered list so we'll head into the
61:33 - app.js file and we'll grab the first
61:36 - list item so we'll say document dot
61:39 - query selector grab the id of football
61:44 - add the event list now
61:46 - and we're going to look out for a
61:48 - click event
61:50 - grab a function
61:52 - inside of the function we'll include the
61:54 - event object
61:55 - and then inside of this function
61:58 - uh what we want to do is uh first just
62:00 - console log
62:01 - in
62:02 - let's say
62:03 - say football
62:07 - is clicked
62:09 - and then the next thing i want to do is
62:12 - change that background color when we
62:13 - click on the actual list item so to do
62:16 - that we're going to first need to create
62:18 - a constant so we're going to say
62:22 - call this target and this is just going
62:24 - to equal e dot target which is that list
62:26 - item
62:27 - and i'm going to say if
62:30 - and the condition we're going to put in
62:31 - here
62:32 - is if target
62:35 - matches
62:37 - so matches is just a method basically
62:39 - which essentially checks with the target
62:40 - which in this case is the list item
62:42 - matches with our css selector which is
62:45 - going to be li this is going to return
62:47 - true and then when it returns through
62:48 - it's going to change our background
62:49 - color so after condition we want to
62:51 - include the code that we want to execute
62:53 - so we're going to say target
62:56 - dot
62:57 - style
62:59 - dot
63:01 - background
63:03 - color
63:04 - and we'll set that to
63:07 - light
63:08 - gray
63:09 - and if we head into this folders live
63:12 - server here you can see we have the
63:13 - exact same layout and what should happen
63:15 - now if i click on the football list item
63:18 - the background should change to a color
63:20 - of light gray and it should also show
63:22 - here in the console so if i click on
63:24 - this you can see saying football is
63:25 - click and then it's changing the
63:27 - background to light gray because we've
63:30 - just created an event listener for it um
63:32 - inside the app.js file
63:34 - now again if we wanted to do it for all
63:35 - of these what i need to do is just
63:38 - duplicate this
63:39 - four more times
63:42 - so
63:43 - instead of football here we have
63:45 - basketball
63:49 - and then for the third one we have
63:55 - boxed
63:57 - for the fourth one
63:59 - we have
64:00 - tennis
64:02 - and then we'll create one more
64:04 - for golf
64:08 - and now all the starter then the console
64:10 - logs should be working for each of the
64:12 - list items so we'll start with football
64:14 - see that's working basketball's working
64:16 - boxing's working
64:18 - tennis and golf are also working so
64:20 - we're getting the exact same thing as
64:22 - our draft example here
64:23 - except the text is a little bit
64:25 - different but again it's the exact same
64:26 - styling and you can see it's working
64:28 - perfectly fine now this is great and
64:30 - works fine there's no real issue with
64:32 - the code here because we're getting the
64:33 - exact same result as our draft example
64:35 - but as you'll learn throughout your code
64:37 - and journey there are always questions
64:38 - to ask when you have written out your
64:39 - code to help improve it so you can ask
64:41 - yourself things like can we remove some
64:43 - of this code can we remove some of the
64:45 - event listeners and still achieve the
64:47 - same result can this task be done
64:48 - writing less code instead or can we even
64:51 - optimize this code and the simple answer
64:52 - really is that we can we can write less
64:54 - code here and achieve exactly the same
64:56 - result using event delegation so the
64:58 - idea of event delegation is pretty
65:00 - simple instead of attaching the event
65:02 - listeners directly to each of the list
65:04 - items here we can delegate the listening
65:06 - to the parent which is the ul here which
65:08 - has the id of sports so that when the li
65:10 - is clicked the listener of the parent
65:12 - element catches the bubbling event and
65:13 - performs our task which change the color
65:16 - of our background to light gray when we
65:17 - clicked on one of the boxes and also
65:19 - showcased some text inside of our
65:21 - console here so what we're going to do
65:22 - to achieve this now is go back to the
65:24 - app.js file and get rid of all this code
65:27 - here
65:29 - and then we're first going to grab that
65:31 - unordered list element which has the id
65:33 - of sports
65:35 - so we'll say document dot query selector
65:40 - and then we'll say
65:42 - we'll grab the id which is sports
65:46 - and add the event listener to this
65:48 - so a similar process it's going to be a
65:50 - click event
65:52 - rudolph function which has
65:55 - the event object inside its parameters
65:58 - inside of our function here
66:00 - we want to say
66:02 - let's console log that bit of text so
66:04 - we'll say
66:05 - e dot target
66:08 - dot get
66:10 - attribute
66:12 - method of get attribute and we want to
66:14 - get the id
66:16 - and then we want to say plus
66:19 - we'll put in here is
66:21 - clicked
66:24 - so what we're saying here is that when
66:26 - the target which is our list items has
66:28 - an id attribute which all of them do
66:31 - whichever one that we click on will
66:32 - display that specific sport plus the
66:34 - extra bit of text here of is clicked so
66:37 - if i go ahead and click on one of these
66:38 - now you can see it's saying football is
66:40 - clicked if i click on tennis you see
66:42 - tennis is click golf boxing and
66:44 - basketball so you can see all of these
66:46 - now are working because we've attached
66:48 - that one event listener to the parent
66:50 - element which catches the bubbling event
66:52 - and then performs our task which we've
66:53 - written in here now we also want to
66:55 - change uh the background color when we
66:57 - click on these so to do that first going
66:59 - to need to create a variable of um the
67:02 - target so we're going to say target
67:05 - it's going to equal e dot
67:07 - target which is those list items
67:11 - and then we're going to say
67:12 - if the target
67:15 - variable there
67:18 - matches our css selector which is our li
67:22 - we're going to want to change the uh
67:24 - background so say target dot style dot
67:28 - back
67:29 - ground
67:30 - color
67:32 - to a light gray so again if i click on
67:34 - one of these now uh we're getting an
67:36 - error um that's because i spelt
67:41 - matches
67:43 - wrong
67:44 - so again if i click on one of these now
67:45 - you can see the text will appear in the
67:47 - console highlighting which one i clicked
67:49 - and then we also now have the extra
67:51 - feature of where the background changes
67:53 - to a light gray for all of our list
67:56 - items there
67:57 - now again this brings us back to our
67:59 - first um part of our definition which
68:01 - allows users to append a single event
68:04 - listener to our parent element that adds
68:05 - it to all of its present children and as
68:08 - you can see this is clear benefits
68:09 - ranging from code quality as well as
68:11 - code maintenance because instead of
68:13 - having all those lines of code um in the
68:15 - previous example where we attached an
68:16 - event listener to each of the list items
68:19 - we now have it all inside one event
68:20 - listener here now we've also improved
68:22 - our performance because having more
68:24 - events in our code will take up a lot of
68:26 - memory and using event delegation we're
68:28 - going to save a ton on memory which
68:30 - again will vastly improve our
68:32 - performance inside of our
68:33 - projects now another crucial benefit of
68:36 - event delegation is the second part of
68:38 - our definition here so the first part
68:40 - was it allows users to append a single
68:42 - event listener to a parent element that
68:43 - adds it to all of its present
68:45 - descendants now the second part of this
68:47 - definition was that it also adds it to
68:49 - future descendants that match that
68:51 - selector so this is actually in regard
68:53 - to dynamic elements so let's just say we
68:55 - had an add button here at the end of
68:57 - this box where it allowed us to add
68:58 - another sport to our list
69:00 - so let's actually just manually do this
69:03 - to show you guys exactly what i mean so
69:05 - first we're just going to create a
69:06 - constant
69:08 - for our um ul which has the idea of
69:10 - sports so we'll say const say sports
69:14 - equals document.queryselector
69:19 - and then we'll just grab the id of
69:21 - sports again which is that ul
69:23 - and then what we'll also do is create
69:25 - another list item
69:26 - so we'll say const new
69:29 - sport
69:30 - equals document
69:34 - dot create
69:36 - element
69:37 - and we'll create another list item
69:40 - and then what we'll do
69:42 - is uh
69:43 - we'll say
69:44 - new
69:46 - sport so that variable which is that new
69:48 - list item
69:49 - uh we'll give it
69:51 - uh
69:52 - in a text
69:54 - of uh let's say
69:56 - let's make the sport rugby and then
69:58 - we'll also give it the uh
70:02 - id
70:04 - of rugby so we'll say set attribute
70:08 - first an id attribute and then we're
70:10 - gonna have
70:11 - the uh id
70:13 - of rugby
70:16 - and then what we want to do is append
70:17 - this now to our list so we'll grab
70:20 - the sports variable which is the ul and
70:23 - we'll say append
70:26 - child
70:27 - and then the chart we want to append is
70:29 - of course that new sport so let me say
70:32 - new
70:32 - sport
70:34 - so as you can see now rugby has been
70:36 - added to our list here so if i click on
70:38 - this it's got the exact same styling and
70:40 - the output in the console like the rest
70:41 - of the list items would because we now
70:44 - have an event listener to the parent
70:45 - which is the ul and because of event
70:47 - delegation we've delegated the event to
70:49 - the parent and as you can see this gives
70:51 - us the power to dynamically add new list
70:53 - items and those new list items will
70:55 - display the same behavior so again
70:56 - without the magic of event delegation
70:58 - we'd have to use the method we
70:59 - previously used we would have to include
71:01 - event listeners to each individual list
71:03 - items and that includes any new list
71:05 - items that might get added on along the
71:06 - way which will just clog up memory
71:08 - effect performance and just create too
71:10 - much unnecessary code so that's going to
71:12 - be it for this video guys in this video
71:14 - we're going to be using everything we
71:15 - learned in part one and applying it to
71:16 - five different projects ranging from
71:18 - beginner to master level
71:20 - so just like in part one guys there's
71:22 - going to be a few prerequisites in order
71:24 - to effectively understand the dom and
71:25 - how it relates to these projects i
71:27 - highly recommend checking out part one
71:28 - first as well as also having an existing
71:31 - knowledge of html and css
71:33 - now in regards to styling we're not
71:35 - gonna be focusing too much on it for our
71:37 - projects because this isn't really the
71:38 - goal of the course however there will be
71:40 - substantial css styling involved and
71:42 - then lastly it's going to be essential
71:44 - to have familiarity with the
71:45 - fundamentals of javascript and the
71:47 - syntax and the code structure because
71:49 - obviously we're going to be using
71:50 - javascript in this course all right guys
71:52 - so our first project for this course is
71:53 - going to be this beginner friendly quote
71:55 - generator that houses a quote and then
71:57 - has a reference by someone famous
71:58 - underneath it now underneath that
72:00 - reference of that famous person we have
72:02 - a button which says new quote and if i
72:04 - click on this you'll see it'll just
72:05 - generate us some new quotes by someone
72:08 - else famous so pretty cool design and
72:10 - quite simple to create now some of the
72:11 - key concepts we're going to need for
72:12 - this project is document.queryselector
72:15 - add event listener of course the math
72:17 - object and in a text property so now we
72:19 - know what we're creating and the key
72:20 - concept we're going to need let's head
72:22 - into vs code now and create our quote
72:24 - generator
72:25 - all right so we're inside vs code and
72:26 - you can see we're inside a folder called
72:28 - master dom manipulation part 2
72:30 - inside of an index.html file as well as
72:33 - having a style.css file and a javascript
72:35 - file for our project one and also have
72:37 - an image folder which has all of our
72:39 - images which is just going to be the
72:40 - background uh image for all of our
72:43 - projects so the first thing we'll do is
72:44 - include a link to our style sheet so
72:46 - we'll go inside here
72:48 - and we'll grab style.css now the next
72:51 - thing i'm going to do is go and get a
72:53 - google font so we'll head over to google
72:55 - and the global font we're going to be
72:56 - using for our project is going to be a
72:58 - roboto regular 400. so we'll just grab
73:00 - the link here inside google fonts
73:02 - head back into vs code and then just
73:04 - paste it underneath the style sheet
73:06 - there and then just
73:09 - tab this over so it is looking all neat
73:12 - and what we'll do as well is just
73:14 - put a comment here so uh
73:18 - global
73:20 - font
73:22 - links and we'll do the same for the
73:23 - style sheet
73:27 - and then lastly what we'll include in
73:28 - the head tag is just a link to font
73:30 - awesome so we can grab all of our icons
73:32 - that we're going to be using throughout
73:33 - the project so we're heading to our font
73:35 - awesome cdn here and then we click the
73:37 - first link so we copy the link tag head
73:39 - back into vs code and then just paste it
73:42 - under our google fonts so we'll just say
73:44 - font
73:46 - awesome
73:48 - i think
73:50 - place that in there
73:52 - close that off and then let's open this
73:54 - up with live server so we have our blank
73:56 - canvas
73:57 - and we can see all of our work and we'll
73:59 - split screen this
74:01 - and just
74:03 - a bit smaller
74:05 - so we're ready to start a markup for our
74:06 - first project so if we take a look at
74:08 - the original example you can see we have
74:11 - two sections here so we have our heading
74:13 - and then we also have the main section
74:16 - which houses the quote uh the famous
74:18 - person and the button so
74:20 - we'll head inside the body
74:23 - we just put a comment here for
74:25 - project
74:26 - one
74:28 - quote
74:30 - generator
74:33 - and
74:35 - we're going to house this project inside
74:36 - a div the class of container hit tab
74:40 - and then again we're going to need a
74:41 - header so we'll just put another div
74:43 - here with
74:44 - a class of header
74:46 - put in here a h2 and we'll say
74:49 - java
74:50 - script
74:52 - quote
74:54 - generator so you'll see that there in
74:57 - live server and then underneath the
74:58 - header we're gonna have this content
75:00 - here which has the quote as well as the
75:02 - name of that specific person who said
75:03 - the quote and then the button underneath
75:05 - which will um generate a new quote for
75:07 - us
75:08 - so we'll get back into this blank canvas
75:10 - there we'll go underneath the header and
75:13 - we'll just create a div with the class
75:14 - of main content which again is just
75:16 - going to house everything
75:18 - scroll down a little bit and then the
75:19 - first thing we need is the actual text
75:22 - area so we can just put div
75:24 - call it text
75:26 - area
75:28 - inside of that we want to have a span
75:30 - which has the class of quote which is
75:32 - going to be our quote and then i'm going
75:34 - to paste our quote inside of here which
75:36 - is the exact same as the original
75:39 - example and then underneath the text
75:41 - area div we want to have a div for the
75:45 - actual um
75:47 - famous person who said the quote let's
75:49 - keep it simple and just say person
75:52 - hit tab
75:53 - and then this person for this quote is
75:56 - abraham
75:58 - lincoln
76:00 - so we have our quote now as well as
76:02 - having the person who said the quote and
76:04 - then of course underneath this
76:06 - we're going to have the button so we'll
76:09 - house the button inside of a div with
76:11 - the class of button area and this is
76:14 - going to house our button so this button
76:16 - is going to have an id of
76:19 - say new
76:20 - quotes we're going to need to
76:23 - grab onto this later
76:25 - and we'll just put in here
76:27 - text of new
76:30 - quote
76:31 - so that's essentially it for our markup
76:32 - let's head into the style sheet now and
76:34 - just apply some general styles first
76:37 - so what you put in here general
76:40 - styles
76:42 - so we use the asterisk to grab
76:43 - everything and we're going to say
76:46 - margin zero
76:49 - padding
76:50 - zero
76:52 - box size into border box
76:55 - let's also make sure that the uh font
76:58 - family for all of our projects is
77:01 - our lato font
77:04 - uh we'll just have sans serif as a
77:05 - backup
77:08 - and then let's first grab the body
77:11 - element
77:12 - because we want to
77:14 - use display flex to center everything
77:17 - so we'll say justify content to the
77:19 - center align items
77:21 - to the center
77:23 - let's use the height
77:25 - and make it
77:26 - a thousand one hundred viewport heights
77:29 - which would be the height whole height
77:30 - of our um window there and then let's
77:33 - also text the line everything to the
77:34 - center
77:36 - and then the next thing i'll do is
77:38 - include our background image for our
77:40 - first project which is this sort of
77:43 - library image here
77:45 - so to do that we'll grab the background
77:47 - property url
77:49 - grab the image folder head inside it and
77:51 - grab project one
77:52 - now this is way too big at the moment so
77:54 - the first thing i want to do is
77:56 - add a few more bits of styling so no
77:58 - repeat
78:00 - uh we want to center
78:02 - everything on the x and y and then we
78:05 - want this to cover
78:07 - the whole body so as you can see now it
78:08 - looks pretty much exactly the same
78:11 - as our original example
78:13 - so that's it for the body there next
78:16 - thing i want to do now is grab the
78:17 - container class which houses everything
78:20 - i'm going to give this a width of
78:22 - 550 pixels
78:24 - a height of 450 pixels
78:27 - now the next thing we'll do is just
78:29 - style our heading which is the
78:31 - javascript quote generator text there
78:33 - so we'll grab the header class
78:36 - and let's uh increase the font size of
78:39 - this to say about 1.2 rem
78:43 - and let's give this a border of solid
78:47 - say about 2 pixels
78:49 - and make it a nice white color change
78:51 - the color of the text to white
78:54 - uh let's make that a bit clearer so
78:56 - we'll change the background color to uh
78:59 - a bit of a darker gray
79:02 - let's also add a bit of padding there
79:04 - between the text and the border so about
79:07 - five pixels
79:09 - and let's make the width of this to be
79:11 - about say about
79:13 - eighty percent
79:15 - set the margin
79:17 - to uh let's say 20 pixels from top and
79:20 - bottom and about
79:23 - and then auto on the left and right so
79:25 - this is centered
79:30 - now let's actually make the edges of our
79:32 - border here a bit more rounder
79:34 - so we'll use the
79:35 - border radius method
79:38 - property
79:39 - let's
79:40 - make it about five pixels
79:42 - i just think that looks a little bit
79:44 - better so that's it for our heading now
79:46 - let's grab the uh
79:49 - main content which is basically just all
79:51 - of our content here so the um
79:54 - quote the
79:55 - person who said the quote and then the
79:57 - button itself
79:58 - so this is a class of main
80:02 - content
80:05 - so what i want to do is just make the
80:06 - width of this
80:08 - 100
80:10 - the height
80:12 - let's make about 300 pixels
80:15 - the padding
80:19 - let's give this a background color of
80:22 - white
80:26 - so there's our content
80:27 - let's also
80:30 - make the edges more rounded so
80:32 - say border radius so about 15 pixels
80:37 - let's uh also add a bit of padding here
80:40 - between the content
80:41 - and the edges so we'll say
80:45 - it's about 50 pixels on the top and
80:47 - bottom about 40 pixels on the left and
80:49 - right
80:52 - uh
80:53 - next thing i want to do is actually give
80:55 - this a box shadow so it gives it more of
80:57 - like a 3d look so let's say zero on the
81:00 - x and y
81:02 - let's put about 10 pixels blur so the
81:05 - box shadows all the way around which i
81:07 - think looks a lot better there
81:09 - now let's uh
81:12 - style the text or the quote so this is
81:15 - the main content
81:17 - and the text
81:20 - area
81:24 - so let's just give this a font size
81:28 - about let's say 1.5 ram see what that
81:31 - looks like
81:33 - yeah i think that looks pretty good
81:34 - let's also add a bit of line height here
81:36 - 1.5
81:38 - give it a bit of breathing room
81:40 - and uh
81:44 - yeah i think that looks pretty good
81:46 - now we want to style the person
81:49 - who says the quote
81:50 - so we'll say
81:53 - main
81:55 - main content
81:57 - dot person
82:00 - and let's increase the uh
82:02 - size of the text so we'll say font size
82:06 - let's say about
82:08 - 1.6 rem
82:11 - yeah looks pretty good
82:13 - change the color
82:17 - to red
82:21 - uh let's
82:23 - think the original is capitalized so
82:25 - text decoration
82:28 - uppercase
82:32 - so text
82:34 - transform
82:36 - uppercase
82:39 - now of course we want to add a bit of
82:40 - margin here so let's say margin
82:43 - top it's about 20 pixels
82:46 - so i think that's starting to look a lot
82:47 - like the original
82:48 - as you can see there
82:50 - now let's uh
82:52 - let's now start the button
82:55 - so
82:56 - we'll grab the uh
82:58 - button
83:00 - area
83:01 - which uh houses the button
83:04 - and we'll grab the actual button itself
83:08 - uh so um let's
83:10 - change the background color
83:12 - to that dark gray
83:15 - let's change the color of the text so we
83:17 - can see it
83:19 - to white
83:22 - and let's uh increase the font size of
83:25 - this
83:27 - to say 1.2 rem
83:31 - let's actually make that a bit bigger
83:32 - 1.3
83:35 - and then let's add a bit padding of
83:37 - course so i'll say 10 pixels on the top
83:40 - bottom
83:41 - about 15 pixels on the left and right
83:44 - let's also add a bit of margin to the
83:46 - top of this to separate it from that
83:48 - text there
83:50 - margin top let's say about
83:53 - 20 pixels
83:55 - and then let's make it rounded on the
83:57 - edges so border radius
84:00 - let's say about five pixels
84:03 - so the last thing i want to do here is
84:04 - that when we click on this
84:06 - um you can see in the original when we
84:08 - click on this it actually uh changes
84:10 - color
84:12 - so we need to change its active state
84:14 - so we'll just grab this
84:18 - and let's grab the active
84:21 - pseudo class
84:23 - and we'll say the background
84:26 - color let's make it a light
84:28 - blue so that's pretty much it for the
84:30 - styling all we need to do now is start
84:31 - applying some logic to this so we can
84:34 - generate new quotes when we click on
84:35 - this new quote button so the first thing
84:37 - we're going to need to do is head into
84:39 - the index.html
84:42 - file and just go underneath all this
84:44 - content here and just put
84:48 - a comment for scripts because this is
84:50 - where we're gonna be placing all of our
84:52 - scripts
84:53 - and then we're just gonna link to that
84:55 - script file
84:57 - or our first script file so we'll sort
84:58 - it to
85:00 - it's called project
85:03 - one dot js
85:20 - so we've linked it to our javascript
85:22 - file so we'll head into that the first
85:23 - thing we're going to need to do is just
85:25 - create some variables so we're in the
85:26 - variable for our button here as well as
85:28 - the quote and the person that said the
85:30 - quote
85:31 - so we'll just put a comment here saying
85:34 - variables and we'll say
85:37 - let btn equal
85:40 - document dot query selector
85:45 - and then we'll select the um
85:47 - button which has an id of new
85:50 - quote so we've stored our button inside
85:52 - that variable there we'll create another
85:54 - variable now for our
85:57 - quote itself so we'll just call this
85:59 - quote
86:00 - we'll set this to document.queryselector
86:05 - and i believe this has a class of
86:09 - quote
86:10 - close that off so now we've stored the
86:12 - span which has the quote inside of it
86:14 - inside that variable there
86:15 - and then lastly we're going to need one
86:17 - more for the person
86:19 - and we'll say document dot
86:22 - query selector
86:25 - and this has a class of
86:28 - person so we've got our three variables
86:30 - there now the next thing we're going to
86:31 - need is array for all of our quotes so
86:34 - we'll call this array uh let's call it
86:36 - quotes now i'm going to copy and paste
86:38 - all the quotes i used in the original
86:40 - example um which i just found on the
86:42 - internet i'm not really sure if they
86:44 - those individuals actually said those
86:45 - quotes if you guys want to use different
86:47 - quotes and people for your
86:49 - quote generator feel free to do so so
86:51 - i'm just going to paste those in there
86:54 - so there's all our quotes there which i
86:55 - think is a total of 10 quotes so the
86:58 - next thing we're going to do here is now
87:00 - apply an event listener to our button
87:02 - here so when we click on this button of
87:03 - new quote it will generate a new quote
87:05 - for us so one of these quotes by one of
87:07 - these individuals
87:08 - so we'll go underneath the array and
87:11 - we'll say
87:12 - btn.ad event listener and we're going to
87:15 - look out for a click event
87:18 - and we're going to have a function
87:21 - now inside of our function here we're
87:23 - first going to need to create a variable
87:24 - which houses a basic math equation which
87:27 - is essentially just going to involve the
87:28 - built-in math object and a couple of its
87:29 - methods
87:30 - so let's call this variable let's call
87:33 - it let random now as i just mentioned
87:35 - javascript has that built in math object
87:37 - and this object has several methods now
87:40 - the two that we're going to be using in
87:41 - this equation are math.floor and
87:42 - math.random now i will go over the
87:44 - equation again but i first just going to
87:46 - create it quickly because it's just a
87:48 - bit easier to explain so let random is
87:50 - going to equal math
87:51 - dot floor and then inside of this method
87:54 - here we're going to have
87:56 - math again dot random
87:59 - and we're going to times this by
88:02 - our
88:03 - quotes array dot length
88:06 - which is essentially just all the quotes
88:07 - in our array so again how this equation
88:09 - is working is that the math.random times
88:12 - the quotes dot length will generate a
88:14 - number between zero and the total number
88:16 - of quotes inside of our quote array now
88:18 - because math.random doesn't actually
88:20 - generate a whole number we need to wrap
88:21 - this equation in math.floor or the floor
88:23 - method which essentially just rounds a
88:25 - number downwards to the nearest integer
88:27 - and what this will do now is allow us to
88:29 - access our properties inside of our
88:31 - array which are the variables of quote
88:33 - and person so that's essentially how
88:35 - this variable and this math equation is
88:37 - working here now this equation will
88:38 - randomize through our quotes array
88:40 - however we need to display the quote and
88:42 - person inside of our array to a string
88:44 - format so to do that we'll go underneath
88:47 - the variable here and we'll grab
88:50 - let's grab
88:51 - uh quote first
88:54 - and we need to change the inner
88:56 - text
88:58 - and then we're going to set this to
89:00 - equal
89:02 - the quotes
89:03 - array
89:05 - square brackets to turn it into a string
89:07 - format and we'll put in the random
89:09 - variable and we'll say
89:11 - dot
89:12 - quote
89:14 - and then we'll do the exact same thing
89:16 - but we'll do it for
89:18 - person
89:19 - so i'll just change this to person and
89:22 - this now should randomize through our
89:23 - quotes array and display new quotes said
89:25 - by different people so if we go to the
89:27 - button and we click on the button it's
89:29 - generated us new quotes and it's also
89:31 - giving us different people who have said
89:33 - those quotes
89:34 - and that is our first project completed
89:36 - so a pretty cool project and pretty
89:37 - straightforward to create all right guys
89:39 - so the next project this course is the
89:41 - beginner plus project which is a modal
89:43 - now a motor is essentially just a ui
89:44 - element that appears in the foreground
89:46 - of a website and they're usually
89:48 - triggered by the user allowing them to
89:49 - view more information or complete an
89:51 - action without having to navigate to
89:53 - another url in our case it's just going
89:55 - to show more information so we have our
89:57 - ui element here in the foreground and
90:00 - then if i click on this you can see
90:01 - another box animates downwards the rest
90:04 - of the content darkens so it puts a lot
90:05 - more focus in the box in the middle and
90:07 - that's essentially what our model is
90:09 - here now of course in this box you'd
90:11 - likely have more information but i just
90:13 - wanted to keep it simple uh for this
90:14 - example
90:15 - now the key concepts we're going to need
90:17 - for this project switched up a little
90:18 - bit we're going to be using the
90:19 - document.elementbyid
90:22 - of course the ad event listener method
90:23 - the e.target and we're going to be using
90:26 - css styling throughout javascript and
90:28 - we're also going to include some css
90:29 - animation in this project so let's head
90:31 - into vs code now and create our model
90:34 - all right guys so we're back inside our
90:35 - master dom manipulation part two folder
90:38 - and as you can see we've got our blank
90:39 - canvas there open up in live server so
90:41 - the first thing we're going to need uh
90:43 - for our markup it's just gonna be the
90:44 - modal open button so we'll just put a
90:46 - comment in here model
90:49 - open
90:51 - button
90:52 - which is the button if we take a look at
90:54 - the original example uh this button here
90:56 - which is going to trigger our model so
90:58 - we're just going to have a button this
91:00 - is going to have an id of
91:03 - open
91:04 - btn because we're going to be using a
91:06 - element by id for this example
91:09 - and we're just going to put a paragraph
91:10 - tag in here and this is just going to
91:12 - have the text of
91:14 - where's uh
91:17 - model
91:18 - so that's it for the open button now the
91:21 - next thing we're gonna need is the
91:22 - actual model itself so i'm just gonna
91:24 - put a comment in here say modal and
91:27 - modal
91:28 - background
91:30 - so we're going to have a div
91:34 - with the id of
91:35 - modal
91:37 - container
91:39 - inside of that we're going to have our
91:40 - div with the id of modal which is going
91:44 - to be our modal
91:45 - paragraph tag inside of that which is
91:47 - going to say here
91:49 - i
91:50 - am and then underneath that we're going
91:51 - to have another div which is going to be
91:53 - our close button so we're just going to
91:55 - have
91:57 - let's say div we'll give this an id of
91:59 - close
92:00 - btn
92:02 - and to create that x we're just going to
92:03 - be using a html entity so it's going to
92:06 - be an ampersand times
92:09 - semicolon and that's going to be that
92:11 - cross that you can see there so that's
92:13 - all we're going to need for the markup
92:14 - the next thing i want to do is
92:16 - just quickly
92:18 - uh comment out this script for project
92:19 - one but duplicate this and then
92:22 - link it to project two so if i actually
92:27 - open this up you can see i've created
92:28 - another um js file which is project two
92:31 - just close that back up so the next
92:32 - thing i want to do now is just apply
92:34 - some styling so we're heading inside the
92:36 - style shape and the first thing i'm
92:38 - gonna do is get that background image
92:40 - that you see here in the original
92:41 - example
92:42 - so we're just going to grab the body and
92:45 - we're going to change the background
92:49 - to url
92:50 - and this is going to be the image folder
92:53 - project two
92:54 - and then apply those same rules that we
92:56 - did in the previous example so no repeat
93:00 - center
93:01 - center and then we're gonna have cover
93:04 - so we'll be able to see the image there
93:07 - and then to make it the whole heart of
93:08 - the browser should change the height to
93:10 - 100 viewport heights
93:13 - so there's our image now the next thing
93:15 - i want to do is actually position this
93:17 - relative because i want to initially
93:19 - position our button here a little bit
93:21 - further down and slightly to the right
93:23 - just like it is in our example here
93:26 - so
93:27 - what we're going to do is now grab that
93:29 - button
93:30 - which has the id of open
93:32 - button i'm just going to open our module
93:36 - set the position of this to be absolute
93:39 - so we can now position this anywhere
93:41 - um on our browser there i'm going to say
93:43 - top
93:44 - say
93:44 - about 70
93:47 - and then let's also
93:50 - from the left
93:53 - 10
93:54 - now let's start giving this a bit of
93:56 - styling so it looks a little bit better
93:58 - uh we'll give this a width of
94:01 - 350 pixels
94:04 - make it a bit bigger
94:06 - and we'll also give it a height
94:08 - let's set about 80 pixels
94:10 - uh let's make the font size a bit bigger
94:14 - let's say about two ram see what that
94:16 - looks like
94:18 - yeah it looks pretty good and
94:20 - let's
94:22 - make the background
94:23 - transparent just like the original
94:26 - change the color of the text
94:28 - to white so we can see it
94:31 - um let's also
94:33 - change the color of the border
94:36 - uh
94:37 - let's make it solid two pixels
94:41 - white
94:43 - now let's also
94:44 - uh let's add a bit of uh border radius
94:48 - to the edges
94:49 - just because i think it looks a lot
94:50 - neater when the edges are rounded uh so
94:53 - let's say about 10 pixels
94:57 - and maybe a bit padding
94:59 - it's also about five pixels there
95:02 - that looks pretty good let's also
95:05 - use our good friend box shadow
95:07 - give it that nice 3d effect
95:10 - so we say zero on the x and y but three
95:13 - pixels blur so it goes all the way
95:14 - around
95:16 - uh let's make it black
95:20 - yeah looks good
95:21 - um
95:23 - now
95:24 - if we take a look at the original you
95:26 - can see
95:27 - there's an effect on there so we need to
95:29 - add a transition
95:32 - uh
95:33 - transition say about
95:35 - five seconds
95:37 - uh so that's pretty much it for that
95:39 - styling the next thing i want to do
95:41 - obviously is add a bit of a hover effect
95:42 - so we'll just grab this
95:49 - so we'll just grab
95:52 - this and
95:53 - paste it in here over effect
95:57 - we'll hover class and we'll change the
95:59 - background color
96:03 - uh
96:04 - let me choose the background
96:06 - color to
96:07 - white and then the text
96:11 - to
96:13 - uh black
96:15 - so there's that effect which is the
96:17 - exact same
96:18 - as our original there
96:20 - that looks pretty good now the next
96:22 - thing i want to do is style our model
96:23 - here which is going to be that box that
96:25 - um shows up when we click on this button
96:27 - here
96:28 - so uh has the class of
96:32 - modal
96:34 - and then we'll change the background
96:36 - color of this to be white
96:40 - we'll
96:42 - set the position of this
96:44 - to be
96:45 - absolute
96:47 - then we'll say
96:50 - scroll down so you can see we'll say top
96:53 - 50
96:55 - left
96:57 - 50
97:00 - and then transform
97:02 - translate
97:05 - and we'll say uh
97:07 - negative 50
97:10 - and negative 50 which would basically
97:12 - just uh center this in the middle so
97:13 - this is just another way to actually
97:15 - center content instead of using flexbox
97:17 - or css grid now
97:19 - i want this to be a bit bigger so we'll
97:21 - say width so 200 pixels
97:23 - height
97:26 - let's say 100 pixels
97:27 - um give it a bit of padding
97:32 - on the top and bottom and then 20 on the
97:34 - left and right
97:36 - uh the old classic border radius
97:40 - give it
97:41 - rounded edges
97:44 - and then uh the font size let's make
97:46 - this a bit bigger
97:49 - let's say 1.5 rim now this is actually
97:53 - not going to display at the moment but i
97:54 - just want to create the styling here um
97:56 - so we don't have to do it afterwards now
97:58 - this model is actually wrapped inside of
98:00 - the modal container which we're going to
98:01 - be displaying as none initially because
98:03 - we don't actually want this to show but
98:05 - i just wanted to start everything first
98:07 - before i make this sort of disappear
98:09 - initially
98:10 - now the next thing i want to do is if we
98:12 - take a look at the original example
98:17 - you can see that the text is on the left
98:19 - and the x is on the right so to do that
98:21 - we're going to be using
98:24 - display
98:26 - flex
98:28 - so we have like a nested flexbox
98:31 - and then we'll just say justify
98:34 - content
98:35 - space
98:36 - between
98:38 - and then we'll align the items
98:40 - vertically to the center
98:43 - now if we take a look again at the
98:44 - previous example click off this you can
98:47 - see this actually animates from the top
98:49 - so we're going to be using keyframes uh
98:51 - to do this
98:52 - so
98:53 - i'm going to create an animation um
98:56 - say animation animation
99:01 - name we're going to call this animate
99:05 - modal
99:07 - and then we want the animation
99:10 - duration which is going to be 0.4
99:12 - seconds we'll create this animation
99:14 - right at the end but i just wanted to
99:16 - again put all the styling on this modal
99:18 - uh first before we get to that so the
99:20 - next thing i'm going to do is style the
99:22 - cross here
99:23 - so this has a class
99:25 - of not class rated id of
99:29 - closed btn
99:31 - font size
99:33 - um
99:35 - let's make this about
99:37 - three rem
99:38 - so it's nice and big
99:40 - and then let's apply a hover to this so
99:43 - when we hover over it it turns red so
99:46 - close btn
99:48 - um let's make it also a cursor pointer
99:53 - uh font
99:55 - size
99:58 - let's also make sure this is three rem
100:02 - and then change the color
100:04 - to a red color so say f
100:07 - 0 0
100:09 - 0.
100:11 - so there's our cross there now just to
100:13 - quickly mention guys this is the same
100:14 - style sheet we were using
100:16 - in the previous project so it has those
100:18 - general styles there
100:19 - just in case that confused some people
100:22 - but anyway uh we've done the modal now
100:25 - so what we need to do is actually grab
100:26 - the modal container and actually
100:29 - initially make this disappear so
100:32 - we'll grab the modal
100:34 - container
100:36 - and we'll display this as none
100:40 - comment this out so we can still see it
100:42 - but what i want to do is actually
100:43 - position this
100:45 - to fixed
100:48 - so it's right at the top there and we'll
100:50 - say top
100:52 - zero
100:55 - and then
100:56 - left
100:58 - zero
101:00 - width
101:01 - one hundred
101:02 - percent and then the height
101:06 - to also be
101:07 - 100
101:10 - and then have the z index here
101:14 - let's have this at one so it's above
101:16 - everything
101:17 - so let's just uncomment this now so we
101:18 - can no longer see it so that's nearly it
101:20 - for the styling um there's still some
101:22 - styling in regards to the animation
101:24 - which we can do in just a moment but
101:26 - let's first start applying some
101:27 - javascript to this so we're heading to
101:29 - the project 2.js file and the first
101:32 - thing we're going to need to do is just
101:33 - create some variables so one for the
101:35 - open button one for the modal container
101:38 - and then one for the close button so
101:40 - we'll just put in here
101:42 - comment for variables
101:44 - we'll say let open
101:47 - vtn equal
101:51 - document.getelementbyid which you're
101:53 - going to be using for this example
101:55 - and this has an id of
101:57 - open
101:58 - vtn
102:03 - and then we'll create another one for
102:05 - the
102:06 - modal container so we'll say modal
102:10 - container equals document
102:14 - dot
102:15 - get element by id
102:20 - and this has an id of modal
102:23 - container
102:25 - and then one more for the
102:27 - close button
102:29 - so close btn
102:32 - equals
102:33 - document dot
102:36 - get element
102:38 - iid
102:40 - and this has an idea of
102:42 - close
102:43 - btn so that's it for the variables the
102:46 - next thing i want to do is now start
102:48 - writing out our of event listeners so
102:50 - we'll just put in here event
102:52 - listeners
102:54 - so the first one we're going to apply it
102:56 - to
102:56 - is the uh open btn variable so the open
102:59 - button so we'll say open btn so add
103:02 - event listener
103:04 - look out for a click event
103:07 - function
103:12 - and inside of this function we're going
103:14 - to be using css styling so we're going
103:16 - to grab the modal container
103:18 - and we're going to grab the style
103:19 - attribute and then inside the star we're
103:22 - going to be using the display property
103:25 - set this equal to block
103:27 - because if we take a look at the
103:29 - style.css you can see we have this as
103:32 - displayed as none now we wanted to
103:34 - display it as block when we click on the
103:36 - open button which is this button here
103:38 - so if i click on this now it should show
103:40 - us our model
103:41 - as you can see it's popping up in the
103:42 - center there so this event listener is
103:44 - working now we can't actually click off
103:46 - of this model so we can't really close
103:48 - it we're going to need a couple more
103:49 - event listeners so we'll do one for the
103:51 - close button there
103:53 - so we'll say close btn
103:55 - add event list now
103:57 - look out for a click event
104:00 - function
104:01 - and inside of this function we'll apply
104:03 - the same sort of styling so we'll say
104:04 - mode or container
104:06 - dot style
104:08 - display attribute
104:11 - display property
104:14 - and then we'll set this to none so we'll
104:16 - just refer back to none so now we've got
104:18 - two event listeners here we've got our
104:20 - open button and then for our close
104:22 - button there if we click on this this
104:23 - should get rid of our model and as you
104:24 - can see that's working now now if we
104:26 - take a look at the actual original
104:28 - example if we click on this and we show
104:29 - our model it closes if we click on the
104:31 - close button here but if we also click
104:34 - outside anywhere of our model here you
104:36 - can see it closes the modal tube so i
104:38 - want to add another event listener so we
104:40 - can do that so we actually apply this to
104:42 - the window object so this is actually
104:44 - the highest object in the dom tree this
104:46 - goes above the document
104:48 - so
104:49 - we'll say
104:51 - look out for a click event
104:54 - function again we'll insert the event
104:57 - object in there
104:58 - and then inside of the function itself
105:01 - we're going to use an if statement
105:03 - so we're going to say if e dot target if
105:07 - you guys remember back to the um part 1
105:09 - of this course the event.target
105:11 - essentially just returns the element
105:12 - that triggers the event which in this
105:14 - case is going to be our window so we're
105:16 - going to say if e.target is equal to
105:20 - modal container we're going to grab the
105:22 - modal container use the same
105:24 - style attribute display property
105:27 - i'm going to equal this
105:29 - to
105:30 - none so again what this should do now is
105:33 - when we click on this to activate our
105:35 - modal so we can see it on the screen we
105:36 - should be able to click anywhere outside
105:38 - of this module and the model will
105:39 - disappear so as you can see that's
105:41 - working if i click up here disappears
105:44 - click up there disappears and if we also
105:46 - click on the close button it will
105:48 - disappear so that's pretty much it for
105:50 - the javascript
105:52 - pretty simple design really and quite
105:53 - simple to create the next thing i'll do
105:55 - is just apply some style into the module
105:56 - and the modal container because if i
105:58 - click on this you can see that the
105:59 - background darkens around the modal as
106:02 - well as the modal smoothly
106:04 - animating from the top of the browser
106:05 - there do that we'll head back inside our
106:08 - star.css and to create that nice
106:10 - animation you can see we've got
106:12 - animation name and the animation
106:14 - duration we're going to be using
106:15 - keyframes so we'll just say
106:18 - a comment here first modal animation
106:23 - section
106:25 - we'll say the
106:27 - at keyframes rule
106:30 - use the name which is animate
106:33 - modal
106:35 - is that oh it's not got a capital m
106:40 - what you want to say is just use the
106:41 - from n2
106:43 - so from
106:46 - when i say top
106:48 - negative 300 pixels
106:51 - set the opacity to zero so we can't see
106:54 - it
106:55 - and then two
106:56 - let's say from the top
106:59 - fifty percent
107:01 - and then the opacity
107:03 - to one
107:04 - so as you can see when we type in this
107:06 - keyframe out
107:07 - the animation is working so i'm just
107:09 - going to click off this
107:10 - click on our open button and you can see
107:13 - now the modal is animating exactly the
107:15 - same as the original
107:17 - and lastly i just want to create this
107:19 - this dark background when the motor
107:21 - appears so to do that
107:23 - we're going to go
107:25 - in the modal container here or the id of
107:27 - a motor container
107:29 - add a background color
107:31 - rgba
107:32 - we'll say zero for red zero for green
107:35 - zero for blue and then for the alpha
107:38 - which is the opacity we'll say point two
107:41 - and as you can see it just gives the
107:42 - modal container and which is wrapping
107:44 - around the model a nice uh dark effect
107:46 - which just gives us a good emphasis on
107:47 - the model itself this now looks exactly
107:49 - like our original example it looks
107:52 - pretty good
107:53 - so our third project is going to be an
107:55 - accordion now what an accordion does is
107:57 - let you squeeze in a lot of content into
107:59 - a small space and a web page and a
108:01 - classic example is like one in our
108:02 - project here which is an faq or
108:04 - frequently asked question which you'll
108:06 - most likely see in utilized in many
108:07 - websites so as you can see here we have
108:09 - a couple of questions just some random
108:11 - questions like a return policy or where
108:13 - they're located and if i click on one of
108:15 - these you'll see it open up and show us
108:17 - more content which again is a really
108:18 - useful project to learn as you're most
108:20 - likely going to be utilizing this type
108:22 - of design in many of your own projects
108:24 - now the key concepts we're going to need
108:25 - in this tutorial are document dot get
108:28 - element by class name this time of
108:29 - course the advert listener the for loop
108:32 - but this keyword on the classlist and
108:34 - toggle method so let's head into vs code
108:36 - now and create our accordion
108:39 - all right guys so the first thing i'm
108:40 - going to need to do is create the markup
108:42 - for the accordion so we're going to have
108:44 - a
108:44 - class of accordion which basically just
108:47 - houses everything or the accordion then
108:50 - i'm gonna have a
108:51 - h2
108:52 - the class of uh say accordion
108:58 - title
109:00 - and we'll say frequently
109:03 - asked
109:04 - questions and underneath that we're
109:06 - going to have several containers which
109:07 - is going to house the question and the
109:09 - answer and you guys can put as many of
109:10 - these containers as you like but i'm
109:12 - just going to use three which is the
109:13 - exact same as our draft example so we're
109:15 - going to create that class of content
109:18 - container and this is also going to be
109:20 - the class that we link to our javascript
109:22 - so we can show that extra content
109:24 - so inside of these we're going to have
109:26 - class of question
109:28 - so the question first question is what
109:32 - is the return
109:34 - policy
109:37 - and then we're gonna have
109:38 - the class of answer
109:41 - which is just going to be some dummy
109:42 - text
109:45 - and then we'll just duplicate this
109:46 - container two more times again you guys
109:48 - can include more if you like
109:50 - but we're just going to stay the same as
109:52 - the draft
109:53 - example
109:54 - so that's essentially it for the markup
109:56 - let's head into the style sheet now and
109:57 - just apply some uh styling to this now
110:00 - the first thing we're going to do
110:02 - is just grab the body
110:04 - and include our background image
110:07 - so this can have a url image folder
110:10 - project three
110:11 - and then a few more
110:13 - bits of styling so no repeat center on
110:16 - the x and y
110:18 - and then cover
110:19 - so we can see the whole image
110:22 - make this the whole height of the
110:24 - browser
110:25 - and then use flexbox again
110:27 - to center our content
110:33 - and then align items to the center
110:36 - so that's all we need for the body let's
110:39 - start applying some styles to the
110:41 - accordion
110:42 - which pretty much just houses everything
110:44 - we're going to give this a width of 65
110:50 - and
110:53 - background color
110:54 - let's give it a white background color
110:58 - add a bit of padding
111:00 - so let's say about
111:01 - 30 pixels all the way around
111:04 - and then of course a good friend border
111:07 - radius
111:08 - just to make the edges more rounded so
111:11 - so we'll apply 30 pixels there
111:13 - now for the title itself
111:16 - uh we'll go and give that a bit of
111:18 - styling
111:19 - this has the
111:20 - accordion title styling scroll down so
111:23 - you guys can see a bit clearer
111:25 - we'll just add some margin bottom
111:28 - of 30 pixels to separate from the rest
111:30 - of the content and then
111:32 - text the line to the center
111:34 - so it's centered
111:36 - there
111:38 - now let's apply some style into our
111:40 - questions there
111:41 - so
111:42 - grab the accordion
111:45 - content
111:47 - container
111:50 - and then grab the question
111:54 - or class of question
111:56 - and let's give this some padding too so
111:58 - 18 pixels on top and bottom zero pixels
112:01 - on the left and right
112:04 - and let's
112:05 - also
112:07 - uh increase the font size a little bit
112:09 - 22 pixels
112:12 - set the cursor to a pointer and then
112:16 - let's add a border bottom here one pixel
112:19 - solid
112:20 - black
112:22 - so it has a line underneath the
112:24 - questions just so it's a bit clearer to
112:25 - see the separation between that and the
112:27 - content and then the next thing we need
112:29 - to do here is set position
112:31 - of relative that's because we're going
112:32 - to be positioning the open and close
112:34 - sections that you see here in the
112:36 - original example absolute to our
112:38 - question class
112:40 - so that's what we're going to go ahead
112:42 - and do now so we'll grab the accordion
112:44 - class
112:45 - content container
112:48 - question class and we're going to be
112:50 - using the pseudo element of after
112:53 - and we'll go inside this and we'll grab
112:55 - the content
112:57 - property
112:59 - and use a plus sign in there
113:01 - and then we'll position this
113:05 - absolute
113:07 - and then from the right
113:10 - we'll say about negative five pixels
113:13 - so i think that looks pretty good there
113:14 - let's now focus on this content here so
113:16 - the dummy text
113:18 - so
113:19 - we'll go underneath
113:21 - this bit here
113:24 - grab the accordion class
113:27 - grab the content container and then
113:28 - we'll grab the answer class which is the
113:31 - dummy text
113:33 - and we'll add a bit of padding
113:35 - top
113:37 - of 15 pixels
113:39 - just so it separates it from the ball
113:41 - the bottom there
113:43 - will increase the font size of this
113:47 - it's about 22 pixels as well
113:52 - and then let's add a bit of line height
113:54 - let's say 1.5
113:57 - between the content
114:00 - and then make sure the width of this
114:19 - is a hundred percent
114:22 - now of course we want this content to be
114:24 - hidden initially like it is in the
114:26 - original example so to do that what
114:28 - we're going to need to do is change the
114:31 - height of our answer class there to zero
114:34 - pixels now if you take a look at the
114:36 - browser you can see that all of the
114:37 - content is overflowing it's doing
114:40 - exactly what we wanted to do by setting
114:41 - the height to zero pixels but of course
114:44 - all this content here we want it to be
114:45 - hidden so what we can do to hide that is
114:48 - just use the overflow property and set
114:50 - that to hidden
114:52 - and as you can see all of that content
114:53 - isn't showing
114:54 - now one last thing i want to do in here
114:56 - is that if we take a look at the
114:57 - original example we open this up you see
114:59 - it's nice and smooth so to do that
115:02 - we're gonna need to set the transition
115:04 - of this to be
115:06 - about 0.5
115:08 - seconds so that when we do apply the
115:10 - javascript and we click on these it'll
115:11 - be nice and smooth so that's almost it
115:13 - for the styling we're going to need a
115:15 - few more bits in just a moment but first
115:17 - we need to create the javascript to get
115:18 - this all working so we'll head into the
115:20 - javascript file there and the first
115:22 - thing i'm going to do is just create a
115:23 - variable i'm just going to put a comment
115:25 - here variable
115:27 - and this variable is
115:29 - going to be called uh accordion and
115:32 - we're going to be using the document
115:34 - dot get element by class name
115:37 - so this is going to select all the
115:38 - elements with this class name and we
115:40 - want to select the
115:41 - content
115:42 - container classes
115:44 - which houses the question and the answer
115:47 - now we're going to want to access all of
115:48 - these classes and to do that we're going
115:50 - to need a for loop
115:51 - so we're just going to put in
115:53 - 4
115:55 - we're going to have a variable of i
115:57 - equals 0.
116:00 - and then we're going to say i
116:03 - is less than the accordion
116:12 - dot
116:12 - length and if it is less than the
116:15 - accordion.length which it will be we
116:17 - want to increment this
116:19 - our variable by one
116:22 - then inside of this for loop
116:25 - because we're essentially selecting all
116:26 - of the
116:28 - classes of content container we want to
116:30 - apply an event list now on each of these
116:32 - so we'll grab the accordion and then
116:34 - grab the
116:35 - variable of i inside of our for loop
116:38 - and then add an event listener here
116:40 - in where we want
116:42 - a click event so on each of the content
116:44 - containers we want to click event
116:47 - then we're going to include a function
116:50 - and then inside of this function what we
116:52 - want to do is reference the object which
116:54 - the function is a property or in other
116:56 - words reference the object that is
116:57 - currently calling the function which in
116:59 - this case is our accordion and we could
117:01 - do that by using the this keyword and
117:03 - then using this we can insert a class of
117:05 - active on all of those reference points
117:07 - which are essentially our content
117:08 - containers so we'll say
117:11 - class
117:14 - list
117:16 - dot toggle which is just another method
117:19 - which i actually forgot to mention in
117:20 - part one but what this essentially does
117:22 - is just toggle between adding and
117:23 - removing a class name for an element
117:25 - with javascript and the class that we
117:27 - want to toggle is of course the one i
117:28 - just mentioned so we want to call this
117:30 - class active which i'll show you guys in
117:32 - a minute why we need to do this
117:34 - so what we've done here is store all our
117:35 - elements with a class of content
117:36 - container inside of this variable of
117:39 - accordion
117:40 - we then loop through this variable
117:42 - and this has allowed us to add an event
117:43 - listener to all of our content container
117:45 - classes and inside of the function we
117:47 - then reference this object that is
117:49 - calling the function i.e our accordion
117:52 - variable and then added the toggle
117:54 - method to either add or remove the class
117:55 - of active so all we need to do now is
117:57 - head back into our css and apply the
117:59 - styles to our active class we created
118:01 - inside of this function so we'll head
118:03 - back to star.css again
118:05 - and then what we'll do should put a
118:06 - comment here
118:08 - and say java
118:11 - script
118:13 - styling link
118:17 - go underneath here and then just grab
118:19 - the class of accordion grab the content
118:22 - container class select the active class
118:24 - we created inside of our javascript
118:27 - and then grab the answer
118:30 - or the class of answer which is
118:33 - all of that content which has a dummy
118:35 - text inside of it
118:36 - and then just set a height of this to be
118:38 - 150 pixels
118:40 - so what this should do now is using the
118:42 - javascript we just created
118:44 - toggle the class of answer so that when
118:46 - we click on any of the questions the
118:48 - height of the answer container will be
118:50 - 150 pixels instead of zero pixels and
118:52 - then show us all that content so if i
118:54 - click on this you can see now it's open
118:56 - up and showing us all that content so
118:58 - you can see that the javascript is
118:59 - working as well as the styling we just
119:02 - created with the active class we just
119:04 - inserted with the active class so just a
119:06 - few little bits here now to finish off
119:08 - so we'll just grab the accordion
119:11 - grab the content container grab the
119:13 - active class again
119:17 - and we'll grab the question so i just
119:19 - want to change some style into the
119:20 - question when this is clicked
119:22 - so uh let's
119:25 - affect the font size that's a little bit
119:27 - smaller so say about 18 pixels and we
119:30 - want this to be smooth so we'll just put
119:31 - a transition of
119:34 - 0.5 seconds
119:37 - so as you can see this shrinks down when
119:38 - we click on this um just so it puts more
119:40 - emphasis on the content there
119:42 - and then lastly let's change the open
119:44 - button to
119:46 - a closed section when we click on it
119:47 - just like it does in the original
119:49 - example here as you can see there
119:51 - so
119:53 - let's go underneath this
119:56 - grab the accordion class again
120:00 - content
120:02 - container
120:03 - dot active
120:07 - and dot question
120:09 - after pseudo-element
120:13 - change the content
120:16 - to a dash
120:19 - let's also increase the font size of
120:21 - this
120:22 - to 30 pixels
120:24 - let's give it a nice transition
120:27 - by five seconds
120:30 - and as you can see there it's all
120:31 - working perfectly fine the javascripts
120:34 - are working as well as the styling
120:36 - so that's going to be it for this
120:37 - project another really useful project to
120:39 - learn as you'll most likely run into
120:41 - needing something of this project's
120:42 - nature
120:44 - so for our fourth project we're going to
120:45 - be up in the ante a little bit and
120:47 - create this pretty cool stopwatch which
120:49 - as you can see here we have a play and
120:50 - also a reset button if i hit the play
120:52 - button you'll see it transform to a
120:54 - pause button as the stopwatch is
120:56 - starting
120:57 - if i pause it it will pause on that
120:59 - number and then i can also reset this if
121:01 - i want to so a pretty cool design and
121:04 - we're going to be implementing much more
121:05 - javascript for this project
121:07 - some of the key concepts we're going to
121:08 - need for this project are
121:09 - document.queryselector
121:11 - document.elementbyd add event listener
121:14 - if statements the tostring method the
121:16 - set interval method and inner html
121:19 - so now we know the project and the key
121:20 - concept we're going to need for the
121:21 - project let's head into vs code now and
121:22 - create our stopwatch
121:25 - all right guys so inside our index.html
121:28 - file the first thing we'll do is just
121:29 - create a div with the class of container
121:31 - and inside of that div we're going to
121:34 - house another div which is gonna have an
121:35 - id of
121:37 - timer and inside of this we're just
121:39 - gonna display our timer then underneath
121:42 - that we're gonna have our buttons so
121:43 - we're gonna have a div with a class of
121:45 - buttons
121:47 - and then we'll have
121:49 - the start stop button and this is going
121:52 - to have initially when we're first
121:54 - showing this going to have an icon
121:57 - and this is going to have a class of
122:00 - fa
122:01 - solid
122:03 - fa
122:04 - play
122:06 - and we're also going to give this an id
122:09 - of play
122:12 - and then we'll just duplicate this for
122:14 - the reset button
122:19 - reset vtn
122:22 - and this is gonna have an id of reset
122:27 - and instead of
122:29 - play it's gonna have
122:31 - arrow
122:32 - dash row
122:34 - tate
122:36 - dash left
122:38 - so that's all we're gonna need for our
122:39 - markup let's head into star.css and just
122:41 - apply some styling here
122:43 - so
122:44 - first thing we're gonna have is the body
122:46 - we're gonna include our background image
122:48 - just like in the previous
122:50 - examples but first let's just make the
122:51 - height 100 viewport heights
122:54 - background
122:56 - url
122:57 - img
122:59 - project 4
123:00 - and of course some of that classic
123:02 - styling so no repeat
123:04 - center
123:06 - center
123:08 - cover
123:09 - so we can see the whole image
123:11 - so there's our guy there
123:12 - and then we want to position everything
123:13 - in the center so let's display this as
123:15 - flex justify
123:18 - content center
123:20 - align items to the center
123:23 - now let's grab the container which
123:24 - houses everything
123:26 - and this is going to have a width of
123:29 - 60 percent
123:31 - a height of
123:33 - 250 pixels
123:37 - background
123:39 - color is gonna be
123:40 - white
123:42 - let's give it that nice
123:44 - border radius
123:45 - 30 pixels and then let's just give this
123:48 - a bit of shadow so zero on the x and y
123:51 - and then
123:52 - three pixels blur so it's all the way
123:54 - around now the next thing i'm going to
123:55 - do is style the timer here so
123:59 - this is an id of timer
124:02 - set the width of this
124:04 - to be 100
124:06 - font size
124:09 - uh let's make it
124:11 - 72 pixels so nice and big text align
124:14 - this to the center give it a bit of
124:17 - margin so
124:19 - zero on top and bottom auto on the left
124:21 - and right and then let's also give this
124:24 - a bit of padding top let's say about say
124:27 - 35 pixels
124:29 - just to push it down a little bit
124:31 - now as for the buttons themselves
124:34 - we'll grab the button we'll grab the
124:36 - buttons class which houses the buttons
124:40 - we'll text align this to the center
124:43 - and then
124:44 - let's give it a bit of margin on the top
124:47 - let's say about 40 pixels
124:50 - and then let's style the buttons here so
124:54 - so um
124:55 - let's give a bit of margin between them
124:57 - so they're not like squished up next to
124:58 - each other so let's say zero on the top
125:01 - and bottom about 10 pixels on the left
125:02 - and right
125:04 - giving that space uh let's also remove
125:07 - the border
125:09 - both of them
125:10 - and then let's style the actual icons so
125:13 - button i
125:16 - say font size
125:19 - let's say about two ram
125:24 - padding
125:25 - so about
125:26 - 10 pixels
125:28 - and then let's
125:30 - change the color
125:32 - to
125:34 - white
125:36 - now we can't actually see those really
125:37 - clearly so let's grab the ids of each of
125:40 - those so we've got one for play
125:46 - duplicate that one for
125:49 - pause
125:50 - which we'll create later
125:53 - and then one before reset
125:55 - now for play this is just gonna have a
125:58 - background color of green
126:02 - for
126:03 - reset
126:04 - this is gonna have that background color
126:06 - of red
126:10 - and then for pause it's gonna have a
126:12 - background color of orange
126:16 - and that gives them their background
126:18 - color now the buttons here actually
126:20 - aren't the same size so
126:22 - let's just quickly make these the same
126:24 - size so we'll say about 50 pixels
126:28 - yeah that looks a lot better so that's
126:29 - pretty much it for styling let's head
126:31 - into the project 4.js file now and start
126:33 - adding some functionality to our
126:34 - stopwatch here all right guys so the
126:35 - first thing we need to do is just create
126:36 - some variables for our buttons so
126:39 - just going to put here
126:41 - variables for buttons
126:45 - and we're going to say const
126:48 - start
126:50 - stop
126:52 - btn
126:54 - equals document
126:55 - dot query selector and then we're just
126:58 - going to select the id of start
127:01 - stop
127:03 - btn and then we're going to have one
127:04 - more for our reset so
127:07 - reset btn
127:09 - equals
127:11 - document.queryselector
127:15 - and this has the id of
127:18 - reset
127:19 - btn
127:21 - so there's the variables for our buttons
127:23 - the next thing i'll do now is just
127:24 - define a few variables to hold time
127:26 - values
127:27 - so
127:28 - um
127:30 - put a comment here again
127:32 - time values
127:35 - so we'll say let
127:36 - seconds
127:37 - equal zero
127:39 - let
127:40 - minutes
127:42 - also equal
127:43 - zero
127:45 - and then let
127:46 - hours
127:48 - equal zero
127:51 - so that's all the variables we're going
127:52 - to need at the moment the next thing i
127:54 - want to do is actually create our
127:55 - stopwatch function which is going to
127:57 - determine when our stopwatch needs to
127:58 - increment to the next number ie seconds
128:00 - minutes or hours as well as displaying
128:02 - that value in the ui
128:04 - so we'll just put in here uh
128:06 - stop
128:07 - watch
128:08 - function
128:10 - and then we'll just say function
128:12 - we'll call this stop
128:14 - watch so firstly what we want to do when
128:16 - we invoke this function is actually
128:18 - increment the seconds so when this fires
128:20 - off when we press the play button the
128:22 - seconds will start to increment so we'll
128:24 - just say seconds
128:25 - plus plus now of course if we leave it
128:27 - like this it's just going to increment
128:29 - the seconds it's not going to jump to
128:30 - the next value so if we wanted to
128:32 - increment when it gets to the minutes
128:33 - and the hours what we're going to need
128:34 - to do is just create an if statement and
128:36 - then we're gonna say seconds divided by
128:39 - 60 which is the amount of seconds
128:43 - is equal to
128:45 - one
128:46 - we then want seconds
128:48 - to jump to zero
128:52 - and then we want the minutes
128:54 - to increment so what we're saying here
128:57 - is that once this reaches 60 our seconds
128:59 - will restart and then the minutes will
129:02 - start incrementing so that's how we
129:03 - increment the next value now of course
129:05 - we haven't just got minutes we've also
129:06 - got hours so we need to include that as
129:08 - well
129:08 - so we'll apply the same logic here so
129:11 - minutes divided by 60 is equal to 1. the
129:15 - condition we want is that minutes
129:18 - let's back to zero and then the hours
129:22 - increment now what we need to do from
129:23 - here is actually create a variable to
129:25 - display this if statement in the browser
129:27 - so our stopwatch will actually increment
129:29 - otherwise the numbers will just stay
129:30 - static the way they are now so to do
129:32 - that we're just going to need to go
129:34 - underneath this if statement here and
129:35 - say
129:36 - let's say let
129:39 - display
129:40 - timer equal document dot get element by
129:45 - id we're going to get the id of timer
129:48 - and we're going to change the inner text
129:50 - just scroll down a bit so you guys can
129:51 - see that
129:52 - and we're going to set this to
129:54 - equal
129:55 - hours
129:57 - plus uh
130:00 - colon
130:02 - plus
130:04 - minutes
130:06 - plus a
130:08 - colon again
130:10 - and then finally seconds
130:13 - close that off so what we're doing with
130:15 - this variable is just making sure that
130:16 - when our if statements here are working
130:18 - we want it to be displayed in the
130:19 - browser so the way we can display that
130:22 - and check that out is we'll just grab
130:23 - the window object and then we're going
130:24 - to grab the set interval function which
130:27 - is basically just a method that calls a
130:28 - function at specified interval and the
130:31 - function of course that we want is going
130:32 - to be our stopwatch and this interval
130:35 - takes in two parameters so first the
130:37 - function and then the amount of time and
130:39 - we're gonna be putting a thousand which
130:41 - is a thousand milliseconds
130:42 - so we'll say
130:43 - stopwatch
130:45 - and then time of a thousand and if we
130:47 - take a look at the browser now you can
130:48 - see that it's beginning to increment
130:50 - and then if we just make this a bit
130:53 - quicker so we'll lower down to one
130:55 - you can see that the minutes now is also
130:57 - incrementing
130:59 - and then if we just wait a little bit
131:00 - longer it should jump to the hours
131:03 - and as you can see the hours now is also
131:04 - incremented when it gets to that 60 so
131:06 - i'm just going to put this back to a
131:07 - thousand and then comment it out now of
131:10 - course as you've just seen there when
131:11 - this function fires off the lead in zero
131:14 - disappears and if you take a look at our
131:16 - demo example here and we play this you
131:18 - can see that it starts incrementing as
131:19 - it should but the leading zero is still
131:22 - there now to fix this what we're going
131:23 - to do is actually create a couple more
131:24 - variables so we'll go underneath these
131:27 - variables here and then create variables
131:29 - for that leading zero so say variables
131:32 - for leading
131:34 - zero
131:36 - so we'll say let
131:37 - leading
131:39 - seconds
131:40 - equal
131:41 - zero
131:42 - duplicate this
131:43 - a few more times
131:46 - let
131:47 - leading minutes
131:49 - equal zero
131:51 - and then obviously hours
131:53 - now what we need to do is go back inside
131:54 - our stopwatch function here go
131:56 - underneath uh this if statement here and
131:59 - then create
132:00 - some conditionals to include that
132:01 - leading zero if our seconds minutes and
132:03 - hours is only one digit so we'll say if
132:07 - seconds
132:09 - is less than 10
132:12 - we want to grab the
132:14 - leading
132:15 - seconds
132:17 - and then set this to
132:18 - that leading zero
132:20 - which is a string value but we also want
132:22 - to make this a string value so we'll say
132:24 - uh two string but we also want to make
132:26 - this a string value so we'll apply the
132:28 - two string
132:29 - method which will turn this
132:31 - all into a string else we'll just make
132:34 - sure that else we'll just leave the
132:37 - leading
132:38 - seconds to equal
132:40 - the
132:41 - normal seconds variable
132:43 - so of course we want to create
132:45 - two more
132:46 - for
132:47 - minutes and hours so we'll say this one
132:49 - is for minutes
132:52 - and
132:54 - leading minutes
132:58 - hours
133:03 - hours
133:05 - and of course we're also going to have
133:07 - to change
133:08 - uh the variable here too so we'll say
133:10 - leading
133:11 - hours
133:14 - leading
133:15 - minutes
133:17 - and leading
133:20 - seconds
133:21 - so again what we're doing here with the
133:22 - if statements is making sure that our
133:24 - leading zero will show if our stopwatch
133:25 - is only showing one digit and as we just
133:28 - seen when we invoke the function here
133:29 - with the set interval that lead in zero
133:31 - will disappear but because of the
133:33 - statements we've just created here and
133:34 - this variable which will display in our
133:36 - browser if i uncomment our set interval
133:38 - here it should start incrementing with
133:40 - that latent zero so i'll uncomment this
133:42 - out
133:43 - and as you can see now it's incrementing
133:45 - with that leading zero and if i just
133:47 - speed it up it should also apply to the
133:50 - seconds minutes and hours
133:53 - as you can see it's working in the
133:54 - minutes and then if we just wait a
133:55 - little bit longer again for the hours
133:59 - the leading zero should still stay there
134:02 - and as you can see it's working exactly
134:04 - the way it should so i'll just put this
134:05 - back to a thousand
134:07 - and just comment that out
134:09 - now we're actually invoking this
134:11 - stopwatch when the browser loads because
134:12 - we're immediately invoking it through
134:13 - the window object and our set interval
134:15 - function but of course we want to have
134:17 - more power than this and what we want to
134:18 - do is actually add functionality to our
134:20 - buttons so what we're going to need to
134:22 - do
134:22 - now is actually create a few variables
134:24 - to hold the set interval function as
134:26 - well as containing the status of our
134:27 - stopwatch and which i'll show you guys
134:29 - exactly what i mean so let's create
134:31 - those two variables we'll actually
134:33 - create them up here
134:35 - so
134:38 - variables
134:39 - for
134:41 - set interval
134:43 - and
134:44 - timer
134:46 - status
134:48 - so we'll say let
134:49 - timer
134:52 - interval
134:53 - equal
134:54 - null
134:56 - just for the time being because we want
134:57 - to choose when we want the stopwatch to
134:59 - run not when the page loads
135:01 - and then of course create another
135:02 - variable for
135:03 - our timer status
135:05 - i'm going to set this equal to a string
135:07 - value
135:08 - of stop we now need to use these
135:10 - variables and apply it to our start stop
135:13 - button variable there so we'll just go
135:15 - underneath here and then we'll grab that
135:17 - start stop button
135:19 - add the event listener we're going to
135:21 - look out for a click event we'll grab
135:23 - the function
135:25 - inside this function is going to be
135:28 - where we use those variables we just
135:29 - created so we're going to say if
135:32 - timer status
135:35 - is equal to
135:37 - stopped
135:39 - we then want to grab that timer interval
135:41 - variable and set it to
135:44 - our actual
135:45 - set interval function there
135:48 - paste that in there close that off
135:51 - we then actually want to change our
135:52 - button to switch from a play button to
135:54 - that pause button like it does in the uh
135:56 - demo example so we'll say document
136:00 - dot get element iid
136:03 - grab the
136:05 - start
136:06 - stop
136:08 - id there
136:10 - and then grab inner html
136:13 - set that to
136:15 - backticks and then we are going to grab
136:17 - the icon
136:18 - this has got a class of
136:21 - uh
136:23 - fa
136:24 - solid
136:26 - fa
136:27 - pause
136:28 - and then we want to actually include the
136:30 - id
136:31 - and which gives it that color of orange
136:34 - and this has the id of
136:36 - pause
136:37 - and then we'll close this off and then
136:39 - we also want to change the value of our
136:41 - status
136:42 - so we're going to grab the timer status
136:45 - and set this equal to
136:47 - started
136:48 - else
136:50 - if the stopwatch is now running we also
136:51 - want that functionality of where we can
136:53 - pause the timer so to do that we need to
136:56 - grab the window object again grab the
136:58 - clear
136:59 - interval function and what this will do
137:00 - is actually stop our timer and then
137:03 - insert us
137:04 - time our interval
137:06 - variable which is in reference to our
137:08 - timer variable there close that off
137:11 - and then of course when this statement
137:12 - rings true we also want to change our
137:14 - pause button back to our play button so
137:17 - we're going to say document
137:18 - dot get element by id
137:21 - grab that start
137:22 - stop btn
137:24 - id again and then change the inner html
137:27 - this is going to equal
137:29 - another icon to i
137:31 - dot class
137:33 - equals f a dash solid
137:36 - f a dash play
137:38 - and then we also want to grab the id
137:40 - of play so it has that
137:42 - green background color close this off
137:45 - and then again obviously change the
137:47 - timer status
137:48 - back to stopped so what we've done here
137:50 - inside this function was just checking
137:52 - if the timer status is equal to stopped
137:55 - the timer will start
137:56 - and the play button will also change to
137:58 - a pause button
138:00 - as well as the time of status changing
138:02 - to started
138:03 - else we click the pause button the time
138:05 - will stop with our clear interval
138:07 - function there and the pause button will
138:08 - revert back to our play button as well
138:10 - as the timer status we'll change back to
138:12 - stopped
138:14 - and this now should complete the
138:15 - functionality for playing and stopping
138:16 - our timer so if we go ahead and test
138:18 - this
138:19 - you can see it's changing to a pause
138:20 - button and our time is starting to
138:22 - increment if i press the pause button
138:24 - again it will stop the timer and our
138:26 - button revert back to the play button so
138:28 - as you can see our function's working
138:30 - perfectly fine there now we're almost
138:32 - done we just need to add an event
138:33 - listener to our reset button here so
138:35 - we're going to need this event listener
138:36 - here grab the reset button
138:39 - variable add an event list now look out
138:41 - for a
138:43 - click event grab the function
138:45 - keyword inside of this function scroll
138:47 - down a bit so you guys can see we want
138:49 - to grab the window object again clear
138:52 - the interval so it stops and then
138:54 - reference that timer interval and then
138:57 - what we want when we click on this is
138:59 - grab the seconds
139:00 - this is going to equal
139:02 - zero duplicate this
139:04 - two more times the same for the minutes
139:07 - and then same for the hours and then
139:09 - again we want this to actually display
139:11 - in the browser
139:12 - so we'll say document
139:15 - dot
139:16 - get element by id we want to grab the
139:18 - timer and then grab
139:20 - inner html and then set this to the base
139:24 - of zero zero for the hours minutes and
139:27 - then for the seconds so with this event
139:29 - listener we just created here for our
139:30 - reset button inside of the function
139:33 - we're again stopping our timer interval
139:35 - using the clear interval method which is
139:37 - essentially just a method which clears
139:39 - the time i set out with a set interval
139:40 - method now this of course is referencing
139:44 - this set interval here so again this
139:46 - will stop our stopwatch just like it
139:47 - does in the else statement that we've
139:49 - done here now of course we don't just
139:50 - want to stop the timer we actually want
139:52 - to reset it so we revert all of our
139:55 - seconds minutes and hours back to zero
139:57 - which we've done here just by changing
139:58 - the values back to zero and then of
140:00 - course we want this actually outputted
140:01 - into the browser so we use the
140:03 - document.getelementbyid grab the timer
140:05 - and change the inner html to zero on the
140:08 - minutes hours and seconds so this now
140:10 - should actually reset our stopwatch to
140:11 - zero so if we go ahead and test this out
140:14 - press the play button so it starts
140:15 - incrementing and it also reverts to a
140:18 - pause we'll pause this reverts back to
140:20 - the play button and our timer stops and
140:22 - then now if i click this reset button it
140:24 - should reset our timer and as you can
140:26 - see our stopwatch is working with full
140:28 - functionality and this now concludes our
140:30 - fourth project so quite a bit more
140:31 - javascript to take in for this project
140:33 - however once it's understood it's
140:34 - actually quite a fun exercise to create
140:37 - alright guys so for our master level
140:39 - project we're going to be creating a
140:40 - to-do list and how this to-do list works
140:42 - is that we simply enter a task inside
140:44 - the input tab here and then we enter
140:46 - that task with our add button and what
140:48 - this will do is add that task underneath
140:51 - our tab here and when that happens we
140:52 - get some extra functionality so let's go
140:54 - ahead and see what that looks like so
140:56 - let's just enter a task here let's say
140:59 - collect
141:01 - shopping
141:02 - we'll enter that task and as you can see
141:04 - that task is added underneath and as
141:06 - well as that we've got some extra
141:07 - functionality so we've got this orange
141:09 - box here and we've also got this trash
141:11 - can now what this orange box does is
141:13 - that if we complete the task and we
141:14 - click on this it'll put a line through
141:16 - it
141:16 - and if we want to get rid of the task
141:18 - completely we'll just click the trash
141:20 - can as you can see it will delete that
141:22 - from the actual task list now of course
141:24 - this isn't the prettiest to-do list but
141:25 - again this isn't really the objective of
141:27 - this project so feel free to style it
141:29 - however you like when you guys are
141:30 - creating yours now this project is
141:32 - actually going to include quite a lot of
141:34 - what we learned in part one so i hope
141:35 - you guys are paying attention so far our
141:37 - master level project project five the
141:39 - to-do list these are the key concepts
141:41 - we're going to need for the project so
141:42 - we're going to be using
141:43 - document.elementby d of course again
141:46 - we're going to be using the event
141:46 - listener e.target we're going to be
141:49 - using the penchal method the create
141:51 - element method the parent element method
141:53 - as well as the remove and the
141:54 - classlist.add method so quite a lot of
141:56 - the concepts we learned in part one so
141:58 - let's head into vs code now and create
142:00 - our to-do list
142:01 - so the first thing we need to do is
142:02 - create our markup for our to-do list so
142:05 - we're going to wrap this in a div the
142:06 - class of container and then we're going
142:08 - to have a div which houses the input and
142:10 - the button so we're going to call this
142:12 - oh we're going to give this an id of
142:14 - add the task
142:15 - container
142:17 - inside of that we're going to have our
142:18 - input should be the type of text
142:21 - we're going to give it a placeholder
142:22 - value
142:24 - of enter
142:26 - task
142:27 - which is just going to be that text
142:28 - inside of the input and then we're going
142:30 - to give us an id
142:32 - of
142:33 - input
142:34 - task because we're going to need to grab
142:35 - onto this to give it an event list line
142:38 - in the javascript
142:39 - and then we'll go underneath this and
142:41 - create our button this button is going
142:43 - to have an id of
142:45 - add task because we're going to need to
142:47 - grab onto this as well we're going to
142:48 - have an icon with a class of
142:51 - fa
142:52 - solid dot
142:55 - fa plus and there's our input and our
142:57 - button there and then we'll go outside
142:59 - of this container and we're gonna have
143:01 - an id which is gonna be a container for
143:03 - all of the tasks when we do add them to
143:05 - our to-do list
143:06 - so we're just going to give this an id
143:08 - of
143:09 - task container
143:11 - and that's all we're going to need for
143:12 - the markup let's head into the style
143:13 - sheet now and give this some styling so
143:15 - the first thing we're going to want to
143:16 - do so the first i'm going to do in here
143:18 - is just grab the body give this a height
143:21 - of 100 viewport heights and then give it
143:23 - that background
143:25 - image
143:27 - which is going to be an image folder
143:29 - and it's for project 5. then some extra
143:32 - style in here
143:33 - just the same as the others
143:36 - now we want to align all of the content
143:37 - in the middle so we're using flexbox
143:40 - items to the center
143:43 - so that'll center our content
143:45 - let's now give some styling to the um
143:48 - add task container so it's got the id of
143:50 - add
143:51 - task
143:52 - container
143:53 - this is going to have a width of say 350
143:56 - pixels
143:58 - some padding
143:59 - say 20 pixels on the top and bottom and
144:01 - 10 pixels on the left and right
144:03 - and give it some background
144:06 - color of white
144:09 - and then
144:10 - our trusty friend border radius just to
144:12 - give it those rounded edges
144:14 - and then give it some box shadow because
144:17 - always looks good with a bit of box
144:18 - shadow
144:20 - and then we're going to also need to
144:21 - display this as flex because we want to
144:24 - apply some flex rules to the input and
144:26 - the button there
144:27 - so let's go ahead and do that let's
144:31 - go and grab the input
144:33 - give this a flex of five so it takes up
144:36 - most of the space
144:38 - uh
144:40 - give it some margin
144:43 - to the right
144:45 - so it's a bit space between that and the
144:46 - button so we'll say about
144:48 - say about 10 pixels
144:50 - give it the border radius
144:53 - for those rounded edges
144:55 - and then font size let's make this a bit
144:57 - bigger so let's say 1.2 rem
145:01 - and then let's also give it some padding
145:03 - so about
145:05 - five pixels see what that looks like
145:08 - yeah looks pretty good
145:10 - and then for the button itself
145:12 - this has the id of add
145:15 - task
145:16 - say font size for this because it's
145:19 - saying icon we increase the size with
145:21 - the font size property
145:23 - say 1.1 rem maybe 1.2
145:26 - yeah that looks good and then
145:28 - let's also give this some padding
145:30 - all the way around
145:32 - and
145:34 - i forgot to actually
145:36 - apply the flex properties so let's give
145:38 - this a flex of one just so occupies a
145:40 - bit of its own space
145:42 - um let's give it a background color
145:46 - of white
145:47 - and the color of the
145:49 - icon
145:50 - green and then
145:53 - the border
145:55 - let's make it green
145:57 - solid 2 pixels classic border radius so
146:01 - that's looking pretty good and i think
146:03 - in the demo this has a hover effect so
146:06 - let's actually apply a transition to
146:08 - this
146:09 - to
146:10 - 0.3 seconds
146:12 - grab this
146:14 - and then apply the hover
146:16 - and let's change the background color
146:20 - to
146:21 - green
146:22 - and the color of the icon
146:25 - to
146:26 - white
146:26 - so let's go ahead and see if that's
146:28 - working as you can see it's got a nice
146:30 - hover effect now so we know that we're
146:32 - going to need to click on this to add a
146:33 - task now we're not completely done with
146:35 - the styling as you'll see in a moment
146:37 - when we um enter a task but let's first
146:39 - add that functionality of adding a task
146:42 - to our to-do list so let's go into the
146:43 - javascript file and then we can start to
146:45 - enter tasks after this so let's head
146:47 - into our project 5.js file
146:50 - so first things first in the javascript
146:51 - we're going to need to create some
146:53 - variables one for the actual button here
146:56 - one for the input and then one for the
146:58 - task container which is going to hold
146:59 - all the tasks
147:00 - so we'll do the first one
147:03 - put comment here first
147:06 - variables
147:08 - and we'll say
147:09 - add
147:10 - task
147:11 - equals document dot get element get
147:15 - element by id
147:17 - so the add task button
147:19 - has the id of add
147:22 - task
147:24 - and then one for the task container
147:28 - we'll call this variable task container
147:30 - it's going to equal
147:32 - document dot
147:35 - get element
147:36 - by id
147:39 - id of task
147:42 - container and then we're gonna have one
147:45 - for
147:46 - the input task
147:49 - document
147:51 - dot get element iid
147:55 - and this is gonna again be for our input
147:56 - which has the id of
147:58 - input task
147:59 - so we've got our variables the next
148:01 - thing we want to do is create an event
148:02 - listener for our add button here which
148:04 - is pretty much going to hold
148:05 - all of the power
148:07 - so
148:08 - say
148:10 - event listener
148:12 - for
148:14 - add button
148:16 - so we'll say add task which is that
148:18 - variable there
148:20 - add event listener we're going to look
148:21 - out for a click event
148:23 - and this is a function
148:25 - and inside of this function the first
148:27 - thing we're going to do is create div
148:28 - and then we're going to store it inside
148:30 - a variable of task
148:32 - so we'll say let task equals document
148:36 - dot create
148:38 - element and we're going to be creating a
148:41 - div
148:41 - and this div is essentially just going
148:43 - to house um our
148:45 - task as well as that extra functionality
148:47 - of the check button and the delete
148:48 - button
148:49 - so we're also going to want to give this
148:51 - task
148:52 - a class
148:54 - so we can style it
148:58 - this is going to have
149:00 - class of task
149:01 - so we've got our div there now we're
149:03 - going to need to insert a list item for
149:05 - the actual task itself as well as that
149:07 - again that functionality of the check
149:09 - button and the delete button so first
149:11 - we'll do the list item
149:13 - it's going to equals document dot create
149:18 - element i'm going to create an li
149:20 - then we're going to want to and then for
149:22 - this list item we're going to want to
149:23 - display that text that we insert in the
149:25 - input or the value so to do that
149:30 - i'm going to grab the li
149:32 - variable and then we're going to say
149:33 - inner
149:34 - text is going to equal
149:37 - and we'll do backticks here
149:40 - and then we'll insert that variable of
149:44 - input
149:45 - task got the value again it's just what
149:48 - the value is that we're going to be
149:49 - inserting so whatever task we insert
149:51 - inside of our input
149:53 - and then of course we're going to want
149:54 - to append this
149:56 - inside of that div which is the variable
149:58 - of task so we'll
150:00 - append the li so now we've got our list
150:02 - item the next thing we want to include
150:03 - now is the check button and the delete
150:05 - button so we can include some extra
150:06 - functionality when we do insert a task
150:09 - so
150:10 - so we'll say
150:11 - let's create a variable called check
150:14 - button this is going to equal
150:17 - document dot create
150:20 - element and we'll create
150:23 - our button
150:25 - and then we'll say uh let's include the
150:27 - icon in here so we'll say check button
150:31 - dot in uh html
150:35 - is equal to
150:37 - i
150:39 - say class of
150:41 - f8 solid
150:44 - it's insert the quote marks there
150:47 - so fa solid fa check
150:50 - and then we'll just close that off
150:53 - and then we obviously need to style this
150:55 - so we need to include a class
151:01 - and
151:02 - check
151:04 - task
151:05 - and we'll say task dot
151:07 - append child
151:09 - and then obviously you need to include
151:11 - this inside of our div
151:13 - so we'll just say task
151:15 - start append
151:17 - child and then we'll append the
151:19 - check button and then we'll duplicate
151:21 - this
151:22 - for our
151:24 - delete button
151:27 - change release to delete
151:29 - button and then
151:32 - this one has trash
151:35 - can
151:37 - and then let's also change the class to
151:39 - delete
151:40 - task
151:45 - so we've created all the elements we're
151:46 - going to need to include in our task
151:48 - the next thing we need to do now is just
151:49 - make sure this actually shows and
151:51 - appears in our browser when we try and
151:52 - add a task so
151:54 - that will say if
151:56 - and actually i first just want to show
151:57 - you that we have a bit of validation
151:59 - here so if we take a look at the demo
152:00 - example if we try and enter a task
152:03 - without actually entering anything in
152:05 - the input you can see we get this alert
152:07 - box which has please enter task so for
152:09 - this button to work we need to either
152:10 - add a task or it's going to show us this
152:12 - alert box to tell us to enter a task um
152:14 - just so it's like a bit of validation to
152:17 - the project
152:18 - so to do that we'll say if
152:21 - input
152:23 - task dot the value so whatever value we
152:26 - put inside of our input
152:28 - is equal to
152:30 - nothing then we'll include that alert
152:32 - box
152:34 - please
152:35 - enter
152:36 - a
152:37 - task
152:39 - so we'll just see if that's working as
152:41 - you can see that alert box is working
152:43 - so i'll say else
152:46 - then grab the task container
152:49 - which is going to be the container
152:50 - houses or the task then we're going to
152:52 - append
152:54 - child and we're going to append that
152:55 - task which houses um the check button
152:57 - the list item and the delete button so
152:59 - we'll just close that off and we'll see
153:01 - now if this works so we'll enter a task
153:03 - say collect
153:05 - shopping hit enter and as you can see
153:08 - there it's included our list item and
153:10 - it's also included our two buttons that
153:11 - we created obviously we're gonna be
153:14 - starting this in just a moment but one
153:15 - other thing i want to do just before we
153:18 - go into the style sheet and style this
153:20 - is that i want this to revert back to
153:22 - the placeholder text instead of holding
153:24 - the
153:25 - value we put in the input
153:27 - so uh to do that just grab the input
153:30 - task variable
153:31 - and the value
153:33 - we want this to equal nothing so if we
153:35 - go ahead and type that out again
153:37 - collect
153:39 - shopping
153:41 - enter that you see it adds the list item
153:43 - but it also removes it from the input so
153:44 - we can insert another task so we're
153:46 - almost nearly done here inside of the
153:47 - javascript we'll come back and add the
153:49 - functionality um to the checkbox and the
153:51 - delete button but first let's just start
153:53 - all of this so it just looks a lot nicer
153:55 - and easier to work with so head back
153:57 - into the style sheet
153:58 - so let's apply the styling now for our
154:01 - um
154:02 - tasks when they get added to the list so
154:04 - we'll just put a comment here saying
154:06 - styling for tasks
154:09 - which get
154:10 - added to
154:12 - the
154:12 - list
154:14 - so first we'll grab the
154:16 - tasks which is the div which is going to
154:18 - house all of that content so we're going
154:20 - to just give this a width of
154:24 - 100
154:27 - and then we're going to give this a
154:29 - background color
154:30 - of white so we can actually see the
154:32 - content
154:33 - um
154:34 - let's also
154:36 - give this some
154:38 - broader radius
154:39 - about 10 pixels and then
154:41 - also the box shadow always love a bit of
154:44 - box shadow
154:47 - and then um
154:49 - add a bit of padding here now
154:52 - say about
154:53 - five pixels
154:56 - and let's push this down a bit actually
154:59 - from
155:00 - our enter tab there so let's
155:03 - give this a margin
155:05 - bottom of 20 pixels
155:08 - so just to separate the two
155:11 - and then let's also
155:14 - give this a bit margin bottom as well so
155:16 - it separates um all of the content all
155:19 - of the tasks a little bit so just say
155:21 - five pixels
155:23 - and then let's grab display
155:25 - flex
155:27 - and let's say justify content
155:30 - space between
155:34 - and then let's now grab the list items
155:37 - itself
155:38 - so dot task
155:41 - li
155:44 - remove the list style
155:47 - put a point
155:49 - let's give this a flex of four
155:52 - so it takes up most of the space
155:54 - uh let's give it a bit of padding
155:58 - about five pixels
156:00 - and let's increase the font size of
156:02 - these
156:03 - to say uh
156:05 - let's say 1.2 rem
156:08 - a bit bigger 1.3
156:11 - it looks good and then
156:14 - let's give this a bit of margin as well
156:18 - 10 pixels
156:24 - now as for the buttons themselves grab
156:26 - the task grab the buttons
156:29 - and we'll give these a flex of one
156:33 - and let's also
156:38 - give these rounded edges so border
156:40 - radius 10 pixels
156:42 - and then the background color of these
156:44 - to be uh
156:46 - let's make them white
156:48 - now let's grab the um
156:51 - items themselves actually let's change
156:53 - the cursor to a pointer as well so let's
156:55 - grab the task dot
156:58 - check
156:59 - task
157:01 - it's going to have a color of orange
157:08 - and let's give them a bit of space and
157:09 - margin
157:11 - right
157:12 - five pixels
157:15 - and the border
157:19 - say solid
157:21 - two pixels orange
157:24 - and let's increase the font size of the
157:26 - tick there to let's say 1.5 ram
157:31 - it's looking good
157:33 - and then let's
157:34 - do a similar thing for the delete
157:41 - delete
157:43 - task
157:44 - but instead of color orange i have the
157:46 - color of
157:48 - red
157:50 - i don't have any margin on this
157:52 - but we'll change this to red
157:55 - and let's
157:56 - decrease the font sizes to say
157:58 - 1.3 yeah it looks better
158:03 - now both of these have a hover effect so
158:07 - let's
158:08 - do the check first
158:12 - say background color change that to
158:15 - orange
158:19 - and then the color
158:20 - to white
158:23 - copy this therefore
158:26 - the delete task
158:28 - and the background color is going to be
158:30 - red color's going to be white
158:32 - so we'll hover over these and you can
158:34 - see
158:35 - those are working so all we need to do
158:36 - now is just go to the javascript and
158:38 - apply the functionality to this so
158:40 - inside of our event listener here we go
158:42 - underneath the input task value there
158:45 - and then we'll say check
158:46 - button
158:48 - so add event listener we're going to
158:49 - look out for a click event function
158:53 - and we're going to say
158:55 - check button and then because we need to
158:57 - go
158:58 - one element above um we need to traverse
159:00 - the dom so just like we learned in part
159:02 - one we're gonna grab the parent element
159:05 - i'm gonna say dot style
159:08 - dot text
159:11 - decoration
159:13 - and this is going to equal
159:15 - line
159:16 - through
159:18 - so we'll check if that works
159:20 - so let's enter a task
159:26 - as you can see it's putting a line
159:27 - through um our content there now let's
159:30 - do one more for
159:31 - the delete button
159:34 - and we'll add an event listener to this
159:37 - and
159:39 - we'll look out for a click event
159:42 - grab the function
159:48 - we're going to need the event object
159:52 - and we're going to say
159:54 - let
159:55 - target
159:58 - equals e dot target which if you
160:00 - remember back to part one this is
160:02 - reference in the actual element that's
160:04 - been clicked
160:05 - and then we want to grab the target and
160:07 - then grab the parent element twice
160:10 - so we need to traverse the dom two times
160:12 - and then we want to press remove
160:14 - so with the target here we're
160:16 - referencing the trash can or the bin or
160:18 - delete button one level up there's a
160:21 - list item and then one level above that
160:23 - is the task so that's how it will remove
160:25 - it and then we'll just add this to um
160:29 - we'll just check this is working sorry
160:32 - so we'll enter this task collect
160:33 - shopping
160:35 - and then if we click the check button it
160:37 - will cross it out indicating that it's
160:39 - been completed and then if we want to
160:41 - delete it we just press the delete
160:42 - button here
160:44 - so we can add
160:45 - more than one value here so collect
160:46 - shopping add that
160:49 - and we'll do another one for
160:51 - walk the dog
160:53 - add that and then we can
160:56 - cross this out we can delete the collect
160:57 - shop in as you can see the to-do list is
160:59 - fully functional so that's actually
161:00 - going to be it for this project guys
161:02 - again the style wasn't really the
161:03 - prettiest for this project again this
161:04 - wasn't really the point of the project
161:06 - of course this was more about how we can
161:07 - manipulate the dom but this now also
161:08 - concludes the part two video of dom
161:10 - manipulation i hope you guys enjoyed the
161:12 - video and learned a lot throughout the
161:13 - two-part course be sure to leave it a
161:15 - like and leave any questions in the
161:16 - comments below that you may have and
161:18 - i'll see you guys in the next video

Cleaned transcript:

in this course you will learn about javascript dom manipulation this is where you use javascript to modify change or delete elements of a website in the first part of this course you will learn the basic features of a website dom and the javascript commands you can use to manipulate the dom in the second part of the course you will use what you have learned to create practical examples from beginner to advanced this course was created by code lab so just before we begin we're just going to take a look at a few prerequisites so this twopart tutorial is primarily for beginners so if you've never heard about the dom or maybe you're a little familiar with it but don't know how to utilize and apply it this tutorial is for you now in order to effectively understand the dom and how it relates to working with the web it's necessary to have an existing knowledge of html and css and i have crash courses on both of those if you want to check those out before you start this tutorial it's also super beneficial to have a familiarity with fundamental javascript so the syntax and the code structure if you guys want to learn about fundamentals of javascript check out my javascript crash course which covers the fundamentals so there's a couple things you'll need if you want to follow along this tutorial you're going to need a web browser and a code editor now these are all the options you can use and you can mix up these options if you like but this tutorial i'm just going to be using chrome and visual studio code again you guys can choose any combination you like now the structure of this tutorial we're first going to take a look at what the dom is then we're going to take a look at methods to select elements in the dom how we can traverse the dom how we can manipulate the dom and then finally we're going to take a look at event handling so we'll start this off by explaining what the dom is so the dom stands for document object model now the document object is a builtin object that has many properties and methods that we can use to manipulate the content the structure and the style of a project and this ability to manipulate the dom or the document object model is one of the most unique and useful abilities in javascript so almost any time a website performs an action such as toggling a navigation menu or rotating between slideshow images or even displaying an error when a user attempts to submit an incomplete form this is the result of javascript accessing and manipulating the dom now another way of thinking about the dom and understanding how it works is thinking of it as a tree of nodes like you can see on the screen now so this is just a basic diagram of a dom tree and all of its nodes now everything in this diagram is a type of node the elements the attributes the text content and even line breaks and comments which we'll see a bit later on are even considered nodes and all of these make up the dom tree now the dom object itself is actually a property of the window object which is the global top level object representing a tab in the browser and this window object has access to such information as toolbars the height and width of the window prompts and even alerts but in this tutorial we're only interested in the document object which is what is inside of the inner window and the stuff we want to manipulate now another important thing to note here is that most of these nodes in this diagram have a parent child sibling relationship the topmost node are either document node here is the root node of the dom tree which we use to access the dom and manipulate all of the content now this document node has one child node which is the html element and the html element is a parent node to the head and the body element now the head and body elements are what you would call siblings since they're on the same level in the dom tree underneath the head element you see it has one child node which is the title element and the text this is my website is a child node of the title element and these relationships are similar over the other side but the body element is the parent of the paragraph and the h1 the paragraph and the h1 are siblings to each other and the text content inside each of these elements are child nodes to the paragraph and h1 so the my link and my header our child nodes to the h1 and the paragraph element now we can also see by the paragraph tag we have a class attribute now html attributes such as ids or classes in this case styles etc also considers nodes in the dom hierarchy but they don't actually participate in this parent child sibling relationship like the other nodes do the way they are accessed is through properties of the element node that they're contained in now often there will be times you want to move throughout the dom so understanding this parentchild sibling relationship is crucial to understanding how javascript works with html all right guys so now we know a little bit more about what the dom is and learn about the dom tree the next thing to cover in the tutorial is how to select these nodes or elements in the dom tree for manipulation so before we take a look at all these methods of selecting elements let's just quickly go over the layout you see here in the browser so in the index.html file we've got a div of the class of container inside of that we've got a heading which has the id of main heading and then the text our favorite movie franchise underneath that we have a ul tag which has five list items inside of it and then each of these list items have a class of list items so super creative now this is what we're going to be working on when we're looking at selecting styling traversing and manipulating for the rest of this tutorial and then underneath that we have a script tag which has the attribute of source and this is just linked to the app.js file so again guys in order to be able to manipulate an element in the dom tree we first have to select that particular element now luckily for us there's several ways we can do this and the five major ways of selecting the elements are the ones you see on the screen now so we've got get element by d get element by class name tag name query selector and query selector all now some of these methods are pretty selfexplanatory but we're going to go over each of them one by one now so the first one we're going to go over is get element by id and as you probably guess you can select an element using this method by its unique id and this is the easiest way to find the html element inside the dom tree because as we know from css the id attribute is used for something unique now if we remember back to the html file you can see that we've got the h1 here which you see in the browser has the id of main heading so this is the element we're going to be selecting so first we need to select the document object model which is just simply document then get the method of get element by id single quote marks really important that you include those and then we're just going to grab the id which is main heading close that off now what we can do with this selection is actually place it inside of variables so we can manipulate it so we're going to go at the front here and just say const title and we'll set this to the id of main heading and if we log this into the console now so we'll just look in title you see it shows up on the console now and if i hover over this you can see it highlights in the browser there so you know now we've selected this element and then what we can do from here is now select that variable we just created for the element and we can add styles to the element manipulate its attributes traverse the element so all of that good stuff which we'll be looking at in just a moment now next we have the element by class name again quite selfexplanatory this method returns a collection of all the elements in the document with that specified class name so for example in our html file here you can see all of our list items have that really creative class name of list items so we can select all of these using the get element by class name method so we'll do the same thing we'll put inside a variable we'll just say list item and we'll set it to the document we'll say get element by class name put single quote marks in there and then we'll just say list items i think it's items yes items and then we'll just log this in the console so we know we've selected that element or these elements and as you can see using the method of get elements by class name we've now selected all of those elements now this method actually returns an array like object of all the child elements which have all the given class names so if we open this up you can see it's indexed and they're in the order that they are in the html file now the next method here which is get element by tag name is pretty similar to the get element by class name and that accepts a tag name and returns all of the elements of that specified tag name in the order in which they appear in a document so again return an array like object for all the child elements with the given tag name so for this example i'm going to do is just copy and paste the class name example comment this out and then we'll just say tag name and because the list items are list items we just type in li and if we take a look at the console now you can see it's got that html collection of all the five list items and they're all indexed in the order that they appear in the html file so you can see this method is pretty similar to the getelementbyclassname method now the query selected method that you see here is used to select one item or the first item that matches the selector is given so if you have multiple items with the same class name or the same id or even the same tag it will select the first one it comes across so the beauty of this method as you probably just guessed is that it can accept all css style selectors again allowing it to select it by its tag or its class or even its id so we can actually use this method to actually grab any element in our html file here so what i'm going to do is use it to grab the div of the class of container which is acting as a container for the rest of the content so we'll just go underneath here and we'll create a variable and we'll keep it super creative and call it container and we'll grab the document and then grab the query selector method and again with this method we can grab the div tag or we can grab the class name or if i had an id attribute we can grab that instead what i'm going to do is grab the div tag and then just log this into the console so we know it's working and as you can see in the console now using the query selector method we've selected that uh div with a class of container now as i just mentioned when we're using the query selector it selects the first item that matches the selector it's given which in this case is the div now if we go into the index.html file and we use several more divs again it's only going to select this first div here if we had more divs in this example and we wanted to select them all we then use the query selector all instead so uh what i'm going to do actually is just duplicate this uh one more time uh just zoom out a little bit and then uh just going to change a bit of the word in here so favorite sports and i'm not gonna bother changing the names here but just to show you guys that it selects all of them i'm just gonna copy and paste this but instead of query selector we're gonna say query selector all and then comment this out and quickly just comment all these out so we can only see that variable there and if you take a look at the console now you can see that this method returns a node list of collections of all the matching elements that matches that specific css selector which in this case is a div so similar to the get by tag name and get by class name where we get html collection in this method we get a node list and as you can see it selected both of the containers because unlike the query selector with query selector all it's selecting all of the divs in the index.html file so that's how we can select elements with the query selector and the queryselectoral method so to quickly summarize this section when you need to select a dom element you have five different options to choose from five different ways of essentially doing the same thing which is selecting an element or elements personally i primarily use query selector and query select all because these methods select elements through css selection and i primarily use this to select ids and classes mainly because these css selectors provide a really powerful and efficient way of selecting html documents especially ids because you likely understand that elements shouldn't have the same id that the id is a unique identifier of that element within the document so with that in mind selecting an element with its id is a safe bet because you wouldn't go and apply manipulation to different elements unless perhaps that's what you want to achieve in that case the query select all method and the class selector is what i typically use so now we know all the different methods that we can use to select an element in the dom tree we could finally start doing some manipulating now so firstly what we'll do is just get rid of all of this content here and then head in the index.html file and just get rid of the second container so we don't really need it so let's start things off by taking a look at how we can change the styling of an element so if you are familiar with css and css properties we have a way we can access these properties in javascript so the first thing we'll do is just select this main heading which we have in our index.html file here which is just the title of the container and so we're going to put that in a variable and we'll call this variable title and then document.queryselector method and we'll grab the id of this element which is main heading oh i need to put these in a single quote marks and then let's just log this in the console so we know this variable is working and as you can see now we've selected this element and stored inside the variable of title so what we can do now is actually manipulate the starting of this element and change it around using css properties so to access css properties in javascript we'll just first grab the variable we want to apply the styling to which in this case is the title or the main heading and then we simply type in the style property and then after this style property you just use any css property you want to apply to this element so what we'll do is just change the color of the text and we'll set this to let's say red and as you can see in the browser now we've changed the color of the main heading from white to red using the style property and then the css property of color now this type of styling is what you'd call inline styling and there are other methods to style elements with javascript but this is probably the most direct method now again if you take a look at the console you can see it's actually included the style attribute again because this is actually done through inline styling now it's important to know this because with inline styling this actually only works on a single element if i tried let's say applying it to all of the list items here this wouldn't actually work so just going to demonstrate that to you guys so let's uh create another variable and we'll call it list items and we'll grab all of those list items with query selector all uh they will have they all have um a class of list items and then let's just log in here list items uh so you see now in the console we've selected all of those list items now let's try and use the style property again on these list items and see if it works so we'll say style let's say let's try and change the color again or let's actually do the font size and just quickly guys i wanted to mention that it's important to remember while using the style property css properties are written in camel case and not with a more standard snake case which has the dash so the camel case is essentially just a capital letter to begin the second word and any subsequent word in the name or method or even a property font size in css would be written like this but in javascript we'll use camel case so just so you guys are aware of that now again back to what we were talking about if i tried changing all of the font size of these list items here so let's say to about two rem you can see this isn't actually working because it's trying to apply an inline style to uh five different list items which wouldn't work if we actually wanted to apply this styling to all of the list items we need to loop through the list items first so just to show you guys how that would work uh we'll say i equals zero and then uh we'll say i is less than the list dot length which just gives us the amount of list items inside of our um ul here which is five and then we want to say we want this to increment by one each time and then what we do now is just apply this and put it inside of our for loop and then we just need to index the eye and as you can see now it's quite subtle so let's just make it a bit bigger you can see all of the list items now have that styling because it's been looped through using the for loop so that's how we can apply inline style into elements um using the style property or multiple elements if we loop through them the next thing i want to take a look at is creating elements so what i'm going to do is just comment all of this out first get rid of the list items there i'm just going to put a comment here for styling elements and then now we'll do one for creating elements so again another really cool thing about dom manipulation is that we can create elements from our javascript file here and we do that with a simple method really of the create element so let's say we want to add another list item here in our favorite movie franchise uh container what we need to do first is just create a variable for the unordered list um because we need to enter this on order list uh so we'll say document dot query select that grab the ul and then what we'll do now is use the career elements method to create another list item so we'll just use another variable here so document dot create element and we'll create a list item now this isn't actually going to do anything at the moment this element we've just created in this variable here needs to be inserted into our document and the way we can add elements inside of the document is using the append method so what we'll do is first grab the ul because we want to append this list item inside this ul and then we grab the pen method and the element we want to append which is the variable of li which again is just this list item now you won't be able to see it currently at the moment but if we take a look at um the document here and if we open this up and then open up the div the classic container open up the ul you can see there's an extra list item inside of this ul now because we've inserted this element now using the append method now what we can do from here is add some content inside of our list item so i'm just going to bring this back down go back in the console and i'm just gonna put a comment here for adding elements and then off this we're just gonna say um modifying the text now we don't really need this console log anymore so there are several ways we can include text or modify text in our html and those ways are inner text text content and in html now there is a difference between three so to demonstrate those differences i'm just going to put another html tag inside of the first list item here so i'm just going to put a span i'm going to put neo because that's relevant to the matrix and then i'm just going to create another variable to grab that element there so we're going to say first list item set that to the document and say query selector and then we'll grab that list item and then i'm just going to grab the console log again actually and put in here first list item oh forgotten s so there's our first list item now what i'm going to do here is include in our text first so it just displays the text duplicate this a couple more times and i'm going to grab text content and then also grab in html so if i just pull this up a bit more now if you take a look at the console you can clearly see the differences uh between the three now and that is essentially just the way they're displayed so within a text here you can see we're simply getting the visible text contained inside that node with text content you see it's actually being displayed the same way it is in the html file so it's got all those indents and it's jumping onto a new line and within html a similar sort of thing with the indents and jumping on new lines but it's also showing the tags so showing us the span tags inside of our html here so again that's pretty much the differences between the three now another thing here is that within a html there is a bit of a danger using inner html and that's mainly at security issues you don't really want user input to be displayed in the inner html because this actually allows the user to control the javascript and the html on your web page which obviously has its problems there so in most cases you're just going to use inner text so let's go ahead and use that and implement that in our list item that we created so we're just going to grab the li grab in a text and we're going to set this to equal let's say xmen which is another franchise if you take a look at the browser now you can see that text has been included inside of our list item now all right guys so we've created our list item here we've added it into the ul using the append method and we've also given it some text the next thing i want to do now is make our list item look like the rest of the list items so to do that we're going to need to learn how to modify and manipulate an element's attributes or classes luckily for us javascript provides several methods and properties for addin removing or changing the html elements attributes or classes so we're going to go underneath here and just put a comment of modifying attributes and classes and the first method we're going to take a look at is the set attribute method so we'll grab our list item and we'll say set attribute and as you probably guessed because it's pretty selfexplanatory what it does is set an attribute to our specified element which in this case is our list item so for this attribute we need to include two values the first is the attribute you want to set which will just put an id and then the second is the name you want to give that attribute so we'll just give this attribute let's say let's give it the id of main heading and as you can see in the browser now because we've given this list item the same id as our main heading here which is main heading you can see it's got the exact same styling so as you can see the set attribute method is quite powerful now the next method i want to take a look at is how we can actually remove this attribute so we'll go underneath here and we'll say li dot remove attribute again pretty selfexplanatory so let's say we want to remove the id from our list item there all we put in here is just id close that off and you can see now it's reverted back to its default styling and doesn't have that styling that the main heading does now there's also a way we can access attributes in javascript so which follows a similar sort of method so we'll say let's say we want to get the attribute of our main heading here what we need to do is first let's just create a variable for it so const and we'll say title equals document dot query selector and then grab the main heading and then let's just log this in the console so we'll say um title dot get attribute that we want is the id and as you can see in the console now it's giving us main heading which is the id associated with our main heading here so that's how we can deal with attributes here let's take a look at how we can deal with classes so i'll just get rid of all of this and we'll grab our list item again and then we'll use the property of class list now this classlist property has quite a few methods we can utilize and the first one we'll take a look at is how we can use the add method which of course will just add a class to our list item so we'll say dot add so let's say list items and as you can see when we add that class now our last list item here is the exact same styling as the other list items because again we've added the same class as the rest of the list items now what we can also do here is remove this so we'll say remove and again it will just revert back to its default styling because of course we've removed that class now now another thing we can find out is whether an element has that specific class so um i'm just going to log this item into the console here class list and we'll use the method of contains and we're going to find out if it contains list items and as you can see it's returning us false because of course we remove that class now up here so it's giving us false if we change this method to add instead you see now it's returning us true because of course a list item here now does contain uh this class here so that's how we can modify attributes and classes in the dom of course the dom has many more methods than this but these are just some of the core methods you'll likely need to use now there is still one method left to use and that's how we can remove an element and the method to remove an element or our list item in this case is a pretty simple method to remember i'm just putting here first remove elements so all we need is the remove method so we'll say li dot remove and if you take a look at the console now you can see that the list item has been removed and if we just open up all of the elements and we'll open up the div here and open up our url you can see that list item is no longer there so we've learned quite a bit about the dom now we've learned how to access elements and dom we've also learned how to create add modify style and remove elements in the dom too the next thing i want to take a look at is how we can navigate the dom so i'm just going to bring you guys back to the slide which we looked at at the beginning of this video where we have a really basic diagram of a dom tree and all of its nodes now everything in this diagram that you see here is a type of node so that includes the elements the attributes the text content and even line breaks and comments inside the html document are considered nodes and all these together make up the dom tree now the dom object itself is actually a property of the window object which is the global top level object representing the tab in the browser the window object has access to so much information such as the toolbar the height the width of the window even things like prompts and alerts but in this tutorial we're only interested in the document object which is what is inside of the inner window and the stuff that we want to manipulate now if you also remember back to the beginning of this tutorial most of these nodes in this diagram have a parent child sibling relationship the top most note i.e the document node is the root node of the dom tree which we use to access the dom and manipulate all the content now this document node here has one child node the html element the html element is a parent node to the head and the body elements now the head and body elements are what you would call siblings since they're at the same level in the dom tree underneath the head element you see it has a child node which is the title element and the text this is my website is a child node of the title element these relationships similar over on the other side here where the body element is parent to the paragraph and the h1 the paragraph and h1 are siblings and the text content inside of each of these elements are child nodes so the my link and then my header are child nodes the h1 and the paragraph element as you can see here we also have a class attribute and html attributes such as ids styles classes etc also considered as nodes in the dom hierarchy but they don't actually participate in the parent child relationship like other nodes do they're accessed as properties of the element node that contains them so they would be a property of the paragraph tag for example in this diagram now often there will be times where you want to move through the dom without specifying each and every element or node beforehand so learning how to traverse the dom tree is essential to understanding how to work with javascript and html so let's head back into vs go now and look at the different ways we can traverse the dom alright guys so it's pretty drilled in now that we're aware that the dom is full of different types of nodes which have parent child sibling relationships and if we just head into the html file here just to see this in action you can see that the html element is the parent of the head and body element and the body element is the parent to the div but not the h1 here or the ul since these are two levels down from the body now the h1 and the ul are what you would call siblings because they're on the same level so what we're going to do here is use this ul and traverse upwards in the dom and find out what the parent of the ul is and also the grandparent so we'll head back into the app.js file and go underneath parent no traversal and let's just first create a variable to grab that ul so we'll say let ul equals document dot query selector and then grab the ul and then just log this in the console so we've got a ul then you can see it hovers over it and as you know nodes in the dom are referred to as parents children or siblings depend on the relationship to other nodes now the parent of any node is a node that is one level above it or closer to the document in the dom hierarchy so to find out the parent node here we have two options so the first option is parent node duplicate this and we also have parent element and as you can see in the console now we're getting the div with the class of container because this is the parent of the ul here now say we wanted to actually traverse upwards again and find out the grandparent of the ul all we need to do is double down by chaining the property together so after parrot node we just write paranoid again and we'll do the same thing with parent element and as you can see now in the console we're getting the output of body because two levels up from the ul here first is a container and then the body so as you can see what we've done here is managed to traverse up the dom tree from the ul to figure out what the grandparent is so it's really useful to know these kind of properties now you may be wondering what the difference is between these two and it will make more sense when we take a look at how we can traverse child nodes in just a moment but basically the clue is in the name so you can see here we have parent element and parent node and we know that elements are a type of node and this is where it can confuse people because as we know notes can be text it can be a document comments or even line breaks so this distinction can help grasp the difference between the two now that might still confuse you guys a little bit so i'm just going to show you this in action so i'm going to comment all these out and i'm just going to create a variable for our html element so we're going to set this to document dot document element and then i'll just log this in the console again so we'll log in here html and you can see we've selected our html there now i'm going to do the same thing and apply the parent node and the parent element property to this html variable say parent node duplicate this and we'll say parent element and as you can see when we take a look at the console now the parent element is returning us null that's because the job of the parent element property here is to try and retrieve the parent element of the html element ie the document node however the document node and an element node aren't the same type of node hence why we're getting this null here so the parent node property will try to retrieve any node regardless that type of node so generally parrot node is more commonly used when we're traversing the dom again even if you use parent element you likely won't run into this problem so that's how we can navigate upwards of the dom let's now take a look at how we can traverse downwards in the dom by taking a look at the child node traversals in the dom tree so for this example we're still going to stick with the ul and we're going to traverse downwards into the list items so i'm just going to comment this out and then go underneath the comment and because we're sticking with the ul here i'm just going to put this here so we can see it and i'm just going to console log in ul now just like the property of paranormal and parent element we also have child node properties and child element properties which pretty much work in the exact same way so let's first take a look at the child nodes property and see what it gives us so after the ul i'm just going to type in here child nodes you can see in the console now it's giving us a node list and if i open this up we get a list of every child node inside of the ul now again this is where the distinction between nodes and elements becomes more evident because you might have expected this property here to give us the five list items but in addition to the five list items six text nodes this is because we actually wrote out our own html this wasn't generated by javascript and inside of the html here the indentation between element nodes is counted in the dom tree as text nodes that so just to show you guys what happens if i remove one of those indentations so i'm just going to put this list item in the same line as the fourth one you can see now in the node list it's saying 10 instead of 11 again because indentations are counting as text nodes so again that distinction between nodes and element nodes becomes even more evident so what we'll do is actually just put that in another line again so we get a node list of 11. now as well as this child noise property here we also have first and last child and as you probably guessed this just selects the first and last child node of our list here so i'm just going to duplicate this a few more times and for this example we need to write as just first child and last child and again this is just returning us text nodes because if we take a look at the um node list here you can see that the first index is a text node and then the last index is also a text node now when we're using first chart and last child here which is selecting the first and last node we need to be very mindful if we try styling element using this property so just to show you guys what i mean uh if i grab the ul here and i say first child and we're gonna style first child we'll say background color and we'll set it to let's say blue you can see we're getting an error now because the first child here is actually a text node it's not an element now to select the node we want to apply this styling to what we can do instead of using first child here is grab the child nodes property and then take a look at the node list and i think we wanted to apply the style into this item which is indexed.1 so we grab our square brackets grab the first index number and if you take a look at the browser now you can see that our first list item here has the background color of blue which we applied here in this styling now again like the parent element here we also have the same thing for the children elements which is only going to select the element nodes so what we'll do is just comment all these out and we'll use that ul again and we'll log in uh let's log in ul and then grab children now instead of a node list you can see it's returning also html collection and it says it's five which is these five list items inside of our ul now again like first try on our last child we can do the exact same thing for the first child elements so we'll say first child element so that's how we convert downwards into the dom using child node properties so lastly now we're just going to take our sibling no traversal so again knows that our siblings are nodes that are on the same tree level in the dom so if we take a look at our html again we know that the h1 and the ul are siblings to each other because they're all on the same level now it's also important to note here that siblings don't have to be the same type of node like they are here as element nodes if i put a text comment between the two of these so i'm just going to put in here uh space between this too would classify as a sibling to the h1 and the ul because they're all on the same level so let's put that in a visual perspective for you guys so i'll go back into the app.js file and i'll underneath this comment here and i'm just going to grab our uo again and comment these out and just log this into the console here so we get our ul again now just like the two previous traversal properties we have properties for node which covers all the nodes and we also have properties which just cover element nodes so let's first take a look at select all types of nodes so after the ul here we've got the previous sibling and if i duplicate this we've also got the next sibling and you can see in the console now we're getting two text nodes and just to show you why we're getting two text nodes i'm just gonna create another variable for our div just call this div we'll grab the div and we want to find out all of the child nodes inside of that div oh it's about div wrong you can see we'll open this up now and as you can see when we've used these two properties here we've got the ul before the ul is a text node and after the ul is also a text node so that's how these two properties here are working now again like the other properties we used beforehand with parent element and all of these child element notes we have the exact same thing for sibling no traversal so again if you just wanted to find out the sibling element nodes instead of using previous sibling and next sibling we can use the previous element sibling and we can also use next element sibling and i'm just going to comment out this if you take a look at the console now you see we're getting the h1 because this is the previous element sibling node um beforehand in the html as you can see here and then for the next element sibling we're getting a null because there's no element nodes after the ul all right guys so we've gone through quite a bit of information now regarding the dom we've looked at what that dom is we've looked at how we can add elements to the dom style elements in the dom remove and modify elements in the dom and we've just learned how we can traverse the dom the last topic i want to cover in this tutorial is taking a look at event listeners now event listeners are among the most frequently used javascript structures in web design and what they do is basically just allow us to add interactive functionality to html elements by listening to different events that take place on the page such as when a user presses a key or when elements load or when a user clicks a button now the most common events you might listen out for are load events touch start events key down events mouse over events and of course click events now we'll take a look at some of these in just a moment and i will leave a link in the description if you guys want to check out all the other dumb events but let's learn about the two most common ways we can add event listeners in our projects now the first way we can include an event is actually inside of our index.html and directly inside one of these elements so what this event is is the global on event attribute and this way of creating an event to an element works pretty much like any attribute we inserted directly into the html element that's present on the page or the element we want to apply the event to and then apply a one line of script to that particular element which in this case is going to be this button here for our first example so we'll go inside the opening tag here like we did with any other sort of attribute and then we include whichever event we'd like to happen for this example we're going to use an on click event so we'll say on click and what i want to fire off when we click on this button is just to show us an alert box that has the content of i love javascript so we'll put in here alert and then we'll put the content of i love java script and that's all we need to write for this attribute so the syntax for this as you can see is pretty simple we've included the on click event attribute so when we click on the specific button in the browser now the event will fire off and the alert function will be executed which will have the text i love javascript inside of it so we'll head into the browser now and i'm going to click on this button here and as you can see when i click on the button the alert box pops up and it's got the content of our love javascript which we wrote inside of this attribute here so that's the first way we could include an event in our projects which is just direct into the html on that element we will apply the event to so pretty simple and probably the most direct method of including an event listener inside of our project now the next method to create an event listener is the javascript ad event listener method so to create that we'll head back inside our app.js file and the way this method works is first include a element that we want to apply the event listener to so we'll just put in here element and then we use the add event listener method and then inside of here we include the type of event in this example we'll use another click event and then after this the second parameter is the function we want to fire off and then we also have an option here for a third parameter which will take in a boolean data type so true or false and this is in relation to bubbling and capturing which we will speak about in a moment but we're not going to include that at the moment because by default it's already false so it's not too important yet so we'll just close that off so that's essentially the syntax i've had an event list now using the ad event listener method so for this example we're going to use the example 2 button here and again we're going to create another alert box so the first thing we want to do is create a variable for us to reference from so we'll call it button 2. and the button two in the html here you can see has a class of btn so we're gonna retrieve that so document.queryselector and then grab the btn 2 and then first we want to create a callback function so the function we'll call this alert btn and inside of here we'll just put another alert box and then type in here i also love java script and then what we need to do now is include our event listener so i'm just gonna copy the syntax paste in here the element is that button two so we've got our advent listener method there and then the function is gonna be that alert btn and we've got a little i'm saying oh we've got the e in listener so what we've done now is included a click event on the uh button two which is this button here so when we click on this this alert box should fire off and should appear at the top of the screen with the content again of i also love javascript so let's test this out and as you can see now this event is working and we're getting our alert box which has the content of i also love javascript so that's how we can use the advantage listener method here so let's take a look at a another example for example three so instead of a click event we'll look at a mouse over event so uh say mouse over here so for this example instead of clicking on a button here when i move the mouse over i want the background of this whole box to change so to do that let's first grab i think it's box three so we'll create a variable for it and we'll call this variable new background color grab the box so document.query selector and it's box three then we'll first create the function so we'll say function change vg color so we'll grab that variable now new background color style dot background color and let's set it to the color of blue and then uh we'll now include that mouse over event so we'll grab the variable add event listener method uh and we'll say mouse over and then the function which is change vg color so if i head over to example three if i now move the mouse over the box here it should change its background color to blue and as you can see that's working as it should manage to change the style of our third box using the mouse over event and the event listener method now generally people do tend to use the ad event listener method more than the html on event method typically because you can apply as many event listeners to an element through the ad event listener method whereas with the html on event method you can only apply it once so if you had one event already on a html element and then you try to plan another one that new one would override the old one but again if you only want to apply one event the on event method works perfectly fine so these were some really basic example guys of how we can implement event listeners we'll now take things a little step further by creating a reveal hide event where we click a button to display some text which is originally hidden all right guys so the really cool thing about event listeners is that we can combine them with css and other javascript tools to create interactive and fun constructs which for this part of the tutorial is our simple example here where we have a button and then when i click on this button you can see it reveals more text if i click on the button again it hides the text now the html for this example is really simple so we've got a div here with a colossal container inside of that div we've got a button element which has the class of reveal btn and the class of boxes which is just a general class underneath that we have it with a class of hidden content which has all of our dummy text inside of it this also has a class of boxes and this is what it currently looks like right now in our live server now the first thing i want to do here is go into app.js file and create two constants so we grab those two elements so the first one is going to be for our button we'll just call this reveal btn and then we'll say document dot query selector and we'll grab that element which has a class of reveal btn and then we want to create another constant for our hidden section so we'll call this uh let's call this hidden content and then document.queryselector and then grab a class of hidden content which i think yeah so we've got our two constants there the next thing i want to do now is create a callback function which will check if our hidden content here has the class of reveal btn now i will explain this in more depth but for now let's just create that function so we're going to create that function we'll call this function reveal content and then inside the curly braces here we want to use an if else statement so we'll use the if statement first inside the brackets is our condition so we'll say if our hidden content grab the class list property contains class of reveal btn so there's our condition the code that we want to execute if this condition is true grab the hidden content grab the classlist property and we want to actually remove this class if it does contain the class so we want to remove the class of reveal btn again this will make more sense in just a moment but we're just going to write this out for now else if it doesn't contain that class of reveal btn and we want to grab the hidden content classes property then we want to add that class of reveal btn now the next thing we want to do now is include our event listener so we want to apply the event list now on our uh button here so say reveal btn add event listener and we want to look out for a click event and then the function we want to run off is the reveal content function we just created and the last thing we'll do now is visually hide our div here which has the dummy text so we do that inside our style sheet so we'll go inside the internal style sheet here grab the class of hidden content and we'll say display none and then when the function runs off and it does include our class of reveal btn we want to grab the hidden content grab the reveal btn class and then we want to display as block so this now should be working so if i click on our button you can see it reveals our paragraph i click on the button again it hides the content so what we're essentially saying here is that depending on the current state of our hidden content here javascript will either add or remove the reveal btn class so in its current state right now this button here does not have the class of reveal btn and hence why it's not displaying because we've set this here to none when we do click on this button it will display as block because we've added our event listener here which looks out for a click it will run through this function it will check here if it does contain the reveal btn which it doesn't so if it doesn't we've got our else statement here which will add that class will reveal btn and because we've set it as block here it will now display it if we click on the button and as you can see it's displaying it now and if we click on this button again it will run through our function here and it will first check if it contains the class of reveal btn which it does currently in this state so it will remove that class of btn and because in our internal style sheet here we've set the display to none it will effectively hide our content and just show us the button here so if i just show you guys what that looks like if i just comment out the remove section if i click on the button it will display it because currently right now it's added the class of reveal btn if i click on this now you can see now it's still displaying the text because in our if statement here we no longer have the ability to remove that class so that's how we can create really basic reveal hard functionality using event listeners which looks pretty simple but this technique actually can be used for many different things so for instance you can use it for things like toggling a menu on small screens so when you see that hamburger menu or you can display error messages with this and many more things you can do so guys that's how we can create events in javascript how we can fire off different types of events and again there are loads of different types of events we can create and i'll leave a link in the description for you guys if you guys want to check those out now this is actually just scratching at the surface of event listeners there are some things lurking underneath or more appropriately put lurking behind the scenes of event listeners and that is event propagation and event delegation let's first take a look at what event propagation is and what it means now event propagation refers to how an event travels through the document object model or the dom tree and you can think of event propagation as electricity running through a wire until it reaches its destination now as we're fully aware the dom is full of nodes and when referring to event propagation and events the event needs to pass through every node on the dom until it reaches the end or is forcibly stopped now event propagation is also the umbrella term which is used to cover three phases when dealing with event listeners you first got the event capturing then you've got the target and then you've got the event bubbling now in the simplest definition the capturing phase starts from the root and travels all the way to the target after it's reached the target it goes into the bubbling phase which travels back up from the target to the root so to better understand this let's take a look at a visual representation of the event propagation so in this slide you can see we have a basic diagram of our three phases now imagine that our button at the bottom here has a click event attached to it and is being clicked now when this happens javascript behind the scenes starts three phases first it begins with the capture phase where it starts at the highest level of the dom and it'll trickle all the way down i will notify each element so it will notify the html element the body and the div and tell it that something underneath it is being clicked so again going back to that analogy of electricity running through a wire so this will trickle until it reaches the target phase this phase is a dom node in which we click so in our example the button here at the bottom has a click event attached to it so this would be the target and essentially our target phase so once this target phase is triggered the next phase is what we'd call the bubbling phase which is essentially just the opposite of the capture phase this travels back up the dom and notifies every element so the div the body the html the document all the way up to the highest level period of the target again this is all happening behind the scenes and it's almost instantaneous so let's go ahead into vs code now and take a look at what this looks like in the browser and the console all right guys so we're inside this code here and you can see in our example here we have several elements nesting inside of each other if you take a look at the html the markup is pretty simple for this so we've got our div which has a class of div two inside of that we've got another div with the class of div one and then inside of that div we have a button element so this is what it looks like in the browser and as you can see it just has some basic styling now if we head into the javascript here you can see we have event listings on pretty much everything in the dom tree so we've got one for the window we've got one for the document we've got one for the div two div one and then the button here now as you can see i've set this up a little bit differently in regards to the event listeners instead of creating a variable for the window the document as well as the elements here i've just added the event listeners directly after now creating a variable and doing it this way both work perfectly fine but for this example there's less code here and it just saves me scrolling up and down a bunch of times which can be a pain for people now in regards to the events themselves you can see their click events and as for the functions they just simply log in their respective name in the dom tree except for the button here now instead of the text you can see we've included an e inside of the functions parameters as well as the inside the function we're logging in that e now i will explain what this is in just a moment but first i just want to draw your attention to the third parameter inside of all these event listeners so if i highlight them all for you now you can see they all have a boolean value of true now if you guys remember back to a bit earlier in the video when we were learning about the ad event listener method there was a third optional parameter we could include well this the parameter dictates whether we want to use event capture or event bubbling so let's go ahead and click on the button here in the browser and see what this gives us in the console so as you can see now in the console it's giving us the first phase which is the capture phase so it's starting from the window and then it's going down and notifying all the other elements it comes across all the way down to the target which is saying is this pointer event now the stuff that you see here represents all of the information about that event so this is exactly what that e means inside of our function here which is inside of our button so this e represents the event object and again this is exactly what you see here in the console all this information is about that event that has occurred on this button so if i open this up you can see all the different properties and information about our event here so we've got all sorts of things we can take a look at and utilize so we can find out what type it is we know it's a click event we can check out where exactly that button is exactly on the screen in a browser on the x and y axis we can also check things like whether the shift key here has been pushed down same false because we didn't use the shift key so all sorts of things that we can use here and utilize now the main property i want to bring your attention to and the relevant one to the three phases is the target property here so this here you can see it's saying the button so this property represents the element that the event is actually on so again it relates to our target phase so if i actually go into our console here and i type in here dot target and i'll just refresh this and i click on the button again you can see now it's starting from the window going to the document div two div one because we're using the target property to show us what element the event is on which again is our button now again we can do some other cool things here so let's just say for example when we click on this button um we'll just change the text to say clicked so after the target we say dot in our text and set this to equal it to say clicked so what should happen if i click on the button it should change the text to click so as you can see now in the console when we've clicked the button it's changing the text to click because what we've done is use the event object to grab the target which is the button and then from there we use the inner text property and then change it to click so when this function files off the buttons text change to click so as you can see here in the browser and if you also take a look at the console you can see we also see phase one so the capturing phase so we start the window document div two div one and then click which is the button so that's the first and second phase how do we now initiate the third phase which is the bubbling phase well to do that all we need to do is just grab all of the true values here for our third parameter and just change them to false now these are actually false by default and if i click on the button now you can see it started from the button and then it's going to div 1 div 2 document and then the window so it's bubbling upwards hence the term event bubbling so from the target it's bubbling up to the highest position in the dom tree now there are ways we can actually stop event propagation so let's just say we wanted to stop the bubbling um to happen at the second div we can do that with the stop propagation method so let's go to the second div here include our event object then inside of here we'll just say e dot stop propagation so what should happen now is when i click on this button once it reaches the second div we want the propagation to stop so we'll no longer be able to see the events on the document and the window so if i click on this you can see it's going from click to div one div two because we've stopped the propagation in our function here now this also applies to event capturing so if i grab all of the third parameters here and change them to true so we're in the capture phase and then i click on this button you can see the opposite is happening because we're starting from the window where the cap where the capture phase begins then goes to the document and then goes to div two and then stops at div two because we've stopped the propagation so that's how we can stop event propagation happening forward capturing and bubbling another useful ability we can utilize an event bubbling is to have events far off only once so for this example again we'll use div two and i'm just going to comment out the stop propagation method there take out the e and then change with these two false even though they're false by default um we'll just keep it like this for consistency so again if we only want div two to fire off once for our third parameter here what we can do is grab the once property and set this to true now if i click on this button you can see it fires it all off as normal so it starts from the click and bubbles up all the way to the window if i now click this button again you can see it's starting from the button or the target going to div one but now dev2 is no longer firing and then it goes on to the document and then the window and then again if i click this again you can see the div 2 event isn't far enough because again what we've done here is defined that we only want this event to fire off once now another common method you likely run into is the prevent default method now what this method does is pretty selfexplanatory really it just prevents any default behavior that might occur on an element or an event so this is quite dependent on the type of element involved and the context of an event so to see example of the prevent default method what i'm going to do is go into the index.html and i'm just going to change the button to an anchor tag and i'm going to give this a class of a button and i'm just going to put in here click and then uh we'll go where the styling is for the button and we'll make this a class and then what we'll also do is just put it on a new line so we'll say display block because anchor tags are inline by default so we'll head into the app.js file and what also do is just make sure our query selector here is targeting that class of button so our anchor tag now and this event listener here is now the target and the event and because we've changed the button to an anchor tag if i click on this now you can see it's firing off all the events but they quickly refresh and the reason it's doing this is because the default behavior of an anchor tag is to try and redirect us to somewhere else and this is what's causing this quick fire off of all the events and then a refresh now we can stop this from happening with the prevent default method so to do that we'll go inside our button here or the class of button and we'll grab the um event object prevent default and if i click on the button now you can see it's showing us the bubbling phase the content has changed to click that it's staying there and all this has happened now is because we apply the prevent default method onto our anchor tag so it's no longer trying to direct us somewhere else now we will see a more practical example of all the methods we just learned so the prevent default uh the stop propagation in part two of the tutorial where we look at practical examples and projects but i just wanted to make you guys aware of these um so they don't confuse you in that subsequent video now the last thing i want to mention in this tutorial guys is event delegation now event delegation is one of the most potent event handling patterns inside javascript and the dom and what it does is allows users to append a single event listener to a parent element that adds it to all of its present and future descendants that match that selector now what we'll do is actually break this definition down to show you guys exactly what it means now the first part here where it says it allows users to append the single event listener to a parent element adds it to all of its present children to find out why this is useful let's actually just go back a few steps and see how we get to event delegation so if we head back into the index.html file you can see we've got an unordered list which has a bunch of different sports inside of it now this honorable list has an id of sports and then each of these list items have their own id which is equivalent to the content that you see inside of each of the list items and this is what it looks like in the console now if i click on one of these list items you can see it's showing us in the console that football's click and it also changes its background to a light gray again to highlight that has been clicked and again this is going to be the same for each individual list item now to achieve this what we can do is apply event listeners to each individual list item that we have inside our unordered list so we'll head into the app.js file and we'll grab the first list item so we'll say document dot query selector grab the id of football add the event list now and we're going to look out for a click event grab a function inside of the function we'll include the event object and then inside of this function uh what we want to do is uh first just console log in let's say say football is clicked and then the next thing i want to do is change that background color when we click on the actual list item so to do that we're going to first need to create a constant so we're going to say call this target and this is just going to equal e dot target which is that list item and i'm going to say if and the condition we're going to put in here is if target matches so matches is just a method basically which essentially checks with the target which in this case is the list item matches with our css selector which is going to be li this is going to return true and then when it returns through it's going to change our background color so after condition we want to include the code that we want to execute so we're going to say target dot style dot background color and we'll set that to light gray and if we head into this folders live server here you can see we have the exact same layout and what should happen now if i click on the football list item the background should change to a color of light gray and it should also show here in the console so if i click on this you can see saying football is click and then it's changing the background to light gray because we've just created an event listener for it um inside the app.js file now again if we wanted to do it for all of these what i need to do is just duplicate this four more times so instead of football here we have basketball and then for the third one we have boxed for the fourth one we have tennis and then we'll create one more for golf and now all the starter then the console logs should be working for each of the list items so we'll start with football see that's working basketball's working boxing's working tennis and golf are also working so we're getting the exact same thing as our draft example here except the text is a little bit different but again it's the exact same styling and you can see it's working perfectly fine now this is great and works fine there's no real issue with the code here because we're getting the exact same result as our draft example but as you'll learn throughout your code and journey there are always questions to ask when you have written out your code to help improve it so you can ask yourself things like can we remove some of this code can we remove some of the event listeners and still achieve the same result can this task be done writing less code instead or can we even optimize this code and the simple answer really is that we can we can write less code here and achieve exactly the same result using event delegation so the idea of event delegation is pretty simple instead of attaching the event listeners directly to each of the list items here we can delegate the listening to the parent which is the ul here which has the id of sports so that when the li is clicked the listener of the parent element catches the bubbling event and performs our task which change the color of our background to light gray when we clicked on one of the boxes and also showcased some text inside of our console here so what we're going to do to achieve this now is go back to the app.js file and get rid of all this code here and then we're first going to grab that unordered list element which has the id of sports so we'll say document dot query selector and then we'll say we'll grab the id which is sports and add the event listener to this so a similar process it's going to be a click event rudolph function which has the event object inside its parameters inside of our function here we want to say let's console log that bit of text so we'll say e dot target dot get attribute method of get attribute and we want to get the id and then we want to say plus we'll put in here is clicked so what we're saying here is that when the target which is our list items has an id attribute which all of them do whichever one that we click on will display that specific sport plus the extra bit of text here of is clicked so if i go ahead and click on one of these now you can see it's saying football is clicked if i click on tennis you see tennis is click golf boxing and basketball so you can see all of these now are working because we've attached that one event listener to the parent element which catches the bubbling event and then performs our task which we've written in here now we also want to change uh the background color when we click on these so to do that first going to need to create a variable of um the target so we're going to say target it's going to equal e dot target which is those list items and then we're going to say if the target variable there matches our css selector which is our li we're going to want to change the uh background so say target dot style dot back ground color to a light gray so again if i click on one of these now uh we're getting an error um that's because i spelt matches wrong so again if i click on one of these now you can see the text will appear in the console highlighting which one i clicked and then we also now have the extra feature of where the background changes to a light gray for all of our list items there now again this brings us back to our first um part of our definition which allows users to append a single event listener to our parent element that adds it to all of its present children and as you can see this is clear benefits ranging from code quality as well as code maintenance because instead of having all those lines of code um in the previous example where we attached an event listener to each of the list items we now have it all inside one event listener here now we've also improved our performance because having more events in our code will take up a lot of memory and using event delegation we're going to save a ton on memory which again will vastly improve our performance inside of our projects now another crucial benefit of event delegation is the second part of our definition here so the first part was it allows users to append a single event listener to a parent element that adds it to all of its present descendants now the second part of this definition was that it also adds it to future descendants that match that selector so this is actually in regard to dynamic elements so let's just say we had an add button here at the end of this box where it allowed us to add another sport to our list so let's actually just manually do this to show you guys exactly what i mean so first we're just going to create a constant for our um ul which has the idea of sports so we'll say const say sports equals document.queryselector and then we'll just grab the id of sports again which is that ul and then what we'll also do is create another list item so we'll say const new sport equals document dot create element and we'll create another list item and then what we'll do is uh we'll say new sport so that variable which is that new list item uh we'll give it uh in a text of uh let's say let's make the sport rugby and then we'll also give it the uh id of rugby so we'll say set attribute first an id attribute and then we're gonna have the uh id of rugby and then what we want to do is append this now to our list so we'll grab the sports variable which is the ul and we'll say append child and then the chart we want to append is of course that new sport so let me say new sport so as you can see now rugby has been added to our list here so if i click on this it's got the exact same styling and the output in the console like the rest of the list items would because we now have an event listener to the parent which is the ul and because of event delegation we've delegated the event to the parent and as you can see this gives us the power to dynamically add new list items and those new list items will display the same behavior so again without the magic of event delegation we'd have to use the method we previously used we would have to include event listeners to each individual list items and that includes any new list items that might get added on along the way which will just clog up memory effect performance and just create too much unnecessary code so that's going to be it for this video guys in this video we're going to be using everything we learned in part one and applying it to five different projects ranging from beginner to master level so just like in part one guys there's going to be a few prerequisites in order to effectively understand the dom and how it relates to these projects i highly recommend checking out part one first as well as also having an existing knowledge of html and css now in regards to styling we're not gonna be focusing too much on it for our projects because this isn't really the goal of the course however there will be substantial css styling involved and then lastly it's going to be essential to have familiarity with the fundamentals of javascript and the syntax and the code structure because obviously we're going to be using javascript in this course all right guys so our first project for this course is going to be this beginner friendly quote generator that houses a quote and then has a reference by someone famous underneath it now underneath that reference of that famous person we have a button which says new quote and if i click on this you'll see it'll just generate us some new quotes by someone else famous so pretty cool design and quite simple to create now some of the key concepts we're going to need for this project is document.queryselector add event listener of course the math object and in a text property so now we know what we're creating and the key concept we're going to need let's head into vs code now and create our quote generator all right so we're inside vs code and you can see we're inside a folder called master dom manipulation part 2 inside of an index.html file as well as having a style.css file and a javascript file for our project one and also have an image folder which has all of our images which is just going to be the background uh image for all of our projects so the first thing we'll do is include a link to our style sheet so we'll go inside here and we'll grab style.css now the next thing i'm going to do is go and get a google font so we'll head over to google and the global font we're going to be using for our project is going to be a roboto regular 400. so we'll just grab the link here inside google fonts head back into vs code and then just paste it underneath the style sheet there and then just tab this over so it is looking all neat and what we'll do as well is just put a comment here so uh global font links and we'll do the same for the style sheet and then lastly what we'll include in the head tag is just a link to font awesome so we can grab all of our icons that we're going to be using throughout the project so we're heading to our font awesome cdn here and then we click the first link so we copy the link tag head back into vs code and then just paste it under our google fonts so we'll just say font awesome i think place that in there close that off and then let's open this up with live server so we have our blank canvas and we can see all of our work and we'll split screen this and just a bit smaller so we're ready to start a markup for our first project so if we take a look at the original example you can see we have two sections here so we have our heading and then we also have the main section which houses the quote uh the famous person and the button so we'll head inside the body we just put a comment here for project one quote generator and we're going to house this project inside a div the class of container hit tab and then again we're going to need a header so we'll just put another div here with a class of header put in here a h2 and we'll say java script quote generator so you'll see that there in live server and then underneath the header we're gonna have this content here which has the quote as well as the name of that specific person who said the quote and then the button underneath which will um generate a new quote for us so we'll get back into this blank canvas there we'll go underneath the header and we'll just create a div with the class of main content which again is just going to house everything scroll down a little bit and then the first thing we need is the actual text area so we can just put div call it text area inside of that we want to have a span which has the class of quote which is going to be our quote and then i'm going to paste our quote inside of here which is the exact same as the original example and then underneath the text area div we want to have a div for the actual um famous person who said the quote let's keep it simple and just say person hit tab and then this person for this quote is abraham lincoln so we have our quote now as well as having the person who said the quote and then of course underneath this we're going to have the button so we'll house the button inside of a div with the class of button area and this is going to house our button so this button is going to have an id of say new quotes we're going to need to grab onto this later and we'll just put in here text of new quote so that's essentially it for our markup let's head into the style sheet now and just apply some general styles first so what you put in here general styles so we use the asterisk to grab everything and we're going to say margin zero padding zero box size into border box let's also make sure that the uh font family for all of our projects is our lato font uh we'll just have sans serif as a backup and then let's first grab the body element because we want to use display flex to center everything so we'll say justify content to the center align items to the center let's use the height and make it a thousand one hundred viewport heights which would be the height whole height of our um window there and then let's also text the line everything to the center and then the next thing i'll do is include our background image for our first project which is this sort of library image here so to do that we'll grab the background property url grab the image folder head inside it and grab project one now this is way too big at the moment so the first thing i want to do is add a few more bits of styling so no repeat uh we want to center everything on the x and y and then we want this to cover the whole body so as you can see now it looks pretty much exactly the same as our original example so that's it for the body there next thing i want to do now is grab the container class which houses everything i'm going to give this a width of 550 pixels a height of 450 pixels now the next thing we'll do is just style our heading which is the javascript quote generator text there so we'll grab the header class and let's uh increase the font size of this to say about 1.2 rem and let's give this a border of solid say about 2 pixels and make it a nice white color change the color of the text to white uh let's make that a bit clearer so we'll change the background color to uh a bit of a darker gray let's also add a bit of padding there between the text and the border so about five pixels and let's make the width of this to be about say about eighty percent set the margin to uh let's say 20 pixels from top and bottom and about and then auto on the left and right so this is centered now let's actually make the edges of our border here a bit more rounder so we'll use the border radius method property let's make it about five pixels i just think that looks a little bit better so that's it for our heading now let's grab the uh main content which is basically just all of our content here so the um quote the person who said the quote and then the button itself so this is a class of main content so what i want to do is just make the width of this 100 the height let's make about 300 pixels the padding let's give this a background color of white so there's our content let's also make the edges more rounded so say border radius so about 15 pixels let's uh also add a bit of padding here between the content and the edges so we'll say it's about 50 pixels on the top and bottom about 40 pixels on the left and right uh next thing i want to do is actually give this a box shadow so it gives it more of like a 3d look so let's say zero on the x and y let's put about 10 pixels blur so the box shadows all the way around which i think looks a lot better there now let's uh style the text or the quote so this is the main content and the text area so let's just give this a font size about let's say 1.5 ram see what that looks like yeah i think that looks pretty good let's also add a bit of line height here 1.5 give it a bit of breathing room and uh yeah i think that looks pretty good now we want to style the person who says the quote so we'll say main main content dot person and let's increase the uh size of the text so we'll say font size let's say about 1.6 rem yeah looks pretty good change the color to red uh let's think the original is capitalized so text decoration uppercase so text transform uppercase now of course we want to add a bit of margin here so let's say margin top it's about 20 pixels so i think that's starting to look a lot like the original as you can see there now let's uh let's now start the button so we'll grab the uh button area which uh houses the button and we'll grab the actual button itself uh so um let's change the background color to that dark gray let's change the color of the text so we can see it to white and let's uh increase the font size of this to say 1.2 rem let's actually make that a bit bigger 1.3 and then let's add a bit padding of course so i'll say 10 pixels on the top bottom about 15 pixels on the left and right let's also add a bit of margin to the top of this to separate it from that text there margin top let's say about 20 pixels and then let's make it rounded on the edges so border radius let's say about five pixels so the last thing i want to do here is that when we click on this um you can see in the original when we click on this it actually uh changes color so we need to change its active state so we'll just grab this and let's grab the active pseudo class and we'll say the background color let's make it a light blue so that's pretty much it for the styling all we need to do now is start applying some logic to this so we can generate new quotes when we click on this new quote button so the first thing we're going to need to do is head into the index.html file and just go underneath all this content here and just put a comment for scripts because this is where we're gonna be placing all of our scripts and then we're just gonna link to that script file or our first script file so we'll sort it to it's called project one dot js so we've linked it to our javascript file so we'll head into that the first thing we're going to need to do is just create some variables so we're in the variable for our button here as well as the quote and the person that said the quote so we'll just put a comment here saying variables and we'll say let btn equal document dot query selector and then we'll select the um button which has an id of new quote so we've stored our button inside that variable there we'll create another variable now for our quote itself so we'll just call this quote we'll set this to document.queryselector and i believe this has a class of quote close that off so now we've stored the span which has the quote inside of it inside that variable there and then lastly we're going to need one more for the person and we'll say document dot query selector and this has a class of person so we've got our three variables there now the next thing we're going to need is array for all of our quotes so we'll call this array uh let's call it quotes now i'm going to copy and paste all the quotes i used in the original example um which i just found on the internet i'm not really sure if they those individuals actually said those quotes if you guys want to use different quotes and people for your quote generator feel free to do so so i'm just going to paste those in there so there's all our quotes there which i think is a total of 10 quotes so the next thing we're going to do here is now apply an event listener to our button here so when we click on this button of new quote it will generate a new quote for us so one of these quotes by one of these individuals so we'll go underneath the array and we'll say btn.ad event listener and we're going to look out for a click event and we're going to have a function now inside of our function here we're first going to need to create a variable which houses a basic math equation which is essentially just going to involve the builtin math object and a couple of its methods so let's call this variable let's call it let random now as i just mentioned javascript has that built in math object and this object has several methods now the two that we're going to be using in this equation are math.floor and math.random now i will go over the equation again but i first just going to create it quickly because it's just a bit easier to explain so let random is going to equal math dot floor and then inside of this method here we're going to have math again dot random and we're going to times this by our quotes array dot length which is essentially just all the quotes in our array so again how this equation is working is that the math.random times the quotes dot length will generate a number between zero and the total number of quotes inside of our quote array now because math.random doesn't actually generate a whole number we need to wrap this equation in math.floor or the floor method which essentially just rounds a number downwards to the nearest integer and what this will do now is allow us to access our properties inside of our array which are the variables of quote and person so that's essentially how this variable and this math equation is working here now this equation will randomize through our quotes array however we need to display the quote and person inside of our array to a string format so to do that we'll go underneath the variable here and we'll grab let's grab uh quote first and we need to change the inner text and then we're going to set this to equal the quotes array square brackets to turn it into a string format and we'll put in the random variable and we'll say dot quote and then we'll do the exact same thing but we'll do it for person so i'll just change this to person and this now should randomize through our quotes array and display new quotes said by different people so if we go to the button and we click on the button it's generated us new quotes and it's also giving us different people who have said those quotes and that is our first project completed so a pretty cool project and pretty straightforward to create all right guys so the next project this course is the beginner plus project which is a modal now a motor is essentially just a ui element that appears in the foreground of a website and they're usually triggered by the user allowing them to view more information or complete an action without having to navigate to another url in our case it's just going to show more information so we have our ui element here in the foreground and then if i click on this you can see another box animates downwards the rest of the content darkens so it puts a lot more focus in the box in the middle and that's essentially what our model is here now of course in this box you'd likely have more information but i just wanted to keep it simple uh for this example now the key concepts we're going to need for this project switched up a little bit we're going to be using the document.elementbyid of course the ad event listener method the e.target and we're going to be using css styling throughout javascript and we're also going to include some css animation in this project so let's head into vs code now and create our model all right guys so we're back inside our master dom manipulation part two folder and as you can see we've got our blank canvas there open up in live server so the first thing we're going to need uh for our markup it's just gonna be the modal open button so we'll just put a comment in here model open button which is the button if we take a look at the original example uh this button here which is going to trigger our model so we're just going to have a button this is going to have an id of open btn because we're going to be using a element by id for this example and we're just going to put a paragraph tag in here and this is just going to have the text of where's uh model so that's it for the open button now the next thing we're gonna need is the actual model itself so i'm just gonna put a comment in here say modal and modal background so we're going to have a div with the id of modal container inside of that we're going to have our div with the id of modal which is going to be our modal paragraph tag inside of that which is going to say here i am and then underneath that we're going to have another div which is going to be our close button so we're just going to have let's say div we'll give this an id of close btn and to create that x we're just going to be using a html entity so it's going to be an ampersand times semicolon and that's going to be that cross that you can see there so that's all we're going to need for the markup the next thing i want to do is just quickly uh comment out this script for project one but duplicate this and then link it to project two so if i actually open this up you can see i've created another um js file which is project two just close that back up so the next thing i want to do now is just apply some styling so we're heading inside the style shape and the first thing i'm gonna do is get that background image that you see here in the original example so we're just going to grab the body and we're going to change the background to url and this is going to be the image folder project two and then apply those same rules that we did in the previous example so no repeat center center and then we're gonna have cover so we'll be able to see the image there and then to make it the whole heart of the browser should change the height to 100 viewport heights so there's our image now the next thing i want to do is actually position this relative because i want to initially position our button here a little bit further down and slightly to the right just like it is in our example here so what we're going to do is now grab that button which has the id of open button i'm just going to open our module set the position of this to be absolute so we can now position this anywhere um on our browser there i'm going to say top say about 70 and then let's also from the left 10 now let's start giving this a bit of styling so it looks a little bit better uh we'll give this a width of 350 pixels make it a bit bigger and we'll also give it a height let's set about 80 pixels uh let's make the font size a bit bigger let's say about two ram see what that looks like yeah it looks pretty good and let's make the background transparent just like the original change the color of the text to white so we can see it um let's also change the color of the border uh let's make it solid two pixels white now let's also uh let's add a bit of uh border radius to the edges just because i think it looks a lot neater when the edges are rounded uh so let's say about 10 pixels and maybe a bit padding it's also about five pixels there that looks pretty good let's also use our good friend box shadow give it that nice 3d effect so we say zero on the x and y but three pixels blur so it goes all the way around uh let's make it black yeah looks good um now if we take a look at the original you can see there's an effect on there so we need to add a transition uh transition say about five seconds uh so that's pretty much it for that styling the next thing i want to do obviously is add a bit of a hover effect so we'll just grab this so we'll just grab this and paste it in here over effect we'll hover class and we'll change the background color uh let me choose the background color to white and then the text to uh black so there's that effect which is the exact same as our original there that looks pretty good now the next thing i want to do is style our model here which is going to be that box that um shows up when we click on this button here so uh has the class of modal and then we'll change the background color of this to be white we'll set the position of this to be absolute then we'll say scroll down so you can see we'll say top 50 left 50 and then transform translate and we'll say uh negative 50 and negative 50 which would basically just uh center this in the middle so this is just another way to actually center content instead of using flexbox or css grid now i want this to be a bit bigger so we'll say width so 200 pixels height let's say 100 pixels um give it a bit of padding on the top and bottom and then 20 on the left and right uh the old classic border radius give it rounded edges and then uh the font size let's make this a bit bigger let's say 1.5 rim now this is actually not going to display at the moment but i just want to create the styling here um so we don't have to do it afterwards now this model is actually wrapped inside of the modal container which we're going to be displaying as none initially because we don't actually want this to show but i just wanted to start everything first before i make this sort of disappear initially now the next thing i want to do is if we take a look at the original example you can see that the text is on the left and the x is on the right so to do that we're going to be using display flex so we have like a nested flexbox and then we'll just say justify content space between and then we'll align the items vertically to the center now if we take a look again at the previous example click off this you can see this actually animates from the top so we're going to be using keyframes uh to do this so i'm going to create an animation um say animation animation name we're going to call this animate modal and then we want the animation duration which is going to be 0.4 seconds we'll create this animation right at the end but i just wanted to again put all the styling on this modal uh first before we get to that so the next thing i'm going to do is style the cross here so this has a class of not class rated id of closed btn font size um let's make this about three rem so it's nice and big and then let's apply a hover to this so when we hover over it it turns red so close btn um let's make it also a cursor pointer uh font size let's also make sure this is three rem and then change the color to a red color so say f 0 0 0. so there's our cross there now just to quickly mention guys this is the same style sheet we were using in the previous project so it has those general styles there just in case that confused some people but anyway uh we've done the modal now so what we need to do is actually grab the modal container and actually initially make this disappear so we'll grab the modal container and we'll display this as none comment this out so we can still see it but what i want to do is actually position this to fixed so it's right at the top there and we'll say top zero and then left zero width one hundred percent and then the height to also be 100 and then have the z index here let's have this at one so it's above everything so let's just uncomment this now so we can no longer see it so that's nearly it for the styling um there's still some styling in regards to the animation which we can do in just a moment but let's first start applying some javascript to this so we're heading to the project 2.js file and the first thing we're going to need to do is just create some variables so one for the open button one for the modal container and then one for the close button so we'll just put in here comment for variables we'll say let open vtn equal document.getelementbyid which you're going to be using for this example and this has an id of open vtn and then we'll create another one for the modal container so we'll say modal container equals document dot get element by id and this has an id of modal container and then one more for the close button so close btn equals document dot get element iid and this has an idea of close btn so that's it for the variables the next thing i want to do is now start writing out our of event listeners so we'll just put in here event listeners so the first one we're going to apply it to is the uh open btn variable so the open button so we'll say open btn so add event listener look out for a click event function and inside of this function we're going to be using css styling so we're going to grab the modal container and we're going to grab the style attribute and then inside the star we're going to be using the display property set this equal to block because if we take a look at the style.css you can see we have this as displayed as none now we wanted to display it as block when we click on the open button which is this button here so if i click on this now it should show us our model as you can see it's popping up in the center there so this event listener is working now we can't actually click off of this model so we can't really close it we're going to need a couple more event listeners so we'll do one for the close button there so we'll say close btn add event list now look out for a click event function and inside of this function we'll apply the same sort of styling so we'll say mode or container dot style display attribute display property and then we'll set this to none so we'll just refer back to none so now we've got two event listeners here we've got our open button and then for our close button there if we click on this this should get rid of our model and as you can see that's working now now if we take a look at the actual original example if we click on this and we show our model it closes if we click on the close button here but if we also click outside anywhere of our model here you can see it closes the modal tube so i want to add another event listener so we can do that so we actually apply this to the window object so this is actually the highest object in the dom tree this goes above the document so we'll say look out for a click event function again we'll insert the event object in there and then inside of the function itself we're going to use an if statement so we're going to say if e dot target if you guys remember back to the um part 1 of this course the event.target essentially just returns the element that triggers the event which in this case is going to be our window so we're going to say if e.target is equal to modal container we're going to grab the modal container use the same style attribute display property i'm going to equal this to none so again what this should do now is when we click on this to activate our modal so we can see it on the screen we should be able to click anywhere outside of this module and the model will disappear so as you can see that's working if i click up here disappears click up there disappears and if we also click on the close button it will disappear so that's pretty much it for the javascript pretty simple design really and quite simple to create the next thing i'll do is just apply some style into the module and the modal container because if i click on this you can see that the background darkens around the modal as well as the modal smoothly animating from the top of the browser there do that we'll head back inside our star.css and to create that nice animation you can see we've got animation name and the animation duration we're going to be using keyframes so we'll just say a comment here first modal animation section we'll say the at keyframes rule use the name which is animate modal is that oh it's not got a capital m what you want to say is just use the from n2 so from when i say top negative 300 pixels set the opacity to zero so we can't see it and then two let's say from the top fifty percent and then the opacity to one so as you can see when we type in this keyframe out the animation is working so i'm just going to click off this click on our open button and you can see now the modal is animating exactly the same as the original and lastly i just want to create this this dark background when the motor appears so to do that we're going to go in the modal container here or the id of a motor container add a background color rgba we'll say zero for red zero for green zero for blue and then for the alpha which is the opacity we'll say point two and as you can see it just gives the modal container and which is wrapping around the model a nice uh dark effect which just gives us a good emphasis on the model itself this now looks exactly like our original example it looks pretty good so our third project is going to be an accordion now what an accordion does is let you squeeze in a lot of content into a small space and a web page and a classic example is like one in our project here which is an faq or frequently asked question which you'll most likely see in utilized in many websites so as you can see here we have a couple of questions just some random questions like a return policy or where they're located and if i click on one of these you'll see it open up and show us more content which again is a really useful project to learn as you're most likely going to be utilizing this type of design in many of your own projects now the key concepts we're going to need in this tutorial are document dot get element by class name this time of course the advert listener the for loop but this keyword on the classlist and toggle method so let's head into vs code now and create our accordion all right guys so the first thing i'm going to need to do is create the markup for the accordion so we're going to have a class of accordion which basically just houses everything or the accordion then i'm gonna have a h2 the class of uh say accordion title and we'll say frequently asked questions and underneath that we're going to have several containers which is going to house the question and the answer and you guys can put as many of these containers as you like but i'm just going to use three which is the exact same as our draft example so we're going to create that class of content container and this is also going to be the class that we link to our javascript so we can show that extra content so inside of these we're going to have class of question so the question first question is what is the return policy and then we're gonna have the class of answer which is just going to be some dummy text and then we'll just duplicate this container two more times again you guys can include more if you like but we're just going to stay the same as the draft example so that's essentially it for the markup let's head into the style sheet now and just apply some uh styling to this now the first thing we're going to do is just grab the body and include our background image so this can have a url image folder project three and then a few more bits of styling so no repeat center on the x and y and then cover so we can see the whole image make this the whole height of the browser and then use flexbox again to center our content and then align items to the center so that's all we need for the body let's start applying some styles to the accordion which pretty much just houses everything we're going to give this a width of 65 and background color let's give it a white background color add a bit of padding so let's say about 30 pixels all the way around and then of course a good friend border radius just to make the edges more rounded so so we'll apply 30 pixels there now for the title itself uh we'll go and give that a bit of styling this has the accordion title styling scroll down so you guys can see a bit clearer we'll just add some margin bottom of 30 pixels to separate from the rest of the content and then text the line to the center so it's centered there now let's apply some style into our questions there so grab the accordion content container and then grab the question or class of question and let's give this some padding too so 18 pixels on top and bottom zero pixels on the left and right and let's also uh increase the font size a little bit 22 pixels set the cursor to a pointer and then let's add a border bottom here one pixel solid black so it has a line underneath the questions just so it's a bit clearer to see the separation between that and the content and then the next thing we need to do here is set position of relative that's because we're going to be positioning the open and close sections that you see here in the original example absolute to our question class so that's what we're going to go ahead and do now so we'll grab the accordion class content container question class and we're going to be using the pseudo element of after and we'll go inside this and we'll grab the content property and use a plus sign in there and then we'll position this absolute and then from the right we'll say about negative five pixels so i think that looks pretty good there let's now focus on this content here so the dummy text so we'll go underneath this bit here grab the accordion class grab the content container and then we'll grab the answer class which is the dummy text and we'll add a bit of padding top of 15 pixels just so it separates it from the ball the bottom there will increase the font size of this it's about 22 pixels as well and then let's add a bit of line height let's say 1.5 between the content and then make sure the width of this is a hundred percent now of course we want this content to be hidden initially like it is in the original example so to do that what we're going to need to do is change the height of our answer class there to zero pixels now if you take a look at the browser you can see that all of the content is overflowing it's doing exactly what we wanted to do by setting the height to zero pixels but of course all this content here we want it to be hidden so what we can do to hide that is just use the overflow property and set that to hidden and as you can see all of that content isn't showing now one last thing i want to do in here is that if we take a look at the original example we open this up you see it's nice and smooth so to do that we're gonna need to set the transition of this to be about 0.5 seconds so that when we do apply the javascript and we click on these it'll be nice and smooth so that's almost it for the styling we're going to need a few more bits in just a moment but first we need to create the javascript to get this all working so we'll head into the javascript file there and the first thing i'm going to do is just create a variable i'm just going to put a comment here variable and this variable is going to be called uh accordion and we're going to be using the document dot get element by class name so this is going to select all the elements with this class name and we want to select the content container classes which houses the question and the answer now we're going to want to access all of these classes and to do that we're going to need a for loop so we're just going to put in 4 we're going to have a variable of i equals 0. and then we're going to say i is less than the accordion dot length and if it is less than the accordion.length which it will be we want to increment this our variable by one then inside of this for loop because we're essentially selecting all of the classes of content container we want to apply an event list now on each of these so we'll grab the accordion and then grab the variable of i inside of our for loop and then add an event listener here in where we want a click event so on each of the content containers we want to click event then we're going to include a function and then inside of this function what we want to do is reference the object which the function is a property or in other words reference the object that is currently calling the function which in this case is our accordion and we could do that by using the this keyword and then using this we can insert a class of active on all of those reference points which are essentially our content containers so we'll say class list dot toggle which is just another method which i actually forgot to mention in part one but what this essentially does is just toggle between adding and removing a class name for an element with javascript and the class that we want to toggle is of course the one i just mentioned so we want to call this class active which i'll show you guys in a minute why we need to do this so what we've done here is store all our elements with a class of content container inside of this variable of accordion we then loop through this variable and this has allowed us to add an event listener to all of our content container classes and inside of the function we then reference this object that is calling the function i.e our accordion variable and then added the toggle method to either add or remove the class of active so all we need to do now is head back into our css and apply the styles to our active class we created inside of this function so we'll head back to star.css again and then what we'll do should put a comment here and say java script styling link go underneath here and then just grab the class of accordion grab the content container class select the active class we created inside of our javascript and then grab the answer or the class of answer which is all of that content which has a dummy text inside of it and then just set a height of this to be 150 pixels so what this should do now is using the javascript we just created toggle the class of answer so that when we click on any of the questions the height of the answer container will be 150 pixels instead of zero pixels and then show us all that content so if i click on this you can see now it's open up and showing us all that content so you can see that the javascript is working as well as the styling we just created with the active class we just inserted with the active class so just a few little bits here now to finish off so we'll just grab the accordion grab the content container grab the active class again and we'll grab the question so i just want to change some style into the question when this is clicked so uh let's affect the font size that's a little bit smaller so say about 18 pixels and we want this to be smooth so we'll just put a transition of 0.5 seconds so as you can see this shrinks down when we click on this um just so it puts more emphasis on the content there and then lastly let's change the open button to a closed section when we click on it just like it does in the original example here as you can see there so let's go underneath this grab the accordion class again content container dot active and dot question after pseudoelement change the content to a dash let's also increase the font size of this to 30 pixels let's give it a nice transition by five seconds and as you can see there it's all working perfectly fine the javascripts are working as well as the styling so that's going to be it for this project another really useful project to learn as you'll most likely run into needing something of this project's nature so for our fourth project we're going to be up in the ante a little bit and create this pretty cool stopwatch which as you can see here we have a play and also a reset button if i hit the play button you'll see it transform to a pause button as the stopwatch is starting if i pause it it will pause on that number and then i can also reset this if i want to so a pretty cool design and we're going to be implementing much more javascript for this project some of the key concepts we're going to need for this project are document.queryselector document.elementbyd add event listener if statements the tostring method the set interval method and inner html so now we know the project and the key concept we're going to need for the project let's head into vs code now and create our stopwatch all right guys so inside our index.html file the first thing we'll do is just create a div with the class of container and inside of that div we're going to house another div which is gonna have an id of timer and inside of this we're just gonna display our timer then underneath that we're gonna have our buttons so we're gonna have a div with a class of buttons and then we'll have the start stop button and this is going to have initially when we're first showing this going to have an icon and this is going to have a class of fa solid fa play and we're also going to give this an id of play and then we'll just duplicate this for the reset button reset vtn and this is gonna have an id of reset and instead of play it's gonna have arrow dash row tate dash left so that's all we're gonna need for our markup let's head into star.css and just apply some styling here so first thing we're gonna have is the body we're gonna include our background image just like in the previous examples but first let's just make the height 100 viewport heights background url img project 4 and of course some of that classic styling so no repeat center center cover so we can see the whole image so there's our guy there and then we want to position everything in the center so let's display this as flex justify content center align items to the center now let's grab the container which houses everything and this is going to have a width of 60 percent a height of 250 pixels background color is gonna be white let's give it that nice border radius 30 pixels and then let's just give this a bit of shadow so zero on the x and y and then three pixels blur so it's all the way around now the next thing i'm going to do is style the timer here so this is an id of timer set the width of this to be 100 font size uh let's make it 72 pixels so nice and big text align this to the center give it a bit of margin so zero on top and bottom auto on the left and right and then let's also give this a bit of padding top let's say about say 35 pixels just to push it down a little bit now as for the buttons themselves we'll grab the button we'll grab the buttons class which houses the buttons we'll text align this to the center and then let's give it a bit of margin on the top let's say about 40 pixels and then let's style the buttons here so so um let's give a bit of margin between them so they're not like squished up next to each other so let's say zero on the top and bottom about 10 pixels on the left and right giving that space uh let's also remove the border both of them and then let's style the actual icons so button i say font size let's say about two ram padding so about 10 pixels and then let's change the color to white now we can't actually see those really clearly so let's grab the ids of each of those so we've got one for play duplicate that one for pause which we'll create later and then one before reset now for play this is just gonna have a background color of green for reset this is gonna have that background color of red and then for pause it's gonna have a background color of orange and that gives them their background color now the buttons here actually aren't the same size so let's just quickly make these the same size so we'll say about 50 pixels yeah that looks a lot better so that's pretty much it for styling let's head into the project 4.js file now and start adding some functionality to our stopwatch here all right guys so the first thing we need to do is just create some variables for our buttons so just going to put here variables for buttons and we're going to say const start stop btn equals document dot query selector and then we're just going to select the id of start stop btn and then we're going to have one more for our reset so reset btn equals document.queryselector and this has the id of reset btn so there's the variables for our buttons the next thing i'll do now is just define a few variables to hold time values so um put a comment here again time values so we'll say let seconds equal zero let minutes also equal zero and then let hours equal zero so that's all the variables we're going to need at the moment the next thing i want to do is actually create our stopwatch function which is going to determine when our stopwatch needs to increment to the next number ie seconds minutes or hours as well as displaying that value in the ui so we'll just put in here uh stop watch function and then we'll just say function we'll call this stop watch so firstly what we want to do when we invoke this function is actually increment the seconds so when this fires off when we press the play button the seconds will start to increment so we'll just say seconds plus plus now of course if we leave it like this it's just going to increment the seconds it's not going to jump to the next value so if we wanted to increment when it gets to the minutes and the hours what we're going to need to do is just create an if statement and then we're gonna say seconds divided by 60 which is the amount of seconds is equal to one we then want seconds to jump to zero and then we want the minutes to increment so what we're saying here is that once this reaches 60 our seconds will restart and then the minutes will start incrementing so that's how we increment the next value now of course we haven't just got minutes we've also got hours so we need to include that as well so we'll apply the same logic here so minutes divided by 60 is equal to 1. the condition we want is that minutes let's back to zero and then the hours increment now what we need to do from here is actually create a variable to display this if statement in the browser so our stopwatch will actually increment otherwise the numbers will just stay static the way they are now so to do that we're just going to need to go underneath this if statement here and say let's say let display timer equal document dot get element by id we're going to get the id of timer and we're going to change the inner text just scroll down a bit so you guys can see that and we're going to set this to equal hours plus uh colon plus minutes plus a colon again and then finally seconds close that off so what we're doing with this variable is just making sure that when our if statements here are working we want it to be displayed in the browser so the way we can display that and check that out is we'll just grab the window object and then we're going to grab the set interval function which is basically just a method that calls a function at specified interval and the function of course that we want is going to be our stopwatch and this interval takes in two parameters so first the function and then the amount of time and we're gonna be putting a thousand which is a thousand milliseconds so we'll say stopwatch and then time of a thousand and if we take a look at the browser now you can see that it's beginning to increment and then if we just make this a bit quicker so we'll lower down to one you can see that the minutes now is also incrementing and then if we just wait a little bit longer it should jump to the hours and as you can see the hours now is also incremented when it gets to that 60 so i'm just going to put this back to a thousand and then comment it out now of course as you've just seen there when this function fires off the lead in zero disappears and if you take a look at our demo example here and we play this you can see that it starts incrementing as it should but the leading zero is still there now to fix this what we're going to do is actually create a couple more variables so we'll go underneath these variables here and then create variables for that leading zero so say variables for leading zero so we'll say let leading seconds equal zero duplicate this a few more times let leading minutes equal zero and then obviously hours now what we need to do is go back inside our stopwatch function here go underneath uh this if statement here and then create some conditionals to include that leading zero if our seconds minutes and hours is only one digit so we'll say if seconds is less than 10 we want to grab the leading seconds and then set this to that leading zero which is a string value but we also want to make this a string value so we'll say uh two string but we also want to make this a string value so we'll apply the two string method which will turn this all into a string else we'll just make sure that else we'll just leave the leading seconds to equal the normal seconds variable so of course we want to create two more for minutes and hours so we'll say this one is for minutes and leading minutes hours hours and of course we're also going to have to change uh the variable here too so we'll say leading hours leading minutes and leading seconds so again what we're doing here with the if statements is making sure that our leading zero will show if our stopwatch is only showing one digit and as we just seen when we invoke the function here with the set interval that lead in zero will disappear but because of the statements we've just created here and this variable which will display in our browser if i uncomment our set interval here it should start incrementing with that latent zero so i'll uncomment this out and as you can see now it's incrementing with that leading zero and if i just speed it up it should also apply to the seconds minutes and hours as you can see it's working in the minutes and then if we just wait a little bit longer again for the hours the leading zero should still stay there and as you can see it's working exactly the way it should so i'll just put this back to a thousand and just comment that out now we're actually invoking this stopwatch when the browser loads because we're immediately invoking it through the window object and our set interval function but of course we want to have more power than this and what we want to do is actually add functionality to our buttons so what we're going to need to do now is actually create a few variables to hold the set interval function as well as containing the status of our stopwatch and which i'll show you guys exactly what i mean so let's create those two variables we'll actually create them up here so variables for set interval and timer status so we'll say let timer interval equal null just for the time being because we want to choose when we want the stopwatch to run not when the page loads and then of course create another variable for our timer status i'm going to set this equal to a string value of stop we now need to use these variables and apply it to our start stop button variable there so we'll just go underneath here and then we'll grab that start stop button add the event listener we're going to look out for a click event we'll grab the function inside this function is going to be where we use those variables we just created so we're going to say if timer status is equal to stopped we then want to grab that timer interval variable and set it to our actual set interval function there paste that in there close that off we then actually want to change our button to switch from a play button to that pause button like it does in the uh demo example so we'll say document dot get element iid grab the start stop id there and then grab inner html set that to backticks and then we are going to grab the icon this has got a class of uh fa solid fa pause and then we want to actually include the id and which gives it that color of orange and this has the id of pause and then we'll close this off and then we also want to change the value of our status so we're going to grab the timer status and set this equal to started else if the stopwatch is now running we also want that functionality of where we can pause the timer so to do that we need to grab the window object again grab the clear interval function and what this will do is actually stop our timer and then insert us time our interval variable which is in reference to our timer variable there close that off and then of course when this statement rings true we also want to change our pause button back to our play button so we're going to say document dot get element by id grab that start stop btn id again and then change the inner html this is going to equal another icon to i dot class equals f a dash solid f a dash play and then we also want to grab the id of play so it has that green background color close this off and then again obviously change the timer status back to stopped so what we've done here inside this function was just checking if the timer status is equal to stopped the timer will start and the play button will also change to a pause button as well as the time of status changing to started else we click the pause button the time will stop with our clear interval function there and the pause button will revert back to our play button as well as the timer status we'll change back to stopped and this now should complete the functionality for playing and stopping our timer so if we go ahead and test this you can see it's changing to a pause button and our time is starting to increment if i press the pause button again it will stop the timer and our button revert back to the play button so as you can see our function's working perfectly fine there now we're almost done we just need to add an event listener to our reset button here so we're going to need this event listener here grab the reset button variable add an event list now look out for a click event grab the function keyword inside of this function scroll down a bit so you guys can see we want to grab the window object again clear the interval so it stops and then reference that timer interval and then what we want when we click on this is grab the seconds this is going to equal zero duplicate this two more times the same for the minutes and then same for the hours and then again we want this to actually display in the browser so we'll say document dot get element by id we want to grab the timer and then grab inner html and then set this to the base of zero zero for the hours minutes and then for the seconds so with this event listener we just created here for our reset button inside of the function we're again stopping our timer interval using the clear interval method which is essentially just a method which clears the time i set out with a set interval method now this of course is referencing this set interval here so again this will stop our stopwatch just like it does in the else statement that we've done here now of course we don't just want to stop the timer we actually want to reset it so we revert all of our seconds minutes and hours back to zero which we've done here just by changing the values back to zero and then of course we want this actually outputted into the browser so we use the document.getelementbyid grab the timer and change the inner html to zero on the minutes hours and seconds so this now should actually reset our stopwatch to zero so if we go ahead and test this out press the play button so it starts incrementing and it also reverts to a pause we'll pause this reverts back to the play button and our timer stops and then now if i click this reset button it should reset our timer and as you can see our stopwatch is working with full functionality and this now concludes our fourth project so quite a bit more javascript to take in for this project however once it's understood it's actually quite a fun exercise to create alright guys so for our master level project we're going to be creating a todo list and how this todo list works is that we simply enter a task inside the input tab here and then we enter that task with our add button and what this will do is add that task underneath our tab here and when that happens we get some extra functionality so let's go ahead and see what that looks like so let's just enter a task here let's say collect shopping we'll enter that task and as you can see that task is added underneath and as well as that we've got some extra functionality so we've got this orange box here and we've also got this trash can now what this orange box does is that if we complete the task and we click on this it'll put a line through it and if we want to get rid of the task completely we'll just click the trash can as you can see it will delete that from the actual task list now of course this isn't the prettiest todo list but again this isn't really the objective of this project so feel free to style it however you like when you guys are creating yours now this project is actually going to include quite a lot of what we learned in part one so i hope you guys are paying attention so far our master level project project five the todo list these are the key concepts we're going to need for the project so we're going to be using document.elementby d of course again we're going to be using the event listener e.target we're going to be using the penchal method the create element method the parent element method as well as the remove and the classlist.add method so quite a lot of the concepts we learned in part one so let's head into vs code now and create our todo list so the first thing we need to do is create our markup for our todo list so we're going to wrap this in a div the class of container and then we're going to have a div which houses the input and the button so we're going to call this oh we're going to give this an id of add the task container inside of that we're going to have our input should be the type of text we're going to give it a placeholder value of enter task which is just going to be that text inside of the input and then we're going to give us an id of input task because we're going to need to grab onto this to give it an event list line in the javascript and then we'll go underneath this and create our button this button is going to have an id of add task because we're going to need to grab onto this as well we're going to have an icon with a class of fa solid dot fa plus and there's our input and our button there and then we'll go outside of this container and we're gonna have an id which is gonna be a container for all of the tasks when we do add them to our todo list so we're just going to give this an id of task container and that's all we're going to need for the markup let's head into the style sheet now and give this some styling so the first thing we're going to want to do so the first i'm going to do in here is just grab the body give this a height of 100 viewport heights and then give it that background image which is going to be an image folder and it's for project 5. then some extra style in here just the same as the others now we want to align all of the content in the middle so we're using flexbox items to the center so that'll center our content let's now give some styling to the um add task container so it's got the id of add task container this is going to have a width of say 350 pixels some padding say 20 pixels on the top and bottom and 10 pixels on the left and right and give it some background color of white and then our trusty friend border radius just to give it those rounded edges and then give it some box shadow because always looks good with a bit of box shadow and then we're going to also need to display this as flex because we want to apply some flex rules to the input and the button there so let's go ahead and do that let's go and grab the input give this a flex of five so it takes up most of the space uh give it some margin to the right so it's a bit space between that and the button so we'll say about say about 10 pixels give it the border radius for those rounded edges and then font size let's make this a bit bigger so let's say 1.2 rem and then let's also give it some padding so about five pixels see what that looks like yeah looks pretty good and then for the button itself this has the id of add task say font size for this because it's saying icon we increase the size with the font size property say 1.1 rem maybe 1.2 yeah that looks good and then let's also give this some padding all the way around and i forgot to actually apply the flex properties so let's give this a flex of one just so occupies a bit of its own space um let's give it a background color of white and the color of the icon green and then the border let's make it green solid 2 pixels classic border radius so that's looking pretty good and i think in the demo this has a hover effect so let's actually apply a transition to this to 0.3 seconds grab this and then apply the hover and let's change the background color to green and the color of the icon to white so let's go ahead and see if that's working as you can see it's got a nice hover effect now so we know that we're going to need to click on this to add a task now we're not completely done with the styling as you'll see in a moment when we um enter a task but let's first add that functionality of adding a task to our todo list so let's go into the javascript file and then we can start to enter tasks after this so let's head into our project 5.js file so first things first in the javascript we're going to need to create some variables one for the actual button here one for the input and then one for the task container which is going to hold all the tasks so we'll do the first one put comment here first variables and we'll say add task equals document dot get element get element by id so the add task button has the id of add task and then one for the task container we'll call this variable task container it's going to equal document dot get element by id id of task container and then we're gonna have one for the input task document dot get element iid and this is gonna again be for our input which has the id of input task so we've got our variables the next thing we want to do is create an event listener for our add button here which is pretty much going to hold all of the power so say event listener for add button so we'll say add task which is that variable there add event listener we're going to look out for a click event and this is a function and inside of this function the first thing we're going to do is create div and then we're going to store it inside a variable of task so we'll say let task equals document dot create element and we're going to be creating a div and this div is essentially just going to house um our task as well as that extra functionality of the check button and the delete button so we're also going to want to give this task a class so we can style it this is going to have class of task so we've got our div there now we're going to need to insert a list item for the actual task itself as well as that again that functionality of the check button and the delete button so first we'll do the list item it's going to equals document dot create element i'm going to create an li then we're going to want to and then for this list item we're going to want to display that text that we insert in the input or the value so to do that i'm going to grab the li variable and then we're going to say inner text is going to equal and we'll do backticks here and then we'll insert that variable of input task got the value again it's just what the value is that we're going to be inserting so whatever task we insert inside of our input and then of course we're going to want to append this inside of that div which is the variable of task so we'll append the li so now we've got our list item the next thing we want to include now is the check button and the delete button so we can include some extra functionality when we do insert a task so so we'll say let's create a variable called check button this is going to equal document dot create element and we'll create our button and then we'll say uh let's include the icon in here so we'll say check button dot in uh html is equal to i say class of f8 solid it's insert the quote marks there so fa solid fa check and then we'll just close that off and then we obviously need to style this so we need to include a class and check task and we'll say task dot append child and then obviously you need to include this inside of our div so we'll just say task start append child and then we'll append the check button and then we'll duplicate this for our delete button change release to delete button and then this one has trash can and then let's also change the class to delete task so we've created all the elements we're going to need to include in our task the next thing we need to do now is just make sure this actually shows and appears in our browser when we try and add a task so that will say if and actually i first just want to show you that we have a bit of validation here so if we take a look at the demo example if we try and enter a task without actually entering anything in the input you can see we get this alert box which has please enter task so for this button to work we need to either add a task or it's going to show us this alert box to tell us to enter a task um just so it's like a bit of validation to the project so to do that we'll say if input task dot the value so whatever value we put inside of our input is equal to nothing then we'll include that alert box please enter a task so we'll just see if that's working as you can see that alert box is working so i'll say else then grab the task container which is going to be the container houses or the task then we're going to append child and we're going to append that task which houses um the check button the list item and the delete button so we'll just close that off and we'll see now if this works so we'll enter a task say collect shopping hit enter and as you can see there it's included our list item and it's also included our two buttons that we created obviously we're gonna be starting this in just a moment but one other thing i want to do just before we go into the style sheet and style this is that i want this to revert back to the placeholder text instead of holding the value we put in the input so uh to do that just grab the input task variable and the value we want this to equal nothing so if we go ahead and type that out again collect shopping enter that you see it adds the list item but it also removes it from the input so we can insert another task so we're almost nearly done here inside of the javascript we'll come back and add the functionality um to the checkbox and the delete button but first let's just start all of this so it just looks a lot nicer and easier to work with so head back into the style sheet so let's apply the styling now for our um tasks when they get added to the list so we'll just put a comment here saying styling for tasks which get added to the list so first we'll grab the tasks which is the div which is going to house all of that content so we're going to just give this a width of 100 and then we're going to give this a background color of white so we can actually see the content um let's also give this some broader radius about 10 pixels and then also the box shadow always love a bit of box shadow and then um add a bit of padding here now say about five pixels and let's push this down a bit actually from our enter tab there so let's give this a margin bottom of 20 pixels so just to separate the two and then let's also give this a bit margin bottom as well so it separates um all of the content all of the tasks a little bit so just say five pixels and then let's grab display flex and let's say justify content space between and then let's now grab the list items itself so dot task li remove the list style put a point let's give this a flex of four so it takes up most of the space uh let's give it a bit of padding about five pixels and let's increase the font size of these to say uh let's say 1.2 rem a bit bigger 1.3 it looks good and then let's give this a bit of margin as well 10 pixels now as for the buttons themselves grab the task grab the buttons and we'll give these a flex of one and let's also give these rounded edges so border radius 10 pixels and then the background color of these to be uh let's make them white now let's grab the um items themselves actually let's change the cursor to a pointer as well so let's grab the task dot check task it's going to have a color of orange and let's give them a bit of space and margin right five pixels and the border say solid two pixels orange and let's increase the font size of the tick there to let's say 1.5 ram it's looking good and then let's do a similar thing for the delete delete task but instead of color orange i have the color of red i don't have any margin on this but we'll change this to red and let's decrease the font sizes to say 1.3 yeah it looks better now both of these have a hover effect so let's do the check first say background color change that to orange and then the color to white copy this therefore the delete task and the background color is going to be red color's going to be white so we'll hover over these and you can see those are working so all we need to do now is just go to the javascript and apply the functionality to this so inside of our event listener here we go underneath the input task value there and then we'll say check button so add event listener we're going to look out for a click event function and we're going to say check button and then because we need to go one element above um we need to traverse the dom so just like we learned in part one we're gonna grab the parent element i'm gonna say dot style dot text decoration and this is going to equal line through so we'll check if that works so let's enter a task as you can see it's putting a line through um our content there now let's do one more for the delete button and we'll add an event listener to this and we'll look out for a click event grab the function we're going to need the event object and we're going to say let target equals e dot target which if you remember back to part one this is reference in the actual element that's been clicked and then we want to grab the target and then grab the parent element twice so we need to traverse the dom two times and then we want to press remove so with the target here we're referencing the trash can or the bin or delete button one level up there's a list item and then one level above that is the task so that's how it will remove it and then we'll just add this to um we'll just check this is working sorry so we'll enter this task collect shopping and then if we click the check button it will cross it out indicating that it's been completed and then if we want to delete it we just press the delete button here so we can add more than one value here so collect shopping add that and we'll do another one for walk the dog add that and then we can cross this out we can delete the collect shop in as you can see the todo list is fully functional so that's actually going to be it for this project guys again the style wasn't really the prettiest for this project again this wasn't really the point of the project of course this was more about how we can manipulate the dom but this now also concludes the part two video of dom manipulation i hope you guys enjoyed the video and learned a lot throughout the twopart course be sure to leave it a like and leave any questions in the comments below that you may have and i'll see you guys in the next video
