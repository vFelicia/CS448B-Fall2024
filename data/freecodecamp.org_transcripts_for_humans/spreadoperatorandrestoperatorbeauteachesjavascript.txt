With timestamps:

00:00 - the spread operator is three periods
00:03 - this operator allows expressions to be
00:05 - expanded in places where multiple
00:07 - arguments elements or variables are
00:09 - expected
00:10 - i will also talk about the rest operator
00:12 - at the end of this video the rest
00:13 - operator looks exactly like the spread
00:15 - operator
00:16 - here are some common use cases of the
00:18 - spread operator you can add elements of
00:20 - an existing array into a new array
00:25 - so here's the first array
00:27 - search to add and we have two array
00:30 - certifications in here algorithms and
00:32 - data structures and front-end libraries
00:35 - and then also we have our main array
00:38 - certifications
00:40 - and we are going to add the search to
00:42 - add into it so responsive web design
00:45 - and then right here is the spread
00:47 - operator three dots and search to add
00:51 - normally if you put search to add here
00:53 - it would add this complete array within
00:57 - the other array
00:58 - but since we have the spread operator
01:00 - right here it's going to just add the
01:02 - elements of the array into the new array
01:04 - so now we're going to have a bunch of
01:06 - different elements
01:07 - including the elements from the search
01:10 - to add and if we do console.log
01:13 - we'll see that they're all strings in
01:15 - this array there's no array within the
01:18 - array and it just lists all these
01:19 - different certifications
01:21 - another use case is that you can pass
01:22 - elements of an array as arguments to a
01:25 - function so let's look at this code
01:27 - right here so we have we have this
01:29 - function add three numbers and there are
01:32 - three arguments x y z
01:34 - and then it's just going to add all
01:36 - those numbers together and put and put
01:38 - it to the console now we have an array
01:40 - called args with three elements zero one
01:43 - two we're gonna call the add three
01:45 - numbers function but instead of passing
01:47 - three individual
01:49 - arguments like the function calls for we
01:51 - are going to pass
01:53 - this array but we're going to use the
01:54 - spread operator that's going to spread
01:57 - out this array into the individual
02:01 - elements
02:02 - so if we run that
02:05 - it's going to put 3 here it's going
02:06 - gonna add those numbers another thing to
02:08 - know is if there is a fourth element in
02:11 - this
02:13 - in this array and we run that
02:15 - we're still gonna get three
02:17 - it's actually going to ignore this
02:18 - fourth element in the array when it
02:20 - spreads it out because the function only
02:23 - calls for three items
02:26 - okay the next thing is you can use it to
02:29 - copy arrays so let me put some code here
02:32 - we're going to have your the first array
02:35 - one two three and now this is how you
02:37 - just copy the array you would
02:40 - put the spread operator
02:42 - and then up the first array and it's
02:45 - going to spread out the first ray into
02:47 - the second array and normally if you
02:50 - didn't copy the array
02:53 - when you push new item onto array 2 it
02:55 - would also push on to array 1 if they
02:57 - were referencing the exact same thing
03:00 - but in this example we're going to show
03:01 - that we're pushing on another item onto
03:04 - the array
03:05 - and when we console that log you will
03:07 - see the the arrays are different r
03:10 - a r and arr2 are now different because
03:13 - it did not push four onto the exact same
03:15 - array they're completely different
03:16 - arrays you can also use the spread
03:19 - operator to concatenate arrays or just
03:22 - put two different arrays together so we
03:25 - have the first array zero one two the
03:27 - second array three four five and this is
03:30 - one way you could do it the r1 dot
03:33 - concat
03:34 - are array2
03:36 - but with the spread operator there's a
03:38 - new way to do it we're going to say that
03:41 - r1 equals we're going to spread out the
03:43 - array one and then we're going to spread
03:45 - out the array 2
03:48 - and then that's going to
03:50 - create
03:51 - this is going to concatenate the array 1
03:52 - and the ray 2.
04:00 - if i just comment this out
04:04 - and i can say zero one two three four
04:06 - five uh the great thing about this is
04:08 - you can just actually add more elements
04:10 - while you're while you're concatenating
04:12 - them
04:15 - so
04:16 - let's just try that example really quick
04:20 - and so you can concatenate and add more
04:22 - elements and you can if you want you can
04:24 - put the second array at the beginning
04:26 - the first rate the end and it just gives
04:27 - a little more flexibility than just the
04:29 - concat
04:30 - function
04:32 - okay now i'm going to talk about the
04:33 - rest operator like i said before the
04:35 - rest operator looks exactly like the
04:37 - spread operator it's just three dots but
04:39 - it's basically the opposite of the
04:41 - spread operator
04:42 - the spread operator spreads or expands
04:46 - an array into its elements but the rest
04:49 - operator collects multiple elements and
04:52 - condenses into a single array element
04:54 - since it is an array you can use array
04:56 - methods let me give you an example of
04:58 - that
05:00 - so
05:01 - we have this function here multiply
05:04 - we're going to pass in two arguments or
05:07 - is it more than two we're going to pass
05:08 - a multiplier and then we're going to
05:10 - pass in an argument that has the rest
05:14 - operator right before the args
05:18 - since these three dots are being passed
05:20 - in as an argument into a function
05:23 - that's how we know that it's being used
05:25 - as the rest operator and not the spread
05:28 - operator
05:29 - so when we have the rest operator and
05:31 - then we have the name of called the args
05:34 - we can actually pass in as many
05:36 - arguments as we want into this function
05:40 - so when we are passing in things into
05:42 - this function the first
05:44 - number we pass in will be the multiplier
05:47 - and then everything else we pass in will
05:49 - be condensed into an array called the
05:53 - args and then look what we're going to
05:54 - do here we're going to return the
05:56 - args.map since it is an array you can
05:59 - use array methods like map and we're
06:02 - going to map each element to this we're
06:04 - going to return
06:05 - multiplier times the element basically
06:08 - it's going to multiply
06:10 - each element in the args by the
06:13 - multiplier so if we have var array
06:17 - equals multiply
06:18 - 2 one two three so this is the function
06:21 - the first number two is the multiplier
06:25 - then one two three goes in as an array
06:28 - an array containing one two and three
06:31 - and now we're going to map each of this
06:34 - one two three into this map function
06:36 - we're going to multiply each item one
06:38 - two and three by the first thing that we
06:41 - passed in which is the multiplier so if
06:44 - we run that you can see at the end one
06:46 - two and three have also all been
06:48 - multiplied by two so we get two four and
06:50 - six thanks for watching my name is beau
06:53 - carnes don't forget to subscribe and
06:55 - remember use your code for good

Cleaned transcript:

the spread operator is three periods this operator allows expressions to be expanded in places where multiple arguments elements or variables are expected i will also talk about the rest operator at the end of this video the rest operator looks exactly like the spread operator here are some common use cases of the spread operator you can add elements of an existing array into a new array so here's the first array search to add and we have two array certifications in here algorithms and data structures and frontend libraries and then also we have our main array certifications and we are going to add the search to add into it so responsive web design and then right here is the spread operator three dots and search to add normally if you put search to add here it would add this complete array within the other array but since we have the spread operator right here it's going to just add the elements of the array into the new array so now we're going to have a bunch of different elements including the elements from the search to add and if we do console.log we'll see that they're all strings in this array there's no array within the array and it just lists all these different certifications another use case is that you can pass elements of an array as arguments to a function so let's look at this code right here so we have we have this function add three numbers and there are three arguments x y z and then it's just going to add all those numbers together and put and put it to the console now we have an array called args with three elements zero one two we're gonna call the add three numbers function but instead of passing three individual arguments like the function calls for we are going to pass this array but we're going to use the spread operator that's going to spread out this array into the individual elements so if we run that it's going to put 3 here it's going gonna add those numbers another thing to know is if there is a fourth element in this in this array and we run that we're still gonna get three it's actually going to ignore this fourth element in the array when it spreads it out because the function only calls for three items okay the next thing is you can use it to copy arrays so let me put some code here we're going to have your the first array one two three and now this is how you just copy the array you would put the spread operator and then up the first array and it's going to spread out the first ray into the second array and normally if you didn't copy the array when you push new item onto array 2 it would also push on to array 1 if they were referencing the exact same thing but in this example we're going to show that we're pushing on another item onto the array and when we console that log you will see the the arrays are different r a r and arr2 are now different because it did not push four onto the exact same array they're completely different arrays you can also use the spread operator to concatenate arrays or just put two different arrays together so we have the first array zero one two the second array three four five and this is one way you could do it the r1 dot concat are array2 but with the spread operator there's a new way to do it we're going to say that r1 equals we're going to spread out the array one and then we're going to spread out the array 2 and then that's going to create this is going to concatenate the array 1 and the ray 2. if i just comment this out and i can say zero one two three four five uh the great thing about this is you can just actually add more elements while you're while you're concatenating them so let's just try that example really quick and so you can concatenate and add more elements and you can if you want you can put the second array at the beginning the first rate the end and it just gives a little more flexibility than just the concat function okay now i'm going to talk about the rest operator like i said before the rest operator looks exactly like the spread operator it's just three dots but it's basically the opposite of the spread operator the spread operator spreads or expands an array into its elements but the rest operator collects multiple elements and condenses into a single array element since it is an array you can use array methods let me give you an example of that so we have this function here multiply we're going to pass in two arguments or is it more than two we're going to pass a multiplier and then we're going to pass in an argument that has the rest operator right before the args since these three dots are being passed in as an argument into a function that's how we know that it's being used as the rest operator and not the spread operator so when we have the rest operator and then we have the name of called the args we can actually pass in as many arguments as we want into this function so when we are passing in things into this function the first number we pass in will be the multiplier and then everything else we pass in will be condensed into an array called the args and then look what we're going to do here we're going to return the args.map since it is an array you can use array methods like map and we're going to map each element to this we're going to return multiplier times the element basically it's going to multiply each element in the args by the multiplier so if we have var array equals multiply 2 one two three so this is the function the first number two is the multiplier then one two three goes in as an array an array containing one two and three and now we're going to map each of this one two three into this map function we're going to multiply each item one two and three by the first thing that we passed in which is the multiplier so if we run that you can see at the end one two and three have also all been multiplied by two so we get two four and six thanks for watching my name is beau carnes don't forget to subscribe and remember use your code for good
