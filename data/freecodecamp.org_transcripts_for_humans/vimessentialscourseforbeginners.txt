With timestamps:

00:00 - hey this is Andrew Brown and welcome to
00:01 - the start of this Vim course and I want
00:04 - to tell you why you'll want to learn vim
00:06 - and the reason I want to teach Vim is
00:07 - because I I truly believe that it will
00:09 - be a huge upgrade uh to your workflow
00:12 - it's just going to speed things up uh
00:13 - tremendously and let you compete with
00:15 - people that if if you can't compete with
00:17 - them in terms of uh their their
00:20 - knowledge base you could compete on them
00:22 - at a just pure speed level and so let's
00:26 - get into why we want to learn Vim so
00:28 - I'll get my head out of the way here
00:30 - here okay and let's talk about the first
00:33 - points why we want to learn Vim the
00:34 - first is greater output and focus so
00:37 - you'll be able to focus on what you want
00:39 - to do instead of visually looking where
00:42 - you need to be and I think this is a big
00:43 - thing that I noticed for a lot of people
00:46 - that are learning um how to program or
00:49 - doing technical things that uh you know
00:52 - require a lot of keyboard movements but
00:54 - the idea is that when you are um always
00:57 - focused on thinking about where to move
01:00 - your mouse as opposed to just uh
01:02 - pressing a button uh you are you're
01:05 - losing your focus because you're now
01:07 - trying to coordinate where something's
01:08 - going as opposed to just something
01:10 - happening um so I think that is
01:12 - something that's very important is
01:13 - you'll get Focus back uh you'll be able
01:15 - to write Faster by multiple factors
01:17 - giving you a Competitive Edge to your
01:19 - non Vim peers my old boss Pablo he uh
01:23 - went to Computer Science school where I
01:25 - did not he had um he was able to build
01:27 - like real-time strategy games all these
01:29 - kind of things
01:30 - but the thing was is that at the end of
01:31 - the day it's like he could not move as
01:33 - quick as I could um and so I could um
01:37 - ship faster and and have more time to
01:40 - write code whereas he might have had
01:42 - better comprehension of technical things
01:45 - but uh you know his output was
01:47 - significantly lower than mine another
01:49 - thing would be less rist strain so Vim
01:51 - uses the least amount of hand movements
01:53 - to accomplish taas tasks and greatly
01:56 - reduce injuries such as carpal tunnel
01:58 - syndrome uh my old founder Ty um so he
02:02 - did not use vim and I used vim and he
02:04 - actually liked emac in particular but
02:06 - when he would code emac requires you to
02:09 - use a lot like it has it's all hot Keys
02:11 - too but you have to use the control key
02:13 - and the ALT key and those a lot all the
02:15 - commands are built around that and so
02:17 - you know he got such bad carpal tunnel
02:19 - he'd have the wrists I think he was even
02:22 - thinking about getting surgery whereas I
02:24 - never had issues and I again would
02:26 - output a lot more than he would so I
02:28 - think that's another Advantage is that
02:29 - if you want to do this long term you
02:31 - want to invest in something that's going
02:32 - to uh put the least wear and tear on
02:36 - your hands which are your most important
02:37 - tools when working in Tech uh it's
02:40 - portable so when you are remotely logged
02:42 - into a Linux machine you have the most
02:44 - powerful IDE to expediate your
02:47 - troubleshooting or configuration needs
02:49 - and basically VI or Vim is installed on
02:51 - most Linux o distributions by default
02:54 - and it's super easy to install and it's
02:55 - generally very very small it's the
02:57 - original one at least was written in C
02:59 - so so the idea is that you can pretty
03:00 - much install it anywhere that Linux is
03:03 - um and you can install it on Windows and
03:04 - other places as well but the point is is
03:06 - that it is super easy to install and
03:08 - generally always is installed or at
03:09 - least some version is installed um okay
03:13 - and another reason why you should learn
03:14 - Vim is because you have to there are
03:15 - going to be situations that you are
03:17 - forced to using Vim or you stumble into
03:19 - vim and you might have seen those uh
03:22 - very funny memes where people are
03:23 - talking about they ended up in vim and
03:24 - they got to quit we have we have that in
03:26 - a future slide here but um that's an
03:28 - that you can run into and most Linux
03:30 - distributions and I know the x is
03:32 - missing here where's it supposed to go
03:34 - Linus Linux there we go Linux o
03:37 - distributions by default set their Text
03:40 - Editor to Vim so you might end up
03:41 - opening a file or trying to commit a
03:43 - file then boom you're in vim and you
03:44 - don't expect to be in it so having basic
03:47 - navigation is very important and then
03:49 - some programs like the man command will
03:52 - use VI style commands for navigation so
03:55 - again learning those basic commands
03:57 - might come in handy when you open up a
03:58 - program as not an editor but it's using
04:01 - the same style of commands and it's the
04:03 - only way you can navigate it so that is
04:05 - a reason why you want to learn Vim so
04:07 - those are my reasons why but next we'll
04:09 - set up some expectations and goals
04:12 - [Music]
04:15 - okay all right so I just want to set
04:17 - some expectations and goals for this
04:19 - course because I don't want you treating
04:21 - this like a certification exam where uh
04:24 - you have to study forever I want you to
04:26 - acquire skills extremely quickly in a
04:29 - practical way that's going to serve you
04:31 - for a long time so uh just understand
04:34 - that we're going to cover more than uh
04:36 - just necessarily jumping in and learning
04:38 - the Vim commands we're going to do some
04:39 - additional stuff but it's going to
04:40 - benefit you but the point is you don't
04:42 - have to memorize it okay so let's take a
04:45 - look at what we're talking about here so
04:47 - the first thing is that I want you to
04:48 - understand the history and evolution of
04:50 - Vim because this is going to explain the
04:52 - origin of syntax and commands where
04:55 - there's just like funny things that
04:56 - you're like why is this here or uh you
04:59 - know why does the command work this way
05:01 - or it's written this way and if you have
05:03 - a a small understanding of the history
05:06 - um and you can just remember some key
05:08 - points you'll know why it is the way it
05:09 - is and that will help you remember how
05:11 - to use it if you do encounter it um
05:14 - another thing is that I want you to see
05:16 - how powerful and portable Vim can be so
05:19 - if you do decide to adopt it as your as
05:21 - your primary editor or you're in a
05:22 - situation where all you can utilize is
05:25 - VI or Vim that you can get the best out
05:27 - of it if you choose to go that extra
05:29 - length
05:30 - but again it's not important for you to
05:32 - fully commit to VI in this um okay but
05:35 - the thing that I really want you to get
05:37 - is fluency and core viim commands for
05:39 - everyday scenarios uh for development or
05:42 - devops uh I'm not sure what it's
05:44 - supposed to be in for that doesn't make
05:45 - any sense but the point is is that I
05:47 - want you to gain fluency and at the end
05:49 - of this course you're not going to be
05:50 - fluent but you're going I'm going to
05:52 - step you through all the stuff so that
05:54 - you can then go practice so it's going
05:55 - to be up to you um to then utilize it
05:59 - dayto day I'm not asking you to do
06:00 - drills or anything fancy but to just try
06:03 - to use it every single day when you are
06:06 - programming or scripting or going into
06:09 - servers uh whether that is for your own
06:12 - personal uh uh projects or if you're
06:15 - doing this uh you're already working a
06:17 - tech role and you want to do this uh
06:19 - with your current work but it really
06:20 - only takes 10 to 14 days even less
06:22 - depending on how how much you commit to
06:24 - it but the point is is that this is a
06:26 - very small commitment we're looking at 1
06:28 - to two weeks
06:30 - of commitment of just regular use that
06:33 - will last you for the rest of your life
06:36 - so I strongly suggest that you put in
06:38 - that time because it is going to again
06:41 - be a huge payout for you uh in the long
06:43 - run on uh for your risks for your
06:46 - productivity uh just uh your ability to
06:49 - get things done okay so there you go
06:55 - [Music]
07:00 - now if you've never really used Vim you
07:01 - might have some uh preconceived uh uh
07:04 - misconceptions of what Vim is because a
07:06 - lot of people talk about how it's super
07:08 - complex and super frustrating to use and
07:10 - they'd like to avoid it as much as they
07:12 - can but I can to tell you that Vim is
07:14 - actually not that hard to learn it does
07:16 - not take too long to learn um but the
07:19 - thing is that if you know nothing it
07:21 - feels extremely difficult at the start
07:23 - and you are having to build muscle
07:25 - memory so there's a quote I don't know
07:26 - who it's from but there's a quote that
07:28 - kind of fits this which is people fear
07:31 - what they don't understand and hate what
07:33 - they can't conquer so it's just the fact
07:35 - that there are some people out there
07:36 - that have not committed any time and
07:37 - their first experience with how
07:39 - frustrating it is which is like
07:40 - instantaneous is so frustrating that
07:43 - they're just like nope no thank you I
07:45 - don't ever want to do that and so
07:46 - there's a bunch of memes online that
07:48 - make fun of this so we have trying to
07:50 - exit Vim uh we we have why do use Vim he
07:53 - says you wouldn't get it One does not
07:56 - simply exit Vim exiting Vim like a book
07:59 - dedicated just on getting out of it and
08:01 - then someone saying like they're going
08:03 - into vim and then they can't get out of
08:05 - vim and then the idea is that we have
08:07 - like an alien photo of uh trying to
08:11 - communicate basic commands about how to
08:12 - get out of Vim so you know you get the
08:15 - kind of idea that um you know generally
08:17 - again people that don't know it really
08:19 - don't like it um but you know we'll get
08:22 - over that hump extremely quickly okay
08:24 - but yeah hopefully that was just fun to
08:26 - look at some memes and let's go jump
08:27 - into the history of where Vim comes from
08:31 - [Music]
08:34 - okay all right let's talk about PDP 7 so
08:38 - this stands for program data processor 7
08:40 - it is a micro computer created in 1964
08:44 - by a company called digital Equipment
08:46 - Corporation so deck and it was the
08:49 - successor uh uh to the PDP 4 which is uh
08:52 - you know a previous computer there and
08:54 - so there's an example of one you might
08:55 - be asking Andrew what does this have to
08:57 - do with vim and trust me it has
09:00 - everything to do with Vim uh but we'll
09:02 - take a little bit time to get there you
09:04 - don't have to memorize any of this stuff
09:06 - just enjoy and and just absorb what you
09:08 - can by uh watching the video okay so PDP
09:12 - 7 specs where it was a 12-bit machine
09:15 - and so it was able uh to process data in
09:17 - 12bit chunks um I not sure how that's
09:20 - different from Modern machines but it
09:21 - sounds like very little amount of bits
09:24 - uh its memory could be between 4K to 12K
09:27 - the reason why there's a range is
09:28 - because was modular so just like how you
09:31 - buy your MacBook Pro or any kind of
09:34 - expensive laptop um you know it ships
09:37 - with a a small amount of Ram or memory
09:39 - and you can increase it modularly so I
09:42 - like to think I'm not sure this is the
09:43 - case but I like to think that these are
09:44 - the the RAM chips here so four 8 12 I
09:48 - don't think that's true but I think that
09:49 - would be funny if that was the actual
09:51 - case um so the processor had a simple
09:54 - instruction set also known as an Isa
09:56 - which supported data movement uh a a
09:59 - Matic operations logic operations the
10:01 - control flow um I imagine that it's
10:04 - simpler than even more modern um
10:07 - processors or instruction sets that are
10:09 - out today um the PDP 7 did not ship with
10:13 - an operating system so deck would
10:15 - provide a toolkit which companies could
10:16 - then use to Aid in building programs or
10:19 - the operating system okay so there was
10:23 - no OS with PDP 7 and this is going to
10:25 - play into our story here um but the PDP
10:28 - 7 at the time had cost $72,000 USD in
10:32 - 1964 so maybe near the start of when
10:35 - Star Trek started on TV uh and so in
10:38 - today's money that'd be 0.5 so half a
10:40 - million dollars today it was considered
10:43 - cost effective compared to larger
10:44 - mainframe computers at the time so just
10:47 - notice that we called this a micro Compu
10:49 - so you can only imagine what a Mainframe
10:51 - computer uh must have been it must have
10:53 - taken up a whole Warehouse or something
10:55 - but that's the PDP 7 but yeah PDP 7 is
10:58 - very important to our story
11:00 - [Music]
11:03 - okay so uniplex information Computing
11:06 - systems also known as Unix is an
11:08 - operating system created at Bell labs in
11:10 - 1969 so this is what 5 years after uh
11:14 - the PDP 7 was introduced and on the
11:16 - right hand side uh this is actually a
11:18 - simulator pdp11 that might be fun to try
11:20 - out so there is some kind of simulator
11:22 - here um and you can experience it but at
11:24 - the time in 1969 it would have not
11:26 - looked like this because they did not
11:28 - necessarily have monitors to work with
11:31 - uh Unix so the U input and output was a
11:34 - different system which we'll talk about
11:35 - later but let's talk about the features
11:37 - of Unix so the first thing is that there
11:39 - was a kernel probably heard of kernels
11:41 - before and these manage the core
11:42 - components I like to think of them as
11:44 - like drivers but that's not exactly
11:45 - accurate um but this is where you have
11:48 - memory processing power profuel devices
11:50 - Process Management file management
11:51 - Hardware communication the really
11:53 - lowlevel stuff you never want to touch
11:54 - yourself then we had the file system so
11:57 - this was called um the Unix file system
11:59 - ufs and I'm not sure but Unix might have
12:02 - been um born out of this file system so
12:05 - I think that might have came first and
12:06 - then everything else got built around it
12:09 - then there is the shell so that's the
12:10 - command line interface which is the
12:11 - thing that we see on the right hand side
12:13 - but again uh that interface would have
12:15 - been uh not a monitor but something else
12:18 - and then we had utilities and tools that
12:19 - it shipped with so these are small tools
12:21 - which input and output could be chained
12:23 - together using an operator that uh that
12:25 - used the pipe character um and if you've
12:28 - done any bit of Unix you seen these
12:29 - think of the tools that are bundled into
12:31 - Linux or Ubuntu by default you probably
12:34 - seen it like Echo man cat you probably
12:37 - heard of them before or you know them
12:39 - pretty well it had multi-user and
12:43 - multitasking and so you know why does
12:45 - Unix why did they want to make Unix well
12:48 - the first reason was that we talked
12:49 - about PDP 7 doesn't ship with an
12:53 - operating system right so if if if Bell
12:55 - Labs said to ptb7 they're going to have
12:57 - to code something themselves but the
12:59 - thing was they actually already had an
13:00 - operating system it was called uh the
13:02 - the multics I think I'm pronouncing it
13:04 - right over here I'm going to get my pen
13:06 - tool out here the multic operating
13:08 - system but uh Ken to Thomas and
13:12 - Denise uh Dennis Denise I was going to
13:15 - say Denise Richie which is actually a um
13:17 - a Star Trek actor or actress but Dennis
13:20 - Richie using a PDP 7 built Unix out of
13:23 - frustration of Bell's lab's more complex
13:26 - uh multic operating system and it was
13:28 - built and it wasn't well maintained and
13:30 - they just said we don't want to use this
13:31 - junk we want something similar so they
13:33 - built out Unix if you've never heard of
13:35 - bell Labs Bell Labs is a subsidiary of
13:37 - AT&T and they purchased a PDP 7 machine
13:40 - from deck uh which Unix was built for so
13:43 - that is the relationship with the PDP 7
13:46 - okay uh so Unix was successful because
13:49 - it was written in the C programming
13:51 - language and C allowed Unix uh to be a
13:55 - portable OS where where wherever C could
13:58 - run so could Unix but it wasn't a
14:01 - coincidence that it was written in C
14:02 - because uh Dennis Richie who worked at
14:05 - Bell Labs created the language C so he
14:08 - created the language C and then wanted
14:09 - to use it for Unix so that kind of just
14:11 - ties it all together okay so yeah that's
14:17 - [Music]
14:20 - Unix all right so something I thought
14:22 - would be fun is if we could start up uh
14:24 - Unix version one and it's really
14:26 - actually hard to find an emulated
14:27 - version even though it ran a PDP 7
14:29 - people were suggesting that it was never
14:31 - licensed for free and so probably the
14:34 - only thing we could simulate would be a
14:35 - pdp1 and then get uh that on there but I
14:38 - don't want to go through that hassle I
14:39 - just want to experience Unix one as it
14:41 - was the best I can and so somebody here
14:44 - has created a Docker file supposedly
14:46 - that will allow to run um that addition
14:49 - so what I'm going to do is go ahead and
14:51 - see if that actually works so it says
14:54 - based on the Unix first edition June
14:56 - 1972 source code which is over here and
15:00 - apparently that's all here just on
15:03 - GitHub which is kind of cool but what
15:05 - we'll do is we'll go ahead and we'll
15:06 - need some kind of Docker environment now
15:09 - if you don't have Docker don't worry
15:10 - about you just watch me do this for fun
15:12 - but um I'm going to use G pod and G pod
15:14 - has Docker installed code spaces does as
15:16 - well so whatever thing you want to open
15:18 - up you could also even do this probably
15:20 - um on AWS if you were to spin up um a
15:24 - container with Docker installed or
15:25 - anything but anyway we'll go ahead and
15:27 - we'll spin this up and take a look here
15:28 - it's probably just the easiest way to do
15:30 - it so I'm going to SP up an environment
15:31 - we'll be back in just a moment
15:35 - okay all right so um I spun up uh this
15:39 - here and I'm going to go and all I did
15:41 - was click on this repo I have the git
15:42 - pod
15:43 - um uh extension installed so if you type
15:46 - in git pod Chrome extension you install
15:47 - you'll get a button here or again you
15:49 - have to figure out how to open yourself
15:51 - but the point is once you have Docker
15:52 - installed you just take this command as
15:55 - such uh which will interactively allow
15:57 - us to
15:59 - uh connect to it and it should download
16:01 - the image and run it and all that stuff
16:03 - so we'll go ahead and try this out and
16:06 - we'll hit
16:08 - enter so it's pulling the
16:11 - image pretty cool and so I'll just wait
16:13 - for this to pull and then start up okay
16:15 - and right away it's asking us to log in
16:18 - so I guess the question is how do we log
16:20 - in now type root at the login for the
16:23 - prompt so we'll go ahead and type this
16:24 - type in
16:26 - root and so now we're inside of Unix so
16:29 - we're literally using the first first
16:31 - version of 1972 Unix okay so the
16:35 - question is what is available here
16:36 - because I'm really curious what would
16:38 - have existed at this time if we type in
16:39 - LS we have LS do we have PWD so print
16:43 - working direct directory does not exist
16:46 - um would di exist nope okay so can we do
16:51 - we have clear nope clear is not a
16:52 - command which makes sense because at the
16:54 - time they wouldn't had visual screen so
16:57 - why would you need to clear anything if
16:59 - there's no terminal right um and then
17:03 - whoa we have a bunch of output here I
17:05 - wasn't
17:08 - expecting
17:10 - okay so oh I just wanted the output tab
17:12 - I think it's fine we'll go back to
17:13 - terminal so that doesn't exist so what
17:15 - commands would have existed back then
17:16 - let's go ask chachy PT
17:18 - here because I'm really curious like I I
17:20 - don't even know I I've never used Unix
17:22 - one so what commands existed for Unix
17:26 - one let's go ahead and ask it
17:33 - archive Li Library manager the assembler
17:36 - cat change
17:38 - directory L replace with CD that's kind
17:40 - of interesting so I'm going to type this
17:43 - again LS so we could say change
17:46 - directory and go into
17:47 - Temp and then LS that's kind of
17:51 - cool we have add the line editor we have
17:54 - find Ln LS we know LS we can make a
17:57 - directory we can move for files print
17:59 - files so not a whole lot I'm not sure if
18:02 - there's more than this but that's not a
18:04 - whole lot um we get the time let's go
18:06 - ahead and type time but notice that
18:08 - there is no VI there is no didn't get
18:11 - any time here there's no VI and there's
18:13 - no Vim okay so on this there is no means
18:16 - to actually edit
18:18 - files because if we wanted to create a
18:20 - file that would be tricky there's not
18:21 - even an echo is an echo let's find out
18:24 - Echo
18:26 - hello okay so that apparently does exist
18:29 - um so I wonder if I could pipe out a
18:31 - file so if we do Echo and this is the
18:33 - pipe we're talking about it is this
18:35 - symbol here that appears above your
18:37 - return where there's the backlash it's
18:38 - the shift it's the vertical line I just
18:41 - wonder if I can make a file saying
18:42 - hello.txt does this
18:44 - work uh maybe not
18:47 - LS I think it's sorry I think it's
18:51 - Echo oh it's mucking up here uh Echo
18:56 - hello oh it does not like it if I back
18:58 - space
18:59 - out oh I can't even make mistakes okay
19:02 - we'll try this again Echo
19:05 - hello this hello.txt hit enter oh did
19:09 - output the file we type
19:10 - LS um so it lists out the directories
19:14 - but I don't see the file anywhere is it
19:16 - there let's type in cat
19:18 - hello.txt cat
19:24 - hello.txt so yeah I don't know it seems
19:26 - pretty hard to use but at least we get
19:28 - an idea that it's more limited there is
19:30 - no VI let's type in VI here is it in
19:31 - here yeah there's no VI and so we'll
19:33 - have to worry about the next step but
19:36 - that's all I wanted to show you for fun
19:38 - [Music]
19:42 - okay let's talk about what is Ed so when
19:45 - we were looking at the Unix emulator we
19:47 - saw that there was a line editor called
19:49 - Ed and so Ed is a text editor built for
19:52 - the Unix operating system in
19:54 - 1973 um which is confusing because the
19:57 - Unix version we had there was 1972 so it
19:59 - does understand there's some leeway in
20:01 - terms of these dates here because
20:02 - they're not always very clear at least
20:04 - to me um from what places uh State their
20:07 - sources Ed was um uh the first three
20:11 - parts of the Unix OS in 1963 so
20:14 - obviously existed 10 years prior or was
20:16 - created in that 10e period the three
20:18 - parts being the assembler the editor in
20:20 - the Shell we saw there was an assembler
20:21 - there I think it was like the uh ASM
20:24 - command or something like that and then
20:26 - Ed is the editor and the shell is
20:28 - actually the interface that uh we were
20:30 - working with um we interfacing with it
20:33 - and so here's an example of us um uh
20:35 - using Ed it says Ed fstab I don't
20:38 - remember what fstab is if that's the
20:40 - file name or something else I think it
20:41 - yeah maybe we're editing a file called
20:42 - fstab that's what it is yeah and uh file
20:46 - system something I'm not always great
20:48 - with storage with Linux but anyway so Ed
20:50 - is a line oriented text editor and is
20:53 - challenging to use because you cannot
20:54 - visually see how you're editing your
20:57 - text files what do we mean you can't
20:58 - visually see well the thing was back
21:00 - then they didn't have monitors so how
21:03 - did they get input and output well this
21:05 - was
21:06 - via uh uh teletype machines and so
21:10 - teletype machines uh were basically like
21:12 - typewriters where you'd enter input into
21:14 - the typ so you type it in hit enter it
21:16 - would then send it to the machine and
21:18 - then the output would literally get
21:19 - printed back on the paper hence why the
21:22 - command is called The Print command
21:24 - because it literally printed on paper um
21:27 - and so Ed is is part of the poix and
21:29 - open groups standard of Unix OS so now
21:32 - when we talk about Unix we usually talk
21:33 - about as being an open group standard as
21:35 - opposed to the operating system itself
21:37 - um meaning that most or uh most versions
21:40 - of Unix space operating systems carry
21:42 - this Edition okay so we can open up any
21:46 - edition of Unix and it pretty much
21:48 - always has Ed so that's the the most
21:50 - Bare Bones editor that is shipped um
21:53 - with Unix okay but why don't we use Unix
21:56 - that or sorry Ed if it's with all them
21:58 - well it's because it's very hard to use
22:00 - because it wasn't designed for monitors
22:02 - but let's take a look at some of the
22:03 - commands so here's an example of us
22:05 - using Ed and so what we would do is we'd
22:08 - press a because imagine you're on a on a
22:11 - keyboard right or sorry like on a on a
22:13 - typewriter and you want to send a
22:14 - command in and you want it to be as
22:15 - efficient as possible you don't want to
22:17 - type out a bunch of stuff so they made
22:19 - like single letters indicate that you're
22:22 - starting a command so a uh would bring
22:26 - you into input mode meaning that you're
22:27 - already now to to append each line and
22:30 - so then You' press a hit enter and then
22:33 - the computer would know okay we're input
22:35 - mode and then you'd enter your uh enter
22:37 - in align hit enter enter it Al line hit
22:39 - enter enter it Al line hit enter and it
22:40 - would add it to your file and then when
22:42 - you wanted to say it was done you'd give
22:43 - it a period okay just like at the end of
22:46 - a sentence you'd have a period on a
22:47 - single line by itself and it would then
22:49 - go back into
22:50 - command uh command mode or normal modee
22:53 - whatever you want to call it so
22:54 - depending on the mode these Keys could
22:56 - change the behavior so obviously when
22:58 - you're input mode a does not it just
23:01 - acts as a regular a right so just
23:03 - understand that okay so now if you
23:06 - weren't in input mode and you were just
23:08 - in the normal normal or command mode and
23:11 - you press period it would actually get
23:13 - it would print out the current line okay
23:14 - so that's what I'm talking about where
23:16 - you have these modes and it changes the
23:18 - nature of the
23:19 - keys now let's say um you wanted to
23:23 - print all the lines well the way you do
23:24 - it is you'd enter in one for the first
23:27 - line then command line mode or command
23:29 - mode you give it a comma and you'd say
23:32 - dollar sign and dollar sign is part of a
23:34 - regular expression so end of end of the
23:36 - line and then P for print so we have one
23:40 - which represents the first line because
23:41 - it's in position one comma so that's
23:44 - setting a range operator dollar sign
23:46 - represents the last line it's a reg X
23:48 - thing and then P which is a lowercase p
23:51 - here which will print the range of stuff
23:54 - okay and the reason I'm showing you this
23:56 - is because this actually comes up later
23:57 - in Vim
23:59 - uh uh not like you don't ever have to
24:01 - write it in but I'm just saying like I
24:02 - saw it I was like oh ha that came back
24:04 - to Ed so this is where we're kind of
24:06 - seeing the history here um so now let's
24:09 - take a look here if you wanted to um
24:11 - write and quit what you would do is
24:13 - you'd have to type in WQ and then the
24:15 - name of the file and that's how you
24:17 - would uh save and quit while in Ed mode
24:21 - okay so if you've ever used Vim or V and
24:24 - you saw the WQ command it's coming all
24:25 - the way back from this tool here so
24:28 - there are many more commands such as
24:29 - line changing joining lines regx search
24:32 - reg regx substitution and more uh we're
24:35 - not going to get that much into it
24:36 - because this program even for me is
24:38 - challenging to use um but again it was
24:42 - much more efficient than having to uh
24:45 - feed paper into machines because that
24:46 - was the other way that they um they
24:49 - would get data into a computer they
24:50 - would like literally punch holes or
24:52 - they'd have um uh tape or other things
24:54 - to feed information in so uh obviously a
24:57 - typewriter was more efficient at the
24:59 - time
25:00 - [Music]
25:03 - okay all right so I just left this
25:05 - environment open of us running Unix
25:07 - because what would be interesting to see
25:09 - in Unix one is the Ed so it
25:12 - says here that we have Ed where is it
25:17 - here uh
25:19 - Ed right the line editor so let's give
25:21 - it a go so what I'm going to do is type
25:24 - it Ed and then we'll give it a file
25:25 - called um just in case hello already
25:28 - exists there I'm going to type in um and
25:31 - I'm not sure if my G pod's messing up
25:33 - I'm just going to refresh here because
25:34 - sometimes I have to refresh it it's just
25:35 - the nature of G pod and I'll just let
25:38 - the terminal reopen here yeah okay so
25:39 - we're back here and let's see if it acts
25:42 - a bit normal now go back to terminal
25:47 - tab oh no it's not so I'm just I'm G to
25:50 - just stop this um this Docker container
25:52 - here so on the right hand side I have it
25:54 - right I'm just going to stop it
26:02 - and come on Docker you can do
26:06 - it there we go I stopped I'm going to
26:08 - start it up again so just so we have a a
26:11 - fresh experience here and so I'll type
26:12 - in root to get into Unix one and let's
26:15 - go and create a new file so we're going
26:16 - to type in ed for Ed and we'll type in
26:21 - hello.txt and so now we are in the
26:24 - editor I do not know why it starts with
26:26 - a question mark okay but let's try the
26:29 - commands that we had over
26:31 - here and and see what we can experience
26:34 - so let's go type in a enter and I'll say
26:38 - this is
26:40 - my whoops I did not mean to go to the
26:42 - next
26:43 - line this is my second line enter this
26:49 - is my third line which it might not be
26:51 - the case I don't know there's some kind
26:52 - of key I must be hitting that it doesn't
26:54 - like I think it's the back slash you're
26:55 - not allowed to go back but anyway that's
26:58 - fine I will hit
26:59 - period and now I want to see my current
27:01 - line which shows a question mark so
27:03 - that's not very
27:04 - useful um so I'm going to type in
27:08 - WQ or just going to type in Q sorry q
27:12 - and see if I can quit so I've actually
27:13 - just quit we'll try try this again so
27:15 - we'll type in Ed
27:17 - hello.txt and this time I'm not going to
27:20 - hit
27:21 - backspace this thing does not like me
27:23 - backspacing out whatsoever I'm going to
27:24 - quit again hold on here quit there we go
27:28 - so I make no mistakes Ed space
27:31 - hello.txt enter we'll type in a I'll
27:35 - just say this space is the first line
27:42 - period I'm not used to not making any
27:44 - mistakes and then we have this is the
27:48 - second can't fix it can't fix it
27:52 - Line This is the fourth line all right
27:57 - and type in Period okay so now we should
28:00 - be back in a command mode we just have
28:03 - to remember that right I'm going to
28:04 - press period and show it shows us the
28:06 - fourth line so now let's print out all
28:07 - the lines I'm going to put one comma and
28:10 - let's do two first and then do p to
28:13 - print it so it prints the first and
28:14 - second line we'll do one comma dollar
28:17 - sign P hit enter and that is the fourth
28:20 - line we type in WQ space
28:24 - hello.txt
28:26 - enter and
28:28 - I'm not again not sure why we have a
28:30 - question mark
28:31 - here we'll type in Q did it save the
28:33 - file I'm going to type in cat
28:38 - hello.txt cat
28:40 - hello.txt
28:42 - LS and uh I don't know maybe we can't
28:44 - save the file in that directory I don't
28:46 - know but that is kind of the experience
28:48 - of it so I mean hey we kind of made it
28:51 - work but let's go take a look at it now
28:53 - in Ubuntu so I'm going to go and just
28:54 - stop uh this
28:56 - container and we can do this here in uh
28:59 - in in um giod but I'm actually just
29:02 - going to go into like anist account or
29:04 - something you can spin up whatever you
29:05 - want I'm just on windows so I can't show
29:07 - my local machine but if you're on a Mac
29:08 - you can just open up your terminal and
29:10 - do this but I'm just going to log into
29:12 - here just give me a moment all right so
29:14 - I'm in my ad's account you could use
29:15 - Google you can use um Azure doesn't
29:19 - matter as long as you know how to launch
29:20 - an ec2 instant or sorry a virtual
29:22 - machine and I'm just going to use the
29:24 - buntu as the Baseline here so I'm going
29:27 - to go here and say um launch an
29:30 - instance so we'll go ahead and do
29:34 - that and I'm going to say my web server
29:38 - and you'll have to know how to get into
29:39 - your machine so if you've never done
29:40 - that before you know you know use
29:43 - something that you're familiar with
29:45 - launch some kind of auntu system that
29:46 - you know how to utilize and so I'm going
29:49 - to go to
29:50 - auntu and I'm going to choose a T3 micro
29:53 - here didn't think we'd be doing any
29:55 - Cloud did you and we'll uh you can
29:57 - choose a key pair I don't like launching
29:59 - this with a key pair what I like to do
30:01 - is I like to launch this with an IM
30:03 - profile and I have one called uh ec2 SSM
30:06 - roll all this Ro does is allow me to use
30:08 - sessions manager so if I go into rolles
30:13 - here okay and we go over to
30:17 - rolls SSM
30:20 - roll and I go into the actual
30:23 - permissions here which is I all I'm
30:24 - doing is adding this one here this one
30:26 - doesn't need to be this one I think I
30:27 - added that for some tutorial but all we
30:29 - need is the Amazon SSN manage inance
30:31 - core so if you want to create this Ro
30:32 - yourself you just go create rooll say
30:34 - ec2 I'm not going to fully created but I
30:36 - can just show you some of the steps and
30:38 - we say uh
30:40 - core manage instance you go name it save
30:43 - it right you come back over to here to
30:45 - your launch instance you'd refresh and
30:46 - you'd select that rule that's all that
30:48 - thing is doing so I'm going to go down
30:49 - below to the ground I'm going to launch
30:52 - this instance and I'll just launch let
30:54 - it launch in the the default uh place I
30:57 - do not want it with the key
30:58 - pair I'll go launch that and we'll just
31:00 - wait here a moment okay and just to be
31:03 - fair if we end up having to utilize some
31:05 - kind of other uh computer I'll use
31:07 - something other than AWS just to show
31:08 - you that I don't always just use AWS
31:10 - okay and actually to monitor this I'm
31:12 - just going to click through so I don't
31:13 - have to like guess when it's ready so
31:15 - all I'm waiting for is these two status
31:17 - checks to pass it doesn't take too long
31:19 - so we'll just wait for that okay all
31:21 - right so I waited a few minutes here I'm
31:22 - going to refresh and the status checks
31:24 - are passed so I'm going to checkbox this
31:26 - and then I have a connect button this
31:27 - allows us to use sessions manager
31:29 - without that roll you're not going to be
31:30 - able to get in here and uh so we'll go
31:33 - ahead and launch this
31:34 - up okay and so um the default user with
31:37 - this if I type in who am I it says that
31:39 - I'm the SSM user we could probably use
31:41 - that one but it's not proper to do so
31:43 - I'm just going to increase the font here
31:44 - a bit so you can see what's going on I'm
31:46 - going to type in uh suyen ec2 user it
31:49 - just switches me to the or sudo Su hyen
31:51 - ec2 User it's going to switch me to the
31:53 - ec2 user oh right this one doesn't
31:56 - actually have um a user called dc2 it's
31:59 - called Ubuntu so I'll say Pudo Su Ubuntu
32:01 - forgot we're using Ubuntu and so I'll
32:03 - type in who am I now I am the um Ubuntu
32:06 - user tells me the name here and this and
32:08 - you can see there's nice styling so
32:09 - that's good so let's take a look and see
32:11 - if Ed is installed so I'm going to type
32:12 - in Ed hello.txt hit enter it says
32:16 - there's no such file directory so
32:17 - there's no file there we can't open it
32:19 - so we'll type in Ed and so now we have a
32:21 - new file I'm going to type in a hit
32:24 - enter I say hello world and I can
32:28 - actually go back now so it's actually
32:29 - acting normally now hello world goodbye
32:34 - Moon okay goodbye Moon and we'll give it
32:37 - a period here so much smoother
32:39 - experience we'll give it a period here
32:41 - we'll say one comma dollar sign P not
32:46 - too bad and we'll type in WQ
32:49 - [Music]
32:50 - hello.txt and it says 27 I imagine that
32:53 - might stand for the amount of characters
32:54 - that are in there and so I'll type in
32:56 - cat to print out the file and there it
32:59 - is so clearly we have a baseline editor
33:02 - that we can
33:03 - utilize so that is whatever and that's
33:06 - all I really wanted to show you is that
33:07 - it basically is everywhere so we'll go
33:09 - ahead and terminate
33:10 - this but again it's not the easiest
33:13 - thing to use so I go over my instances
33:15 - and we'll go
33:16 - ahead and terminate this instance and
33:19 - that rle you don't need to delete
33:21 - because you'll probably use it again
33:22 - it's a very useful role to have I'll see
33:23 - you in the next one okay ciaoo
33:26 - [Music]
33:30 - what is X well it stands for extended
33:32 - and it's the Align oriented text editor
33:34 - created in 1976 for units that improved
33:37 - upon the feature set of uh Ed so X
33:40 - supported additional functionality such
33:42 - as more extensive commands history and
33:44 - undo uh so only one level of undo
33:47 - multi-buffer support and visual mode and
33:49 - that is the big thing that we'll talk
33:51 - about here but it wasn't that it came
33:53 - initially with it there's a bit of a
33:54 - story there but I want to talk about
33:56 - 1976 so imagine that uh what was it they
33:59 - said Unix was developed what in 1969 so
34:01 - then a few years later it's getting
34:03 - distributed out to schools with the
34:05 - source code um and then people are
34:07 - experiencing it and making their own
34:09 - improvements to Unix um and the
34:11 - community is sharing everything so
34:13 - there's a a threee gap three to four
34:14 - year Gap where people have an
34:15 - opportunity to do developments and I
34:18 - think at this time they end up getting a
34:19 - visual a visual monitor so George keris
34:22 - who was at a school in the UK developed
34:24 - a better version of Ed called M that
34:26 - could take advantage of video display
34:28 - while kis was visiting Berkeley uh I
34:30 - believe that's I don't know where that
34:32 - is I don't know if that's in the US or
34:34 - or the UK sorry I'm in Canada I don't
34:36 - know sounds like a a US school he
34:39 - presented his program to Billy Joel not
34:41 - the singer but whoever was there at uh I
34:45 - assume a programmer or teacher or
34:46 - something would go on to modify to be
34:49 - less demanding and then uh the editor
34:52 - was to be included in the Berkeley
34:53 - software distribution so I think the
34:55 - time Berkeley wanted to uh extensions or
34:58 - improvements to uh Unix and they called
35:00 - it BSD uh my first operating system I
35:03 - ever used was called free BSD so I know
35:05 - BSD pretty well but I imagine that ceris
35:08 - went over to Berkeley because he wanted
35:10 - to get his software included into this
35:13 - distribution um and so that distribution
35:15 - came out in 1.1 and obviously Billy Joel
35:17 - had made improvements for for that to
35:20 - come through so here's an example of the
35:22 - Ed syntax that we saw previously that we
35:25 - tried in the last video and now this is
35:27 - what the X syntax looks like so it's
35:30 - similar but there are some key
35:32 - differences the first thing you'll
35:34 - notice is that there's this colon and
35:35 - this character in The X editor is used
35:37 - to indicate that the user is entering a
35:38 - command in the command mode why did do
35:41 - that I don't know but um I mean it
35:44 - definitely makes it more distinctive
35:45 - from the last one um and then there was
35:48 - a new mode coded in by Billy which
35:51 - allowed users to see their document
35:53 - while they entered commands uh and the
35:55 - command was called colon V
35:58 - VI which stood for visual mode so you
36:01 - got to imagine they had V video
36:04 - displays and this whole entering things
36:06 - line by line was getting tiresome so
36:08 - this is where um VI starts to come into
36:11 - play so let's take a look at this visual
36:14 - mode and an ex in the next video
36:16 - [Music]
36:20 - okay hey this is Andrew Brown in this
36:22 - video what I'm going to do is go ahead
36:24 - and uh launch up FreeBSD because that's
36:27 - based off a so it should have EX in it
36:29 - I'm going use Google this time even
36:30 - though it's a big pain to use Google for
36:32 - this and so I just looked up I just said
36:34 - um uh FreeBSD G uh gcp or Google if I go
36:38 - down below here they appear to have a
36:40 - command uh I tried this in the last
36:42 - video didn't work but I think maybe uh
36:44 - it might work this time if uh I use a
36:47 - later version so that's what I'm going
36:48 - to try here I'll create a new project
36:50 - just so we don't have a big mess here
36:51 - I'll just call this um my FreeBSD if it
36:55 - lets me make a new org or sorry project
36:58 - sometimes these are used up so I'm not
37:00 - allowed to do that so I'm going to
37:01 - create a new project and then we'll get
37:04 - going here so just I'll give a moment
37:06 - for this project to create
37:10 - okay uh and is it already done sometimes
37:13 - as fast sometimes as slow so now we are
37:15 - in our new project so what I'm going to
37:17 - want to do here now we could open up uh
37:20 - we could create a new VM this way but we
37:23 - will have to enable the service so I'm
37:24 - just clicking that and enabling the
37:26 - computer engine API so just give that a
37:28 - moment uh to work its magic
37:32 - okay and so this sometimes takes a bit
37:34 - of time so I'll be back here in a moment
37:36 - okay all right so it looks like um
37:38 - that's enabled and notice that we have
37:40 - our option here now if we were to go
37:41 - down to our options and change you
37:44 - notice they don't have uh free BSC here
37:46 - why they do not I do not have any idea
37:49 - why but that's okay because we'll go
37:50 - ahead and use the cloud shell so I'm
37:52 - going to click Cloud shell here this is
37:53 - going to open up the terminal this takes
37:55 - a little bit of time and so the idea is
37:57 - that we can just enter in this command
37:58 - here which is I'm going to just bring
38:00 - this on to another screen so I can I can
38:02 - clearly type it and so this is going to
38:04 - be
38:05 - gcloud um compute instances create I'll
38:09 - just call this my
38:10 - FreeBSD and then we want our image so
38:13 - this one's going to be free BSD 13
38:15 - hyphen 3 release a hyphen AMD
38:20 - 64 and we'll say image hyphen project
38:24 - equals free BSD org Cloud Dev now I
38:29 - don't know what size of image this is
38:31 - going to launch up but I imagine it's
38:32 - probably nothing super big that for the
38:34 - time we're going to have it if you're
38:35 - not comfortable just blindly launching
38:37 - with the default settings you can just
38:38 - watch and confirm that I got it right
38:41 - and then go back to this video because
38:43 - I'm not going to um confirm here but
38:46 - I'll go ahead here and just hit enter I
38:48 - think I have everything typed in
38:50 - correctly and it says do you mean UA
38:53 - Central because I didn't specify Zone
38:55 - we'll say yeah just launch it wherever
38:56 - it wants to launch it
38:58 - it and so we'll go ahead and do that and
39:00 - so we'll let it create
39:02 - okay I mean while it's waiting we can
39:04 - navigate over here and see if it's
39:05 - spinning up it's not going to hurt it so
39:08 - I'm just going to keep clicking back
39:09 - here and I'm just going to stay in this
39:11 - UI because if you make a new tab it'll
39:13 - act weird I'll go to VM instances here
39:16 - and so it's spinning up I'm not getting
39:17 - any warning last time I did this I I
39:19 - pulled an older version and so that is
39:21 - spinning up uh so again we're just
39:25 - waiting for this to
39:28 - uh start so that will take a bit of time
39:31 - what we could do here is check our
39:32 - firewall rules while we're waiting here
39:33 - because we should need to have um the
39:37 - port 22 open and the way gcp works is
39:40 - everything's kind of like Global which
39:41 - is kind of annoying but if we go
39:44 - here we can see we have Ingress T TCP 22
39:48 - is already open
39:51 - here
39:52 - okay so it looks like we already have
39:55 - SSH open so we're not really wor worried
39:57 - about whether that's going to work so
39:59 - I'm just going to go back over
40:01 - to our computer engine
40:05 - here and again I'm just going to wait
40:07 - for this to provision all
40:10 - right actually while we're waiting I
40:12 - just wanted to see what size this is
40:13 - launching because I kind of wanted to
40:14 - tell you whether uh this is big or not
40:16 - and so this one is what what is
40:21 - it uh what size
40:29 - machine type N1 standard one so I don't
40:32 - know if that is a small
40:37 - one and one standard
40:41 - one one vcpu there are smaller ones like
40:45 - 25 so it's definitely not uh super
40:50 - small but it's nothing that I'm worried
40:52 - about
40:57 - yeah we could just ask chat
41:02 - gbt how much does a gcp cost per month
41:08 - in US
41:17 - Dollars i al get rid of this I'm not
41:20 - even using that and I'm not using this
41:28 - and it says $34 a month yeah so not the
41:30 - most efficient for spend again I don't
41:33 - plan to keep this up for long but looks
41:34 - like it is now running so we're in good
41:36 - shape um could we log in by going over
41:40 - to
41:41 - here so inst stopped it isn't stopped
41:44 - we'll refresh here there we
41:47 - go and so I want to utilize this via the
41:51 - g-cloud command so we'll go ahead and
41:53 - type this in and so this is the command
41:55 - it's suggesting for us to log in we'll
41:57 - copy this I'm going to go down I'll just
41:59 - run into the shell which is really nice
42:01 - we'll go ahead and enter and hopefully
42:03 - we can SSH this
42:06 - way so normally what it would do is it
42:08 - would generate an SSH key because we
42:10 - probably wouldn't have
42:14 - one and hopefully that just
42:21 - works and it's refusing from the host so
42:24 - I'm not exactly sure as to why but maybe
42:26 - we do need to open up Port 22 but it
42:28 - said that it was available so let me go
42:31 - figure that out okay there's a few
42:33 - suggestions here I don't know why I'm
42:35 - having such a hard time with connecting
42:37 - but uh we can use telet to check if the
42:39 - port is open because FreeBSD might need
42:41 - the port open itself so people were
42:43 - suggesting to add metadata and say Port
42:46 - enabled uh I'm not really sure if that
42:48 - would do anything I'll I'll try it for
42:49 - fun see if that does anything I don't
42:52 - think that's going to do anything but
42:54 - I'll I'll do it anyway so let's say my
42:58 - free
43:00 - BSD say
43:06 - yes if that works that'd be really
43:10 - nice and we'll try this no that's fine
43:13 - okay so if we can't get through Cloud
43:15 - shell which is fine we'll go ahead and
43:17 - say open in the browser and maybe it'll
43:19 - just show up here
43:22 - okay not the nicest way to do it but I
43:24 - just want it to work so give that a go
43:28 - and I mean essentially this is what um
43:32 - the other one's doing so allow say
43:35 - authorize okay and so we're doing
43:38 - g-cloud it was trying to bring them over
43:39 - and stuff like that but if it works this
43:41 - way that I don't care FreeBSD is kind of
43:44 - a weird image so I don't really expect
43:45 - uh the g-cloud to just work like first
43:49 - try but if this works I'll be happy all
43:52 - right so it
43:53 - says VM has a firewall rule that allows
43:56 - TCP Ingress from I uh this range so
43:59 - maybe that's our problem I'm going to
44:01 - bring this on over here I I thought that
44:02 - everything was fine but I'm the worst at
44:05 - firewall rules with gcp so I just feel
44:07 - like it's my fault
44:09 - here and so I'm going to go over to
44:11 - firewall
44:12 - here and if we go down
44:16 - below it doesn't specify specifically an
44:18 - IP
44:20 - range this is VPC firewall
44:24 - rules the like groups
44:27 - okay uh all right so what I'm going to
44:29 - do is I'm going to create a new firewall
44:32 - rule not a policy but a rule we'll just
44:35 - say uh SSH
44:38 - for
44:40 - um uh
44:43 - FreeBSD and then we'll go down
44:46 - below network is fine party that might
44:49 - matter Ingress that's what we care about
44:51 - specify specific
44:54 - targets um I mean we can just say all
44:56 - instances in an account and then that
44:58 - would be
45:01 - sufficient I hate Target tags because I
45:03 - never know what to do for Target
45:05 - tags I'll just say all all instances in
45:08 - the network ipv4 range um which is what
45:11 - it has and then what I'll do is supply
45:13 - from this little box here I'm going to
45:15 - supply that
45:17 - value because that's what it's saying to
45:19 - do is to do this I'm surprised it's not
45:22 - like just uh 24 which would be the the
45:24 - very or 32 or whatever the very specific
45:27 - value is um to specify uh just that
45:30 - single one but this is clearly a larger
45:32 - range um I don't think that matters the
45:35 - filters don't matter and then we're
45:37 - going to say allow on
45:39 - Port
45:41 - 22 okay so that's what we'll do we'll
45:43 - create that rule and hopefully that's
45:46 - our
45:50 - problem all right so I'm going to just
45:52 - wait a couple minutes I don't feel like
45:53 - it's instantaneous I'm going to just hit
45:55 - this retry button and see if that fixes
45:56 - our issue
45:58 - okay all right so I think I've waited
46:00 - long enough I'm going to go ahead and
46:01 - try this again hit retry and see if that
46:04 - was our
46:06 - issue and the priority matters as well
46:08 - but I think um because it seems like it
46:11 - orders it based on this so I'm thinking
46:12 - that this is going to take a a better
46:14 - priority here and I've lost that screen
46:16 - just let me give me a second to get it
46:17 - back here it is
46:19 - here we'll see
46:22 - authoriz and hopefully that was our
46:24 - issue ah there we go okay so we probably
46:26 - could get in with g CL now if we went
46:27 - back and tried that um I kind of prefer
46:30 - that as our means to get in I'm going to
46:31 - go back over to here and open up the
46:33 - shell and if we go back over to cute
46:38 - engine uh virtual
46:40 - machines I wonder if it's still here if
46:42 - I hit up it is okay great so I'm going
46:44 - to just hit that and see if I can get in
46:45 - this way and so now I'm in the uh the
46:47 - virtual or BSD so we're in BSD here type
46:51 - in who am I I just like to do that every
46:52 - time I'm in a system to know I am so I'm
46:54 - Andrew name me it name me oh no am I
46:56 - even in here let me take a look here
46:58 - welcome to
47:01 - FreeBSD am I in FreeBSD yeah I am okay
47:05 - so created a user for me called Andrew
47:07 - just I'm just not trying to get mixed up
47:08 - with the cloud shell environment and so
47:10 - the whole point that we wanted to do was
47:12 - to use ex right or X so we type in
47:16 - ex we're now an ex so let's use it as if
47:18 - we did before so what I'm going to do is
47:20 - type in
47:22 - a oh hold on right so it has a coal in
47:25 - there so I think right now in command
47:27 - line mode and the a is always there so
47:29 - it's kind of telling us that we're in
47:30 - command line mode which is a better
47:31 - indicator of what's going on so a I'll
47:34 - say this is line one this is line two
47:38 - this is line three you get the idea and
47:41 - we'll press in Period okay and so now
47:44 - the question is um well hold on let's
47:47 - just try to print something so say uh
47:50 - one comma dollar sign P does that still
47:53 - work it does and let's try out this VI
47:55 - mode and so now in VI mode and this
47:58 - looks like um VI all right so if you've
48:02 - ever used this it might be really
48:04 - confusing um but before you touch into
48:05 - the keyboard let me just tell you that
48:07 - you can get back to commands by typing
48:09 - colon so if I type in Colon here notes
48:11 - down below it appears down here which is
48:14 - like a like a small command line and I
48:16 - can hit
48:17 - Q all right and so it's saying we've
48:20 - modify the file since last time so I'm
48:22 - do colon Q exclamation mark to get out
48:24 - of it completely ex exits me out so I'm
48:27 - going to go ahead and try this again
48:28 - type in E
48:29 - ex I'm going to see if there's anything
48:31 - there there shouldn't be anything there
48:32 - because we uh didn't save the file
48:37 - right this is the second address smaller
48:39 - than the first because there's no data
48:40 - in there so we'll hit a this is a line
48:45 - this is a second
48:47 - line we'll type in period we'll type in
48:50 - VI and so now we're in V mode so I'll
48:52 - tell you a few commands that we can do
48:54 - so like if we hit I think it's K we'll
48:56 - go up J will go down K will go up J will
48:59 - go down I will go to insert mode even
49:02 - though nothing changed we are now in
49:04 - insert mode and if I type in hello nois
49:07 - typing space hit escape to go back to
49:09 - normal
49:11 - mode escape and I'm going to type in
49:14 - Colon look down below see the colon Q
49:17 - exclamation mark all right so hopefully
49:20 - that is clear um but yeah that adds the
49:23 - vi the vi mode and so obviously people
49:26 - would definitely prefer to just start in
49:28 - VI mode and so this is the like one step
49:32 - to getting to VI okay um so I'm
49:35 - satisfied with this what I want to do is
49:36 - go ahead and shut down this instance I'm
49:37 - going to go here to VMS I'm going to go
49:39 - ahead and delete it we'll say
49:42 - delete and that is good and so we'll
49:44 - just let that go ahead and
49:46 - delete and I'll see you in the next one
49:48 - okay
49:49 - [Music]
49:52 - ciao hey this is Andrew Brown and we are
49:55 - taking a look at VI so VI is a text
49:57 - editor built for the Unix operating
49:58 - system and when BSD 2.0 was released so
50:02 - we talked about BSD 1.1 shipping with ex
50:04 - or X um when it came about to version
50:07 - 2.0 X was renamed to VI after the
50:10 - command uh that changes it to visual
50:13 - mode that's what v stands for uh there
50:15 - was no longer a visual mode as this was
50:18 - now just the default or normal mode
50:20 - because why would you want to be in a
50:22 - line oriented way when everybody has
50:24 - monitors now um and one thing I want to
50:27 - point out um uh that's important about
50:30 - VI is understanding what the keyboards
50:32 - looked at the time so at the time the
50:35 - common layout was the ADM 3A so this is
50:37 - an ADM 3A terminal with a keyboard on it
50:40 - but if there was even other keyboards
50:42 - they would follow the same uh pattern
50:45 - and so the keyboard had an Escape key to
50:47 - the left of your que so if you look at
50:49 - your keyboard now if you're on an
50:50 - English keyboard your Escape is in the
50:52 - top top corner but here it's where the
50:54 - Tab Key would be and this is really
50:56 - important because the Escape key is used
50:58 - to go back to normal mode which is
51:01 - something you do a lot so it's not in
51:03 - the most convenient area now uh but at
51:06 - one point it um you know it was
51:08 - somewhere nice somewhere nicer right
51:10 - beside the q key so VI the time was not
51:13 - considered a lightweight small portable
51:15 - editor uh because it could barely fit
51:18 - into memory on a pdp1 or or PDP 7 so
51:21 - history remembers this as a very
51:23 - Advanced robust but very heavy editor
51:27 - but of course over time things became
51:30 - more efficient the program stayed the
51:32 - same size and so it's looked at a
51:34 - different way now uh remember Billy Joel
51:36 - our singer who's not a real singer he
51:39 - actually went on to uh be a co-founder
51:41 - of sun micr systems and Sun Microsystems
51:43 - is a u they produce their own computers
51:46 - and Os and well maybe not their computer
51:48 - yeah I guess they produce their
51:49 - computers themselves as well um and they
51:52 - were amazing machines that got bought
51:53 - out by um Oracle and that's why uh some
51:56 - Microsystems doesn't exist anymore but
51:59 - anyway uh let's go take a look at VI now
52:02 - [Music]
52:05 - okay hey everyone it's Andrew Brown and
52:07 - we are in Microsoft Azure I'm going all
52:09 - across the cloud here again if you do
52:11 - not utilize all the clouds use the ones
52:13 - you're familiar with or if you just
52:15 - can't really follow along just watch and
52:17 - experience it because we're not really
52:18 - at the point of using Vim I'm just
52:20 - trying to uh show you that these things
52:23 - exist and add additional uh knowledge
52:25 - here as we go go along um but anyway
52:28 - let's go ahead and launch a new virtual
52:29 - machine so I'm in Azure I'm going type
52:32 - in virtual machine here at the
52:34 - top and basically Vis on everything so
52:36 - we'll go ahead and create a new virtual
52:38 - machine
52:39 - here we'll give it a moment here
52:42 - to yeah I did I did press it and I'm
52:45 - just going to go ahead and say new
52:47 - create a new Resource Group this be my
52:50 - uh VI
52:52 - group and this will just be my VI
52:57 - uh VM I don't care where it's created
53:00 - the Zone's fine that's fine I want to
53:02 - buntu so that seems good um I want this
53:05 - to be cheap not like how we did gcp but
53:10 - um if we look on the left hand side we
53:12 - can see the B1 is
53:16 - $759 we're not going to keep these up
53:17 - for long so it doesn't really matter x64
53:20 - arm anytime we can choose arm I like to
53:21 - choose arm it says the image is not
53:23 - compatible with it oh fine I'll just
53:25 - switch it back to x uh x 64 I guess it's
53:28 - because this is
53:30 - not the arm one where's the arm one so
53:34 - let's switch to arm here hold on a
53:39 - second up here
53:41 - maybe arm
53:44 - 64 oh the security type okay that's fine
53:48 - um well where's the security type right
53:51 - here standard
53:56 - okay yeah we're fine with that I don't
53:58 - need a TPM for this well I just want to
53:59 - use Arm because it's more efficient and
54:02 - we
54:06 - will can I not choose that okay I guess
54:08 - it's too complicated so we'll go back to
54:10 - TPM we'll go back to x64 we'll go back
54:13 - to uh this one we have 20 22 it doesn't
54:16 - matter we'll choose 2022 the latest that
54:18 - is out right now we have SSH public key
54:22 - or
54:23 - password um if I don't have to I'd
54:25 - rather just do a password they're not
54:27 - like the most safe but I'm going to do
54:29 - that here today so I'm going to make
54:32 - this uh we'll call it Billy Joel because
54:35 - that's the creator of of VI and the
54:38 - password is going to
54:39 - be capital T testing 1 2 3 4 5 6
54:43 - exclamation mark capital T testing 1 2 3
54:46 - 4 5 capital T testing 1 2 3 4 5 6
54:51 - exclamation mark okay so that is what we
54:54 - have it set as um um we do want estation
54:58 - there so that is good we'll go ahead and
54:59 - hit review and create and so it's Billy
55:02 - Joel is the username and the password is
55:06 - testing capital T testing 1 2 3 4 5 6 so
55:09 - let's just make sure we remember that
55:10 - we'll go down below hit create and so
55:12 - we're going to wait now uh for this to
55:15 - revision so I'll see you back here when
55:17 - this is already normally you'll have
55:18 - another step after this I'm just going
55:19 - to wait a little
55:20 - bit there we go and so we're going to
55:23 - wait for this deployment to finish okay
55:25 - all right so let's go Ahad ahead and go
55:27 - to that resource now it says it's
55:28 - deployment is complete so I'm assuming
55:30 - that it's probably in a running state it
55:31 - says it's running and so what I want to
55:33 - do is establish a connection we can go
55:35 - here can we do it right in the
55:39 - browser using the Azure
55:41 - [Music]
55:45 - CLI local machine local machine I don't
55:47 - like that let's open up the uh shell
55:50 - here and at least it shows us the IP
55:53 - address here I don't want to start in po
55:55 - shell mode Let's switch over to batch I
55:58 - guess we have to wait for it to
56:01 - launch whenever the terminal decides to
56:08 - start give it a moment to get started
56:11 - here there we go and I'm going to switch
56:13 - over
56:15 - to
56:19 - bash well hold on I wonder if it gives
56:21 - us the command here so if I select this
56:23 - would it just show us the Azure SEI
56:24 - command
56:41 - uh yeah it's not showing us uh well
56:44 - let's see if it works here I'm I'm just
56:45 - going to say in power shell oh I think
56:46 - we can use power shell okay we'll say
56:48 - SSH BM hyen hyen IP probably just copy
56:52 - the command here we're getting a lot
56:54 - better of just giving us the stuff that
56:56 - we want want I'm going to go just paste
56:57 - this in here it'll hit enter see if that
57:00 - works it will say
57:04 - yes and it thinks us we
57:07 - Andrew which is not what the user is but
57:09 - the password is capital T testing 1 2 3
57:11 - 4 56 exclamation mark and so that's
57:14 - probably not going to
57:15 - work exactly so I wonder with uh as SSH
57:22 - change username
57:26 - how do we specify the
57:33 - username
57:35 - name that's the name of the
57:40 - machine okay we'll try that so we'll hit
57:42 - up again and I'll just say uh local name
57:46 - or local user this will be Billy
57:50 - Joel and we'll try this again capital T
57:54 - testing 1 2 3 3 4 5 six exclamation
57:59 - mark and now we're in okay great so now
58:02 - that we're in here um let's just take a
58:04 - look around so I'm just going to go just
58:07 - to make this whoops this thing is a
58:09 - finicky make this bigger here and I'm
58:12 - going to type in LS
58:14 - PWD okay
58:17 - so uh if we type in V now we will now be
58:20 - entered into VI notice it's it's
58:23 - actually not launching VI it's launching
58:25 - Vim because I can see that says uh very
58:28 - improved and so what's happening here is
58:30 - that um some or most
58:35 - of uh
58:36 - most unixes out there or linuxes out
58:39 - there will actually install them and
58:41 - then link to the latest version of VI
58:43 - because it's a better version so this is
58:45 - not really a good example to see VI
58:47 - because we'll have all the improvements
58:49 - here so I'm going to do is close this
58:50 - out but that does show you that uh that
58:53 - case where that will happen and so I'm
58:55 - going to go back over to our virtual
58:56 - machines and maybe there's something
58:58 - else that we can launch launch up that
59:00 - does that actually launches up VI cuz
59:03 - right away I knew that it wasn't VI when
59:04 - it said very improved uh Vim because it
59:07 - won't say that when you you launch it up
59:09 - so I'm going to go ahead here and just
59:11 - um delete this
59:13 - resource say
59:15 - delete actually that's not going to be
59:17 - good enough we'll actually click into
59:18 - the virtual machine and I want to go to
59:22 - its Resource Group here and then I want
59:25 - to
59:27 - delete the resource Group because that
59:28 - will tear down all the resources in the
59:30 - resource
59:32 - Group and enter the name of the resource
59:35 - Group which is here
59:38 - delete and I'm going to try this again
59:40 - so we we'll launch it with another one
59:42 - we might still end up with the same
59:43 - problem but at least we're trying to see
59:45 - if we can get something else so we're
59:46 - going to go ahead and create a new
59:47 - virtual machine I'm going to make a new
59:49 - resource say my V2
59:53 - group and instead of launching a bun to
59:55 - we'll choose something something else so
59:57 - I'm trying to think of something that
59:59 - would not have that so we'll go to se
60:02 - all images
60:08 - here and here's a question is like does
60:13 - Debian ship with VI or
60:20 - Vim okay which OS LX
60:24 - OS ships with v instead of
60:31 - Vim
60:33 - Arch okay can we use
60:36 - Arch never even used arch before what is
60:41 - Arch Arch Linux is that like a micro one
60:45 - oh you know what I actually have used
60:46 - this I think this is a lightweight one
60:48 - okay great so what we'll do is we'll say
60:50 - add uh AR Arch Linux and we'll go ahead
60:53 - and say
60:56 - we'll choose gen one I don't really care
60:57 - if it's gen one or gen two if it's gen
60:59 - one we just have to choose standard
61:01 - there difference is I think gen two have
61:03 - uh TPM so they can't be tampered with
61:06 - we'll say
61:07 - Arch uh Vim or VI example I don't care
61:12 - what it's called we'll go down below
61:14 - here it's
61:15 - x86 uh we want to choose the cheapest
61:18 - one which I don't think is that one I
61:20 - think it is oh it is b1s yeah b1s are
61:23 - the
61:24 - cheapest still seems is really expensive
61:26 - I feel like there's a cheaper one than
61:29 - that whoever tells me the prices here
61:33 - there was I thought there was like one
61:34 - for $7 let's just sort it by
61:38 - cost this one's the cheapest all right
61:40 - we'll do that
61:42 - one and I'll do password again this will
61:47 - be again Billy Joel the
61:54 - creator of
61:58 - VI we'll hit review
62:05 - create
62:07 - and we'll go ahead and create this and
62:10 - we'll just wait again and try to
62:12 - establish that connection okay so you
62:14 - know the routine here we'll be back here
62:16 - in just a moment all right so it says
62:17 - that's Deployable go to that
62:19 - resource and uh it says it's not ready
62:23 - yet so maybe we should just give it a
62:25 - little bit of time
62:26 - sometimes there's a bit of delay so I'm
62:27 - just going to wait a couple minutes
62:29 - before we do anything we'll give this a
62:32 - refresh it's not ready yet even though
62:34 - it says it's running so I'm again I'm
62:35 - just going to wait a little bit a few
62:37 - minutes I'll be back in just a second
62:39 - all right I'm back I had lunch so this
62:40 - should definitely be ready now and it
62:42 - still says machine agent status is not
62:44 - ready troubleshoot the issue so maybe
62:47 - because it's
62:48 - Arch it doesn't tell us the usual thing
62:51 - here so I'm just going to ignore that
62:53 - status there go ahead and go to connect
62:55 - we're going to go to the Azure CLI here
62:57 - I'm going to also open up um uh the
63:00 - shell here and we'll do what I did
63:02 - before where we're looking for the
63:05 - information for the Azure CLI to
63:09 - connect
63:14 - um where to connect connect from your
63:17 - local
63:19 - machine I'm not sure what this wants
63:21 - here okay we'll still click that I
63:24 - guess entra ID login
63:27 - extension did I want all that stuff I
63:29 - don't think I really wanted all that
63:30 - we'll just go back to this here this is
63:32 - really what I want maybe don't press
63:34 - that button I don't think it's going to
63:35 - hurt anything but I pressed it too late
63:38 - so what we'll do is go ahead and type in
63:40 - AZ actually I'll just copy the line it's
63:42 - a bit easier that way and then we'll let
63:44 - it paste in super slowly we'll go ahead
63:46 - and hit
63:47 - enter and uh that's not going to work
63:50 - because we need to go ahead and say
63:52 - local name or local user
63:56 - Billy
63:58 - Joel enter and we'll say yes to accept
64:02 - the fingerprint it will be capital T
64:04 - testing 1 2 3 4 5 6 exclamation mark and
64:08 - we are now in so there we go we'll just
64:10 - expand this so I'll just type in clear
64:12 - to clear this out let's go ahead and
64:13 - type in VI and it's saying the vi
64:17 - command is not found so Arch is supposed
64:19 - to have
64:20 - VI okay why is it not here we'll say so
64:24 - we'll say where is
64:26 - VI where is
64:28 - vim doesn't have it but that's totally
64:31 - fine we can install Arch install
64:33 - VI how do we
64:36 - install
64:37 - VI on this so I'm looking the for the
64:43 - installation
64:46 - instructions install the vi package okay
64:48 - but okay what's the package manager for
64:52 - Arch I don't know what it's called
64:56 - Pac-Man is that is that the name of the
64:58 - uh one
64:59 - okay I'll I guess I'll try this we'll
65:01 - say
65:04 - Pac-Man install single package say
65:06 - hyphen s this is off screen so you don't
65:07 - see what I'm doing we'll go ahead and
65:09 - hit V unless you are the root user
65:11 - little type in pseudo will that
65:16 - help we'll say yes but look how small it
65:19 - is it's like super super small hopefully
65:22 - it's installing Vim or VI and not Vim
65:24 - we'll just say
65:26 - uh invalid or corrupted sure we'll
65:29 - delete it I'm not sure what's going on
65:30 - here no package no errors occurred no
65:33 - package upgrade let's try this again
65:36 - we'll say Yes
65:39 - again
65:43 - um no I'm not going to delete it I just
65:45 - want to install it what is going on here
65:48 - so I'm going to copy this ER
65:53 - here why can't I install so
65:59 - we'll try to update the keys again I'm
66:01 - not sure how this works but I'll just
66:03 - try it till we get something to
66:15 - works not sure what that
66:21 - does ignore that link does not apply
66:23 - anything uh thanks for answering says
66:31 - this we need to repport the arch
66:36 - Keys why should I have to redo
66:39 - anything is this thing
66:45 - done doesn't seem to be doing anything
66:47 - so I'm going to do control C here let's
66:49 - try this again we'll try uh buy we'll
66:52 - try to install it again yes
66:55 - keep saying it's corrupted
66:59 - yeah how do you get this installed give
67:01 - me a second okay all right someone's
67:04 - solution here is like I did again we're
67:06 - going blind here Pac-Man key init Pacman
67:08 - key populate so we'll try those two and
67:10 - see what happens we'll say Pac-Man which
67:12 - is the package manager somebody's trying
67:14 - to be clever here with their silly named
67:16 - package manager we'll go ahead andit
67:18 - enter needs to be root sure we'll do
67:20 - root pseudo Pac-Man key andit and then
67:24 - we'll try populate again this is not the
67:27 - one I ever use but sometimes you got to
67:28 - just get things
67:30 - working and now let's go ahead and try
67:32 - this
67:33 - again I'll say
67:38 - yes uh yeah still doesn't
67:44 - work and people are suggesting that
67:46 - those two keys have to be ran if we want
67:48 - to populate anything
67:50 - so yeah I'm not sure what else to do
67:52 - here
67:57 - there's another link here that's like do
67:59 - this
68:03 - stuff okay so let's try that then so it
68:07 - says
68:09 - Pac-Man hyphen s y hyphen needed
68:13 - Arch Arch
68:16 - Linux key
68:19 - ring at sign at sign Pacman hyphen
68:23 - Su again if you don't want to do this
68:25 - you could just watch but I like I want
68:27 - to get it to work because I want to get
68:29 - to the original
68:31 - VI
68:33 - and we'll say yes so now I think what
68:36 - it's doing I guess it's getting the
68:37 - latest key ring something about key
68:38 - Rings or something like that I don't
68:42 - know I usually don't like using um a
68:46 - lightweight uh lightweight um L
68:51 - distributions they just always just seem
68:52 - to be quite the headache they never seem
68:55 - to work exactly how I'd like them to
68:58 - work but anyway I'll just wait for this
69:00 - to
69:01 - finish that was pretty quick okay great
69:04 - so now you cannot perform this operation
69:06 - unless you're a root maybe what it means
69:09 - is that I have to type pseudo here as
69:11 - well so I think this is the issue here
69:14 - we'll go ahead and do this one
69:18 - second uh I don't
69:22 - know I don't care
69:27 - one we let it go with the
69:29 - default yes just install all the other
69:36 - stuff yeah
69:39 - other
69:42 - lightweight lightweight uh Linux
69:48 - distros just try to
69:53 - think if there's any other ones that I
69:55 - know about no I think Arch is the one I
69:57 - guess I just kind of forgot I forgot it
69:59 - but every time I think that I've used
70:00 - Arch it's always been the biggest
70:02 - headache and I've never liked it but if
70:04 - we can just show off VI that'll be great
70:06 - so I'll just wait for this to finish and
70:07 - again just watch I'm just going to show
70:09 - you what VI looks like so we can
70:10 - distinguish it from Vim we're not we're
70:12 - not here to really get into the commands
70:14 - yet okay all right so I took a little
70:16 - bit of time but it's now uh complete so
70:20 - what I want to do here is I guess try to
70:22 - see if I can install violet see if we
70:25 - can install it and so we'll say
70:29 - yes and there we installed it finally
70:31 - there we go okay having some patience is
70:33 - a good thing to have let's go ahead and
70:35 - type in VI and notice it does not say
70:37 - improved Vim it literally looks like ex
70:41 - uh like we saw before so if I hit I to
70:43 - go into insert mode and by the way I was
70:45 - trying to find a piece of software that
70:46 - would show the commands I was typing I
70:48 - could not find one to say my life but
70:50 - anyway so I'll type in testing and now
70:52 - I'm still in insert mod and hit Escape
70:55 - get out of it and now notice my cursor
70:57 - is hovering over the character that's a
70:59 - key difference from ex where you
71:01 - couldn't really tell where the cursor
71:02 - was if I hit H I go left if I hit L I go
71:07 - right H I go left L I go right let's do
71:12 - uh shift uh or I mean just make a colon
71:15 - down below here so we can get out of
71:17 - here I'm going to type in Q xation Mark
71:20 - that's all I wanted to show you okay so
71:24 - but for the most part it seems like
71:25 - we're being forced to use Vim but not
71:26 - always sometimes you're just
71:28 - using uh sometimes you're just using VI
71:32 - right okay um so just be aware of that
71:35 - because the feature set's going to be
71:36 - different so let's go ahead and uh shut
71:40 - down this so the the easiest way to get
71:42 - rid of stuff in in Azure is to go to the
71:44 - resource groups go over the resource
71:46 - Group here and I'll delete the resource
71:47 - Group because when you launch a a an
71:49 - instance it actually Provisions a bunch
71:51 - of stuff and the only way to get rid of
71:53 - all that stuff is to do this if you
71:54 - don't do that it might not tear down
71:56 - this other stuff so we'll go ahead and
71:58 - delete that that is deleting I will see
72:00 - you in the next one okay
72:02 - [Music]
72:05 - ciao all right let's take a look here at
72:08 - Vim which stands for Vi improved it was
72:11 - written by Bram mullinar in 1991 and
72:14 - it's a clone ofi so that means it
72:16 - doesn't use the original source code um
72:18 - but it greatly improves on the
72:20 - functionality of VI improved features
72:23 - are things like syntax highlighting
72:25 - plug-in support multi-level undos
72:28 - multiple new modes with a new Mode
72:30 - called visual mode which has nothing to
72:31 - do with x's visual mode it's just using
72:34 - the same name enhance search and replace
72:37 - split windows and tabs command line
72:39 - history Auto completion and more so
72:41 - there's a lot of stuff going on here
72:44 - with the increase of RAM and storage RM
72:46 - is now considered very small and
72:48 - portable and can be easily installed
72:49 - anywhere uh c and a terminal can be
72:52 - found I believe that it's still written
72:53 - in C uh many Unix distributions may ship
72:56 - with vim and even Alias VI over to Vim
72:59 - as we saw in our last lab uh so you
73:02 - might be using Vim instead so just pay
73:03 - attention there because that will affect
73:05 - your feature set that you can use V
73:07 - might also be set as the default editor
73:09 - in the OS um and sometimes you're prompt
73:11 - prompted to that and that's what throws
73:12 - people off and that's where that Meme
73:14 - comes from with the how to exit Vim Vim
73:17 - has a built-in tutorial for beginners
73:18 - called Vim tutor which is usually
73:20 - installed along Vim but is separate
73:22 - executable and can be run with a a shell
73:26 - so that's something that is interesting
73:28 - if you ever need help in Vim you can use
73:30 - the help command all right so yeah we're
73:34 - now going to start learning about Vim
73:36 - [Music]
73:40 - okay all right so in this video what I
73:42 - want to do is show you um how you would
73:45 - how you could use Vim so we're not going
73:48 - to focus on installation right now I
73:49 - just want to show you the the Vim Tor
73:51 - and the help command that's all I want
73:53 - to do so I already have have WSL
73:56 - installed on Windows here if you're on a
73:57 - Mac you don't have to do this you just
73:58 - open up your terminal and you can
74:01 - install uh Vim probably uh using Brew
74:04 - tools but anyway I just want to show you
74:06 - I'm just going to close this out here I
74:08 - just want to show you what it looks like
74:09 - we have Vim so I don't know if I have
74:10 - Vim installed here I apparently I do
74:12 - already and if I want to I could type in
74:14 - vimtutor okay you're just watching and
74:18 - it's going I'm going to go ahead and hit
74:21 - enter and we are now in vimtutor so
74:23 - vimtutor is supposed to be a tutorial
74:25 - that you can go through I don't
74:26 - personally like it because you have to
74:27 - do a lot of reading but the idea is that
74:29 - you read through this and it tells you
74:31 - how it works right so it's telling you
74:32 - the the movement Keys is hjkl so I can
74:34 - do J to go down L to go to the left or
74:38 - right H to go there K to go back up and
74:41 - the idea is that you just keep reading
74:43 - through it and you'll learn Vim um but
74:46 - I'm going to go ahead and exit out this
74:47 - and do uh uh Co and Q and what I want to
74:51 - do is just open up Vim I'm just going to
74:53 - make a I'm just going to open up with no
74:55 - file here and I just want to do colon
74:57 - help and just show you that it opens up
74:59 - help and then the thing is in order to
75:01 - move around the help file you have to
75:03 - know Vim command so you need to know the
75:05 - move Keys again
75:06 - here right and so the idea here is
75:09 - that you
75:11 - can read about how Vim works all right
75:15 - it gets into detail and actually for the
75:17 - content of this course I was going
75:19 - through this and and referencing the
75:21 - docs here so this was very useful for me
75:23 - I do col and Q and exit out of that okay
75:26 - so the way I want to use Vim with you is
75:28 - that
75:29 - um I want to get it installed using a
75:32 - visual editor and so I'm just going to
75:34 - wait till we get to that slide and then
75:36 - we'll talk about it okay or well I mean
75:38 - we'll do it for real all right
75:40 - [Music]
75:45 - ciao hey this is Andre Brown and we are
75:47 - taking a look at Vim version so it's
75:49 - important to understand that uh these
75:51 - features have been added over time so
75:53 - when I listed all those features
75:54 - previously himm they weren't there on
75:56 - day one okay so uh version one came out
75:59 - 1991 and it had those many improved
76:02 - features uh what they were I do not know
76:04 - but it's just apparently an improvement
76:06 - over the original one then version two
76:09 - which came a year later added
76:10 - multi-level undo and the ability to edit
76:12 - file simultaneously it had better
76:14 - support for different terminal types I'm
76:16 - not sure why there's an A on the end
76:17 - there I think that's just a mistake on
76:19 - my part so just ignore that this is not
76:22 - here then uh another year later it
76:25 - supported horizontal split windows which
76:27 - I love having that ability then it
76:29 - introduced gvm allowing Windows users to
76:32 - use um Vim okay and I'm actually on a
76:34 - Windows machine I I use a Mac generally
76:36 - but uh it's not easy to hook it up so um
76:39 - that's why I'm not recording from one
76:41 - here so I'll be showing G Vim um as our
76:44 - way of using Vim on Windows then we have
76:48 - Vim 4.0 this had improved syntax
76:50 - highlighting Advanced support for
76:51 - different file types and programming
76:53 - languages we have support uh using Vim
76:56 - script and enhance enhancements to gvm
77:00 - for version 6.0 we're now 2001 so we're
77:04 - past Y2K here it added folding vertical
77:07 - splitting improve syntax highlighting
77:09 - and better intern internationalization
77:11 - then we have Vim 7.0 which came out in
77:13 - 2006 this says spellchecking multi-level
77:15 - undo branches tab Pages improve
77:17 - performance with larger files we have
77:19 - Vim 8 which included a new package
77:22 - system we're going to talk about neovim
77:24 - and why
77:25 - maybe Vim 8.0 introduced a new packaging
77:27 - system and it has async processing and
77:30 - then uh Vim 9.0 again maybe because of
77:33 - neovim uh created Vim 9 script which is
77:37 - a more improved uh syntax over Vim
77:39 - script improved performance enhance UI
77:42 - um so there you
77:43 - [Music]
77:47 - go all right so let's take a look here
77:50 - and um uh look at the Vim version that's
77:53 - all I want to do here so I think we
77:54 - typed this we might see the version does
77:56 - not tell me there we's do hyphen v um
77:59 - maybe it just means hyphen V there oh
78:01 - actually opens it up but right away it
78:03 - tells you the version is 8.1 you can see
78:05 - Bram is the one that wrote it but I
78:08 - prefer to do this here so that it
78:10 - doesn't completely open and you can see
78:12 - it's using 8.1 so I'm not even using the
78:14 - latest one but for the most part um most
78:18 - Vim versions that are installed on
78:20 - servers are good enough if you're not
78:22 - installing an extension so if you're
78:23 - just doing devops you're going into a
78:26 - Linux environment you you'll never care
78:28 - about what the version is but uh when it
78:29 - comes to actual development you'll care
78:31 - more about the specific version
78:34 - [Music]
78:37 - okay all right let's first take a look
78:39 - at Mac Vim just because um I'm not
78:41 - showing how to use Mac Vim in this video
78:43 - but it's pretty straightforward you go
78:44 - here you download it you install it um
78:47 - it'll also have a uh binaries that
78:49 - you'll have to copy to your specific
78:53 - um uh directory so that you can either
78:55 - type in MVM or if you want to just
78:59 - double click the application and launch
79:00 - it so this one is pretty
79:02 - straightforward while doing G Vim here
79:04 - today so we'll go over to G vim and we
79:07 - have um different versions so we can see
79:10 - yeah it's it's telling you to go to macf
79:12 - here and for un Unix it says there's
79:16 - something going on here I'm not exactly
79:17 - sure what but we're going to use GM all
79:20 - right um so we'll go ahead and install
79:25 - GM I'm just looking for what the
79:27 - difference why there's this many I'm
79:29 - going to go with the installer because I
79:30 - find installers are easier on Windows
79:32 - and we'll go ahead and give that a go
79:38 - okay and I'm going to go ahead and open
79:40 - that up and I'm just double clicking the
79:43 - installation I'm just doing that off
79:45 - screen and so my question is like I'm
79:47 - not installing uh Linux on this system I
79:50 - have WSL which we don't cover in this uh
79:52 - video but um I'm going to go ahead and
79:54 - install it and so say let's install uh
79:56 - Vim 9.1 which sounds great to me that's
79:58 - the latest version right now we'll go
80:00 - next and we have a bunch of stuff here
80:02 - so we have create uh create bat files
80:05 - I'm not sure what that is vim uh bat
80:08 - files for Vim variants in Windows
80:09 - directory for commandline use I don't
80:12 - think I care about that everything else
80:14 - looks
80:16 - fine uh console version of Vim okay so
80:19 - maybe we can use it in command prompt
80:21 - that sounds good we'll hit next so here
80:23 - it says V Vim Behavior Vim with
80:25 - enhancements so we have VI compatible
80:27 - Vim original Vim with some enhancements
80:30 - or Vim with enhancements all of them so
80:32 - it seems like what it's doing is
80:34 - modifying the vimrc file so we don't
80:36 - even have to configure that
80:38 - maybe remap a few keys for
80:41 - Windows contrl v contrl c contrl a
80:44 - contrl
80:46 - srlf i don't know if I want to do that
80:48 - so I'll just leave it alone for
80:50 - now we have behavior of right and left
80:53 - windows
80:56 - uh I'll leave it alone again we'll go
80:58 - ahead and hit next we'll install it and
81:01 - so that should install it okay give it a
81:04 - moment all right so show read me after
81:07 - installation's finished uh I don't
81:09 - really care about that and so now it
81:11 - should be installed so supposedly we can
81:14 - launch it from the command line which
81:16 - would be interesting but I just want to
81:18 - open up uh the program so somewhere on
81:21 - my computer if I just type in the start
81:22 - key if we go there right actually that's
81:25 - the first thing I see I'll just show you
81:27 - here look we will
81:29 - see uh Vim right so there it is there's
81:32 - the G Vim example I'm going to drag this
81:34 - off the screen but there was two there
81:35 - was vim and G Vim I'm going to click on
81:37 - G Vim because I'm going to assume Vim is
81:39 - just in their terminal and G Vim is the
81:40 - other one and here we go so we actually
81:42 - have Vim a little bit ugly but that's
81:45 - okay I dragged it out and it already
81:47 - mucked up the settings but the nice
81:49 - thing is that we now have these options
81:51 - so we can work with
81:52 - it and yes I realized it's ugly but
81:55 - we'll figure that out as we go here uh
81:57 - if we go actually here maybe we just
81:59 - change the color scheme we'll just say
82:00 - desert and that's probably editing the
82:02 - vimrc file underneath or the gvm g g
82:05 - vimrc file which we'll cover in a
82:06 - separate video but if I think we could
82:08 - go here we might be able to look at
82:09 - those settings somewhere here so global
82:14 - settings I'm not exactly sure where
82:16 - those files
82:18 - are but anyway the point is we can now
82:23 - work with with Vim so yeah there you go
82:27 - I just wanted to get this installed and
82:28 - ready and then in the other videos we'll
82:31 - uh look at what we can do with it okay
82:34 - [Music]
82:37 - ciao hey this is angre brown we're
82:39 - taking a look at Vim script um I don't
82:42 - know what Vim 9 looks like but I am very
82:44 - familiar with Vim script it's not very
82:46 - important that we learn that much about
82:48 - Vim script because it gets kind of
82:49 - complicated but we will have to kind of
82:51 - get some exposure when we change our
82:53 - configuration files but vimscript is a
82:55 - scripting language that is used to write
82:56 - Vim configuration files plugins and
82:58 - inputs in the command mode a vimscript
83:00 - is considered challenging to learn for
83:01 - beginners to understand and write which
83:04 - is why people have shied away from uh
83:06 - fully using fully configuring Vim but
83:08 - again I'm going to tell you that there
83:10 - is uh Vim script 9 which is supposedly
83:13 - nicer to use which I don't know how to
83:15 - use I just want you to know that it has
83:17 - its own language um it has functions it
83:19 - has variables it has Loops um I don't
83:22 - think it's that hard but it is not the
83:23 - nicest thing to work working
83:25 - [Music]
83:28 - okay all right let's talk about Vim
83:31 - configuration files so Vim has two
83:32 - configuration files uh on Linux they're
83:34 - stored in the home directory on Windows
83:36 - I don't know and I'm on a Windows
83:37 - machine so that's kind of problematic
83:39 - but there's two files we have the vmrc
83:41 - which is for configuring vim and the G
83:43 - vimrc I always thought it stood for
83:45 - Global but it's actually the graphical
83:46 - version of Vim uh but it's always worked
83:49 - for me because I use macvim so I guess
83:51 - that's just lucky and here's an example
83:53 - of the vmrc file and so I'm just going
83:54 - to get my pen tool out here but notice
83:56 - that we are setting um the color scheme
83:59 - here we in GM we we directly just select
84:02 - it and changed it but the idea is that
84:03 - you normally would change the underlying
84:05 - file if you're on Mac Vim I think you
84:07 - have to modify the VR VR uh VR uh Vim RC
84:11 - file which is in your home directory
84:13 - notice we are setting uh configurations
84:16 - here so I don't I don't think that's
84:18 - variables this CU let is a variable so
84:19 - set is a function and we're saying set
84:22 - this stuff of um of Vim here
84:25 - and uh we have some remappings of keys
84:28 - and other things like that okay um and
84:32 - so then this is a a g Vim example which
84:34 - would work for Mac Vim as well and we
84:37 - are setting things but these are
84:38 - specific to the guey right um so yeah
84:41 - hopefully that is clear um and
84:44 - configuration files are written in Vim
84:45 - script so mostly we're just calling
84:47 - functions here so it doesn't look like
84:49 - functions and stuff like that because
84:50 - we're just calling functions as opposed
84:52 - to writing functions and Loops but it is
84:55 - [Music]
84:58 - script all right so I'm back in Visual
85:00 - Studio code um where I actually have WSL
85:03 - install which is a pain to install on
85:05 - Windows which I'm not covering in this
85:07 - uh in this course whatsoever if you're
85:08 - wondering what this project is this is
85:09 - actually how I stitched together um
85:11 - large courses so this one here was the
85:13 - um solution architect associate which
85:15 - was a giant 50 hour course but I'm just
85:17 - going to drag this up here so we have a
85:18 - little bit of room and um what I want to
85:20 - do is just configure the the um uh the
85:24 - vimrc file right so that vimrc file
85:26 - would be in your home directory and this
85:28 - is applicable to Linux and um Mac so if
85:33 - you're a Mac open up your terminal and
85:34 - you will find the file in the same place
85:35 - so I don't need to se in here but I'm
85:38 - just going to say cat and I'm going to
85:39 - do um the Tilda which is above your tab
85:42 - key slash.
85:45 - vmrc and this file might not even exist
85:48 - but this is where you would configure
85:51 - Vim so how would we set this Vim file
85:53 - Well we'd use them to configure our
85:56 - configuration file which is kind of
85:57 - funny so what I'm going to do here is
85:59 - see if we can change the color scheme I
86:00 - don't know if this command color scheme
86:02 - will work I thought it was a different
86:03 - command but I keep seeing that so I'm
86:05 - just curious if it will work uh so what
86:07 - we'll do is type in
86:09 - Vim uh the Tilda for.
86:14 - vimrc you're going have to listen very
86:16 - carefully before I hit enter here
86:18 - because it's very easy to get stuck in
86:20 - Vim so we'll go ahead and hit enter and
86:22 - so we're in here and so right now
86:25 - we are
86:26 - just in normal mode so what I want to do
86:30 - is enter
86:31 - into insert mode so I hit I no step down
86:35 - below it says insert okay don't touch
86:38 - your keyboard because it'll mess things
86:40 - up so now we just type like normally so
86:41 - we're going to type in
86:43 - color
86:45 - scheme
86:47 - desert and that's all I want to do so
86:49 - I'm going to hit
86:50 - Escape we're now back out out now into
86:54 - normal noral mode I'm going to do colon
86:56 - to bring in a
86:57 - command write and then quit okay and so
87:01 - now what I want to do is open that file
87:02 - again and I want to see if any of my my
87:04 - stuff has changed and notice that the
87:06 - color this thing is a different color so
87:09 - that's telling me that this is probably
87:13 - working so we've just set a thing in our
87:15 - file here so I'm do colon WQ so now
87:18 - where is this in GM I have no idea but
87:21 - like on on a Mac if you want to change
87:24 - it you just open up
87:25 - GM okay and you could probably even
87:28 - write if you copied in the right place
87:29 - you could do MIM to open it up if you
87:32 - copied over the binary but we'll go over
87:33 - here we'll see if we can change or
87:35 - figure out where it is in here because I
87:36 - have no
87:38 - idea
87:44 - um I don't
87:48 - know where it would be let me go find
87:51 - out okay it says that it lives
87:54 - in our home directory on Windows that's
87:57 - where it says that it is okay so let see
88:02 - if that's actually true or not so what
88:03 - I'm going to do here is I'm going to go
88:05 - find my home
88:07 - directory so that would be the C
88:12 - drive users sorry users Andrew so it's
88:17 - suggesting that it's in here
88:21 - okay um
88:25 - I mean we see Vim files
88:28 - here but there's
88:30 - no vimrc file and it's possible that
88:35 - your files are hidden but mine aren't
88:36 - hidden on my computer so I'm thinking
88:38 - that maybe it's in here and they kind of
88:40 - lied to us colors
88:44 - no how did it change colors
88:51 - then let me just going take a look here
88:57 - [Music]
89:00 - H so what they're saying here let me go
89:03 - here if I go here for a second if we
89:04 - type in h and then type in uh what was
89:08 - it vimrc I didn't even know like H is
89:11 - the help command I think they're saying
89:13 - that they'll tell us where it
89:15 - is so here it's
89:19 - saying that it's in our home
89:22 - directory and it's called vimrc or it's
89:25 - in the vimrc so if we go
89:29 - here I don't see
89:36 - it okay do I have I'm pretty sure all
89:40 - everything is being shown
89:43 - here so we go to property sharing
89:47 - security I used to know where this was
89:49 - Advance Maybe
89:54 - uh no maybe like
89:59 - view yeah so it's showing all the hidden
90:01 - files but yeah I don't see it in here
90:03 - so it's not a big deal
90:07 - um but at some point we might need to be
90:10 - able to rename this at some point so but
90:13 - maybe just give me a second okay you
90:15 - know what they're suggesting that they
90:16 - it doesn't create it for you
90:19 - automatically okay so maybe what we can
90:21 - do is just make that file and we'll just
90:24 - follow those instructions so this is
90:26 - what we have open here and this is a
90:28 - split window I didn't mean to do that so
90:30 - what I'm going to do is just close that
90:31 - out um again I'm trying to close this
90:33 - without actually uh using Vim commands
90:36 - because we haven't got to that yet but
90:37 - I'll go ahead and hit close and so this
90:39 - is a window open I'm going to go ahead
90:41 - and make a new file here right you can
90:44 - do this on macf as well and um what I'm
90:48 - going to do
90:49 - here is change the theme so I just want
90:52 - to see like what uh default
90:55 - teams for
90:57 - Vim I just want to see what the list
91:00 - list there is so apparently if we do
91:03 - colon color scheme it should just tell
91:06 - us what we have okay then we have this
91:09 - one uh space nope so it's telling us
91:13 - that's our theme right now but I wanted
91:15 - to know what possible ones there are
91:16 - yeah okay so I found a list here just on
91:19 - on stack Overflow we got blue dark blue
91:21 - all this kind of stuff here so what I
91:22 - want to see is if we if we make a file
91:24 - here we'll call this color
91:29 - scheme and if I change it to blue or
91:32 - maybe dark blue will it uh will it
91:34 - actually pick this up or will whatever
91:36 - we configure get picked up so go ahead
91:37 - and save this as and what I want to do
91:40 - is go to our I'm in Andrew here and I'm
91:43 - looking for that Vim files directory
91:45 - they said it's called Vim
91:47 - RC we'll save
91:50 - it okay so I'm not sure if this will
91:53 - take effect until the next
91:55 - one but what I'll do is I'll create a
91:57 - new file here so I'm going just say new
92:00 - file I'm going to close it I'm going to
92:02 - reopen it because a lot of times you
92:03 - have to reopen it I'm just opened up my
92:05 - start menu here off
92:07 - screen and I'm looking for
92:12 - gvm I got to type G Vim
92:16 - here and so now it's blue sometimes you
92:18 - have to restart it so clearly it is
92:20 - taking
92:21 - effect there we go and so now we have
92:24 - way of editing our vimrc file even
92:26 - though it's not in the most convenient
92:27 - place and and it didn't say anything
92:29 - about a g vimrc file so um maybe there
92:32 - is still one like G Vim are seeing the
92:34 - same directory but that's totally fine
92:37 - um but uh obviously we had this setting
92:41 - here it's just like confusing like which
92:42 - one would take priority so maybe that
92:44 - would just only be temporary so if I
92:45 - take that out and I open it again so say
92:47 - gvm what's it going to retain it's going
92:49 - to retain the blue one so whatever is in
92:50 - our VI uh um our uh VR uh our
92:55 - configuration file and that's how I
92:56 - would normally want to do it I want to
92:58 - configure it I don't want to use these
93:00 - settings here I usually don't do that
93:01 - the only advantage of having G Vim or
93:03 - Mac Vim the only thing is copy and paste
93:05 - commands like that because it's such a
93:07 - pain not having those um and that's the
93:09 - only reason also being able to just like
93:11 - easily resize the window um and then
93:14 - having the normal save command uh as
93:16 - opposed to doing right quit uh but
93:19 - that's all I wanted to show in this
93:20 - video and we'll look at more
93:22 - configurations when we need to
93:24 - [Music]
93:28 - okay all right let's talk about vim's
93:30 - plug-in manager so Vim has many
93:31 - different plugin managers to easily
93:33 - install and manage plugins we have BM
93:35 - plug pathogen bundle I can't say that I
93:40 - don't know what that says Neo bundle
93:42 - volt and more there's just tons of them
93:45 - and so here's an example of using Vim
93:47 - plug to install something so Vim has not
93:50 - conformed to a single plugin manager and
93:52 - there may be plugins that only work with
93:54 - specific plugin managers and this is
93:56 - really frustrating about Vim uh has been
93:58 - the plugin ecosystem but I think most
94:00 - people now settle on Vim plug my
94:02 - frustration is that I've been using Vim
94:03 - for such a long time so I remember using
94:06 - a bunch of these at different times um
94:09 - but since Vim 8 uh you can easily the
94:13 - plugins can be easily installed by just
94:14 - cloning them into the correct directory
94:16 - so it's not going to manage plugins for
94:18 - you but with the new package manager you
94:20 - just drop them in the right place and
94:21 - this makes things easier there's also
94:23 - something called a Vim ball and uh
94:25 - that's a spelling mistake there's
94:26 - supposed to be a space between is a
94:29 - sorry about that but it's a self-
94:31 - extracting archive format used for Vim
94:33 - to distribute and install plugins and
94:34 - scripts Vim bols have the extension of
94:36 - VBA which is confusing because VBA is
94:39 - another kind of uh Visual Basic
94:41 - something or something other kind of
94:42 - file fball is not commonly used today
94:45 - since plug-in managers are more
94:46 - efficient and easier means to install
94:47 - plugins but sometimes you'll read about
94:49 - these things or you might find a really
94:51 - old plugin you want to get to work and
94:52 - it's in a Vim ball
94:54 - um and the idea is that it's not they're
94:57 - not fun to use I so I just avoid them as
94:58 - much as I can
95:00 - [Music]
95:03 - okay I want to talk about Janice um
95:06 - which is a distribution of plugins and
95:07 - mappings for Vim G vim and macm to
95:09 - quickly configure Vim to provide a
95:11 - modern experience which is located at
95:13 - the Carl Huda repo um or GitHub user and
95:18 - so I actually use Janice still just
95:19 - because it's so darn easy to use and
95:20 - I've been using it since it first came
95:22 - out um
95:24 - and I mean you should install your own
95:26 - plugins but this thing just works really
95:28 - well the box for me it was for rubius or
95:31 - R rebound rails programmers which is
95:33 - what I am and so I still just use it
95:36 - today but it was created by yahuda cats
95:38 - and Carl uh lury I don't know how to say
95:41 - the last name because at the time Vim
95:44 - was not seen as something cool it was
95:46 - kind of a pain to
95:47 - utilize um and so at the time everybody
95:51 - was using textmate which became a very
95:53 - popular text editor it was really really
95:55 - big deal back in like 2009 but obviously
95:59 - Vim was super powerful could be used
96:01 - anywhere but people had a really hard
96:03 - time configuring packages to make an
96:06 - environment that matched these more
96:07 - powerful IDs so the idea was that they
96:10 - would just go configure it and then you
96:12 - just have a on line install and then you
96:14 - could start using Vim as serious as any
96:16 - of these other ID Ides at the time I do
96:19 - have to say that the uh Janice is
96:21 - designed around Ruby programmers cuz at
96:23 - the time that was the dominating
96:25 - framework it was a big deal for years if
96:28 - you miss that uh time period oh well but
96:32 - that's why it was optimized for that and
96:34 - that's why people today just assembl
96:36 - their own configurations that are
96:37 - inspired by Janice so sometimes you'll
96:39 - type in like uh you know modern version
96:42 - of Janice and then people will have like
96:44 - a plug-in list that does something very
96:46 - similar
96:48 - [Music]
96:51 - okay all right so what I want to do in
96:53 - this video is show you Janice now you
96:55 - can install this right on ma uh on your
96:57 - Mac if you have it um on Windows
96:58 - obviously you'd have to have WSL um I
97:01 - just want to launch up a new instance to
97:02 - show you it and the only requirement
97:04 - that it really needs is Ruby but most
97:07 - computers or like most os's come with
97:10 - Ruby installed so that should be not
97:12 - much of an issue so I'm going to just go
97:13 - ahead and launch a new instance here on
97:15 - AWS and we're going just call this a
97:17 - Janice example and here I have Amazon
97:21 - Linux I'm going to switch over to auntu
97:23 - I'm going to choose 24 which is fine I'm
97:26 - going to launch this on a T3 micro which
97:28 - is what I prefer and I don't want to
97:30 - launch this with a key pair I'm going to
97:32 - go down below here and use that um roll
97:35 - that we had earlier so we can uh log in
97:37 - with VI our
97:38 - session uh which
97:41 - is wherever it is here I'm just trying
97:43 - to find
97:45 - it
97:50 - um our profile here as such excellent so
97:54 - I'm going to launch
97:59 - this and I'm wondering if sessions
98:01 - manager is going to be enough here but I
98:03 - think that it will work um as opposed to
98:06 - using a proper terminal but we'll go
98:08 - ahead and while that's way let's go to
98:10 - GitHub and look up Janice again it still
98:13 - exists it still works because I still
98:14 - use it and we'll just type in Carl
98:17 - Huda but this kind of give you an idea
98:20 - of some plugins that you might want to
98:21 - utilize so if we go down below here it
98:24 - should tell us what plugins there
98:26 - are so this is all the new like mappings
98:29 - that they added here and so they have
98:31 - like act uh contrl P nerd commenter
98:35 - which um we'll actually manually install
98:37 - this because this one is super cool nerd
98:39 - tree which gives you like a um like a uh
98:42 - tree of files on left hand side just
98:45 - tons and tons of stuff Easy Motion which
98:47 - is really cool I used to use that all
98:48 - the time but I just stopped using it but
98:50 - it makes it really easy to find um find
98:54 - stuff lots and lots of configurations
98:57 - okay this is not even the full list I
98:59 - think if I go up to here and
99:01 - Janice and we go into vim and we go into
99:04 - tools then we can see all the ones that
99:06 - are being used so these are all the
99:07 - plugins that are that are going in there
99:10 - I'm going go back over to here and we'll
99:12 - take a look at our instance and see if
99:14 - it is
99:16 - ready probably not but I'm going to go
99:18 - try connect to it anyway probably
99:20 - will'll let us connect
99:24 - and before we do anything else I'm going
99:25 - to go say pseudo Su hyphen Ubuntu get to
99:29 - the buntu user and I'm going to type see
99:31 - if there's Ruby installed here so say
99:34 - Ruby hyphen V okay but on a Mac it's
99:38 - pre-installed so we're going to do Pudo
99:40 - snap install
99:42 - Ruby Ubuntu has um snap and app Snap is
99:46 - the newer one so it's usually
99:47 - recommended to use snap for installing
99:49 - stuff and so that will install a version
99:51 - of Ruby
99:57 - okay I don't care yeah yeah sure
100:00 - classic classic
100:02 - here I think that's like the only
100:04 - requirement that I think that really
100:06 - matters uh to utilize this but that's
100:09 - again one of the reasons why some people
100:11 - might not want to use J but I just want
100:12 - to show you what it looks like with a
100:13 - whole like a environment that fully has
100:16 - a bunch of
100:17 - plugins okay and I I'm not expecting you
100:19 - to know how to utilize anything in here
100:21 - still we will get to commands I know
100:22 - we're taking time but we're just laying
100:25 - that Foundation okay so here they show
100:28 - you like how you do M Brew macf install
100:30 - so this is the one command we need to
100:31 - install it this why I was confused by
100:33 - color scheme because they just do color
100:35 - here I guess color and color scheme are
100:36 - the same thing I go ahead and paste this
100:38 - in and say
100:40 - enter and so this is the on line command
100:42 - it's going to go ahead and set up all
100:45 - the stuff so anytime I have to set up a
100:47 - new Mac first thing I do is go over here
100:49 - dump this in and I'm
100:51 - happy so I'll just wait for this to
100:53 - finish okay and all it's do like you
100:55 - know it's like cloning all the
100:56 - individual repos and it's going to um do
100:59 - that so I think like if we went over to
101:03 - here and you go back into this directory
101:06 - into tools uh notice that they these
101:09 - look funny because these are actually
101:10 - pointing to other
101:12 - repos right at least that's what it
101:14 - looks like to me yeah it is which is
101:17 - interesting because you can click
101:18 - through and read all about those
101:20 - ones so it's finished okay and so now
101:23 - what I want to do is open up Vim so I'm
101:25 - going to go ahead and type in Vim um and
101:28 - I'm going to hit enter again and so it
101:31 - doesn't look a whole lot different but
101:34 - it did bring in a bunch of um templates
101:38 - or or sorry not templates but uh other
101:40 - things but if I do leader n notice now I
101:43 - have this that's nerd tree so that
101:45 - that's not part of Vim by default so we
101:48 - just installed that but I'm going to go
101:50 - ahead and close this because I want to
101:51 - change the styling again just watch so
101:54 - you can get some experience here I'm
101:56 - going to go ahead and open up the vimrc
101:57 - this is what you do on your Mac or
101:58 - whatever and I'm going to go ahead and
102:00 - set the
102:01 - color so I'm in Vim so I'm going to go
102:04 - down to the bottom I'm going to do shift
102:05 - G and I'm going to hit uh o to go below
102:10 - and just go delete up to the wall I'm
102:11 - going to set the color here to be mokai
102:15 - because that's the one I like to use if
102:17 - you ever watch my videos and you see
102:19 - those like code Snippets they're always
102:21 - done in uh that
102:23 - mokai I thought it was like monai monai
102:26 - versus mokai
102:27 - monokai I just got them mixed
102:31 - up now I don't remember which one I used
102:34 - but anyway I'm going to set it to mokai
102:39 - today m o l o
102:44 - Kai k AI all right all hit Escape colon
102:49 - WQ again just watching to see what it
102:51 - looks like
102:53 - and I'm just going to open up Vim
102:56 - again so that should look a lot nicer I
102:59 - guess it doesn't really show up on
103:01 - here um sometimes like you set color
103:04 - schemes they just don't pick it up
103:06 - because it's the limitation based on
103:07 - whatever colors are available in this
103:10 - view we just don't have really nice
103:13 - things but uh and apparently I just
103:15 - closed that tab but anyway that's how
103:16 - you could install a bunch of plugins but
103:18 - I kind of want to show that a bit nicer
103:20 - so I'm going to do this
103:21 - again again just watch for the time
103:24 - being I'm going to go ahead and just
103:24 - shut down that
103:28 - server and we'll say
103:30 - terminate but I'll just bring it up here
103:32 - in Visual Studio
103:35 - code and we can open up them because I
103:38 - don't think I have it installed here
103:39 - just say Vim sorry
103:41 - Vim yeah see like I'm hitting leader n
103:44 - on my keyboard leader is um uh backs
103:46 - slash so back sln and it's not opening
103:49 - up um uh that ner tree there so I'm
103:52 - going to back over well before I do I'm
103:54 - just make sure I have a Ruby version
103:55 - installed I do 2.7 which is old but
103:58 - that's probably what came pre-installed
103:59 - on this machine and so I'm going to go
104:02 - ahead and copy this we'll go back here
104:04 - paste this in hit enter and I'll do the
104:05 - exact same thing okay so I'm going to
104:07 - clone that down and bring this up
104:10 - here and we'll give that a moment to
104:12 - install
104:14 - okay but this would not work on Windows
104:16 - because you'd have well you'd have to
104:18 - have Ruby and it's it's for Linux all
104:20 - these commands are Linux commands so
104:22 - they don't really have a a Windows
104:24 - equivalent to uh install this natively
104:26 - but you'd have to have WSL like I have
104:28 - here all right but we'll just wait for
104:31 - this to install all right so now it's
104:33 - installed I'm going to go ahead and type
104:34 - in MV and uh you know what I might do is
104:37 - actually open up a file here just so you
104:38 - can see a little bit more here so I'm
104:39 - going to go mbim and go into lib and I
104:42 - have a bunch of Ruby files here so it
104:44 - doesn't really matter I'll I'll open up
104:46 - um auditor that's a large one for me
104:49 - here I keep typing mm because I think
104:52 - I'm on a Mac
104:53 - and so there we go so it has nice
104:55 - coloring this is coming from um actually
104:58 - I think it's the theme that we set
104:59 - before this is not mokai
105:01 - but I think it's the desert seam I I set
105:04 - before I sorry cough there I'm just
105:06 - going to quit that I'm going to open
105:08 - this up and I just want to change it to
105:09 - the one I like say vimrc here and I'm
105:13 - going to go down below and notice
105:15 - there's all this stuff here before we
105:16 - used to just have colar in
105:18 - here and I don't see it anymore but I'm
105:20 - going to go ahead and just type in color
105:23 - color and say
105:25 - mo
105:28 - moai and then we'll save that and we'll
105:31 - go back up to this
105:33 - file I it looks the same I don't know I
105:36 - maybe I got the color wrong here we's
105:37 - say color again color it's default still
105:40 - okay I'll try this one more
105:42 - time I must have typed something wrong
105:44 - yeah I can't find the
105:46 - scheme it's
105:49 - uh what about
105:51 - monai monai
105:54 - let try
105:56 - this still can't find
105:59 - it why won't it like it oh you know what
106:01 - it is we're not supposed to put
106:04 - um I don't think we're supposed to put
106:06 - quotations around it that's why it's not
106:07 - working so we'll say
106:09 - molai
106:11 - here there we go and that's what I'm
106:13 - used to so you'll probably recognize
106:15 - these colors right um but right now I'm
106:17 - using full vim and again I'm just
106:18 - showing you here but the idea is like
106:19 - when I'm working with Vim I will open up
106:21 - nerd tree here I will go in here and
106:24 - I'll be splitting windows and I'll be
106:26 - going crazy and I'll be switching over
106:28 - and doing a bunch of stuff um but
106:35 - uh but anyway and it's kind of hard to
106:37 - close windows here I'm not sure why it
106:38 - doesn't let me close it with the command
106:40 - there I'm just going to type
106:42 - close manually that's not usually how to
106:44 - close I'm usually hit a command key for
106:45 - that but like one plugin that's
106:47 - installed is um nerd Commander so what I
106:49 - can do is I can select multiple lines
106:53 - and then um I can do uh leader CC and
106:56 - that will comment out a bunch of stuff
106:57 - so that is a plugin so there's all sorts
107:00 - of plugins that you can have uh but
107:02 - again I just wanted to show you how to
107:03 - get a bunch in there really quickly we
107:05 - will install our own plugin here uh
107:07 - separately but I just wanted to show you
107:10 - that if I wanted to get rid of this
107:12 - install um I'm just going to make sure I
107:15 - get out of this here I'm just trying to
107:17 - think here this is all stored in the
107:20 - vimrc directory so if we go to our home
107:22 - directory here for a second I do LS La
107:26 - in
107:28 - here we have vmrc and it's linking over
107:31 - to Janice here
107:33 - right so if I want to
107:36 - um get rid of all this stuff and it
107:38 - copied our old ones our old ones here we
107:41 - just need to get rid of the Vim
107:43 - directory so if we go into
107:46 - Vim this is all the Janice stuff so I'm
107:48 - just going to go ahead and just say vim
107:50 - and get rid of it and so so now if I
107:53 - open
107:54 - Vim sorry
107:57 - Vim we're just back to normal I can't
107:59 - open up nerd tree that stuff doesn't
108:03 - exist all right but um yeah we'll just
108:07 - end it here and we'll look at installing
108:09 - a plugin in a separate video
108:11 - [Music]
108:14 - okay all right so in this video what I
108:16 - want to do is install a plugin I was
108:18 - going to do nerd Commander but you know
108:19 - what I'm thinking is that maybe we
108:20 - should install something that you think
108:22 - that Vim can't do which would be
108:24 - something like having AI in uh in Vim
108:27 - here so and this is my point is that
108:30 - there's always somebody coding some kind
108:32 - of plugin that lets uh Vim stay up to
108:34 - date with everything and so this one's
108:35 - called vimi I've never used it before
108:37 - and supposedly we can install this using
108:39 - um uh Vim plug and so maybe that's a
108:42 - good idea I've haven't used Vim plug in
108:45 - such a long time but let's go ahead and
108:46 - give it a go and so I just typed in BM
108:49 - plug to get to the repo and so there
108:51 - should be an installation way uh like an
108:53 - inst a way to install this so we have
108:55 - two ways we have uh this is the Unix way
108:57 - then we have the windows way since I'm
108:59 - on Windows here today I'm going to have
109:01 - to do this I'm going to have to open up
109:02 - Powershell so I'm hitting command and
109:05 - I'm searching for
109:06 - Powershell and then I'm right clicking
109:08 - Powers shell I'll just open it over here
109:10 - for a second I'm G to just show you here
109:11 - whoops whoops whoops whoops whoops I
109:14 - opened up Adobe Acrobat by
109:17 - accident but we open this up and we type
109:19 - in Powershell
109:22 - again if you're on Mac this is so much
109:24 - easier for you just uh follow along uh
109:28 - modle through the the Mac instructions
109:29 - here but I'm going to run this as
109:32 - administrator I'm going to open this up
109:34 - here a big ugly poers shell I'm going to
109:37 - copy this command
109:40 - here and I'll paste it in and we'll hit
109:44 - enter okay and so
109:47 - supposedly I guess Bim plugin is
109:49 - installed
109:51 - now all right right now how do we use it
109:53 - is the next question
109:56 - usage add Vim plug section to your Vim
110:00 - RC file or nit Vim so it's telling you
110:04 - that we need to add it to that so we
110:06 - know
110:08 - that our uh vimrc
110:12 - file is located in that specific
110:15 - directory so I'm going to go back and
110:16 - open up our Vim I'm just going to get
110:17 - this out of the way our G Vim here I'm
110:21 - going to go ahead and say
110:24 - open and I'm going to open up
110:27 - vimrc and what it wants us to place in
110:30 - there is
110:33 - this hold on here
110:35 - so add a Vim plug to your section that's
110:38 - not what I want to do I want to just
110:39 - start installing oh here it says plug
110:41 - install install plugins that's actually
110:43 - what I want to do so what we'll do is do
110:45 - colon plug
110:47 - install I'm going to hit
110:50 - enter not an editor command well you
110:53 - know what um I think we need to close
110:54 - this
110:57 - first and then reopen GM because we uh
111:00 - we installed and didn't necessarily
111:02 - reopen gvm and we'll now see if it's in
111:04 - here so we'll do
111:05 - colon plug install still not a
111:09 - command so there must be more to
111:13 - this
111:15 - huh just a moment okay now something we
111:19 - could confirm is if it's actually in
111:20 - that directory so notice here says Vim
111:23 - files autoload plug uh plug so what I'm
111:25 - going to do is I want to go look in that
111:28 - directory and see if it actually is
111:29 - there okay so I'm just navigating to it
111:33 - uh locally here just give me a
111:36 - moment and I'm looking for Vim files
111:40 - give me a moment just a second
111:43 - here all right and so if it installed
111:45 - correctly it would be in the autoo
111:46 - directory
111:48 - here and we have plug. Vim but it's
111:51 - telling us that this command does not
111:53 - work so add a plugin a plug a Vim plug
111:56 - section to your
112:01 - Vim I mean maybe we still need this
112:03 - section maybe it won't work without that
112:05 - so I guess I'll still open that I
112:07 - suppose we say file
112:09 - open and we'll open up our
112:12 - vmrc and what I'm going to do is hit o
112:15 - to go down below now I'm in insert mode
112:17 - I'm Type in call plug
112:20 - begin uh pound begin
112:23 - parentheses and it'll say call plug
112:27 - pound end parentheses and I'll do right
112:31 - quit and I'm going to
112:34 - reopen G
112:38 - Vim I'm going try this again let see
112:40 - colon plugin install because I remember
112:44 - when I used this or they at least they
112:46 - show the demo right they go
112:51 - here so maybe what we need to do is put
112:53 - it in the list first and that's our
112:55 - problem okay so I'm going to go back and
112:57 - open the last file we had so open it
113:02 - again I maybe we need to specify our
113:07 - plugins so what I'll do because this
113:10 - plugin is called
113:12 - um I just need to see how their Nam so
113:14 - I'm thinking that it's
113:17 - just go back over to
113:19 - here take a look so it's just that
113:23 - so I'm going to hit uh K up on my
113:25 - keyboard then I to go to insert mode
113:28 - PLU if you're struggling with this it's
113:30 - not a big deal you can just again watch
113:32 - me until we learn all the
113:34 - commands and I hit escape to get out of
113:36 - insert mode colon
113:39 - WQ and now I'm going to reopen
113:47 - gvm I just want to show you that this is
113:49 - the way we install plugins so now I'm
113:51 - going to do is col it I'm going to say
113:53 - plugin
113:58 - install what are you telling me it's not
114:00 - there
114:02 - buddy all right let's go back here for a
114:08 - second oh you know what it's plug
114:11 - install plug
114:14 - install and so now it's going to install
114:17 - vimi and so now vimi is now
114:21 - installed this is our no name file
114:23 - that's here let's take a look at how we
114:25 - configured this so this says uh
114:27 - save your API here on your
114:31 - machine so I guess the question is where
114:34 - would that be for
114:45 - Windows so I'm not
114:49 - sure where this would go for Windows
114:53 - just give me a moment okay so right away
114:56 - what I'm noticing here is it's saying
114:57 - like Vim AI requires Python 3 and so now
115:01 - I'm running that problem where I'm
115:02 - basically forced back to Linux so again
115:04 - you know Vim is mostly powerful on Linux
115:07 - and and Unix it's very hard to configure
115:09 - this stuff like with this there's
115:11 - probably some way to hook up WSL with uh
115:13 - Vim here uh let me see if I can figure
115:16 - that out so I did find this script here
115:18 - for GM and the idea is that maybe what
115:20 - this command would let you do is it
115:21 - would launch launch up um it looks like
115:24 - it launch up CMD and then it would
115:27 - launch the GM program so I don't think I
115:30 - have version 81 installed I think it's 9
115:32 - 9.1
115:34 - installed yeah this is
115:36 - 9.1
115:38 - and then the idea is it would launch GM
115:42 - and GM so I'm not I don't really care
115:45 - that much about GM I just want to show
115:46 - you how to install a custom plugin so
115:47 - what I'm going to do is go back over to
115:50 - cuz at the end of the day we're going to
115:51 - use to do a code just so you know when
115:53 - we learn it all this stuff but I I I
115:54 - just want to show you all this
115:56 - configuration stuff so you you know
115:57 - again if you want to figure it out or if
115:59 - you're on a Mac or Linux it's a lot
116:01 - easier so what I'm going to do is just
116:02 - start this all over again and I'm going
116:04 - to I'm in WSL here and so uh what I'll
116:07 - do is I'll go
116:09 - install um Vim
116:13 - plug so we just type in Vim plug which
116:16 - is right
116:18 - here
116:19 - and I'm going to grab this command
116:24 - here and paste it
116:28 - in
116:30 - and that's going to put it into the
116:32 - correct directory good and so then we
116:35 - will open
116:38 - up our vimrc file again so let's just
116:41 - say
116:43 - vim
116:46 - vimrc and I just want a couple things
116:48 - here so I want this call plugin so
116:51 - trying to do this while looking at both
116:52 - of them at the same time hold
116:55 - on insert mode call
117:00 - plug
117:02 - begin
117:05 - parentheses again if you can't follow
117:07 - along with the commands do not worry
117:08 - about it we'll cover that and you can
117:10 - always come back here and then do this
117:12 - yourself uh so we'll go do this and I
117:15 - want this to be called this
117:18 - is
117:20 - what this is called
117:27 - called madox 2 forvm
117:32 - aai WR and quit I'm just doing that
117:34 - below you can't see it but I'm doing
117:35 - right and quit there we'll exit out of
117:38 - there can open linked file for writing
117:41 - because it thinks this file is linked
117:43 - darn
117:46 - it one second here LS
117:53 - hyph
117:54 - La I have an old file here from this I'm
117:57 - just going to go ahead and say
117:59 - remove uh vmrc because it's an old one
118:03 - e LS hyphen la like
118:06 - that now it's gone I'm going to move the
118:09 - old vimrc back into play so vimrc will
118:12 - now be
118:13 - vimrc and I'm just going to reopen that
118:15 - up vim
118:18 - vmrc and we'll try this again so the
118:21 - plugin here here is
118:23 - called plug madx to Vim
118:28 - Ai and then over
118:36 - here we'll say
118:39 - call plug begin
118:43 - parentheses call
118:46 - plug
118:50 - and all right I'm just going to jump
118:52 - this like
118:54 - that madx uh Vim a etc etc looks good to
118:59 - me call plug begin plug
119:02 - end and that looks good so I'm going to
119:04 - do right quit here I'm just going to
119:05 - bring this back up to screen right quit
119:06 - down
119:07 - below and then we're going to reopen
119:09 - this up I'm going to open Action a file
119:11 - UPS here so I can see what I'm doing so
119:13 - I can do vim and I I am in a project
119:16 - right now so I can just actually no I'm
119:17 - not I'm going to go back into sites exam
119:19 - Pro audit here I'm just going to open up
119:22 - a
119:26 - file auditor as an
119:29 - example I keep typing mm because I think
119:32 - I'm on a Mac it has a problem with our
119:34 - file here uh unknown function plug end
119:36 - plug begin did I type that
119:39 - wrong doesn't look like I
119:42 - did so I just quit quit
119:48 - again clear them
120:00 - vmrc and we'll take a look here call
120:04 - plug begin call plug
120:11 - end huh
120:22 - oh this is neovim
120:25 - here I copied the wrong line that's why
120:28 - okay so I guess we got to pay attention
120:30 - to what we're copying so go ahead and
120:32 - copy this line here not a big deal we'll
120:34 - go back to here we'll paste this in
120:36 - we'll hit enter and so now I'll open it
120:39 - up that file I want uh it's a VI Vim lib
120:47 - auditor okay now it's not airing out
120:50 - I'll do colon
120:52 - plug install and now it's going to
120:55 - install that plugin all right for this
120:58 - to work I have to have python installed
120:59 - because that's what this thing relies on
121:01 - based on the the source
121:03 - code so I'm going do colon Q here get
121:06 - out of that and do colon q and get out
121:09 - of this file with the exclamation mark
121:11 - so now what I want to do is configure AI
121:13 - so I actually do have an open AI
121:15 - subscription so for me I can actually do
121:17 - that so again just watch you don't have
121:19 - to necessarily do this and so what it
121:21 - wants me to do is set this token here so
121:25 - I'm going to go grab an open API key I
121:26 - just don't want to show this on screen
121:28 - but I'm going to go grab that from open
121:31 - API or open AI so we'll go
121:36 - here and where's my
121:39 - login where's my
121:42 - login
121:46 - products API login here we
121:49 - go and I'm going to go generate out well
121:52 - I'm got to log in
121:54 - first I don't think it shows keys yet so
121:56 - I think it's okay we'll go to a
121:58 - API it's fine get started I'm going to
122:01 - go here on the right hand
122:03 - side somewhere in here I have
122:07 - keys your
122:12 - profile well what else would it be us
122:15 - your AP have been repl with project Keys
122:17 - okay that's
122:18 - fine and I'll call this one Vim
122:22 - and I'll say
122:25 - all and now I have a key and I expose it
122:28 - I guess it doesn't really matter I'll
122:29 - just delete this afterwards but it's
122:30 - really silly that they did it that
122:32 - way okay so I'm going to go back over to
122:35 - the instructions
122:37 - here and I'm going to go ahead and type
122:40 - in
122:41 - Echo and then paste it
122:44 - in sh this a bit
122:47 - here and we have freaking jeez
122:59 - that make that symbol and send it to
123:01 - ourc config slopen
123:04 - ai. token okay so that's where it tells
123:07 - us to put it oh we could have exported
123:10 - it as well
123:13 - whatever uh okay so now that's
123:18 - there so I'm G to drag this up so I have
123:21 - more room here and I'm going to go back
123:22 - and open that file I had earlier and so
123:24 - now that I have it configured there
123:26 - should be some way to use it so it says
123:27 - here to use AI command type the command
123:30 - followed by the instruction
123:33 - prompt all
123:37 - right okay
123:39 - so what I'll do here is I'll go down
123:42 - somewhere in my
123:48 - file all right again just watch
123:55 - and I'm going to type in Colon oops
123:58 - Escape I'm going to type in the command
124:00 - they told me to type in so uh colon
124:07 - AI all right
124:16 - uh help them AI here
124:31 - complete the text on the current
124:34 - line complete the prompt okay let's try
124:36 - the
124:37 - prompt so do
124:39 - AI write me a ruby function that prints
124:44 - hello world feel like it's not going to
124:46 - work for some
124:49 - reason verify that the billing plan is
124:52 - pay as you
124:53 - go what do you mean I do pay as I go
124:56 - don't I or did Bo downgrade
124:59 - me just give me a second
125:02 - okay all right so I went in here my
125:04 - billion at zero it says when your credit
125:06 - balance reaches zero your API requests
125:07 - to stop working so if we go into limits
125:10 - here um or limits here in my or I'm
125:14 - going to go down below here I'll just
125:16 - set like say the use Li is this what if
125:19 - I just send like $10
125:22 - to do
125:24 - that oh uh five
125:28 - five can I do
125:30 - that okay great I'm gonna go back over
125:33 - to
125:35 - billing and I'm going to add credit to
125:38 - the balance we'll say
125:40 - $10 and we'll pay for
125:44 - that give it a moment here because I'm
125:47 - assuming that's the reason why it's not
125:49 - working
125:50 - right the question is like would there
125:52 - be one that integrates with chat GPT I
125:53 - don't know but this is obviously using
125:56 - that part of it um so I'm going to go
125:58 - back over to here and we're going to try
126:00 - this
126:09 - again I mean it
126:14 - is anyway I think that this is
126:17 - sufficient
126:19 - um but there might be like a chaty
126:22 - PT with uh plugin Vim there might be one
126:27 - for that so there's all different kinds
126:29 - of plugins you got to find the one that
126:31 - works right so here's another one which
126:32 - is US uses the open API key but for
126:35 - whatever reason this one didn't work
126:37 - that great like this one looks a little
126:38 - better say like ask and stuff like that
126:40 - but I just want to point out that you
126:42 - can do it and that's the trick is that
126:43 - you have to configure and that's the
126:44 - hard part um about utilizing this stuff
126:46 - so we'll call this successful because we
126:49 - definitely did install a plugin um but
126:52 - we we'll end it here okay so I'll see
126:53 - you in the next one all right
126:55 - [Music]
126:58 - ciao hey this is Andrew and we're taking
127:01 - a look at neovim and I just want to
127:02 - point out we're going to get the command
127:04 - soon I just want to cover neovim and
127:06 - then basically after that we're
127:08 - basically going to be using visual
127:10 - studio code and learning our Vim
127:12 - commands Okay so Neo is a clone of Vim
127:14 - which was Rewritten from the ground up
127:16 - to be hyper extensible version of Vim in
127:18 - 2014 looks just like Vim plugins are
127:20 - easier to write better end end
127:22 - documentation it has an ASC producing
127:25 - parsing tree it has remote plugin runs
127:27 - as Cod processes safety async built-in
127:31 - terminal emulator which is really nice
127:33 - fully compatible with vim's editing mode
127:35 - and Vim script version one so when they
127:37 - say that it is a rewrite of Vim they're
127:40 - talking about Vim one okay but it does
127:43 - allow you to use Lis scripts so the time
127:45 - this is a big deal because people were
127:47 - getting like they liked Vim but it was
127:50 - just a pain uh because it it wasn't
127:52 - keeping up but then Vim 8 and Vim 9 came
127:55 - back and they made great improvements
127:57 - and so now it's debatable whether you
127:59 - want to use neovim or just Vim 9 um I'm
128:02 - in the camp of just using Vim 9 UM or
128:05 - the LA Vim because I don't really care
128:06 - about
128:07 - neov but you know if you do need to
128:09 - write your own plugins it is easier and
128:11 - there are some really amazing uh plugins
128:13 - for neovim but these days I'm either
128:16 - using Mac with Janice or I'm um with on
128:20 - Vim 9 or Vim or whatever or I'm using
128:23 - visual studio code with Vim Keys
128:27 - [Music]
128:30 - okay and if you're wondering I did get
128:32 - rid of my API key for open AI so no
128:34 - one's going to abuse it what I want to
128:36 - do in this video is take a look at
128:38 - neovim um I think I shut the server down
128:40 - earlier right yeah I did okay great uh
128:43 - so we'll go take take a look at neovim
128:45 - I've never installed neovim uh as like
128:48 - since it came out so I don't even know
128:51 - if there's anything different I think
128:52 - it's just the same thing so I can go
128:53 - ahead and install now if we are on
128:56 - Windows I'll go here obviously they have
128:57 - a bunch of different ones here so we'll
128:59 - go ahead has an MSI so that is an
129:01 - installation thing I imagine it's going
129:03 - to look just like the normal uh normal
129:06 - Vim here so we g go ahead and install
129:12 - that
129:13 - uh I want to run it run
129:17 - anyway and we'll go over here and we'll
129:20 - install it
129:28 - all
129:30 - right I imagine Mac is a DMG and you
129:33 - just drag it over in Linux you probably
129:34 - have to run a command or looks like
129:37 - there are other ways for us to install
129:39 - it so I believe it is now installed I'm
129:42 - opening up my uh my
129:46 - um uh start menu and and I open it up
129:49 - and there's neovim okay looks exactly
129:53 - the same
129:55 - okay all right um I imagine that plugins
129:59 - are probably easier to install with this
130:03 - thing so go back to
130:07 - neovim Modern goys yeah
130:12 - sure yeah nothing nothing super exciting
130:15 - to run home with maybe people that know
130:17 - neovim more than me are excited about it
130:20 - but remember had like really nice
130:22 - looking uh screenshots
130:29 - before
130:31 - yeah what's
130:34 - this a fork of vonm what the heck is
130:41 - vonm um simple modal ID built on neovim
130:45 - the goal is to create the ideal
130:47 - programming
130:48 - environment so it seems like it has a
130:50 - lot of stuff built into it and then you
130:52 - have
130:53 - neovim a simple modal ID built on neovim
130:56 - with v vs code extensions oh that sounds
130:59 - interesting ridden in electron okay so
131:02 - it seems like a lot of people have
131:04 - leveraged Neo's API to build um their
131:07 - own visual things on top of it because
131:09 - if you think about it like we have G Vim
131:11 - but we're not opening up in G vim and
131:13 - the one that we opened up neovim is
131:15 - actually not opening up I don't think
131:17 - that's a standalone application I think
131:18 - that is just opening up in uh command
131:21 - prop or something so maybe there's
131:23 - something really nice like this but this
131:25 - is showing it on a Mac so I don't even
131:27 - know if you can do this on
131:35 - Windows I mean it says electron so if
131:37 - that's the case it should be able to run
131:38 - on anything here if we go over to
131:41 - releases uh there's a Windows one yeah I
131:44 - might as well give it a go for fun I'll
131:45 - download the
131:48 - exe maybe I'll be a convert to this
131:52 - but you know maybe the ecosystem for
131:53 - neovim is easier on Windows than it uh
131:56 - like than it is GM is and so you know
131:59 - this is why I'm just kind of exploring
132:00 - these and seeing what we can take a look
132:03 - at because then end the day it's up to
132:05 - you to choose what tools you want to use
132:07 - if you're just going to use it with vs
132:08 - code which is totally fine the stuff
132:10 - installed uh like sorry with the evm
132:12 - commands on you can do that so now I'm
132:14 - just opening up that
132:16 - executable and we'll open it up that
132:19 - it's electron app doesn't sound very
132:20 - efficient memory wise so I don't know if
132:22 - I would necessarily want to run this day
132:23 - today but we'll take a look and see if
132:25 - it actually can start
132:27 - up and this was released 2021 so it
132:30 - doesn't look like it's being really that
132:32 - well
132:33 - maintained
132:35 - and I'm waiting for it to
132:37 - start is it going to
132:43 - start it didn't even make a version one
132:47 - and so this is kind of where I give up
132:49 - with this thing
132:52 - we could take a look at Vim
132:59 - here and did this ever
133:02 - get nope so I mean there's stuff out
133:05 - there which is cool but uh yeah that's
133:08 - neovim so I would say we're done here
133:10 - [Music]
133:14 - okay all right one more thing um I just
133:17 - want you to know about this if you want
133:18 - to use use it but there is a Chrome
133:20 - extension called vimium that allows you
133:21 - to have Vim like commands that control
133:23 - your Chrome web browser so you have a
133:25 - bunch of commands um and they're not
133:27 - exactly like Vim but they're very
133:29 - similar and this could be a really good
133:31 - way to train your hands to uh work with
133:33 - themm um and that's all I wanted to say
133:35 - there
133:36 - [Music]
133:39 - okay hey this is Andrew Brown let's talk
133:41 - about Vim support and other Ides so most
133:43 - Ides will have direct uh support or
133:47 - indirect support via plugin extension to
133:49 - emulate the Vim command so it's not like
133:51 - the full Vim ecosystem but it's the
133:54 - commands and that's good enough and so
133:56 - vs code has an extension Cloud9 has one
133:59 - you you just turn it on you set it to
134:01 - Vim mode you have jet brains uh any of
134:04 - their IDs have a a Vim mode xcode and
134:06 - you can get Vim in Android Studio I
134:09 - think noad Plus+ somebody allowed you to
134:11 - have Vim there as well so there's a lot
134:13 - of places where you can uh get Vim like
134:17 - commands so IDs are simulating or
134:19 - emulating I should say I don't know I
134:21 - wrote the word simulating because it's
134:22 - actually emulating emulating the level
134:24 - of supported uh commands and Vim
134:27 - functionality with uh will vary with
134:29 - each implementation just understand that
134:31 - there could be limitations but for the
134:33 - most part when I use vs code it feels
134:35 - like I'm just using all the commands
134:37 - that I'm used to
134:39 - [Music]
134:43 - okay hey this is Andre Brown this video
134:45 - I want to show you um how to install Vim
134:47 - mode or uh Vim uh Keys here for for
134:51 - visual studio code just go to extensions
134:53 - here on the the left hand side you're
134:54 - going to go and type in Vim you're going
134:57 - to have more than one option uh just
135:00 - because there could be other
135:01 - implementations but the one that I know
135:02 - is the vs code Vim one but just make
135:05 - sure that you don't end up installing
135:07 - more than one because that can mess up
135:09 - problems and so you just install it and
135:11 - then you'll have them if you ever have
135:13 - any issues you can always just disable
135:14 - it um I can uninstall it here just to
135:17 - show you what it looks like but the idea
135:19 - is you just hit install
135:21 - it's installed and then your cursor will
135:24 - change okay and you'll notice that all
135:25 - your keys will not work the way that you
135:27 - expect them to work uh but there you
135:29 - [Music]
135:33 - go hey this is Andrew Brown before we
135:36 - start to learn commands I want to talk
135:37 - about the default position of where your
135:39 - hands will be and that is always on the
135:41 - home row uh so Vim is designed around
135:43 - using the least amount of keystrokes
135:45 - with the least amount of hand movements
135:47 - so your hands should always be resting
135:48 - on the home row forget about your mouse
135:50 - so you do not need it when you are
135:52 - working with Vim uh notice that there
135:54 - are ridges that indicate uh the F and
135:56 - the J key uh if you forget from your
135:59 - typing tutor early days when you learn
136:01 - use a keyboard This is how you know
136:03 - where the H and the J are um and so
136:06 - that's where your index fingers should
136:08 - be resting so if you take your index
136:10 - fingers they should be sitting on the F
136:12 - and J key um but yeah we'll just cover a
136:15 - little bit more about vim and then we'll
136:17 - get jump right into commands and start
136:19 - doing that okay
136:23 - [Music]
136:25 - let's talk about the different modes of
136:26 - Vim because it's very important to know
136:28 - them so you can navigate around uh the
136:30 - the default mode the mode that you enter
136:32 - in is the normal mode and you can always
136:34 - get back to normal mode by pretty much
136:35 - always hitting Escape All right so
136:37 - that's how we always get back to normal
136:39 - mode uh from normal mode we can
136:41 - transition to other modes there is a a
136:44 - big comp complicated diagram of how
136:46 - everything connects to each other but I
136:48 - basically just look at everything being
136:49 - connected to normal mode so we have
136:51 - command line mode this is where you
136:52 - enter in commands um so anytime you type
136:55 - a colon you'll notice at the bottom that
136:57 - that colon will appear and then that bar
137:00 - in the bottom is where you're entering
137:01 - in commands so we have entering a
137:04 - command uh if you try to search
137:06 - something by doing forward slash then
137:08 - you'll notice that it's actually fine
137:09 - but sure we'll call it search or if you
137:11 - want to search backwards or find
137:13 - backwards that will put you into command
137:15 - line mode you have insert mode insert
137:18 - mode um happens with a lot of characters
137:20 - if you type in I or capital I you'll
137:22 - enter insert mode if you type in a or
137:24 - capital A you'll enter insert mode o or
137:27 - capital O C or Capital C there's a lot
137:30 - of cases where you'll enter into uh
137:33 - insert mode which we'll cover uh in
137:36 - detail in each section then we have
137:38 - visual mode so visual mode is a new type
137:40 - of mode um and it actually has uh two
137:43 - subset modes which is visual line mode
137:45 - and visual block mode um this is a way
137:48 - of selecting text and then doing
137:49 - something with that text and we'll cover
137:51 - that when we cover visual mode we have
137:54 - replace mode and this will replace a a
137:57 - character or replace or you have the
137:59 - full replace mode which you'll stay in
138:02 - replace mode as you replace characters
138:04 - and we'll cover that when we talk about
138:05 - Replacements there are other modes
138:07 - there's a select mode an X mode and a
138:10 - terminal job mode we are not going to
138:11 - cover them because I never use them so
138:14 - you don't need them either okay some
138:16 - developers like remapping the Escape key
138:18 - to be more true to the original position
138:20 - the Caps key or the tab key if you
138:22 - remember earlier from our history if you
138:24 - did watch those videos that the um
138:26 - Escape key used to be to the left of the
138:28 - que so some people like remapping it um
138:31 - I don't remember what the recommendation
138:32 - is anymore but I I don't do that another
138:35 - very popular remapping is uh remapping
138:37 - the control key to the caps lock key
138:39 - again to reduce the amount of movement
138:42 - um but again I I just leave everything
138:43 - in its default position if you're
138:45 - wondering where the command line bar is
138:46 - it will show up there down below and it
138:48 - will generally tell you in the command
138:49 - line bar in the front what mode you're
138:51 - in so they saying that it's visual block
138:55 - mode and that's how we know we're in
138:56 - visual block mode um some will not tell
138:58 - you that there you're in normal mode you
138:59 - just if there's nothing there you're
139:01 - usually normal mode some will actually
139:02 - tell you if you're in normal mode
139:04 - [Music]
139:07 - okay all right so I want to just show
139:10 - you modes so if you look down below in
139:13 - Visual Studio code we are right now in
139:14 - normal mode so it does indicate it here
139:16 - way down here that we're there so I'm
139:19 - just going to click anywhere in here
139:20 - let's just to say on this line open up a
139:23 - programming file whatever you can work
139:24 - with and if I hit I on my keyboard
139:27 - notice that we're now in insert mode and
139:29 - if I hit Escape I exit back to normal
139:32 - mode if I hit I I'm in insert mode if I
139:35 - hit Escape I'm in normal mode that is
139:37 - pretty straightforward uh there are
139:39 - other modes so if I do um B I'll be in
139:42 - visual mode I hit Escape I'm out of
139:44 - visual mode if I do capital r I'm in
139:47 - replace mode if I hit Escape I'm back in
139:49 - normal mode so you kind of get the idea
139:52 - uh but usually normal and insert are
139:54 - where you're mostly going to be so just
139:55 - pay attention to what you're doing there
139:57 - you
139:58 - [Music]
140:01 - go so file commands are ways to work
140:05 - with files um at the command line and
140:08 - they always start with the c we've
140:09 - obviously done some because or you've
140:11 - seen me do some because there's no way
140:13 - you can quit without uh using a file
140:16 - command so we have WR for saving a file
140:19 - uh WR in the f to save it to a specific
140:22 - path or file name we have W exclamation
140:25 - mark which will attempt to force the
140:27 - file to save sometimes you have readon
140:28 - files or um you don't necessarily have
140:31 - the permissions that you're trying to
140:32 - force uh Force save a readon file you
140:36 - have wa which will save all files I
140:38 - never use that one we have quit we have
140:40 - quit for sometimes you just want to drop
140:43 - everything and get out of there so you
140:44 - do that QA to quit all open files and
140:47 - then there's Zed which isn't a command
140:49 - line file but it's like uh it doesn't
140:52 - start with a coal and you can just press
140:53 - Zed to get out of it really quickly
140:55 - which is interesting um but for these
140:57 - when we're in Visual Studio code we
140:58 - don't have to worry about these
141:00 - so it doesn't matter but we will go
141:03 - ahead and just quickly demo them
141:05 - [Music]
141:09 - okay all right so we're back in here and
141:11 - I'm actually going to use Vim Down Below
141:12 - in the terminal so I'm going to type in
141:16 - vim and it's not responsive again I
141:18 - don't know why this happens sometimes it
141:19 - happens
141:22 - there we go if I go back and I type in
141:25 - Vim I can actually create I can actually
141:28 - do make di in here and some other
141:30 - commands I didn't cover those in there
141:32 - because I think they're kind of exotic
141:33 - and I don't necessarily like using them
141:36 - but uh it's very straightforward you
141:37 - know you could do q but one I wanted to
141:40 - show you was the Zed key so if you do
141:42 - shift
141:43 - Z capital z or maybe control Z or Z it
141:48 - should quit there we go let me try that
141:50 - again
141:54 - and and that I'm actually just doing
141:56 - what is
141:57 - it I actually have to tab it twice I'm
141:59 - not sure why it's being so unresponsive
142:01 - but if you were to use that let's say in
142:04 - um you like shelled into a server
142:06 - remotely connected and you did uh
142:08 - capital Z it would it would quit right
142:10 - away but I think these are pretty
142:11 - straightforward um just be aware that
142:14 - they exist
142:16 - [Music]
142:19 - okay all right let's look at motion
142:21 - commands that these are things that are
142:23 - going to um allow you to move quickly
142:25 - around your document and often they will
142:27 - uh uh these are shortcuts that only
142:30 - start in normal mode but will generally
142:32 - stay in normal mode as well because it's
142:34 - about movement and not necessarily uh
142:37 - modifying uh text okay so motion
142:39 - commands would be something like
142:40 - directional motion so being able to move
142:42 - up down left and right so standard Mo uh
142:44 - movements word motion so move based
142:47 - around words uh text object motions
142:49 - which I rarely ever use um which are
142:51 - paragraph and sentences we have jumps
142:53 - which will jump you drastically to
142:55 - another part of the document marks which
142:57 - will Mark a position to jump back to so
143:00 - let's take a look at a couple of
143:01 - examples of um of motions as we will see
143:05 - a bunch of them throughout this course
143:06 - so let's just take a look at a couple
143:08 - here the first is if we wanted to go to
143:11 - a specific line so we'd say we give it a
143:13 - count like 22 and then we say G to say
143:16 - go to line 22 and it would jump to that
143:19 - line so that would be considered more of
143:20 - a jump motion then we have W so if you
143:24 - press W while in normal mode it will
143:26 - jump to the start of the next word um so
143:29 - those are an example of a couple of uh
143:32 - uh motion commands uh there are operator
143:35 - commands which can be used with motion
143:37 - command so um operators generally are
143:39 - trying to change something um and so we
143:42 - have change delete yank um uh Tilda
143:48 - which I rarely ever use in this case a
143:50 - swap case we have another one for swap
143:53 - case make lowercase which I actually do
143:55 - use make uppercase which I like using as
143:57 - well GQ which I've never used before um
144:00 - shift left shift right which you'll use
144:02 - quite often and more so just understand
144:05 - that um operators can be used along with
144:07 - motions and the way that would look like
144:09 - is you would say all right let's say I
144:11 - want to delete something so I'm going to
144:12 - say delete the current word and actually
144:15 - be like from the current cursor to the
144:17 - to the start of the next word or change
144:19 - three so C for change three for the
144:23 - quantity and then three words so
144:27 - hopefully that makes sense
144:28 - [Music]
144:32 - okay all right so let's take a look at
144:34 - the easiest possible motions first which
144:37 - you should absolutely have memorized um
144:40 - and and learn extremely quickly which is
144:43 - the hjkl Motions so here we have H for
144:46 - left J for Down K for up uh and L for
144:50 - right it looks like an I but it's
144:52 - actually an L um and one thing you can
144:54 - do is you can add uh values to it so if
144:58 - you were to um add a number a count
145:01 - prior to the number then you would
145:03 - change how much You' move because
145:04 - usually just be one Val like one
145:07 - character or one line but here if you
145:09 - say 10 H and I'm get my pen tool out
145:12 - here so just look down below here H is
145:14 - this way so 10 H would be 10 characters
145:17 - to the left 3j would be three lines down
145:20 - 2K would be two lines up 8 L would be
145:24 - eight characters right I often don't
145:27 - remember which is up and which is down
145:29 - but my fingers seem to remember so like
145:31 - if you were to ask me like on the spot
145:33 - which goes up and which goes down I
145:34 - couldn't tell you um but I know that if
145:37 - I had to move it's muscle memory now
145:40 - [Music]
145:44 - okay all right so what I want to do here
145:46 - is practice motion commands and the
145:49 - great thing is that we can actually do
145:50 - all of this within GitHub I was just
145:52 - thinking about this that there's the
145:53 - GitHub dodev editor and that will open
145:55 - up a a vs code like experience and I
145:57 - believe that we can install Vim there so
145:59 - what I'm going to do is I'm going to go
146:01 - to something like um the ad Cloud
146:03 - project boot camp which is a very large
146:05 - project um that is
146:09 - visible and you can use whatever you
146:11 - want but I'm just trying to give you
146:12 - something that we can both uh look at at
146:13 - the same time so this is the adabs boot
146:15 - camp creditor application I'm going to
146:16 - drop this down to tags or branches
146:20 - M I guess I want to go to Omen King one
146:22 - actually sorry this is my personal one
146:25 - and so you can go to this one as well
146:27 - I'm going to go to week X here and what
146:29 - I'm going to do is press period on my
146:30 - keyboard what that's going to do is open
146:32 - up
146:36 - github.io use it loads very quickly and
146:39 - it's vs code if you don't like the theme
146:42 - you can go down here and change your
146:43 - theme um but on the left hand side I'm
146:45 - going to go to extensions and just make
146:48 - sure you go ahead and install the Vim
146:49 - extension I
146:51 - here so I think this is uh starting up
146:54 - but yeah mine's already installed so
146:56 - just go ahead and install yours there
146:58 - and when you have done so we can just go
147:00 - up here and open some kind of file so
147:01 - the
147:02 - app.py is kind of large and so I guess
147:05 - we can work with that or we could open
147:07 - up some cloud formation that might be a
147:08 - little bit better I'm going go into this
147:11 - cluster file and so here's an example
147:14 - file open so I want you to click
147:16 - anywhere in here and put your fingers on
147:19 - the uh JK L and now let's move around so
147:23 - I'm gonna go hit H to go
147:25 - left and do L to go right H to go left L
147:31 - to go right H go left L to go right and
147:34 - so you should be following along with me
147:36 - and starting to do these motions let's
147:39 - try J which is the your index finger um
147:41 - that will go down and then K will go up
147:45 - J will go down and K will go up so it
147:48 - should be pretty straightforward
147:50 - so just spend your time
147:52 - here trying to turn that into muscle
147:56 - memory all
147:58 - right now let's try to add the modifier
148:01 - so I'm going to go back to the word
148:03 - certificate and uh using my left hand
148:06 - I'm going to type something like five
148:09 - I'm going to hit five I'm going to hit J
148:11 - which is the index finger you should
148:12 - feel it because you should feel that
148:14 - little um bump there and I'm gon to hit
148:17 - down and so now now notice it jumped
148:19 - down five I get five again I'm going to
148:22 - hit K which is my second finger that
148:24 - will go back up so five down five up
148:27 - five down five up five down five up you
148:30 - get the idea let's try five left five
148:32 - left five right five left five right try
148:36 - a bigger number 12 right 12 left 12
148:43 - right 12 left let's try 20 uh 22 22
148:50 - down that's J 22 K that's up 22 J that's
148:56 - down 22 K that's up so pretty
149:00 - straightforward um but what you find is
149:02 - like you can really jump to where you
149:05 - want to go to so I wouldn't say that I
149:07 - overly have to use um uh directional
149:10 - motions but uh they are the basis uh uh
149:14 - of what to learn okay so hopefully you
149:17 - got that we'll move on to the next thing
149:18 - okay
149:22 - [Music]
149:23 - let us take a look at the go to motion
149:26 - commands and I want to point out I'm
149:27 - just going to get the pin tool out here
149:29 - look at where this letter is it is one
149:33 - key to the uh to the left hand's index
149:36 - finger so clearly this is an important
149:38 - command that they want you to know
149:40 - because if it's on the home row it's
149:42 - valuable real estate this is a command
149:44 - that uh you're going to be using quite a
149:46 - bit and I use it a lot so the goto
149:48 - command will go go to a specific line so
149:51 - if you type in GG that goes to the top
149:53 - of the document or the first line if you
149:56 - do capital G or shift G uh that's going
149:58 - to go to the last line now if you want
150:01 - to go to a specific line you type either
150:03 - 22 like the number of the line you want
150:05 - to go to and then GG or 22 shift G um
150:10 - and often I just do shift G but you can
150:12 - do either or um and that will take you
150:14 - to a specific line so just a reminder GG
150:18 - to the top shift G to the bottom
150:21 - [Music]
150:25 - okay all right so we're continuing on
150:27 - here now with the go-to Motions I have
150:30 - the same document open you can open
150:32 - anything you want on GitHub just find a
150:34 - repo press period and find a large
150:36 - enough file to work with we're using the
150:39 - uh boot camp from 2023 all right so um
150:42 - let's take a uh take a spin for these
150:44 - goto commands before we move on let's
150:46 - make sure we remember our directional
150:47 - commands so J to J to go down Down K to
150:51 - go up H to go
150:53 - left L to go right so I just want you to
150:56 - do that for a second and now keep your
150:58 - hand uh get your left hand on the on the
151:01 - keyboard and so make sure both are on
151:03 - the on the home row and I'm going to
151:06 - press GG to go to the top and then shift
151:09 - G to go to the bottom GG to go to the
151:12 - top and shift G to go to the bottom GG
151:15 - to go to the top and shift G to go to
151:17 - the bottom it's that simple okay a to go
151:20 - up J to go down g g to go to the top
151:25 - shift G to go to the bottom it's all
151:26 - just drills really if you think about it
151:28 - um so let's say we go to a very specific
151:30 - line I'm looking at maybe cluster name
151:32 - here I want to go to that line in
151:34 - particular so going to type in 262 shift
151:38 - G or let's go to Line 270 so I'm going
151:42 - to type in 270 GG just decide what
151:45 - you're more comfortable with if you want
151:46 - to do the number and GG or number shift
151:50 - G I apparently always do shift G and I
151:53 - did not know that it's just muscle
151:54 - memory for me so again let's go back to
151:56 - the top so we'll do GG to go to the top
151:58 - shift G to go to the bottom all right so
152:01 - an easier way to remember this is that
152:03 - because the G's are lowercase they feel
152:06 - like they're smaller so they should be
152:07 - at the top or the top of the document
152:08 - and then the G is the grown-up one so
152:10 - it's at the bottom of the document the
152:12 - shift G and that's why uh it's like that
152:14 - I'm not saying that's the logic behind
152:16 - it but that's how I like to remember it
152:18 - okay so there you
152:20 - [Music]
152:23 - go all right let's take a look at some
152:25 - word motions um and these are the most
152:28 - common ones there might be more than
152:29 - these ones but these are the only ones
152:30 - that I really know uh so let's take a
152:32 - look at them so word motions uh we have
152:35 - is W so move to the start of the next
152:37 - word we have e which moves to the end of
152:40 - the next word and B which moves to the
152:43 - start of the last word notice their
152:45 - position so if you notice here you can
152:48 - easily get to the W or e with a one
152:51 - single press cuz imagine that your
152:52 - fingers are here um and then for B I
152:56 - normally use I normally extend with this
152:58 - finger here so I'll go do this I'll do
152:59 - all of these word motions just with my
153:01 - left hand but again it depends on how
153:03 - far you can reach out for me it's not a
153:06 - big deal
153:08 - [Music]
153:12 - okay hey everybody it's Andre Brown and
153:15 - we're looking at word motion so there
153:16 - are three letters that we're focused on
153:18 - here w e and B so click anywhere in the
153:21 - document I'm going to go right to the
153:22 - start and what I'm going to do is hit
153:24 - the letter W so w is always going to
153:27 - move to the next the start of the next
153:30 - word now what's interesting here is that
153:32 - it moved to the colon because it's like
153:34 - a special character here and so it it
153:36 - thinks that that is the next word just
153:38 - understand programming languages are
153:39 - kind of funky so it's not always going
153:41 - to do what you think it's going to do
153:42 - let's go down to like something that
153:43 - looks more English readable and I'm at
153:46 - the start of theth if I hit W it's going
153:48 - to go to the start of the next word if
153:50 - we hit it again W it goes to the next
153:52 - word if I was to press two w it jumps
153:56 - two words right we see that modifier
153:59 - let's Press B to go back okay it's just
154:02 - the reverse
154:04 - right so now what would happen if we
154:06 - started in the middle of the word let's
154:07 - say we're in the middle of this word and
154:08 - we hit W it still goes to the next word
154:11 - all right let's try out e so e is going
154:15 - to move to the the end and I actually
154:17 - was wrong I said move to the end of the
154:19 - next word but it's going to be moved to
154:21 - the next closest end of the word so we
154:23 - hit e here it goes to the current word
154:26 - end and then the next end right all
154:30 - right if you try B you go here but
154:33 - notice if I hit W and b or sorry e and B
154:36 - it'll just keep flipping between these
154:37 - two all right so these will become more
154:41 - important later on when we learn about
154:43 - selecting so like later on when you want
154:45 - to select words you're going to be
154:46 - typing like V and then go to the end the
154:48 - word e to select exact words or you
154:50 - could do like two and then you might
154:53 - want to copy something particular but
154:55 - we'll get into that when we talk about
154:56 - visual mode but right now all I want you
154:58 - to be able to do is do W and
155:01 - d right so I'm hitting W
155:04 - here or we can hit e which goes the end
155:06 - the word we go B to go back all right so
155:10 - there you
155:11 - [Music]
155:15 - go so this is a command I wish that I
155:18 - would remember to utilize but I always
155:20 - kind of forget to do it and what it will
155:22 - do is it will join other lines to the
155:24 - current line and the key that we're
155:25 - using here is the capital J okay so
155:28 - indicate that that is capital here and
155:30 - it's on the home row so it's a very
155:31 - useful um uh uh uh command and so we
155:37 - have J will join the bottom line with
155:38 - the current line and then the next line
155:40 - is is 10 J so if you want to say the 10
155:43 - bottom lines join to the current line we
155:45 - can do that so it make more sense when
155:46 - we uh utilize it in practice okay
155:49 - [Music]
155:53 - all right so here I'm in my document and
155:55 - imagine that I want to bring a bunch of
155:57 - lines into one line so maybe a good
155:59 - example would be to write some code here
156:01 - actually we we'll leave that alone
156:02 - because we haven't really gotten into
156:03 - editing but I'm going to go here to this
156:06 - line of description and what I'm going
156:07 - to do is type uh type uh shift J and
156:12 - notice it brings it onto the current
156:13 - line so this is really useful when you
156:15 - have a bunch of lines and you just want
156:17 - to have a single thing now let's try
156:19 - something Lar so we're on line three and
156:21 - let's say we want to go down to line 17
156:23 - so 13 would be 10 14 15 16 17 sorry um
156:29 - 10 uh 13 so this is 10 11 12 13 14 so 14
156:33 - lines I'm going to type in 14 shift J
156:36 - and now they're all one line okay so
156:41 - there you
156:43 - [Music]
156:46 - go okay so we looked at goto line which
156:49 - which allows you to go all the way to
156:50 - the top of the document or the bottom of
156:52 - the document or let's say um to a
156:55 - specific line but what if you want to
156:57 - move on the horizontal access to the
156:58 - extremes well this is where these two uh
157:01 - Keys come into play um and I don't have
157:04 - a good way of defining these groups but
157:06 - the idea here is that dollar sign will
157:08 - go to the end of a line and uh the
157:11 - carrot that's what it's called The
157:12 - Carrot will go to the start of the line
157:15 - and if you know regular Expressions it
157:17 - makes sense because do dollar sign
157:19 - always selects the end uh end of of a of
157:22 - a document and uh or a block of text and
157:26 - carrot will always go to the beginning
157:27 - so if you know a bit about regular
157:29 - Expressions that kind of makes sense so
157:30 - let's go try that out
157:32 - [Music]
157:36 - okay all right so we're back in our
157:38 - usual documents I'm just going to click
157:40 - into the middle of this long line here
157:43 - and what I'm going to do is uh make a
157:45 - dollar sign so notice it jumps to the
157:47 - end I'm doing this all with my left hand
157:49 - and then have uh the carrot so you can
157:53 - see we can toggle back and forth because
157:55 - sometimes you just want to move to the
157:58 - start or the end but you don't
157:59 - necessarily want to uh insert um there
158:02 - because it'll be actually very similar
158:03 - commands that do the same thing but
158:05 - they'll directly take you to the insert
158:06 - mode Let's try a couple things so we'll
158:08 - go to the top GG shift G to go to the
158:11 - bottom uh and we'll go and do GG to go
158:14 - back to the top I want to go to four
158:16 - shift G to go to line four I want to go
158:18 - to the end of the document we'll do
158:20 - dollar sign uh we'll do carrot to go
158:23 - back to the beginning so we'll go a bit
158:24 - slower okay so bottom of the document
158:28 - shift
158:29 - G top of the document GG I really should
158:33 - have went slower probably sooner right
158:37 - let's go to line four so 4 G G I forgot
158:42 - to do shift G end of the line dollar
158:45 - sign start of the line carrot end of the
158:50 - line dollar sign to the bottom of the
158:53 - document shift G to the top top of the
158:56 - document GG so there we go now we have
158:59 - the
158:59 - extremes uh the most extreme movements
159:01 - in all directions
159:04 - [Music]
159:07 - okay all right let's learn about the
159:09 - replace command this will lets you write
159:11 - over top of existing characters so the
159:13 - idea here is that with uh the r command
159:16 - we can replace a single character or
159:18 - with capital r we can enter replace mode
159:20 - and everything that we will type will be
159:21 - replaced um this functionality is very
159:23 - similar to the insert key if you've ever
159:25 - used uh Microsoft Word back in the day
159:28 - and you had a Windows keyboard and you
159:30 - accidentally hit this button you know
159:32 - what I'm talking about here it does the
159:33 - exact same behavior so let's take a look
159:35 - at
159:36 - [Music]
159:39 - it all right so we're back in our
159:41 - document and let's go ahead and try that
159:43 - out so I'm going to go up here to theth
159:45 - and I'm going to type in R and so that's
159:48 - going to enter us into rep uh to replace
159:51 - that character and so I just press any
159:53 - other key like H and so now it's been
159:55 - replaced now it didn't say it was in
159:56 - replace mode because it's a single
159:58 - character um but I want to undo that so
160:01 - we'll go up to here to the top and we'll
160:03 - say edit undo
160:05 - right and so now imagine I want to just
160:09 - completely overwrite all this stuff here
160:11 - so what I'm going to do is um do shift R
160:14 - to make a capital R and I'm just going
160:16 - to say hello world
160:20 - I am
160:22 - overwriting all of this okay so you get
160:26 - the idea I'm and now notice down below
160:28 - I'm in replace mode to get out of
160:30 - replace mode I have to hit escape on my
160:32 - keyboard and I'm out of there let's undo
160:34 - that so I'm going to go here and say
160:36 - undo nose is going to do undo it per
160:39 - letter so that's kind of annoying um and
160:42 - so I'm just going to use the regular
160:44 - control Z to get out of that so just
160:46 - understand that um there is a separate
160:49 - do a letter for Vim but the thing is is
160:52 - that you can uh when you're using vs
160:53 - code you can undo that way if you are
160:56 - using G Vim uh you can also undo from
160:58 - the top again it just depends on what
161:00 - you're utilizing I'm hoping that you're
161:01 - following along here um with uh with
161:04 - Visual Studio code okay but uh there you
161:07 - [Music]
161:11 - go all right let's talk about the undo
161:13 - and redo command so undo and redo allow
161:16 - you to revert or reapply text changes
161:18 - I'm sure you are famili with undo so to
161:20 - undo it's the UK key all right and if
161:23 - you want to undo an entire line it's the
161:25 - undo line which I don't think I've ever
161:27 - used before but um now that we use the
161:29 - replace mode I think that might be
161:31 - something interesting for us to try out
161:33 - then we have the uh uh the controlr key
161:37 - so not shift R but
161:39 - controlr and that will allow us to redo
161:42 - something so let's give that a try okay
161:48 - [Music]
161:49 - all right so we're back in our document
161:50 - here and what I'm going to do is change
161:52 - some text so let's go ahead and do shift
161:54 - R and um we'll just type in hello
161:59 - world and I'm going to hit escape to get
162:01 - out of replace mode and now let's undo
162:04 - so I'm going to hit U to
162:07 - undo okay and notice that it took
162:09 - multiple undos there so let's try that
162:11 - again so I'm going to do shift R to go
162:13 - into replace mode look down below
162:15 - replace mode type in hello world
162:19 - all right and then I'm going to hit
162:20 - escape to get out of replace mode back
162:22 - to normal mode and I'm going to hit U to
162:25 - undo and undes uh it will do the full
162:28 - undo so again I not really sure what the
162:31 - shift U like the undo line is for but
162:34 - maybe if we made lots of changes let's
162:35 - try this so what I'm going to do is go
162:37 - ahead and and we'll say shift R and type
162:40 - in hello
162:41 - world all right and now what I'm going
162:43 - to do is hit Escape I'm going try shift
162:46 - R again I'm going say goodbye Moon
162:51 - and now I'm going to try shift U okay so
162:54 - that will undo multiple undos on the
162:56 - same line so that's probably what
162:58 - they're talking about um but let's say
163:00 - we wanted to redo something let's go
163:02 - ahead and do control r r on our
163:04 - keyboard and uh just understand that
163:07 - this might not
163:09 - work it might not work on um this
163:12 - because of the mapping so it's not
163:14 - working for
163:15 - me try command r
163:20 - and so this is where we might not have
163:22 - something says already the newest
163:23 - changes so I think it is actually trying
163:25 - but it's not working so what I'm going
163:26 - to do is I'm going to go ahead and do
163:29 - shift
163:33 - R okay and then hit escape and then I'm
163:36 - going to do undo and going to try
163:38 - control R
163:39 - again there we go so I'm doing U control
163:43 - r u control r
163:47 - u one thing I'm noticing is that if you
163:49 - look down here below it says already on
163:51 - the oldest changes it kind of shows you
163:52 - like uh the history of what like what is
163:55 - being changed so let's go just pay
163:57 - attention to this for a second all right
163:58 - so I'm going to go ahead and type in
164:00 - hello
164:02 - world Hit
164:05 - escape and I'm going to go ahead and
164:07 - make another change so I'm going to do
164:09 - uh shift R again and say goodbye
164:13 - Moon and his Escape I going to do it one
164:16 - more time I'm going to do shift R and
164:17 - say
164:19 - uh
164:20 - Ola uh
164:22 - Venus and hit escape to get out that
164:24 - mode and now I'm going to do is hit undo
164:27 - so now if you look down below it says
164:28 - one change before two and we'll undo it
164:32 - again and it says one change before one
164:35 - and then undo one change before
164:38 - zero so and then we do undo and then we
164:41 - get back to that so I never really
164:42 - noticed that before because this is
164:44 - probably what shows up in um only in Vis
164:47 - Studio code and not necessarily
164:50 - uh G Vim or Vim okay but yeah there you
164:54 - [Music]
164:57 - go all right let's take a look at the
164:59 - change command so this is a way of
165:01 - selecting and then deleting amount of
165:02 - text based on word motions so we have
165:05 - the C line for Change and the capital c
165:07 - to change the end of the line which I
165:08 - use a lot is the capital c one uh a way
165:12 - of combining it with a motion would be
165:14 - something like CW so change the end of
165:16 - the word um so that's an example right
165:18 - there you could change to the end of the
165:20 - last word or c g which would be Chang
165:23 - from here to the first line so remember
165:25 - supposed to be an e on the end there so
165:26 - just remember uh all of our motions that
165:29 - we learned that will move to places
165:32 - it'll work with that even with like
165:33 - let's say the dollar sign let's let's go
165:35 - practice that
165:36 - [Music]
165:39 - now all right so let's go ahead and go
165:42 - back up to the word the and I'm going to
165:44 - press the word c and so now I'm ready to
165:48 - change something notice that the
165:49 - character is is shown in half to
165:51 - indicate that it is ready to change
165:52 - something and I want to change uh I want
165:55 - to take out to the end of the word so to
165:58 - do that I'm going to hit e and so now
165:59 - that word is gone and it automatically
166:01 - brings me into insert mode so that I can
166:03 - change whatever I want to say like hello
166:06 - okay and so we'll hit escape and we'll
166:09 - hit you to
166:10 - undo all right but understand that
166:13 - that's what C does okay so C is about
166:16 - changing using and then using some kind
166:18 - of emotion so I want to click here I'm
166:20 - just going to click to Cluster here for
166:22 - a moment and imagine that I want to
166:23 - replace the word cluster and
166:25 - configuration so if we wanted to do that
166:28 - we want to get to the uh this letter
166:30 - here n so we want to uh go to the end of
166:33 - this word and then the end of that word
166:35 - and that's two away so what I'm going to
166:38 - do is type the word uh type the letter
166:41 - c okay and now notice that there's a
166:43 - half character to indicate that we are
166:45 - uh ready to make a change or do
166:47 - something and then type in two and then
166:51 - e okay and now those two words are gone
166:54 - I'll just type in hello
166:56 - world all right and then we'll get out
166:58 - of insert mode by hitting Escape we'll
167:00 - hit U to undo and so that's pretty clear
167:04 - um let's say we want to do change to the
167:06 - end of the word we can do c and then
167:09 - remember dollar sign will bring us to
167:10 - the end so we do dollar sign that brings
167:11 - us to the end of the word so I'm going
167:13 - to hit escape to get out of insert mode
167:15 - I'm going hit you to undo that now a
167:17 - more efficient way is just to do shift G
167:19 - so I'll do shift G now Capital I'm
167:21 - saying G right C Capital C so we'll do
167:25 - Capital C and that brings us to the end
167:27 - of the word so we'll hit escape again
167:30 - we'll hit U to undo and we'll do shift G
167:33 - so I use that one quite a bit when I
167:34 - just want to like get rid of everything
167:36 - at the end there and so I'll hit escape
167:38 - and undo so the idea is that you're
167:41 - trying to figure out the least amount of
167:43 - presses to do the thing that you want so
167:45 - imagine I want to get rid of lines 4 to
167:48 - 9 and then enter insert mode because I
167:50 - know immediately that I want to do
167:51 - something so we have 1 2 3 4 5 six six
167:56 - lines um so I'm going to
167:59 - try or sorry one two three four five I
168:02 - want to go down five lines so I'm going
168:03 - to type in C to
168:05 - change and I type in
168:08 - five okay and then I'm going to hit J to
168:11 - go down five lines and so I took out
168:14 - those five lines all right so I'll hit
168:16 - escape and undo
168:19 - okay but the point is that we're
168:20 - entering insert mode because we want to
168:22 - do something there so just think of
168:24 - those things that you can combine it
168:25 - with any kind of word motions if we want
168:27 - to go backwards let's say we want to
168:28 - change to the front of the line I'll do
168:31 - c and then I'll do uh carrot to go to
168:34 - the front Okay so Works in both
168:36 - directions un undo that imagine I wanted
168:39 - to go back uh just a single word I can
168:42 - do change C for change and then B for
168:45 - back okay hit escape to get out of that
168:48 - mode undo all right so it's not a delete
168:51 - it's a change the idea is that you want
168:53 - to enter into a mode to start typing
168:56 - something
168:57 - [Music]
169:00 - okay all right let's take a look at
169:02 - delete so we have a few I mean you can
169:04 - imagine what delete does but delete is
169:07 - going to do a few things so we might
169:09 - want to delete uh to the to the next
169:12 - word delete the next two words uh next
169:15 - to next two start of the words DD to
169:17 - delete the current line
169:19 - 5 DD to delete five lines uh Shifty to
169:23 - delete to the end of the line and then
169:26 - we have X which deletes the current
169:28 - selected character uh so whenever you
169:30 - delete something and I should have said
169:31 - this for change as well but anytime you
169:35 - uh uh you imagine that you're removing
169:37 - text like text vanishes almost like it's
169:39 - getting cut or deleted it's going to end
169:41 - up in the unnamed register which is the
169:43 - clipboard which which means the next
169:45 - paste action that you will use will will
169:48 - paste that thing we'll talk about that
169:49 - when we get to paste
169:52 - [Music]
169:55 - okay all right so we're back in our
169:57 - document and I want to go ahead to this
169:59 - line here for and let's delete some
170:02 - stuff so let's say we want to delete to
170:05 - uh this word here cluster so we have to
170:07 - go to the end of this one one 2 3 four
170:10 - so four to the end so we'll do
170:12 - D okay notice it it went half because
170:15 - it's ready to do something just like
170:17 - when we hit C and say 4 e now
170:22 - notice that we're not in insert mode
170:25 - okay so when you want to delete
170:28 - something and then immediately enter
170:29 - insert mode you're going to use C and
170:32 - when you literally just want to get rid
170:33 - of something you're going to use D
170:34 - because you want to stay in the mode
170:35 - that you want to be in otherwise you
170:36 - have to escape and that's an extra
170:38 - action right um so what I'm going to do
170:40 - here is hit U to
170:42 - undo and uh now let's try um lines
170:46 - because lines are more interesting I
170:47 - think so what I'm going to do is I want
170:49 - to get rid of line four so I'm going to
170:51 - do is hit DD to get rid of it okay and
170:54 - then I'm hit U to undo all right DD to
170:58 - delete the line U to undo now if I go in
171:02 - the middle of the word here like
171:04 - configuration imagine I want to get rid
171:06 - of just the end of the line so what I'm
171:08 - going to do here is Type in D and then
171:10 - dollar sign to the end of the line now
171:12 - I'm still in normal mode right so I can
171:14 - just hit u i don't have to
171:15 - escape but we could just do shift d
171:19 - which is going to be more convenient
171:20 - just like the shift C the shift d will
171:23 - delete to the end of the line so we'll
171:25 - hit undo there all right uh X is a
171:28 - useful one if we hit X it will just
171:30 - delete the Single Character so sometimes
171:32 - you just want to get rid of single
171:34 - characters I want to undo that entire
171:36 - line so we'll do shift U to bring those
171:38 - back if I wanted to um I think like
171:41 - delete the first next four characters I
171:43 - think we do 4X we'll try that out and it
171:46 - works I just guessing here because once
171:49 - you start to learn the patterns here you
171:51 - can start making up your own things that
171:54 - will work for you okay so hopefully that
171:57 - is clear but uh I just want to show you
172:00 - one thing we'll talk about this in the
172:01 - next video but the idea is that every
172:03 - time
172:04 - you uh Delete or change something it's
172:06 - actually going into the unnam register
172:08 - and it's basically like you cutting or
172:11 - copying something into your clipboard so
172:13 - let's say I wanted to delete this line
172:14 - I'm going to press DD if I wanted to
172:16 - bring that line back
172:19 - I'm going to type in shift p to paste
172:20 - above and it's back because it's the
172:22 - last thing in My Clipboard if I do shift
172:24 - p again notice it's in my clipboard okay
172:26 - so I brought all those lines back with
172:29 - shift
172:30 - p i want to get rid of these lines so we
172:32 - have one two 3 4 5 6 7 8 9 10 11 11 here
172:39 - down below so what I'm going to do is
172:41 - just type in 11 DD and now we're back to
172:45 - here okay so we'll see you in the next
172:46 - one ciao
172:50 - [Music]
172:52 - all right let's take a look at yank and
172:53 - pace so yank will copy text into the
172:56 - clipboard to be pasted later um and it's
172:59 - not really clipboard it's actually the
173:01 - unnamed register but I'm going to keep
173:02 - calling it clipboard because that's the
173:03 - easiest thing to think of it so imagine
173:06 - you want to yank a word Yank A Line uh
173:10 - yank the current line which will be
173:12 - capital Y so you might be starting to
173:13 - see a pattern that sometimes capitals
173:15 - means that it's applying an entire line
173:17 - or
173:19 - a double letter is is a line but um
173:22 - notice that y y and capital Y are
173:25 - redundant I don't think we checked that
173:27 - in well shift d went to the end of the
173:29 - line but definitely capital Y is the
173:32 - current line it's not like to the end of
173:33 - the line but we'll test that to make
173:36 - sure that's true uh for p we have paste
173:39 - before or paste after so above or below
173:42 - paste before and after makes sense only
173:44 - when you have yanked entire lines if
173:46 - you're copying individual words uh it
173:49 - doesn't work how you think it would work
173:50 - okay but let's go take a
173:52 - [Music]
173:55 - look all right so we're back in our
173:57 - document I'm going to go to this line
173:59 - here and let's try out yank so what I'm
174:02 - going to do is type in um actually let's
174:04 - go to a random line that we weren't at
174:05 - before like ALB Security Group I'm going
174:07 - to hit y y to yank the entire
174:10 - line okay so y y to yank the entire line
174:14 - and so now I'm going to hit P to paste
174:16 - so notice it pastes down below we'll hit
174:18 - undo if I do shift p it will paste above
174:21 - we undo P below undo shift p to go above
174:26 - so pretty
174:27 - clear all
174:30 - right now let's say we wanted to grab
174:33 - this line here I'm going to try shift Y
174:36 - and see what happens sorry shift Y and
174:39 - now we p uh we press P not now we P but
174:42 - we press P right uh that was kind of
174:45 - embarrassing but notice that it doesn't
174:47 - go to the end the line it copies entire
174:48 - line so it doesn't work like how C or D
174:51 - does where goes in the line but it takes
174:52 - the entire line so it's up to you
174:53 - whether you want to do y y or shift y
174:56 - but I find that I use this command quite
174:58 - a bit uh if we wanted to uh copy very
175:01 - specific words like Network and cluster
175:03 - we'll press uh y to get into yank
175:09 - mode now so notice that I mean it's not
175:11 - really a mode per se but notice that
175:13 - it's now half a character so it's ready
175:16 - to do yanking and so I want to get I
175:19 - want to go 1 2 3 so um 3 e to copy
175:24 - Network and cluster so now I'm going to
175:26 - do p to paste it and notice it's pasting
175:28 - in there if I do P or shift p it makes
175:30 - no difference so if we go up to this
175:32 - line which is empty if I do
175:34 - p okay it does not matter if it's p or
175:37 - shift p but that's how you do that and
175:39 - so often you know you'll want to do that
175:43 - uh let's imagine that we want to select
175:45 - um two lines we'll do two
175:48 - y y and then shift p and I'll paste the
175:51 - two lines we'll undo pretty
175:53 - straightforward
175:56 - [Music]
175:59 - okay all right so youve patiently waited
176:03 - and now we get to do aend and insert and
176:05 - append and insert are probably the most
176:07 - commonly used commands because often the
176:11 - whole point of a document is to modify
176:13 - to write and a and I are going to really
176:15 - play a role in that well so let's take a
176:17 - look at these command so these commands
176:19 - will insert will enter insert mode
176:22 - there's no append mode they're both
176:24 - insert okay so a is going to append
176:26 - insert is going to insert a is going to
176:29 - append to the end of the line and I is
176:31 - going to insert the start of the line so
176:32 - I have a visual here to help it makes
176:34 - sense imagine your current cursor
176:37 - position is on the E okay so if we were
176:40 - to press I it's going to put the
176:43 - cursor to the left of the curs uh to the
176:46 - cursor box okay
176:48 - that's going to be insert mode if you
176:51 - press a it's going to go after the
176:53 - letter okay after the cursor box if you
176:56 - press shift I it's going to uh put you
177:00 - to the beginning of the line in insert
177:02 - mode if you press capital A it's going
177:05 - to take you to the end of the line in
177:07 - insert mode and I use these all the time
177:12 - [Music]
177:15 - okay all right let's take a look at
177:17 - insert and aen so I'm going to just
177:19 - click my mouse here to uh maybe the word
177:21 - cluster and so we are hovered over here
177:24 - I'm going to make this much
177:26 - larger
177:28 - um just for this purpose here just
177:31 - because I want to play uh uh pay very
177:34 - close attention to what we're doing so
177:35 - I'm just going to make it really large
177:37 - here and so notice that my um cursor is
177:41 - blinking here on the C and so what I
177:43 - want you to do is press I to go to
177:46 - insert mode so now notice that it went
177:47 - to the left of it right and so now I can
177:50 - start typing stuff so like hello I'll
177:52 - just hit Escape okay and we'll sit undo
177:57 - so let's try that again we'll press I it
177:59 - goes to the left notice that we are
178:01 - insert mode down here okay and we can
178:04 - type in front of it okay I'm going hit
178:06 - escape to get out of that mode I'm going
178:09 - hit U to
178:10 - undo all right now let's go take a look
178:13 - at a so we'll press a and notice that it
178:16 - inserts to the left of the character why
178:18 - do they have both because it's all about
178:20 - efficiency right you want to again make
178:23 - the fewest amount of keystrokes to get
178:25 - what you want done here um so here you
178:28 - know we can type whatever we want I'll
178:30 - hit escape to get out of that insert
178:32 - mode and we'll hit you to undo now let's
178:36 - say we want to edit something at the
178:38 - start of the line where characters
178:40 - actually begin not the absolute start
178:42 - but the start line I'm going to do uh
178:44 - whoops undo sorry whoops whoops whoops
178:46 - whoops whoops it's very easy to mess up
178:48 - in Vim but we'll do shift ey and so
178:51 - shift ey will bring us to the start of
178:52 - the line where where there's actually
178:54 - characters it's not literally on on the
178:56 - actual start of the line but here uh to
178:58 - the stuff and so I can start typing
179:00 - stuff like Hello World okay I'll hit
179:03 - undo for that if I want to go to the end
179:06 - the line and uh start inserting I'm
179:10 - going to do shift a capital A and I can
179:12 - just continue on here okay we'll hit
179:15 - Escape undo so those commands
179:18 - extremely useful you'll be using them
179:20 - day in day out
179:22 - [Music]
179:26 - okay this is a very useful command I
179:28 - don't think it has a proper name but I
179:29 - call it line insert so line insert
179:32 - allows you to quickly create a new line
179:34 - above or below the current line and
179:35 - enter insert mode it's very simple it's
179:38 - the o key so it's uh o is going to
179:41 - insert uh a line below and enter Insight
179:45 - mode and then uh capital O will uh
179:48 - insert a line above and enter insert
179:51 - mode EAS way to remember this is that
179:53 - below and above both have an o in them
179:55 - that's all I can think of why they might
179:56 - have named it as o um but also the fact
180:00 - that it's really close by is another
180:01 - reason
180:02 - [Music]
180:06 - okay all right so we're back in um our
180:09 - document here I'm going to go back to
180:10 - this line here so imagine that I want to
180:13 - create a new line below and start adding
180:16 - to this list so what I'm going to do is
180:18 - is Type in
180:19 - O and I can start typing it even match
180:21 - the invitation level so I can just
180:22 - continue on where I was I'll hit Escape
180:24 - undo so we'll try that again we'll press
180:26 - o and I can add another item super super
180:31 - useful we'll hit undo imagine we want to
180:33 - go above we do shift
180:35 - o all right undo shift
180:40 - o Escape undo and I'm not always saying
180:44 - that but just remember that when we do
180:46 - this it enters inert mode okay you got
180:48 - to remember that certain commands will
180:50 - enter you insert mode and you have to
180:52 - hit that escape button afterwards uh but
180:55 - there you
180:56 - [Music]
180:59 - go all right let's take a look at the
181:02 - fine command so the fine command lets
181:03 - you quickly find and move to a search
181:05 - result I use this all day every day
181:08 - because it brings me to exactly where I
181:09 - need to be if you type in forward slash
181:12 - that's going to start that fine command
181:14 - it's going to move forward to the uh
181:16 - from your current position to the the
181:18 - key uh the word here which is hello if
181:20 - you want to go in the opposite direction
181:22 - you do question mark I rarely ever do
181:24 - the question mark because once you start
181:26 - searching you can always just um change
181:28 - the position which we'll talk about in a
181:30 - moment one thing you can do is you can
181:32 - also say where you want to end up after
181:35 - the match so if you want to um go to the
181:38 - start of the match so imagine that there
181:39 - is a word that you're selecting you want
181:41 - to be at the start of the word you do s
181:44 - and then you want to offset it by uh uh
181:47 - either plus or minus characters you can
181:49 - do minus two so you'd be two behind the
181:52 - front of the word if that makes sense
181:54 - and you can do Plus in the other
181:56 - direction e is for the end of the match
181:59 - um and so you can say go to the end of
182:00 - the match and then add four characters
182:02 - you can also offset by line so I can say
182:05 - plus three lines to go three lines below
182:07 - and what if you have multiple matches
182:09 - well that's where the N key comes into
182:11 - play so that will get your next match or
182:13 - if you do capital N let shift n it will
182:15 - go to the previous match okay
182:20 - [Music]
182:21 - all right so let's give this uh a spin
182:23 - so what I'm going to do here is I'm
182:24 - going to go top of the document I'm
182:27 - going to click into here I'm going hit
182:28 - forward slash on my keyboard now Look
182:30 - Down Below in the command line here it's
182:33 - it's waiting for us to put our our match
182:35 - in here so I'm going to type in the word
182:36 - hello I'm going to goit ahead and hit
182:39 - enter it did not find anything for hello
182:41 - so I'm going to type in for slash again
182:43 - and this time I'm going to type the word
182:44 - cluster because we have cluster here and
182:46 - notice we have one out of 11 match
182:47 - matches so notice that it's jumped to
182:49 - the start of the match I'm going to go
182:52 - ahead and hit next to go to the next one
182:54 - next to go to the next one all right if
182:56 - I want to go back I'm going to uh do
182:58 - capital N okay so shift n or n to go to
183:03 - that so pretty clear how that works all
183:07 - right now imagine that we want to um go
183:10 - to the next word cluster but we want to
183:12 - go to the end of that word so let's try
183:13 - that again so I'm going to type in
183:14 - cluster I did forward slash look down
183:16 - below forward slash
183:18 - cluster forward slash again and then
183:21 - we'll put an e and we'll hit enter and
183:23 - now we're at the end of the word if we
183:25 - hit n notice that it does the same thing
183:28 - it's going to remember that we want to
183:30 - go to the end of the word every single
183:32 - time I'll go back up to here let's try
183:34 - another one so we'll try for slash
183:36 - cluster to match for slash I'm going to
183:39 - do plus one line okay so now what I'm
183:46 - doing I'm hitting n to go to the next
183:47 - line line but it's jumping me to the
183:49 - next line I'll do shift n to go back so
183:52 - it's up to you whether you decide that's
183:54 - useful or not I don't really like that
183:55 - one but we we'll try this again so I'm
183:58 - up here I type forward slash cluster
184:01 - look down below I'll do forward slash
184:04 - again and we'll say the start of the
184:06 - word
184:07 - minus uh one okay so now look we're at
184:11 - the word cluster but one character to
184:13 - the left and if we hit n we'll do that
184:16 - but again for the most part you just
184:18 - type in hello whatever you want fargate
184:21 - and you just jump to what you want could
184:24 - you use regular Expressions here I
184:25 - actually have no idea let's give it a go
184:27 - so I'm going to type the word uh cluster
184:30 - and then I'm going to do uh period for
184:33 - matching and then I'll do period again
184:36 - so yeah I guess you can use reg X's I
184:37 - never actually use reg X's I usually
184:39 - just know what I want um and it'll work
184:41 - but I guess you can use regular
184:43 - expressions in there so that's nice to
184:44 - know but yeah there you go
184:51 - all right let's take a look at the
184:52 - substitute command so substitute is a
184:53 - command that lets you replace text in a
184:55 - file using regular expression I use this
184:57 - for um simple Replacements but if you
184:59 - find that this is hard a lot of times I
185:01 - just will use another editors uh find
185:05 - and replace I'll literally drag files
185:06 - into another editor just because this
185:09 - stuff is um hard but it works for simple
185:12 - stuff so let's take a look here so the
185:13 - first one is um first we're going to use
185:16 - colon to bring up
185:18 - command and then we're trying to say the
185:20 - context so if you remember back when we
185:22 - were learning about the Ed editor we had
185:24 - to um tell it to select certain lines
185:27 - and so here period represents the
185:30 - current line so we're saying uh on the
185:33 - current line we want to substitute the
185:35 - match of hello which is a regular
185:37 - expression we can have what weever want
185:38 - and replace it with the word world so
185:41 - and it will replace the first occurrence
185:44 - okay here we're saying on line two
185:48 - substitute the word
185:50 - hello and uh replace it with word now
185:53 - world now we want this to be case
185:55 - insensitive so ignore the fact that if
185:58 - it's Capital H or lower c h if it
186:00 - matches the word hello match the word
186:02 - replace the first occurrence on the on
186:05 - line two and ignore casing that's what
186:07 - we're doing here then we have a range so
186:10 - remember the range from uh using uh Ed
186:13 - so we're saying two comma five so line
186:16 - two to five
186:18 - replace the word hello with world and
186:19 - replace all occurrences G stands for
186:21 - Global and that's what it does here we
186:24 - have one comma dollar sign so here we're
186:28 - saying the entire document right replace
186:33 - hello with world all
186:35 - occurrences and we have a shorter one
186:39 - here so this percentage is just a short
186:42 - it says short cut or short cute it's not
186:45 - cute it's cut but this is the same thing
186:48 - as this so often I will just do colon
186:50 - percentage s and I'll be off to the
186:52 - races I don't know why I have a space in
186:54 - between here because you don't need a
186:55 - space um and that might mess things up
186:58 - but let's go take a look at using
187:00 - [Music]
187:03 - substitute all right let's learn how to
187:05 - use the substitute command so I'm going
187:07 - to go to line two and I'm going to make
187:08 - a colon because we want to enter a
187:10 - command in and I want to change
187:12 - something on line four let's change the
187:14 - word cluster so I'm going to type the uh
187:16 - the number four for line
187:19 - four okay and then we'll type in s for
187:23 - substitute forward slash and then we'll
187:25 - type cluster notice that it's matching
187:27 - cluster here so we know exactly what
187:30 - it's thinking about to replace um if if
187:33 - you want you can use regular Expressions
187:35 - so I can do
187:36 - period plus and it goes in the line and
187:39 - then I can put maybe a question mark to
187:40 - say don't be so
187:41 - greedy um but you know uh I usually just
187:45 - type the word that I want okay so you
187:47 - can use complex regular
187:49 - Expressions uh it's not going to replace
187:51 - with anything so we have to put
187:52 - something in here so we'll say hello so
187:53 - now it's going to replace it with
187:54 - hello okay and I'll hit enter and it's
187:58 - replaced cluster okay so we'll undo
188:02 - that now normally when I use it I almost
188:05 - always
188:06 - do uh colon and then I'll just do
188:10 - percentage because that's pretty much
188:11 - easy you always want to look at the
188:12 - whole document so imagine I want to
188:14 - change all the words that are cluster in
188:15 - this document I'm going to type in s for
188:18 - slash cluster
188:22 - hello and by default it seems like it's
188:25 - case in sensitive which is interesting
188:26 - so I'm not sure what it would be to say
188:28 - like match the case but it looks like
188:29 - it's going to replace them
188:30 - all but if I just hit enter right
188:35 - now and I did what did it do so we'll do
188:39 - uh GG to go to the top and replaced all
188:43 - instances so I didn't actually have to
188:45 - put a g there but this might be the
188:46 - implementation of Visual Studio code but
188:49 - generally and this is specifically to to
188:52 - regular Expressions usually you put a g
188:54 - here uh to do that the way I know that
188:56 - is like I'm not saying that this is the
188:58 - regular expression engine they're using
188:59 - but if we go to rub.com we want to
189:01 - practice regular Expressions normally if
189:03 - you have a a piece of text here like
189:04 - let's just copy a
189:07 - piece and I wanted to match
189:10 - cluster notice that it's not matching
189:12 - this one and so normally I'd have to say
189:14 - I here to match those two
189:18 - okay so just understand that uh regular
189:22 - expression engines will vary based on
189:23 - their implementation um if we used
189:26 - regular Vim this might be a bit
189:27 - different so what I'll do so I'm really
189:29 - curious I'm just going to open up G Vim
189:31 - really quickly in
189:33 - here okay so I got G Vim here I'm just
189:36 - going to copy this block here I just
189:38 - want to see if it actually acts the same
189:39 - way so I'm here I'm going to hit I for
189:42 - insert and then I'm going to right click
189:43 - and paste I'm going to hit escape to get
189:45 - out of this mode
189:48 - because I just want to test I'm I just
189:50 - want to test to see if this works
189:51 - properly so I'll do GG to go to the top
189:53 - and so what I'm going to do is do dollar
189:55 - sign here down below here and I want to
189:58 - do percentage
190:00 - s for slash
190:03 - cluster hello and then notice it only
190:06 - replac the first instance I didn't put a
190:08 - g on that so it only replaced the first
190:10 - one we'll do
190:14 - undo I think there's only one word
190:16 - cluster though so let's try try that
190:17 - again so we'll do colon percentage s and
190:21 - we'll say cluster hello and this time we
190:24 - going to put I here okay so replaces
190:26 - both so I didn't have to put a g on
190:28 - there but again you know uh you have to
190:30 - use these things and figure out what
190:32 - works um but I know that g is something
190:35 - that you can put on there as a command
190:37 - but notice that in this
190:39 - one you had to put the i in so just
190:41 - understand that the engine is going to
190:42 - vary okay and Neo might be different
190:45 - from uh Vim 9 versus dim 3 versus what
190:49 - vs code does versus whatever does um but
190:52 - yeah I again I just try to use the the
190:54 - find and replace when I can but I do use
190:57 - this for smaller uh substitutions
191:00 - [Music]
191:03 - okay let's talk about a special key
191:05 - called The Leader key which is by
191:07 - default map to the backslash you can see
191:09 - it over here all the way on the right uh
191:13 - normally your enter or your enter return
191:15 - key would be here so
191:17 - hopefully that makes it clear this key
191:19 - is specifically used for triggering user
191:21 - or plug-in defin shortcuts uh one that I
191:24 - use a lot is the nerd commenter plug-in
191:26 - hotkey which should be leader key
191:29 - CC um and you can map your own keys if
191:33 - you want to um set up the leader key so
191:35 - this is an example of um something that
191:38 - we could map some devs don't like the
191:40 - location of the leader key and we'll map
191:41 - it elsewhere like the space bar I leave
191:43 - it where it is cuz I think it's totally
191:44 - fine okay
191:48 - [Music]
191:51 - all right um so in this video we're
191:53 - going to take a look at the leader key
191:54 - what I'm going to do is go over to
191:55 - Janice because I just want to show you
191:57 - uh where there are some mappings so you
191:59 - get an idea of like how often these are
192:01 - used um and then we'll go set our own uh
192:04 - mapping for a key okay so I'll go back
192:08 - here to Janice and we'll just scroll on
192:09 - down and I want to show you
192:13 - here let they have leader ew leader ES
192:17 - and they have a bunch of commands to do
192:19 - a bunch of things so hopefully that is
192:23 - uh pretty darn clear uh we aren't going
192:25 - to be able to do things over here
192:27 - because we actually have to um update
192:28 - our vimrc file so we'll do this with uh
192:31 - GM G Vim here
192:33 - today and what I'm going to do is go
192:35 - ahead and say file open and we're going
192:37 - to open up that vmrc file and um I'm
192:41 - going to ignore this just say make
192:43 - changes no I don't care and so we had
192:45 - that plugin here before I'm just going
192:46 - to take out cuz I don't even want to use
192:48 - that plugin I'm going to go insert mode
192:50 - and what I'm going to do here is I don't
192:52 - know if I can make this larger no I'm
192:54 - not sure if I can make this window
192:55 - larger here the font it's kind of
193:00 - small select font
193:03 - here uh
193:06 - 14 16 here let's see if that's 18 is
193:09 - that a bit better there we go now we can
193:11 - see what we're doing and so what I'm
193:12 - going to do here is uh remap a
193:15 - key so so we have n no remap I don't
193:22 - know what n no means but I just know
193:24 - that that's how you start a remapping
193:26 - and so we'll do
193:29 - leader and we'll do B this will be
193:32 - something we learn about later is
193:33 - buffers but we're going to do this right
193:34 - now so we'll do
193:36 - buffers and then
193:40 - CR
193:42 - buffer space okay I've never bothered to
193:47 - learn what all the stuff means but I
193:50 - copy and paste them and it works so that
193:52 - is fine so I'm going to go ahead and hit
193:54 - Escape here and I'm going to do colon
193:57 - WQ which will quit out of GM I'm going
194:00 - to reopen
194:01 - GM you can do this wherever you can set
194:04 - a vmrc file and hopefully this works
194:07 - I'll bring this on over we've lost our
194:09 - beautiful font size we probably have to
194:11 - set that as a
194:14 - default and I'll make that a bit bigger
194:16 - still kind of
194:18 - small say 18 here 18 there we go that's
194:21 - better and so the idea is that if I
194:24 - press the leader key it was leader B so
194:26 - we'll try leader B okay notice that it
194:30 - triggered that buffer command because
194:32 - that is what we configured um and so
194:34 - I'll just hit enter so I'll do leader B
194:38 - and so that shows that there all right
194:41 - so that's how you would set that key but
194:43 - just understand that when you install
194:45 - plugin some of them will require the
194:47 - leader King you need to know where that
194:48 - is
194:49 - [Music]
194:52 - okay let's take a look at visual mode so
194:55 - visual mode allows you to select text
194:56 - from either yanking deleting or
194:58 - manipulation we have three uh modes here
195:01 - we have the visual mode which allows you
195:03 - to select multiple characters that's the
195:04 - regular V capital V which is for visual
195:07 - line mode for selecting entire lines and
195:09 - control V which is my favorite which is
195:11 - a visual block mode allowing to select
195:12 - vertically uh and by line so I think
195:16 - it's by line as well but we'll we'll
195:18 - find out here in just a moment
195:19 - [Music]
195:22 - okay all right so we're back here in um
195:38 - [Music]
195:47 - right I'm just using the the uh hjkl
195:49 - Keys here and this is what I want to
195:52 - copy then what I'm going to do is hit Y
195:54 - to yank and so now I'm yanking it says
195:57 - down here seven lines yanked and so if I
195:59 - do shift p I'm pasting that selection
196:01 - will undo okay you could also use that
196:05 - to delete so if I do V again and we go
196:07 - down I'm just using those uh hjk
196:10 - commands and I hit D that's going to
196:12 - delete them we'll undo that we'll try
196:13 - that again so I'll say V and I'll go
196:15 - down somewhere else anywhere doesn't
196:18 - matter and I hit um C it'll change and
196:21 - bring me into those modes so we can do
196:22 - our r c r d or Y or yank or delete or
196:26 - change
196:28 - right uh let's take a look at shift V I
196:30 - use this one quite a bit because if I
196:32 - want to select multiple lines I do that
196:33 - I just go up and down and it will always
196:36 - select all the lines this is useful when
196:38 - you want to yank a bunch of lines and
196:41 - then paste them above I find this faster
196:44 - than than having to figure out the
196:45 - number and then go
196:47 - 22 yank or whatever it's just easier to
196:49 - go shift V and just select what you want
196:52 - now what is really really really really
196:54 - useful is control V I find this to be
196:57 - extremely powerful H so imagine that we
197:01 - want to on this line insert something in
197:05 - front of here all like in this entire
197:07 - line right let's say we want to put um a
197:09 - dollar sign all the way down here so
197:11 - what I'm going to do is go do contrl V
197:13 - that's going to enter me into visual
197:15 - block mode and now want to hit J to go
197:17 - down
197:20 - notice okay notice that it's selecting
197:23 - vertically and so if I hit
197:26 - C I can now do dollar sign or type
197:29 - whatever I want
197:30 - hello and that is super powerful right
197:34 - so I would say that one's one of my
197:36 - favorite I think that if you're at the
197:37 - end of the line if you do that let me
197:39 - just see here if I do one space on the
197:41 - end here and I do um contrl V and I go
197:44 - down here it'll actually select all the
197:46 - ends of the line so I can then go ahead
197:49 - and say
197:50 - C it didn't exactly work we'll try that
197:57 - again okay for some of it's it's working
197:59 - for some of them they're cutting it off
198:01 - and again this might be an issue of
198:03 - Visual Studio Cod uh Vim implementation
198:06 - yeah but I don't think that would happen
198:07 - in regular Vim so let me go ahead and
198:09 - just try this out here for a moment so
198:10 - I'll copy this
198:13 - here I'll Escape hit I to go to insert
198:16 - mode right click past
198:17 - hit Escape I'm going to try that again
198:19 - so I'm going to do shift a to go to the
198:21 - end of the line I'm going to hit
198:23 - Escape I just want to get it a space
198:25 - okay and I'll try uh V and I'll go down
198:28 - and now this acts completely different
198:30 - notice that it's just like cutting right
198:31 - through it so just understand that the
198:33 - behavior again is going to change um I'm
198:36 - pretty sure I've used it somewhere else
198:37 - where it'll actually always go to the
198:38 - end of the
198:39 - line but
198:41 - anyway that's that so that is visual
198:44 - mode
198:48 - [Music]
198:49 - let's take a look at indentation because
198:51 - this is something we do quite a bit with
198:52 - code the leading white space can be
198:54 - adjusted based on the tab size
198:56 - indentation so indent line outward to
198:58 - the right indent line outward to the
199:01 - left you can use count to modify the
199:03 - amount of lines useful to use the visual
199:06 - line mode when you select your line so
199:07 - let's go ahead and give that a
199:09 - [Music]
199:13 - try all right so we are here in
199:16 - with Visual Studio code I'm going to
199:18 - click here to this line and imagine that
199:20 - I want to select uh the first seven
199:22 - lines honestly every time I use this
199:25 - command I always do shift V and go into
199:28 - visual uh visual line block mode or
199:30 - visual line mode which is what I
199:31 - recommend to do and so I'm going to go
199:34 - down to a few lines and now I want to
199:36 - indents indents so to make the arrows
199:38 - you have to hold shift on the period or
199:40 - the comma on your keyboard and so I'll
199:42 - make the right arrow or angled bracket
199:46 - and I'll move that way and I'll I'll
199:48 - select it again and I'll do dollar sign
199:52 - that way
199:54 - okay um and there actually is a way to
199:57 - uh get your selection back so if you
199:58 - lose the selection there is a way I
199:59 - didn't talk about that before but I'm
200:01 - trying to remember how do we get that
200:02 - back just give me a second and wow I
200:04 - cannot believe I forgot the command but
200:06 - if you type in G and then V that will
200:08 - grab the last visual mode so remember G
200:11 - and then V because I just wanted to get
200:13 - those again so what I'll do is type in
200:15 - three and then
200:17 - do the right arrow or right angled and
200:19 - it'll indent it three if I select again
200:22 - GV and then I want to do shift and then
200:25 - to the left it'll bring it back to the
200:27 - wall so pretty straightforward uh you
200:29 - can do individual lines so here I'm just
200:31 - doing individual lines I'm just doing um
200:34 - uh the right angle bracket left angle
200:35 - bracket but that's indentation but for
200:37 - the most part I'll do shift V and do
200:39 - that and I forgot about GV which is
200:41 - really nice to get previous selections
200:44 - uh in the visual mode so I'm not going
200:45 - to go back and adjust that we just just
200:46 - done it here but there you
200:48 - [Music]
200:51 - go all right let's take a look at
200:53 - Windows splitting so Windows splitting
200:55 - allows you to have multiple windows open
200:57 - on the screen at once so here's an
200:58 - example of us splitting a window and if
201:01 - we take a count we have uh one one two
201:04 - three and four you can split them as
201:06 - much as you want and sometimes you'll uh
201:08 - some some people look at my screen and
201:10 - they'll see like 14 split windows
201:12 - they're like how can you keep track of
201:13 - that and I'm like I don't know you get
201:15 - kind of used to it and I find uh Windows
201:17 - splitting extremely effective it's one
201:19 - of the reasons why I I will work in macm
201:22 - over Visual Studio code because the
201:24 - ability to split windows and have uh
201:26 - fine-tune control of it is extremely
201:28 - useful um so the commands here is we
201:31 - have control W uh which is the modifier
201:35 - that you want to press to to work with
201:36 - Windows always going to be control W and
201:38 - so we want to split horizontally we hit
201:39 - H want to split vertically it's going to
201:41 - be contr WV if we want to close the
201:43 - window it's going to be control WC or we
201:46 - can do Co and close to close the window
201:49 - if we want to move around between
201:50 - Windows we're going to do contrl plus W
201:52 - and then the direction um and the
201:55 - direction is going to be those hjkl keys
201:57 - okay so let's give that a
201:59 - [Music]
202:03 - go all right so I don't think we can do
202:06 - windows splitting in uh VSCO but we'll
202:08 - take a look here so if I do contrl WV
202:11 - oops cancel it WV it notice that that
202:14 - key wants to close the browser so that
202:16 - hcky is already taken up there and vs
202:18 - code is not going to split the way that
202:20 - we want our stuff to split so I'm over
202:22 - here um in uh vs code in the terminal
202:27 - I'm just going to go uh Vim I just want
202:28 - to open up the project here I think this
202:29 - one's messed up so I have to open up a
202:31 - new one
202:32 - here so I want to open up this uh
202:35 - directory that I'm currently in we'll do
202:37 - Vim period and that will open that up
202:40 - now this shows a directory because I've
202:41 - opened multiple files but I'm going to
202:43 - go down here and I want to open one file
202:46 - uh maybe not just yet but I'm using hjkl
202:48 - to move here but I'm going to go down
202:50 - here I'm going to hit o to open a
202:52 - directory when we're in this directory
202:53 - listing uh these keys are a little bit
202:56 - different okay so um o doesn't do insert
202:59 - above it it actually changes the
203:01 - behavior this is now o to open a folder
203:04 - and so I'm going to go here and I want
203:05 - to open up uh let's say banner ads all
203:08 - right so now it's split three which is
203:10 - kind of a mess it's just how the default
203:12 - directory Works normally people replace
203:14 - this with nerd tree or something else
203:15 - but what I want to do here is I want to
203:17 - get rid of these two other windows so
203:19 - what I'm going to do is going to do uh
203:22 - control W J to go down okay so now I'm
203:26 - in this window I'm going to do control w
203:28 - c to close that window but I want to I
203:30 - could do colon and close and so now I
203:33 - have one window and so often I will
203:35 - start splitting things so I might have
203:37 - like contrl WV control W or sorry
203:42 - control WS to split I think I might have
203:45 - said in in uh earlier hold on here I
203:48 - might have said here H for horizontal
203:50 - but it's actually S I apologize it's not
203:52 - I'm not going to go fix that video
203:54 - because H is already being used for
203:55 - moving left so that makes no sense but
203:57 - if we go here like um notice I can't
203:59 - click here so this is where um it kind
204:03 - of sucks because we're limited based on
204:06 - this and this is where G Vim becomes
204:07 - very handy because if I open up G
204:10 - Vim
204:12 - okay um this will be a lot more useful
204:14 - if we split here so I do control V contr
204:17 - s contrl VR S contr V notice I can split
204:20 - all day long but what's really cool is
204:23 - that I can go here and I can click and
204:24 - change my focus right and I can also
204:27 - drag these to be whatever size I want so
204:30 - this is where this becomes an
204:33 - extremely
204:34 - powerful tool okay so I have all these
204:39 - open here and so I'm going to do contrl
204:41 - W J to go down whoops sorry control W J
204:45 - to go down control w L to go right
204:47 - contrl WJ to go down contrl w k to go up
204:51 - and you got the idea so um I love this I
204:54 - use this quite a bit and this is one
204:57 - reason that again I will prefer to work
204:59 - in u g Vim or Mac Vim because I'm going
205:03 - to be more efficient this is even better
205:05 - when you have the nerd tree here or some
205:07 - kind of nerd like some kind of uh thing
205:10 - here but um the default one is not very
205:13 - good so maybe I'll just quickly show you
205:15 - what that experience is like as with
205:16 - nert tree so you can see how efficient
205:18 - it is um so I'm just trying to think of
205:21 - how we can do
205:22 - [Music]
205:25 - that and so maybe what I'll do is I'll
205:27 - just install Janice because that's just
205:29 - something really easy to install it's a
205:31 - lot of work to install um uh at least I
205:34 - always find it hard to install uh ner
205:36 - tree or something like that nerd tree
205:39 - versus B tree and nerd tree is one that
205:41 - was been around for a long time but a
205:43 - lot of people try to migrate away from
205:45 - it because nerd tree is not known for
205:47 - being very efficient when you have a lot
205:48 - of files um but for the most part I've
205:50 - never had many issues with nerd tree so
205:53 - I want to go do that so going to go
205:54 - ahead and grab Janice I apparently still
205:56 - have it here and I'm going to go ahead
205:58 - and just install
206:00 - it again you're just watching now this
206:02 - is more like Advanced functionality so
206:04 - you don't really necessarily have to uh
206:06 - do this but I'm just trying to show you
206:09 - uh how things become very powerful very
206:12 - quickly when you have the right tools
206:14 - installed and the right configuration
206:16 - if I get this working with G it' be
206:18 - really great but
206:21 - um doesn't want the dollar sign there
206:23 - but I'm not a Windows user so I don't
206:25 - know the best way to do it but I'm going
206:27 - to just install GM here and we'll just
206:28 - give this a moment to
206:29 - install all right so now it says it's
206:31 - installed again just watch so you can
206:33 - kind of get an idea but I'm going to
206:34 - open this up in
206:35 - vim and so now it's open and it already
206:37 - has nerd tree here and so right away I'm
206:39 - going to use the control W to move back
206:41 - and forth here and this thing now works
206:43 - more normally I'm going to hit o to open
206:44 - it up and then now I open a file o and
206:46 - so I can go between here and I can go
206:49 - here and say uh control W split and then
206:52 - I can go here and open up this file I
206:53 - can split this vertically and then I can
206:55 - go to this one um
206:58 - and uh I'm not sure why but when I'm
207:00 - when I'm using this I I kind of start
207:02 - forgetting the uh keys I'm thinking too
207:04 - hard about how it works but some of
207:06 - these Keys like if I want to control
207:07 - nerd tree I'm just going to go ahead and
207:09 - take a look at what the command is
207:10 - because for some reason I forgot how to
207:12 - do it and so here I think it says leader
207:14 - end to toggle it I'm not sure why forgot
207:16 - that but it's uh lader n and that will
207:19 - get rid of and bring that back up we can
207:22 - also uh search across files which is
207:23 - really useful so like there's
207:26 - um uh a key for search across files let
207:30 - me see if I can find it
207:32 - here um I'm not sure why again it's just
207:35 - like this is muscle memory for me but
207:37 - when I have to start telling you stuff
207:39 - then I completely
207:40 - forget and uh what is it contrl P or
207:44 - control t uh is it control
207:47 - T nope
207:50 - [Music]
207:51 - control contrl P I completely forgot I
207:54 - can't believe it um but what I'm looking
207:56 - for here is I'm looking for the uh the
208:00 - global search because that's there just
208:01 - give me two seconds to find it yeah the
208:03 - command I'm thinking about is the
208:04 - control P command so fuzzy find buffer
208:08 - mru tagfinder replaces the command T
208:10 - command so for users uh of command T
208:13 - Janice Maps control uh control P to the
208:17 - uh DT command which I don't really
208:19 - understand why it says DT but I would
208:21 - have thought been leader
208:23 - leader liter T So if I do liter T here
208:26 - liter
208:28 - T nope that's not
208:31 - it lader P nope what the heck is
208:38 - DT all right we'll try this capital D
208:43 - T nope but normally what I could do is I
208:46 - could search across all the files so uh
208:49 - maybe we'll just click into this I just
208:50 - think this is such a cool a cool thing I
208:52 - mean we have it in other things like um
208:55 - uh other things here but basically what
208:57 - it'll do is it'll bring up a search and
208:59 - so you can search across
209:01 - stuff so here they're saying like contrl
209:04 - P so yeah I guess I could do that here
209:07 - let's just say contrl
209:09 - p so now you can just search across
209:11 - files and say auditor but normally
209:13 - that's a that's a leader key so you do
209:14 - like leader leader T and and that would
209:17 - normally pull that up but for some
209:19 - reason it's pulling up this tab thing so
209:20 - maybe they've changed the configuration
209:22 - since I last use it but you can see how
209:24 - you could be really productive very
209:26 - quickly with this if you can just
209:27 - remember all the commands um but yeah
209:30 - this is uh this is what this is how I
209:32 - like to work but I'm going to go ahead
209:34 - and just quit out of that and do control
209:38 - q and we'll just keep quitting out of
209:40 - this there we go um but that experience
209:42 - would be again a lot better than G Vim
209:44 - but I'm not going to invest that time to
209:46 - learn how to configure that in Windows
209:48 - um if you want again use Windows as your
209:50 - primary platform and uh figure out how
209:52 - to hook up WSL and stuff like that
209:54 - you'll have to investigate that yourself
209:55 - but I'm going to just tell you if you're
209:56 - on a Mac it is so easy to use Mac vim
209:58 - and take advantage of this stuff
210:01 - [Music]
210:04 - okay all right let's take a look at uh
210:07 - buffer so a buffer in the context of Vim
210:08 - is a temporary memory being utilized for
210:10 - an open file every time you open a file
210:13 - you create a buffer and it's pushed uh
210:15 - it pushes the buffer uh it pushes the
210:17 - buffer onto the buffer stack buffers are
210:20 - only deallocated when you completely
210:21 - close Vim so if you have 10 open files
210:24 - you have 10 buffers and uh there are a
210:27 - few commands that we have here we have
210:28 - the ls or buffers command the same
210:30 - command we can uh pick a buffer by doing
210:33 - buffer and then the number or the file
210:35 - name we get the next buffer with B next
210:37 - B previous B first B last and then we
210:40 - can apply uh changes to multiple files
210:43 - basically buffer so like here's a
210:44 - substitute that's going to cross Lo
210:46 - multiple fire files here's what buffers
210:48 - look like here on the left hand side and
210:50 - you can remap the keys which some people
210:52 - do honestly I never mess with buffers I
210:55 - think buffers are probably useful before
210:57 - people had nerd tree or like some kind
210:59 - of way of navigating but now that I have
211:01 - that I I have no interest in ever uh
211:03 - working with buffers but um it's just
211:06 - the point that you build up a lot of
211:08 - buffers over time and only closes when
211:10 - you close the app we'll take a look at
211:11 - buffers okay
211:15 - [Music]
211:16 - all right let's take a look at buffers
211:18 - and we're not going to be able to look
211:19 - at this in vs code because it's just not
211:21 - a feature that exists so if I do colon
211:23 - LS or um that didn't really help that
211:27 - might have already been a command that's
211:29 - in here but if I do colon I have to open
211:32 - up a file to do this I lost the file
211:34 - that we in here we go but I do colon
211:36 - buffers notice it says this command is
211:38 - not yet implemented because it's just
211:41 - there are no buffers in Visual Studio
211:42 - code so it's not going to do the same
211:44 - thing if we go back over here and I'm in
211:46 - terminal so I'm opening Vim in terminal
211:50 - and I still have Janice
211:51 - installed but let's say I open some
211:53 - files I'm hitting up and down and I'm
211:55 - just going to open some files I'm just
211:56 - showing you this you don't have to do
211:57 - this yourself so look I'm just opening a
211:59 - bunch of files just a bunch of files and
212:02 - now I type in buffers this is all the
212:05 - stuff that open so and it's opened in
212:06 - the order that I did it I have no idea
212:08 - what these characters mean but what
212:10 - people used to do is that they used to
212:11 - not have this here on the left hand side
212:13 - they would navigate completely with
212:15 - buffers
212:17 - okay um and
212:19 - so if I go here um we could say like get
212:23 - next buffer stuff like that but anyway I
212:25 - don't do anything with buffers but the
212:27 - point is is that buffers are here um I
212:31 - don't know there's not much for me to
212:33 - say because I really don't use them but
212:35 - they are here and the idea is that you
212:37 - can move between them but let's take a
212:38 - look let's say what would happen if we
212:40 - did B
212:43 - next okay and then we can do B previous
212:45 - so that again that's just a way of
212:46 - moving around so we do LS look at the
212:49 - buffers uh we could try oh enter we'll
212:52 - say buffer 4 move to buffer 4 and that
212:55 - is a way of navigating around but again
212:57 - if you have a nerd tree or something
212:59 - like that or you have contrl P where you
213:00 - can search across files very easily with
213:03 - um like a hotkey value then you don't
213:06 - really um need that there okay so there
213:11 - you go
213:14 - [Music]
213:16 - all right let's talk about registers so
213:17 - registers in Vim are memory allocated
213:19 - for a block of text you can think of
213:21 - registers where your clipboard or undo
213:22 - history is stored and the one that I
213:24 - just really want you to know about this
213:25 - is why we're talking about registers is
213:27 - the unnamed register so whenever uh you
213:30 - use yank delete a put operation like
213:32 - change um or something like that that
213:35 - thing goes into the unnam register
213:37 - that's going to hold that text for you
213:39 - but there's other registers you have so
213:40 - you have the numbered registers name
213:43 - registers read only registers and
213:45 - special registers these ones here just
213:48 - how we saw buffer it's just numbers it
213:50 - just numbers them so you can figure out
213:52 - what it is and you can give it a the
213:53 - buffer name or so the register name so
213:55 - you can pick it out by its name then
213:57 - over here we have readon registers which
213:59 - allow us to um have selected text and we
214:02 - kind of used these before so remember we
214:03 - were using
214:06 - um yank last text no I I thought this
214:09 - might map to the other thing remember
214:10 - like the ranges and stuff but it doesn't
214:12 - but here we have like zero so we say we
214:14 - want the last y text we do zero or uh
214:17 - deleted text from the the ver the
214:19 - numbers uh back or uh here this current
214:22 - file name or whatever then there are
214:25 - special registers down here where we can
214:27 - search across stuff let's see if we can
214:28 - make sense of registers again I don't
214:30 - really use them but the way registers
214:31 - work is they start with this
214:34 - um uh double quotation so let's play
214:38 - around with them but they're not that
214:39 - important to know I just want again for
214:41 - you to know about this unnamed register
214:42 - and that that's where your stuff is
214:44 - going when you uh are deleting changing
214:47 - things
214:47 - [Music]
214:51 - okay all right so I left this open from
214:54 - last time because I can't use registers
214:56 - in Visual Studio code but we'll take a
214:58 - look at registers here so I believe the
215:01 - way they work is let's say we copy some
215:04 - text I'm going to go here and I'm going
215:07 - to go ahead and
215:08 - just uh yank this line and say y to yank
215:12 - it I did shift V and then y to yank it
215:15 - and then down below I'm going to do
215:19 - quotation
215:21 - and again I'm not really the best at
215:23 - figuring out registers give me two
215:25 - seconds okay first let's try the r
215:27 - command and see if we can see registers
215:30 - okay here we go so now we can see some
215:31 - registers and I think that we're seeing
215:34 - is the last command we copied so this is
215:37 - the unnamed register I believe because
215:39 - it doesn't have a number here and so
215:41 - it's going to um output uh that there
215:46 - when you use it right so if I did P it
215:47 - would it would paste that that value but
215:50 - I think what we can do is we can use P
215:52 - here paste in order to paste a register
215:55 - so if we do a quotation and then let's
215:58 - say um quotation and then one it should
216:02 - print out that so let's give that a go
216:04 - and see if that actually works so I'm
216:06 - just going to hit Escape here or enter
216:08 - and so what I'm going to do go up to M
216:10 - line here I'm going to go uh double
216:12 - quotation so I have to do shift
216:16 - and then we'll do what was the number
216:19 - two and then P okay that's not what I
216:22 - wanted because I I guess I don't
216:24 - remember what the number was and the
216:26 - number was
216:28 - uh it's actually one in this case we'll
216:30 - try that again enter here so go back up
216:33 - here I'm going to try double
216:36 - quotation one p and so it prints out the
216:39 - pry and so that's the idea it's kind of
216:41 - like a clipboard um but again I never
216:44 - use registers um I guess they're
216:47 - probably useful if if you could figure
216:49 - them out in a more advanced way but
216:50 - those are the more advanced things you
216:52 - should know about registers and buffers
216:54 - um and that's pretty much all I really
216:55 - wanted to cover it would have been nice
216:57 - to cover Mark um which allows you to go
216:59 - back to your mark position but um I I'm
217:02 - not really worried about that one okay
217:04 - but I'll see you in the next one okay
217:06 - [Music]
217:10 - ciao all right so I'm back and I just
217:12 - wanted to show you um something that you
217:14 - could utilize cuz now we're at the end
217:15 - of the um the course really and so I
217:18 - just wanted to show you that you could
217:19 - print out like a cheat sheet so you type
217:21 - in cheat sheet Vim I remember this one
217:23 - being around forever I swear that uh I
217:26 - know if this is the original one or this
217:28 - is the original one but this kind of
217:29 - looks like the one that I I'm used to or
217:31 - this one here and so these ones are
217:33 - pretty good where you can print them
217:35 - out um or uh this one looks pretty
217:37 - decent as well but generally the idea is
217:40 - if you print this out and put it to your
217:42 - monitor you now have a way to work with
217:44 - the stuff and basically you can just
217:45 - open this up and you can pretty much see
217:48 - how most of the stuff works and uh what
217:50 - would be really interesting is to take a
217:52 - look at Mark because we never used it
217:53 - but if you look here we have set
217:56 - Mark okay so that's set Mark and there's
217:59 - some way to go back to a
218:03 - mark so that might be interesting to
218:06 - find out so just give me a moment all
218:10 - right so I just like staring at this for
218:11 - a while but if you look here it says
218:12 - goto Mark is here with the the um
218:16 - uh single quotation so let's go give
218:17 - that a try for
218:19 - fun um I don't think this would work in
218:21 - Visual Studio code but we'll try this in
218:24 - um in the terminal still in Visual
218:26 - Studio code but I still have this open
218:28 - here and so what I'm going to do is I'm
218:29 - just going to go somewhere random so
218:31 - let's say I want to be here right here
218:33 - I'm going to type the letter M and then
218:35 - I'm going to give a a letter to indicate
218:38 - the mark so let's say I want to call
218:39 - this e that's Mark E so if I go all the
218:43 - way down here let's say I'm somewhere
218:44 - else like at the bottom of the page page
218:46 - if I now do single quotation and then e
218:50 - it should jump back uh uh to there now
218:53 - what's interesting is it didn't go
218:54 - exactly back to where I wanted to so
218:56 - I'll try that again so let's say I'm on
218:58 - this line here and I say uh Mark R and I
219:03 - go down below here and I do single
219:05 - quotation R it's going to the same line
219:07 - so not exactly what I want so if I look
219:09 - at this again there's probably a
219:11 - character here somewhere this says jump
219:13 - to mark this is go to Mark and this is
219:15 - jump to Mark so let's take a look what
219:17 - would happen if we um instead of doing
219:20 - the single quotation we did the back
219:24 - tick okay the back tick is this here
219:27 - it's the same thing where the Tilda is
219:29 - so if I now do till the r it's going
219:32 - back
219:34 - to kind of looks like where I was so
219:37 - let's go back on this o here I'm going
219:40 - to do Mark E I go down here I'm going to
219:43 - go Tilda e
219:45 - yeah it goes back so there we go it's
219:48 - not hard to pick up new things and
219:50 - whatever you want in Vim absolutely
219:52 - exists you just have to look up uh Vim
219:55 - plugins so if I go here there should
219:57 - probably be a website for Vim plugins I
220:00 - think Vim awesome is for a bunch of
220:01 - awesome
220:03 - plugins right but you basically can find
220:05 - pretty much anything you want okay so
220:08 - you just have to kind of go through that
220:09 - and find
220:11 - something and uh you know there's
220:14 - there's just tons and tons of stuff um
220:17 - but anyway there you go that's
220:20 - [Music]
220:23 - it all right there we go so that's the
220:25 - end of the course and what I want you to
220:28 - do is I want you to go and try to
220:30 - utilize them for 14 days the best you
220:33 - can in Visual Studio code which I
220:35 - imagine most people are using as their
220:38 - IDE or if you're using a different ID
220:40 - just see if you can turn on that mode
220:42 - and use those basic commands because
220:44 - you'll have the directional commands the
220:47 - the Motions the change replace the yank
220:49 - the delete uh the find which is very
220:52 - useful and try to figure out what works
220:54 - for you because what works for me is not
220:55 - necessarily what's going to work for you
220:56 - when using Vim everyone has a different
220:59 - workflow with vim and and what they want
221:00 - to utilize with it but um you know again
221:03 - it's it's going to be a long-term
221:05 - investment uh for you for a short amount
221:08 - of time and if you want to go more deep
221:11 - into Vim you can absolutely do that but
221:13 - if you want to stick with Visual Studio
221:14 - code and just use the key Bindings that
221:17 - is totally fine as well but there you go
221:19 - ciao

Cleaned transcript:

hey this is Andrew Brown and welcome to the start of this Vim course and I want to tell you why you'll want to learn vim and the reason I want to teach Vim is because I I truly believe that it will be a huge upgrade uh to your workflow it's just going to speed things up uh tremendously and let you compete with people that if if you can't compete with them in terms of uh their their knowledge base you could compete on them at a just pure speed level and so let's get into why we want to learn Vim so I'll get my head out of the way here here okay and let's talk about the first points why we want to learn Vim the first is greater output and focus so you'll be able to focus on what you want to do instead of visually looking where you need to be and I think this is a big thing that I noticed for a lot of people that are learning um how to program or doing technical things that uh you know require a lot of keyboard movements but the idea is that when you are um always focused on thinking about where to move your mouse as opposed to just uh pressing a button uh you are you're losing your focus because you're now trying to coordinate where something's going as opposed to just something happening um so I think that is something that's very important is you'll get Focus back uh you'll be able to write Faster by multiple factors giving you a Competitive Edge to your non Vim peers my old boss Pablo he uh went to Computer Science school where I did not he had um he was able to build like realtime strategy games all these kind of things but the thing was is that at the end of the day it's like he could not move as quick as I could um and so I could um ship faster and and have more time to write code whereas he might have had better comprehension of technical things but uh you know his output was significantly lower than mine another thing would be less rist strain so Vim uses the least amount of hand movements to accomplish taas tasks and greatly reduce injuries such as carpal tunnel syndrome uh my old founder Ty um so he did not use vim and I used vim and he actually liked emac in particular but when he would code emac requires you to use a lot like it has it's all hot Keys too but you have to use the control key and the ALT key and those a lot all the commands are built around that and so you know he got such bad carpal tunnel he'd have the wrists I think he was even thinking about getting surgery whereas I never had issues and I again would output a lot more than he would so I think that's another Advantage is that if you want to do this long term you want to invest in something that's going to uh put the least wear and tear on your hands which are your most important tools when working in Tech uh it's portable so when you are remotely logged into a Linux machine you have the most powerful IDE to expediate your troubleshooting or configuration needs and basically VI or Vim is installed on most Linux o distributions by default and it's super easy to install and it's generally very very small it's the original one at least was written in C so so the idea is that you can pretty much install it anywhere that Linux is um and you can install it on Windows and other places as well but the point is is that it is super easy to install and generally always is installed or at least some version is installed um okay and another reason why you should learn Vim is because you have to there are going to be situations that you are forced to using Vim or you stumble into vim and you might have seen those uh very funny memes where people are talking about they ended up in vim and they got to quit we have we have that in a future slide here but um that's an that you can run into and most Linux distributions and I know the x is missing here where's it supposed to go Linus Linux there we go Linux o distributions by default set their Text Editor to Vim so you might end up opening a file or trying to commit a file then boom you're in vim and you don't expect to be in it so having basic navigation is very important and then some programs like the man command will use VI style commands for navigation so again learning those basic commands might come in handy when you open up a program as not an editor but it's using the same style of commands and it's the only way you can navigate it so that is a reason why you want to learn Vim so those are my reasons why but next we'll set up some expectations and goals okay all right so I just want to set some expectations and goals for this course because I don't want you treating this like a certification exam where uh you have to study forever I want you to acquire skills extremely quickly in a practical way that's going to serve you for a long time so uh just understand that we're going to cover more than uh just necessarily jumping in and learning the Vim commands we're going to do some additional stuff but it's going to benefit you but the point is you don't have to memorize it okay so let's take a look at what we're talking about here so the first thing is that I want you to understand the history and evolution of Vim because this is going to explain the origin of syntax and commands where there's just like funny things that you're like why is this here or uh you know why does the command work this way or it's written this way and if you have a a small understanding of the history um and you can just remember some key points you'll know why it is the way it is and that will help you remember how to use it if you do encounter it um another thing is that I want you to see how powerful and portable Vim can be so if you do decide to adopt it as your as your primary editor or you're in a situation where all you can utilize is VI or Vim that you can get the best out of it if you choose to go that extra length but again it's not important for you to fully commit to VI in this um okay but the thing that I really want you to get is fluency and core viim commands for everyday scenarios uh for development or devops uh I'm not sure what it's supposed to be in for that doesn't make any sense but the point is is that I want you to gain fluency and at the end of this course you're not going to be fluent but you're going I'm going to step you through all the stuff so that you can then go practice so it's going to be up to you um to then utilize it dayto day I'm not asking you to do drills or anything fancy but to just try to use it every single day when you are programming or scripting or going into servers uh whether that is for your own personal uh uh projects or if you're doing this uh you're already working a tech role and you want to do this uh with your current work but it really only takes 10 to 14 days even less depending on how how much you commit to it but the point is is that this is a very small commitment we're looking at 1 to two weeks of commitment of just regular use that will last you for the rest of your life so I strongly suggest that you put in that time because it is going to again be a huge payout for you uh in the long run on uh for your risks for your productivity uh just uh your ability to get things done okay so there you go now if you've never really used Vim you might have some uh preconceived uh uh misconceptions of what Vim is because a lot of people talk about how it's super complex and super frustrating to use and they'd like to avoid it as much as they can but I can to tell you that Vim is actually not that hard to learn it does not take too long to learn um but the thing is that if you know nothing it feels extremely difficult at the start and you are having to build muscle memory so there's a quote I don't know who it's from but there's a quote that kind of fits this which is people fear what they don't understand and hate what they can't conquer so it's just the fact that there are some people out there that have not committed any time and their first experience with how frustrating it is which is like instantaneous is so frustrating that they're just like nope no thank you I don't ever want to do that and so there's a bunch of memes online that make fun of this so we have trying to exit Vim uh we we have why do use Vim he says you wouldn't get it One does not simply exit Vim exiting Vim like a book dedicated just on getting out of it and then someone saying like they're going into vim and then they can't get out of vim and then the idea is that we have like an alien photo of uh trying to communicate basic commands about how to get out of Vim so you know you get the kind of idea that um you know generally again people that don't know it really don't like it um but you know we'll get over that hump extremely quickly okay but yeah hopefully that was just fun to look at some memes and let's go jump into the history of where Vim comes from okay all right let's talk about PDP 7 so this stands for program data processor 7 it is a micro computer created in 1964 by a company called digital Equipment Corporation so deck and it was the successor uh uh to the PDP 4 which is uh you know a previous computer there and so there's an example of one you might be asking Andrew what does this have to do with vim and trust me it has everything to do with Vim uh but we'll take a little bit time to get there you don't have to memorize any of this stuff just enjoy and and just absorb what you can by uh watching the video okay so PDP 7 specs where it was a 12bit machine and so it was able uh to process data in 12bit chunks um I not sure how that's different from Modern machines but it sounds like very little amount of bits uh its memory could be between 4K to 12K the reason why there's a range is because was modular so just like how you buy your MacBook Pro or any kind of expensive laptop um you know it ships with a a small amount of Ram or memory and you can increase it modularly so I like to think I'm not sure this is the case but I like to think that these are the the RAM chips here so four 8 12 I don't think that's true but I think that would be funny if that was the actual case um so the processor had a simple instruction set also known as an Isa which supported data movement uh a a Matic operations logic operations the control flow um I imagine that it's simpler than even more modern um processors or instruction sets that are out today um the PDP 7 did not ship with an operating system so deck would provide a toolkit which companies could then use to Aid in building programs or the operating system okay so there was no OS with PDP 7 and this is going to play into our story here um but the PDP 7 at the time had cost $72,000 USD in 1964 so maybe near the start of when Star Trek started on TV uh and so in today's money that'd be 0.5 so half a million dollars today it was considered cost effective compared to larger mainframe computers at the time so just notice that we called this a micro Compu so you can only imagine what a Mainframe computer uh must have been it must have taken up a whole Warehouse or something but that's the PDP 7 but yeah PDP 7 is very important to our story okay so uniplex information Computing systems also known as Unix is an operating system created at Bell labs in 1969 so this is what 5 years after uh the PDP 7 was introduced and on the right hand side uh this is actually a simulator pdp11 that might be fun to try out so there is some kind of simulator here um and you can experience it but at the time in 1969 it would have not looked like this because they did not necessarily have monitors to work with uh Unix so the U input and output was a different system which we'll talk about later but let's talk about the features of Unix so the first thing is that there was a kernel probably heard of kernels before and these manage the core components I like to think of them as like drivers but that's not exactly accurate um but this is where you have memory processing power profuel devices Process Management file management Hardware communication the really lowlevel stuff you never want to touch yourself then we had the file system so this was called um the Unix file system ufs and I'm not sure but Unix might have been um born out of this file system so I think that might have came first and then everything else got built around it then there is the shell so that's the command line interface which is the thing that we see on the right hand side but again uh that interface would have been uh not a monitor but something else and then we had utilities and tools that it shipped with so these are small tools which input and output could be chained together using an operator that uh that used the pipe character um and if you've done any bit of Unix you seen these think of the tools that are bundled into Linux or Ubuntu by default you probably seen it like Echo man cat you probably heard of them before or you know them pretty well it had multiuser and multitasking and so you know why does Unix why did they want to make Unix well the first reason was that we talked about PDP 7 doesn't ship with an operating system right so if if if Bell Labs said to ptb7 they're going to have to code something themselves but the thing was they actually already had an operating system it was called uh the the multics I think I'm pronouncing it right over here I'm going to get my pen tool out here the multic operating system but uh Ken to Thomas and Denise uh Dennis Denise I was going to say Denise Richie which is actually a um a Star Trek actor or actress but Dennis Richie using a PDP 7 built Unix out of frustration of Bell's lab's more complex uh multic operating system and it was built and it wasn't well maintained and they just said we don't want to use this junk we want something similar so they built out Unix if you've never heard of bell Labs Bell Labs is a subsidiary of AT&T and they purchased a PDP 7 machine from deck uh which Unix was built for so that is the relationship with the PDP 7 okay uh so Unix was successful because it was written in the C programming language and C allowed Unix uh to be a portable OS where where wherever C could run so could Unix but it wasn't a coincidence that it was written in C because uh Dennis Richie who worked at Bell Labs created the language C so he created the language C and then wanted to use it for Unix so that kind of just ties it all together okay so yeah that's Unix all right so something I thought would be fun is if we could start up uh Unix version one and it's really actually hard to find an emulated version even though it ran a PDP 7 people were suggesting that it was never licensed for free and so probably the only thing we could simulate would be a pdp1 and then get uh that on there but I don't want to go through that hassle I just want to experience Unix one as it was the best I can and so somebody here has created a Docker file supposedly that will allow to run um that addition so what I'm going to do is go ahead and see if that actually works so it says based on the Unix first edition June 1972 source code which is over here and apparently that's all here just on GitHub which is kind of cool but what we'll do is we'll go ahead and we'll need some kind of Docker environment now if you don't have Docker don't worry about you just watch me do this for fun but um I'm going to use G pod and G pod has Docker installed code spaces does as well so whatever thing you want to open up you could also even do this probably um on AWS if you were to spin up um a container with Docker installed or anything but anyway we'll go ahead and we'll spin this up and take a look here it's probably just the easiest way to do it so I'm going to SP up an environment we'll be back in just a moment okay all right so um I spun up uh this here and I'm going to go and all I did was click on this repo I have the git pod um uh extension installed so if you type in git pod Chrome extension you install you'll get a button here or again you have to figure out how to open yourself but the point is once you have Docker installed you just take this command as such uh which will interactively allow us to uh connect to it and it should download the image and run it and all that stuff so we'll go ahead and try this out and we'll hit enter so it's pulling the image pretty cool and so I'll just wait for this to pull and then start up okay and right away it's asking us to log in so I guess the question is how do we log in now type root at the login for the prompt so we'll go ahead and type this type in root and so now we're inside of Unix so we're literally using the first first version of 1972 Unix okay so the question is what is available here because I'm really curious what would have existed at this time if we type in LS we have LS do we have PWD so print working direct directory does not exist um would di exist nope okay so can we do we have clear nope clear is not a command which makes sense because at the time they wouldn't had visual screen so why would you need to clear anything if there's no terminal right um and then whoa we have a bunch of output here I wasn't expecting okay so oh I just wanted the output tab I think it's fine we'll go back to terminal so that doesn't exist so what commands would have existed back then let's go ask chachy PT here because I'm really curious like I I don't even know I I've never used Unix one so what commands existed for Unix one let's go ahead and ask it archive Li Library manager the assembler cat change directory L replace with CD that's kind of interesting so I'm going to type this again LS so we could say change directory and go into Temp and then LS that's kind of cool we have add the line editor we have find Ln LS we know LS we can make a directory we can move for files print files so not a whole lot I'm not sure if there's more than this but that's not a whole lot um we get the time let's go ahead and type time but notice that there is no VI there is no didn't get any time here there's no VI and there's no Vim okay so on this there is no means to actually edit files because if we wanted to create a file that would be tricky there's not even an echo is an echo let's find out Echo hello okay so that apparently does exist um so I wonder if I could pipe out a file so if we do Echo and this is the pipe we're talking about it is this symbol here that appears above your return where there's the backlash it's the shift it's the vertical line I just wonder if I can make a file saying hello.txt does this work uh maybe not LS I think it's sorry I think it's Echo oh it's mucking up here uh Echo hello oh it does not like it if I back space out oh I can't even make mistakes okay we'll try this again Echo hello this hello.txt hit enter oh did output the file we type LS um so it lists out the directories but I don't see the file anywhere is it there let's type in cat hello.txt cat hello.txt so yeah I don't know it seems pretty hard to use but at least we get an idea that it's more limited there is no VI let's type in VI here is it in here yeah there's no VI and so we'll have to worry about the next step but that's all I wanted to show you for fun okay let's talk about what is Ed so when we were looking at the Unix emulator we saw that there was a line editor called Ed and so Ed is a text editor built for the Unix operating system in 1973 um which is confusing because the Unix version we had there was 1972 so it does understand there's some leeway in terms of these dates here because they're not always very clear at least to me um from what places uh State their sources Ed was um uh the first three parts of the Unix OS in 1963 so obviously existed 10 years prior or was created in that 10e period the three parts being the assembler the editor in the Shell we saw there was an assembler there I think it was like the uh ASM command or something like that and then Ed is the editor and the shell is actually the interface that uh we were working with um we interfacing with it and so here's an example of us um uh using Ed it says Ed fstab I don't remember what fstab is if that's the file name or something else I think it yeah maybe we're editing a file called fstab that's what it is yeah and uh file system something I'm not always great with storage with Linux but anyway so Ed is a line oriented text editor and is challenging to use because you cannot visually see how you're editing your text files what do we mean you can't visually see well the thing was back then they didn't have monitors so how did they get input and output well this was via uh uh teletype machines and so teletype machines uh were basically like typewriters where you'd enter input into the typ so you type it in hit enter it would then send it to the machine and then the output would literally get printed back on the paper hence why the command is called The Print command because it literally printed on paper um and so Ed is is part of the poix and open groups standard of Unix OS so now when we talk about Unix we usually talk about as being an open group standard as opposed to the operating system itself um meaning that most or uh most versions of Unix space operating systems carry this Edition okay so we can open up any edition of Unix and it pretty much always has Ed so that's the the most Bare Bones editor that is shipped um with Unix okay but why don't we use Unix that or sorry Ed if it's with all them well it's because it's very hard to use because it wasn't designed for monitors but let's take a look at some of the commands so here's an example of us using Ed and so what we would do is we'd press a because imagine you're on a on a keyboard right or sorry like on a on a typewriter and you want to send a command in and you want it to be as efficient as possible you don't want to type out a bunch of stuff so they made like single letters indicate that you're starting a command so a uh would bring you into input mode meaning that you're already now to to append each line and so then You' press a hit enter and then the computer would know okay we're input mode and then you'd enter your uh enter in align hit enter enter it Al line hit enter enter it Al line hit enter and it would add it to your file and then when you wanted to say it was done you'd give it a period okay just like at the end of a sentence you'd have a period on a single line by itself and it would then go back into command uh command mode or normal modee whatever you want to call it so depending on the mode these Keys could change the behavior so obviously when you're input mode a does not it just acts as a regular a right so just understand that okay so now if you weren't in input mode and you were just in the normal normal or command mode and you press period it would actually get it would print out the current line okay so that's what I'm talking about where you have these modes and it changes the nature of the keys now let's say um you wanted to print all the lines well the way you do it is you'd enter in one for the first line then command line mode or command mode you give it a comma and you'd say dollar sign and dollar sign is part of a regular expression so end of end of the line and then P for print so we have one which represents the first line because it's in position one comma so that's setting a range operator dollar sign represents the last line it's a reg X thing and then P which is a lowercase p here which will print the range of stuff okay and the reason I'm showing you this is because this actually comes up later in Vim uh uh not like you don't ever have to write it in but I'm just saying like I saw it I was like oh ha that came back to Ed so this is where we're kind of seeing the history here um so now let's take a look here if you wanted to um write and quit what you would do is you'd have to type in WQ and then the name of the file and that's how you would uh save and quit while in Ed mode okay so if you've ever used Vim or V and you saw the WQ command it's coming all the way back from this tool here so there are many more commands such as line changing joining lines regx search reg regx substitution and more uh we're not going to get that much into it because this program even for me is challenging to use um but again it was much more efficient than having to uh feed paper into machines because that was the other way that they um they would get data into a computer they would like literally punch holes or they'd have um uh tape or other things to feed information in so uh obviously a typewriter was more efficient at the time okay all right so I just left this environment open of us running Unix because what would be interesting to see in Unix one is the Ed so it says here that we have Ed where is it here uh Ed right the line editor so let's give it a go so what I'm going to do is type it Ed and then we'll give it a file called um just in case hello already exists there I'm going to type in um and I'm not sure if my G pod's messing up I'm just going to refresh here because sometimes I have to refresh it it's just the nature of G pod and I'll just let the terminal reopen here yeah okay so we're back here and let's see if it acts a bit normal now go back to terminal tab oh no it's not so I'm just I'm G to just stop this um this Docker container here so on the right hand side I have it right I'm just going to stop it and come on Docker you can do it there we go I stopped I'm going to start it up again so just so we have a a fresh experience here and so I'll type in root to get into Unix one and let's go and create a new file so we're going to type in ed for Ed and we'll type in hello.txt and so now we are in the editor I do not know why it starts with a question mark okay but let's try the commands that we had over here and and see what we can experience so let's go type in a enter and I'll say this is my whoops I did not mean to go to the next line this is my second line enter this is my third line which it might not be the case I don't know there's some kind of key I must be hitting that it doesn't like I think it's the back slash you're not allowed to go back but anyway that's fine I will hit period and now I want to see my current line which shows a question mark so that's not very useful um so I'm going to type in WQ or just going to type in Q sorry q and see if I can quit so I've actually just quit we'll try try this again so we'll type in Ed hello.txt and this time I'm not going to hit backspace this thing does not like me backspacing out whatsoever I'm going to quit again hold on here quit there we go so I make no mistakes Ed space hello.txt enter we'll type in a I'll just say this space is the first line period I'm not used to not making any mistakes and then we have this is the second can't fix it can't fix it Line This is the fourth line all right and type in Period okay so now we should be back in a command mode we just have to remember that right I'm going to press period and show it shows us the fourth line so now let's print out all the lines I'm going to put one comma and let's do two first and then do p to print it so it prints the first and second line we'll do one comma dollar sign P hit enter and that is the fourth line we type in WQ space hello.txt enter and I'm not again not sure why we have a question mark here we'll type in Q did it save the file I'm going to type in cat hello.txt cat hello.txt LS and uh I don't know maybe we can't save the file in that directory I don't know but that is kind of the experience of it so I mean hey we kind of made it work but let's go take a look at it now in Ubuntu so I'm going to go and just stop uh this container and we can do this here in uh in in um giod but I'm actually just going to go into like anist account or something you can spin up whatever you want I'm just on windows so I can't show my local machine but if you're on a Mac you can just open up your terminal and do this but I'm just going to log into here just give me a moment all right so I'm in my ad's account you could use Google you can use um Azure doesn't matter as long as you know how to launch an ec2 instant or sorry a virtual machine and I'm just going to use the buntu as the Baseline here so I'm going to go here and say um launch an instance so we'll go ahead and do that and I'm going to say my web server and you'll have to know how to get into your machine so if you've never done that before you know you know use something that you're familiar with launch some kind of auntu system that you know how to utilize and so I'm going to go to auntu and I'm going to choose a T3 micro here didn't think we'd be doing any Cloud did you and we'll uh you can choose a key pair I don't like launching this with a key pair what I like to do is I like to launch this with an IM profile and I have one called uh ec2 SSM roll all this Ro does is allow me to use sessions manager so if I go into rolles here okay and we go over to rolls SSM roll and I go into the actual permissions here which is I all I'm doing is adding this one here this one doesn't need to be this one I think I added that for some tutorial but all we need is the Amazon SSN manage inance core so if you want to create this Ro yourself you just go create rooll say ec2 I'm not going to fully created but I can just show you some of the steps and we say uh core manage instance you go name it save it right you come back over to here to your launch instance you'd refresh and you'd select that rule that's all that thing is doing so I'm going to go down below to the ground I'm going to launch this instance and I'll just launch let it launch in the the default uh place I do not want it with the key pair I'll go launch that and we'll just wait here a moment okay and just to be fair if we end up having to utilize some kind of other uh computer I'll use something other than AWS just to show you that I don't always just use AWS okay and actually to monitor this I'm just going to click through so I don't have to like guess when it's ready so all I'm waiting for is these two status checks to pass it doesn't take too long so we'll just wait for that okay all right so I waited a few minutes here I'm going to refresh and the status checks are passed so I'm going to checkbox this and then I have a connect button this allows us to use sessions manager without that roll you're not going to be able to get in here and uh so we'll go ahead and launch this up okay and so um the default user with this if I type in who am I it says that I'm the SSM user we could probably use that one but it's not proper to do so I'm just going to increase the font here a bit so you can see what's going on I'm going to type in uh suyen ec2 user it just switches me to the or sudo Su hyen ec2 User it's going to switch me to the ec2 user oh right this one doesn't actually have um a user called dc2 it's called Ubuntu so I'll say Pudo Su Ubuntu forgot we're using Ubuntu and so I'll type in who am I now I am the um Ubuntu user tells me the name here and this and you can see there's nice styling so that's good so let's take a look and see if Ed is installed so I'm going to type in Ed hello.txt hit enter it says there's no such file directory so there's no file there we can't open it so we'll type in Ed and so now we have a new file I'm going to type in a hit enter I say hello world and I can actually go back now so it's actually acting normally now hello world goodbye Moon okay goodbye Moon and we'll give it a period here so much smoother experience we'll give it a period here we'll say one comma dollar sign P not too bad and we'll type in WQ hello.txt and it says 27 I imagine that might stand for the amount of characters that are in there and so I'll type in cat to print out the file and there it is so clearly we have a baseline editor that we can utilize so that is whatever and that's all I really wanted to show you is that it basically is everywhere so we'll go ahead and terminate this but again it's not the easiest thing to use so I go over my instances and we'll go ahead and terminate this instance and that rle you don't need to delete because you'll probably use it again it's a very useful role to have I'll see you in the next one okay ciaoo what is X well it stands for extended and it's the Align oriented text editor created in 1976 for units that improved upon the feature set of uh Ed so X supported additional functionality such as more extensive commands history and undo uh so only one level of undo multibuffer support and visual mode and that is the big thing that we'll talk about here but it wasn't that it came initially with it there's a bit of a story there but I want to talk about 1976 so imagine that uh what was it they said Unix was developed what in 1969 so then a few years later it's getting distributed out to schools with the source code um and then people are experiencing it and making their own improvements to Unix um and the community is sharing everything so there's a a threee gap three to four year Gap where people have an opportunity to do developments and I think at this time they end up getting a visual a visual monitor so George keris who was at a school in the UK developed a better version of Ed called M that could take advantage of video display while kis was visiting Berkeley uh I believe that's I don't know where that is I don't know if that's in the US or or the UK sorry I'm in Canada I don't know sounds like a a US school he presented his program to Billy Joel not the singer but whoever was there at uh I assume a programmer or teacher or something would go on to modify to be less demanding and then uh the editor was to be included in the Berkeley software distribution so I think the time Berkeley wanted to uh extensions or improvements to uh Unix and they called it BSD uh my first operating system I ever used was called free BSD so I know BSD pretty well but I imagine that ceris went over to Berkeley because he wanted to get his software included into this distribution um and so that distribution came out in 1.1 and obviously Billy Joel had made improvements for for that to come through so here's an example of the Ed syntax that we saw previously that we tried in the last video and now this is what the X syntax looks like so it's similar but there are some key differences the first thing you'll notice is that there's this colon and this character in The X editor is used to indicate that the user is entering a command in the command mode why did do that I don't know but um I mean it definitely makes it more distinctive from the last one um and then there was a new mode coded in by Billy which allowed users to see their document while they entered commands uh and the command was called colon V VI which stood for visual mode so you got to imagine they had V video displays and this whole entering things line by line was getting tiresome so this is where um VI starts to come into play so let's take a look at this visual mode and an ex in the next video okay hey this is Andrew Brown in this video what I'm going to do is go ahead and uh launch up FreeBSD because that's based off a so it should have EX in it I'm going use Google this time even though it's a big pain to use Google for this and so I just looked up I just said um uh FreeBSD G uh gcp or Google if I go down below here they appear to have a command uh I tried this in the last video didn't work but I think maybe uh it might work this time if uh I use a later version so that's what I'm going to try here I'll create a new project just so we don't have a big mess here I'll just call this um my FreeBSD if it lets me make a new org or sorry project sometimes these are used up so I'm not allowed to do that so I'm going to create a new project and then we'll get going here so just I'll give a moment for this project to create okay uh and is it already done sometimes as fast sometimes as slow so now we are in our new project so what I'm going to want to do here now we could open up uh we could create a new VM this way but we will have to enable the service so I'm just clicking that and enabling the computer engine API so just give that a moment uh to work its magic okay and so this sometimes takes a bit of time so I'll be back here in a moment okay all right so it looks like um that's enabled and notice that we have our option here now if we were to go down to our options and change you notice they don't have uh free BSC here why they do not I do not have any idea why but that's okay because we'll go ahead and use the cloud shell so I'm going to click Cloud shell here this is going to open up the terminal this takes a little bit of time and so the idea is that we can just enter in this command here which is I'm going to just bring this on to another screen so I can I can clearly type it and so this is going to be gcloud um compute instances create I'll just call this my FreeBSD and then we want our image so this one's going to be free BSD 13 hyphen 3 release a hyphen AMD 64 and we'll say image hyphen project equals free BSD org Cloud Dev now I don't know what size of image this is going to launch up but I imagine it's probably nothing super big that for the time we're going to have it if you're not comfortable just blindly launching with the default settings you can just watch and confirm that I got it right and then go back to this video because I'm not going to um confirm here but I'll go ahead here and just hit enter I think I have everything typed in correctly and it says do you mean UA Central because I didn't specify Zone we'll say yeah just launch it wherever it wants to launch it it and so we'll go ahead and do that and so we'll let it create okay I mean while it's waiting we can navigate over here and see if it's spinning up it's not going to hurt it so I'm just going to keep clicking back here and I'm just going to stay in this UI because if you make a new tab it'll act weird I'll go to VM instances here and so it's spinning up I'm not getting any warning last time I did this I I pulled an older version and so that is spinning up uh so again we're just waiting for this to uh start so that will take a bit of time what we could do here is check our firewall rules while we're waiting here because we should need to have um the port 22 open and the way gcp works is everything's kind of like Global which is kind of annoying but if we go here we can see we have Ingress T TCP 22 is already open here okay so it looks like we already have SSH open so we're not really wor worried about whether that's going to work so I'm just going to go back over to our computer engine here and again I'm just going to wait for this to provision all right actually while we're waiting I just wanted to see what size this is launching because I kind of wanted to tell you whether uh this is big or not and so this one is what what is it uh what size machine type N1 standard one so I don't know if that is a small one and one standard one one vcpu there are smaller ones like 25 so it's definitely not uh super small but it's nothing that I'm worried about yeah we could just ask chat gbt how much does a gcp cost per month in US Dollars i al get rid of this I'm not even using that and I'm not using this and it says $34 a month yeah so not the most efficient for spend again I don't plan to keep this up for long but looks like it is now running so we're in good shape um could we log in by going over to here so inst stopped it isn't stopped we'll refresh here there we go and so I want to utilize this via the gcloud command so we'll go ahead and type this in and so this is the command it's suggesting for us to log in we'll copy this I'm going to go down I'll just run into the shell which is really nice we'll go ahead and enter and hopefully we can SSH this way so normally what it would do is it would generate an SSH key because we probably wouldn't have one and hopefully that just works and it's refusing from the host so I'm not exactly sure as to why but maybe we do need to open up Port 22 but it said that it was available so let me go figure that out okay there's a few suggestions here I don't know why I'm having such a hard time with connecting but uh we can use telet to check if the port is open because FreeBSD might need the port open itself so people were suggesting to add metadata and say Port enabled uh I'm not really sure if that would do anything I'll I'll try it for fun see if that does anything I don't think that's going to do anything but I'll I'll do it anyway so let's say my free BSD say yes if that works that'd be really nice and we'll try this no that's fine okay so if we can't get through Cloud shell which is fine we'll go ahead and say open in the browser and maybe it'll just show up here okay not the nicest way to do it but I just want it to work so give that a go and I mean essentially this is what um the other one's doing so allow say authorize okay and so we're doing gcloud it was trying to bring them over and stuff like that but if it works this way that I don't care FreeBSD is kind of a weird image so I don't really expect uh the gcloud to just work like first try but if this works I'll be happy all right so it says VM has a firewall rule that allows TCP Ingress from I uh this range so maybe that's our problem I'm going to bring this on over here I I thought that everything was fine but I'm the worst at firewall rules with gcp so I just feel like it's my fault here and so I'm going to go over to firewall here and if we go down below it doesn't specify specifically an IP range this is VPC firewall rules the like groups okay uh all right so what I'm going to do is I'm going to create a new firewall rule not a policy but a rule we'll just say uh SSH for um uh FreeBSD and then we'll go down below network is fine party that might matter Ingress that's what we care about specify specific targets um I mean we can just say all instances in an account and then that would be sufficient I hate Target tags because I never know what to do for Target tags I'll just say all all instances in the network ipv4 range um which is what it has and then what I'll do is supply from this little box here I'm going to supply that value because that's what it's saying to do is to do this I'm surprised it's not like just uh 24 which would be the the very or 32 or whatever the very specific value is um to specify uh just that single one but this is clearly a larger range um I don't think that matters the filters don't matter and then we're going to say allow on Port 22 okay so that's what we'll do we'll create that rule and hopefully that's our problem all right so I'm going to just wait a couple minutes I don't feel like it's instantaneous I'm going to just hit this retry button and see if that fixes our issue okay all right so I think I've waited long enough I'm going to go ahead and try this again hit retry and see if that was our issue and the priority matters as well but I think um because it seems like it orders it based on this so I'm thinking that this is going to take a a better priority here and I've lost that screen just let me give me a second to get it back here it is here we'll see authoriz and hopefully that was our issue ah there we go okay so we probably could get in with g CL now if we went back and tried that um I kind of prefer that as our means to get in I'm going to go back over to here and open up the shell and if we go back over to cute engine uh virtual machines I wonder if it's still here if I hit up it is okay great so I'm going to just hit that and see if I can get in this way and so now I'm in the uh the virtual or BSD so we're in BSD here type in who am I I just like to do that every time I'm in a system to know I am so I'm Andrew name me it name me oh no am I even in here let me take a look here welcome to FreeBSD am I in FreeBSD yeah I am okay so created a user for me called Andrew just I'm just not trying to get mixed up with the cloud shell environment and so the whole point that we wanted to do was to use ex right or X so we type in ex we're now an ex so let's use it as if we did before so what I'm going to do is type in a oh hold on right so it has a coal in there so I think right now in command line mode and the a is always there so it's kind of telling us that we're in command line mode which is a better indicator of what's going on so a I'll say this is line one this is line two this is line three you get the idea and we'll press in Period okay and so now the question is um well hold on let's just try to print something so say uh one comma dollar sign P does that still work it does and let's try out this VI mode and so now in VI mode and this looks like um VI all right so if you've ever used this it might be really confusing um but before you touch into the keyboard let me just tell you that you can get back to commands by typing colon so if I type in Colon here notes down below it appears down here which is like a like a small command line and I can hit Q all right and so it's saying we've modify the file since last time so I'm do colon Q exclamation mark to get out of it completely ex exits me out so I'm going to go ahead and try this again type in E ex I'm going to see if there's anything there there shouldn't be anything there because we uh didn't save the file right this is the second address smaller than the first because there's no data in there so we'll hit a this is a line this is a second line we'll type in period we'll type in VI and so now we're in V mode so I'll tell you a few commands that we can do so like if we hit I think it's K we'll go up J will go down K will go up J will go down I will go to insert mode even though nothing changed we are now in insert mode and if I type in hello nois typing space hit escape to go back to normal mode escape and I'm going to type in Colon look down below see the colon Q exclamation mark all right so hopefully that is clear um but yeah that adds the vi the vi mode and so obviously people would definitely prefer to just start in VI mode and so this is the like one step to getting to VI okay um so I'm satisfied with this what I want to do is go ahead and shut down this instance I'm going to go here to VMS I'm going to go ahead and delete it we'll say delete and that is good and so we'll just let that go ahead and delete and I'll see you in the next one okay ciao hey this is Andrew Brown and we are taking a look at VI so VI is a text editor built for the Unix operating system and when BSD 2.0 was released so we talked about BSD 1.1 shipping with ex or X um when it came about to version 2.0 X was renamed to VI after the command uh that changes it to visual mode that's what v stands for uh there was no longer a visual mode as this was now just the default or normal mode because why would you want to be in a line oriented way when everybody has monitors now um and one thing I want to point out um uh that's important about VI is understanding what the keyboards looked at the time so at the time the common layout was the ADM 3A so this is an ADM 3A terminal with a keyboard on it but if there was even other keyboards they would follow the same uh pattern and so the keyboard had an Escape key to the left of your que so if you look at your keyboard now if you're on an English keyboard your Escape is in the top top corner but here it's where the Tab Key would be and this is really important because the Escape key is used to go back to normal mode which is something you do a lot so it's not in the most convenient area now uh but at one point it um you know it was somewhere nice somewhere nicer right beside the q key so VI the time was not considered a lightweight small portable editor uh because it could barely fit into memory on a pdp1 or or PDP 7 so history remembers this as a very Advanced robust but very heavy editor but of course over time things became more efficient the program stayed the same size and so it's looked at a different way now uh remember Billy Joel our singer who's not a real singer he actually went on to uh be a cofounder of sun micr systems and Sun Microsystems is a u they produce their own computers and Os and well maybe not their computer yeah I guess they produce their computers themselves as well um and they were amazing machines that got bought out by um Oracle and that's why uh some Microsystems doesn't exist anymore but anyway uh let's go take a look at VI now okay hey everyone it's Andrew Brown and we are in Microsoft Azure I'm going all across the cloud here again if you do not utilize all the clouds use the ones you're familiar with or if you just can't really follow along just watch and experience it because we're not really at the point of using Vim I'm just trying to uh show you that these things exist and add additional uh knowledge here as we go go along um but anyway let's go ahead and launch a new virtual machine so I'm in Azure I'm going type in virtual machine here at the top and basically Vis on everything so we'll go ahead and create a new virtual machine here we'll give it a moment here to yeah I did I did press it and I'm just going to go ahead and say new create a new Resource Group this be my uh VI group and this will just be my VI uh VM I don't care where it's created the Zone's fine that's fine I want to buntu so that seems good um I want this to be cheap not like how we did gcp but um if we look on the left hand side we can see the B1 is $759 we're not going to keep these up for long so it doesn't really matter x64 arm anytime we can choose arm I like to choose arm it says the image is not compatible with it oh fine I'll just switch it back to x uh x 64 I guess it's because this is not the arm one where's the arm one so let's switch to arm here hold on a second up here maybe arm 64 oh the security type okay that's fine um well where's the security type right here standard okay yeah we're fine with that I don't need a TPM for this well I just want to use Arm because it's more efficient and we will can I not choose that okay I guess it's too complicated so we'll go back to TPM we'll go back to x64 we'll go back to uh this one we have 20 22 it doesn't matter we'll choose 2022 the latest that is out right now we have SSH public key or password um if I don't have to I'd rather just do a password they're not like the most safe but I'm going to do that here today so I'm going to make this uh we'll call it Billy Joel because that's the creator of of VI and the password is going to be capital T testing 1 2 3 4 5 6 exclamation mark capital T testing 1 2 3 4 5 capital T testing 1 2 3 4 5 6 exclamation mark okay so that is what we have it set as um um we do want estation there so that is good we'll go ahead and hit review and create and so it's Billy Joel is the username and the password is testing capital T testing 1 2 3 4 5 6 so let's just make sure we remember that we'll go down below hit create and so we're going to wait now uh for this to revision so I'll see you back here when this is already normally you'll have another step after this I'm just going to wait a little bit there we go and so we're going to wait for this deployment to finish okay all right so let's go Ahad ahead and go to that resource now it says it's deployment is complete so I'm assuming that it's probably in a running state it says it's running and so what I want to do is establish a connection we can go here can we do it right in the browser using the Azure CLI local machine local machine I don't like that let's open up the uh shell here and at least it shows us the IP address here I don't want to start in po shell mode Let's switch over to batch I guess we have to wait for it to launch whenever the terminal decides to start give it a moment to get started here there we go and I'm going to switch over to bash well hold on I wonder if it gives us the command here so if I select this would it just show us the Azure SEI command uh yeah it's not showing us uh well let's see if it works here I'm I'm just going to say in power shell oh I think we can use power shell okay we'll say SSH BM hyen hyen IP probably just copy the command here we're getting a lot better of just giving us the stuff that we want want I'm going to go just paste this in here it'll hit enter see if that works it will say yes and it thinks us we Andrew which is not what the user is but the password is capital T testing 1 2 3 4 56 exclamation mark and so that's probably not going to work exactly so I wonder with uh as SSH change username how do we specify the username name that's the name of the machine okay we'll try that so we'll hit up again and I'll just say uh local name or local user this will be Billy Joel and we'll try this again capital T testing 1 2 3 3 4 5 six exclamation mark and now we're in okay great so now that we're in here um let's just take a look around so I'm just going to go just to make this whoops this thing is a finicky make this bigger here and I'm going to type in LS PWD okay so uh if we type in V now we will now be entered into VI notice it's it's actually not launching VI it's launching Vim because I can see that says uh very improved and so what's happening here is that um some or most of uh most unixes out there or linuxes out there will actually install them and then link to the latest version of VI because it's a better version so this is not really a good example to see VI because we'll have all the improvements here so I'm going to do is close this out but that does show you that uh that case where that will happen and so I'm going to go back over to our virtual machines and maybe there's something else that we can launch launch up that does that actually launches up VI cuz right away I knew that it wasn't VI when it said very improved uh Vim because it won't say that when you you launch it up so I'm going to go ahead here and just um delete this resource say delete actually that's not going to be good enough we'll actually click into the virtual machine and I want to go to its Resource Group here and then I want to delete the resource Group because that will tear down all the resources in the resource Group and enter the name of the resource Group which is here delete and I'm going to try this again so we we'll launch it with another one we might still end up with the same problem but at least we're trying to see if we can get something else so we're going to go ahead and create a new virtual machine I'm going to make a new resource say my V2 group and instead of launching a bun to we'll choose something something else so I'm trying to think of something that would not have that so we'll go to se all images here and here's a question is like does Debian ship with VI or Vim okay which OS LX OS ships with v instead of Vim Arch okay can we use Arch never even used arch before what is Arch Arch Linux is that like a micro one oh you know what I actually have used this I think this is a lightweight one okay great so what we'll do is we'll say add uh AR Arch Linux and we'll go ahead and say we'll choose gen one I don't really care if it's gen one or gen two if it's gen one we just have to choose standard there difference is I think gen two have uh TPM so they can't be tampered with we'll say Arch uh Vim or VI example I don't care what it's called we'll go down below here it's x86 uh we want to choose the cheapest one which I don't think is that one I think it is oh it is b1s yeah b1s are the cheapest still seems is really expensive I feel like there's a cheaper one than that whoever tells me the prices here there was I thought there was like one for $7 let's just sort it by cost this one's the cheapest all right we'll do that one and I'll do password again this will be again Billy Joel the creator of VI we'll hit review create and we'll go ahead and create this and we'll just wait again and try to establish that connection okay so you know the routine here we'll be back here in just a moment all right so it says that's Deployable go to that resource and uh it says it's not ready yet so maybe we should just give it a little bit of time sometimes there's a bit of delay so I'm just going to wait a couple minutes before we do anything we'll give this a refresh it's not ready yet even though it says it's running so I'm again I'm just going to wait a little bit a few minutes I'll be back in just a second all right I'm back I had lunch so this should definitely be ready now and it still says machine agent status is not ready troubleshoot the issue so maybe because it's Arch it doesn't tell us the usual thing here so I'm just going to ignore that status there go ahead and go to connect we're going to go to the Azure CLI here I'm going to also open up um uh the shell here and we'll do what I did before where we're looking for the information for the Azure CLI to connect um where to connect connect from your local machine I'm not sure what this wants here okay we'll still click that I guess entra ID login extension did I want all that stuff I don't think I really wanted all that we'll just go back to this here this is really what I want maybe don't press that button I don't think it's going to hurt anything but I pressed it too late so what we'll do is go ahead and type in AZ actually I'll just copy the line it's a bit easier that way and then we'll let it paste in super slowly we'll go ahead and hit enter and uh that's not going to work because we need to go ahead and say local name or local user Billy Joel enter and we'll say yes to accept the fingerprint it will be capital T testing 1 2 3 4 5 6 exclamation mark and we are now in so there we go we'll just expand this so I'll just type in clear to clear this out let's go ahead and type in VI and it's saying the vi command is not found so Arch is supposed to have VI okay why is it not here we'll say so we'll say where is VI where is vim doesn't have it but that's totally fine we can install Arch install VI how do we install VI on this so I'm looking the for the installation instructions install the vi package okay but okay what's the package manager for Arch I don't know what it's called PacMan is that is that the name of the uh one okay I'll I guess I'll try this we'll say PacMan install single package say hyphen s this is off screen so you don't see what I'm doing we'll go ahead and hit V unless you are the root user little type in pseudo will that help we'll say yes but look how small it is it's like super super small hopefully it's installing Vim or VI and not Vim we'll just say uh invalid or corrupted sure we'll delete it I'm not sure what's going on here no package no errors occurred no package upgrade let's try this again we'll say Yes again um no I'm not going to delete it I just want to install it what is going on here so I'm going to copy this ER here why can't I install so we'll try to update the keys again I'm not sure how this works but I'll just try it till we get something to works not sure what that does ignore that link does not apply anything uh thanks for answering says this we need to repport the arch Keys why should I have to redo anything is this thing done doesn't seem to be doing anything so I'm going to do control C here let's try this again we'll try uh buy we'll try to install it again yes keep saying it's corrupted yeah how do you get this installed give me a second okay all right someone's solution here is like I did again we're going blind here PacMan key init Pacman key populate so we'll try those two and see what happens we'll say PacMan which is the package manager somebody's trying to be clever here with their silly named package manager we'll go ahead andit enter needs to be root sure we'll do root pseudo PacMan key andit and then we'll try populate again this is not the one I ever use but sometimes you got to just get things working and now let's go ahead and try this again I'll say yes uh yeah still doesn't work and people are suggesting that those two keys have to be ran if we want to populate anything so yeah I'm not sure what else to do here there's another link here that's like do this stuff okay so let's try that then so it says PacMan hyphen s y hyphen needed Arch Arch Linux key ring at sign at sign Pacman hyphen Su again if you don't want to do this you could just watch but I like I want to get it to work because I want to get to the original VI and we'll say yes so now I think what it's doing I guess it's getting the latest key ring something about key Rings or something like that I don't know I usually don't like using um a lightweight uh lightweight um L distributions they just always just seem to be quite the headache they never seem to work exactly how I'd like them to work but anyway I'll just wait for this to finish that was pretty quick okay great so now you cannot perform this operation unless you're a root maybe what it means is that I have to type pseudo here as well so I think this is the issue here we'll go ahead and do this one second uh I don't know I don't care one we let it go with the default yes just install all the other stuff yeah other lightweight lightweight uh Linux distros just try to think if there's any other ones that I know about no I think Arch is the one I guess I just kind of forgot I forgot it but every time I think that I've used Arch it's always been the biggest headache and I've never liked it but if we can just show off VI that'll be great so I'll just wait for this to finish and again just watch I'm just going to show you what VI looks like so we can distinguish it from Vim we're not we're not here to really get into the commands yet okay all right so I took a little bit of time but it's now uh complete so what I want to do here is I guess try to see if I can install violet see if we can install it and so we'll say yes and there we installed it finally there we go okay having some patience is a good thing to have let's go ahead and type in VI and notice it does not say improved Vim it literally looks like ex uh like we saw before so if I hit I to go into insert mode and by the way I was trying to find a piece of software that would show the commands I was typing I could not find one to say my life but anyway so I'll type in testing and now I'm still in insert mod and hit Escape get out of it and now notice my cursor is hovering over the character that's a key difference from ex where you couldn't really tell where the cursor was if I hit H I go left if I hit L I go right H I go left L I go right let's do uh shift uh or I mean just make a colon down below here so we can get out of here I'm going to type in Q xation Mark that's all I wanted to show you okay so but for the most part it seems like we're being forced to use Vim but not always sometimes you're just using uh sometimes you're just using VI right okay um so just be aware of that because the feature set's going to be different so let's go ahead and uh shut down this so the the easiest way to get rid of stuff in in Azure is to go to the resource groups go over the resource Group here and I'll delete the resource Group because when you launch a a an instance it actually Provisions a bunch of stuff and the only way to get rid of all that stuff is to do this if you don't do that it might not tear down this other stuff so we'll go ahead and delete that that is deleting I will see you in the next one okay ciao all right let's take a look here at Vim which stands for Vi improved it was written by Bram mullinar in 1991 and it's a clone ofi so that means it doesn't use the original source code um but it greatly improves on the functionality of VI improved features are things like syntax highlighting plugin support multilevel undos multiple new modes with a new Mode called visual mode which has nothing to do with x's visual mode it's just using the same name enhance search and replace split windows and tabs command line history Auto completion and more so there's a lot of stuff going on here with the increase of RAM and storage RM is now considered very small and portable and can be easily installed anywhere uh c and a terminal can be found I believe that it's still written in C uh many Unix distributions may ship with vim and even Alias VI over to Vim as we saw in our last lab uh so you might be using Vim instead so just pay attention there because that will affect your feature set that you can use V might also be set as the default editor in the OS um and sometimes you're prompt prompted to that and that's what throws people off and that's where that Meme comes from with the how to exit Vim Vim has a builtin tutorial for beginners called Vim tutor which is usually installed along Vim but is separate executable and can be run with a a shell so that's something that is interesting if you ever need help in Vim you can use the help command all right so yeah we're now going to start learning about Vim okay all right so in this video what I want to do is show you um how you would how you could use Vim so we're not going to focus on installation right now I just want to show you the the Vim Tor and the help command that's all I want to do so I already have have WSL installed on Windows here if you're on a Mac you don't have to do this you just open up your terminal and you can install uh Vim probably uh using Brew tools but anyway I just want to show you I'm just going to close this out here I just want to show you what it looks like we have Vim so I don't know if I have Vim installed here I apparently I do already and if I want to I could type in vimtutor okay you're just watching and it's going I'm going to go ahead and hit enter and we are now in vimtutor so vimtutor is supposed to be a tutorial that you can go through I don't personally like it because you have to do a lot of reading but the idea is that you read through this and it tells you how it works right so it's telling you the the movement Keys is hjkl so I can do J to go down L to go to the left or right H to go there K to go back up and the idea is that you just keep reading through it and you'll learn Vim um but I'm going to go ahead and exit out this and do uh uh Co and Q and what I want to do is just open up Vim I'm just going to make a I'm just going to open up with no file here and I just want to do colon help and just show you that it opens up help and then the thing is in order to move around the help file you have to know Vim command so you need to know the move Keys again here right and so the idea here is that you can read about how Vim works all right it gets into detail and actually for the content of this course I was going through this and and referencing the docs here so this was very useful for me I do col and Q and exit out of that okay so the way I want to use Vim with you is that um I want to get it installed using a visual editor and so I'm just going to wait till we get to that slide and then we'll talk about it okay or well I mean we'll do it for real all right ciao hey this is Andre Brown and we are taking a look at Vim version so it's important to understand that uh these features have been added over time so when I listed all those features previously himm they weren't there on day one okay so uh version one came out 1991 and it had those many improved features uh what they were I do not know but it's just apparently an improvement over the original one then version two which came a year later added multilevel undo and the ability to edit file simultaneously it had better support for different terminal types I'm not sure why there's an A on the end there I think that's just a mistake on my part so just ignore that this is not here then uh another year later it supported horizontal split windows which I love having that ability then it introduced gvm allowing Windows users to use um Vim okay and I'm actually on a Windows machine I I use a Mac generally but uh it's not easy to hook it up so um that's why I'm not recording from one here so I'll be showing G Vim um as our way of using Vim on Windows then we have Vim 4.0 this had improved syntax highlighting Advanced support for different file types and programming languages we have support uh using Vim script and enhance enhancements to gvm for version 6.0 we're now 2001 so we're past Y2K here it added folding vertical splitting improve syntax highlighting and better intern internationalization then we have Vim 7.0 which came out in 2006 this says spellchecking multilevel undo branches tab Pages improve performance with larger files we have Vim 8 which included a new package system we're going to talk about neovim and why maybe Vim 8.0 introduced a new packaging system and it has async processing and then uh Vim 9.0 again maybe because of neovim uh created Vim 9 script which is a more improved uh syntax over Vim script improved performance enhance UI um so there you go all right so let's take a look here and um uh look at the Vim version that's all I want to do here so I think we typed this we might see the version does not tell me there we's do hyphen v um maybe it just means hyphen V there oh actually opens it up but right away it tells you the version is 8.1 you can see Bram is the one that wrote it but I prefer to do this here so that it doesn't completely open and you can see it's using 8.1 so I'm not even using the latest one but for the most part um most Vim versions that are installed on servers are good enough if you're not installing an extension so if you're just doing devops you're going into a Linux environment you you'll never care about what the version is but uh when it comes to actual development you'll care more about the specific version okay all right let's first take a look at Mac Vim just because um I'm not showing how to use Mac Vim in this video but it's pretty straightforward you go here you download it you install it um it'll also have a uh binaries that you'll have to copy to your specific um uh directory so that you can either type in MVM or if you want to just double click the application and launch it so this one is pretty straightforward while doing G Vim here today so we'll go over to G vim and we have um different versions so we can see yeah it's it's telling you to go to macf here and for un Unix it says there's something going on here I'm not exactly sure what but we're going to use GM all right um so we'll go ahead and install GM I'm just looking for what the difference why there's this many I'm going to go with the installer because I find installers are easier on Windows and we'll go ahead and give that a go okay and I'm going to go ahead and open that up and I'm just double clicking the installation I'm just doing that off screen and so my question is like I'm not installing uh Linux on this system I have WSL which we don't cover in this uh video but um I'm going to go ahead and install it and so say let's install uh Vim 9.1 which sounds great to me that's the latest version right now we'll go next and we have a bunch of stuff here so we have create uh create bat files I'm not sure what that is vim uh bat files for Vim variants in Windows directory for commandline use I don't think I care about that everything else looks fine uh console version of Vim okay so maybe we can use it in command prompt that sounds good we'll hit next so here it says V Vim Behavior Vim with enhancements so we have VI compatible Vim original Vim with some enhancements or Vim with enhancements all of them so it seems like what it's doing is modifying the vimrc file so we don't even have to configure that maybe remap a few keys for Windows contrl v contrl c contrl a contrl srlf i don't know if I want to do that so I'll just leave it alone for now we have behavior of right and left windows uh I'll leave it alone again we'll go ahead and hit next we'll install it and so that should install it okay give it a moment all right so show read me after installation's finished uh I don't really care about that and so now it should be installed so supposedly we can launch it from the command line which would be interesting but I just want to open up uh the program so somewhere on my computer if I just type in the start key if we go there right actually that's the first thing I see I'll just show you here look we will see uh Vim right so there it is there's the G Vim example I'm going to drag this off the screen but there was two there was vim and G Vim I'm going to click on G Vim because I'm going to assume Vim is just in their terminal and G Vim is the other one and here we go so we actually have Vim a little bit ugly but that's okay I dragged it out and it already mucked up the settings but the nice thing is that we now have these options so we can work with it and yes I realized it's ugly but we'll figure that out as we go here uh if we go actually here maybe we just change the color scheme we'll just say desert and that's probably editing the vimrc file underneath or the gvm g g vimrc file which we'll cover in a separate video but if I think we could go here we might be able to look at those settings somewhere here so global settings I'm not exactly sure where those files are but anyway the point is we can now work with with Vim so yeah there you go I just wanted to get this installed and ready and then in the other videos we'll uh look at what we can do with it okay ciao hey this is angre brown we're taking a look at Vim script um I don't know what Vim 9 looks like but I am very familiar with Vim script it's not very important that we learn that much about Vim script because it gets kind of complicated but we will have to kind of get some exposure when we change our configuration files but vimscript is a scripting language that is used to write Vim configuration files plugins and inputs in the command mode a vimscript is considered challenging to learn for beginners to understand and write which is why people have shied away from uh fully using fully configuring Vim but again I'm going to tell you that there is uh Vim script 9 which is supposedly nicer to use which I don't know how to use I just want you to know that it has its own language um it has functions it has variables it has Loops um I don't think it's that hard but it is not the nicest thing to work working okay all right let's talk about Vim configuration files so Vim has two configuration files uh on Linux they're stored in the home directory on Windows I don't know and I'm on a Windows machine so that's kind of problematic but there's two files we have the vmrc which is for configuring vim and the G vimrc I always thought it stood for Global but it's actually the graphical version of Vim uh but it's always worked for me because I use macvim so I guess that's just lucky and here's an example of the vmrc file and so I'm just going to get my pen tool out here but notice that we are setting um the color scheme here we in GM we we directly just select it and changed it but the idea is that you normally would change the underlying file if you're on Mac Vim I think you have to modify the VR VR uh VR uh Vim RC file which is in your home directory notice we are setting uh configurations here so I don't I don't think that's variables this CU let is a variable so set is a function and we're saying set this stuff of um of Vim here and uh we have some remappings of keys and other things like that okay um and so then this is a a g Vim example which would work for Mac Vim as well and we are setting things but these are specific to the guey right um so yeah hopefully that is clear um and configuration files are written in Vim script so mostly we're just calling functions here so it doesn't look like functions and stuff like that because we're just calling functions as opposed to writing functions and Loops but it is script all right so I'm back in Visual Studio code um where I actually have WSL install which is a pain to install on Windows which I'm not covering in this uh in this course whatsoever if you're wondering what this project is this is actually how I stitched together um large courses so this one here was the um solution architect associate which was a giant 50 hour course but I'm just going to drag this up here so we have a little bit of room and um what I want to do is just configure the the um uh the vimrc file right so that vimrc file would be in your home directory and this is applicable to Linux and um Mac so if you're a Mac open up your terminal and you will find the file in the same place so I don't need to se in here but I'm just going to say cat and I'm going to do um the Tilda which is above your tab key slash. vmrc and this file might not even exist but this is where you would configure Vim so how would we set this Vim file Well we'd use them to configure our configuration file which is kind of funny so what I'm going to do here is see if we can change the color scheme I don't know if this command color scheme will work I thought it was a different command but I keep seeing that so I'm just curious if it will work uh so what we'll do is type in Vim uh the Tilda for. vimrc you're going have to listen very carefully before I hit enter here because it's very easy to get stuck in Vim so we'll go ahead and hit enter and so we're in here and so right now we are just in normal mode so what I want to do is enter into insert mode so I hit I no step down below it says insert okay don't touch your keyboard because it'll mess things up so now we just type like normally so we're going to type in color scheme desert and that's all I want to do so I'm going to hit Escape we're now back out out now into normal noral mode I'm going to do colon to bring in a command write and then quit okay and so now what I want to do is open that file again and I want to see if any of my my stuff has changed and notice that the color this thing is a different color so that's telling me that this is probably working so we've just set a thing in our file here so I'm do colon WQ so now where is this in GM I have no idea but like on on a Mac if you want to change it you just open up GM okay and you could probably even write if you copied in the right place you could do MIM to open it up if you copied over the binary but we'll go over here we'll see if we can change or figure out where it is in here because I have no idea um I don't know where it would be let me go find out okay it says that it lives in our home directory on Windows that's where it says that it is okay so let see if that's actually true or not so what I'm going to do here is I'm going to go find my home directory so that would be the C drive users sorry users Andrew so it's suggesting that it's in here okay um I mean we see Vim files here but there's no vimrc file and it's possible that your files are hidden but mine aren't hidden on my computer so I'm thinking that maybe it's in here and they kind of lied to us colors no how did it change colors then let me just going take a look here H so what they're saying here let me go here if I go here for a second if we type in h and then type in uh what was it vimrc I didn't even know like H is the help command I think they're saying that they'll tell us where it is so here it's saying that it's in our home directory and it's called vimrc or it's in the vimrc so if we go here I don't see it okay do I have I'm pretty sure all everything is being shown here so we go to property sharing security I used to know where this was Advance Maybe uh no maybe like view yeah so it's showing all the hidden files but yeah I don't see it in here so it's not a big deal um but at some point we might need to be able to rename this at some point so but maybe just give me a second okay you know what they're suggesting that they it doesn't create it for you automatically okay so maybe what we can do is just make that file and we'll just follow those instructions so this is what we have open here and this is a split window I didn't mean to do that so what I'm going to do is just close that out um again I'm trying to close this without actually uh using Vim commands because we haven't got to that yet but I'll go ahead and hit close and so this is a window open I'm going to go ahead and make a new file here right you can do this on macf as well and um what I'm going to do here is change the theme so I just want to see like what uh default teams for Vim I just want to see what the list list there is so apparently if we do colon color scheme it should just tell us what we have okay then we have this one uh space nope so it's telling us that's our theme right now but I wanted to know what possible ones there are yeah okay so I found a list here just on on stack Overflow we got blue dark blue all this kind of stuff here so what I want to see is if we if we make a file here we'll call this color scheme and if I change it to blue or maybe dark blue will it uh will it actually pick this up or will whatever we configure get picked up so go ahead and save this as and what I want to do is go to our I'm in Andrew here and I'm looking for that Vim files directory they said it's called Vim RC we'll save it okay so I'm not sure if this will take effect until the next one but what I'll do is I'll create a new file here so I'm going just say new file I'm going to close it I'm going to reopen it because a lot of times you have to reopen it I'm just opened up my start menu here off screen and I'm looking for gvm I got to type G Vim here and so now it's blue sometimes you have to restart it so clearly it is taking effect there we go and so now we have way of editing our vimrc file even though it's not in the most convenient place and and it didn't say anything about a g vimrc file so um maybe there is still one like G Vim are seeing the same directory but that's totally fine um but uh obviously we had this setting here it's just like confusing like which one would take priority so maybe that would just only be temporary so if I take that out and I open it again so say gvm what's it going to retain it's going to retain the blue one so whatever is in our VI uh um our uh VR uh our configuration file and that's how I would normally want to do it I want to configure it I don't want to use these settings here I usually don't do that the only advantage of having G Vim or Mac Vim the only thing is copy and paste commands like that because it's such a pain not having those um and that's the only reason also being able to just like easily resize the window um and then having the normal save command uh as opposed to doing right quit uh but that's all I wanted to show in this video and we'll look at more configurations when we need to okay all right let's talk about vim's plugin manager so Vim has many different plugin managers to easily install and manage plugins we have BM plug pathogen bundle I can't say that I don't know what that says Neo bundle volt and more there's just tons of them and so here's an example of using Vim plug to install something so Vim has not conformed to a single plugin manager and there may be plugins that only work with specific plugin managers and this is really frustrating about Vim uh has been the plugin ecosystem but I think most people now settle on Vim plug my frustration is that I've been using Vim for such a long time so I remember using a bunch of these at different times um but since Vim 8 uh you can easily the plugins can be easily installed by just cloning them into the correct directory so it's not going to manage plugins for you but with the new package manager you just drop them in the right place and this makes things easier there's also something called a Vim ball and uh that's a spelling mistake there's supposed to be a space between is a sorry about that but it's a self extracting archive format used for Vim to distribute and install plugins and scripts Vim bols have the extension of VBA which is confusing because VBA is another kind of uh Visual Basic something or something other kind of file fball is not commonly used today since plugin managers are more efficient and easier means to install plugins but sometimes you'll read about these things or you might find a really old plugin you want to get to work and it's in a Vim ball um and the idea is that it's not they're not fun to use I so I just avoid them as much as I can okay I want to talk about Janice um which is a distribution of plugins and mappings for Vim G vim and macm to quickly configure Vim to provide a modern experience which is located at the Carl Huda repo um or GitHub user and so I actually use Janice still just because it's so darn easy to use and I've been using it since it first came out um and I mean you should install your own plugins but this thing just works really well the box for me it was for rubius or R rebound rails programmers which is what I am and so I still just use it today but it was created by yahuda cats and Carl uh lury I don't know how to say the last name because at the time Vim was not seen as something cool it was kind of a pain to utilize um and so at the time everybody was using textmate which became a very popular text editor it was really really big deal back in like 2009 but obviously Vim was super powerful could be used anywhere but people had a really hard time configuring packages to make an environment that matched these more powerful IDs so the idea was that they would just go configure it and then you just have a on line install and then you could start using Vim as serious as any of these other ID Ides at the time I do have to say that the uh Janice is designed around Ruby programmers cuz at the time that was the dominating framework it was a big deal for years if you miss that uh time period oh well but that's why it was optimized for that and that's why people today just assembl their own configurations that are inspired by Janice so sometimes you'll type in like uh you know modern version of Janice and then people will have like a plugin list that does something very similar okay all right so what I want to do in this video is show you Janice now you can install this right on ma uh on your Mac if you have it um on Windows obviously you'd have to have WSL um I just want to launch up a new instance to show you it and the only requirement that it really needs is Ruby but most computers or like most os's come with Ruby installed so that should be not much of an issue so I'm going to just go ahead and launch a new instance here on AWS and we're going just call this a Janice example and here I have Amazon Linux I'm going to switch over to auntu I'm going to choose 24 which is fine I'm going to launch this on a T3 micro which is what I prefer and I don't want to launch this with a key pair I'm going to go down below here and use that um roll that we had earlier so we can uh log in with VI our session uh which is wherever it is here I'm just trying to find it um our profile here as such excellent so I'm going to launch this and I'm wondering if sessions manager is going to be enough here but I think that it will work um as opposed to using a proper terminal but we'll go ahead and while that's way let's go to GitHub and look up Janice again it still exists it still works because I still use it and we'll just type in Carl Huda but this kind of give you an idea of some plugins that you might want to utilize so if we go down below here it should tell us what plugins there are so this is all the new like mappings that they added here and so they have like act uh contrl P nerd commenter which um we'll actually manually install this because this one is super cool nerd tree which gives you like a um like a uh tree of files on left hand side just tons and tons of stuff Easy Motion which is really cool I used to use that all the time but I just stopped using it but it makes it really easy to find um find stuff lots and lots of configurations okay this is not even the full list I think if I go up to here and Janice and we go into vim and we go into tools then we can see all the ones that are being used so these are all the plugins that are that are going in there I'm going go back over to here and we'll take a look at our instance and see if it is ready probably not but I'm going to go try connect to it anyway probably will'll let us connect and before we do anything else I'm going to go say pseudo Su hyphen Ubuntu get to the buntu user and I'm going to type see if there's Ruby installed here so say Ruby hyphen V okay but on a Mac it's preinstalled so we're going to do Pudo snap install Ruby Ubuntu has um snap and app Snap is the newer one so it's usually recommended to use snap for installing stuff and so that will install a version of Ruby okay I don't care yeah yeah sure classic classic here I think that's like the only requirement that I think that really matters uh to utilize this but that's again one of the reasons why some people might not want to use J but I just want to show you what it looks like with a whole like a environment that fully has a bunch of plugins okay and I I'm not expecting you to know how to utilize anything in here still we will get to commands I know we're taking time but we're just laying that Foundation okay so here they show you like how you do M Brew macf install so this is the one command we need to install it this why I was confused by color scheme because they just do color here I guess color and color scheme are the same thing I go ahead and paste this in and say enter and so this is the on line command it's going to go ahead and set up all the stuff so anytime I have to set up a new Mac first thing I do is go over here dump this in and I'm happy so I'll just wait for this to finish okay and all it's do like you know it's like cloning all the individual repos and it's going to um do that so I think like if we went over to here and you go back into this directory into tools uh notice that they these look funny because these are actually pointing to other repos right at least that's what it looks like to me yeah it is which is interesting because you can click through and read all about those ones so it's finished okay and so now what I want to do is open up Vim so I'm going to go ahead and type in Vim um and I'm going to hit enter again and so it doesn't look a whole lot different but it did bring in a bunch of um templates or or sorry not templates but uh other things but if I do leader n notice now I have this that's nerd tree so that that's not part of Vim by default so we just installed that but I'm going to go ahead and close this because I want to change the styling again just watch so you can get some experience here I'm going to go ahead and open up the vimrc this is what you do on your Mac or whatever and I'm going to go ahead and set the color so I'm in Vim so I'm going to go down to the bottom I'm going to do shift G and I'm going to hit uh o to go below and just go delete up to the wall I'm going to set the color here to be mokai because that's the one I like to use if you ever watch my videos and you see those like code Snippets they're always done in uh that mokai I thought it was like monai monai versus mokai monokai I just got them mixed up now I don't remember which one I used but anyway I'm going to set it to mokai today m o l o Kai k AI all right all hit Escape colon WQ again just watching to see what it looks like and I'm just going to open up Vim again so that should look a lot nicer I guess it doesn't really show up on here um sometimes like you set color schemes they just don't pick it up because it's the limitation based on whatever colors are available in this view we just don't have really nice things but uh and apparently I just closed that tab but anyway that's how you could install a bunch of plugins but I kind of want to show that a bit nicer so I'm going to do this again again just watch for the time being I'm going to go ahead and just shut down that server and we'll say terminate but I'll just bring it up here in Visual Studio code and we can open up them because I don't think I have it installed here just say Vim sorry Vim yeah see like I'm hitting leader n on my keyboard leader is um uh backs slash so back sln and it's not opening up um uh that ner tree there so I'm going to back over well before I do I'm just make sure I have a Ruby version installed I do 2.7 which is old but that's probably what came preinstalled on this machine and so I'm going to go ahead and copy this we'll go back here paste this in hit enter and I'll do the exact same thing okay so I'm going to clone that down and bring this up here and we'll give that a moment to install okay but this would not work on Windows because you'd have well you'd have to have Ruby and it's it's for Linux all these commands are Linux commands so they don't really have a a Windows equivalent to uh install this natively but you'd have to have WSL like I have here all right but we'll just wait for this to install all right so now it's installed I'm going to go ahead and type in MV and uh you know what I might do is actually open up a file here just so you can see a little bit more here so I'm going to go mbim and go into lib and I have a bunch of Ruby files here so it doesn't really matter I'll I'll open up um auditor that's a large one for me here I keep typing mm because I think I'm on a Mac and so there we go so it has nice coloring this is coming from um actually I think it's the theme that we set before this is not mokai but I think it's the desert seam I I set before I sorry cough there I'm just going to quit that I'm going to open this up and I just want to change it to the one I like say vimrc here and I'm going to go down below and notice there's all this stuff here before we used to just have colar in here and I don't see it anymore but I'm going to go ahead and just type in color color and say mo moai and then we'll save that and we'll go back up to this file I it looks the same I don't know I maybe I got the color wrong here we's say color again color it's default still okay I'll try this one more time I must have typed something wrong yeah I can't find the scheme it's uh what about monai monai let try this still can't find it why won't it like it oh you know what it is we're not supposed to put um I don't think we're supposed to put quotations around it that's why it's not working so we'll say molai here there we go and that's what I'm used to so you'll probably recognize these colors right um but right now I'm using full vim and again I'm just showing you here but the idea is like when I'm working with Vim I will open up nerd tree here I will go in here and I'll be splitting windows and I'll be going crazy and I'll be switching over and doing a bunch of stuff um but uh but anyway and it's kind of hard to close windows here I'm not sure why it doesn't let me close it with the command there I'm just going to type close manually that's not usually how to close I'm usually hit a command key for that but like one plugin that's installed is um nerd Commander so what I can do is I can select multiple lines and then um I can do uh leader CC and that will comment out a bunch of stuff so that is a plugin so there's all sorts of plugins that you can have uh but again I just wanted to show you how to get a bunch in there really quickly we will install our own plugin here uh separately but I just wanted to show you that if I wanted to get rid of this install um I'm just going to make sure I get out of this here I'm just trying to think here this is all stored in the vimrc directory so if we go to our home directory here for a second I do LS La in here we have vmrc and it's linking over to Janice here right so if I want to um get rid of all this stuff and it copied our old ones our old ones here we just need to get rid of the Vim directory so if we go into Vim this is all the Janice stuff so I'm just going to go ahead and just say vim and get rid of it and so so now if I open Vim sorry Vim we're just back to normal I can't open up nerd tree that stuff doesn't exist all right but um yeah we'll just end it here and we'll look at installing a plugin in a separate video okay all right so in this video what I want to do is install a plugin I was going to do nerd Commander but you know what I'm thinking is that maybe we should install something that you think that Vim can't do which would be something like having AI in uh in Vim here so and this is my point is that there's always somebody coding some kind of plugin that lets uh Vim stay up to date with everything and so this one's called vimi I've never used it before and supposedly we can install this using um uh Vim plug and so maybe that's a good idea I've haven't used Vim plug in such a long time but let's go ahead and give it a go and so I just typed in BM plug to get to the repo and so there should be an installation way uh like an inst a way to install this so we have two ways we have uh this is the Unix way then we have the windows way since I'm on Windows here today I'm going to have to do this I'm going to have to open up Powershell so I'm hitting command and I'm searching for Powershell and then I'm right clicking Powers shell I'll just open it over here for a second I'm G to just show you here whoops whoops whoops whoops whoops I opened up Adobe Acrobat by accident but we open this up and we type in Powershell again if you're on Mac this is so much easier for you just uh follow along uh modle through the the Mac instructions here but I'm going to run this as administrator I'm going to open this up here a big ugly poers shell I'm going to copy this command here and I'll paste it in and we'll hit enter okay and so supposedly I guess Bim plugin is installed now all right right now how do we use it is the next question usage add Vim plug section to your Vim RC file or nit Vim so it's telling you that we need to add it to that so we know that our uh vimrc file is located in that specific directory so I'm going to go back and open up our Vim I'm just going to get this out of the way our G Vim here I'm going to go ahead and say open and I'm going to open up vimrc and what it wants us to place in there is this hold on here so add a Vim plug to your section that's not what I want to do I want to just start installing oh here it says plug install install plugins that's actually what I want to do so what we'll do is do colon plug install I'm going to hit enter not an editor command well you know what um I think we need to close this first and then reopen GM because we uh we installed and didn't necessarily reopen gvm and we'll now see if it's in here so we'll do colon plug install still not a command so there must be more to this huh just a moment okay now something we could confirm is if it's actually in that directory so notice here says Vim files autoload plug uh plug so what I'm going to do is I want to go look in that directory and see if it actually is there okay so I'm just navigating to it uh locally here just give me a moment and I'm looking for Vim files give me a moment just a second here all right and so if it installed correctly it would be in the autoo directory here and we have plug. Vim but it's telling us that this command does not work so add a plugin a plug a Vim plug section to your Vim I mean maybe we still need this section maybe it won't work without that so I guess I'll still open that I suppose we say file open and we'll open up our vmrc and what I'm going to do is hit o to go down below now I'm in insert mode I'm Type in call plug begin uh pound begin parentheses and it'll say call plug pound end parentheses and I'll do right quit and I'm going to reopen G Vim I'm going try this again let see colon plugin install because I remember when I used this or they at least they show the demo right they go here so maybe what we need to do is put it in the list first and that's our problem okay so I'm going to go back and open the last file we had so open it again I maybe we need to specify our plugins so what I'll do because this plugin is called um I just need to see how their Nam so I'm thinking that it's just go back over to here take a look so it's just that so I'm going to hit uh K up on my keyboard then I to go to insert mode PLU if you're struggling with this it's not a big deal you can just again watch me until we learn all the commands and I hit escape to get out of insert mode colon WQ and now I'm going to reopen gvm I just want to show you that this is the way we install plugins so now I'm going to do is col it I'm going to say plugin install what are you telling me it's not there buddy all right let's go back here for a second oh you know what it's plug install plug install and so now it's going to install vimi and so now vimi is now installed this is our no name file that's here let's take a look at how we configured this so this says uh save your API here on your machine so I guess the question is where would that be for Windows so I'm not sure where this would go for Windows just give me a moment okay so right away what I'm noticing here is it's saying like Vim AI requires Python 3 and so now I'm running that problem where I'm basically forced back to Linux so again you know Vim is mostly powerful on Linux and and Unix it's very hard to configure this stuff like with this there's probably some way to hook up WSL with uh Vim here uh let me see if I can figure that out so I did find this script here for GM and the idea is that maybe what this command would let you do is it would launch launch up um it looks like it launch up CMD and then it would launch the GM program so I don't think I have version 81 installed I think it's 9 9.1 installed yeah this is 9.1 and then the idea is it would launch GM and GM so I'm not I don't really care that much about GM I just want to show you how to install a custom plugin so what I'm going to do is go back over to cuz at the end of the day we're going to use to do a code just so you know when we learn it all this stuff but I I I just want to show you all this configuration stuff so you you know again if you want to figure it out or if you're on a Mac or Linux it's a lot easier so what I'm going to do is just start this all over again and I'm going to I'm in WSL here and so uh what I'll do is I'll go install um Vim plug so we just type in Vim plug which is right here and I'm going to grab this command here and paste it in and that's going to put it into the correct directory good and so then we will open up our vimrc file again so let's just say vim vimrc and I just want a couple things here so I want this call plugin so trying to do this while looking at both of them at the same time hold on insert mode call plug begin parentheses again if you can't follow along with the commands do not worry about it we'll cover that and you can always come back here and then do this yourself uh so we'll go do this and I want this to be called this is what this is called called madox 2 forvm aai WR and quit I'm just doing that below you can't see it but I'm doing right and quit there we'll exit out of there can open linked file for writing because it thinks this file is linked darn it one second here LS hyph La I have an old file here from this I'm just going to go ahead and say remove uh vmrc because it's an old one e LS hyphen la like that now it's gone I'm going to move the old vimrc back into play so vimrc will now be vimrc and I'm just going to reopen that up vim vmrc and we'll try this again so the plugin here here is called plug madx to Vim Ai and then over here we'll say call plug begin parentheses call plug and all right I'm just going to jump this like that madx uh Vim a etc etc looks good to me call plug begin plug end and that looks good so I'm going to do right quit here I'm just going to bring this back up to screen right quit down below and then we're going to reopen this up I'm going to open Action a file UPS here so I can see what I'm doing so I can do vim and I I am in a project right now so I can just actually no I'm not I'm going to go back into sites exam Pro audit here I'm just going to open up a file auditor as an example I keep typing mm because I think I'm on a Mac it has a problem with our file here uh unknown function plug end plug begin did I type that wrong doesn't look like I did so I just quit quit again clear them vmrc and we'll take a look here call plug begin call plug end huh oh this is neovim here I copied the wrong line that's why okay so I guess we got to pay attention to what we're copying so go ahead and copy this line here not a big deal we'll go back to here we'll paste this in we'll hit enter and so now I'll open it up that file I want uh it's a VI Vim lib auditor okay now it's not airing out I'll do colon plug install and now it's going to install that plugin all right for this to work I have to have python installed because that's what this thing relies on based on the the source code so I'm going do colon Q here get out of that and do colon q and get out of this file with the exclamation mark so now what I want to do is configure AI so I actually do have an open AI subscription so for me I can actually do that so again just watch you don't have to necessarily do this and so what it wants me to do is set this token here so I'm going to go grab an open API key I just don't want to show this on screen but I'm going to go grab that from open API or open AI so we'll go here and where's my login where's my login products API login here we go and I'm going to go generate out well I'm got to log in first I don't think it shows keys yet so I think it's okay we'll go to a API it's fine get started I'm going to go here on the right hand side somewhere in here I have keys your profile well what else would it be us your AP have been repl with project Keys okay that's fine and I'll call this one Vim and I'll say all and now I have a key and I expose it I guess it doesn't really matter I'll just delete this afterwards but it's really silly that they did it that way okay so I'm going to go back over to the instructions here and I'm going to go ahead and type in Echo and then paste it in sh this a bit here and we have freaking jeez that make that symbol and send it to ourc config slopen ai. token okay so that's where it tells us to put it oh we could have exported it as well whatever uh okay so now that's there so I'm G to drag this up so I have more room here and I'm going to go back and open that file I had earlier and so now that I have it configured there should be some way to use it so it says here to use AI command type the command followed by the instruction prompt all right okay so what I'll do here is I'll go down somewhere in my file all right again just watch and I'm going to type in Colon oops Escape I'm going to type in the command they told me to type in so uh colon AI all right uh help them AI here complete the text on the current line complete the prompt okay let's try the prompt so do AI write me a ruby function that prints hello world feel like it's not going to work for some reason verify that the billing plan is pay as you go what do you mean I do pay as I go don't I or did Bo downgrade me just give me a second okay all right so I went in here my billion at zero it says when your credit balance reaches zero your API requests to stop working so if we go into limits here um or limits here in my or I'm going to go down below here I'll just set like say the use Li is this what if I just send like $10 to do that oh uh five five can I do that okay great I'm gonna go back over to billing and I'm going to add credit to the balance we'll say $10 and we'll pay for that give it a moment here because I'm assuming that's the reason why it's not working right the question is like would there be one that integrates with chat GPT I don't know but this is obviously using that part of it um so I'm going to go back over to here and we're going to try this again I mean it is anyway I think that this is sufficient um but there might be like a chaty PT with uh plugin Vim there might be one for that so there's all different kinds of plugins you got to find the one that works right so here's another one which is US uses the open API key but for whatever reason this one didn't work that great like this one looks a little better say like ask and stuff like that but I just want to point out that you can do it and that's the trick is that you have to configure and that's the hard part um about utilizing this stuff so we'll call this successful because we definitely did install a plugin um but we we'll end it here okay so I'll see you in the next one all right ciao hey this is Andrew and we're taking a look at neovim and I just want to point out we're going to get the command soon I just want to cover neovim and then basically after that we're basically going to be using visual studio code and learning our Vim commands Okay so Neo is a clone of Vim which was Rewritten from the ground up to be hyper extensible version of Vim in 2014 looks just like Vim plugins are easier to write better end end documentation it has an ASC producing parsing tree it has remote plugin runs as Cod processes safety async builtin terminal emulator which is really nice fully compatible with vim's editing mode and Vim script version one so when they say that it is a rewrite of Vim they're talking about Vim one okay but it does allow you to use Lis scripts so the time this is a big deal because people were getting like they liked Vim but it was just a pain uh because it it wasn't keeping up but then Vim 8 and Vim 9 came back and they made great improvements and so now it's debatable whether you want to use neovim or just Vim 9 um I'm in the camp of just using Vim 9 UM or the LA Vim because I don't really care about neov but you know if you do need to write your own plugins it is easier and there are some really amazing uh plugins for neovim but these days I'm either using Mac with Janice or I'm um with on Vim 9 or Vim or whatever or I'm using visual studio code with Vim Keys okay and if you're wondering I did get rid of my API key for open AI so no one's going to abuse it what I want to do in this video is take a look at neovim um I think I shut the server down earlier right yeah I did okay great uh so we'll go take take a look at neovim I've never installed neovim uh as like since it came out so I don't even know if there's anything different I think it's just the same thing so I can go ahead and install now if we are on Windows I'll go here obviously they have a bunch of different ones here so we'll go ahead has an MSI so that is an installation thing I imagine it's going to look just like the normal uh normal Vim here so we g go ahead and install that uh I want to run it run anyway and we'll go over here and we'll install it all right I imagine Mac is a DMG and you just drag it over in Linux you probably have to run a command or looks like there are other ways for us to install it so I believe it is now installed I'm opening up my uh my um uh start menu and and I open it up and there's neovim okay looks exactly the same okay all right um I imagine that plugins are probably easier to install with this thing so go back to neovim Modern goys yeah sure yeah nothing nothing super exciting to run home with maybe people that know neovim more than me are excited about it but remember had like really nice looking uh screenshots before yeah what's this a fork of vonm what the heck is vonm um simple modal ID built on neovim the goal is to create the ideal programming environment so it seems like it has a lot of stuff built into it and then you have neovim a simple modal ID built on neovim with v vs code extensions oh that sounds interesting ridden in electron okay so it seems like a lot of people have leveraged Neo's API to build um their own visual things on top of it because if you think about it like we have G Vim but we're not opening up in G vim and the one that we opened up neovim is actually not opening up I don't think that's a standalone application I think that is just opening up in uh command prop or something so maybe there's something really nice like this but this is showing it on a Mac so I don't even know if you can do this on Windows I mean it says electron so if that's the case it should be able to run on anything here if we go over to releases uh there's a Windows one yeah I might as well give it a go for fun I'll download the exe maybe I'll be a convert to this but you know maybe the ecosystem for neovim is easier on Windows than it uh like than it is GM is and so you know this is why I'm just kind of exploring these and seeing what we can take a look at because then end the day it's up to you to choose what tools you want to use if you're just going to use it with vs code which is totally fine the stuff installed uh like sorry with the evm commands on you can do that so now I'm just opening up that executable and we'll open it up that it's electron app doesn't sound very efficient memory wise so I don't know if I would necessarily want to run this day today but we'll take a look and see if it actually can start up and this was released 2021 so it doesn't look like it's being really that well maintained and I'm waiting for it to start is it going to start it didn't even make a version one and so this is kind of where I give up with this thing we could take a look at Vim here and did this ever get nope so I mean there's stuff out there which is cool but uh yeah that's neovim so I would say we're done here okay all right one more thing um I just want you to know about this if you want to use use it but there is a Chrome extension called vimium that allows you to have Vim like commands that control your Chrome web browser so you have a bunch of commands um and they're not exactly like Vim but they're very similar and this could be a really good way to train your hands to uh work with themm um and that's all I wanted to say there okay hey this is Andrew Brown let's talk about Vim support and other Ides so most Ides will have direct uh support or indirect support via plugin extension to emulate the Vim command so it's not like the full Vim ecosystem but it's the commands and that's good enough and so vs code has an extension Cloud9 has one you you just turn it on you set it to Vim mode you have jet brains uh any of their IDs have a a Vim mode xcode and you can get Vim in Android Studio I think noad Plus+ somebody allowed you to have Vim there as well so there's a lot of places where you can uh get Vim like commands so IDs are simulating or emulating I should say I don't know I wrote the word simulating because it's actually emulating emulating the level of supported uh commands and Vim functionality with uh will vary with each implementation just understand that there could be limitations but for the most part when I use vs code it feels like I'm just using all the commands that I'm used to okay hey this is Andre Brown this video I want to show you um how to install Vim mode or uh Vim uh Keys here for for visual studio code just go to extensions here on the the left hand side you're going to go and type in Vim you're going to have more than one option uh just because there could be other implementations but the one that I know is the vs code Vim one but just make sure that you don't end up installing more than one because that can mess up problems and so you just install it and then you'll have them if you ever have any issues you can always just disable it um I can uninstall it here just to show you what it looks like but the idea is you just hit install it's installed and then your cursor will change okay and you'll notice that all your keys will not work the way that you expect them to work uh but there you go hey this is Andrew Brown before we start to learn commands I want to talk about the default position of where your hands will be and that is always on the home row uh so Vim is designed around using the least amount of keystrokes with the least amount of hand movements so your hands should always be resting on the home row forget about your mouse so you do not need it when you are working with Vim uh notice that there are ridges that indicate uh the F and the J key uh if you forget from your typing tutor early days when you learn use a keyboard This is how you know where the H and the J are um and so that's where your index fingers should be resting so if you take your index fingers they should be sitting on the F and J key um but yeah we'll just cover a little bit more about vim and then we'll get jump right into commands and start doing that okay let's talk about the different modes of Vim because it's very important to know them so you can navigate around uh the the default mode the mode that you enter in is the normal mode and you can always get back to normal mode by pretty much always hitting Escape All right so that's how we always get back to normal mode uh from normal mode we can transition to other modes there is a a big comp complicated diagram of how everything connects to each other but I basically just look at everything being connected to normal mode so we have command line mode this is where you enter in commands um so anytime you type a colon you'll notice at the bottom that that colon will appear and then that bar in the bottom is where you're entering in commands so we have entering a command uh if you try to search something by doing forward slash then you'll notice that it's actually fine but sure we'll call it search or if you want to search backwards or find backwards that will put you into command line mode you have insert mode insert mode um happens with a lot of characters if you type in I or capital I you'll enter insert mode if you type in a or capital A you'll enter insert mode o or capital O C or Capital C there's a lot of cases where you'll enter into uh insert mode which we'll cover uh in detail in each section then we have visual mode so visual mode is a new type of mode um and it actually has uh two subset modes which is visual line mode and visual block mode um this is a way of selecting text and then doing something with that text and we'll cover that when we cover visual mode we have replace mode and this will replace a a character or replace or you have the full replace mode which you'll stay in replace mode as you replace characters and we'll cover that when we talk about Replacements there are other modes there's a select mode an X mode and a terminal job mode we are not going to cover them because I never use them so you don't need them either okay some developers like remapping the Escape key to be more true to the original position the Caps key or the tab key if you remember earlier from our history if you did watch those videos that the um Escape key used to be to the left of the que so some people like remapping it um I don't remember what the recommendation is anymore but I I don't do that another very popular remapping is uh remapping the control key to the caps lock key again to reduce the amount of movement um but again I I just leave everything in its default position if you're wondering where the command line bar is it will show up there down below and it will generally tell you in the command line bar in the front what mode you're in so they saying that it's visual block mode and that's how we know we're in visual block mode um some will not tell you that there you're in normal mode you just if there's nothing there you're usually normal mode some will actually tell you if you're in normal mode okay all right so I want to just show you modes so if you look down below in Visual Studio code we are right now in normal mode so it does indicate it here way down here that we're there so I'm just going to click anywhere in here let's just to say on this line open up a programming file whatever you can work with and if I hit I on my keyboard notice that we're now in insert mode and if I hit Escape I exit back to normal mode if I hit I I'm in insert mode if I hit Escape I'm in normal mode that is pretty straightforward uh there are other modes so if I do um B I'll be in visual mode I hit Escape I'm out of visual mode if I do capital r I'm in replace mode if I hit Escape I'm back in normal mode so you kind of get the idea uh but usually normal and insert are where you're mostly going to be so just pay attention to what you're doing there you go so file commands are ways to work with files um at the command line and they always start with the c we've obviously done some because or you've seen me do some because there's no way you can quit without uh using a file command so we have WR for saving a file uh WR in the f to save it to a specific path or file name we have W exclamation mark which will attempt to force the file to save sometimes you have readon files or um you don't necessarily have the permissions that you're trying to force uh Force save a readon file you have wa which will save all files I never use that one we have quit we have quit for sometimes you just want to drop everything and get out of there so you do that QA to quit all open files and then there's Zed which isn't a command line file but it's like uh it doesn't start with a coal and you can just press Zed to get out of it really quickly which is interesting um but for these when we're in Visual Studio code we don't have to worry about these so it doesn't matter but we will go ahead and just quickly demo them okay all right so we're back in here and I'm actually going to use Vim Down Below in the terminal so I'm going to type in vim and it's not responsive again I don't know why this happens sometimes it happens there we go if I go back and I type in Vim I can actually create I can actually do make di in here and some other commands I didn't cover those in there because I think they're kind of exotic and I don't necessarily like using them but uh it's very straightforward you know you could do q but one I wanted to show you was the Zed key so if you do shift Z capital z or maybe control Z or Z it should quit there we go let me try that again and and that I'm actually just doing what is it I actually have to tab it twice I'm not sure why it's being so unresponsive but if you were to use that let's say in um you like shelled into a server remotely connected and you did uh capital Z it would it would quit right away but I think these are pretty straightforward um just be aware that they exist okay all right let's look at motion commands that these are things that are going to um allow you to move quickly around your document and often they will uh uh these are shortcuts that only start in normal mode but will generally stay in normal mode as well because it's about movement and not necessarily uh modifying uh text okay so motion commands would be something like directional motion so being able to move up down left and right so standard Mo uh movements word motion so move based around words uh text object motions which I rarely ever use um which are paragraph and sentences we have jumps which will jump you drastically to another part of the document marks which will Mark a position to jump back to so let's take a look at a couple of examples of um of motions as we will see a bunch of them throughout this course so let's just take a look at a couple here the first is if we wanted to go to a specific line so we'd say we give it a count like 22 and then we say G to say go to line 22 and it would jump to that line so that would be considered more of a jump motion then we have W so if you press W while in normal mode it will jump to the start of the next word um so those are an example of a couple of uh uh motion commands uh there are operator commands which can be used with motion command so um operators generally are trying to change something um and so we have change delete yank um uh Tilda which I rarely ever use in this case a swap case we have another one for swap case make lowercase which I actually do use make uppercase which I like using as well GQ which I've never used before um shift left shift right which you'll use quite often and more so just understand that um operators can be used along with motions and the way that would look like is you would say all right let's say I want to delete something so I'm going to say delete the current word and actually be like from the current cursor to the to the start of the next word or change three so C for change three for the quantity and then three words so hopefully that makes sense okay all right so let's take a look at the easiest possible motions first which you should absolutely have memorized um and and learn extremely quickly which is the hjkl Motions so here we have H for left J for Down K for up uh and L for right it looks like an I but it's actually an L um and one thing you can do is you can add uh values to it so if you were to um add a number a count prior to the number then you would change how much You' move because usually just be one Val like one character or one line but here if you say 10 H and I'm get my pen tool out here so just look down below here H is this way so 10 H would be 10 characters to the left 3j would be three lines down 2K would be two lines up 8 L would be eight characters right I often don't remember which is up and which is down but my fingers seem to remember so like if you were to ask me like on the spot which goes up and which goes down I couldn't tell you um but I know that if I had to move it's muscle memory now okay all right so what I want to do here is practice motion commands and the great thing is that we can actually do all of this within GitHub I was just thinking about this that there's the GitHub dodev editor and that will open up a a vs code like experience and I believe that we can install Vim there so what I'm going to do is I'm going to go to something like um the ad Cloud project boot camp which is a very large project um that is visible and you can use whatever you want but I'm just trying to give you something that we can both uh look at at the same time so this is the adabs boot camp creditor application I'm going to drop this down to tags or branches M I guess I want to go to Omen King one actually sorry this is my personal one and so you can go to this one as well I'm going to go to week X here and what I'm going to do is press period on my keyboard what that's going to do is open up github.io use it loads very quickly and it's vs code if you don't like the theme you can go down here and change your theme um but on the left hand side I'm going to go to extensions and just make sure you go ahead and install the Vim extension I here so I think this is uh starting up but yeah mine's already installed so just go ahead and install yours there and when you have done so we can just go up here and open some kind of file so the app.py is kind of large and so I guess we can work with that or we could open up some cloud formation that might be a little bit better I'm going go into this cluster file and so here's an example file open so I want you to click anywhere in here and put your fingers on the uh JK L and now let's move around so I'm gonna go hit H to go left and do L to go right H to go left L to go right H go left L to go right and so you should be following along with me and starting to do these motions let's try J which is the your index finger um that will go down and then K will go up J will go down and K will go up so it should be pretty straightforward so just spend your time here trying to turn that into muscle memory all right now let's try to add the modifier so I'm going to go back to the word certificate and uh using my left hand I'm going to type something like five I'm going to hit five I'm going to hit J which is the index finger you should feel it because you should feel that little um bump there and I'm gon to hit down and so now now notice it jumped down five I get five again I'm going to hit K which is my second finger that will go back up so five down five up five down five up five down five up you get the idea let's try five left five left five right five left five right try a bigger number 12 right 12 left 12 right 12 left let's try 20 uh 22 22 down that's J 22 K that's up 22 J that's down 22 K that's up so pretty straightforward um but what you find is like you can really jump to where you want to go to so I wouldn't say that I overly have to use um uh directional motions but uh they are the basis uh uh of what to learn okay so hopefully you got that we'll move on to the next thing okay let us take a look at the go to motion commands and I want to point out I'm just going to get the pin tool out here look at where this letter is it is one key to the uh to the left hand's index finger so clearly this is an important command that they want you to know because if it's on the home row it's valuable real estate this is a command that uh you're going to be using quite a bit and I use it a lot so the goto command will go go to a specific line so if you type in GG that goes to the top of the document or the first line if you do capital G or shift G uh that's going to go to the last line now if you want to go to a specific line you type either 22 like the number of the line you want to go to and then GG or 22 shift G um and often I just do shift G but you can do either or um and that will take you to a specific line so just a reminder GG to the top shift G to the bottom okay all right so we're continuing on here now with the goto Motions I have the same document open you can open anything you want on GitHub just find a repo press period and find a large enough file to work with we're using the uh boot camp from 2023 all right so um let's take a uh take a spin for these goto commands before we move on let's make sure we remember our directional commands so J to J to go down Down K to go up H to go left L to go right so I just want you to do that for a second and now keep your hand uh get your left hand on the on the keyboard and so make sure both are on the on the home row and I'm going to press GG to go to the top and then shift G to go to the bottom GG to go to the top and shift G to go to the bottom GG to go to the top and shift G to go to the bottom it's that simple okay a to go up J to go down g g to go to the top shift G to go to the bottom it's all just drills really if you think about it um so let's say we go to a very specific line I'm looking at maybe cluster name here I want to go to that line in particular so going to type in 262 shift G or let's go to Line 270 so I'm going to type in 270 GG just decide what you're more comfortable with if you want to do the number and GG or number shift G I apparently always do shift G and I did not know that it's just muscle memory for me so again let's go back to the top so we'll do GG to go to the top shift G to go to the bottom all right so an easier way to remember this is that because the G's are lowercase they feel like they're smaller so they should be at the top or the top of the document and then the G is the grownup one so it's at the bottom of the document the shift G and that's why uh it's like that I'm not saying that's the logic behind it but that's how I like to remember it okay so there you go all right let's take a look at some word motions um and these are the most common ones there might be more than these ones but these are the only ones that I really know uh so let's take a look at them so word motions uh we have is W so move to the start of the next word we have e which moves to the end of the next word and B which moves to the start of the last word notice their position so if you notice here you can easily get to the W or e with a one single press cuz imagine that your fingers are here um and then for B I normally use I normally extend with this finger here so I'll go do this I'll do all of these word motions just with my left hand but again it depends on how far you can reach out for me it's not a big deal okay hey everybody it's Andre Brown and we're looking at word motion so there are three letters that we're focused on here w e and B so click anywhere in the document I'm going to go right to the start and what I'm going to do is hit the letter W so w is always going to move to the next the start of the next word now what's interesting here is that it moved to the colon because it's like a special character here and so it it thinks that that is the next word just understand programming languages are kind of funky so it's not always going to do what you think it's going to do let's go down to like something that looks more English readable and I'm at the start of theth if I hit W it's going to go to the start of the next word if we hit it again W it goes to the next word if I was to press two w it jumps two words right we see that modifier let's Press B to go back okay it's just the reverse right so now what would happen if we started in the middle of the word let's say we're in the middle of this word and we hit W it still goes to the next word all right let's try out e so e is going to move to the the end and I actually was wrong I said move to the end of the next word but it's going to be moved to the next closest end of the word so we hit e here it goes to the current word end and then the next end right all right if you try B you go here but notice if I hit W and b or sorry e and B it'll just keep flipping between these two all right so these will become more important later on when we learn about selecting so like later on when you want to select words you're going to be typing like V and then go to the end the word e to select exact words or you could do like two and then you might want to copy something particular but we'll get into that when we talk about visual mode but right now all I want you to be able to do is do W and d right so I'm hitting W here or we can hit e which goes the end the word we go B to go back all right so there you go so this is a command I wish that I would remember to utilize but I always kind of forget to do it and what it will do is it will join other lines to the current line and the key that we're using here is the capital J okay so indicate that that is capital here and it's on the home row so it's a very useful um uh uh uh command and so we have J will join the bottom line with the current line and then the next line is is 10 J so if you want to say the 10 bottom lines join to the current line we can do that so it make more sense when we uh utilize it in practice okay all right so here I'm in my document and imagine that I want to bring a bunch of lines into one line so maybe a good example would be to write some code here actually we we'll leave that alone because we haven't really gotten into editing but I'm going to go here to this line of description and what I'm going to do is type uh type uh shift J and notice it brings it onto the current line so this is really useful when you have a bunch of lines and you just want to have a single thing now let's try something Lar so we're on line three and let's say we want to go down to line 17 so 13 would be 10 14 15 16 17 sorry um 10 uh 13 so this is 10 11 12 13 14 so 14 lines I'm going to type in 14 shift J and now they're all one line okay so there you go okay so we looked at goto line which which allows you to go all the way to the top of the document or the bottom of the document or let's say um to a specific line but what if you want to move on the horizontal access to the extremes well this is where these two uh Keys come into play um and I don't have a good way of defining these groups but the idea here is that dollar sign will go to the end of a line and uh the carrot that's what it's called The Carrot will go to the start of the line and if you know regular Expressions it makes sense because do dollar sign always selects the end uh end of of a of a document and uh or a block of text and carrot will always go to the beginning so if you know a bit about regular Expressions that kind of makes sense so let's go try that out okay all right so we're back in our usual documents I'm just going to click into the middle of this long line here and what I'm going to do is uh make a dollar sign so notice it jumps to the end I'm doing this all with my left hand and then have uh the carrot so you can see we can toggle back and forth because sometimes you just want to move to the start or the end but you don't necessarily want to uh insert um there because it'll be actually very similar commands that do the same thing but they'll directly take you to the insert mode Let's try a couple things so we'll go to the top GG shift G to go to the bottom uh and we'll go and do GG to go back to the top I want to go to four shift G to go to line four I want to go to the end of the document we'll do dollar sign uh we'll do carrot to go back to the beginning so we'll go a bit slower okay so bottom of the document shift G top of the document GG I really should have went slower probably sooner right let's go to line four so 4 G G I forgot to do shift G end of the line dollar sign start of the line carrot end of the line dollar sign to the bottom of the document shift G to the top top of the document GG so there we go now we have the extremes uh the most extreme movements in all directions okay all right let's learn about the replace command this will lets you write over top of existing characters so the idea here is that with uh the r command we can replace a single character or with capital r we can enter replace mode and everything that we will type will be replaced um this functionality is very similar to the insert key if you've ever used uh Microsoft Word back in the day and you had a Windows keyboard and you accidentally hit this button you know what I'm talking about here it does the exact same behavior so let's take a look at it all right so we're back in our document and let's go ahead and try that out so I'm going to go up here to theth and I'm going to type in R and so that's going to enter us into rep uh to replace that character and so I just press any other key like H and so now it's been replaced now it didn't say it was in replace mode because it's a single character um but I want to undo that so we'll go up to here to the top and we'll say edit undo right and so now imagine I want to just completely overwrite all this stuff here so what I'm going to do is um do shift R to make a capital R and I'm just going to say hello world I am overwriting all of this okay so you get the idea I'm and now notice down below I'm in replace mode to get out of replace mode I have to hit escape on my keyboard and I'm out of there let's undo that so I'm going to go here and say undo nose is going to do undo it per letter so that's kind of annoying um and so I'm just going to use the regular control Z to get out of that so just understand that um there is a separate do a letter for Vim but the thing is is that you can uh when you're using vs code you can undo that way if you are using G Vim uh you can also undo from the top again it just depends on what you're utilizing I'm hoping that you're following along here um with uh with Visual Studio code okay but uh there you go all right let's talk about the undo and redo command so undo and redo allow you to revert or reapply text changes I'm sure you are famili with undo so to undo it's the UK key all right and if you want to undo an entire line it's the undo line which I don't think I've ever used before but um now that we use the replace mode I think that might be something interesting for us to try out then we have the uh uh the controlr key so not shift R but controlr and that will allow us to redo something so let's give that a try okay all right so we're back in our document here and what I'm going to do is change some text so let's go ahead and do shift R and um we'll just type in hello world and I'm going to hit escape to get out of replace mode and now let's undo so I'm going to hit U to undo okay and notice that it took multiple undos there so let's try that again so I'm going to do shift R to go into replace mode look down below replace mode type in hello world all right and then I'm going to hit escape to get out of replace mode back to normal mode and I'm going to hit U to undo and undes uh it will do the full undo so again I not really sure what the shift U like the undo line is for but maybe if we made lots of changes let's try this so what I'm going to do is go ahead and and we'll say shift R and type in hello world all right and now what I'm going to do is hit Escape I'm going try shift R again I'm going say goodbye Moon and now I'm going to try shift U okay so that will undo multiple undos on the same line so that's probably what they're talking about um but let's say we wanted to redo something let's go ahead and do control r r on our keyboard and uh just understand that this might not work it might not work on um this because of the mapping so it's not working for me try command r and so this is where we might not have something says already the newest changes so I think it is actually trying but it's not working so what I'm going to do is I'm going to go ahead and do shift R okay and then hit escape and then I'm going to do undo and going to try control R again there we go so I'm doing U control r u control r u one thing I'm noticing is that if you look down here below it says already on the oldest changes it kind of shows you like uh the history of what like what is being changed so let's go just pay attention to this for a second all right so I'm going to go ahead and type in hello world Hit escape and I'm going to go ahead and make another change so I'm going to do uh shift R again and say goodbye Moon and his Escape I going to do it one more time I'm going to do shift R and say uh Ola uh Venus and hit escape to get out that mode and now I'm going to do is hit undo so now if you look down below it says one change before two and we'll undo it again and it says one change before one and then undo one change before zero so and then we do undo and then we get back to that so I never really noticed that before because this is probably what shows up in um only in Vis Studio code and not necessarily uh G Vim or Vim okay but yeah there you go all right let's take a look at the change command so this is a way of selecting and then deleting amount of text based on word motions so we have the C line for Change and the capital c to change the end of the line which I use a lot is the capital c one uh a way of combining it with a motion would be something like CW so change the end of the word um so that's an example right there you could change to the end of the last word or c g which would be Chang from here to the first line so remember supposed to be an e on the end there so just remember uh all of our motions that we learned that will move to places it'll work with that even with like let's say the dollar sign let's let's go practice that now all right so let's go ahead and go back up to the word the and I'm going to press the word c and so now I'm ready to change something notice that the character is is shown in half to indicate that it is ready to change something and I want to change uh I want to take out to the end of the word so to do that I'm going to hit e and so now that word is gone and it automatically brings me into insert mode so that I can change whatever I want to say like hello okay and so we'll hit escape and we'll hit you to undo all right but understand that that's what C does okay so C is about changing using and then using some kind of emotion so I want to click here I'm just going to click to Cluster here for a moment and imagine that I want to replace the word cluster and configuration so if we wanted to do that we want to get to the uh this letter here n so we want to uh go to the end of this word and then the end of that word and that's two away so what I'm going to do is type the word uh type the letter c okay and now notice that there's a half character to indicate that we are uh ready to make a change or do something and then type in two and then e okay and now those two words are gone I'll just type in hello world all right and then we'll get out of insert mode by hitting Escape we'll hit U to undo and so that's pretty clear um let's say we want to do change to the end of the word we can do c and then remember dollar sign will bring us to the end so we do dollar sign that brings us to the end of the word so I'm going to hit escape to get out of insert mode I'm going hit you to undo that now a more efficient way is just to do shift G so I'll do shift G now Capital I'm saying G right C Capital C so we'll do Capital C and that brings us to the end of the word so we'll hit escape again we'll hit U to undo and we'll do shift G so I use that one quite a bit when I just want to like get rid of everything at the end there and so I'll hit escape and undo so the idea is that you're trying to figure out the least amount of presses to do the thing that you want so imagine I want to get rid of lines 4 to 9 and then enter insert mode because I know immediately that I want to do something so we have 1 2 3 4 5 six six lines um so I'm going to try or sorry one two three four five I want to go down five lines so I'm going to type in C to change and I type in five okay and then I'm going to hit J to go down five lines and so I took out those five lines all right so I'll hit escape and undo okay but the point is that we're entering insert mode because we want to do something there so just think of those things that you can combine it with any kind of word motions if we want to go backwards let's say we want to change to the front of the line I'll do c and then I'll do uh carrot to go to the front Okay so Works in both directions un undo that imagine I wanted to go back uh just a single word I can do change C for change and then B for back okay hit escape to get out of that mode undo all right so it's not a delete it's a change the idea is that you want to enter into a mode to start typing something okay all right let's take a look at delete so we have a few I mean you can imagine what delete does but delete is going to do a few things so we might want to delete uh to the to the next word delete the next two words uh next to next two start of the words DD to delete the current line 5 DD to delete five lines uh Shifty to delete to the end of the line and then we have X which deletes the current selected character uh so whenever you delete something and I should have said this for change as well but anytime you uh uh you imagine that you're removing text like text vanishes almost like it's getting cut or deleted it's going to end up in the unnamed register which is the clipboard which which means the next paste action that you will use will will paste that thing we'll talk about that when we get to paste okay all right so we're back in our document and I want to go ahead to this line here for and let's delete some stuff so let's say we want to delete to uh this word here cluster so we have to go to the end of this one one 2 3 four so four to the end so we'll do D okay notice it it went half because it's ready to do something just like when we hit C and say 4 e now notice that we're not in insert mode okay so when you want to delete something and then immediately enter insert mode you're going to use C and when you literally just want to get rid of something you're going to use D because you want to stay in the mode that you want to be in otherwise you have to escape and that's an extra action right um so what I'm going to do here is hit U to undo and uh now let's try um lines because lines are more interesting I think so what I'm going to do is I want to get rid of line four so I'm going to do is hit DD to get rid of it okay and then I'm hit U to undo all right DD to delete the line U to undo now if I go in the middle of the word here like configuration imagine I want to get rid of just the end of the line so what I'm going to do here is Type in D and then dollar sign to the end of the line now I'm still in normal mode right so I can just hit u i don't have to escape but we could just do shift d which is going to be more convenient just like the shift C the shift d will delete to the end of the line so we'll hit undo there all right uh X is a useful one if we hit X it will just delete the Single Character so sometimes you just want to get rid of single characters I want to undo that entire line so we'll do shift U to bring those back if I wanted to um I think like delete the first next four characters I think we do 4X we'll try that out and it works I just guessing here because once you start to learn the patterns here you can start making up your own things that will work for you okay so hopefully that is clear but uh I just want to show you one thing we'll talk about this in the next video but the idea is that every time you uh Delete or change something it's actually going into the unnam register and it's basically like you cutting or copying something into your clipboard so let's say I wanted to delete this line I'm going to press DD if I wanted to bring that line back I'm going to type in shift p to paste above and it's back because it's the last thing in My Clipboard if I do shift p again notice it's in my clipboard okay so I brought all those lines back with shift p i want to get rid of these lines so we have one two 3 4 5 6 7 8 9 10 11 11 here down below so what I'm going to do is just type in 11 DD and now we're back to here okay so we'll see you in the next one ciao all right let's take a look at yank and pace so yank will copy text into the clipboard to be pasted later um and it's not really clipboard it's actually the unnamed register but I'm going to keep calling it clipboard because that's the easiest thing to think of it so imagine you want to yank a word Yank A Line uh yank the current line which will be capital Y so you might be starting to see a pattern that sometimes capitals means that it's applying an entire line or a double letter is is a line but um notice that y y and capital Y are redundant I don't think we checked that in well shift d went to the end of the line but definitely capital Y is the current line it's not like to the end of the line but we'll test that to make sure that's true uh for p we have paste before or paste after so above or below paste before and after makes sense only when you have yanked entire lines if you're copying individual words uh it doesn't work how you think it would work okay but let's go take a look all right so we're back in our document I'm going to go to this line here and let's try out yank so what I'm going to do is type in um actually let's go to a random line that we weren't at before like ALB Security Group I'm going to hit y y to yank the entire line okay so y y to yank the entire line and so now I'm going to hit P to paste so notice it pastes down below we'll hit undo if I do shift p it will paste above we undo P below undo shift p to go above so pretty clear all right now let's say we wanted to grab this line here I'm going to try shift Y and see what happens sorry shift Y and now we p uh we press P not now we P but we press P right uh that was kind of embarrassing but notice that it doesn't go to the end the line it copies entire line so it doesn't work like how C or D does where goes in the line but it takes the entire line so it's up to you whether you want to do y y or shift y but I find that I use this command quite a bit uh if we wanted to uh copy very specific words like Network and cluster we'll press uh y to get into yank mode now so notice that I mean it's not really a mode per se but notice that it's now half a character so it's ready to do yanking and so I want to get I want to go 1 2 3 so um 3 e to copy Network and cluster so now I'm going to do p to paste it and notice it's pasting in there if I do P or shift p it makes no difference so if we go up to this line which is empty if I do p okay it does not matter if it's p or shift p but that's how you do that and so often you know you'll want to do that uh let's imagine that we want to select um two lines we'll do two y y and then shift p and I'll paste the two lines we'll undo pretty straightforward okay all right so youve patiently waited and now we get to do aend and insert and append and insert are probably the most commonly used commands because often the whole point of a document is to modify to write and a and I are going to really play a role in that well so let's take a look at these command so these commands will insert will enter insert mode there's no append mode they're both insert okay so a is going to append insert is going to insert a is going to append to the end of the line and I is going to insert the start of the line so I have a visual here to help it makes sense imagine your current cursor position is on the E okay so if we were to press I it's going to put the cursor to the left of the curs uh to the cursor box okay that's going to be insert mode if you press a it's going to go after the letter okay after the cursor box if you press shift I it's going to uh put you to the beginning of the line in insert mode if you press capital A it's going to take you to the end of the line in insert mode and I use these all the time okay all right let's take a look at insert and aen so I'm going to just click my mouse here to uh maybe the word cluster and so we are hovered over here I'm going to make this much larger um just for this purpose here just because I want to play uh uh pay very close attention to what we're doing so I'm just going to make it really large here and so notice that my um cursor is blinking here on the C and so what I want you to do is press I to go to insert mode so now notice that it went to the left of it right and so now I can start typing stuff so like hello I'll just hit Escape okay and we'll sit undo so let's try that again we'll press I it goes to the left notice that we are insert mode down here okay and we can type in front of it okay I'm going hit escape to get out of that mode I'm going hit U to undo all right now let's go take a look at a so we'll press a and notice that it inserts to the left of the character why do they have both because it's all about efficiency right you want to again make the fewest amount of keystrokes to get what you want done here um so here you know we can type whatever we want I'll hit escape to get out of that insert mode and we'll hit you to undo now let's say we want to edit something at the start of the line where characters actually begin not the absolute start but the start line I'm going to do uh whoops undo sorry whoops whoops whoops whoops whoops it's very easy to mess up in Vim but we'll do shift ey and so shift ey will bring us to the start of the line where where there's actually characters it's not literally on on the actual start of the line but here uh to the stuff and so I can start typing stuff like Hello World okay I'll hit undo for that if I want to go to the end the line and uh start inserting I'm going to do shift a capital A and I can just continue on here okay we'll hit Escape undo so those commands extremely useful you'll be using them day in day out okay this is a very useful command I don't think it has a proper name but I call it line insert so line insert allows you to quickly create a new line above or below the current line and enter insert mode it's very simple it's the o key so it's uh o is going to insert uh a line below and enter Insight mode and then uh capital O will uh insert a line above and enter insert mode EAS way to remember this is that below and above both have an o in them that's all I can think of why they might have named it as o um but also the fact that it's really close by is another reason okay all right so we're back in um our document here I'm going to go back to this line here so imagine that I want to create a new line below and start adding to this list so what I'm going to do is is Type in O and I can start typing it even match the invitation level so I can just continue on where I was I'll hit Escape undo so we'll try that again we'll press o and I can add another item super super useful we'll hit undo imagine we want to go above we do shift o all right undo shift o Escape undo and I'm not always saying that but just remember that when we do this it enters inert mode okay you got to remember that certain commands will enter you insert mode and you have to hit that escape button afterwards uh but there you go all right let's take a look at the fine command so the fine command lets you quickly find and move to a search result I use this all day every day because it brings me to exactly where I need to be if you type in forward slash that's going to start that fine command it's going to move forward to the uh from your current position to the the key uh the word here which is hello if you want to go in the opposite direction you do question mark I rarely ever do the question mark because once you start searching you can always just um change the position which we'll talk about in a moment one thing you can do is you can also say where you want to end up after the match so if you want to um go to the start of the match so imagine that there is a word that you're selecting you want to be at the start of the word you do s and then you want to offset it by uh uh either plus or minus characters you can do minus two so you'd be two behind the front of the word if that makes sense and you can do Plus in the other direction e is for the end of the match um and so you can say go to the end of the match and then add four characters you can also offset by line so I can say plus three lines to go three lines below and what if you have multiple matches well that's where the N key comes into play so that will get your next match or if you do capital N let shift n it will go to the previous match okay all right so let's give this uh a spin so what I'm going to do here is I'm going to go top of the document I'm going to click into here I'm going hit forward slash on my keyboard now Look Down Below in the command line here it's it's waiting for us to put our our match in here so I'm going to type in the word hello I'm going to goit ahead and hit enter it did not find anything for hello so I'm going to type in for slash again and this time I'm going to type the word cluster because we have cluster here and notice we have one out of 11 match matches so notice that it's jumped to the start of the match I'm going to go ahead and hit next to go to the next one next to go to the next one all right if I want to go back I'm going to uh do capital N okay so shift n or n to go to that so pretty clear how that works all right now imagine that we want to um go to the next word cluster but we want to go to the end of that word so let's try that again so I'm going to type in cluster I did forward slash look down below forward slash cluster forward slash again and then we'll put an e and we'll hit enter and now we're at the end of the word if we hit n notice that it does the same thing it's going to remember that we want to go to the end of the word every single time I'll go back up to here let's try another one so we'll try for slash cluster to match for slash I'm going to do plus one line okay so now what I'm doing I'm hitting n to go to the next line line but it's jumping me to the next line I'll do shift n to go back so it's up to you whether you decide that's useful or not I don't really like that one but we we'll try this again so I'm up here I type forward slash cluster look down below I'll do forward slash again and we'll say the start of the word minus uh one okay so now look we're at the word cluster but one character to the left and if we hit n we'll do that but again for the most part you just type in hello whatever you want fargate and you just jump to what you want could you use regular Expressions here I actually have no idea let's give it a go so I'm going to type the word uh cluster and then I'm going to do uh period for matching and then I'll do period again so yeah I guess you can use reg X's I never actually use reg X's I usually just know what I want um and it'll work but I guess you can use regular expressions in there so that's nice to know but yeah there you go all right let's take a look at the substitute command so substitute is a command that lets you replace text in a file using regular expression I use this for um simple Replacements but if you find that this is hard a lot of times I just will use another editors uh find and replace I'll literally drag files into another editor just because this stuff is um hard but it works for simple stuff so let's take a look here so the first one is um first we're going to use colon to bring up command and then we're trying to say the context so if you remember back when we were learning about the Ed editor we had to um tell it to select certain lines and so here period represents the current line so we're saying uh on the current line we want to substitute the match of hello which is a regular expression we can have what weever want and replace it with the word world so and it will replace the first occurrence okay here we're saying on line two substitute the word hello and uh replace it with word now world now we want this to be case insensitive so ignore the fact that if it's Capital H or lower c h if it matches the word hello match the word replace the first occurrence on the on line two and ignore casing that's what we're doing here then we have a range so remember the range from uh using uh Ed so we're saying two comma five so line two to five replace the word hello with world and replace all occurrences G stands for Global and that's what it does here we have one comma dollar sign so here we're saying the entire document right replace hello with world all occurrences and we have a shorter one here so this percentage is just a short it says short cut or short cute it's not cute it's cut but this is the same thing as this so often I will just do colon percentage s and I'll be off to the races I don't know why I have a space in between here because you don't need a space um and that might mess things up but let's go take a look at using substitute all right let's learn how to use the substitute command so I'm going to go to line two and I'm going to make a colon because we want to enter a command in and I want to change something on line four let's change the word cluster so I'm going to type the uh the number four for line four okay and then we'll type in s for substitute forward slash and then we'll type cluster notice that it's matching cluster here so we know exactly what it's thinking about to replace um if if you want you can use regular Expressions so I can do period plus and it goes in the line and then I can put maybe a question mark to say don't be so greedy um but you know uh I usually just type the word that I want okay so you can use complex regular Expressions uh it's not going to replace with anything so we have to put something in here so we'll say hello so now it's going to replace it with hello okay and I'll hit enter and it's replaced cluster okay so we'll undo that now normally when I use it I almost always do uh colon and then I'll just do percentage because that's pretty much easy you always want to look at the whole document so imagine I want to change all the words that are cluster in this document I'm going to type in s for slash cluster hello and by default it seems like it's case in sensitive which is interesting so I'm not sure what it would be to say like match the case but it looks like it's going to replace them all but if I just hit enter right now and I did what did it do so we'll do uh GG to go to the top and replaced all instances so I didn't actually have to put a g there but this might be the implementation of Visual Studio code but generally and this is specifically to to regular Expressions usually you put a g here uh to do that the way I know that is like I'm not saying that this is the regular expression engine they're using but if we go to rub.com we want to practice regular Expressions normally if you have a a piece of text here like let's just copy a piece and I wanted to match cluster notice that it's not matching this one and so normally I'd have to say I here to match those two okay so just understand that uh regular expression engines will vary based on their implementation um if we used regular Vim this might be a bit different so what I'll do so I'm really curious I'm just going to open up G Vim really quickly in here okay so I got G Vim here I'm just going to copy this block here I just want to see if it actually acts the same way so I'm here I'm going to hit I for insert and then I'm going to right click and paste I'm going to hit escape to get out of this mode because I just want to test I'm I just want to test to see if this works properly so I'll do GG to go to the top and so what I'm going to do is do dollar sign here down below here and I want to do percentage s for slash cluster hello and then notice it only replac the first instance I didn't put a g on that so it only replaced the first one we'll do undo I think there's only one word cluster though so let's try try that again so we'll do colon percentage s and we'll say cluster hello and this time we going to put I here okay so replaces both so I didn't have to put a g on there but again you know uh you have to use these things and figure out what works um but I know that g is something that you can put on there as a command but notice that in this one you had to put the i in so just understand that the engine is going to vary okay and Neo might be different from uh Vim 9 versus dim 3 versus what vs code does versus whatever does um but yeah I again I just try to use the the find and replace when I can but I do use this for smaller uh substitutions okay let's talk about a special key called The Leader key which is by default map to the backslash you can see it over here all the way on the right uh normally your enter or your enter return key would be here so hopefully that makes it clear this key is specifically used for triggering user or plugin defin shortcuts uh one that I use a lot is the nerd commenter plugin hotkey which should be leader key CC um and you can map your own keys if you want to um set up the leader key so this is an example of um something that we could map some devs don't like the location of the leader key and we'll map it elsewhere like the space bar I leave it where it is cuz I think it's totally fine okay all right um so in this video we're going to take a look at the leader key what I'm going to do is go over to Janice because I just want to show you uh where there are some mappings so you get an idea of like how often these are used um and then we'll go set our own uh mapping for a key okay so I'll go back here to Janice and we'll just scroll on down and I want to show you here let they have leader ew leader ES and they have a bunch of commands to do a bunch of things so hopefully that is uh pretty darn clear uh we aren't going to be able to do things over here because we actually have to um update our vimrc file so we'll do this with uh GM G Vim here today and what I'm going to do is go ahead and say file open and we're going to open up that vmrc file and um I'm going to ignore this just say make changes no I don't care and so we had that plugin here before I'm just going to take out cuz I don't even want to use that plugin I'm going to go insert mode and what I'm going to do here is I don't know if I can make this larger no I'm not sure if I can make this window larger here the font it's kind of small select font here uh 14 16 here let's see if that's 18 is that a bit better there we go now we can see what we're doing and so what I'm going to do here is uh remap a key so so we have n no remap I don't know what n no means but I just know that that's how you start a remapping and so we'll do leader and we'll do B this will be something we learn about later is buffers but we're going to do this right now so we'll do buffers and then CR buffer space okay I've never bothered to learn what all the stuff means but I copy and paste them and it works so that is fine so I'm going to go ahead and hit Escape here and I'm going to do colon WQ which will quit out of GM I'm going to reopen GM you can do this wherever you can set a vmrc file and hopefully this works I'll bring this on over we've lost our beautiful font size we probably have to set that as a default and I'll make that a bit bigger still kind of small say 18 here 18 there we go that's better and so the idea is that if I press the leader key it was leader B so we'll try leader B okay notice that it triggered that buffer command because that is what we configured um and so I'll just hit enter so I'll do leader B and so that shows that there all right so that's how you would set that key but just understand that when you install plugin some of them will require the leader King you need to know where that is okay let's take a look at visual mode so visual mode allows you to select text from either yanking deleting or manipulation we have three uh modes here we have the visual mode which allows you to select multiple characters that's the regular V capital V which is for visual line mode for selecting entire lines and control V which is my favorite which is a visual block mode allowing to select vertically uh and by line so I think it's by line as well but we'll we'll find out here in just a moment okay all right so we're back here in um right I'm just using the the uh hjkl Keys here and this is what I want to copy then what I'm going to do is hit Y to yank and so now I'm yanking it says down here seven lines yanked and so if I do shift p I'm pasting that selection will undo okay you could also use that to delete so if I do V again and we go down I'm just using those uh hjk commands and I hit D that's going to delete them we'll undo that we'll try that again so I'll say V and I'll go down somewhere else anywhere doesn't matter and I hit um C it'll change and bring me into those modes so we can do our r c r d or Y or yank or delete or change right uh let's take a look at shift V I use this one quite a bit because if I want to select multiple lines I do that I just go up and down and it will always select all the lines this is useful when you want to yank a bunch of lines and then paste them above I find this faster than than having to figure out the number and then go 22 yank or whatever it's just easier to go shift V and just select what you want now what is really really really really useful is control V I find this to be extremely powerful H so imagine that we want to on this line insert something in front of here all like in this entire line right let's say we want to put um a dollar sign all the way down here so what I'm going to do is go do contrl V that's going to enter me into visual block mode and now want to hit J to go down notice okay notice that it's selecting vertically and so if I hit C I can now do dollar sign or type whatever I want hello and that is super powerful right so I would say that one's one of my favorite I think that if you're at the end of the line if you do that let me just see here if I do one space on the end here and I do um contrl V and I go down here it'll actually select all the ends of the line so I can then go ahead and say C it didn't exactly work we'll try that again okay for some of it's it's working for some of them they're cutting it off and again this might be an issue of Visual Studio Cod uh Vim implementation yeah but I don't think that would happen in regular Vim so let me go ahead and just try this out here for a moment so I'll copy this here I'll Escape hit I to go to insert mode right click past hit Escape I'm going to try that again so I'm going to do shift a to go to the end of the line I'm going to hit Escape I just want to get it a space okay and I'll try uh V and I'll go down and now this acts completely different notice that it's just like cutting right through it so just understand that the behavior again is going to change um I'm pretty sure I've used it somewhere else where it'll actually always go to the end of the line but anyway that's that so that is visual mode let's take a look at indentation because this is something we do quite a bit with code the leading white space can be adjusted based on the tab size indentation so indent line outward to the right indent line outward to the left you can use count to modify the amount of lines useful to use the visual line mode when you select your line so let's go ahead and give that a try all right so we are here in with Visual Studio code I'm going to click here to this line and imagine that I want to select uh the first seven lines honestly every time I use this command I always do shift V and go into visual uh visual line block mode or visual line mode which is what I recommend to do and so I'm going to go down to a few lines and now I want to indents indents so to make the arrows you have to hold shift on the period or the comma on your keyboard and so I'll make the right arrow or angled bracket and I'll move that way and I'll I'll select it again and I'll do dollar sign that way okay um and there actually is a way to uh get your selection back so if you lose the selection there is a way I didn't talk about that before but I'm trying to remember how do we get that back just give me a second and wow I cannot believe I forgot the command but if you type in G and then V that will grab the last visual mode so remember G and then V because I just wanted to get those again so what I'll do is type in three and then do the right arrow or right angled and it'll indent it three if I select again GV and then I want to do shift and then to the left it'll bring it back to the wall so pretty straightforward uh you can do individual lines so here I'm just doing individual lines I'm just doing um uh the right angle bracket left angle bracket but that's indentation but for the most part I'll do shift V and do that and I forgot about GV which is really nice to get previous selections uh in the visual mode so I'm not going to go back and adjust that we just just done it here but there you go all right let's take a look at Windows splitting so Windows splitting allows you to have multiple windows open on the screen at once so here's an example of us splitting a window and if we take a count we have uh one one two three and four you can split them as much as you want and sometimes you'll uh some some people look at my screen and they'll see like 14 split windows they're like how can you keep track of that and I'm like I don't know you get kind of used to it and I find uh Windows splitting extremely effective it's one of the reasons why I I will work in macm over Visual Studio code because the ability to split windows and have uh finetune control of it is extremely useful um so the commands here is we have control W uh which is the modifier that you want to press to to work with Windows always going to be control W and so we want to split horizontally we hit H want to split vertically it's going to be contr WV if we want to close the window it's going to be control WC or we can do Co and close to close the window if we want to move around between Windows we're going to do contrl plus W and then the direction um and the direction is going to be those hjkl keys okay so let's give that a go all right so I don't think we can do windows splitting in uh VSCO but we'll take a look here so if I do contrl WV oops cancel it WV it notice that that key wants to close the browser so that hcky is already taken up there and vs code is not going to split the way that we want our stuff to split so I'm over here um in uh vs code in the terminal I'm just going to go uh Vim I just want to open up the project here I think this one's messed up so I have to open up a new one here so I want to open up this uh directory that I'm currently in we'll do Vim period and that will open that up now this shows a directory because I've opened multiple files but I'm going to go down here and I want to open one file uh maybe not just yet but I'm using hjkl to move here but I'm going to go down here I'm going to hit o to open a directory when we're in this directory listing uh these keys are a little bit different okay so um o doesn't do insert above it it actually changes the behavior this is now o to open a folder and so I'm going to go here and I want to open up uh let's say banner ads all right so now it's split three which is kind of a mess it's just how the default directory Works normally people replace this with nerd tree or something else but what I want to do here is I want to get rid of these two other windows so what I'm going to do is going to do uh control W J to go down okay so now I'm in this window I'm going to do control w c to close that window but I want to I could do colon and close and so now I have one window and so often I will start splitting things so I might have like contrl WV control W or sorry control WS to split I think I might have said in in uh earlier hold on here I might have said here H for horizontal but it's actually S I apologize it's not I'm not going to go fix that video because H is already being used for moving left so that makes no sense but if we go here like um notice I can't click here so this is where um it kind of sucks because we're limited based on this and this is where G Vim becomes very handy because if I open up G Vim okay um this will be a lot more useful if we split here so I do control V contr s contrl VR S contr V notice I can split all day long but what's really cool is that I can go here and I can click and change my focus right and I can also drag these to be whatever size I want so this is where this becomes an extremely powerful tool okay so I have all these open here and so I'm going to do contrl W J to go down whoops sorry control W J to go down control w L to go right contrl WJ to go down contrl w k to go up and you got the idea so um I love this I use this quite a bit and this is one reason that again I will prefer to work in u g Vim or Mac Vim because I'm going to be more efficient this is even better when you have the nerd tree here or some kind of nerd like some kind of uh thing here but um the default one is not very good so maybe I'll just quickly show you what that experience is like as with nert tree so you can see how efficient it is um so I'm just trying to think of how we can do that and so maybe what I'll do is I'll just install Janice because that's just something really easy to install it's a lot of work to install um uh at least I always find it hard to install uh ner tree or something like that nerd tree versus B tree and nerd tree is one that was been around for a long time but a lot of people try to migrate away from it because nerd tree is not known for being very efficient when you have a lot of files um but for the most part I've never had many issues with nerd tree so I want to go do that so going to go ahead and grab Janice I apparently still have it here and I'm going to go ahead and just install it again you're just watching now this is more like Advanced functionality so you don't really necessarily have to uh do this but I'm just trying to show you uh how things become very powerful very quickly when you have the right tools installed and the right configuration if I get this working with G it' be really great but um doesn't want the dollar sign there but I'm not a Windows user so I don't know the best way to do it but I'm going to just install GM here and we'll just give this a moment to install all right so now it says it's installed again just watch so you can kind of get an idea but I'm going to open this up in vim and so now it's open and it already has nerd tree here and so right away I'm going to use the control W to move back and forth here and this thing now works more normally I'm going to hit o to open it up and then now I open a file o and so I can go between here and I can go here and say uh control W split and then I can go here and open up this file I can split this vertically and then I can go to this one um and uh I'm not sure why but when I'm when I'm using this I I kind of start forgetting the uh keys I'm thinking too hard about how it works but some of these Keys like if I want to control nerd tree I'm just going to go ahead and take a look at what the command is because for some reason I forgot how to do it and so here I think it says leader end to toggle it I'm not sure why forgot that but it's uh lader n and that will get rid of and bring that back up we can also uh search across files which is really useful so like there's um uh a key for search across files let me see if I can find it here um I'm not sure why again it's just like this is muscle memory for me but when I have to start telling you stuff then I completely forget and uh what is it contrl P or control t uh is it control T nope control contrl P I completely forgot I can't believe it um but what I'm looking for here is I'm looking for the uh the global search because that's there just give me two seconds to find it yeah the command I'm thinking about is the control P command so fuzzy find buffer mru tagfinder replaces the command T command so for users uh of command T Janice Maps control uh control P to the uh DT command which I don't really understand why it says DT but I would have thought been leader leader liter T So if I do liter T here liter T nope that's not it lader P nope what the heck is DT all right we'll try this capital D T nope but normally what I could do is I could search across all the files so uh maybe we'll just click into this I just think this is such a cool a cool thing I mean we have it in other things like um uh other things here but basically what it'll do is it'll bring up a search and so you can search across stuff so here they're saying like contrl P so yeah I guess I could do that here let's just say contrl p so now you can just search across files and say auditor but normally that's a that's a leader key so you do like leader leader T and and that would normally pull that up but for some reason it's pulling up this tab thing so maybe they've changed the configuration since I last use it but you can see how you could be really productive very quickly with this if you can just remember all the commands um but yeah this is uh this is what this is how I like to work but I'm going to go ahead and just quit out of that and do control q and we'll just keep quitting out of this there we go um but that experience would be again a lot better than G Vim but I'm not going to invest that time to learn how to configure that in Windows um if you want again use Windows as your primary platform and uh figure out how to hook up WSL and stuff like that you'll have to investigate that yourself but I'm going to just tell you if you're on a Mac it is so easy to use Mac vim and take advantage of this stuff okay all right let's take a look at uh buffer so a buffer in the context of Vim is a temporary memory being utilized for an open file every time you open a file you create a buffer and it's pushed uh it pushes the buffer uh it pushes the buffer onto the buffer stack buffers are only deallocated when you completely close Vim so if you have 10 open files you have 10 buffers and uh there are a few commands that we have here we have the ls or buffers command the same command we can uh pick a buffer by doing buffer and then the number or the file name we get the next buffer with B next B previous B first B last and then we can apply uh changes to multiple files basically buffer so like here's a substitute that's going to cross Lo multiple fire files here's what buffers look like here on the left hand side and you can remap the keys which some people do honestly I never mess with buffers I think buffers are probably useful before people had nerd tree or like some kind of way of navigating but now that I have that I I have no interest in ever uh working with buffers but um it's just the point that you build up a lot of buffers over time and only closes when you close the app we'll take a look at buffers okay all right let's take a look at buffers and we're not going to be able to look at this in vs code because it's just not a feature that exists so if I do colon LS or um that didn't really help that might have already been a command that's in here but if I do colon I have to open up a file to do this I lost the file that we in here we go but I do colon buffers notice it says this command is not yet implemented because it's just there are no buffers in Visual Studio code so it's not going to do the same thing if we go back over here and I'm in terminal so I'm opening Vim in terminal and I still have Janice installed but let's say I open some files I'm hitting up and down and I'm just going to open some files I'm just showing you this you don't have to do this yourself so look I'm just opening a bunch of files just a bunch of files and now I type in buffers this is all the stuff that open so and it's opened in the order that I did it I have no idea what these characters mean but what people used to do is that they used to not have this here on the left hand side they would navigate completely with buffers okay um and so if I go here um we could say like get next buffer stuff like that but anyway I don't do anything with buffers but the point is is that buffers are here um I don't know there's not much for me to say because I really don't use them but they are here and the idea is that you can move between them but let's take a look let's say what would happen if we did B next okay and then we can do B previous so that again that's just a way of moving around so we do LS look at the buffers uh we could try oh enter we'll say buffer 4 move to buffer 4 and that is a way of navigating around but again if you have a nerd tree or something like that or you have contrl P where you can search across files very easily with um like a hotkey value then you don't really um need that there okay so there you go all right let's talk about registers so registers in Vim are memory allocated for a block of text you can think of registers where your clipboard or undo history is stored and the one that I just really want you to know about this is why we're talking about registers is the unnamed register so whenever uh you use yank delete a put operation like change um or something like that that thing goes into the unnam register that's going to hold that text for you but there's other registers you have so you have the numbered registers name registers read only registers and special registers these ones here just how we saw buffer it's just numbers it just numbers them so you can figure out what it is and you can give it a the buffer name or so the register name so you can pick it out by its name then over here we have readon registers which allow us to um have selected text and we kind of used these before so remember we were using um yank last text no I I thought this might map to the other thing remember like the ranges and stuff but it doesn't but here we have like zero so we say we want the last y text we do zero or uh deleted text from the the ver the numbers uh back or uh here this current file name or whatever then there are special registers down here where we can search across stuff let's see if we can make sense of registers again I don't really use them but the way registers work is they start with this um uh double quotation so let's play around with them but they're not that important to know I just want again for you to know about this unnamed register and that that's where your stuff is going when you uh are deleting changing things okay all right so I left this open from last time because I can't use registers in Visual Studio code but we'll take a look at registers here so I believe the way they work is let's say we copy some text I'm going to go here and I'm going to go ahead and just uh yank this line and say y to yank it I did shift V and then y to yank it and then down below I'm going to do quotation and again I'm not really the best at figuring out registers give me two seconds okay first let's try the r command and see if we can see registers okay here we go so now we can see some registers and I think that we're seeing is the last command we copied so this is the unnamed register I believe because it doesn't have a number here and so it's going to um output uh that there when you use it right so if I did P it would it would paste that that value but I think what we can do is we can use P here paste in order to paste a register so if we do a quotation and then let's say um quotation and then one it should print out that so let's give that a go and see if that actually works so I'm just going to hit Escape here or enter and so what I'm going to do go up to M line here I'm going to go uh double quotation so I have to do shift and then we'll do what was the number two and then P okay that's not what I wanted because I I guess I don't remember what the number was and the number was uh it's actually one in this case we'll try that again enter here so go back up here I'm going to try double quotation one p and so it prints out the pry and so that's the idea it's kind of like a clipboard um but again I never use registers um I guess they're probably useful if if you could figure them out in a more advanced way but those are the more advanced things you should know about registers and buffers um and that's pretty much all I really wanted to cover it would have been nice to cover Mark um which allows you to go back to your mark position but um I I'm not really worried about that one okay but I'll see you in the next one okay ciao all right so I'm back and I just wanted to show you um something that you could utilize cuz now we're at the end of the um the course really and so I just wanted to show you that you could print out like a cheat sheet so you type in cheat sheet Vim I remember this one being around forever I swear that uh I know if this is the original one or this is the original one but this kind of looks like the one that I I'm used to or this one here and so these ones are pretty good where you can print them out um or uh this one looks pretty decent as well but generally the idea is if you print this out and put it to your monitor you now have a way to work with the stuff and basically you can just open this up and you can pretty much see how most of the stuff works and uh what would be really interesting is to take a look at Mark because we never used it but if you look here we have set Mark okay so that's set Mark and there's some way to go back to a mark so that might be interesting to find out so just give me a moment all right so I just like staring at this for a while but if you look here it says goto Mark is here with the the um uh single quotation so let's go give that a try for fun um I don't think this would work in Visual Studio code but we'll try this in um in the terminal still in Visual Studio code but I still have this open here and so what I'm going to do is I'm just going to go somewhere random so let's say I want to be here right here I'm going to type the letter M and then I'm going to give a a letter to indicate the mark so let's say I want to call this e that's Mark E so if I go all the way down here let's say I'm somewhere else like at the bottom of the page page if I now do single quotation and then e it should jump back uh uh to there now what's interesting is it didn't go exactly back to where I wanted to so I'll try that again so let's say I'm on this line here and I say uh Mark R and I go down below here and I do single quotation R it's going to the same line so not exactly what I want so if I look at this again there's probably a character here somewhere this says jump to mark this is go to Mark and this is jump to Mark so let's take a look what would happen if we um instead of doing the single quotation we did the back tick okay the back tick is this here it's the same thing where the Tilda is so if I now do till the r it's going back to kind of looks like where I was so let's go back on this o here I'm going to do Mark E I go down here I'm going to go Tilda e yeah it goes back so there we go it's not hard to pick up new things and whatever you want in Vim absolutely exists you just have to look up uh Vim plugins so if I go here there should probably be a website for Vim plugins I think Vim awesome is for a bunch of awesome plugins right but you basically can find pretty much anything you want okay so you just have to kind of go through that and find something and uh you know there's there's just tons and tons of stuff um but anyway there you go that's it all right there we go so that's the end of the course and what I want you to do is I want you to go and try to utilize them for 14 days the best you can in Visual Studio code which I imagine most people are using as their IDE or if you're using a different ID just see if you can turn on that mode and use those basic commands because you'll have the directional commands the the Motions the change replace the yank the delete uh the find which is very useful and try to figure out what works for you because what works for me is not necessarily what's going to work for you when using Vim everyone has a different workflow with vim and and what they want to utilize with it but um you know again it's it's going to be a longterm investment uh for you for a short amount of time and if you want to go more deep into Vim you can absolutely do that but if you want to stick with Visual Studio code and just use the key Bindings that is totally fine as well but there you go ciao
