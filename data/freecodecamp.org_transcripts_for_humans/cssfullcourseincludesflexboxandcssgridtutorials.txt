With timestamps:

00:00 - Hello, my name is Beau Carnes and I'm with free 
code camp.org. This is a complete CSS course,  
00:07 - or Cascading Style Sheets. CSS is something 
you use to style websites or style HTML. So  
00:16 - before you watch this course, you should have 
some familiarity with HTML. You can learn HTML  
00:22 - through the free HTML curriculum at Free Code 
camp.org. Or you can check out the video course  
00:29 - that I link to in the description. This whole CSS 
course follows along with the CSS curriculum at  
00:35 - Free Code camp.org. So when you hear me talk 
about challenges or completing challenges,  
00:40 - I'm talking about the challenges as part of that 
curriculum. However, it's a standalone video.  
00:46 - So you don't have to go through the curriculum to 
get value out of this course. But if you want to,  
00:51 - you can go through that curriculum as well. 
I have the link to the Free Code camp.org CSS  
00:56 - curriculum in the description. After you finish 
this course, you may want to try out some CSS  
01:02 - projects. So I have a link to a playlist with 
a bunch of CSS projects you can do right in the  
01:09 - description. And then after you master CSS and 
HTML, it may be good to try out JavaScript. So  
01:17 - I have a link to a JavaScript course also 
in the description. So let's get started.  
01:27 - In this challenge, we're going to talk about 
inline styles. inline styles are where you style  
01:33 - something right on the element that you want to 
effect. So if I put my mouse on this p tag here,  
01:40 - I can add a style to the PPI by just using style. 
And then we're going to put what the style is  
01:46 - going to be and we're going to put color blue. 
So that would just make the color of that text  
01:54 - blue. But for this challenge, we're not going 
to style the p tag, we're going to style the  
02:00 - h2. So I'm going to undo that. And now I'm 
going to add the style to this h2 tag. And  
02:09 - I'm going to make this style where the color is 
going to be red, just like that. And let's open  
02:20 - up the browser and see what that looks like. Okay, 
you can see that the text the title here is red.  
02:35 - In the last challenge, we talked about inline 
styles. That's what this is here. Now we're going  
02:41 - to talk about a different way to add styles using 
a style block. And you can see we use color red,  
02:47 - there are actually hundreds of CSS properties 
like color, we're going to eventually get to  
02:53 - those but not quite yet. I'm going to show you 
the style block. So to make a style block just  
02:59 - at the beginning, I can add the tag the tag style. 
And then we just need a closing style block. And  
03:11 - now I can add all my styles between these two 
style tags. So let me give you an example. If  
03:18 - I want to style all the paragraph tags, I can 
put a P and I'm going to put a curly brace.  
03:26 - And inside these two curly braces, I'm going 
to put color red. Now this is going to style  
03:35 - all paragraphs every time you see a p tag, like 
here, here, and all the P tags are going to now  
03:43 - be read. If we look in the browser, we can see 
what that's going to look like. So you can see,  
03:49 - look, this paragraph is read this paragraph 
is read all the P tags have now changed the  
03:55 - text to read. So for this challenge, we're going 
to take out the inline style here. And I'm going  
04:07 - to add some style to this block up here. Instead 
of styling p tags, we're going to style the h2  
04:14 - tags. And I'm going to make them all blue. So I'm 
going to put color blue. Oh, let me open up the  
04:23 - browser. And we'll see what that looks like if 
I refresh. And you can see the h2 is now blue.  
04:35 - In the last challenge, we learned about styling 
tags like this, all h2 tags are blue. In this  
04:43 - challenge, we're talking about styling classes. 
Classes are reusable styles that can be added  
04:50 - to HTML elements. So to show that you're styling 
a class, you would put a.in front of it. So I'm  
04:58 - going to change this eight, eight to two dot 
blue text. And if you add this dark blue text,  
05:06 - this is only going to style elements that 
have a class of blue text. So for instance,  
05:12 - for this paragraph, I'm going to add a class. And 
I'm going to put in blue text. Now you can see I  
05:21 - put a period up here, but you don't put a period 
down here, the period just means it's a class,  
05:27 - when you're looking at your CSS, your styles. 
So if I open this in my browser, and refresh it,  
05:33 - we can see that this is now blue, right here, 
we're gonna change this up, instead of making  
05:41 - a blue text, it's now going to say, red text, and 
this color is going to become red. I'm not going  
05:49 - to need this anymore, because instead of putting 
the class on the paragraph, I'm going to put  
05:54 - the class on this h2 tag, it's going to be class, 
red text. And then if I show that in the browser,  
06:04 - and refresh, you can see the title is red. What's 
great about classes is that they allow you to use  
06:17 - the same CSS styles on multiple HTML elements. 
So for instance, here, this is class red text,  
06:25 - I can add red text a class red text to any element 
to make it read. And that's what we're going to do  
06:32 - in this challenge. So on the first p element right 
here, right up here, I'm going to add class equals  
06:40 - read text. And when I open up the little browser, 
here, you'll see that title is read. And the first  
06:53 - paragraph is read just by adding the class to 
both elements. There are hundreds of different  
07:03 - CSS properties. We've only talked about color 
so far. But another one is font size. That's  
07:10 - pretty self explanatory, it's going to change 
the font size of an element. So for instance,  
07:17 - I can put font size 30 pixels. And now everything 
that has the red text class will also be font size  
07:24 - 30. So if I look in here, you can see that this 
paragraph is a lot bigger. Now, we're going to  
07:30 - change the font size of paragraphs. So I'll just 
remove what I had here. And I'm going to add  
07:37 - another style. So right down here, it's going to 
be P and the font size is going to be 16 pixels,  
07:52 - it's going to put 16 px. And now, if I show the 
browser here, we'll see that all the paragraphs  
08:02 - are 16 pixels, that we've just increased 
everything to 16 pixels for the paragraphs.  
08:12 - You can set which font in element should use by 
using the font family property. Now you can use  
08:20 - a type or style of font like Sarah Stan setter 
for mono space, or you can put in the exact  
08:27 - font. So in this challenge, we're going to make 
all the P elements mono space. So right here,  
08:34 - I'm going to put font family and then model 
space. And if we just show this in the browser  
08:45 - and refresh, you can see now we have these, 
this monospace font here, just like that.  
08:55 - You can import fonts from different websites, 
a free library of web fonts that you can use is  
09:02 - Google fonts, they have a lot of great fonts. 
And that's what we're going to do in this  
09:06 - challenge. We're going to see how to import Google 
fonts. So if I just paste in some code up here,  
09:12 - this code comes directly from the Google Fonts 
website. And you can see it's the font family  
09:18 - lobster. So I'm just about to show you how 
to use that right in our code here. So what  
09:25 - I'm going to do is for the h2 element, I'm going 
to add h2 here, and I'm gonna add a font family  
09:34 - of lobster. Now, that's all I really have 
to do for this challenge. If I wanted to,  
09:44 - I could add a backup font that will be used just 
in case the the Google Font didn't load like this,  
09:52 - I do a comma. And then I can put a generic 
font that's going to be used if the specific  
09:57 - font doesn't load, but we're not going 
to Do that for this. I'm just going to  
10:01 - open the browser and see if it works. And you 
can see, we have the lobster font right here.  
10:13 - There are some default fonts available in all 
browsers, like monospace, serif and sans serif.  
10:20 - You can see we're using the monospace font 
right here. So when one font isn't available,  
10:26 - you can tell the browser to degrade or default 
to another font, like one of these default fonts,  
10:33 - like the monospace font. For example, let's say 
we add the font family and the font family we  
10:38 - had held that Helvetica. So if I add Helvetica, 
right here, and I can actually just make a list  
10:44 - of fonts right here. So in font family, when you 
have a list here, first, it tries the first font.  
10:50 - But if that one's not available, it will go to 
the next font. So when you're making a list of  
10:56 - font family fonts, you always want the last one to 
be a generic font. So you know that if the browser  
11:04 - can't get the first font or the second font, 
it can always get the the default font at the  
11:09 - end here. So for this example, for this challenge, 
we're going to do that for the h2 tag. So in this  
11:18 - h2 tag, we have lobster, let me delete Helvetica 
here. And I'm going to make the default font model  
11:25 - space. Now, right now, if I open up the browser, 
you're not going to see anything different,  
11:31 - you're going to see a lobster here. But if 
I comment out the link to the Google fonts,  
11:38 - and now I'm going to refresh this. And 
you can see it's defaulted to the motto  
11:47 - space just like that. See, so it couldn't find 
lobster, so it defaulted to the monospace font.  
11:57 - css has a property called width that controls 
an element width. This can apply to almost any  
12:04 - type of element, like an image or a div, or 
paragraph. And we're going to create a style  
12:11 - that can make a larger image. So I'm going 
to create this called larger image. Now,  
12:16 - that's only going to apply to an element with 
the class larger image. And I'll put width to  
12:25 - be 500 pixels. So if we have anything with the 
class larger image, we'll make it larger. So I'm  
12:33 - going to actually add that to this image here, I'm 
going to put class equals larger image. So if we  
12:43 - look in the browser here, we should see that the 
image is very big right now, for this challenge,  
12:51 - we're going to make a smaller image. So I'm just 
going to actually just change this to smaller,  
12:57 - and instead of 500 pixels, we're gonna make this 
100 pixels. And I have to apply the smaller image  
13:07 - class down here. So if I open the little browser, 
and refresh, now, it's just a tiny little cat,  
13:16 - a cute little cat right there on our page. css 
borders have properties like style, color and  
13:25 - width. Let me show you an example. I'm going 
to actually make a change to the h2 style here,  
13:31 - I'm going to paste in some code, you'll see border 
color, red border width five pixels, border style  
13:37 - solid. So when I refresh the page, here, you'll 
see this red border around the h2 tag. I'm going  
13:46 - to delete this for right now. Because for this 
challenge, we're actually going to make a thick  
13:52 - green border. So I'll just put it right up at 
the top for now here. And I am going to make  
13:59 - a new class called thick, green mortar. And I'm 
just going to actually paste in that same code  
14:09 - from before. But the border color is now going to 
be green. And the border width can be 10 pixels.  
14:21 - And the border style will still be solid here. So 
now I'm going to have to apply it to the image. So  
14:31 - right now there's the class smaller image, but you 
can have two classes here I just put a space and  
14:37 - then I'm going to put Vic mean order. So as long 
as you just have a space in between classes, you  
14:46 - can have two classes. So if I refresh here, you'll 
see the thick green border right around there.  
14:57 - You can see surf We have very sharp corners 
around this image, there's a border radius  
15:04 - property that we can use to make that a little 
round more rounded, I'm going to add a new thing  
15:11 - called border radius. And I'm going to set 
the value to 10 pixels. So if I refresh now,  
15:20 - you can see we have rounded corners here. In 
addition to pixels, so you can also specify  
15:30 - the border radius using a percentage. 
So instead of border radius, 10 pixels,  
15:35 - I'm going to change this to 50%. And if I refresh 
my page, here, you can see it makes us circle.  
15:48 - You can set an elements background color, with 
a property called background color. So here's  
15:55 - an example, let's set the background color 
of the h2 element, background color. And I'm  
16:02 - going to change this to blue. So if I open up my 
browser, we'll see that the background is blue,  
16:11 - I'm going to make a new class, and the new 
class is going to be called silver background,  
16:17 - silver background. And you guessed it, it's 
going to have a silver background. So I'm going  
16:26 - to put background color, silver. Now remember, 
I also have to apply it somewhere I have to make  
16:33 - something use that class. So for this div, class 
equals silver background. Now, if I refresh here,  
16:43 - you can see we have a silver background here, we 
don't need this background color blue. So I'll  
16:52 - take that off here and refresh it one more time. 
And that's how it's supposed to look. We've talked  
17:02 - about styling specific elements like this. And 
then we've also talked about styling classes. You  
17:08 - can also style based on ID and ideas similar to 
a class except each element is only going to have  
17:16 - one ID classes, you can put on a lot of different 
elements. So let me show you how to apply an ID  
17:23 - to an element. If I just go down to this form 
here. And I'm just going to put ID equals cat  
17:30 - photo form. And just like that, it's not going to 
change the appearance at all, because we haven't  
17:38 - styled it yet. But now we can use the ID to add 
CSS styles, or we can reference it in JavaScript.  
17:49 - In the last section, we learned about IDs. Now 
we're going to learn about styling IDs, I'll  
17:55 - use this Ace two as an example and add an ID of 
heading meaner styling IDs. It's similar to when  
18:03 - you're styling classes, but we are going to use a 
hash mark instead of a period. So I'm going to put  
18:12 - heading here, let me format this a little better. 
So you can see normally, for the class that  
18:19 - started with a period for an ID, it's going to 
start with a hash mark. So I am going to put color  
18:26 - green. Now I want to show you something. So you 
can see that this h2 has a class of red text and a  
18:36 - heading, an ID of heading. So we have the red text 
and the heading. So is it going to be red, or is  
18:43 - it going to be green? Well, let's open the browser 
and find out here you can see it is green, because  
18:50 - CSS puts a higher priority to IDs, then classes. 
And as a reminder, you should only have one ID per  
18:59 - element. We already have the ID down here on the 
form ID of cat photo form. And so now I'm going  
19:08 - to change this instead of heading it's going to 
say cat photo form. And then for color, we're  
19:15 - going to instead of color green, it's going to be 
background color green. And now I'm just going to  
19:23 - Reese refresh that. And if I go down here to the 
form, you can see it's green in the background.  
19:36 - You may have already noticed this but all HTML 
elements are essentially little rectangles.  
19:42 - There are three properties that control the space 
around each element, which is padding margin and  
19:49 - border. We already talked about border which 
you can see on here, the padding is the space  
19:54 - around the text. You can see that the padding 
around this red text is a little more than  
19:59 - that. Having around the blue text, the margin is 
the space outside of the border that surrounds  
20:06 - the padding. So in this task, we are going to 
change the padding, we're going to change the  
20:12 - padding on the blue box to match that of the 
red box. So if we look down here, the padding  
20:18 - on the blue box is 10. Depending on the, the 
red box is 20. So we're just going to change  
20:25 - this to 20. And then if I refresh my page, here, 
you can see that these boxes are the same size.  
20:38 - Elements merging controls the amount of space 
between an elements border and the surrounding  
20:44 - elements, you can see that there's greater 
margin on this red box than the blue box. So in  
20:50 - this task, we're going to make sure that they're 
both the same. So I'm going to change the margin  
20:56 - the blue box to match that of the red box. So 
you can see the margin is 20 on the red box,  
21:01 - so I'm just going to set the blue box to 
also be 20. And then if I refresh my page,  
21:07 - you can see that they're the same. The reason why 
this red box is so big right here is because it  
21:17 - has negative margin, we're going to make sure the 
blue box is just as big as the red box by giving  
21:24 - the blue box negative margin as well. So I'm going 
to set this to negative 15. So now the red box and  
21:32 - the blue box are both at negative 15. And if 
I refresh the page, now they're both the same.  
21:43 - As you can see, in this red box, each side can 
have different amounts of padding. That's this  
21:49 - code here, padding, top padding, right padding, 
bottom padding left, we're going to use different  
21:54 - paddings for the different sides of the blue box. 
So I'm just going to copy this code right here,  
22:00 - and then paste it down here. And now what we have 
to do for the challenge is set the top and left  
22:08 - to 40. So let's do 40 here, and top and left are 
already 40 and then the bottom and right to 20.  
22:16 - That's just the same as already is. So let me 
refresh. And we're done. We already learned that  
22:31 - you can set each side of padding separately, you 
can also do the same thing for margin, you can see  
22:38 - for this red box, it has different margin on each 
side, we have margin top right bottom left, we're  
22:44 - going to do the same thing for the blue box. And 
I'm just going to copy this margin from the red  
22:50 - box and paste it in for the blue box. And now I'm 
just going to refresh my page. Because we're done.  
23:03 - Previously, we learned about padding top padding, 
right padding bottom and padding left, there is an  
23:10 - easier way to do the same thing. And it's called 
clockwise notation. If I if we look at this  
23:17 - browser here and see the red box, there's actually 
a different padding on each side. So if you look  
23:25 - at this padding here, see how these four numbers 
while the first number is the top, then the right  
23:31 - then the bottom, then the left. So we're going to 
do the same thing in the blue box, I'm gonna start  
23:39 - off by copying this padding from the red box, 
I'll paste it into the blue box. And this time,  
23:46 - the padding top and left has to be 40. So this 
one has to be 40. And then the last one that's  
23:53 - the left and the bottom and right have to be 20. 
Those are the two middle numbers. So if I change  
24:01 - those and refresh, we'll see that that they're 
both kind of the same, they're a little different  
24:08 - because this one has the 21st and 40. And then 
this one has the 40 than 20. And that's it.  
24:18 - We already learned about clockwise notation 
for padding. Now we're going to learn about it  
24:23 - for margin. It's basically the same. You can see 
this red box has a different margin on each side.  
24:30 - So here's the code here. It's clockwise notation. 
There's four numbers. The first is the top, right,  
24:37 - bottom, and then left. So you can do it all in 
one line. Instead of having four different lines.  
24:44 - We're going to do the same thing for the blue box. 
So I'm just going to start by copying this line.  
24:51 - And to solve this challenge, we're just going to 
flip these two numbers around because the 40 has  
24:57 - to be that it has to be top and the 20 is going 
to be on the right. So if I refresh my page here,  
25:04 - you can see that it has changed. We now know how 
to style classes. So this is an example of styling  
25:15 - classes with a dot before the class here, and then 
you can put the styles for the class. And then you  
25:20 - stay IDs with the hash mark, instead of a dot 
hero be a hash mark. Now we're going to learn  
25:25 - how to use attribute selectors to style elements. 
Now, this is a selector that matches and styles  
25:31 - elements with a specific attribute value. 
I'm going to show you an example how to style  
25:36 - something with a type radio. So we can style 
everything with type radio. So let me add that  
25:42 - right up top here. So you put brackets around, 
and we're gonna do that. So we're going to put  
25:51 - the attribute which is type, and then we're going 
to put the value, which is radio. So type equals  
26:00 - radio. And we're going to that's how we're 
going to select what we're styling. So here,  
26:06 - I'm just going to set the margin to 20 pixels. So 
if we open up the browser here, now let me scroll  
26:19 - down. And we can see that there is a margin 
around these radio buttons of 20 pixels. So  
26:26 - now we're going to use the type attribute selector 
to try to give the checkboxes, a top margin of 10  
26:34 - pixels and a bottom margin of 15 pixels. So all 
I'm going to do is so let's go and look at the  
26:40 - checkbox in the code. It says type check box. 
So we're going to use the same thing up here,  
26:45 - instead of type radio, it's going to be type check 
box. And then for the margin, the top is going  
26:53 - to be 10. And the bottom is gonna be 15. So what 
I'm going to do is do top if we do the clock one,  
27:03 - so the first number is top, the second number 
is right, and it's going to put zero pixels.  
27:09 - And then the third number is bottom, I'm going to 
put 15 pixels. And then the fourth number is the  
27:16 - left which is zero pixels. So if I just refresh 
my page here, and the checkboxes are styled.  
27:31 - So far, we've been setting margins and paddings 
using pixels. px, see this example, nega 25,  
27:38 - px or pixels, these are absolute types of 
length. So absolute types of length include,  
27:46 - like, I N for answer, mm, millimeters, these 
are all tied to physical units of length. But  
27:53 - there's also relative units of length, such as M 
and REM. And these are relative to another link  
28:01 - value. For example, em is based on the size of 
an elements font. And if you use it to set the  
28:08 - font size property itself, it's relative 
to the parents font size. Now we'll talk  
28:12 - about this a little more on the responsive 
web design principles section. But for now,  
28:17 - we're going to try setting some padding using an M 
or M value. So that's what I'm going to show you.  
28:24 - Now we're going to set the the class of the red 
box here, we're going to set the padding to an m  
28:32 - value. So I'm gonna put padding, and it's just 
like how you would put up pixels, but instead  
28:38 - of doing px, you just put em. So this is gonna 
be relative, depending on other things on the  
28:44 - page. So if I show the browser here, now you'll 
see this extra padding here, around the red box.  
28:55 - Every HTML page has a body element. 
Now usually, it'll be more explicit,  
29:01 - you'll see the the body tag on the page. But 
even if you don't see the body tag on the page,  
29:06 - like in these examples, it's still there, it's 
just hidden. So we can prove this by actually just  
29:12 - styling the body element. So that's what we're 
going to do here, I'm going to add a body here,  
29:17 - or a body style. And we're just going to 
set the background color to black. And now  
29:27 - if I refresh my page, you can see it turns 
black, this the whole page turns black here.  
29:36 - So we've seen the all pages have a body element. 
Now CSS that's stands for Cascading Style Sheets.  
29:43 - cascading means anything that you apply to an 
upper element goes down to any lower elements  
29:49 - or any elements that are inside other elements. 
So anything that you apply to the body element  
29:55 - will cascade or get be inherited to all the 
others. elements on the page. So let's see  
30:02 - how that first I'm going to create an h1 element. 
And inside the h1 element, I'm going to say hello,  
30:11 - world. And now I'm going to style the body 
element. So we already have black on color black,  
30:23 - I'm also gonna put color green. And I'm for the 
font family. I'll put it as monospace. Let's  
30:39 - open up the browser and see what that looks like. 
Okay, look, we have green monospace font, I didn't  
30:45 - apply it to the h1 tag, I applied it to the body, 
and then everything else got that same style.  
30:56 - Sometimes your HTML elements will receive 
multiple styles that conflict with one  
31:02 - another. If you see on here, this h1 here, this 
body will apply it will cascade down to the h1  
31:10 - to make the color green. But what if there was 
something else to make this a different color,  
31:15 - what would happen? So what I'm going to do is 
make a new class, it's going to be called pink  
31:21 - text. And I am going to make the color pink. 
And now I will apply the class to the h1 tag.  
31:32 - So pink text. So what do you think's gonna 
happen? It has the color green from here,  
31:40 - but I also had the color pink from here. Well, 
let's open up the browser and find out. And it's  
31:48 - pink. The way it works is it uses whichever one is 
more specific. Since this has the class pink text,  
31:56 - and it doesn't start with body or anything. The 
pink text is more specific than the body because  
32:03 - body is further up. So whatever one is closest 
to the actual text, is which style it will use.  
32:13 - So we saw that this color pink, override the 
color green because pink text is more specific  
32:21 - than body. What can we do to override this pink 
text here? What if I made another class like this,  
32:27 - I'm going to just copy that, and then paste 
it here. But instead of being pink text,  
32:33 - it's going to be blue, and the color is going 
to be blue. Now I'm going to add another class  
32:40 - here. Remember to add two classes, you 
just put a space in between classes,  
32:44 - I'm going to put blue text here. So now what's 
going to happen is going to be pink or blue.  
32:50 - I'm just going to give you one tip here is that 
the order of the classes here doesn't matter. It  
32:55 - doesn't matter whether pink text or blue text 
comes first. So let's see what color the text  
33:00 - is going to be. And you can see it's going to 
be blue. So the order that does matter is the  
33:07 - order that the styles declared in. So if I 
just take this blue text here, I'm going to  
33:12 - cut this. And now I'm going to just paste it 
right up here. And now if I refresh the page,  
33:18 - you'll see that it's pink, because it just 
depends on what order this comes in here.  
33:26 - So we saw they could override styles by 
making things more specific pink text,  
33:33 - the class overrides, just styling the body. And 
then we saw you could override styles by putting  
33:39 - things lowering in the styling section. So this 
blue text overrides pink text because it's lower.  
33:45 - Now there's another way to override styles. And 
that's what IDs. So I'm going to add an ID to  
33:51 - this h1 here, it's going to be ID equals and we're 
going to have an ID name called the orange text.  
33:58 - And now I'm going to put the id style right above 
the pink text. Because when you're styling IDs,  
34:08 - it doesn't matter. The order doesn't matter if 
it's above or below the other styles. Because  
34:14 - IDs are even more specific. Let me show you 
what I mean. So remember to so starting with a  
34:20 - dot, we're gonna start with a hashtag or pound 
sign. And I'm going to put orange text. And  
34:25 - here we're going to put color orange. And now 
I'm going to show the browser here. And we'll  
34:38 - refresh and you can see it's orange text. Because 
IDs are specific. You are only supposed to have  
34:46 - one ID per page. So orange tech should only be 
on this element. Whereas classes you would put  
34:52 - on multiple elements IDs you only apply to one 
element so IDs are more specific than classes.  
35:01 - And here's another way to override class 
declarations with inline styles. inline  
35:08 - styles are going to be more specific than 
all these other ways of styling text,  
35:12 - I'm going to go right into this element here 
and put style equals, and then I'm just going  
35:18 - to change the color to white, you can write 
this just as you would write your CSS above,  
35:24 - but right in line. Now I'm going to open up the 
browser here. And then you should be able to see  
35:30 - that text is white. So that's even more specific. 
You've learned many ways to override CSS and get  
35:41 - even more and more specific, starting at the 
body, then pink text and blue text and orange  
35:47 - text. We've learned many ways. But now I'm about 
to tell you about the most powerful method of all,  
35:54 - how you can show something is super important. 
Let me show you that. Now. If you remember, this  
36:00 - pink text has been overwritten many times. But now 
we're going to show that this is very important,  
36:06 - I'm going to use an exclamation point and then the 
word important. So using this exclamation point,  
36:12 - important after style means is the most important 
style, and you should definitely apply this style.  
36:19 - So let's see what that looks like. And 
now it is pink. Hello World is now pink.  
36:30 - So far, we've been coloring things using the 
actual color names, like for instance, black,  
36:36 - or orange, or green or blue. But there's 
a way to get even more specific using hex  
36:42 - codes. hex codes are six hexadecimal digits 
that represent colors. So you can represent  
36:49 - any color on the spectrum using a hex code. 
So I'm going to change this instead of black,  
36:56 - I'm gonna put the hexadecimal for black, which is 
just 000000. So the first two zeros are the red,  
37:04 - the second two zeros are the green and the third, 
two zeros are blue. But since it's black, it's  
37:10 - zero for every single one. So let's see what that 
looks like in the browser. And it's still black.  
37:21 - hex codes can be used to create over 16 
million different colors. And that's what  
37:28 - we're going to do here, we're going to put 
in the right hex codes for these colors. So  
37:31 - the hex for red is going to be they're always 
going to start with the hash mark or pound key.  
37:36 - And I'm just going to put ff 0000. And then 
for green, we're going to do the hash mark,  
37:43 - and it's going to be 00, ff 00. And then for 
Dodger blue Tex. Now I don't have these memorized,  
37:50 - I'm actually just reading them off. Mo's you're 
not, it's gonna be hard to memorize 16 million  
37:55 - different combinations for colors. So usually, 
you're going to look these up somewhere. There's  
38:00 - a lot of websites, a lot of other resources to 
find the appropriate hex codes for different  
38:05 - colors. So for the orange text, it's going to 
be FF a 500. And let's open up the browser and  
38:14 - see what this looks like if I refresh this, 
and now we see all the different colors.  
38:22 - Some hex codes can be shortened. Remember, 
they're usually six digits long. But sometimes  
38:29 - the hex codes have three sets of two of 
the same digits. For instance, red text,  
38:34 - the hex code is normally f f 0000, you can see 
that the first two digits are F, the second two  
38:42 - digits are zero, and the third two digits are 
zero. So whenever there's three sets of two,  
38:47 - we can shorten this by just doing one number one 
digit for e. So F 00. So this f will be expanded  
38:57 - to f f, this will be expanded to 00. And this 
will be expanded to 00. For future for future  
39:03 - tax, we can do F Zero F for the scientex, we 
can do zero f f, M, and then for the green text,  
39:13 - we can do zero f zero. So let's open the browser 
and see if we got those colors. And it worked.  
39:25 - Besides using hex values to represent 
colors, you can also represent colors  
39:29 - using RGB values. So that would be 
like this, instead of this hex value,  
39:34 - you would put RGB and then there's gonna be 
three numbers. Each number is going to be  
39:39 - between zero and 255. I'll just use 255 three 
times here. And if we show this in the browser,  
39:46 - 255-250-5255 is white. But for this challenge, 
we're going to change change it to black. So  
39:54 - black is just going to be 000000 Black. And if 
I refresh, we'll see that it's changed to black.  
40:07 - You can make just as many colors using RGB, as 
you can make with hex. So I'm going to make all  
40:14 - these colors with RGB instead of hex. So for the 
red text, it's just gonna be RGB. And then the  
40:23 - first number is always red. And then we have the 
green. And then we have the blue. So for red, it's  
40:31 - all red, no green, no blue, you can kind of mix 
to decide how much you want to beat color color  
40:37 - with RGB. And you can really do the same thing 
with hex as well. So for orchid text was to RGB.  
40:44 - And this is going to be 218 112. And then 214. 
I don't actually have all these memorized, I'm  
40:55 - just reading them off here. And to make this even 
easier, I'm going to do some copying and pasting.  
40:59 - So we're going to have the C unitech. And the blue 
Tex Sienna is going to be 160 and then 110 82. And  
41:14 - then we're going to do 45. And then for blue. This 
is gonna be an easy one, because we just have 00  
41:26 - 255. And now let's look at the browser to see what 
that's going to look like. There are our colors.  
41:40 - Look at this sweet pin one created only with 
CSS and HTML, we're not going to go into exactly  
41:47 - how to create this, you can look at the code 
to find out yourself. But this is all about  
41:52 - showing CSS variables. So here right here, our CSS 
variables, so the penguins skin black belly gray,  
42:00 - beak yellow, you can see they're used here, like 
here background, we have the var and then your  
42:06 - the parentheses two dashes, Penguin, deskin 
and gray. So this would be the backup color  
42:14 - right here. But this will be, we will try to use 
this variable. If we can't use this variable, we  
42:19 - go to the backup. But right now I'm going to show 
you how just changing these variable colors will  
42:25 - change everything every time those variables are 
used. So I'm going to change this black to gray,  
42:32 - I'm going to change this gray to white. And 
I'm going to change the yellow to orange. And  
42:40 - then if I just refresh here, you can see our 
pin one is a completely different color now,  
42:46 - is was super easy, we only had to change it in one 
spot, and it changed it everywhere in the code.  
42:56 - In last challenge, we were introduced to 
variables. Now we'll go over him some more  
43:01 - and learn about them in more detail. So to create 
a variable, we're going to do it right here. So  
43:07 - we're going to create a penguin skin variable. 
So they always start with two dashes. And then  
43:13 - we just do we put the name here, which is going 
to be penguin skin. Now we're going to be able  
43:19 - to use this variable anywhere throughout the code, 
this is just going to be gray. So now anywhere we  
43:26 - use this penguins quick skin variable, it's 
going to be replaced with gray in the code.  
43:35 - So in the last challenge, we created this 
variable penguin skin gray. Now we're going  
43:40 - to use it. So to use a variable you just put var 
and in parentheses, you put the variable name,  
43:47 - let me show you here for this background, 
I'm going to put var and then parentheses  
43:51 - and then I'm just going to put dash desc 
penguin. And then that's the variable,  
43:58 - we're going to use the same variable in 
multiple places. So I'm just going to copy this,  
44:02 - and we'll paste it here. And then I'll paste 
it here. And then if I refresh, it's great. Oh,  
44:13 - there's a wing. Let's see, we have to replace 
one more spot. Okay, let's replace there,  
44:20 - and refresh. And now everything that's 
supposed to be gray is now gray. So now,  
44:26 - we had to replace all the spots this time, but 
from now on, whenever we want to change the color  
44:32 - of the penguin scan, we only have to change it in 
one spot. That's the great thing about variable.  
44:41 - variables can have fallback values attached. 
These are used if for some reason the variable  
44:47 - won't work. It could be because someone's using 
an older browser that doesn't use CSS variables,  
44:53 - or maybe just the variable name is spelled 
wrong. So that's what's happening here.  
44:58 - css pin GUI that's spelled wrong. But to show 
that that's just to show these fallback values,  
45:05 - so what I'm going to do is just add 
the word black here. And then here,  
45:10 - I can add the word black. And now let's just 
refresh this. And you can see it's using  
45:18 - the fallback value because it cannot find the 
pinguin skin because it's spelled wrong here.  
45:28 - Variables are available inside the element in 
which you create it. So we have these variables  
45:34 - here. The reason why they work in the other 
parts of the penguin is because everything is  
45:41 - within the penguin element, like the right cheek, 
left cheek, belly, these are all within the pin  
45:47 - one element. Sometimes in order to make variables 
available anywhere in a document, you can declare  
45:54 - the variables inside a root element, you can 
think of the root element as a container for  
46:00 - your entire HTML document, in the same way that an 
HTML element is a container for the body element.  
46:06 - So anytime you create a variable within the root 
element, they're going to be available throughout  
46:12 - the whole page. So that's what we're going to 
do here. So I'm going to make a variable named  
46:17 - Penguin, belly. And then this is going to be pink. 
So we can already see that it's used in these  
46:26 - spots here. So your penguin belly belly is used 
here. Penguin bellies use here. So it's used in  
46:31 - these two different places. And but just making it 
here within the route, we're gonna be able to use  
46:37 - it everywhere else. So let me refresh the page. 
And you can see that it's pink in both places.  
46:46 - So variables declared within route apply to 
the whole page, but you can overwrite those  
46:52 - within a specific element. So down here, I'm 
going to overwrite pin one belly. So Penguin,  
46:59 - belly, and this is now going to be white. 
So if I refresh the page, it's white. Now.  
47:10 - media queries can be used to change variables. 
Media Queries make different CSS apply,  
47:17 - depending on the size of the screen. So 
here's a media query for max width 300  
47:23 - pixels. So we can make variables that only 
apply when the max width is 350 pixels. So  
47:31 - let's try changing the size. So now, the 
penguin size will be 200 pixels. And we're  
47:42 - also going to try changing the skin. So penguin 
skin, with this media query will be black. So  
47:50 - now when you change the size of the browser, let 
me refresh again, it will change the variables.  
48:08 - Time to create our first CSS Grid, you can 
turn any HTML element into a grid container  
48:15 - by setting its display property to grid. So we 
have this HTML element container. And then here  
48:21 - is the CSS for that, we are going to set the 
display property property to grid. And this  
48:27 - will give us the ability to use the other 
properties associated with CSS Grid. So I'm  
48:32 - just going to put display grid. And we're done. 
So it doesn't do anything quite yet, because we  
48:42 - haven't updated any of the other properties 
yet. But we'll do that in later challenges.  
48:51 - Now we need to to start defining the structure 
of the grid. We'll start with adding some columns  
48:59 - using grid template columns. So I'm going to do 
that now and show you how to solve this challenge.  
49:05 - I'm going to type in grid, template columns. And 
after grid template columns, we're going to put  
49:16 - the width of each column. So the num, the number 
of numbers we put here are the number of columns,  
49:24 - we're going to have three columns, so we're going 
to have three numbers, and all of them are going  
49:29 - to be 100 pixels wide. So I just have to put 
100 pixels three times. And now if I refresh  
49:37 - the page here, you'll see that we have three 
columns. So here we have grid template columns,  
49:48 - which we already learned about which sets the 
number of columns. Now we want to set the exact  
49:54 - number of rows. Right now the rows are just 
determined automatically, but if we know know  
50:00 - exactly how many rows we want, we can use grid 
template rows. So to solve this challenge,  
50:05 - we just have to add grid template rows. And then 
just like grid template columns, the number of  
50:14 - numbers are the number of rows. And each number 
is how tall each one will be. So I'm going to put  
50:23 - 50 pixels 50 pixels. So we'll have two rows, or 
each 50 pixels high. So if I refresh that, it  
50:34 - looks pretty similar, because that was very close 
to what the default was. But we just saw that  
50:43 - you can use CSS Grid units to change the size 
of columns and rows, you can use pixels and M's.  
50:52 - But you can also use things like fr, which sets 
the column or row to a fraction of the available  
50:59 - space. See this how we have five different 
columns, and they're all different sizes. Well,  
51:04 - we have this code here. So you can see the 
first column is auto, that's the one here,  
51:09 - and that sets the column to the size of the space, 
so it just is just big enough for that one to fit  
51:16 - in there. And then the second column is 50. So 
this column with a two is 50 pixels wide. With  
51:24 - the three we have 10%. So this three is 10% of the 
available section from the whole container. This  
51:33 - is 3% of the whole container. And now we have the 
two fr and one fr, that's columns four and five.  
51:41 - So the last two columns, the remaining space is 
divided into three sections, because two plus one  
51:49 - is three, two other sections are allocated to the 
fourth column, and one to the fifth column, we're  
51:57 - going to make a grid with three columns. Instead 
of all five of these, we're going to specify three  
52:04 - of them. So the first one is going to be one 
Fr. And then we're going to have 100 pixels,  
52:10 - and then two Fr. So let's see what that looks 
like when I refresh the page here. So we can see  
52:19 - we have three columns, the middle column is always 
staying at 100 pixels no matter how wide, but the  
52:25 - first and third column will change. Because of the 
FR units here. You can see here in these columns,  
52:37 - there is no gap between the columns. This is 
brought up right against each other. Sometimes  
52:44 - you want to gap between the columns. So you 
use a grid column gap. I'm going to show you  
52:50 - how to do that right now and show you how to 
solve this challenge. So it's gonna be a grid  
52:54 - column gap. And then we set how many pixels 
we want in between each column. In this case,  
53:02 - we're going to put 20 pixels. So if I refresh 
here, we should see space in between each column.  
53:13 - In the last challenge, we learned about grid 
column gap, you probably won't be surprised to  
53:20 - learn that there's also a grid row gap. 
So it works just the same grid row gap,  
53:26 - and I'll make a gap between the rows. And this 
case, we'll put five pixels. By refresh here,  
53:33 - you can see that there's a space in between the 
rows here. The grid gap property is a shorthand  
53:43 - property for using the grid row gap and grid 
column gap properties all at once. If you just  
53:52 - put one number, it will put the same gap on 
the rows and columns. If you use two numbers,  
53:58 - the first number will be rows, the second number 
will be columns. So I'm going to just do the two  
54:04 - numbers here. So I'm going to do a grid gap. And 
then the first number is going to be 10 pixels  
54:11 - for the rows and the second numbers can be 20 
pixels for the columns. By refresh this here, we  
54:18 - can see that there's the 10 pixels in between, and 
then there's the 20 pixels for the columns here.  
54:28 - The grid column property is used to set 
how many columns a grid item will take up.  
54:36 - Now here's a three by three grid. And there's 
these hypothetical lines that you don't see but  
54:44 - they exist in between the grids, and they're 
numbered one you can see in this example for  
54:49 - a three by three grids, there's four lines 
1234 so for the grid column property to set  
54:57 - how many columns and item is going To take 
up, you're going to specify the beginning  
55:03 - line and the ending line. So if you wanted to 
take up two columns, the first two columns,  
55:09 - you would specify line one, and then line 
three, because it would start at line one,  
55:15 - and it would end at line three, let me show 
you what that would look like. So for instance,  
55:21 - if we were going to set this item five, to set to 
take up the first two columns, it would be like  
55:26 - this grid column. And then we would put one slash 
three, because it would start at the first line.  
55:36 - And in that the third line. For this challenge, 
though, we are going to make the grid take up  
55:42 - the final two columns. So it's going to start 
at two and in that four, so if we refresh that,  
55:51 - we should see that this fifth element starts at 
two, and then it ends at four, just like that.  
56:01 - We learned how to make grid items consume 
multiple columns, we can also do the same  
56:07 - thing with the rows, it's basically the 
same thing. So instead of grid column,  
56:11 - it's going to be grid row. And then for this 
challenge, we have to make it take up the last two  
56:18 - rows. So the same as before, I'm going to put two 
slash four. Because if you look on the diagram,  
56:28 - the last two rows are these two rows, and it's 
gonna start to line and end at the four line. So  
56:35 - let's refresh the page here. And you'll see that's 
taking up the last two rows of this section here.  
56:45 - in CSS Grid, each box is considered a cell. 
So each of these colored boxes on screen  
56:52 - are considered different cells. If we use justify 
self, we can justify and align the content within  
57:01 - the cells. By default, the property has a value 
of stretch, which will make the content filled the  
57:07 - whole width of the cell. But for this challenge, 
we're going to try a different a different  
57:13 - property. So I'll do justify self. And instead 
of setting it to stretch, which is the default,  
57:20 - I'm going to set it to center, we can also do 
start or end. But if we set the center, you'll see  
57:28 - that this has been centered within the cell just 
like that. In the last challenge, we used justify  
57:39 - self which aligns horizontally. Now we're going 
to align an item vertically using a line self.  
57:46 - It works pretty much the same way. So I'm going 
to put a line, self. And then I'm going to set  
57:54 - this to end. So now if we refresh, you'll see that 
this aligns vertically to the bottom of the cell.  
58:06 - If you want all your items in your grid to share 
the same alignment, you can use justify items on  
58:13 - the parent container. It uses all the same values 
that we saw before. So we'll put justify items.  
58:21 - And then I'll just set this to be center. If we 
refresh, we'll see everything has been centered.  
58:33 - We saw that justify items aligns all items 
horizontally aligned items aligned all items  
58:41 - vertically, again, you put it on the parent 
container, so put align items. And I'll set  
58:48 - this to end to set so all of them align at the end 
of each cell. So we see they all go to the bottom,  
58:56 - which is the end. Here we've created 
an area template, the cells have been  
59:05 - grouped together using a custom name. You'll 
see when you look at the rows and columns,  
59:10 - there's three columns and three rows, or 
nine cells total. And that's how many words  
59:17 - you'll see here. So each set of three words in 
quotation marks is a row. So that's the first row,  
59:24 - second row, third row. And you can see each word 
corresponds to a cell in this layout here. So  
59:33 - you can see the first three are now designated 
headers. And then we have an advert and then to  
59:40 - contents. And then the last three are the footer 
cells. You can use a period to designate an empty  
59:48 - Selma grid. And that's what we'll do for this 
challenge. So instead of the word advert here,  
59:54 - I'm just going to put a period in 
that designates it as an empty cell.  
60:01 - We saw how to define our template areas here in 
the last challenge. Now we'll learn how to place  
60:09 - items in a specific spot in the grid area. So if 
we want to set item five to be in a specific spot,  
60:17 - we'll use the grid area property. So grid area, 
and then we just put one of our customers names  
60:25 - that we defined below. For instance, if 
we set this to header, and I refresh here,  
60:31 - you'll see the number five has popped out of its 
normal location and fills up the entire header,  
60:37 - it fills up the entire header, because there 
are three items in the header. And there's  
60:43 - only only item five is set to header, so it fills 
up the whole header. For this challenge, however,  
60:49 - we're going to put it in the footer. So I'll 
just change this name to footer. And then if  
60:53 - we refresh again, you'll see that the 
item five takes up the entire footer.  
61:02 - You can create grid areas without a template. 
You'll notice here that we no longer have  
61:08 - our template code here. But I'm going to show 
you how to create a grid area. So same before  
61:14 - we start with grid area. But instead of saying the 
template name, I'm going to put some numbers, I'll  
61:19 - do one slash one, slash two, slash four. Now these 
use the same type of numbers that we've talked  
61:25 - about before. If you look at this chart here, 
it's almost like setting coordinates on a graph.  
61:32 - The first two numbers are the start coordinate. 
And the last two numbers are the end coordinate.  
61:38 - So the first two numbers would be the horizontal 
line to start with, and the vertical line to start  
61:44 - with. So for one, one, it would start in this top 
corner here. And then you'll see that the second  
61:50 - two numbers are two, four. So two, for me, that's 
going to end at the second horizontal line, here's  
61:58 - two, and then here's four, it's going to end at 
the fourth vertical line. So 1124 would start  
62:06 - at this point and end at this point. So that will 
just take up the entire top row. So let's see what  
62:13 - that looks like. I'll refresh, and we'll see that 
the five takes up the entire top row. Now we'll  
62:19 - make some slight changes to this to solve the 
challenge. So the numbers we're going to use are  
62:25 - 3144. So if you look on here, three, one would be 
right here, four, four would be right here. So now  
62:37 - it should take up the bottom row. Let's refresh, 
and you'll see five takes up the bottom row.  
62:45 - If you want to repeat the same size, row or 
column, many times you can use the repeat  
62:52 - function. If you see right here, we have the same 
size row repeated three times one fr, one fr one  
62:59 - fr we can use the repeat function to repeat 
that three times. Here's another way you can  
63:05 - use the repeat function. Let me put it in here. 
So to use the repeat function, you start with  
63:10 - the word repeat. And then in parentheses, 
we're going to pass in something first,  
63:15 - the number of times you want to repeat. So in 
this case, I'm going to pass in the number two,  
63:19 - you could use 75 5100. However many times you 
want this to repeat. Now we could put one size to  
63:28 - repeat the same size over and over. Or we can put 
in any number of sizes. So I'm going to put one fr  
63:34 - and then 50 pixels, so it's going to repeat that 
two times. And then you can even add other sizes  
63:43 - afterwards. So I'm gonna put 20 pixels. Let me 
show you how this will be calculated. I'm going to  
63:50 - copy this and just paste it in here. Now normally, 
you would never have grid template rows twice in  
63:56 - a row. I'm just using this as an example. So when 
this calculates out, it would look like this. I'll  
64:03 - copy this because it's going to be on there two 
times. And now you'll see one of our 50 pixels,  
64:10 - one of our 50 pixels 20 pixels. So this with 
the repeat function we calculate out to this,  
64:17 - let's back up a little bit, I'm going to undo some 
of the things I put in here to go back to what the  
64:22 - code looked like initially. And now we're actually 
going to make a change to the grid template  
64:28 - columns. See how it says one fr three times. Let's 
use the repeat function to do the same thing. So  
64:35 - I'm going to do repeat, and then the path and 
three, and then one fr So now if I refresh, we  
64:44 - should see no changes. It looks exactly the same, 
because this is equivalent to what we already had.  
64:53 - You can also set the size of a row or column using 
the min max function. min max function takes two  
65:01 - arguments. The first number is the smallest size 
that the row or column can be. And then the second  
65:08 - number is the largest size a row or column can 
be. So let me show you how this works and show  
65:13 - you how to solve this challenge. I'm going 
to replace this second number in the repeat  
65:18 - function with the min max function, which will 
pass in two arguments. First will be 90 pixels,  
65:26 - that will be the minimum amount that the row 
that this column can be. And the second number  
65:31 - is going to be one fr, which would be the 
max amount that the column can be. So if  
65:37 - I just refresh the page here, you can see how it 
changes depending on the size of the frame here.  
65:49 - We saw already that in the repeat function, 
the first argument you pass in is the number  
65:56 - of times you want this to repeat. So 
this is going to repeat three times,  
66:00 - you can also use autofill. So if you use autofill, 
it's going to automatically insert as many rows  
66:09 - or columns of your desired size as possible, 
depending on the size of the container. So  
66:15 - let's see what happens I'm going to refresh 
the page here. And then we'll see that this  
66:20 - changes depending on the size of the container, 
you can see the difference between container one  
66:26 - and container to container two at the bottom has 
just repeating three, and then the top one has  
66:33 - repeat autofill. So you can see how they behave 
differently depending on the size. We talked  
66:42 - about autofill this one right here. Now we're 
going to talk about auto fit. It's very similar,  
66:48 - I think the best way to show you the difference 
would be to actually show you what what effect it  
66:54 - has on this browser here. So this first one is set 
to auto fill. For this challenge, we have to set  
66:59 - the second one to auto fit. So I'm gonna put auto 
fit. And now let's just refresh the browser. And  
67:06 - we'll can see how they're both very similar but 
not quite. You can see they work very similar,  
67:12 - but you see the auto fit, always make sure that 
they fit the entire length of the container. Well,  
67:19 - auto fill doesn't necessarily need to fit the 
entire length of the container. They still keep  
67:26 - repeating as much as you need to. But it's 
just whether it's going to stretch or not.  
67:34 - media queries can be used along with template 
areas to make responsive layouts. Let's look  
67:41 - at the page right now. See, when I change the 
size, it will change how things are laid out  
67:47 - on the screen with the header the advert the 
content. So you can see how that works here,  
67:52 - here is the default, the default one is 
right here with and the default would be in  
67:58 - the smallest size. However, we also have this 
media query when the min width is 300 pixels.  
68:04 - So when it's over 300 pixels, we're going 
to change the template. So you'll see here,  
68:11 - there's just four areas header advert content 
footer. Here, each row has an advert on the side  
68:18 - and then either has the header of the content or 
footer, you can see that when you change the size  
68:24 - of the window size. Let's do one more to solve 
this challenge. When the min width is 400 pixels,  
68:32 - we want the header to be along the all the top. 
So I'm gonna put header, I'm gonna change word  
68:38 - advert to header. And we want the footer to be 
long the full bottom at min width 400 pixels.  
68:44 - So I'm going to put a footer here. And now if I 
refresh, we'll see that there's three different  
68:50 - sizes we can do. So here you can see the header on 
the top and bottom and the average in the middle.  
68:56 - Now the average stretches all the way from the 
top to bottom. And then the third size would be  
69:02 - everything right on top of each other. You can 
have grids within grids. This item three right  
69:13 - here corresponds to that paragraph one and two on 
the page. So we're going to change item three into  
69:20 - a grid. So I'll do display grid. Now I'll set the 
grid template columns to set what the columns are  
69:32 - going to be. And we'll use auto and then one 
f r. So let's see what happens. If I refresh.  
69:40 - You'll see that this it now takes up the whole 
space here. And there's a grid within the grid.  
69:51 - Flexbox is used to position CSS elements in 
a flexible way. So we're going to be talking  
69:58 - about Flexbox in this section. To use a flex on 
an element, we're going to have to set the display  
70:04 - to flex. That's what I'll do here, display 
flex. So now we've set this box container to  
70:13 - display flex. And you can see it now sets the 
boxes right next to each other on the page.  
70:22 - Throughout this section, we will be using 
flex to style this tweet. So to get ready,  
70:29 - we're going to have to add display flex to 
a lot of the elements. So let's add it to  
70:34 - the header display flex. When you're using 
Flexbox, you have to use display flex on a  
70:40 - lot of different things. So I'm just going 
to copy this. And we have on the header. We  
70:44 - have it on the profile name, we have it on 
the Follow button, we have on this h3 h4,  
70:50 - we have it on the footer, and we have the 
stats. So now we have Flexbox everywhere  
70:58 - we want to have it and you can see it's already 
made some changes to what our page looks like.  
71:06 - After we add display flex to an element, it 
becomes a flex container. And this makes it  
71:13 - possible to align any children of the element 
into rows or columns using the flex direction  
71:19 - property. The default to flex direction is row. 
But you can also set it to column or row reverse  
71:27 - or column reverse. So for this challenge, we are 
going to set this box container element to have  
71:34 - a flex direction. So we'll put flex direction. 
And we're I'll set it to row reverse. Now let's  
71:47 - update the page and see what happens. And 
you can see everything has been reversed.  
71:56 - Now we'll apply the flex direction property 
to create rows in our tweet. So the both the  
72:03 - header and the footer have child elements that 
can be arranged as rows. So that's what we're  
72:08 - going to do, I'm going to use flex direction here 
in the header direction, and then set this to row.  
72:15 - Now I'll just copy this, and then I'm going to 
paste it down at the footer. So now they both  
72:22 - have flex direction row. If I refresh, you'll 
see that nothing has changed. That's because  
72:29 - row is the default setting for flex direction. But 
we'll be making more changes in future challenges.  
72:41 - We saw how to use flex direction to create rows. 
Now we'll do it to create columns. It's pretty  
72:47 - straightforward. We'll just set flex direction 
to column. And now we should see a change when we  
72:58 - refresh. See, row is the default. So when we set 
flex direction to column, it updates two columns.  
73:08 - You can see in this tweet that the name Quincy 
Larson and his Twitter handle appear right next  
73:12 - to each other. These would look good stacked on 
top of each other. This is the perfect time to  
73:18 - use flex direction column. So let's go down to 
the profile name section here because the name  
73:26 - and the Twitter handle are all wrapped in the 
profile name class. So let's add flex direction.  
73:34 - And then set it to column I was refreshed and 
see what that looks like. Okay, much better.  
73:46 - You can align elements using the justify 
content property. This diagram represents a flex  
73:53 - container. And this is a row. Remember, they're 
either going to be in rows or columns. And this  
73:59 - represents a row with two items can see the first 
item here and the second item here. Now there are  
74:06 - several options for how to space the flex items 
along the line that is the main axis. You can see  
74:12 - the main axis goes straight through like this. If 
there was a column, the main axis would go up and  
74:18 - down instead of left and right. But one of the 
most commonly used ways to space the flex items  
74:25 - is justify content Center, which aligns all 
the flex items to the center inside the flex  
74:32 - container. Also there's a flex start, which will 
align the items to the start of the flex container  
74:39 - over on the left side here. For a row this pushes 
the ions to the left of the container but a column  
74:46 - for a column is going to push the items to the 
top and then flex end is over on the right side  
74:52 - of pushes the things to the right. space between 
will align items to the center of the main axis  
74:59 - And then there will be extra space placed between 
the items. Now the first and last items are pushed  
75:07 - to the very edge of the flex container. 
space around is similar to space between,  
75:13 - but the first and last items are not locked 
to the edges of the container. And the space  
75:18 - is distributed around all the items. So let's 
see this in practice. For this challenge, we're  
75:24 - just going to try one of these. So I am going to 
put the property justify content here. And then  
75:32 - I'm going to set it to center. So let's see what 
happens on our page. t. Now everything's centered,  
75:41 - and how it's justified. Now, I would recommend 
trying some of the other options on your own.  
75:51 - Now we're going to use the justify content 
property in the tweet and bed. So I'll show  
75:57 - you how to do that challenge right now, in 
this profile class here, for this style,  
76:02 - we're going to put justify content here. And 
we can set this to any of the options from the  
76:11 - last challenge, I'm going to use flex in, but 
you can use something else and still pass the  
76:17 - challenge. Now as I refresh the page, look at 
this name here, it's just going to move down  
76:23 - very slightly, so you've got to look closely 
to see the difference. So if I refresh here,  
76:29 - it goes to the bottom of this row here is 
the Align items property is similar to the  
76:39 - justify content property. The justify content 
property aligns along this main axis right here,  
76:46 - but the the Align items properly aligned along the 
cross axis. And these axes are opposite. If you're  
76:56 - using a column instead of a row, where the cross 
axis would be back and forth, left and right for  
77:02 - a column, and the main axis would be up and down 
for a column. But this diagram shows a row. And  
77:09 - the different values for a line items are pretty 
much the same as they are for justify content,  
77:16 - you have the flex start flex in center stretch 
and baseline. So the stretch and baseline are  
77:22 - the different ones. Stretch will stretch the 
items to fill the flex container, and baseline  
77:29 - will align the items to their baselines. So 
let's see an example of this in our code here,  
77:36 - we are going to add something to our box 
container here. So I'm going to put a line items,  
77:46 - and then I'll set it to center. And we should 
be able to see what that does here. So let me  
77:52 - refresh the page. You see these have been 
aligned to the center of our page here.  
78:02 - Now we'll use the Align items property in 
the tweet embed. So to solve this challenge,  
78:08 - we're just going to apply it to two different 
sections here. In this Follow button class,  
78:14 - we'll put a line items, and then we'll set to 
center. And I'm just going to copy this line  
78:21 - because we're going to use the same line below, 
right in the h3 and h4. And now if I refresh the  
78:28 - page, you'll see that things are aligned in the 
center. Now, it doesn't show up too much. Because  
78:34 - you can see this is just move down slightly, the 
movement was very slight, but it is aligned now.  
78:44 - By default, a flex container will fit all flex 
items together. You can see here that all these  
78:52 - colored boxes are in one row here. But if you 
use the flex wrap property, it tells CSS to wrap  
78:59 - items, so just means the extra items moved to 
a new row or column. So I'm going to show you  
79:05 - how to solve this challenge here by adding flex 
wrap. And I'm going to set this to ramp. Another  
79:14 - setting you can use is wrapped reverse. You can 
see now it wraps to the next line. The flex shrink  
79:25 - property applies to flex items instead of a flex 
container. It allows an item to shrink if the flex  
79:32 - container is too small. So I'm going to apply the 
flex shrink property to both of these items here,  
79:38 - box one and box two, like this. This will solve 
this The challenge here, it's going to set you  
79:45 - always have to set a number. So I'm going to set 
this one to one and then I'll set the next one to  
79:51 - two. So these numbers shrink in relation to each 
other. So if the second one is two, that means  
79:59 - that This box two will be two times as small as 
box one that has a shrink value of one. So let's  
80:07 - refresh and see what happens, you can see that 
the red box is two times as small as the blue box.  
80:16 - The flex grow property is basically the opposite 
of the flex shrink property. The flex shrink  
80:22 - property controls the size of the items when the 
container shrinks. But the flex grow property  
80:28 - controls the size of the island when the parent 
can when the parent container expands. Right now,  
80:33 - the website doesn't know how to render this HTML 
here and the CSS, because we need to add a flex  
80:41 - grille property. So let's do this the box one and 
box two, so what will flex grow, and then I'll put  
80:49 - a one, just like flex shrink, you're going to 
put a number. And now instead of this being two  
80:55 - times smaller, I'm going to put two again for 
box two, instead of it being two times smaller,  
81:00 - it's going to be two times bigger. So I'm gonna 
set this to two. And now this should know how  
81:06 - to render if I refresh, and you can see box two 
is two times larger because we had flex grow.  
81:16 - The flex basis property specifies the 
initial size of the item before CSS makes  
81:22 - adjustments with flex shrink or flex grow. 
So we're going to see how that works. Here,  
81:27 - we're going to set a specific size with pixels 
ends or percentages, or auto. So let's add that  
81:35 - to box one and box two. I'm gonna put flex asis. 
And you can see you can't even see box one,  
81:42 - box two until we add this. So the first one is 
going to be 10 em, and then I'll do flex basis,  
81:50 - and this one will do 20 AM's and if I refresh, 
we should see it on here. Okay, so now, it works.  
82:04 - The flex property is a shortcut to set the flex 
grow flex shrink and flex basis properties all  
82:13 - at once. Let me show you an example with the 
default property settings. So the default  
82:19 - property settings of flex are 01 Auto. So the 
first number is the flex row number. The second  
82:29 - number is the flex shrink number. And then we 
have the flex basis here. So for this challenge,  
82:34 - we're going to go off of the default. And 
I am going to set the first flex row, two,  
82:43 - two, and then I'll set the front flex shrink to 
two. And I'll set the flex basis to 150 pixels.  
82:56 - Now do something similar for box two, I'm going 
to also set the flex property. So it's going to  
83:05 - be one, one, and then 150 pixels. So let me show 
that in the browser and see what that's like. Now  
83:15 - we can change the size. And you can see when it's 
small, the red box is bigger. But when the browser  
83:23 - gets bigger, the blue box is bigger. So because 
of how we set the properties, at the at the 300  
83:33 - pixels lines, it's going to change which one is 
getting bigger and which one is getting smaller.  
83:42 - The order property can be used to rearrange items. 
By default, they just appear in the order that are  
83:49 - there. So the blue box box one appears first 
and then the red box box to appear second,  
83:54 - but we can change that with the order property. 
So for order, I'm going to put this first box  
84:00 - to have the order of two. And then I'm going 
to set the second box to have an order of one.  
84:08 - So we should see the red and blue flip places 
when I press refresh. And that's what we see.  
84:17 - The align self property will align each 
item individually. We already talked about  
84:24 - the Align items property which you set on the 
parent container. When you set an align items  
84:30 - on the parent container. Every item within that 
container is aligned in the same way. But if we  
84:36 - use a line self, we use it on the individual 
item and we can set each one differently. It  
84:44 - will override any value set by the Align 
items property. So for this challenge,  
84:49 - let's set some align items or align self for 
these items. So I'll do align self and then  
84:57 - you can use any value that You can also use 
in the Align items property. In this case,  
85:04 - I'm gonna put center for this one. And then 
down here, align self. I'll put flex and another  
85:16 - option be flipped start. So let's refresh. 
And then we can see here that this blue box  
85:23 - is centered. And then this red box is the end 
or goes to the bottom of the row here. Well,  
85:31 - thanks for watching the CSS course. Don't forget 
to subscribe. And remember, use your code for good

Cleaned transcript:

Hello, my name is Beau Carnes and I'm with free code camp.org. This is a complete CSS course, or Cascading Style Sheets. CSS is something you use to style websites or style HTML. So before you watch this course, you should have some familiarity with HTML. You can learn HTML through the free HTML curriculum at Free Code camp.org. Or you can check out the video course that I link to in the description. This whole CSS course follows along with the CSS curriculum at Free Code camp.org. So when you hear me talk about challenges or completing challenges, I'm talking about the challenges as part of that curriculum. However, it's a standalone video. So you don't have to go through the curriculum to get value out of this course. But if you want to, you can go through that curriculum as well. I have the link to the Free Code camp.org CSS curriculum in the description. After you finish this course, you may want to try out some CSS projects. So I have a link to a playlist with a bunch of CSS projects you can do right in the description. And then after you master CSS and HTML, it may be good to try out JavaScript. So I have a link to a JavaScript course also in the description. So let's get started. In this challenge, we're going to talk about inline styles. inline styles are where you style something right on the element that you want to effect. So if I put my mouse on this p tag here, I can add a style to the PPI by just using style. And then we're going to put what the style is going to be and we're going to put color blue. So that would just make the color of that text blue. But for this challenge, we're not going to style the p tag, we're going to style the h2. So I'm going to undo that. And now I'm going to add the style to this h2 tag. And I'm going to make this style where the color is going to be red, just like that. And let's open up the browser and see what that looks like. Okay, you can see that the text the title here is red. In the last challenge, we talked about inline styles. That's what this is here. Now we're going to talk about a different way to add styles using a style block. And you can see we use color red, there are actually hundreds of CSS properties like color, we're going to eventually get to those but not quite yet. I'm going to show you the style block. So to make a style block just at the beginning, I can add the tag the tag style. And then we just need a closing style block. And now I can add all my styles between these two style tags. So let me give you an example. If I want to style all the paragraph tags, I can put a P and I'm going to put a curly brace. And inside these two curly braces, I'm going to put color red. Now this is going to style all paragraphs every time you see a p tag, like here, here, and all the P tags are going to now be read. If we look in the browser, we can see what that's going to look like. So you can see, look, this paragraph is read this paragraph is read all the P tags have now changed the text to read. So for this challenge, we're going to take out the inline style here. And I'm going to add some style to this block up here. Instead of styling p tags, we're going to style the h2 tags. And I'm going to make them all blue. So I'm going to put color blue. Oh, let me open up the browser. And we'll see what that looks like if I refresh. And you can see the h2 is now blue. In the last challenge, we learned about styling tags like this, all h2 tags are blue. In this challenge, we're talking about styling classes. Classes are reusable styles that can be added to HTML elements. So to show that you're styling a class, you would put a.in front of it. So I'm going to change this eight, eight to two dot blue text. And if you add this dark blue text, this is only going to style elements that have a class of blue text. So for instance, for this paragraph, I'm going to add a class. And I'm going to put in blue text. Now you can see I put a period up here, but you don't put a period down here, the period just means it's a class, when you're looking at your CSS, your styles. So if I open this in my browser, and refresh it, we can see that this is now blue, right here, we're gonna change this up, instead of making a blue text, it's now going to say, red text, and this color is going to become red. I'm not going to need this anymore, because instead of putting the class on the paragraph, I'm going to put the class on this h2 tag, it's going to be class, red text. And then if I show that in the browser, and refresh, you can see the title is red. What's great about classes is that they allow you to use the same CSS styles on multiple HTML elements. So for instance, here, this is class red text, I can add red text a class red text to any element to make it read. And that's what we're going to do in this challenge. So on the first p element right here, right up here, I'm going to add class equals read text. And when I open up the little browser, here, you'll see that title is read. And the first paragraph is read just by adding the class to both elements. There are hundreds of different CSS properties. We've only talked about color so far. But another one is font size. That's pretty self explanatory, it's going to change the font size of an element. So for instance, I can put font size 30 pixels. And now everything that has the red text class will also be font size 30. So if I look in here, you can see that this paragraph is a lot bigger. Now, we're going to change the font size of paragraphs. So I'll just remove what I had here. And I'm going to add another style. So right down here, it's going to be P and the font size is going to be 16 pixels, it's going to put 16 px. And now, if I show the browser here, we'll see that all the paragraphs are 16 pixels, that we've just increased everything to 16 pixels for the paragraphs. You can set which font in element should use by using the font family property. Now you can use a type or style of font like Sarah Stan setter for mono space, or you can put in the exact font. So in this challenge, we're going to make all the P elements mono space. So right here, I'm going to put font family and then model space. And if we just show this in the browser and refresh, you can see now we have these, this monospace font here, just like that. You can import fonts from different websites, a free library of web fonts that you can use is Google fonts, they have a lot of great fonts. And that's what we're going to do in this challenge. We're going to see how to import Google fonts. So if I just paste in some code up here, this code comes directly from the Google Fonts website. And you can see it's the font family lobster. So I'm just about to show you how to use that right in our code here. So what I'm going to do is for the h2 element, I'm going to add h2 here, and I'm gonna add a font family of lobster. Now, that's all I really have to do for this challenge. If I wanted to, I could add a backup font that will be used just in case the the Google Font didn't load like this, I do a comma. And then I can put a generic font that's going to be used if the specific font doesn't load, but we're not going to Do that for this. I'm just going to open the browser and see if it works. And you can see, we have the lobster font right here. There are some default fonts available in all browsers, like monospace, serif and sans serif. You can see we're using the monospace font right here. So when one font isn't available, you can tell the browser to degrade or default to another font, like one of these default fonts, like the monospace font. For example, let's say we add the font family and the font family we had held that Helvetica. So if I add Helvetica, right here, and I can actually just make a list of fonts right here. So in font family, when you have a list here, first, it tries the first font. But if that one's not available, it will go to the next font. So when you're making a list of font family fonts, you always want the last one to be a generic font. So you know that if the browser can't get the first font or the second font, it can always get the the default font at the end here. So for this example, for this challenge, we're going to do that for the h2 tag. So in this h2 tag, we have lobster, let me delete Helvetica here. And I'm going to make the default font model space. Now, right now, if I open up the browser, you're not going to see anything different, you're going to see a lobster here. But if I comment out the link to the Google fonts, and now I'm going to refresh this. And you can see it's defaulted to the motto space just like that. See, so it couldn't find lobster, so it defaulted to the monospace font. css has a property called width that controls an element width. This can apply to almost any type of element, like an image or a div, or paragraph. And we're going to create a style that can make a larger image. So I'm going to create this called larger image. Now, that's only going to apply to an element with the class larger image. And I'll put width to be 500 pixels. So if we have anything with the class larger image, we'll make it larger. So I'm going to actually add that to this image here, I'm going to put class equals larger image. So if we look in the browser here, we should see that the image is very big right now, for this challenge, we're going to make a smaller image. So I'm just going to actually just change this to smaller, and instead of 500 pixels, we're gonna make this 100 pixels. And I have to apply the smaller image class down here. So if I open the little browser, and refresh, now, it's just a tiny little cat, a cute little cat right there on our page. css borders have properties like style, color and width. Let me show you an example. I'm going to actually make a change to the h2 style here, I'm going to paste in some code, you'll see border color, red border width five pixels, border style solid. So when I refresh the page, here, you'll see this red border around the h2 tag. I'm going to delete this for right now. Because for this challenge, we're actually going to make a thick green border. So I'll just put it right up at the top for now here. And I am going to make a new class called thick, green mortar. And I'm just going to actually paste in that same code from before. But the border color is now going to be green. And the border width can be 10 pixels. And the border style will still be solid here. So now I'm going to have to apply it to the image. So right now there's the class smaller image, but you can have two classes here I just put a space and then I'm going to put Vic mean order. So as long as you just have a space in between classes, you can have two classes. So if I refresh here, you'll see the thick green border right around there. You can see surf We have very sharp corners around this image, there's a border radius property that we can use to make that a little round more rounded, I'm going to add a new thing called border radius. And I'm going to set the value to 10 pixels. So if I refresh now, you can see we have rounded corners here. In addition to pixels, so you can also specify the border radius using a percentage. So instead of border radius, 10 pixels, I'm going to change this to 50%. And if I refresh my page, here, you can see it makes us circle. You can set an elements background color, with a property called background color. So here's an example, let's set the background color of the h2 element, background color. And I'm going to change this to blue. So if I open up my browser, we'll see that the background is blue, I'm going to make a new class, and the new class is going to be called silver background, silver background. And you guessed it, it's going to have a silver background. So I'm going to put background color, silver. Now remember, I also have to apply it somewhere I have to make something use that class. So for this div, class equals silver background. Now, if I refresh here, you can see we have a silver background here, we don't need this background color blue. So I'll take that off here and refresh it one more time. And that's how it's supposed to look. We've talked about styling specific elements like this. And then we've also talked about styling classes. You can also style based on ID and ideas similar to a class except each element is only going to have one ID classes, you can put on a lot of different elements. So let me show you how to apply an ID to an element. If I just go down to this form here. And I'm just going to put ID equals cat photo form. And just like that, it's not going to change the appearance at all, because we haven't styled it yet. But now we can use the ID to add CSS styles, or we can reference it in JavaScript. In the last section, we learned about IDs. Now we're going to learn about styling IDs, I'll use this Ace two as an example and add an ID of heading meaner styling IDs. It's similar to when you're styling classes, but we are going to use a hash mark instead of a period. So I'm going to put heading here, let me format this a little better. So you can see normally, for the class that started with a period for an ID, it's going to start with a hash mark. So I am going to put color green. Now I want to show you something. So you can see that this h2 has a class of red text and a heading, an ID of heading. So we have the red text and the heading. So is it going to be red, or is it going to be green? Well, let's open the browser and find out here you can see it is green, because CSS puts a higher priority to IDs, then classes. And as a reminder, you should only have one ID per element. We already have the ID down here on the form ID of cat photo form. And so now I'm going to change this instead of heading it's going to say cat photo form. And then for color, we're going to instead of color green, it's going to be background color green. And now I'm just going to Reese refresh that. And if I go down here to the form, you can see it's green in the background. You may have already noticed this but all HTML elements are essentially little rectangles. There are three properties that control the space around each element, which is padding margin and border. We already talked about border which you can see on here, the padding is the space around the text. You can see that the padding around this red text is a little more than that. Having around the blue text, the margin is the space outside of the border that surrounds the padding. So in this task, we are going to change the padding, we're going to change the padding on the blue box to match that of the red box. So if we look down here, the padding on the blue box is 10. Depending on the, the red box is 20. So we're just going to change this to 20. And then if I refresh my page, here, you can see that these boxes are the same size. Elements merging controls the amount of space between an elements border and the surrounding elements, you can see that there's greater margin on this red box than the blue box. So in this task, we're going to make sure that they're both the same. So I'm going to change the margin the blue box to match that of the red box. So you can see the margin is 20 on the red box, so I'm just going to set the blue box to also be 20. And then if I refresh my page, you can see that they're the same. The reason why this red box is so big right here is because it has negative margin, we're going to make sure the blue box is just as big as the red box by giving the blue box negative margin as well. So I'm going to set this to negative 15. So now the red box and the blue box are both at negative 15. And if I refresh the page, now they're both the same. As you can see, in this red box, each side can have different amounts of padding. That's this code here, padding, top padding, right padding, bottom padding left, we're going to use different paddings for the different sides of the blue box. So I'm just going to copy this code right here, and then paste it down here. And now what we have to do for the challenge is set the top and left to 40. So let's do 40 here, and top and left are already 40 and then the bottom and right to 20. That's just the same as already is. So let me refresh. And we're done. We already learned that you can set each side of padding separately, you can also do the same thing for margin, you can see for this red box, it has different margin on each side, we have margin top right bottom left, we're going to do the same thing for the blue box. And I'm just going to copy this margin from the red box and paste it in for the blue box. And now I'm just going to refresh my page. Because we're done. Previously, we learned about padding top padding, right padding bottom and padding left, there is an easier way to do the same thing. And it's called clockwise notation. If I if we look at this browser here and see the red box, there's actually a different padding on each side. So if you look at this padding here, see how these four numbers while the first number is the top, then the right then the bottom, then the left. So we're going to do the same thing in the blue box, I'm gonna start off by copying this padding from the red box, I'll paste it into the blue box. And this time, the padding top and left has to be 40. So this one has to be 40. And then the last one that's the left and the bottom and right have to be 20. Those are the two middle numbers. So if I change those and refresh, we'll see that that they're both kind of the same, they're a little different because this one has the 21st and 40. And then this one has the 40 than 20. And that's it. We already learned about clockwise notation for padding. Now we're going to learn about it for margin. It's basically the same. You can see this red box has a different margin on each side. So here's the code here. It's clockwise notation. There's four numbers. The first is the top, right, bottom, and then left. So you can do it all in one line. Instead of having four different lines. We're going to do the same thing for the blue box. So I'm just going to start by copying this line. And to solve this challenge, we're just going to flip these two numbers around because the 40 has to be that it has to be top and the 20 is going to be on the right. So if I refresh my page here, you can see that it has changed. We now know how to style classes. So this is an example of styling classes with a dot before the class here, and then you can put the styles for the class. And then you stay IDs with the hash mark, instead of a dot hero be a hash mark. Now we're going to learn how to use attribute selectors to style elements. Now, this is a selector that matches and styles elements with a specific attribute value. I'm going to show you an example how to style something with a type radio. So we can style everything with type radio. So let me add that right up top here. So you put brackets around, and we're gonna do that. So we're going to put the attribute which is type, and then we're going to put the value, which is radio. So type equals radio. And we're going to that's how we're going to select what we're styling. So here, I'm just going to set the margin to 20 pixels. So if we open up the browser here, now let me scroll down. And we can see that there is a margin around these radio buttons of 20 pixels. So now we're going to use the type attribute selector to try to give the checkboxes, a top margin of 10 pixels and a bottom margin of 15 pixels. So all I'm going to do is so let's go and look at the checkbox in the code. It says type check box. So we're going to use the same thing up here, instead of type radio, it's going to be type check box. And then for the margin, the top is going to be 10. And the bottom is gonna be 15. So what I'm going to do is do top if we do the clock one, so the first number is top, the second number is right, and it's going to put zero pixels. And then the third number is bottom, I'm going to put 15 pixels. And then the fourth number is the left which is zero pixels. So if I just refresh my page here, and the checkboxes are styled. So far, we've been setting margins and paddings using pixels. px, see this example, nega 25, px or pixels, these are absolute types of length. So absolute types of length include, like, I N for answer, mm, millimeters, these are all tied to physical units of length. But there's also relative units of length, such as M and REM. And these are relative to another link value. For example, em is based on the size of an elements font. And if you use it to set the font size property itself, it's relative to the parents font size. Now we'll talk about this a little more on the responsive web design principles section. But for now, we're going to try setting some padding using an M or M value. So that's what I'm going to show you. Now we're going to set the the class of the red box here, we're going to set the padding to an m value. So I'm gonna put padding, and it's just like how you would put up pixels, but instead of doing px, you just put em. So this is gonna be relative, depending on other things on the page. So if I show the browser here, now you'll see this extra padding here, around the red box. Every HTML page has a body element. Now usually, it'll be more explicit, you'll see the the body tag on the page. But even if you don't see the body tag on the page, like in these examples, it's still there, it's just hidden. So we can prove this by actually just styling the body element. So that's what we're going to do here, I'm going to add a body here, or a body style. And we're just going to set the background color to black. And now if I refresh my page, you can see it turns black, this the whole page turns black here. So we've seen the all pages have a body element. Now CSS that's stands for Cascading Style Sheets. cascading means anything that you apply to an upper element goes down to any lower elements or any elements that are inside other elements. So anything that you apply to the body element will cascade or get be inherited to all the others. elements on the page. So let's see how that first I'm going to create an h1 element. And inside the h1 element, I'm going to say hello, world. And now I'm going to style the body element. So we already have black on color black, I'm also gonna put color green. And I'm for the font family. I'll put it as monospace. Let's open up the browser and see what that looks like. Okay, look, we have green monospace font, I didn't apply it to the h1 tag, I applied it to the body, and then everything else got that same style. Sometimes your HTML elements will receive multiple styles that conflict with one another. If you see on here, this h1 here, this body will apply it will cascade down to the h1 to make the color green. But what if there was something else to make this a different color, what would happen? So what I'm going to do is make a new class, it's going to be called pink text. And I am going to make the color pink. And now I will apply the class to the h1 tag. So pink text. So what do you think's gonna happen? It has the color green from here, but I also had the color pink from here. Well, let's open up the browser and find out. And it's pink. The way it works is it uses whichever one is more specific. Since this has the class pink text, and it doesn't start with body or anything. The pink text is more specific than the body because body is further up. So whatever one is closest to the actual text, is which style it will use. So we saw that this color pink, override the color green because pink text is more specific than body. What can we do to override this pink text here? What if I made another class like this, I'm going to just copy that, and then paste it here. But instead of being pink text, it's going to be blue, and the color is going to be blue. Now I'm going to add another class here. Remember to add two classes, you just put a space in between classes, I'm going to put blue text here. So now what's going to happen is going to be pink or blue. I'm just going to give you one tip here is that the order of the classes here doesn't matter. It doesn't matter whether pink text or blue text comes first. So let's see what color the text is going to be. And you can see it's going to be blue. So the order that does matter is the order that the styles declared in. So if I just take this blue text here, I'm going to cut this. And now I'm going to just paste it right up here. And now if I refresh the page, you'll see that it's pink, because it just depends on what order this comes in here. So we saw they could override styles by making things more specific pink text, the class overrides, just styling the body. And then we saw you could override styles by putting things lowering in the styling section. So this blue text overrides pink text because it's lower. Now there's another way to override styles. And that's what IDs. So I'm going to add an ID to this h1 here, it's going to be ID equals and we're going to have an ID name called the orange text. And now I'm going to put the id style right above the pink text. Because when you're styling IDs, it doesn't matter. The order doesn't matter if it's above or below the other styles. Because IDs are even more specific. Let me show you what I mean. So remember to so starting with a dot, we're gonna start with a hashtag or pound sign. And I'm going to put orange text. And here we're going to put color orange. And now I'm going to show the browser here. And we'll refresh and you can see it's orange text. Because IDs are specific. You are only supposed to have one ID per page. So orange tech should only be on this element. Whereas classes you would put on multiple elements IDs you only apply to one element so IDs are more specific than classes. And here's another way to override class declarations with inline styles. inline styles are going to be more specific than all these other ways of styling text, I'm going to go right into this element here and put style equals, and then I'm just going to change the color to white, you can write this just as you would write your CSS above, but right in line. Now I'm going to open up the browser here. And then you should be able to see that text is white. So that's even more specific. You've learned many ways to override CSS and get even more and more specific, starting at the body, then pink text and blue text and orange text. We've learned many ways. But now I'm about to tell you about the most powerful method of all, how you can show something is super important. Let me show you that. Now. If you remember, this pink text has been overwritten many times. But now we're going to show that this is very important, I'm going to use an exclamation point and then the word important. So using this exclamation point, important after style means is the most important style, and you should definitely apply this style. So let's see what that looks like. And now it is pink. Hello World is now pink. So far, we've been coloring things using the actual color names, like for instance, black, or orange, or green or blue. But there's a way to get even more specific using hex codes. hex codes are six hexadecimal digits that represent colors. So you can represent any color on the spectrum using a hex code. So I'm going to change this instead of black, I'm gonna put the hexadecimal for black, which is just 000000. So the first two zeros are the red, the second two zeros are the green and the third, two zeros are blue. But since it's black, it's zero for every single one. So let's see what that looks like in the browser. And it's still black. hex codes can be used to create over 16 million different colors. And that's what we're going to do here, we're going to put in the right hex codes for these colors. So the hex for red is going to be they're always going to start with the hash mark or pound key. And I'm just going to put ff 0000. And then for green, we're going to do the hash mark, and it's going to be 00, ff 00. And then for Dodger blue Tex. Now I don't have these memorized, I'm actually just reading them off. Mo's you're not, it's gonna be hard to memorize 16 million different combinations for colors. So usually, you're going to look these up somewhere. There's a lot of websites, a lot of other resources to find the appropriate hex codes for different colors. So for the orange text, it's going to be FF a 500. And let's open up the browser and see what this looks like if I refresh this, and now we see all the different colors. Some hex codes can be shortened. Remember, they're usually six digits long. But sometimes the hex codes have three sets of two of the same digits. For instance, red text, the hex code is normally f f 0000, you can see that the first two digits are F, the second two digits are zero, and the third two digits are zero. So whenever there's three sets of two, we can shorten this by just doing one number one digit for e. So F 00. So this f will be expanded to f f, this will be expanded to 00. And this will be expanded to 00. For future for future tax, we can do F Zero F for the scientex, we can do zero f f, M, and then for the green text, we can do zero f zero. So let's open the browser and see if we got those colors. And it worked. Besides using hex values to represent colors, you can also represent colors using RGB values. So that would be like this, instead of this hex value, you would put RGB and then there's gonna be three numbers. Each number is going to be between zero and 255. I'll just use 255 three times here. And if we show this in the browser, 2552505255 is white. But for this challenge, we're going to change change it to black. So black is just going to be 000000 Black. And if I refresh, we'll see that it's changed to black. You can make just as many colors using RGB, as you can make with hex. So I'm going to make all these colors with RGB instead of hex. So for the red text, it's just gonna be RGB. And then the first number is always red. And then we have the green. And then we have the blue. So for red, it's all red, no green, no blue, you can kind of mix to decide how much you want to beat color color with RGB. And you can really do the same thing with hex as well. So for orchid text was to RGB. And this is going to be 218 112. And then 214. I don't actually have all these memorized, I'm just reading them off here. And to make this even easier, I'm going to do some copying and pasting. So we're going to have the C unitech. And the blue Tex Sienna is going to be 160 and then 110 82. And then we're going to do 45. And then for blue. This is gonna be an easy one, because we just have 00 255. And now let's look at the browser to see what that's going to look like. There are our colors. Look at this sweet pin one created only with CSS and HTML, we're not going to go into exactly how to create this, you can look at the code to find out yourself. But this is all about showing CSS variables. So here right here, our CSS variables, so the penguins skin black belly gray, beak yellow, you can see they're used here, like here background, we have the var and then your the parentheses two dashes, Penguin, deskin and gray. So this would be the backup color right here. But this will be, we will try to use this variable. If we can't use this variable, we go to the backup. But right now I'm going to show you how just changing these variable colors will change everything every time those variables are used. So I'm going to change this black to gray, I'm going to change this gray to white. And I'm going to change the yellow to orange. And then if I just refresh here, you can see our pin one is a completely different color now, is was super easy, we only had to change it in one spot, and it changed it everywhere in the code. In last challenge, we were introduced to variables. Now we'll go over him some more and learn about them in more detail. So to create a variable, we're going to do it right here. So we're going to create a penguin skin variable. So they always start with two dashes. And then we just do we put the name here, which is going to be penguin skin. Now we're going to be able to use this variable anywhere throughout the code, this is just going to be gray. So now anywhere we use this penguins quick skin variable, it's going to be replaced with gray in the code. So in the last challenge, we created this variable penguin skin gray. Now we're going to use it. So to use a variable you just put var and in parentheses, you put the variable name, let me show you here for this background, I'm going to put var and then parentheses and then I'm just going to put dash desc penguin. And then that's the variable, we're going to use the same variable in multiple places. So I'm just going to copy this, and we'll paste it here. And then I'll paste it here. And then if I refresh, it's great. Oh, there's a wing. Let's see, we have to replace one more spot. Okay, let's replace there, and refresh. And now everything that's supposed to be gray is now gray. So now, we had to replace all the spots this time, but from now on, whenever we want to change the color of the penguin scan, we only have to change it in one spot. That's the great thing about variable. variables can have fallback values attached. These are used if for some reason the variable won't work. It could be because someone's using an older browser that doesn't use CSS variables, or maybe just the variable name is spelled wrong. So that's what's happening here. css pin GUI that's spelled wrong. But to show that that's just to show these fallback values, so what I'm going to do is just add the word black here. And then here, I can add the word black. And now let's just refresh this. And you can see it's using the fallback value because it cannot find the pinguin skin because it's spelled wrong here. Variables are available inside the element in which you create it. So we have these variables here. The reason why they work in the other parts of the penguin is because everything is within the penguin element, like the right cheek, left cheek, belly, these are all within the pin one element. Sometimes in order to make variables available anywhere in a document, you can declare the variables inside a root element, you can think of the root element as a container for your entire HTML document, in the same way that an HTML element is a container for the body element. So anytime you create a variable within the root element, they're going to be available throughout the whole page. So that's what we're going to do here. So I'm going to make a variable named Penguin, belly. And then this is going to be pink. So we can already see that it's used in these spots here. So your penguin belly belly is used here. Penguin bellies use here. So it's used in these two different places. And but just making it here within the route, we're gonna be able to use it everywhere else. So let me refresh the page. And you can see that it's pink in both places. So variables declared within route apply to the whole page, but you can overwrite those within a specific element. So down here, I'm going to overwrite pin one belly. So Penguin, belly, and this is now going to be white. So if I refresh the page, it's white. Now. media queries can be used to change variables. Media Queries make different CSS apply, depending on the size of the screen. So here's a media query for max width 300 pixels. So we can make variables that only apply when the max width is 350 pixels. So let's try changing the size. So now, the penguin size will be 200 pixels. And we're also going to try changing the skin. So penguin skin, with this media query will be black. So now when you change the size of the browser, let me refresh again, it will change the variables. Time to create our first CSS Grid, you can turn any HTML element into a grid container by setting its display property to grid. So we have this HTML element container. And then here is the CSS for that, we are going to set the display property property to grid. And this will give us the ability to use the other properties associated with CSS Grid. So I'm just going to put display grid. And we're done. So it doesn't do anything quite yet, because we haven't updated any of the other properties yet. But we'll do that in later challenges. Now we need to to start defining the structure of the grid. We'll start with adding some columns using grid template columns. So I'm going to do that now and show you how to solve this challenge. I'm going to type in grid, template columns. And after grid template columns, we're going to put the width of each column. So the num, the number of numbers we put here are the number of columns, we're going to have three columns, so we're going to have three numbers, and all of them are going to be 100 pixels wide. So I just have to put 100 pixels three times. And now if I refresh the page here, you'll see that we have three columns. So here we have grid template columns, which we already learned about which sets the number of columns. Now we want to set the exact number of rows. Right now the rows are just determined automatically, but if we know know exactly how many rows we want, we can use grid template rows. So to solve this challenge, we just have to add grid template rows. And then just like grid template columns, the number of numbers are the number of rows. And each number is how tall each one will be. So I'm going to put 50 pixels 50 pixels. So we'll have two rows, or each 50 pixels high. So if I refresh that, it looks pretty similar, because that was very close to what the default was. But we just saw that you can use CSS Grid units to change the size of columns and rows, you can use pixels and M's. But you can also use things like fr, which sets the column or row to a fraction of the available space. See this how we have five different columns, and they're all different sizes. Well, we have this code here. So you can see the first column is auto, that's the one here, and that sets the column to the size of the space, so it just is just big enough for that one to fit in there. And then the second column is 50. So this column with a two is 50 pixels wide. With the three we have 10%. So this three is 10% of the available section from the whole container. This is 3% of the whole container. And now we have the two fr and one fr, that's columns four and five. So the last two columns, the remaining space is divided into three sections, because two plus one is three, two other sections are allocated to the fourth column, and one to the fifth column, we're going to make a grid with three columns. Instead of all five of these, we're going to specify three of them. So the first one is going to be one Fr. And then we're going to have 100 pixels, and then two Fr. So let's see what that looks like when I refresh the page here. So we can see we have three columns, the middle column is always staying at 100 pixels no matter how wide, but the first and third column will change. Because of the FR units here. You can see here in these columns, there is no gap between the columns. This is brought up right against each other. Sometimes you want to gap between the columns. So you use a grid column gap. I'm going to show you how to do that right now and show you how to solve this challenge. So it's gonna be a grid column gap. And then we set how many pixels we want in between each column. In this case, we're going to put 20 pixels. So if I refresh here, we should see space in between each column. In the last challenge, we learned about grid column gap, you probably won't be surprised to learn that there's also a grid row gap. So it works just the same grid row gap, and I'll make a gap between the rows. And this case, we'll put five pixels. By refresh here, you can see that there's a space in between the rows here. The grid gap property is a shorthand property for using the grid row gap and grid column gap properties all at once. If you just put one number, it will put the same gap on the rows and columns. If you use two numbers, the first number will be rows, the second number will be columns. So I'm going to just do the two numbers here. So I'm going to do a grid gap. And then the first number is going to be 10 pixels for the rows and the second numbers can be 20 pixels for the columns. By refresh this here, we can see that there's the 10 pixels in between, and then there's the 20 pixels for the columns here. The grid column property is used to set how many columns a grid item will take up. Now here's a three by three grid. And there's these hypothetical lines that you don't see but they exist in between the grids, and they're numbered one you can see in this example for a three by three grids, there's four lines 1234 so for the grid column property to set how many columns and item is going To take up, you're going to specify the beginning line and the ending line. So if you wanted to take up two columns, the first two columns, you would specify line one, and then line three, because it would start at line one, and it would end at line three, let me show you what that would look like. So for instance, if we were going to set this item five, to set to take up the first two columns, it would be like this grid column. And then we would put one slash three, because it would start at the first line. And in that the third line. For this challenge, though, we are going to make the grid take up the final two columns. So it's going to start at two and in that four, so if we refresh that, we should see that this fifth element starts at two, and then it ends at four, just like that. We learned how to make grid items consume multiple columns, we can also do the same thing with the rows, it's basically the same thing. So instead of grid column, it's going to be grid row. And then for this challenge, we have to make it take up the last two rows. So the same as before, I'm going to put two slash four. Because if you look on the diagram, the last two rows are these two rows, and it's gonna start to line and end at the four line. So let's refresh the page here. And you'll see that's taking up the last two rows of this section here. in CSS Grid, each box is considered a cell. So each of these colored boxes on screen are considered different cells. If we use justify self, we can justify and align the content within the cells. By default, the property has a value of stretch, which will make the content filled the whole width of the cell. But for this challenge, we're going to try a different a different property. So I'll do justify self. And instead of setting it to stretch, which is the default, I'm going to set it to center, we can also do start or end. But if we set the center, you'll see that this has been centered within the cell just like that. In the last challenge, we used justify self which aligns horizontally. Now we're going to align an item vertically using a line self. It works pretty much the same way. So I'm going to put a line, self. And then I'm going to set this to end. So now if we refresh, you'll see that this aligns vertically to the bottom of the cell. If you want all your items in your grid to share the same alignment, you can use justify items on the parent container. It uses all the same values that we saw before. So we'll put justify items. And then I'll just set this to be center. If we refresh, we'll see everything has been centered. We saw that justify items aligns all items horizontally aligned items aligned all items vertically, again, you put it on the parent container, so put align items. And I'll set this to end to set so all of them align at the end of each cell. So we see they all go to the bottom, which is the end. Here we've created an area template, the cells have been grouped together using a custom name. You'll see when you look at the rows and columns, there's three columns and three rows, or nine cells total. And that's how many words you'll see here. So each set of three words in quotation marks is a row. So that's the first row, second row, third row. And you can see each word corresponds to a cell in this layout here. So you can see the first three are now designated headers. And then we have an advert and then to contents. And then the last three are the footer cells. You can use a period to designate an empty Selma grid. And that's what we'll do for this challenge. So instead of the word advert here, I'm just going to put a period in that designates it as an empty cell. We saw how to define our template areas here in the last challenge. Now we'll learn how to place items in a specific spot in the grid area. So if we want to set item five to be in a specific spot, we'll use the grid area property. So grid area, and then we just put one of our customers names that we defined below. For instance, if we set this to header, and I refresh here, you'll see the number five has popped out of its normal location and fills up the entire header, it fills up the entire header, because there are three items in the header. And there's only only item five is set to header, so it fills up the whole header. For this challenge, however, we're going to put it in the footer. So I'll just change this name to footer. And then if we refresh again, you'll see that the item five takes up the entire footer. You can create grid areas without a template. You'll notice here that we no longer have our template code here. But I'm going to show you how to create a grid area. So same before we start with grid area. But instead of saying the template name, I'm going to put some numbers, I'll do one slash one, slash two, slash four. Now these use the same type of numbers that we've talked about before. If you look at this chart here, it's almost like setting coordinates on a graph. The first two numbers are the start coordinate. And the last two numbers are the end coordinate. So the first two numbers would be the horizontal line to start with, and the vertical line to start with. So for one, one, it would start in this top corner here. And then you'll see that the second two numbers are two, four. So two, for me, that's going to end at the second horizontal line, here's two, and then here's four, it's going to end at the fourth vertical line. So 1124 would start at this point and end at this point. So that will just take up the entire top row. So let's see what that looks like. I'll refresh, and we'll see that the five takes up the entire top row. Now we'll make some slight changes to this to solve the challenge. So the numbers we're going to use are 3144. So if you look on here, three, one would be right here, four, four would be right here. So now it should take up the bottom row. Let's refresh, and you'll see five takes up the bottom row. If you want to repeat the same size, row or column, many times you can use the repeat function. If you see right here, we have the same size row repeated three times one fr, one fr one fr we can use the repeat function to repeat that three times. Here's another way you can use the repeat function. Let me put it in here. So to use the repeat function, you start with the word repeat. And then in parentheses, we're going to pass in something first, the number of times you want to repeat. So in this case, I'm going to pass in the number two, you could use 75 5100. However many times you want this to repeat. Now we could put one size to repeat the same size over and over. Or we can put in any number of sizes. So I'm going to put one fr and then 50 pixels, so it's going to repeat that two times. And then you can even add other sizes afterwards. So I'm gonna put 20 pixels. Let me show you how this will be calculated. I'm going to copy this and just paste it in here. Now normally, you would never have grid template rows twice in a row. I'm just using this as an example. So when this calculates out, it would look like this. I'll copy this because it's going to be on there two times. And now you'll see one of our 50 pixels, one of our 50 pixels 20 pixels. So this with the repeat function we calculate out to this, let's back up a little bit, I'm going to undo some of the things I put in here to go back to what the code looked like initially. And now we're actually going to make a change to the grid template columns. See how it says one fr three times. Let's use the repeat function to do the same thing. So I'm going to do repeat, and then the path and three, and then one fr So now if I refresh, we should see no changes. It looks exactly the same, because this is equivalent to what we already had. You can also set the size of a row or column using the min max function. min max function takes two arguments. The first number is the smallest size that the row or column can be. And then the second number is the largest size a row or column can be. So let me show you how this works and show you how to solve this challenge. I'm going to replace this second number in the repeat function with the min max function, which will pass in two arguments. First will be 90 pixels, that will be the minimum amount that the row that this column can be. And the second number is going to be one fr, which would be the max amount that the column can be. So if I just refresh the page here, you can see how it changes depending on the size of the frame here. We saw already that in the repeat function, the first argument you pass in is the number of times you want this to repeat. So this is going to repeat three times, you can also use autofill. So if you use autofill, it's going to automatically insert as many rows or columns of your desired size as possible, depending on the size of the container. So let's see what happens I'm going to refresh the page here. And then we'll see that this changes depending on the size of the container, you can see the difference between container one and container to container two at the bottom has just repeating three, and then the top one has repeat autofill. So you can see how they behave differently depending on the size. We talked about autofill this one right here. Now we're going to talk about auto fit. It's very similar, I think the best way to show you the difference would be to actually show you what what effect it has on this browser here. So this first one is set to auto fill. For this challenge, we have to set the second one to auto fit. So I'm gonna put auto fit. And now let's just refresh the browser. And we'll can see how they're both very similar but not quite. You can see they work very similar, but you see the auto fit, always make sure that they fit the entire length of the container. Well, auto fill doesn't necessarily need to fit the entire length of the container. They still keep repeating as much as you need to. But it's just whether it's going to stretch or not. media queries can be used along with template areas to make responsive layouts. Let's look at the page right now. See, when I change the size, it will change how things are laid out on the screen with the header the advert the content. So you can see how that works here, here is the default, the default one is right here with and the default would be in the smallest size. However, we also have this media query when the min width is 300 pixels. So when it's over 300 pixels, we're going to change the template. So you'll see here, there's just four areas header advert content footer. Here, each row has an advert on the side and then either has the header of the content or footer, you can see that when you change the size of the window size. Let's do one more to solve this challenge. When the min width is 400 pixels, we want the header to be along the all the top. So I'm gonna put header, I'm gonna change word advert to header. And we want the footer to be long the full bottom at min width 400 pixels. So I'm going to put a footer here. And now if I refresh, we'll see that there's three different sizes we can do. So here you can see the header on the top and bottom and the average in the middle. Now the average stretches all the way from the top to bottom. And then the third size would be everything right on top of each other. You can have grids within grids. This item three right here corresponds to that paragraph one and two on the page. So we're going to change item three into a grid. So I'll do display grid. Now I'll set the grid template columns to set what the columns are going to be. And we'll use auto and then one f r. So let's see what happens. If I refresh. You'll see that this it now takes up the whole space here. And there's a grid within the grid. Flexbox is used to position CSS elements in a flexible way. So we're going to be talking about Flexbox in this section. To use a flex on an element, we're going to have to set the display to flex. That's what I'll do here, display flex. So now we've set this box container to display flex. And you can see it now sets the boxes right next to each other on the page. Throughout this section, we will be using flex to style this tweet. So to get ready, we're going to have to add display flex to a lot of the elements. So let's add it to the header display flex. When you're using Flexbox, you have to use display flex on a lot of different things. So I'm just going to copy this. And we have on the header. We have it on the profile name, we have it on the Follow button, we have on this h3 h4, we have it on the footer, and we have the stats. So now we have Flexbox everywhere we want to have it and you can see it's already made some changes to what our page looks like. After we add display flex to an element, it becomes a flex container. And this makes it possible to align any children of the element into rows or columns using the flex direction property. The default to flex direction is row. But you can also set it to column or row reverse or column reverse. So for this challenge, we are going to set this box container element to have a flex direction. So we'll put flex direction. And we're I'll set it to row reverse. Now let's update the page and see what happens. And you can see everything has been reversed. Now we'll apply the flex direction property to create rows in our tweet. So the both the header and the footer have child elements that can be arranged as rows. So that's what we're going to do, I'm going to use flex direction here in the header direction, and then set this to row. Now I'll just copy this, and then I'm going to paste it down at the footer. So now they both have flex direction row. If I refresh, you'll see that nothing has changed. That's because row is the default setting for flex direction. But we'll be making more changes in future challenges. We saw how to use flex direction to create rows. Now we'll do it to create columns. It's pretty straightforward. We'll just set flex direction to column. And now we should see a change when we refresh. See, row is the default. So when we set flex direction to column, it updates two columns. You can see in this tweet that the name Quincy Larson and his Twitter handle appear right next to each other. These would look good stacked on top of each other. This is the perfect time to use flex direction column. So let's go down to the profile name section here because the name and the Twitter handle are all wrapped in the profile name class. So let's add flex direction. And then set it to column I was refreshed and see what that looks like. Okay, much better. You can align elements using the justify content property. This diagram represents a flex container. And this is a row. Remember, they're either going to be in rows or columns. And this represents a row with two items can see the first item here and the second item here. Now there are several options for how to space the flex items along the line that is the main axis. You can see the main axis goes straight through like this. If there was a column, the main axis would go up and down instead of left and right. But one of the most commonly used ways to space the flex items is justify content Center, which aligns all the flex items to the center inside the flex container. Also there's a flex start, which will align the items to the start of the flex container over on the left side here. For a row this pushes the ions to the left of the container but a column for a column is going to push the items to the top and then flex end is over on the right side of pushes the things to the right. space between will align items to the center of the main axis And then there will be extra space placed between the items. Now the first and last items are pushed to the very edge of the flex container. space around is similar to space between, but the first and last items are not locked to the edges of the container. And the space is distributed around all the items. So let's see this in practice. For this challenge, we're just going to try one of these. So I am going to put the property justify content here. And then I'm going to set it to center. So let's see what happens on our page. t. Now everything's centered, and how it's justified. Now, I would recommend trying some of the other options on your own. Now we're going to use the justify content property in the tweet and bed. So I'll show you how to do that challenge right now, in this profile class here, for this style, we're going to put justify content here. And we can set this to any of the options from the last challenge, I'm going to use flex in, but you can use something else and still pass the challenge. Now as I refresh the page, look at this name here, it's just going to move down very slightly, so you've got to look closely to see the difference. So if I refresh here, it goes to the bottom of this row here is the Align items property is similar to the justify content property. The justify content property aligns along this main axis right here, but the the Align items properly aligned along the cross axis. And these axes are opposite. If you're using a column instead of a row, where the cross axis would be back and forth, left and right for a column, and the main axis would be up and down for a column. But this diagram shows a row. And the different values for a line items are pretty much the same as they are for justify content, you have the flex start flex in center stretch and baseline. So the stretch and baseline are the different ones. Stretch will stretch the items to fill the flex container, and baseline will align the items to their baselines. So let's see an example of this in our code here, we are going to add something to our box container here. So I'm going to put a line items, and then I'll set it to center. And we should be able to see what that does here. So let me refresh the page. You see these have been aligned to the center of our page here. Now we'll use the Align items property in the tweet embed. So to solve this challenge, we're just going to apply it to two different sections here. In this Follow button class, we'll put a line items, and then we'll set to center. And I'm just going to copy this line because we're going to use the same line below, right in the h3 and h4. And now if I refresh the page, you'll see that things are aligned in the center. Now, it doesn't show up too much. Because you can see this is just move down slightly, the movement was very slight, but it is aligned now. By default, a flex container will fit all flex items together. You can see here that all these colored boxes are in one row here. But if you use the flex wrap property, it tells CSS to wrap items, so just means the extra items moved to a new row or column. So I'm going to show you how to solve this challenge here by adding flex wrap. And I'm going to set this to ramp. Another setting you can use is wrapped reverse. You can see now it wraps to the next line. The flex shrink property applies to flex items instead of a flex container. It allows an item to shrink if the flex container is too small. So I'm going to apply the flex shrink property to both of these items here, box one and box two, like this. This will solve this The challenge here, it's going to set you always have to set a number. So I'm going to set this one to one and then I'll set the next one to two. So these numbers shrink in relation to each other. So if the second one is two, that means that This box two will be two times as small as box one that has a shrink value of one. So let's refresh and see what happens, you can see that the red box is two times as small as the blue box. The flex grow property is basically the opposite of the flex shrink property. The flex shrink property controls the size of the items when the container shrinks. But the flex grow property controls the size of the island when the parent can when the parent container expands. Right now, the website doesn't know how to render this HTML here and the CSS, because we need to add a flex grille property. So let's do this the box one and box two, so what will flex grow, and then I'll put a one, just like flex shrink, you're going to put a number. And now instead of this being two times smaller, I'm going to put two again for box two, instead of it being two times smaller, it's going to be two times bigger. So I'm gonna set this to two. And now this should know how to render if I refresh, and you can see box two is two times larger because we had flex grow. The flex basis property specifies the initial size of the item before CSS makes adjustments with flex shrink or flex grow. So we're going to see how that works. Here, we're going to set a specific size with pixels ends or percentages, or auto. So let's add that to box one and box two. I'm gonna put flex asis. And you can see you can't even see box one, box two until we add this. So the first one is going to be 10 em, and then I'll do flex basis, and this one will do 20 AM's and if I refresh, we should see it on here. Okay, so now, it works. The flex property is a shortcut to set the flex grow flex shrink and flex basis properties all at once. Let me show you an example with the default property settings. So the default property settings of flex are 01 Auto. So the first number is the flex row number. The second number is the flex shrink number. And then we have the flex basis here. So for this challenge, we're going to go off of the default. And I am going to set the first flex row, two, two, and then I'll set the front flex shrink to two. And I'll set the flex basis to 150 pixels. Now do something similar for box two, I'm going to also set the flex property. So it's going to be one, one, and then 150 pixels. So let me show that in the browser and see what that's like. Now we can change the size. And you can see when it's small, the red box is bigger. But when the browser gets bigger, the blue box is bigger. So because of how we set the properties, at the at the 300 pixels lines, it's going to change which one is getting bigger and which one is getting smaller. The order property can be used to rearrange items. By default, they just appear in the order that are there. So the blue box box one appears first and then the red box box to appear second, but we can change that with the order property. So for order, I'm going to put this first box to have the order of two. And then I'm going to set the second box to have an order of one. So we should see the red and blue flip places when I press refresh. And that's what we see. The align self property will align each item individually. We already talked about the Align items property which you set on the parent container. When you set an align items on the parent container. Every item within that container is aligned in the same way. But if we use a line self, we use it on the individual item and we can set each one differently. It will override any value set by the Align items property. So for this challenge, let's set some align items or align self for these items. So I'll do align self and then you can use any value that You can also use in the Align items property. In this case, I'm gonna put center for this one. And then down here, align self. I'll put flex and another option be flipped start. So let's refresh. And then we can see here that this blue box is centered. And then this red box is the end or goes to the bottom of the row here. Well, thanks for watching the CSS course. Don't forget to subscribe. And remember, use your code for good
