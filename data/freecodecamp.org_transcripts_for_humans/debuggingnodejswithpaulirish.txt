With timestamps:

00:00 - we're going to take a look at a little
00:01 - look at debugging and kind of just the
00:03 - state of debugging with node.js
00:06 - and to give you a little bit of context
00:09 - um i work on google chrome i i work on
00:12 - the chrome devtools but i've been
00:14 - invested in devtools and just generally
00:16 - tooling
00:18 - for a long time um
00:20 - i found this like recently
00:22 - 10 years ago i made this stunner right
00:25 - here a nice little like cheat sheet of
00:27 - keyboard shortcuts for our best friend
00:29 - firebug
00:30 - uh
00:31 - so good but you know
00:33 - like even then i was just really
00:35 - excited to
00:36 - understand what kind of capabilities
00:39 - tools uh offered us because i was like i
00:42 - can i can learn one more thing and i can
00:43 - be more productive save my time and save
00:46 - my stress
00:48 - and we now have some good tools we have
00:51 - one tool in particular that is you know
00:54 - our trusty friend go to console log we
00:56 - all use it we love it it's reliable it's
00:58 - everywhere uh you want to know what a
01:00 - value is hey console.log's got you back
01:03 - no problem so that's great um
01:06 - but you know
01:07 - while it is useful like console log
01:09 - debugging printf debugging
01:11 - there are more powerful capabilities so
01:14 - i wanted to touch on
01:15 - a few of those
01:17 - a year ago at google i o
01:19 - the chrome team
01:21 - introduced some of the work that we'd
01:23 - done to introduce the v8 inspector
01:25 - component into node bringing some new
01:28 - debugging capabilities uh to the node
01:31 - project uh we actually
01:33 - announced a pull request uh rather than
01:36 - like you know something shipping but hey
01:38 - you know it landed and and now it's now
01:40 - it's in there so that's fine um i'm
01:43 - going to quickly walk through kind of
01:44 - just the basics of how this works
01:47 - uh you have a little
01:49 - hello world script you can run it like
01:51 - that obviously um but you can run
01:54 - inspect how many people have used
01:56 - inspect or something good yes great okay
02:00 - do this return the debugger also dash x
02:03 - inspect will
02:04 - run it turn on the debugger and pause it
02:06 - on the very first statement of the
02:08 - script
02:09 - i find this is really useful with you
02:10 - know utilities other things where it's
02:12 - going to happen really fast and you want
02:14 - to break at the very beginning to make
02:16 - sure any sort of breakpoints are in
02:18 - place
02:20 - now when you run this uh you'll get some
02:23 - output that looks like this hey the
02:24 - debugger is on
02:26 - uh it's listening to a websocket and um
02:29 - here's some docs
02:30 - uh this is a little different than it
02:31 - was before in previous node versions you
02:33 - saw something like this a bit more text
02:36 - and a big long
02:38 - url that you felt compelled to like copy
02:40 - paste and it's kind of awkward anyways
02:42 - don't do that anymore
02:44 - it's a little bit better and so this is
02:46 - kind of
02:47 - a good approach to take
02:48 - so once you've turned things on uh head
02:51 - over to chrome new tab type in about
02:53 - inspect it'll bring you to a page that
02:55 - looks a little like this
02:57 - um
02:59 - and these are some inspectable targets
03:01 - uh you'll see
03:02 - your the node script mentioned right
03:04 - here but click on this guy right here
03:06 - the dedicated dev tools for node this is
03:08 - going to pop up devtools it's just for
03:10 - your node
03:12 - now another approach
03:14 - to do the exact same thing is if
03:16 - chrome's open and a dev tools window's
03:18 - already open and then you go and you
03:20 - take your script and you start
03:22 - inspecting it
03:23 - uh
03:24 - in dev tools now um and this is new as
03:26 - of uh it's shipped to chrome stable as
03:29 - of this week uh
03:31 - right up in the top left corner we'll
03:33 - add a nice bright green shiny node.js
03:35 - icon click that guy
03:38 - and that'll bring up the dedicated
03:39 - window for you
03:40 - so um
03:42 - just you know dedicated window
03:45 - obviously it has less tabs than your
03:46 - typical chrome dev tools
03:48 - because we're just dealing with node and
03:50 - its capabilities
03:52 - but the dedicated window is great
03:54 - because if you're working with no if
03:56 - you're working with your application
03:58 - then you make some changes
04:00 - so your control scene your application
04:02 - and then you rerun it this dedicated
04:04 - window is going to automatically
04:05 - reconnect to the node that is now there
04:08 - so it's just there so it's going to
04:09 - automatically reconnect whenever there's
04:11 - a new one
04:12 - all right so those are just kind of the
04:14 - basics um but i want to show a little
04:18 - bit of how this works
04:19 - uh in action
04:21 - so
04:22 - we have
04:24 - a little
04:26 - web server app um
04:29 - and
04:31 - when i run it yeah okay yep
04:34 - internal server error great so we do
04:36 - have some problems the console
04:40 - is telling me problems great
04:42 - uh over in chrome inspect i'm going to
04:44 - open this guy up
04:46 - okay so this is the app
04:49 - uh 40 lines of stuff
04:53 - internal server error
04:54 - is right here and so
04:57 - one thing that i know happens uh it's a
05:00 - little you know it's it's kind of
05:02 - confusing so
05:04 - we're trying to do this we catch so
05:06 - we got some exception and then at this
05:08 - point we emit an air event
05:11 - uh that actually gets heard up here when
05:13 - we're listening up
05:15 - on this guy and then this arrow function
05:17 - is emitting its own air event passing
05:20 - along
05:21 - uh the data
05:23 - now
05:24 - i really want to know what this
05:26 - exception is right here because i'm not
05:28 - getting it out on the console
05:31 - but one thing that i can do
05:33 - is i'm going to place a break point
05:36 - well i don't actually want it here i
05:38 - want to break
05:40 - inside of this arrow function so i place
05:43 - it
05:44 - this guy but then turn on this column
05:46 - break point right here
05:48 - so now
05:50 - all right now we go over here we reload
05:53 - and i paused inside of the arrow
05:55 - function
05:56 - and you can see data is
05:59 - inspectable
06:01 - and so we're paused inside this guy it's
06:03 - really cool works phenomenally well with
06:05 - arrow functions with asynchronous code
06:08 - it's super useful
06:10 - now
06:12 - i
06:13 - this guy
06:15 - comes down here where i say problem
06:18 - and i'm losing
06:20 - the details about this exception
06:21 - somewhere between there
06:23 - um
06:24 - i don't know where exactly
06:27 - i might start out with like a step in
06:30 - see what happens but
06:32 - i step in on emit i'm inside of uh you
06:34 - know node's core events module which
06:37 - honestly i
06:39 - like i don't want to walk through this
06:41 - so i'm gonna right click
06:43 - and i'm gonna black box this guy
06:45 - um
06:46 - and with black boxing it's just saying
06:48 - hey you probably you know
06:51 - uh you're just gonna avoid stepping
06:52 - through this so we can see now in the
06:54 - call sack it says that a few call frames
06:56 - are completely black boxed and so now
06:58 - when i step in
07:00 - we step directly to my own
07:02 - uh
07:03 - event handler for the exact same thing
07:05 - so just bypassing all that
07:13 - um
07:14 - right
07:15 - well we got that under control
07:18 - and e is telling us uh well this string
07:21 - we still don't have our exception
07:23 - open up the console let's just be like
07:25 - this
07:26 - arguments yep there it is okay there are
07:28 - two arguments right okay that string and
07:31 - then the actual exception so i was just
07:33 - being silly so what we can do just
07:37 - take this guy control d for multiple
07:39 - selection comma
07:41 - spread good and um
07:45 - i'm gonna hit control s
07:47 - uh control s
07:48 - is a live edit it's kind of like a hot
07:50 - module reload but at the at the v8 level
07:53 - and so now
07:54 - uh
07:55 - when i
07:57 - refresh the same
07:59 - guy
08:01 - i'm so paused i'm still paused hey
08:05 - now when i refresh yeah there we go okay
08:08 - so i was just getting the logs before
08:09 - and now
08:10 - yes the actual exception made its way
08:12 - through nice thing here is i didn't have
08:13 - to like restart node the live edit meant
08:16 - that i'm able to just keep that running
08:18 - make some changes and then
08:20 - see what happens
08:22 - all right so thank you
08:28 - i'll show you just a few things here
08:29 - column break points black boxing live
08:32 - edit all this good stuff that's been
08:34 - available when you're debugging chrome
08:35 - now all available when you're debugging
08:38 - uh with node as well all right
08:41 - bring it back to these guys
08:44 - so um if you've done this before and you
08:46 - feel like it takes a little bit of work
08:48 - just to bring up that window there are
08:49 - some tools that uh
08:52 - help with this to make it like a one
08:53 - action thing hey i want a bug
08:55 - window
08:56 - there's a chrome extension called nim
08:58 - project called spec process another one
09:00 - called rocket just makes it kind of a
09:02 - single action uh to get that up and
09:05 - running really what they're doing is
09:07 - opening this url um
09:10 - we just need the devtools url with the
09:13 - websocket kind of hooked into it
09:16 - but because it's a kind of a fancy url
09:18 - you can't open it in normal ways so
09:20 - that's that's it's just kind of the
09:22 - under the covers
09:23 - all right
09:24 - i want to briefly touch on four kind of
09:26 - other approaches uh apart from those
09:29 - basics
09:31 - one situation you might find yourself in
09:33 - is uran node normally no flags no
09:36 - anything but you've reached a state and
09:37 - you're now like i really want to debug
09:39 - it profile i don't know you want to
09:41 - start inspecting it is it too late
09:45 - it's not too late no no you can do it
09:48 - process debug process and pass it just
09:50 - to process id as a as a number you can
09:52 - run this in a completely different uh
09:55 - node process and it'll just flip on
09:57 - debugging
09:58 - and your target
09:59 - really cool um that works
10:03 - if you want to do debugging and
10:07 - you're more of a terminal kind of person
10:09 - and you want like a gdb style interface
10:12 - you can use the existing cli debugger
10:14 - this has been a node for quite some time
10:16 - but the back end was recently redone to
10:19 - be sitting on the new implementation um
10:22 - but you just work with the script uh
10:24 - here on the command line with some short
10:26 - commands it's pretty great
10:28 - now another approach is via the devtools
10:30 - protocol now as you saw there's this
10:32 - websocket port and that just speaks json
10:35 - rpc with the
10:38 - devtools protocol this right here what
10:40 - we're looking at is a script that
10:43 - attaches to chrome or chrome headless
10:46 - and just captures a javascript profile
10:49 - just automatically
10:51 - if we wanted to take this script and
10:54 - have it run against node instead
10:58 - we just change the port uh to connect to
11:00 - node's debugging port otherwise
11:03 - the rest of it works um
11:06 - the entire devtools protocol that chrome
11:08 - uses is obviously bigger than the set of
11:11 - what node is using but there's some
11:13 - great overlap um
11:15 - around profiling debugging console and
11:17 - the runtime all this
11:19 - so you can do this over here over the
11:21 - websocket
11:23 - another approach is to use the new
11:25 - core inspector module that was added i
11:28 - think is new in eight um
11:30 - and here you just set up a session and
11:32 - you talk the same exact same protocol
11:34 - profiler enable start stop same thing as
11:36 - we were doing the last one but this is
11:38 - happening inside of your node process
11:42 - instead
11:44 - also a decent option
11:47 - with debugging out of the way i want to
11:48 - quickly touch on tracing
11:50 - because there's some cool stuff now
11:52 - tracing
11:53 - is a very powerful collection of tools
11:55 - on the chrome team we use this to
11:57 - understand what is happening in the
11:58 - browser this is a two seconds of loading
12:02 - a page on wikipedia
12:04 - and on chrome we use this to understand
12:07 - what is happening anything that's taking
12:08 - time we go to a trace that is the ground
12:11 - truth um and so much stuff is
12:14 - instrumented there and this is like
12:17 - the most basic looking thing it can get
12:19 - a lot more involved but we're going to
12:21 - skip over that
12:22 - traces are really really powerful and
12:24 - the great thing is now this whole
12:26 - capability is available in node it is
12:28 - still early days but this is how you can
12:30 - do it uh run with trace events enabled
12:33 - and after you run this it's gonna spit
12:36 - out a json file
12:38 - of the trace
12:39 - and you can open that up in chrome in
12:42 - about colon tracing just drag it in and
12:44 - you'll see something like this
12:46 - this is one that i captured with
12:48 - a node just the other day
12:50 - so there's a few things going on here
12:52 - and it gets really interesting in this
12:54 - area in the middle i'm not going to zoom
12:57 - in and explore it too much but i've
12:59 - selected this whole region and down at
13:02 - the bottom we see some of the results
13:05 - we have that we know how much time v8
13:08 - spent executing compiling parsing doing
13:11 - gc work uh total time self time and the
13:14 - on cpu time so some nice breakdown
13:16 - around the timings of what's happening
13:18 - on that thread and then above it is some
13:21 - really fascinating stuff and this is
13:22 - actually showing me here kind of a
13:24 - breakdown of where my latencies are
13:26 - between dns and tcp connection and the
13:28 - rest of the network request
13:31 - really helps in this case identify where
13:34 - the the certain latencies are
13:36 - i will point out that this aspect is
13:38 - sitting on top of the new async wrap
13:42 - implementation in node core
13:45 - and this part isn't yet in uh isn't yet
13:48 - landed in node there's a good looking
13:50 - pull request
13:51 - really good stuff um that when landed
13:54 - will enable this still
13:56 - the the kind of detail in here uh in the
13:59 - trace um it's uh
14:02 - there's a lot more opportunity so i'm
14:03 - really excited to see a continued
14:06 - investment in instrumentation and
14:07 - understanding all sorts of things and
14:10 - what's happening inside node like
14:11 - understanding when the event loop is
14:13 - doing work or whatever this is a great
14:15 - solution to
14:17 - instrumenting all that and
14:19 - building tools around it
14:21 - yes good a basic
14:23 - trace looks like that but there are some
14:25 - off by default categories which give you
14:27 - more detail at the cost of a little
14:29 - overhead uh this would be the magical
14:32 - incantation that turns on all those
14:34 - categories
14:35 - um
14:37 - yeah there you go
14:38 - so that's about going to wrap it up for
14:40 - me um one last thought i want to leave
14:43 - you with is just explore and think what
14:47 - is beyond the console law
14:50 - thank you guys very much

Cleaned transcript:

we're going to take a look at a little look at debugging and kind of just the state of debugging with node.js and to give you a little bit of context um i work on google chrome i i work on the chrome devtools but i've been invested in devtools and just generally tooling for a long time um i found this like recently 10 years ago i made this stunner right here a nice little like cheat sheet of keyboard shortcuts for our best friend firebug uh so good but you know like even then i was just really excited to understand what kind of capabilities tools uh offered us because i was like i can i can learn one more thing and i can be more productive save my time and save my stress and we now have some good tools we have one tool in particular that is you know our trusty friend go to console log we all use it we love it it's reliable it's everywhere uh you want to know what a value is hey console.log's got you back no problem so that's great um but you know while it is useful like console log debugging printf debugging there are more powerful capabilities so i wanted to touch on a few of those a year ago at google i o the chrome team introduced some of the work that we'd done to introduce the v8 inspector component into node bringing some new debugging capabilities uh to the node project uh we actually announced a pull request uh rather than like you know something shipping but hey you know it landed and and now it's now it's in there so that's fine um i'm going to quickly walk through kind of just the basics of how this works uh you have a little hello world script you can run it like that obviously um but you can run inspect how many people have used inspect or something good yes great okay do this return the debugger also dash x inspect will run it turn on the debugger and pause it on the very first statement of the script i find this is really useful with you know utilities other things where it's going to happen really fast and you want to break at the very beginning to make sure any sort of breakpoints are in place now when you run this uh you'll get some output that looks like this hey the debugger is on uh it's listening to a websocket and um here's some docs uh this is a little different than it was before in previous node versions you saw something like this a bit more text and a big long url that you felt compelled to like copy paste and it's kind of awkward anyways don't do that anymore it's a little bit better and so this is kind of a good approach to take so once you've turned things on uh head over to chrome new tab type in about inspect it'll bring you to a page that looks a little like this um and these are some inspectable targets uh you'll see your the node script mentioned right here but click on this guy right here the dedicated dev tools for node this is going to pop up devtools it's just for your node now another approach to do the exact same thing is if chrome's open and a dev tools window's already open and then you go and you take your script and you start inspecting it uh in dev tools now um and this is new as of uh it's shipped to chrome stable as of this week uh right up in the top left corner we'll add a nice bright green shiny node.js icon click that guy and that'll bring up the dedicated window for you so um just you know dedicated window obviously it has less tabs than your typical chrome dev tools because we're just dealing with node and its capabilities but the dedicated window is great because if you're working with no if you're working with your application then you make some changes so your control scene your application and then you rerun it this dedicated window is going to automatically reconnect to the node that is now there so it's just there so it's going to automatically reconnect whenever there's a new one all right so those are just kind of the basics um but i want to show a little bit of how this works uh in action so we have a little web server app um and when i run it yeah okay yep internal server error great so we do have some problems the console is telling me problems great uh over in chrome inspect i'm going to open this guy up okay so this is the app uh 40 lines of stuff internal server error is right here and so one thing that i know happens uh it's a little you know it's it's kind of confusing so we're trying to do this we catch so we got some exception and then at this point we emit an air event uh that actually gets heard up here when we're listening up on this guy and then this arrow function is emitting its own air event passing along uh the data now i really want to know what this exception is right here because i'm not getting it out on the console but one thing that i can do is i'm going to place a break point well i don't actually want it here i want to break inside of this arrow function so i place it this guy but then turn on this column break point right here so now all right now we go over here we reload and i paused inside of the arrow function and you can see data is inspectable and so we're paused inside this guy it's really cool works phenomenally well with arrow functions with asynchronous code it's super useful now i this guy comes down here where i say problem and i'm losing the details about this exception somewhere between there um i don't know where exactly i might start out with like a step in see what happens but i step in on emit i'm inside of uh you know node's core events module which honestly i like i don't want to walk through this so i'm gonna right click and i'm gonna black box this guy um and with black boxing it's just saying hey you probably you know uh you're just gonna avoid stepping through this so we can see now in the call sack it says that a few call frames are completely black boxed and so now when i step in we step directly to my own uh event handler for the exact same thing so just bypassing all that um right well we got that under control and e is telling us uh well this string we still don't have our exception open up the console let's just be like this arguments yep there it is okay there are two arguments right okay that string and then the actual exception so i was just being silly so what we can do just take this guy control d for multiple selection comma spread good and um i'm gonna hit control s uh control s is a live edit it's kind of like a hot module reload but at the at the v8 level and so now uh when i refresh the same guy i'm so paused i'm still paused hey now when i refresh yeah there we go okay so i was just getting the logs before and now yes the actual exception made its way through nice thing here is i didn't have to like restart node the live edit meant that i'm able to just keep that running make some changes and then see what happens all right so thank you i'll show you just a few things here column break points black boxing live edit all this good stuff that's been available when you're debugging chrome now all available when you're debugging uh with node as well all right bring it back to these guys so um if you've done this before and you feel like it takes a little bit of work just to bring up that window there are some tools that uh help with this to make it like a one action thing hey i want a bug window there's a chrome extension called nim project called spec process another one called rocket just makes it kind of a single action uh to get that up and running really what they're doing is opening this url um we just need the devtools url with the websocket kind of hooked into it but because it's a kind of a fancy url you can't open it in normal ways so that's that's it's just kind of the under the covers all right i want to briefly touch on four kind of other approaches uh apart from those basics one situation you might find yourself in is uran node normally no flags no anything but you've reached a state and you're now like i really want to debug it profile i don't know you want to start inspecting it is it too late it's not too late no no you can do it process debug process and pass it just to process id as a as a number you can run this in a completely different uh node process and it'll just flip on debugging and your target really cool um that works if you want to do debugging and you're more of a terminal kind of person and you want like a gdb style interface you can use the existing cli debugger this has been a node for quite some time but the back end was recently redone to be sitting on the new implementation um but you just work with the script uh here on the command line with some short commands it's pretty great now another approach is via the devtools protocol now as you saw there's this websocket port and that just speaks json rpc with the devtools protocol this right here what we're looking at is a script that attaches to chrome or chrome headless and just captures a javascript profile just automatically if we wanted to take this script and have it run against node instead we just change the port uh to connect to node's debugging port otherwise the rest of it works um the entire devtools protocol that chrome uses is obviously bigger than the set of what node is using but there's some great overlap um around profiling debugging console and the runtime all this so you can do this over here over the websocket another approach is to use the new core inspector module that was added i think is new in eight um and here you just set up a session and you talk the same exact same protocol profiler enable start stop same thing as we were doing the last one but this is happening inside of your node process instead also a decent option with debugging out of the way i want to quickly touch on tracing because there's some cool stuff now tracing is a very powerful collection of tools on the chrome team we use this to understand what is happening in the browser this is a two seconds of loading a page on wikipedia and on chrome we use this to understand what is happening anything that's taking time we go to a trace that is the ground truth um and so much stuff is instrumented there and this is like the most basic looking thing it can get a lot more involved but we're going to skip over that traces are really really powerful and the great thing is now this whole capability is available in node it is still early days but this is how you can do it uh run with trace events enabled and after you run this it's gonna spit out a json file of the trace and you can open that up in chrome in about colon tracing just drag it in and you'll see something like this this is one that i captured with a node just the other day so there's a few things going on here and it gets really interesting in this area in the middle i'm not going to zoom in and explore it too much but i've selected this whole region and down at the bottom we see some of the results we have that we know how much time v8 spent executing compiling parsing doing gc work uh total time self time and the on cpu time so some nice breakdown around the timings of what's happening on that thread and then above it is some really fascinating stuff and this is actually showing me here kind of a breakdown of where my latencies are between dns and tcp connection and the rest of the network request really helps in this case identify where the the certain latencies are i will point out that this aspect is sitting on top of the new async wrap implementation in node core and this part isn't yet in uh isn't yet landed in node there's a good looking pull request really good stuff um that when landed will enable this still the the kind of detail in here uh in the trace um it's uh there's a lot more opportunity so i'm really excited to see a continued investment in instrumentation and understanding all sorts of things and what's happening inside node like understanding when the event loop is doing work or whatever this is a great solution to instrumenting all that and building tools around it yes good a basic trace looks like that but there are some off by default categories which give you more detail at the cost of a little overhead uh this would be the magical incantation that turns on all those categories um yeah there you go so that's about going to wrap it up for me um one last thought i want to leave you with is just explore and think what is beyond the console law thank you guys very much
