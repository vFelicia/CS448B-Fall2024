With timestamps:

00:00 - hey what's up welcome everybody so in
00:02 - this video we are going to build a chat
00:05 - application using vue.js and firebase so
00:08 - the main goal of this video is to help
00:10 - you get started with firebase
00:13 - especially firestore
00:15 - so you can use that as uh your backend
00:19 - for your view application
00:21 - all right so let's get started by
00:23 - creating new view project so
00:25 - uh we need to create a new project using
00:28 - view cli so
00:30 - in your system view cli should be
00:32 - installed
00:35 - so view create
00:39 - and name a project i will call it
00:42 - youtube
00:44 - all right yt firebase
00:48 - view
00:49 - chat
00:57 - so we'll manually select features
01:01 - so you might not see this first option
01:04 - so we'll need ah
01:07 - okay we'll need this router
01:09 - just
01:10 - hit 4
01:12 - in your keyboard
01:15 - this is in food number and we'll need
01:17 - few x
01:20 - we don't need linter
01:23 - all right so that's it
01:25 - hit enter
01:27 - use history mode for router uh okay yes
01:32 - why did you
01:33 - config for
01:35 - in yeah in dedicated config files
01:38 - save this as a preset for feature uh no
01:42 - so it will create a new view project so
01:45 - if you are new to view uh you can go to
01:47 - viewcasts.com to learn basic of view
01:50 - okay so once it got installed let's cd
01:53 - into our just created project
01:58 - and
01:59 - then
02:01 - we need to run npm run serve
02:05 - yeah while it is compiling let's open up
02:08 - new tab
02:11 - and we'll open the project in sublime
02:15 - or you can use vs code
02:17 - so it got
02:19 - compiled and boot up this server at this
02:21 - location control click
02:24 - to go to and let's see yeah so this is
02:27 - the default application
02:30 - with view router it can go to home about
02:34 - all right so um let's go to sublime and
02:38 - yeah so this is our project structure we
02:41 - got uh main component here
02:44 - and route store and main.js
02:48 - we got views over here and
02:51 - necessary components over here so this
02:53 - is the structure
02:54 - which comes with uh view template
02:58 - so now what we'll do is we'll create a
03:01 - front end for our chat application
03:04 - so instead of creating that
03:07 - i will
03:09 - i will use our default template
03:11 - available at this
03:13 - location
03:15 - yeah
03:16 - so bootsnip.com you can get a different
03:21 - template made on bootstrap
03:24 - here
03:25 - so i will grab the html from here
03:30 - i will create a new view component
03:33 - so you can you can make on this home or
03:36 - i'll create a new
03:37 - file
03:39 - i will call it private
03:42 - chat
03:43 - dot view
03:44 - so this is over here
03:47 - all right
03:50 - i'll copy some code from here to there
03:55 - all right
03:57 - and we need to use this but we we don't
04:01 - need everything we just need containers
04:03 - so
04:04 - i'll
04:07 - just copy the container into my newly
04:09 - created
04:11 - chat component
04:17 - paste it there all right
04:21 - so our private chat component is ready
04:26 - we don't need name
04:29 - it's default
04:31 - all right
04:32 - so once private chat component is ready
04:35 - here we go to router.js
04:38 - and
04:39 - then we import
04:41 - this newly created component
04:44 - named private chat
04:48 - and we will
04:50 - so we'll replace home with our private
04:52 - set component
04:54 - all right
04:58 - so whenever you hit save you will get
05:01 - updated code over here
05:05 - yeah so currently we have no bootstrap 3
05:08 - and we have sorry bootstrap 4 and we
05:11 - haven't copied css
05:14 - yet so let's copy them as well
05:16 - so ctrl a ctrl c
05:22 - into
05:24 - so we need to create a styles as well
05:26 - style
05:31 - and scoped for this component only
05:36 - and just paste it
05:43 - yeah
05:45 - better
05:47 - yeah also we need to import a bootstrap
05:50 - for
05:53 - so we we just need css
05:57 - we don't need this so i'll copy
06:00 - this
06:04 - into our
06:08 - index.html
06:10 - [Music]
06:12 - so index.html is inside public
06:16 - and here you need to
06:19 - uh
06:20 - your bootstrap css so i will paste it
06:24 - over here
06:27 - all right
06:30 - all right so now it looks better
06:34 - all right so now that our front end
06:36 - layout is in place now we need to make
06:39 - it dynamic so
06:41 - whenever we
06:42 - type something here and hit save we need
06:45 - to save this data somewhere
06:48 - so in order to do that we need to set up
06:51 - our firebase
06:53 - so
06:54 - let's get started with firebase if you
06:56 - go to firebase.google.com
06:59 - uh here if you hit
07:03 - get started it will give you demo and
07:05 - all
07:14 - so it will take you to your firebase
07:16 - console
07:18 - and here you need to create uh add a new
07:20 - project
07:22 - so
07:23 - so i have couple of
07:24 - but i'll create new for this one
07:28 - so you can name it anything you want i
07:30 - will name it
07:32 - view
07:36 - file store
07:38 - chat
07:41 - okay
07:42 - so i accept
07:45 - create project
07:47 - all right so
07:49 - let's hit continue
07:51 - and it will take us to
07:55 - the dashboard related to this project
07:58 - all right so first step is to so it as
08:00 - it is saying get started by adding
08:02 - firebase to your app so we need to add
08:05 - firebase to our app so there are a
08:07 - couple of options for ios android and
08:10 - for web
08:11 - so since we are developing for web if
08:14 - you hit this and
08:16 - you will get
08:18 - so there are a couple of options you can
08:20 - import like this or you can use
08:24 - uh doing from uh using npm
08:28 - so if you go to this uh get started with
08:30 - firebase for web app
08:32 - you get this information so
08:35 - we will install uh using npm so
08:38 - let's go to our
08:41 - terminal
08:43 - install firebase
08:45 - and
08:49 - all right so once firebase is installed
08:52 - let's go back to
08:55 - our project and
08:57 - yeah this time we'll just copy uh
09:01 - sorry here
09:03 - so just copy it into your
09:13 - into your main.js
09:15 - and here
09:19 - we
09:20 - will have this config variable with all
09:22 - our configuration and then
09:24 - we'll initialize it
09:26 - into firebase so before that we need to
09:29 - import firebase right
09:33 - import
09:34 - firebase
09:36 - from
09:39 - firebase all right
09:43 - so now firebase is initialized and
09:47 - next step is to
09:51 - so since we are using the database
09:55 - so we'll be using
09:57 - this database
09:59 - so there are two option
10:02 - cloud file store and real-time
10:04 - database
10:06 - yeah these two options
10:08 - so cloud files five stories in beta uh
10:10 - it is new so we'll use this one
10:14 - fire store so start in test mode
10:19 - enable
10:21 - all right so our file store
10:24 - database created
10:27 - so if you want you can go to docs and
10:31 - get started with it
10:33 - get started for web
10:39 - and over here
10:42 - cloud file store
10:44 - get started
10:48 - so it will uh give you step by step
10:51 - information
10:53 - so you don't need to do that we already
10:55 - installed firebase
10:57 - we require uh okay we require firebase
11:02 - so we also let's record this as well
11:08 - and then we need to initial we already
11:10 - initialized this
11:13 - and let's add these two as well
11:18 - so we initialized that app and
11:22 - so we created this tv
11:27 - and then we uh do this so
11:30 - otherwise you will get some uh
11:33 - warning in console so this will
11:35 - disable them
11:37 - so we created this variable db and we'll
11:40 - use this variable to access our database
11:43 - all right so
11:45 - we'll be uh using this tv variable from
11:48 - our other component you can import that
11:50 - there or
11:52 - you can assign
11:54 - this to window variables so that it will
11:56 - be accessible from anywhere
11:58 - yeah you can do that
12:02 - all right so once that is done our
12:04 - firebase setup is complete uh we don't
12:07 - need to do anything now our next step is
12:10 - to add data to our database when user
12:13 - enters something and hit enter
12:17 - okay so in order to add data to our
12:20 - database
12:21 - what we'll do is we have
12:24 - this
12:26 - simple input field
12:28 - and then we have this button
12:31 - all right so this is our form and we
12:34 - need to bind it to
12:39 - messes
12:42 - and
12:45 - we need to create that over here
12:49 - data
12:52 - return
12:54 - object and message by default will be
12:57 - null
12:58 - so whenever user uh type something it
13:00 - will
13:01 - have some value and then we'll submit
13:04 - that
13:05 - so we'll submit on enter so on key up
13:10 - dot enter
13:12 - we'll do save message and we'll create
13:16 - this method say message
13:23 - so we'll create that method over here
13:27 - methods
13:33 - save message
13:37 - all right so uh the way we create uh
13:39 - data in our database is uh in firestore
13:43 - is
13:44 - so let's let's comment it save
13:47 - to
13:48 - file store
13:51 - and here we need to send a request to
13:54 - file store to save our data
13:56 - so if you go to getting started section
14:00 - you'll have this so
14:03 - you can save it like db then collection
14:05 - name where you want to save and then
14:07 - call add method all right
14:10 - so and
14:13 - the parameter that you want to save
14:17 - and you'll get these
14:20 - callback
14:24 - all right so let's do that
14:26 - so let's do db dot
14:28 - collection
14:30 - and then collection name so we'll be
14:32 - storing those messages in chat
14:35 - so we'll create the so it will
14:37 - automatically create we just need to
14:38 - specify here
14:40 - and then we'll call add method and we
14:43 - need to supply object
14:46 - so we'll save like this key value here
14:49 - message is this dot message
14:52 - so this dot message is this message over
14:56 - here right so that's it so if you want
14:59 - to uh save anything any other uh
15:02 - parameter there you can subscribe here
15:05 - anything
15:06 - like so all right
15:10 - so for now let's say message uh
15:13 - let's go back to browser
15:18 - so here whenever
15:20 - someone
15:22 - alright so
15:24 - this is first message
15:27 - and hit
15:28 - enter
15:31 - so let's go to
15:33 - uh
15:34 - file store let's refresh
15:39 - so as you can see here it uh
15:41 - successfully created a new message
15:44 - so it created a collection named set
15:46 - that we specified it here and then
15:50 - it created a field message
15:52 - and unlike so so document is like a
15:55 - unique id it automatically generate this
15:57 - unique id
15:59 - so you can also specify if you want but
16:01 - it will if you leave a blank it will
16:04 - just
16:05 - automatically
16:08 - so this is our first message
16:14 - so after i enter message and it just
16:16 - persists here
16:18 - we need to clear this field
16:20 - let's do that
16:22 - so after the message is done let's make
16:25 - this dot
16:27 - message equals to
16:29 - null
16:30 - all right
16:31 - all right so this is the saving part uh
16:35 - saving
16:36 - new message
16:40 - yeah saving new messages
16:42 - once uh we saved it we need to pull the
16:45 - pull all messages and display it here so
16:47 - instead of showing this dummy
16:51 - data let's pull in from firebase
16:54 - so uh to
16:56 - get data you just need to
16:59 - reference the collection and then loop
17:00 - through each of them and display it here
17:03 - like so all right so let's do that so we
17:06 - will do that on our created
17:10 - life cycle so whenever this
17:12 - component created
17:15 - we will
17:16 - create will fetch all messages this dot
17:20 - fetch
17:22 - messages
17:23 - let's create that method
17:25 - fast messages and
17:28 - we'll face using db and then collection
17:32 - name
17:33 - so we are facing from the chat
17:35 - collection
17:37 - and then we need to do get
17:41 - so this will get all messages
17:44 - and after getting messages then what
17:47 - we'll do is so you can name it anywhere
17:50 - query snapshot
17:52 - and then we'll loop through it
17:55 - for each
17:58 - data
17:59 - or you can call it doc so basically it
18:02 - will give us
18:03 - all the talk over here
18:07 - like these docs then we loop through
18:09 - this doc and then get
18:11 - data in the dock
18:14 - so that is how it works
18:16 - so first we'll create a
18:18 - local
18:19 - all messages
18:23 - variable empty and then we'll push
18:26 - data there all messages start push
18:30 - talk dot data so this will be the object
18:34 - so this object
18:35 - so it will return exactly this object
18:41 - and we'll push it to all messages so
18:43 - after this loop is done we'll assign
18:47 - this dot
18:49 - messages
18:51 - equals to
18:52 - all messages
18:54 - so we need to create this uh messages
18:57 - data here
18:58 - property here
19:00 - so message is all messages so this will
19:03 - be the empty array
19:04 - and after it is done it will have a
19:08 - array of object of all messages
19:10 - all right so that should work
19:13 - let's go to
19:15 - browser
19:15 - [Music]
19:17 - open up inspector
19:19 - and on view tab
19:21 - let's go to private set or
19:27 - uh yeah so this is the component yeah
19:30 - see how it shows anonymous component
19:33 - so i think if you keep a name
19:37 - property here it will show the name
19:40 - let's keep it private chat name save it
19:45 - and there we go
19:47 - so as you can see the message is null
19:50 - and messages are there we got to
19:53 - see
19:54 - this data is a method
19:58 - so i was doing mistake my bad sorry
20:00 - about that yeah so now we get object of
20:03 - all messages
20:06 - as i array so now we can easily loop
20:08 - through it and display it here so let's
20:11 - do that next
20:13 - go to
20:14 - our
20:18 - our private set component and
20:20 - here we got all dummy messages let's get
20:23 - rid of them
20:25 - history incoming message outgoing
20:33 - let's get rid of it
20:37 - so let's give only one and then we'll
20:40 - loop through
20:41 - all right let's look through
20:43 - it
20:47 - v4
20:49 - message in
20:51 - messages
20:54 - and
20:55 - here we'll display the message
21:00 - so we'll have access to uh message
21:02 - object so this will be the object and
21:04 - inside this object we have message
21:06 - property
21:08 - so message dot message
21:11 - that should work
21:14 - let's get rid of this image let's keep
21:16 - it minimal
21:20 - yeah so we we can see all messages
21:23 - here
21:25 - uh new one
21:29 - so currently it is not real time we'll
21:31 - make it in a moment we need to refresh
21:33 - the page and we should see
21:36 - yeah new one over here
21:41 - so as you can see it is not ordering by
21:44 - the time recent time
21:46 - so
21:48 - we need to order that by time as well
21:53 - so let's handle that first so uh
21:56 - in order to order them by time we need
21:58 - to
21:59 - so while fetching we need to order by
22:02 - but the problem here is
22:05 - we are not saving the time when we uh
22:08 - created this message so here we are just
22:10 - saving message
22:11 - let's save a new property as well
22:15 - named created
22:17 - at
22:19 - and this will be the new date
22:23 - so new date will be the date of creation
22:26 - like it will be the current date like
22:28 - now yeah so now now
22:31 - if we create a new message we'll have
22:33 - this created at
22:35 - uh property there and
22:37 - before getting we can do
22:39 - order by
22:41 - order by
22:44 - created at all right
22:47 - but
22:48 - you know what we need to clear up our
22:51 - database to start up because
22:54 - that will throw error because we have no
22:56 - created ad yet so let's clear everything
22:59 - and start from scratch
23:02 - refresh
23:04 - so
23:05 - brand new message
23:10 - refresh
23:14 - yeah
23:17 - hi man
23:19 - so there we go so hyman is only
23:23 - more recent
23:29 - all right so at least here it is working
23:32 - so now we need to make it real time
23:35 - because we have to hit enter and refresh
23:37 - every time to see new messages
23:40 - so to make it real time instead of doing
23:43 - this so here we are facing message right
23:45 - so
23:46 - instead of doing the uh get what we need
23:48 - to do is uh
23:51 - we need to
23:52 - do on snapshot
23:55 - so it will current a constant deletion
23:57 - for new changes
23:59 - so yeah we don't don't need to do then
24:03 - snap shot
24:06 - all right so on snapchat
24:08 - we'll have exact same thing
24:11 - and we will be doing exact same thing
24:13 - like previous
24:16 - so now this will make it real time let's
24:18 - test it
24:20 - refresh
24:21 - to make everything clear
24:24 - all right so uh
24:26 - real time
24:30 - there we go
24:32 - more messages
24:36 - all right so it is working
24:39 - so we see how we can face the message on
24:42 - real time
24:43 - so next thing uh what we need to do is
24:46 - uh we need
24:48 - the name of user who created
24:51 - the message right so that way we can
24:53 - identify who created the message
24:55 - so for that we need to make the
24:57 - authentication system so
25:00 - luckily we already firebase
25:03 - got authentication we don't need to do
25:05 - anything much
25:07 - so
25:08 - now we need to
25:09 - make the login system
25:12 - so that a user
25:14 - on the user can only access this space
25:16 - after logging in right so
25:19 - on the authenticated user will access
25:21 - and then create message then we'll store
25:24 - who created message in our
25:26 - collection and then we'll display it
25:29 - here
25:31 - all right so now let's build uh
25:33 - authentication system
25:35 - so for that let's do
25:38 - let's first create a login component
25:41 - so what we'll do here is uh
25:46 - so if you go to authentication there are
25:47 - different uh
25:49 - method for authentication we have a
25:51 - different
25:52 - sign-in method available like
25:55 - so let's go to authentication and then
25:57 - hit setup sign in method
26:00 - i'll show you so these are all options
26:02 - available to us
26:04 - we can do using email password form
26:07 - google
26:09 - and like this
26:11 - so uh
26:12 - so now most of the people have google
26:15 - account so
26:16 - i will make it simple we'll
26:18 - enable
26:19 - the google sign-in method
26:22 - and then we'll allow user to sign in
26:24 - using google
26:25 - so just enable and save it
26:28 - so now you can see google enabled so if
26:30 - you want to email password you can do
26:32 - that as well all right so under
26:34 - authentication so you can go through get
26:37 - started if you want to do email and
26:39 - password and setup login but in this
26:41 - video we'll be using google sign-in
26:43 - method so let's go to google sign-in
26:46 - and
26:49 - we will
26:50 - do exact same thing like first we need
26:52 - to initialize the provider
26:54 - so we'll put this code on our login
26:57 - component so before that let's create a
26:59 - login component
27:01 - so i'll duplicate this home
27:04 - or let's create a new file
27:07 - login dot view
27:10 - will have simple template
27:12 - and let's uh let's put it
27:15 - please login
27:17 - to
27:18 - continue
27:20 - login with your
27:22 - google
27:24 - account to continue
27:31 - all right so
27:33 - and we'll create here a button
27:36 - very simple
27:38 - login with google
27:41 - and when someone clicks on this button
27:45 - we'll undo we'll call this login method
27:48 - which will be creating
27:50 - over here
28:00 - methods and then method name will be
28:03 - login
28:05 - so uh here
28:08 - so first we need to initialize the uh
28:10 - provider
28:14 - like so
28:21 - so provider will be firebase auth so
28:24 - before that since we are using this
28:25 - firebase we need to import the firebase
28:27 - here
28:29 - import
28:31 - firebase from
28:34 - firebase
28:35 - and then there is uh this optional step
28:38 - if you want to do you can do
28:42 - like adding school read only
28:45 - so this is optional uh we won't do that
28:48 - we want to skip that and here comes the
28:51 - main step
28:52 - so uh now we need to
28:55 - call this sign in with pop up
28:59 - and we'll pass the provider that we just
29:00 - initialized and it will
29:02 - open the pop-up and ask you and do
29:05 - everything for you
29:07 - so
29:08 - yeah so this is quite easy
29:12 - so
29:13 - we'll copy this code into our component
29:18 - below here
29:21 - and i will make it look a bit
29:24 - nicer so sign in with pop and then after
29:29 - it results
29:30 - returns result
29:33 - we will then
29:35 - do this
29:37 - token if we need token
29:40 - then we will
29:42 - yeah so
29:44 - currently we don't need to do
29:46 - anything like so
29:49 - and just leave that so uh this bit of
29:52 - code will execute on success
29:56 - and this bit of code on failure
30:01 - so
30:02 - let's use es6 syntax result
30:07 - lecture
30:08 - and then what what we'll do here is
30:11 - after the successful login
30:13 - we will redirect user to the login sorry
30:17 - the main component
30:19 - all right
30:20 - so what we'll do here is
30:23 - this dot router
30:26 - dot push
30:28 - will push it to home component
30:31 - so now our login code is in place
30:35 - next we need to create this route right
30:37 - so otherwise
30:39 - how can we access that
30:42 - so
30:43 - uh login let's import that login as well
30:49 - login and then we'll create a new
30:53 - route just duplicate it and
30:56 - i'll name it
30:58 - login
31:00 - and it will
31:02 - be login
31:06 - there we go
31:10 - so
31:11 - that is done
31:12 - let's go to our application and let's
31:15 - see
31:16 - what we can improve
31:18 - so
31:20 - log in
31:23 - yeah please log in with google account
31:25 - to continue
31:26 - totally fine
31:30 - let's hit login with google
31:32 - so ask us to sign in
31:35 - so since it was running on http and
31:38 - localhost it will ask you to
31:41 - give you this warning just advance
31:44 - and go to the firebase app
31:48 - and allow
31:50 - yeah we trust it because it is our own
31:52 - application
31:54 - nothing harmful going on
31:58 - all right so it take uh took us to
32:01 - home component all right
32:04 - so in this in this window we are logged
32:06 - in and we can access so we need to fix
32:08 - one more thing so
32:10 - for example let's open up this on a
32:13 - guest window where we are not logged in
32:15 - and if we try to go to our home page
32:19 - it's running a lot right because we are
32:21 - not not authenticated we it need to uh
32:24 - take us to the login component
32:27 - so that we have to login in order to
32:31 - come here
32:33 - so
32:34 - to restrict the unauthenticated user
32:37 - from accessing the private set component
32:39 - we need to do
32:41 - we need to create here before route
32:44 - enter
32:46 - so the router method
32:49 - so below created we'll create that
32:55 - so view router allows this before route
32:58 - enter
33:01 - before route
33:04 - enter method
33:07 - with this so you can find this on
33:10 - documentation for reference
33:14 - so it will just hook up before
33:16 - everything like even even before create
33:19 - it it will get executed
33:23 - and here we'll check if user is
33:25 - authenticated or not
33:30 - so the way we do it is like
33:37 - so uh next
33:40 - vm
33:42 - so the vm is like this
33:45 - so we do not have access to this in this
33:48 - bit of block of code because
33:51 - this is even get initialized before this
33:54 - initialized
33:55 - and so we access
33:57 - this variable
33:59 - or even the router
34:02 - from using vm
34:04 - so uh next will be executed
34:08 - after uh we return next from uh here so
34:12 - for example
34:13 - um
34:14 - let's see
34:16 - let me give you example by doing it
34:19 - so uh we need to check if uh we have
34:24 - authenticated user or not so the way we
34:26 - do in firebase is like this
34:29 - firebase auth
34:31 - on
34:32 - auth state
34:35 - changed
34:38 - so
34:39 - this will give us user
34:42 - if user is authenticated of course
34:46 - so this is the method on all the state
34:48 - change it will uh give us
34:51 - so it will just tell us both if users
34:53 - logged in or if user loggers basically
34:56 - if auth changes
34:58 - like
35:00 - so for example if there is user so if it
35:03 - returns a user
35:05 - we will uh will tell router to go to the
35:09 - next request
35:10 - so it is just like middleware
35:12 - in laravel if you are familiar to it
35:15 - so if there is user that means user is
35:18 - authenticated we will go to next request
35:20 - which is it will allow us to move next
35:25 - else
35:26 - if there is no user
35:28 - then we will uh go to router so this
35:32 - router
35:34 - dot push
35:37 - to login component
35:41 - so as i have already mentioned we we
35:44 - have no access to
35:46 - this there that's why we use vm
35:48 - so basically this view router allows
35:50 - this kind of method to access the
35:53 - this from here
35:56 - there we go so now uh we are protecting
35:59 - from un
36:00 - authorized access
36:02 - so let's go to our guest window and
36:05 - let's try to access it once more
36:10 - uh looks like we missed something
36:16 - yeah so
36:17 - we need to import this firebase right so
36:20 - we missed that
36:24 - all right so once that is done
36:29 - let's press
36:31 - yeah
36:32 - so whenever we try to access the home
36:34 - page
36:35 - it is taking us to
36:37 - this login component
36:41 - cool
36:43 - so after we login we should get to
36:46 - that so we already tested that
36:48 - no need to test it now
36:51 - uh we now we need to do what we need to
36:53 - do is we need to store the
36:56 - authenticated user in our variable
36:59 - uh named yeah let's call it
37:04 - auth user
37:06 - yeah auth user is fine so
37:09 - by default it will be the empty object
37:13 - and
37:15 - so whenever the component is created so
37:17 - after component created we will assign
37:19 - that
37:21 - here
37:22 - so before fetching message so here uh
37:25 - firebase dot
37:28 - auth
37:32 - so if user
37:36 - then we can do this dot user uh sorry
37:39 - this dot auth user
37:42 - equals to user
37:45 - all right so that's it too
37:49 - else will make this dot auth user
37:54 - and also for example if user logged out
37:58 - this will fire up again fire up because
38:00 - we are constantly listening for autistic
38:02 - changed
38:03 - and then we'll have access to
38:05 - sorry we'll make the art user null
38:08 - so we need to store the information
38:11 - about who created message
38:14 - as well so
38:16 - let's do that here
38:19 - so i will call it author or message okay
38:22 - author so this dot auth user
38:26 - dot
38:27 - display
38:28 - name
38:30 - so by the way uh this is the format
38:34 - so auth user contains uh this display
38:37 - name
38:39 - uid so if you console log you can see
38:42 - that
38:44 - or i learned it from
38:46 - documentation
38:49 - yeah so like here
38:51 - so we got display name user email email
38:55 - verified so these all are options
38:58 - that are get by default
39:01 - all right so now that we are saving all
39:04 - necessary information about message so
39:06 - like
39:07 - message content
39:09 - uh author of message and then created it
39:12 - so
39:13 - now what we can do here is
39:16 - we can display
39:20 - the author or message
39:23 - like
39:25 - so
39:27 - message dot author
39:33 - also we can so
39:40 - message start
39:41 - created
39:43 - at
39:44 - [Music]
39:47 - but our uh yeah so this is the whole
39:50 - object
39:51 - yeah so we'll use other moments to make
39:55 - it look nicer in a moment
39:57 - for now let's get rid of this
40:00 - and also let's
40:02 - remove delete all documents
40:06 - we'll start over with
40:08 - author name as well
40:12 - okay
40:13 - hi
40:15 - hello
40:16 - there we go
40:18 - so if you log in with another user in
40:21 - other window we can get that so let's
40:24 - test it
40:26 - all right so i'm logged in with two
40:27 - different user over here and here let's
40:30 - set
40:34 - hey hit this
40:37 - there we go
40:40 - hi web tab
40:44 - there we go
40:51 - i can
40:53 - i can listen you
40:57 - yeah
40:59 - all right so let's add some special
41:01 - class depending on
41:03 - who created the message to make it look
41:06 - a bit
41:07 - nice
41:09 - so
41:11 - what we'll do over here is so while
41:14 - looping through all messages we need to
41:16 - find out
41:18 - who created so if
41:20 - uh the user who logged in has created a
41:23 - message we'll apply the different style
41:25 - to that
41:26 - otherwise we'll apply a different style
41:29 - all right so um here
41:32 - we are looping through all messages and
41:35 - we are applying this class so
41:37 - uh we will toggle this class
41:40 - so to do that uh vs allow us to
41:43 - dynamically apply the class
41:46 - so the way we do that is
41:51 - like so
41:52 - so we'll bind the class
41:55 - by keeping the dot
41:59 - and
42:01 - and here we'll
42:02 - supply this
42:04 - array
42:05 - and we'll use the ternary operator here
42:07 - so
42:08 - for example if
42:10 - message dot author
42:15 - is equals to uh
42:17 - user dot display name so
42:20 - so currently users display name in
42:23 - author message
42:25 - then we'll apply a one class
42:29 - sorry one class
42:34 - so then it will be the send message
42:37 - right so we'll apply this class
42:39 - otherwise we'll apply receipt
42:43 - message class
42:45 - so this is how we toggle class and
42:49 - yeah
42:50 - so now we need to write
42:52 - css for these two class
42:54 - over here to make it look the way we
42:57 - want
42:59 - so we
43:01 - will make
43:03 - sent message look one way and
43:06 - other look another way
43:08 - so we'll not go through styles
43:12 - yeah so i just applied different color
43:14 - for them
43:16 - now let's see how it looks
43:22 - delete art users sorry about that
43:25 - so message dot author should match auth
43:28 - user
43:30 - yeah like so
43:31 - so as you can see if new messages come
43:33 - it is not scrolling all the way down
43:35 - right so
43:37 - we need to fix this scrolling issue
43:39 - so to do uh to fix scrolling it is quite
43:43 - simple
43:44 - so after receiving new message we need
43:47 - to scroll to all the way to bottom
43:50 - so to scroll to bottom we need to create
43:53 - a new method scroll to bottom
43:58 - let's create a new method over here
44:01 - scroll to bottom
44:03 - yeah
44:04 - so uh
44:06 - yeah i defined a simple uh variable box
44:09 - and we
44:10 - are getting the box which contains all
44:13 - message
44:14 - which is this message history
44:17 - all right so it contains all the
44:18 - messages
44:20 - and we are just scrolling to top
44:24 - all the way down
44:26 - like box story scroll light
44:28 - and we need to call this scroll to
44:30 - bottom method after someone sent the
44:33 - message right so
44:35 - after someone add the message we'll have
44:38 - this 10
44:41 - so after someone successfully send the
44:42 - message we'll distort scroll
44:47 - to bottom
44:48 - we'll call this method so this will fix
44:51 - when someone types and hit enter
44:53 - also uh we need to call this method
44:56 - after uh receiving message right so
44:58 - after we receive message we need to call
45:01 - that as well
45:06 - so here we are
45:08 - doing that
45:09 - and let's do set timer so we'll call
45:12 - this method after some time
45:15 - because
45:23 - because otherwise it takes some time to
45:25 - render the data
45:27 - so without rendering it will not scroll
45:30 - to bottom right so we'll make one
45:32 - one second delay
45:35 - so if you call this is scroll to bottom
45:37 - bottom without timeout so these all
45:39 - messes
45:42 - uh won't get rendered
45:44 - so this will call before this all get
45:46 - rendered
45:49 - so this is quick fix for that
45:51 - yeah so now it should scroll to bottom
45:58 - there we go
45:59 - so let's try
46:02 - i am typing
46:04 - some message
46:08 - there we go
46:10 - there we go
46:12 - without doing anything
46:15 - yeah so this is a simple chat
46:16 - application hope you learned something
46:18 - about firebase or file store how to use
46:22 - that to build simple application

Cleaned transcript:

hey what's up welcome everybody so in this video we are going to build a chat application using vue.js and firebase so the main goal of this video is to help you get started with firebase especially firestore so you can use that as uh your backend for your view application all right so let's get started by creating new view project so uh we need to create a new project using view cli so in your system view cli should be installed so view create and name a project i will call it youtube all right yt firebase view chat so we'll manually select features so you might not see this first option so we'll need ah okay we'll need this router just hit 4 in your keyboard this is in food number and we'll need few x we don't need linter all right so that's it hit enter use history mode for router uh okay yes why did you config for in yeah in dedicated config files save this as a preset for feature uh no so it will create a new view project so if you are new to view uh you can go to viewcasts.com to learn basic of view okay so once it got installed let's cd into our just created project and then we need to run npm run serve yeah while it is compiling let's open up new tab and we'll open the project in sublime or you can use vs code so it got compiled and boot up this server at this location control click to go to and let's see yeah so this is the default application with view router it can go to home about all right so um let's go to sublime and yeah so this is our project structure we got uh main component here and route store and main.js we got views over here and necessary components over here so this is the structure which comes with uh view template so now what we'll do is we'll create a front end for our chat application so instead of creating that i will i will use our default template available at this location yeah so bootsnip.com you can get a different template made on bootstrap here so i will grab the html from here i will create a new view component so you can you can make on this home or i'll create a new file i will call it private chat dot view so this is over here all right i'll copy some code from here to there all right and we need to use this but we we don't need everything we just need containers so i'll just copy the container into my newly created chat component paste it there all right so our private chat component is ready we don't need name it's default all right so once private chat component is ready here we go to router.js and then we import this newly created component named private chat and we will so we'll replace home with our private set component all right so whenever you hit save you will get updated code over here yeah so currently we have no bootstrap 3 and we have sorry bootstrap 4 and we haven't copied css yet so let's copy them as well so ctrl a ctrl c into so we need to create a styles as well style and scoped for this component only and just paste it yeah better yeah also we need to import a bootstrap for so we we just need css we don't need this so i'll copy this into our index.html so index.html is inside public and here you need to uh your bootstrap css so i will paste it over here all right all right so now it looks better all right so now that our front end layout is in place now we need to make it dynamic so whenever we type something here and hit save we need to save this data somewhere so in order to do that we need to set up our firebase so let's get started with firebase if you go to firebase.google.com uh here if you hit get started it will give you demo and all so it will take you to your firebase console and here you need to create uh add a new project so so i have couple of but i'll create new for this one so you can name it anything you want i will name it view file store chat okay so i accept create project all right so let's hit continue and it will take us to the dashboard related to this project all right so first step is to so it as it is saying get started by adding firebase to your app so we need to add firebase to our app so there are a couple of options for ios android and for web so since we are developing for web if you hit this and you will get so there are a couple of options you can import like this or you can use uh doing from uh using npm so if you go to this uh get started with firebase for web app you get this information so we will install uh using npm so let's go to our terminal install firebase and all right so once firebase is installed let's go back to our project and yeah this time we'll just copy uh sorry here so just copy it into your into your main.js and here we will have this config variable with all our configuration and then we'll initialize it into firebase so before that we need to import firebase right import firebase from firebase all right so now firebase is initialized and next step is to so since we are using the database so we'll be using this database so there are two option cloud file store and realtime database yeah these two options so cloud files five stories in beta uh it is new so we'll use this one fire store so start in test mode enable all right so our file store database created so if you want you can go to docs and get started with it get started for web and over here cloud file store get started so it will uh give you step by step information so you don't need to do that we already installed firebase we require uh okay we require firebase so we also let's record this as well and then we need to initial we already initialized this and let's add these two as well so we initialized that app and so we created this tv and then we uh do this so otherwise you will get some uh warning in console so this will disable them so we created this variable db and we'll use this variable to access our database all right so we'll be uh using this tv variable from our other component you can import that there or you can assign this to window variables so that it will be accessible from anywhere yeah you can do that all right so once that is done our firebase setup is complete uh we don't need to do anything now our next step is to add data to our database when user enters something and hit enter okay so in order to add data to our database what we'll do is we have this simple input field and then we have this button all right so this is our form and we need to bind it to messes and we need to create that over here data return object and message by default will be null so whenever user uh type something it will have some value and then we'll submit that so we'll submit on enter so on key up dot enter we'll do save message and we'll create this method say message so we'll create that method over here methods save message all right so uh the way we create uh data in our database is uh in firestore is so let's let's comment it save to file store and here we need to send a request to file store to save our data so if you go to getting started section you'll have this so you can save it like db then collection name where you want to save and then call add method all right so and the parameter that you want to save and you'll get these callback all right so let's do that so let's do db dot collection and then collection name so we'll be storing those messages in chat so we'll create the so it will automatically create we just need to specify here and then we'll call add method and we need to supply object so we'll save like this key value here message is this dot message so this dot message is this message over here right so that's it so if you want to uh save anything any other uh parameter there you can subscribe here anything like so all right so for now let's say message uh let's go back to browser so here whenever someone alright so this is first message and hit enter so let's go to uh file store let's refresh so as you can see here it uh successfully created a new message so it created a collection named set that we specified it here and then it created a field message and unlike so so document is like a unique id it automatically generate this unique id so you can also specify if you want but it will if you leave a blank it will just automatically so this is our first message so after i enter message and it just persists here we need to clear this field let's do that so after the message is done let's make this dot message equals to null all right all right so this is the saving part uh saving new message yeah saving new messages once uh we saved it we need to pull the pull all messages and display it here so instead of showing this dummy data let's pull in from firebase so uh to get data you just need to reference the collection and then loop through each of them and display it here like so all right so let's do that so we will do that on our created life cycle so whenever this component created we will create will fetch all messages this dot fetch messages let's create that method fast messages and we'll face using db and then collection name so we are facing from the chat collection and then we need to do get so this will get all messages and after getting messages then what we'll do is so you can name it anywhere query snapshot and then we'll loop through it for each data or you can call it doc so basically it will give us all the talk over here like these docs then we loop through this doc and then get data in the dock so that is how it works so first we'll create a local all messages variable empty and then we'll push data there all messages start push talk dot data so this will be the object so this object so it will return exactly this object and we'll push it to all messages so after this loop is done we'll assign this dot messages equals to all messages so we need to create this uh messages data here property here so message is all messages so this will be the empty array and after it is done it will have a array of object of all messages all right so that should work let's go to browser open up inspector and on view tab let's go to private set or uh yeah so this is the component yeah see how it shows anonymous component so i think if you keep a name property here it will show the name let's keep it private chat name save it and there we go so as you can see the message is null and messages are there we got to see this data is a method so i was doing mistake my bad sorry about that yeah so now we get object of all messages as i array so now we can easily loop through it and display it here so let's do that next go to our our private set component and here we got all dummy messages let's get rid of them history incoming message outgoing let's get rid of it so let's give only one and then we'll loop through all right let's look through it v4 message in messages and here we'll display the message so we'll have access to uh message object so this will be the object and inside this object we have message property so message dot message that should work let's get rid of this image let's keep it minimal yeah so we we can see all messages here uh new one so currently it is not real time we'll make it in a moment we need to refresh the page and we should see yeah new one over here so as you can see it is not ordering by the time recent time so we need to order that by time as well so let's handle that first so uh in order to order them by time we need to so while fetching we need to order by but the problem here is we are not saving the time when we uh created this message so here we are just saving message let's save a new property as well named created at and this will be the new date so new date will be the date of creation like it will be the current date like now yeah so now now if we create a new message we'll have this created at uh property there and before getting we can do order by order by created at all right but you know what we need to clear up our database to start up because that will throw error because we have no created ad yet so let's clear everything and start from scratch refresh so brand new message refresh yeah hi man so there we go so hyman is only more recent all right so at least here it is working so now we need to make it real time because we have to hit enter and refresh every time to see new messages so to make it real time instead of doing this so here we are facing message right so instead of doing the uh get what we need to do is uh we need to do on snapshot so it will current a constant deletion for new changes so yeah we don't don't need to do then snap shot all right so on snapchat we'll have exact same thing and we will be doing exact same thing like previous so now this will make it real time let's test it refresh to make everything clear all right so uh real time there we go more messages all right so it is working so we see how we can face the message on real time so next thing uh what we need to do is uh we need the name of user who created the message right so that way we can identify who created the message so for that we need to make the authentication system so luckily we already firebase got authentication we don't need to do anything much so now we need to make the login system so that a user on the user can only access this space after logging in right so on the authenticated user will access and then create message then we'll store who created message in our collection and then we'll display it here all right so now let's build uh authentication system so for that let's do let's first create a login component so what we'll do here is uh so if you go to authentication there are different uh method for authentication we have a different signin method available like so let's go to authentication and then hit setup sign in method i'll show you so these are all options available to us we can do using email password form google and like this so uh so now most of the people have google account so i will make it simple we'll enable the google signin method and then we'll allow user to sign in using google so just enable and save it so now you can see google enabled so if you want to email password you can do that as well all right so under authentication so you can go through get started if you want to do email and password and setup login but in this video we'll be using google signin method so let's go to google signin and we will do exact same thing like first we need to initialize the provider so we'll put this code on our login component so before that let's create a login component so i'll duplicate this home or let's create a new file login dot view will have simple template and let's uh let's put it please login to continue login with your google account to continue all right so and we'll create here a button very simple login with google and when someone clicks on this button we'll undo we'll call this login method which will be creating over here methods and then method name will be login so uh here so first we need to initialize the uh provider like so so provider will be firebase auth so before that since we are using this firebase we need to import the firebase here import firebase from firebase and then there is uh this optional step if you want to do you can do like adding school read only so this is optional uh we won't do that we want to skip that and here comes the main step so uh now we need to call this sign in with pop up and we'll pass the provider that we just initialized and it will open the popup and ask you and do everything for you so yeah so this is quite easy so we'll copy this code into our component below here and i will make it look a bit nicer so sign in with pop and then after it results returns result we will then do this token if we need token then we will yeah so currently we don't need to do anything like so and just leave that so uh this bit of code will execute on success and this bit of code on failure so let's use es6 syntax result lecture and then what what we'll do here is after the successful login we will redirect user to the login sorry the main component all right so what we'll do here is this dot router dot push will push it to home component so now our login code is in place next we need to create this route right so otherwise how can we access that so uh login let's import that login as well login and then we'll create a new route just duplicate it and i'll name it login and it will be login there we go so that is done let's go to our application and let's see what we can improve so log in yeah please log in with google account to continue totally fine let's hit login with google so ask us to sign in so since it was running on http and localhost it will ask you to give you this warning just advance and go to the firebase app and allow yeah we trust it because it is our own application nothing harmful going on all right so it take uh took us to home component all right so in this in this window we are logged in and we can access so we need to fix one more thing so for example let's open up this on a guest window where we are not logged in and if we try to go to our home page it's running a lot right because we are not not authenticated we it need to uh take us to the login component so that we have to login in order to come here so to restrict the unauthenticated user from accessing the private set component we need to do we need to create here before route enter so the router method so below created we'll create that so view router allows this before route enter before route enter method with this so you can find this on documentation for reference so it will just hook up before everything like even even before create it it will get executed and here we'll check if user is authenticated or not so the way we do it is like so uh next vm so the vm is like this so we do not have access to this in this bit of block of code because this is even get initialized before this initialized and so we access this variable or even the router from using vm so uh next will be executed after uh we return next from uh here so for example um let's see let me give you example by doing it so uh we need to check if uh we have authenticated user or not so the way we do in firebase is like this firebase auth on auth state changed so this will give us user if user is authenticated of course so this is the method on all the state change it will uh give us so it will just tell us both if users logged in or if user loggers basically if auth changes like so for example if there is user so if it returns a user we will uh will tell router to go to the next request so it is just like middleware in laravel if you are familiar to it so if there is user that means user is authenticated we will go to next request which is it will allow us to move next else if there is no user then we will uh go to router so this router dot push to login component so as i have already mentioned we we have no access to this there that's why we use vm so basically this view router allows this kind of method to access the this from here there we go so now uh we are protecting from un authorized access so let's go to our guest window and let's try to access it once more uh looks like we missed something yeah so we need to import this firebase right so we missed that all right so once that is done let's press yeah so whenever we try to access the home page it is taking us to this login component cool so after we login we should get to that so we already tested that no need to test it now uh we now we need to do what we need to do is we need to store the authenticated user in our variable uh named yeah let's call it auth user yeah auth user is fine so by default it will be the empty object and so whenever the component is created so after component created we will assign that here so before fetching message so here uh firebase dot auth so if user then we can do this dot user uh sorry this dot auth user equals to user all right so that's it too else will make this dot auth user and also for example if user logged out this will fire up again fire up because we are constantly listening for autistic changed and then we'll have access to sorry we'll make the art user null so we need to store the information about who created message as well so let's do that here so i will call it author or message okay author so this dot auth user dot display name so by the way uh this is the format so auth user contains uh this display name uid so if you console log you can see that or i learned it from documentation yeah so like here so we got display name user email email verified so these all are options that are get by default all right so now that we are saving all necessary information about message so like message content uh author of message and then created it so now what we can do here is we can display the author or message like so message dot author also we can so message start created at but our uh yeah so this is the whole object yeah so we'll use other moments to make it look nicer in a moment for now let's get rid of this and also let's remove delete all documents we'll start over with author name as well okay hi hello there we go so if you log in with another user in other window we can get that so let's test it all right so i'm logged in with two different user over here and here let's set hey hit this there we go hi web tab there we go i can i can listen you yeah all right so let's add some special class depending on who created the message to make it look a bit nice so what we'll do over here is so while looping through all messages we need to find out who created so if uh the user who logged in has created a message we'll apply the different style to that otherwise we'll apply a different style all right so um here we are looping through all messages and we are applying this class so uh we will toggle this class so to do that uh vs allow us to dynamically apply the class so the way we do that is like so so we'll bind the class by keeping the dot and and here we'll supply this array and we'll use the ternary operator here so for example if message dot author is equals to uh user dot display name so so currently users display name in author message then we'll apply a one class sorry one class so then it will be the send message right so we'll apply this class otherwise we'll apply receipt message class so this is how we toggle class and yeah so now we need to write css for these two class over here to make it look the way we want so we will make sent message look one way and other look another way so we'll not go through styles yeah so i just applied different color for them now let's see how it looks delete art users sorry about that so message dot author should match auth user yeah like so so as you can see if new messages come it is not scrolling all the way down right so we need to fix this scrolling issue so to do uh to fix scrolling it is quite simple so after receiving new message we need to scroll to all the way to bottom so to scroll to bottom we need to create a new method scroll to bottom let's create a new method over here scroll to bottom yeah so uh yeah i defined a simple uh variable box and we are getting the box which contains all message which is this message history all right so it contains all the messages and we are just scrolling to top all the way down like box story scroll light and we need to call this scroll to bottom method after someone sent the message right so after someone add the message we'll have this 10 so after someone successfully send the message we'll distort scroll to bottom we'll call this method so this will fix when someone types and hit enter also uh we need to call this method after uh receiving message right so after we receive message we need to call that as well so here we are doing that and let's do set timer so we'll call this method after some time because because otherwise it takes some time to render the data so without rendering it will not scroll to bottom right so we'll make one one second delay so if you call this is scroll to bottom bottom without timeout so these all messes uh won't get rendered so this will call before this all get rendered so this is quick fix for that yeah so now it should scroll to bottom there we go so let's try i am typing some message there we go there we go without doing anything yeah so this is a simple chat application hope you learned something about firebase or file store how to use that to build simple application
