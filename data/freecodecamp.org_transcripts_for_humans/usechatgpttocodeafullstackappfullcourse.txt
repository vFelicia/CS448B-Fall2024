With timestamps:

00:00 - learn how to build a full stack
00:01 - application using chat GPT in this
00:04 - course you'll learn how to Leverage The
00:06 - Power of chat GPT to accelerate your
00:08 - development process and make programming
00:10 - smoother Judy is a full stack developer
00:13 - and teacher in this course she'll
00:15 - demonstrate how to build an educational
00:18 - application using chat GPT to ask
00:21 - questions about coding syntax
00:23 - troubleshooting and learning best
00:25 - practices you'll also discover how to
00:27 - use chat GPT to build various features
00:30 - including authentication browsing
00:32 - courses and creating categories so let's
00:36 - get started and see how chat GPT can
00:38 - help you build amazing applications with
00:40 - minimal manual coding hello everyone
00:43 - this is Judy and in this video I'll show
00:45 - you how to use chat GPT on every step of
00:48 - the way for full stack development one
00:50 - of the benefits of chat GPT is its
00:53 - abilities of accelerating development
00:55 - and making programming or learning
00:57 - process much smoother during this one
01:00 - walkthrough will build an educational
01:01 - application and you're going to see that
01:04 - minimal manual coding is done but don't
01:07 - take my word for it watch the tutorial
01:09 - examples of questions we will ask chat
01:11 - GPT include coding syntax
01:13 - troubleshooting learning best practices
01:16 - and receiving guidance on picking the
01:18 - right tools and platform for your
01:20 - project also using it into our
01:23 - application will build various features
01:25 - such as authentication browsing courses
01:28 - its categories and many more I'm
01:31 - thrilled to present various prompts I
01:33 - have explored and demonstrate how you
01:36 - can make most of charge GPT so without
01:38 - further delay let's dive right into it
01:41 - when using chatgpt as a coding assistant
01:44 - it's important to provide the right
01:46 - context the model has been trained on
01:48 - various kinds of data and its default
01:51 - answers can be quite generic however by
01:53 - providing more specific information we
01:55 - can achieve better results with that in
01:58 - mind I'm gonna ask it to act as a
02:01 - developer so I'll say I want you to act
02:04 - as a software developer I will provide
02:07 - some specific information and this is
02:10 - where we give it indications as to what
02:13 - its mission is throughout this
02:15 - conversation which is to come up with an
02:18 - architecture for developing easy to use
02:20 - course app
02:22 - so far this description contains very
02:24 - general information the goal of this app
02:28 - is to allow users to take online courses
02:32 - on different subjects and Below let's
02:35 - list uh features we want the app to
02:38 - include which is going to be
02:40 - authentication courses and their
02:44 - categories we also want course search
02:46 - payments and functionality of saving
02:49 - courses
02:51 - as an answer chai GPT proposes an
02:54 - architecture and provides a division of
02:57 - the stack it offers as you can see
02:59 - sections for both front-end and back-end
03:02 - development with suggestions for tools
03:05 - and approaches within each section let's
03:08 - review the list and furthermore you can
03:11 - reuse this template the description May
03:14 - differ depending on the situation but
03:18 - still could be useful reference for your
03:20 - future projects
03:22 - and if you want more comprehensive
03:25 - guidelines on building full stack apps
03:27 - check out my notion template for full
03:30 - stack roadmap I have included all the
03:32 - parts of the stack as well as the topics
03:34 - and resources you would need to build
03:37 - applications and yeah check the link in
03:39 - the description if you're interested
03:42 - all right let's go over the list now we
03:45 - have user interface developer responsive
03:49 - user-friendly UI using modern
03:51 - Technologies such as react and angular
03:54 - to provide an intuitive and engaging
03:57 - user experience so for the
03:59 - authentication a scalable solution and
04:02 - it provided us with options of os JWT
04:05 - and open ID connect these are indeed I
04:09 - would say one of the most popular
04:11 - authenticate ways of authenticating
04:14 - users then we have course listings
04:16 - display in user-friendly allow users to
04:20 - browse and search Implement filters and
04:23 - sorting options for enhanced visibility
04:26 - okay most of the searches do have indeed
04:28 - filters and different options so for
04:30 - sorting that's good
04:32 - payments are processed through two
04:35 - common Solutions stripe and PayPal and
04:37 - additionally we have course details
04:39 - course progress tracking and the ability
04:42 - to save progress to your profile
04:45 - let's take a look at the back end what
04:47 - components do we need first we need an
04:49 - API so that the data can be communicated
04:52 - between the backend and the front end
04:54 - using a back-end framework such as
04:57 - node.js Django or laravel once we have
05:01 - that we can focus on the database chat
05:03 - GPT answer mentions mongodb in MySQL and
05:07 - postgresql as examples but these are
05:11 - very different solutions and to get
05:13 - started let's pick one database and
05:16 - gather as many details as possible about
05:19 - it so I'm gonna say let's start with
05:22 - database how would you structure it and
05:25 - would you pick relational over
05:27 - non-relational here if you don't know
05:30 - the differences between the two you can
05:32 - also ask what kind of databases are
05:36 - there in general so it would give return
05:39 - list of like descriptions and
05:41 - differences and it does suggest to our
05:44 - question to use both and let's
05:47 - understand what's the reasoning behind
05:49 - it
05:51 - so consistency and Clarity are crucial
05:55 - when defining relationships between
05:57 - entities such as profiles and courses
05:59 - well it's straightforward to determine
06:01 - whether a user is enrolled in a course
06:04 - or not tracking course progress can vary
06:06 - significantly between user and courses
06:09 - therefore doesn't require strict
06:11 - consistency and I agree with the
06:13 - statement uh we do not need like a very
06:16 - structured data for progress but we do
06:19 - uh need a more clear definitions for
06:23 - courses and the profiles entities itself
06:27 - let's dive into the courses table and I
06:31 - would say how would you structure
06:33 - courses and charge GPT
06:36 - returns fields for the table but we can
06:39 - also ask it to print the output in a
06:43 - tableer format for better with
06:45 - visualization so that's another prompt
06:48 - to remember and this is the stage where
06:51 - you you can request notifications and
06:54 - iterations before jumping into building
06:56 - the app since this would drive the core
06:59 - functionalities I would recommend taking
07:01 - enough time to think about it however
07:03 - don't spend too much time on it not to
07:06 - delay the start of the project and when
07:08 - it comes to getting assistance from chai
07:10 - GPT it's good to have this like
07:12 - step-by-step approach so for example I
07:15 - don't want to add the metadata so I'm
07:18 - going to ask can you remove metadata
07:20 - from the table and it should uh output a
07:23 - new table without it
07:26 - and now we can start thinking how can
07:30 - this table can be translated into a code
07:33 - so I'm going to ask it to generate a
07:35 - Prisma file that is where we Define a
07:38 - schema for our database
07:40 - so it's good that it also marks for
07:43 - example course ID that can be used as a
07:46 - primary key and it also gives us
07:48 - explanation because this is the first
07:50 - time we're using Prisma in this
07:52 - conversation so it would Define the
07:55 - prism as a modern database toolkit that
07:58 - provides typesafe and then intuitive way
08:01 - to define data models and interact with
08:04 - databases in various programming
08:06 - languages and to note even though this
08:08 - is created in Prisma it depends on what
08:10 - kind of language or database you're
08:12 - using it with and this is also
08:14 - indication where we can give it more
08:17 - details also if let's say you already
08:20 - have used Prisma and you don't want
08:23 - extra explanations we can just use this
08:26 - prompt code only and it will be faster
08:28 - if you're generating a big code and want
08:31 - it quicker
08:33 - okay so now my next question would be
08:35 - how can I use this with the backend that
08:38 - I have picked
08:39 - and this will give us what Super Bass is
08:43 - which is an open source alternative to
08:45 - the Firebase and let's see what else it
08:49 - tells us about it uh here's how you can
08:52 - set up prismap for Super Bass suppose
08:54 - uses postgresql and it's also providing
08:58 - us with the information that this is
08:59 - relational type of database so I'm going
09:02 - to list all the parts of the stack that
09:04 - I'm planning to use and instead of me
09:06 - going into for example three different
09:08 - documentations because I want to use
09:10 - actually a super bass and Tailwind the
09:13 - charge Deputy should give me all the
09:15 - steps so I don't have to like go look
09:17 - for it and on top of that if any of the
09:20 - two technologies uh that I will be using
09:23 - are not compatible for example charger
09:25 - PT should also point that out and once
09:28 - it's done printing I'm gonna follow the
09:31 - steps uh here with some modifications
09:34 - first step is to run the command to
09:37 - create next app and for that I'm gonna
09:39 - open up a terminal and paste the command
09:42 - here as and select the configurations
09:45 - for my next this app
09:48 - I do see that it says that the next step
09:53 - to install Prisma but I think Super Bass
09:55 - should have its own client and we can
09:58 - check that with chatgpt
10:04 - the answer that we got is that we do
10:07 - need a client module which is super
10:09 - based JS and it also provided a install
10:12 - command and an example how to use it
10:15 - with the courses table so going back to
10:17 - the terminal going to I think it named
10:20 - it my web app and then inside here copy
10:23 - code
10:25 - while this is installing
10:27 - um another thing that was mentioned here
10:29 - is how to set up Super Bass
10:32 - so that would include creating a new
10:35 - project and obtain connection URL for
10:38 - your super based database and you'll
10:40 - need this URL to connect your next.js
10:43 - app to Super Bass so let's go and do
10:45 - that I'm going to open this up I already
10:47 - have an account and so I'm gonna sign in
10:50 - create a new project I'll name it course
10:54 - app for password I'm going to let it
10:56 - generate and then copy
10:58 - press create now we need to get the
11:01 - connection URL that was mentioned here
11:04 - let's ask um tell Chad GPT what it
11:07 - thinks is the best choice for ID for
11:10 - this project I do use vs code and I
11:12 - think you also suggest us to use that
11:15 - and when starting a project with a new
11:18 - stack it's also helpful to check what
11:20 - extensions are available to use with it
11:23 - they can assist you in your development
11:26 - process especially when it comes to
11:28 - different kinds of files and syntax
11:31 - highlighting error handling this is what
11:33 - some of the things that extensions can
11:35 - provide so asking what extensions would
11:39 - you recommend to install for this Tech
11:42 - stack
11:43 - okay and now it's listing them
11:47 - arranged into like categories
11:52 - and you can install I think I have most
11:55 - of this already
11:57 - um this extensions
12:01 - so to continue working on the project
12:03 - I'm going back to the instructions that
12:05 - it gave us it didn't specify which file
12:08 - to write this code so I'm going to ask
12:11 - it I also want the whole application to
12:14 - have access to the Super Bass client
12:16 - which file should I implement this and
12:19 - how can I use that implementation of
12:23 - in-app file
12:25 - that's great all right let's do this
12:27 - let's create inside our source new file
12:30 - and yeah that is a cleaner way of
12:32 - separating the initiation of an instance
12:35 - of the service let's copy this code I'm
12:38 - going to paste it and let's ask how we
12:41 - can add environment variables
12:43 - it's going to tell us to create a new
12:46 - EnV local file and make sure to add that
12:49 - in so it's a good thing that it tells us
12:52 - it should be ignored to prevent it from
12:56 - being committed in a Version Control
12:57 - I've seen a lot of developers make a
13:00 - mistake of accidentally committing their
13:02 - API Keys which is like very sensitive
13:04 - information
13:06 - um and end up getting like a crazy high
13:08 - bill from their providers
13:10 - so to prevent that let's
13:13 - um add those configurations in
13:24 - copy the code and paste it here
13:29 - so that's our first this goes in yeah
13:35 - okay so then it even gives us the format
13:39 - of
13:41 - how it should look like and let's copy
13:43 - this from
13:45 - our project so I'm trying to see where
13:49 - did the oh here it is
13:51 - so yeah it probably got example from
13:53 - here and
13:56 - I'm gonna copy this
14:02 - replace
14:04 - it with it
14:08 - and super bass key then that's the key
14:12 - okay now I'm Gonna Save my changes also
14:15 - for the super super bass file and let's
14:19 - open up the terminal and run
14:24 - the command and then render so we can
14:26 - start our development instance and
14:29 - navigate to localhost to result in where
14:32 - our next GS app should show up now the
14:35 - next piece is that so what we did with
14:37 - basis basically we connected our app to
14:41 - our project in the Super Bass and now
14:44 - let's ask T what it thinks about like
14:47 - writing the schema I did ask it already
14:50 - scheme in Prisma but there's an option
14:53 - to do that also without a prism on so
14:56 - let's see what it says so
14:59 - push my schema to newly created
15:05 - supervised project and do you
15:10 - recommend using
15:13 - Prisma for this course app or
15:18 - just
15:21 - super based client
15:35 - yeah so it gave us this Prisma setting
15:38 - up Prisma steps but I want to know what
15:41 - it says about just defining as for
15:44 - whether to use Prisma or super based
15:46 - client it depends on your specific
15:48 - requirements and preferences a powerful
15:51 - way to interact including Super Bass it
15:54 - offers Advanced features
15:56 - Etc
16:00 - so it does say that just going with
16:02 - Super Bass and it is more suitable for
16:05 - smaller projects or when you prefer more
16:07 - lightweight approach without the
16:09 - advanced features a limited choice so
16:12 - okay let's say if it's we did do Peak
16:15 - the smaller model more lightweight
16:17 - approach what it's gonna propose instead
16:26 - foreign
16:38 - the first thing that I want to do is I
16:41 - want to add the course table so how can
16:43 - I push that to the Super Bass and it
16:46 - does give me the code that it already
16:49 - printed out but once you have
16:52 - crude operations okay
17:02 - but this is just the functions on the
17:04 - clients that we actually need to add the
17:06 - table here so we can do that also by
17:09 - doing manually but since we're using
17:11 - chat GPT let's figure out a way how can
17:13 - we get that from the script so
17:17 - let's see can you write a script for a
17:21 - SQL editor in Super Bass maybe you'll
17:23 - understand that one
17:33 - table for the project
17:40 - here's okay great
17:46 - now let's copy this one you can execute
17:49 - this on the SQL query or any SQL editor
17:52 - that is connected to your projects to
17:55 - create courses table
17:57 - let's see let's just select table and
18:00 - I'm gonna select all of this paste this
18:04 - in and click run where's this here
18:08 - success no rows return now next part
18:11 - after creating schema is sitting the
18:15 - database can you as
18:18 - first in Saving the database
18:24 - what script can I run to add
18:29 - some rows to
18:31 - course table
18:35 - and this should generate Us by like some
18:38 - sample courses that it will come up with
18:42 - so for example we have and it follows
18:45 - like the
18:47 - structure so it will create some dummy
18:50 - data names descriptions
18:53 - Etc and let's copy the code and run it
18:57 - into
19:00 - here
19:04 - let's go to the table see if the have
19:08 - been the data has been added here
19:11 - great so now we are we have the data so
19:14 - we're ready to copy the
19:19 - this code that it wrote for us on the
19:21 - client side inside the app we can
19:23 - display the data so it created some
19:26 - functions
19:28 - so crude operations okay
19:32 - perfect but before we go to the crude
19:35 - let's just display the data and as I
19:37 - remember
19:38 - it created this font okay like get
19:42 - function
19:43 - here now I'm gonna ask it to create a
19:46 - component that lists all the courses
20:04 - yeah so it also takes in the context
20:07 - that it told us to add this Super Bass
20:09 - file in the loop folder so that's great
20:12 - though it doesn't show how to set up in
20:14 - the beginning and now I'm gonna copy the
20:17 - code and let's see where it tells us to
20:19 - save this file
20:21 - okay let's just
20:24 - create a new folder for components
20:31 - and of course
20:35 - with jsx
20:38 - we can
20:42 - paste it in here first add that into
20:47 - the main page which is
20:52 - index.js so I'm gonna
20:57 - remove all this extra code
21:01 - here oops
21:04 - let's do import what kind of export
21:07 - default okay import course list
21:12 - from and this is
21:19 - components
21:35 - okay assuming I imported that correctly
21:38 - await
21:40 - Super Bass from okay so we need to
21:44 - update
21:48 - let's see export default super piece
21:51 - okay so what it did mistake is the
21:53 - import statement
21:56 - is I should be asked for default and
21:58 - here we get the list of courses
22:01 - The Next Step would be as we start
22:04 - creating more components and we're gonna
22:06 - have more files asking it about file
22:08 - structure best practices is also naming
22:11 - conventions of these files to recommend
22:13 - the file structure for an xjs using
22:15 - Super Bass and Tailwind should be
22:17 - following okay so and then it took into
22:19 - the considerations that we have several
22:22 - features and divided the page into the
22:26 - features so in xjs if you're not already
22:28 - familiar the way you create a page and
22:31 - the new link is by creating files inside
22:34 - of pages folder so it created login sign
22:37 - up dashboard um
22:39 - page for us and also in courses we have
22:42 - the list of the courses course ID and
22:45 - the new creation codes which is pretty
22:47 - impressive as for components layout is
22:51 - what we use like reasonable things in
22:53 - the layout for example header footer Etc
22:56 - it did create all of those and I guess
22:59 - the course card the component for
23:02 - displaying a course card okay
23:03 - interesting and then we have a setup for
23:06 - Super Bass and tailwind and some styling
23:09 - usually we don't have much in the global
23:12 - assistance and the entailing file any
23:15 - custom code that you update to the
23:16 - Tailwind or like setting a thing goes
23:19 - there and let's see the explanation so
23:21 - you just go through uh what I mentioned
23:24 - and for naming conventions it's
23:26 - recommended to use descriptive so it
23:29 - offers us two cases camel case and a
23:32 - kebab case
23:33 - so let's see which one it went for of
23:37 - course
23:37 - you can name files related to course
23:40 - with course as a prefix okay so course
23:42 - list that we already have that and then
23:45 - detail similarly you can follow similar
23:47 - conventions and let's see how it named
23:49 - the components with yeah the capitalize
23:53 - first okay
23:55 - now let's ask it to create course card
23:59 - for to rewrite course list using the
24:03 - course card
24:04 - and let's also ask it to do the styling
24:07 - like of how we want so for courses let's
24:11 - display them in Grid and also let's ask
24:15 - it to create card with some like Shadows
24:18 - borders Etc so we can all describe it to
24:20 - it and let's see what kind of how
24:22 - exactly does The Styling um
24:26 - foreign
24:48 - will actually do that but we don't have
24:50 - images at the moment and since this is
24:54 - just such a UI it won't be able to
24:56 - generate the images but we can ask it to
24:59 - create like something that looks like a
25:01 - thumbnail using using the styling
25:31 - I don't know something like that
25:41 - all right so I'm going to stop January
25:43 - because
25:45 - it gave a sample course Theta when it
25:48 - should uh
25:50 - take the course data from the super base
25:52 - and
25:59 - maybe because we asked it to do the
26:01 - colors okay can you use get course
26:05 - function from supervised that is why
26:08 - it's good to be as detailed as possible
26:12 - let's see if it's
26:17 - okay Pages courses
26:23 - and then it added some classes for The
26:26 - Styling
26:30 - make sure to import
26:34 - and if we say continue it should
26:37 - continue because we also ask for the
26:39 - course card yeah here it is
26:41 - yeah if you ever see or sometimes it
26:43 - cuts off in the middle of the word
26:44 - because it hits character limits so just
26:47 - say continue generate background color
26:49 - oh interesting so it actually did a
26:52 - colorful and text loss based on course
26:54 - title okay
26:57 - let's get to components course card
27:09 - and I don't think I updated this one
27:14 - but
27:19 - Pages courses let's create courses
27:21 - folder
27:25 - not the file
27:42 - in the localhost we can navigate
27:47 - two courses
27:48 - can't result prop types you can ask it
27:52 - to remove or we can just remove it
27:54 - ourselves and just let it know that next
27:56 - time don't add prop types so that was in
28:01 - course card or we also install it
28:04 - depends on the preferences
28:14 - okay class names so let's install the
28:17 - class name since
28:25 - npm install
28:29 - s
28:32 - so it is a good library to use like
28:35 - when defining when making conditional
28:37 - statements in Tailwind
28:40 - so okay courses
28:45 - what about components
28:52 - can I read properties of undefined okay
28:55 - so it messed up the
28:58 - import statement of Super Bass
29:03 - so if we ask it to
29:09 - next time let's see what it says
29:16 - yes
29:17 - default settings
29:24 - okay then it'll go as a data version
29:29 - and we do have courses
29:41 - okay so there's no price just the title
29:45 - and the description
29:49 - background white so this is supposed to
29:51 - be
29:53 - the image and
29:58 - text font interesting
30:02 - background I PJ
30:06 - yeah those are definitely not the Colors
30:10 - Let's just set this to Gray and this one
30:18 - as well
30:28 - now let's move on to authentication and
30:30 - see how we can Implement that using
30:32 - charge repeating
30:37 - we want to use super bass
30:40 - oath and we want to ask how to create
30:44 - Pages or how to protect our pages so
30:48 - which pages are going to be for
30:50 - authenticated users and Etc it's going
30:52 - to tell us how to set that
31:24 - will tell we are setting
31:29 - location
31:42 - after courses page
31:54 - let's see if we have super bass UI might
31:58 - not be installed so I'm going to copy
32:00 - that
32:01 - and
32:06 - display oh it does come with UI so we
32:10 - don't have to create a separate and now
32:13 - protectors and Pages it's going to show
32:16 - us how to have like courses display only
32:20 - on four authorized users let's see if we
32:24 - don't it by default selected Google for
32:26 - us providers
32:28 - we'll have to configure Google so let's
32:30 - see if we can give us
32:32 - authentication only by you username and
32:36 - password
33:00 - okay so this credentials is what's gonna
33:05 - add end options custom DIY change your
33:11 - email to your desired username field
33:16 - okay
33:18 - yeah we don't want to use the custom
33:20 - methods just okay it's just showing us
33:27 - now let's check if one thing is users
33:30 - can actually sign in and sign up but
33:32 - another is creating user table so let's
33:34 - see if this is actually gonna create a
33:36 - user table that we can get information
33:38 - like email of users from because in
33:42 - Firebase for example we have to create a
33:45 - separate
33:46 - like table where we can reference user
33:49 - ID in firestore so let's see
34:01 - because if not then we can also ask to
34:04 - create a custom signup function where we
34:08 - do that a little crazy those table okay
34:10 - so just important questions
34:13 - that's great
34:18 - and now it's giving us the function when
34:21 - we can fetch courses that users take
34:24 - Taking later on we can also ask once we
34:27 - have the users created for us to map
34:30 - some courses to it but first okay let's
34:32 - get started with this
34:35 - installing the UI
34:39 - piece first
34:43 - npm install
34:46 - UI
34:49 - this we already have a layout
34:54 - if we don't I think let's reference the
34:58 - file structure that it proposed
35:02 - which is here and in components we can
35:05 - create layout Js
35:16 - we still want to check Imports if it
35:19 - looks correct import Tailwind
35:22 - so we don't need to import Tailwind I'm
35:26 - gonna remove that render
35:28 - authentication UI render the last of the
35:32 - layout okay and then children
35:35 - go here
35:39 - perfect now we can take this layout and
35:44 - add it to our either index page or
35:48 - courses page
35:51 - let's add it to the courses page so
35:55 - and then
35:56 - this is export default
36:19 - and I'm gonna wrap
36:24 - the rest of the components inside
36:28 - the layout here
36:30 - and resolve
36:33 - what is that
36:36 - oh it's inside components
36:41 - Super Bass is not defined it would be
36:44 - nice
36:45 - to like have a list of few things that
36:47 - we want to remind it every time because
36:51 - I think it did uh
36:55 - they actually didn't import super bass
36:57 - at all
37:10 - okay that's not working well Google we
37:14 - don't have the configured
37:19 - let's do credentials
37:23 - okay oh and the next year is
37:25 - documentation so I'm gonna follow that
37:27 - instead since we're getting errors and
37:29 - apparently there's a helper's library
37:33 - for next year we had the one for react
37:36 - but probably this one is more suitable
37:39 - so let's I'm gonna go ahead install it
37:42 - and also follow the directions here
37:45 - additionally install for react
37:47 - components and hooks so we do already
37:50 - have that one installed and setting up
37:53 - environment retrieve your project URL
37:56 - for API settings we did already set the
38:00 - environment variables we since we
38:03 - connected to Super Bass but we should
38:05 - check because it's probably using this
38:07 - very specific names like this helper
38:09 - function so I should probably check if
38:11 - our names are matching that would be in
38:15 - the in re variable so yeah here it's
38:18 - using a non-key instead of the key and
38:21 - public
38:23 - public supervisor see ya Let's update
38:26 - this one
38:28 - save it and also let's update it was
38:31 - used in only in Super Bass files so
38:39 - yep so we
38:41 - need to change it and once we update the
38:44 - environment variables let's
38:46 - rerun
38:48 - the application
38:53 - after that there's like a basic setup
38:56 - code that's provided to us that's in
38:59 - pages app.js and going to that I'm gonna
39:06 - copy this and let's leave the Styles
39:10 - declaration everything else we should
39:14 - have that and
39:18 - I think this should be export default
39:20 - yeah
39:26 - exports
39:29 - default
39:31 - okay cool
39:35 - Super Bass is not defined because
39:48 - oops
39:56 - reading dark okay let's double check the
40:00 - documentation for
40:02 - auth UI so we have UI react and also I
40:07 - shared
40:09 - so this one is coming from theme is
40:13 - coming from author I shared so actually
40:15 - this
40:17 - code that we got from Chad GPT is
40:20 - incorrect so I'm gonna go ahead and
40:22 - install this
40:25 - package I think that should be it for
40:29 - setup or we don't really need to use
40:32 - like a dark theme so let's
40:35 - remove this and
40:43 - follow this one here
40:54 - maybe yeah we can also try create client
40:57 - or super based clients just passing the
41:00 - one we already have instead of
41:03 - this function but
41:06 - let's see if it's gonna work oh okay
41:10 - so we got the login page it looks great
41:14 - and now what we can do is
41:22 - this is inside layout
41:26 - okay so let's change the logic
41:30 - if the session is not there then
41:37 - display the auth
41:39 - and if it's there we can show the
41:42 - children
41:48 - [Music]
41:50 - I'll perform just the code for the
41:53 - container
41:55 - and it's class names
42:06 - responsive let's say full with on
42:11 - mobile
42:18 - so height Flex item Center justify
42:21 - content
42:23 - Etc and then we have another
42:25 - uh that so this is how you can also
42:28 - utilize
42:30 - to create responsive Styles because
42:33 - sometimes it's tedious to Define
42:35 - separate cells for mobile desktop then
42:37 - we have other breakpoints like tablet
42:40 - and what this is this is doing is like
42:43 - it's by mobile first design and it
42:46 - followed when I asked not to create like
42:48 - form itself we just named it children so
42:52 - I'm gonna copy
42:55 - this and
42:58 - where's our
42:59 - off
43:01 - so we already have Flex Flex column
43:04 - minimum height screen Stuff Plus but
43:08 - okay
43:27 - okay and then it's
43:31 - response let's see on mobile
43:37 - okay it does expand to the full width
43:40 - grade
43:42 - now I'm gonna create an account to my
43:46 - email I see this link which
43:50 - I'm going to press and it takes us to
43:53 - the application which means I'm already
43:55 - logged in
43:57 - update index page so it goes to like
44:02 - courses automatically if the user is
44:05 - logged in and also we can ask it to
44:09 - create a header and the footer so we can
44:11 - put those in the layout so I'm gonna
44:14 - head over here and header should include
44:17 - some kind of like navigation and the
44:20 - sign out sign in button so I'm going to
44:22 - ask
44:36 - links to let's do courses categories and
44:40 - account we're using user can go in and
44:43 - make changes to the account page and
44:45 - then the sign out
45:05 - just in case so it doesn't use any other
45:08 - stack and what I want is that it to
45:11 - check if user is logged in then display
45:13 - sign out and Etc and it should also give
45:17 - us the functions as in from Super Bass
45:20 - like sign out function and sign in
45:23 - and let's see if it okay so it creates
45:26 - links and those links are next links
45:29 - which is great it also created a class
45:32 - first session and loading so if we have
45:35 - a session we're going to get account
45:40 - href or sign out API okay I don't know
45:44 - if that's oh maybe because we are the
45:46 - helper yeah we're gonna check out and
45:49 - sign in
45:50 - so in this example we're using use
45:52 - session hook that's correct and then
45:54 - it's showing us how we can use the
45:56 - header so let's go ahead
46:04 - other
46:06 - j6 basically one more thing to see if
46:10 - all the Imports look correct all right
46:24 - I'm gonna
46:27 - import this here I believe it was
46:29 - probably a default
46:32 - import
46:34 - ant not we should get in there
46:40 - and
46:44 - oh yeah navigation here we have
46:48 - already
46:51 - closed that it has created so let's just
46:53 - place it here or you can also replace
46:57 - probably this contains nav information
46:59 - okay yeah so we don't need this anymore
47:15 - I can go to either
47:18 - is not a function or its return is not
47:21 - iterable so use session
47:24 - do you have okay
47:27 - let's see if we have used session
47:30 - wait this is coming from header okay so
47:33 - we're already using you session
47:36 - in the layout
47:38 - okay so the import is actually wrong it
47:42 - should have
47:43 - done this
47:59 - it's not iterable
48:03 - so okay we can just have session
48:13 - how about this
48:24 - I'm gonna
48:26 - update this with P okay let's see sign
48:30 - out what actual word this page is not
48:33 - found
48:39 - getting
48:47 - so instead I would suggest because we
48:50 - haven't created this API I would ask
48:53 - maybe is there a function we can use
49:01 - okay
49:03 - that is what we want
49:16 - inside I know JS you can Implement okay
49:19 - so it gave us
49:21 - a function create a new file in
49:25 - so we don't need to create an API
49:28 - endpoint
49:31 - but let's see if
49:34 - that's the only option so just update
49:36 - your header component to use a API
49:39 - endpoint
49:48 - okay I think I'm just gonna directly
49:53 - use the super base sign out so
49:59 - I'm gonna copy that one and
50:06 - so here the same way we have
50:09 - the client in the layout I'm gonna
50:14 - do the same thing in here let's turn
50:17 - this into a button
50:20 - so
50:23 - this has to go
50:42 - and let's pass a Zuck
50:44 - callback function oh not this one
51:02 - all right let's see how that looks
51:07 - going back to curse courses oh we need
51:10 - to import
51:19 - client sign out
51:23 - super getting any errors in here
51:27 - did you mean on click all
51:32 - yep did you mean on click
51:35 - and I'm gonna also do the same for the
51:38 - signing we'll turn the link into
51:42 - uh button
52:03 - okay now let's build a search input for
52:07 - our courses page so I'm gonna ask it
52:17 - two generators like the input like UI
52:20 - element itself also the state because as
52:22 - user starts typing we also want the
52:26 - search functionality to happen and the
52:29 - search will be based on we can do title
52:33 - and the description
52:36 - and finally we can there's two options
52:40 - we can search when user presses the
52:43 - search itself or when they start typing
52:46 - let's try first with the button so given
53:06 - that will check matches against
53:11 - course
53:14 - was it label or
53:17 - title
53:22 - okay we're not displaying let's say
53:37 - you can also check inside the tables on
53:42 - What fields we have
53:45 - the title description okay
53:49 - foreign
54:03 - Shadow to the
54:08 - box and
54:15 - rounded borders
54:25 - container not sure if you'll do that but
54:28 - maybe something close here's an updated
54:30 - version of
54:33 - courses page code
54:36 - so it added that the search term State
54:39 - patch courses created at
54:43 - yeah we didn't ask the order but I guess
54:45 - did it handle search from courses oh
54:49 - interesting okay so this is how it's
54:52 - doing hmm
54:56 - so it's using or statement title like
55:00 - search item
55:02 - I'm just not sure where it's passing the
55:05 - search items like courses
55:08 - data and help handle as user starts
55:12 - typing it's probably using this function
55:14 - to update the state and let's see the
55:22 - updated input itself render any other
55:27 - components or links here
55:36 - so I'm going to copy this this would be
55:38 - the only new
55:41 - piece that we're getting
55:47 - so this goes after
55:51 - courses title let's grab our
55:56 - functions and
56:05 - you can also ask a questions or see if
56:08 - you're already described how this is
56:10 - happening
56:15 - so set courses and search term
56:29 - that trigger symbol search okay
56:35 - interesting so let's say if I do web and
56:39 - then press enter
56:42 - okay it filtered out interesting and on
56:45 - update it returns all well that's
56:47 - impressive now
56:50 - instead
56:55 - oops
56:58 - let's see if we can update that as user
57:01 - is typing and instead of the search the
57:03 - text itself we're gonna want to display
57:06 - like a lookup icon I don't know if
57:09 - that's the right name
57:23 - as user is
57:39 - let's see if it's gonna generate SVG for
57:42 - that or suggest like a library okay it
57:45 - did
57:46 - add a library we can also go ahead
57:49 - install it
57:51 - before it finishes writing the code
57:56 - yeah and
57:58 - install oops what is it cops look
58:20 - all right some
58:26 - hmm
58:28 - so
58:34 - I don't believe this is
58:39 - oh maybe we can just add react icons
58:43 - okay yeah I was gonna just ask but
59:00 - so I did that and it also probably
59:02 - updated the
59:05 - functions so handle search
59:09 - set search term
59:12 - maybe in use effect
59:19 - this updated version we replaced okay so
59:22 - it did ignore
59:24 - you just replaced it but as user is
59:27 - typing
59:30 - the search function that happens as the
59:32 - user types all right now I'll be more
59:35 - specific but first let's update this
59:40 - icon
59:59 - today
60:11 - search term that's the name of the stage
60:17 - foreign
60:21 - [Music]
60:28 - to trigger search
60:36 - button
60:39 - okay I can update that so the update
60:42 - would be
60:44 - simple we can just trigger
60:48 - handle search after the set search item
60:54 - but there might be a caveat to it that
60:57 - update is delayed because when handle
61:00 - search is triggered maybe the search
61:03 - search term hasn't finished
61:05 - updating but so data
61:12 - crap so it'll be more noticeable in like
61:16 - for example now I deleted all of them
61:18 - and it's not
61:21 - giving all the results
61:25 - but yeah definitely not as I'm typing
61:27 - but it's more noticeable on bigger
61:29 - applications so
61:32 - if I was working on this this would be
61:35 - one of the things that always improve as
61:38 - to make you like a production ready
61:41 - application
61:43 - but we can also ask what it thinks
61:48 - to how
61:50 - to trigger maybe this will work
61:54 - search
61:56 - and use your
61:59 - cards
62:01 - typing
62:06 - automatically okay maybe that was the
62:08 - key word
62:09 - that I was missing uh call handle search
62:13 - on input change yep it's
62:17 - doing the same thing like I did it added
62:21 - the handle search here
62:26 - but with the update
62:30 - okay
62:37 - search
62:43 - infuser clears
62:53 - foreign
63:17 - let's see if it has solution for not
63:20 - updating
63:22 - like updates being late to call
63:24 - condition only when the input is not
63:27 - empty
63:30 - okay yeah this is kind of like
63:34 - a hacky solution
63:37 - but let's do that let's try if it
63:44 - fudge course also this is not going to
63:46 - work because fetch courses is
63:49 - defined inside
63:53 - use effect but basically how I would
63:56 - resolve this is
64:02 - I will trigger handle search
64:07 - inside use effect
64:11 - so this use effect triggers when the
64:14 - page mounts right and then
64:20 - here we pass search term as a dependency
64:30 - and then let's pass
64:35 - handle search
64:37 - data okay now it's getting updated as we
64:42 - delete it as well perfect
64:46 - moving on to the categories we do
64:50 - already have the link at the top but we
64:53 - don't actually have a page for it nor do
64:55 - we have categories in the database so
64:57 - let's first ask it to create categories
65:01 - table and maybe also in the script to
65:05 - link our courses to categories
65:18 - write a script or SQL editor in
65:23 - please
65:29 - you'll create
65:39 - because right now if we go to courses it
65:42 - does have a category but this is not
65:45 - actually a relationship the type of this
65:47 - as we can see from Super Bass is
65:51 - like a variable and then this is kind of
65:54 - like should be like okay character type
65:57 - so it's not linked to anything there's
66:00 - no relationship and let's see if
66:05 - okay so we have our script create
66:08 - categories table first things first we
66:12 - have to do the do that then create
66:14 - category Junction table and add a unit
66:16 - constraint to prevent
66:18 - duplicate links okay so this is for
66:22 - relationship we create categories with
66:24 - table ID and the name okay can you also
66:27 - add
66:38 - here
66:51 - okay it's also going to insert all right
66:56 - let's run this one first and then update
66:58 - the
66:59 - relationship so where's our SQL
67:03 - editor
67:05 - create a table
67:10 - oops
67:13 - [Music]
67:16 - and let's
67:21 - double check that it was created my
67:23 - son's history perfect and then
67:29 - is there a way to just new query okay
67:33 - yeah I don't want to select the category
67:35 - every time
67:39 - okay now we're gonna create a junction
67:42 - table
67:48 - command enter
67:49 - so failed to run SQL query frankly
67:54 - constraint cannot be implemented all
67:57 - right
68:12 - oh that doesn't exist in courses table
68:15 - Yeah I was going to ask to update
68:18 - courses but maybe
68:25 - provide us
68:49 - no okay I should have been more specific
68:51 - because it just showed us how to update
68:53 - the table the two resolve this issue
68:56 - make sure courses table
69:05 - names match okay
69:09 - foreign
69:46 - so it's gonna update course table to
69:49 - remove any courses that do not have
69:51 - corresponding categories
69:54 - okay so I ended up finding the issue and
69:57 - then I ran this query it worked the
70:01 - issue was that it was marking the type
70:03 - was wrong in here so it was marking
70:06 - course ID also as integer and then I
70:09 - checked the tables to get the types and
70:14 - I'm just gonna name the query create
70:19 - relation oops
70:21 - rename
70:34 - okay now I'll ask it to in the existing
70:38 - if we can update existing
70:41 - courses and add categories to it but you
70:44 - won't know the ID so we might have to do
70:47 - that just from the table let's select
70:52 - courses we should be able to directly
70:55 - add the reference from here
70:58 - can we browse
71:02 - see
71:05 - insert row
71:08 - select record perfect
71:12 - and I'm just gonna randomly
71:17 - as a foreign key relationship so I don't
71:19 - think we can have duplicates but let's
71:23 - see
71:26 - python for data science
71:30 - okay
71:48 - that should be all courses now I'm gonna
71:50 - ask it when we are getting the course if
71:54 - it can update the function so we are
71:57 - also getting our categories with it so
72:01 - that would be inside course list and as
72:04 - you can see the more
72:06 - we're building out the application we
72:08 - have more context and it's getting
72:11 - harder to every time sometimes it
72:14 - remembers the com context sometimes it
72:16 - doesn't relate to it so every time
72:18 - passing all this information when it's
72:21 - just one search input it's becoming a
72:23 - little bit redundant and that's why it
72:26 - is a better it still can be done so far
72:29 - with this level of complexity because
72:31 - we're still not in we don't have a lot
72:34 - of elements but as we go into more
72:38 - complex it's harder to manage and let's
72:42 - without further explanation I'm gonna
72:45 - tell it that this is what we're using
72:47 - and say
73:11 - we ran
73:25 - and modify the course card so it
73:28 - includes category
73:38 - as so let's do a pill tag
73:56 - so it fetches all the categories
73:59 - initially which I don't know if we
74:02 - actually need the categories maybe like
74:05 - this one when we're fetching courses we
74:08 - can also fetch the relation and let's
74:10 - see how it's using this field
74:13 - set courses okay fetch categories
74:17 - filter oh this is it added for filtering
74:21 - interesting
74:22 - no why the colors keep changing but
74:26 - okay then we have the layout let's see
74:28 - where
74:30 - it
74:31 - uh the filters or I don't know what this
74:37 - svgs for oh I said I think it's the
74:40 - search one but we're using the icon from
74:43 - the library already for that and oh it
74:47 - updated it even filtered the courses
74:49 - without
74:51 - asking I just don't know where
74:54 - do the filtered
74:59 - categories where is this getting updated
75:04 - so it should be
75:10 - okay let's
75:12 - try I think
75:15 - course card
75:18 - mm-hmm
75:21 - so it wrote the code with slight
75:23 - modification so I'm just gonna copy
75:26 - what it updated first thing is
75:32 - this array
75:34 - I mean state
75:43 - and I believe this search term we have
75:54 - inside course page yeah
76:05 - yeah so let's
76:08 - add that in here same for
76:21 - patching and the function
76:28 - not this one but
76:31 - there's also this we for fetch courses
76:34 - we have that inside the use effects I'm
76:36 - going to add the categories and use
76:38 - effect as well for filtered courses
76:44 - and
76:46 - we can also oops ask it to
76:50 - continue while encoding that so it can
76:52 - explain what it did
76:54 - and where we can use this filter courses
77:06 - anyways
77:12 - and they'll search
77:15 - I'm gonna add this
77:18 - in the end
77:42 - oh and then we are zipper up it also to
77:44 - update course page let's
77:47 - add that mapping instead of
77:52 - we don't have the class for filtered
77:56 - courses that is the
77:58 - oh it does it afterwards okay
78:07 - so we're just passing courses of course
78:09 - and we can add another
78:13 - props but I'm not just gonna like
78:15 - directly copy it
78:18 - since then we would have to
78:20 - change course card a lot as well and
78:24 - we'll just
78:26 - copy this one
78:30 - [Music]
78:42 - okay
78:45 - course and
78:55 - category here
79:00 - courses page patch courses we don't need
79:03 - two fat courses one more time but
79:07 - okay we have filter search term
79:11 - SVG okay that loading screen
79:15 - um
79:17 - course card and continue one more time
79:19 - because it stopped
79:21 - here
79:25 - okay so after continue it's giving us
79:27 - the updated course code for course card
79:30 - I don't know if you picked up some
79:32 - different data sets because right now
79:34 - it's giving us more improved code with
79:36 - more functionalities without even asking
79:38 - for it so for example like ID it knows
79:42 - that it has that we're going to create
79:44 - or we would need to create like a
79:47 - separate link for each of the cores it
79:49 - also even provided like images even
79:53 - though there's no
79:55 - image of this like
79:58 - on the and split and splash is good to
80:00 - have just this like link with like you
80:03 - know added classes Etc it's pretty
80:06 - impressive I would say and then it added
80:08 - pill for category price which it didn't
80:12 - do it before and I haven't even asked
80:15 - for it and even we have a button for
80:17 - enroll well I would say that is really
80:19 - impressive let's see if it actually
80:21 - works though
80:23 - okay so I'm gonna close the sides out
80:35 - here we are on the course card the
80:38 - difference is that it destructs your
80:40 - category from here but I passed it
80:43 - separately and let's import link from
80:49 - next link
80:56 - and
80:57 - wrap
80:59 - forward
81:02 - save inside a link
81:16 - okay courses and for ID we're gonna have
81:20 - or we can get ID from here
81:25 - next up I'm Gonna Leave The Styling that
81:29 - we have right now
81:31 - and just going to
81:36 - add this one after so the title
81:45 - so like that it updated
81:50 - the title
81:52 - to be
81:54 - H2 font bold text
81:58 - large okay let's leave that one let's
82:01 - add
82:02 - description
82:04 - oh wait we have
82:11 - this actually
82:14 - goes
82:19 - oh yeah we already had category I'm
82:21 - gonna remove this
82:23 - that was like the hard-coded the one
82:25 - that we had
82:26 - in the database and
82:30 - that hardcore River was not referred to
82:32 - actual table and then
82:34 - after
82:37 - let's say that
82:40 - title we put
82:42 - description then we want to add price
82:46 - and the bottom
82:55 - or ask it next to also
82:58 - add the functionality for the button but
83:00 - first let's check if the categories are
83:02 - actually getting loaded can can declare
83:06 - variable defined with
83:09 - category interesting
83:14 - constant
83:16 - reassign oh we already have one
83:19 - that is true yeah let's remove that
83:23 - in here
83:29 - okay
83:36 - yes unrecognized though to fix the
83:40 - categories not being mapped properly
83:43 - issue I'm gonna go to courses table and
83:48 - I will add a column here
83:51 - let's name this categories
83:54 - ID and here the key is to add the
83:58 - foreign key relationship and inside here
84:01 - we can select the relationship to the
84:04 - categories and select the column from
84:07 - public categories to reference to yeah
84:10 - we're gonna identify it using the ID and
84:13 - actually needed
84:15 - no action uh their records existing
84:20 - let's do Cascade and
84:22 - save
84:24 - so
84:27 - I'm not moving this about the saving
84:32 - this one as well so it's successful
84:34 - credit categories ID let's populate it
84:37 - right now so and then here we can see
84:40 - this link so that means
84:42 - it's linked let's see if it's gonna let
84:44 - me
84:45 - select okay so we can just select
84:48 - directly from here
84:49 - I'll just
84:52 - pick one randomly
84:57 - and now how can we get this data on our
85:00 - site the client-side query so here we
85:02 - have API docs that we can look at to
85:07 - make sure
85:08 - our queries look good and we're going to
85:11 - take a look at it's also categorized so
85:14 - for the courses we already have a Super
85:17 - Bass from courses where we select
85:19 - everything but let's see how we can
85:21 - select the nested relationship
85:24 - and that would be redrows filtering from
85:28 - courses select categories so we can just
85:32 - directly oh one more thing we have
85:37 - so we don't need this category anymore
85:39 - now that we have the link so I'm gonna
85:42 - do
85:43 - this and do like directly
85:48 - delete from here and going back to the
85:51 - API Docs
85:53 - courses
85:56 - let's say
86:00 - ID oh so we can do from courses
86:05 - select categories ID and let's see how
86:09 - we can just directly access the
86:11 - categories
86:13 - table from there okay let's see if this
86:17 - is gonna work I'm gonna update
86:19 - from quotes let's do this
86:24 - and let's select everything that's
86:27 - related for courses and here let's have
86:35 - and inside here we can grab ID and name
86:39 - that's the only two Fields anyway so we
86:40 - can also use like
86:43 - asterisks
86:48 - save it
86:50 - and if we reload the page right now and
86:54 - open the inspector we should see that
86:58 - the categories
87:01 - comes in as a
87:03 - like a object and
87:07 - courses page once again State and here
87:10 - we have the data objects for
87:14 - the question and it does include
87:16 - categories now what we can do is the
87:18 - reason it says unrecognized is because
87:21 - we're passing in the object so we should
87:24 - say we just want to get the name that
87:27 - would be inside course card oh wait we
87:32 - don't
87:33 - need the list oh actually yeah it is
87:36 - getting the oh categories comes in as an
87:40 - object so okay
87:41 - [Music]
87:45 - but
87:47 - name then if this
87:51 - exists then it would be the name
87:56 - is that how it is yes okay let's
88:01 - save this and if we
88:05 - reload right now we get the names as
88:07 - well let's quickly fix also the color
88:11 - of this one introduction okay so this
88:14 - would be inside
88:16 - course card wherever we have title I'm
88:20 - just gonna
88:21 - set it same color or maybe like one
88:25 - shade darker as the description
88:32 - okay that looks better
88:34 - so even though we have authentication
88:36 - and we're able to sign up users and let
88:39 - them also log in we still don't have
88:41 - users table where we can add other
88:44 - informations about user for example
88:46 - saved courses and Etc in the database so
88:50 - in in this prompt we are gonna see how
88:53 - we can create that table and accommodate
88:56 - those courses list
89:03 - okay
89:05 - foreign
89:28 - so giving context that we have
89:30 - authentication working and we need a
89:32 - script that will create this profiles
89:34 - table and I would connect it to
89:37 - currently existing auth users and what
89:40 - it is doing is actually it's referencing
89:43 - it's still generating user ID which is
89:45 - going to be a unique ID but it is
89:47 - referencing it from of the users that is
89:50 - how we access this like users from our
89:53 - authentication feature and username is
89:56 - unique full okay it added some other
89:58 - fields which I didn't ask to bio Avatar
90:02 - time set Etc and alter tables profile it
90:06 - also ended gender and birth date this
90:11 - creates okay
90:13 - the user ID is set up as a foreign key
90:17 - to the ID okay now that we have the unit
90:21 - constraint to ensure that usernames are
90:23 - unique with the profiles tab once you've
90:25 - created profiles you can create a new
90:27 - profile Furniture when they first sign
90:29 - up or log in so this is kind of like
90:33 - manual approach we can improve that but
90:38 - for now let's follow the manual one
90:41 - first our SQL editor let's run a new
90:45 - query
90:51 - no rose returned I'm gonna also rename
90:55 - this
91:08 - and let's check if we have table
91:11 - profiles here and let's insert row so
91:16 - for ID it could be generated this would
91:19 - be also automatic and user ID let's
91:21 - select record we should only have
91:24 - one record where I come from the email
91:27 - yeah that's that one
91:29 - username
91:30 - [Music]
91:35 - else
91:36 - name
91:38 - bio I'm not gonna
91:41 - set those and see hopefully none of them
91:43 - were required
91:46 - okay so that's that we have this user
91:50 - and now let's ask it to create an
91:54 - accounts page
92:34 - so we'll start building out accounts
92:36 - page where user first we wanna see user
92:40 - that we're logged in with and then
92:42 - afterwards we want to let them change
92:45 - their information this should be in the
92:47 - format of a form and once they click
92:51 - save they their information should be
92:53 - sent to the database
92:55 - and uh what else is there afterwards we
92:58 - do that then we're gonna start building
93:01 - out relationship to the courses so
93:04 - saving saved courses and then we're
93:06 - going to list that on the account page
93:08 - as well but first let's get this done I
93:11 - am
93:12 - going to Let's this code fetches
93:16 - profile from and then this is the fields
93:19 - then it created a handle update profile
93:21 - function now the this assumes so it's
93:26 - giving us a warning that we should have
93:27 - this if now you'll create the tables
93:29 - before using this code perfect oh and I
93:32 - think it was giving us code but that
93:35 - script we already ran but let's just
93:38 - in case is this the same one yeah I
93:41 - think it's the same one okay I'm just
93:44 - gonna
93:45 - copy the first version it's giving us
93:48 - inside
93:50 - we don't have Pages created I can't just
93:54 - create it so I'm going to create a new
93:55 - file
93:58 - dot Js
94:02 - actually I'll create like folder instead
94:12 - and then in here
94:15 - your file indexed
94:22 - let's copy this ex make sure everything
94:25 - looks good except the Super Bass is an
94:28 - import
94:30 - default we don't have use user from auth
94:39 - Oh see now it's giving us a different
94:51 - let's ask it
95:06 - so for this link create certainly all
95:10 - just file would typically be
95:14 - so it's created sign in sign up
95:17 - etc
95:18 - those files functions which we don't
95:21 - need since we're using the wrapper and
95:25 - update profile but I'm not seeing
95:29 - use user will be used in the uses or
95:33 - hook okay so here
95:36 - wherever we have use user there's
95:39 - nothing that's or maybe it returns
95:42 - and user but I doubt that I think we can
95:46 - get session from however we're getting
95:48 - in the header
95:54 - maybe this one has
96:00 - session
96:01 - [Music]
96:03 - yeah Super Bass off
96:16 - and we only need user
96:19 - ID so
96:47 - Russia
97:01 - oops
97:10 - so still we're gonna remove
97:14 - this too
97:24 - if
97:29 - session
97:33 - let's do obsession
97:47 - ID
97:54 - we're gonna find the user in our profile
97:57 - table using that ID and
98:01 - then we can set it I'm going to remove
98:04 - this console log here
98:08 - and then handle profile okay this should
98:11 - look good we only have two forums and
98:16 - user profile so if not here
98:19 - then we can just
98:22 - display that it's loading so
98:42 - all right Super Bass is not defined yes
98:45 - because
98:51 - the function
98:57 - let's
99:09 - Library
99:17 - yes here we have name as as you guys
99:20 - remember that's what I put in and then
99:23 - bio we can update the profile let me
99:26 - real quick add the container here just
99:29 - so it's like
99:35 - equals
99:38 - Flex
99:39 - justify Center
99:43 - items
99:47 - Center and then
99:50 - another one oops
100:07 - gonna come after our logic
100:19 - so
100:22 - and let me set the width two
100:30 - [Music]
100:32 - so this is not
100:35 - Oh by default
100:37 - just if I can't
100:40 - that should be you'd be like okay by
100:43 - default the container does not have
100:45 - margin Auto also we need to add like the
100:50 - header at the top
100:57 - because layout we have we can extract
100:59 - that
101:01 - anyways let's see if it updates bio
101:09 - user is not defined okay so that's
101:12 - really also need to update the Handler
101:14 - profile function
101:16 - that would be session user ID
101:25 - updated successfully okay let's move on
101:28 - to the saved courses and ask how we can
101:32 - handle that
101:55 - so first we need to update tables at
101:58 - most likely a column for the courses and
102:02 - a relationship instead it did create
102:06 - user saved courses table and it added
102:09 - references to both
102:11 - both users and courses okay and add a
102:15 - unique constraint to prevent duplicates
102:17 - saved that's good alter table courses
102:21 - and add save count interesting so we
102:25 - know how many times the course has been
102:26 - saved
102:27 - create or replace function increment
102:30 - update user set cost to increment
102:33 - oh every time there's a new one it will
102:36 - automatically update we don't have to
102:37 - actually do it from the query which is
102:38 - nice Implement saved count trigger
102:41 - update to decrement
102:44 - so that took that into consideration
102:47 - and the script questioning table with my
102:51 - main relationship between users and
102:52 - courses at the union constraint to
102:54 - prevent duplicate
102:58 - um
102:59 - triggers okay
103:27 - now let's see how we can
103:30 - take a relationship and put it into
103:34 - the database so that would be for
103:36 - function in Rolling course and that's
103:40 - gonna take the session from Super Bass
103:43 - okay I guess that's another way of
103:46 - accessing session and insert user ID
103:49 - course ID single there are okay the next
103:51 - I'll fetch how I'll ask how we can fetch
103:54 - the saved courses so let's hopefully
103:56 - this script works because last time that
104:00 - we created a relationship
104:03 - they're not really
104:05 - workouts you
104:08 - query
104:17 - Princess where okay auth users
104:22 - hmm
104:26 - I guess we could maybe a bit better to
104:30 - reference profiles table
104:33 - but let's see if it works with no Rose
104:35 - return okay here's our user saved
104:38 - courses
104:39 - and these are those reference user ID
104:41 - and course ID that's great okay
104:47 - and let's try this function
104:55 - copied and going to course card where we
104:59 - have
105:00 - this button and I will
105:07 - add that in here we can move
105:14 - this into
105:17 - here actually let's so course card
105:21 - Library
105:23 - we don't need those
105:31 - just
106:01 - okay
106:03 - let's save it and
106:09 - should be user saved courses
106:14 - let's see if what it says when we don't
106:31 - to the function to trigger
106:40 - await post okay yeah that's
106:49 - we're not using because I was assuming
106:52 - we're going to create a separate API for
106:54 - that so let's just do
106:57 - this
107:05 - and going to
107:11 - oops once again it's unrecognized it's
107:15 - weird because sometimes it fetches the
107:17 - category sometimes it does not
107:20 - even though the query is the same like I
107:22 - have not updated
107:26 - versus not the course card
107:31 - here
107:33 - it's supposed to get it okay
107:37 - so let's try if enroll works
107:47 - I don't know if it's doing some kind of
107:51 - cheshing because
108:00 - oh well okay
108:03 - sign out and roll
108:09 - oh because I pressed
108:20 - oh this is a link and we don't have link
108:22 - yet okay I'm gonna
108:26 - remove the link
108:36 - session is not yeah same thing the way
108:39 - we are getting a session we can
108:41 - replicate
108:44 - that
108:45 - since that's working already for us so
109:03 - and that's a hook so I'm gonna Define
109:04 - outside of
109:06 - the function and constant user equals we
109:11 - can access user like that session
109:21 - please start again okay
109:26 - sir starting an objects
109:29 - um
109:32 - so try and then we have
109:49 - let's see if it's saved
109:56 - okay no I didn't say either
110:08 - we are not passing the course ID and
110:12 - that is you can just
110:17 - take it from here
110:27 - foreign
110:42 - let's ask now to get all our saved
110:48 - courses for us
110:53 - but that would be I'm gonna pass the
110:56 - name of the table
111:27 - relation table
111:34 - oh wait we are
111:46 - Super Bass
111:54 - okay
112:05 - we want to
112:09 - I think it's thinking I just want to run
112:11 - it in SQL editor um this courses
112:18 - JS page maybe that would
112:23 - all right
112:24 - [Music]
112:33 - yeah we don't have an API
112:39 - and we also don't have
112:48 - this Library
113:05 - oh it's trying to get
113:57 - okay saved courses I'm gonna
114:03 - open this to the side and here
114:18 - let's add that extra State for the saved
114:23 - courses let me scroll
114:34 - or maybe we can create like a separate
114:36 - component that would be probably better
114:38 - and then import it into the account for
114:41 - that I'll create in components new file
114:46 - saved courses.jsx
114:50 - and let's copy this
114:55 - paste it and maybe user ID we already
114:58 - have it on account so we're just gonna
115:00 - get that from account let's remove
115:05 - go over line by line
115:12 - Super Bass saved courses
115:16 - user ID let's pass that and fetch
115:25 - if we have user
115:28 - ID
115:37 - course I did such a threads it should
115:40 - get from here
115:48 - data okay and then say it courses it's
115:50 - just gonna list the titles which is good
115:52 - enough for now
115:55 - let's import this in the account export
115:59 - default yep
116:30 - user profile this will be once you have
116:33 - user profile available
116:36 - before that we can't
116:39 - pass
117:12 - user ID equals
117:15 - I think we should be able to access this
117:17 - from here
117:26 - so I think I misspelled
117:29 - saved courses yeah
117:38 - your saved courses
117:42 - let's see what's that Theta here because
117:46 - it should
117:49 - create a list are we on the okay
117:57 - set saved courses course data
118:13 - or if we don't have access to the I
118:16 - don't think this one saves
118:21 - yeah because this condition has set
118:23 - saved courses but I don't know if this
118:25 - one's not
118:36 - you know it's Syntax for type
118:41 - uid
118:46 - I think I'm using
118:57 - let's see what we have in user so
119:00 - accounts
119:02 - cone
119:06 - State oh it's user underscore ID
119:10 - all right that's what I'm gonna pass
119:13 - okay
119:24 - yes okay so now we can see the
119:26 - JavaScript so fundamentals that I
119:29 - enrolled in on the courses page
119:33 - layout from inside of
119:37 - the courses page to our
119:40 - application file because we want to have
119:43 - the header also on
119:47 - our courses so and other pages so let's
119:52 - do
119:53 - this
119:57 - and that should be
120:01 - fine and going to pages index.js
120:09 - maybe apjs would be
120:14 - okay so this is where we have the
120:17 - session context
120:18 - provider and in here I can do
120:22 - layout the
120:33 - also import it at the top
120:44 - so it's in
120:54 - this is inside pages so
121:15 - find uh it's probably default okay yeah
121:26 - great going back to courses now if I'm
121:30 - enrolled in JavaScript fundamentals
121:34 - I'm still not sure why this is not
121:37 - getting this relation loaded
121:44 - try one thing
121:53 - okay now it's there weird
121:57 - so if I'm oh I'm already enrolled in
122:01 - JavaScript fundamentals let's see if we
122:04 - can ask it to update this button and
122:08 - show like enrolled or maybe like a check
122:11 - mark
122:13 - um
122:45 - and I think is the react icon Library
122:48 - yeah react
123:05 - and let's give it the name of the table
123:07 - just in case it goes down a different
123:11 - route and that would be user saved
123:16 - courses
123:25 - create also a bookmark icon so instead
123:29 - of having a text of enroll we can just
123:31 - press that to save a class and probably
123:34 - removing that and a floating loaded and
123:39 - when the button loads it checks
123:43 - redirected look okay I'm gonna update
123:46 - the user part because every time I feel
123:50 - like it
123:51 - gives us different ways of checking user
123:54 - Ascension but we already have a way that
123:56 - we figured out it's working for us I'm
123:58 - just going to use that and okay so it's
124:00 - supposed to fetch the courses and check
124:02 - which ones in the cooler which course ID
124:05 - we have and we are passing course ID as
124:09 - a prop so let me copy code right now
124:11 - enroll like button it's just inside
124:13 - course card so I'm going to create a new
124:16 - file for that let's see what it needs
124:19 - okay
124:29 - so instead of checking user session I'm
124:31 - also going to pass
124:33 - user
124:35 - ID
124:37 - yeah because we don't want to check on
124:39 - every course card if you have a session
124:41 - or not we can just pass it from there so
124:44 - removing oops
124:47 - removing this one
124:51 - updating Super Bass
124:59 - and this is in yeah going back Library
125:03 - react icons use effective State that's
125:07 - there enrolled set enrolled okay and
125:10 - then
125:12 - no user user
125:17 - ID
125:21 - same thing
125:24 - here and then the these are the
125:28 - dependencies I'm also going to update
125:31 - if user ID or course ID changes we have
125:33 - to obviously
125:35 - refetch this data redirect you actually
125:38 - we can redirect them to logging
125:44 - it's true
125:48 - actually let me
125:52 - I'm gonna do this this is here
125:58 - replace it everywhere
126:00 - except
126:03 - oh no not this one
126:09 - okay this is already replaced so I'm
126:12 - just gonna
126:14 - do it myself and
126:18 - so it inserts save the course if not
126:22 - already saved
126:24 - okay
126:26 - and then it updates set enrolled
126:29 - otherwise removes or delete or inserts
126:33 - up gray and then
126:35 - the icon gets updated accordingly that
126:38 - should be fine let's import this into
126:41 - course card
127:08 - and oh we also need
127:10 - we don't need on click anymore because
127:13 - it's gonna do that
127:29 - and let's see so of course ID
127:34 - going to be equal to ID here
127:43 - and then user ID
127:48 - that one we can also pass it down from
127:54 - courses index
127:57 - we don't already have that array
128:00 - okay
128:22 - just gonna
128:25 - move this here
128:36 - foreign
128:55 - equals
129:00 - let's see if this is the case
129:03 - um inside okay so once we map and now
129:07 - let's go back to course card
129:11 - get user ID from here so we can pass it
129:16 - in here
129:20 - the one issue is that if user ID hasn't
129:23 - been
129:25 - loaded
129:28 - should still update
129:33 - new session
129:41 - okay
129:52 - import statement at the top
130:06 - okay so I have this
130:09 - enrolled so it's showing that I'm
130:11 - enrolled in here I wonder what it's
130:13 - supposed to show when because we do have
130:16 - the logic
130:24 - bookmark
130:27 - so maybe because it doesn't have a color
130:31 - or
130:36 - oh yep outline works
130:40 - great
130:42 - that's actually all this to the left
130:49 - load this categories get updated so
130:53 - maybe there's some kind of caching issue
130:55 - that
130:57 - oh I would note to like double check if
131:00 - categories are not fetched then refetch
131:02 - it that should solve it so this would be
131:05 - it for this project and to quickly recap
131:08 - what we did so we we set up this course
131:12 - app using make sure yes Super Bass
131:14 - Tailwind reused react icon for our icon
131:19 - library and then view of the other
131:21 - libraries after that we set up a schema
131:24 - to Define courses categories and user we
131:28 - did the setting of the database meaning
131:31 - like putting some dummy data for testing
131:33 - in it we also checked I'm using LGBT
131:37 - what like file structure should look
131:39 - like what schema should look like even
131:41 - it generated data for us and we utilized
131:45 - it also to for styling creating this
131:49 - like responsive grid elements all this
131:53 - like colors and Etc we implemented
131:56 - authenticate station and then after that
131:58 - we created users table where we store
132:01 - more information about the user users
132:04 - can log in using email and password and
132:07 - we also try to came across obviously
132:10 - there are some issues that we try to
132:14 - debug using the documentation of
132:16 - superbase itself and chat GPT we created
132:20 - this like layout that right now it only
132:22 - has a header that and then layout is
132:25 - conditional meaning if we we're on a
132:27 - signing page it's not going to show up
132:29 - also we for the courses page we have
132:33 - categories page we created relationships
132:36 - in between those and then we create a
132:38 - relationship between user and the
132:40 - courses we created functionality for
132:43 - user to save the courses or remove the
132:46 - course and for them to go to their
132:50 - account get their information get their
132:53 - saved classes and also update their
132:56 - profile like future future changes that
132:58 - I would do is probably on the accounts
133:00 - page I would add all the fields that we
133:02 - have right now in the table like I think
133:04 - there was the image there was like
133:07 - gender year
133:09 - Etc and then for the save courses maybe
133:12 - I'll modify I'll get more information
133:13 - about the course and I'll also give like
133:16 - a remove button that they can like
133:19 - remove the course like their enrollment
133:23 - and going back to courses page yeah we
133:26 - also did this search where we can filter
133:29 - out our database either like
133:31 - descriptions or the name of the courses
133:35 - these categories I still have to fix
133:39 - that but we also have pricing and we
133:42 - wanting like filtering behind the scenes
133:44 - like functions exist but we haven't
133:47 - actually added filters so for example
133:49 - price filter would be a good feature to
133:52 - like practice on next and going forward
133:55 - these are some of the aspects of
133:58 - development that I would consider using
134:00 - chargpt as an assistant first one would
134:03 - be called optimization technique so what
134:06 - are some of the ways to optimize
134:07 - performance in this application is one
134:10 - thing you can ask what are some of the
134:12 - ways to fetch this kind of data faster
134:14 - and or how to test the performance
134:17 - itself is something that you can ask and
134:19 - not only performance but in general if
134:22 - you're using jazz or if we have never
134:24 - used it for example it might suggest
134:26 - that as a tool that you can use and ask
134:29 - like guidelines or list of like a
134:31 - template of how you can test certain
134:33 - weather components or API requests or
134:36 - Etc also very helpful in writing a
134:39 - readme or technical documentation for
134:42 - example in this our case like I would
134:44 - say based on the code that was generated
134:46 - in the this conversation so that way it
134:49 - kind of like parses through and takes
134:51 - like the whole conversation as a context
134:54 - generated a readme that at least step by
134:56 - set guide on how to set up the project
134:58 - so we did set set it up but we also want
135:01 - to see step-by-step guide and also I'm
135:03 - gonna add readme to Output this project
135:06 - in a GitHub repository and the link
135:08 - would be shared so also you can go over
135:11 - the readme there and set it up yourself
135:13 - and if I set up this boiler played code
135:17 - very simple P probably next thing I
135:20 - would do is just have a list of things
135:21 - that I thought about or could be a good
135:25 - practice to follow along at the
135:27 - professional like website or working
135:29 - application would need so you can ask it
135:32 - to now in this case before that it was
135:34 - your senior architect to a software
135:36 - engineer now you can ask it to be a
135:38 - product manager and tell it that you
135:40 - already wrote some code and write it
135:43 - like the other tasks that would be
135:45 - needed to be accomplished and what I'll
135:48 - do is probably it's going to at least
135:49 - task in bullet points so I would maybe
135:51 - like take this put it in notion and have
135:55 - like a zapier integration that that in
135:57 - from the notion payroll database it
136:00 - automatically creates jira Asana
136:02 - whichever is your task management tool
136:04 - tasks and then you can go over the board
136:07 - you can even assign it to other people
136:08 - or for yourself to have a good way of
136:11 - continuing working on this or if you're
136:14 - new to full stack development you kind
136:15 - of see this template of what are the
136:18 - list of things that need to be done and
136:21 - hopefully you enjoyed this tutorial you
136:23 - learned how to use chat GPT but also
136:25 - some other Concepts there and thank you
136:28 - for watching

Cleaned transcript:

learn how to build a full stack application using chat GPT in this course you'll learn how to Leverage The Power of chat GPT to accelerate your development process and make programming smoother Judy is a full stack developer and teacher in this course she'll demonstrate how to build an educational application using chat GPT to ask questions about coding syntax troubleshooting and learning best practices you'll also discover how to use chat GPT to build various features including authentication browsing courses and creating categories so let's get started and see how chat GPT can help you build amazing applications with minimal manual coding hello everyone this is Judy and in this video I'll show you how to use chat GPT on every step of the way for full stack development one of the benefits of chat GPT is its abilities of accelerating development and making programming or learning process much smoother during this one walkthrough will build an educational application and you're going to see that minimal manual coding is done but don't take my word for it watch the tutorial examples of questions we will ask chat GPT include coding syntax troubleshooting learning best practices and receiving guidance on picking the right tools and platform for your project also using it into our application will build various features such as authentication browsing courses its categories and many more I'm thrilled to present various prompts I have explored and demonstrate how you can make most of charge GPT so without further delay let's dive right into it when using chatgpt as a coding assistant it's important to provide the right context the model has been trained on various kinds of data and its default answers can be quite generic however by providing more specific information we can achieve better results with that in mind I'm gonna ask it to act as a developer so I'll say I want you to act as a software developer I will provide some specific information and this is where we give it indications as to what its mission is throughout this conversation which is to come up with an architecture for developing easy to use course app so far this description contains very general information the goal of this app is to allow users to take online courses on different subjects and Below let's list uh features we want the app to include which is going to be authentication courses and their categories we also want course search payments and functionality of saving courses as an answer chai GPT proposes an architecture and provides a division of the stack it offers as you can see sections for both frontend and backend development with suggestions for tools and approaches within each section let's review the list and furthermore you can reuse this template the description May differ depending on the situation but still could be useful reference for your future projects and if you want more comprehensive guidelines on building full stack apps check out my notion template for full stack roadmap I have included all the parts of the stack as well as the topics and resources you would need to build applications and yeah check the link in the description if you're interested all right let's go over the list now we have user interface developer responsive userfriendly UI using modern Technologies such as react and angular to provide an intuitive and engaging user experience so for the authentication a scalable solution and it provided us with options of os JWT and open ID connect these are indeed I would say one of the most popular authenticate ways of authenticating users then we have course listings display in userfriendly allow users to browse and search Implement filters and sorting options for enhanced visibility okay most of the searches do have indeed filters and different options so for sorting that's good payments are processed through two common Solutions stripe and PayPal and additionally we have course details course progress tracking and the ability to save progress to your profile let's take a look at the back end what components do we need first we need an API so that the data can be communicated between the backend and the front end using a backend framework such as node.js Django or laravel once we have that we can focus on the database chat GPT answer mentions mongodb in MySQL and postgresql as examples but these are very different solutions and to get started let's pick one database and gather as many details as possible about it so I'm gonna say let's start with database how would you structure it and would you pick relational over nonrelational here if you don't know the differences between the two you can also ask what kind of databases are there in general so it would give return list of like descriptions and differences and it does suggest to our question to use both and let's understand what's the reasoning behind it so consistency and Clarity are crucial when defining relationships between entities such as profiles and courses well it's straightforward to determine whether a user is enrolled in a course or not tracking course progress can vary significantly between user and courses therefore doesn't require strict consistency and I agree with the statement uh we do not need like a very structured data for progress but we do uh need a more clear definitions for courses and the profiles entities itself let's dive into the courses table and I would say how would you structure courses and charge GPT returns fields for the table but we can also ask it to print the output in a tableer format for better with visualization so that's another prompt to remember and this is the stage where you you can request notifications and iterations before jumping into building the app since this would drive the core functionalities I would recommend taking enough time to think about it however don't spend too much time on it not to delay the start of the project and when it comes to getting assistance from chai GPT it's good to have this like stepbystep approach so for example I don't want to add the metadata so I'm going to ask can you remove metadata from the table and it should uh output a new table without it and now we can start thinking how can this table can be translated into a code so I'm going to ask it to generate a Prisma file that is where we Define a schema for our database so it's good that it also marks for example course ID that can be used as a primary key and it also gives us explanation because this is the first time we're using Prisma in this conversation so it would Define the prism as a modern database toolkit that provides typesafe and then intuitive way to define data models and interact with databases in various programming languages and to note even though this is created in Prisma it depends on what kind of language or database you're using it with and this is also indication where we can give it more details also if let's say you already have used Prisma and you don't want extra explanations we can just use this prompt code only and it will be faster if you're generating a big code and want it quicker okay so now my next question would be how can I use this with the backend that I have picked and this will give us what Super Bass is which is an open source alternative to the Firebase and let's see what else it tells us about it uh here's how you can set up prismap for Super Bass suppose uses postgresql and it's also providing us with the information that this is relational type of database so I'm going to list all the parts of the stack that I'm planning to use and instead of me going into for example three different documentations because I want to use actually a super bass and Tailwind the charge Deputy should give me all the steps so I don't have to like go look for it and on top of that if any of the two technologies uh that I will be using are not compatible for example charger PT should also point that out and once it's done printing I'm gonna follow the steps uh here with some modifications first step is to run the command to create next app and for that I'm gonna open up a terminal and paste the command here as and select the configurations for my next this app I do see that it says that the next step to install Prisma but I think Super Bass should have its own client and we can check that with chatgpt the answer that we got is that we do need a client module which is super based JS and it also provided a install command and an example how to use it with the courses table so going back to the terminal going to I think it named it my web app and then inside here copy code while this is installing um another thing that was mentioned here is how to set up Super Bass so that would include creating a new project and obtain connection URL for your super based database and you'll need this URL to connect your next.js app to Super Bass so let's go and do that I'm going to open this up I already have an account and so I'm gonna sign in create a new project I'll name it course app for password I'm going to let it generate and then copy press create now we need to get the connection URL that was mentioned here let's ask um tell Chad GPT what it thinks is the best choice for ID for this project I do use vs code and I think you also suggest us to use that and when starting a project with a new stack it's also helpful to check what extensions are available to use with it they can assist you in your development process especially when it comes to different kinds of files and syntax highlighting error handling this is what some of the things that extensions can provide so asking what extensions would you recommend to install for this Tech stack okay and now it's listing them arranged into like categories and you can install I think I have most of this already um this extensions so to continue working on the project I'm going back to the instructions that it gave us it didn't specify which file to write this code so I'm going to ask it I also want the whole application to have access to the Super Bass client which file should I implement this and how can I use that implementation of inapp file that's great all right let's do this let's create inside our source new file and yeah that is a cleaner way of separating the initiation of an instance of the service let's copy this code I'm going to paste it and let's ask how we can add environment variables it's going to tell us to create a new EnV local file and make sure to add that in so it's a good thing that it tells us it should be ignored to prevent it from being committed in a Version Control I've seen a lot of developers make a mistake of accidentally committing their API Keys which is like very sensitive information um and end up getting like a crazy high bill from their providers so to prevent that let's um add those configurations in copy the code and paste it here so that's our first this goes in yeah okay so then it even gives us the format of how it should look like and let's copy this from our project so I'm trying to see where did the oh here it is so yeah it probably got example from here and I'm gonna copy this replace it with it and super bass key then that's the key okay now I'm Gonna Save my changes also for the super super bass file and let's open up the terminal and run the command and then render so we can start our development instance and navigate to localhost to result in where our next GS app should show up now the next piece is that so what we did with basis basically we connected our app to our project in the Super Bass and now let's ask T what it thinks about like writing the schema I did ask it already scheme in Prisma but there's an option to do that also without a prism on so let's see what it says so push my schema to newly created supervised project and do you recommend using Prisma for this course app or just super based client yeah so it gave us this Prisma setting up Prisma steps but I want to know what it says about just defining as for whether to use Prisma or super based client it depends on your specific requirements and preferences a powerful way to interact including Super Bass it offers Advanced features Etc so it does say that just going with Super Bass and it is more suitable for smaller projects or when you prefer more lightweight approach without the advanced features a limited choice so okay let's say if it's we did do Peak the smaller model more lightweight approach what it's gonna propose instead foreign the first thing that I want to do is I want to add the course table so how can I push that to the Super Bass and it does give me the code that it already printed out but once you have crude operations okay but this is just the functions on the clients that we actually need to add the table here so we can do that also by doing manually but since we're using chat GPT let's figure out a way how can we get that from the script so let's see can you write a script for a SQL editor in Super Bass maybe you'll understand that one table for the project here's okay great now let's copy this one you can execute this on the SQL query or any SQL editor that is connected to your projects to create courses table let's see let's just select table and I'm gonna select all of this paste this in and click run where's this here success no rows return now next part after creating schema is sitting the database can you as first in Saving the database what script can I run to add some rows to course table and this should generate Us by like some sample courses that it will come up with so for example we have and it follows like the structure so it will create some dummy data names descriptions Etc and let's copy the code and run it into here let's go to the table see if the have been the data has been added here great so now we are we have the data so we're ready to copy the this code that it wrote for us on the client side inside the app we can display the data so it created some functions so crude operations okay perfect but before we go to the crude let's just display the data and as I remember it created this font okay like get function here now I'm gonna ask it to create a component that lists all the courses yeah so it also takes in the context that it told us to add this Super Bass file in the loop folder so that's great though it doesn't show how to set up in the beginning and now I'm gonna copy the code and let's see where it tells us to save this file okay let's just create a new folder for components and of course with jsx we can paste it in here first add that into the main page which is index.js so I'm gonna remove all this extra code here oops let's do import what kind of export default okay import course list from and this is components okay assuming I imported that correctly await Super Bass from okay so we need to update let's see export default super piece okay so what it did mistake is the import statement is I should be asked for default and here we get the list of courses The Next Step would be as we start creating more components and we're gonna have more files asking it about file structure best practices is also naming conventions of these files to recommend the file structure for an xjs using Super Bass and Tailwind should be following okay so and then it took into the considerations that we have several features and divided the page into the features so in xjs if you're not already familiar the way you create a page and the new link is by creating files inside of pages folder so it created login sign up dashboard um page for us and also in courses we have the list of the courses course ID and the new creation codes which is pretty impressive as for components layout is what we use like reasonable things in the layout for example header footer Etc it did create all of those and I guess the course card the component for displaying a course card okay interesting and then we have a setup for Super Bass and tailwind and some styling usually we don't have much in the global assistance and the entailing file any custom code that you update to the Tailwind or like setting a thing goes there and let's see the explanation so you just go through uh what I mentioned and for naming conventions it's recommended to use descriptive so it offers us two cases camel case and a kebab case so let's see which one it went for of course you can name files related to course with course as a prefix okay so course list that we already have that and then detail similarly you can follow similar conventions and let's see how it named the components with yeah the capitalize first okay now let's ask it to create course card for to rewrite course list using the course card and let's also ask it to do the styling like of how we want so for courses let's display them in Grid and also let's ask it to create card with some like Shadows borders Etc so we can all describe it to it and let's see what kind of how exactly does The Styling um foreign will actually do that but we don't have images at the moment and since this is just such a UI it won't be able to generate the images but we can ask it to create like something that looks like a thumbnail using using the styling I don't know something like that all right so I'm going to stop January because it gave a sample course Theta when it should uh take the course data from the super base and maybe because we asked it to do the colors okay can you use get course function from supervised that is why it's good to be as detailed as possible let's see if it's okay Pages courses and then it added some classes for The Styling make sure to import and if we say continue it should continue because we also ask for the course card yeah here it is yeah if you ever see or sometimes it cuts off in the middle of the word because it hits character limits so just say continue generate background color oh interesting so it actually did a colorful and text loss based on course title okay let's get to components course card and I don't think I updated this one but Pages courses let's create courses folder not the file in the localhost we can navigate two courses can't result prop types you can ask it to remove or we can just remove it ourselves and just let it know that next time don't add prop types so that was in course card or we also install it depends on the preferences okay class names so let's install the class name since npm install s so it is a good library to use like when defining when making conditional statements in Tailwind so okay courses what about components can I read properties of undefined okay so it messed up the import statement of Super Bass so if we ask it to next time let's see what it says yes default settings okay then it'll go as a data version and we do have courses okay so there's no price just the title and the description background white so this is supposed to be the image and text font interesting background I PJ yeah those are definitely not the Colors Let's just set this to Gray and this one as well now let's move on to authentication and see how we can Implement that using charge repeating we want to use super bass oath and we want to ask how to create Pages or how to protect our pages so which pages are going to be for authenticated users and Etc it's going to tell us how to set that will tell we are setting location after courses page let's see if we have super bass UI might not be installed so I'm going to copy that and display oh it does come with UI so we don't have to create a separate and now protectors and Pages it's going to show us how to have like courses display only on four authorized users let's see if we don't it by default selected Google for us providers we'll have to configure Google so let's see if we can give us authentication only by you username and password okay so this credentials is what's gonna add end options custom DIY change your email to your desired username field okay yeah we don't want to use the custom methods just okay it's just showing us now let's check if one thing is users can actually sign in and sign up but another is creating user table so let's see if this is actually gonna create a user table that we can get information like email of users from because in Firebase for example we have to create a separate like table where we can reference user ID in firestore so let's see because if not then we can also ask to create a custom signup function where we do that a little crazy those table okay so just important questions that's great and now it's giving us the function when we can fetch courses that users take Taking later on we can also ask once we have the users created for us to map some courses to it but first okay let's get started with this installing the UI piece first npm install UI this we already have a layout if we don't I think let's reference the file structure that it proposed which is here and in components we can create layout Js we still want to check Imports if it looks correct import Tailwind so we don't need to import Tailwind I'm gonna remove that render authentication UI render the last of the layout okay and then children go here perfect now we can take this layout and add it to our either index page or courses page let's add it to the courses page so and then this is export default and I'm gonna wrap the rest of the components inside the layout here and resolve what is that oh it's inside components Super Bass is not defined it would be nice to like have a list of few things that we want to remind it every time because I think it did uh they actually didn't import super bass at all okay that's not working well Google we don't have the configured let's do credentials okay oh and the next year is documentation so I'm gonna follow that instead since we're getting errors and apparently there's a helper's library for next year we had the one for react but probably this one is more suitable so let's I'm gonna go ahead install it and also follow the directions here additionally install for react components and hooks so we do already have that one installed and setting up environment retrieve your project URL for API settings we did already set the environment variables we since we connected to Super Bass but we should check because it's probably using this very specific names like this helper function so I should probably check if our names are matching that would be in the in re variable so yeah here it's using a nonkey instead of the key and public public supervisor see ya Let's update this one save it and also let's update it was used in only in Super Bass files so yep so we need to change it and once we update the environment variables let's rerun the application after that there's like a basic setup code that's provided to us that's in pages app.js and going to that I'm gonna copy this and let's leave the Styles declaration everything else we should have that and I think this should be export default yeah exports default okay cool Super Bass is not defined because oops reading dark okay let's double check the documentation for auth UI so we have UI react and also I shared so this one is coming from theme is coming from author I shared so actually this code that we got from Chad GPT is incorrect so I'm gonna go ahead and install this package I think that should be it for setup or we don't really need to use like a dark theme so let's remove this and follow this one here maybe yeah we can also try create client or super based clients just passing the one we already have instead of this function but let's see if it's gonna work oh okay so we got the login page it looks great and now what we can do is this is inside layout okay so let's change the logic if the session is not there then display the auth and if it's there we can show the children I'll perform just the code for the container and it's class names responsive let's say full with on mobile so height Flex item Center justify content Etc and then we have another uh that so this is how you can also utilize to create responsive Styles because sometimes it's tedious to Define separate cells for mobile desktop then we have other breakpoints like tablet and what this is this is doing is like it's by mobile first design and it followed when I asked not to create like form itself we just named it children so I'm gonna copy this and where's our off so we already have Flex Flex column minimum height screen Stuff Plus but okay okay and then it's response let's see on mobile okay it does expand to the full width grade now I'm gonna create an account to my email I see this link which I'm going to press and it takes us to the application which means I'm already logged in update index page so it goes to like courses automatically if the user is logged in and also we can ask it to create a header and the footer so we can put those in the layout so I'm gonna head over here and header should include some kind of like navigation and the sign out sign in button so I'm going to ask links to let's do courses categories and account we're using user can go in and make changes to the account page and then the sign out just in case so it doesn't use any other stack and what I want is that it to check if user is logged in then display sign out and Etc and it should also give us the functions as in from Super Bass like sign out function and sign in and let's see if it okay so it creates links and those links are next links which is great it also created a class first session and loading so if we have a session we're going to get account href or sign out API okay I don't know if that's oh maybe because we are the helper yeah we're gonna check out and sign in so in this example we're using use session hook that's correct and then it's showing us how we can use the header so let's go ahead other j6 basically one more thing to see if all the Imports look correct all right I'm gonna import this here I believe it was probably a default import ant not we should get in there and oh yeah navigation here we have already closed that it has created so let's just place it here or you can also replace probably this contains nav information okay yeah so we don't need this anymore I can go to either is not a function or its return is not iterable so use session do you have okay let's see if we have used session wait this is coming from header okay so we're already using you session in the layout okay so the import is actually wrong it should have done this it's not iterable so okay we can just have session how about this I'm gonna update this with P okay let's see sign out what actual word this page is not found getting so instead I would suggest because we haven't created this API I would ask maybe is there a function we can use okay that is what we want inside I know JS you can Implement okay so it gave us a function create a new file in so we don't need to create an API endpoint but let's see if that's the only option so just update your header component to use a API endpoint okay I think I'm just gonna directly use the super base sign out so I'm gonna copy that one and so here the same way we have the client in the layout I'm gonna do the same thing in here let's turn this into a button so this has to go and let's pass a Zuck callback function oh not this one all right let's see how that looks going back to curse courses oh we need to import client sign out super getting any errors in here did you mean on click all yep did you mean on click and I'm gonna also do the same for the signing we'll turn the link into uh button okay now let's build a search input for our courses page so I'm gonna ask it two generators like the input like UI element itself also the state because as user starts typing we also want the search functionality to happen and the search will be based on we can do title and the description and finally we can there's two options we can search when user presses the search itself or when they start typing let's try first with the button so given that will check matches against course was it label or title okay we're not displaying let's say you can also check inside the tables on What fields we have the title description okay foreign Shadow to the box and rounded borders container not sure if you'll do that but maybe something close here's an updated version of courses page code so it added that the search term State patch courses created at yeah we didn't ask the order but I guess did it handle search from courses oh interesting okay so this is how it's doing hmm so it's using or statement title like search item I'm just not sure where it's passing the search items like courses data and help handle as user starts typing it's probably using this function to update the state and let's see the updated input itself render any other components or links here so I'm going to copy this this would be the only new piece that we're getting so this goes after courses title let's grab our functions and you can also ask a questions or see if you're already described how this is happening so set courses and search term that trigger symbol search okay interesting so let's say if I do web and then press enter okay it filtered out interesting and on update it returns all well that's impressive now instead oops let's see if we can update that as user is typing and instead of the search the text itself we're gonna want to display like a lookup icon I don't know if that's the right name as user is let's see if it's gonna generate SVG for that or suggest like a library okay it did add a library we can also go ahead install it before it finishes writing the code yeah and install oops what is it cops look all right some hmm so I don't believe this is oh maybe we can just add react icons okay yeah I was gonna just ask but so I did that and it also probably updated the functions so handle search set search term maybe in use effect this updated version we replaced okay so it did ignore you just replaced it but as user is typing the search function that happens as the user types all right now I'll be more specific but first let's update this icon today search term that's the name of the stage foreign to trigger search button okay I can update that so the update would be simple we can just trigger handle search after the set search item but there might be a caveat to it that update is delayed because when handle search is triggered maybe the search search term hasn't finished updating but so data crap so it'll be more noticeable in like for example now I deleted all of them and it's not giving all the results but yeah definitely not as I'm typing but it's more noticeable on bigger applications so if I was working on this this would be one of the things that always improve as to make you like a production ready application but we can also ask what it thinks to how to trigger maybe this will work search and use your cards typing automatically okay maybe that was the key word that I was missing uh call handle search on input change yep it's doing the same thing like I did it added the handle search here but with the update okay search infuser clears foreign let's see if it has solution for not updating like updates being late to call condition only when the input is not empty okay yeah this is kind of like a hacky solution but let's do that let's try if it fudge course also this is not going to work because fetch courses is defined inside use effect but basically how I would resolve this is I will trigger handle search inside use effect so this use effect triggers when the page mounts right and then here we pass search term as a dependency and then let's pass handle search data okay now it's getting updated as we delete it as well perfect moving on to the categories we do already have the link at the top but we don't actually have a page for it nor do we have categories in the database so let's first ask it to create categories table and maybe also in the script to link our courses to categories write a script or SQL editor in please you'll create because right now if we go to courses it does have a category but this is not actually a relationship the type of this as we can see from Super Bass is like a variable and then this is kind of like should be like okay character type so it's not linked to anything there's no relationship and let's see if okay so we have our script create categories table first things first we have to do the do that then create category Junction table and add a unit constraint to prevent duplicate links okay so this is for relationship we create categories with table ID and the name okay can you also add here okay it's also going to insert all right let's run this one first and then update the relationship so where's our SQL editor create a table oops and let's double check that it was created my son's history perfect and then is there a way to just new query okay yeah I don't want to select the category every time okay now we're gonna create a junction table command enter so failed to run SQL query frankly constraint cannot be implemented all right oh that doesn't exist in courses table Yeah I was going to ask to update courses but maybe provide us no okay I should have been more specific because it just showed us how to update the table the two resolve this issue make sure courses table names match okay foreign so it's gonna update course table to remove any courses that do not have corresponding categories okay so I ended up finding the issue and then I ran this query it worked the issue was that it was marking the type was wrong in here so it was marking course ID also as integer and then I checked the tables to get the types and I'm just gonna name the query create relation oops rename okay now I'll ask it to in the existing if we can update existing courses and add categories to it but you won't know the ID so we might have to do that just from the table let's select courses we should be able to directly add the reference from here can we browse see insert row select record perfect and I'm just gonna randomly as a foreign key relationship so I don't think we can have duplicates but let's see python for data science okay that should be all courses now I'm gonna ask it when we are getting the course if it can update the function so we are also getting our categories with it so that would be inside course list and as you can see the more we're building out the application we have more context and it's getting harder to every time sometimes it remembers the com context sometimes it doesn't relate to it so every time passing all this information when it's just one search input it's becoming a little bit redundant and that's why it is a better it still can be done so far with this level of complexity because we're still not in we don't have a lot of elements but as we go into more complex it's harder to manage and let's without further explanation I'm gonna tell it that this is what we're using and say we ran and modify the course card so it includes category as so let's do a pill tag so it fetches all the categories initially which I don't know if we actually need the categories maybe like this one when we're fetching courses we can also fetch the relation and let's see how it's using this field set courses okay fetch categories filter oh this is it added for filtering interesting no why the colors keep changing but okay then we have the layout let's see where it uh the filters or I don't know what this svgs for oh I said I think it's the search one but we're using the icon from the library already for that and oh it updated it even filtered the courses without asking I just don't know where do the filtered categories where is this getting updated so it should be okay let's try I think course card mmhmm so it wrote the code with slight modification so I'm just gonna copy what it updated first thing is this array I mean state and I believe this search term we have inside course page yeah yeah so let's add that in here same for patching and the function not this one but there's also this we for fetch courses we have that inside the use effects I'm going to add the categories and use effect as well for filtered courses and we can also oops ask it to continue while encoding that so it can explain what it did and where we can use this filter courses anyways and they'll search I'm gonna add this in the end oh and then we are zipper up it also to update course page let's add that mapping instead of we don't have the class for filtered courses that is the oh it does it afterwards okay so we're just passing courses of course and we can add another props but I'm not just gonna like directly copy it since then we would have to change course card a lot as well and we'll just copy this one okay course and category here courses page patch courses we don't need two fat courses one more time but okay we have filter search term SVG okay that loading screen um course card and continue one more time because it stopped here okay so after continue it's giving us the updated course code for course card I don't know if you picked up some different data sets because right now it's giving us more improved code with more functionalities without even asking for it so for example like ID it knows that it has that we're going to create or we would need to create like a separate link for each of the cores it also even provided like images even though there's no image of this like on the and split and splash is good to have just this like link with like you know added classes Etc it's pretty impressive I would say and then it added pill for category price which it didn't do it before and I haven't even asked for it and even we have a button for enroll well I would say that is really impressive let's see if it actually works though okay so I'm gonna close the sides out here we are on the course card the difference is that it destructs your category from here but I passed it separately and let's import link from next link and wrap forward save inside a link okay courses and for ID we're gonna have or we can get ID from here next up I'm Gonna Leave The Styling that we have right now and just going to add this one after so the title so like that it updated the title to be H2 font bold text large okay let's leave that one let's add description oh wait we have this actually goes oh yeah we already had category I'm gonna remove this that was like the hardcoded the one that we had in the database and that hardcore River was not referred to actual table and then after let's say that title we put description then we want to add price and the bottom or ask it next to also add the functionality for the button but first let's check if the categories are actually getting loaded can can declare variable defined with category interesting constant reassign oh we already have one that is true yeah let's remove that in here okay yes unrecognized though to fix the categories not being mapped properly issue I'm gonna go to courses table and I will add a column here let's name this categories ID and here the key is to add the foreign key relationship and inside here we can select the relationship to the categories and select the column from public categories to reference to yeah we're gonna identify it using the ID and actually needed no action uh their records existing let's do Cascade and save so I'm not moving this about the saving this one as well so it's successful credit categories ID let's populate it right now so and then here we can see this link so that means it's linked let's see if it's gonna let me select okay so we can just select directly from here I'll just pick one randomly and now how can we get this data on our site the clientside query so here we have API docs that we can look at to make sure our queries look good and we're going to take a look at it's also categorized so for the courses we already have a Super Bass from courses where we select everything but let's see how we can select the nested relationship and that would be redrows filtering from courses select categories so we can just directly oh one more thing we have so we don't need this category anymore now that we have the link so I'm gonna do this and do like directly delete from here and going back to the API Docs courses let's say ID oh so we can do from courses select categories ID and let's see how we can just directly access the categories table from there okay let's see if this is gonna work I'm gonna update from quotes let's do this and let's select everything that's related for courses and here let's have and inside here we can grab ID and name that's the only two Fields anyway so we can also use like asterisks save it and if we reload the page right now and open the inspector we should see that the categories comes in as a like a object and courses page once again State and here we have the data objects for the question and it does include categories now what we can do is the reason it says unrecognized is because we're passing in the object so we should say we just want to get the name that would be inside course card oh wait we don't need the list oh actually yeah it is getting the oh categories comes in as an object so okay but name then if this exists then it would be the name is that how it is yes okay let's save this and if we reload right now we get the names as well let's quickly fix also the color of this one introduction okay so this would be inside course card wherever we have title I'm just gonna set it same color or maybe like one shade darker as the description okay that looks better so even though we have authentication and we're able to sign up users and let them also log in we still don't have users table where we can add other informations about user for example saved courses and Etc in the database so in in this prompt we are gonna see how we can create that table and accommodate those courses list okay foreign so giving context that we have authentication working and we need a script that will create this profiles table and I would connect it to currently existing auth users and what it is doing is actually it's referencing it's still generating user ID which is going to be a unique ID but it is referencing it from of the users that is how we access this like users from our authentication feature and username is unique full okay it added some other fields which I didn't ask to bio Avatar time set Etc and alter tables profile it also ended gender and birth date this creates okay the user ID is set up as a foreign key to the ID okay now that we have the unit constraint to ensure that usernames are unique with the profiles tab once you've created profiles you can create a new profile Furniture when they first sign up or log in so this is kind of like manual approach we can improve that but for now let's follow the manual one first our SQL editor let's run a new query no rose returned I'm gonna also rename this and let's check if we have table profiles here and let's insert row so for ID it could be generated this would be also automatic and user ID let's select record we should only have one record where I come from the email yeah that's that one username else name bio I'm not gonna set those and see hopefully none of them were required okay so that's that we have this user and now let's ask it to create an accounts page so we'll start building out accounts page where user first we wanna see user that we're logged in with and then afterwards we want to let them change their information this should be in the format of a form and once they click save they their information should be sent to the database and uh what else is there afterwards we do that then we're gonna start building out relationship to the courses so saving saved courses and then we're going to list that on the account page as well but first let's get this done I am going to Let's this code fetches profile from and then this is the fields then it created a handle update profile function now the this assumes so it's giving us a warning that we should have this if now you'll create the tables before using this code perfect oh and I think it was giving us code but that script we already ran but let's just in case is this the same one yeah I think it's the same one okay I'm just gonna copy the first version it's giving us inside we don't have Pages created I can't just create it so I'm going to create a new file dot Js actually I'll create like folder instead and then in here your file indexed let's copy this ex make sure everything looks good except the Super Bass is an import default we don't have use user from auth Oh see now it's giving us a different let's ask it so for this link create certainly all just file would typically be so it's created sign in sign up etc those files functions which we don't need since we're using the wrapper and update profile but I'm not seeing use user will be used in the uses or hook okay so here wherever we have use user there's nothing that's or maybe it returns and user but I doubt that I think we can get session from however we're getting in the header maybe this one has session yeah Super Bass off and we only need user ID so Russia oops so still we're gonna remove this too if session let's do obsession ID we're gonna find the user in our profile table using that ID and then we can set it I'm going to remove this console log here and then handle profile okay this should look good we only have two forums and user profile so if not here then we can just display that it's loading so all right Super Bass is not defined yes because the function let's Library yes here we have name as as you guys remember that's what I put in and then bio we can update the profile let me real quick add the container here just so it's like equals Flex justify Center items Center and then another one oops gonna come after our logic so and let me set the width two so this is not Oh by default just if I can't that should be you'd be like okay by default the container does not have margin Auto also we need to add like the header at the top because layout we have we can extract that anyways let's see if it updates bio user is not defined okay so that's really also need to update the Handler profile function that would be session user ID updated successfully okay let's move on to the saved courses and ask how we can handle that so first we need to update tables at most likely a column for the courses and a relationship instead it did create user saved courses table and it added references to both both users and courses okay and add a unique constraint to prevent duplicates saved that's good alter table courses and add save count interesting so we know how many times the course has been saved create or replace function increment update user set cost to increment oh every time there's a new one it will automatically update we don't have to actually do it from the query which is nice Implement saved count trigger update to decrement so that took that into consideration and the script questioning table with my main relationship between users and courses at the union constraint to prevent duplicate um triggers okay now let's see how we can take a relationship and put it into the database so that would be for function in Rolling course and that's gonna take the session from Super Bass okay I guess that's another way of accessing session and insert user ID course ID single there are okay the next I'll fetch how I'll ask how we can fetch the saved courses so let's hopefully this script works because last time that we created a relationship they're not really workouts you query Princess where okay auth users hmm I guess we could maybe a bit better to reference profiles table but let's see if it works with no Rose return okay here's our user saved courses and these are those reference user ID and course ID that's great okay and let's try this function copied and going to course card where we have this button and I will add that in here we can move this into here actually let's so course card Library we don't need those just okay let's save it and should be user saved courses let's see if what it says when we don't to the function to trigger await post okay yeah that's we're not using because I was assuming we're going to create a separate API for that so let's just do this and going to oops once again it's unrecognized it's weird because sometimes it fetches the category sometimes it does not even though the query is the same like I have not updated versus not the course card here it's supposed to get it okay so let's try if enroll works I don't know if it's doing some kind of cheshing because oh well okay sign out and roll oh because I pressed oh this is a link and we don't have link yet okay I'm gonna remove the link session is not yeah same thing the way we are getting a session we can replicate that since that's working already for us so and that's a hook so I'm gonna Define outside of the function and constant user equals we can access user like that session please start again okay sir starting an objects um so try and then we have let's see if it's saved okay no I didn't say either we are not passing the course ID and that is you can just take it from here foreign let's ask now to get all our saved courses for us but that would be I'm gonna pass the name of the table relation table oh wait we are Super Bass okay we want to I think it's thinking I just want to run it in SQL editor um this courses JS page maybe that would all right yeah we don't have an API and we also don't have this Library oh it's trying to get okay saved courses I'm gonna open this to the side and here let's add that extra State for the saved courses let me scroll or maybe we can create like a separate component that would be probably better and then import it into the account for that I'll create in components new file saved courses.jsx and let's copy this paste it and maybe user ID we already have it on account so we're just gonna get that from account let's remove go over line by line Super Bass saved courses user ID let's pass that and fetch if we have user ID course I did such a threads it should get from here data okay and then say it courses it's just gonna list the titles which is good enough for now let's import this in the account export default yep user profile this will be once you have user profile available before that we can't pass user ID equals I think we should be able to access this from here so I think I misspelled saved courses yeah your saved courses let's see what's that Theta here because it should create a list are we on the okay set saved courses course data or if we don't have access to the I don't think this one saves yeah because this condition has set saved courses but I don't know if this one's not you know it's Syntax for type uid I think I'm using let's see what we have in user so accounts cone State oh it's user underscore ID all right that's what I'm gonna pass okay yes okay so now we can see the JavaScript so fundamentals that I enrolled in on the courses page layout from inside of the courses page to our application file because we want to have the header also on our courses so and other pages so let's do this and that should be fine and going to pages index.js maybe apjs would be okay so this is where we have the session context provider and in here I can do layout the also import it at the top so it's in this is inside pages so find uh it's probably default okay yeah great going back to courses now if I'm enrolled in JavaScript fundamentals I'm still not sure why this is not getting this relation loaded try one thing okay now it's there weird so if I'm oh I'm already enrolled in JavaScript fundamentals let's see if we can ask it to update this button and show like enrolled or maybe like a check mark um and I think is the react icon Library yeah react and let's give it the name of the table just in case it goes down a different route and that would be user saved courses create also a bookmark icon so instead of having a text of enroll we can just press that to save a class and probably removing that and a floating loaded and when the button loads it checks redirected look okay I'm gonna update the user part because every time I feel like it gives us different ways of checking user Ascension but we already have a way that we figured out it's working for us I'm just going to use that and okay so it's supposed to fetch the courses and check which ones in the cooler which course ID we have and we are passing course ID as a prop so let me copy code right now enroll like button it's just inside course card so I'm going to create a new file for that let's see what it needs okay so instead of checking user session I'm also going to pass user ID yeah because we don't want to check on every course card if you have a session or not we can just pass it from there so removing oops removing this one updating Super Bass and this is in yeah going back Library react icons use effective State that's there enrolled set enrolled okay and then no user user ID same thing here and then the these are the dependencies I'm also going to update if user ID or course ID changes we have to obviously refetch this data redirect you actually we can redirect them to logging it's true actually let me I'm gonna do this this is here replace it everywhere except oh no not this one okay this is already replaced so I'm just gonna do it myself and so it inserts save the course if not already saved okay and then it updates set enrolled otherwise removes or delete or inserts up gray and then the icon gets updated accordingly that should be fine let's import this into course card and oh we also need we don't need on click anymore because it's gonna do that and let's see so of course ID going to be equal to ID here and then user ID that one we can also pass it down from courses index we don't already have that array okay just gonna move this here foreign equals let's see if this is the case um inside okay so once we map and now let's go back to course card get user ID from here so we can pass it in here the one issue is that if user ID hasn't been loaded should still update new session okay import statement at the top okay so I have this enrolled so it's showing that I'm enrolled in here I wonder what it's supposed to show when because we do have the logic bookmark so maybe because it doesn't have a color or oh yep outline works great that's actually all this to the left load this categories get updated so maybe there's some kind of caching issue that oh I would note to like double check if categories are not fetched then refetch it that should solve it so this would be it for this project and to quickly recap what we did so we we set up this course app using make sure yes Super Bass Tailwind reused react icon for our icon library and then view of the other libraries after that we set up a schema to Define courses categories and user we did the setting of the database meaning like putting some dummy data for testing in it we also checked I'm using LGBT what like file structure should look like what schema should look like even it generated data for us and we utilized it also to for styling creating this like responsive grid elements all this like colors and Etc we implemented authenticate station and then after that we created users table where we store more information about the user users can log in using email and password and we also try to came across obviously there are some issues that we try to debug using the documentation of superbase itself and chat GPT we created this like layout that right now it only has a header that and then layout is conditional meaning if we we're on a signing page it's not going to show up also we for the courses page we have categories page we created relationships in between those and then we create a relationship between user and the courses we created functionality for user to save the courses or remove the course and for them to go to their account get their information get their saved classes and also update their profile like future future changes that I would do is probably on the accounts page I would add all the fields that we have right now in the table like I think there was the image there was like gender year Etc and then for the save courses maybe I'll modify I'll get more information about the course and I'll also give like a remove button that they can like remove the course like their enrollment and going back to courses page yeah we also did this search where we can filter out our database either like descriptions or the name of the courses these categories I still have to fix that but we also have pricing and we wanting like filtering behind the scenes like functions exist but we haven't actually added filters so for example price filter would be a good feature to like practice on next and going forward these are some of the aspects of development that I would consider using chargpt as an assistant first one would be called optimization technique so what are some of the ways to optimize performance in this application is one thing you can ask what are some of the ways to fetch this kind of data faster and or how to test the performance itself is something that you can ask and not only performance but in general if you're using jazz or if we have never used it for example it might suggest that as a tool that you can use and ask like guidelines or list of like a template of how you can test certain weather components or API requests or Etc also very helpful in writing a readme or technical documentation for example in this our case like I would say based on the code that was generated in the this conversation so that way it kind of like parses through and takes like the whole conversation as a context generated a readme that at least step by set guide on how to set up the project so we did set set it up but we also want to see stepbystep guide and also I'm gonna add readme to Output this project in a GitHub repository and the link would be shared so also you can go over the readme there and set it up yourself and if I set up this boiler played code very simple P probably next thing I would do is just have a list of things that I thought about or could be a good practice to follow along at the professional like website or working application would need so you can ask it to now in this case before that it was your senior architect to a software engineer now you can ask it to be a product manager and tell it that you already wrote some code and write it like the other tasks that would be needed to be accomplished and what I'll do is probably it's going to at least task in bullet points so I would maybe like take this put it in notion and have like a zapier integration that that in from the notion payroll database it automatically creates jira Asana whichever is your task management tool tasks and then you can go over the board you can even assign it to other people or for yourself to have a good way of continuing working on this or if you're new to full stack development you kind of see this template of what are the list of things that need to be done and hopefully you enjoyed this tutorial you learned how to use chat GPT but also some other Concepts there and thank you for watching
