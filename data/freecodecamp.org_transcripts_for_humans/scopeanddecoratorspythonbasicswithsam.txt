With timestamps:

00:02 - hi everybody
00:03 - uh welcome back today uh i am sam
00:06 - uh from python basics and we'll be doing
00:09 - a
00:10 - another two hour live stream today
00:14 - on uh free code camp here
00:17 - and the regular the way the agenda
00:19 - usually works
00:21 - is um it's about two hours
00:24 - uh don't see anything happening today
00:27 - was not feeling too hot last week
00:30 - so but we are gonna finish up uh some
00:32 - dictionary stuff
00:33 - because that was requested and that is
00:37 - very very important to me um and then i
00:40 - think
00:41 - there were a couple we were talking
00:44 - about formatting
00:45 - and maybe we'll look just real quick at
00:48 - formatting some numbers and then we're
00:50 - going to jump into scope
00:53 - and the reason why i like scope so much
00:55 - is really lays out
00:58 - how python looks at variables
01:01 - and scope is just basically layer of
01:03 - priority of where it's pulling from
01:05 - so and then then we'll look at
01:09 - nested functions and then those are just
01:12 - a half a step
01:13 - a half measure that gets us to
01:15 - decorators and
01:17 - if we have time very cool use
01:21 - of nested functions and um
01:26 - yeah it'll take us a while to get to
01:27 - some really really case
01:29 - scenarios of decorators but i will show
01:31 - you how they use
01:32 - but the the the one today
01:35 - uh if we get to and i'm super excited
01:37 - about it is the monty hall example so
01:40 - all right let's just get into it is
01:42 - everybody here everybody ready
01:47 - yes and i had completely forgotten this
01:49 - so i had gotten some feedback
01:51 - that maybe there was glare and i know uh
01:54 - i've seen this
01:55 - a lot of times that people like the
01:58 - darker so
01:59 - what does everybody think about the dark
02:01 - background is it easier to see
02:03 - because i had the red is a little hard
02:08 - all right all right let's go
02:11 - cool we're glad to have everybody here
02:13 - so let's just get into it
02:15 - so let's finish up dictionaries so we
02:17 - can get on to our new stuff
02:19 - all right so what i really want to look
02:20 - at to wrap up dictionaries
02:24 - is the reason why they're very powerful
02:26 - is
02:27 - one of the awesome examples is if we
02:29 - were to make a link
02:30 - and a um basically
02:34 - a building block of association so let's
02:37 - just look at the alphabet
02:38 - real real fast and then
02:41 - tie these in so from oh
02:44 - we don't need this let's comment this
02:46 - out
02:48 - but also one thing i just uh a little
02:50 - crash course reminder about the
02:52 - dictionary
02:53 - first you have to initiate initialize it
02:56 - and then
02:57 - link a value to the key all right
03:00 - don't need this anymore i hope everybody
03:02 - has had a good week
03:04 - uh i am glad to be back so from string
03:08 - uh import as key
03:13 - lowercase as lower
03:17 - so all right if you are unaware of this
03:20 - module
03:21 - built-in module and
03:24 - basically what we're doing here is we're
03:25 - building uh it's one of the ones that i
03:28 - like to do
03:28 - for a really encryption and decryption
03:31 - um
03:32 - pretty cool building block of uh
03:35 - messages
03:36 - but for i n range
03:39 - when lower
03:44 - then key
03:48 - all right so what i'm doing is i'm going
03:51 - through this
03:52 - reason why i'm using the range len
03:54 - function is so i'm going through
03:56 - so i don't have to go and wrap an
03:58 - enumerate object
04:00 - wrap it up so i can just go through here
04:03 - and then we're going to look at counting
04:06 - with a
04:09 - all right then run this
04:12 - then called key so oops
04:15 - that is not what i wanted to do what did
04:17 - i leave out
04:20 - ah there we go
04:25 - key so for
04:28 - i and key print
04:36 - so what i did is i associated actually
04:38 - four items
04:44 - print and i need key value
04:48 - key value
04:52 - key comma value
04:56 - so what i did is i went through our
04:59 - built-in
05:00 - lower all the letters
05:04 - so lower just so you can see where i got
05:06 - this from if
05:07 - if you're new joining us does anything
05:09 - here
05:10 - not make a lot of sense all right
05:17 - awesome i'm glad you like guys are like
05:19 - in the background hey
05:20 - uh is the is it very blurry
05:24 - on your playback because it is very
05:27 - blurry on mine
05:28 - if you guys are seeing it good all my
05:31 - kids are home i was kind of a little
05:32 - worried about this today
05:34 - uh is the picture clear for you guys
05:38 - if it is that's great because like i
05:41 - said all my kids are here and we're all
05:43 - streaming
05:46 - awesome i'm glad i'm glad the color
05:49 - the darker is good all right okay
05:52 - not hearing any feedback that it's bad
05:54 - so i'm gonna keep going
05:56 - i don't need to see me i'm just looking
05:57 - over here at the chat okay
06:00 - so i took and i ran through
06:08 - okay
06:12 - all right okay so what i did is
06:16 - i ran through and i made a dictionary
06:18 - and i associated a key
06:20 - so you could flip this around so
06:22 - basically you could
06:24 - the reason why i like this exercise is i
06:26 - want to get you to understand to go
06:28 - through
06:28 - because you'll see in a minute what
06:30 - we're going to do is we're going to
06:32 - count we're going to count a
06:35 - if it's if it's in the dictionary we're
06:37 - going to increment up
06:38 - if it's not in the dictionary we need to
06:41 - create it so
06:42 - we're actually going to look at the
06:44 - raven
06:45 - and the poem the poem the raven
06:49 - from edgar allan poe and we're actually
06:52 - gonna
06:52 - count all the letters excuse me
06:55 - all of the all of the words in the poem
06:58 - that's what we're getting to
06:59 - so all right i went through i took
07:03 - the letter then i associated a
07:07 - number to it and then incremented up
07:10 - each letter or i let lynn
07:13 - the range increment each one so i went
07:15 - through
07:16 - and i went through each letter then went
07:19 - through range so range incremented
07:21 - through
07:22 - iterated through my lower and then i let
07:25 - that count and i let that be
07:26 - offset by 1 because we know range starts
07:29 - at zero
07:30 - now now i'm going to show you how to do
07:33 - this
07:36 - where we can zip the dictionary and this
07:39 - is where it very cool
07:40 - and if time allows i'll show you how to
07:43 - do
07:43 - dictionary comprehension alright so we
07:46 - don't need
07:48 - this we comment that out
07:51 - and we can do this in
07:57 - three lines right here so
08:01 - i'm gonna do this a little a little
08:03 - stretched out so
08:04 - we could see this i could do this in two
08:06 - but just so we can
08:10 - letters equals lower
08:14 - so just so we can have this together
08:16 - then num
08:19 - list list
08:23 - range 1 through 27
08:26 - okay so we're off setting 26 letters
08:29 - all right then key
08:32 - wrapping this so we're zip we're making
08:35 - a zip object
08:37 - so check this out this is so cool
08:41 - all right so
08:44 - think about it the thing about a zipper
08:46 - so you have the the actual zipper then
08:48 - the two sides and it goes through
08:50 - and it overlaps i don't even know if i'm
08:52 - in frame here
08:53 - so all right it goes through and it zips
08:56 - each side together
08:58 - so i have two objects
09:01 - that are the same length and i zip them
09:06 - together then i'm telling it
09:09 - to turn it into a dictionary so i
09:11 - commented all this out
09:14 - boom oop letters
09:21 - and
09:24 - i'm not spelling anything right today
09:26 - sorry everybody
09:27 - and then key boom same thing
09:32 - so i just wanted to show you how you can
09:35 - create a dictionary with a zip object
09:37 - zipping a dictionary there you go all
09:40 - right so cool we are
09:42 - almost wrapped up cool we're doing this
09:43 - in about 10 minutes
09:45 - all right
09:57 - oh
10:00 - is it sporadic for everybody is he
10:03 - breaking up
10:04 - because like i was saying that
10:07 - i was a little worried about the stream
10:09 - with everybody on at my house
10:14 - quincy or beau are you guys available
10:18 - to give me some feedback
10:25 - is it too is it too bad and too choppy
10:28 - because
10:30 - my view is just completely frozen
10:34 - alright is it present for everybody
10:39 - okay i just got a yellow and an orange
10:42 - on my
10:44 - on my stream i'm clicking over it's
10:46 - bouncing from red
10:53 - huh
10:56 - i'm not getting any response from
10:58 - anybody okay well i'm just going to keep
11:00 - going
11:01 - and we'll go from there until i until i
11:03 - hear otherwise
11:05 - so all right now we're going to do
11:08 - something pretty cool so
11:11 - i'm just going to put this in and i
11:13 - actually have the file
11:14 - you can go out and and pull it down the
11:17 - raven but i also have it on my github
11:19 - so you can click over to my channel and
11:22 - look at that but here's the raven
11:24 - here's the raven and i'm just going to
11:26 - put it right here it's a boom
11:29 - here's the raven the file
11:32 - don't need to comment that out
11:35 - now this is how you go about
11:39 - creating something and you don't know
11:42 - like i like i alluded to or made a
11:45 - passing comment about
11:46 - a dictionary is very powerful uh one of
11:48 - the tools that i like using it for
11:51 - is if i have no idea
11:58 - blurry okay it's going blurry and then
12:00 - uh
12:02 - okay it's going blurry and then not
12:04 - blurry okay well thank you for the
12:06 - feedback
12:07 - all right so a dictionary is perfect so
12:10 - you initialize it
12:11 - and then if you have a scenario which
12:14 - you'll run into and i've had plenty
12:15 - where you don't know how many variables
12:17 - you're going to have so instead of
12:18 - thinking of it you have a key be your
12:21 - unknown you have
12:23 - an unknown amount of keys so if it's not
12:26 - in there and i'll show you exactly how
12:28 - to do it
12:28 - if that key doesn't exist you create a
12:31 - new key
12:32 - for it and then if it does exist you
12:34 - increment up and this is a perfect
12:36 - example
12:39 - so all right
12:42 - let's look at this and it's literally
12:45 - this simple
12:47 - so we take our file
12:50 - we're going to then split it
12:53 - so file dot split
12:56 - so what does that do takes my string
12:58 - puts it into a list
13:00 - with each it's going to i'm not passing
13:03 - it
13:04 - any delimiter so it's going to split on
13:06 - the white space
13:08 - boom step one then i'm going to initiate
13:10 - my dictionary we're just going to call
13:11 - this book
13:12 - helps if you actually then
13:16 - create a dictionary and dictionaries
13:19 - live
13:20 - inside curly brackets
13:23 - all right then
13:27 - for
13:31 - we'll just stick with word word in
13:35 - file then if
13:38 - word
13:41 - not however you want to think about this
13:44 - but we're going to look at it
13:45 - if it's not in the dictionary already
13:47 - we're going to create it we're going to
13:48 - assign it to a count of one
13:51 - if word not in book
13:54 - then book then our key
13:58 - so it's word
14:01 - that's our key equals one else
14:06 - then book word
14:12 - plus plus
14:15 - equals one so what i'm doing here
14:19 - taking this file because it was file
14:22 - uh variable and i'm splitting it
14:27 - turning it into a list we're gonna and
14:29 - then i knit i
14:30 - initiate my dictionary
14:34 - iterate through my list looking at each
14:36 - word
14:37 - if that word is not in the dictionary
14:42 - assign it count it one then
14:45 - if it is in the dictionary then
14:48 - increment that value up by one so let's
14:52 - run this
14:53 - and we have book
14:57 - holy moly 114 lines
15:00 - this is what i think is so cool so
15:04 - here we go so this is every word
15:07 - counted in the poem
15:15 - going open a minute
15:26 - making the code shorter if
15:29 - would you mind giving open a minute
15:33 - in this oh um actually what i was
15:36 - planning on doing
15:37 - was we were gonna do not just open but
15:40 - next week we were gonna because i wanted
15:42 - to entice everybody
15:43 - we were going to then go and actually
15:45 - pull this down off the internet with
15:47 - uh with um url lib and thai
15:50 - url lib and open together so that's what
15:54 - i was thinking
15:55 - i didn't want to deviate too much
15:57 - because i think we already got
15:58 - uh but it's a great idea and you can
16:01 - already
16:01 - i like i like how you think and that's
16:04 - why i think we
16:05 - work well together is that
16:08 - um i'm going to tie those into
16:11 - next week next week's lesson so we can
16:16 - yeah i i try to i try to i'm trying to
16:19 - do a little bit more foreshadowing uh
16:21 - but yeah if if we could just stay with
16:24 - this right now
16:24 - i'm i i want because open can be a
16:27 - little
16:28 - tricky so uh i always try to tie that
16:31 - with something else
16:33 - so the open url
16:36 - well awesome
16:39 - good and there's also if if there's ever
16:42 - anything that you guys want
16:43 - because the reason why we're doing
16:44 - dictionaries right now is somebody hit
16:46 - me up on twitter
16:47 - so look this is y'all's tutorial
16:51 - so whatever you guys want and i haven't
16:55 - if i haven't done the complete lesson
16:56 - plan
16:57 - i'm more than happy to uh augment
17:00 - and do what you guys need and want to
17:03 - see
17:03 - because i mean i could talk about any of
17:06 - this
17:06 - and as you can tell i can get sucked in
17:09 - to some of it
17:10 - a little bit too deep so but that's a
17:12 - great idea
17:13 - and that's actually where we were going
17:15 - to go next week i didn't want to tie
17:17 - these in
17:18 - and deviate too much especially with bow
17:21 - being awesome and allowing me to
17:23 - uh almost do anything so
17:26 - just wanted to do i thought that that
17:28 - would wrap
17:29 - up the dictionary and we might do sorted
17:31 - i just remembered we didn't do sort here
17:33 - and i don't have my notes right now but
17:36 - yes we will we will do that
17:38 - definitely uh next week then because i
17:40 - was on the fence about it
17:41 - so that solves it so thank you guys all
17:44 - right so where are we
17:48 - um oh two more
17:53 - two more questions that came up last
17:55 - week and then we'll get into this
17:57 - so we don't need this
18:00 - so it was formatting we were formatting
18:04 - the uh our probability
18:08 - the odds of winning powerball and i
18:10 - can't remember who
18:11 - asked but it was um
18:15 - it was hey what happens if we wanted to
18:18 - change the format of
18:21 - of our number so what happens if we
18:24 - wanted to do
18:25 - so here let's just look at it
18:29 - and we do phone phone number
18:33 - then one two three four five six seven
18:35 - eight nine zero
18:37 - so basically it would be you'd hardwire
18:40 - it in if
18:40 - it because when i did the placeholder
18:44 - colon comma python already knows in that
18:48 - string format
18:48 - in that formatting uh logic that
18:52 - it goes and puts that comma after
18:56 - every third so that was for phone number
18:59 - that was the example that i had for that
19:01 - so then literally if you look right here
19:03 - i have my placeholder
19:05 - with my string and then i've wrapped
19:08 - parentheses so in the united
19:09 - states we typically put parentheses
19:12 - around our area code
19:14 - then our prefix then is separated
19:17 - by the local selection so it's basically
19:22 - routed to
19:23 - where in the united states where inside
19:26 - that where in the united states and then
19:28 - that number
19:30 - so now let's look at the
19:33 - the other one which is basically the
19:35 - exact same but it's um
19:38 - it was it was my example for uh here in
19:41 - the united states and i learned
19:42 - something cool about
19:43 - uh australia somebody was asking
19:47 - how to do the math so may maybe you guys
19:50 - can confirm but in australia
19:53 - if i understood they that is the
19:55 - sequence of when you were born
19:58 - in the united states our identification
20:00 - number
20:01 - our social security number is is built
20:03 - upon geographic
20:05 - so the first one is what state then you
20:07 - have the
20:08 - group number and then the sequence in
20:11 - which you apply for it
20:12 - so and this is more dashes but i just
20:16 - changed it up so
20:18 - let's see ssn
20:22 - one two three four five six seven eight
20:23 - nine and then
20:25 - i just go from there but that was uh i
20:28 - just wanted to
20:29 - throw that out because somebody made a
20:31 - comment and you just would need to
20:33 - hardwire it in
20:35 - so all right i think that's that so very
20:38 - cool that only took 21 minutes to clean
20:40 - up
20:41 - uh those things and i think there's
20:43 - another dictionary something
20:46 - was it or did i get it all
20:51 - ah one more dictionary comprehension
20:55 - let's just get it out of the way
20:58 - so all right we'll look at this and i'll
21:00 - throw it in here and i promise we'll be
21:01 - done
21:02 - so this is this is what's cool about
21:04 - this so
21:06 - let's let's look at this so all right
21:10 - who doesn't like uh list comprehension
21:14 - i can't remember all right
21:17 - so basically same idea
21:20 - here's my for loop so then
21:23 - now here's my key and value pair all
21:26 - right
21:27 - so i have a list of names an iterable
21:32 - so i'm going to here's my iterable
21:35 - here's my temporary iter
21:39 - right no i shouldn't have said that
21:42 - temporary object iter is something else
21:45 - so forget i said that here's my loop
21:49 - then here's my key and value pair so
21:51 - what i'm doing
21:52 - is i'm saying i want you to count
21:56 - a student
22:02 - i thought it was him i thought it was
22:05 - him
22:05 - so uh but you just have to look
22:08 - look all right you have to do something
22:11 - over and over
22:12 - again when you got on a bike you
22:14 - couldn't ride it right
22:15 - so i remember when i started doing this
22:18 - and i couldn't understand
22:20 - for loops well guess what now i
22:22 - understand them really really really
22:23 - well
22:25 - it's just time and energy and it really
22:27 - doesn't have to do
22:28 - anything with how long like how quick
22:30 - can i you can learn it in 10 years
22:32 - or five years or two years well it's a
22:34 - length of time
22:35 - i like to say it's 10 000 hours you want
22:38 - to become an expert at something you got
22:39 - to spend ten thousand hours
22:41 - and that's it that that's it that that's
22:43 - the magic number
22:45 - if you take ten if you stretch it over
22:46 - ten years okay it takes you ten years
22:49 - if you can compress it down to five
22:51 - great takes five years
22:53 - you want to become an expert at
22:54 - something you got to spend 10 000 hours
22:56 - on it
22:56 - that's that
23:00 - so what the standard math is it's a
23:02 - little over it's like 6.7 years
23:05 - if you do whatever task for 40 hours a
23:07 - week
23:08 - that's that's the math so let's just
23:11 - look at this one more time
23:13 - here's my key i'm taking my student the
23:16 - first letter
23:18 - then i'm turning it then i'm putting an
23:20 - upper method on it
23:22 - and then i'm in my value
23:26 - or my temporary uh so what i'm doing is
23:30 - i'm saying
23:30 - how many students have
23:34 - this first letter so i have
23:38 - steve i have a john i have an atom
23:41 - and i have a will so that's that all
23:44 - right
23:44 - cool
23:48 - you weren't stitching that's funny
23:49 - that's very funny
23:51 - all right let's get done with that let's
23:53 - close that
23:54 - out i don't need that to run don't need
23:56 - to see that and distract me
23:57 - but i really hope everybody had a good
23:59 - week um
24:01 - last last week was
24:05 - hectic and busy for me hope everybody
24:08 - did good so all right
24:09 - so we need to talk about scope
24:13 - so i
24:16 - you're going to hear me use another term
24:19 - and then
24:19 - so it's local it's l
24:22 - what l-e-g-b l-e-g-b
24:27 - and it goes in the reverse order you
24:29 - think it will go
24:31 - so and i got a i got a pretty good
24:33 - example that i think that'll really help
24:35 - sell it
24:36 - it looks locally so inside then it looks
24:40 - enclosed and closing non-local
24:43 - so if it's a nested right outside there
24:46 - that takes next priority
24:48 - then uh global then built in
24:52 - so legb
24:56 - and i'm gonna have we're gonna we're
24:58 - gonna go through this
24:59 - really really really really slow so
25:01 - first i'm gonna handle
25:03 - uh local global and built-in and then
25:06 - we're gonna do
25:07 - uh enclosed and closing uh non-local
25:11 - those are all the same we're gonna do
25:13 - that
25:14 - next to really kind of wrap our head
25:16 - around it and i think we will have
25:19 - time to do our monty hall
25:22 - problem so i'm very excited
25:25 - all right so i have
25:30 - well one let's do this so you guys can
25:32 - see from
25:34 - math import pie
25:40 - not super super important but does
25:41 - everybody know what pi is
25:43 - the mathematical term the ratio between
25:46 - uh
25:46 - circumference and uh radius
25:51 - everybody everybody anybody that's a old
25:53 - movie from my
25:55 - from my time period uh not ben stiller
25:58 - um but ferris bueller's day off
26:02 - all right okay good
26:05 - so as you can see here i have
26:10 - this variable in three separate
26:13 - locations
26:14 - and we are talking about right now
26:18 - we're talking about uh local
26:22 - um global
26:25 - and built in
26:31 - local global built in
26:35 - so i'm going to leave all three of these
26:37 - here and i'm going to show you
26:39 - so it takes priority from local first
26:42 - global next well actually non-local next
26:46 - but i don't want to we're going to do
26:48 - that in a minute and i'll show you
26:50 - so we'll put this in parentheses
26:54 - it's not here global
26:57 - and then built in and as you can see i
27:01 - have these
27:01 - at different lengths so you can see the
27:05 - uh scientific notation
27:08 - wow um i cannot think of that term i
27:12 - thought i was going to be super nerdy so
27:13 - all right i have all three of them
27:15 - sitting here
27:16 - but python will look here first because
27:18 - this is local
27:20 - then if i comment this out
27:25 - then it will look global
27:29 - significant figures that's what i'm
27:31 - looking for so i have
27:34 - because pi built in pi is i think it's
27:36 - 12.
27:38 - then my local was five then my global
27:42 - was
27:42 - two then my uh built in
27:46 - is 12. so i comment that out then it
27:48 - will look
27:49 - then it looked right here so then when i
27:52 - comment this out
27:53 - and i run this again then it goes then
27:56 - it looks globally then it will
27:58 - see that so the reason why i like doing
28:01 - it in this order is it shows you
28:03 - where it assigns and goes with priority
28:06 - of how it looks so all right
28:09 - now now let's look
28:12 - at a nested function
28:19 - now the nested function is the built in
28:22 - excuse me
28:23 - is the building blocks of decorators so
28:26 - this is going to look
28:27 - weird and seem weird why would we do
28:29 - this
28:30 - well it's a kind of precursor and a
28:32 - building block
28:33 - for something else all right let's
28:36 - comment that
28:38 - and then we'll use this as a jumping off
28:40 - point to look at our non-local scope
28:44 - and in several weeks when we build
28:48 - a t-kenter calculator you'll really wrap
28:51 - your head around local orbs
29:02 - oops okay am i back am i back yet i just
29:05 - gotta
29:06 - i just saw that uh obs went down
29:11 - everybody back up okay
29:14 - so yes locals are within a function
29:16 - global variables are
29:18 - outside and get pulled in and built-ins
29:20 - are already there
29:21 - okay awesome yeah i i apologize guys
29:24 - uh for with all this with everything
29:27 - going on with school
29:29 - our uh our kids are delayed going back
29:32 - and they are all home with me on zoom
29:36 - meetings so we are eating a bandwidth
29:38 - like crazy so
29:39 - um hopefully this will all be resolved
29:42 - very quickly let me see
29:43 - what color i am it's red right now but i
29:46 - think i'm back i haven't gotten a
29:48 - message
29:49 - okay i'm back all right
29:52 - so boom
29:56 - then def num
30:02 - then return
30:07 - exponent exponent in
30:10 - then return num
30:14 - so what in the world is going on here
30:16 - let's see what color we are
30:18 - or yellow orange hanging around red
30:23 - yuck all right bounce screen
30:26 - okay
30:34 - now it's blurry god all right
30:38 - i will go slow i need to wonder if i
30:41 - need to send my kids to
30:42 - my parents house during during tuesdays
30:46 - we'll figure that out all right we'll
30:47 - just go slow today all right
30:50 - so well that's very cool thank you for
30:54 - the new supporter
30:59 - all right
31:05 - just re just refresh the page all right
31:10 - all right so what are we doing let's
31:12 - let's let's look at this
31:14 - so here's our standard function that
31:15 - we're used to seeing
31:18 - we have and we are going to return this
31:22 - now this is where it gets weird
31:25 - this function is going to return this
31:28 - function
31:30 - all right so this function
31:34 - my exponent all right exp
31:37 - sorry my exp function is going to return
31:41 - my num function so let me give you an
31:43 - example of what
31:45 - in the world this will do square
31:49 - equals xp
31:53 - 2. so
31:57 - start on the outside build your way in
31:58 - so now
32:00 - this is this this is where it gets
32:04 - a little weird but once you start
32:05 - thinking about it you'll get
32:08 - you'll get used to it so i'm taking
32:12 - i want to create a function that's going
32:13 - to square something
32:16 - and this exponent is here
32:20 - so whatever exponent i pass in
32:23 - this will be and then now this basically
32:27 - this is how i want you to think
32:28 - about it basically just renamed this
32:31 - right here so function function
32:35 - this renamed this so whatever i pass in
32:38 - here
32:39 - at the end of this object we'll take
32:42 - that number
32:44 - and raise this number to the exponent of
32:48 - this
32:49 - that's why i called it squaring so now
32:52 - i'm going to
32:54 - put this in memory then i'm going to
32:56 - call square
32:59 - oops square and i'm going to
33:02 - i want to square 2. so i get
33:06 - i get 4. all right so
33:09 - now i want to make a cube function
33:12 - cube and i go my x
33:16 - my exp function and i want to pass in
33:20 - 3. all right
33:23 - let's put that into memory so then i
33:25 - want to cube
33:28 - uh what do i want to do 3 that's 27 3
33:30 - times 3 times 3
33:31 - 27 haha i remember i remember math
33:35 - okay now
33:38 - let's do now let's look at non-local
33:43 - this is a perfect it's a perfect way to
33:46 - look at non-local right here
33:48 - so that was our nested function
33:53 - okay non-local scope
33:57 - all right so now what happens if i were
34:00 - to pass in
34:02 - a 1 right here and if i wanted to be
34:05 - able to touch it
34:07 - from this function because if i say
34:09 - global
34:10 - it's going to look outside so there has
34:13 - to be a way for i just want to move
34:16 - a variable from just out just
34:19 - outside not not crazy not globally
34:22 - it goes right here
34:26 - so this is how i change the scope of
34:30 - this i pull this in say non-local
34:34 - and now so when i pass in
34:39 - this so what i change this up
34:42 - whoa square
34:46 - square three
34:49 - stays the same because i
34:53 - overrode this and changed it to one
34:58 - so i had changed it bend so whenever and
35:01 - you'll see this
35:02 - when we do our uh oh i think we're gonna
35:04 - have plenty of time to do our monty hall
35:06 - stuff
35:07 - yes and that is a very very cool
35:12 - very cool
35:16 - yes very good i'm sorry
35:19 - yes the enclosed uh the enclosed so you
35:23 - have
35:23 - you have non-local
35:27 - and closing you're going to hear that
35:30 - that term
35:32 - so if you're reading closing that's
35:35 - typically the documentation and closing
35:38 - i then also call it so if you heard me
35:40 - say enclosed
35:44 - or non-local
35:47 - all right if i used any of those those
35:50 - are all the same
35:51 - this is the this is the technical
35:56 - definition work you use case in closing
36:00 - because it is enclosed it's not
36:03 - it's not it's not local
36:06 - it's not global it's in closing
36:10 - so there we go great question this is
36:13 - why i love the
36:14 - the interaction because you guys keep me
36:17 - keep me on task all right so now
36:21 - now let's look at decorators so we need
36:24 - to look at decorators
36:25 - they're very very very very cool they're
36:28 - a little odd at first
36:30 - and especially they are
36:34 - in this case in the these couple of
36:36 - cases they're going to be weird
36:38 - you're going to say why but it's to see
36:40 - the context
36:41 - uh perfect example that um
36:45 - i i've used um is to change a function
36:49 - especially with django so if you for
36:53 - whenever you're
36:53 - having a pages and you're building them
36:56 - you're building a
36:57 - you're building a function for each uh
37:01 - page and then you need to lay on top of
37:03 - it
37:04 - some functionality and you can lay as
37:06 - many decorators on as you want to
37:08 - think about it is because you're going
37:09 - to see it here and we'll talk about it
37:11 - a wrapper a wrapping a wrapper function
37:14 - so it's going to take a function wrap it
37:16 - in another function
37:17 - wrapping it around your deck decorative
37:20 - wrapping you're wrapping up the outside
37:22 - so that was that's the way i like to
37:24 - describe the decorators
37:26 - all right so let's undo this so i can
37:29 - see
37:33 - all right so decorator same
37:38 - same type concept here just the way that
37:42 - we use it
37:43 - a little weird all right
37:48 - so did i need to leave that
37:54 - no we'll just start over all right
37:58 - gory tours
38:02 - so we're going to take a cube
38:05 - then
38:08 - all right let's see if we're blurry we
38:10 - good
38:14 - all right so we take this decorator
38:17 - takes in a function
38:18 - because it's going to sit on top of the
38:20 - function and you'll see this
38:22 - so then def i just like to keep this
38:25 - wrapper
38:25 - wrapper function so then we've taken an
38:28 - argument so we can be really clear so we
38:31 - don't have to think about it
38:33 - so then we're going to return the
38:35 - function
38:37 - and the argument okay funk
38:40 - and we're going to go real slow because
38:42 - this can be really weird
38:46 - and then we return the wrapper
38:50 - right so this
38:54 - is this and this
38:57 - then this returns
39:02 - this all right let's look at it
39:06 - so now i'm going to do a def num
39:10 - x then return
39:14 - x
39:18 - num pass in three
39:23 - all right so let's go through now
39:26 - my decorator it's going to take a
39:29 - function
39:30 - wrap it up take that argument
39:36 - then do this
39:40 - to it take this function take its
39:42 - argument
39:46 - and do this so when i do this right here
39:53 - this is all that it takes
39:59 - so i don't have to create and go out
40:01 - like we did with our
40:03 - outer where i'm building my way out
40:07 - to in this just sits on top
40:10 - and you still only interact with the
40:13 - function
40:14 - that you're changing you're augmenting
40:17 - you're decorating
40:18 - you're wrapping it up
40:22 - all right does that
40:26 - throw anybody for a big loop because i
40:28 - remember the first time i saw this
40:31 - i said what but i'm decorating i'm
40:34 - augmenting this
40:38 - to the power of three all right now
40:40 - here's
40:41 - one that can be a little bit a little
40:43 - bit easier
40:44 - to wrap your head around that works
40:48 - that works pretty well uh let's see all
40:52 - right
40:53 - you got the it's going to be for string
40:57 - upper so we take in our funk our
41:00 - function
41:01 - close that out then we do our then we do
41:04 - our wrapper
41:06 - sorry guys i think somebody's coming
41:08 - home so this
41:09 - is not going to take any any arguments
41:12 - right here
41:14 - so then it's just going to return the
41:15 - function then
41:18 - then we're gonna have this right here
41:23 - wrapper
41:28 - just like so just like before so we're
41:31 - taking our function
41:33 - which is going to be a string because
41:35 - this is just returning
41:37 - and if this is a string we know that
41:40 - that method
41:42 - works completely so
41:45 - let's create a death
41:50 - of hi then return
41:56 - hi how are you
42:01 - close that out close that out so we call
42:04 - hi
42:04 - i call it hi i think i did yeah hi how
42:07 - are you so now
42:08 - on top of this i'm just going to slap
42:12 - my upper oops
42:17 - and you you decorate it with the at
42:20 - symbol
42:22 - upper and that's it now
42:25 - later if we're still working together
42:27 - and we get around to
42:29 - i don't know i think they already have a
42:31 - bunch of django but that is a perfect
42:33 - one
42:34 - and those are even more sophisticated
42:36 - those
42:37 - those decorators because it is a
42:41 - three three layered here
42:44 - to take in an argument here to then
42:46 - redirect but all right
42:48 - i digress sorry because i know right
42:51 - here
42:51 - that this can look a little odd you're
42:53 - like well why
42:55 - why would and i get it it's a great
42:56 - question because i asked the same one
42:58 - why would you need to do this why
42:59 - wouldn't you just change it in here
43:01 - if you have a bunch of functions and
43:03 - you're going through
43:05 - and you only want to then augment
43:07 - specific functions and you're like okay
43:09 - here i want this one to do this and i
43:12 - want to do this here
43:14 - so then we just now now that we have
43:16 - this called
43:18 - i got hi and everything's uppercase
43:21 - or if you need to call one sometimes you
43:24 - got
43:25 - you can uh have it call another one but
43:28 - this this just sits up and and you can
43:31 - have these
43:33 - layered i can put more decorators i can
43:36 - put as many decorators on this as i want
43:38 - that would work with the type of object
43:40 - that it is
43:42 - all right so there we go that is
43:46 - decorators well awesome this is gone
43:49 - very quickly so we have we have
43:52 - a very long time to work on
43:56 - a perfect example of scope
43:59 - variables and um the monty hall example
44:04 - so let's let's go ahead and get after it
44:08 - so to give you guys a little bit of a
44:10 - back story of what
44:12 - the monty hall it was a game show
44:16 - in the 60s i think and it was a very
44:19 - interesting concept
44:20 - so i had heard about it but uh when one
44:24 - of my kids was
44:25 - in seventh seventh or eighth grade
44:30 - they they were doing probability and
44:33 - statistics
44:35 - uh probabilities and
44:39 - ran across this problem so it's if you
44:42 - have three doors
44:44 - you pick one of the three doors then
44:48 - so there's a car behind one of those
44:49 - three doors
44:53 - excuse me excuse me there's a car before
44:56 - behind one of the three doors and
45:00 - what the where the trick comes in
45:03 - is the host of the show will
45:06 - show you a door that is not a winner
45:10 - and apparently uh they would have
45:13 - so there'd be a goat behind two of the
45:16 - doors and a car behind the third one
45:19 - so what what the trick would be
45:22 - is he would show you one of the doors
45:25 - that had a goat
45:27 - and he would open it up and
45:30 - what that does to our brains is
45:33 - it messes with the probability and you
45:36 - then have the option
45:37 - is are you going do you want to now that
45:40 - you know which one
45:41 - is not the car do you want to change
45:44 - or do you want to keep the door that you
45:46 - have
45:48 - and almost always
45:51 - the person sticks with their door
45:54 - and here's the problem and then this was
45:57 - a perfect
45:58 - python problem for me to come in and do
46:01 - for the class because
46:03 - we ran a simulation and we did this and
46:06 - were able to prove this
46:08 - on a huge scale but
46:11 - if you change doors you have a 66
46:15 - chance of winning if you stick with the
46:17 - same door you only have a 33 percent
46:19 - chance
46:20 - and i was blown away by it and everybody
46:23 - right now and i've actually had people
46:24 - leave comments
46:26 - in the vid because i have this on my
46:29 - channel
46:29 - uh the original time i did it and
46:33 - people argue about it because it is
46:36 - contradictory to what we
46:38 - think and that's why the game show host
46:40 - did it because most
46:42 - people didn't change doors so when they
46:44 - change doors they
46:45 - they are 66 percent more likely to win
46:48 - all right so let's get into it
46:54 - and it's a perfect example because i
46:56 - remember when i was
46:58 - because when i was first learning i go
46:59 - okay and i did this with
47:02 - um some really really clunky clunky
47:05 - clunky programming
47:07 - and then i ran across nested functions
47:10 - and scope and then so i redid it
47:13 - so i i don't think i've redone it uh
47:16 - you'll see the original uh
47:19 - junkie version if you go back to my
47:20 - channel but um we're gonna have it here
47:22 - so
47:23 - we we're going to go ahead and knock it
47:25 - out so we're dealing with
47:27 - um randomness right and then we're also
47:30 - going to be
47:31 - moving the doors around so we need to
47:33 - import
47:34 - a couple of things from uh from the
47:38 - random library all right
47:42 - so from random
47:45 - import shuffle
47:48 - and choice all right
47:52 - so we need to bring this in and look and
47:54 - see what in the world we're doing
47:56 - so help on
47:59 - shuffle all right
48:03 - shuffle a list in place
48:07 - what does this mean anybody
48:11 - we've been going over this couple times
48:14 - in place return none
48:18 - means you would need to make a copy if
48:20 - you want to keep the original
48:23 - you need to make a copy of it oh that's
48:26 - actually one thing we need to talk about
48:27 - at a later class i need to make a note
48:29 - of that copy
48:30 - yeah hang on
48:34 - copy and pointer
48:38 - hang on pointer
48:43 - and copy because we need to talk about
48:45 - this because
48:47 - you can get hung up on referring to a
48:49 - place in memory or an exact copy
48:52 - can be very tricky all right anybody
48:56 - all right cool all right so shuffle
49:00 - moves everything around in place will
49:02 - not be creating a new object
49:03 - and then choice we need to look at
49:05 - choice
49:07 - oops help
49:12 - so what does this do choose a random
49:15 - element
49:16 - from a non-empty sequence so basically
49:18 - we're gonna have
49:19 - a uh a list
49:22 - of two goats and a car and we're gonna
49:26 - shuffle it
49:27 - then we're gonna randomly just pick a
49:30 - an index so our index is going to be our
49:33 - door numbers so that
49:34 - that that was the example they brought
49:36 - out a wall
49:38 - and it had uh and it had doors on it one
49:41 - two three
49:42 - well we have a list uh indexing zero one
49:46 - two
49:46 - and we're gonna randomly shuffle uh the
49:48 - goats and the car
49:50 - in there then we're gonna randomly pick
49:52 - one
49:54 - then we're gonna have the goat from the
49:57 - list
49:58 - from the remainder get kicked out and
50:01 - then
50:02 - we're either gonna keep the one we have
50:05 - or
50:06 - swap for what's left in the list so it's
50:08 - a
50:09 - great when i heard when i heard it
50:11 - brought up if i could uh
50:13 - if i could program something and teach
50:15 - the class
50:17 - it is a awesome programming challenge
50:20 - so you have to we have to really be
50:23 - paying attention
50:24 - so in the nested way we need to do this
50:28 - we need to create our game right so
50:32 - our overall function and then inside the
50:34 - function our two nested
50:36 - is switch and what do i call it no
50:39 - switch
50:40 - and switch so in a scenario
50:43 - uh we're gonna we're gonna switch ten
50:45 - thousand times
50:46 - well the game is gonna take in the
50:48 - number sorry
50:49 - um and then uh
50:52 - and then we're not gonna switch and
50:54 - we're gonna see and it
50:56 - is it was very very eye-opening
50:59 - when i saw this because everybody thinks
51:02 - and then i finally went and started
51:04 - looking and
51:04 - uh was doing some research and it just
51:06 - shows
51:08 - why why this show was wildly successful
51:11 - and why so many people did not win
51:13 - because it's contradictory to
51:16 - what what our brains think where you're
51:18 - like well you just remove one of the
51:20 - doors
51:21 - and i'm gonna stick with my door well
51:24 - you just found out that a third of the
51:27 - um possibilities have been removed
51:31 - you need to change doors and you're more
51:33 - likely to win you're actually twice as
51:34 - more likely to win
51:37 - all right okay so we need to deal with
51:41 - lots of stuff
51:43 - game then number of
51:47 - number of times we're going to test this
51:49 - and then we're going to change
51:51 - if we're going to change so we're going
51:53 - to default this to false
51:56 - all right so now
52:00 - we have our doors right
52:07 - i know i'm saying a lot right now any
52:10 - questions
52:11 - right now any questions at all
52:17 - all right cool let's get going
52:21 - and i think my kids are coming off their
52:23 - zoom meetings so
52:25 - hopefully it won't be blurry and it'll
52:26 - stay good
52:28 - all right so we got one
52:32 - goat two goat
52:38 - car close this out
52:43 - all right so now we need to shuffle the
52:45 - doors
52:47 - because we want this to be random
52:50 - so then we're going to go how we're
52:52 - going to do this
52:54 - anybody got any guesses
53:11 - i gotcha okay all right so shuffle is in
53:15 - place
53:16 - so i want to shuffle these doors so i
53:17 - don't have to do any assignment right
53:19 - here
53:21 - so and let's see
53:26 - uh pass in take shuffle
53:30 - pass in our object shuffle
53:35 - and we pass indoors
53:42 - so print here
53:50 - actually we already have all this so uh
53:58 - shuffle
54:01 - doors print yeah we'll just do print
54:05 - doors here
54:15 - so again uh
54:19 - right now false okay
54:24 - all right so now it's shuffled
54:28 - and it's car goat goat and then we run
54:31 - this again
54:32 - go go car let's move this over so we
54:35 - don't keep getting ate up
54:40 - so we got car goat goat go goat car
54:44 - goat cargo goat goat cart goat
54:48 - all right
54:51 - okay now oh and we need to track
54:55 - we don't need that anymore now we need
54:58 - to track
54:59 - our wins losses
55:04 - 0 0.
55:08 - now now what we need to do
55:13 - get that down there now we need to
55:16 - create
55:17 - our nested functions this is where it
55:20 - gets fun
55:23 - all right cool so our nested functions
55:25 - first one is going to be
55:26 - no switch so right here
55:30 - so then it needs to know the reason why
55:32 - the reason why i'm setting up like this
55:34 - is well one it's
55:35 - it's it's great practice for uh
55:38 - to wrap our head around nested then
55:41 - non-local
55:42 - and especially since we have two
55:45 - scenarios inside the game right okay
55:49 - you can either switch or not switch
55:51 - absolutely perfect
55:53 - all right and then things will act
55:56 - things will act differently so no
55:58 - switch we don't need it to do anything
56:03 - but we have we have variables that are
56:06 - going to be
56:07 - we're going to be working with right on
56:10 - local
56:10 - wins losses because we want to pull
56:14 - these in
56:15 - here and manipulate them
56:18 - if we pick the coat the goat or if we
56:21 - pick the car
56:24 - okay and it's literally
56:27 - now when we get down into the actual
56:29 - game that
56:31 - is where this is where it gets fun so no
56:33 - switch is
56:35 - we're gonna pick a door if
56:38 - if the um if the choice is the car
56:42 - you straight up win if it if you don't
56:44 - but the fun part
56:46 - to laying out this logic is for the
56:47 - switch so if car
56:51 - equals choice so let's look at choice
56:54 - again
56:56 - choice is sequence and then so sequence
56:59 - is our
57:00 - interval our list choose a random
57:03 - element from the non-empty list so we're
57:05 - going to pass in
57:06 - choice pass in uh doors
57:16 - all right and oops
57:20 - then wins if
57:23 - if the choice if this choice
57:27 - is car equal to car
57:30 - then we're going to increment up one
57:34 - else losses
57:37 - because it's if it's not oops
57:42 - one all right
57:46 - now here comes the fun part because we
57:48 - really gotta do some thinking here
57:52 - oh we may be we're way ahead of schedule
57:56 - okay i thought all these others would
57:58 - take a little bit longer
58:02 - all right
58:05 - switching doors
58:12 - switch apps if you spell switch
58:15 - right and let me check my notes
58:22 - so now we have our doors
58:41 - goat
58:44 - goat and car
58:50 - then on local because we're bringing in
58:52 - our wins
58:56 - losses now
58:59 - all right so we need to
59:03 - this is going to get a little a little
59:05 - complicated so
59:08 - we're going to pick a door then we're
59:10 - going to get shown a goat
59:12 - doesn't matter what what door it's
59:14 - behind
59:16 - then in this one we're going to
59:20 - grab what's left so so let's let's think
59:23 - about this for a minute
59:25 - all right
59:29 - i need a graphical think i have paint
59:32 - somewhere all right so here
59:40 - that's not what i wanted where's the
59:43 - shape
59:43 - is that okay
59:50 - all right so i'm going to
59:56 - pick my door then
60:01 - then they're going to show me because
60:04 - there's definitely going to be at least
60:05 - one goat left because there's two of
60:07 - them
60:07 - so then they're going to show me a door
60:10 - and then
60:11 - i'm going to switch and pick the other
60:14 - door
60:15 - all the time so it's going to be the
60:18 - last
60:20 - the last door the only door left alright
60:23 - let's go through this again
60:26 - so i'm going to pick a door randomly
60:30 - choose a door
60:30 - this is all random randomly choose a
60:33 - door
60:35 - the game show host is going to show me
60:37 - another door
60:38 - and then i'm going to pick
60:41 - the last door the the last door that's
60:44 - left the last object in our list
60:47 - all right cool is that
60:50 - does that make sense all right
60:53 - so let's just get after this
61:00 - so yeah especially when the math teacher
61:02 - brought this up
61:04 - i thought it was well one
61:07 - i wanted to do the simulation to test
61:09 - this
61:10 - because she had explained that they had
61:12 - done it in class and
61:13 - proven it well i was like okay well
61:16 - that's how are you doing that because
61:18 - she said that they did it by
61:20 - in recreating
61:23 - and uh well i was like well i we can do
61:25 - this with a computer and check this
61:27 - any number of times and it's
61:29 - unbelievable how percent well you'll
61:30 - you'll be able to see
61:31 - but it just becomes it's like flip it's
61:33 - like flipping a coin
61:35 - the more times you flip it the closer it
61:38 - gets to 50 percent
61:39 - and your significant figures just go out
61:41 - and out and out
61:42 - it's just ah i don't know it's cool
61:46 - i'm not that good with probabilities but
61:48 - when it's a concept that i get
61:50 - i really love it so all right so we're
61:52 - going to pop out a choice
61:55 - so range three
61:59 - so let's go over this why i'm popping
62:01 - out
62:02 - why i'm popping out i'm removing
62:06 - the first random choice pick pick an
62:08 - index pop it out
62:10 - boom so now we're down to two so it's at
62:13 - least going to have one go
62:15 - right so now now i'm going to remove
62:19 - a door now i'm going to remove a door
62:26 - that has we need to look at remove
62:30 - so we got door right
62:38 - i just realized that that
62:44 - all right so we need to look at uh pop
62:48 - and remove i thought we did that but we
62:51 - did not who knows pop and remove
62:55 - yeah i changed thank you i just changed
62:57 - it to door
63:01 - thank you um so we put door in memory
63:06 - and then uh we need to look at der
63:10 - on door so we have
63:15 - pop and remove
63:18 - i realize we did not do
63:22 - pop remove
63:28 - sorry wow door
63:34 - dot pop okay
63:38 - it will remove and return item
63:42 - at index whatever we index
63:45 - or if we leave it blank it defaults
63:50 - to negative one or the last object
63:58 - remove well all right you'll be
64:00 - surprised
64:01 - um okay the very cool thing about
64:04 - pop
64:08 - okay the very cool thing about pop is it
64:10 - brings it out
64:13 - and returns so you can grab you do two
64:16 - things
64:16 - at one time you go and grab it
64:20 - and then you can assign it to something
64:21 - because it pops and returns it
64:23 - so if you don't put it with some
64:24 - something assign it to something
64:26 - it goes away but right now we are
64:29 - pulling it out of the list we're pulling
64:33 - it out of the list
64:34 - then we have our two then we're gonna
64:36 - have a goat shown
64:38 - and then we're gonna have something left
64:39 - here and either
64:41 - this is going to be the car or a goat
64:44 - but we're going to take this one every
64:45 - time
64:50 - then now no it doesn't put it into
64:52 - memory
64:54 - it pulls it and as you're pulling it out
64:57 - you can assign it to something
64:59 - but if you don't assign it to something
65:00 - it goes away so
65:02 - be very so let's see
65:06 - am i not because right now my first
65:10 - choice i just want it gone
65:11 - what you'll see here in a minute is uh
65:16 - um we'll do remove and we'll see so
65:19 - if i wanted to pop it out and
65:22 - then have it assigned to something
65:25 - because right now we are just
65:28 - because because we're switching so i
65:30 - could have used
65:31 - um pop out a random choice grab it and
65:34 - assign it i could
65:36 - could have done that but right now i
65:37 - just wanted to pop out and have it go
65:39 - away
65:40 - because i'm not using my first choice
65:44 - i'm gonna go for this one so i'm picking
65:47 - this
65:48 - going away don't care what it is because
65:50 - i know i already know i'm going to
65:51 - switch
65:52 - i'm going to i'm going to what's left so
65:55 - i'm grabbing this throwing it away
65:56 - going to see a goat because they're
65:58 - going to show me a goat and then i'm
66:00 - just going to get the other door
66:01 - i'm going to pick whatever's left and
66:05 - if you think about it 66 percent
66:08 - of the choices are being removed for me
66:10 - i'm just going to take the last one
66:12 - that's why this works
66:16 - all right have i thoroughly
66:20 - i thoroughly confused everybody so all
66:22 - right so now
66:24 - so i took it pulled it out got rid of it
66:27 - now remove this is what's very cool help
66:32 - on door
66:35 - dot remove
66:39 - removes first occurrence of value so
66:42 - you're actually passing in
66:45 - so i got door so i have goat
66:49 - so if i go door dot
66:53 - remove
66:58 - goat
67:00 - then i go door
67:04 - so i have goat and goat now we can't see
67:07 - so it does not remove index it goes
67:11 - and finds the object that you want to
67:13 - remove and remove it
67:15 - so when we pick here at and then we can
67:21 - so that now i'm going to be down to two
67:23 - objects
67:25 - then i'm going to remove a goat because
67:28 - again
67:30 - doesn't matter because there's at least
67:32 - going to be one goat left
67:34 - there's either going to be after this
67:36 - after this first choice i'm going to
67:38 - grab it throw it away
67:39 - doesn't matter because we already know
67:40 - where we're switching
67:42 - all i know is that i'm going to get
67:44 - whatever's left then there
67:45 - so either this is going to be a car or a
67:48 - goat and i'm going to throw it away
67:50 - and there's always going to be at least
67:52 - one goat here right
67:53 - so then they're going to show me a goat
67:55 - and i'm all in this scenario i'm always
67:57 - going to get
67:58 - what's left over i don't care what's
68:00 - left over i'm going to take what's left
68:02 - over
68:03 - and this is how we're going to do it so
68:05 - second
68:08 - choice
68:13 - equals oops equals door
68:19 - zero then if
68:22 - second choice
68:27 - choice equals car
68:32 - then wins
68:35 - okay and then
68:38 - oops
68:41 - else losses
68:49 - equals one all right let me pop over
68:51 - here and see
69:04 - all right
69:08 - believe well i thought it was going to
69:10 - remove a here
69:12 - doors
69:18 - all right so as you can see that is not
69:21 - with remove does it have a default
69:26 - it would only default it would only
69:28 - remove first item if that was a
69:30 - if that was a default value
69:40 - okay good does that make sense and i
69:43 - misspelled second
69:44 - awesome thank you
69:47 - so does that make sense
69:58 - and the established spell awesome thank
70:01 - you
70:02 - no you guys are great no that was
70:04 - actually one of the things
70:05 - if i haven't said this one this
70:08 - has helped me with my typing because
70:10 - i've had to be more consistent but two
70:12 - you have to come up here and you have to
70:14 - problem solve not only are you
70:15 - problem-solving and laying out
70:17 - how to solve the problem but when you
70:19 - make a mistake like this
70:21 - you will you will be sent you will be
70:25 - sent be like look
70:26 - you're trying real hard i get it but i
70:28 - got this and this doesn't make any sense
70:30 - all right so cool so yeah that only that
70:34 - only
70:34 - just like this so yeah no whenever you
70:37 - whenever you're
70:38 - seeing this and you don't have any equal
70:39 - signs a default argument
70:41 - optional argument default optional
70:44 - basically same thing
70:45 - okay all right let's keep on moving keep
70:48 - on checking
70:49 - so actually we may only get to about 90
70:51 - minutes today
70:53 - so now we need to do our
70:56 - for loop with
70:59 - uh how many times we're going to do this
71:02 - because we just we've created our
71:05 - number of times then if we're going to
71:07 - change
71:08 - so then we need to have some logic here
71:12 - to which which function to run
71:15 - if change is true or false let's get on
71:17 - the right layer
71:19 - so for i in range
71:24 - x
71:26 - then let's bring this up let's get rid
71:29 - of that
71:33 - uh if change
71:37 - then switch
71:42 - switch yuck
71:46 - and else
71:50 - and no switch
71:56 - all right so now we need to lay this out
71:59 - i'm just going to copy these two because
72:02 - if i've already been spelling
72:04 - this much all right
72:16 - okay all right so let's go through this
72:20 - i think we can see all of this so i have
72:24 - my
72:24 - change so i'm bringing this in
72:28 - then going through and then down here
72:32 - as i'm testing how many times are we
72:34 - doing this
72:36 - and if change is false
72:40 - so right so this is either going to be
72:44 - true or false if it's false we switch
72:49 - excuse me if it's false we don't switch
72:52 - see see why i set this to default to
72:55 - true excuse me to default to false
72:58 - so if that's true we run
73:01 - switch we run this we call this function
73:06 - if we don't switch if that's false
73:09 - if they don't input to change we come up
73:12 - here
73:13 - and run no switch very very standard all
73:16 - right so
73:17 - now now let's now let's call this
73:21 - and run
73:24 - game 10 000 times
73:32 - all right all right
73:36 - wins 33 of the time
73:39 - and loses 66 percent of the time
73:44 - so print
73:48 - and game ten thousand
73:54 - thousand true
73:58 - all right
74:02 - this is where it gets weird this is
74:03 - where it's so crazy
74:05 - so if you switch doors you win 66
74:08 - of the time and you only lose 33
74:13 - it's it's just absolutely it's
74:15 - absolutely nuts
74:17 - and i remember when the first time i did
74:19 - this i just
74:21 - i was like there is no way that
74:24 - that's true and then i went back and i
74:26 - laid out the logic and
74:28 - i was like this is absolutely
74:31 - this is absolutely the truth and how
74:34 - just very very interesting so actually
74:38 - you know what we flew through this do we
74:41 - want to look
74:42 - at um open
74:45 - and url lib
74:50 - because uh we can limp through that's
74:52 - not
74:53 - so complicated so i can use my old notes
74:55 - everybody want to do that
74:56 - so we can stay on a little bit longer
74:59 - how's that sound everybody
75:05 - i can go a little bit more i really
75:07 - thought that i had
75:08 - i really thought that all this would
75:10 - last all right
75:14 - url okay so cool
75:17 - let's go ahead and do that then let me
75:21 - give me a moment or two to dig
75:24 - up these things because i know i have it
75:26 - very close
75:29 - there's the raven stuff url
75:36 - lib
75:38 - here i am
75:44 - i'm in the wrong file
75:51 - url lib
76:04 - all right so here we go
76:07 - we need to let's all right let's comment
76:09 - all this out
76:16 - uh check and see because again i i
76:20 - lose track if url
76:24 - lib is already in here i know i know
76:25 - what program i can check and
76:27 - chord u r l lib all right
76:31 - i have one program that's not touched
76:34 - so we're going to be looking at
76:38 - url lib anybody ever heard of
76:44 - url lib url lib
76:55 - and then ooh if we can get through this
76:58 - and we can do and i don't know another
77:02 - 15 20 minutes that'll get us close to 90
77:04 - minutes and then
77:06 - uh i'll make sure we have two hours
77:08 - because that'd be two weeks in a row
77:10 - not doing it two hours so i apologize
77:12 - all right
77:13 - url lib let's do let's just look at it
77:17 - help url lib
77:22 - and this is where it gets odd
77:28 - packages so now we have to be laser
77:30 - focused
77:31 - on what we want to
77:34 - import
77:39 - and
77:43 - ooh and then after this i know what i
77:46 - forgot to do
77:47 - we didn't sort the dictionary
77:50 - that is so cool so we're going to do
77:52 - that
77:54 - next because i have a feeling this won't
77:56 - take that long
77:58 - so url lib whenever you have things like
78:00 - this packages
78:02 - you then need to be laser focused
78:05 - to bring them in so then you're going to
78:08 - do
78:10 - request
78:12 - as url so now
78:16 - because i know this can get so confusing
78:18 - so so odd
78:20 - so now when i run actually
78:23 - let's go let's do this real slow
78:28 - uh help url lib
78:36 - no i want to do dur on url lib
78:41 - okay so see it only has
78:45 - parse sitting in here so then when i go
78:48 - and do
78:52 - request
78:55 - so now i run dir on url lib
79:02 - so see now i now i have request
79:06 - and response i know this i know this is
79:08 - weird
79:09 - but i don't want to do packages yet
79:13 - but you begin to see that python helps
79:16 - you
79:17 - manage memory so it will only bring in
79:20 - things that you say hey
79:21 - i really need this and okay
79:24 - so request request and response so now
79:27 - we're
79:28 - now we're tipping our toe into client
79:31 - and server so you're going out
79:33 - requesting then you're getting a
79:34 - response does that makes
79:37 - does that does that makes does that make
79:39 - sense
79:40 - let me see all right so now i want to
79:44 - i'm sure you've learned by now and it's
79:46 - dangerous for me anyway to be typing
79:48 - all of those letters so we're going to
79:50 - shorten this to
79:51 - as url and in case we have anybody new
79:54 - joining us
79:55 - i'm sam doing some free code camp
79:59 - streaming i'm from python basics
80:03 - every video that i've done here i have
80:06 - micro videos on my channel
80:11 - so there's pluses to both of them
80:15 - a lot right here is a lot more freestyle
80:20 - and a lot of interaction uh the other
80:22 - and also a stream of consciousness
80:24 - where the other is uh micro videos just
80:27 - uh laser focused one subject at a time
80:30 - all right so url
80:33 - and it's request so now we're going to
80:35 - have so now let's look at
80:38 - help on url
80:43 - oops didn't bring this into memory help
80:46 - you url
80:50 - holy moly let's run dur
80:54 - on url
80:57 - see why you don't bring it all in when
80:59 - you import url lib
81:01 - it's ginormous so that is
81:05 - this is just
81:08 - we're just going to be touching the tip
81:09 - of the iceberg with uh where is it
81:18 - url then url open
81:21 - um if i knew my alphabet so see
81:25 - there we are and then we're going to
81:27 - bring in the file
81:29 - and then drop it in and then we need to
81:32 - understand
81:33 - the text and then we're going to look at
81:35 - open then we're going to write
81:37 - and then we're going to go from there so
81:40 - let's see how we do
81:41 - let's bring this down here help
81:46 - url all right we got we know that's a
81:49 - ton of it yep i want to
81:52 - i want to expand this and i know it's a
81:54 - lot
81:55 - okay url lib request
82:00 - and it's in the url module and you have
82:04 - a ton of support and then
82:08 - here are the classes and then as you can
82:11 - see
82:12 - i think there's even more packages
82:17 - okay but
82:21 - we're just going to be touching
82:24 - url open
82:29 - okay
82:32 - and i think i have this
82:36 - i know i have a i put the raven on my
82:40 - on my github but maybe i'll go
82:43 - at the top of it and put this file so
82:45 - you can practice it
82:48 - let's get this back undone
82:53 - so
82:58 - now let's bring this over here so you
83:01 - pass
83:01 - in the the address
83:05 - and the reason why i choose chose the
83:07 - raven is
83:08 - because it's um public domain it's
83:11 - uh it's very very old as you'll see it's
83:14 - 18
83:16 - 18 what 1836 18
83:21 - and that's actually 1845. so it is
83:24 - when he he died it's 100 years pass
83:27 - after the author's death
83:30 - so all right
83:37 - oh shoot there we are so now we bring
83:40 - this
83:40 - in so we do text
83:44 - equals page
83:47 - actually let's not let's go real slow
83:52 - page oh
83:55 - aha so now
83:58 - here's my response object
84:02 - because it came back like i said you
84:04 - have your uh
84:06 - url open because it's um
84:13 - that's going to take forever endur
84:17 - on url
84:21 - it brought in request and response
84:25 - right and now we have a response
84:28 - so now we need to read it
84:31 - and we run der
84:34 - and look dur if i haven't said this in a
84:38 - while
84:38 - dur and help your friends don't don't
84:41 - try to memorize this stuff because you
84:43 - will get into
84:44 - you'll you'll get
84:50 - url to the raven is the description of
84:52 - the video
84:53 - i can't post url
84:57 - post urls but the video
85:01 - uh was dictionary uh part two well thank
85:03 - you very much for doing that
85:04 - okay well i really appreciate that so
85:07 - everybody
85:07 - uh jan is already on top of it uh if
85:11 - so if you have a hard time coming back
85:13 - and can't find this
85:14 - it uh it's it's uh dictionary part two
85:18 - so all right so cool all right so we're
85:21 - running
85:22 - on page
85:25 - all right here we go so now my page
85:28 - object
85:30 - is my response right so my page objects
85:32 - is a client response
85:34 - and what can we do with page page
85:37 - can read
85:41 - okay so let's let
85:45 - let's read it so text dot
85:50 - text equals page dot
85:54 - read all right so
85:57 - text
86:01 - 70 lines and what is okay
86:05 - all right super important right there
86:08 - right
86:10 - so help
86:15 - help on text
86:22 - ooh it's bites
86:26 - what can we do with bites let's see
86:31 - oh oh we can do all kinds of stuff so
86:34 - there's the help on it
86:36 - but so we can be laser focused
86:41 - der on text so we just ran help
86:46 - oh wow is that text
86:50 - yep and then here's here's the breakdown
86:53 - of all the methods
86:55 - but here's a list of all the methods
86:58 - methods that we ran so okay so we have
87:02 - uh we can do all of this and we get it
87:06 - but we can clean this up just a little
87:09 - bit
87:11 - text equals text dot decode
87:21 - there we go it's just regular
87:24 - irregular text now so now give me
87:27 - a second because i need to figure out
87:31 - where all right 3 8
87:35 - all right i don't have this so we can
87:38 - all right so now what we need to do
87:42 - is now that we've brought this and we
87:44 - have we still have
87:45 - i want you to see this you want to be a
87:47 - good
87:48 - you want to be a good steward of
87:49 - connections so
87:53 - right now we have an open response right
87:55 - now so we need to close this
87:57 - we need to make sure we close the page
88:00 - page.close
88:02 - you don't want to leave anything open
88:03 - you want to finish it up
88:06 - so now page still a response
88:10 - object but it's closed okay so
88:13 - now now we're going to create a file
88:18 - file open
88:21 - we're just going to name this the raven
88:24 - dot txt txt
88:27 - now all right all right
88:44 - open file name file object built in
88:47 - function
88:48 - uh in module input output
88:51 - now you do not what i just say
88:55 - you do not have to remember because our
88:57 - little shopping list
88:58 - is going to come very handy so all right
89:01 - r
89:02 - read there's a default to
89:07 - mode r defaults to r
89:10 - defaults to read w
89:14 - open for writing goes to the first
89:18 - x creates a new file open it for writing
89:24 - uh a open writing appending
89:28 - in the file if file exists binary text
89:31 - mode
89:32 - open a disk file for updating this is so
89:36 - cool
89:37 - new line mode all right
89:41 - so there is a lot here
89:44 - we are opening a file
89:47 - to write all right and we'll get into
89:50 - more of this
89:55 - i don't want to do um especially don't
89:58 - want to do it
90:01 - text context editor we're not going to
90:04 - do a context editor right now because
90:06 - that can really throw
90:07 - people for a loop we're just going to
90:11 - open the file
90:12 - right to it close it
90:17 - all right let me get this over here
90:26 - all right so right now here is
90:31 - the last order of my files that i have
90:35 - so we are open we have we have our file
90:38 - around
90:39 - it's not what i wanted to see this
90:43 - let's bring this in so i can
90:48 - read these okay so all right we open
90:51 - close brought it in so now we have we
90:53 - have the all of the data that we want
90:55 - and sitting in the text text object so
90:58 - now we're going to create
90:59 - create a file object we're going to open
91:01 - it what are we going to name it we're
91:03 - going to call it the raven
91:05 - dot txt then we're going to write to it
91:10 - all right so now i have a file
91:14 - object file
91:20 - sorry okay i got a file object what can
91:24 - i do with my file
91:25 - object all right
91:29 - i can read line read lines
91:32 - seek mode
91:36 - all right and of course it's right on
91:39 - the scene
91:42 - or i can write to it i can read and
91:44 - write
91:45 - so whenever you're doing something to
91:48 - your file
91:49 - object it has a method read
91:53 - write so we're going to file
91:57 - get our file we're going to write to it
92:00 - and we're just going to what what are we
92:02 - passing what are we passing to it
92:04 - our text
92:09 - now we also want to be a very good
92:12 - steward
92:14 - of our connections
92:17 - and what we have to do with things so
92:18 - we're opening it we're writing to it
92:22 - excuse me we're opening our file we're
92:24 - saying we're going to write
92:26 - we write to it we close it and we go
92:28 - from there
92:30 - all right so that's that whoa look at
92:33 - this
92:34 - handy dandy
92:38 - little thing
92:48 - we will be i promise you okay since
92:50 - we're doing this
92:52 - now let's do our shopping list
92:55 - uh next week and you'll see how we
92:58 - handle that
92:59 - there is a way that you go this then
93:01 - that
93:02 - and that and this and that's your little
93:06 - tease for
93:07 - for this week to to come back so but no
93:10 - there there there is and actually if you
93:12 - read the documentation
93:14 - it'll tell you i'm not gonna tell you
93:16 - until next week
93:17 - so here's our nice little pretty raven
93:19 - file
93:20 - god look at that and
93:25 - we're going to look we need to look at
93:27 - this
93:29 - text i want you to look at this format
93:35 - just laid out just like this
93:39 - i want you to look does the spaces has
93:42 - the
93:42 - end have we talked about this escape
93:45 - character
93:48 - in
93:52 - well i really i really appreciate it i
93:55 - it's interesting how i've stumbled and
93:57 - bumbled and stummed across this
94:00 - stumbled across all of this i love
94:03 - i love teaching python i'm more of a
94:06 - teacher than i guess i thought i'd ever
94:09 - ever uh thought but i absolutely love
94:12 - so this is here and all kinds of
94:15 - gobbledygook
94:16 - but all these nice awesome little rules
94:19 - sitting right here
94:21 - and then bam comes out in this perfect
94:24 - format
94:25 - and tells text exactly what to do i mean
94:29 - look at this
94:31 - it's just it's just right here and it
94:33 - knows
94:34 - to do a new line and come through
94:38 - and just look at it new line a whole new
94:41 - line
94:43 - you can just see it right here boom new
94:46 - line new line
94:48 - all right now can i believe we didn't do
94:51 - it so we're done with this
94:53 - that's open and we'll since we've done
94:56 - these two
94:56 - this week we'll do our shopping list
94:59 - next week
95:00 - and i'll try to figure out how to make
95:01 - that sound better than a shopping list
95:03 - so we get a lot of people who
95:06 - really can understand um
95:08 - [Music]
95:10 - file control and then we're going to
95:12 - build a context manager uh
95:14 - that that is it it handles a lot of
95:17 - things for you it's the width
95:19 - it's the with uh keyword it's phenomenal
95:23 - very very powerful all right i just
95:25 - realized
95:26 - we did not sort our book so we need to
95:30 - learn
95:30 - we need to look and see how to sort our
95:32 - book that we just did
95:34 - our dictionary with our book so let's do
95:37 - that
95:38 - and then we'll wrap it up so
95:42 - all right
95:45 - so let's get our book down here where'd
95:48 - our book go
95:52 - all right
95:56 - copy they won't go back and forth
96:00 - copy copy and paste
96:05 - undo this all right so then book
96:12 - 100 and
96:17 - how many keys are there how are we going
96:19 - to find out keys
96:21 - so we do book
96:26 - lynn book
96:30 - 569 different words
96:34 - in the raven
96:37 - 569 because there's 569 keys
96:40 - so that's now that's not the total of
96:45 - then what do we call it file
96:53 - so now we're going to do lan on file
96:57 - so the total poem is 1059
97:02 - words and there's only 569
97:06 - different words
97:10 - so we had a lot repeat so now we're
97:13 - going to see
97:16 - how to handle this so we need to create
97:21 - we need to create a function last
97:25 - and you'll know why in a second return
97:29 - return x minus 1
97:33 - then book now we need to turn this
97:36 - in and to see all the items
97:46 - book.items
97:48 - all right so now we need to sort this
97:51 - and you'll see why we did uh
97:54 - why we did items here in a second
97:56 - because we need the key and the value
97:58 - right we need to be able to see it we
97:59 - need to be able to then sort it
98:00 - and then go from there so now we're
98:03 - going to do
98:04 - sorted book
98:08 - equals sorted didn't want to do this
98:12 - with lambda we could do this with lambda
98:13 - but
98:14 - i know that can be very tricky i need to
98:16 - do a bunch of lessons on lambda
98:19 - because uh once you get it you get it
98:23 - all right the key so first it's book
98:26 - so it's my key in value then my key
98:29 - to the sorted is last i want you to sort
98:33 - it off
98:34 - and then we're going to reverse it so it
98:37 - goes it automatically goes from lowest
98:39 - to highest i want to see
98:40 - which words in the raven
98:44 - occurred more the most and then go
98:46 - backwards
98:47 - sorry reverse true true
98:50 - true that's horrible
98:54 - all right so for i am
98:58 - sorted
99:01 - sort book
99:04 - and oh yeah in this sample i only want
99:09 - to see
99:09 - the top 10 top 10 words
99:13 - in the raven that's what i'm doing here
99:16 - to print
99:17 - i zero
99:21 - and a colon
99:25 - i guess i didn't feel like putting this
99:27 - in an f-string format
99:31 - i wonder how old that is
99:34 - close that out close that out oops
99:39 - uh would i miss
99:44 - i n 10
99:48 - 1 2 print ooh
99:55 - what didn't i close out
100:05 - let me see
100:10 - where's my syntax error i got an error
100:20 - somewhere
100:24 - all right we're gonna cheat copy this
100:29 - paste that
100:33 - there we go wow looked exactly the same
100:35 - i wonder what i did did anybody catch
100:37 - what i did
100:38 - okay so here we go
100:42 - so this is the sorted book
100:45 - sort book so i sorted it i took i
100:48 - took the file we threw it into
100:56 - thank you okay all right
101:01 - so i throw it into my dictionary if the
101:03 - word doesn't exist i
101:05 - count the first count at first time if
101:06 - it does exist i increment it by one
101:08 - so then i created a my last function
101:11 - because i'm sorting this
101:13 - by the last
101:16 - of the key the value
101:19 - key value so i'm sorting it by value
101:21 - don't care what because
101:23 - what when you sort a dictionary you will
101:26 - be
101:28 - sorting by the key so if i just sorted
101:30 - my dictionary
101:31 - it would come out in alphabetical order
101:33 - for my keys
101:35 - and not caring what my value was so i
101:38 - have to resort this
101:39 - off of the key for my items right here
101:43 - so because i took key and value brought
101:46 - in
101:46 - items so book right now is
101:51 - my key and value pair
101:54 - how many times did those occur so then i
101:57 - took
101:57 - my key in value sorted it went in
102:01 - reverse
102:02 - so i went in reverse most so i want you
102:04 - to sort it by
102:06 - the value and i wanted to go in reverse
102:08 - i want it to be
102:10 - it automatically goes from smallest to
102:12 - largest i want you to go in reverse i
102:14 - want you to go from
102:15 - largest to smallest and then right here
102:18 - i printed out each
102:22 - key and value like so and i brought it
102:25 - in
102:26 - because my sorted book is
102:30 - this right here in order
102:34 - and mike here
102:39 - and oh shoot
102:46 - there's a lot in memory that's why this
102:47 - is acting up sorry guys
102:50 - so then
102:53 - the case matters in sorting yes
102:57 - just bring this back in there we go
103:01 - and to probably be a little uh
103:04 - did you see how slow this was so
103:07 - so it probably wouldn't be hurt wouldn't
103:09 - hurt to do because i saw it in my notes
103:11 - here and now that makes sense
103:12 - so now i have a file object and a book
103:14 - object so it probably wouldn't hurt to
103:17 - stop being a memory hog and start
103:19 - deleting book and file
103:21 - uh up here especially file probably but
103:24 - so here we go so the top 10 words are
103:28 - the and i my of a that
103:32 - chamber this and at the
103:35 - or the happen 56 times in the raven
103:38 - so there we go guys um you guys are
103:41 - absolutely awesome
103:42 - uh thanks for coming back and hanging
103:45 - out
103:46 - with with me for another uh week want to
103:48 - appreciate
103:50 - um quincy and bo for allowing me this
103:53 - opportunity to connect with you guys
103:55 - because if there's anything i can help
103:56 - you guys with and saving you
103:58 - some pain and time and energy and your
104:01 - python journey
104:02 - i want to do it because mine mine has
104:05 - been
104:06 - mine has been a bumpy road and uh so
104:09 - that was the reason why i created the
104:10 - channel that i did
104:12 - uh at python basics was what channel
104:15 - what would i want if
104:16 - i were starting over what would i
104:19 - what would i what would i want the
104:21 - channel to look like
104:23 - and that was how i started and also did
104:24 - an experiment uh
104:26 - put together um if you hadn't seen it
104:29 - the first
104:30 - six of my live streams it's five hours
104:33 - so
104:35 - now we have you guys have this
104:36 - everywhere so you can go back and look
104:38 - at it it's going to be a little bit
104:40 - different everywhere
104:41 - mainly the same big chunk but a lot of
104:44 - like i said a lot of stream of
104:46 - consciousness so things that
104:48 - it's like when you hear the audiobook
104:50 - the the reader the author
104:52 - might go off on a tangent and explain
104:54 - what they were thinking and
104:56 - i've seen that a lot so you get a little
104:59 - bit more in depth so
105:01 - don't just do this and think you have it
105:02 - you've got to practice it just like i
105:04 - was talking about at the beginning 10
105:05 - 000 hours 10 000 hours however long it
105:08 - takes doesn't matter how long it takes
105:10 - just do it sorry guys i've rambled on
105:13 - enough
105:13 - thank you guys for um putting up with me
105:17 - and hanging out with me
105:18 - i really appreciate it it's very
105:20 - humbling right now we got 140 something
105:23 - uh people here like i said very very
105:26 - humbling
105:27 - so as always guys thanks for watching
105:29 - please hit that subscribe button for uh
105:31 - free code camp if you haven't already
105:33 - and also that like button so i will see
105:36 - you guys next week and we will work on
105:38 - that shopping list so we can really
105:40 - examine uh context managers and files
105:44 - i think that's a great idea alright guys
105:46 - see you guys next week
105:51 - bye

Cleaned transcript:

hi everybody uh welcome back today uh i am sam uh from python basics and we'll be doing a another two hour live stream today on uh free code camp here and the regular the way the agenda usually works is um it's about two hours uh don't see anything happening today was not feeling too hot last week so but we are gonna finish up uh some dictionary stuff because that was requested and that is very very important to me um and then i think there were a couple we were talking about formatting and maybe we'll look just real quick at formatting some numbers and then we're going to jump into scope and the reason why i like scope so much is really lays out how python looks at variables and scope is just basically layer of priority of where it's pulling from so and then then we'll look at nested functions and then those are just a half a step a half measure that gets us to decorators and if we have time very cool use of nested functions and um yeah it'll take us a while to get to some really really case scenarios of decorators but i will show you how they use but the the the one today uh if we get to and i'm super excited about it is the monty hall example so all right let's just get into it is everybody here everybody ready yes and i had completely forgotten this so i had gotten some feedback that maybe there was glare and i know uh i've seen this a lot of times that people like the darker so what does everybody think about the dark background is it easier to see because i had the red is a little hard all right all right let's go cool we're glad to have everybody here so let's just get into it so let's finish up dictionaries so we can get on to our new stuff all right so what i really want to look at to wrap up dictionaries is the reason why they're very powerful is one of the awesome examples is if we were to make a link and a um basically a building block of association so let's just look at the alphabet real real fast and then tie these in so from oh we don't need this let's comment this out but also one thing i just uh a little crash course reminder about the dictionary first you have to initiate initialize it and then link a value to the key all right don't need this anymore i hope everybody has had a good week uh i am glad to be back so from string uh import as key lowercase as lower so all right if you are unaware of this module builtin module and basically what we're doing here is we're building uh it's one of the ones that i like to do for a really encryption and decryption um pretty cool building block of uh messages but for i n range when lower then key all right so what i'm doing is i'm going through this reason why i'm using the range len function is so i'm going through so i don't have to go and wrap an enumerate object wrap it up so i can just go through here and then we're going to look at counting with a all right then run this then called key so oops that is not what i wanted to do what did i leave out ah there we go key so for i and key print so what i did is i associated actually four items print and i need key value key value key comma value so what i did is i went through our builtin lower all the letters so lower just so you can see where i got this from if if you're new joining us does anything here not make a lot of sense all right awesome i'm glad you like guys are like in the background hey uh is the is it very blurry on your playback because it is very blurry on mine if you guys are seeing it good all my kids are home i was kind of a little worried about this today uh is the picture clear for you guys if it is that's great because like i said all my kids are here and we're all streaming awesome i'm glad i'm glad the color the darker is good all right okay not hearing any feedback that it's bad so i'm gonna keep going i don't need to see me i'm just looking over here at the chat okay so i took and i ran through okay all right okay so what i did is i ran through and i made a dictionary and i associated a key so you could flip this around so basically you could the reason why i like this exercise is i want to get you to understand to go through because you'll see in a minute what we're going to do is we're going to count we're going to count a if it's if it's in the dictionary we're going to increment up if it's not in the dictionary we need to create it so we're actually going to look at the raven and the poem the poem the raven from edgar allan poe and we're actually gonna count all the letters excuse me all of the all of the words in the poem that's what we're getting to so all right i went through i took the letter then i associated a number to it and then incremented up each letter or i let lynn the range increment each one so i went through and i went through each letter then went through range so range incremented through iterated through my lower and then i let that count and i let that be offset by 1 because we know range starts at zero now now i'm going to show you how to do this where we can zip the dictionary and this is where it very cool and if time allows i'll show you how to do dictionary comprehension alright so we don't need this we comment that out and we can do this in three lines right here so i'm gonna do this a little a little stretched out so we could see this i could do this in two but just so we can letters equals lower so just so we can have this together then num list list range 1 through 27 okay so we're off setting 26 letters all right then key wrapping this so we're zip we're making a zip object so check this out this is so cool all right so think about it the thing about a zipper so you have the the actual zipper then the two sides and it goes through and it overlaps i don't even know if i'm in frame here so all right it goes through and it zips each side together so i have two objects that are the same length and i zip them together then i'm telling it to turn it into a dictionary so i commented all this out boom oop letters and i'm not spelling anything right today sorry everybody and then key boom same thing so i just wanted to show you how you can create a dictionary with a zip object zipping a dictionary there you go all right so cool we are almost wrapped up cool we're doing this in about 10 minutes all right oh is it sporadic for everybody is he breaking up because like i was saying that i was a little worried about the stream with everybody on at my house quincy or beau are you guys available to give me some feedback is it too is it too bad and too choppy because my view is just completely frozen alright is it present for everybody okay i just got a yellow and an orange on my on my stream i'm clicking over it's bouncing from red huh i'm not getting any response from anybody okay well i'm just going to keep going and we'll go from there until i until i hear otherwise so all right now we're going to do something pretty cool so i'm just going to put this in and i actually have the file you can go out and and pull it down the raven but i also have it on my github so you can click over to my channel and look at that but here's the raven here's the raven and i'm just going to put it right here it's a boom here's the raven the file don't need to comment that out now this is how you go about creating something and you don't know like i like i alluded to or made a passing comment about a dictionary is very powerful uh one of the tools that i like using it for is if i have no idea blurry okay it's going blurry and then uh okay it's going blurry and then not blurry okay well thank you for the feedback all right so a dictionary is perfect so you initialize it and then if you have a scenario which you'll run into and i've had plenty where you don't know how many variables you're going to have so instead of thinking of it you have a key be your unknown you have an unknown amount of keys so if it's not in there and i'll show you exactly how to do it if that key doesn't exist you create a new key for it and then if it does exist you increment up and this is a perfect example so all right let's look at this and it's literally this simple so we take our file we're going to then split it so file dot split so what does that do takes my string puts it into a list with each it's going to i'm not passing it any delimiter so it's going to split on the white space boom step one then i'm going to initiate my dictionary we're just going to call this book helps if you actually then create a dictionary and dictionaries live inside curly brackets all right then for we'll just stick with word word in file then if word not however you want to think about this but we're going to look at it if it's not in the dictionary already we're going to create it we're going to assign it to a count of one if word not in book then book then our key so it's word that's our key equals one else then book word plus plus equals one so what i'm doing here taking this file because it was file uh variable and i'm splitting it turning it into a list we're gonna and then i knit i initiate my dictionary iterate through my list looking at each word if that word is not in the dictionary assign it count it one then if it is in the dictionary then increment that value up by one so let's run this and we have book holy moly 114 lines this is what i think is so cool so here we go so this is every word counted in the poem going open a minute making the code shorter if would you mind giving open a minute in this oh um actually what i was planning on doing was we were gonna do not just open but next week we were gonna because i wanted to entice everybody we were going to then go and actually pull this down off the internet with uh with um url lib and thai url lib and open together so that's what i was thinking i didn't want to deviate too much because i think we already got uh but it's a great idea and you can already i like i like how you think and that's why i think we work well together is that um i'm going to tie those into next week next week's lesson so we can yeah i i try to i try to i'm trying to do a little bit more foreshadowing uh but yeah if if we could just stay with this right now i'm i i want because open can be a little tricky so uh i always try to tie that with something else so the open url well awesome good and there's also if if there's ever anything that you guys want because the reason why we're doing dictionaries right now is somebody hit me up on twitter so look this is y'all's tutorial so whatever you guys want and i haven't if i haven't done the complete lesson plan i'm more than happy to uh augment and do what you guys need and want to see because i mean i could talk about any of this and as you can tell i can get sucked in to some of it a little bit too deep so but that's a great idea and that's actually where we were going to go next week i didn't want to tie these in and deviate too much especially with bow being awesome and allowing me to uh almost do anything so just wanted to do i thought that that would wrap up the dictionary and we might do sorted i just remembered we didn't do sort here and i don't have my notes right now but yes we will we will do that definitely uh next week then because i was on the fence about it so that solves it so thank you guys all right so where are we um oh two more two more questions that came up last week and then we'll get into this so we don't need this so it was formatting we were formatting the uh our probability the odds of winning powerball and i can't remember who asked but it was um it was hey what happens if we wanted to change the format of of our number so what happens if we wanted to do so here let's just look at it and we do phone phone number then one two three four five six seven eight nine zero so basically it would be you'd hardwire it in if it because when i did the placeholder colon comma python already knows in that string format in that formatting uh logic that it goes and puts that comma after every third so that was for phone number that was the example that i had for that so then literally if you look right here i have my placeholder with my string and then i've wrapped parentheses so in the united states we typically put parentheses around our area code then our prefix then is separated by the local selection so it's basically routed to where in the united states where inside that where in the united states and then that number so now let's look at the the other one which is basically the exact same but it's um it was it was my example for uh here in the united states and i learned something cool about uh australia somebody was asking how to do the math so may maybe you guys can confirm but in australia if i understood they that is the sequence of when you were born in the united states our identification number our social security number is is built upon geographic so the first one is what state then you have the group number and then the sequence in which you apply for it so and this is more dashes but i just changed it up so let's see ssn one two three four five six seven eight nine and then i just go from there but that was uh i just wanted to throw that out because somebody made a comment and you just would need to hardwire it in so all right i think that's that so very cool that only took 21 minutes to clean up uh those things and i think there's another dictionary something was it or did i get it all ah one more dictionary comprehension let's just get it out of the way so all right we'll look at this and i'll throw it in here and i promise we'll be done so this is this is what's cool about this so let's let's look at this so all right who doesn't like uh list comprehension i can't remember all right so basically same idea here's my for loop so then now here's my key and value pair all right so i have a list of names an iterable so i'm going to here's my iterable here's my temporary iter right no i shouldn't have said that temporary object iter is something else so forget i said that here's my loop then here's my key and value pair so what i'm doing is i'm saying i want you to count a student i thought it was him i thought it was him so uh but you just have to look look all right you have to do something over and over again when you got on a bike you couldn't ride it right so i remember when i started doing this and i couldn't understand for loops well guess what now i understand them really really really well it's just time and energy and it really doesn't have to do anything with how long like how quick can i you can learn it in 10 years or five years or two years well it's a length of time i like to say it's 10 000 hours you want to become an expert at something you got to spend ten thousand hours and that's it that that's it that that's the magic number if you take ten if you stretch it over ten years okay it takes you ten years if you can compress it down to five great takes five years you want to become an expert at something you got to spend 10 000 hours on it that's that so what the standard math is it's a little over it's like 6.7 years if you do whatever task for 40 hours a week that's that's the math so let's just look at this one more time here's my key i'm taking my student the first letter then i'm turning it then i'm putting an upper method on it and then i'm in my value or my temporary uh so what i'm doing is i'm saying how many students have this first letter so i have steve i have a john i have an atom and i have a will so that's that all right cool you weren't stitching that's funny that's very funny all right let's get done with that let's close that out i don't need that to run don't need to see that and distract me but i really hope everybody had a good week um last last week was hectic and busy for me hope everybody did good so all right so we need to talk about scope so i you're going to hear me use another term and then so it's local it's l what legb legb and it goes in the reverse order you think it will go so and i got a i got a pretty good example that i think that'll really help sell it it looks locally so inside then it looks enclosed and closing nonlocal so if it's a nested right outside there that takes next priority then uh global then built in so legb and i'm gonna have we're gonna we're gonna go through this really really really really slow so first i'm gonna handle uh local global and builtin and then we're gonna do uh enclosed and closing uh nonlocal those are all the same we're gonna do that next to really kind of wrap our head around it and i think we will have time to do our monty hall problem so i'm very excited all right so i have well one let's do this so you guys can see from math import pie not super super important but does everybody know what pi is the mathematical term the ratio between uh circumference and uh radius everybody everybody anybody that's a old movie from my from my time period uh not ben stiller um but ferris bueller's day off all right okay good so as you can see here i have this variable in three separate locations and we are talking about right now we're talking about uh local um global and built in local global built in so i'm going to leave all three of these here and i'm going to show you so it takes priority from local first global next well actually nonlocal next but i don't want to we're going to do that in a minute and i'll show you so we'll put this in parentheses it's not here global and then built in and as you can see i have these at different lengths so you can see the uh scientific notation wow um i cannot think of that term i thought i was going to be super nerdy so all right i have all three of them sitting here but python will look here first because this is local then if i comment this out then it will look global significant figures that's what i'm looking for so i have because pi built in pi is i think it's 12. then my local was five then my global was two then my uh built in is 12. so i comment that out then it will look then it looked right here so then when i comment this out and i run this again then it goes then it looks globally then it will see that so the reason why i like doing it in this order is it shows you where it assigns and goes with priority of how it looks so all right now now let's look at a nested function now the nested function is the built in excuse me is the building blocks of decorators so this is going to look weird and seem weird why would we do this well it's a kind of precursor and a building block for something else all right let's comment that and then we'll use this as a jumping off point to look at our nonlocal scope and in several weeks when we build a tkenter calculator you'll really wrap your head around local orbs oops okay am i back am i back yet i just gotta i just saw that uh obs went down everybody back up okay so yes locals are within a function global variables are outside and get pulled in and builtins are already there okay awesome yeah i i apologize guys uh for with all this with everything going on with school our uh our kids are delayed going back and they are all home with me on zoom meetings so we are eating a bandwidth like crazy so um hopefully this will all be resolved very quickly let me see what color i am it's red right now but i think i'm back i haven't gotten a message okay i'm back all right so boom then def num then return exponent exponent in then return num so what in the world is going on here let's see what color we are or yellow orange hanging around red yuck all right bounce screen okay now it's blurry god all right i will go slow i need to wonder if i need to send my kids to my parents house during during tuesdays we'll figure that out all right we'll just go slow today all right so well that's very cool thank you for the new supporter all right just re just refresh the page all right all right so what are we doing let's let's let's look at this so here's our standard function that we're used to seeing we have and we are going to return this now this is where it gets weird this function is going to return this function all right so this function my exponent all right exp sorry my exp function is going to return my num function so let me give you an example of what in the world this will do square equals xp 2. so start on the outside build your way in so now this is this this is where it gets a little weird but once you start thinking about it you'll get you'll get used to it so i'm taking i want to create a function that's going to square something and this exponent is here so whatever exponent i pass in this will be and then now this basically this is how i want you to think about it basically just renamed this right here so function function this renamed this so whatever i pass in here at the end of this object we'll take that number and raise this number to the exponent of this that's why i called it squaring so now i'm going to put this in memory then i'm going to call square oops square and i'm going to i want to square 2. so i get i get 4. all right so now i want to make a cube function cube and i go my x my exp function and i want to pass in 3. all right let's put that into memory so then i want to cube uh what do i want to do 3 that's 27 3 times 3 times 3 27 haha i remember i remember math okay now let's do now let's look at nonlocal this is a perfect it's a perfect way to look at nonlocal right here so that was our nested function okay nonlocal scope all right so now what happens if i were to pass in a 1 right here and if i wanted to be able to touch it from this function because if i say global it's going to look outside so there has to be a way for i just want to move a variable from just out just outside not not crazy not globally it goes right here so this is how i change the scope of this i pull this in say nonlocal and now so when i pass in this so what i change this up whoa square square three stays the same because i overrode this and changed it to one so i had changed it bend so whenever and you'll see this when we do our uh oh i think we're gonna have plenty of time to do our monty hall stuff yes and that is a very very cool very cool yes very good i'm sorry yes the enclosed uh the enclosed so you have you have nonlocal and closing you're going to hear that that term so if you're reading closing that's typically the documentation and closing i then also call it so if you heard me say enclosed or nonlocal all right if i used any of those those are all the same this is the this is the technical definition work you use case in closing because it is enclosed it's not it's not it's not local it's not global it's in closing so there we go great question this is why i love the the interaction because you guys keep me keep me on task all right so now now let's look at decorators so we need to look at decorators they're very very very very cool they're a little odd at first and especially they are in this case in the these couple of cases they're going to be weird you're going to say why but it's to see the context uh perfect example that um i i've used um is to change a function especially with django so if you for whenever you're having a pages and you're building them you're building a you're building a function for each uh page and then you need to lay on top of it some functionality and you can lay as many decorators on as you want to think about it is because you're going to see it here and we'll talk about it a wrapper a wrapping a wrapper function so it's going to take a function wrap it in another function wrapping it around your deck decorative wrapping you're wrapping up the outside so that was that's the way i like to describe the decorators all right so let's undo this so i can see all right so decorator same same type concept here just the way that we use it a little weird all right so did i need to leave that no we'll just start over all right gory tours so we're going to take a cube then all right let's see if we're blurry we good all right so we take this decorator takes in a function because it's going to sit on top of the function and you'll see this so then def i just like to keep this wrapper wrapper function so then we've taken an argument so we can be really clear so we don't have to think about it so then we're going to return the function and the argument okay funk and we're going to go real slow because this can be really weird and then we return the wrapper right so this is this and this then this returns this all right let's look at it so now i'm going to do a def num x then return x num pass in three all right so let's go through now my decorator it's going to take a function wrap it up take that argument then do this to it take this function take its argument and do this so when i do this right here this is all that it takes so i don't have to create and go out like we did with our outer where i'm building my way out to in this just sits on top and you still only interact with the function that you're changing you're augmenting you're decorating you're wrapping it up all right does that throw anybody for a big loop because i remember the first time i saw this i said what but i'm decorating i'm augmenting this to the power of three all right now here's one that can be a little bit a little bit easier to wrap your head around that works that works pretty well uh let's see all right you got the it's going to be for string upper so we take in our funk our function close that out then we do our then we do our wrapper sorry guys i think somebody's coming home so this is not going to take any any arguments right here so then it's just going to return the function then then we're gonna have this right here wrapper just like so just like before so we're taking our function which is going to be a string because this is just returning and if this is a string we know that that method works completely so let's create a death of hi then return hi how are you close that out close that out so we call hi i call it hi i think i did yeah hi how are you so now on top of this i'm just going to slap my upper oops and you you decorate it with the at symbol upper and that's it now later if we're still working together and we get around to i don't know i think they already have a bunch of django but that is a perfect one and those are even more sophisticated those those decorators because it is a three three layered here to take in an argument here to then redirect but all right i digress sorry because i know right here that this can look a little odd you're like well why why would and i get it it's a great question because i asked the same one why would you need to do this why wouldn't you just change it in here if you have a bunch of functions and you're going through and you only want to then augment specific functions and you're like okay here i want this one to do this and i want to do this here so then we just now now that we have this called i got hi and everything's uppercase or if you need to call one sometimes you got you can uh have it call another one but this this just sits up and and you can have these layered i can put more decorators i can put as many decorators on this as i want that would work with the type of object that it is all right so there we go that is decorators well awesome this is gone very quickly so we have we have a very long time to work on a perfect example of scope variables and um the monty hall example so let's let's go ahead and get after it so to give you guys a little bit of a back story of what the monty hall it was a game show in the 60s i think and it was a very interesting concept so i had heard about it but uh when one of my kids was in seventh seventh or eighth grade they they were doing probability and statistics uh probabilities and ran across this problem so it's if you have three doors you pick one of the three doors then so there's a car behind one of those three doors excuse me excuse me there's a car before behind one of the three doors and what the where the trick comes in is the host of the show will show you a door that is not a winner and apparently uh they would have so there'd be a goat behind two of the doors and a car behind the third one so what what the trick would be is he would show you one of the doors that had a goat and he would open it up and what that does to our brains is it messes with the probability and you then have the option is are you going do you want to now that you know which one is not the car do you want to change or do you want to keep the door that you have and almost always the person sticks with their door and here's the problem and then this was a perfect python problem for me to come in and do for the class because we ran a simulation and we did this and were able to prove this on a huge scale but if you change doors you have a 66 chance of winning if you stick with the same door you only have a 33 percent chance and i was blown away by it and everybody right now and i've actually had people leave comments in the vid because i have this on my channel uh the original time i did it and people argue about it because it is contradictory to what we think and that's why the game show host did it because most people didn't change doors so when they change doors they they are 66 percent more likely to win all right so let's get into it and it's a perfect example because i remember when i was because when i was first learning i go okay and i did this with um some really really clunky clunky clunky programming and then i ran across nested functions and scope and then so i redid it so i i don't think i've redone it uh you'll see the original uh junkie version if you go back to my channel but um we're gonna have it here so we we're going to go ahead and knock it out so we're dealing with um randomness right and then we're also going to be moving the doors around so we need to import a couple of things from uh from the random library all right so from random import shuffle and choice all right so we need to bring this in and look and see what in the world we're doing so help on shuffle all right shuffle a list in place what does this mean anybody we've been going over this couple times in place return none means you would need to make a copy if you want to keep the original you need to make a copy of it oh that's actually one thing we need to talk about at a later class i need to make a note of that copy yeah hang on copy and pointer hang on pointer and copy because we need to talk about this because you can get hung up on referring to a place in memory or an exact copy can be very tricky all right anybody all right cool all right so shuffle moves everything around in place will not be creating a new object and then choice we need to look at choice oops help so what does this do choose a random element from a nonempty sequence so basically we're gonna have a uh a list of two goats and a car and we're gonna shuffle it then we're gonna randomly just pick a an index so our index is going to be our door numbers so that that that was the example they brought out a wall and it had uh and it had doors on it one two three well we have a list uh indexing zero one two and we're gonna randomly shuffle uh the goats and the car in there then we're gonna randomly pick one then we're gonna have the goat from the list from the remainder get kicked out and then we're either gonna keep the one we have or swap for what's left in the list so it's a great when i heard when i heard it brought up if i could uh if i could program something and teach the class it is a awesome programming challenge so you have to we have to really be paying attention so in the nested way we need to do this we need to create our game right so our overall function and then inside the function our two nested is switch and what do i call it no switch and switch so in a scenario uh we're gonna we're gonna switch ten thousand times well the game is gonna take in the number sorry um and then uh and then we're not gonna switch and we're gonna see and it is it was very very eyeopening when i saw this because everybody thinks and then i finally went and started looking and uh was doing some research and it just shows why why this show was wildly successful and why so many people did not win because it's contradictory to what what our brains think where you're like well you just remove one of the doors and i'm gonna stick with my door well you just found out that a third of the um possibilities have been removed you need to change doors and you're more likely to win you're actually twice as more likely to win all right okay so we need to deal with lots of stuff game then number of number of times we're going to test this and then we're going to change if we're going to change so we're going to default this to false all right so now we have our doors right i know i'm saying a lot right now any questions right now any questions at all all right cool let's get going and i think my kids are coming off their zoom meetings so hopefully it won't be blurry and it'll stay good all right so we got one goat two goat car close this out all right so now we need to shuffle the doors because we want this to be random so then we're going to go how we're going to do this anybody got any guesses i gotcha okay all right so shuffle is in place so i want to shuffle these doors so i don't have to do any assignment right here so and let's see uh pass in take shuffle pass in our object shuffle and we pass indoors so print here actually we already have all this so uh shuffle doors print yeah we'll just do print doors here so again uh right now false okay all right so now it's shuffled and it's car goat goat and then we run this again go go car let's move this over so we don't keep getting ate up so we got car goat goat go goat car goat cargo goat goat cart goat all right okay now oh and we need to track we don't need that anymore now we need to track our wins losses 0 0. now now what we need to do get that down there now we need to create our nested functions this is where it gets fun all right cool so our nested functions first one is going to be no switch so right here so then it needs to know the reason why the reason why i'm setting up like this is well one it's it's it's great practice for uh to wrap our head around nested then nonlocal and especially since we have two scenarios inside the game right okay you can either switch or not switch absolutely perfect all right and then things will act things will act differently so no switch we don't need it to do anything but we have we have variables that are going to be we're going to be working with right on local wins losses because we want to pull these in here and manipulate them if we pick the coat the goat or if we pick the car okay and it's literally now when we get down into the actual game that is where this is where it gets fun so no switch is we're gonna pick a door if if the um if the choice is the car you straight up win if it if you don't but the fun part to laying out this logic is for the switch so if car equals choice so let's look at choice again choice is sequence and then so sequence is our interval our list choose a random element from the nonempty list so we're going to pass in choice pass in uh doors all right and oops then wins if if the choice if this choice is car equal to car then we're going to increment up one else losses because it's if it's not oops one all right now here comes the fun part because we really gotta do some thinking here oh we may be we're way ahead of schedule okay i thought all these others would take a little bit longer all right switching doors switch apps if you spell switch right and let me check my notes so now we have our doors goat goat and car then on local because we're bringing in our wins losses now all right so we need to this is going to get a little a little complicated so we're going to pick a door then we're going to get shown a goat doesn't matter what what door it's behind then in this one we're going to grab what's left so so let's let's think about this for a minute all right i need a graphical think i have paint somewhere all right so here that's not what i wanted where's the shape is that okay all right so i'm going to pick my door then then they're going to show me because there's definitely going to be at least one goat left because there's two of them so then they're going to show me a door and then i'm going to switch and pick the other door all the time so it's going to be the last the last door the only door left alright let's go through this again so i'm going to pick a door randomly choose a door this is all random randomly choose a door the game show host is going to show me another door and then i'm going to pick the last door the the last door that's left the last object in our list all right cool is that does that make sense all right so let's just get after this so yeah especially when the math teacher brought this up i thought it was well one i wanted to do the simulation to test this because she had explained that they had done it in class and proven it well i was like okay well that's how are you doing that because she said that they did it by in recreating and uh well i was like well i we can do this with a computer and check this any number of times and it's unbelievable how percent well you'll you'll be able to see but it just becomes it's like flip it's like flipping a coin the more times you flip it the closer it gets to 50 percent and your significant figures just go out and out and out it's just ah i don't know it's cool i'm not that good with probabilities but when it's a concept that i get i really love it so all right so we're going to pop out a choice so range three so let's go over this why i'm popping out why i'm popping out i'm removing the first random choice pick pick an index pop it out boom so now we're down to two so it's at least going to have one go right so now now i'm going to remove a door now i'm going to remove a door that has we need to look at remove so we got door right i just realized that that all right so we need to look at uh pop and remove i thought we did that but we did not who knows pop and remove yeah i changed thank you i just changed it to door thank you um so we put door in memory and then uh we need to look at der on door so we have pop and remove i realize we did not do pop remove sorry wow door dot pop okay it will remove and return item at index whatever we index or if we leave it blank it defaults to negative one or the last object remove well all right you'll be surprised um okay the very cool thing about pop okay the very cool thing about pop is it brings it out and returns so you can grab you do two things at one time you go and grab it and then you can assign it to something because it pops and returns it so if you don't put it with some something assign it to something it goes away but right now we are pulling it out of the list we're pulling it out of the list then we have our two then we're gonna have a goat shown and then we're gonna have something left here and either this is going to be the car or a goat but we're going to take this one every time then now no it doesn't put it into memory it pulls it and as you're pulling it out you can assign it to something but if you don't assign it to something it goes away so be very so let's see am i not because right now my first choice i just want it gone what you'll see here in a minute is uh um we'll do remove and we'll see so if i wanted to pop it out and then have it assigned to something because right now we are just because because we're switching so i could have used um pop out a random choice grab it and assign it i could could have done that but right now i just wanted to pop out and have it go away because i'm not using my first choice i'm gonna go for this one so i'm picking this going away don't care what it is because i know i already know i'm going to switch i'm going to i'm going to what's left so i'm grabbing this throwing it away going to see a goat because they're going to show me a goat and then i'm just going to get the other door i'm going to pick whatever's left and if you think about it 66 percent of the choices are being removed for me i'm just going to take the last one that's why this works all right have i thoroughly i thoroughly confused everybody so all right so now so i took it pulled it out got rid of it now remove this is what's very cool help on door dot remove removes first occurrence of value so you're actually passing in so i got door so i have goat so if i go door dot remove goat then i go door so i have goat and goat now we can't see so it does not remove index it goes and finds the object that you want to remove and remove it so when we pick here at and then we can so that now i'm going to be down to two objects then i'm going to remove a goat because again doesn't matter because there's at least going to be one goat left there's either going to be after this after this first choice i'm going to grab it throw it away doesn't matter because we already know where we're switching all i know is that i'm going to get whatever's left then there so either this is going to be a car or a goat and i'm going to throw it away and there's always going to be at least one goat here right so then they're going to show me a goat and i'm all in this scenario i'm always going to get what's left over i don't care what's left over i'm going to take what's left over and this is how we're going to do it so second choice equals oops equals door zero then if second choice choice equals car then wins okay and then oops else losses equals one all right let me pop over here and see all right believe well i thought it was going to remove a here doors all right so as you can see that is not with remove does it have a default it would only default it would only remove first item if that was a if that was a default value okay good does that make sense and i misspelled second awesome thank you so does that make sense and the established spell awesome thank you no you guys are great no that was actually one of the things if i haven't said this one this has helped me with my typing because i've had to be more consistent but two you have to come up here and you have to problem solve not only are you problemsolving and laying out how to solve the problem but when you make a mistake like this you will you will be sent you will be sent be like look you're trying real hard i get it but i got this and this doesn't make any sense all right so cool so yeah that only that only just like this so yeah no whenever you whenever you're seeing this and you don't have any equal signs a default argument optional argument default optional basically same thing okay all right let's keep on moving keep on checking so actually we may only get to about 90 minutes today so now we need to do our for loop with uh how many times we're going to do this because we just we've created our number of times then if we're going to change so then we need to have some logic here to which which function to run if change is true or false let's get on the right layer so for i in range x then let's bring this up let's get rid of that uh if change then switch switch yuck and else and no switch all right so now we need to lay this out i'm just going to copy these two because if i've already been spelling this much all right okay all right so let's go through this i think we can see all of this so i have my change so i'm bringing this in then going through and then down here as i'm testing how many times are we doing this and if change is false so right so this is either going to be true or false if it's false we switch excuse me if it's false we don't switch see see why i set this to default to true excuse me to default to false so if that's true we run switch we run this we call this function if we don't switch if that's false if they don't input to change we come up here and run no switch very very standard all right so now now let's now let's call this and run game 10 000 times all right all right wins 33 of the time and loses 66 percent of the time so print and game ten thousand thousand true all right this is where it gets weird this is where it's so crazy so if you switch doors you win 66 of the time and you only lose 33 it's it's just absolutely it's absolutely nuts and i remember when the first time i did this i just i was like there is no way that that's true and then i went back and i laid out the logic and i was like this is absolutely this is absolutely the truth and how just very very interesting so actually you know what we flew through this do we want to look at um open and url lib because uh we can limp through that's not so complicated so i can use my old notes everybody want to do that so we can stay on a little bit longer how's that sound everybody i can go a little bit more i really thought that i had i really thought that all this would last all right url okay so cool let's go ahead and do that then let me give me a moment or two to dig up these things because i know i have it very close there's the raven stuff url lib here i am i'm in the wrong file url lib all right so here we go we need to let's all right let's comment all this out uh check and see because again i i lose track if url lib is already in here i know i know what program i can check and chord u r l lib all right i have one program that's not touched so we're going to be looking at url lib anybody ever heard of url lib url lib and then ooh if we can get through this and we can do and i don't know another 15 20 minutes that'll get us close to 90 minutes and then uh i'll make sure we have two hours because that'd be two weeks in a row not doing it two hours so i apologize all right url lib let's do let's just look at it help url lib and this is where it gets odd packages so now we have to be laser focused on what we want to import and ooh and then after this i know what i forgot to do we didn't sort the dictionary that is so cool so we're going to do that next because i have a feeling this won't take that long so url lib whenever you have things like this packages you then need to be laser focused to bring them in so then you're going to do request as url so now because i know this can get so confusing so so odd so now when i run actually let's go let's do this real slow uh help url lib no i want to do dur on url lib okay so see it only has parse sitting in here so then when i go and do request so now i run dir on url lib so see now i now i have request and response i know this i know this is weird but i don't want to do packages yet but you begin to see that python helps you manage memory so it will only bring in things that you say hey i really need this and okay so request request and response so now we're now we're tipping our toe into client and server so you're going out requesting then you're getting a response does that makes does that does that makes does that make sense let me see all right so now i want to i'm sure you've learned by now and it's dangerous for me anyway to be typing all of those letters so we're going to shorten this to as url and in case we have anybody new joining us i'm sam doing some free code camp streaming i'm from python basics every video that i've done here i have micro videos on my channel so there's pluses to both of them a lot right here is a lot more freestyle and a lot of interaction uh the other and also a stream of consciousness where the other is uh micro videos just uh laser focused one subject at a time all right so url and it's request so now we're going to have so now let's look at help on url oops didn't bring this into memory help you url holy moly let's run dur on url see why you don't bring it all in when you import url lib it's ginormous so that is this is just we're just going to be touching the tip of the iceberg with uh where is it url then url open um if i knew my alphabet so see there we are and then we're going to bring in the file and then drop it in and then we need to understand the text and then we're going to look at open then we're going to write and then we're going to go from there so let's see how we do let's bring this down here help url all right we got we know that's a ton of it yep i want to i want to expand this and i know it's a lot okay url lib request and it's in the url module and you have a ton of support and then here are the classes and then as you can see i think there's even more packages okay but we're just going to be touching url open okay and i think i have this i know i have a i put the raven on my on my github but maybe i'll go at the top of it and put this file so you can practice it let's get this back undone so now let's bring this over here so you pass in the the address and the reason why i choose chose the raven is because it's um public domain it's uh it's very very old as you'll see it's 18 18 what 1836 18 and that's actually 1845. so it is when he he died it's 100 years pass after the author's death so all right oh shoot there we are so now we bring this in so we do text equals page actually let's not let's go real slow page oh aha so now here's my response object because it came back like i said you have your uh url open because it's um that's going to take forever endur on url it brought in request and response right and now we have a response so now we need to read it and we run der and look dur if i haven't said this in a while dur and help your friends don't don't try to memorize this stuff because you will get into you'll you'll get url to the raven is the description of the video i can't post url post urls but the video uh was dictionary uh part two well thank you very much for doing that okay well i really appreciate that so everybody uh jan is already on top of it uh if so if you have a hard time coming back and can't find this it uh it's it's uh dictionary part two so all right so cool all right so we're running on page all right here we go so now my page object is my response right so my page objects is a client response and what can we do with page page can read okay so let's let let's read it so text dot text equals page dot read all right so text 70 lines and what is okay all right super important right there right so help help on text ooh it's bites what can we do with bites let's see oh oh we can do all kinds of stuff so there's the help on it but so we can be laser focused der on text so we just ran help oh wow is that text yep and then here's here's the breakdown of all the methods but here's a list of all the methods methods that we ran so okay so we have uh we can do all of this and we get it but we can clean this up just a little bit text equals text dot decode there we go it's just regular irregular text now so now give me a second because i need to figure out where all right 3 8 all right i don't have this so we can all right so now what we need to do is now that we've brought this and we have we still have i want you to see this you want to be a good you want to be a good steward of connections so right now we have an open response right now so we need to close this we need to make sure we close the page page.close you don't want to leave anything open you want to finish it up so now page still a response object but it's closed okay so now now we're going to create a file file open we're just going to name this the raven dot txt txt now all right all right open file name file object built in function uh in module input output now you do not what i just say you do not have to remember because our little shopping list is going to come very handy so all right r read there's a default to mode r defaults to r defaults to read w open for writing goes to the first x creates a new file open it for writing uh a open writing appending in the file if file exists binary text mode open a disk file for updating this is so cool new line mode all right so there is a lot here we are opening a file to write all right and we'll get into more of this i don't want to do um especially don't want to do it text context editor we're not going to do a context editor right now because that can really throw people for a loop we're just going to open the file right to it close it all right let me get this over here all right so right now here is the last order of my files that i have so we are open we have we have our file around it's not what i wanted to see this let's bring this in so i can read these okay so all right we open close brought it in so now we have we have the all of the data that we want and sitting in the text text object so now we're going to create create a file object we're going to open it what are we going to name it we're going to call it the raven dot txt then we're going to write to it all right so now i have a file object file sorry okay i got a file object what can i do with my file object all right i can read line read lines seek mode all right and of course it's right on the scene or i can write to it i can read and write so whenever you're doing something to your file object it has a method read write so we're going to file get our file we're going to write to it and we're just going to what what are we passing what are we passing to it our text now we also want to be a very good steward of our connections and what we have to do with things so we're opening it we're writing to it excuse me we're opening our file we're saying we're going to write we write to it we close it and we go from there all right so that's that whoa look at this handy dandy little thing we will be i promise you okay since we're doing this now let's do our shopping list uh next week and you'll see how we handle that there is a way that you go this then that and that and this and that's your little tease for for this week to to come back so but no there there there is and actually if you read the documentation it'll tell you i'm not gonna tell you until next week so here's our nice little pretty raven file god look at that and we're going to look we need to look at this text i want you to look at this format just laid out just like this i want you to look does the spaces has the end have we talked about this escape character in well i really i really appreciate it i it's interesting how i've stumbled and bumbled and stummed across this stumbled across all of this i love i love teaching python i'm more of a teacher than i guess i thought i'd ever ever uh thought but i absolutely love so this is here and all kinds of gobbledygook but all these nice awesome little rules sitting right here and then bam comes out in this perfect format and tells text exactly what to do i mean look at this it's just it's just right here and it knows to do a new line and come through and just look at it new line a whole new line you can just see it right here boom new line new line all right now can i believe we didn't do it so we're done with this that's open and we'll since we've done these two this week we'll do our shopping list next week and i'll try to figure out how to make that sound better than a shopping list so we get a lot of people who really can understand um file control and then we're going to build a context manager uh that that is it it handles a lot of things for you it's the width it's the with uh keyword it's phenomenal very very powerful all right i just realized we did not sort our book so we need to learn we need to look and see how to sort our book that we just did our dictionary with our book so let's do that and then we'll wrap it up so all right so let's get our book down here where'd our book go all right copy they won't go back and forth copy copy and paste undo this all right so then book 100 and how many keys are there how are we going to find out keys so we do book lynn book 569 different words in the raven 569 because there's 569 keys so that's now that's not the total of then what do we call it file so now we're going to do lan on file so the total poem is 1059 words and there's only 569 different words so we had a lot repeat so now we're going to see how to handle this so we need to create we need to create a function last and you'll know why in a second return return x minus 1 then book now we need to turn this in and to see all the items book.items all right so now we need to sort this and you'll see why we did uh why we did items here in a second because we need the key and the value right we need to be able to see it we need to be able to then sort it and then go from there so now we're going to do sorted book equals sorted didn't want to do this with lambda we could do this with lambda but i know that can be very tricky i need to do a bunch of lessons on lambda because uh once you get it you get it all right the key so first it's book so it's my key in value then my key to the sorted is last i want you to sort it off and then we're going to reverse it so it goes it automatically goes from lowest to highest i want to see which words in the raven occurred more the most and then go backwards sorry reverse true true true that's horrible all right so for i am sorted sort book and oh yeah in this sample i only want to see the top 10 top 10 words in the raven that's what i'm doing here to print i zero and a colon i guess i didn't feel like putting this in an fstring format i wonder how old that is close that out close that out oops uh would i miss i n 10 1 2 print ooh what didn't i close out let me see where's my syntax error i got an error somewhere all right we're gonna cheat copy this paste that there we go wow looked exactly the same i wonder what i did did anybody catch what i did okay so here we go so this is the sorted book sort book so i sorted it i took i took the file we threw it into thank you okay all right so i throw it into my dictionary if the word doesn't exist i count the first count at first time if it does exist i increment it by one so then i created a my last function because i'm sorting this by the last of the key the value key value so i'm sorting it by value don't care what because what when you sort a dictionary you will be sorting by the key so if i just sorted my dictionary it would come out in alphabetical order for my keys and not caring what my value was so i have to resort this off of the key for my items right here so because i took key and value brought in items so book right now is my key and value pair how many times did those occur so then i took my key in value sorted it went in reverse so i went in reverse most so i want you to sort it by the value and i wanted to go in reverse i want it to be it automatically goes from smallest to largest i want you to go in reverse i want you to go from largest to smallest and then right here i printed out each key and value like so and i brought it in because my sorted book is this right here in order and mike here and oh shoot there's a lot in memory that's why this is acting up sorry guys so then the case matters in sorting yes just bring this back in there we go and to probably be a little uh did you see how slow this was so so it probably wouldn't be hurt wouldn't hurt to do because i saw it in my notes here and now that makes sense so now i have a file object and a book object so it probably wouldn't hurt to stop being a memory hog and start deleting book and file uh up here especially file probably but so here we go so the top 10 words are the and i my of a that chamber this and at the or the happen 56 times in the raven so there we go guys um you guys are absolutely awesome uh thanks for coming back and hanging out with with me for another uh week want to appreciate um quincy and bo for allowing me this opportunity to connect with you guys because if there's anything i can help you guys with and saving you some pain and time and energy and your python journey i want to do it because mine mine has been mine has been a bumpy road and uh so that was the reason why i created the channel that i did uh at python basics was what channel what would i want if i were starting over what would i what would i what would i want the channel to look like and that was how i started and also did an experiment uh put together um if you hadn't seen it the first six of my live streams it's five hours so now we have you guys have this everywhere so you can go back and look at it it's going to be a little bit different everywhere mainly the same big chunk but a lot of like i said a lot of stream of consciousness so things that it's like when you hear the audiobook the the reader the author might go off on a tangent and explain what they were thinking and i've seen that a lot so you get a little bit more in depth so don't just do this and think you have it you've got to practice it just like i was talking about at the beginning 10 000 hours 10 000 hours however long it takes doesn't matter how long it takes just do it sorry guys i've rambled on enough thank you guys for um putting up with me and hanging out with me i really appreciate it it's very humbling right now we got 140 something uh people here like i said very very humbling so as always guys thanks for watching please hit that subscribe button for uh free code camp if you haven't already and also that like button so i will see you guys next week and we will work on that shopping list so we can really examine uh context managers and files i think that's a great idea alright guys see you guys next week bye
