With timestamps:

00:00 - Learn how to use pandas for data analysis and data science
00:03 - in this full course for beginners.
00:06 - You will learn pandas by example from Santiago.
00:09 - He is an experienced developer
00:11 - and he also created one of the most popular
00:13 - data analysis courses on the internet.
00:15 - So you are in good hands.
00:17 - Let's get started.
00:19 - Hello, my name is Santiago and this is pandas by example,
00:22 - a collaboration between Free Code Camp and Data Wars.
00:26 - I'm originally from Argentina,
00:27 - world champions of the 2022 football or soccer World Cup.
00:31 - And why I'm telling you this?
00:33 - Well, as any other Argentinian,
00:35 - I've watched and played football pretty much my entire life.
00:38 - And you know what I have learned?
00:40 - That you don't get better at playing football
00:42 - just by watching games on TV.
00:44 - This seems obvious, right?
00:45 - To become a better footballer,
00:47 - you have to go out and practice.
00:49 - The same applies for data science
00:51 - or any other analytical discipline.
00:54 - Just watching videos doesn't make you an expert.
00:56 - You have to practice and put your skills to a test.
01:00 - That's exactly what we're trying to do at Data Wars.
01:03 - Data Wars is a platform 100% focused
01:05 - on practicing data science
01:06 - and applying your skills with real life projects.
01:10 - There are no videos,
01:10 - just projects to resolve with bite size activities
01:13 - that you can check at each stage of the process.
01:16 - The best part is that it's entirely free
01:19 - and we'll explain you how to sign up in just a bit.
01:22 - And this is also the reasoning
01:24 - behind this by example series.
01:26 - This video focuses on resolving real projects,
01:29 - brainstorming and discussing the solutions
01:31 - and the pitfalls along the process.
01:33 - We'll encourage you to try to solve the projects
01:35 - by yourself first,
01:36 - even pause the video before we reveal the solutions.
01:40 - We want you to put your skills to a test
01:43 - and challenge yourself.
01:45 - This video covers all the most important aspects
01:47 - of data management with pandas,
01:49 - including data analysis, data cleaning and data wrangling.
01:52 - Each project focuses on a different topic
01:54 - and the complexity grows from start to finish.
01:57 - We have separated each project as a chapter
02:00 - and you can jump back and forth.
02:02 - As we've mentioned before,
02:03 - we encourage you to pause the video
02:05 - and try to resolve each activity by yourself first.
02:09 - You can find a list of all the projects we are resolving
02:12 - and the instructions to sign up
02:13 - at datawars.io.freecodecamp.
02:17 - With all that said,
02:18 - let's just get started solving projects right now.
02:21 - In this project,
02:23 - we're going to be practicing our skills
02:26 - dealing with pandas data frames.
02:28 - We're going to be doing some selection,
02:30 - understanding index selection.
02:32 - We're going to be creating a new column
02:34 - and we're going to do some statistical summarization methods.
02:38 - And finally, we're going to do some question answering
02:41 - by creating conditionals, okay?
02:43 - So like selection based on different conditions
02:46 - or queries that we want to write.
02:49 - So this is kind of on the simpler side for this series.
02:54 - We're just getting started with data frames,
02:56 - again, doing statistical methods,
02:58 - some selection by the index,
03:00 - creating a column,
03:01 - doing some conditionals and that's it.
03:04 - If you feel comfortable with these topics,
03:06 - just move ahead to other sections of the video
03:09 - so we get a little bit more challenging.
03:13 - As usual, I'm going to encourage you
03:15 - to just pause the video before each activity
03:18 - and try to resolve it by yourself.
03:20 - So you can gain some of that application of the skills,
03:24 - right?
03:25 - Worst case scenario,
03:26 - you can just resume the video
03:27 - and take a look at the way I resolved it.
03:29 - And by the way,
03:31 - there are going to be different ways
03:32 - of resolving these things, these activities.
03:35 - So you might even stumble upon something new
03:40 - that you do by yourself and I do something different
03:42 - and that can be a very rich experience.
03:45 - So let's get started.
03:47 - This data frame, the data set we're using,
03:50 - is a data set containing a big list of English words
03:54 - and the index is going to be the word itself
03:56 - and we're going to talk about the index in a second.
03:59 - And then we have two columns,
04:01 - chart count or character count and the value of the word.
04:05 - The character count that's easy
04:06 - is just the length of the word, that's it.
04:09 - And the value is computed by adding up
04:12 - all the individual values of each character
04:14 - and the individual values are just defined in this way.
04:17 - So A is one, B is two, C is three, et cetera.
04:20 - So in this case, it's one plus one.
04:22 - One plus one plus the value of H,
04:25 - which I don't know where is H, 10, 11, whatever.
04:29 - Actually, we know it is eight
04:32 - because this is one plus one is two
04:34 - and the value is 10.
04:35 - So H is probably the word, the character number eight.
04:41 - And that's it.
04:42 - This is already given.
04:44 - So I have already read the data frame
04:46 - and we're going to get started with some activities.
04:48 - The important piece about this data frame
04:51 - is that the index is the word,
04:54 - like the words themselves make the index.
04:57 - So whenever we want to access a given word,
04:59 - we can just do it by the index.
05:01 - And this is why it's so important to understand
05:03 - how indices work in pen.
05:06 - So let's get started right off the bat
05:09 - with the first activity,
05:10 - which is how many elements does this data frame have?
05:14 - There are multiple ways of answering that.
05:16 - The first one is with the info method,
05:19 - which is one of the most common ones.
05:21 - Pretty quickly, we go with info
05:23 - and it gives us an understanding of the index.
05:25 - It tells us that the index, just an index
05:28 - with entries that go from AA, and that's it,
05:31 - to these words, which I don't know what it means.
05:34 - And we have a total of 172,821 words.
05:38 - We can also use the shape method.
05:41 - This gives us kind of the shape of the matrix
05:45 - if you want in the data frame.
05:46 - And of course, the values are the same.
05:49 - So we're going to plug this one in and see how it goes.
05:52 - There you go, it worked.
05:54 - Okay, moving forward.
05:56 - What is the value of the word this thing
05:59 - that I'm not going to even pronounce?
06:01 - And this is a very interesting activity.
06:04 - Because remember, this is a very interesting activity.
06:07 - Because remember, we're going to be doing selection by index.
06:11 - So as the index is the word itself,
06:14 - I can just use the dot lock method,
06:17 - and this should be familiar, dot lock,
06:19 - that does index selection.
06:21 - So it can just pass whatever value I want for an index
06:25 - using the dot lock method,
06:26 - and that's going to give me the results.
06:28 - In this case, it gives me the row itself, the entire row.
06:33 - So we did like this row selection,
06:36 - but the result is in a series.
06:38 - So the projection, to put it away,
06:41 - the result of row selection,
06:44 - which is kind of horizontal structure,
06:46 - is going to be a vertical structure, which is a series.
06:50 - You see the shaping, the transposing operations.
06:55 - We go from something that is a row
06:57 - to something that is a series.
06:59 - And it's not pretty special.
07:01 - Don't pay too much attention to it.
07:03 - It's just to refer to the fact
07:06 - that the row is represented as a series.
07:08 - And here, we can see that the value of this word is 317.
07:15 - Something also very convenient if you're doing selection
07:19 - is that the df.lock method,
07:21 - and we're going to increase here the size,
07:23 - df.lock accepts two parameter,
07:26 - the index selection and then the columns, right?
07:30 - Why is that?
07:31 - Imagine that we have 100 columns.
07:34 - It's going to be very hard to just browse,
07:37 - scroll to the value we're looking for.
07:40 - You can just pause here what the column we want to use.
07:42 - In this case, we're going to use a value right there.
07:45 - And the value is 317.
07:48 - So let's go ahead and try it.
07:51 - And it worked as expected.
07:54 - What is the highest possible value of a word?
07:58 - df.we're going to use two methods.
08:04 - Let me show you once again, data frame.
08:08 - What is the highest possible value?
08:11 - We can do df at the value and do a max method, right?
08:16 - That's going to give us the maximum value there.
08:18 - Or we can just do df.max
08:20 - to have the max statistical method
08:24 - computed for the whole data frame, right?
08:26 - In this case, we see again that the value is 319.
08:29 - Or something that is pretty common is df.describe.
08:35 - And this method is just going to give you this scribe.
08:39 - There we go.
08:39 - Oh, got it completed.
08:43 - It's going to give you summary statistics
08:45 - of all your numeric columns.
08:47 - In this case, we only have two columns
08:49 - and both are numeric, so we're good.
08:51 - And it gives you summary statistics
08:53 - of all the values right there.
08:54 - So for example, the average value,
08:57 - the average char count, the minimum value,
09:02 - the maximum value for character count,
09:05 - the maximum value for value, et cetera.
09:07 - It's going to give us some summary statistics.
09:09 - So I think we have multiple methods.
09:12 - We're going to go here with 319
09:15 - and submit the activity and that worked.
09:18 - Now the next one, which of the following words
09:22 - have a char count of seven and a value of 87.
09:25 - And this is pretty interesting
09:27 - because in the way we did selection before,
09:30 - I'm going to copy this thing right here.
09:33 - We, the way we did it before
09:36 - was just by passing one value of the index.
09:38 - We worked with just one word.
09:41 - But selection in pandas, df.lock here,
09:45 - takes potentially a list of index values to retrieve.
09:50 - So here, instead of passing just one value,
09:53 - I can pass each one of them.
09:54 - And there's going to be a little bit of an annoying procedure.
09:58 - I'm going to just copy and paste all the words here.
10:00 - You feel free to fast forward.
10:03 - I will not copy this one
10:05 - because it definitely has more than seven characters.
10:09 - Just going to, you know, quickly
10:11 - and see which ones have seven characters.
10:15 - I think this one has more than seven characters
10:17 - but doesn't matter.
10:18 - It's either anyways, and now you can see that with df.lock,
10:23 - you can actually pass multiple indices
10:26 - if you want to get multi-selection or just one,
10:28 - you want to select just one individual row.
10:31 - And to answer the activity,
10:33 - which of the following words have a char count of seven
10:35 - and a value of 87?
10:38 - It's glowing right here.
10:40 - We can just put here glowing and submits and that works.
10:45 - Just a common, as we were doing before,
10:49 - the first element in this case is a list
10:52 - is the list of indices to select.
10:55 - The second one could potentially be just a column.
10:57 - So here I could say value for them.
11:00 - Oh, I missed a square bracket.
11:03 - And I just get the value for each one of these rows.
11:06 - Of course, in this activity,
11:07 - we did both the char count and the value.
11:10 - So that's why I didn't do it, but just a clarification.
11:14 - So what is the highest possible length of a word?
11:18 - We did it before with describe.
11:21 - We're going to do it again and char count.
11:25 - The maximum one seems to be 28, there you go.
11:30 - Moving on to the next section,
11:33 - which is exploring interesting words.
11:37 - So we did before this activity,
11:41 - there was that this word, and I'm not gonna pronounce,
11:45 - is the only word with a value of 317.
11:50 - Find the only word with a value of 319.
11:57 - And there are multiple ways of solving this one.
11:59 - We could, let's say we do some sorting first.
12:03 - It's not gonna be the most effective way,
12:06 - but let's do some sorting.
12:07 - Let me see if I can put everything in the same frame.
12:11 - df.sortvaluesby and value, it's gonna be,
12:19 - I'm gonna say ascending false.
12:23 - In this case, as this word was the one
12:28 - with the highest value, just by sorting,
12:31 - we were able to reach that result.
12:34 - But of course, that is not always the case.
12:36 - What happens if here, it's asking us
12:39 - for, I don't know, the value of 18.
12:44 - And that is clearly, or even worse, 50.
12:48 - It's clearly in the middle.
12:49 - I have to just browse the data frame
12:52 - to find the correct answer.
12:54 - In this case, what we need to do is some selection.
12:56 - We need to do df at, I'm gonna do the whole syntax
13:00 - and we're gonna explain it later.
13:01 - .lock df at value, it's gonna be 319.
13:08 - And this is the first idea
13:11 - of conditional selection in pandas.
13:14 - We have the word, I'm gonna just plug it in,
13:16 - see if it worked.
13:17 - And if we have a good activity, there we go, it worked.
13:20 - Now, how does this thing work?
13:24 - Remember that whenever I assume
13:27 - you have worked with this before,
13:30 - whenever you have these operations in pandas,
13:33 - and if you haven't,
13:34 - check out some other simpler projects
13:36 - we have in the platform that explain this in more detail.
13:40 - The idea is we are performing this operation
13:43 - that returns a Boolean array, right?
13:46 - So again, refer to the project in the platform.
13:49 - We have a very, very thorough step-by-step process
13:54 - to explain these topics.
13:55 - But basically, this creating a Boolean volume
13:58 - as saying select this word, select this word,
14:01 - or select this word,
14:02 - and indicating if we wanna retrieve it or not
14:05 - with a false true value.
14:06 - So in this case, we don't want the AA word,
14:09 - we don't want the AAH word, et cetera.
14:13 - But the ones that fulfill or match this condition
14:17 - will have a true value here.
14:19 - In this case, it's a long Boolean array,
14:22 - it's a 172,000 element Boolean array,
14:27 - and there's just one true volume,
14:29 - which is the one for this word.
14:33 - So once this Boolean array is resolved
14:36 - to put in a way in memory,
14:38 - we pass that Boolean array to.lock method,
14:42 - and that returns the value.
14:44 - So here is to kind of wrap it up with this idea of.lock,
14:49 - we have three ways of doing.lock.
14:51 - We can pass just one value as we did before
14:55 - for the index, right?
14:57 - We can pass several values for that match the index,
15:01 - or we can pass a full Boolean array
15:04 - indicating which elements, which rows we want to select
15:08 - by just putting a false or a true volume.
15:12 - One tiny comment that's kind of a question
15:16 - we receive all the time is that is this efficient?
15:19 - We could have resolved this thing with just iterating
15:23 - and not using any memory to put in a way
15:27 - because at the end of the day,
15:28 - we have to create this Boolean array,
15:30 - which is gonna set in memory,
15:32 - and then we do the selection based on that Boolean array.
15:34 - So the question is,
15:36 - why are we gonna create this intermediate Boolean array
15:40 - if we could just, you know, each radius, right?
15:43 - I can do something like four row in
15:47 - df if row at value equals 319 print row,
15:56 - just to put away in reality, have to also use the index.
15:59 - But anyway, in this case,
16:00 - I'm just doing a more imperative way
16:03 - of resolving this activity, and I'm not using any memory.
16:06 - I'm just, the data frame is data frame,
16:09 - there's existing memory.
16:11 - I create an auxiliary slot just for this particular row,
16:15 - and this seems to be more efficient.
16:17 - But the reality is that these Boolean arrays
16:20 - are actually very, very tiny.
16:22 - They might look like they are this huge, huge, you know,
16:27 - series to all these string values,
16:30 - but in reality, these are just ones and zeros.
16:33 - It's a very small one bit element array, right?
16:38 - And the index is pretty much the same we have.
16:41 - So just a comment on the side,
16:43 - I don't wanna get too technical,
16:45 - but again, the beauty of panda selections,
16:49 - this dot lock works by the index,
16:51 - and again, we can pass just one value,
16:53 - multiple values, or a full Boolean array.
16:58 - All right, moving forward, what is the most common value?
17:03 - To answer this question, we can refer back to,
17:06 - let me do value, scribe, there you go.
17:10 - And we can do different statistical methods, right?
17:15 - So in this case, we have the mean, standard deviation,
17:18 - minimum, maximum, et cetera.
17:20 - We also have the median, which is right here,
17:23 - which is a value 103.
17:25 - And there is one that is not showing up here,
17:29 - which is the mode of the given series or a given array.
17:36 - So we could have an understanding of the statistical methods.
17:40 - So we're gonna do something like df at value mode.
17:47 - And we get that 93 is the most common value.
17:53 - Now, this doesn't tell you much,
17:55 - because it just tells you of all the different values
17:58 - we have in our data frame, let's do that.
18:02 - 93 is the value that shows up the most times.
18:06 - And we don't know in which situations,
18:08 - because the character count might be different,
18:10 - but there are different characters,
18:11 - so the value is different.
18:13 - But a very common method, something that I use all the time
18:16 - is the df at value, and we're gonna do value counts method.
18:23 - This is a very, very helpful, I get just the first ones.
18:28 - A very helpful method is gonna give you
18:32 - this given value appears 1,965 times.
18:37 - So 100, as activity said, is the second most common value.
18:44 - And there are 1,921 words that match that value.
18:54 - The value 93 is the most common one,
18:57 - and there are 1,965 words
19:01 - that match that given value right here.
19:04 - We could do something like df.lock df at the value
19:12 - equals 93, and we can get here, let's get the first 10.
19:19 - All these words have the same value,
19:24 - even though they have different chart counts, right?
19:29 - Because they have different characters.
19:32 - Let me do sample here, so we get a random sample of values,
19:36 - so right here we have, for example,
19:38 - in jests have seven characters and the value is 93.
19:42 - Again, the sum of the characters results in 93.
19:45 - But let's do it again, I'm gonna keep that one there.
19:50 - The testable has 10 characters and has the same value, right?
19:55 - So again, to compute the mode of values,
20:02 - you can use the mode of statistical method,
20:06 - or for me, more common, very useful
20:10 - is the value counts method gives you not just
20:13 - the most common value, gives you kind of a ranking
20:16 - of the most common values in a column,
20:20 - and also gives you how many samples
20:22 - you can find of that value.
20:25 - All right, so, oh, we haven't done it.
20:28 - Let's see if it passes, 93 is our most common value.
20:32 - There you go, it worked.
20:33 - What is the shortest word with the value 274?
20:37 - Let's resolve that now.
20:40 - df, we're gonna do a little bit of selection first,
20:44 - so let me align that so we can zoom in.
20:47 - What is the shortest word with the value 274?
20:52 - So first, we can start by selecting all the words
20:57 - with a value of 274, there you go.
21:03 - And then what we could do is either sort the values
21:08 - by char count, and this is gonna be the shortest one,
21:13 - this is gonna be the shortest one, or we could have done
21:18 - a little bit of more selection.
21:20 - I think that just by doing this method, it works.
21:26 - We could have done something like we get the value,
21:31 - the char count, sorry, here.
21:35 - So we have that only the given column,
21:40 - and then we get the minimum value, right?
21:42 - So what's the minimum value, 20?
21:45 - With this thing, we could have also extended our query
21:50 - and do df.log, I'm gonna do that,
21:55 - and this, and the df.log, no, df at char count
22:00 - is equal to 20, that's the one we got before,
22:05 - and this is equal to that, and there we go,
22:12 - we can do a very quick selection.
22:15 - We could have done it also in a way that it's dynamic,
22:20 - so we get plug this value here,
22:23 - and then we can do a very quick selection.
22:27 - So we get plug this value here,
22:31 - and this is all the same thing.
22:33 - At the end of the day, I think that just,
22:35 - if we don't have too many elements,
22:37 - sorting the values is an easier way to resolve it.
22:41 - So let's go ahead and do it, there we go.
22:44 - By the way, this is something that we do in production
22:47 - to put in a way like in our day-to-day jobs all the time.
22:50 - Sometimes you will need to build more dynamic solutions,
22:54 - but sometimes you're just doing some analysis,
22:56 - just exploring data, you can keep it easy,
22:59 - just with the different methods.
23:01 - You can hear the important pieces
23:03 - applying the right technique for the right problem.
23:06 - All right, moving forward.
23:09 - Next activity, this is interesting.
23:12 - Create a column ratio,
23:14 - which represents the value ratio of a word,
23:18 - which is defined as the value of the word
23:21 - divided by the character count.
23:24 - So let's do that right now.
23:27 - Stop me if you wanna practice this by yourself,
23:30 - but the way to create this ratio is gonna be,
23:33 - let me show you the F first, though, head.
23:37 - It's gonna be df at ratio,
23:40 - that's the name that it's asking us,
23:43 - the column that it's asking us,
23:44 - is gonna be equals to df at value
23:48 - divided by df by chart count.
23:54 - And now we're gonna do this thing again,
23:58 - and we have a ratio computed right here,
24:01 - the value divided by the chart count.
24:05 - Let's check to see if it works.
24:09 - It did work, we are good to keep moving forward.
24:14 - So a few more questions,
24:15 - what is the maximum value of ratio,
24:17 - df at ratio dot max, 22.5.
24:25 - What word is the one with the highest ratio?
24:28 - And here, multiple ways to solve it,
24:30 - again, sort values, I think it's a good alternative.
24:34 - We're gonna do by ratio, but here,
24:38 - let's do it right here, in this way.
24:41 - By default, our values is sorting in ascending mode.
24:45 - We actually want it flipped,
24:48 - we wanna start with the highest one at the top.
24:50 - So we're gonna pass ascending equals false,
24:53 - we're gonna pass this order.
24:55 - And now we have that the highest ratio is 22.5.
25:01 - What word is the one with the highest ratio?
25:07 - 22.5, the word is x, u.
25:11 - As we know, the highest ratio,
25:13 - we could also have written a query, df dot lock,
25:16 - where df at ratio is equals to the maximum ratio,
25:21 - and that is also x, u is the same result.
25:24 - So again, two different ways of resolving the same activity.
25:28 - It's important for you to have all the techniques
25:30 - in your tool belt, then which ones you use,
25:32 - it depends on what problem you're solving.
25:35 - How many words have a ratio,
25:38 - how many words have a ratio of 10?
25:42 - So what we can do here is we can do df,
25:46 - we could have done, this is not gonna work so well,
25:50 - value counts, to get an idea of the values.
25:53 - And here we have just, this was,
25:56 - we were very lucky that 10 is a common enough value
26:01 - that there are 2,600 words with it, and we can see it.
26:05 - But if this was not such a common value,
26:08 - the ratio we're looking for,
26:11 - it's probably buried in this sea of different ratios
26:16 - because there are actually 1,333 different ratios.
26:21 - So as ratio is a continuum variable,
26:25 - there are multiple individual points,
26:27 - it's usually not convenient to use value counts.
26:30 - Instead, what we wanna do is just write a simple query,
26:34 - df.lock all the rows that have a ratio of 10, right?
26:41 - That's the query we wanna build.
26:43 - Gives us a bunch of rows,
26:46 - what we can do is just do a shape,
26:48 - and that's gonna give us the same number
26:50 - that we have right here.
26:52 - Gonna plug it in here.
26:55 - Let's do a quick, quick stop here in asterisk
26:59 - to mention the.query method.
27:01 - So df.lock and all the selections,
27:04 - usually the prefer method
27:06 - because it's the most powerful one,
27:08 - but sometimes you just wanna use the query method.
27:11 - That is just kind of a shorthand.
27:13 - You can write it in plain English.
27:15 - It's kind of Python-based,
27:17 - and the query method just works in this way.
27:20 - We can say ratio equals 10,
27:22 - and it's relatively simple.
27:26 - You can use it whenever you have simple conditions.
27:29 - There you go, here's for you to compare.
27:32 - I personally, myself, I usually prefer this method,
27:35 - but that's because I'm just very used to it,
27:38 - and I like thinking in terms of Boolean arrays
27:40 - and combining Boolean arrays and all that.
27:44 - Up to you if you wanna use query,
27:46 - the one that suits you better.
27:49 - Moving forward, what is the maximum value
27:52 - of all the words with a ratio of 10?
27:57 - So we're gonna keep, let's keep query here.
28:02 - This is the results.
28:03 - And what we can do here is we can sort the values.
28:06 - Let me put in context again the activity.
28:09 - What is the maximum value?
28:11 - Sort of values by value.
28:16 - Value ascending false.
28:21 - And here we can find what is the maximum value
28:26 - of all the words with a ratio of 10, right?
28:30 - Head, there you go.
28:32 - We had, what is the maximum value? 240, it seems.
28:38 - We could have also done here,
28:43 - actually for this particular solution,
28:45 - I think this method is gonna be better.
28:47 - We can do that, and we're gonna do value,
28:53 - just get the max.
28:55 - We should get the same result, 240.
28:58 - And that's the same answer here.
29:00 - The beauty of sort values is sometimes you see the data.
29:05 - In this case, you have to trust it, which is fine.
29:07 - We have an analytical resolution, we can trust it.
29:10 - But it is really like you can trust it.
29:12 - Like the ratio is 10, chart count is 24,
29:16 - the value is 240, it's usually a little bit, I don't know.
29:21 - It leaves you at peace to see that the data is okay.
29:27 - Let's keep moving forward.
29:30 - Of those words with a value of 216,
29:34 - what is the lowest chart count found?
29:38 - In this case, we have pretty much the same thing.
29:42 - We're gonna do here.
29:44 - The F, let's do query now.
29:47 - And we're gonna do, of those words
29:49 - with the value is 260, so value is 260.
29:54 - What is the lowest chart count found?
29:57 - So first, this thing is gonna give you all the words
29:59 - with a value of 260.
30:01 - Now we can sort values by chart count.
30:08 - And that's gonna give us,
30:11 - what is the lowest chart count found is 17.
30:14 - So here we're gonna find 17, there you go.
30:20 - And the last activity we're gonna be done
30:23 - based on the previous task, what word is it?
30:26 - This is the word and we are good to go.
30:31 - One important, one minimum comment about the query method
30:36 - and we're just gonna wrap it up
30:38 - with these particular projects
30:39 - is that when your columns have spaces,
30:47 - you need to surround them in backticks.
30:51 - So let's get, let's invent a new activity
30:55 - just by ourselves here very quickly.
30:58 - I'm gonna use describe, there you go.
31:01 - Let's say I'm just writing this on the fly.
31:06 - On the fly, find all the words with chart count
31:14 - greater than the mean or the average chart counts.
31:19 - Chart counts, yeah, character counts.
31:22 - All right, so this activity we're like
31:24 - just making up on the fly.
31:26 - How can we, first we can compute
31:30 - and let's say we have,
31:32 - we're gonna mean chart counts, it's gonna be count.
31:40 - It's gonna be.mean and we're gonna print it.
31:44 - I'm gonna show you how to write the query
31:46 - using this variable.
31:47 - We're gonna do df.query where chart count
31:54 - and this is not gonna work is greater than nine, right?
31:57 - So this is not gonna work because there are spaces
32:00 - you have to surround them with backticks.
32:02 - That's the first thing you wanna work.
32:03 - The second thing is if you wanna reference
32:05 - this variable in here, if I do this,
32:09 - that's not gonna work either, just gonna blow up
32:13 - because by default, anything that is a name
32:17 - within this query is gonna reference a column.
32:20 - So if you wanna reference an external variable,
32:23 - what you have to do is pass here the ampersand symbol.
32:28 - In this case, gonna say, give me all the values
32:30 - in which this column surrounded by backticks,
32:33 - so respect the white space is greater than this thing
32:37 - and this thing is referencing an external variable.
32:40 - So go out to put it away to the global scope
32:43 - or local, whatever, and find this value,
32:47 - plug it in and run the query
32:49 - and here is what we can do right there.
32:52 - So again, the query method is convenient.
32:54 - I personally, myself, I prefer to use the.log method.
32:59 - I like to combine it with column selection.
33:01 - I like to think in terms of Boolean arrays,
33:03 - but it's perfectly fine to use query.
33:05 - Just remember these tricks, right?
33:09 - That sometimes you're gonna need to use backticks
33:12 - for columns with white spaces
33:14 - and you can reference external variables with the add symbol.
33:17 - That is it with data frames.
33:19 - Let's keep moving forward and solving more projects
33:22 - applying those data science skills.
33:26 - In this project, we're gonna practice
33:28 - how to filter data, sort it, do some selections,
33:32 - some querying, all very useful data analysis techniques.
33:36 - The data that we're gonna be working with
33:38 - is a dataset containing Pokemon information,
33:41 - including their type, their stats,
33:45 - some total attack, defense, and all that,
33:47 - their generation, and their legendary status.
33:50 - So let's go ahead and just read the data to get started
33:54 - and we're gonna start working with activities one by one.
33:58 - As usual, just pause if you wanna resolve it by yourself
34:02 - and then you're gonna hear me with the explanation.
34:04 - What I'm gonna try doing in this project
34:08 - or for this project is giving you
34:10 - all the different possibilities we can think of.
34:12 - So solutions with.lock, solutions with ilock if that applies,
34:17 - and also solutions with the.query method.
34:21 - The first thing you have in this notebook
34:23 - is a little bit of an information
34:24 - in terms of distribution of the Pokemon we have.
34:27 - So for example, these are all the type one Pokemons
34:31 - and we also have some analysis of, for example, their stats.
34:35 - So for example, total,
34:37 - we see that there are a few very powerful Pokemons,
34:40 - both in terms of a histogram and a box spot.
34:43 - So all these visualizations are usually pretty useful, right?
34:48 - When you're starting your data analysis with a new dataset,
34:51 - you just do a quick visualization
34:53 - of how your data is distributed
34:55 - in terms of, for example,
34:57 - categorical variables, how they are assigned,
35:00 - or also the ranges distribution of some numeric variables,
35:04 - like in this case, the total ones.
35:07 - So we can see the most powerful Pokemons.
35:10 - In this case, there are legendary status.
35:12 - We can also consider a categorical variable.
35:15 - And on that, let's get started with the activities one by one.
35:19 - So how many Pokemons exist with an attack value greater
35:24 - than 150, right?
35:27 - So let's take a look at the data first.
35:30 - That's what we're dealing with.
35:32 - And we're going to focus how many Pokemons exist
35:34 - with an attack value greater than 150.
35:37 - So let's get started, pause if you want.
35:39 - And we're going to do df.lock df at attack greater
35:46 - than 150, right?
35:50 - That's going to give us the full list
35:52 - of Pokemons with that attack.
35:53 - And we can kind of see that there weren't like too many
35:58 - with that value already with the fox plot.
36:01 - With the query itself, we can get a real sense
36:05 - of how many values we have.
36:07 - In this case, we have just three.
36:08 - We could also do something like shape to get it.
36:11 - But again, we can clearly see
36:13 - that there are only three samples that match
36:15 - that given condition.
36:17 - We can also do the query method.
36:18 - So I can do df.query where attack is greater than 150.
36:26 - And we get the same results.
36:27 - So let's try it out.
36:29 - See, there you go.
36:31 - It worked, correct.
36:33 - Moving forward, select all the Pokemons
36:36 - with a speed of 10 or less.
36:39 - So in this case, we need to create a sub data frame.
36:43 - So it says right here, story your results
36:45 - in slow Pokemons.df.
36:48 - So in this case is a speed of 10 or less.
36:51 - So that's gonna be pretty, pretty slow.
36:55 - It's right below here.
36:57 - We have probably 10.
36:58 - It's gonna be a pretty small amount of Pokemons.
37:00 - So let's take a look first,
37:02 - how many fulfill that condition.
37:05 - speeddf at, oh, mis-type.
37:09 - Speed is 10 or less.
37:14 - So this is less or equals and 10.
37:17 - And we have only a handful, one, two, three, four, five.
37:22 - And we can of course assign that to this variable
37:25 - to have a final check with activity.
37:27 - Let's do it on the side in parallel.
37:30 - There you go, it worked.
37:32 - And of course using.query,
37:35 - its query speed is less or equals than 10.
37:40 - From now on, I will try to stick to the.lock method
37:44 - is the one that I prefer.
37:46 - Instead of using query, but you can use either.
37:51 - I prefer to work with Boolean arrays.
37:53 - Remember this expression,
37:55 - it's gonna be just a Boolean expression, right?
37:57 - So how many of these values are,
38:01 - the values are true are basically
38:04 - that the values that match the given condition.
38:07 - This is pretty useful if we wanna count the values.
38:10 - And this is something that I could have done
38:11 - in the previous one,
38:12 - which I didn't realize showing before.
38:15 - Basically, if I did something like this.sum,
38:20 - I'm gonna get the same result, right?
38:22 - How many values in this full array,
38:27 - so array is not, attack is an array,
38:30 - let's say a series, a collection that has integers.
38:33 - And then we ask, give me an array, a Boolean array
38:37 - of all the ones that match this condition,
38:40 - this case greater than 150.
38:42 - So it's gonna be false, false, false, false, false.
38:44 - And of course, we're gonna have three in this huge array
38:48 - that are true.
38:50 - So in this case, as I told you in the previous project
38:55 - that we did with English words,
38:57 - if the array, in this case, it seems that there are just,
39:01 - you know, strings saying false and true,
39:02 - in reality, this is a Boolean array.
39:06 - So in reality, these are all ones and zeros,
39:09 - very efficient, very compact array, ones and zeros.
39:13 - We can sum that and we have the final result.
39:16 - In this case, we can count, we can sum,
39:19 - write all the ones, we have just three ones
39:22 - and that gives us the answer to the previous question as well.
39:25 - All right, moving forward, how many, let's go here,
39:30 - how many Pokemons have a SP depth, value, special defense,
39:35 - value of 25 or less, special ability defense.
39:40 - So we're gonna do df.log,
39:44 - how many Pokemons have a special defense value of 25 or less?
39:49 - We're gonna do df at sp.def less or equals than 25,
39:56 - because again, it's a value of 25 or less.
39:59 - And now we have a bunch.
40:00 - So now we can use the technique that we did before,
40:03 - that is just this.sum, gonna crease the sides here a bit.
40:08 - And we have 17 as a result.
40:10 - I could have done the same thing here, shape,
40:14 - and I get pretty much this table has 17 rows.
40:19 - Of course, this is a little bit more compact,
40:22 - let's say easier.
40:23 - So let's try it out, 17 and see if it works.
40:27 - There you go, they work, we're good to go
40:29 - and keep moving progress, making progress.
40:31 - So select all the legendary Pokemons.
40:34 - This is pretty interesting one.
40:35 - We have to sort the result,
40:37 - select only Pokemons that are legendary
40:40 - and sort the result in the variable legendary.lgdf.
40:44 - So that's gonna be df.log, df at legendary,
40:49 - but let's take a look first using the info method.
40:53 - Let's take a look at the legendary column.
40:56 - The legendary column itself is a Boolean column,
40:59 - a Boolean series given by its type.
41:02 - So that means that it is itself a Boolean array,
41:07 - with true and false values.
41:08 - We could ask df at legendary,
41:10 - how many legendary Pokemons we have in this dataset,
41:15 - and that's just the sum of the legendary status.
41:17 - And that's it, because this is a Boolean array.
41:19 - So remember, if we did df at attack, for example,
41:23 - greater than 150, and we had this huge Boolean array,
41:28 - false true, false true,
41:29 - and then we selected the ones that had a true value,
41:33 - we can pretty much do the same thing here.
41:35 - And what I'm gonna do is,
41:37 - we could say something like, this thing is true, right?
41:41 - So give me all the legendary Pokemons.
41:44 - What did I do wrong?
41:53 - False kind of, oh, Boolean index, df is equals,
41:59 - there you go, my bad, is equals to true.
42:03 - But the reality is that this column itself
42:06 - is a Boolean array.
42:07 - So let's just get rid of the true,
42:10 - and we say, select all the Pokemons that are legendary,
42:15 - just that, just pass the mask, the Boolean mask,
42:20 - and perform the selection.
42:22 - If we wanted, let's say we wanted to get all the Pokemons
42:26 - that are not legendary, the non-legendary Pokemons.
42:30 - We can, of course, do something like false,
42:33 - we're gonna get how many we have.
42:35 - But the reality is we can just invert the array.
42:39 - We had false, false, true, false, right?
42:43 - That was our original array.
42:45 - We can do inversion of this thing,
42:47 - negate it with this operator.
42:49 - That's gonna give us true, true, false, true.
42:55 - This is false.
42:57 - So what I can do is I can just do the negation here,
43:01 - and I get the same result.
43:03 - So sorry, I got a little bit sidetracked,
43:05 - but what we wanna get is all the Pokemons
43:07 - are of type legendary.
43:10 - And to do that, we're gonna assign that to this variable.
43:15 - And we're gonna get the head, first five rows.
43:19 - There you go, all legendary.
43:21 - And let's check if the activity passes.
43:25 - This is why it's so important to understand
43:27 - the column types of your data.
43:29 - Because sometimes the selections
43:32 - or the Boolean arrays you're gonna be working with
43:35 - are not the same depending on the type
43:37 - of the data you have.
43:39 - Okay, moving forward, find the outlier.
43:43 - So we have this distribution of Pokemons,
43:48 - and we have to find this particular one,
43:51 - the one that has a difference value that is really big
43:55 - and also an attack value that it's pretty low, right?
43:59 - So this Pokemon has a ton of defense, but a very low attack.
44:04 - Of course, we could do something like df.defense.sort.
44:10 - Let's do df.hand, show the whole thing.
44:15 - Then we're gonna do df.sort values by defense,
44:20 - and show the first view.
44:31 - By default, the sorting method is in ascending mode.
44:36 - So we are starting in this way,
44:38 - we're going in this direction.
44:40 - We wanna invert that, we're gonna do ascending equals false.
44:44 - So now we have the strongest one here.
44:48 - And here we have the one that has a defense of 230
44:52 - and an attack, right?
44:54 - Of, in this case, attack here of 10.
44:58 - This pretty much gives us the answer right away.
45:01 - Let's actually try it out.
45:03 - Let's see if this is the one,
45:04 - this is the Pokemon that activity requests,
45:06 - at least for this particular value, it is that passed.
45:10 - But I wanna make a comment here is that you can actually
45:13 - sort by multiple criteria.
45:17 - We could also say something that sort by defense first,
45:21 - and then as a second criteria, sort by attack.
45:25 - There you go.
45:26 - And then for defense, we want it to be in descending mode.
45:30 - So ascending is false,
45:31 - but for attack, we want it to be in ascending mode.
45:35 - Again, the result is the same because the data,
45:38 - it's pretty clear who is this outlier right here.
45:43 - But again, the understanding is we can sort
45:46 - by multiple criteria.
45:48 - What is gonna happen is that the sorting starts here,
45:51 - and then we're gonna sort by attack in the other direction.
45:55 - We can combine as many as we want
45:58 - of this criteria right here.
46:02 - All right, moving forward, more activities.
46:05 - Now we're gonna get into advanced selection
46:07 - with some Boolean conditions.
46:10 - How many far fly Pokemons are there?
46:13 - So we want type one equals equals fire
46:16 - and type two equals flying.
46:18 - So what we're gonna do is we're gonna do df.lock.
46:22 - And here, again, pause if you want,
46:24 - we're gonna do a little bit of Boolean operators.
46:27 - The first condition is gonna be df at type one
46:33 - is equals to fire, right?
46:36 - And the second condition, and how many do we have?
46:40 - The second condition is that type two has to be flying.
46:45 - Flying, there you go.
46:48 - But what we want is the combination of both,
46:52 - type one fire and type two flying.
46:56 - The way to do that is to combine them
47:00 - with an operator, an ampersand operator.
47:04 - So I'm gonna break it into different lines here.
47:07 - And I'm gonna put the operator right here
47:09 - so you see the conditions.
47:11 - How many far flying Pokemons are there?
47:16 - Seems like we only have five.
47:17 - Let's try the result first
47:19 - and then we're gonna explore a little bit more
47:21 - the data frame resulting.
47:24 - And as you can see, I haven't even looked
47:26 - at a single Pokemon.
47:27 - What I'm doing is just combining conditions
47:30 - and summing Boolean arrays.
47:32 - So this is a pretty interesting thing
47:34 - because what is happening here is like,
47:36 - let's say we had only five Pokemons in total, right?
47:39 - We have the first array here is gonna say type is fire
47:46 - and the second array is gonna be is flying, right?
47:51 - And we had something like true, true, false, true, false.
47:58 - So this is of type fire, type fire, not type fire.
48:02 - Yes, type fire, not type fire.
48:05 - And then for flying, we had false, true, false, false, false.
48:11 - There we go.
48:11 - So in this case, this is the only flying Pokemon.
48:17 - What happens and that's why we have like different results.
48:19 - Of course, we had here a bunch of fire Pokemons
48:23 - and here we have a cup of a bunch of flying Pokemons.
48:26 - We have true values for the condition.
48:29 - But what happens when we use this ampersand
48:31 - is that we do one by one, bit by bit, Boolean value
48:37 - by Boolean value, we do the operation,
48:39 - the ampersand operation,
48:41 - which is like the and operation in Python.
48:43 - So we do true and false for the first one.
48:47 - So the first one can be true and false.
48:50 - What is the result of true and false?
48:53 - False.
48:54 - And what then we do the result of true and true.
48:58 - What is the result of true and let me show you
49:00 - true and false is of course false.
49:02 - True and true is true.
49:05 - So we have that false and false is false.
49:09 - True and false again is false.
49:11 - And we could say this one was true.
49:14 - False and true is false.
49:17 - There we go.
49:18 - So in an and operation and we have operator one
49:23 - and operator two or operand, operand one and operand two,
49:27 - for this expression, for this whole thing,
49:30 - for this whole expression to be true,
49:33 - both OP one and OP two must,
49:39 - well put it this way, must be true
49:44 - for this operation to be true.
49:48 - Anything else either OP one is false
49:52 - or OP two is false or both are false.
49:55 - Anything else, anything else is false.
50:01 - This is just some Boolean arithmetic,
50:05 - Boolean operators just, you know,
50:08 - a little bit that applies to Python as well.
50:11 - But the interesting thing is that
50:13 - that same operation we're seeing here,
50:16 - comparison bit by bit, value by value,
50:20 - a line is what we're doing right here.
50:23 - So we had 47 Pokemons were of type one fire
50:28 - and we had 89 Pokemons were of type two flying.
50:32 - And then we combined those things using an ampersand,
50:36 - an and operation and the result was only five Pokemons.
50:41 - So we can actually visualize those sample points.
50:47 - We're gonna do dot lock
50:49 - and we're gonna pass that condition.
50:51 - And these are the only five Pokemons
50:55 - are of type one fire and type two flying, okay?
50:59 - Because we are using these Boolean operators.
51:04 - Okay, moving forward.
51:06 - How many Pokemons, oh no, one thing, one thing.
51:09 - If we wanted to use a query method,
51:11 - we could have rewritten this thing with query
51:14 - and we're gonna do, remember that if you have
51:18 - white spaces in your column names,
51:20 - you have to surround that with backticks.
51:23 - In this case is gonna be fire and type two,
51:29 - type two equals flying.
51:33 - And I made a mistake here.
51:35 - Flying should be a string, there we go.
51:38 - We have the final result.
51:39 - So again, this is easier to type probably.
51:44 - We need to put the backticks in the column
51:46 - that has a white space.
51:48 - And here we can just use Python
51:49 - and we can use a string.
51:50 - You have to make sure you're matching
51:53 - or on the contrary, don't matching the string quotes
52:00 - you're using to surround the whole expression.
52:03 - And then within the Boolean operators,
52:06 - we use the regular Python ones.
52:08 - We don't use the and percent, we use just the and.
52:12 - When we are using dot lock form,
52:14 - we must use the Boolean operators are and or a not.
52:21 - And if we're doing something here,
52:24 - let me see if I can do a not.
52:26 - Yes, we can do a not right here as well.
52:30 - Okay, now moving forward, activity number seven.
52:33 - How many Poisson Pokemons are across both types?
52:38 - So as you can see, right here, the type of a Pokemon
52:46 - is a Pokemon has two types.
52:48 - Let's say it has a strong type and a secondary type.
52:53 - The type poison can be applied to either the primary type
52:58 - or the secondary one, because I can actually show you
53:01 - that to you type one counts.
53:05 - We have that there are poison 28 Pokemons
53:11 - that have poison in type one and type two.
53:17 - There are where is it not 31 Pokemons
53:21 - that have poison as secondary type.
53:23 - So we want to basically say or find
53:25 - how many poisonous Pokemons are there in general, right?
53:29 - How many poisonous Pokemons we can find in either type.
53:33 - So the expression and let's start now with a query method.
53:36 - So you can visualize it first.
53:38 - So it's going to be type one equals poison.
53:46 - Type two equals poison.
53:51 - And there you go.
53:52 - How many do we have here?
53:54 - Let's copy this thing and do a shape
53:58 - to get the final result.
53:59 - How many 28 it seems, wrong answer.
54:06 - We can check that in a second.
54:09 - I can try using the dot log.
54:12 - Oh, no, no, no, wait, wait, wait.
54:13 - It's just typo here.
54:17 - 59, let's try 59.
54:23 - There you go, it worked.
54:24 - So it was just a typo, but let's now think about it
54:29 - in terms of the dot log method.
54:33 - The way it works is pretty much the same thing
54:35 - we did before, the F of type one equals poison, right?
54:44 - This is going to give us a Boolean array
54:47 - and we can combine that Boolean array,
54:49 - which pretty much the same expression,
54:51 - just type two points.
54:54 - But here, what we want to do is an or operation.
54:57 - And the way it works is let's say we have,
54:59 - let's see if I didn't delete our previous arrays.
55:04 - We're going to use them again, here, nowhere, here.
55:12 - So let's say we have poison type one and type two.
55:21 - The way it's going to work now is
55:23 - as this is an or expression,
55:26 - we care for any of the samples.
55:29 - So if this Pokemon is poison here or here,
55:33 - doesn't matter, we want to retain that object.
55:37 - So if it's true here or here,
55:40 - we want to still make the whole thing a true operation.
55:43 - That's the result of doing true or false, for example,
55:47 - or doing false or true, right?
55:52 - As we did before, and I can delete this thing
55:56 - and go back to our previous notes,
55:58 - we said that if we have these two operations,
56:03 - that it's OP1, operand one and operand two,
56:07 - and I'm still in the end, sorry for the back and forth,
56:10 - but let's start again,
56:11 - let's pick up where we were before with the end operator.
56:15 - This thing is going to be true only
56:19 - if both operands are true.
56:21 - So OP1 and OP2 must be true, and this is an operation.
56:28 - OP1 and OP2 must be true for this whole thing to be true.
56:33 - Any other case, everything is false.
56:36 - We can do a very similar reasoning with the for operation.
56:42 - So OP1 or OP2 must be false,
56:47 - both of them, for this thing to be false,
56:53 - anything else is true.
56:55 - And this is, you can just flip things and that just works.
56:58 - That's the idea between Boolean algebra.
57:02 - You can just flip things, true with false.
57:04 - In this case, true or false, or false or true,
57:10 - true or true, all these things will be true.
57:14 - The only way to get a false result back
57:18 - is by both these things being false.
57:22 - I'm going to get into our logic here.
57:24 - We say true or false is true, and true and true is true,
57:28 - and let's do that, we align false and false is false.
57:33 - So these two are false.
57:34 - So this was fire flying, so it's not poison.
57:40 - In this case, it was poison rock.
57:43 - I'm just making up types.
57:45 - It was, for example, flying poison, right?
57:49 - So that is also true, so true and true.
57:55 - So what we're doing here with dot lock,
57:59 - we are generating the first Boolean array
58:02 - and combining it with the second Boolean array
58:05 - with the or operation.
58:06 - And again, conceptually speaking, it works in this way.
58:10 - The result of this whole thing,
58:12 - if we wrap it in parentheses and do a sum,
58:15 - we're going to get the same value out.
58:18 - Remember, these are just Boolean arrays.
58:22 - Okay, let's keep moving forward.
58:25 - What Pokemon of type one ice has the strongest defense?
58:31 - So we have to find, and you're going to see
58:36 - that I usually start my activities doing the F dot head
58:39 - is because I need to take a look at the structure
58:42 - of my data.
58:43 - I'm going to do df dot lock type one, type one,
58:50 - sorry, df at type one equals ice.
58:56 - I'm going to start in this way.
58:59 - So these are all the Pokemons that have type one ice.
59:03 - Now I can keep going by doing something like
59:07 - give me the one here we can do
59:12 - and the defense dot max.
59:17 - So the maximum defense of type one ice Pokemons is 184.
59:25 - I could extend this one by saying,
59:29 - give me the Pokemons that are type one ice and,
59:34 - and here I'm going to use an and operation
59:37 - because I want both things to be true.
59:40 - And df at defense is the maximum that I found before 184.
59:49 - And if you let me, I'm going to put everything together
59:53 - and I could do that and give me just one Pokemon, right?
59:58 - So far so good.
59:59 - Let's put it in here, see if it works.
60:03 - It worked.
60:03 - That was the correct answer.
60:05 - But now let me show you something a little bit easier.
60:08 - In these cases, we're looking for d1,
60:10 - like the most powerful or the most powerful,
60:13 - like if we have several,
60:15 - but we're looking for a maximum value.
60:17 - What we could have done is just sort values here.
60:23 - We're going to sort by defense
60:26 - and we're going to sort in descending order.
60:28 - We want, let me show you the standard one.
60:31 - It's going to show you the least powerful,
60:35 - like the weakest Pokemons first.
60:37 - That's because this is sorted by defense,
60:39 - but in ascending mode.
60:41 - But what I do is sorting descending mode.
60:43 - To do that, we're going to do ascending equals false.
60:48 - And now we get the most powerful,
60:50 - the same result as before, which is of type ice.
60:54 - We have the most powerful one that we can see right here.
60:59 - So this is a more of a visualization.
61:03 - I'm doing some analysis with my own eyes
61:07 - so I can just get the first value here.
61:10 - It's not so programmatic.
61:12 - This is a little bit more programmatic.
61:14 - I could automate this thing
61:16 - and I can do something like,
61:20 - for example, I lock zero one
61:25 - and I have just the name of the first Pokemon, the name.
61:29 - This is a little bit more programmatic.
61:31 - But again, it's pretty much the same thing
61:33 - as far as what we're doing serves the same purpose.
61:38 - Okay, keep moving forward.
61:39 - What's the most common type of legendary Pokemons?
61:43 - What is the most common type of legendary Pokemons?
61:46 - What is the most common type?
61:47 - One from the legendary Pokemons.
61:49 - So what we can do is,
61:50 - let's first lock all the Pokemons that are legendary.
61:56 - And we did this before.
61:57 - So this is gonna give us all the legendary Pokemons.
62:00 - And now what we can do is do type one.
62:04 - This gives us the whole thing.
62:05 - And now we can do just value counts.
62:09 - And we can get that psychic
62:11 - is the most common type of Pokemons.
62:15 - And let's do that there.
62:20 - See if it works.
62:22 - There you go.
62:23 - You can combine this thing.
62:25 - Kind bar.
62:27 - There you go.
62:28 - To do a little bit of a visualization.
62:31 - But in a way, the result is correct.
62:33 - The important thing here in terms of filtering
62:35 - and all that is that we filter by the legendary status
62:39 - with just the Boolean array.
62:40 - And then we pass the type one column
62:43 - to get only that column.
62:45 - And then we got a summarization using a value counts.
62:49 - Okay, what's the most powerful Pokemon
62:52 - from the first three generations of type water?
62:57 - So we need to find the F.head as usual.
63:01 - So we take a look at the structure of our data.
63:05 - Find the Pokemons, the most powerful Pokemon by total.
63:09 - So we wanna find the total being
63:11 - the powerful representation here.
63:14 - From the first three generations, that is of type water.
63:17 - So let's start step by step with different conditions.
63:22 - To filter types of Pokemons are type water, that's simple.
63:26 - We're gonna do df.lock df at type one equals water.
63:35 - There you go.
63:38 - But now we have to combine it with the expression
63:41 - that is from any of the first three generations.
63:47 - How many generations do we have?
63:50 - Generation, we're gonna do now value counts.
63:55 - We're gonna get the, there are, we can actually,
63:59 - I think, let me see, let me see the,
64:05 - let me ask here, what's the syntax
64:10 - of the value counts, value counts method?
64:15 - Because what I wanna do is not sort these values.
64:21 - We can visualize it in a quick VAR chart to put it in a way.
64:28 - Value counts is the same.
64:30 - How can I, what parameters does it accept?
64:35 - Does it accept, I'm closer to find the documentation
64:41 - of pandas than asking the AI here.
64:48 - There you go.
64:50 - Sort false is the method, the one that I was looking for.
64:54 - So let's do sort false.
64:56 - There you go.
64:57 - And now I'm gonna do plot kind bar.
65:02 - There you go.
65:03 - So these are the generations we have.
65:06 - One, two, three, four, five, six.
65:10 - This is a little bit, this is not useful
65:12 - for the exercise in reality.
65:13 - I just wanted for you to take a look at the generations.
65:17 - Basically, what it's asking us to do
65:20 - is the first three generations are gonna be
65:24 - generation one, two, and three.
65:27 - Continue with our exercise.
65:29 - How can we get the documents of the first three generations,
65:32 - the way to do that is gonna be DF.
65:37 - We could do something like generation.
65:39 - Let me actually type it outside.
65:42 - We can do something like generation equals one
65:48 - or two or three.
65:55 - And we wrap this whole thing in parentheses.
66:00 - There we go.
66:05 - But the reality is that it's a much easier method,
66:08 - which is DF at generation dot is in.
66:15 - So we're gonna pass here a collection one, two, or three.
66:21 - We're gonna get the same results.
66:24 - So it's basically the same expression as before.
66:27 - This value right here can take any of these forms
66:31 - and that is good for us.
66:35 - That is the same as doing this full or.
66:38 - So putting everything together,
66:40 - what we're gonna do is let me zoom here
66:43 - and we're gonna break this into several lines.
66:47 - We're gonna do type one is water
66:49 - and the generation is one, two, three.
66:54 - There we go.
66:55 - And I already forgot what the question was answering
66:58 - was the most powerful Pokemon by total.
67:02 - Here we're gonna sort values by total.
67:06 - And as usual, let me show you what it returns.
67:10 - Returns in ascending mode.
67:12 - We actually wanna do it in descending mode.
67:14 - So we're gonna do sort values by, oh no, no, no, sorry.
67:20 - We already did sort values.
67:21 - We're gonna do ascending, false,
67:26 - and we're gonna get Kyog or Kyog or my English is bad
67:32 - and on top of Pokemon is worse.
67:34 - Is the most powerful Pokemon by far in terms of total.
67:39 - So we're gonna pass it finally and see if it works.
67:42 - I'm gonna do a quick summary.
67:44 - The first one is this idea of work just as usual,
67:47 - combining things with the Boolean array
67:51 - or sorting values to get answer.
67:53 - The interesting part is we're using this is in operator.
67:57 - That lets you pass several values
68:02 - and it's basically a simple way to write an or statement.
68:06 - So let's say we wanna get all the Pokemons that are of type,
68:11 - type one, either fire or water, we can say is in
68:15 - and we can do here fire or water.
68:19 - So any Pokemons that are fire or water,
68:22 - it's basically this volume has to be in this subsets.
68:27 - Okay, what for?
68:28 - What's the most powerful dragon
68:30 - from the last two generations?
68:33 - This is getting interesting.
68:36 - So find the most powerful by total
68:39 - that is of type dragon, either type one or type two.
68:43 - So either type from the last two generations
68:46 - and enter its name below.
68:48 - So it has to be a dragon, either in type one or two
68:51 - and from the last two generations, last two generations.
68:55 - We saw before the last, the generations
68:57 - are already deleted it, basically generation value counts.
69:04 - There we go.
69:05 - Is five and six are the last two generations.
69:09 - We're gonna write the whole thing now.
69:13 - We're gonna do, we're gonna break it in lines.
69:17 - Let's say DF at type one is dragon
69:26 - or DF at type two is dragon
69:31 - and DF at, DF at generation dot S-N.
69:49 - And here we have the last two generations,
69:53 - those five or six and here, quick notes,
69:58 - we are, I'm using here a set.
70:01 - You can pass a tuple, a list, whatever.
70:03 - I just pass an inline set
70:05 - because the most correct way of doing it
70:08 - in terms of performance, I don't think it affects enough,
70:13 - but it's just the correct way of doing it.
70:15 - But anyway, in terms of solving the activity,
70:18 - let's go ahead and the way we're gonna do is
70:20 - I'm gonna just run this thing.
70:22 - We have to find the most powerful Pokemon
70:25 - in this set of being type one dragon, type two dragon
70:31 - and this generation five or six.
70:33 - But you're gonna find something interesting.
70:35 - So I'm gonna show you these results first.
70:38 - You can see what we get.
70:42 - It's type one dragon, type two dragon.
70:48 - That is good.
70:48 - So let me show you the data, type one dragon,
70:52 - type two dragon, so the first condition seems to be matching,
70:57 - but what you're gonna immediately see
70:59 - is that the generation is incorrect.
71:03 - We get Pokemon from generation one, three, four
71:08 - and that is because we're combining the conditions
71:11 - that it's either or this thing or and this thing.
71:16 - So the operators in the way they work
71:19 - is that it did the operator of this thing that works
71:23 - and then it did the operation of these two things.
71:27 - But that is not what we're looking for.
71:30 - The way we want it to work is to perform these two first.
71:34 - It's either this, either one of these
71:38 - and this one in here.
71:40 - So to do so, what we need is to surround
71:44 - these two operations with parentheses.
71:47 - So it's like the order of the operations here is important.
71:51 - Let's first perform this thing.
71:53 - It's either type one dragon or type two dragon
71:56 - and we want it to be generation six or four.
72:02 - I don't know if this syntax works.
72:03 - There we go, it worked.
72:05 - And now we can see that it's dragon in type one,
72:09 - dragon in type two and the generation is only five and six.
72:14 - So this is the expression that we want to get.
72:18 - Now, the only thing we need to do is sort values
72:23 - by total ascending false
72:28 - and we get that these Pokemon is the most powerful one,
72:33 - type one dragon, type two electric, that doesn't matter
72:37 - and it's generation five.
72:39 - So let's try the answer right there and it works.
72:47 - Okay, moving forward and this is important.
72:50 - I don't think we have another activity in this project
72:53 - that has like the precedence, the importance of the precedence
72:56 - or the order of operators, but it's an important concept.
73:00 - So just remember parentheses don't hurt.
73:04 - It's cheap to put parentheses.
73:06 - So if you have these complex expressions,
73:08 - just make sure you're surrounding the ones
73:11 - that you want to run first with parentheses.
73:13 - You can indent, you can do all sorts of things
73:16 - as long as you know, it makes it look better for you,
73:19 - could have you something like that.
73:21 - So is this thing and this thing, you know,
73:24 - actually, parentheses are not necessary here.
73:26 - Anyway, just keep in mind
73:28 - the precedence of the operations is important.
73:31 - All right, select the most powerful fire type Pokemons.
73:35 - So here we're going to say, select all the Pokemons
73:40 - that have an attack value above 100, above,
73:44 - and type one equals to fire.
73:47 - And we're going to do df.lock.
73:49 - We can actually do a query now.
73:52 - We can do, oh, by the way,
73:54 - we can solve this one with a query method first.
73:57 - So sorry, let's go back to the previous one.
73:59 - If you're passing and resuming, you're hating me at this moment.
74:03 - Basically, we're going to say, we need parentheses here.
74:07 - So type one equals dragon,
74:11 - or type two equals dragon.
74:19 - And, oh, we can't do the in here.
74:23 - We can, we can do the in.
74:25 - So we can do generation in five or six.
74:32 - And we get, oh, we have to sort the values.
74:39 - And we have the same result.
74:41 - Let me break this into multiple lines.
74:44 - It's difficult to read.
74:46 - But anyway, what you can see here
74:47 - is we are producing pretty much the same expression
74:50 - and the order of operations is important.
74:53 - Type one dragon or type two dragon, that's the first thing.
74:56 - And generation is in five or six.
75:01 - Let's see if it doesn't break when we got the wrong results.
75:07 - Here, when we remove the parentheses,
75:10 - you can see that our pokemons of generation three, one,
75:14 - so this is clearly not working,
75:17 - have to go back and put the parentheses for the quarter.
75:20 - So sorry, now let's move forward to the other one,
75:23 - which was select all the pokemons with attack greater than 100
75:26 - and type one equals fire, we're going to use a query,
75:30 - we're going to do attack is greater than 100 because it says above
75:35 - and type one equals fire.
75:41 - There we go.
75:42 - We're going to run that thing.
75:44 - And we're going to assign it to our variable.
75:49 - Visualize it.
75:50 - Let's see if it works.
75:54 - It worked.
75:55 - We're correct.
75:56 - Next one, select all water type flying type pokemons.
76:01 - So select all these documents that have type one for water
76:04 - and type two flying.
76:06 - We're going to do pretty much the same thing as here,
76:08 - we're going to do VF query,
76:12 - we're going to do type one water and type two flying.
76:22 - And let's see the data we get back,
76:26 - water flying for both types.
76:28 - And let's check the activity.
76:30 - There we go.
76:31 - And finally, well, not finally, there are two, three more,
76:35 - but select specific columns of legendary pokemons of type fire.
76:39 - Okay, so this is interesting.
76:41 - Pause now when I saw it by yourself,
76:43 - it says performance selection in your data frame of all
76:46 - legendary pokemons that are of generation one type one type that are
76:52 - of type one fire, sorry,
76:54 - but select only the columns name attack and generation.
76:57 - So we're going to do the F dot law,
77:01 - we're going to use and there's going to be a good reason
77:04 - that our DF at type one equals fire and DF at legendary.
77:19 - That's the first result.
77:20 - So type one fire and legendary,
77:23 - I switched the order here,
77:25 - but we don't want to get all the columns,
77:28 - we want to do just a selection,
77:30 - we say we only want the columns and here we're going to say
77:33 - name attack on generation.
77:39 - And let me break this, these two modes.
77:45 - So we get it.
77:46 - I would get the regular right DF dot lock accepts conditions
77:52 - for index columns.
77:55 - Right.
77:56 - So here we have and let's actually do more parentheses.
77:59 - We don't need them, but let's do more parentheses.
78:01 - It's more clear of what we're trying to do.
78:04 - We need more parentheses.
78:06 - There you go.
78:07 - So this is the condition and then it comes to columns
78:12 - and the final result that we have right here.
78:14 - So type on fire and legendary
78:16 - and the columns are name attack and generation.
78:18 - Let's give it a try.
78:20 - And that worked as expected as well.
78:25 - Select slow and fast pokemons.
78:27 - So this is getting interesting.
78:29 - Now we're going to see what this visualization shows us.
78:32 - So select slow and fast pokemons.
78:34 - We're going to get all the pokemons.
78:36 - Take a look at this region of Pokemon speed in histogram,
78:39 - including the notebook.
78:40 - The red lines separate the lowest bottom 5%
78:44 - and the fastest top 5% pokemons right here.
78:50 - So basically we create a histogram
78:53 - and then we plot two red lines in 0.05 and 0.95.
79:01 - So it's the 0.05 quartile 5% and top 95% percent yields.
79:10 - And what we want to do is basically select those pokemons
79:14 - that are either above this 95% or below the 5%.
79:20 - The two extremes of the distribution, let's say.
79:23 - So what we're going to do is df.log.
79:27 - And we have the values, by the way.
79:29 - We can actually take a look at them.
79:31 - We can do here.
79:33 - Let's actually do this thing.
79:35 - We're going to do bottom 5 is this thing.
79:40 - Top 5 is 95.
79:45 - There we go.
79:47 - And let's show both top 5.
79:53 - There we go.
79:54 - So we know that the cutoff for a very slow Pokemon is a value of 25.
80:00 - The cutoff to be considered a very fast Pokemon is 110.
80:04 - We're going to use first the dot-lock method.
80:06 - We're going to do df at speed is less than,
80:12 - because we want it to be select...
80:17 - Where are we?
80:20 - The slowest Pokemon and the fastest Pokemon is very slow
80:23 - with speed below the bottom 5 or very fast above top 95.
80:27 - So we want it to be this operation.
80:31 - Or, and here's another one, very fast.
80:35 - So it's going to be df at speed is going to be greater than top 5.
80:43 - Let's put this whole thing here.
80:47 - Slow fast Pokemon.
80:49 - There we go.
80:50 - This is our table.
80:51 - And let's try it out first to see if it works.
80:54 - There we go.
80:55 - It works.
80:56 - But there is another way, which is basically using the dot-query method.
81:00 - What we're going to do is df.query.
81:02 - And you know this already.
81:04 - Speed is going to be less than.
81:06 - And here, to reference an external variable, we've seen this already.
81:09 - We're going to use the add symbol.
81:13 - So on this thing, we don't need parentheses.
81:16 - Or speed is greater than top 5.
81:22 - And we need dt.
81:26 - There we go.
81:27 - And we have the same result.
81:28 - 60 arrows, 13 columns, the same result.
81:31 - You can trust me.
81:32 - But basically, the important point here is we are using an external variable
81:35 - and referencing it with the add symbol to reference something outside
81:40 - of this particular query.
81:41 - Speed references the column.
81:44 - The add this thing references an external variable we have defined before.
81:50 - All right.
81:51 - And I think we have the last one.
81:53 - And this is a very interesting one as well.
81:56 - It says take a look at the scatter plot correlating defense to attack.
82:02 - What's the name of the Pokemon indicated by the right arrow in the image below?
82:08 - So who's this guy right here?
82:10 - It's a Pokemon that has a strong defense and a strong attack.
82:17 - So what we can do is sort by both values.
82:20 - So we have like this case.
82:22 - First is legendary.
82:24 - And second, it has a very strong tab for attack and a very strong defense.
82:30 - So let's take a look.
82:31 - The first thing we're going to do is lock filter all the legendary Pokemans
82:37 - legendary and sort values.
82:41 - We're gonna sort by doing by defense and attack.
82:51 - There you go.
82:52 - By both those criteria.
82:54 - Or actually, we can stop it.
82:57 - Defense.
82:58 - So we take a look at it in a more vertical way.
83:01 - So we're gonna sort in this way and then in this way.
83:05 - And of course, we want to do ascending false.
83:11 - And here we have this Pokemon has an attack of 116.
83:18 - So it's above this line and a defense of 110.
83:23 - So it's kind of right here.
83:27 - In reality, we're looking for this Pokemon that it's very close to 150.
83:33 - Okay, so let's keep moving forward.
83:35 - We have these Pokemon that has an attack of 150.
83:39 - So again, right here it matches and a defense that is 140.
83:47 - So this one looks a lot better.
83:49 - Let's try it out and see if it works.
83:53 - We have our value.
83:55 - And there you go.
83:56 - All correct.
83:57 - All complete.
83:58 - But basically, what we're trying to do here is using this combination of visualizations
84:04 - with the analytical power.
84:07 - We're filtering, we're sorting, and we're putting everything together to answer the question.
84:12 - So this was the whole practice about filtering and sorting Pokemons.
84:17 - Very interesting one.
84:18 - Again, if you have a chance to try to solve it by yourself, or there are a few more projects
84:24 - related to filtering and sorting, all yours, let's keep solving more projects.
84:30 - In this project, we're going to be working with a pretty interesting problem,
84:35 - which is the birthday paradox.
84:38 - The birthday paradox comes actually from the birthday problem, which is a more general problem.
84:44 - That is basically answering the question.
84:47 - If you put n people in a room, what is the probability that two people share a birthday?
84:54 - So for example, I have 70 people in a room.
84:58 - What is the probability that two, any pair of two people within that room,
85:04 - within that room of 70 people share a birthday?
85:07 - And there is a formula to calculate that.
85:10 - The birthday paradox, what it tells you is that it's basically what is the number of people
85:17 - that I need to put in a room for that probability to exceed 50%
85:23 - and the counterintuitive fact that only 23 people are needed for that probability to be above 50%.
85:33 - So again, recap, only 23 people in a room are needed for the probability of two,
85:41 - of any of those people, any pair within that room to share a birthday.
85:47 - So only 23 people are needed for that probability to exceed 50%.
85:52 - And this is a pretty counterintuitive fact to be, at least to me.
85:57 - The first time I got asked this question, my reasoning was,
86:01 - well, what is the probability, sorry, what is the number of people that I need to be 100% sure
86:07 - that two people are going to share a birthday?
86:10 - And the answer is, of course, 366.
86:12 - There are 365 days in a year.
86:15 - So for me to be 100% sure probability equals one, that two people share a birthday,
86:21 - I need to put at least 366, that's going to be 100% sure.
86:25 - So when I got asked, well, now what is, how many people do you need for that probability to be 50%?
86:30 - My first reason, it was like, I don't know, 100, 150, half or 365.
86:36 - You know, it's like, and then when I got the answer and I got to calculate the answers,
86:41 - like, obviously, it's just, well, only 23 people are needed for that probability to be 50%.
86:47 - And we will actually understand why in a second.
86:50 - So basically, this project deals with the birthday paradox and us calculating the birthday problem,
86:56 - the probability of two people sharing a birthday in a group of n people.
87:05 - And then we're going to apply that to NBA teams.
87:10 - And this is going to be a pretty interesting thing because the teams we have here,
87:14 - we can actually run this thing.
87:17 - We can do tf.team.value count.
87:22 - So we're going to have teams that have 27 players, but then we have 24, 22.
87:27 - So we're going to see how many, like, if this probability stands, you know,
87:32 - if we're going to have here the probability of two people sharing a birthday in a team of 24 people,
87:39 - the probability is going to be greater than 50%.
87:41 - Are we going to find matches here or here or here, et cetera, right?
87:46 - So that's going to be the problem we're going to deal with.
87:48 - But before we jump to the data, we're going to start with calculating the probability
87:53 - and understanding the intuition behind this thing.
87:58 - The way we calculate this probability, and again, is this formula,
88:03 - is what is the probability of two people sharing a birthday in a group of n people?
88:12 - So we swap n here.
88:14 - We say we put 10 people in a room, 20 people in a room, 50 people in a room,
88:19 - and we get a probability back of two of them, at least two of them sharing a birthday.
88:27 - And the interesting part of this formula is right here is the combinations piece.
88:34 - And this is when this number, only 23, is needed to get 50%.
88:40 - It starts to make sense.
88:42 - Once you take a look at this combination formula here,
88:47 - and combinations, just a quick recap,
88:50 - is if you have A, B, C, D, E people,
88:55 - Rav, John, Mary, Susan, Violet, et cetera,
89:00 - the way you can combine them is basically A with B, A with C,
89:06 - A with D, A with E, B with C, B with D, B with E, C with D, C with E,
89:16 - and finally D with E.
89:18 - These are all the combinations you get.
89:20 - So pretty quickly, if you start thinking in pairs of people,
89:25 - this number grows pretty quickly.
89:28 - If I put just one more person here, let's say one more person joins the room,
89:33 - I start adding, I will add five more combinations,
89:37 - because it's F with A, B, C, D, and E.
89:41 - So it's got to be A and F.
89:45 - Now B and F, C and F, and D and F and E and F.
89:52 - So one more person, what did I do wrong here?
89:56 - One more person that I added to the room,
89:59 - and this number of combinations grows by the previous amount of people in the room.
90:05 - I add one more person, G, and I'm going to do G, F, E, D, C, B, A,
90:12 - where it's going to grow by six.
90:14 - I add one more person to grow by seven.
90:16 - It keeps growing and keeps growing and keeps growing.
90:18 - So that's why, at least to me, that was what made this problem click
90:24 - and understand that it's a very small number of people that we need,
90:29 - only 23, for the probability to exceed 50%.
90:35 - We can actually calculate the combinations piece.
90:39 - So let's get rid of this and buy F.
90:44 - So F is no longer invited to our party, so we have A, B, C, D.
90:51 - We can calculate the result of combinations of N taken by two,
90:56 - and this is a pretty simple formula.
91:00 - It's N factorial divided by K factorial times N minus K.
91:05 - N on K, in this case, is N people or N taken by K.
91:09 - In our case, it's going to be N taken by two.
91:12 - But we can very quickly hack this formula.
91:16 - It's going to be death. We call it NCRR of N taken by K.
91:23 - And the way it works is you can just do math.factorial of N divided.
91:30 - And if you let me, I'm going to do something just here, shortcuts.
91:36 - This is the beauty of Python.
91:38 - I can just assign a variable to a function.
91:41 - factorial of N divided factorial of K times factorial of N minus K.
91:51 - And I will return this whole thing.
91:54 - We have that the combinations of five people, NCR,
92:01 - of five people taken by two is 10.
92:06 - And we said if we add a sixth person, this thing is going to grow by five, right?
92:12 - So it should grow by five and have half now six people 15.
92:17 - If we add another person right here, this thing is going to grow by all these previous ones.
92:22 - So it's going to be by six more.
92:24 - So we're going to do if we have seven people, they should grow by six to be 21.
92:29 - There you go.
92:30 - So we're calculating this thing on the fly.
92:34 - That's the way it works.
92:35 - So now let's get to the activities.
92:37 - And this in this case, the the project is asking us to calculate the probability right when N is equal to 10.
92:49 - And we can actually take a look at there is a table here we can kind of cheat.
92:54 - That is the value, but we can calculate ourselves.
92:58 - And to do so, what I'm going to do is something like we have one minus 364 divided by 365.
93:09 - And here we're going to do we're going to use our formula or sorry,
93:13 - our function that we calculated before that is equal to 10 people taken by two.
93:19 - So and taken by two in this case, and it's going to be 10 10 taken by two.
93:26 - And we're going to use parentheses here just in case on our on our probability is zero point 11 614 in the table was point seven.
93:38 - I don't know how they computed what rounding they did, but it's pretty much the same value.
93:43 - Let's see if this is okay.
93:47 - It is okay.
93:51 - It's asked us for now equals to 15, but I'm going to go ahead.
93:56 - And it's asking us to implement the function.
93:59 - So given number of people calculate the functions, we can do it generically.
94:03 - And the way I'm going to do it, it's going to do return this thing.
94:07 - And I have to swap just one parameter that is here number of people.
94:12 - There we go. And now we're going to do birthday probability of 15.25 and put here 25 0.25.
94:25 - And it works as expected.
94:28 - And we can check now the birthday probability function of once.
94:36 - And it worked as well.
94:38 - So we're good to go.
94:41 - So again, this was quick recap that is for this person not to be extremely mathy,
94:46 - but it was just a quick recap of the birthday problem.
94:48 - And now we're going to apply that to our data set to see how many people within a team share a birthday, if any, right.
94:57 - It's going to be a pretty interesting one.
94:59 - So the first thing that we're asked to do, I'm going to delete this thing solution, is we need to extract.
95:10 - Let me show you again the data frame, we're going to extract the birthday birthday from the birth date function.
95:20 - So date is the actual date, day, month, year, we want to extract only the birthday, right.
95:27 - So for two people to share a birthday, they just need to be month day.
95:33 - It's like, hey, I, my birthday is September 29, yours is September 29, we share a birthday.
95:39 - But potential is going to be different years.
95:41 - That doesn't matter.
95:42 - So we need to extract here the month and the day from this data frame to do so.
95:48 - We can use the STRF time function string format time function.
95:54 - There's actually part of Python in this case is implemented for a tuple and it's implemented.
96:02 - Let me show you this here.
96:05 - It's implemented in the column birthday with a DT special accessor.
96:10 - Don't worry too much about it.
96:12 - The only thing we have to do just go ahead and Google the syntax to get this thing to get this format as expected.
96:20 - The way it works is this function is going to receive a formatting.
96:24 - So for example, we can get the year and the day right there, we're going to get they and year.
96:33 - And here we can put whatever we want.
96:35 - We can put an ad sign and hello world.
96:41 - And it's just going to be a formatting.
96:43 - It's going to format this string that's going to replace with special value, starting with the percentage symbols.
96:50 - And the question now is, how can we get only month and day?
96:58 - This is what it's asking us for birthday.
97:00 - We can actually go ahead and ask our assistant so we can say, how can we format the column birth date in the format month day?
97:17 - Do we have month day without space?
97:21 - And let's just go ahead and ask the question.
97:24 - I'm going to precise here.
97:28 - There you go.
97:30 - And we get pretty much this format.
97:33 - Pretty interesting because it's actually the correct answer.
97:41 - And let's try it out.
97:43 - Going to copy this thing.
97:44 - We're going to go.
97:47 - And this is the correct format so you can see.
97:50 - If you want, you can Google, we can say STR of time pandas.
97:59 - We're going to find this method.
98:01 - We can here find Python string format documentation.
98:05 - And here you can validate that percentage D is going to give you the day with leading zeros,
98:11 - which I can't find.
98:13 - But trust me, there you go.
98:14 - Day of the month.
98:16 - Zero padded.
98:17 - And then we're going to use percentage month, which is zero padded month.
98:22 - And then you can get year.
98:23 - You can get year with the four digits.
98:26 - You can get day of the week.
98:29 - You can get and PM four times.
98:32 - Again, you can do any formatting you want.
98:34 - In this case, we only need the month and day.
98:40 - So this is the format that we are looking for.
98:44 - Close this one, and we're going to assign this value here.
98:50 - And we're going to check to see if it works.
98:54 - There you go.
98:55 - It works.
98:56 - Now, we know already what we want to answer is how many or which players or how many players
99:06 - within a given team, this is important, share a birthday.
99:10 - So we need to separate all the players within a team.
99:14 - We need to find the ones that share the given birthday.
99:19 - We could potentially think about these problems in different resolutions,
99:25 - for example, finding duplicates within a team, doing group by operations.
99:31 - But those are all at least given the projects we're solving.
99:36 - Now, things are a little bit more advanced.
99:39 - And basically, what I want to communicate with this particular project
99:42 - is that sometimes we can find clever answers, clever solutions
99:47 - that will pretty much give us the same results.
99:50 - And the one we're going to do here is we're going to use combinations,
99:54 - community targets to pretty much solve the same problem.
99:59 - And here we have an example.
100:01 - We have the built in combinations formula, and we have something built in.
100:06 - We didn't have to actually write the one we did before,
100:08 - but just for the sake of the example, we did it.
100:12 - And here, the way to think about it, forget for a second about the NBA players,
100:17 - the way to find these people matching is first we're going to use this combination function.
100:23 - What it does, it puts, it aligns combinations within a given collection.
100:29 - So the same thing we did here with our people, so combinations right here,
100:36 - this thing, so remove F and G, there you go.
100:41 - It's going to put A with B, A with C, A with D, A with E, B with C, etc.
100:46 - It's doing the same thing here.
100:48 - John with Mary, John with Rob, Mary with Rob, we can add someone else,
100:52 - we can add Susan, we can add Violet, and then we're going to do,
101:00 - John, Mary, Rob, Susan, Violet, Mary, Rob, Susan, Violet, Rob, Susan, Violet, Susan, Violet,
101:07 - those are all the combinations.
101:09 - And then we have all the birthdays, so let's add two birthdays, let's add July 20th,
101:18 - and let's add September 20th, so we have another repetition.
101:28 - There you go, it's going to do March 5th, September, March,
101:32 - it's going to do the combinations again.
101:35 - And then what we can do is we can put together these things with a little bit of pen.
101:39 - We can create these separate data frames aligning these people and aligning these birthdays,
101:47 - and then combining them all together with this simple operation.
101:52 - Oh, and I just realized that I have overridden our original data frame,
101:56 - that doesn't matter, we'll have to rate it, re-rate it.
102:00 - And now we have all these combinations of people, their birthday,
102:07 - and now we can just ask which ones of these people are matching,
102:11 - and we have that one and six are matching, so one is John and Rob,
102:16 - because they are March 5th, both of them.
102:19 - And six is Mary and Violet, because they're both September 20th, right?
102:25 - And we can apply the same reasoning, the same solution for our NBA data.
102:33 - Here what we're doing is we're not doing any group by operations,
102:36 - we're not doing any algorithmic nested for loops that could potentially work.
102:42 - What we're doing is we're being very smart and using combinations to reshape our data.
102:49 - We're going from, let me do a little bit of a drawing here if you allow me,
102:56 - we go from a small data frame with one, two, three, four, five people,
103:04 - we're reshaping it, we're creating these long formats with all the different combinations,
103:11 - and now we don't need to algorithmically iterate this thing over and over and over again,
103:17 - we can just answer data by finding chunks here.
103:20 - How many, which combinations here are true?
103:25 - In this case, it's one, no, I'm not good drawing, one and six.
103:31 - What I'm saying again, and we're going to move forward in just one second,
103:34 - is sometimes you need to work smart, you need to understand your data, reshape it,
103:40 - be creative in the way you work with your data to resolve the problem,
103:45 - and there's going to be a lot more scalable than think it algorithmically.
103:50 - Because trust me, when you start working with big pieces of data,
103:54 - these solutions that are more declarative are going to be more scalable than algorithmically.
103:59 - We cannot parallelize an algorithm, we could potentially break this thing.
104:04 - Imagine you're working with millions of records,
104:07 - you can put this thing into different servers and check it in parallel,
104:11 - that could be completely possible.
104:13 - But anyway, I'm getting ahead of myself,
104:16 - and we're going to work now by solving the activities
104:20 - that we are asked in this particular project.
104:23 - So as I told you, I am stepping over this data frame,
104:27 - I'm going to reiterate it again.
104:29 - Where is our data frame?
104:31 - Right here, and we're going to recreate our birth date column.
104:38 - There you go.
104:39 - We're going to go straight to the activities.
104:42 - How many pairs of players share a birthday for the Atlanta Hawks?
104:49 - And again, we want to use the same solution as before.
104:53 - To do so, the first thing we have to do is to only get the players from the Atlanta Hawks.
105:02 - Because we don't want to compare every player with every player,
105:07 - it's going to be like a huge number, right?
105:09 - So we want to get, we actually have the number of players in the Atlanta Hawks going to be,
105:17 - let's put it in a variable, it's going to be df.lock, df.team equals,
105:28 - let me copy directly from here.
105:35 - And that's, we have teamsdf.shape.
105:41 - We have 22 players.
105:43 - So now, what we want to do is pretty much the same thing we did before.
105:48 - I'm going to do, I'm going to copy this thing.
105:51 - I'm going to paste right here.
105:53 - I'm going to do, instead of combinations of names with a variable we defined,
105:57 - what I can do is just do teamdfs at player.
106:08 - Here I'm going to put player 1 and player 2.
106:15 - There we go.
106:17 - And I have the correct results.
106:20 - One interesting comment here, completely on the side.
106:25 - We were QAing this project with someone that resolves the project
106:30 - and make sure that the quality is good, there are no errors.
106:33 - And this person was finding an error and saying, I have too many names, right?
106:40 - And I don't know what's going on.
106:42 - And it was a very imperceptible problem that the person was using df instead of teamdf.
106:49 - And he said, is this possible? I have 150,000 rows.
106:55 - And this is an interesting piece because you have to kind of understand
107:02 - the big range of data you're working with.
107:06 - We were working with the Thunder Hawks and we needed to create these combinations of players.
107:12 - We have 22 people in Thunder Hawks.
107:15 - How many combinations of pairs you can create.
107:18 - And this is, it's important to have a range, a quick ballpark estimation
107:24 - of what data you're working with and what should be the result.
107:28 - Because I honestly don't know if it's 231, but I do know that 100,000 is too much.
107:36 - It's definitely too much, way too much.
107:39 - So this hints is like understanding the data you're working with,
107:43 - this kind of quickly gives you an understanding that there is a mistake in something you did, right?
107:49 - So if you forgot you were filtering by the Atlanta Hawks
107:53 - and you wanted to create pairs of only these 22 players,
107:56 - and instead you created combinations of 551 players, that number grew by a lot.
108:05 - We actually have our formula, NCR of 551 taken by two is the same number,
108:13 - 151,525, and NCR of 22 players, 22 players in the Atlanta Hawks, give us 231 rows.
108:26 - So this makes a little bit more sense.
108:28 - So anyway, just a comment on the side,
108:30 - that meant is like, again, having an understanding data we're working with.
108:35 - So let's go back, rerun this thing, the names DF, we have the 231 rows.
108:42 - I'm going to do the same thing for the birthday, birthday and do birthday here.
108:50 - And this is going to be birthday.
108:53 - And here we're going to do name it birthday one and birthday two.
108:59 - And finally, we're going to put, by the way, they are aligned to 131, 231.
109:04 - We're going to combine them with the same concat operation we did before.
109:10 - I don't want to overstep the name.
109:12 - So I'm going to do check DF and the names and birthday.
109:18 - And now let's take a look at our data frame.
109:22 - We have the combination of the player and the birthday of each one of the players.
109:27 - Now we can ask the question,
109:30 - how many pairs of players share a birthday for the plan the hogs?
109:35 - And do is a birthday one is equals to birthday two.
109:41 - And we're gonna sum this whole thing.
109:44 - Seems like there are two players.
109:47 - And then what we're going to do is
109:52 - teamdf.lock this thing.
109:57 - No, check the.
110:00 - There you go.
110:02 - We have these two players.
110:04 - So teamdf.
110:07 - Let's see if all the variables are correct,
110:10 - because I might have done something wrong here.
110:13 - Quick recheck.
110:15 - Teamdf is that.
110:19 - We have birthday.
110:24 - Check the F.
110:26 - And we have two players.
110:31 - These are two pairs.
110:35 - Let's go ahead and try the answer of two players there.
110:40 - Wrong answer.
110:41 - Try it again.
110:43 - Let's go ahead and recheck our thing.
110:46 - I want to make sure I use the rec team.
110:49 - And then we have the player and the.
110:54 - Oh.
110:58 - This is a very unlucky mistake.
111:02 - It's a very unlucky mistake for sure.
111:06 - What I'm checking right here is birthday.
111:14 - I'm using birthdays.
111:16 - And check the dates that we have in this particular point.
111:20 - This is just bot naming on my side.
111:23 - I used the old data frame that I used for the sample.
111:29 - And the dates are in this format.
111:31 - That is September 20th, whatever.
111:33 - And I just recreated this thing for the entire data frame.
111:38 - So my mistake, let's go ahead and delete birthday.
111:44 - And delete it.
111:46 - And we're going to use this variable name now.
111:53 - And try to recheck it.
111:57 - And it seems that we have three now.
112:01 - And effectively we do have three people.
112:04 - Let's try it out now and see if it works.
112:07 - Now it works.
112:09 - Again, the previous mistake was just using bad variable names.
112:13 - I should have used something like testing,
112:17 - a combinatorics birthday, or proof, whatever,
112:21 - instead of the real variable names.
112:24 - But we have just fixed it.
112:27 - How many pairs of players are birthday in the Cleveland Cavalier?
112:31 - So this is pretty much the same thing we did before.
112:35 - We're going to change the date.
112:40 - We have 22 people.
112:41 - It's going to be the same probability as in that now.
112:45 - We're going to do that now.
112:49 - And we have only one pair of players that share a birthday.
112:56 - And that's going to be June 26th.
112:59 - So we're going to just one pair.
113:02 - And that works.
113:04 - And finally, we got asked in the Dallas Mavericks
113:09 - who shares a birthday with JJ Boraya.
113:13 - What we're going to do is rerun our code.
113:18 - We have 24 players.
113:20 - What is the probability here?
113:21 - NCR of 24.
113:24 - NCR 24 taken by two.
113:28 - And we have 276 combinations.
113:31 - No, we actually want to do the birthday problem.
113:37 - There we have a 0.53 probability of two people sharing a birthday.
113:43 - Let's actually go ahead and do it.
113:47 - And we have one shared birthday.
113:52 - And it is JJ Boraya and Doron Williams on June 26th again.
114:01 - And that is the final result.
114:04 - So anyway, a few things we saw here.
114:06 - I think it's pretty interesting the way we have solved the project
114:10 - without using any algorithmic, imperative, and nested for loop solutions.
114:16 - We used a data-driven approach,
114:19 - thinking about how we can expand this data,
114:22 - kind of map-reduce sort of solution that I think scales pretty well.
114:29 - And also, I made a few mistakes that I think were interesting to see live.
114:36 - And the fact that we're combining these conceptual things,
114:41 - resolving these conceptual challenges, mixing it with real data.
114:45 - We validated that this birthday paradox,
114:48 - we have two or three teams, sorry,
114:51 - we found it for at least three teams right here,
114:56 - Atlanta Hawks, Cleveland Cavaliers, and Dallas Mavericks,
115:00 - that there were pairs of people, pairs of players, sharing a birthday.
115:04 - So that is pretty interesting to see something that is statistically proven,
115:09 - or the probability is high enough.
115:14 - Now we see how the resolution in the real world data also applies.
115:20 - So anyway, try to take a look at the project by yourself
115:23 - and try to resolve it by yourself,
115:25 - and let's keep exploring more problems together.
115:29 - For this project, we're going to be combining our data-cleaning abilities
115:33 - with our string handling abilities.
115:35 - And these two scales together are extremely powerful
115:39 - when it comes to the process of handling data that is coming from the real world.
115:46 - So, so far we've done a few projects that had a data was pretty much perfect,
115:51 - we didn't have to do much handling, munging of it,
115:55 - but that is not the real world.
115:57 - Usually when you're collecting data from different sources,
116:00 - you're pulling it from different APIs, databases,
116:03 - or it's even human generated,
116:05 - we're going to be dealing with a lot of strings.
116:08 - And as those are going to be different sources and humans make mistakes,
116:14 - we are going to have differences between these data points.
116:18 - And when strings are involved and humans are involved
116:21 - and multiple sources are involved,
116:23 - the result is pretty much a problem.
116:26 - We will always face a little bit of an issue in terms of the data we're working with.
116:31 - So it's very important to have these sharp skills of data-cleaning
116:35 - and string handling, that's what we're going to be practicing
116:38 - for this particular project.
116:40 - Let me tell you what we're going to be working with.
116:43 - We have two data sets that they're explained here,
116:46 - but I'm going to just go ahead and show you the first few rows of both of them here.
116:55 - There you go.
116:56 - And what you're going to find is that these two data frames or these data sets,
117:00 - they come from different sources,
117:02 - but they have pretty much the same information.
117:04 - That is company names.
117:07 - What changes is that the way these company names was inserted input is different.
117:17 - So the companies by themselves, like the strings by themselves,
117:21 - are going to have differences, but the companies are going to be the same.
117:24 - So in this case, we have, for example, from the first data frame,
117:28 - this company is pretty much the same thing as this company,
117:32 - but here it has a full name and here it has just a shorthand.
117:37 - So it's like saying Apple.
117:39 - Apple is not the real name.
117:41 - The real name is Apple Inc dot.
117:44 - That's the real string.
117:46 - As a human, it's pretty easy for me to understand that this company
117:50 - refers to this same company.
117:52 - It's just pretty basic.
117:54 - But the question is now, how can we make that programmatic?
117:58 - How can we build this sort of artificial intelligence
118:02 - to find the companies that are matching so we can match the strings
118:07 - and of course continue with our analysis from these two data sources
118:11 - that are coming from different sources?
118:13 - The answer is no artificial intelligence yet.
118:17 - We're going to use a pretty simple heuristic deterministic method,
118:23 - which is the Levenstein distance.
118:26 - It's a simple formula that basically will give you a number
118:30 - based on how different two strings are.
118:34 - And the good news is that this distance is calculated.
118:38 - This formula is already implemented for us in a package
118:42 - that is already installed in our lab that is called the FOSS.
118:45 - And the FOSS has a couple of very simple methods.
118:48 - We can take a look right here.
118:51 - Ratio and partial ratio that will give you kind of
118:55 - a similarity or a distance, if you want,
118:58 - between the two strings and coupons.
119:02 - In this case, I think it's easier to think about in terms of similarity.
119:06 - So these two strings are pretty similar.
119:08 - The only thing that changes is an exclamation mark.
119:12 - So the similarity is pretty high, 97.
119:15 - So we're going to be using this library to compute this distance.
119:19 - So let's move forward with the first couple of activities.
119:23 - The first thing that we have to understand is
119:26 - how are we going to match these companies?
119:30 - We could do something like a for loop nested.
119:34 - So let's say we have two companies,
119:38 - so A and B, three companies,
119:41 - and C, and we have A, A, Inc, and B, and Brothers, and C.
119:53 - And how can we match?
119:56 - Of course, we have more than those.
119:58 - We could actually take a look.
119:59 - We have shape of the F1.
120:02 - We have 266 for the first one and 368 for the second one.
120:08 - But the way we could do it is with kind of a nested for loop.
120:11 - We could do something like 4C1 in companies 1
120:19 - and 4C2 in companies 2.
120:23 - And we can do something like distance.
120:28 - Let's similarity is equal to, let's just use some quick,
120:34 - zuda code here of C1 and C2.
120:38 - If sim is greater than 90,
120:42 - and we can store these things,
120:45 - we're going to make something like companies, similar companies.
120:50 - We're going to do similar companies.append
120:56 - or we're going to put C1 and C2.
120:59 - But this algorithmic approach doesn't let us visualize
121:03 - the data and do a little bit of an analysis
121:06 - of how the data changed,
121:09 - how the data is represented under the hood.
121:13 - We're going to just do this hard cut in 90
121:16 - without the ability to see if maybe there was an 89 that was fairly good.
121:21 - And don't worry about the number itself,
121:24 - because in 1989, 1985,
121:28 - this algorithmic imperative approach
121:32 - is not extremely, it's not very analytical from some point of view.
121:38 - It's not easy to see why or how things are working behind the scenes.
121:44 - So an alternative way that we're proposing for this particular project
121:48 - is to create combinations of the columns
121:52 - and pretty much do the same process,
121:55 - match every company with every company,
121:58 - A with A, Inc, B and Bros and C, B with A, Inc, B and Bros and C,
122:03 - C with A, Inc, B and Bros and C,
122:06 - match every company with every company.
122:10 - And to do that, there is a very simple method
122:14 - which is the eatertools.product method.
122:17 - So we have imported the eatertools method
122:20 - and we're going to do here, let me remove this thing.
122:24 - And we're going to do companies 1 and companies 2.
122:31 - These are plurals.
122:33 - I'm going to do eatertools.products of C1, CS1 and CS2.
122:43 - And we need to wrap this thing in a list to visualize it.
122:46 - There you go.
122:47 - And we have pretty much the combinations of everything with everything,
122:52 - which is again what we were wanting to do.
122:55 - So now what we can do is we can just pretty much do 4,
122:59 - let's say we use an imperative approach again,
123:02 - 4C1C2 in this thing, right?
123:07 - And now we can say pretty much the same thing we were doing before.
123:11 - We can compute the similarity of these two companies.
123:17 - But the result is we went from a nested computational intensive 4 look
123:22 - to something that is a declarative, expressive, data-driven approach.
123:29 - In this case, we're generating the data
123:31 - and now we can do some different things.
123:33 - If we think about this thing in a data frame,
123:36 - we could potentially add a third column that is the similarity.
123:40 - So now we're going to have A, A, Inc. and the similarity column.
123:44 - And now we can start doing some analysis.
123:46 - We can filter all the values that have greater similarity.
123:50 - We can do some plotting for some of the companies
123:54 - that have some certain similarity.
123:56 - We can visualize, we can explore,
123:58 - we can analyze the data in a more declarative, analytical way
124:02 - than just doing a simple, not simple,
124:05 - but just a more rudimentary, naive iteration or imperative algorithm.
124:12 - So let's move forward, let's get rid of all these things
124:16 - and we're going to start approaching the first activity,
124:20 - which is basically asking us to build that data frame,
124:23 - build this data frame that contains all the companies from CSV1
124:31 - and the product of CSV2
124:34 - and also compute the ratio for all of them.
124:37 - So we have to put these two things together.
124:41 - The first thing we're going to do is we are going to do DF at,
124:49 - we're not asked for the ratio right here.
124:51 - This screenshot is incorrect.
124:54 - We're just going to compute,
124:56 - we're going to just compute the product and create the large CSV.
125:00 - So what we're going to be doing here is we're going to do DF1 at client,
125:07 - dot values, that's going to be our first list.
125:11 - So remember, we have either tools dot products.
125:14 - Here's the syntax, collection one, collection two.
125:17 - So we're going to pass, for collection one,
125:20 - we're going to pass the row for DF1
125:24 - and for collection two, DF2,
125:27 - we're going to pass then its firm name dot values.
125:34 - And we can pass this whole thing to a data frame,
125:38 - PD dot data frame.
125:40 - This whole thing, going to break it into a different row
125:46 - and we can say column names, columns,
125:50 - it's going to be CSV1 and CSV2.
125:56 - And I have a non-matching parentheses
126:02 - because I need to close that one.
126:06 - And we have an error with columns.
126:09 - No, firm name values.
126:11 - Name, there we go.
126:14 - Sorry, we have a few mistakes.
126:16 - This is pretty much the regular process of data analysis
126:20 - or data processing.
126:23 - And now what we see is we have created this huge,
126:26 - let's actually take a look, the F shape,
126:30 - this huge data frame with the same expected rows
126:35 - as the one we have right here, 97,000 rows,
126:39 - which is going to be the result of the product of the F1 shape
126:44 - and the F2 shape.
126:46 - So let's give it a try and see if it passes.
126:51 - There you go. It worked.
126:53 - So far, so good.
126:54 - We have our product of different company names
126:58 - so we can do a little bit of matching.
127:01 - Now, we are going to apply the range,
127:06 - the Levenstein distance, right,
127:08 - to compute the similarity between the companies.
127:12 - Of course, the similarity between these two is going to be a lot.
127:17 - The similarity between these two is going to be 100.
127:20 - I mean, sorry, the similarity here is going to be pretty low.
127:23 - The distance is going to be pretty high.
127:25 - The similarity is going to be pretty low.
127:27 - The similarity in these two companies,
127:30 - Adobe for both of them, is going to be pretty good.
127:33 - So we're going to be using this library,
127:36 - fuzz.partialratio, partial ratio
127:39 - because the companies have white spaces.
127:43 - So it's going to pretty much compute the words in different orders
127:48 - and this might be helpful.
127:51 - All right, so what we're going to do here
127:54 - is we're going to compute the ratio score
127:57 - and we're going to swap to the activity first.
127:59 - This is the second activity.
128:00 - That is asking us to compute the ratio score
128:04 - we have right there.
128:07 - We have the ratio score here of these two companies.
128:12 - And how can we do that?
128:15 - Well, it's pretty simple as we already have the values.
128:18 - So we have df at, we can just do values here.
128:24 - Values.
128:26 - And we can do something like, let's say,
128:30 - score equals fuzz.partialratio
128:37 - of C1 and C2 for C1, C2 in df.values.
128:45 - It's going to take a little bit of a moment.
128:48 - There you go.
128:49 - We can get the first 10 scores
128:52 - and we can now basically apply that to ratios score
128:57 - and take a look at the different ratios.
129:00 - And now we have that Adobe Systems
129:03 - obviously has a 100% similarity
129:07 - while something like Adobe with Advanced Micro Devices Inc
129:12 - has a lower similarity.
129:14 - The only thing similar is probably the Inc
129:17 - and the individual characters.
129:20 - All right, so, so far so good.
129:22 - The first part of this process is understanding
129:25 - how we created a declarative, descriptive approach
129:30 - by transforming our data
129:32 - and working with a different foundation.
129:34 - It's like we move the floor.
129:36 - It's like we started with these two different data frames
129:38 - and now we have just a single one
129:40 - that has this very useful column with the combined ratio
129:44 - of the similarities of each company.
129:47 - So now let's move forward with a few more activities
129:50 - and this is pretty much the whole data analysis process.
129:53 - I'm going to create a division here
129:55 - and we can get started.
129:58 - How many rows have a ratio score of 90 or more?
130:03 - And there's going to be df.log, df at ratio score greater or equals to 90.
130:11 - And let's take a look at that.
130:14 - I made a mistake.
130:17 - There you go.
130:18 - And we can now check how many we have
130:24 - and we have 106 companies.
130:29 - There you go.
130:30 - What is the corresponding company in CSV 2 to AECom in CSV 1?
130:39 - And this is the one we pretty much saw here at the beginning.
130:44 - This one right here.
130:45 - But let's go ahead and give it a try.
130:49 - There you go.
130:50 - So what we're going to do is we're going to find,
130:53 - we're going to do df.log
130:57 - or let's actually use queries.
130:59 - We change things a bit.
131:02 - I'm going to do CSV 1 is equals to this one
131:07 - and ratio score is equals to what?
131:12 - Or greater than what?
131:14 - I'm going to say, let's say 80 to take a look.
131:17 - There you go.
131:18 - So these two have a 100 ratio score
131:21 - because again, we're using a partial ratio.
131:24 - If we were using a first ratio, only ratio,
131:30 - this is going to be lower.
131:34 - It's actually 30.
131:35 - And that's because there is, in reality,
131:39 - there is a lot of dispersion or distance between these two words.
131:43 - There is no much similarity.
131:45 - Again, to the human eye,
131:48 - there's a lot of similarity here because we can zoom in
131:51 - and just focus on these two words.
131:53 - But if you think about it, it's like this whole thing
131:56 - makes the second string completely different.
131:59 - And that's why we use the partial ratio,
132:03 - which now gives you a 100% score
132:06 - because it's doing the same thing we do with our eyes,
132:09 - which is basically focusing attention in different words
132:13 - and give you the combination of individual words.
132:16 - So anyway, let's try it out.
132:19 - This should work as expected.
132:22 - And basically here, we are basically trying to understand
132:29 - what's going to be the cut-off value that is going to make us decide
132:35 - if a company, programmatically speaking, in an automated way,
132:39 - if a company name matches another company name,
132:43 - it's like, where's the cut-off value?
132:46 - So CSV1 company, the fifth activity, is Starbucks.
132:52 - What's the corresponding company in CSV2?
132:56 - We're going to do the same thing.
132:58 - And let's keep the ratio equal to 80.
133:01 - And we have that it's Starbucks Corporation.
133:05 - And let's enter it right here. It works.
133:09 - But again, the ratio score was 100.
133:12 - So by doing some analysis, we can start understanding
133:16 - how these different ratios are going to be distributed,
133:23 - something that I'm going to do at the end just as some other activities.
133:29 - So activity number six, is there a matching company
133:32 - in Pinnacle West Capital Corporation?
133:36 - So let's copy this thing once again and put that.
133:41 - And there aren't, like, definitely these two are not related.
133:47 - But what we see right here, just because I randomly choose
133:53 - to use 80 as the ratio score to do the cut-off,
133:58 - it's like there are two companies that have nothing to do
134:02 - with Pinnacle West Capital Corporation, but they have a ratio score of 83.
134:07 - And the answer is that because they have the corporation word.
134:12 - So we have to be very careful.
134:14 - So I'm going to say here, no. Let's see what's the answer.
134:17 - That works.
134:19 - And let's move forward. Seven activities.
134:22 - How many matching companies are there for a county of LA, blah, blah, blah?
134:28 - And now we're going to put this thing.
134:30 - And we're going to keep the ratio equal to 80.
134:33 - And take a look and keep understanding what we have.
134:38 - So there is a very clear difference here.
134:41 - We have two companies that have a value of 82
134:45 - and two companies that have 100 and 195, so above 90.
134:50 - So I'll be tempted to say two here.
134:53 - There are two companies that match the name for a county of Los Angeles, blah, blah, blah.
134:59 - We should take a look at the full names.
135:02 - So we can do that with PD options, options.
135:10 - Maybe I can ask our AI assistants if I don't remember this display.
135:16 - Max, max, max call with none.
135:23 - There you go. That was one.
135:26 - If you ever have the dub, you can just ask the assistants.
135:30 - Go for it. Don't worry in Googling or asking the AI assistants
135:35 - because that's pretty useful.
135:38 - And here now we can take a look at them and we say
135:43 - county of Los Angeles, the first compensation program,
135:46 - county of Los Angeles, the first compensation program.
135:52 - And then we have city of Los Angeles.
135:55 - So I'll potentially say how many companies seem to be in CSV.
136:00 - And we're going to say two. There you go.
136:03 - They seem to be the same company.
136:06 - Or they're not companies, entities to put it away.
136:10 - So finally, a activity.
136:12 - Is there a matching company for the Queen's Health Systems?
136:16 - And what we can do here is run pretty much the same operation.
136:22 - And we find the Queen's Health System just with the apostrophe and the S.
136:30 - So is there a matching? We're going to say yes.
136:35 - And by doing this analysis, and we have I think we're missing one activity.
136:45 - I think I have completed. Oh, let's check this activity.
136:49 - There you go. We have no more activities.
136:51 - To complete all the project passed.
136:53 - But by performing this analysis, so first we did a little bit of data wrangling.
136:58 - We did a little bit of managing to get to the ratio score.
137:03 - And now we're kind of close to start generating the final CSV.
137:11 - If you want the final representation of what would be the matching companies.
137:16 - And here we don't have an activity in this particular one on purpose.
137:20 - Because there is still a data cleaning process that it's kind of annoying.
137:25 - It could take a little bit of time.
137:27 - But we can start taking a look at, we're going to say, for example,
137:31 - df.log df at ratios score greater than 90.
137:36 - And we can take a look at how many companies are matching that query.
137:45 - We can go one step further.
137:47 - And when you're doing data cleaning, something very useful to do, at least to me,
137:52 - is to start visualizing your data.
137:54 - So I'm going to do ratios score.
137:56 - And here I'm going to plot kind hissed.
138:04 - I'm going to see that if a ratio surpasses 90,
138:11 - most of the samples are going to be between 98, 9, and 100.
138:17 - So it'll be interesting to see what companies we have here.
138:22 - Let's actually, we can actually take a look also at a box plot.
138:28 - So I'm going to do box.
138:32 - And we have pretty much the same results.
138:35 - Like everything is concentrated in 100.
138:38 - And then we have a few samples in 96, 95, 93.
138:43 - So let's actually take a look at those.
138:45 - And we're going to say, df.query, let's do query now,
138:49 - where ratio, ratio score is greater than 90.
138:55 - And is less than 97, let's say.
139:05 - And now we can take a look at what's going on in here.
139:10 - And this is, again, this is the data analysis process.
139:13 - So in this case, we have one that seems to be very compelling.
139:17 - This one is pretty much the same thing.
139:19 - Idaho Power Co is the same as Idaho Power Company,
139:26 - jacking the box in and jacking the box in with 95.
139:30 - Let's actually sort values by ratio score.
139:36 - And we're going to start with the ones are more likely.
139:41 - So the Queen's Health System, pretty much the same thing.
139:44 - Jack in the Box, pretty much the same thing.
139:47 - County of Los Angeles and Seattle, whatever we did before.
139:51 - Sacramento City, Sacramento County.
139:54 - Of course, we have to understand if the city and the county for us
139:57 - represent the same entity or not.
139:59 - But nevertheless, Idaho Power Company is the same.
140:03 - Safeway Inc is the same.
140:06 - These two are probably the same.
140:09 - But now we're getting into a little bit of even with this one,
140:13 - we're getting into terrain that it's a little bit less clear what's going on here.
140:19 - So I'm not so sure.
140:21 - And this is because I don't know the business we're running.
140:24 - If this company or institution is the same as this one right here,
140:30 - potentially, right?
140:31 - But this is where you have to start to ask.
140:34 - So in this case, we have Contra Costa County and Sonoma County.
140:41 - And these are different.
140:43 - Again, I don't know the business.
140:45 - But I'll bet that these two companies are not the same.
140:49 - The same thing with again, Contra Costa and Marin County.
140:53 - So I bet that these two are definitely not the same.
140:57 - While there is a little bit of a mixed ground between, let's say,
141:02 - this one and this two in terms of if city and county and city and county
141:07 - are the same institutions, and then there is no doubt in the last two.
141:12 - So basically, this illustrates the real process of data cleaning,
141:17 - which is, first of all, if we would have done this process before,
141:23 - it was a nested for loop that I deleted.
141:26 - Remember nested for loop for company one in companies one,
141:31 - for company two in company when we do it manually,
141:35 - it's very hard to visualize this sort of relationships.
141:40 - So what we did right here was by first reshaping our data
141:45 - and having a clear picture of all the data we had,
141:48 - we were able to create a more descriptive representation.
141:52 - We calculated this ratio score company, we started doing some analysis,
141:56 - we answered some basic questions like, can we find a company here, there?
142:00 - Can we find this cut of value?
142:02 - We know I just chose 80, but we could have used 75 and see how it went.
142:09 - And then we took a look at the distribution of the ones
142:14 - that seem to be more likely, and we found like this middle ground,
142:19 - that was something like, we probably need to go back
142:23 - to whoever is running the business or, you know, just Google it
142:27 - and start understanding the data that we're dealing with.
142:31 - Because data cleaning at the end of the day might be,
142:33 - you do need a ton of domain knowledge.
142:37 - I can't just clean data with my data cleaning techniques
142:41 - without understanding data that I'm cleaning.
142:43 - It might be a great data scientist,
142:45 - but if I'm cleaning biological data or data from a physics lab,
142:53 - I will have no idea what data I'm working with, right?
142:56 - So that's a very, very common case.
143:00 - You have, you know, you're working with high tech
143:03 - and you have measurements from instruments,
143:06 - and you have something like, I don't know, a column T,
143:09 - and you have a value that is 0.0091.
143:13 - And it's like, is this fine or not?
143:16 - And maybe the physics guy comes and says,
143:19 - hey, this is completely wrong.
143:21 - You're missing the columns.
143:23 - The T value should be in the orders of hundreds,
143:26 - not in the orders of, I don't know, very small, right?
143:31 - So I need to understand the data, but to understand the data,
143:35 - to understand the domain, to be able to ask questions,
143:38 - to be able to Google things, to be able to go to the archives
143:41 - of the company, I need to put that in a good representation
143:45 - that allows me to do that.
143:47 - And that's what we're doing with this representation
143:49 - that we have created.
143:51 - So anyway, I have talked a lot so far in these projects,
143:54 - because for data cleaning, this is the most important thing,
143:57 - is being able to reproduce your experiments,
144:00 - visualize and understand what's going on,
144:03 - take a look at the project, try to resolve by yourself,
144:07 - or keep working with other capstone projects we have for data cleaning.
144:11 - It's a very fun activity pretty much all the time.
144:15 - This project is focused on data cleaning
144:18 - and some data analysis after the data is cleaned.
144:22 - And it's a very interesting one, because the data that we're using,
144:26 - it comes from someone that is scraped, right?
144:30 - Just scraped the HTML out of the Google's Play Store, right?
144:35 - So as you might know, whenever you're scraping data,
144:39 - you should be worried of issues in the resulting data,
144:45 - because web pages are not extremely structured,
144:49 - they change a lot.
144:51 - So if you have a scraping job that takes time,
144:54 - because we have a lot of reviews here,
144:56 - we have like 10,000 apps that were scraped from the App Store,
145:00 - that's going to take time.
145:01 - It's not that you can just hit a button,
145:03 - it's going to complete in just a second.
145:05 - It might actually complete in a matter of weeks,
145:09 - because Google bans your IP, the one that it's scraping.
145:13 - Of course, I think this is even illegal, right?
145:15 - But someone has done it.
145:17 - And again, it's going to take time to scrape,
145:20 - and time equals that things might change,
145:24 - you might duplicate, you might scrape the same app two times,
145:28 - the results might not be ideal to put in a way.
145:33 - So the way we are going to go with this
145:39 - is first understanding the data we're dealing with.
145:41 - So that's pretty much the first step.
145:43 - We're going to do df.info.
145:45 - And we're going to kind of brace for impact here.
145:48 - We know there might be things going on wrong.
145:51 - So the first thing is we have 10,841 entries,
145:55 - the total end number in the index,
145:57 - and then we quickly see that rating has far less value.
146:02 - So there are no values here.
146:04 - Also, we see something like, for example, reviews right here,
146:08 - which should be numeric, and or rating.
146:11 - We see that rating is actually numeric,
146:13 - so this is a good thing.
146:14 - But there are none values.
146:16 - Then we see that something like reviews,
146:18 - in this case right here, that is not numeric.
146:21 - It's an object, it's a string.
146:22 - So what's going on in here,
146:24 - that's the question we're asking ourselves.
146:27 - So let's actually get started with activities,
146:30 - and it says which of the following column or columns
146:33 - have no values.
146:34 - We quickly saw that rating is one of those.
146:37 - We can use the missing NO library,
146:41 - this one right here, missing NO,
146:43 - just gives you a quick visualization.
146:46 - And as usual, I like to start my analysis
146:48 - with a quick visualization.
146:49 - When I'm working with something,
146:51 - trying to understand the data,
146:53 - a quick histogram boxplot,
146:56 - one of these missing values visualization is recommended.
147:00 - The second stage is doing an analytical review
147:04 - of what's going on, et cetera.
147:06 - So let's do a right here, missing NO.
147:09 - We have already installed the app for you,
147:14 - or the library, and it's already imported here at MSNO.
147:18 - We're going to do a bar matrix,
147:21 - is the most common one, like this one.
147:24 - I'm going to do a bar,
147:25 - and we're going to do the whole data frame.
147:27 - It's going to show us that very quickly that rating
147:31 - has a good chunk of missing values right there.
147:36 - What else?
147:37 - Well, there are a few here,
147:38 - but it's hard to see with the bar,
147:40 - and one here, 840, one missing value here,
147:44 - and this is hard to read because the bars don't help.
147:48 - So now we can switch to something analytical.
147:50 - And of course, we kind of saw that
147:52 - because we have 840, 843,
147:59 - which we know that the full index has 10, 841.
148:04 - But to do so with an analytical way,
148:06 - we can just do is and a.
148:08 - We can do no summon, and that's going to give us,
148:12 - there you go, really quickly,
148:14 - the apps that have the columns that have no values.
148:19 - And we can sort this, doing sort values, ascending, false.
148:27 - There you go.
148:28 - So we have here, we can start answering rating, of course,
148:32 - both versions type and content rating type
148:36 - and content rating.
148:39 - There you go.
148:40 - Both are now claimed.
148:45 - There you go.
148:46 - No values in all of them.
148:47 - So now, second activity, and this is, again, as usual,
148:52 - I encourage you to pause right now, try to solve it by yourself
148:55 - because it's an interesting one.
148:56 - So three-part activity.
148:58 - Remove the invalid values from rating, if any.
149:00 - Just set them as NANs.
149:03 - Okay, invalid values.
149:05 - And let's take a look at rating.
149:07 - We're going to do now, again, as usual,
149:09 - we can start with a quick visualization
149:11 - at rating.plots.kind histogram real quick.
149:19 - And it doesn't look so.
149:22 - So might be okay.
149:24 - But we already see that there are some that are above five,
149:28 - which is, of course, not a valid rating.
149:31 - And this is my usual comment.
149:33 - You have to understand the data.
149:35 - You have to understand the domain you're working with
149:37 - to do correct data science
149:40 - because we know that the rating of an app
149:42 - goes from zero to five, or actually from one to five.
149:46 - So if you have anything above five or below one,
149:49 - they'll be invalid, right?
149:51 - And it's a number, so the column is okay
149:55 - in terms of the type first check
149:58 - that, for example, we saw already that reviews wasn't.
150:01 - So reviews is an object.
150:03 - This is already, here, reviews.
150:05 - It seems to be numeric,
150:07 - but then when we check the analytical version with info,
150:10 - we quickly see that it's not parsed as a number.
150:13 - So now it's raising suspicious.
150:15 - We're going to take a look at that later.
150:18 - But here in rating, we understand our data,
150:20 - and we know that the top,
150:23 - the maximum number that a rating can be is five,
150:27 - and this goes above five, so that's clearly invalid.
150:30 - Let's turn this thing into a box plot.
150:34 - We're going to do, we're going to do avert false.
150:38 - And now we can clearly see that there are a bunch of samples
150:42 - that are completely invalid.
150:44 - Let's take it now to the analytical version.
150:46 - We're going to do rating.
150:48 - We're going to do describe.
150:51 - There we go.
150:52 - And we have maximum value,
150:56 - which is 19, definitely invalid.
151:00 - All right, let's check it out to say,
151:02 - df.log df at rating greater than five,
151:08 - and there are a bunch of apps here,
151:10 - and we're going to need to claim these apps,
151:12 - and the rules set them as NAN.
151:15 - That is it.
151:16 - So here we're going to do these apps at rating.
151:23 - We're going to do equals to np.NAN.
151:26 - That's it.
151:27 - But then it says fill the null values in rating.
151:30 - So the ones we have just done and the other one,
151:32 - because there were like a thousand apps without rating,
151:35 - using the mean.
151:37 - So basically what we're going to do here is,
151:40 - we're going to do df at rating.
151:44 - Rating dot mean, we're going to use this value.
151:48 - I want to say df at rating dot fill.
151:54 - I'm going to keep that. Rating dot fill NA
152:00 - with this value in place equals true.
152:06 - And now it's pretty much the same thing.
152:12 - And now it says we can't check that yet,
152:16 - because it says,
152:17 - clean any other non-numerical columns,
152:20 - but just dropping the values.
152:21 - And this is understandable
152:23 - because we don't have so many.
152:25 - So we have 10,000 apps in total,
152:28 - like 10,841 apps.
152:32 - But there are apps like occurrences,
152:34 - rows, symbols.
152:35 - But there are only a handful,
152:37 - like 13 apps that have either a missing version,
152:41 - a missing type, a content rating.
152:43 - So it's not that bad.
152:44 - We don't have so many missing apps.
152:46 - So we can just get rid of them.
152:47 - That's basically what this activity is saying.
152:50 - So we're going to say df dot drop NA in place true.
152:55 - That's it.
152:58 - And that works.
152:59 - All right.
153:00 - Moving on to the next one, reviews.
153:02 - We already talked about reviews.
153:04 - We saw that it was parsed.
153:06 - Let me take this right here.
153:09 - It was parsed as an object.
153:11 - Pandas is going to try to parse any column as a number.
153:14 - Okay, this is by definition.
153:16 - It's going to try to parse a column as a number.
153:18 - If it can't, because the column is not a number,
153:21 - they're string, they're violent characters,
153:23 - it will just default back to object.
153:25 - And that's exactly what happened here.
153:27 - But again, the question is like,
153:29 - where we take a look,
153:31 - df ads ratings, no reviews, dot head,
153:34 - and they look numbers as numbers,
153:37 - but it's an object.
153:38 - So let's check it out and see what happened.
153:40 - We can actually double check doing a two numeric.
153:45 - Two numeric.
153:46 - And we know this is going to fail
153:47 - because somehow, I mean,
153:49 - Pandas was not able to parse this as a number,
153:51 - so there is no way this is going to work.
153:53 - It didn't.
153:54 - Because basically, there are values here that are invalid.
153:57 - So somewhere in this list of 10,000 apps,
154:00 - there will be values that are not fully numeric.
154:05 - And let's explore for that.
154:06 - A good way to explore for that
154:09 - is I have my AI assistant here that I asked earlier.
154:13 - For example,
154:14 - what is the syntax of pd2 numeric
154:17 - when I was checking this project to resolve?
154:20 - And it's telling me that there is this method,
154:23 - which is, I can pass an optional attribute,
154:25 - which is errors equals course, right here.
154:28 - And that's going to, instead of raising errors
154:31 - with a, you know, loud, red message,
154:34 - it's going to turn the null values,
154:36 - the invalid values as NAMs.
154:39 - So basically, that means we can do that.
154:43 - I can create a new column, reviews numeric.
154:47 - That is a result of that.
154:51 - And now I can say df.lock
154:56 - show me the rows in which this column that I have just created is NAM.
155:04 - Because that means that wherever there is a non-value,
155:07 - no value, missing value in this new column,
155:11 - that is because there was a number that wasn't,
155:14 - that pandas couldn't parse.
155:17 - And when it couldn't parse it, it just assigned NAN.
155:21 - And that is basically what is happening right here.
155:26 - Reviews numeric is NAN, NAN, NAN.
155:30 - And we can take a look at the actual reviews
155:32 - and we see that there is this N value here symbolizing for millions.
155:36 - So two million, one million, six for five million.
155:39 - We want to turn this thing into numbers.
155:44 - To do so, what we can do is df at, let's say,
155:50 - df.lock df at reviews.
155:57 - I could have just done df.lock at 72.
156:02 - No, here, we can do it.
156:04 - I'm not going to do it, but I can just do 178.
156:08 - I can just do two million, one million at reviews.
156:17 - Of course, here, reviews.
156:20 - But of course, it's not very scalable.
156:23 - So I'm going to do something else.
156:25 - Just make it automatic to put it away.
156:28 - Automate it.
156:29 - It's going to be completely generic and this is what we're looking for.
156:32 - Basically, find me all the reviews that contains an M.
156:40 - So these are the invalid values.
156:44 - What are the reviews now?
156:49 - There we go.
156:50 - And now what we can do is.str.replace.
156:55 - We can do M with nothing.
156:58 - So it's going to remove the M.
157:00 - I'm doing this step-by-step, by the way.
157:02 - I could have just done it in just one line.
157:04 - But I'm showing you a step-by-step resolution.
157:06 - And basically, we can now turn this thing into numeric,
157:09 - p.2 numeric of this thing.
157:13 - There we go.
157:14 - But we saw there was two million.
157:16 - So we need to multiply back to one by one million.
157:22 - We have the value.
157:25 - But we want to assign this thing to the reviews column,
157:28 - which is a string type.
157:30 - So it's usually recommended to turn this whole thing back as type str.
157:37 - So we want to make it a string.
157:41 - Because now we can take these values, new reviews.
157:45 - New reviews.
157:47 - And there you go.
157:49 - We have to break into a new line.
157:52 - Break into a new line.
157:57 - There.
157:59 - These new reviews, did it work?
158:03 - Let me put it right here.
158:05 - New reviews.
158:08 - There.
158:09 - These reviews, basically we want to assign them back again
158:14 - to which one?
158:17 - This.
158:20 - No, this.
158:22 - I'm already making a mess of myself.
158:25 - These results.
158:26 - So basically when I get these things,
158:29 - I want to assign it the previous value.
158:32 - So we can do, do you want to do the whole thing?
158:34 - Let's do everything.
158:35 - Just one line, as I promised.
158:37 - We're going to do that.
158:39 - Let's see if it works.
158:41 - So now we can look again for this column, these apps.
158:50 - And let's take a look at the whole row.
158:53 - I can see now that the reviews have incorrectly cleaned.
158:57 - But so far this is just a string, right?
158:59 - We have not, we have just fixed the three occurrences
159:03 - which we could have fixed a thousand occurrences
159:06 - because again, this method is pretty generic.
159:08 - It works for pretty much anything.
159:11 - We are going to turn the whole thing now to a number.
159:14 - So we're going to do PDF at reviews.
159:17 - Let's check first to numeric.
159:22 - There you go.
159:23 - It worked so it didn't raise an error.
159:25 - That is good.
159:26 - We now can assign that back to reviews,
159:30 - uncheck our activity finally, finally, and it worked.
159:35 - Okay, moving forward to the next one.
159:37 - How many duplicated apps are there?
159:40 - And in this case, it's asking us for the total duplicated apps.
159:43 - Let me do a quick recap of the duplicated method.
159:46 - Undo duplicated, df.log, df at duplicated subsets app.
160:02 - Sort, sort values by app.
160:08 - And then there you go.
160:12 - We have all these apps.
160:14 - Oh, here is the occurrence that I'm looking for.
160:16 - So basically here eight ball pull.
160:20 - So what it shows by default, if you have,
160:25 - so if you have, for example, Twitter, Twitter,
160:29 - and you have Facebook, Facebook,
160:33 - what this method is going to show you is only this one is duplicated
160:37 - and only this one is duplicated.
160:41 - That happens because, I mean, this is the real one for pandas.
160:45 - The first occurrence is like the real one.
160:47 - The second one is a duplicated one.
160:49 - The same if you have multiple apps.
160:51 - So if you have six occurrences or five, whatever,
160:55 - one, two, three, four, five, there is one good and four are duplicated.
160:59 - That's basically what pandas does by default.
161:02 - In this case, activity is asking us for a different behavior.
161:07 - It's saying if there are two occurrence of Twitter,
161:09 - that should count as two.
161:11 - You want to mark like Twitter is here is two times duplicated.
161:16 - To do so, what we need to do is pass a parameter which is keep.
161:23 - Sorry, I already made a mess.
161:26 - Keep faults.
161:29 - And somehow, because that should go inside the parentheses.
161:37 - There you go.
161:38 - And now it seems that it's a little bit more interesting in this case
161:43 - because we have every occurrence of the given app.
161:48 - And there is also one more thing to comment here is that let's say you have this app
161:53 - and you have the number of reviews, which is 19 100 for one of them.
161:58 - And the other one is 19 100.
162:00 - There you go.
162:01 - So these two rows for pandas are completely duplicated.
162:06 - These two rows.
162:07 - But if you have something like, I don't know, 10,000, 891 and 11,000.
162:15 - If you have these two rows right there, if you just do the F dot duplicated,
162:22 - let's do keep false some by pandas by default is going to tell us there are 18,
162:32 - 800 or 890 duplicated rows.
162:37 - But for this to be counted as duplicated row, the whole thing has to be the same.
162:42 - So in this example, this would be just two, these two are duplicated.
162:47 - But these two here are completely different rows to me.
162:50 - That's what pandas says because the values are different.
162:54 - For us to say we want to count duplicated apps, we need to do these subsets up.
163:00 - So let's do that.
163:02 - Copy this thing.
163:04 - Now we're going to do there.
163:08 - And now we can count 19 hundred and 79 apps because again, there are some rows are completely the same.
163:17 - There are some rows that are different, at least in some other column.
163:21 - But the app is the same.
163:22 - Let's actually try to visualize that.
163:25 - I can say and and it's my time a while.
163:32 - And it's not this thing.
163:34 - There you go.
163:35 - That works.
163:36 - So basically, these are the apps that are duplicated.
163:41 - But there is something different between these rows.
163:44 - So for example, between these two rows, there is something different.
163:48 - And it's here the reviews.
163:49 - This one has six, six, five, two, one, six, six, six, two, four, six.
163:54 - So this one has more, more reviews on the second one.
164:00 - And again, remember where the date is coming from.
164:03 - It's coming from the scraping process.
164:06 - So there is a chance that this app was scraped two times at two different points in time.
164:12 - And of course, we have a duplicated rows with different data.
164:16 - Anyway, let's answer the activity.
164:18 - How many duplicated apps, but counting them whole, do we have 1979?
164:24 - Let's check if that works.
164:26 - And it goes it.
164:30 - Next activity drop duplicated apps, keeping only the ones with the greatest number of reviews.
164:36 - And this is a very interesting one.
164:39 - You will sort the you will need to sort data frame up on reviews.
164:43 - And that will change the order of the data frame.
164:45 - That is fine.
164:46 - Because what is going to happen is and again, you have to understand.
164:50 - Let me copy this thing once again, but I'm going to sort now by up by reviews.
165:03 - This these lines are extremely short.
165:06 - There you go.
165:07 - So what happens here is that we have, again, this scraping process that potentially scraped two times,
165:16 - or more than two times, you have like two, four, six, seven times.
165:22 - And the reasoning, at least what I'm thinking is that the scraping process took like an entire week.
165:29 - And somehow, these persons scraped the same multiple times.
165:32 - But there is one important hint, at least to me,
165:35 - just that the number of reviews in an app is probably always going up, right?
165:40 - Like you will seldom delete reviews that you've done in an app.
165:45 - I don't know if that's even possible, potentially as possible.
165:48 - But basically, what I'm thinking here is that and basically what the activity is asking is that
165:53 - we want to do drop duplicates.
165:56 - And what is the freshest copy of this scraping process?
166:00 - What is the app that get gets closer to the real number today?
166:06 - And that is potentially the one with the greatest number of reviews, the one with the most reviews.
166:12 - Because again, the reasoning is that this was scraped on Monday, this is cream of Tuesday,
166:18 - Tuesday, Wednesday, Wednesday, Saturday, Sunday, right?
166:23 - Because all these apps have a different number of reviews.
166:27 - And this one, the one below, right at the bottom, because we sort by reviews,
166:33 - has potentially the greatest, it's potentially the greatest, freshest copy of the app from the scraping process, let's say.
166:42 - So what we have to do here is we can sort this data frame in this way.
166:48 - So we can do, let's keep a copy.
166:51 - This is a good technique.
166:53 - As we're changing the data frame, we're making several modifications.
166:57 - It's a good practice to keep a copy in memory, just in case you can always go back to this copy.
167:01 - The way I do it, it's just copy, I can put a number, like this is activity number five,
167:06 - DF copy five, or DF copy before removing, or something like that.
167:12 - And I usually just comment it out immediately.
167:14 - Because if I execute this cell again, nothing happens, I don't hurt my copy.
167:20 - So again, if we make a mistake, we can always roll back, we can do DF equals DF copy, copy five, dot copy,
167:30 - and we have back again the data in this previous stage.
167:35 - But anyway, let's, let's keep moving forward with activity.
167:39 - And what we want to do is we want to sort the values.
167:42 - So DF dot sort values, app reviews in place, true, and now we're ready to do DF dot drop duplicates,
167:50 - drop duplicates, there you go.
167:54 - We're ready to do this thing.
167:56 - But the interesting part is that we need to say subset is by app.
168:02 - And there is a parameter in drop duplicates, which is,
168:08 - I don't know why the documentation is not working.
168:12 - What's this syntax of DF dot drop duplicates?
168:22 - Let's quickly, I could also do something, I don't know if you know this trick,
168:27 - like to help this method right here, gives you the help that should work with the same as this one right here.
168:36 - But let's wait for the assistance.
168:39 - Try and trade off this.
168:41 - There you go.
168:42 - And there is this parameter, which is kip first.
168:45 - And what kip first does is basically, we, the way panda is gonna, gonna work is,
168:54 - it's gonna find the duplicates, right?
168:56 - In this case, eight ball pull is the app is gonna, again, one is going to be marked as good,
169:03 - everything else is duplicate, but the question is, which one is marked as good.
169:08 - In this case, as we sorted the data frame in this order that the one at the bottom is the one with the,
169:18 - with the graders number of reviews, we want to do a kip last, we want to remove all this
169:25 - and want to keep only this copy.
169:27 - Okay, that's again, the syntax, let me show that to you for a sec.
169:31 - Right here, kip last, that's what we want to do.
169:34 - So, let me close this.
169:38 - And we're going to do a drop duplicates, subsets, app, do kip last, do in place.
169:50 - True.
169:51 - And this is when we're changing the data frame again, and we can now check the activity.
169:58 - And it didn't work.
170:04 - It's strange, and potentially could go back again to the copy.
170:10 - And we can try once again.
170:13 - And reviews.
170:16 - Oh, potentially this activity is checking.
170:23 - That might be it.
170:24 - So let's give the copy what it is.
170:25 - Let me just try this out.
170:28 - TF ads, or use numeric, let me get rid of this column and check the activity once again.
170:33 - There you go.
170:34 - It worked my mistake was not supposed to create a new column, which I did.
170:41 - Okay, moving forward, format the category column is an interesting one, because let's
170:47 - take a look at category first counts, there we go.
170:55 - Category, or uppercase.
170:57 - Yes, they're all uppercase, we can see that and it says that white spaces are actually
171:02 - we're using underscore for that we can check that as well.
171:06 - We have to change that we have to make this thing remove the uppercase just use white
171:11 - spaces and capitalize it so autumn vehicles in this format becomes autumn vehicles in
171:16 - this format.
171:17 - So we're going to do this very quickly.
171:19 - The category is equals to the F at category dot str dot replace.
171:28 - We're going to replace here to underscore with a white space.
171:32 - That's the first replacement we're going to do.
171:35 - The second one is we're going to capitalize the whole thing.
171:41 - And now we're going to check we can check again this thing.
171:45 - And where's autumn vehicles, autumn vehicles, ideally, it's going to be the same, let's
171:50 - check it out.
171:52 - And it works as expected.
171:54 - Okay, activity number seven, clean and convert the installs column to numeric type, you get
172:03 - rid of this.
172:04 - There we go, clean and convert installs column to numeric and cleans.
172:09 - Some values that have a plus modifier to remove the string and honor the original number.
172:15 - Okay.
172:17 - So as usual, we can do something like I don't want to create a new column.
172:20 - So I'm going to do df dot lock, df, we're going to do remember the PD dot two numeric
172:27 - of df at installs, errors, queries, right, is an A. So basically, the apps that cannot
172:38 - the rows that cannot be parsed as a number, well, look, use that for a selection, we're
172:44 - going to do head real quick, and installs 510,000 with a comma separator, 1 million
172:55 - the plus with the comma separator.
172:56 - So basically, what we can do, and I think I could do this whole thing just one line
173:00 - would be df at my bot, my bot installs at str, the replace, we're going to replace the
173:11 - plus symbol with nothing, we're going to remove it.
173:14 - Just chain the whole thing, chain the command, and we're going to do comma with nothing,
173:19 - we're going to separate that.
173:20 - And when I do PD dot two, Merrick of this whole thing, there you go, seems it's not
173:27 - failing.
173:28 - So that means this is working.
173:30 - And finally, we're going to assign this thing to installs.
173:35 - Let me see if there is anything else.
173:37 - No, that is perfectly fine.
173:41 - There is no m bright, because I only I only remove the plus symbol and the comma and that
173:48 - just transformed to Merrick.
173:49 - So it seems like I'm faith I'm safe, sorry.
173:53 - And we're gonna know how sign this to installs and check the activity and it works.
174:02 - Clean and convert activity number eight, there, there you go, let me center it activity, activity
174:09 - number eight, clean and convert the size column to numeric representing bytes, size columns
174:16 - of type objects, some values are either m or k.
174:21 - So that's basically megabytes or kilobytes.
174:24 - Let's take a look at our data frame once again, there you go sign size, this is 3.6 megabytes
174:30 - 9.1 megabytes, 203 kilobytes, we want to turn this thing into a into a bytes, it seems right
174:44 - when I turn this thing into bytes, nine, eight, nine, eight, two will become this thing, which
174:52 - is the bytes thing, that is that is good.
174:56 - Some other rules are a remote supply the rules as previous tasks like the one in the plus.
175:02 - So if we do the F PD time, let's do the F dot lock the F I do PD to numeric.
175:14 - And I think there's a good time to keep a copy the F copy age, the F copy.
175:21 - There you go. Oh, my bad.
175:26 - Reloading, reloading, reloading, scanning, scanning, scanning, scanning.
175:37 - Where were you size, we didn't save the notebook, the F copy eight equals the F copy.
175:46 - And we're gonna comment that out.
175:49 - And as usual, we're going to do the F at size dot str dot replace m, m with nothing and
176:01 - str dot replace k with nothing.
176:05 - We don't want to do that right now, because we want to convert this thing to the real
176:09 - numbers.
176:10 - But for now, if I do PD to numeric of this thing, what happens?
176:16 - Simple to parse string var var var var is with device.
176:21 - So that is because some other values are completely invalid, there is no way to infer numeric type
176:29 - from them.
176:30 - So these are to replace with zero, okay, so we can start right there, we can say the F
176:37 - dot lock, the F at size equals or as with device that shape how many Oh, okay, a ton.
176:49 - So there are a ton of these sort of apps.
176:53 - And here want to do that these column size for that condition should be zero.
177:00 - So I'm gonna do just I'm gonna do zero as type str, as usual, remember, that this is
177:12 - not gonna work potentially PD.
177:19 - This might be fine.
177:20 - Let's let me try it out.
177:21 - If it doesn't work, we have the copy.
177:23 - As usual, we want to keep the values the string, the F at size is still an object, that's good.
177:38 - And now it seems that it's working.
177:41 - So there you go, it seems that it's working the F at the F dot head, we only have to replace
177:50 - our their df dot lock, the F at size dot str dot contains a comma.
178:01 - Cal must know continue No, I, we we made a mistake.
178:06 - Let me go back again.
178:09 - Copy.
178:11 - This is a good thing.
178:15 - We're gonna basically say PD, the series zero thoughts.
178:24 - And I we made a mistake again, the F copy, copy, there you go.
178:36 - Because we might not be able to assign it.
178:38 - So what I'm going to do is just more string handling, which is the usual way of doing
178:43 - this process, which is the F at size equals the F at size dot str dot replace, we're going
178:52 - to replace this whole thing, or as with size for a zero in this way, there we go.
179:00 - And there we go, it works.
179:02 - So the copy is saving us.
179:07 - So there is nothing with a comma that is good.
179:09 - And it seems like we can potentially convert if we fix the issue with the M on decay, let's
179:15 - go ahead and do it once again, we did it already, this process, basically, what we're going
179:19 - to do is the F dot lock, let's start with the kilobytes, the F at size dot str that
179:26 - contains the K, K lower, lower case, K.
179:35 - Really quickly, let me check that.
179:39 - And what we're going to do now is we are going to take these reviews, not size, that's what
179:49 - we're looking for.
179:51 - And basically, we want to convert this thing, we're gonna convert this thing dot str, dot
179:59 - replace the K with nothing, right?
180:07 - We want to go we want to now turn this thing into numeric PD dot to numeric, there you go.
180:20 - But these are kilobytes.
180:21 - And what the activity is asking us is for megabytes.
180:26 - So we're gonna do now, sorry, for bytes, these are kilobytes is asking us for bytes, we have
180:32 - to multiply this whole thing by 20, 10, 10, 24.
180:37 - And now these are kilobytes.
180:40 - So basically, what we are able to do now is as usual, we're gonna get this thing, those
180:49 - sizes, and we're gonna assign them to this thing right here.
180:53 - And this is going to be a long string.
180:58 - And the size of the lines is not great.
181:04 - There we go.
181:05 - So what we're doing is selecting all the rows that have a K, turning that K to a removing
181:15 - decay, turning into a number, multiplying it for 1024, because it's gonna be bytes and
181:21 - then at the end, as usual, we want to keep that as a string.
181:28 - There you go.
181:32 - We're gonna do the same thing now with megabytes, I'm just gonna replace m, m, m, m, m, m, and
181:44 - of course, here is 1024 times time 24 for megabytes, I'm gonna do that.
181:52 - Finally, PD to numeric of the effort size, it works, let me show you the size now.
182:02 - So this was three something maybe we have a copy here size is pure 3.6 m.
182:11 - So that is 3.6 m, this one right here was 3.6 m.
182:16 - So 3.6 times 1024 times 1024 is pretty much the same value we have right here.
182:25 - So it's good, but it's still an object, because we're using strings for everything, which
182:29 - is a good thing, keep strings, keep strings, keep working with strings until you're good.
182:34 - I'm sure you want to convert that into a number, we can do that right now.
182:40 - And let's check the activity, this was a long one, took a little bit of wrangling.
182:46 - There we go.
182:47 - But finally, we have successfully cleaned it.
182:50 - All right, moving forward, clean and convert the price column to numeric, clean and convert
182:58 - the price column to numeric.
183:00 - The value represents with a dollar symbol at price dot different zero, the f dot block,
183:14 - we're gonna check a few prices.
183:18 - That zero is a string, there you go 1.49 seems to be good.
183:24 - Let's check if there is one that has a comma or anything like that contains a comma, nothing.
183:31 - So I think we can just let's let's try it out.
183:35 - What if we do PD dots, I mean, precise here to numeric of this thing dot replace dollar
183:46 - symbol with nothing, just that's oh, no, there are value values, oh, because there is a bunch
183:53 - of price equals three symbol that is for price.
184:03 - All right, so we can do the effort price, we can actually check free.
184:12 - Yeah, there are a bunch that are free.
184:16 - So the effort price equals the effort price dot str to replace free with a string representing
184:25 - zero.
184:26 - And now it seems to be working.
184:30 - So let's do that.
184:32 - And now let's check the activity works.
184:37 - Finally pater free now you have clean the price column, let's create another one distribution
184:44 - to this distribution equals the college to contain free paid value spending on the apps
184:51 - price.
184:52 - So this is a good one, we could iterate over each price, right over the whole data frame
184:58 - of price, and just assign one thing or the other.
185:04 - We could use an apply function, we could do something like equals we could do the effort
185:11 - price dot apply a lambda with a price p and put we can free if p is greater than zero
185:26 - else paid to do that.
185:33 - And I could assign that to distribution as it is, let me check just as we're doing it.
185:39 - But there is no didn't work actually.
185:44 - That's a good thing.
185:46 - Because oh, paid is on the other way, it's paid.
185:54 - If pray other ways free, I just and that's why I don't like the apply one and potentially
186:00 - at this stage, if you're just still doing data cleaning, you might not know this method.
186:04 - But there is another simpler way that is just hacking pandas, which is all initiates.
186:10 - Let's actually see if this works first.
186:14 - Distribution or no, I want to use my method.
186:16 - So distribution is gonna be gonna say distributions, like everything's gonna be free, like let's
186:23 - start that way is free, we can check activity is not gonna work, not didn't work.
186:28 - But then we're gonna say is df dot lock, all the apps that have a price that is greater
186:33 - than zero, right that to price here, we're gonna get the the distribution column, I want
186:43 - to save that to paid that way.
186:48 - Now we can check activity.
186:50 - And that works.
186:51 - So the way and I gotta get rid of the apply for a sec, the way this method, which is again,
186:57 - the most convenient is just if you have a few rules, what you can do is just, you know,
187:04 - start with the one that is going to give you like 70% of the apps are free.
187:10 - And then just work your way, creating other conditions to replace the others.
187:14 - This is a very common technique.
187:16 - All right, now that we have finished with data cleaning, we can just do a quick analysis
187:21 - to answer all these questions.
187:23 - So what company has the most reviews, we can do something like df dots, sort values by
187:32 - reviews ascending falls head, by the way, as usual is a good time to stop the video,
187:41 - try to resolve it by yourself, I will just you know, move very quickly over all these
187:46 - activities because this is more analysis that we've done, I think it's still interesting.
187:51 - But if you can try to resolve by yourself first, and then take a look at the solution
187:55 - I've done.
187:56 - So the first thing is the app that has the most reviews, this works also as usual, df
188:02 - add reviews equals df add reviews.max.
188:10 - That is Facebook.
188:12 - Good, which is a category with the most uploaded apps.
188:20 - And this is df categories, dot value counts.
188:27 - Family is the category it seems with the most there you go ups to which category belongs
188:37 - the most expensive app.
188:39 - So we can do df dots, sort values as usual, by price, ascending falls dot head, and I'm
188:54 - rich Trump edition lifestyle.
188:57 - What's the price $400 for an app?
189:00 - Okay, I had to that's and it works again.
189:06 - It's a live type application.
189:10 - What's the name of the most expensive game?
189:14 - What's the name of the most expensive game?
189:19 - Find the most expensive app in the game category and enter its name.
189:23 - So basically, we're going to do the same thing as here.
189:26 - But we're going to lock here, we're going to do, we're going to query where the category
189:34 - is game.
189:37 - And the game seems to be find the most expensive app in the game category.
189:43 - The world ends with you, it seems there you go, which is the most popular finance app.
189:55 - So basically, we need to first filter by finance.
189:59 - So category is going to be finance, and then it says, with has the most in installs.
190:06 - So we have to sort by installs.
190:11 - And that seems to be in finance, the most popular app, which is kind of obvious, I hadn't
190:16 - thought about that is Google Play, Google Pay, sorry, that makes total sense.
190:22 - And that activity also passes.
190:25 - What team game has the most reviews?
190:28 - So what app from the game category and catalog as teen in content rating.
190:34 - So df at content rating, the value counts.
190:42 - We haven't looked at all the content ratings yet, teen, okay, so when I find when I find
190:51 - the app from category equals game, it seems
191:03 - category game, and content rating equals teen, that's, and we're gonna find the one that
191:16 - has the greatest number of reviews or the maximum number of reviews as sort values by
191:23 - reviews ascending falls.
191:30 - First five asphalt eight airborne seems to me seems to be the most popular in terms of
191:36 - reviews of all the games are content rating team.
191:40 - Let's take a look.
191:42 - Yep, that works as expected.
191:46 - What paid game has the most reviews.
191:52 - So we have to find a game that let's say let's use our distribution column column that is
192:03 - here paid and has the most reviews and it's going to be the same thing.
192:11 - It's been paid and it's again has most reviews price equals greater than zero.
192:19 - By reviews ascending falls hitman sniper.
192:25 - No, because we probably need and price greater than zero.
192:35 - What paid up from the game category category game has the greatest number of reviews.
192:47 - What is cash of clans let's let me try this because I found an error.
192:58 - Yeah, so this activity should be what free game has the most reviews.
193:06 - So we have to fix that.
193:08 - Ideally, by the time you're watching this that has already been fixed.
193:13 - So let's keep moving forward.
193:15 - Finally, how many terabytes we can actually report an issue right here.
193:22 - For the previous one report an issue, the activity is asking for paid apps, but the
193:33 - solution is for free apps, submitting ads, just in case, finally, how many terabytes
193:46 - were transferred overall for the most popular lifestyle app.
193:52 - And this is a very interesting piece.
193:55 - This app produced the greatest amount of byte transfer enter the answering terabytes as
193:59 - a whole number running down the nearest integer example, if you find the total transferred
194:04 - to be 780 point just enter 780.
194:11 - So the app most popular is going to be df dot query, I'm going to say, as usual, category
194:19 - equals live style.
194:22 - Yes, no, what's the name, the live style, there you go.
194:32 - Sort values by sort values by by installs is the one that produced it.
194:43 - So this is the app that I was installed in the greatest amount of times, like most times.
194:49 - And we're going to do ascending falls, do I log zero, I'm going to show you that first.
194:56 - So Tinder was the app with the most installs, I do that I locked zero, so I get this first
195:02 - row, I'm going to show you up, these are up.
195:08 - And now we have to do up.
195:10 - So this app wants to install these many times.
195:13 - And the size is the size in bytes, right, so that's going to be up at installs times
195:20 - up at size, right.
195:25 - But this is in bytes, we have to divide until we reach terabytes is going to be kilobytes,
195:35 - megabytes, gigabytes, terabytes, there you go.
195:44 - So let me show you the previous one.
195:48 - These many bytes, these many terabytes transferred.
195:52 - And I think what do we have, we can we can actually do it in the following.
195:57 - So six, I think it's petabytes.
196:00 - So we can ask assistance just in between what follows after terabytes.
196:12 - So basically, this is the answer in terabytes, it says to just enter the whole number rounding
196:21 - down.
196:22 - So we're going to put just 6484.
196:27 - There we go.
196:31 - And this is still working, can see if we can answer real quick.
196:37 - I think it's petabytes that follows terabytes, but it's a cup broke.
196:44 - Anyway, the greatest the app that produced the biggest amount of data transferred in
196:53 - that case, was Tinder with 6000 terabytes, which I think is 6.3 petabytes, I think I'm
197:03 - not sure.
197:04 - Anyway, this is a great project, we did a lot remember, we started with the whole data
197:09 - craning process, which, as usual, data, we had a lot of detective work, we had to find
197:15 - out why some of these columns were incorrectly parses objects, so suspicious, we started
197:20 - removing things, turning to the numeric, as usual, keep trying to keep everything.
197:25 - I think there are two or three very important things I'm trying to transfer to you here.
197:31 - And the first one is that this detective work, you know, trying to turn things to numeric,
197:38 - and try to find out where the issues removing things, and doing this iterative work.
197:42 - The second one is if you're modifying data frame, always keeping copies, we were able
197:46 - to fix an issue by keeping copy.
197:50 - And then the third one is keeping everything as string until you're safe to turn it back
197:55 - into a number, the same thing is going to apply if you're turning something to a date.
197:59 - First, you know, keep working as string, string, strings until you're ready to turn it into
198:03 - a number.
198:04 - But anyway, I think this is very interesting process also the same the whole idea behind
198:10 - where data is coming from, it was scraped.
198:12 - So we were finding the duplicate data, we were assuming that the app with the most reviews
198:17 - was going to be the app with the freshest copy.
198:20 - So doing all these, you know, analysis based on our data is basically data science process.
198:25 - So if you are comfortable with this, congratulations, because you're you're pretty, pretty, pretty
198:30 - close in becoming a data scientist.
198:35 - Now for this project, we're going to combine our data wrangling data cleaning skills to
198:39 - finally perform some data analysis using group by operation.
198:44 - So it's a pretty interesting one, the data that we're working with the data we're going
198:48 - to be analyzing is information about Premier League matches, Premier League is a top tier
198:55 - top flight football soccer league in England, potentially in the world, and the data set
199:01 - we have has information about matches from multiple seasons starting 2006 2007 season.
199:09 - And it's a very, very interesting data sets because we have the teams played and the goals
199:15 - is scored and the final results.
199:18 - So anyway, we're gonna start one by one with activities as usual, I want you to just pause
199:25 - if you want to resolve them by yourself, pause, resume, pause, resume, as you see me perform
199:31 - the different activities, and you can borrow some ideas from my solution.
199:35 - So let's get started replace invalid values from the seasons column.
199:41 - And before we can replace invalid values, we have to identify invalid values to do so.
199:46 - We're gonna, we're gonna take a look at the seasons, we're gonna do here value counts.
199:52 - There you go, I see that there are 2007, 2008, 2008, 2009, 2009, 2009, 2009, 2009, 2010, etc.
200:02 - But then we have this question mark here.
200:03 - So this is one of one of the first examples of an invalid value in a column.
200:08 - In this case, it's a string column of here string column, and the invalid value comes
200:15 - because this is a question mark.
200:17 - And of course, it's not within the format of the season.
200:21 - There is no enforcing in these strings, they're just strings, but we can see very clearly
200:26 - that there is a clear pattern, a format that is an integer dash an integer.
200:31 - And of course, question mark doesn't match that.
200:33 - So we have to claim those values and replace them with the value unknown season to do that.
200:40 - What we're going to do is df.lock, pause now if you want, df at season equals question
200:49 - mark, the season value, there we go, all these values, we're going to replace them with unknown
200:58 - season.
200:59 - And now they should be removed.
201:04 - Let's check the activity to see if it works.
201:08 - It works so we can keep moving forward.
201:11 - Identify invalid values in goals scored.
201:14 - This is a pretty interesting one as well.
201:17 - Because it deals with a little bit of data cleaning.
201:20 - But conceptually speaking, the data cleaning process, like the decision tree that I'm running
201:28 - in my mind is different.
201:30 - Because to identify invalid values in goals, I'm going to take a look first, again, at
201:35 - the info method.
201:37 - And you're gonna see that both home goals and away goals are integer numbers.
201:41 - So that is that is correct.
201:43 - Those are supposed to be integers.
201:45 - So how could we have an invalid value here, it'll be different if, for example, we see
201:52 - an object here, because that means that pen has found something that cannot be parsed
201:57 - as an integer.
201:58 - So it turns it into a string, right?
202:03 - But in this case, they're all integers, and that's pretty much the valid.
202:09 - Now what we're gonna find is given that the we have identified the value type, which is
202:15 - an integer and the column itself is an integer.
202:19 - What is the next process?
202:20 - What is the same the next decision we have to make?
202:24 - Well, if the data in if the range of potential values is met, right, so there are a few other
202:32 - projects deal with some other things.
202:34 - But for example, we have rainfall, you know, that's something that can take a given value,
202:39 - we have, for example, power, electric power in a house, you know, the, the, the valid
202:45 - values are going to be between, I don't know, zero and 110 115.
202:50 - But there are valid values for everything.
202:53 - And we have a range now as a second step to define the validity of that column.
203:00 - So to do that, what we're going to do is just use a little bit of plotting to aid in the
203:04 - process of identifying the same value values, we're going to do the F at home, home goals,
203:11 - we're going to plot kind, first, we're going to do a histogram.
203:17 - And we can quickly see that there are some values that are invalid, because they are
203:22 - below zero and in a football match, the minimum value, the minimum goal score is zero.
203:28 - We don't see anything weird on the right hand side, we don't see any stream goal count,
203:35 - if we see something like for example, 20, 2530, that is a little bit more difficult
203:41 - because it's well, it's valid in terms of a range.
203:45 - But it's an outlier.
203:47 - So is there possibly a Premier League football match in which where 20 goals scored?
203:55 - I mean, it's possible, it's highly unlikely.
203:58 - And that's this the third step, and we have to start digging a little bit more understanding
204:02 - the value again, hopefully, or thankfully.
204:06 - In this case, that doesn't happen, I'm going to turn this into a box plots.
204:11 - So we can visualize it, I'm gonna swap swap it to be horizontal, I'm gonna do vert false,
204:18 - I go, and we can see pretty much the same thing.
204:22 - Most of the goals are going to be concentrated here.
204:24 - And we have a few samples below zero that are invalid, I'm going to add away goals
204:30 - now.
204:33 - To visualize away goals, and we can also see like this, the zero line, we can also see
204:39 - that there are a bunch of invalid values right here.
204:44 - Interestingly, the way goals are all shifted to the left, that means that home teams tend
204:51 - to score more goals, which makes sense if you watch football or soccer.
204:57 - So we have pretty much understood the invalid, like the validity of the column, we know it's
205:05 - an integer, we know that it has a range, because we know the sport.
205:10 - And we have identified that there are values that are outside of that range.
205:14 - So now we have to take a look at them.
205:17 - And here, what we're going to do is we're going to do that are less than zero.
205:24 - And we're gonna sum that.
205:29 - And we have 34 home goals that are invalid and 39 away goals are involved.
205:36 - Sometimes people have issues with this sort of thing that I did.
205:41 - If you want to think about in a different way, we can do something like df.lock.
205:46 - At home goals is less than zero.
205:55 - Or df at away goals is less than zero, we can take a look here at the different ones,
206:06 - you know, we can start finding how many we have, or actually, we could say something
206:11 - like it's easier if we do something like shape here, or some here, we have only 34.
206:20 - But as this is this, the result of this expression is a data frame, we can do pretty much everything
206:25 - all together.
206:27 - And now to answer home goals invalid 34 away 39.
206:31 - So that's going to be 34 home goals 39 away goals, and let's check the activity.
206:40 - And it works.
206:42 - Now, moving on with the third activity, it's pretty much the same thing we did before,
206:48 - we're gonna do df.lock df at home goals that are less than zero, we're gonna home goals,
206:58 - we're gonna that thing, we're gonna replace them all with zeros, I gotta do the same thing
207:04 - with away goals. And we're gonna check the activity.
207:13 - And it works, identifying cleaning valued results in the result column. And this is
207:19 - a very interesting one, because we can keep looking at the different data cleaning scenarios
207:26 - or techniques we have to approach.
207:30 - We had one that we had just simple strings, and we had to find a pattern, there is a pattern
207:36 - year dash year, this year is the year before in this year, right? So there is n dash n
207:44 - plus one, a four digit integer, there was a free form pattern here. And there was a
207:49 - pretty clear value was invalid was a question mark, we then jump to a integer, which was
207:57 - the correct value type, or the correct type of value for goals. But then we had a given
208:03 - range that was available was valid. And of course, there were values that were outside
208:09 - that range, we've made it invalid. Finally, we have the one that we're trying to deal
208:15 - with here, which is the result one. And then the result column is interesting, because
208:22 - what we're gonna find value counts. It took a little bit of time. The idea, oh, because
208:34 - I got auto completed. But the idea is that valid counts is, let's say a categorical variable,
208:41 - it's not let's say it's it's a categorical variable, the values that we can take in result
208:48 - are restricted, it's either h for home victory, a for an away victory and d for draw. And
208:56 - that's it. Anything outside of that range is considered invalid. And these are usually
209:03 - the simpler to put in a way values to not to claim but to identify at least, but we
209:11 - can quickly see if a value is outside of this subset of potential possible values. These
209:17 - are the only three possible values. That is different, again, from what we saw before
209:22 - with the seasons, because we have to apply a pattern here, this is just a free form string,
209:27 - there's a pattern underneath. So we can have any value, we can have, you know, 1950 1951,
209:35 - for example, something like that. So that's a little bit more difficult. But again, in
209:39 - this case, it's pretty obvious that everything that has a question mark is an invalid result.
209:45 - Now how can we clean that? Well, we already have the we can already calculate this result,
209:52 - the result column is a calculated column, because you can just get that by computing
209:59 - the result yourself, you know, one one is a draw. If the value is here, and the values
210:03 - here on the same, if there is a number and equal number of goals, that's a draw. If the
210:10 - home goals are greater than the way goals, that's a home victory. And if the way victory
210:16 - is greater than the home goals, that is going to be an away victory. So how can we fix that
210:24 - fairly easy, we can do the F dot lock the F at, for example, home goals, greater than
210:32 - the F at away goals. There you go. This should all be all these results should be we can
210:41 - do assault value counts. All these results should be valid, right? So the digital OB
210:52 - sorry, an H, but we know not only have this question mark, we also have invalid values,
211:00 - we can calculate the results. So this is why this is a pretty interesting activity. So
211:07 - now what we can do is just here to like step over the value, and we know that it's going
211:14 - to be a home victory. And we can do the same thing for pretty much every other possibility,
211:19 - we can say, if away goals is greater than home goals, that's going to be an away win.
211:27 - And finally, if let's put here, if home goals is equals to away goals, that's going to be
211:35 - a draw. That's pretty much the same thing. And now we can count again. And we have the
211:43 - possible values. Let's give it a try. And it works as expected. All right, moving on
211:50 - to the analysis piece is when we start doing some interesting analysis with group by activities
211:57 - and all that. So what's the average number of goals per match? And we don't have that
212:03 - value. Goals per match, we don't have it. But we can easily calculate it on the fly.
212:11 - So home goals, DF at away goals, we have thoughts. And we can sorry, zoom out, we can here have
212:23 - the average very quickly. And activity is asking us calculate the average number and
212:31 - put it with two decimals. That's 2.66. If I'm not mistaken, I'm not saying it 2.66.
212:39 - And activity works. Next one, create a new column total goals. So now it's pretty much
212:45 - asking us to create a new column, DF at total goals, bypassing this thing. And total goals,
212:58 - there we go. And we can check activity real quickly. And it passed as expected. Now, calculate
213:05 - average goals per season, and we have to sort the values by by season. And we need to sort
213:14 - in the goals per season variable. So the way it's gonna work is gonna be in a zoom in.
213:20 - What I do group by group by season, and here, we're going to get total goals, you're going
213:30 - to get the mean. There we go. We need to sort these by the index, that's the season name.
213:38 - So there's going to be sort in Val sort index, which gives us the same result just we were
213:45 - lucky enough. And we can store that in the goals per season variable. Let's check activity
213:52 - and see if it passes. There you go, it passed, we are good to keep making progress. What's
214:01 - the biggest goal difference in a match? And this is an interesting one as well. Why we
214:08 - have two potential results when home one or when away one, right, we have our home victory
214:17 - and away victory, and we have the difference of those two. So we have something like the
214:21 - F at home goals, let's say minus the F at away goals, and we can do here something like
214:32 - max, right? We can do the same thing by doing away goals and home goals. And then we have
214:41 - the maximum. So this is a maximum difference in the biggest goal difference for a home
214:50 - win. And this is the biggest goal difference for an away win, we could have used the same
214:55 - value here to do something like max and min. And that's going to be minus six, right? Because
215:01 - in this case, it was an away win, the way side one, and that gives us a negative result.
215:09 - But basically, if I don't care about the symbol, because basically what I care is a magnitude
215:15 - of the value eight or six, that's a magnitude of the value, then what I could have done
215:21 - is just do it's something like do absolute. There we go. And now we can get the max value.
215:34 - Or to bring away, we can just do a sword values, ascending falls head, we can get the results
215:43 - here. So anyway, we arrived to the same results using different techniques. Basically, the
215:48 - most interesting piece for me, at least here is for you understanding the absolute method,
215:53 - because again, it's six or minus six, in this case, it's the same for us, because we care
215:58 - about the magnitude, the goal difference, we don't care if it was the way team one,
216:03 - or the home team one, right? So the the absolute method will give us that magnitude. Let's
216:10 - try with eight anyways. It was pretty obvious that it was a home win. If you know a little
216:20 - bit about football, soccer, those, those a case, game over. What's the team with most
216:28 - away wins. And this is a very interesting one as well. Why we could start doing something
216:36 - like df dot lock df at results is away, right, we have all the way team way victories. Now
216:48 - we can group group by the way team, because basically what it's asking us what's a team
216:55 - with the most away is when so this is in our way when who was a team is basically away
217:00 - team. And now we can just add results dot size, and we can get we can sort values by
217:11 - by nothing because this series ascending false. And let's do just head and we have that the
217:24 - team with the most away wins is Chelsea. Let's give it a try first. And then I'm going to
217:30 - show you something different, a different way to calculate this thing. There you go
217:35 - work. There's a different way. And it's actually the solution proposed here. So I'm just gonna
217:39 - go ahead and reveal it. And we can I can I can just copy and paste these things. We don't
217:45 - waste so much time. And I can explain it to you right here. Basically, what is happening
217:50 - here is we can group by the way team. And when we do this grouping, we're gonna have
218:00 - the head, we're gonna have all the results for an away team. So for Liverpool, we're
218:05 - gonna have these results, and pretty much any other result from Liverpool. And that's
218:11 - gonna include draws, home victories, and away victories. So basically, what we want to do
218:16 - is we want to group we're gonna get this group that is let me get here lock. If at away team
218:26 - is Liverpool, as they say, I go. So when we group by away team, we can we create, we create
218:39 - like we have so we have this full data frame that has for example, Liverpool here and Liverpool
218:45 - here and Liverpool here and Liverpool here and has a let's do how can I there has a Manchester
218:59 - City. Oh, I got green. Why? It's Manchester City, Manchester City, Manchester City, Manchester
219:08 - City. And we can get another football team from the Premier League can get here walls
219:18 - walls is another team walls walls walls walls. What the group by operation is gonna do is
219:25 - gonna identify we're gonna use black, it's gonna identify the values are the same. It's
219:32 - gonna prepackage them right in this. I don't know if you've heard about it, but the term
219:37 - is splits, apply, combine is gonna create tiny groups with the different samples that
219:50 - meet their grouping criteria. So it's gonna put all the Liverpool, all the Liverpool matches
219:55 - here is gonna put all the Manchester City matches here is gonna put all the walls matches
220:05 - here. It's going to give you the option now to work with this thing. So now we can do
220:12 - for example, now get me the away goals and do a sum or give me the results and give me
220:20 - the signs, we can do any operation with this groups, and then it will assemble them again
220:26 - in a table and it's gonna say, Liverpool, whatever Manchester City, whatever walls,
220:32 - whatever Manchester United, whatever, get us gonna combine all these more pieces that
220:37 - it has created. But before we do the operation, we have the chance to run a custom function
220:43 - and that's the apply one right here. So we can run we can pass this custom function that
220:48 - is going to be run in each individual group. And what the custom function does is it gets
220:57 - all the rows. So here is going to get a draw a an away win, a home win, an away win, etc.
221:07 - And we're going to perform the the operation that we want, which is counting the ones that
221:13 - are an away win. So we're going to get only the ones that aren't away when we're going
221:17 - to do a sum and you are going to return that value. So here's going to be two. And here's
221:22 - going to be for example, just one. And here's going to be is not zero, we're gonna get just
221:27 - one. Finally, painless by itself just takes care of saying Liverpool to Manchester City,
221:35 - one and wolves. That's too many wolves zero, right, the combination at the end. And that's
221:43 - the way that function works. Let's clear this whole thing and run it. And we get pretty
221:52 - much the same results as before is Chelsea Manchester United Arsenal, etc. So the way
222:00 - to think about it is you can fill your data before starting, or you can perform like these
222:06 - operations after you have grouped the data with the individual groups that you had before.
222:14 - Okay, that's it. Let's keep moving forward because we have just three more activities
222:18 - to go. What's the team with the most goals scored at home? So this is a pretty interesting
222:27 - one as well. Let me get ahead. You take the time now to pause the activity and solve it
222:36 - by yourself. I selected Chelsea, I don't know why it's a mistake. But again, take the chance
222:41 - to pause and do it by yourself. Basically, it's asking what's the team with the most
222:46 - goals scored at home. So it's basically the home team. We have to group by home team,
222:58 - home team. We have to count this home goals. So here just count home goals, I will need
223:07 - now to get the sum. We're gonna get the whole thing. But of course, we need to sort values
223:14 - by ascending falls. And we're gonna get head. There we go. And we have that Manchester City
223:26 - seems to be the goal with most day the team sorry, with the most home goals scored. So
223:35 - let's try that out. And that is correct. A pretty, a pretty dangerous team in attack.
223:44 - Manchester City for sure, especially now this outdated, especially now. Okay. Second to last,
223:52 - what's the team that received the last the least amount of goals while playing at home?
224:00 - And this is also a very interesting one. Because if I was just naive, I was gonna do something
224:05 - like DF, the team group by home team, what's the team that received the least amount of
224:19 - goals and away goals. So it's team playing at home away goals, but some sort values head.
224:31 - There you go. So charting athletic have only received 20 goals, right? But the reality
224:42 - is that they only play df dot lock, df or now let's do df at home team equals charting.
224:51 - There we go that some they only play 19 games at home. So it's interesting because what
225:06 - these activities asking us is for the ratio of goals received over home games. And I think
225:16 - if you have not passed, I think it's a very, very good moment to pass and try to resolve
225:20 - it by yourself. But anyway, let's just do it. We're gonna start first, we're gonna keep
225:25 - the same group by operation. But we'll try to get two things, we will try to get the
225:33 - total goals they received under the total matches they played. So we're gonna get we're
225:43 - gonna get away goals. And we're also gonna get first, we're gonna get just here home
225:49 - team, I got two different operations. For that, we're going to use the aggregation method
225:55 - and we're going to use a dictionary, we're gonna say for home team, perform the size
226:02 - operation for away goals, perform the sum operation. Let's take a quick look at what
226:11 - we have. There we go. We're gonna sort values by by by home team. It's actually ascending
226:25 - false. By home team, I did something wrong here. My bad. Sort values by home team. Why
226:46 - is Oh, because it's both. So let's replace replace, rename, rename columns, we're gonna
226:56 - call home team, total matches to total games, I'm gonna put away goals equals goals received.
227:08 - There you go. Let's break this in a couple of lines really quickly and ascending faults.
227:22 - There you go. Total games. No, because this is total games now. Games. There you go. So
227:36 - Liverpool, Tottenham. So these are the usual suspects, right? The teams that have always
227:42 - played at the top of the Premier League, we can do now is sort by two things we can sort
227:48 - by goal by sorry, by total games, and we can also sort by goals received. But we want to
228:00 - flip the sorting here, we want to get all the players that all sorry, all the teams
228:06 - that played a ton of games, so ascending false, but then we want to get the ones that received
228:11 - few goals. So we're going to be ascending true. And now we're going to get the Manchester
228:16 - United. Manchester United is a team that played the most games with the least goal received.
228:28 - We can, let's say we can rename this thing, we're going to do something like, we're going
228:34 - to call it games, per team games, home games, games per team, and call that head, we could
228:52 - do something like ratio, what's going to be it's going to be goals received per match.
229:03 - And we're going to call this thing we're going to be the result of home game games per team
229:10 - at goal received divided by home games per team at total games. And let me break this
229:23 - into multiple lines. So it's a little bit more readable. And now we're going to do pretty
229:29 - much the same thing as before. But we're going to do is value sort values by goals received
229:39 - per match head, I get the same result, just Manchester United with the best ratio in terms
229:50 - of goals received per match. It's actually tried out because I haven't tried out. Let's
229:55 - see if it's the team we're waiting for. That is correct. Basically, what I'm saying here
230:01 - is that we tried we first got we have for the same grouping operation, we computed two
230:09 - different things total games, sorry, total goals received. That was a way goals because
230:17 - it was the whole team. But we also computed how many games they played. So same group
230:24 - by operation, if you allow me a very quick draw, we have like the big chunk of teams.
230:31 - And then we did like this separation of small small groups for home teams. But then we computed
230:39 - two different things for home team, this gave us the size for the way goals is gave us the
230:46 - sum, right, some sum all the way goals. And we did these two operations in all the individual
230:52 - chunks to compute the final results. We quickly identify Manchester United as the one meeting
231:02 - the requirement of activity. But we went one step further to actually compute these goals
231:08 - received per match value. Why is that because when I make this thing analytical and potentially
231:13 - automated, we need it we need an analytical way. What else there is I think we can take
231:21 - a look I think there is a pretty interesting solution here. No, I thought we had a solution
231:29 - that had everything in a one liner with a apply operation, it is potentially doable
231:36 - if you want to give it a try. But I think readability matters in this case. And finally,
231:44 - what's the team with most goals score playing as a visitor away from home. And this is going
231:52 - to be pretty much the same thing as before. Goodbye away team. And we're gonna get the
232:02 - team playing away from home score more goals are gonna get goals go forgot already the
232:12 - name of the columns. It's away goals away goals away goals, sorry. And what we're gonna
232:26 - do is some get a preview. And now we're gonna do a sort values ascending folds. And it seems
232:38 - to be Arsenal. Let's give it a try. And it passed. And we completed our projects. So
232:50 - this was pretty much the the activity we started with a little bit of data cleaning data wrangling
232:55 - pretty interesting. Because again, we had a good variety of different issues with our
233:00 - data, we had the issue of the invalid seasons, which is a string invalid pattern, then we
233:10 - moved to the invalid count of goals, which is an integer out of range, then we cleaned
233:16 - the categorical result variable was just potentially just a result categorical. So the results
233:23 - should be in these in the subsets. We had a way to clean that but just calculating something
233:28 - else in data frame, those good thing. And then we started with a bunch of group by activities
233:34 - all very interesting. So take a look at yourself if you want to replay it. In other case, we
233:41 - have a bunch of other projects dealing with data wrangling group by and all these operations.
233:46 - This is a very interesting project that combines some data wrangling skills, which involves
233:51 - merging data frames, creating new columns with some data cleaning skills that it's gonna
233:56 - require you to take a look at the data and do some cleaning to make those merge work
234:01 - and finally, do some analysis, some question answering with group by operations with transform
234:07 - operations. So it's a very, very interesting project for sure. As usual, I encourage you
234:13 - to pause the video first, try to resolve it by yourself. And then of course, take a look
234:17 - at the solutions, because maybe I'm choosing a different way of what you're doing. And
234:22 - you can see something different. So with all that said, let's just get started. I have
234:27 - the first few rows executed already, as you can see. And let's take a look at the data
234:32 - that we're going to be working with. In this case, we're going to be working with NBA basketball
234:37 - information. And basically, we have the 2017 season stats that's going to be in this data
234:45 - frame right here, which involves the usual, you know, just information for each player
234:50 - as an aggregate of the whole season. And then we have a player's DF data frame that involve
234:55 - the includes the personal information of the players of their name, their weight, birthday,
235:02 - college, etc. The important piece here is that the players data frame contains information
235:08 - about all the players in the registered history of the NBA. So that's from like 1950s. The
235:16 - information in the stats in the seasons only from 2017. So we're going to start by doing
235:22 - a merge. But of course, going to be an interesting one, because we have to merge in a specific
235:28 - way. The first activity and here again, encourage you to just pause involves merging data from
235:35 - the 2017 season with the players, but performing a left showing. So basically, we want to include
235:42 - here in our season's DF data frame, we won't include the personal information from the
235:49 - player, we want to bring the data to our existing data frame from this particular season. Okay,
235:57 - so as you might remember, there are different types of merge to do, we can do an inner,
236:01 - we can do a left or right outer, we can do a full outer, in this case, by performing
236:06 - a left outer join, we're going to be able to recontain to, like to keep all the information
236:14 - from these data frame 2017, and bring only the matches from the players DF data frame.
236:24 - So let's go ahead and do that. Again, this is your your opportunity to pause the video.
236:29 - To do a merge, what we're going to do is we're going to start with season 2017 DF, and we're
236:35 - going to merge merge with merge players, the F. We have to first, I'm gonna players DF,
236:48 - we're going to do a how left, because that's basically what it's asked. And again, the
236:53 - reasoning is that we want to keep all the information on the same thing from 2017 DF.
236:59 - And we're going to pass the columns to merge. So on the left side, we're going to pass the
237:05 - player. And on the right on, we're going to pass the name, it's the same information,
237:12 - but it's two different columns. If you remember, we have the on on based attributes to refer
237:20 - to individual columns. And we also have the indices, if potentially you're merging per
237:25 - index, in this case, we're just using the regular columns. And we're going to assign
237:30 - all this to data frame. And let's check the activity to see if it passes. We can take
237:36 - a look at the DF. This is going to be a long data frame, I can actually show you something
237:43 - like df dot head, and we can do just the first row under transpose. So we can see all the
237:51 - information right here. So we had me potentially do a little bit of drawing. If I'm allowed
238:00 - here, we're going to select red. Basically, what we did is we didn't select right, there
238:08 - we go. So basically, we have all the seasons that we're going to make like a long data
238:13 - frame, and I use blue to the players merge right there, the resulting the resulting merge
238:22 - to we can use another color, let's say here, purple, the resulting merge is gonna basically,
238:29 - as it's a left outer join, and this is left, we're doing is we're bringing this data frame
238:34 - to the side here and basically make it match with whatever information we have in between.
238:40 - So if in the season 17, there were, you know, two players were repeated, we could have potentially
238:51 - duplicated that data. And that's perfectly fine. Because if we have the same player here
238:55 - two times, because of any reason, because a player played in two different seasons,
239:01 - two different teams in the same season, we actually want to duplicate the right hand
239:06 - information in both of them. Because again, what we're doing is we're complaining with
239:11 - the personal information of the player. So said that let's take a look at the whole data
239:17 - that were where we have it's it's a large data frame. But what's gonna give us the key
239:24 - if the merge was successful? The important piece is the name because sometimes you're
239:30 - gonna find that some columns are gonna be nullable, like for example, college is nullable.
239:34 - But this doesn't indicate that the merge wasn't successful. This indicates that just college
239:40 - was no, but the name column is not nullable. So that means that if we find a, a value,
239:48 - a row in the df variable, that is null in name, that means the merge was not successful.
239:56 - So are there any misses in that data frame? And this is the second activity, we can quickly
240:02 - take a look at that by doing df at name dot is an A. And here we can do for example, any,
240:10 - any, this is true, we can actually answer that real quick. And the next one is going
240:16 - to ask us how many will we can do a sum right there, we can find there are four missing,
240:26 - four missing players, basically, we couldn't match. So there are four people and I think
240:32 - now it's gonna be a little bit more clear once we visualize and therefore, four rows
240:38 - in the seasons data frame that we couldn't match for a valid player, which is strange,
240:45 - right? Because we know that these players df data frame contains information for all
240:50 - the players in the NBA. So how is it possible we couldn't match four players, let's actually
240:55 - take a look at those people. And that's the fourth activity that we have right here that
241:01 - is extracting names. Before we do so, I just want to show you who are these missing players.
241:06 - So let's take a look at the values in df that are that have a non or a null value in name.
241:19 - And those are these four players right here, we're gonna take a look in a second at these
241:25 - players and see why we had that miss much. So this activity is asking us to basically
241:31 - find those four people. It's asking us to put them in a list. So what I'm going to do
241:37 - is just going to do that. And I'm going to plus here the player, and we're going to do
241:42 - values. And finally, I'm going to make here a list. Now player misses contains the list
241:50 - of players are missing, we're going to check the activity. And it passed correctly. So
241:59 - this is a very interesting activity. And this is the one that I think is the most representative
242:07 - of the data cleaning process in general for any data scientist data data analyst data
242:13 - engineer, which is actually fixing these missing issues, right. And there are sometimes different
242:20 - strategies, sometimes you can just delete the missing rows. Because I mean, if you have
242:26 - millions of rows, and there are a few that are null, you can just delete them. Sometimes
242:30 - you can replace it with something else. Sometimes you have to actually fix it, you have to realize
242:35 - like what happened, and just fix it. And the way we're gonna do is just doing some detective
242:41 - work. And this is just perfectly normal in the whole data engineering, data science,
242:47 - data analysis process, just taking a look at your data, and trying to understand with
242:52 - domain knowledge, and this is a very important point with the main knowledge, trying to understand
242:58 - what went wrong. And domain knowledge is very important, because I can, I can, and we will
243:05 - actually perform this, this cleaning, we're gonna fix these values. But we need to understand
243:09 - a little bit of what happened with the basketball season. The same thing happens, for example,
243:15 - and I think I have already put this example in another project, if I'm working, for example,
243:19 - in a biology lab or in a physics lab, in a nuclear physics lab, as a data scientist,
243:25 - there are going to be a ton of data cleaning tasks that I will just not be able to perform
243:29 - not because I don't know the techniques, because I'm very good with pandas, but because I need
243:35 - to understand the domain that I'm working on in order to be able to perform some operations
243:40 - and there's understand my data, right. So for example, if you have no idea about basketball,
243:46 - and you fee and you see a value for points that is 100,000, maybe that value is good
243:53 - for you. But of course, it's pretty hard to make a hundred thousand points in a season
243:59 - in the NBA. So by knowing the knowledge, you have you have just immediately placed the
244:07 - value in a in a given range that of possibilities. So your data cleaning process, it's a lot
244:14 - more, it's, it's easier, and it's more precise, because you knew the knowledge. So the same
244:20 - thing is going to happen here. And actually, let's take a look at the activity. And it
244:24 - tells us that with confidence, and I already know what activity says, with confidence,
244:30 - it says that the players are actually in players DF. So there is something wrong with players
244:38 - DF the the right hand data frame. So we're gonna players DF dot head. So there are some,
244:47 - there is something wrong with the names here that somehow didn't match what we had in player
244:53 - in the stats of the 2017 season. And the objective is to modify players DF so they match
245:00 - whatever we had in the in the 1720 2017 season. That's that's correct. So let's first identify
245:12 - where these players are in the 2017 season are not in the players DF. So basically, we
245:19 - can make a quick drawing here and potentially. So we have in 2017, we have this this guy,
245:29 - look, and bar, which is not potentially in the players DF. So in the players DF, the
245:40 - activity tells us for sure that it's there, we have to trust that for now. But these players
245:45 - like what name does he have? Basically, we have to find these much. To do so one thing
245:52 - that I can do is just and this is, again, a very detective work. There are multiple
245:59 - ways to basically find this, but I could do something like, let's keep it simple. Maybe
246:05 - this player has a middle name. And that is part of the whole players DF. But in the season,
246:13 - that player wasn't listed with that name. So we can just go ahead and do something like
246:18 - players DF dot lock. And here, I can do players player DF at name, dots contains the same
246:32 - last name. So is there any player in players DF that contains this last name, and we can
246:38 - find the given the given player, what happened in this case, and we can just take a look
246:44 - at what happened is that this player either added a new surname, or always had the same
246:50 - surname, but in the 2017 season, he was not listed with this surname. So we have seen
246:58 - we are seeing like the first incompatibility, let's say, so we can say that in players,
247:07 - DF, and we're gonna do season 2017. These player should be named should be named, we're
247:19 - gonna do that should be named the name in 2017. So we want that that player to be that
247:31 - name. And we can keep working, you know, with this detective work. Maybe you know what happened,
247:37 - for example, with maybe you don't know this, but Muhammad Ali was born Cassius Clay, and
247:44 - then he he switched religion, or I don't know how to say this, but basically, he converted
247:50 - to Islam, and he changed his name to Muhammad Ali. So the same thing can happen to anybody,
247:57 - we can change our names. And that's what happened here as well. So this person potentially goes
248:01 - by a surname. So for example, Sheldon Maclellan, which seems to be the original name, I can
248:09 - just go to Wikipedia, born Sheldon Maclellan, here, here he is, right? So the guy either
248:16 - changed his name or just made it shorter, we don't know, to be honest, we don't care,
248:22 - we have just found another player with a different name. So we're gonna do that. So we know that
248:29 - in in the let's actually do Mac here. No, Sheldon Mac. Where is Sheldon Mac, right here.
248:46 - So in players.df, we have Sheldon Mac, and we want that player in the 2017 season, it's
248:56 - like we're rewinding, say what was the name, right in 2017. And that's the name. What who
249:06 - else James Michael, let's take a look at Michael here, James Michael, and see if there is any
249:14 - changes. There is a new last name. So again, in players.df, this person is James Michael
249:23 - Michael do and we want this person to be renamed where it's like, where we won in the names
249:28 - to 2017. And in at the end, we have meta world. And here, I'm going to do another trick, take
249:39 - a look at this, we're gonna first lower the names, and then I'm gonna do meta meta with
249:48 - a double t. There we go. And seems like meta world was the name in 2017. But now it's something
249:59 - different. So we're gonna rewind again, if you allow me the expression to the old name
250:05 - in 2017. We can store these names mapping. There we go. So we can keep the names as a
250:15 - reminder. And of course, I'm missing the comments as usual. As we will do. So how are we gonna
250:25 - do this thing? Well, the way to do it is just we're gonna find a player in this case, we're
250:30 - gonna find a player with the with the same name. So in this case, let's do it with the
250:37 - I don't know, first one, first name. So this is the player in players.df with the full
250:44 - name we wanna rewind a player back to the name in 2017. And we want to take just name,
250:52 - right? name. And we want to assign that to the name in 2017. So we can change that. There
251:01 - you go. If we do the merge, let's go ahead really quickly, I'm gonna zoom out. Let's
251:09 - do the merge once again, really quickly. And let's find the players don't match. Which,
251:17 - as you can see, it's just three, because we fixed the first one. So this works. What we
251:22 - can do now is we have four, but we can just automate, quote unquote, this process. Let
251:27 - me reread players because I have modified players, let's do the merge again, let's go
251:32 - back to the state where we have these four players missing, including look, look, and
251:39 - bar. And now we're going to do the same process, but we're going to automate it's just we're
251:44 - gonna use for loop so we don't have to type it one, one by one. And the way to do that
251:49 - is going to do for all name or it's actually like new name, let's say, and name 2017. So
252:00 - it's the new name and the name they had in 2017. In names mapping dot items, we're gonna
252:09 - find the person we're gonna find the person with a new name. And we're going to replace
252:15 - it with the name. 2017 body. And of course, I'm missing now a column. And there you go.
252:26 - We can now try we can check the activity to see if we did everything correctly. It seems
252:32 - like it worked. We can now perform the same merge again and see how it goes to let's take
252:38 - a look. So copy these cells, same merge. And we we know what the activity is going to check,
252:46 - but we can borrow this cell and try it again and see if we had any misses, no misses. So
252:52 - this will potentially there you go. It worked as expected. Okay, remove unnecessary columns.
253:01 - It's just, again, data wrangling, very boring, just, you know, we have to get rid of a few
253:06 - columns, as I show you the first row transpose, there are a ton of columns we're not going
253:14 - to be using. So what we can do is just drop these columns, how to drop the f dot drop
253:19 - is the method columns, columns to drop in place equals true, because we want a modified
253:26 - data frame. Now we're going to check the activity. And it works. Rename teams to their four names.
253:35 - This is a very interesting one, because it has a very simple solution. But it's usually
253:40 - not expected, I see some, some very crazy solutions for this sort of activities that
253:47 - involve our renaming. Basically, we have the team of the player is a three letter acronym,
253:57 - we want to resort back to the full name of the team. To do so, what we can do is there
254:04 - are replays methods, we can do df at team dot replays, and we can use this mapping that
254:11 - was given for us team mapping. There, and you can I will just execute this thing. And
254:22 - it didn't work, because it's actually team that I go TM. So we're replacing one by one
254:28 - these acronyms, whenever you have OK, see, it's gonna find here, OK, see, it's gonna replace
254:34 - with Oklahoma City Thunder. We're gonna find, for example, d a l, it's gonna look for Dallas.
254:43 - Where is it? I don't know where it is. Basically, where is that last second one? So basically,
254:48 - it's gonna it's just a mapping and it replaces one by one. And we can store this result,
254:54 - right? In the column team, that's gonna be it. So we're gonna do DM, df at team, which
255:01 - is the full name, it's gonna be this column with a replace mapping performed. And now
255:07 - we can do df. Let's do df at player. TM on team, let's get the first 10 rows. And we're
255:18 - gonna find 10 rows, and I find a few things. So I n d indiana pacer's as a as San Antonio's
255:25 - purse, am I in Minnesota timber wall, so this looks okay, and see what happens here with
255:32 - this tot in a second. But for now, this is good. And let's check the activity to see
255:40 - if we did the correct thing. And there you go. It's working. Convert birthday to a daytime
255:48 - object. So this is another interesting one. The birthday of the player is a string, we're
255:56 - gonna convert that to a date to a time some or daytime. It's very simple in pandas, but
256:03 - we're gonna do is PD to daytime, and we're gonna pass directly the birth date column.
256:12 - That's but of course, this is an immutable operation that's just returning a new series.
256:16 - What we want to do is just step over whatever value we had before. And of course, this is
256:24 - a change we cannot undo so easily. So in this case, we are safe to just like step over the
256:30 - previous values. If not, you can just create a new column, you know, in this case, we're
256:35 - safe, we can just convert the column back to daytime, we can check the activity. And
256:42 - that worked as well. So going back again to the previous values that I show you we had
256:47 - let me borrow this thing here. Delete all players from the tot team, the tot is for
256:56 - the players. And that's actually, let's do something. df at at. Let's look for duplicate
257:07 - players. df dot lock df at player dot duplicated. Yes, and we're gonna find we're gonna do play
257:23 - duplicated. I want to now hear only these columns keep false sort values is a long operation.
257:37 - But don't worry, it's pretty simple. Sort of values by player Ted, Ted, there you go.
257:46 - Long operation. Some players in a given season can switch teams, right? Just right in between
257:52 - there is a there's a transfer window and they can switch teams. So you have the first the
257:57 - same players sorry, like this guy right here that play for both Cleveland and Dallas, right
258:03 - in the same season, he was tougher in the middle of the season. So these data that we
258:09 - have and we have to understand again, the data set we have includes kind of an aggregation
258:15 - column, which is the tot column for totals. So totals of this person within the whole
258:21 - season is so many field goals, so many three pointers, so many free throws, etc. Just a
258:28 - total an aggregation of the season for this particular player, we need to get rid of that.
258:34 - So I'm gonna do that. And oh, actually, we can use the same. No, we can't use same condition,
258:41 - how we're gonna get rid of these of these values. First, let's keep a copy. Because,
258:49 - I mean, we're gonna be we're gonna be breaking things. So we need to keep a copy, we're gonna
258:55 - do a df copy df copy, this is a very common technique when you're modifying something.
259:03 - As usual, I encourage you not to modify things. But if you are certain you want to get rid
259:09 - of something, you can while you're doing the process of understanding and analysis and
259:15 - all that, you can create a quick copy of your data if it's not large enough to fill the
259:20 - whole memory, of course, because because you're literally copying value. So if your data frame
259:25 - takes one gigabyte of memory, you once you duplicate it, now you have two gigabytes of
259:32 - memory allocated. So as long as that's possible, you can keep a copy. And I usually do like
259:39 - copy 12345. And that's pretty much the data running process, until you figure things
259:45 - out and you're sure, then you can remove all the copies and of course automate the work.
259:49 - But for now, we keep a copy. If anything goes wrong, let me comment this thing out. So we
259:54 - don't accidentally execute it, we have a copy in df underscore copy. Go back to the activity,
260:01 - we have to get rid of the players that have a tot team. So df dot lock, df at team is
260:10 - equals tot all these players, we have to get rid of them. How can we get rid of them? There
260:20 - are multiple ways the easiest is probably also we drop maybe not the easiest, because
260:26 - the easiest could be just do something like df equals df equals all the players that don't
260:36 - have a tot. And actually, let's try it out. And this should work for both. Except I'm
260:43 - doing something wrong. It worked. But let's bring back the old data frame, df copy, copy,
260:51 - there we go. So we have it as it was before, I'm going to delete the cell so I don't accidentally
260:58 - execute it. And there is another way which is basically we can find all these all these
261:06 - rows, right? So all the rows we want to get rid of, and we can get the indices. So the
261:11 - index of the rows when I get rid of. And finally, we can use the drop method. So we're going
261:17 - to get rid of these values, and we can do in place true. And let's see if that works
261:24 - as well. Well, I have to reset all the activities. But trust me, that's also gonna work. Alright,
261:31 - like we have pretty much the whole process done, we merged the data frame, we found that
261:37 - there were a few mismatches, right, where the names of the players changed. So we rolled
261:43 - in but the south and 17 doing some investigative investigation work, some detective work, we
261:50 - brought back to 2017 merge data, get rid of the columns, created rateable names, do a
261:59 - little bit more cleaning, removing TUT and all that. And now we're going to actually
262:03 - start with the analysis. So this is going to be very interesting. So what's the team
262:11 - with the most players in the league? So we have, again, so we have information about
262:20 - all these players, they work at all these players in the 2017 season. And of course,
262:29 - we know that some players switch teams, right? So how many? What team had the most players
262:37 - within a season, either if they went back and forth, they changed a lot, want to answer
262:43 - how many, which was the team with the most players in a given season, that's pretty simple,
262:48 - because we can just do a value counts, counts, and that's to head. And it's gonna tell us
262:55 - that the New Orleans Pelicans was the team with the most players to 27 in general register
263:03 - players. And that's correct. So what's the team with the lowest field goals? Let's take
263:12 - a look at the data again. So you understand what we're trying to do here for each player
263:18 - for each row. So each row is a player in the 2017 season, we have merged that with our
263:24 - personal information, which we donate in this activity. But basically, we have field goals
263:30 - that the players court in that given season. So we want to aggregate all the field goals
263:39 - of a given team of all their players and find the one with the lowest value for that. To
263:46 - do so, we're gonna, we're gonna group by team, team, and we're gonna find the field goal
263:55 - column, we're gonna sum that column. Of course, this is a mess. So basically, we're gonna
264:02 - do sorted values by sort of values by nothing, because just a series, and it's gonna be ascending.
264:10 - We can actually do a head method here. I want to dots so it doesn't switch. And we find
264:18 - that Dallas Mavericks was the team that scored the least to put in a way field goals in 2017
264:25 - season, by just computing the aggregation of all its players stats. Let's answer it.
264:34 - And that worked as correct. What is the team with the best field goal percentage? And this
264:44 - is a very interesting one, because field goal percentage is defined as field goals, divided
264:49 - by field goals attempt, that is data we actually have, let me show you again, values. So we
264:57 - have, we have field goals, 134, over 341 attempts, so it's a little bit less than 50%. Right?
265:08 - You tried 341 times to score, and you only made 134. So you made, you made 134 divided
265:18 - by 341, your accuracy to put it away was 0.39 or 39%. So that's the column that we want
265:28 - to compute, that's the value we want, we want to compute. But we want to compute this by
265:34 - team. So we have to aggregate all the field goals and all the field goal attempts from
265:40 - a team, and then find that given percentage. So we can start by doing pretty much the same
265:49 - thing we did before, it's going to be df bro, group by team. And here, we're going to compute
265:56 - two values, we're going to compute field goals and field goal attempts, and we're going to
266:01 - do some of these two. And this method doesn't exist because I miss type, miss type that
266:11 - group by there we go, I find this thing so we can, we can store this, this data frame
266:17 - in a partial variable saying field goals per team. And field goal, field goal per team,
266:28 - we're gonna pre visualize it. And now we can compute a new column, which is going to be
266:35 - it's going to be field goal percentage, which is equals to field goal per team of fg divided
266:42 - fga. And now what we can do is sort values by field goal percentage header, and we're
266:56 - going to find that with the best, so we need to do ascending ascending falls. So the best
267:06 - field goal percentage is Golden State Warriors. Let's try the activity first. Let's find 2017
267:16 - season, NBA. Who was the champion? playoffs, Western champions, finals, champions, Golden
267:29 - State Warriors. So it's not it's it's not a triviality that the player with the team
267:36 - with the best with the best percentage won the championship. Anyway, let's take a look
267:44 - at the one with the worst or you know, the lowest, which it's not us, but just for the
267:51 - sake of of curiosity, we can find the Memphis Grizzlies, the Las Mavericks, those were the
268:00 - teams with the least accuracy to put it in a way. Okay, so what's the difference between
268:07 - the best and worst three p shooters by position? It is known that shooting guards are the best
268:16 - three p throwers three pointer throwers by efficacy or accuracy. The question is, what's
268:23 - the difference in accuracy with the worst three p throwers always considering by position,
268:30 - to note use the position from POS column. So we're gonna group by position now. And
268:41 - we're going to compute both three pointers and three pointers attempts. I'm gonna sum
268:48 - all this. And this is pretty much the same thing we did with the previous one. But in
268:53 - this case, we're doing it by position. Let's store that in a variable. So we're gonna say
268:59 - position three pointer accuracy, we're gonna store that and now we can create the new column
269:10 - we know it's three pointer percentage, let's call it is going to be three pointer divided
269:19 - by three p a, the attempts. And now we can do position three p accuracy. Now let's sort
269:29 - values by three p percentage ascending folds, the best position shooting guards as expected.
269:39 - Again, this is just domain knowledge in basketball shooting guards are usually the ones shooting
269:45 - better. I could have with a better accuracy. But it's telling dots that we actually need
269:53 - to find is what's the difference in accuracy between shooting guards and the worst position
270:01 - the worst position the data frame, which we found was the PF power forward position, right?
270:06 - So what's the difference in accuracy? Well, we could do something like this minus dots,
270:13 - it's gonna give us the percentage, or we can do something like dots, three p percentage
270:24 - dot max, minus the one min. And now we have pretty much same value without hard coding.
270:33 - The difference is 0.024. So in percentage terms, that's gonna be 2.4%. That's basically
270:40 - this value right here. Tiny difference, right? Like from the first best position to the worst
270:48 - position. And it's not a huge difference. But of course, with so many attempts, it actually
270:54 - adds up potentially in the league. Alright, so this is a very interesting activity, I
271:00 - seriously encourage you to just pause here and try to resolve number 15 by yourself is
271:06 - a very interesting one, it might involve a ton of googling from you, because I mean,
271:12 - it's not trivial. So just, you know, this is your use your chance to go ahead and pause
271:18 - the activity, try to solve it, pause the video, sorry, just solve it by yourself. I give you
271:23 - one second, now we're gonna resume, and I'm gonna solve it live right here. So you can
271:28 - see how I approached the problem. Alright, let's take a stab at it. The activity is asking
271:39 - us to find the best score per team, right? So we want to basically generate this table
271:45 - that it's the name of the player, the team, position on the total points, right? So or
271:52 - not best course in terms of, you know, just amount of score points in their team. So basically,
272:00 - we're gonna do something like, for example, df dot log, df dot team is Oklahoma. And we're
272:10 - gonna get, we're gonna get points dot max. So basically, the max score points in Oklahoma
272:21 - is this amount. And now we're gonna find where I find the player by saying, these on the
272:34 - PTS equals that value, a number. And we found that that was Russell Westbrook. We can pretty
272:50 - much put everything in just a one liner. So we're gonna do I'm gonna copy this thing here.
272:56 - And I first find the max points in team, max point in teams. I'm gonna team is gonna be
273:06 - df at TM dots. I don't remember the Cleveland, which one? No, we were gonna do Boston, how
273:19 - is Boston's probably BOS. BOS is it's just try it out. Boston BOS. There we go. So as
273:30 - our BOS, Boston, and we're gonna do here team, team, I find that the team is team. And this
273:44 - is max points score per team. And say is the best score of Boston. So I want you to understand
273:58 - the problem. This is not the solution we're gonna use. Because I mean, involves a ton
274:03 - of manual work per team, we could potentially just iterate, you know, get all the teams
274:09 - we can actually show that to use, we can do something like for team in here, dots, unique,
274:20 - unique. We're gonna do that. So we're gonna replace here team, we're gonna place here
274:26 - team, print, we're gonna get here two things, we're gonna get player, I'm gonna get team,
274:40 - team, there you go. You get the values, I'm gonna get player, team, sorry, for my variable
274:50 - names, I'm going to do print. I actually can get points as well. PTS. PTS, my variable
275:01 - name is our terrible. We're gonna use it when I say P for team with PTS. I did something
275:11 - wrong here, player, team, df.log. Not enough values to unpack, we're gonna do print this
275:31 - thing break potentially. What if I do this? Okay, I'm doing something definitely wrong
275:51 - here, which I can understand. But basically, what I want to say is that we can potentially
275:56 - do this manually, right? So let's let's just print this thing. Let's print this thing.
276:06 - So Russell Westbrook for Oklahoma with this amount of points, Harrison Burns for Dallas
276:12 - Mavericks with this amount of points. Let's see Houston. Again, it's like we can solve
276:20 - it manually. So Denver Nuggets, Denver Nuggets, Nicola Jokic, Nicola Jokic for Denver. We could
276:28 - potentially solve it manually. But the solution that I want to show you, and it took me some
276:32 - time, solution I want to show you involves a group by operation to put in a way. I'm
276:40 - sorry, because I'm drawing you lately. I'm going to show you a drawing, signifying or
276:48 - trying to explain the solution that I'm going to use. So basically, we have a our full data
276:54 - frame. So we're gonna use black, say data frame. There you go. There is actually a way
277:02 - that I can make this thing a whiteboard. There you go. So we're gonna do this is our data
277:08 - frame. And our data frame contains information about different players. And let's say that
277:15 - we have red for Oklahoma. We have or no, let's actually do red for Chicago. Of course, we're
277:24 - gonna use we're gonna use blue for Oklahoma. And we're gonna use green, green for Boston.
277:41 - I need a darker green. Green for Boston. And the way it's gonna work is we're gonna have
277:53 - these players are just intertwined in the whole data frame, right? So there you go.
277:59 - And let's say that right here, this is the best shooter or the best shooter in the given
278:06 - team. We're gonna have the same thing for for Chicago, we're gonna have this player
278:12 - and that player and that player and that player and there's going to be the best scoring that
278:17 - in in the in the team. And then we're gonna have these player from Oklahoma, this player,
278:23 - this player, and that player from Oklahoma, there's gonna be the best and let's actually
278:28 - put it with that player here, that's going to be the best from each team. So that's basically
278:33 - what we did in the previous solution we filter we said the previous solution the manual one
278:39 - we've created an intermediate data frame that only contain players from a given team Oklahoma
278:45 - in this case, we then found the best core was this value or actually this value right
278:51 - here. And we made a second filtering in which we said find the player in that team with
278:58 - that amount of points. So now we have a single player we want to this is of course a different
279:04 - solution what we want to do now or let's separate it. What I do now is using a group by sort
279:12 - of way operation, we want the we want pandas to focus on different groups of players. So
279:19 - for example, all the blue players, all the green players, all the red players, and perform
279:23 - an operation in a group by group by fashion, but we want it to the result expanding back
279:33 - to the whole group. So we want it to just do that's pretty similar, we're gonna focus
279:39 - on the blue players from Oklahoma, we're gonna do is create the group by operation there,
279:47 - the split piece, find something in this case, we're gonna find the maximum in points. So
279:53 - it's gonna be for example, these maximum points. But instead of what we did before, which is
279:58 - all manual, we wanted to go back and replicate these value, we're gonna call these value
280:04 - V, this value V, very important, we wanted to replicate it back to all the members of
280:11 - the group. So we want these value to be applied here, and here, etc. So we want to we want
280:19 - it to be is gonna be V, V, V, and V. And the same thing for any other group that we have.
280:30 - So for Chicago, now, we're going to do another data frame, splock, and do another data frame.
280:40 - And we're going to do player, player, player, player, that's all going to be done automatically
280:45 - by pandas, find the given value we want, in this case is V again, and just replicate that
280:52 - value V, V, V, V here. And of course, the value when I find is a maximum of PTS. So
281:02 - the column PTS when I compute the maximum value, and then each player is going to have
281:09 - their score. So I don't know, 900 points, or 300 points, whatever, and next to it, there's
281:16 - going to be a new value, there's going to be the top of that group, given the group
281:21 - by operation, here's gonna say, I don't know, a ton of points, 1500, right? So we want each
281:29 - player is going to be 300. And next to it is going to be 1500. And there's going to
281:35 - be 30 point player didn't even play, and there's going to be 1500, right? And of course, this
281:42 - one is going to be 1500 in the in the points and 1500 in the values. Then what we're going
281:52 - to do is we're going to just find the top player or the player with the top points per
281:58 - 13. Alright, let's get rid of that. And finally, resolve the task, which is relatively simple.
282:07 - I mean, there was a huge explanation, but trust me, it's simple, the way we're going
282:11 - to do it is we're going to group by team. If I show you the drawing again, it's like
282:20 - we want to group by team, we want to perform this operation here and this operation here
282:25 - for each team. We're going to group by team, but we're gonna get a PTS, the column want
282:33 - to compute, but here we're gonna apply the operation transform and pass the value max.
282:44 - And that's going to give us a value. And that's basically what I told you before for each
282:48 - team for each for each individual. So it found it found it first broke the players into different
282:58 - groups based on their team. It's found the value we were looking for PTS max, it's assigned
283:08 - value to each one, it found the value, put the value next to each one of this and reassemble
283:14 - the same data frame. And now we're going to have this value once again. So let's hide
283:22 - that and we're going to do df at best score per team is going to be that thing, we're
283:33 - gonna assign it, we can call it this is our v value, of course, I want to use a better
283:37 - variable name. And now we're gonna look at let's say df at team is Oklahoma City Thunder,
283:49 - Oklahoma City and we're gonna find only player and we're gonna find team if you want to
283:57 - repeat it on PTS values by PTS ascending fulls first rows. And here you have that for Oh,
284:14 - of course, I'm forgetting the most important column we computed there. But I find that
284:24 - all the players in Oklahoma City are now have now assigned these new column, which is best
284:31 - score per team, which is equals to the maximum value of PTS from their group. So this is
284:39 - a very, very interesting functionality from pandas transform method. Basically, it's like
284:45 - group a group by operation, so all your data group by operation splits, compute, apply,
284:54 - and then reassemble back the whole thing, don't end up with different groups. So before
284:59 - all the operations was like, okay, see Chicago, Boston, and I've resolved in this case goes
285:04 - back again to the previous shape of the data. So we can basically create these transform
285:11 - data frames to compare it an individual with third group. So this is what we have, we can
285:20 - compare that with Boston now. For example, we can do the same thing for Chicago, I'm
285:27 - just I'm showing you some Boston, the best score was almost 2200 in Chicago, it was 1800.
285:38 - And you can basically see that each player has a PTS value, and then, of course, compared
285:47 - to the best core in the team. Finally, how what we need to do, and I'm going back again
285:53 - to what the activity is asking, is finding the best score per team. So that's basically
285:59 - finding all the players which have a PTS equals to best core per team. So it's gonna be the
286:06 - F dot block, the F at PTS is equals to the F at best score per team, we need to get the
286:15 - values player, team, position, and PTS, of course, let's do that real quick. It's not
286:30 - the same thing, it doesn't look like the same thing. Because if we look at the description,
286:35 - it says that it should be sorted by PTS in descending mode. So now we're going to do
286:41 - sort of values. Let's break this thing before it starts showing that annoying scroll. Sort
286:50 - values by PTS ascending, false. First few rows, Russell Westbrook, James Harden, so
287:01 - we have the same results, it seems we finally need to store this thing in a variable. Let's
287:13 - print the whole thing. And you can see that now the table looks pretty much the same way
287:18 - as before, even for newer looks pretty much the same way. Let's check the activity just
287:25 - as a note on the side of this point, because we did a pretty long developments and that
287:30 - have worked as expected. Okay, we have the final activity cleaning the data frame the
287:37 - notebook a little bit. Which team has the youngest squad by average player age? And
287:46 - this is a very interesting activity, because there are two forms of solving it. The first
287:51 - one is going to involve let me show you first how we we actually computed birth date as
287:59 - a daytime before. So this is from the player's DF, we turn into a birthday. This is very
288:06 - easily solved by doing I'm just giving you the answer straight away. DF dots group by
288:16 - group by birth team team at birthday dot mean. And of course, I made another typo here.
288:32 - Group by and let's just sort of values. There you go. And the interesting piece here, I
288:49 - don't know if you're noticing this right away is that this operation that seems like
288:54 - a very mathematical operation of computing the average or the mean was actually applied
289:01 - to a daytime object, right? So that is that is pretty interesting, because day times are
289:10 - not numbers per se, they're just points in time. But basically, what pandas is doing
289:17 - is finding that birthday kind of in a timeline, I'm finally computing the the mean, which
289:26 - is the youngest team. Well, it's based, it's basically the team that has the greatest,
289:35 - to put it away, the the the latest birth date, right. So 1922, 0314 is the latest date birth
289:51 - date mean birth date, right? So if if we do something like, like, let's let's put this
290:02 - in in timestamp. Now, let's put this in in days, right? So basically, or actually, let's
290:14 - put this in years days, there you go. So the average age, and of course, this is 2017,
290:25 - we can actually do that, we can say this to 2018. Oh, one, oh, one is the same thing.
290:32 - This doesn't change anything timestamp there. So the the the team Portland for the travel
290:41 - trailblazers Portland has the youngest squad by average, right? Because basically the average
290:49 - age was 25 years, not days because we're divided by 365. So 25 years was the average age of
291:03 - the Portland trail blazers and two concepts here I want to separate in the first one.
291:09 - Sorry, the second one that I mentioned was that we are here finding the youngest team
291:15 - that's basically the greatest date, right? If I was born in I was born in a 1987. My
291:23 - brother was born in 1992. He has a newer birth date, right? Most more recent, but that makes
291:34 - him younger, right? I have a an older date, date, a lower value, right? 1987 is lower
291:45 - than 1992. But that makes that makes me older. That makes him younger, right? That's that's
291:52 - the second thing that I mentioned very quickly. The first thing which is the most important
291:56 - one is that let's get rid of that is that the birth date column is a daytime and we
292:07 - correctly had a mean computed for that will be the alternative and actually let's try
292:13 - the activity that works. What is the alternative and I think we have that listed in the solution
292:20 - is, let's say this didn't exist, we'll basically need to transform the date back to a number
292:29 - and we can say, let's say dates. We can say age in days, we have to transform this thing
292:38 - from a date to a number. So we can say the F at age in days, and we can say PD, let's
292:46 - actually let me actually show you the result. First, the F at birth date, minus or actually
292:57 - the other way, PD dot timestamp, we said dot now, minus dots, that gives you a time delta.
293:10 - That's the name of the value pandas time delta, I'm gonna I'm googling it real quick. And
293:18 - we can find a time delta is just a relative duration of time. And that is the total the
293:25 - time delta and we can get for example, to be very precise, we can get total seconds.
293:33 - Total seconds, DT total seconds, or we can get something like days. And here what I'm
293:42 - doing is a DT daytime accessor. So if a pandas series, a column in a data frame is of time
293:52 - if is a daytime or a time delta, it has a special accessor dot DT that lets you perform
293:59 - some daytime calculation on it. Similar as with, for example, the F at team dot STR,
294:06 - we have the STR accessor for string columns, we have the DT accessor for daytime and time
294:13 - delta columns or series. So anyway, we can say this thing, age in will probably will
294:23 - not say it. So we say, we say player, we say birth dates. And we are gonna say age in days,
294:36 - birth dates. There you go. So someone that was born in 1993, oh, 801. So August 1 is
294:48 - 10,893 days old. So now we have transformed the daytime back into a numeric column. And
295:02 - we can now compute the the average age. So we can say group by same thing, team at age
295:15 - in days, dot min, sort values. And I did something wrong, as usual group. I don't know why I
295:26 - have so many issues with this group by today. And now what you can see is that we actually
295:31 - have to think the result in an opposite direction. Now the lowest value is the youngest one,
295:39 - of course, the previous one was the day the most recent date gave us the youngest team.
295:48 - Now the team with the lowest age in days is, of course, the youngest team. That's basically
295:53 - what we're finding right here. And we have let me clear this whole thing. So we can compare
296:02 - birth date. And these age in days, we have the same results. Ideally Portland try let
296:07 - me actually sorted sword ascending false. So we compare the values. And we have Portland,
296:16 - Portland, Toronto, Toronto, Boston, Boston, Orlando, Orlando. So it's the same value for
296:23 - both. I think the interesting takeaway here is how pandas implements all these useful
296:29 - daytime modifications, modifiers, methods, and even these operations. I think that's
296:35 - the most interesting piece so far. So again, wrapping it up this project extremely interesting
296:41 - because we did pretty much the full cycle, we got the data we merged, we identified invalid
296:47 - values using this detective work finding what happened rewinding time, we did some googling,
296:56 - we finally did some cleaning transform data types like birth date, then we did all these,
297:03 - you know, munging of the data, there you go, deleting these totals, understanding that
297:08 - we were working with. And finally, we did all these analysis, my favorite activity is
297:13 - by far the number 15 one with the transform method extremely useful method. So if you
297:18 - want to replay it, just, you know, try to solve it by yourself. And I think, I think
297:25 - this project represents very well, the whole process of data science data, runling data
297:32 - munging, data engineering, everything you're going to find in a in a regular project dealing
297:39 - with date.

Cleaned transcript:

Learn how to use pandas for data analysis and data science in this full course for beginners. You will learn pandas by example from Santiago. He is an experienced developer and he also created one of the most popular data analysis courses on the internet. So you are in good hands. Let's get started. Hello, my name is Santiago and this is pandas by example, a collaboration between Free Code Camp and Data Wars. I'm originally from Argentina, world champions of the 2022 football or soccer World Cup. And why I'm telling you this? Well, as any other Argentinian, I've watched and played football pretty much my entire life. And you know what I have learned? That you don't get better at playing football just by watching games on TV. This seems obvious, right? To become a better footballer, you have to go out and practice. The same applies for data science or any other analytical discipline. Just watching videos doesn't make you an expert. You have to practice and put your skills to a test. That's exactly what we're trying to do at Data Wars. Data Wars is a platform 100% focused on practicing data science and applying your skills with real life projects. There are no videos, just projects to resolve with bite size activities that you can check at each stage of the process. The best part is that it's entirely free and we'll explain you how to sign up in just a bit. And this is also the reasoning behind this by example series. This video focuses on resolving real projects, brainstorming and discussing the solutions and the pitfalls along the process. We'll encourage you to try to solve the projects by yourself first, even pause the video before we reveal the solutions. We want you to put your skills to a test and challenge yourself. This video covers all the most important aspects of data management with pandas, including data analysis, data cleaning and data wrangling. Each project focuses on a different topic and the complexity grows from start to finish. We have separated each project as a chapter and you can jump back and forth. As we've mentioned before, we encourage you to pause the video and try to resolve each activity by yourself first. You can find a list of all the projects we are resolving and the instructions to sign up at datawars.io.freecodecamp. With all that said, let's just get started solving projects right now. In this project, we're going to be practicing our skills dealing with pandas data frames. We're going to be doing some selection, understanding index selection. We're going to be creating a new column and we're going to do some statistical summarization methods. And finally, we're going to do some question answering by creating conditionals, okay? So like selection based on different conditions or queries that we want to write. So this is kind of on the simpler side for this series. We're just getting started with data frames, again, doing statistical methods, some selection by the index, creating a column, doing some conditionals and that's it. If you feel comfortable with these topics, just move ahead to other sections of the video so we get a little bit more challenging. As usual, I'm going to encourage you to just pause the video before each activity and try to resolve it by yourself. So you can gain some of that application of the skills, right? Worst case scenario, you can just resume the video and take a look at the way I resolved it. And by the way, there are going to be different ways of resolving these things, these activities. So you might even stumble upon something new that you do by yourself and I do something different and that can be a very rich experience. So let's get started. This data frame, the data set we're using, is a data set containing a big list of English words and the index is going to be the word itself and we're going to talk about the index in a second. And then we have two columns, chart count or character count and the value of the word. The character count that's easy is just the length of the word, that's it. And the value is computed by adding up all the individual values of each character and the individual values are just defined in this way. So A is one, B is two, C is three, et cetera. So in this case, it's one plus one. One plus one plus the value of H, which I don't know where is H, 10, 11, whatever. Actually, we know it is eight because this is one plus one is two and the value is 10. So H is probably the word, the character number eight. And that's it. This is already given. So I have already read the data frame and we're going to get started with some activities. The important piece about this data frame is that the index is the word, like the words themselves make the index. So whenever we want to access a given word, we can just do it by the index. And this is why it's so important to understand how indices work in pen. So let's get started right off the bat with the first activity, which is how many elements does this data frame have? There are multiple ways of answering that. The first one is with the info method, which is one of the most common ones. Pretty quickly, we go with info and it gives us an understanding of the index. It tells us that the index, just an index with entries that go from AA, and that's it, to these words, which I don't know what it means. And we have a total of 172,821 words. We can also use the shape method. This gives us kind of the shape of the matrix if you want in the data frame. And of course, the values are the same. So we're going to plug this one in and see how it goes. There you go, it worked. Okay, moving forward. What is the value of the word this thing that I'm not going to even pronounce? And this is a very interesting activity. Because remember, this is a very interesting activity. Because remember, we're going to be doing selection by index. So as the index is the word itself, I can just use the dot lock method, and this should be familiar, dot lock, that does index selection. So it can just pass whatever value I want for an index using the dot lock method, and that's going to give me the results. In this case, it gives me the row itself, the entire row. So we did like this row selection, but the result is in a series. So the projection, to put it away, the result of row selection, which is kind of horizontal structure, is going to be a vertical structure, which is a series. You see the shaping, the transposing operations. We go from something that is a row to something that is a series. And it's not pretty special. Don't pay too much attention to it. It's just to refer to the fact that the row is represented as a series. And here, we can see that the value of this word is 317. Something also very convenient if you're doing selection is that the df.lock method, and we're going to increase here the size, df.lock accepts two parameter, the index selection and then the columns, right? Why is that? Imagine that we have 100 columns. It's going to be very hard to just browse, scroll to the value we're looking for. You can just pause here what the column we want to use. In this case, we're going to use a value right there. And the value is 317. So let's go ahead and try it. And it worked as expected. What is the highest possible value of a word? df.we're going to use two methods. Let me show you once again, data frame. What is the highest possible value? We can do df at the value and do a max method, right? That's going to give us the maximum value there. Or we can just do df.max to have the max statistical method computed for the whole data frame, right? In this case, we see again that the value is 319. Or something that is pretty common is df.describe. And this method is just going to give you this scribe. There we go. Oh, got it completed. It's going to give you summary statistics of all your numeric columns. In this case, we only have two columns and both are numeric, so we're good. And it gives you summary statistics of all the values right there. So for example, the average value, the average char count, the minimum value, the maximum value for character count, the maximum value for value, et cetera. It's going to give us some summary statistics. So I think we have multiple methods. We're going to go here with 319 and submit the activity and that worked. Now the next one, which of the following words have a char count of seven and a value of 87. And this is pretty interesting because in the way we did selection before, I'm going to copy this thing right here. We, the way we did it before was just by passing one value of the index. We worked with just one word. But selection in pandas, df.lock here, takes potentially a list of index values to retrieve. So here, instead of passing just one value, I can pass each one of them. And there's going to be a little bit of an annoying procedure. I'm going to just copy and paste all the words here. You feel free to fast forward. I will not copy this one because it definitely has more than seven characters. Just going to, you know, quickly and see which ones have seven characters. I think this one has more than seven characters but doesn't matter. It's either anyways, and now you can see that with df.lock, you can actually pass multiple indices if you want to get multiselection or just one, you want to select just one individual row. And to answer the activity, which of the following words have a char count of seven and a value of 87? It's glowing right here. We can just put here glowing and submits and that works. Just a common, as we were doing before, the first element in this case is a list is the list of indices to select. The second one could potentially be just a column. So here I could say value for them. Oh, I missed a square bracket. And I just get the value for each one of these rows. Of course, in this activity, we did both the char count and the value. So that's why I didn't do it, but just a clarification. So what is the highest possible length of a word? We did it before with describe. We're going to do it again and char count. The maximum one seems to be 28, there you go. Moving on to the next section, which is exploring interesting words. So we did before this activity, there was that this word, and I'm not gonna pronounce, is the only word with a value of 317. Find the only word with a value of 319. And there are multiple ways of solving this one. We could, let's say we do some sorting first. It's not gonna be the most effective way, but let's do some sorting. Let me see if I can put everything in the same frame. df.sortvaluesby and value, it's gonna be, I'm gonna say ascending false. In this case, as this word was the one with the highest value, just by sorting, we were able to reach that result. But of course, that is not always the case. What happens if here, it's asking us for, I don't know, the value of 18. And that is clearly, or even worse, 50. It's clearly in the middle. I have to just browse the data frame to find the correct answer. In this case, what we need to do is some selection. We need to do df at, I'm gonna do the whole syntax and we're gonna explain it later. .lock df at value, it's gonna be 319. And this is the first idea of conditional selection in pandas. We have the word, I'm gonna just plug it in, see if it worked. And if we have a good activity, there we go, it worked. Now, how does this thing work? Remember that whenever I assume you have worked with this before, whenever you have these operations in pandas, and if you haven't, check out some other simpler projects we have in the platform that explain this in more detail. The idea is we are performing this operation that returns a Boolean array, right? So again, refer to the project in the platform. We have a very, very thorough stepbystep process to explain these topics. But basically, this creating a Boolean volume as saying select this word, select this word, or select this word, and indicating if we wanna retrieve it or not with a false true value. So in this case, we don't want the AA word, we don't want the AAH word, et cetera. But the ones that fulfill or match this condition will have a true value here. In this case, it's a long Boolean array, it's a 172,000 element Boolean array, and there's just one true volume, which is the one for this word. So once this Boolean array is resolved to put in a way in memory, we pass that Boolean array to.lock method, and that returns the value. So here is to kind of wrap it up with this idea of.lock, we have three ways of doing.lock. We can pass just one value as we did before for the index, right? We can pass several values for that match the index, or we can pass a full Boolean array indicating which elements, which rows we want to select by just putting a false or a true volume. One tiny comment that's kind of a question we receive all the time is that is this efficient? We could have resolved this thing with just iterating and not using any memory to put in a way because at the end of the day, we have to create this Boolean array, which is gonna set in memory, and then we do the selection based on that Boolean array. So the question is, why are we gonna create this intermediate Boolean array if we could just, you know, each radius, right? I can do something like four row in df if row at value equals 319 print row, just to put away in reality, have to also use the index. But anyway, in this case, I'm just doing a more imperative way of resolving this activity, and I'm not using any memory. I'm just, the data frame is data frame, there's existing memory. I create an auxiliary slot just for this particular row, and this seems to be more efficient. But the reality is that these Boolean arrays are actually very, very tiny. They might look like they are this huge, huge, you know, series to all these string values, but in reality, these are just ones and zeros. It's a very small one bit element array, right? And the index is pretty much the same we have. So just a comment on the side, I don't wanna get too technical, but again, the beauty of panda selections, this dot lock works by the index, and again, we can pass just one value, multiple values, or a full Boolean array. All right, moving forward, what is the most common value? To answer this question, we can refer back to, let me do value, scribe, there you go. And we can do different statistical methods, right? So in this case, we have the mean, standard deviation, minimum, maximum, et cetera. We also have the median, which is right here, which is a value 103. And there is one that is not showing up here, which is the mode of the given series or a given array. So we could have an understanding of the statistical methods. So we're gonna do something like df at value mode. And we get that 93 is the most common value. Now, this doesn't tell you much, because it just tells you of all the different values we have in our data frame, let's do that. 93 is the value that shows up the most times. And we don't know in which situations, because the character count might be different, but there are different characters, so the value is different. But a very common method, something that I use all the time is the df at value, and we're gonna do value counts method. This is a very, very helpful, I get just the first ones. A very helpful method is gonna give you this given value appears 1,965 times. So 100, as activity said, is the second most common value. And there are 1,921 words that match that value. The value 93 is the most common one, and there are 1,965 words that match that given value right here. We could do something like df.lock df at the value equals 93, and we can get here, let's get the first 10. All these words have the same value, even though they have different chart counts, right? Because they have different characters. Let me do sample here, so we get a random sample of values, so right here we have, for example, in jests have seven characters and the value is 93. Again, the sum of the characters results in 93. But let's do it again, I'm gonna keep that one there. The testable has 10 characters and has the same value, right? So again, to compute the mode of values, you can use the mode of statistical method, or for me, more common, very useful is the value counts method gives you not just the most common value, gives you kind of a ranking of the most common values in a column, and also gives you how many samples you can find of that value. All right, so, oh, we haven't done it. Let's see if it passes, 93 is our most common value. There you go, it worked. What is the shortest word with the value 274? Let's resolve that now. df, we're gonna do a little bit of selection first, so let me align that so we can zoom in. What is the shortest word with the value 274? So first, we can start by selecting all the words with a value of 274, there you go. And then what we could do is either sort the values by char count, and this is gonna be the shortest one, this is gonna be the shortest one, or we could have done a little bit of more selection. I think that just by doing this method, it works. We could have done something like we get the value, the char count, sorry, here. So we have that only the given column, and then we get the minimum value, right? So what's the minimum value, 20? With this thing, we could have also extended our query and do df.log, I'm gonna do that, and this, and the df.log, no, df at char count is equal to 20, that's the one we got before, and this is equal to that, and there we go, we can do a very quick selection. We could have done it also in a way that it's dynamic, so we get plug this value here, and then we can do a very quick selection. So we get plug this value here, and this is all the same thing. At the end of the day, I think that just, if we don't have too many elements, sorting the values is an easier way to resolve it. So let's go ahead and do it, there we go. By the way, this is something that we do in production to put in a way like in our daytoday jobs all the time. Sometimes you will need to build more dynamic solutions, but sometimes you're just doing some analysis, just exploring data, you can keep it easy, just with the different methods. You can hear the important pieces applying the right technique for the right problem. All right, moving forward. Next activity, this is interesting. Create a column ratio, which represents the value ratio of a word, which is defined as the value of the word divided by the character count. So let's do that right now. Stop me if you wanna practice this by yourself, but the way to create this ratio is gonna be, let me show you the F first, though, head. It's gonna be df at ratio, that's the name that it's asking us, the column that it's asking us, is gonna be equals to df at value divided by df by chart count. And now we're gonna do this thing again, and we have a ratio computed right here, the value divided by the chart count. Let's check to see if it works. It did work, we are good to keep moving forward. So a few more questions, what is the maximum value of ratio, df at ratio dot max, 22.5. What word is the one with the highest ratio? And here, multiple ways to solve it, again, sort values, I think it's a good alternative. We're gonna do by ratio, but here, let's do it right here, in this way. By default, our values is sorting in ascending mode. We actually want it flipped, we wanna start with the highest one at the top. So we're gonna pass ascending equals false, we're gonna pass this order. And now we have that the highest ratio is 22.5. What word is the one with the highest ratio? 22.5, the word is x, u. As we know, the highest ratio, we could also have written a query, df dot lock, where df at ratio is equals to the maximum ratio, and that is also x, u is the same result. So again, two different ways of resolving the same activity. It's important for you to have all the techniques in your tool belt, then which ones you use, it depends on what problem you're solving. How many words have a ratio, how many words have a ratio of 10? So what we can do here is we can do df, we could have done, this is not gonna work so well, value counts, to get an idea of the values. And here we have just, this was, we were very lucky that 10 is a common enough value that there are 2,600 words with it, and we can see it. But if this was not such a common value, the ratio we're looking for, it's probably buried in this sea of different ratios because there are actually 1,333 different ratios. So as ratio is a continuum variable, there are multiple individual points, it's usually not convenient to use value counts. Instead, what we wanna do is just write a simple query, df.lock all the rows that have a ratio of 10, right? That's the query we wanna build. Gives us a bunch of rows, what we can do is just do a shape, and that's gonna give us the same number that we have right here. Gonna plug it in here. Let's do a quick, quick stop here in asterisk to mention the.query method. So df.lock and all the selections, usually the prefer method because it's the most powerful one, but sometimes you just wanna use the query method. That is just kind of a shorthand. You can write it in plain English. It's kind of Pythonbased, and the query method just works in this way. We can say ratio equals 10, and it's relatively simple. You can use it whenever you have simple conditions. There you go, here's for you to compare. I personally, myself, I usually prefer this method, but that's because I'm just very used to it, and I like thinking in terms of Boolean arrays and combining Boolean arrays and all that. Up to you if you wanna use query, the one that suits you better. Moving forward, what is the maximum value of all the words with a ratio of 10? So we're gonna keep, let's keep query here. This is the results. And what we can do here is we can sort the values. Let me put in context again the activity. What is the maximum value? Sort of values by value. Value ascending false. And here we can find what is the maximum value of all the words with a ratio of 10, right? Head, there you go. We had, what is the maximum value? 240, it seems. We could have also done here, actually for this particular solution, I think this method is gonna be better. We can do that, and we're gonna do value, just get the max. We should get the same result, 240. And that's the same answer here. The beauty of sort values is sometimes you see the data. In this case, you have to trust it, which is fine. We have an analytical resolution, we can trust it. But it is really like you can trust it. Like the ratio is 10, chart count is 24, the value is 240, it's usually a little bit, I don't know. It leaves you at peace to see that the data is okay. Let's keep moving forward. Of those words with a value of 216, what is the lowest chart count found? In this case, we have pretty much the same thing. We're gonna do here. The F, let's do query now. And we're gonna do, of those words with the value is 260, so value is 260. What is the lowest chart count found? So first, this thing is gonna give you all the words with a value of 260. Now we can sort values by chart count. And that's gonna give us, what is the lowest chart count found is 17. So here we're gonna find 17, there you go. And the last activity we're gonna be done based on the previous task, what word is it? This is the word and we are good to go. One important, one minimum comment about the query method and we're just gonna wrap it up with these particular projects is that when your columns have spaces, you need to surround them in backticks. So let's get, let's invent a new activity just by ourselves here very quickly. I'm gonna use describe, there you go. Let's say I'm just writing this on the fly. On the fly, find all the words with chart count greater than the mean or the average chart counts. Chart counts, yeah, character counts. All right, so this activity we're like just making up on the fly. How can we, first we can compute and let's say we have, we're gonna mean chart counts, it's gonna be count. It's gonna be.mean and we're gonna print it. I'm gonna show you how to write the query using this variable. We're gonna do df.query where chart count and this is not gonna work is greater than nine, right? So this is not gonna work because there are spaces you have to surround them with backticks. That's the first thing you wanna work. The second thing is if you wanna reference this variable in here, if I do this, that's not gonna work either, just gonna blow up because by default, anything that is a name within this query is gonna reference a column. So if you wanna reference an external variable, what you have to do is pass here the ampersand symbol. In this case, gonna say, give me all the values in which this column surrounded by backticks, so respect the white space is greater than this thing and this thing is referencing an external variable. So go out to put it away to the global scope or local, whatever, and find this value, plug it in and run the query and here is what we can do right there. So again, the query method is convenient. I personally, myself, I prefer to use the.log method. I like to combine it with column selection. I like to think in terms of Boolean arrays, but it's perfectly fine to use query. Just remember these tricks, right? That sometimes you're gonna need to use backticks for columns with white spaces and you can reference external variables with the add symbol. That is it with data frames. Let's keep moving forward and solving more projects applying those data science skills. In this project, we're gonna practice how to filter data, sort it, do some selections, some querying, all very useful data analysis techniques. The data that we're gonna be working with is a dataset containing Pokemon information, including their type, their stats, some total attack, defense, and all that, their generation, and their legendary status. So let's go ahead and just read the data to get started and we're gonna start working with activities one by one. As usual, just pause if you wanna resolve it by yourself and then you're gonna hear me with the explanation. What I'm gonna try doing in this project or for this project is giving you all the different possibilities we can think of. So solutions with.lock, solutions with ilock if that applies, and also solutions with the.query method. The first thing you have in this notebook is a little bit of an information in terms of distribution of the Pokemon we have. So for example, these are all the type one Pokemons and we also have some analysis of, for example, their stats. So for example, total, we see that there are a few very powerful Pokemons, both in terms of a histogram and a box spot. So all these visualizations are usually pretty useful, right? When you're starting your data analysis with a new dataset, you just do a quick visualization of how your data is distributed in terms of, for example, categorical variables, how they are assigned, or also the ranges distribution of some numeric variables, like in this case, the total ones. So we can see the most powerful Pokemons. In this case, there are legendary status. We can also consider a categorical variable. And on that, let's get started with the activities one by one. So how many Pokemons exist with an attack value greater than 150, right? So let's take a look at the data first. That's what we're dealing with. And we're going to focus how many Pokemons exist with an attack value greater than 150. So let's get started, pause if you want. And we're going to do df.lock df at attack greater than 150, right? That's going to give us the full list of Pokemons with that attack. And we can kind of see that there weren't like too many with that value already with the fox plot. With the query itself, we can get a real sense of how many values we have. In this case, we have just three. We could also do something like shape to get it. But again, we can clearly see that there are only three samples that match that given condition. We can also do the query method. So I can do df.query where attack is greater than 150. And we get the same results. So let's try it out. See, there you go. It worked, correct. Moving forward, select all the Pokemons with a speed of 10 or less. So in this case, we need to create a sub data frame. So it says right here, story your results in slow Pokemons.df. So in this case is a speed of 10 or less. So that's gonna be pretty, pretty slow. It's right below here. We have probably 10. It's gonna be a pretty small amount of Pokemons. So let's take a look first, how many fulfill that condition. speeddf at, oh, mistype. Speed is 10 or less. So this is less or equals and 10. And we have only a handful, one, two, three, four, five. And we can of course assign that to this variable to have a final check with activity. Let's do it on the side in parallel. There you go, it worked. And of course using.query, its query speed is less or equals than 10. From now on, I will try to stick to the.lock method is the one that I prefer. Instead of using query, but you can use either. I prefer to work with Boolean arrays. Remember this expression, it's gonna be just a Boolean expression, right? So how many of these values are, the values are true are basically that the values that match the given condition. This is pretty useful if we wanna count the values. And this is something that I could have done in the previous one, which I didn't realize showing before. Basically, if I did something like this.sum, I'm gonna get the same result, right? How many values in this full array, so array is not, attack is an array, let's say a series, a collection that has integers. And then we ask, give me an array, a Boolean array of all the ones that match this condition, this case greater than 150. So it's gonna be false, false, false, false, false. And of course, we're gonna have three in this huge array that are true. So in this case, as I told you in the previous project that we did with English words, if the array, in this case, it seems that there are just, you know, strings saying false and true, in reality, this is a Boolean array. So in reality, these are all ones and zeros, very efficient, very compact array, ones and zeros. We can sum that and we have the final result. In this case, we can count, we can sum, write all the ones, we have just three ones and that gives us the answer to the previous question as well. All right, moving forward, how many, let's go here, how many Pokemons have a SP depth, value, special defense, value of 25 or less, special ability defense. So we're gonna do df.log, how many Pokemons have a special defense value of 25 or less? We're gonna do df at sp.def less or equals than 25, because again, it's a value of 25 or less. And now we have a bunch. So now we can use the technique that we did before, that is just this.sum, gonna crease the sides here a bit. And we have 17 as a result. I could have done the same thing here, shape, and I get pretty much this table has 17 rows. Of course, this is a little bit more compact, let's say easier. So let's try it out, 17 and see if it works. There you go, they work, we're good to go and keep moving progress, making progress. So select all the legendary Pokemons. This is pretty interesting one. We have to sort the result, select only Pokemons that are legendary and sort the result in the variable legendary.lgdf. So that's gonna be df.log, df at legendary, but let's take a look first using the info method. Let's take a look at the legendary column. The legendary column itself is a Boolean column, a Boolean series given by its type. So that means that it is itself a Boolean array, with true and false values. We could ask df at legendary, how many legendary Pokemons we have in this dataset, and that's just the sum of the legendary status. And that's it, because this is a Boolean array. So remember, if we did df at attack, for example, greater than 150, and we had this huge Boolean array, false true, false true, and then we selected the ones that had a true value, we can pretty much do the same thing here. And what I'm gonna do is, we could say something like, this thing is true, right? So give me all the legendary Pokemons. What did I do wrong? False kind of, oh, Boolean index, df is equals, there you go, my bad, is equals to true. But the reality is that this column itself is a Boolean array. So let's just get rid of the true, and we say, select all the Pokemons that are legendary, just that, just pass the mask, the Boolean mask, and perform the selection. If we wanted, let's say we wanted to get all the Pokemons that are not legendary, the nonlegendary Pokemons. We can, of course, do something like false, we're gonna get how many we have. But the reality is we can just invert the array. We had false, false, true, false, right? That was our original array. We can do inversion of this thing, negate it with this operator. That's gonna give us true, true, false, true. This is false. So what I can do is I can just do the negation here, and I get the same result. So sorry, I got a little bit sidetracked, but what we wanna get is all the Pokemons are of type legendary. And to do that, we're gonna assign that to this variable. And we're gonna get the head, first five rows. There you go, all legendary. And let's check if the activity passes. This is why it's so important to understand the column types of your data. Because sometimes the selections or the Boolean arrays you're gonna be working with are not the same depending on the type of the data you have. Okay, moving forward, find the outlier. So we have this distribution of Pokemons, and we have to find this particular one, the one that has a difference value that is really big and also an attack value that it's pretty low, right? So this Pokemon has a ton of defense, but a very low attack. Of course, we could do something like df.defense.sort. Let's do df.hand, show the whole thing. Then we're gonna do df.sort values by defense, and show the first view. By default, the sorting method is in ascending mode. So we are starting in this way, we're going in this direction. We wanna invert that, we're gonna do ascending equals false. So now we have the strongest one here. And here we have the one that has a defense of 230 and an attack, right? Of, in this case, attack here of 10. This pretty much gives us the answer right away. Let's actually try it out. Let's see if this is the one, this is the Pokemon that activity requests, at least for this particular value, it is that passed. But I wanna make a comment here is that you can actually sort by multiple criteria. We could also say something that sort by defense first, and then as a second criteria, sort by attack. There you go. And then for defense, we want it to be in descending mode. So ascending is false, but for attack, we want it to be in ascending mode. Again, the result is the same because the data, it's pretty clear who is this outlier right here. But again, the understanding is we can sort by multiple criteria. What is gonna happen is that the sorting starts here, and then we're gonna sort by attack in the other direction. We can combine as many as we want of this criteria right here. All right, moving forward, more activities. Now we're gonna get into advanced selection with some Boolean conditions. How many far fly Pokemons are there? So we want type one equals equals fire and type two equals flying. So what we're gonna do is we're gonna do df.lock. And here, again, pause if you want, we're gonna do a little bit of Boolean operators. The first condition is gonna be df at type one is equals to fire, right? And the second condition, and how many do we have? The second condition is that type two has to be flying. Flying, there you go. But what we want is the combination of both, type one fire and type two flying. The way to do that is to combine them with an operator, an ampersand operator. So I'm gonna break it into different lines here. And I'm gonna put the operator right here so you see the conditions. How many far flying Pokemons are there? Seems like we only have five. Let's try the result first and then we're gonna explore a little bit more the data frame resulting. And as you can see, I haven't even looked at a single Pokemon. What I'm doing is just combining conditions and summing Boolean arrays. So this is a pretty interesting thing because what is happening here is like, let's say we had only five Pokemons in total, right? We have the first array here is gonna say type is fire and the second array is gonna be is flying, right? And we had something like true, true, false, true, false. So this is of type fire, type fire, not type fire. Yes, type fire, not type fire. And then for flying, we had false, true, false, false, false. There we go. So in this case, this is the only flying Pokemon. What happens and that's why we have like different results. Of course, we had here a bunch of fire Pokemons and here we have a cup of a bunch of flying Pokemons. We have true values for the condition. But what happens when we use this ampersand is that we do one by one, bit by bit, Boolean value by Boolean value, we do the operation, the ampersand operation, which is like the and operation in Python. So we do true and false for the first one. So the first one can be true and false. What is the result of true and false? False. And what then we do the result of true and true. What is the result of true and let me show you true and false is of course false. True and true is true. So we have that false and false is false. True and false again is false. And we could say this one was true. False and true is false. There we go. So in an and operation and we have operator one and operator two or operand, operand one and operand two, for this expression, for this whole thing, for this whole expression to be true, both OP one and OP two must, well put it this way, must be true for this operation to be true. Anything else either OP one is false or OP two is false or both are false. Anything else, anything else is false. This is just some Boolean arithmetic, Boolean operators just, you know, a little bit that applies to Python as well. But the interesting thing is that that same operation we're seeing here, comparison bit by bit, value by value, a line is what we're doing right here. So we had 47 Pokemons were of type one fire and we had 89 Pokemons were of type two flying. And then we combined those things using an ampersand, an and operation and the result was only five Pokemons. So we can actually visualize those sample points. We're gonna do dot lock and we're gonna pass that condition. And these are the only five Pokemons are of type one fire and type two flying, okay? Because we are using these Boolean operators. Okay, moving forward. How many Pokemons, oh no, one thing, one thing. If we wanted to use a query method, we could have rewritten this thing with query and we're gonna do, remember that if you have white spaces in your column names, you have to surround that with backticks. In this case is gonna be fire and type two, type two equals flying. And I made a mistake here. Flying should be a string, there we go. We have the final result. So again, this is easier to type probably. We need to put the backticks in the column that has a white space. And here we can just use Python and we can use a string. You have to make sure you're matching or on the contrary, don't matching the string quotes you're using to surround the whole expression. And then within the Boolean operators, we use the regular Python ones. We don't use the and percent, we use just the and. When we are using dot lock form, we must use the Boolean operators are and or a not. And if we're doing something here, let me see if I can do a not. Yes, we can do a not right here as well. Okay, now moving forward, activity number seven. How many Poisson Pokemons are across both types? So as you can see, right here, the type of a Pokemon is a Pokemon has two types. Let's say it has a strong type and a secondary type. The type poison can be applied to either the primary type or the secondary one, because I can actually show you that to you type one counts. We have that there are poison 28 Pokemons that have poison in type one and type two. There are where is it not 31 Pokemons that have poison as secondary type. So we want to basically say or find how many poisonous Pokemons are there in general, right? How many poisonous Pokemons we can find in either type. So the expression and let's start now with a query method. So you can visualize it first. So it's going to be type one equals poison. Type two equals poison. And there you go. How many do we have here? Let's copy this thing and do a shape to get the final result. How many 28 it seems, wrong answer. We can check that in a second. I can try using the dot log. Oh, no, no, no, wait, wait, wait. It's just typo here. 59, let's try 59. There you go, it worked. So it was just a typo, but let's now think about it in terms of the dot log method. The way it works is pretty much the same thing we did before, the F of type one equals poison, right? This is going to give us a Boolean array and we can combine that Boolean array, which pretty much the same expression, just type two points. But here, what we want to do is an or operation. And the way it works is let's say we have, let's see if I didn't delete our previous arrays. We're going to use them again, here, nowhere, here. So let's say we have poison type one and type two. The way it's going to work now is as this is an or expression, we care for any of the samples. So if this Pokemon is poison here or here, doesn't matter, we want to retain that object. So if it's true here or here, we want to still make the whole thing a true operation. That's the result of doing true or false, for example, or doing false or true, right? As we did before, and I can delete this thing and go back to our previous notes, we said that if we have these two operations, that it's OP1, operand one and operand two, and I'm still in the end, sorry for the back and forth, but let's start again, let's pick up where we were before with the end operator. This thing is going to be true only if both operands are true. So OP1 and OP2 must be true, and this is an operation. OP1 and OP2 must be true for this whole thing to be true. Any other case, everything is false. We can do a very similar reasoning with the for operation. So OP1 or OP2 must be false, both of them, for this thing to be false, anything else is true. And this is, you can just flip things and that just works. That's the idea between Boolean algebra. You can just flip things, true with false. In this case, true or false, or false or true, true or true, all these things will be true. The only way to get a false result back is by both these things being false. I'm going to get into our logic here. We say true or false is true, and true and true is true, and let's do that, we align false and false is false. So these two are false. So this was fire flying, so it's not poison. In this case, it was poison rock. I'm just making up types. It was, for example, flying poison, right? So that is also true, so true and true. So what we're doing here with dot lock, we are generating the first Boolean array and combining it with the second Boolean array with the or operation. And again, conceptually speaking, it works in this way. The result of this whole thing, if we wrap it in parentheses and do a sum, we're going to get the same value out. Remember, these are just Boolean arrays. Okay, let's keep moving forward. What Pokemon of type one ice has the strongest defense? So we have to find, and you're going to see that I usually start my activities doing the F dot head is because I need to take a look at the structure of my data. I'm going to do df dot lock type one, type one, sorry, df at type one equals ice. I'm going to start in this way. So these are all the Pokemons that have type one ice. Now I can keep going by doing something like give me the one here we can do and the defense dot max. So the maximum defense of type one ice Pokemons is 184. I could extend this one by saying, give me the Pokemons that are type one ice and, and here I'm going to use an and operation because I want both things to be true. And df at defense is the maximum that I found before 184. And if you let me, I'm going to put everything together and I could do that and give me just one Pokemon, right? So far so good. Let's put it in here, see if it works. It worked. That was the correct answer. But now let me show you something a little bit easier. In these cases, we're looking for d1, like the most powerful or the most powerful, like if we have several, but we're looking for a maximum value. What we could have done is just sort values here. We're going to sort by defense and we're going to sort in descending order. We want, let me show you the standard one. It's going to show you the least powerful, like the weakest Pokemons first. That's because this is sorted by defense, but in ascending mode. But what I do is sorting descending mode. To do that, we're going to do ascending equals false. And now we get the most powerful, the same result as before, which is of type ice. We have the most powerful one that we can see right here. So this is a more of a visualization. I'm doing some analysis with my own eyes so I can just get the first value here. It's not so programmatic. This is a little bit more programmatic. I could automate this thing and I can do something like, for example, I lock zero one and I have just the name of the first Pokemon, the name. This is a little bit more programmatic. But again, it's pretty much the same thing as far as what we're doing serves the same purpose. Okay, keep moving forward. What's the most common type of legendary Pokemons? What is the most common type of legendary Pokemons? What is the most common type? One from the legendary Pokemons. So what we can do is, let's first lock all the Pokemons that are legendary. And we did this before. So this is gonna give us all the legendary Pokemons. And now what we can do is do type one. This gives us the whole thing. And now we can do just value counts. And we can get that psychic is the most common type of Pokemons. And let's do that there. See if it works. There you go. You can combine this thing. Kind bar. There you go. To do a little bit of a visualization. But in a way, the result is correct. The important thing here in terms of filtering and all that is that we filter by the legendary status with just the Boolean array. And then we pass the type one column to get only that column. And then we got a summarization using a value counts. Okay, what's the most powerful Pokemon from the first three generations of type water? So we need to find the F.head as usual. So we take a look at the structure of our data. Find the Pokemons, the most powerful Pokemon by total. So we wanna find the total being the powerful representation here. From the first three generations, that is of type water. So let's start step by step with different conditions. To filter types of Pokemons are type water, that's simple. We're gonna do df.lock df at type one equals water. There you go. But now we have to combine it with the expression that is from any of the first three generations. How many generations do we have? Generation, we're gonna do now value counts. We're gonna get the, there are, we can actually, I think, let me see, let me see the, let me ask here, what's the syntax of the value counts, value counts method? Because what I wanna do is not sort these values. We can visualize it in a quick VAR chart to put it in a way. Value counts is the same. How can I, what parameters does it accept? Does it accept, I'm closer to find the documentation of pandas than asking the AI here. There you go. Sort false is the method, the one that I was looking for. So let's do sort false. There you go. And now I'm gonna do plot kind bar. There you go. So these are the generations we have. One, two, three, four, five, six. This is a little bit, this is not useful for the exercise in reality. I just wanted for you to take a look at the generations. Basically, what it's asking us to do is the first three generations are gonna be generation one, two, and three. Continue with our exercise. How can we get the documents of the first three generations, the way to do that is gonna be DF. We could do something like generation. Let me actually type it outside. We can do something like generation equals one or two or three. And we wrap this whole thing in parentheses. There we go. But the reality is that it's a much easier method, which is DF at generation dot is in. So we're gonna pass here a collection one, two, or three. We're gonna get the same results. So it's basically the same expression as before. This value right here can take any of these forms and that is good for us. That is the same as doing this full or. So putting everything together, what we're gonna do is let me zoom here and we're gonna break this into several lines. We're gonna do type one is water and the generation is one, two, three. There we go. And I already forgot what the question was answering was the most powerful Pokemon by total. Here we're gonna sort values by total. And as usual, let me show you what it returns. Returns in ascending mode. We actually wanna do it in descending mode. So we're gonna do sort values by, oh no, no, no, sorry. We already did sort values. We're gonna do ascending, false, and we're gonna get Kyog or Kyog or my English is bad and on top of Pokemon is worse. Is the most powerful Pokemon by far in terms of total. So we're gonna pass it finally and see if it works. I'm gonna do a quick summary. The first one is this idea of work just as usual, combining things with the Boolean array or sorting values to get answer. The interesting part is we're using this is in operator. That lets you pass several values and it's basically a simple way to write an or statement. So let's say we wanna get all the Pokemons that are of type, type one, either fire or water, we can say is in and we can do here fire or water. So any Pokemons that are fire or water, it's basically this volume has to be in this subsets. Okay, what for? What's the most powerful dragon from the last two generations? This is getting interesting. So find the most powerful by total that is of type dragon, either type one or type two. So either type from the last two generations and enter its name below. So it has to be a dragon, either in type one or two and from the last two generations, last two generations. We saw before the last, the generations are already deleted it, basically generation value counts. There we go. Is five and six are the last two generations. We're gonna write the whole thing now. We're gonna do, we're gonna break it in lines. Let's say DF at type one is dragon or DF at type two is dragon and DF at, DF at generation dot SN. And here we have the last two generations, those five or six and here, quick notes, we are, I'm using here a set. You can pass a tuple, a list, whatever. I just pass an inline set because the most correct way of doing it in terms of performance, I don't think it affects enough, but it's just the correct way of doing it. But anyway, in terms of solving the activity, let's go ahead and the way we're gonna do is I'm gonna just run this thing. We have to find the most powerful Pokemon in this set of being type one dragon, type two dragon and this generation five or six. But you're gonna find something interesting. So I'm gonna show you these results first. You can see what we get. It's type one dragon, type two dragon. That is good. So let me show you the data, type one dragon, type two dragon, so the first condition seems to be matching, but what you're gonna immediately see is that the generation is incorrect. We get Pokemon from generation one, three, four and that is because we're combining the conditions that it's either or this thing or and this thing. So the operators in the way they work is that it did the operator of this thing that works and then it did the operation of these two things. But that is not what we're looking for. The way we want it to work is to perform these two first. It's either this, either one of these and this one in here. So to do so, what we need is to surround these two operations with parentheses. So it's like the order of the operations here is important. Let's first perform this thing. It's either type one dragon or type two dragon and we want it to be generation six or four. I don't know if this syntax works. There we go, it worked. And now we can see that it's dragon in type one, dragon in type two and the generation is only five and six. So this is the expression that we want to get. Now, the only thing we need to do is sort values by total ascending false and we get that these Pokemon is the most powerful one, type one dragon, type two electric, that doesn't matter and it's generation five. So let's try the answer right there and it works. Okay, moving forward and this is important. I don't think we have another activity in this project that has like the precedence, the importance of the precedence or the order of operators, but it's an important concept. So just remember parentheses don't hurt. It's cheap to put parentheses. So if you have these complex expressions, just make sure you're surrounding the ones that you want to run first with parentheses. You can indent, you can do all sorts of things as long as you know, it makes it look better for you, could have you something like that. So is this thing and this thing, you know, actually, parentheses are not necessary here. Anyway, just keep in mind the precedence of the operations is important. All right, select the most powerful fire type Pokemons. So here we're going to say, select all the Pokemons that have an attack value above 100, above, and type one equals to fire. And we're going to do df.lock. We can actually do a query now. We can do, oh, by the way, we can solve this one with a query method first. So sorry, let's go back to the previous one. If you're passing and resuming, you're hating me at this moment. Basically, we're going to say, we need parentheses here. So type one equals dragon, or type two equals dragon. And, oh, we can't do the in here. We can, we can do the in. So we can do generation in five or six. And we get, oh, we have to sort the values. And we have the same result. Let me break this into multiple lines. It's difficult to read. But anyway, what you can see here is we are producing pretty much the same expression and the order of operations is important. Type one dragon or type two dragon, that's the first thing. And generation is in five or six. Let's see if it doesn't break when we got the wrong results. Here, when we remove the parentheses, you can see that our pokemons of generation three, one, so this is clearly not working, have to go back and put the parentheses for the quarter. So sorry, now let's move forward to the other one, which was select all the pokemons with attack greater than 100 and type one equals fire, we're going to use a query, we're going to do attack is greater than 100 because it says above and type one equals fire. There we go. We're going to run that thing. And we're going to assign it to our variable. Visualize it. Let's see if it works. It worked. We're correct. Next one, select all water type flying type pokemons. So select all these documents that have type one for water and type two flying. We're going to do pretty much the same thing as here, we're going to do VF query, we're going to do type one water and type two flying. And let's see the data we get back, water flying for both types. And let's check the activity. There we go. And finally, well, not finally, there are two, three more, but select specific columns of legendary pokemons of type fire. Okay, so this is interesting. Pause now when I saw it by yourself, it says performance selection in your data frame of all legendary pokemons that are of generation one type one type that are of type one fire, sorry, but select only the columns name attack and generation. So we're going to do the F dot law, we're going to use and there's going to be a good reason that our DF at type one equals fire and DF at legendary. That's the first result. So type one fire and legendary, I switched the order here, but we don't want to get all the columns, we want to do just a selection, we say we only want the columns and here we're going to say name attack on generation. And let me break this, these two modes. So we get it. I would get the regular right DF dot lock accepts conditions for index columns. Right. So here we have and let's actually do more parentheses. We don't need them, but let's do more parentheses. It's more clear of what we're trying to do. We need more parentheses. There you go. So this is the condition and then it comes to columns and the final result that we have right here. So type on fire and legendary and the columns are name attack and generation. Let's give it a try. And that worked as expected as well. Select slow and fast pokemons. So this is getting interesting. Now we're going to see what this visualization shows us. So select slow and fast pokemons. We're going to get all the pokemons. Take a look at this region of Pokemon speed in histogram, including the notebook. The red lines separate the lowest bottom 5% and the fastest top 5% pokemons right here. So basically we create a histogram and then we plot two red lines in 0.05 and 0.95. So it's the 0.05 quartile 5% and top 95% percent yields. And what we want to do is basically select those pokemons that are either above this 95% or below the 5%. The two extremes of the distribution, let's say. So what we're going to do is df.log. And we have the values, by the way. We can actually take a look at them. We can do here. Let's actually do this thing. We're going to do bottom 5 is this thing. Top 5 is 95. There we go. And let's show both top 5. There we go. So we know that the cutoff for a very slow Pokemon is a value of 25. The cutoff to be considered a very fast Pokemon is 110. We're going to use first the dotlock method. We're going to do df at speed is less than, because we want it to be select... Where are we? The slowest Pokemon and the fastest Pokemon is very slow with speed below the bottom 5 or very fast above top 95. So we want it to be this operation. Or, and here's another one, very fast. So it's going to be df at speed is going to be greater than top 5. Let's put this whole thing here. Slow fast Pokemon. There we go. This is our table. And let's try it out first to see if it works. There we go. It works. But there is another way, which is basically using the dotquery method. What we're going to do is df.query. And you know this already. Speed is going to be less than. And here, to reference an external variable, we've seen this already. We're going to use the add symbol. So on this thing, we don't need parentheses. Or speed is greater than top 5. And we need dt. There we go. And we have the same result. 60 arrows, 13 columns, the same result. You can trust me. But basically, the important point here is we are using an external variable and referencing it with the add symbol to reference something outside of this particular query. Speed references the column. The add this thing references an external variable we have defined before. All right. And I think we have the last one. And this is a very interesting one as well. It says take a look at the scatter plot correlating defense to attack. What's the name of the Pokemon indicated by the right arrow in the image below? So who's this guy right here? It's a Pokemon that has a strong defense and a strong attack. So what we can do is sort by both values. So we have like this case. First is legendary. And second, it has a very strong tab for attack and a very strong defense. So let's take a look. The first thing we're going to do is lock filter all the legendary Pokemans legendary and sort values. We're gonna sort by doing by defense and attack. There you go. By both those criteria. Or actually, we can stop it. Defense. So we take a look at it in a more vertical way. So we're gonna sort in this way and then in this way. And of course, we want to do ascending false. And here we have this Pokemon has an attack of 116. So it's above this line and a defense of 110. So it's kind of right here. In reality, we're looking for this Pokemon that it's very close to 150. Okay, so let's keep moving forward. We have these Pokemon that has an attack of 150. So again, right here it matches and a defense that is 140. So this one looks a lot better. Let's try it out and see if it works. We have our value. And there you go. All correct. All complete. But basically, what we're trying to do here is using this combination of visualizations with the analytical power. We're filtering, we're sorting, and we're putting everything together to answer the question. So this was the whole practice about filtering and sorting Pokemons. Very interesting one. Again, if you have a chance to try to solve it by yourself, or there are a few more projects related to filtering and sorting, all yours, let's keep solving more projects. In this project, we're going to be working with a pretty interesting problem, which is the birthday paradox. The birthday paradox comes actually from the birthday problem, which is a more general problem. That is basically answering the question. If you put n people in a room, what is the probability that two people share a birthday? So for example, I have 70 people in a room. What is the probability that two, any pair of two people within that room, within that room of 70 people share a birthday? And there is a formula to calculate that. The birthday paradox, what it tells you is that it's basically what is the number of people that I need to put in a room for that probability to exceed 50% and the counterintuitive fact that only 23 people are needed for that probability to be above 50%. So again, recap, only 23 people in a room are needed for the probability of two, of any of those people, any pair within that room to share a birthday. So only 23 people are needed for that probability to exceed 50%. And this is a pretty counterintuitive fact to be, at least to me. The first time I got asked this question, my reasoning was, well, what is the probability, sorry, what is the number of people that I need to be 100% sure that two people are going to share a birthday? And the answer is, of course, 366. There are 365 days in a year. So for me to be 100% sure probability equals one, that two people share a birthday, I need to put at least 366, that's going to be 100% sure. So when I got asked, well, now what is, how many people do you need for that probability to be 50%? My first reason, it was like, I don't know, 100, 150, half or 365. You know, it's like, and then when I got the answer and I got to calculate the answers, like, obviously, it's just, well, only 23 people are needed for that probability to be 50%. And we will actually understand why in a second. So basically, this project deals with the birthday paradox and us calculating the birthday problem, the probability of two people sharing a birthday in a group of n people. And then we're going to apply that to NBA teams. And this is going to be a pretty interesting thing because the teams we have here, we can actually run this thing. We can do tf.team.value count. So we're going to have teams that have 27 players, but then we have 24, 22. So we're going to see how many, like, if this probability stands, you know, if we're going to have here the probability of two people sharing a birthday in a team of 24 people, the probability is going to be greater than 50%. Are we going to find matches here or here or here, et cetera, right? So that's going to be the problem we're going to deal with. But before we jump to the data, we're going to start with calculating the probability and understanding the intuition behind this thing. The way we calculate this probability, and again, is this formula, is what is the probability of two people sharing a birthday in a group of n people? So we swap n here. We say we put 10 people in a room, 20 people in a room, 50 people in a room, and we get a probability back of two of them, at least two of them sharing a birthday. And the interesting part of this formula is right here is the combinations piece. And this is when this number, only 23, is needed to get 50%. It starts to make sense. Once you take a look at this combination formula here, and combinations, just a quick recap, is if you have A, B, C, D, E people, Rav, John, Mary, Susan, Violet, et cetera, the way you can combine them is basically A with B, A with C, A with D, A with E, B with C, B with D, B with E, C with D, C with E, and finally D with E. These are all the combinations you get. So pretty quickly, if you start thinking in pairs of people, this number grows pretty quickly. If I put just one more person here, let's say one more person joins the room, I start adding, I will add five more combinations, because it's F with A, B, C, D, and E. So it's got to be A and F. Now B and F, C and F, and D and F and E and F. So one more person, what did I do wrong here? One more person that I added to the room, and this number of combinations grows by the previous amount of people in the room. I add one more person, G, and I'm going to do G, F, E, D, C, B, A, where it's going to grow by six. I add one more person to grow by seven. It keeps growing and keeps growing and keeps growing. So that's why, at least to me, that was what made this problem click and understand that it's a very small number of people that we need, only 23, for the probability to exceed 50%. We can actually calculate the combinations piece. So let's get rid of this and buy F. So F is no longer invited to our party, so we have A, B, C, D. We can calculate the result of combinations of N taken by two, and this is a pretty simple formula. It's N factorial divided by K factorial times N minus K. N on K, in this case, is N people or N taken by K. In our case, it's going to be N taken by two. But we can very quickly hack this formula. It's going to be death. We call it NCRR of N taken by K. And the way it works is you can just do math.factorial of N divided. And if you let me, I'm going to do something just here, shortcuts. This is the beauty of Python. I can just assign a variable to a function. factorial of N divided factorial of K times factorial of N minus K. And I will return this whole thing. We have that the combinations of five people, NCR, of five people taken by two is 10. And we said if we add a sixth person, this thing is going to grow by five, right? So it should grow by five and have half now six people 15. If we add another person right here, this thing is going to grow by all these previous ones. So it's going to be by six more. So we're going to do if we have seven people, they should grow by six to be 21. There you go. So we're calculating this thing on the fly. That's the way it works. So now let's get to the activities. And this in this case, the the project is asking us to calculate the probability right when N is equal to 10. And we can actually take a look at there is a table here we can kind of cheat. That is the value, but we can calculate ourselves. And to do so, what I'm going to do is something like we have one minus 364 divided by 365. And here we're going to do we're going to use our formula or sorry, our function that we calculated before that is equal to 10 people taken by two. So and taken by two in this case, and it's going to be 10 10 taken by two. And we're going to use parentheses here just in case on our on our probability is zero point 11 614 in the table was point seven. I don't know how they computed what rounding they did, but it's pretty much the same value. Let's see if this is okay. It is okay. It's asked us for now equals to 15, but I'm going to go ahead. And it's asking us to implement the function. So given number of people calculate the functions, we can do it generically. And the way I'm going to do it, it's going to do return this thing. And I have to swap just one parameter that is here number of people. There we go. And now we're going to do birthday probability of 15.25 and put here 25 0.25. And it works as expected. And we can check now the birthday probability function of once. And it worked as well. So we're good to go. So again, this was quick recap that is for this person not to be extremely mathy, but it was just a quick recap of the birthday problem. And now we're going to apply that to our data set to see how many people within a team share a birthday, if any, right. It's going to be a pretty interesting one. So the first thing that we're asked to do, I'm going to delete this thing solution, is we need to extract. Let me show you again the data frame, we're going to extract the birthday birthday from the birth date function. So date is the actual date, day, month, year, we want to extract only the birthday, right. So for two people to share a birthday, they just need to be month day. It's like, hey, I, my birthday is September 29, yours is September 29, we share a birthday. But potential is going to be different years. That doesn't matter. So we need to extract here the month and the day from this data frame to do so. We can use the STRF time function string format time function. There's actually part of Python in this case is implemented for a tuple and it's implemented. Let me show you this here. It's implemented in the column birthday with a DT special accessor. Don't worry too much about it. The only thing we have to do just go ahead and Google the syntax to get this thing to get this format as expected. The way it works is this function is going to receive a formatting. So for example, we can get the year and the day right there, we're going to get they and year. And here we can put whatever we want. We can put an ad sign and hello world. And it's just going to be a formatting. It's going to format this string that's going to replace with special value, starting with the percentage symbols. And the question now is, how can we get only month and day? This is what it's asking us for birthday. We can actually go ahead and ask our assistant so we can say, how can we format the column birth date in the format month day? Do we have month day without space? And let's just go ahead and ask the question. I'm going to precise here. There you go. And we get pretty much this format. Pretty interesting because it's actually the correct answer. And let's try it out. Going to copy this thing. We're going to go. And this is the correct format so you can see. If you want, you can Google, we can say STR of time pandas. We're going to find this method. We can here find Python string format documentation. And here you can validate that percentage D is going to give you the day with leading zeros, which I can't find. But trust me, there you go. Day of the month. Zero padded. And then we're going to use percentage month, which is zero padded month. And then you can get year. You can get year with the four digits. You can get day of the week. You can get and PM four times. Again, you can do any formatting you want. In this case, we only need the month and day. So this is the format that we are looking for. Close this one, and we're going to assign this value here. And we're going to check to see if it works. There you go. It works. Now, we know already what we want to answer is how many or which players or how many players within a given team, this is important, share a birthday. So we need to separate all the players within a team. We need to find the ones that share the given birthday. We could potentially think about these problems in different resolutions, for example, finding duplicates within a team, doing group by operations. But those are all at least given the projects we're solving. Now, things are a little bit more advanced. And basically, what I want to communicate with this particular project is that sometimes we can find clever answers, clever solutions that will pretty much give us the same results. And the one we're going to do here is we're going to use combinations, community targets to pretty much solve the same problem. And here we have an example. We have the built in combinations formula, and we have something built in. We didn't have to actually write the one we did before, but just for the sake of the example, we did it. And here, the way to think about it, forget for a second about the NBA players, the way to find these people matching is first we're going to use this combination function. What it does, it puts, it aligns combinations within a given collection. So the same thing we did here with our people, so combinations right here, this thing, so remove F and G, there you go. It's going to put A with B, A with C, A with D, A with E, B with C, etc. It's doing the same thing here. John with Mary, John with Rob, Mary with Rob, we can add someone else, we can add Susan, we can add Violet, and then we're going to do, John, Mary, Rob, Susan, Violet, Mary, Rob, Susan, Violet, Rob, Susan, Violet, Susan, Violet, those are all the combinations. And then we have all the birthdays, so let's add two birthdays, let's add July 20th, and let's add September 20th, so we have another repetition. There you go, it's going to do March 5th, September, March, it's going to do the combinations again. And then what we can do is we can put together these things with a little bit of pen. We can create these separate data frames aligning these people and aligning these birthdays, and then combining them all together with this simple operation. Oh, and I just realized that I have overridden our original data frame, that doesn't matter, we'll have to rate it, rerate it. And now we have all these combinations of people, their birthday, and now we can just ask which ones of these people are matching, and we have that one and six are matching, so one is John and Rob, because they are March 5th, both of them. And six is Mary and Violet, because they're both September 20th, right? And we can apply the same reasoning, the same solution for our NBA data. Here what we're doing is we're not doing any group by operations, we're not doing any algorithmic nested for loops that could potentially work. What we're doing is we're being very smart and using combinations to reshape our data. We're going from, let me do a little bit of a drawing here if you allow me, we go from a small data frame with one, two, three, four, five people, we're reshaping it, we're creating these long formats with all the different combinations, and now we don't need to algorithmically iterate this thing over and over and over again, we can just answer data by finding chunks here. How many, which combinations here are true? In this case, it's one, no, I'm not good drawing, one and six. What I'm saying again, and we're going to move forward in just one second, is sometimes you need to work smart, you need to understand your data, reshape it, be creative in the way you work with your data to resolve the problem, and there's going to be a lot more scalable than think it algorithmically. Because trust me, when you start working with big pieces of data, these solutions that are more declarative are going to be more scalable than algorithmically. We cannot parallelize an algorithm, we could potentially break this thing. Imagine you're working with millions of records, you can put this thing into different servers and check it in parallel, that could be completely possible. But anyway, I'm getting ahead of myself, and we're going to work now by solving the activities that we are asked in this particular project. So as I told you, I am stepping over this data frame, I'm going to reiterate it again. Where is our data frame? Right here, and we're going to recreate our birth date column. There you go. We're going to go straight to the activities. How many pairs of players share a birthday for the Atlanta Hawks? And again, we want to use the same solution as before. To do so, the first thing we have to do is to only get the players from the Atlanta Hawks. Because we don't want to compare every player with every player, it's going to be like a huge number, right? So we want to get, we actually have the number of players in the Atlanta Hawks going to be, let's put it in a variable, it's going to be df.lock, df.team equals, let me copy directly from here. And that's, we have teamsdf.shape. We have 22 players. So now, what we want to do is pretty much the same thing we did before. I'm going to do, I'm going to copy this thing. I'm going to paste right here. I'm going to do, instead of combinations of names with a variable we defined, what I can do is just do teamdfs at player. Here I'm going to put player 1 and player 2. There we go. And I have the correct results. One interesting comment here, completely on the side. We were QAing this project with someone that resolves the project and make sure that the quality is good, there are no errors. And this person was finding an error and saying, I have too many names, right? And I don't know what's going on. And it was a very imperceptible problem that the person was using df instead of teamdf. And he said, is this possible? I have 150,000 rows. And this is an interesting piece because you have to kind of understand the big range of data you're working with. We were working with the Thunder Hawks and we needed to create these combinations of players. We have 22 people in Thunder Hawks. How many combinations of pairs you can create. And this is, it's important to have a range, a quick ballpark estimation of what data you're working with and what should be the result. Because I honestly don't know if it's 231, but I do know that 100,000 is too much. It's definitely too much, way too much. So this hints is like understanding the data you're working with, this kind of quickly gives you an understanding that there is a mistake in something you did, right? So if you forgot you were filtering by the Atlanta Hawks and you wanted to create pairs of only these 22 players, and instead you created combinations of 551 players, that number grew by a lot. We actually have our formula, NCR of 551 taken by two is the same number, 151,525, and NCR of 22 players, 22 players in the Atlanta Hawks, give us 231 rows. So this makes a little bit more sense. So anyway, just a comment on the side, that meant is like, again, having an understanding data we're working with. So let's go back, rerun this thing, the names DF, we have the 231 rows. I'm going to do the same thing for the birthday, birthday and do birthday here. And this is going to be birthday. And here we're going to do name it birthday one and birthday two. And finally, we're going to put, by the way, they are aligned to 131, 231. We're going to combine them with the same concat operation we did before. I don't want to overstep the name. So I'm going to do check DF and the names and birthday. And now let's take a look at our data frame. We have the combination of the player and the birthday of each one of the players. Now we can ask the question, how many pairs of players share a birthday for the plan the hogs? And do is a birthday one is equals to birthday two. And we're gonna sum this whole thing. Seems like there are two players. And then what we're going to do is teamdf.lock this thing. No, check the. There you go. We have these two players. So teamdf. Let's see if all the variables are correct, because I might have done something wrong here. Quick recheck. Teamdf is that. We have birthday. Check the F. And we have two players. These are two pairs. Let's go ahead and try the answer of two players there. Wrong answer. Try it again. Let's go ahead and recheck our thing. I want to make sure I use the rec team. And then we have the player and the. Oh. This is a very unlucky mistake. It's a very unlucky mistake for sure. What I'm checking right here is birthday. I'm using birthdays. And check the dates that we have in this particular point. This is just bot naming on my side. I used the old data frame that I used for the sample. And the dates are in this format. That is September 20th, whatever. And I just recreated this thing for the entire data frame. So my mistake, let's go ahead and delete birthday. And delete it. And we're going to use this variable name now. And try to recheck it. And it seems that we have three now. And effectively we do have three people. Let's try it out now and see if it works. Now it works. Again, the previous mistake was just using bad variable names. I should have used something like testing, a combinatorics birthday, or proof, whatever, instead of the real variable names. But we have just fixed it. How many pairs of players are birthday in the Cleveland Cavalier? So this is pretty much the same thing we did before. We're going to change the date. We have 22 people. It's going to be the same probability as in that now. We're going to do that now. And we have only one pair of players that share a birthday. And that's going to be June 26th. So we're going to just one pair. And that works. And finally, we got asked in the Dallas Mavericks who shares a birthday with JJ Boraya. What we're going to do is rerun our code. We have 24 players. What is the probability here? NCR of 24. NCR 24 taken by two. And we have 276 combinations. No, we actually want to do the birthday problem. There we have a 0.53 probability of two people sharing a birthday. Let's actually go ahead and do it. And we have one shared birthday. And it is JJ Boraya and Doron Williams on June 26th again. And that is the final result. So anyway, a few things we saw here. I think it's pretty interesting the way we have solved the project without using any algorithmic, imperative, and nested for loop solutions. We used a datadriven approach, thinking about how we can expand this data, kind of mapreduce sort of solution that I think scales pretty well. And also, I made a few mistakes that I think were interesting to see live. And the fact that we're combining these conceptual things, resolving these conceptual challenges, mixing it with real data. We validated that this birthday paradox, we have two or three teams, sorry, we found it for at least three teams right here, Atlanta Hawks, Cleveland Cavaliers, and Dallas Mavericks, that there were pairs of people, pairs of players, sharing a birthday. So that is pretty interesting to see something that is statistically proven, or the probability is high enough. Now we see how the resolution in the real world data also applies. So anyway, try to take a look at the project by yourself and try to resolve it by yourself, and let's keep exploring more problems together. For this project, we're going to be combining our datacleaning abilities with our string handling abilities. And these two scales together are extremely powerful when it comes to the process of handling data that is coming from the real world. So, so far we've done a few projects that had a data was pretty much perfect, we didn't have to do much handling, munging of it, but that is not the real world. Usually when you're collecting data from different sources, you're pulling it from different APIs, databases, or it's even human generated, we're going to be dealing with a lot of strings. And as those are going to be different sources and humans make mistakes, we are going to have differences between these data points. And when strings are involved and humans are involved and multiple sources are involved, the result is pretty much a problem. We will always face a little bit of an issue in terms of the data we're working with. So it's very important to have these sharp skills of datacleaning and string handling, that's what we're going to be practicing for this particular project. Let me tell you what we're going to be working with. We have two data sets that they're explained here, but I'm going to just go ahead and show you the first few rows of both of them here. There you go. And what you're going to find is that these two data frames or these data sets, they come from different sources, but they have pretty much the same information. That is company names. What changes is that the way these company names was inserted input is different. So the companies by themselves, like the strings by themselves, are going to have differences, but the companies are going to be the same. So in this case, we have, for example, from the first data frame, this company is pretty much the same thing as this company, but here it has a full name and here it has just a shorthand. So it's like saying Apple. Apple is not the real name. The real name is Apple Inc dot. That's the real string. As a human, it's pretty easy for me to understand that this company refers to this same company. It's just pretty basic. But the question is now, how can we make that programmatic? How can we build this sort of artificial intelligence to find the companies that are matching so we can match the strings and of course continue with our analysis from these two data sources that are coming from different sources? The answer is no artificial intelligence yet. We're going to use a pretty simple heuristic deterministic method, which is the Levenstein distance. It's a simple formula that basically will give you a number based on how different two strings are. And the good news is that this distance is calculated. This formula is already implemented for us in a package that is already installed in our lab that is called the FOSS. And the FOSS has a couple of very simple methods. We can take a look right here. Ratio and partial ratio that will give you kind of a similarity or a distance, if you want, between the two strings and coupons. In this case, I think it's easier to think about in terms of similarity. So these two strings are pretty similar. The only thing that changes is an exclamation mark. So the similarity is pretty high, 97. So we're going to be using this library to compute this distance. So let's move forward with the first couple of activities. The first thing that we have to understand is how are we going to match these companies? We could do something like a for loop nested. So let's say we have two companies, so A and B, three companies, and C, and we have A, A, Inc, and B, and Brothers, and C. And how can we match? Of course, we have more than those. We could actually take a look. We have shape of the F1. We have 266 for the first one and 368 for the second one. But the way we could do it is with kind of a nested for loop. We could do something like 4C1 in companies 1 and 4C2 in companies 2. And we can do something like distance. Let's similarity is equal to, let's just use some quick, zuda code here of C1 and C2. If sim is greater than 90, and we can store these things, we're going to make something like companies, similar companies. We're going to do similar companies.append or we're going to put C1 and C2. But this algorithmic approach doesn't let us visualize the data and do a little bit of an analysis of how the data changed, how the data is represented under the hood. We're going to just do this hard cut in 90 without the ability to see if maybe there was an 89 that was fairly good. And don't worry about the number itself, because in 1989, 1985, this algorithmic imperative approach is not extremely, it's not very analytical from some point of view. It's not easy to see why or how things are working behind the scenes. So an alternative way that we're proposing for this particular project is to create combinations of the columns and pretty much do the same process, match every company with every company, A with A, Inc, B and Bros and C, B with A, Inc, B and Bros and C, C with A, Inc, B and Bros and C, match every company with every company. And to do that, there is a very simple method which is the eatertools.product method. So we have imported the eatertools method and we're going to do here, let me remove this thing. And we're going to do companies 1 and companies 2. These are plurals. I'm going to do eatertools.products of C1, CS1 and CS2. And we need to wrap this thing in a list to visualize it. There you go. And we have pretty much the combinations of everything with everything, which is again what we were wanting to do. So now what we can do is we can just pretty much do 4, let's say we use an imperative approach again, 4C1C2 in this thing, right? And now we can say pretty much the same thing we were doing before. We can compute the similarity of these two companies. But the result is we went from a nested computational intensive 4 look to something that is a declarative, expressive, datadriven approach. In this case, we're generating the data and now we can do some different things. If we think about this thing in a data frame, we could potentially add a third column that is the similarity. So now we're going to have A, A, Inc. and the similarity column. And now we can start doing some analysis. We can filter all the values that have greater similarity. We can do some plotting for some of the companies that have some certain similarity. We can visualize, we can explore, we can analyze the data in a more declarative, analytical way than just doing a simple, not simple, but just a more rudimentary, naive iteration or imperative algorithm. So let's move forward, let's get rid of all these things and we're going to start approaching the first activity, which is basically asking us to build that data frame, build this data frame that contains all the companies from CSV1 and the product of CSV2 and also compute the ratio for all of them. So we have to put these two things together. The first thing we're going to do is we are going to do DF at, we're not asked for the ratio right here. This screenshot is incorrect. We're just going to compute, we're going to just compute the product and create the large CSV. So what we're going to be doing here is we're going to do DF1 at client, dot values, that's going to be our first list. So remember, we have either tools dot products. Here's the syntax, collection one, collection two. So we're going to pass, for collection one, we're going to pass the row for DF1 and for collection two, DF2, we're going to pass then its firm name dot values. And we can pass this whole thing to a data frame, PD dot data frame. This whole thing, going to break it into a different row and we can say column names, columns, it's going to be CSV1 and CSV2. And I have a nonmatching parentheses because I need to close that one. And we have an error with columns. No, firm name values. Name, there we go. Sorry, we have a few mistakes. This is pretty much the regular process of data analysis or data processing. And now what we see is we have created this huge, let's actually take a look, the F shape, this huge data frame with the same expected rows as the one we have right here, 97,000 rows, which is going to be the result of the product of the F1 shape and the F2 shape. So let's give it a try and see if it passes. There you go. It worked. So far, so good. We have our product of different company names so we can do a little bit of matching. Now, we are going to apply the range, the Levenstein distance, right, to compute the similarity between the companies. Of course, the similarity between these two is going to be a lot. The similarity between these two is going to be 100. I mean, sorry, the similarity here is going to be pretty low. The distance is going to be pretty high. The similarity is going to be pretty low. The similarity in these two companies, Adobe for both of them, is going to be pretty good. So we're going to be using this library, fuzz.partialratio, partial ratio because the companies have white spaces. So it's going to pretty much compute the words in different orders and this might be helpful. All right, so what we're going to do here is we're going to compute the ratio score and we're going to swap to the activity first. This is the second activity. That is asking us to compute the ratio score we have right there. We have the ratio score here of these two companies. And how can we do that? Well, it's pretty simple as we already have the values. So we have df at, we can just do values here. Values. And we can do something like, let's say, score equals fuzz.partialratio of C1 and C2 for C1, C2 in df.values. It's going to take a little bit of a moment. There you go. We can get the first 10 scores and we can now basically apply that to ratios score and take a look at the different ratios. And now we have that Adobe Systems obviously has a 100% similarity while something like Adobe with Advanced Micro Devices Inc has a lower similarity. The only thing similar is probably the Inc and the individual characters. All right, so, so far so good. The first part of this process is understanding how we created a declarative, descriptive approach by transforming our data and working with a different foundation. It's like we move the floor. It's like we started with these two different data frames and now we have just a single one that has this very useful column with the combined ratio of the similarities of each company. So now let's move forward with a few more activities and this is pretty much the whole data analysis process. I'm going to create a division here and we can get started. How many rows have a ratio score of 90 or more? And there's going to be df.log, df at ratio score greater or equals to 90. And let's take a look at that. I made a mistake. There you go. And we can now check how many we have and we have 106 companies. There you go. What is the corresponding company in CSV 2 to AECom in CSV 1? And this is the one we pretty much saw here at the beginning. This one right here. But let's go ahead and give it a try. There you go. So what we're going to do is we're going to find, we're going to do df.log or let's actually use queries. We change things a bit. I'm going to do CSV 1 is equals to this one and ratio score is equals to what? Or greater than what? I'm going to say, let's say 80 to take a look. There you go. So these two have a 100 ratio score because again, we're using a partial ratio. If we were using a first ratio, only ratio, this is going to be lower. It's actually 30. And that's because there is, in reality, there is a lot of dispersion or distance between these two words. There is no much similarity. Again, to the human eye, there's a lot of similarity here because we can zoom in and just focus on these two words. But if you think about it, it's like this whole thing makes the second string completely different. And that's why we use the partial ratio, which now gives you a 100% score because it's doing the same thing we do with our eyes, which is basically focusing attention in different words and give you the combination of individual words. So anyway, let's try it out. This should work as expected. And basically here, we are basically trying to understand what's going to be the cutoff value that is going to make us decide if a company, programmatically speaking, in an automated way, if a company name matches another company name, it's like, where's the cutoff value? So CSV1 company, the fifth activity, is Starbucks. What's the corresponding company in CSV2? We're going to do the same thing. And let's keep the ratio equal to 80. And we have that it's Starbucks Corporation. And let's enter it right here. It works. But again, the ratio score was 100. So by doing some analysis, we can start understanding how these different ratios are going to be distributed, something that I'm going to do at the end just as some other activities. So activity number six, is there a matching company in Pinnacle West Capital Corporation? So let's copy this thing once again and put that. And there aren't, like, definitely these two are not related. But what we see right here, just because I randomly choose to use 80 as the ratio score to do the cutoff, it's like there are two companies that have nothing to do with Pinnacle West Capital Corporation, but they have a ratio score of 83. And the answer is that because they have the corporation word. So we have to be very careful. So I'm going to say here, no. Let's see what's the answer. That works. And let's move forward. Seven activities. How many matching companies are there for a county of LA, blah, blah, blah? And now we're going to put this thing. And we're going to keep the ratio equal to 80. And take a look and keep understanding what we have. So there is a very clear difference here. We have two companies that have a value of 82 and two companies that have 100 and 195, so above 90. So I'll be tempted to say two here. There are two companies that match the name for a county of Los Angeles, blah, blah, blah. We should take a look at the full names. So we can do that with PD options, options. Maybe I can ask our AI assistants if I don't remember this display. Max, max, max call with none. There you go. That was one. If you ever have the dub, you can just ask the assistants. Go for it. Don't worry in Googling or asking the AI assistants because that's pretty useful. And here now we can take a look at them and we say county of Los Angeles, the first compensation program, county of Los Angeles, the first compensation program. And then we have city of Los Angeles. So I'll potentially say how many companies seem to be in CSV. And we're going to say two. There you go. They seem to be the same company. Or they're not companies, entities to put it away. So finally, a activity. Is there a matching company for the Queen's Health Systems? And what we can do here is run pretty much the same operation. And we find the Queen's Health System just with the apostrophe and the S. So is there a matching? We're going to say yes. And by doing this analysis, and we have I think we're missing one activity. I think I have completed. Oh, let's check this activity. There you go. We have no more activities. To complete all the project passed. But by performing this analysis, so first we did a little bit of data wrangling. We did a little bit of managing to get to the ratio score. And now we're kind of close to start generating the final CSV. If you want the final representation of what would be the matching companies. And here we don't have an activity in this particular one on purpose. Because there is still a data cleaning process that it's kind of annoying. It could take a little bit of time. But we can start taking a look at, we're going to say, for example, df.log df at ratios score greater than 90. And we can take a look at how many companies are matching that query. We can go one step further. And when you're doing data cleaning, something very useful to do, at least to me, is to start visualizing your data. So I'm going to do ratios score. And here I'm going to plot kind hissed. I'm going to see that if a ratio surpasses 90, most of the samples are going to be between 98, 9, and 100. So it'll be interesting to see what companies we have here. Let's actually, we can actually take a look also at a box plot. So I'm going to do box. And we have pretty much the same results. Like everything is concentrated in 100. And then we have a few samples in 96, 95, 93. So let's actually take a look at those. And we're going to say, df.query, let's do query now, where ratio, ratio score is greater than 90. And is less than 97, let's say. And now we can take a look at what's going on in here. And this is, again, this is the data analysis process. So in this case, we have one that seems to be very compelling. This one is pretty much the same thing. Idaho Power Co is the same as Idaho Power Company, jacking the box in and jacking the box in with 95. Let's actually sort values by ratio score. And we're going to start with the ones are more likely. So the Queen's Health System, pretty much the same thing. Jack in the Box, pretty much the same thing. County of Los Angeles and Seattle, whatever we did before. Sacramento City, Sacramento County. Of course, we have to understand if the city and the county for us represent the same entity or not. But nevertheless, Idaho Power Company is the same. Safeway Inc is the same. These two are probably the same. But now we're getting into a little bit of even with this one, we're getting into terrain that it's a little bit less clear what's going on here. So I'm not so sure. And this is because I don't know the business we're running. If this company or institution is the same as this one right here, potentially, right? But this is where you have to start to ask. So in this case, we have Contra Costa County and Sonoma County. And these are different. Again, I don't know the business. But I'll bet that these two companies are not the same. The same thing with again, Contra Costa and Marin County. So I bet that these two are definitely not the same. While there is a little bit of a mixed ground between, let's say, this one and this two in terms of if city and county and city and county are the same institutions, and then there is no doubt in the last two. So basically, this illustrates the real process of data cleaning, which is, first of all, if we would have done this process before, it was a nested for loop that I deleted. Remember nested for loop for company one in companies one, for company two in company when we do it manually, it's very hard to visualize this sort of relationships. So what we did right here was by first reshaping our data and having a clear picture of all the data we had, we were able to create a more descriptive representation. We calculated this ratio score company, we started doing some analysis, we answered some basic questions like, can we find a company here, there? Can we find this cut of value? We know I just chose 80, but we could have used 75 and see how it went. And then we took a look at the distribution of the ones that seem to be more likely, and we found like this middle ground, that was something like, we probably need to go back to whoever is running the business or, you know, just Google it and start understanding the data that we're dealing with. Because data cleaning at the end of the day might be, you do need a ton of domain knowledge. I can't just clean data with my data cleaning techniques without understanding data that I'm cleaning. It might be a great data scientist, but if I'm cleaning biological data or data from a physics lab, I will have no idea what data I'm working with, right? So that's a very, very common case. You have, you know, you're working with high tech and you have measurements from instruments, and you have something like, I don't know, a column T, and you have a value that is 0.0091. And it's like, is this fine or not? And maybe the physics guy comes and says, hey, this is completely wrong. You're missing the columns. The T value should be in the orders of hundreds, not in the orders of, I don't know, very small, right? So I need to understand the data, but to understand the data, to understand the domain, to be able to ask questions, to be able to Google things, to be able to go to the archives of the company, I need to put that in a good representation that allows me to do that. And that's what we're doing with this representation that we have created. So anyway, I have talked a lot so far in these projects, because for data cleaning, this is the most important thing, is being able to reproduce your experiments, visualize and understand what's going on, take a look at the project, try to resolve by yourself, or keep working with other capstone projects we have for data cleaning. It's a very fun activity pretty much all the time. This project is focused on data cleaning and some data analysis after the data is cleaned. And it's a very interesting one, because the data that we're using, it comes from someone that is scraped, right? Just scraped the HTML out of the Google's Play Store, right? So as you might know, whenever you're scraping data, you should be worried of issues in the resulting data, because web pages are not extremely structured, they change a lot. So if you have a scraping job that takes time, because we have a lot of reviews here, we have like 10,000 apps that were scraped from the App Store, that's going to take time. It's not that you can just hit a button, it's going to complete in just a second. It might actually complete in a matter of weeks, because Google bans your IP, the one that it's scraping. Of course, I think this is even illegal, right? But someone has done it. And again, it's going to take time to scrape, and time equals that things might change, you might duplicate, you might scrape the same app two times, the results might not be ideal to put in a way. So the way we are going to go with this is first understanding the data we're dealing with. So that's pretty much the first step. We're going to do df.info. And we're going to kind of brace for impact here. We know there might be things going on wrong. So the first thing is we have 10,841 entries, the total end number in the index, and then we quickly see that rating has far less value. So there are no values here. Also, we see something like, for example, reviews right here, which should be numeric, and or rating. We see that rating is actually numeric, so this is a good thing. But there are none values. Then we see that something like reviews, in this case right here, that is not numeric. It's an object, it's a string. So what's going on in here, that's the question we're asking ourselves. So let's actually get started with activities, and it says which of the following column or columns have no values. We quickly saw that rating is one of those. We can use the missing NO library, this one right here, missing NO, just gives you a quick visualization. And as usual, I like to start my analysis with a quick visualization. When I'm working with something, trying to understand the data, a quick histogram boxplot, one of these missing values visualization is recommended. The second stage is doing an analytical review of what's going on, et cetera. So let's do a right here, missing NO. We have already installed the app for you, or the library, and it's already imported here at MSNO. We're going to do a bar matrix, is the most common one, like this one. I'm going to do a bar, and we're going to do the whole data frame. It's going to show us that very quickly that rating has a good chunk of missing values right there. What else? Well, there are a few here, but it's hard to see with the bar, and one here, 840, one missing value here, and this is hard to read because the bars don't help. So now we can switch to something analytical. And of course, we kind of saw that because we have 840, 843, which we know that the full index has 10, 841. But to do so with an analytical way, we can just do is and a. We can do no summon, and that's going to give us, there you go, really quickly, the apps that have the columns that have no values. And we can sort this, doing sort values, ascending, false. There you go. So we have here, we can start answering rating, of course, both versions type and content rating type and content rating. There you go. Both are now claimed. There you go. No values in all of them. So now, second activity, and this is, again, as usual, I encourage you to pause right now, try to solve it by yourself because it's an interesting one. So threepart activity. Remove the invalid values from rating, if any. Just set them as NANs. Okay, invalid values. And let's take a look at rating. We're going to do now, again, as usual, we can start with a quick visualization at rating.plots.kind histogram real quick. And it doesn't look so. So might be okay. But we already see that there are some that are above five, which is, of course, not a valid rating. And this is my usual comment. You have to understand the data. You have to understand the domain you're working with to do correct data science because we know that the rating of an app goes from zero to five, or actually from one to five. So if you have anything above five or below one, they'll be invalid, right? And it's a number, so the column is okay in terms of the type first check that, for example, we saw already that reviews wasn't. So reviews is an object. This is already, here, reviews. It seems to be numeric, but then when we check the analytical version with info, we quickly see that it's not parsed as a number. So now it's raising suspicious. We're going to take a look at that later. But here in rating, we understand our data, and we know that the top, the maximum number that a rating can be is five, and this goes above five, so that's clearly invalid. Let's turn this thing into a box plot. We're going to do, we're going to do avert false. And now we can clearly see that there are a bunch of samples that are completely invalid. Let's take it now to the analytical version. We're going to do rating. We're going to do describe. There we go. And we have maximum value, which is 19, definitely invalid. All right, let's check it out to say, df.log df at rating greater than five, and there are a bunch of apps here, and we're going to need to claim these apps, and the rules set them as NAN. That is it. So here we're going to do these apps at rating. We're going to do equals to np.NAN. That's it. But then it says fill the null values in rating. So the ones we have just done and the other one, because there were like a thousand apps without rating, using the mean. So basically what we're going to do here is, we're going to do df at rating. Rating dot mean, we're going to use this value. I want to say df at rating dot fill. I'm going to keep that. Rating dot fill NA with this value in place equals true. And now it's pretty much the same thing. And now it says we can't check that yet, because it says, clean any other nonnumerical columns, but just dropping the values. And this is understandable because we don't have so many. So we have 10,000 apps in total, like 10,841 apps. But there are apps like occurrences, rows, symbols. But there are only a handful, like 13 apps that have either a missing version, a missing type, a content rating. So it's not that bad. We don't have so many missing apps. So we can just get rid of them. That's basically what this activity is saying. So we're going to say df dot drop NA in place true. That's it. And that works. All right. Moving on to the next one, reviews. We already talked about reviews. We saw that it was parsed. Let me take this right here. It was parsed as an object. Pandas is going to try to parse any column as a number. Okay, this is by definition. It's going to try to parse a column as a number. If it can't, because the column is not a number, they're string, they're violent characters, it will just default back to object. And that's exactly what happened here. But again, the question is like, where we take a look, df ads ratings, no reviews, dot head, and they look numbers as numbers, but it's an object. So let's check it out and see what happened. We can actually double check doing a two numeric. Two numeric. And we know this is going to fail because somehow, I mean, Pandas was not able to parse this as a number, so there is no way this is going to work. It didn't. Because basically, there are values here that are invalid. So somewhere in this list of 10,000 apps, there will be values that are not fully numeric. And let's explore for that. A good way to explore for that is I have my AI assistant here that I asked earlier. For example, what is the syntax of pd2 numeric when I was checking this project to resolve? And it's telling me that there is this method, which is, I can pass an optional attribute, which is errors equals course, right here. And that's going to, instead of raising errors with a, you know, loud, red message, it's going to turn the null values, the invalid values as NAMs. So basically, that means we can do that. I can create a new column, reviews numeric. That is a result of that. And now I can say df.lock show me the rows in which this column that I have just created is NAM. Because that means that wherever there is a nonvalue, no value, missing value in this new column, that is because there was a number that wasn't, that pandas couldn't parse. And when it couldn't parse it, it just assigned NAN. And that is basically what is happening right here. Reviews numeric is NAN, NAN, NAN. And we can take a look at the actual reviews and we see that there is this N value here symbolizing for millions. So two million, one million, six for five million. We want to turn this thing into numbers. To do so, what we can do is df at, let's say, df.lock df at reviews. I could have just done df.lock at 72. No, here, we can do it. I'm not going to do it, but I can just do 178. I can just do two million, one million at reviews. Of course, here, reviews. But of course, it's not very scalable. So I'm going to do something else. Just make it automatic to put it away. Automate it. It's going to be completely generic and this is what we're looking for. Basically, find me all the reviews that contains an M. So these are the invalid values. What are the reviews now? There we go. And now what we can do is.str.replace. We can do M with nothing. So it's going to remove the M. I'm doing this stepbystep, by the way. I could have just done it in just one line. But I'm showing you a stepbystep resolution. And basically, we can now turn this thing into numeric, p.2 numeric of this thing. There we go. But we saw there was two million. So we need to multiply back to one by one million. We have the value. But we want to assign this thing to the reviews column, which is a string type. So it's usually recommended to turn this whole thing back as type str. So we want to make it a string. Because now we can take these values, new reviews. New reviews. And there you go. We have to break into a new line. Break into a new line. There. These new reviews, did it work? Let me put it right here. New reviews. There. These reviews, basically we want to assign them back again to which one? This. No, this. I'm already making a mess of myself. These results. So basically when I get these things, I want to assign it the previous value. So we can do, do you want to do the whole thing? Let's do everything. Just one line, as I promised. We're going to do that. Let's see if it works. So now we can look again for this column, these apps. And let's take a look at the whole row. I can see now that the reviews have incorrectly cleaned. But so far this is just a string, right? We have not, we have just fixed the three occurrences which we could have fixed a thousand occurrences because again, this method is pretty generic. It works for pretty much anything. We are going to turn the whole thing now to a number. So we're going to do PDF at reviews. Let's check first to numeric. There you go. It worked so it didn't raise an error. That is good. We now can assign that back to reviews, uncheck our activity finally, finally, and it worked. Okay, moving forward to the next one. How many duplicated apps are there? And in this case, it's asking us for the total duplicated apps. Let me do a quick recap of the duplicated method. Undo duplicated, df.log, df at duplicated subsets app. Sort, sort values by app. And then there you go. We have all these apps. Oh, here is the occurrence that I'm looking for. So basically here eight ball pull. So what it shows by default, if you have, so if you have, for example, Twitter, Twitter, and you have Facebook, Facebook, what this method is going to show you is only this one is duplicated and only this one is duplicated. That happens because, I mean, this is the real one for pandas. The first occurrence is like the real one. The second one is a duplicated one. The same if you have multiple apps. So if you have six occurrences or five, whatever, one, two, three, four, five, there is one good and four are duplicated. That's basically what pandas does by default. In this case, activity is asking us for a different behavior. It's saying if there are two occurrence of Twitter, that should count as two. You want to mark like Twitter is here is two times duplicated. To do so, what we need to do is pass a parameter which is keep. Sorry, I already made a mess. Keep faults. And somehow, because that should go inside the parentheses. There you go. And now it seems that it's a little bit more interesting in this case because we have every occurrence of the given app. And there is also one more thing to comment here is that let's say you have this app and you have the number of reviews, which is 19 100 for one of them. And the other one is 19 100. There you go. So these two rows for pandas are completely duplicated. These two rows. But if you have something like, I don't know, 10,000, 891 and 11,000. If you have these two rows right there, if you just do the F dot duplicated, let's do keep false some by pandas by default is going to tell us there are 18, 800 or 890 duplicated rows. But for this to be counted as duplicated row, the whole thing has to be the same. So in this example, this would be just two, these two are duplicated. But these two here are completely different rows to me. That's what pandas says because the values are different. For us to say we want to count duplicated apps, we need to do these subsets up. So let's do that. Copy this thing. Now we're going to do there. And now we can count 19 hundred and 79 apps because again, there are some rows are completely the same. There are some rows that are different, at least in some other column. But the app is the same. Let's actually try to visualize that. I can say and and it's my time a while. And it's not this thing. There you go. That works. So basically, these are the apps that are duplicated. But there is something different between these rows. So for example, between these two rows, there is something different. And it's here the reviews. This one has six, six, five, two, one, six, six, six, two, four, six. So this one has more, more reviews on the second one. And again, remember where the date is coming from. It's coming from the scraping process. So there is a chance that this app was scraped two times at two different points in time. And of course, we have a duplicated rows with different data. Anyway, let's answer the activity. How many duplicated apps, but counting them whole, do we have 1979? Let's check if that works. And it goes it. Next activity drop duplicated apps, keeping only the ones with the greatest number of reviews. And this is a very interesting one. You will sort the you will need to sort data frame up on reviews. And that will change the order of the data frame. That is fine. Because what is going to happen is and again, you have to understand. Let me copy this thing once again, but I'm going to sort now by up by reviews. This these lines are extremely short. There you go. So what happens here is that we have, again, this scraping process that potentially scraped two times, or more than two times, you have like two, four, six, seven times. And the reasoning, at least what I'm thinking is that the scraping process took like an entire week. And somehow, these persons scraped the same multiple times. But there is one important hint, at least to me, just that the number of reviews in an app is probably always going up, right? Like you will seldom delete reviews that you've done in an app. I don't know if that's even possible, potentially as possible. But basically, what I'm thinking here is that and basically what the activity is asking is that we want to do drop duplicates. And what is the freshest copy of this scraping process? What is the app that get gets closer to the real number today? And that is potentially the one with the greatest number of reviews, the one with the most reviews. Because again, the reasoning is that this was scraped on Monday, this is cream of Tuesday, Tuesday, Wednesday, Wednesday, Saturday, Sunday, right? Because all these apps have a different number of reviews. And this one, the one below, right at the bottom, because we sort by reviews, has potentially the greatest, it's potentially the greatest, freshest copy of the app from the scraping process, let's say. So what we have to do here is we can sort this data frame in this way. So we can do, let's keep a copy. This is a good technique. As we're changing the data frame, we're making several modifications. It's a good practice to keep a copy in memory, just in case you can always go back to this copy. The way I do it, it's just copy, I can put a number, like this is activity number five, DF copy five, or DF copy before removing, or something like that. And I usually just comment it out immediately. Because if I execute this cell again, nothing happens, I don't hurt my copy. So again, if we make a mistake, we can always roll back, we can do DF equals DF copy, copy five, dot copy, and we have back again the data in this previous stage. But anyway, let's, let's keep moving forward with activity. And what we want to do is we want to sort the values. So DF dot sort values, app reviews in place, true, and now we're ready to do DF dot drop duplicates, drop duplicates, there you go. We're ready to do this thing. But the interesting part is that we need to say subset is by app. And there is a parameter in drop duplicates, which is, I don't know why the documentation is not working. What's this syntax of DF dot drop duplicates? Let's quickly, I could also do something, I don't know if you know this trick, like to help this method right here, gives you the help that should work with the same as this one right here. But let's wait for the assistance. Try and trade off this. There you go. And there is this parameter, which is kip first. And what kip first does is basically, we, the way panda is gonna, gonna work is, it's gonna find the duplicates, right? In this case, eight ball pull is the app is gonna, again, one is going to be marked as good, everything else is duplicate, but the question is, which one is marked as good. In this case, as we sorted the data frame in this order that the one at the bottom is the one with the, with the graders number of reviews, we want to do a kip last, we want to remove all this and want to keep only this copy. Okay, that's again, the syntax, let me show that to you for a sec. Right here, kip last, that's what we want to do. So, let me close this. And we're going to do a drop duplicates, subsets, app, do kip last, do in place. True. And this is when we're changing the data frame again, and we can now check the activity. And it didn't work. It's strange, and potentially could go back again to the copy. And we can try once again. And reviews. Oh, potentially this activity is checking. That might be it. So let's give the copy what it is. Let me just try this out. TF ads, or use numeric, let me get rid of this column and check the activity once again. There you go. It worked my mistake was not supposed to create a new column, which I did. Okay, moving forward, format the category column is an interesting one, because let's take a look at category first counts, there we go. Category, or uppercase. Yes, they're all uppercase, we can see that and it says that white spaces are actually we're using underscore for that we can check that as well. We have to change that we have to make this thing remove the uppercase just use white spaces and capitalize it so autumn vehicles in this format becomes autumn vehicles in this format. So we're going to do this very quickly. The category is equals to the F at category dot str dot replace. We're going to replace here to underscore with a white space. That's the first replacement we're going to do. The second one is we're going to capitalize the whole thing. And now we're going to check we can check again this thing. And where's autumn vehicles, autumn vehicles, ideally, it's going to be the same, let's check it out. And it works as expected. Okay, activity number seven, clean and convert the installs column to numeric type, you get rid of this. There we go, clean and convert installs column to numeric and cleans. Some values that have a plus modifier to remove the string and honor the original number. Okay. So as usual, we can do something like I don't want to create a new column. So I'm going to do df dot lock, df, we're going to do remember the PD dot two numeric of df at installs, errors, queries, right, is an A. So basically, the apps that cannot the rows that cannot be parsed as a number, well, look, use that for a selection, we're going to do head real quick, and installs 510,000 with a comma separator, 1 million the plus with the comma separator. So basically, what we can do, and I think I could do this whole thing just one line would be df at my bot, my bot installs at str, the replace, we're going to replace the plus symbol with nothing, we're going to remove it. Just chain the whole thing, chain the command, and we're going to do comma with nothing, we're going to separate that. And when I do PD dot two, Merrick of this whole thing, there you go, seems it's not failing. So that means this is working. And finally, we're going to assign this thing to installs. Let me see if there is anything else. No, that is perfectly fine. There is no m bright, because I only I only remove the plus symbol and the comma and that just transformed to Merrick. So it seems like I'm faith I'm safe, sorry. And we're gonna know how sign this to installs and check the activity and it works. Clean and convert activity number eight, there, there you go, let me center it activity, activity number eight, clean and convert the size column to numeric representing bytes, size columns of type objects, some values are either m or k. So that's basically megabytes or kilobytes. Let's take a look at our data frame once again, there you go sign size, this is 3.6 megabytes 9.1 megabytes, 203 kilobytes, we want to turn this thing into a into a bytes, it seems right when I turn this thing into bytes, nine, eight, nine, eight, two will become this thing, which is the bytes thing, that is that is good. Some other rules are a remote supply the rules as previous tasks like the one in the plus. So if we do the F PD time, let's do the F dot lock the F I do PD to numeric. And I think there's a good time to keep a copy the F copy age, the F copy. There you go. Oh, my bad. Reloading, reloading, reloading, scanning, scanning, scanning, scanning. Where were you size, we didn't save the notebook, the F copy eight equals the F copy. And we're gonna comment that out. And as usual, we're going to do the F at size dot str dot replace m, m with nothing and str dot replace k with nothing. We don't want to do that right now, because we want to convert this thing to the real numbers. But for now, if I do PD to numeric of this thing, what happens? Simple to parse string var var var var is with device. So that is because some other values are completely invalid, there is no way to infer numeric type from them. So these are to replace with zero, okay, so we can start right there, we can say the F dot lock, the F at size equals or as with device that shape how many Oh, okay, a ton. So there are a ton of these sort of apps. And here want to do that these column size for that condition should be zero. So I'm gonna do just I'm gonna do zero as type str, as usual, remember, that this is not gonna work potentially PD. This might be fine. Let's let me try it out. If it doesn't work, we have the copy. As usual, we want to keep the values the string, the F at size is still an object, that's good. And now it seems that it's working. So there you go, it seems that it's working the F at the F dot head, we only have to replace our their df dot lock, the F at size dot str dot contains a comma. Cal must know continue No, I, we we made a mistake. Let me go back again. Copy. This is a good thing. We're gonna basically say PD, the series zero thoughts. And I we made a mistake again, the F copy, copy, there you go. Because we might not be able to assign it. So what I'm going to do is just more string handling, which is the usual way of doing this process, which is the F at size equals the F at size dot str dot replace, we're going to replace this whole thing, or as with size for a zero in this way, there we go. And there we go, it works. So the copy is saving us. So there is nothing with a comma that is good. And it seems like we can potentially convert if we fix the issue with the M on decay, let's go ahead and do it once again, we did it already, this process, basically, what we're going to do is the F dot lock, let's start with the kilobytes, the F at size dot str that contains the K, K lower, lower case, K. Really quickly, let me check that. And what we're going to do now is we are going to take these reviews, not size, that's what we're looking for. And basically, we want to convert this thing, we're gonna convert this thing dot str, dot replace the K with nothing, right? We want to go we want to now turn this thing into numeric PD dot to numeric, there you go. But these are kilobytes. And what the activity is asking us is for megabytes. So we're gonna do now, sorry, for bytes, these are kilobytes is asking us for bytes, we have to multiply this whole thing by 20, 10, 10, 24. And now these are kilobytes. So basically, what we are able to do now is as usual, we're gonna get this thing, those sizes, and we're gonna assign them to this thing right here. And this is going to be a long string. And the size of the lines is not great. There we go. So what we're doing is selecting all the rows that have a K, turning that K to a removing decay, turning into a number, multiplying it for 1024, because it's gonna be bytes and then at the end, as usual, we want to keep that as a string. There you go. We're gonna do the same thing now with megabytes, I'm just gonna replace m, m, m, m, m, m, and of course, here is 1024 times time 24 for megabytes, I'm gonna do that. Finally, PD to numeric of the effort size, it works, let me show you the size now. So this was three something maybe we have a copy here size is pure 3.6 m. So that is 3.6 m, this one right here was 3.6 m. So 3.6 times 1024 times 1024 is pretty much the same value we have right here. So it's good, but it's still an object, because we're using strings for everything, which is a good thing, keep strings, keep strings, keep working with strings until you're good. I'm sure you want to convert that into a number, we can do that right now. And let's check the activity, this was a long one, took a little bit of wrangling. There we go. But finally, we have successfully cleaned it. All right, moving forward, clean and convert the price column to numeric, clean and convert the price column to numeric. The value represents with a dollar symbol at price dot different zero, the f dot block, we're gonna check a few prices. That zero is a string, there you go 1.49 seems to be good. Let's check if there is one that has a comma or anything like that contains a comma, nothing. So I think we can just let's let's try it out. What if we do PD dots, I mean, precise here to numeric of this thing dot replace dollar symbol with nothing, just that's oh, no, there are value values, oh, because there is a bunch of price equals three symbol that is for price. All right, so we can do the effort price, we can actually check free. Yeah, there are a bunch that are free. So the effort price equals the effort price dot str to replace free with a string representing zero. And now it seems to be working. So let's do that. And now let's check the activity works. Finally pater free now you have clean the price column, let's create another one distribution to this distribution equals the college to contain free paid value spending on the apps price. So this is a good one, we could iterate over each price, right over the whole data frame of price, and just assign one thing or the other. We could use an apply function, we could do something like equals we could do the effort price dot apply a lambda with a price p and put we can free if p is greater than zero else paid to do that. And I could assign that to distribution as it is, let me check just as we're doing it. But there is no didn't work actually. That's a good thing. Because oh, paid is on the other way, it's paid. If pray other ways free, I just and that's why I don't like the apply one and potentially at this stage, if you're just still doing data cleaning, you might not know this method. But there is another simpler way that is just hacking pandas, which is all initiates. Let's actually see if this works first. Distribution or no, I want to use my method. So distribution is gonna be gonna say distributions, like everything's gonna be free, like let's start that way is free, we can check activity is not gonna work, not didn't work. But then we're gonna say is df dot lock, all the apps that have a price that is greater than zero, right that to price here, we're gonna get the the distribution column, I want to save that to paid that way. Now we can check activity. And that works. So the way and I gotta get rid of the apply for a sec, the way this method, which is again, the most convenient is just if you have a few rules, what you can do is just, you know, start with the one that is going to give you like 70% of the apps are free. And then just work your way, creating other conditions to replace the others. This is a very common technique. All right, now that we have finished with data cleaning, we can just do a quick analysis to answer all these questions. So what company has the most reviews, we can do something like df dots, sort values by reviews ascending falls head, by the way, as usual is a good time to stop the video, try to resolve it by yourself, I will just you know, move very quickly over all these activities because this is more analysis that we've done, I think it's still interesting. But if you can try to resolve by yourself first, and then take a look at the solution I've done. So the first thing is the app that has the most reviews, this works also as usual, df add reviews equals df add reviews.max. That is Facebook. Good, which is a category with the most uploaded apps. And this is df categories, dot value counts. Family is the category it seems with the most there you go ups to which category belongs the most expensive app. So we can do df dots, sort values as usual, by price, ascending falls dot head, and I'm rich Trump edition lifestyle. What's the price $400 for an app? Okay, I had to that's and it works again. It's a live type application. What's the name of the most expensive game? What's the name of the most expensive game? Find the most expensive app in the game category and enter its name. So basically, we're going to do the same thing as here. But we're going to lock here, we're going to do, we're going to query where the category is game. And the game seems to be find the most expensive app in the game category. The world ends with you, it seems there you go, which is the most popular finance app. So basically, we need to first filter by finance. So category is going to be finance, and then it says, with has the most in installs. So we have to sort by installs. And that seems to be in finance, the most popular app, which is kind of obvious, I hadn't thought about that is Google Play, Google Pay, sorry, that makes total sense. And that activity also passes. What team game has the most reviews? So what app from the game category and catalog as teen in content rating. So df at content rating, the value counts. We haven't looked at all the content ratings yet, teen, okay, so when I find when I find the app from category equals game, it seems category game, and content rating equals teen, that's, and we're gonna find the one that has the greatest number of reviews or the maximum number of reviews as sort values by reviews ascending falls. First five asphalt eight airborne seems to me seems to be the most popular in terms of reviews of all the games are content rating team. Let's take a look. Yep, that works as expected. What paid game has the most reviews. So we have to find a game that let's say let's use our distribution column column that is here paid and has the most reviews and it's going to be the same thing. It's been paid and it's again has most reviews price equals greater than zero. By reviews ascending falls hitman sniper. No, because we probably need and price greater than zero. What paid up from the game category category game has the greatest number of reviews. What is cash of clans let's let me try this because I found an error. Yeah, so this activity should be what free game has the most reviews. So we have to fix that. Ideally, by the time you're watching this that has already been fixed. So let's keep moving forward. Finally, how many terabytes we can actually report an issue right here. For the previous one report an issue, the activity is asking for paid apps, but the solution is for free apps, submitting ads, just in case, finally, how many terabytes were transferred overall for the most popular lifestyle app. And this is a very interesting piece. This app produced the greatest amount of byte transfer enter the answering terabytes as a whole number running down the nearest integer example, if you find the total transferred to be 780 point just enter 780. So the app most popular is going to be df dot query, I'm going to say, as usual, category equals live style. Yes, no, what's the name, the live style, there you go. Sort values by sort values by by installs is the one that produced it. So this is the app that I was installed in the greatest amount of times, like most times. And we're going to do ascending falls, do I log zero, I'm going to show you that first. So Tinder was the app with the most installs, I do that I locked zero, so I get this first row, I'm going to show you up, these are up. And now we have to do up. So this app wants to install these many times. And the size is the size in bytes, right, so that's going to be up at installs times up at size, right. But this is in bytes, we have to divide until we reach terabytes is going to be kilobytes, megabytes, gigabytes, terabytes, there you go. So let me show you the previous one. These many bytes, these many terabytes transferred. And I think what do we have, we can we can actually do it in the following. So six, I think it's petabytes. So we can ask assistance just in between what follows after terabytes. So basically, this is the answer in terabytes, it says to just enter the whole number rounding down. So we're going to put just 6484. There we go. And this is still working, can see if we can answer real quick. I think it's petabytes that follows terabytes, but it's a cup broke. Anyway, the greatest the app that produced the biggest amount of data transferred in that case, was Tinder with 6000 terabytes, which I think is 6.3 petabytes, I think I'm not sure. Anyway, this is a great project, we did a lot remember, we started with the whole data craning process, which, as usual, data, we had a lot of detective work, we had to find out why some of these columns were incorrectly parses objects, so suspicious, we started removing things, turning to the numeric, as usual, keep trying to keep everything. I think there are two or three very important things I'm trying to transfer to you here. And the first one is that this detective work, you know, trying to turn things to numeric, and try to find out where the issues removing things, and doing this iterative work. The second one is if you're modifying data frame, always keeping copies, we were able to fix an issue by keeping copy. And then the third one is keeping everything as string until you're safe to turn it back into a number, the same thing is going to apply if you're turning something to a date. First, you know, keep working as string, string, strings until you're ready to turn it into a number. But anyway, I think this is very interesting process also the same the whole idea behind where data is coming from, it was scraped. So we were finding the duplicate data, we were assuming that the app with the most reviews was going to be the app with the freshest copy. So doing all these, you know, analysis based on our data is basically data science process. So if you are comfortable with this, congratulations, because you're you're pretty, pretty, pretty close in becoming a data scientist. Now for this project, we're going to combine our data wrangling data cleaning skills to finally perform some data analysis using group by operation. So it's a pretty interesting one, the data that we're working with the data we're going to be analyzing is information about Premier League matches, Premier League is a top tier top flight football soccer league in England, potentially in the world, and the data set we have has information about matches from multiple seasons starting 2006 2007 season. And it's a very, very interesting data sets because we have the teams played and the goals is scored and the final results. So anyway, we're gonna start one by one with activities as usual, I want you to just pause if you want to resolve them by yourself, pause, resume, pause, resume, as you see me perform the different activities, and you can borrow some ideas from my solution. So let's get started replace invalid values from the seasons column. And before we can replace invalid values, we have to identify invalid values to do so. We're gonna, we're gonna take a look at the seasons, we're gonna do here value counts. There you go, I see that there are 2007, 2008, 2008, 2009, 2009, 2009, 2009, 2009, 2010, etc. But then we have this question mark here. So this is one of one of the first examples of an invalid value in a column. In this case, it's a string column of here string column, and the invalid value comes because this is a question mark. And of course, it's not within the format of the season. There is no enforcing in these strings, they're just strings, but we can see very clearly that there is a clear pattern, a format that is an integer dash an integer. And of course, question mark doesn't match that. So we have to claim those values and replace them with the value unknown season to do that. What we're going to do is df.lock, pause now if you want, df at season equals question mark, the season value, there we go, all these values, we're going to replace them with unknown season. And now they should be removed. Let's check the activity to see if it works. It works so we can keep moving forward. Identify invalid values in goals scored. This is a pretty interesting one as well. Because it deals with a little bit of data cleaning. But conceptually speaking, the data cleaning process, like the decision tree that I'm running in my mind is different. Because to identify invalid values in goals, I'm going to take a look first, again, at the info method. And you're gonna see that both home goals and away goals are integer numbers. So that is that is correct. Those are supposed to be integers. So how could we have an invalid value here, it'll be different if, for example, we see an object here, because that means that pen has found something that cannot be parsed as an integer. So it turns it into a string, right? But in this case, they're all integers, and that's pretty much the valid. Now what we're gonna find is given that the we have identified the value type, which is an integer and the column itself is an integer. What is the next process? What is the same the next decision we have to make? Well, if the data in if the range of potential values is met, right, so there are a few other projects deal with some other things. But for example, we have rainfall, you know, that's something that can take a given value, we have, for example, power, electric power in a house, you know, the, the, the valid values are going to be between, I don't know, zero and 110 115. But there are valid values for everything. And we have a range now as a second step to define the validity of that column. So to do that, what we're going to do is just use a little bit of plotting to aid in the process of identifying the same value values, we're going to do the F at home, home goals, we're going to plot kind, first, we're going to do a histogram. And we can quickly see that there are some values that are invalid, because they are below zero and in a football match, the minimum value, the minimum goal score is zero. We don't see anything weird on the right hand side, we don't see any stream goal count, if we see something like for example, 20, 2530, that is a little bit more difficult because it's well, it's valid in terms of a range. But it's an outlier. So is there possibly a Premier League football match in which where 20 goals scored? I mean, it's possible, it's highly unlikely. And that's this the third step, and we have to start digging a little bit more understanding the value again, hopefully, or thankfully. In this case, that doesn't happen, I'm going to turn this into a box plots. So we can visualize it, I'm gonna swap swap it to be horizontal, I'm gonna do vert false, I go, and we can see pretty much the same thing. Most of the goals are going to be concentrated here. And we have a few samples below zero that are invalid, I'm going to add away goals now. To visualize away goals, and we can also see like this, the zero line, we can also see that there are a bunch of invalid values right here. Interestingly, the way goals are all shifted to the left, that means that home teams tend to score more goals, which makes sense if you watch football or soccer. So we have pretty much understood the invalid, like the validity of the column, we know it's an integer, we know that it has a range, because we know the sport. And we have identified that there are values that are outside of that range. So now we have to take a look at them. And here, what we're going to do is we're going to do that are less than zero. And we're gonna sum that. And we have 34 home goals that are invalid and 39 away goals are involved. Sometimes people have issues with this sort of thing that I did. If you want to think about in a different way, we can do something like df.lock. At home goals is less than zero. Or df at away goals is less than zero, we can take a look here at the different ones, you know, we can start finding how many we have, or actually, we could say something like it's easier if we do something like shape here, or some here, we have only 34. But as this is this, the result of this expression is a data frame, we can do pretty much everything all together. And now to answer home goals invalid 34 away 39. So that's going to be 34 home goals 39 away goals, and let's check the activity. And it works. Now, moving on with the third activity, it's pretty much the same thing we did before, we're gonna do df.lock df at home goals that are less than zero, we're gonna home goals, we're gonna that thing, we're gonna replace them all with zeros, I gotta do the same thing with away goals. And we're gonna check the activity. And it works, identifying cleaning valued results in the result column. And this is a very interesting one, because we can keep looking at the different data cleaning scenarios or techniques we have to approach. We had one that we had just simple strings, and we had to find a pattern, there is a pattern year dash year, this year is the year before in this year, right? So there is n dash n plus one, a four digit integer, there was a free form pattern here. And there was a pretty clear value was invalid was a question mark, we then jump to a integer, which was the correct value type, or the correct type of value for goals. But then we had a given range that was available was valid. And of course, there were values that were outside that range, we've made it invalid. Finally, we have the one that we're trying to deal with here, which is the result one. And then the result column is interesting, because what we're gonna find value counts. It took a little bit of time. The idea, oh, because I got auto completed. But the idea is that valid counts is, let's say a categorical variable, it's not let's say it's it's a categorical variable, the values that we can take in result are restricted, it's either h for home victory, a for an away victory and d for draw. And that's it. Anything outside of that range is considered invalid. And these are usually the simpler to put in a way values to not to claim but to identify at least, but we can quickly see if a value is outside of this subset of potential possible values. These are the only three possible values. That is different, again, from what we saw before with the seasons, because we have to apply a pattern here, this is just a free form string, there's a pattern underneath. So we can have any value, we can have, you know, 1950 1951, for example, something like that. So that's a little bit more difficult. But again, in this case, it's pretty obvious that everything that has a question mark is an invalid result. Now how can we clean that? Well, we already have the we can already calculate this result, the result column is a calculated column, because you can just get that by computing the result yourself, you know, one one is a draw. If the value is here, and the values here on the same, if there is a number and equal number of goals, that's a draw. If the home goals are greater than the way goals, that's a home victory. And if the way victory is greater than the home goals, that is going to be an away victory. So how can we fix that fairly easy, we can do the F dot lock the F at, for example, home goals, greater than the F at away goals. There you go. This should all be all these results should be we can do assault value counts. All these results should be valid, right? So the digital OB sorry, an H, but we know not only have this question mark, we also have invalid values, we can calculate the results. So this is why this is a pretty interesting activity. So now what we can do is just here to like step over the value, and we know that it's going to be a home victory. And we can do the same thing for pretty much every other possibility, we can say, if away goals is greater than home goals, that's going to be an away win. And finally, if let's put here, if home goals is equals to away goals, that's going to be a draw. That's pretty much the same thing. And now we can count again. And we have the possible values. Let's give it a try. And it works as expected. All right, moving on to the analysis piece is when we start doing some interesting analysis with group by activities and all that. So what's the average number of goals per match? And we don't have that value. Goals per match, we don't have it. But we can easily calculate it on the fly. So home goals, DF at away goals, we have thoughts. And we can sorry, zoom out, we can here have the average very quickly. And activity is asking us calculate the average number and put it with two decimals. That's 2.66. If I'm not mistaken, I'm not saying it 2.66. And activity works. Next one, create a new column total goals. So now it's pretty much asking us to create a new column, DF at total goals, bypassing this thing. And total goals, there we go. And we can check activity real quickly. And it passed as expected. Now, calculate average goals per season, and we have to sort the values by by season. And we need to sort in the goals per season variable. So the way it's gonna work is gonna be in a zoom in. What I do group by group by season, and here, we're going to get total goals, you're going to get the mean. There we go. We need to sort these by the index, that's the season name. So there's going to be sort in Val sort index, which gives us the same result just we were lucky enough. And we can store that in the goals per season variable. Let's check activity and see if it passes. There you go, it passed, we are good to keep making progress. What's the biggest goal difference in a match? And this is an interesting one as well. Why we have two potential results when home one or when away one, right, we have our home victory and away victory, and we have the difference of those two. So we have something like the F at home goals, let's say minus the F at away goals, and we can do here something like max, right? We can do the same thing by doing away goals and home goals. And then we have the maximum. So this is a maximum difference in the biggest goal difference for a home win. And this is the biggest goal difference for an away win, we could have used the same value here to do something like max and min. And that's going to be minus six, right? Because in this case, it was an away win, the way side one, and that gives us a negative result. But basically, if I don't care about the symbol, because basically what I care is a magnitude of the value eight or six, that's a magnitude of the value, then what I could have done is just do it's something like do absolute. There we go. And now we can get the max value. Or to bring away, we can just do a sword values, ascending falls head, we can get the results here. So anyway, we arrived to the same results using different techniques. Basically, the most interesting piece for me, at least here is for you understanding the absolute method, because again, it's six or minus six, in this case, it's the same for us, because we care about the magnitude, the goal difference, we don't care if it was the way team one, or the home team one, right? So the the absolute method will give us that magnitude. Let's try with eight anyways. It was pretty obvious that it was a home win. If you know a little bit about football, soccer, those, those a case, game over. What's the team with most away wins. And this is a very interesting one as well. Why we could start doing something like df dot lock df at results is away, right, we have all the way team way victories. Now we can group group by the way team, because basically what it's asking us what's a team with the most away is when so this is in our way when who was a team is basically away team. And now we can just add results dot size, and we can get we can sort values by by nothing because this series ascending false. And let's do just head and we have that the team with the most away wins is Chelsea. Let's give it a try first. And then I'm going to show you something different, a different way to calculate this thing. There you go work. There's a different way. And it's actually the solution proposed here. So I'm just gonna go ahead and reveal it. And we can I can I can just copy and paste these things. We don't waste so much time. And I can explain it to you right here. Basically, what is happening here is we can group by the way team. And when we do this grouping, we're gonna have the head, we're gonna have all the results for an away team. So for Liverpool, we're gonna have these results, and pretty much any other result from Liverpool. And that's gonna include draws, home victories, and away victories. So basically, what we want to do is we want to group we're gonna get this group that is let me get here lock. If at away team is Liverpool, as they say, I go. So when we group by away team, we can we create, we create like we have so we have this full data frame that has for example, Liverpool here and Liverpool here and Liverpool here and Liverpool here and has a let's do how can I there has a Manchester City. Oh, I got green. Why? It's Manchester City, Manchester City, Manchester City, Manchester City. And we can get another football team from the Premier League can get here walls walls is another team walls walls walls walls. What the group by operation is gonna do is gonna identify we're gonna use black, it's gonna identify the values are the same. It's gonna prepackage them right in this. I don't know if you've heard about it, but the term is splits, apply, combine is gonna create tiny groups with the different samples that meet their grouping criteria. So it's gonna put all the Liverpool, all the Liverpool matches here is gonna put all the Manchester City matches here is gonna put all the walls matches here. It's going to give you the option now to work with this thing. So now we can do for example, now get me the away goals and do a sum or give me the results and give me the signs, we can do any operation with this groups, and then it will assemble them again in a table and it's gonna say, Liverpool, whatever Manchester City, whatever walls, whatever Manchester United, whatever, get us gonna combine all these more pieces that it has created. But before we do the operation, we have the chance to run a custom function and that's the apply one right here. So we can run we can pass this custom function that is going to be run in each individual group. And what the custom function does is it gets all the rows. So here is going to get a draw a an away win, a home win, an away win, etc. And we're going to perform the the operation that we want, which is counting the ones that are an away win. So we're going to get only the ones that aren't away when we're going to do a sum and you are going to return that value. So here's going to be two. And here's going to be for example, just one. And here's going to be is not zero, we're gonna get just one. Finally, painless by itself just takes care of saying Liverpool to Manchester City, one and wolves. That's too many wolves zero, right, the combination at the end. And that's the way that function works. Let's clear this whole thing and run it. And we get pretty much the same results as before is Chelsea Manchester United Arsenal, etc. So the way to think about it is you can fill your data before starting, or you can perform like these operations after you have grouped the data with the individual groups that you had before. Okay, that's it. Let's keep moving forward because we have just three more activities to go. What's the team with the most goals scored at home? So this is a pretty interesting one as well. Let me get ahead. You take the time now to pause the activity and solve it by yourself. I selected Chelsea, I don't know why it's a mistake. But again, take the chance to pause and do it by yourself. Basically, it's asking what's the team with the most goals scored at home. So it's basically the home team. We have to group by home team, home team. We have to count this home goals. So here just count home goals, I will need now to get the sum. We're gonna get the whole thing. But of course, we need to sort values by ascending falls. And we're gonna get head. There we go. And we have that Manchester City seems to be the goal with most day the team sorry, with the most home goals scored. So let's try that out. And that is correct. A pretty, a pretty dangerous team in attack. Manchester City for sure, especially now this outdated, especially now. Okay. Second to last, what's the team that received the last the least amount of goals while playing at home? And this is also a very interesting one. Because if I was just naive, I was gonna do something like DF, the team group by home team, what's the team that received the least amount of goals and away goals. So it's team playing at home away goals, but some sort values head. There you go. So charting athletic have only received 20 goals, right? But the reality is that they only play df dot lock, df or now let's do df at home team equals charting. There we go that some they only play 19 games at home. So it's interesting because what these activities asking us is for the ratio of goals received over home games. And I think if you have not passed, I think it's a very, very good moment to pass and try to resolve it by yourself. But anyway, let's just do it. We're gonna start first, we're gonna keep the same group by operation. But we'll try to get two things, we will try to get the total goals they received under the total matches they played. So we're gonna get we're gonna get away goals. And we're also gonna get first, we're gonna get just here home team, I got two different operations. For that, we're going to use the aggregation method and we're going to use a dictionary, we're gonna say for home team, perform the size operation for away goals, perform the sum operation. Let's take a quick look at what we have. There we go. We're gonna sort values by by by home team. It's actually ascending false. By home team, I did something wrong here. My bad. Sort values by home team. Why is Oh, because it's both. So let's replace replace, rename, rename columns, we're gonna call home team, total matches to total games, I'm gonna put away goals equals goals received. There you go. Let's break this in a couple of lines really quickly and ascending faults. There you go. Total games. No, because this is total games now. Games. There you go. So Liverpool, Tottenham. So these are the usual suspects, right? The teams that have always played at the top of the Premier League, we can do now is sort by two things we can sort by goal by sorry, by total games, and we can also sort by goals received. But we want to flip the sorting here, we want to get all the players that all sorry, all the teams that played a ton of games, so ascending false, but then we want to get the ones that received few goals. So we're going to be ascending true. And now we're going to get the Manchester United. Manchester United is a team that played the most games with the least goal received. We can, let's say we can rename this thing, we're going to do something like, we're going to call it games, per team games, home games, games per team, and call that head, we could do something like ratio, what's going to be it's going to be goals received per match. And we're going to call this thing we're going to be the result of home game games per team at goal received divided by home games per team at total games. And let me break this into multiple lines. So it's a little bit more readable. And now we're going to do pretty much the same thing as before. But we're going to do is value sort values by goals received per match head, I get the same result, just Manchester United with the best ratio in terms of goals received per match. It's actually tried out because I haven't tried out. Let's see if it's the team we're waiting for. That is correct. Basically, what I'm saying here is that we tried we first got we have for the same grouping operation, we computed two different things total games, sorry, total goals received. That was a way goals because it was the whole team. But we also computed how many games they played. So same group by operation, if you allow me a very quick draw, we have like the big chunk of teams. And then we did like this separation of small small groups for home teams. But then we computed two different things for home team, this gave us the size for the way goals is gave us the sum, right, some sum all the way goals. And we did these two operations in all the individual chunks to compute the final results. We quickly identify Manchester United as the one meeting the requirement of activity. But we went one step further to actually compute these goals received per match value. Why is that because when I make this thing analytical and potentially automated, we need it we need an analytical way. What else there is I think we can take a look I think there is a pretty interesting solution here. No, I thought we had a solution that had everything in a one liner with a apply operation, it is potentially doable if you want to give it a try. But I think readability matters in this case. And finally, what's the team with most goals score playing as a visitor away from home. And this is going to be pretty much the same thing as before. Goodbye away team. And we're gonna get the team playing away from home score more goals are gonna get goals go forgot already the name of the columns. It's away goals away goals away goals, sorry. And what we're gonna do is some get a preview. And now we're gonna do a sort values ascending folds. And it seems to be Arsenal. Let's give it a try. And it passed. And we completed our projects. So this was pretty much the the activity we started with a little bit of data cleaning data wrangling pretty interesting. Because again, we had a good variety of different issues with our data, we had the issue of the invalid seasons, which is a string invalid pattern, then we moved to the invalid count of goals, which is an integer out of range, then we cleaned the categorical result variable was just potentially just a result categorical. So the results should be in these in the subsets. We had a way to clean that but just calculating something else in data frame, those good thing. And then we started with a bunch of group by activities all very interesting. So take a look at yourself if you want to replay it. In other case, we have a bunch of other projects dealing with data wrangling group by and all these operations. This is a very interesting project that combines some data wrangling skills, which involves merging data frames, creating new columns with some data cleaning skills that it's gonna require you to take a look at the data and do some cleaning to make those merge work and finally, do some analysis, some question answering with group by operations with transform operations. So it's a very, very interesting project for sure. As usual, I encourage you to pause the video first, try to resolve it by yourself. And then of course, take a look at the solutions, because maybe I'm choosing a different way of what you're doing. And you can see something different. So with all that said, let's just get started. I have the first few rows executed already, as you can see. And let's take a look at the data that we're going to be working with. In this case, we're going to be working with NBA basketball information. And basically, we have the 2017 season stats that's going to be in this data frame right here, which involves the usual, you know, just information for each player as an aggregate of the whole season. And then we have a player's DF data frame that involve the includes the personal information of the players of their name, their weight, birthday, college, etc. The important piece here is that the players data frame contains information about all the players in the registered history of the NBA. So that's from like 1950s. The information in the stats in the seasons only from 2017. So we're going to start by doing a merge. But of course, going to be an interesting one, because we have to merge in a specific way. The first activity and here again, encourage you to just pause involves merging data from the 2017 season with the players, but performing a left showing. So basically, we want to include here in our season's DF data frame, we won't include the personal information from the player, we want to bring the data to our existing data frame from this particular season. Okay, so as you might remember, there are different types of merge to do, we can do an inner, we can do a left or right outer, we can do a full outer, in this case, by performing a left outer join, we're going to be able to recontain to, like to keep all the information from these data frame 2017, and bring only the matches from the players DF data frame. So let's go ahead and do that. Again, this is your your opportunity to pause the video. To do a merge, what we're going to do is we're going to start with season 2017 DF, and we're going to merge merge with merge players, the F. We have to first, I'm gonna players DF, we're going to do a how left, because that's basically what it's asked. And again, the reasoning is that we want to keep all the information on the same thing from 2017 DF. And we're going to pass the columns to merge. So on the left side, we're going to pass the player. And on the right on, we're going to pass the name, it's the same information, but it's two different columns. If you remember, we have the on on based attributes to refer to individual columns. And we also have the indices, if potentially you're merging per index, in this case, we're just using the regular columns. And we're going to assign all this to data frame. And let's check the activity to see if it passes. We can take a look at the DF. This is going to be a long data frame, I can actually show you something like df dot head, and we can do just the first row under transpose. So we can see all the information right here. So we had me potentially do a little bit of drawing. If I'm allowed here, we're going to select red. Basically, what we did is we didn't select right, there we go. So basically, we have all the seasons that we're going to make like a long data frame, and I use blue to the players merge right there, the resulting the resulting merge to we can use another color, let's say here, purple, the resulting merge is gonna basically, as it's a left outer join, and this is left, we're doing is we're bringing this data frame to the side here and basically make it match with whatever information we have in between. So if in the season 17, there were, you know, two players were repeated, we could have potentially duplicated that data. And that's perfectly fine. Because if we have the same player here two times, because of any reason, because a player played in two different seasons, two different teams in the same season, we actually want to duplicate the right hand information in both of them. Because again, what we're doing is we're complaining with the personal information of the player. So said that let's take a look at the whole data that were where we have it's it's a large data frame. But what's gonna give us the key if the merge was successful? The important piece is the name because sometimes you're gonna find that some columns are gonna be nullable, like for example, college is nullable. But this doesn't indicate that the merge wasn't successful. This indicates that just college was no, but the name column is not nullable. So that means that if we find a, a value, a row in the df variable, that is null in name, that means the merge was not successful. So are there any misses in that data frame? And this is the second activity, we can quickly take a look at that by doing df at name dot is an A. And here we can do for example, any, any, this is true, we can actually answer that real quick. And the next one is going to ask us how many will we can do a sum right there, we can find there are four missing, four missing players, basically, we couldn't match. So there are four people and I think now it's gonna be a little bit more clear once we visualize and therefore, four rows in the seasons data frame that we couldn't match for a valid player, which is strange, right? Because we know that these players df data frame contains information for all the players in the NBA. So how is it possible we couldn't match four players, let's actually take a look at those people. And that's the fourth activity that we have right here that is extracting names. Before we do so, I just want to show you who are these missing players. So let's take a look at the values in df that are that have a non or a null value in name. And those are these four players right here, we're gonna take a look in a second at these players and see why we had that miss much. So this activity is asking us to basically find those four people. It's asking us to put them in a list. So what I'm going to do is just going to do that. And I'm going to plus here the player, and we're going to do values. And finally, I'm going to make here a list. Now player misses contains the list of players are missing, we're going to check the activity. And it passed correctly. So this is a very interesting activity. And this is the one that I think is the most representative of the data cleaning process in general for any data scientist data data analyst data engineer, which is actually fixing these missing issues, right. And there are sometimes different strategies, sometimes you can just delete the missing rows. Because I mean, if you have millions of rows, and there are a few that are null, you can just delete them. Sometimes you can replace it with something else. Sometimes you have to actually fix it, you have to realize like what happened, and just fix it. And the way we're gonna do is just doing some detective work. And this is just perfectly normal in the whole data engineering, data science, data analysis process, just taking a look at your data, and trying to understand with domain knowledge, and this is a very important point with the main knowledge, trying to understand what went wrong. And domain knowledge is very important, because I can, I can, and we will actually perform this, this cleaning, we're gonna fix these values. But we need to understand a little bit of what happened with the basketball season. The same thing happens, for example, and I think I have already put this example in another project, if I'm working, for example, in a biology lab or in a physics lab, in a nuclear physics lab, as a data scientist, there are going to be a ton of data cleaning tasks that I will just not be able to perform not because I don't know the techniques, because I'm very good with pandas, but because I need to understand the domain that I'm working on in order to be able to perform some operations and there's understand my data, right. So for example, if you have no idea about basketball, and you fee and you see a value for points that is 100,000, maybe that value is good for you. But of course, it's pretty hard to make a hundred thousand points in a season in the NBA. So by knowing the knowledge, you have you have just immediately placed the value in a in a given range that of possibilities. So your data cleaning process, it's a lot more, it's, it's easier, and it's more precise, because you knew the knowledge. So the same thing is going to happen here. And actually, let's take a look at the activity. And it tells us that with confidence, and I already know what activity says, with confidence, it says that the players are actually in players DF. So there is something wrong with players DF the the right hand data frame. So we're gonna players DF dot head. So there are some, there is something wrong with the names here that somehow didn't match what we had in player in the stats of the 2017 season. And the objective is to modify players DF so they match whatever we had in the in the 1720 2017 season. That's that's correct. So let's first identify where these players are in the 2017 season are not in the players DF. So basically, we can make a quick drawing here and potentially. So we have in 2017, we have this this guy, look, and bar, which is not potentially in the players DF. So in the players DF, the activity tells us for sure that it's there, we have to trust that for now. But these players like what name does he have? Basically, we have to find these much. To do so one thing that I can do is just and this is, again, a very detective work. There are multiple ways to basically find this, but I could do something like, let's keep it simple. Maybe this player has a middle name. And that is part of the whole players DF. But in the season, that player wasn't listed with that name. So we can just go ahead and do something like players DF dot lock. And here, I can do players player DF at name, dots contains the same last name. So is there any player in players DF that contains this last name, and we can find the given the given player, what happened in this case, and we can just take a look at what happened is that this player either added a new surname, or always had the same surname, but in the 2017 season, he was not listed with this surname. So we have seen we are seeing like the first incompatibility, let's say, so we can say that in players, DF, and we're gonna do season 2017. These player should be named should be named, we're gonna do that should be named the name in 2017. So we want that that player to be that name. And we can keep working, you know, with this detective work. Maybe you know what happened, for example, with maybe you don't know this, but Muhammad Ali was born Cassius Clay, and then he he switched religion, or I don't know how to say this, but basically, he converted to Islam, and he changed his name to Muhammad Ali. So the same thing can happen to anybody, we can change our names. And that's what happened here as well. So this person potentially goes by a surname. So for example, Sheldon Maclellan, which seems to be the original name, I can just go to Wikipedia, born Sheldon Maclellan, here, here he is, right? So the guy either changed his name or just made it shorter, we don't know, to be honest, we don't care, we have just found another player with a different name. So we're gonna do that. So we know that in in the let's actually do Mac here. No, Sheldon Mac. Where is Sheldon Mac, right here. So in players.df, we have Sheldon Mac, and we want that player in the 2017 season, it's like we're rewinding, say what was the name, right in 2017. And that's the name. What who else James Michael, let's take a look at Michael here, James Michael, and see if there is any changes. There is a new last name. So again, in players.df, this person is James Michael Michael do and we want this person to be renamed where it's like, where we won in the names to 2017. And in at the end, we have meta world. And here, I'm going to do another trick, take a look at this, we're gonna first lower the names, and then I'm gonna do meta meta with a double t. There we go. And seems like meta world was the name in 2017. But now it's something different. So we're gonna rewind again, if you allow me the expression to the old name in 2017. We can store these names mapping. There we go. So we can keep the names as a reminder. And of course, I'm missing the comments as usual. As we will do. So how are we gonna do this thing? Well, the way to do it is just we're gonna find a player in this case, we're gonna find a player with the with the same name. So in this case, let's do it with the I don't know, first one, first name. So this is the player in players.df with the full name we wanna rewind a player back to the name in 2017. And we want to take just name, right? name. And we want to assign that to the name in 2017. So we can change that. There you go. If we do the merge, let's go ahead really quickly, I'm gonna zoom out. Let's do the merge once again, really quickly. And let's find the players don't match. Which, as you can see, it's just three, because we fixed the first one. So this works. What we can do now is we have four, but we can just automate, quote unquote, this process. Let me reread players because I have modified players, let's do the merge again, let's go back to the state where we have these four players missing, including look, look, and bar. And now we're going to do the same process, but we're going to automate it's just we're gonna use for loop so we don't have to type it one, one by one. And the way to do that is going to do for all name or it's actually like new name, let's say, and name 2017. So it's the new name and the name they had in 2017. In names mapping dot items, we're gonna find the person we're gonna find the person with a new name. And we're going to replace it with the name. 2017 body. And of course, I'm missing now a column. And there you go. We can now try we can check the activity to see if we did everything correctly. It seems like it worked. We can now perform the same merge again and see how it goes to let's take a look. So copy these cells, same merge. And we we know what the activity is going to check, but we can borrow this cell and try it again and see if we had any misses, no misses. So this will potentially there you go. It worked as expected. Okay, remove unnecessary columns. It's just, again, data wrangling, very boring, just, you know, we have to get rid of a few columns, as I show you the first row transpose, there are a ton of columns we're not going to be using. So what we can do is just drop these columns, how to drop the f dot drop is the method columns, columns to drop in place equals true, because we want a modified data frame. Now we're going to check the activity. And it works. Rename teams to their four names. This is a very interesting one, because it has a very simple solution. But it's usually not expected, I see some, some very crazy solutions for this sort of activities that involve our renaming. Basically, we have the team of the player is a three letter acronym, we want to resort back to the full name of the team. To do so, what we can do is there are replays methods, we can do df at team dot replays, and we can use this mapping that was given for us team mapping. There, and you can I will just execute this thing. And it didn't work, because it's actually team that I go TM. So we're replacing one by one these acronyms, whenever you have OK, see, it's gonna find here, OK, see, it's gonna replace with Oklahoma City Thunder. We're gonna find, for example, d a l, it's gonna look for Dallas. Where is it? I don't know where it is. Basically, where is that last second one? So basically, it's gonna it's just a mapping and it replaces one by one. And we can store this result, right? In the column team, that's gonna be it. So we're gonna do DM, df at team, which is the full name, it's gonna be this column with a replace mapping performed. And now we can do df. Let's do df at player. TM on team, let's get the first 10 rows. And we're gonna find 10 rows, and I find a few things. So I n d indiana pacer's as a as San Antonio's purse, am I in Minnesota timber wall, so this looks okay, and see what happens here with this tot in a second. But for now, this is good. And let's check the activity to see if we did the correct thing. And there you go. It's working. Convert birthday to a daytime object. So this is another interesting one. The birthday of the player is a string, we're gonna convert that to a date to a time some or daytime. It's very simple in pandas, but we're gonna do is PD to daytime, and we're gonna pass directly the birth date column. That's but of course, this is an immutable operation that's just returning a new series. What we want to do is just step over whatever value we had before. And of course, this is a change we cannot undo so easily. So in this case, we are safe to just like step over the previous values. If not, you can just create a new column, you know, in this case, we're safe, we can just convert the column back to daytime, we can check the activity. And that worked as well. So going back again to the previous values that I show you we had let me borrow this thing here. Delete all players from the tot team, the tot is for the players. And that's actually, let's do something. df at at. Let's look for duplicate players. df dot lock df at player dot duplicated. Yes, and we're gonna find we're gonna do play duplicated. I want to now hear only these columns keep false sort values is a long operation. But don't worry, it's pretty simple. Sort of values by player Ted, Ted, there you go. Long operation. Some players in a given season can switch teams, right? Just right in between there is a there's a transfer window and they can switch teams. So you have the first the same players sorry, like this guy right here that play for both Cleveland and Dallas, right in the same season, he was tougher in the middle of the season. So these data that we have and we have to understand again, the data set we have includes kind of an aggregation column, which is the tot column for totals. So totals of this person within the whole season is so many field goals, so many three pointers, so many free throws, etc. Just a total an aggregation of the season for this particular player, we need to get rid of that. So I'm gonna do that. And oh, actually, we can use the same. No, we can't use same condition, how we're gonna get rid of these of these values. First, let's keep a copy. Because, I mean, we're gonna be we're gonna be breaking things. So we need to keep a copy, we're gonna do a df copy df copy, this is a very common technique when you're modifying something. As usual, I encourage you not to modify things. But if you are certain you want to get rid of something, you can while you're doing the process of understanding and analysis and all that, you can create a quick copy of your data if it's not large enough to fill the whole memory, of course, because because you're literally copying value. So if your data frame takes one gigabyte of memory, you once you duplicate it, now you have two gigabytes of memory allocated. So as long as that's possible, you can keep a copy. And I usually do like copy 12345. And that's pretty much the data running process, until you figure things out and you're sure, then you can remove all the copies and of course automate the work. But for now, we keep a copy. If anything goes wrong, let me comment this thing out. So we don't accidentally execute it, we have a copy in df underscore copy. Go back to the activity, we have to get rid of the players that have a tot team. So df dot lock, df at team is equals tot all these players, we have to get rid of them. How can we get rid of them? There are multiple ways the easiest is probably also we drop maybe not the easiest, because the easiest could be just do something like df equals df equals all the players that don't have a tot. And actually, let's try it out. And this should work for both. Except I'm doing something wrong. It worked. But let's bring back the old data frame, df copy, copy, there we go. So we have it as it was before, I'm going to delete the cell so I don't accidentally execute it. And there is another way which is basically we can find all these all these rows, right? So all the rows we want to get rid of, and we can get the indices. So the index of the rows when I get rid of. And finally, we can use the drop method. So we're going to get rid of these values, and we can do in place true. And let's see if that works as well. Well, I have to reset all the activities. But trust me, that's also gonna work. Alright, like we have pretty much the whole process done, we merged the data frame, we found that there were a few mismatches, right, where the names of the players changed. So we rolled in but the south and 17 doing some investigative investigation work, some detective work, we brought back to 2017 merge data, get rid of the columns, created rateable names, do a little bit more cleaning, removing TUT and all that. And now we're going to actually start with the analysis. So this is going to be very interesting. So what's the team with the most players in the league? So we have, again, so we have information about all these players, they work at all these players in the 2017 season. And of course, we know that some players switch teams, right? So how many? What team had the most players within a season, either if they went back and forth, they changed a lot, want to answer how many, which was the team with the most players in a given season, that's pretty simple, because we can just do a value counts, counts, and that's to head. And it's gonna tell us that the New Orleans Pelicans was the team with the most players to 27 in general register players. And that's correct. So what's the team with the lowest field goals? Let's take a look at the data again. So you understand what we're trying to do here for each player for each row. So each row is a player in the 2017 season, we have merged that with our personal information, which we donate in this activity. But basically, we have field goals that the players court in that given season. So we want to aggregate all the field goals of a given team of all their players and find the one with the lowest value for that. To do so, we're gonna, we're gonna group by team, team, and we're gonna find the field goal column, we're gonna sum that column. Of course, this is a mess. So basically, we're gonna do sorted values by sort of values by nothing, because just a series, and it's gonna be ascending. We can actually do a head method here. I want to dots so it doesn't switch. And we find that Dallas Mavericks was the team that scored the least to put in a way field goals in 2017 season, by just computing the aggregation of all its players stats. Let's answer it. And that worked as correct. What is the team with the best field goal percentage? And this is a very interesting one, because field goal percentage is defined as field goals, divided by field goals attempt, that is data we actually have, let me show you again, values. So we have, we have field goals, 134, over 341 attempts, so it's a little bit less than 50%. Right? You tried 341 times to score, and you only made 134. So you made, you made 134 divided by 341, your accuracy to put it away was 0.39 or 39%. So that's the column that we want to compute, that's the value we want, we want to compute. But we want to compute this by team. So we have to aggregate all the field goals and all the field goal attempts from a team, and then find that given percentage. So we can start by doing pretty much the same thing we did before, it's going to be df bro, group by team. And here, we're going to compute two values, we're going to compute field goals and field goal attempts, and we're going to do some of these two. And this method doesn't exist because I miss type, miss type that group by there we go, I find this thing so we can, we can store this, this data frame in a partial variable saying field goals per team. And field goal, field goal per team, we're gonna pre visualize it. And now we can compute a new column, which is going to be it's going to be field goal percentage, which is equals to field goal per team of fg divided fga. And now what we can do is sort values by field goal percentage header, and we're going to find that with the best, so we need to do ascending ascending falls. So the best field goal percentage is Golden State Warriors. Let's try the activity first. Let's find 2017 season, NBA. Who was the champion? playoffs, Western champions, finals, champions, Golden State Warriors. So it's not it's it's not a triviality that the player with the team with the best with the best percentage won the championship. Anyway, let's take a look at the one with the worst or you know, the lowest, which it's not us, but just for the sake of of curiosity, we can find the Memphis Grizzlies, the Las Mavericks, those were the teams with the least accuracy to put it in a way. Okay, so what's the difference between the best and worst three p shooters by position? It is known that shooting guards are the best three p throwers three pointer throwers by efficacy or accuracy. The question is, what's the difference in accuracy with the worst three p throwers always considering by position, to note use the position from POS column. So we're gonna group by position now. And we're going to compute both three pointers and three pointers attempts. I'm gonna sum all this. And this is pretty much the same thing we did with the previous one. But in this case, we're doing it by position. Let's store that in a variable. So we're gonna say position three pointer accuracy, we're gonna store that and now we can create the new column we know it's three pointer percentage, let's call it is going to be three pointer divided by three p a, the attempts. And now we can do position three p accuracy. Now let's sort values by three p percentage ascending folds, the best position shooting guards as expected. Again, this is just domain knowledge in basketball shooting guards are usually the ones shooting better. I could have with a better accuracy. But it's telling dots that we actually need to find is what's the difference in accuracy between shooting guards and the worst position the worst position the data frame, which we found was the PF power forward position, right? So what's the difference in accuracy? Well, we could do something like this minus dots, it's gonna give us the percentage, or we can do something like dots, three p percentage dot max, minus the one min. And now we have pretty much same value without hard coding. The difference is 0.024. So in percentage terms, that's gonna be 2.4%. That's basically this value right here. Tiny difference, right? Like from the first best position to the worst position. And it's not a huge difference. But of course, with so many attempts, it actually adds up potentially in the league. Alright, so this is a very interesting activity, I seriously encourage you to just pause here and try to resolve number 15 by yourself is a very interesting one, it might involve a ton of googling from you, because I mean, it's not trivial. So just, you know, this is your use your chance to go ahead and pause the activity, try to solve it, pause the video, sorry, just solve it by yourself. I give you one second, now we're gonna resume, and I'm gonna solve it live right here. So you can see how I approached the problem. Alright, let's take a stab at it. The activity is asking us to find the best score per team, right? So we want to basically generate this table that it's the name of the player, the team, position on the total points, right? So or not best course in terms of, you know, just amount of score points in their team. So basically, we're gonna do something like, for example, df dot log, df dot team is Oklahoma. And we're gonna get, we're gonna get points dot max. So basically, the max score points in Oklahoma is this amount. And now we're gonna find where I find the player by saying, these on the PTS equals that value, a number. And we found that that was Russell Westbrook. We can pretty much put everything in just a one liner. So we're gonna do I'm gonna copy this thing here. And I first find the max points in team, max point in teams. I'm gonna team is gonna be df at TM dots. I don't remember the Cleveland, which one? No, we were gonna do Boston, how is Boston's probably BOS. BOS is it's just try it out. Boston BOS. There we go. So as our BOS, Boston, and we're gonna do here team, team, I find that the team is team. And this is max points score per team. And say is the best score of Boston. So I want you to understand the problem. This is not the solution we're gonna use. Because I mean, involves a ton of manual work per team, we could potentially just iterate, you know, get all the teams we can actually show that to use, we can do something like for team in here, dots, unique, unique. We're gonna do that. So we're gonna replace here team, we're gonna place here team, print, we're gonna get here two things, we're gonna get player, I'm gonna get team, team, there you go. You get the values, I'm gonna get player, team, sorry, for my variable names, I'm going to do print. I actually can get points as well. PTS. PTS, my variable name is our terrible. We're gonna use it when I say P for team with PTS. I did something wrong here, player, team, df.log. Not enough values to unpack, we're gonna do print this thing break potentially. What if I do this? Okay, I'm doing something definitely wrong here, which I can understand. But basically, what I want to say is that we can potentially do this manually, right? So let's let's just print this thing. Let's print this thing. So Russell Westbrook for Oklahoma with this amount of points, Harrison Burns for Dallas Mavericks with this amount of points. Let's see Houston. Again, it's like we can solve it manually. So Denver Nuggets, Denver Nuggets, Nicola Jokic, Nicola Jokic for Denver. We could potentially solve it manually. But the solution that I want to show you, and it took me some time, solution I want to show you involves a group by operation to put in a way. I'm sorry, because I'm drawing you lately. I'm going to show you a drawing, signifying or trying to explain the solution that I'm going to use. So basically, we have a our full data frame. So we're gonna use black, say data frame. There you go. There is actually a way that I can make this thing a whiteboard. There you go. So we're gonna do this is our data frame. And our data frame contains information about different players. And let's say that we have red for Oklahoma. We have or no, let's actually do red for Chicago. Of course, we're gonna use we're gonna use blue for Oklahoma. And we're gonna use green, green for Boston. I need a darker green. Green for Boston. And the way it's gonna work is we're gonna have these players are just intertwined in the whole data frame, right? So there you go. And let's say that right here, this is the best shooter or the best shooter in the given team. We're gonna have the same thing for for Chicago, we're gonna have this player and that player and that player and that player and there's going to be the best scoring that in in the in the team. And then we're gonna have these player from Oklahoma, this player, this player, and that player from Oklahoma, there's gonna be the best and let's actually put it with that player here, that's going to be the best from each team. So that's basically what we did in the previous solution we filter we said the previous solution the manual one we've created an intermediate data frame that only contain players from a given team Oklahoma in this case, we then found the best core was this value or actually this value right here. And we made a second filtering in which we said find the player in that team with that amount of points. So now we have a single player we want to this is of course a different solution what we want to do now or let's separate it. What I do now is using a group by sort of way operation, we want the we want pandas to focus on different groups of players. So for example, all the blue players, all the green players, all the red players, and perform an operation in a group by group by fashion, but we want it to the result expanding back to the whole group. So we want it to just do that's pretty similar, we're gonna focus on the blue players from Oklahoma, we're gonna do is create the group by operation there, the split piece, find something in this case, we're gonna find the maximum in points. So it's gonna be for example, these maximum points. But instead of what we did before, which is all manual, we wanted to go back and replicate these value, we're gonna call these value V, this value V, very important, we wanted to replicate it back to all the members of the group. So we want these value to be applied here, and here, etc. So we want to we want it to be is gonna be V, V, V, and V. And the same thing for any other group that we have. So for Chicago, now, we're going to do another data frame, splock, and do another data frame. And we're going to do player, player, player, player, that's all going to be done automatically by pandas, find the given value we want, in this case is V again, and just replicate that value V, V, V, V here. And of course, the value when I find is a maximum of PTS. So the column PTS when I compute the maximum value, and then each player is going to have their score. So I don't know, 900 points, or 300 points, whatever, and next to it, there's going to be a new value, there's going to be the top of that group, given the group by operation, here's gonna say, I don't know, a ton of points, 1500, right? So we want each player is going to be 300. And next to it is going to be 1500. And there's going to be 30 point player didn't even play, and there's going to be 1500, right? And of course, this one is going to be 1500 in the in the points and 1500 in the values. Then what we're going to do is we're going to just find the top player or the player with the top points per 13. Alright, let's get rid of that. And finally, resolve the task, which is relatively simple. I mean, there was a huge explanation, but trust me, it's simple, the way we're going to do it is we're going to group by team. If I show you the drawing again, it's like we want to group by team, we want to perform this operation here and this operation here for each team. We're going to group by team, but we're gonna get a PTS, the column want to compute, but here we're gonna apply the operation transform and pass the value max. And that's going to give us a value. And that's basically what I told you before for each team for each for each individual. So it found it found it first broke the players into different groups based on their team. It's found the value we were looking for PTS max, it's assigned value to each one, it found the value, put the value next to each one of this and reassemble the same data frame. And now we're going to have this value once again. So let's hide that and we're going to do df at best score per team is going to be that thing, we're gonna assign it, we can call it this is our v value, of course, I want to use a better variable name. And now we're gonna look at let's say df at team is Oklahoma City Thunder, Oklahoma City and we're gonna find only player and we're gonna find team if you want to repeat it on PTS values by PTS ascending fulls first rows. And here you have that for Oh, of course, I'm forgetting the most important column we computed there. But I find that all the players in Oklahoma City are now have now assigned these new column, which is best score per team, which is equals to the maximum value of PTS from their group. So this is a very, very interesting functionality from pandas transform method. Basically, it's like group a group by operation, so all your data group by operation splits, compute, apply, and then reassemble back the whole thing, don't end up with different groups. So before all the operations was like, okay, see Chicago, Boston, and I've resolved in this case goes back again to the previous shape of the data. So we can basically create these transform data frames to compare it an individual with third group. So this is what we have, we can compare that with Boston now. For example, we can do the same thing for Chicago, I'm just I'm showing you some Boston, the best score was almost 2200 in Chicago, it was 1800. And you can basically see that each player has a PTS value, and then, of course, compared to the best core in the team. Finally, how what we need to do, and I'm going back again to what the activity is asking, is finding the best score per team. So that's basically finding all the players which have a PTS equals to best core per team. So it's gonna be the F dot block, the F at PTS is equals to the F at best score per team, we need to get the values player, team, position, and PTS, of course, let's do that real quick. It's not the same thing, it doesn't look like the same thing. Because if we look at the description, it says that it should be sorted by PTS in descending mode. So now we're going to do sort of values. Let's break this thing before it starts showing that annoying scroll. Sort values by PTS ascending, false. First few rows, Russell Westbrook, James Harden, so we have the same results, it seems we finally need to store this thing in a variable. Let's print the whole thing. And you can see that now the table looks pretty much the same way as before, even for newer looks pretty much the same way. Let's check the activity just as a note on the side of this point, because we did a pretty long developments and that have worked as expected. Okay, we have the final activity cleaning the data frame the notebook a little bit. Which team has the youngest squad by average player age? And this is a very interesting activity, because there are two forms of solving it. The first one is going to involve let me show you first how we we actually computed birth date as a daytime before. So this is from the player's DF, we turn into a birthday. This is very easily solved by doing I'm just giving you the answer straight away. DF dots group by group by birth team team at birthday dot mean. And of course, I made another typo here. Group by and let's just sort of values. There you go. And the interesting piece here, I don't know if you're noticing this right away is that this operation that seems like a very mathematical operation of computing the average or the mean was actually applied to a daytime object, right? So that is that is pretty interesting, because day times are not numbers per se, they're just points in time. But basically, what pandas is doing is finding that birthday kind of in a timeline, I'm finally computing the the mean, which is the youngest team. Well, it's based, it's basically the team that has the greatest, to put it away, the the the latest birth date, right. So 1922, 0314 is the latest date birth date mean birth date, right? So if if we do something like, like, let's let's put this in in timestamp. Now, let's put this in in days, right? So basically, or actually, let's put this in years days, there you go. So the average age, and of course, this is 2017, we can actually do that, we can say this to 2018. Oh, one, oh, one is the same thing. This doesn't change anything timestamp there. So the the the team Portland for the travel trailblazers Portland has the youngest squad by average, right? Because basically the average age was 25 years, not days because we're divided by 365. So 25 years was the average age of the Portland trail blazers and two concepts here I want to separate in the first one. Sorry, the second one that I mentioned was that we are here finding the youngest team that's basically the greatest date, right? If I was born in I was born in a 1987. My brother was born in 1992. He has a newer birth date, right? Most more recent, but that makes him younger, right? I have a an older date, date, a lower value, right? 1987 is lower than 1992. But that makes that makes me older. That makes him younger, right? That's that's the second thing that I mentioned very quickly. The first thing which is the most important one is that let's get rid of that is that the birth date column is a daytime and we correctly had a mean computed for that will be the alternative and actually let's try the activity that works. What is the alternative and I think we have that listed in the solution is, let's say this didn't exist, we'll basically need to transform the date back to a number and we can say, let's say dates. We can say age in days, we have to transform this thing from a date to a number. So we can say the F at age in days, and we can say PD, let's actually let me actually show you the result. First, the F at birth date, minus or actually the other way, PD dot timestamp, we said dot now, minus dots, that gives you a time delta. That's the name of the value pandas time delta, I'm gonna I'm googling it real quick. And we can find a time delta is just a relative duration of time. And that is the total the time delta and we can get for example, to be very precise, we can get total seconds. Total seconds, DT total seconds, or we can get something like days. And here what I'm doing is a DT daytime accessor. So if a pandas series, a column in a data frame is of time if is a daytime or a time delta, it has a special accessor dot DT that lets you perform some daytime calculation on it. Similar as with, for example, the F at team dot STR, we have the STR accessor for string columns, we have the DT accessor for daytime and time delta columns or series. So anyway, we can say this thing, age in will probably will not say it. So we say, we say player, we say birth dates. And we are gonna say age in days, birth dates. There you go. So someone that was born in 1993, oh, 801. So August 1 is 10,893 days old. So now we have transformed the daytime back into a numeric column. And we can now compute the the average age. So we can say group by same thing, team at age in days, dot min, sort values. And I did something wrong, as usual group. I don't know why I have so many issues with this group by today. And now what you can see is that we actually have to think the result in an opposite direction. Now the lowest value is the youngest one, of course, the previous one was the day the most recent date gave us the youngest team. Now the team with the lowest age in days is, of course, the youngest team. That's basically what we're finding right here. And we have let me clear this whole thing. So we can compare birth date. And these age in days, we have the same results. Ideally Portland try let me actually sorted sword ascending false. So we compare the values. And we have Portland, Portland, Toronto, Toronto, Boston, Boston, Orlando, Orlando. So it's the same value for both. I think the interesting takeaway here is how pandas implements all these useful daytime modifications, modifiers, methods, and even these operations. I think that's the most interesting piece so far. So again, wrapping it up this project extremely interesting because we did pretty much the full cycle, we got the data we merged, we identified invalid values using this detective work finding what happened rewinding time, we did some googling, we finally did some cleaning transform data types like birth date, then we did all these, you know, munging of the data, there you go, deleting these totals, understanding that we were working with. And finally, we did all these analysis, my favorite activity is by far the number 15 one with the transform method extremely useful method. So if you want to replay it, just, you know, try to solve it by yourself. And I think, I think this project represents very well, the whole process of data science data, runling data munging, data engineering, everything you're going to find in a in a regular project dealing with date.
