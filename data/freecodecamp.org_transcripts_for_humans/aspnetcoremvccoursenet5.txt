With timestamps:

00:02 - hi guys and welcome to my course on
00:04 - introduction to asp.net core mvc and
00:08 - we'll be using dot net 5.
00:10 - i have seen many people struggle with
00:12 - the concept of mvc or getting to know
00:15 - how dot net core is different as
00:18 - compared to classic.net
00:20 - do not worry i have you covered if you
00:22 - need an introduction on what are the
00:25 - basic files and folders in a dotnet core
00:27 - project or how do you add database to
00:30 - the project how do you connect with
00:32 - entity framework core and much more
00:35 - before you take this free course i want
00:38 - you to be familiar with basics of c
00:40 - sharp and have a basic understanding of
00:43 - how sql queries work and sql server
00:47 - if you have that then this course will
00:49 - be easy to follow along
00:51 - before i walk you through what will be
00:53 - covered in this free course i would
00:56 - appreciate if you would like and
00:57 - subscribe to the channel so that you
01:00 - will be notified for all of the new free
01:02 - content that i will be posting
01:05 - that being said let's take a look at
01:08 - what we'll be covering in this free
01:09 - course
01:11 - we will first start with the
01:12 - fundamentals of asp.net core and the
01:15 - reason behind its evolution
01:18 - after that we will see what are the
01:20 - files and folder structures and we will
01:23 - understand what are basic terminal
01:25 - lodges like pipeline middlewares routing
01:29 - etc in a.net core mvc application
01:34 - once we get our solid foundation then we
01:37 - will add database to our project using
01:39 - entity framework core
01:42 - with that we'll be able to perform crud
01:44 - operations which stands for create read
01:47 - update and delete
01:49 - those are the basic topics that we'll be
01:51 - covering in this free course but that's
01:54 - not it once we have a functional crud
01:57 - operation website we will be deploying
01:59 - that to azure to see everything coming
02:02 - live with our database
02:05 - so we'll be building a website and will
02:07 - be deploying it to azure but along with
02:10 - that the most important thing is
02:12 - assignments and error solving
02:15 - i will be giving you assignments to
02:17 - practice the basic grud operations and
02:20 - you'll see common errors that we see and
02:23 - how to resolve those
02:25 - so join me in this exciting journey of
02:28 - learning asp.net core mvc with net core
02:32 - 5.
02:33 - before we get started i want to show you
02:36 - where you can get all the project
02:38 - resources
02:39 - if you go
02:41 - on.netmastery.com and courses i will
02:43 - have all of the courses listed right
02:46 - here
02:47 - now the free version that you'll see is
02:49 - a free version of the complete course
02:52 - asp.net core mvc up and running part one
02:56 - if you click on the details here and if
02:58 - you click on github code you will have
03:01 - the complete code
03:03 - we won't be building everything in this
03:05 - free course
03:07 - but if you go on the comments here and
03:09 - if you scroll down you go to the older
03:12 - comments you will see exactly on what
03:14 - was being changed like this section is
03:17 - included and if you click on here you
03:20 - will see what was changed in that git
03:22 - comment
03:23 - so if you face any issues you can come
03:26 - on github and you can check everything
03:28 - there
03:29 - one place for all the resources will be
03:32 - dotnet mastery
03:34 - if you click on details you will be able
03:37 - to get all the course content and the
03:39 - github code along with live preview of
03:42 - the course
03:44 - so that being said now you know how to
03:46 - get all of the project resources it is
03:49 - through dotnetmastery.com
03:53 - before we get started let's understand
03:55 - on what are all the softwares that we
03:58 - will need for this course
04:00 - the first software will be sql server
04:03 - 2019 you can also use any older version
04:06 - of sql server that's fine with me but if
04:10 - you want you can download the latest
04:12 - version
04:13 - scroll down here and you can install the
04:15 - developer version since it is the free
04:18 - edition
04:20 - once you have sql server then we need
04:22 - visual studio 2019
04:25 - now the net core version that we are
04:27 - using is dotnet 5
04:30 - and that is available in preview right
04:32 - now since it has not been released yet
04:35 - so for that you will need visual studio
04:38 - 2019 preview
04:40 - you can come here and download the
04:42 - community version and install it
04:45 - along with that you will also have to
04:47 - install.net core5
04:50 - so you can install this and right now
04:52 - the preview version is preview 5. but
04:56 - the course that we will be building was
04:58 - built using preview 4.
05:00 - because of which in the course you will
05:02 - see i installed packages and everything
05:05 - for preview 4.
05:07 - but what you need to do is when you
05:09 - create the project
05:10 - whatever preview version you use make
05:13 - sure to use that same preview version
05:15 - throughout the course in all the
05:17 - packages or the installation that we do
05:20 - once the dot net core 5 is released i
05:23 - will update this and let you know to
05:25 - install.net core 5 and not to work with
05:28 - the preview version
05:30 - that being said if you do not want to
05:32 - work on the preview versions and you
05:35 - would rather work on visual studio 2019
05:38 - you can follow along with the course as
05:40 - well
05:41 - for that you'll install visual studio
05:43 - 2019 and net core 3.1
05:47 - the course will be compatible with that
05:50 - as well
05:51 - so that's all the tools and technology
05:54 - that you will need install them if you
05:56 - do not have them and join me from the
05:58 - next video
06:01 - in this video i want you to walk you
06:03 - through the journey of dot net core
06:06 - dot net core is probably the biggest
06:08 - change that dotnet language has
06:10 - encountered
06:12 - in 2002 microsoft introduced web forms
06:16 - which was a revolution at that time
06:19 - but as the time progressed there was
06:22 - need to organize things and with other
06:24 - drawbacks in picture came a new
06:27 - architecture which was asp.net mvc
06:31 - now even though i love mvc
06:34 - it had its flaws like it was created on
06:37 - top of the components for web forms
06:41 - because of that it was tied to iis and
06:44 - windows
06:46 - but as the web evolved microsoft had to
06:49 - keep up with the change
06:51 - with that finally in june of 2016
06:54 - microsoft released asp.net core and it
06:58 - was the first version
07:00 - now asp.net core is built on top of the
07:04 - new dotnet core framework
07:06 - it is cross-platform version and hence
07:09 - it is not tied with windows
07:12 - also dotnet core was built with cloud in
07:15 - mind so it is extremely ravished with
07:18 - that
07:20 - then in august of 2018 microsoft
07:22 - released.net code 2.0
07:25 - and microsoft team has been very active
07:28 - with releasing the new version
07:30 - as you can see in september of 2019
07:33 - dotnet code 3 was released
07:36 - in the intermediate versions there was
07:38 - darknet code 2.1 and 2.2
07:41 - there was quite a big change coming from
07:43 - 2.1 to 2.2 with respects to identity
07:47 - but with all the versions upgrading to
07:50 - the new version has not been that
07:52 - difficult
07:54 - then in december of 2019 dotnet code 3.1
07:57 - was released which had a long-term
08:00 - support
08:01 - finally in november of 2020 dot net 5
08:05 - will be released
08:07 - this dot net core 5 is right now in the
08:09 - preview version and we'll be using that
08:12 - to create our project
08:14 - so that is just a small journey for the
08:16 - dotnet core frameworks that have been
08:19 - encountered
08:20 - that being said why one should use
08:22 - dotnet core as compared to the
08:24 - classic.net
08:26 - there are quite a few advantages
08:29 - first is the asp.net core is fast and
08:32 - open source
08:34 - next benefit is it is cross-platform
08:37 - the classic.net was tied to windows and
08:40 - iis but when asp.net code was rewritten
08:44 - it removed that dependency
08:47 - with asp.net core we get the built-in
08:50 - support for dependency injection
08:53 - dependency injection saves a lot of time
08:56 - and it is extremely helpful
08:58 - as we proceed with the course you will
09:00 - see the benefits that dependence
09:02 - injection brings to the picture
09:06 - then the updates to new versions for
09:08 - dotnet code are easy
09:10 - because of that you can always keep up
09:12 - with the new versions
09:14 - dotnet core is also cloud friendly
09:17 - when asp.net code was rewritten it was
09:21 - written in a way to make sure that they
09:23 - had the cloud architecture in mind
09:26 - another benefit and one of the most
09:28 - important one of asp.net core framework
09:31 - is its higher performance
09:34 - with the new enhancements as well as
09:36 - upgrades the code actually gets much
09:39 - more optimized that results into
09:42 - improved performance
09:44 - the asp.net core compiler will
09:46 - eventually optimize the entire code
09:49 - whenever the code is recompiled using
09:52 - asp.net core framework
09:55 - asp.net core's actual performance is
09:58 - multiple times more than any of the
10:01 - famous framework
10:02 - implementations because of that it is
10:05 - clear that microsoft has quite a long
10:07 - term plan with this asp.net code
10:10 - technology
10:12 - so with that let's continue learning in
10:14 - the next video
10:17 - what we want to do first is we want to
10:19 - create our project
10:21 - so for that we will open up visual
10:23 - studio 2019
10:25 - right now i am on the preview version
10:28 - because we do not have the dotnet 5
10:30 - released so we'll be using the preview
10:33 - version with the.net 5 of preview as
10:36 - well
10:37 - so in here we will create a new project
10:42 - then we have a list of all of the
10:44 - templates that are available what we
10:46 - want is asp.net code web application
10:50 - you can also search for that if you
10:52 - cannot find it
10:54 - once we select that we will hit the next
10:56 - button
10:57 - and then we need to give project name
11:00 - location and a solution name
11:03 - i will call this as rocky and i'll
11:06 - change the location to where i want to
11:08 - save it
11:10 - so i'll select the location and we will
11:13 - hit the create button
11:15 - once you hit the create button it will
11:17 - give you more options that you can
11:19 - configure for asp.net code web
11:22 - application
11:24 - right here you can see the version which
11:26 - is asp.net core 5.
11:29 - along with that you can see right here
11:32 - we are on the preview version right now
11:35 - now if you'll be taking this course in
11:37 - the future preview versions might be
11:39 - different
11:40 - so make sure that you select the most
11:42 - latest preview version
11:44 - and then in all the other places make
11:47 - sure you use that exact preview version
11:50 - that being said once you have the dotnet
11:53 - core and asp.net core 5 here on the
11:56 - right hand side you can select
11:58 - authentication
12:00 - if you hit change here you have no
12:02 - authentication individual users account
12:05 - worker school or windows authentication
12:08 - now i could go with individual users
12:11 - account and get a built-in
12:12 - authentication
12:14 - but i want to set everything up from the
12:16 - scratch
12:18 - so we'll go with no authentication and
12:20 - then later in the course we will add
12:23 - authentication
12:25 - that being said in the advanced we have
12:27 - the configure for https we will select
12:30 - this we do not want to go into docker
12:32 - details right now so i will skip this
12:36 - next i will enable the razer runtime
12:39 - compilation
12:40 - now previously enable razer runtime
12:43 - compilation was not available here and
12:46 - you had to add a new get package for
12:48 - that
12:49 - but now they have added this in the
12:51 - options
12:52 - and i think this was a much needed move
12:54 - because razer runtime compilation is one
12:57 - of the core features that you need when
12:59 - developing application
13:02 - this enables that if you make some
13:03 - changes to javascript file and if you
13:06 - save the application go back and refresh
13:09 - it automatically populates the changes
13:12 - rather than restarting the application
13:16 - so that's enough details about that we
13:18 - will make sure that this box is checked
13:21 - and then the main thing here is what
13:23 - template that we want
13:26 - now here there are quite a few template
13:28 - we can start with an empty project api
13:30 - project
13:31 - web application which is razer pages or
13:35 - mvc application
13:37 - i will go with the mvc application and
13:40 - this will give us a basic setup for an
13:43 - mvc application
13:45 - we don't have the authentication and
13:48 - once everything looks exactly like i
13:50 - have let's hit the create button
13:54 - this will create our project and it will
13:56 - add few files and templates to our
13:59 - project
14:01 - great so our project has been added and
14:04 - right here we see quite a few files
14:07 - let's continue working on this in the
14:09 - next video
14:12 - our project has been created and it's
14:15 - time to take a look at the files and
14:17 - folders that we have inside our project
14:20 - the first file will be the project file
14:22 - that we will be taking a look at
14:25 - for that if you right click on the
14:27 - project you will see the option of edit
14:30 - project file
14:32 - other way of accessing that file is just
14:34 - double click on rocky
14:36 - that will load the project file by
14:38 - default
14:40 - now here in the project file you should
14:42 - notice the target framework that we are
14:44 - using is net core f5
14:47 - so this will be the dotnet framework
14:49 - that we will be using for our solution
14:53 - if you are using 3.1 or 3.0 that is the
14:57 - version you will see right here
14:59 - then we have few more elements
15:02 - and the other important entity will be
15:04 - the item group
15:06 - item group will have all of the
15:08 - third-party packages that we will be
15:10 - installing in our project
15:12 - right now when we created the project we
15:15 - selected the runtime compilation on the
15:18 - project options
15:19 - because of which it has added that nuget
15:22 - package right here
15:24 - when we will be adding more packages
15:26 - like we'll be adding database packages
15:29 - email packages all of those will be
15:31 - added in the item group and we'll be
15:34 - watching them once we add new packages
15:37 - in the upcoming videos
15:39 - when you have to add the package you do
15:41 - not have to come here and manually add
15:43 - the line we will be doing that using new
15:45 - git packages
15:47 - that being said this looks good for our
15:49 - project file let's continue with the
15:51 - other files in the next video
15:55 - next important file that i want to show
15:57 - you is the program.cs
16:00 - now we won't be going through all the
16:01 - files in the same order but i will be
16:04 - going through them in an order that will
16:06 - be easier for you to understand
16:09 - the next file we'll be taking a look is
16:11 - the program.cs
16:13 - if we scroll down here you will see that
16:16 - there is a main method
16:18 - main method is more common in console
16:20 - application
16:22 - and the reason you see that here is
16:24 - initially.net core application starts as
16:27 - a console application
16:30 - the main method configures asp.net core
16:33 - and starts it
16:35 - the configuration is done by calling the
16:37 - create host builder and as you can see
16:41 - this is a method in the program class
16:43 - which returns an object of ihost builder
16:48 - on this object build and run are called
16:51 - and then onwards the application will
16:54 - become an asp.net core application
16:58 - the create host builder calls default
17:01 - builder which configures the web host
17:04 - using defaults
17:06 - also you can see the web builder is
17:08 - configured using the startup file
17:11 - before we take a look at the startup
17:13 - file in detail let's understand a core
17:16 - concept of asp.net core which is
17:19 - dependency injection
17:22 - in this video before we take a look at
17:24 - the other files i will introduce you to
17:27 - a new concept which is dependency
17:29 - injection
17:31 - asp.net core implements a simple
17:34 - built-in dependency injection container
17:37 - dependency injection is an integral part
17:40 - of asp.net core architecture
17:43 - dot net core injects objects of
17:46 - dependency classes through constructor
17:49 - by using the built-in ioc container
17:53 - that being said let me try to explain in
17:55 - simple words what dependency injection
17:58 - is and what benefit it brings
18:01 - let's consider a scenario without
18:03 - dependency injection
18:05 - so in any application let's say we have
18:08 - three pages right now
18:10 - and we have some common functionality
18:12 - that we want to use across all the three
18:15 - pages like email and database access
18:19 - now let's imagine that on all of these
18:21 - pages we need access to database first
18:24 - so what we will do is we will create the
18:26 - database object on all the three pages
18:29 - and in our case we'll call the class
18:31 - name sdb
18:34 - then we'll have to do the same then
18:36 - create object of the email
18:37 - implementation that we have in all the
18:40 - three pages for the email class
18:43 - now consider a scenario what happens if
18:46 - in future you change the implementation
18:49 - of how you access the database or email
18:52 - based on the current configuration you
18:54 - might have to make changes in all the
18:57 - three pages
18:58 - which is a big mess
19:00 - another issue here is on each page you
19:03 - have to deal with
19:05 - creating the object managing them as
19:08 - well as disposing them and that would
19:10 - consume time in each and every page
19:13 - which is a bad approach
19:16 - so that being said what is a solution to
19:18 - avoid all of this
19:20 - the answer is dependency
19:22 - injection with dependency injection
19:25 - let's first see how the scenario would
19:28 - look like
19:29 - we will again have all the three pages
19:32 - and the email and database functionality
19:35 - here along with all the things that we
19:37 - had before we will have something new
19:40 - which is a dependency injection
19:42 - container
19:44 - then we will have the email and database
19:46 - functionality but rather than having
19:49 - them in just classes we will also have
19:52 - an interface for email and database
19:55 - then our classes will be implementing
19:58 - those interface and we will register the
20:01 - interfaces in our dependency injection
20:04 - container as you can see
20:07 - so we will tell dependency injection
20:09 - container that i email is an interface
20:12 - and email is implementation of that
20:14 - interface
20:16 - when any page will need to access these
20:18 - functionalities it will just ask the
20:21 - dependency injection container to create
20:24 - object of this functionality and
20:26 - directly give us the object to use
20:29 - so inside the page we will actually be
20:32 - using interfaces and then dependency
20:35 - injection does all its magic of passing
20:38 - the object when the website needs it
20:41 - that way we do not have to deal with
20:43 - creating the object disposing or
20:45 - managing that object inside our pages
20:48 - our pages will look very clean with just
20:51 - the interface and all the instance and
20:54 - implementation will be done by the
20:56 - dependency injection container
21:00 - now in future if you want to change or
21:02 - replace the email class you do not have
21:04 - to make any change in the pages
21:07 - all you have to do is you just need to
21:09 - change the implementation that you do in
21:12 - the dependency injection container in
21:15 - one location
21:17 - also as i have said before creating and
21:19 - disposing object is now the
21:21 - responsibility of the built-in
21:24 - dependency injection container and we do
21:27 - not have to worry about it anymore which
21:30 - is a great relief
21:32 - so you can see that there are lots of
21:34 - advantages that dependency injection
21:37 - brings to the architecture
21:40 - that being said with net core we have
21:42 - the built-in dependency injection
21:44 - container
21:46 - now how do we register these
21:47 - dependencies or where do we register
21:50 - these dependencies
21:52 - let's understand a part of that in the
21:54 - next video
21:56 - we had to take a detour to understand
21:58 - dependency injection before we
22:01 - understand the next file which is
22:03 - startup right here
22:05 - you can right click here and go to the
22:07 - definition or you can open up the
22:09 - startup file from here itself
22:12 - now startup class as you can see is a
22:14 - basic class with no extensions or
22:17 - implementations of interface
22:19 - but the first thing that you notice if
22:21 - you scroll down is that there are two
22:23 - methods
22:25 - the first one is the configure services
22:27 - and the next one is the configure method
22:30 - both of these methods are invoked
22:33 - automatically by asp.net core
22:36 - configure services gets called first we
22:40 - will be registering all the dependencies
22:42 - with dependency injection container that
22:45 - is built in in asp.net core within the
22:48 - configure services
22:50 - so that is why i wanted to introduce you
22:53 - to dependency injection in the previous
22:56 - video
22:57 - because configure services is the place
23:00 - where you do the registration of your
23:02 - service
23:03 - if we switch back to the powerpoint
23:06 - the step that we do when we register our
23:09 - email and database with interface as
23:11 - well as the implementation that is the
23:13 - step that we will do inside configure
23:16 - services method
23:18 - so inside the configure services method
23:20 - we can add services to the collection of
23:23 - services
23:25 - services are basically any functionality
23:28 - that you want to register so other parts
23:31 - of application can use it
23:33 - as we saw it could be email database and
23:36 - much more
23:38 - we will be registering the services
23:40 - provided by the.net core framework as
23:43 - well as custom services that we will
23:45 - create
23:47 - as of now you can see right here we just
23:49 - have one services
23:51 - which is add controllers with views
23:54 - and with this we register mvc service to
23:57 - our application
23:59 - we will be adding more services here but
24:02 - before we dive into mvc in the next
24:05 - video let's understand the configure
24:07 - method
24:09 - but remember that configure services
24:11 - method gets called by the runtime and we
24:14 - use this method to add services to our
24:16 - container
24:18 - that being said let's continue in the
24:20 - next video
24:23 - in the last video we took a look at
24:25 - configure services
24:27 - next method that we have here is the
24:30 - configure method here we see the i
24:33 - application builder as well as the iweb
24:36 - host environment
24:38 - environment we are using only to check
24:40 - if it's development or if it's something
24:43 - else
24:44 - based on that we are configuring the
24:46 - pipeline
24:47 - but the i application builder configures
24:50 - the http request pipeline of asp.net
24:53 - core
24:55 - the pipeline specifies how the
24:57 - application should respond to http
25:00 - request
25:02 - let's take a look at this with an
25:03 - example
25:04 - so in order to understand what the
25:06 - pipeline is let me switch to the
25:08 - presentation here
25:11 - we have different browsers here and then
25:13 - we have a pipeline
25:15 - the pipeline specifies how the
25:17 - application should respond to http
25:20 - request
25:22 - when your application receives a request
25:24 - from the browser the request goes back
25:27 - and forth through the pipeline
25:30 - in the pipeline you can add items that
25:32 - you want
25:34 - pipeline is made up of middlewares and
25:37 - mvc is a middleware itself
25:40 - so if we want an application to be built
25:43 - using mvc we need to add that middleware
25:47 - other examples could be authentication
25:49 - middleware authorization middleware
25:52 - session middleware static files
25:54 - middleware and much more
25:57 - so what exactly happens is when your
25:59 - request will go through each middleware
26:02 - it can get modified by them and
26:04 - eventually it is either passed to the
26:07 - next middleware and if that is the last
26:10 - middleware in the pipeline the response
26:12 - is returned back to the server
26:15 - let's take a look at the few middlewares
26:17 - that are already added in our
26:18 - application so if we switch back to the
26:21 - code inside the configure method first
26:24 - we are checking if the environment is
26:26 - development then we are adding a
26:28 - middleware for developer exception page
26:32 - else we have the exception handler which
26:35 - displays a custom error message because
26:38 - we do not want to show them the
26:39 - developer or the coding error
26:42 - then the next middleware is use https
26:45 - redirection
26:46 - this forces the user to use a secure
26:49 - line and then we are adding static files
26:53 - what i mean by static files is that any
26:55 - web project needs styling javascript
26:58 - images and much more
27:00 - so all of the static content will be
27:02 - served by our application only because
27:05 - we added the middleware to use the
27:08 - static files
27:10 - then we are adding the routing
27:12 - middleware followed by authorization
27:14 - middleware
27:16 - you can see authorization is added
27:18 - before the end points right here
27:21 - and that is because order matters when
27:23 - it comes to the middleware
27:25 - when the request comes in it is passed
27:28 - from the first middleware to the second
27:30 - to the third and so on
27:33 - in endpoint we configure the default
27:36 - route for our application
27:39 - that being said before we understand the
27:41 - endpoints in more detail
27:43 - let me explain you routing in the next
27:45 - video
27:48 - inside the configure method we have seen
27:50 - the use routing as well as use endpoints
27:54 - that being said we haven't seen the
27:56 - actual mvc routing and how that works
28:00 - endpoint routing has been introduced in
28:02 - asp.net core 3.
28:05 - in the initial version of asp.net core
28:08 - routing was a part of mvc but it has
28:11 - been separated out to make routing
28:13 - available to all the middlewares and not
28:16 - just mvc
28:18 - whenever a request comes in it hits an
28:20 - endpoint
28:21 - and that endpoint is processed by the
28:24 - middleware
28:25 - before we get into those details let me
28:28 - switch to presentation and i can give
28:30 - you example of routing
28:33 - the url pattern for routing is
28:35 - considered after the domain name
28:38 - so in this case it will be after
28:40 - localhost and the port number which is
28:43 - five five five
28:45 - then in the example url that we have we
28:48 - see category forward slash index forward
28:51 - slash three
28:53 - in an mvc application the first thing
28:56 - that you will see will be the name of
28:58 - the controller
28:59 - after that we will have the name of the
29:01 - action
29:02 - followed by the id
29:04 - also keep in mind that id is an optional
29:07 - field
29:08 - some of these fields can be optional and
29:11 - if they are not present it will take the
29:13 - default value
29:14 - like if an action name is missing it
29:17 - will default the action name to be index
29:21 - you can change the defaults if you want
29:23 - but if we switch back to our application
29:26 - and if we see the end point that we are
29:28 - using we have a default pattern in which
29:31 - we have the controller name defaulted to
29:33 - home
29:34 - action name defaulted to index and we
29:37 - have an id property which is optional
29:41 - so with that in place let's try to see
29:43 - some more examples here
29:45 - the first example we have forward slash
29:48 - category forward slash index
29:50 - so in that case category will be the
29:52 - controller index will be the action
29:55 - we do not have anything for the id so id
29:59 - will be null
30:01 - next what we have is only category
30:04 - in that case the controller will be
30:06 - category controller and action will be
30:09 - defaulted to index action
30:11 - and if no id is present it will be null
30:15 - then we have category forward slash edit
30:18 - forward slash three
30:20 - we have all the fields here
30:22 - controller will be category
30:24 - edit will be the action
30:27 - and id will be three
30:30 - in the last example we have product
30:32 - forward slash details forward slash
30:34 - three
30:35 - again we have all the three entities
30:38 - controller will be the product action
30:41 - will be details and id will be three
30:45 - now in mvc there is a route table which
30:48 - tries to match endpoints to find out
30:51 - where to pass the request
30:53 - to be on track here if we have a url
30:56 - like this in mvc home would point to a
30:59 - controller and index would point to an
31:01 - action method as we saw in the last
31:04 - slide
31:05 - now if you are not aware about what is a
31:07 - controller what is an action method
31:10 - do not worry right now
31:12 - just understand that this is one way of
31:14 - routing
31:16 - we will be getting into mvc details very
31:19 - shortly
31:20 - but asp.net core is now more than just
31:23 - an mvc application
31:25 - it can also have razer pages and signalr
31:29 - that being said it is possible to have
31:32 - all three in a single application
31:35 - all of these technologies have
31:37 - middlewares that register endpoints
31:41 - so if we switch back to our application
31:43 - right here we see a middleware of use
31:46 - routing in startup.cs so let's imagine
31:49 - at some point we hit this middleware
31:52 - at this point the request will inspect
31:54 - all of the registered endpoints
31:57 - they can be endpoints registered by mvc
31:59 - or any other technology
32:02 - it determines whether it should send the
32:04 - request to mvc or any other technology
32:08 - then for all the middlewares that will
32:10 - be executed after this we'll know that
32:14 - end point has been selected like mvc or
32:17 - razer pages
32:19 - and then later on when it hits the end
32:22 - point in the use endpoints we will
32:25 - register the end point and then when the
32:28 - request arrives at this point it will be
32:31 - processed by the end point that was
32:33 - selected in use routing
32:35 - so in expression we have the end points
32:38 - and we have an object for the options on
32:42 - this object there are several extension
32:44 - methods that are available to register
32:46 - different endpoints like right here we
32:49 - are registering the mvc
32:52 - then we have other endpoints for razer
32:54 - and signalr as well
32:57 - we will be adding razer endpoint later
32:59 - in the course
33:01 - and within the controller which is the
33:03 - mvc we have added a default pattern
33:06 - so by default it will load the home
33:08 - controller and index action if nothing
33:11 - has been loaded
33:12 - so here we also have registered a
33:15 - default route for mvc application which
33:18 - has a controller name home and an action
33:21 - method called as index
33:24 - this map controller route uses routing
33:27 - table to match against the request
33:30 - this is the basic overview of routing
33:32 - middleware that we have that being said
33:35 - before i actually run the application
33:37 - and walk you through routing in demo
33:40 - let me finish the overview of the other
33:43 - files and then we'll get back to routing
33:45 - and view it live in action
33:49 - in this video i want to introduce you to
33:51 - appsettings.json
33:54 - this is the file in which we'll be
33:55 - adding all of the connection strings and
33:58 - static files like secrets that we want
34:01 - in a production application you can move
34:03 - this to words or secrets but we'll be
34:06 - using app settings for this course
34:09 - here right now we see the logging and in
34:11 - that we have some things that have been
34:13 - configured
34:15 - we will be adding connection strings
34:17 - along with other things in this course
34:19 - inside the app settings
34:22 - whenever there are any keys or anything
34:24 - that we want to use throughout the
34:26 - course it is a great place to store them
34:28 - right here
34:30 - that being said we'll come back to this
34:32 - file and we'll be adding new things in
34:35 - the upcoming videos
34:38 - next what we want to see here is we have
34:41 - a folder called www root
34:44 - this folder has been created since we
34:47 - selected the mvc application
34:50 - in here if you expand this there are
34:52 - more folders that has static files for
34:55 - our application
34:56 - static files could be css javascript or
35:00 - any of the third-party libraries
35:03 - you can also have images here or html
35:07 - templates
35:09 - if you remember in startup.cs if we go
35:11 - there we added a middleware use static
35:14 - files and that was added so that the
35:17 - application can use the static files
35:20 - that we add inside www root
35:24 - this www root folder will be the root
35:27 - folder in application for all static
35:30 - files
35:31 - none of the c sharp files will be placed
35:34 - in this folder
35:36 - this folder is only meant to serve all
35:38 - the static files for our application
35:42 - so we'll be using the static files
35:44 - folder extensively throughout the course
35:47 - when we have to add images or we want to
35:50 - add any class libraries or we want to
35:52 - modify external css
35:56 - once we have that the last thing that we
35:58 - have is launch settings.json
36:01 - launch settings.json is inside the
36:04 - properties folder and if we double click
36:07 - it displays different profile in which
36:09 - we can run the application like here if
36:13 - the profile is iis express it sets the
36:16 - environment variable for that profile to
36:18 - be development
36:20 - this way you can configure more profiles
36:23 - that you want with the url as a support
36:26 - and other functionalities
36:29 - also when we will run the application
36:31 - right here we will be seeing all the
36:33 - profiles that we have set up inside the
36:36 - launch settings
36:37 - so right here you can see iis express
36:40 - and we have the rocky profile
36:43 - if you want to modify them you can
36:45 - modify here directly or you can also do
36:48 - the same if you right click here
36:50 - and here if you go to the properties
36:53 - we will be having those profiles in the
36:55 - debug tab
36:56 - so right here you see iis express as
36:59 - well as rocky we can set the browser url
37:03 - and we can set the environment variables
37:05 - that we want
37:07 - here we have the other settings which
37:09 - you can set from that page or we can do
37:12 - in the launch settings.json
37:15 - now we won't be tweaking this much
37:17 - because this is more related to
37:18 - deployment and if you want to add more
37:21 - environment variable for like staging
37:23 - another environment but we'll just keep
37:25 - it with the basic for this course
37:29 - so with that we have covered all of the
37:32 - files that we see in the project except
37:34 - three main folders which is controllers
37:37 - models and views
37:39 - and as you would have guessed this is
37:41 - what mvc stands for which is model view
37:45 - and controller
37:47 - that being said let's understand the
37:49 - architecture of an mvc application
37:52 - the first thing in mvc is the model
37:55 - model represents the shape of the data
37:59 - a class in c-sharp is used to describe a
38:02 - model
38:03 - the model component corresponds to all
38:06 - the data related logic that user works
38:09 - with
38:10 - this can represent either the data that
38:12 - is being transferred between view and
38:14 - controller
38:16 - or any business logic related data
38:19 - model would also represent all the
38:21 - tables of the database
38:24 - so if you have 10 tables in the database
38:26 - you will have at least 10 models on top
38:29 - of that there is also more complexity
38:32 - but we will go into those details later
38:35 - on in the course
38:37 - so if a class is a model then all the
38:39 - properties in that class will be all the
38:42 - columns of a table
38:44 - so that is the simple relation that you
38:46 - can think about model right now
38:50 - then we have the view
38:52 - view in an mvc is a user interface
38:56 - view basically means whatever you see
38:58 - when you click a web page the ui that
39:01 - you see that will be represented by the
39:03 - view
39:05 - view in asp.net mvc is html css and some
39:10 - special syntax which is razer syntax so
39:14 - main thing about view is that it
39:16 - represents the user interface logic of
39:19 - your application
39:21 - finally we have the controller
39:24 - the controller handles the user request
39:27 - typically whenever a request comes in
39:30 - like user clicks anything it will raise
39:32 - an http request which will be handled by
39:35 - the controller
39:37 - the controller then uses the model as
39:40 - well as view to process the request and
39:43 - then it returns back an appropriate
39:45 - response
39:47 - so controller acts as an interface
39:49 - between model and view to process all
39:53 - the business logic incoming requests and
39:56 - it manipulates the data using model and
39:59 - interact with the view to render the
40:02 - final output
40:04 - this is just a brief overview of how
40:06 - model view and controller interacts
40:10 - so just to summarize what happens is
40:12 - first a user clicks something on the
40:14 - website
40:15 - so a request comes to controller
40:18 - controller will always be the main entry
40:21 - point in an mvc application and in
40:24 - controller it will hit any of the action
40:27 - methods that we have defined inside the
40:29 - controller
40:31 - now controller will uses the model and
40:34 - it will fetch all the data that it needs
40:37 - to display in a view
40:39 - then it passes that data to the view so
40:42 - that view can render the final page that
40:44 - user can see
40:46 - then view will send the request back to
40:48 - the controller
40:50 - and then based on whatever is rendered a
40:53 - response will be sent back and user will
40:55 - be able to see the page
40:58 - so you can see controller can be treated
41:00 - as heart of your application
41:03 - with that in place in the next video
41:06 - let's run our application for the first
41:08 - time and see how model view and
41:10 - controller interacts and how routing
41:13 - works
41:15 - now before i run the application and
41:17 - show you routing in detail let's take a
41:19 - look at the folders that we have with
41:22 - model views and controllers
41:25 - so right here we have a home controller
41:28 - and in the model we have the error view
41:30 - model
41:32 - whenever we'll be adding new models or
41:34 - if we want to add a new table in the
41:36 - database we will be adding models inside
41:39 - this folder
41:41 - controller as we know is the heart of
41:43 - the application
41:45 - in controller if you expand this you see
41:48 - there are many of the functions
41:50 - these are known as individual action
41:53 - method
41:54 - so a controller has action method if we
41:58 - go back to the routing template that we
42:00 - had we had the controller name and the
42:03 - action name
42:04 - so what means is if someone calls index
42:07 - then they can call it home forward slash
42:10 - index and the control will hit this
42:13 - breakpoint when the url is submitted
42:16 - and once the control gets here we are
42:19 - just returning back the view
42:21 - so this view will be inside the views
42:23 - folder and inside the home folder
42:27 - the folder name will match exactly as
42:29 - the controller name
42:31 - so it will look for an index view inside
42:34 - the home folder inside views
42:36 - and that will correspond to the action
42:38 - method that we see right here
42:41 - so what we have in the index view is if
42:44 - you open it we have a title
42:47 - we have welcome here
42:49 - and then we have learned about building
42:50 - web apps with asp.net core
42:54 - let's run this and make sure that this
42:56 - is actually working
42:58 - so let's run our application for the
43:00 - first time and great we see that page is
43:03 - loaded
43:04 - now right here in the url we do not see
43:07 - any controller or action name
43:09 - and the reason is if we go back to the
43:11 - application in startup we configured the
43:14 - default to home controller index action
43:18 - so that being said if you add a
43:19 - debugging point right here and if you go
43:22 - back and press enter you will see that
43:25 - it hits this breakpoint
43:27 - so it is actually calling the index
43:29 - action method inside your home
43:31 - controller
43:33 - that being said let's continue here and
43:35 - the view is loaded
43:37 - now what will happen when we click
43:39 - privacy
43:40 - you can see in the url on the bottom
43:43 - here it is going to home controller and
43:45 - privacy action method
43:48 - so right here inside home controller we
43:50 - have the privacy action method which
43:53 - just returns back a view
43:55 - that view will again be inside views
43:58 - home and we have the privacy view and
44:00 - this is what we should see when we click
44:03 - that
44:04 - let's go back and click here
44:06 - now you can see the control is getting
44:08 - to the privacy action method
44:11 - and if you hit continue the privacy view
44:14 - will be loaded
44:16 - great so we can see how routing is
44:18 - working so far
44:20 - right now we do not have any id even if
44:23 - you add an id it will still load the
44:25 - privacy because id is optional
44:28 - so if you have it or if you do not that
44:31 - doesn't matter
44:32 - so with this routing is making little
44:35 - bit more sense on how the controllers
44:37 - and view routing works
44:40 - one thing you should always remember is
44:42 - if your name is home controller
44:44 - you should have a folder within the view
44:46 - with the name home
44:48 - and in there you will add all the views
44:50 - corresponding to the action methods
44:53 - inside the home controller
44:55 - that being said right here there are few
44:57 - more views that i want to explain you
44:59 - let me do that in the next
45:02 - video in the last video we saw the
45:05 - routing and we saw how the model and
45:08 - views are integrated together
45:11 - that being said in the views we have a
45:13 - shared folder
45:15 - this shared folder is used for partial
45:17 - views
45:19 - partial views are similar to user
45:21 - components if you are coming from
45:22 - classic c-sharp
45:24 - so it is basically a view that you want
45:27 - to consume in multiple places in your
45:30 - application
45:31 - along with that we have a special
45:33 - partial view which is underscored layout
45:36 - underscore layout is the default master
45:39 - page for your application
45:43 - so in here if we scroll back to the
45:45 - project that we are running
45:48 - we have the header here
45:50 - so the header and footer are included in
45:53 - underscore layout right here we have the
45:55 - header then we have render body and we
45:58 - have the footer
46:00 - along with that in underscored layout we
46:03 - have some styling and javascript that
46:06 - can be used throughout the application
46:09 - so in future if you want a styling or a
46:11 - javascript functionality that you want
46:13 - to use throughout the application
46:16 - this is the place where you will add it
46:18 - other than underscore layout we have a
46:21 - partial view which is validation scripts
46:24 - partial
46:25 - this partial view just has the reference
46:27 - to some of the jquery for validation
46:31 - we will be using this in the future
46:33 - videos
46:35 - then we have error.cs hdml and this is
46:38 - just a common error view that we have in
46:41 - developer mode
46:43 - so that's about the shared folder views
46:45 - we will be adding more partial views in
46:47 - future
46:49 - that being said inside the views folder
46:51 - we also have two important files
46:54 - first is the view imports
46:56 - the purpose of view imports.cs hdml file
47:00 - is to provide a mechanism to make
47:03 - directives available to razer page
47:05 - globally so that you don't have to add
47:08 - them to the pages individually
47:11 - so right here it is adding the tag
47:13 - helpers
47:14 - so with this all the default tag helpers
47:16 - that asp.net code team provides will be
47:19 - added to all of the razer pages in your
47:22 - application
47:24 - if you do not have this then you won't
47:26 - be able to use tag helpers in your
47:28 - project
47:30 - an example of tag helpers can be seen in
47:33 - underscored layout if we expand the
47:35 - header right here you see this tag
47:38 - helpers asp area asp controller asp
47:41 - action
47:43 - these are all the tag helpers that make
47:45 - the binding look like html language but
47:48 - it does the binding with your c sharp
47:51 - code
47:52 - tag helpers is an idea that microsoft
47:55 - team has adopted from other languages
47:58 - after looking at the success like
48:00 - angular and react
48:03 - so if in future if you add more custom
48:05 - tag helpers you can register them here
48:08 - and they will be available for use
48:10 - throughout the application
48:13 - that being said we'll go to the next
48:15 - file which is view start
48:18 - the main purpose of view start is to set
48:21 - values that all the other views will
48:23 - have to use
48:24 - if this view exists and it is under the
48:27 - views folder it enables us to set the
48:30 - property that applies to all the views
48:32 - in the system right here
48:35 - a most common underscored layout view
48:37 - will set some properties
48:40 - the default one in mvc is the layout
48:42 - page
48:44 - however you can also do complex thing in
48:46 - view start for example you can say that
48:49 - for a specific controller you want to
48:52 - change the layout page you can add if
48:54 - condition check the controller name and
48:57 - do complex logic
48:59 - but we'll just leave it simple for now
49:01 - so here we are defining the default
49:03 - master page for the application is
49:06 - underscore layout right here
49:09 - so if you change this your master page
49:11 - could be changed using the layout
49:13 - property in view start
49:15 - also what you can do is you can add a
49:17 - view start inside the folder as well and
49:20 - then that file will take precedence
49:23 - so with that i believe we have covered
49:25 - all the files that we have when the
49:27 - project was created
49:29 - now this has been a lengthy section and
49:31 - it was mostly theoretical with very
49:34 - little exposure to routing and the
49:36 - project
49:38 - but this won't be the same moving
49:40 - forward
49:41 - moving forward everything will be hands
49:43 - on and we will be coding everything and
49:46 - exploring asp.net core in detail
49:50 - so that being said let's get started
49:52 - with everything from the next video
49:56 - now that our project is created and we
49:59 - have an overview of all of the files
50:01 - that comes by default
50:03 - let's add our model
50:06 - now what is a model
50:08 - model will represent a table that we
50:10 - want in our database
50:13 - so for our application we want to add a
50:16 - table in our database for category
50:19 - in there we will have three columns
50:22 - we'll have category id category name and
50:24 - display order
50:26 - as i told you before we will not be
50:28 - touching the database directly if we
50:31 - have to make any change to our database
50:34 - or even create the database we will be
50:36 - doing that from our code
50:39 - so for that what we will do is first
50:42 - inside the models folder here we will
50:44 - right click and we will add a new class
50:47 - file
50:49 - and we will call this as category
50:52 - inside category
50:54 - what are all the columns that we want
50:57 - all of those columns will be properties
50:59 - of this class
51:01 - so we can use the snippet prop and press
51:04 - tab twice
51:06 - then we have a property that is
51:07 - generated
51:09 - first we want the id which will be
51:12 - category id or i can call this as mid
51:16 - in sql server for columns you can have
51:19 - them as identity
51:21 - an identity column will mean that you do
51:24 - not have to pass those values
51:26 - whenever you add a new record it
51:29 - automatically increments by 1 and
51:31 - creates that
51:33 - but you only have id here how do you
51:36 - tell the database or entity framework
51:38 - code that this column needs to be a
51:41 - primary key and it needs to be identity
51:45 - for that we have data annotations
51:48 - you can see right here it is inside
51:52 - system.componentmodel.data annotations
51:54 - if you press enter here it automatically
51:57 - adds that namespace
51:59 - right here
52:01 - once you add data annotations it tells
52:04 - entity framework that this column needs
52:07 - to be an identity column and a primary
52:09 - key for our table
52:12 - entity framework also has default so if
52:15 - the name is id or if the name is
52:18 - category followed by id then it
52:21 - automatically adds it as a key entity so
52:24 - even if you do not add this it will be
52:27 - added by default
52:29 - but i always like to be explicit about
52:31 - it so that when someone sees our model
52:34 - they can get a better idea using this
52:38 - there are many more data annotations but
52:40 - we won't go into those details right now
52:43 - i want to start from all the basic and
52:46 - then we'll go into the advanced concept
52:49 - next what property we want we'll press
52:52 - prop again and tab twice
52:54 - next we want a string and we will call
52:57 - this category name
52:59 - you can call this category name or i'll
53:02 - just go with the name
53:04 - last property that we want is an integer
53:07 - and let me call this display order
53:10 - now we won't be using this but i'm just
53:12 - adding a new property so i can show that
53:15 - to you guys
53:16 - so now what we have is we want to create
53:19 - a category table in the database and we
53:22 - want these three columns in that table
53:25 - but how do we do all that
53:27 - let's take a look at that in the
53:29 - upcoming videos
53:32 - now we have created our first model
53:34 - which is the category model
53:36 - we need to push this model to our
53:39 - database
53:40 - but first we do not even have a database
53:43 - for our project
53:45 - so let's go to sql server management
53:48 - studio and right here let's connect to a
53:51 - server
53:52 - now here one thing that you should
53:54 - remember is the server name
53:57 - i have dot right now
53:59 - but i can also change it to local db ms
54:02 - sql localdb
54:04 - now for some this might be the server
54:07 - name they are able to connect to and for
54:09 - others it might be a dot
54:11 - i have both of the options so i can
54:14 - connect to a dot as well as i can
54:17 - connect to the local db ms sql local db
54:21 - great you can see both of these options
54:24 - work for me
54:26 - once you have that determine which of
54:28 - the server you want to use
54:31 - for our course we will be using the dot
54:34 - so if you expand the databases we have
54:37 - two databases you can expand this you
54:39 - can take a look but what we want is we
54:42 - want to add our own database right here
54:46 - so how do we do that
54:48 - for that we need to add a connection
54:50 - string in our rocky project
54:53 - so right here whenever we have to add a
54:55 - connection string we'll be going to
54:57 - appsettings.json
54:59 - this is the file where we will be adding
55:02 - all of the secrets or connection strings
55:04 - for our project
55:06 - now once you move this to production you
55:08 - can move this to appsecret.json
55:11 - but for the course app settings.json is
55:14 - a perfect location
55:16 - now the next question is where do you
55:19 - define connection string in here
55:22 - for that right here we need to create a
55:24 - connection strings
55:26 - and we can assign it inside the
55:29 - parentheses
55:31 - now in here we need to give a name so i
55:34 - will call this default
55:37 - connection
55:38 - and then within the double quotation we
55:41 - will write the connection string
55:43 - so right now we have server equal to and
55:47 - i will use a dot here because that is
55:49 - what we are using
55:52 - next thing that we have is the database
55:54 - name
55:55 - so we'll say database
55:57 - and what name do we want
56:00 - i'll call this as rocky
56:03 - after that we will set the trusted
56:05 - connection to true
56:10 - it will be trusted underscore connection
56:12 - is equal to true
56:15 - and then we will have the multiple
56:17 - active result sets to be true
56:25 - that's all we need for connection string
56:28 - now what i'll do is i'll copy and paste
56:30 - this one more time i'll comment this out
56:33 - and instead of dot here
56:35 - i will paste local db ms equal local db
56:39 - because this might be connection string
56:41 - you want to use if you wanted the
56:43 - different server
56:45 - we'll go with the dot
56:47 - now we have our connection string in
56:49 - place
56:50 - the next step will be using this
56:52 - connection string to actually create the
56:54 - database
56:56 - let's take a look at that in the next
56:58 - video
57:00 - now we need to create our database and
57:02 - we also have to push the category model
57:05 - to the database
57:07 - in order to do that we need a db context
57:10 - in our project
57:12 - dbcontext is provided by entity
57:15 - framework
57:17 - before we do that right here let me add
57:19 - a new folder
57:22 - and i'll call this as data
57:26 - in here we will right click add a new
57:28 - class file
57:30 - and i will call this application db
57:33 - context or you can call this any other
57:36 - name followed by a db
57:38 - context now this is just a basic class
57:42 - how do you make this class a db context
57:45 - in order to do that this class will have
57:48 - to implement or inherit from the db
57:51 - context
57:52 - right now that class does not exist
57:55 - if you do control dot here it will show
57:58 - you options to install packages
58:02 - so we need to include entity framework
58:04 - core in our project now
58:07 - there are multiple ways to do that
58:10 - first thing you can directly go here and
58:12 - you can click find and install the
58:14 - latest version
58:16 - next way you can go to tools nuget
58:18 - package manager and you can install the
58:21 - package if you know the name with the
58:23 - package manager console and if you don't
58:26 - know the exact name
58:27 - we will go to manage new kit packages
58:30 - for the solution
58:32 - in here what we will do is we will go to
58:35 - browse tab
58:36 - and we will search for our package which
58:38 - is entity framework core
58:42 - once you hit enter here the first
58:44 - package you see is microsoft dot entity
58:47 - framework core
58:48 - now entity framework code will not be
58:51 - the only package that we will need
58:53 - we will also need the package for sql
58:56 - server because entity framework core
58:59 - needs a database to work with
59:01 - so that will be sql server
59:04 - so right here if we search for sql
59:07 - server we will have a package microsoft
59:10 - dot entity framework core dot sql server
59:14 - so in order to install this package
59:16 - we'll click the project name and we will
59:18 - hit the install button
59:21 - now if you are on the preview versions
59:23 - make sure that when you created the
59:25 - project the version name for preview
59:28 - should match exactly like you created
59:30 - the project if you created the project
59:33 - with preview 3 right here it should be
59:36 - the preview 3 that you should be
59:38 - installing and not preview for
59:41 - that being said we'll switch to what we
59:43 - have once you make sure all of that is
59:46 - good let's hit the install button
59:49 - it asks us for the license we'll accept
59:52 - this
59:54 - and great
59:55 - package has been installed we see the
59:58 - error with db context but we will solve
60:01 - that later on
60:02 - now if you go to dependencies packages
60:06 - you see you have microsoft dot entity
60:08 - framework core dot sql server
60:11 - if you expand that you have microsoft
60:13 - packages and if you expand further you
60:16 - see that microsoft dot entity framework
60:19 - core is already installed
60:21 - the reason is because the sql server is
60:24 - dependent on entity framework core
60:27 - that's why if you install only sql
60:29 - server entity framework core gets
60:31 - installed by default
60:34 - now that the package has been installed
60:36 - if we close this
60:38 - and if we go to our application db
60:40 - context right here
60:42 - you click there and you will hit control
60:44 - dot for intellisense
60:47 - it says that you can now add using
60:49 - statement for microsoft dot entity
60:52 - framework core
60:54 - so with that we have added entity
60:56 - framework core in our project
60:58 - that being said we need to add some
61:00 - configuration here
61:02 - we need to create a constructor so we
61:05 - can type ctor you can see it is a code
61:08 - snippet for constructor and we'll press
61:11 - tab twice
61:12 - in here since we are implementing the db
61:15 - context we need to pass the db context
61:18 - options here and we need to configure
61:21 - the application db context class
61:24 - we'll call this as options
61:27 - what we have to do is we need to pass
61:30 - all of these options to the base class
61:32 - for db context
61:34 - now this will include connection string
61:37 - as well
61:38 - so we'll pass base and we'll use the
61:41 - options
61:42 - if you do not understand this do not
61:44 - worry it's just some configuration that
61:47 - you have to do in order to use the db
61:50 - context
61:52 - that's everything that we had to do to
61:54 - create a db context for our project
61:58 - right now things might not be making
62:00 - complete sense to you but just stick
62:02 - with me for few more videos and you'll
62:05 - see how easy and magical this is
62:08 - now the thing that is remaining is we
62:10 - need to create our category table in the
62:13 - database and we also have to create our
62:16 - database
62:18 - let's continue in the next video to
62:20 - finish the last step of our
62:22 - configuration
62:24 - now we have the application dbcontext
62:27 - class
62:28 - next what we want to do is we want to
62:31 - create the category table to our
62:33 - database
62:34 - whenever you have to do that you will
62:36 - come to the application db context once
62:39 - you have created the model and here we
62:42 - will create properties to push them to
62:44 - database
62:46 - so we'll do prop and this time the
62:48 - property type will be dbset
62:51 - in here what is the class name which is
62:54 - the entity
62:56 - so the entity that we want to create to
62:58 - the database is category
63:00 - entity and what name do you want to give
63:03 - to that table inside the database
63:06 - i want to call it the same name as
63:08 - category
63:10 - now by default the convention is to name
63:12 - it plural like categories
63:15 - but i like to name them same as the
63:17 - table name or the model in our project
63:21 - so that way we will be creating a table
63:24 - with the category name in the database
63:28 - this is all looking good and fancy but
63:30 - how will this come together
63:33 - for that we will be using our startup
63:35 - class file because we want to configure
63:38 - this db context to be used by our
63:40 - application when it starts
63:43 - and that configuration will always be
63:45 - done in startup class file
63:48 - so inside the startup class file where
63:51 - we have the services we will be adding a
63:53 - service for rdb context
63:57 - so here we have add db context
64:00 - and in here you need to pass the entity
64:03 - name which is application db context
64:07 - then we need to configure options on
64:10 - that property and if you see right here
64:13 - we are passing those options to db
64:15 - context
64:17 - so in startup what are the options we
64:20 - want to configure
64:22 - first thing is we want options that we
64:24 - want to use sql server so right here you
64:28 - will have to add the namespace microsoft
64:30 - dot entity framework core
64:33 - and then you need to configure the sql
64:35 - server options
64:37 - now sql server options does not need
64:40 - many things
64:41 - it just needs a connection string
64:43 - and that connection string is inside app
64:46 - settings.json inside connection strings
64:50 - make sure that you name this exactly and
64:53 - there is no spelling mistake or else
64:55 - this won't work
64:57 - once you make sure both of them are
64:59 - looking exactly like me you'll come back
65:01 - to startup and we have the configuration
65:04 - object here
65:06 - on configuration object we have an
65:08 - extension method get connection string
65:12 - what this will do is it will look into
65:14 - your app settings and it will go inside
65:16 - connection strings right here
65:19 - in there what key should it search for
65:22 - key will be the default connection
65:24 - so we will copy this come back here
65:28 - and inside double quotes we will paste
65:30 - default connection
65:32 - that way it will retrieve the connection
65:34 - string and it will pass it to the
65:37 - options for sql server
65:40 - so that's all configuration we had to do
65:42 - to add our db context and use of sql
65:46 - server to our project
65:48 - so with that we complete the
65:50 - configuration that was needed
65:52 - but right now the sql server does not
65:55 - have our database or the table
65:58 - for that we need to understand
66:00 - migrations
66:01 - whenever we will have to push any change
66:04 - from our website to our database we will
66:06 - be creating migrations
66:09 - let's understand them in the next video
66:13 - now we have added in our db context the
66:16 - category model so the next thing that we
66:19 - have to do is we need to add a migration
66:22 - to push that to the database
66:24 - in order to add migration we'll go to
66:27 - tools new get package manager and we
66:30 - will open up package manager console
66:34 - in here we will be adding our migration
66:37 - so for that we will add a command add
66:40 - migration
66:41 - and then we will give our migration a
66:43 - meaningful name what are we doing in the
66:47 - first migration
66:49 - we are adding the category table to
66:51 - database
66:53 - so we can say add category to database
66:56 - and we will hit enter
66:59 - when you do that you will see an error
67:01 - message
67:02 - it says the term add migration is not
67:04 - recognized as a name of command let
67:07 - function script file or operable program
67:11 - if you created your project with
67:13 - individual users account identity then
67:16 - you won't see this error because it
67:18 - installs the new git package that is
67:20 - needed for migration
67:23 - but since we did not do that we will
67:25 - have to install another nuget package
67:28 - so we'll go to the nuget package manager
67:32 - and we will search for tools
67:34 - we want to install
67:36 - microsoft.entityframework.tools
67:39 - right here this is entity framework core
67:41 - tools for nuget package manager console
67:45 - in visual studio
67:47 - make sure you install the correct
67:49 - version
67:53 - and great everything looks good so we
67:56 - will close this
67:58 - and if we go back to our application db
68:00 - context let me open the package manager
68:03 - console here
68:05 - let's try to run this one more time
68:08 - in order to run the same statement you
68:10 - just press the up arrow
68:12 - the build started build succeeded and it
68:15 - added our migration
68:18 - now this is entity framework code doing
68:21 - its magic
68:22 - you can see what it's doing is it is
68:24 - creating a table called as category and
68:27 - it has three columns
68:29 - first is the id column which is of type
68:32 - identity and nullable is false
68:36 - then we have the name and display order
68:39 - and it also adds a constraint to make
68:41 - the x dot id as the primary key
68:45 - so all of this magic is done by entity
68:47 - framework core
68:49 - it automatically converts your model
68:51 - that you have into migrations and then
68:54 - you can push this migrations to the
68:56 - database
68:58 - so how do you push them to database now
69:02 - for that if you go to package manager
69:04 - console
69:05 - here let me clear this out and the next
69:08 - command is update database
69:11 - so once you have that command and if you
69:13 - press enter it will push all the pending
69:16 - migrations to the database
69:19 - in case like ours where the database
69:21 - does not exist it will first create the
69:24 - database and then proceed further
69:28 - now if you have any errors while
69:30 - building the project you won't be able
69:32 - to get past the step because your
69:34 - project must build successfully in order
69:37 - to proceed
69:38 - so right here you can see it's done
69:41 - what exactly just happened
69:44 - let's understand that in the next video
69:48 - now that we have pushed the migration
69:50 - let's see what actually happened in sql
69:53 - server
69:54 - in here we see the new database which is
69:57 - rocky
69:59 - let's expand that
70:02 - and we have the tables
70:05 - now in tables you see we have created
70:07 - category table but entity framework code
70:10 - already added underscore ef migrations
70:13 - history
70:14 - here it keeps a track of which
70:16 - migrations are actually applied so that
70:19 - it can synchronize everything
70:21 - right now that will be just the name of
70:23 - the first migration that we added which
70:26 - is add category to database
70:30 - so we'll close this and then let's
70:32 - examine the category table it has the
70:35 - three columns that we wanted
70:37 - so it actually pushed our category model
70:40 - to the database and everything is
70:43 - looking good right now
70:45 - so remember whenever you have to make
70:48 - changes you first make the changes add a
70:50 - migration and then you update database
70:53 - to push the migration to the database
70:56 - so that being said let's continue in the
70:59 - next video
71:02 - before we start with anything let's run
71:04 - the application
71:06 - so if we go in the arrow here with the
71:08 - browser you can pick which browser you
71:11 - want for the application
71:13 - i will be using the new microsoft edge
71:16 - and let me run this and take a look at
71:19 - the result
71:22 - so our application is up and running and
71:25 - we see home and privacy
71:27 - what we want to do is we want to add a
71:29 - new tab here or we can replace the
71:32 - privacy tab with category
71:35 - how do we do that
71:36 - this navigation bar that we have is
71:39 - inside the shared folder inside views
71:42 - so if we go to views shared we have the
71:45 - underscored layout and right here we
71:47 - have the home and privacy here you can
71:50 - see the action name is privacy and the
71:53 - controller name is home
71:56 - what we will be doing is for category we
71:58 - will be adding a new controller
72:01 - so for that we'll go to solution
72:03 - explorer in controllers
72:05 - we'll add a new controller in order to
72:08 - do that we will have to stop the
72:10 - application
72:12 - and controllers add a new controller
72:16 - and we will go with the empty controller
72:20 - now what you need to do is we need to
72:22 - name our controller
72:24 - it should always end with the controller
72:26 - keyword
72:27 - so whatever is before that will be the
72:30 - controller name and we will call this
72:32 - category controller
72:35 - great so you can see our new controller
72:37 - has been created and in there we have an
72:40 - index action method
72:42 - how can we navigate to this controller
72:45 - using our url
72:47 - let's run the application
72:51 - and then if we want to go to the privacy
72:53 - action in home controller you can see
72:55 - the url is home followed by privacy
72:59 - so in order to go to our category it
73:01 - will be category controller and what is
73:04 - the action name that is the index action
73:07 - name
73:08 - but if you press enter right now you
73:10 - will see an error that view index was
73:13 - not found that is because we have added
73:15 - the action here but we have not added
73:18 - the view
73:20 - so inside layout what we will do is
73:23 - change this to category controller
73:26 - action we'll change this to index
73:29 - and we will call this category
73:32 - if you go back and if you refresh the
73:34 - home page
73:36 - let's go here
73:37 - this time the privacy will be updated to
73:40 - category but if you click on category
73:43 - you will still see that error message
73:46 - let's continue in the next video to fix
73:49 - this error message and add our view
73:53 - now if we try to navigate to category
73:55 - controller index action the view is not
73:58 - found
73:59 - so let's add that view
74:02 - for that it is simple
74:03 - you can do one of the two things
74:06 - first is inside views you can create a
74:08 - new folder with the exact name as the
74:11 - controller name which is category
74:14 - it won't be category controller it will
74:16 - be only category
74:18 - and then in there you can right click
74:21 - add a new view here and that will do the
74:23 - trick
74:25 - or simple way go to category controller
74:28 - right click on the action method
74:30 - select add view
74:32 - we will be using the razer view do not
74:35 - go with the empty option here
74:38 - and then you can see here we have some
74:40 - configuration
74:42 - first is the view name which will keep
74:44 - the same as index
74:46 - next you can use template when you
74:48 - create a view
74:50 - it can be create template edit details
74:53 - or delete
74:54 - we will be going with the empty template
74:57 - and we don't want any model classes
74:59 - right now
75:01 - if you select any of the other then you
75:04 - have to select the model class like if
75:06 - you want to create what object should it
75:09 - create should it create a new category
75:11 - if yes what should be the db context
75:14 - that should be used
75:16 - but if you go with empty you don't get
75:18 - those options
75:20 - that being said we have not used partial
75:22 - views right now so we'll leave this
75:25 - unchecked
75:26 - and option here is use a layout page
75:30 - if you check this and if you leave this
75:32 - empty it will use the default layout
75:34 - that you have
75:36 - so we'll just keep that and press the
75:39 - add button
75:40 - it will add few neoget packages for
75:43 - scaffolding and then it will create the
75:45 - index view
75:47 - one thing to notice is the view will be
75:49 - added inside a folder name with the
75:52 - exact name as your controller which is
75:55 - category
75:57 - that being said if you run the
75:58 - application now and if you hit the
76:01 - category you will see the page with the
76:04 - word index in there
76:07 - so if you hit category great you can see
76:09 - the view is being rendered
76:12 - so now that our view is added and our
76:14 - database is in place
76:16 - let's see how we can create a category
76:20 - let's continue working on the index page
76:23 - in the next video
76:26 - what do we want to do on the index page
76:28 - of category
76:30 - we want to display all of the categories
76:32 - that exist in our database
76:35 - right now we do not have any categories
76:37 - in our database
76:39 - but let's say we add some categories
76:41 - manually for our testing
76:44 - so we can go to database edit top 200
76:47 - rows
76:48 - and we'll just give it a test name
76:50 - display order one
76:52 - will give it test to display order two
76:55 - we have two categories now
76:57 - so if you do select star here you will
77:00 - see two records let's see how we can
77:03 - display them here
77:04 - in order to display them we need to
77:07 - extract these values from the database
77:10 - so for that we'll be using entity
77:12 - framework
77:14 - and we need the application db context
77:16 - or the db context to do that
77:19 - so we'll go to the category controller
77:22 - and in here we need an object of
77:24 - application db context
77:27 - but thankfully dependence injection
77:30 - takes care of all of that
77:33 - so right here we'll just use application
77:35 - db context and we'll get that using
77:38 - dependency injection
77:41 - so right here we will be adding a
77:43 - private read only property and this will
77:46 - be for application db context
77:50 - we'll call this underscore db
77:52 - now we need to populate this property
77:55 - and we'll do that with constructor and
77:58 - we'll be using dependency injection
78:00 - if you go to your startup cs
78:03 - right here you have added the db context
78:07 - so you have already added that in your
78:09 - service container if you want to pull
78:12 - something from that container in the
78:14 - constructor you just write the class or
78:16 - the interface name
78:18 - so this one is application db context
78:21 - and we'll call this db
78:24 - what this object will have is it will
78:26 - have an instance of the db context that
78:29 - dependency injection would create and
78:31 - pass it to you in your constructor
78:34 - you do not have to worry about all the
78:36 - back end behind that
78:38 - asp.net core takes care of everything
78:41 - so you can just assign your local
78:43 - underscore db as the db object that is
78:46 - passed and then you can use this
78:49 - underscore db throughout your controller
78:52 - so we have the database object in
78:55 - underscore db
78:56 - what if we want to retrieve list of all
78:59 - of the category
79:01 - so in the index let's retrieve an i
79:03 - enumerable of category
79:06 - and let me call this object list obj
79:09 - list is equal to
79:11 - how do we retrieve that from database
79:14 - we will be using entity framework so we
79:17 - have the database object and in there
79:19 - you already see category if you just do
79:22 - like that it will retrieve all of the
79:24 - categories from your database and it
79:27 - will store them in this obj list
79:30 - let me copy paste it to the view and
79:33 - will return that list to be displayed in
79:36 - our view
79:37 - let's add a debugger and see if it
79:39 - actually passes anything
79:42 - let's run the application
79:45 - and let's hit category
79:47 - it will hit our debugging breakpoint and
79:50 - right now the list should be empty here
79:53 - that's good if we press f10 to continue
79:56 - to the next line
79:57 - if you hover now you see the list and
80:00 - result view it should have two values
80:03 - and these are the two categories that we
80:06 - added
80:07 - so you can see how easy it was we did
80:10 - not have to write a query like select
80:12 - star from category
80:14 - entity framework core takes care of
80:16 - everything just one line and you get all
80:19 - of the categories
80:21 - so even though we spend some time in
80:23 - configuration for entity framework and
80:25 - db set and db context you can see the
80:28 - advantage that it brings to the table
80:31 - and in future this will save tremendous
80:34 - amount of time as we will see
80:36 - so now we have list of all the
80:38 - categories and we are passing that to
80:41 - the view
80:42 - if you hit continue here
80:44 - you will see that we do not see any of
80:46 - the list that's because if we go to the
80:49 - index view we are not fetching that
80:52 - model or we are displaying anything in
80:54 - here other than index
80:57 - let's do that in the next video
81:01 - now we want to display all of the
81:03 - categories in our view
81:06 - so we are already passing that from our
81:08 - controller when we return to the view
81:12 - whenever you pass anything from the
81:13 - controller you need to make sure that
81:16 - you fetch it inside your view
81:18 - now how do you tell this view that
81:20 - actually a list of categories is going
81:23 - to be passed to you from the controller
81:26 - for that we will define at model on the
81:29 - top here
81:30 - in here m will be of lower case
81:34 - and then we will define what will be the
81:36 - model type
81:37 - here it's an innumerable of category
81:41 - so we'll say it's an i enumerable of
81:44 - category
81:45 - if you type just category this works but
81:48 - what i prefer is i prefer rocky dot
81:51 - models
81:53 - dot category
81:54 - this way you know the complete path for
81:56 - the category so in large scale
81:59 - application you are not confused
82:02 - now what will happen is the list that we
82:04 - will pass from here will be available on
82:07 - this view and we can display that
82:09 - so we can use some bootstrap styling and
82:12 - we can display a table
82:14 - we can add a div give it a class of
82:16 - container and we'll give padding 3 in
82:19 - here
82:20 - then we can add a div give it a class of
82:23 - row and padding top we'll give it four
82:27 - and in there we'll add a div give it
82:29 - class of column six we'll divide it in
82:31 - two pads
82:33 - we'll have another div class of column
82:36 - six
82:38 - in the first one here we will have an h2
82:40 - tag
82:41 - and we'll give it a class of text
82:44 - primary
82:45 - and we'll call this as category list
82:49 - in here we want to display link to
82:52 - create
82:53 - new category
82:56 - that looks good then let me add some
82:58 - line here
82:59 - and then i'll display a table
83:02 - now the table i only want to display if
83:04 - there are more than one categories that
83:06 - have to be displayed
83:08 - so with razer syntax you can combine
83:11 - c-sharp syntax with the html
83:14 - for that you just write the add sign and
83:17 - then here we have the for loop we have
83:20 - for each loop
83:22 - you can see and we also have if
83:25 - conditions
83:26 - so we can use the c sharp if condition
83:30 - and we want to see if this has more than
83:32 - one category
83:34 - here the model was lower case
83:37 - but whenever anywhere else in the view
83:39 - if you want to access this model it will
83:42 - be a capital m
83:44 - so it will be model dot we just want the
83:47 - count on that
83:49 - if it is greater than zero that means
83:51 - that category exist
83:53 - so if the category exists we want to
83:55 - display a table and we can use bootstrap
83:58 - classes for table
84:00 - table bordered and table striped
84:05 - we can also give it a style of width of
84:09 - 100 percent
84:14 - inside here we have the t-head
84:17 - and we have the table row in which we'll
84:20 - have the header
84:22 - first one let me display category name
84:25 - followed by display order
84:31 - and we'll have an empty th
84:34 - so this looks good for the heading
84:36 - then we have the t body
84:39 - in body let's say you have 10 category
84:42 - so you want a loop that is iterated 10
84:44 - times and you display all of the
84:46 - properties
84:48 - so like we had if with the razor we also
84:51 - have for each
84:53 - and we'll iterate through all the
84:55 - categories so we'll say variable object
84:58 - in
84:59 - model
85:00 - now what is model model is actually the
85:03 - i enumerable or list of category
85:07 - so right here we will add a tr tag and
85:11 - we'll display td
85:13 - we'll give it a width of 50 percent
85:17 - the first thing here is the category
85:19 - name
85:20 - so at obj dot we have the name in there
85:25 - we'll copy this paste it one more time
85:28 - we'll give it 30 percent and we can
85:31 - display the display order
85:33 - and then in the last one here td
85:36 - let's say we want to display the buttons
85:38 - to edit or delete a category
85:41 - but we'll do that one thing at a time
85:44 - then we have the if condition so we can
85:47 - add else block and we can just display
85:50 - in paragraph no category exists
85:55 - so this looks good let's run our
85:58 - application and see how things look like
86:02 - we'll go to category
86:04 - and we'll continue on our debugger
86:07 - great we see both of the categories here
86:11 - we have the create new category so we'll
86:13 - make this a button or a link and we'll
86:16 - continue working on this in the next
86:18 - video
86:21 - now we have worked on our index page and
86:23 - we are loading all of the page
86:26 - for that what were the two things that
86:27 - were needed
86:29 - one was the controller action method
86:31 - inside category controller and we needed
86:34 - a corresponding view
86:36 - what we want to do is we want to create
86:39 - a new page for creating a new category
86:42 - so for that the first thing that we'll
86:44 - do is we'll need a new action method
86:47 - right here
86:49 - so we can copy this and paste it one
86:51 - more time
86:52 - and this will be for create
86:55 - what happens in the create
86:58 - in create we will display them to empty
87:00 - text box to enter the name and display
87:03 - order for the new category they want to
87:06 - create
87:07 - that being said since everything will be
87:09 - empty we do not even have to pass
87:12 - anything to the view
87:13 - it can be empty
87:16 - so this make sure that this is get
87:20 - for create
87:22 - once we have added the controller let's
87:25 - add the view as well
87:27 - it will be the razer view
87:29 - and we'll keep it the same let's add
87:31 - this
87:33 - first thing that you do whenever you add
87:35 - any view is will that be a model needed
87:38 - for this view
87:40 - we are not passing anything from the
87:41 - controller
87:43 - but that doesn't mean we won't be using
87:45 - a model in the view here
87:47 - we will be using model which will be
87:50 - category so we'll go to
87:53 - rocky.models.category
87:56 - now why do we need a model here
87:59 - and the reason we need model here is
88:02 - whenever user enters any of the category
88:05 - name and display order and hits the
88:07 - create button
88:08 - we want to pass those values to our
88:11 - action method which will be a post
88:13 - action method for category and we want
88:16 - to create the category
88:19 - so here what we'll do is we'll add a
88:21 - form and it will have a method of post
88:25 - and where it should post
88:27 - we can explicitly define that using tag
88:30 - helpers
88:32 - tag helpers looks exactly like html but
88:36 - they are asp dash and then these are the
88:39 - default tag helpers that asp team
88:41 - provides
88:43 - so right here you can see there is a tag
88:45 - helper called asp action
88:48 - we will call this as create
88:51 - this means that when the form executes a
88:54 - post method it should look for a post
88:56 - action method of create
88:59 - we will add that in the next video but i
89:02 - wanted to point that out
89:04 - in here we'll use some bootstrap classes
89:07 - of border and padding three
89:10 - and in here we'll add div give it a
89:13 - class of form group and row
89:16 - and we'll add the heading here h2 give
89:19 - it a class of text info
89:22 - and we'll give padding left of three
89:25 - we'll call this add category
89:28 - now that we have that let's run this
89:30 - application and see this title
89:34 - if we go to category
89:36 - and we'll remove this debugging point
89:39 - right now we do not have the button to
89:41 - navigate to the create new category
89:44 - so let's do that in the index
89:46 - right here we have the create new
89:48 - category
89:50 - how do we navigate to that page
89:53 - in order to go to that page you will
89:55 - have to go to the action method which is
89:58 - create
89:59 - inside the category controller
90:02 - thankfully we have tag helpers for that
90:05 - so right here inside the anchor tag we
90:08 - have the asp action tag helper
90:12 - what action do we want to redirect to
90:15 - we want to redirect to the create action
90:18 - and that is inside the controller which
90:21 - is the category controller
90:23 - typically you would write the controller
90:26 - name before the action name that's how
90:29 - the navigation goes
90:30 - first what controller in that controller
90:34 - what is the action method
90:36 - once you have that you'll close the
90:38 - anchor tag
90:39 - after the create new category
90:41 - let's go back and refresh here
90:44 - and if you click here it takes you to
90:47 - your ad category
90:49 - let's add a little bit of styling here
90:52 - so we'll add a class of btn btn primary
90:57 - and let's see how this looks
91:00 - okay
91:00 - we'll also align this to right
91:03 - so we have text right
91:06 - and perfect
91:07 - so when you hit on create new category
91:09 - it takes you to the add category
91:12 - let's continue working on add category
91:15 - in the next video
91:18 - now we want to add the text boxes for
91:21 - adding a new category options like name
91:24 - and display order
91:26 - so we'll go back to our project
91:28 - and let's stop this
91:30 - now we will be doing that inside create
91:33 - we will be adding little bit of more
91:35 - bootstrap styling
91:37 - i don't want to spend much time on
91:39 - bootstrap styling so i will be attaching
91:42 - snippets with the course where you can
91:45 - get them and paste those bootstrap
91:47 - directly here
91:49 - in section 1 i have lecture project
91:52 - resources in which i explain how you can
91:56 - get all the snippets
91:58 - so right here we are on section 2 but if
92:00 - you go back you will have all the
92:02 - section
92:04 - so we will open up the add category
92:06 - snippet and we'll copy this
92:08 - go back to the create
92:10 - and make sure you add this after this
92:13 - form group and row and paste it here
92:17 - you can see it's not doing anything
92:19 - fancy if you save this and run the
92:21 - application
92:23 - you will see what exactly was done
92:27 - so if we go to category here
92:29 - and we go to create new
92:31 - create uc name display order and here we
92:34 - need text boxes and we'll create two
92:37 - buttons
92:38 - one button to go back to the previous
92:40 - page and one button to create or add a
92:43 - category
92:45 - so let's switch back
92:47 - here we want to display name
92:50 - so rather than using just name we can
92:53 - use tag helpers
92:55 - so we have a label in there we have asp4
92:58 - tag helper
92:59 - and here you will see all the properties
93:02 - in your model
93:03 - like name
93:05 - you can also add a class if you want but
93:08 - i'll keep it simple
93:09 - what is the advantage of using this tag
93:12 - helper rather than typing just name
93:16 - let me also add a display order here
93:19 - and we'll save this if you go back and
93:21 - refresh
93:23 - there you go not much difference
93:26 - the advantage that this tag helper
93:28 - brings is if we open up our category
93:31 - model
93:32 - right here you can use data annotations
93:35 - to display something else
93:37 - like here if you go back display order
93:39 - is one word what if you want a space in
93:42 - them
93:43 - for that we have data annotations
93:46 - so right here we have display name and
93:50 - here we'll say display order
93:53 - once you do that and if you run the
93:55 - application
93:57 - this time it will use whatever we gave
94:00 - as display name because we are using the
94:03 - tag helper
94:05 - so if you go to create new category now
94:07 - you see a space between
94:10 - so that way inside your model you can
94:12 - define what display name you want and
94:15 - there are many more data annotations
94:17 - which we will take a look in the
94:19 - upcoming videos
94:22 - so now you saw one advantage that you
94:24 - have with the tag helpers
94:27 - that being said we also have tag helpers
94:29 - for input as well so in the input tag
94:33 - here we will use the tag helper which is
94:36 - asp4
94:38 - this input is for the name
94:40 - and we can give it a class of form
94:42 - control to take full width
94:45 - let's go back and refresh here
94:48 - and great we have a text box
94:51 - let me switch back to the application
94:53 - and do the same
94:55 - for display order
95:00 - if you refresh perfect we have two nice
95:02 - looking text boxes
95:04 - let's also add buttons
95:07 - so we'll go back
95:08 - and here we can do an input of type
95:12 - submit
95:13 - or you can just add a button here
95:16 - then we'll add bootstrap classes btn btn
95:20 - info
95:21 - and width of 100 percent
95:24 - let's call this create
95:28 - and we need a value will be create
95:33 - after that for back button we can add a
95:35 - link here and we can copy the link that
95:38 - we have in index
95:40 - and we'll paste it here when we want to
95:43 - go back
95:44 - we do not need the controller name the
95:46 - action name that we want to go to is the
95:49 - index action to display all the
95:51 - categories
95:54 - and here we can just display back
95:58 - if you save this and refresh great we
96:00 - have create and back
96:02 - and i make this as success
96:05 - and width of 100
96:08 - so we have two buttons now if you click
96:11 - back it takes you back to the category
96:14 - one thing you notice here is you do not
96:16 - need the category name
96:18 - that name is optional because you are
96:21 - dealing with views in the same category
96:24 - if you had to go to the page or view
96:26 - that belongs to a different controller
96:29 - then you need to explicitly define the
96:31 - controller name here
96:33 - by default it assumes you mean the same
96:35 - controller that you are in right now so
96:38 - with this our page is looking in a good
96:40 - form when we see the add category
96:44 - let's continue in the next video
96:48 - this time what we want is when we enter
96:50 - anything here and hit the create button
96:53 - it should add a new category to database
96:56 - so for that if we go back to our
96:58 - application you can see we have input
97:01 - type of submit and then we have a form
97:04 - here which goes to the post of create
97:07 - so if we go to category controller we
97:10 - need to add that
97:12 - we can copy the get for create paste it
97:15 - here but this time we need a post for
97:18 - create
97:19 - now inside the post right here we will
97:22 - get a category object that we have to
97:25 - add to the database
97:27 - with post what you should do is you have
97:30 - to define that this is actually a post
97:32 - action method so you'll add an attribute
97:35 - http post and we will be using validate
97:39 - anti-forgery token
97:41 - validate anti-forgery token is a
97:43 - built-in mechanism with the forms in
97:46 - which it appends an anti-forgery token
97:49 - and on the post you validate that that
97:51 - token is still valid and the security
97:54 - has not been tampered
97:57 - so we get that built-in security so
98:00 - we'll use that in all of the post action
98:02 - methods
98:04 - now here you will receive the object
98:06 - that you have to add to the database
98:09 - adding to database is simple
98:12 - you need to access the db context db on
98:15 - category you have the add method
98:17 - provided by entity framework core
98:20 - on there you can see it expects a
98:22 - category entity
98:24 - so we'll pass the object and then at
98:27 - this step it will not add the category
98:30 - to database
98:31 - if you want to add it you have to call
98:33 - save changes and then it makes the
98:36 - database call on line 41
98:39 - once it adds the category what we want
98:41 - to do
98:42 - we can just go back to this index and
98:45 - display all the categories
98:47 - so rather than returning back to a view
98:50 - we want to return redirect to an action
98:53 - method
98:54 - and what action method do we want to
98:56 - redirect to we want to redirect to this
99:00 - index action
99:02 - since it is in the same controller we do
99:04 - not have to define the controller name
99:06 - here
99:07 - let's give this a try and see how things
99:09 - look
99:11 - let's go back and add a debugger right
99:13 - here
99:14 - and let's go to category
99:17 - add a new category
99:19 - we'll try to add this
99:22 - we hit our debugging point and inside
99:25 - the object here you see we have the
99:27 - display order as well as name which is
99:29 - valid
99:31 - how did it automatically bind this and
99:33 - passed it here
99:35 - the reason is if you go to the create
99:38 - you used tag helpers for input
99:41 - since we used asp4 it automatically knew
99:44 - that whatever was being entered in this
99:47 - text box it has to bind that to the name
99:50 - property of the model which is category
99:53 - and on the post it passes that
99:56 - to our controller right here
100:00 - so if you do f10 you execute the add
100:03 - statement
100:04 - if you go back to the database and you
100:06 - execute here it has not been executed
100:10 - if you run the save changes and if you
100:13 - go back now you'll see three records
100:16 - so you can see it actually executes on
100:19 - save changes
100:21 - let's hit continue and now we see the
100:24 - three categories
100:26 - great so with this you can see that how
100:28 - we can create a new category and we
100:31 - implemented the post action method for
100:34 - create
100:35 - everything looks good right now but what
100:37 - if we want some validations
100:40 - let's take a look at that in the next
100:42 - video
100:44 - before we move on to validations let's
100:46 - practice what we have learned so far
100:49 - with an assignment
100:51 - in this assignment i want you to create
100:53 - an application type model
100:56 - in that model we will have two
100:58 - properties id and name
101:01 - we created the category model with more
101:04 - properties so this should be somewhat
101:06 - similar to that
101:08 - once you create the model then you have
101:11 - to push that model to the database so
101:13 - that a table can be created for that
101:16 - model once you are able to successfully
101:19 - create the table inside the database
101:22 - then you should work on creating an
101:24 - application type controller
101:27 - so the name of the controller should be
101:29 - application type
101:31 - and in there you have to implement the
101:34 - index and create functionality that we
101:36 - did with controllers so far
101:39 - so it is exactly following the steps
101:42 - that we did but for a different model
101:45 - so good luck with the assignment and
101:48 - this will give you practice to
101:49 - understand what we have been
101:51 - implementing so far
101:54 - now in this video let's work on the
101:57 - solution for the assignment
101:59 - i hope you were able to do all the three
102:01 - points that were here
102:03 - let's start with the first one in which
102:05 - we have to create the model for
102:07 - application type and push that to the
102:10 - database
102:12 - we'll switch back to the application
102:14 - and in here we'll close everything that
102:17 - we have close all tabs let's go to
102:20 - solution explorer and we have our models
102:23 - right here we can copy the category
102:26 - model and paste it one more time here
102:28 - and we'll change the name to application
102:31 - type
102:33 - we will copy the name
102:35 - and we'll paste it here
102:37 - now we need properties inside the
102:39 - application type which is id and name
102:42 - we do not want the display order
102:45 - you can remove the key data annotation
102:47 - if you want but i'll just leave it here
102:50 - once you add the model you need to add
102:53 - this to database
102:55 - so for that what you have to do is you
102:57 - need to go to data
102:59 - application db context and we need to
103:02 - create a db set
103:03 - for application type
103:12 - we will call this application type and
103:14 - we won't use the plural notation
103:17 - once you save this you have to add the
103:19 - migration so tools nuget package manager
103:23 - we'll go to the console
103:25 - and here let me clear this and we'll add
103:28 - a new migration
103:33 - we'll call this at application type to
103:36 - database
103:38 - great so migration has been added and
103:40 - right here if you see it is adding the
103:42 - two columns id and name and it has a
103:45 - primary key on the id column
103:48 - this looks good let's update the
103:50 - database
103:53 - i'll increase the size here there we go
103:56 - and perfect database has been updated
103:59 - let's go to sql server to validate them
104:04 - we'll refresh here and we have the
104:06 - application type
104:08 - if we expand this we have two columns
104:11 - so perfect our first task from the
104:14 - assignment has been completed in which
104:16 - we had to create the application type
104:19 - model and we had to push that to the
104:21 - database
104:23 - next thing that we have to do is we need
104:25 - to create the application type
104:26 - controller
104:28 - so let's switch back again
104:30 - and we have the controllers i can just
104:33 - copy the category controller and paste
104:36 - it one more time
104:38 - i'll change the name to application type
104:44 - now i hope you did not do the copy and
104:46 - paste and you created from scratch
104:49 - i do not want to spend time there so
104:51 - i'll just make the changes
104:53 - we'll change the names here we need
104:55 - application db context
104:58 - right here this will be of application
105:00 - type and this will be application type
105:04 - as well we'll retrieve the application
105:06 - type object
105:08 - and we'll add that
105:10 - right
105:12 - here
105:13 - sweet
105:14 - so here it will be application type and
105:17 - that looks good
105:19 - final thing that you have to do is you
105:21 - need to add the views as well
105:24 - so what we can do is we'll just go here
105:27 - and we have the views
105:29 - which is category we can just copy this
105:32 - and paste this one more time
105:35 - we'll change the name to application
105:38 - type
105:40 - whoops we have a spreading mistake there
105:42 - there we go and we'll change the create
105:46 - the model will be application type
105:49 - in there we do not need display order
105:52 - we'll remove that
105:53 - everything else looks good
105:56 - in the index we do not need the display
105:58 - order
105:59 - and we do not need the controller only
106:02 - the action name is sufficient
106:05 - and this will be application type
106:10 - great we'll just have the name here
106:13 - and we do not need display order
106:15 - great
106:19 - now let's give this a test we'll go to
106:21 - solution explorer inside layout we need
106:25 - to add another link for application type
106:28 - here
106:29 - so we'll call this
106:33 - application type controller
106:38 - and perfect let's run our application
106:41 - and take a look at if we are able to
106:44 - create any new application type
106:47 - on the nav bar we have application type
106:50 - now
106:51 - we run into an editor here and i think
106:54 - that's in the application type
106:55 - controller
106:57 - we are passing application type list
107:00 - in the index we have category
107:03 - you can see the class is application
107:05 - type so this will be application type as
107:08 - well
107:09 - so you can see if the model here is
107:11 - different then what you pass from the
107:14 - controller you will get an error message
107:17 - then we'll hit the refresh button and
107:20 - this should load
107:22 - perfect
107:23 - we have the category list here so we'll
107:26 - change that to
107:29 - application type list
107:32 - great let's create a new application
107:35 - here also we have the category
107:37 - so inside create for application type
107:42 - we'll change the heading to add
107:43 - application type and refresh
107:47 - let's try to add a new application
107:51 - and great it's working as expected
107:54 - so that was the quick assignment that we
107:57 - did
107:58 - next thing we'll be working again on the
108:00 - category but before we work on the edit
108:03 - or delete functionality for category i
108:06 - want to show you validations that we
108:08 - have to implement in category
108:11 - so let's take a look at that in the next
108:13 - video
108:16 - now in the last video we had some
108:18 - practice with application type
108:21 - let's switch back our focus to category
108:24 - and in here let's add some validation
108:27 - we want a validation that name should be
108:30 - a required field and display order
108:33 - should be greater than zero
108:35 - how do we actually implement those
108:37 - validation
108:39 - now you can always use custom javascript
108:42 - to check what was entered and display
108:44 - alert message but with asp.net cool you
108:48 - get validations right out of the box
108:51 - in order to implement validations we
108:54 - again have data annotations
108:56 - in order to check that out let's switch
108:58 - back to the application
109:00 - and we did not have to rerun it let me
109:03 - stop that
109:06 - what we will do is we'll open up the
109:08 - category model we'll close everything
109:10 - else
109:11 - and we'll open up the category model
109:14 - here we have attributes like key display
109:18 - name similarly we have requirements for
109:21 - validation
109:23 - so on name
109:24 - we just add a required attribute before
109:27 - that property
109:29 - then the display order will make sure
109:31 - that this is required as well
109:33 - and with display order we want it to be
109:36 - greater than zero
109:38 - for that we have range
109:40 - with range you have to define the
109:42 - minimum which is one and what is the
109:45 - maximum
109:46 - so we can just say int dot max value
109:49 - could be the maximum
109:51 - and then for the third property here you
109:53 - can define an error message
109:56 - default editor message if you don't like
109:58 - it you can always provide a custom error
110:01 - message
110:03 - so here we can just display display
110:06 - order for category
110:08 - must be greater than zero
110:12 - once you add this how do you actually
110:14 - implement these validations inside your
110:17 - view
110:18 - let's take a look at that by going to
110:20 - our view
110:22 - so for category we have to create view
110:26 - here we have tag helpers for validation
110:28 - as well
110:30 - what we need to do is on the top here we
110:32 - first need a div and we'll use asp
110:36 - validation summary it has multiple
110:38 - properties all model only and none
110:42 - let's keep it to model only for now and
110:45 - we'll add a class of text danger to
110:48 - display it in red
110:50 - that being said where we have the
110:52 - individual properties in those places
110:54 - let's add a span and in there we have
110:57 - another tag helper asp validation for
111:01 - in this pen we will display if any error
111:03 - messages are
111:05 - for the name property
111:07 - so in here we'll define name here and
111:10 - we'll give it a class of text danger
111:14 - we will copy this and we'll do the same
111:16 - for display order
111:19 - so let me add that here
111:21 - once you do this and if you run the
111:23 - application you won't see the change
111:26 - because you are not right now validating
111:29 - it
111:30 - now validations you can do it on server
111:32 - side or on the client side
111:35 - let me show you first how to do the
111:37 - validations on the server side
111:40 - so server side we have the controller
111:43 - for category
111:44 - so we'll open up the category controller
111:47 - and before we actually add a category we
111:50 - want to validate
111:52 - we already have the validations inside
111:54 - the category model
111:56 - so asp.net core has a method here which
112:00 - is model state dot is valid
112:03 - this actually checks if all of the rules
112:06 - that you have defined in your model are
112:09 - those valid
112:10 - if those are valid only then it will go
112:13 - inside the if condition
112:15 - so only if it is valid
112:18 - we'll paste it to add the new category
112:21 - and return to the index
112:23 - if it is not valid we just want to
112:26 - return back to the view
112:28 - so that we can display the error message
112:31 - now when we return back to the view we
112:33 - can pass the object right here so that
112:36 - we can have those values
112:38 - let's see this in action so let's run
112:41 - the application
112:43 - and let me add a debugger
112:46 - and let me add a debugger
112:48 - once we do that let's continue in the
112:50 - next video
112:53 - now that we have added the debugger let
112:55 - me switch back to the application and
112:58 - let's go to category
113:00 - this time if we try to create a new
113:02 - category and hit it with the empty
113:05 - record
113:06 - you see it goes back and it hits our
113:08 - breakpoint
113:10 - here we have to debug the model state
113:13 - so if we go on model state let's first
113:16 - examine that is valid you can see it's
113:18 - false
113:19 - now what properties are invalid so if
113:22 - you hover on model state
113:25 - expand this go to result view you see
113:28 - both the properties and both of the
113:30 - validations are invalid
113:33 - so if it's invalid you'll continue it
113:35 - will return back to the view and it
113:38 - displays the error message
113:41 - okay so that looks good
113:43 - let's say we add some value here and the
113:46 - display order will make it zero
113:49 - display order if you remember we have
113:50 - validation that it should be greater
113:52 - than zero
113:54 - if you hit create again that is valid is
113:56 - still false this time if you examine
113:59 - what properties are not valid it's only
114:02 - display order
114:03 - the name is now valid
114:06 - so you can see how validations are
114:08 - working
114:09 - and now you see your custom error
114:11 - message that we implemented
114:14 - so with this we saw server side
114:16 - validation
114:17 - if you change this to something valid
114:19 - now and if you try to create it should
114:22 - be successful
114:24 - you can see it was created and we have
114:27 - the same test with display order too
114:30 - now we have the server side validations
114:33 - but what if we want to do the
114:34 - validations on client side to avoid a
114:37 - round trip
114:39 - implementing those is simple as well
114:41 - you will just go back to your create
114:44 - and right here at the end we will add a
114:47 - section for scripts
114:50 - here you can add any of the javascript
114:54 - if you take a look at the solution
114:56 - inside the shared we have validation
114:58 - scripts partial
115:00 - we need to use this inside the section
115:03 - here and it will do the client-side
115:05 - validations automatically
115:08 - so here we will use the tag helper in
115:11 - which we have partial
115:13 - we'll give it a name of underscore
115:15 - validation scripts partial
115:18 - make sure that the name is exactly as
115:21 - you see right here
115:23 - with that in place if you save this and
115:25 - if you refresh the application
115:29 - if you try to hit the create button you
115:31 - see the error message directly here
115:34 - without making a round trip
115:36 - if you go back we still have our
115:38 - debugger in model state that is valid
115:41 - but it doesn't even hit there and it
115:44 - displays the error message as soon as
115:46 - you change it
115:47 - so it's not hitting our server and the
115:50 - validations are being done on client
115:52 - side now
115:54 - so with this we have seen how we can
115:56 - implement client-side validations and
115:58 - server side validations
116:01 - i want to show you one more thing
116:03 - if you switch back to the create
116:06 - in the validation summary we have model
116:09 - only
116:10 - if we make it all and if we go back and
116:13 - refresh the page
116:15 - let's try to hit the create button
116:17 - now you see two things
116:19 - where we have the validation summary it
116:22 - displays all of the error message and
116:24 - then in the model it displays the
116:26 - corresponding
116:28 - so if you have model only in that place
116:31 - it was only displaying the error message
116:34 - where you have the asp validation for
116:37 - so those are the two things that i
116:39 - wanted to show you with all and model
116:42 - only
116:43 - so we'll save it and we'll just use
116:45 - model only
116:47 - even if you comment this line out and if
116:49 - you go back and hit create it still acts
116:52 - the same
116:53 - but i wanted to point out the changes so
116:56 - i added the validation summary
116:59 - but in future just validation for will
117:02 - be sufficient and for client-side we
117:05 - need to include validation scripts
117:07 - partial
117:08 - so that being said we have completed the
117:11 - validations for category
117:14 - now we need to add two more buttons here
117:17 - first button will be to edit a category
117:20 - and the next one will be to delete a
117:22 - category
117:24 - so let me switch back to the application
117:26 - stop it here and we'll go to the
117:29 - category index
117:31 - right here
117:32 - if we scroll down here where we have
117:36 - the td that is empty
117:38 - here we will be adding buttons
117:41 - so we can just add a class of text
117:44 - center here
117:46 - and we'll give a div give it a class of
117:48 - w 75 percent
117:51 - and we'll make it button group
117:54 - we can also add a role of group here
117:58 - and i want to add to anchor tag
118:01 - we have an anchor tag on the top so we
118:04 - can just copy this and paste it right
118:07 - here two times
118:09 - first one here will be for edit and the
118:12 - later one is for deleting a category
118:16 - now we need action names for edit and
118:18 - delete so we'll call them edit
118:21 - as well as
118:23 - delete we have not added these actions
118:26 - but we will do that in a while
118:28 - so we have ptn primary and for delete
118:31 - we'll make it danger to give it a red
118:34 - color
118:35 - now think about whenever we have to edit
118:38 - or delete a category what is one thing
118:40 - that we will need
118:42 - the one thing that will need is the
118:44 - category id that user wants to delete
118:47 - so how will we pass that id when this
118:50 - link will be clicked
118:52 - asp.net core also has a tag helper for
118:56 - that which is asb route hyphen and then
119:00 - you need to pass the id
119:02 - or the name that you want to give to
119:04 - that parameter
119:06 - we will just call it id and here we need
119:09 - to pass the id that we want to retrieve
119:12 - in the action method
119:14 - so that we can access using this obj
119:18 - so we'll pass obj dot we should see all
119:22 - of the properties
119:23 - and we want to pass the id of the
119:25 - category here
119:27 - so we'll copy this and we'll paste it in
119:31 - edit as well
119:33 - with that in place let's run our
119:35 - application and make sure the buttons
119:37 - are displaying
119:39 - we do not have the action so if you
119:41 - click it will just give us an added
119:43 - message
119:45 - so right here we go to category
119:48 - and we have the edit and delete
119:51 - i also want to add some margin here
119:54 - so where we have the classes right here
119:57 - i'll do margin x2
120:02 - okay
120:04 - and this looks much better
120:06 - so now if you hover on the edit you can
120:09 - see the id is appended in the url
120:12 - and also if you go on delete you will
120:15 - see the same things
120:16 - if you click we have the url but we do
120:20 - not have that page or action method
120:23 - so let's add those action methods in the
120:25 - next video
120:28 - in this video we want to work on
120:30 - category controller and we want to add
120:33 - the edit and delete action
120:36 - now in edit and delete both of them we
120:39 - are passing the id
120:41 - so if we go to category controller
120:44 - we can copy the get for create and paste
120:47 - it right here
120:49 - we'll call it get for edit
120:53 - and we'll call this as edit as well
120:57 - in here we will be receiving an id
121:00 - because that is what we are passing from
121:02 - the asp route id right here
121:06 - so we'll receive an id and based on that
121:08 - id we need to retrieve that category
121:11 - from the database and we need to display
121:14 - that to the user
121:16 - so here we will first check if id is
121:19 - equal equal to now let's make it a
121:22 - nullable field
121:26 - or we can say if id is equal equal to
121:29 - zero
121:31 - if it is any one of these scenarios we
121:33 - will just return back not found because
121:36 - that is invalid
121:38 - if that is not the case we want to
121:40 - retrieve the category from the database
121:44 - now we will be using the db context in
121:47 - there we have category
121:49 - this will retrieve all of the categories
121:52 - but we just want the one category where
121:55 - id matches the id that we receive in the
121:58 - parameter
121:59 - so for that ef code provides a find
122:02 - method in which you need to pass the id
122:06 - here the find method works only on
122:09 - primary key
122:11 - so if you pass the primary key of
122:13 - category it will go through that column
122:15 - and pick a record whose primary key
122:17 - matches what we pass here which is the
122:20 - id
122:22 - after we get that we can check here if
122:25 - object is null
122:27 - this means record was not found and we
122:30 - can return back not found again
122:34 - if it finds the record let's pass the
122:36 - record to the view so that we can
122:39 - display it
122:41 - so this looks good let me add the view
122:44 - we'll go with the razer view
122:47 - and let's add this
122:49 - edit will look exactly similar to what
122:52 - we have for create but the only
122:54 - difference is values will be populated
122:58 - let's go to the create for category
123:00 - copy everything close this and paste it
123:04 - right here
123:06 - rather than action which is create we
123:09 - can just remove this from form
123:12 - the reason i was able to remove that is
123:14 - we are in edit and the post action is
123:17 - also the same name as edit
123:20 - so in that case it is an optional field
123:23 - if it was something else then you should
123:25 - define what action it should post to
123:29 - since it is same we can remove that
123:32 - we did not need the validation summary
123:34 - rather than add we will display edit
123:37 - category here
123:39 - we'll scroll down
123:40 - in the value create
123:42 - we will just display update
123:45 - with that in place let's run this
123:47 - application and give edit a try
123:53 - so we'll go to category we should have
123:55 - two buttons edit and delete let's click
123:58 - on edit
123:59 - great you can see the name as well as
124:02 - display order was populated by default
124:06 - so next thing that we want to do is when
124:08 - we hit this update these values should
124:11 - be updated in the database
124:14 - let's work on that in the next video
124:18 - now we need to implement the update
124:20 - functionality so we'll close the
124:22 - application here and we'll go to
124:24 - category controller
124:26 - we can copy the post action method for
124:29 - create and paste it for edit
124:33 - we'll call this edit
124:35 - and the object that it should receive
124:38 - should be category
124:40 - and we just need to change the name here
124:42 - to edit
124:44 - then when we are adding a category
124:46 - rather than add we should add the update
124:49 - here
124:50 - and then we'll save the changes redirect
124:53 - back and everything looks good
124:56 - now this will work for category but if
124:59 - you have complex object where within
125:01 - category you have other objects and
125:03 - everything here you will face an error
125:06 - the reason is if you go back to your
125:09 - edit
125:10 - right here we are using name and display
125:12 - order so when we'll be posting we'll be
125:15 - getting those two values
125:17 - but what about the id we have not used
125:21 - it anywhere here
125:23 - because of which the id will be zero
125:26 - so what is recommended is right here
125:29 - we'll have an input field we'll use asp4
125:32 - which is the id
125:34 - and then we'll have it in a hidden field
125:38 - that way when we post the form in the
125:40 - object we have the id as well
125:43 - the update will only work if there is an
125:46 - id associated because based on that it
125:49 - finds out which entity or which category
125:52 - it has to update in the database
125:55 - that being said let's run this
125:57 - application and give that a try
126:02 - so if we go to category
126:04 - and if we try to edit the test with
126:07 - display order one two five five five
126:10 - update
126:11 - great you can see it has been updated
126:13 - successfully
126:15 - also in edit if you remove this and hit
126:17 - update we get the error message and
126:21 - everything is working as expected
126:25 - last thing that is remaining is the
126:26 - delete functionality
126:28 - let's take a look at that in the next
126:30 - video
126:33 - now what we want to work on is the
126:35 - delete functionality
126:37 - so the delete page will look somewhat
126:39 - similar to edit page the difference is
126:42 - these things will not be editable at all
126:44 - and will have a delete button
126:47 - so let's go back to our application
126:50 - and we can copy the edit
126:53 - we'll paste it
126:54 - for delete
126:56 - in delete as well we are getting the id
126:58 - that user wants to delete
127:01 - so we'll call this delete and this will
127:04 - be delete as well
127:06 - now with delete we do not want the
127:08 - complete object all we care about is the
127:11 - id
127:12 - so we are just getting the id and that
127:15 - should do the trick
127:17 - but when we do that we get some other
127:19 - error message with the delete
127:22 - the reason is we have two methods here
127:24 - with the same parameters
127:27 - previously we had the category object so
127:30 - this was fine
127:32 - how do we fix this
127:33 - we can change the name to something like
127:35 - delete confirmed or delete host
127:38 - but in the view we want the name as
127:41 - delete and that will take care of this
127:43 - error
127:44 - that being said rather than update we
127:46 - will have to use the remove method on
127:48 - there but we need the object
127:51 - so we can retrieve that object using
127:54 - this method here
127:55 - we'll paste it here and we'll find it
127:58 - based on the id
128:00 - pass it to remove save the changes
128:02 - redirect back to action
128:05 - this looks good for the delete post and
128:08 - delete cat will be exactly same as edit
128:10 - get because we need to retrieve the
128:13 - category and pass it to the view
128:16 - now with delete we don't care about the
128:18 - model state because there won't be
128:20 - validation
128:21 - the only check if you want to add is the
128:24 - object
128:25 - if this is null then we do not have
128:27 - anything to delete
128:28 - and we'll just return not found
128:33 - else we'll just remove the entity that
128:35 - we found and redirect back to the index
128:38 - action
128:40 - so this looks good next we need to add
128:42 - the view
128:43 - so inside category we can copy the edit
128:46 - and paste it one more time
128:48 - we'll call this delete
128:50 - and the model will be same
128:53 - rather than edit category this will be
128:56 - delete category
128:58 - then we want to display the name but we
129:00 - do not need any validations
129:02 - and we'll make them disabled so the user
129:05 - cannot edit them
129:07 - with the button we'll call this as
129:09 - delete and the class will be danger to
129:13 - display a red color
129:15 - perfect so everything looks good let's
129:18 - run this and give this a try
129:20 - once we know the basic foundations of
129:23 - one crud operations now you will see the
129:26 - pattern and everything will start to
129:28 - make much more sense
129:30 - when we go to category
129:33 - let's try to delete
129:34 - as soon as you try to hit the delete
129:36 - button nothing happens
129:38 - what is the reason
129:40 - the reason is simple
129:42 - right here if we go to the controller
129:45 - the name is delete post
129:47 - so what you can do is we'll copy this
129:50 - and we can go to the delete.cs.html
129:53 - in the form method we can write the asp
129:56 - action
129:58 - and we can say delete post since it is
130:00 - not the same name as delete
130:03 - you do that you refresh the application
130:08 - and you hit the delete button it works
130:10 - now
130:12 - so you can see one workaround when the
130:14 - action name is not same you can
130:16 - explicitly specify what action should be
130:19 - called on the post action method for
130:22 - this form
130:24 - so with this we have completed the crud
130:26 - operations on category
130:30 - now that we have completed the grud
130:32 - operations on category i want to add
130:35 - font awesome in my website
130:38 - so we'll go to font awesome here
130:41 - here we have the font awesome let's go
130:44 - there
130:45 - and let's hit on the start and we'll get
130:47 - started
130:51 - here we'll hit the download and the
130:53 - download
130:54 - begins once it finishes we'll open this
130:57 - up and extract it
131:01 - so i'll extract this and we'll close it
131:04 - here
131:04 - we'll go to our snippets folder because
131:07 - that is where i extracted and we have
131:09 - the font awesome right here
131:12 - what i will do is i will copy everything
131:15 - that we have here and we'll switch back
131:17 - to our solution
131:20 - we'll right click on ww root folder and
131:23 - open in folder explorer
131:26 - here what i will do is i'll add a new
131:29 - folder for
131:31 - font awesome
131:33 - and i paste everything that we copied
131:38 - great so we have copied everything here
131:40 - how do we use font awesome now
131:44 - using that is simple
131:46 - we'll just go back and we have to add
131:48 - that in underscore layout we have the
131:51 - css here
131:52 - we'll add a link rel of stylesheet
131:56 - and we'll add an href up will point to
132:00 - the css
132:01 - here the intellisense is not working let
132:03 - me stop the application
132:06 - and we will add that path so right here
132:09 - inside ww root we have font awesome css
132:13 - and all dot css
132:15 - let me pin this
132:23 - with that in place font awesome is added
132:26 - to our website
132:27 - now how do we use the icons
132:30 - let's run the application and see we
132:32 - don't see any error message and next
132:34 - thing we'll start using the icons
132:37 - we'll go to category
132:40 - and let me add a plus sign right here
132:42 - with the create new category
132:44 - so we'll go to the index
132:46 - and let me go to font awesome again
132:51 - and we'll search for plus sign
132:53 - [Music]
132:56 - you go here
132:58 - and you'll copy this will go back
133:01 - in the index where we have create we'll
133:04 - paste it
133:06 - and we'll add a space
133:07 - we'll save that
133:09 - go back and refresh not this there we go
133:13 - this should add a plus sign right here
133:17 - great you can see font awesome is
133:19 - working
133:20 - let me add icons for edit and delete
133:23 - so if we go here and if we search for
133:26 - edit
133:28 - we have the first icon i'll just use
133:31 - that
133:31 - copy it
133:32 - go back to the application
133:35 - we'll paste it here
133:37 - and then
133:39 - we'll do the delete icon
133:42 - copy this and just paste it right here
133:47 - next i won't go back
133:49 - i'll just use the sign out icon for that
133:55 - we'll copy this
133:56 - and we'll go back to
133:58 - edit
134:00 - we have the back right here
134:02 - we'll paste it
134:04 - i'll do the same in delete as well
134:08 - and we have to create so let me go to
134:11 - the views
134:14 - we have to create
134:15 - and we'll scroll down
134:19 - let's go back to the application and see
134:22 - if everything now looks good
134:25 - great we have edit and delete
134:28 - and then if we go on create new we have
134:30 - the back icon
134:33 - and perfect everything looks good
134:36 - now here rather than displaying edit
134:38 - delete and everything i'll just have the
134:40 - icon and i'll remove the text
134:43 - this is self-explanatory so we'll leave
134:46 - it at that
134:48 - so with this we have completed adding
134:50 - font awesome to our project and all the
134:53 - crud operations with the category is
134:55 - working
134:57 - next it's time to replicate the pending
134:59 - things that we have for application type
135:02 - in the next assignment
135:05 - things are moving along great and we are
135:07 - making good progress
135:09 - next thing for our assignment is we need
135:12 - to add the required validation for the
135:14 - application type name
135:16 - and we want to do that on both client
135:19 - side and server side
135:22 - along with that we need to perform edit
135:24 - and delete functionality with
135:26 - application type
135:28 - this is exactly what we did with
135:30 - category so you should not face any
135:33 - issue
135:34 - so good luck with the assignment and in
135:37 - the next video i'll do the same to
135:39 - provide the solution
135:42 - so we need to do two functionalities
135:45 - first we need to add the validation
135:48 - so let me switch back and we need to
135:51 - work with application type model
135:54 - so right here we need to add the
135:56 - required and that will take care of
135:58 - making it a required property
136:01 - once you make this change then we need
136:03 - to add the validation summary
136:06 - so we'll close everything that we have
136:08 - here
136:11 - we'll save this and close it as well
136:14 - now we need to open up the category for
136:17 - create and we have the validation for we
136:20 - can just copy this we'll go back inside
136:24 - our application type we have create
136:26 - we'll paste it right after the input tag
136:30 - if you open up the create here and if
136:33 - you just copy everything that you see
136:35 - here
136:36 - and we'll just paste it we'll make sure
136:38 - this is for application type right here
136:42 - changing things will be much simple
136:45 - we just need application type
136:48 - add application type
136:50 - name looks good we do not want the
136:53 - display order
136:54 - and buttons looks good
136:58 - yep
136:59 - so everything is looking good right here
137:02 - next thing is we want to also modify the
137:05 - index for application type
137:08 - so we can just copy things that we have
137:11 - inside this td
137:13 - we'll go back here
137:14 - and we'll paste it right here
137:18 - the controller name you can either
137:20 - change this to application type or you
137:22 - can remove it because it is within the
137:25 - same controller
137:26 - once you do that changes inside the
137:29 - index it's time to go to the controller
137:32 - for application type
137:34 - and category
137:36 - here we will be dealing with only create
137:39 - but in future we have to perform edit
137:42 - and delete as well
137:44 - so why not just copy everything that we
137:46 - have in category controller
137:49 - we'll copy this
137:50 - paste it inside the application type
137:52 - controller
137:54 - right here we'll scroll up we'll copy
137:57 - the name application type controller
138:02 - and we'll just delete this
138:04 - we'll paste it here
138:06 - there we go
138:08 - and we'll change to application type
138:12 - we can change things one by one but
138:14 - rather than doing that i would prefer
138:16 - doing the bulk change
138:19 - there we go
138:30 - so what we did is we updated everything
138:33 - that we did for category with
138:35 - application type if we build our project
138:38 - we shouldn't see any error message
138:41 - now we have also added model state
138:44 - inside the post so let's give that a try
138:47 - one last thing we'll close the index
138:50 - in the create is if we go to the create
138:53 - for category
138:55 - and application type we have the
138:57 - validation scripts partial for the
139:00 - client-side validation
139:02 - so let's give that a try and see if our
139:05 - validations are working
139:07 - an application type will create
139:10 - and create it's working
139:12 - if we try to edit this
139:14 - the edit view was not found
139:16 - so let's add edit view and delete view
139:19 - and we'll add a plus sign on the index
139:23 - so we go to the index of category
139:26 - we have the plus sign here we'll copy
139:29 - that
139:30 - and we'll paste that in the index for
139:32 - application type
139:36 - next we want to edit and delete we can
139:39 - copy these
139:40 - paste it inside the application type
139:44 - and we'll modify them
139:46 - first thing will be the model which is
139:48 - application type
139:50 - and we do not want the display order i
139:52 - believe that's all that we had to change
139:55 - the action name is delete post and we
139:58 - have the delete post and application
140:00 - type yep we double check that
140:03 - next we have the edit
140:05 - so we'll change that to application type
140:08 - edit application type
140:11 - and we do not need the display order
140:14 - this looks good
140:16 - in delete we'll change it to delete
140:19 - application type
140:21 - let's run our application and with this
140:23 - everything should be done for our
140:25 - assignment
140:27 - now again i have been copying and
140:29 - pasting everything but i hope you do
140:31 - these things from scratch so that you
140:33 - get more exposure to what we just did
140:36 - let's try to edit this
140:39 - and that's working if we delete
140:42 - great everything is working as expected
140:47 - all the grud operations are working now
140:50 - with all the validations
140:52 - if you are interested in the full course
140:55 - you can view the details on
140:57 - dotnetmastery.com
140:59 - but i do not like to leave things at
141:01 - this
141:02 - i want to show you one important step in
141:05 - any web application which is deployment
141:10 - right now our application is a basic
141:12 - grud web application
141:14 - but still we can deploy our application
141:18 - so in order to do that we'll have to go
141:20 - to azure portal
141:22 - here you can sign up for your account
141:25 - you can get a free account for 12 months
141:28 - i already have my account so i will log
141:31 - in
141:35 - and rather than sign up it will show me
141:37 - i already have an existing subscription
141:40 - so i'll log in there
141:42 - and we are on our portal
141:44 - you can see i have 200 dollars of
141:46 - remaining credit that you get when you
141:48 - sign up for the first time
141:51 - in here whenever you have to deploy
141:53 - anything
141:54 - you create a resource group
141:56 - then in that resource group we will have
141:59 - to create an app service to host our
142:01 - website and we will need a database to
142:04 - actually insert all of the data we can
142:08 - do everything in the portal or we can
142:11 - switch back to visual studio and in here
142:14 - if we go on rocky let's right click here
142:17 - and we will select publish
142:20 - that will show us all the options that
142:22 - we have to configure
142:24 - we will select azure here we'll select
142:27 - the windows service
142:29 - then you have to make sure you sign in
142:31 - to your account if you are not signed in
142:34 - so in here we will be creating a new
142:36 - azure app service
142:40 - i'll call the application name as rocky
142:43 - crud and i already have an azure
142:45 - subscription which is the free
142:47 - subscription
142:49 - then we have to select the resource
142:51 - group
142:52 - if you are here for the first time you
142:54 - will just have to create a new resource
142:56 - group and you'll have to provide a name
142:59 - i already have a group so i will use
143:02 - that
143:03 - after that we need to select the hosting
143:05 - plan we can create a new hosting plan
143:08 - here
143:10 - and i'll call this rocky crud plan for
143:13 - size i will use the free one
143:15 - we will create this and that will
143:18 - configure in the existing resource group
143:20 - for my case it will create a new hosting
143:23 - plan for our crud application
143:27 - we'll wait for it to get done
143:31 - once it completes in here you see
143:33 - deployment slots
143:35 - we are not working with slots but in
143:38 - production application if you have
143:40 - multiple feature sites you can use
143:42 - deployment slots here
143:44 - let's click finish
143:46 - and once you do that it will show you
143:49 - some of the service dependencies like it
143:51 - says sql server database
143:54 - so we will configure the sql server
143:57 - database right here
143:59 - we will select the azure sql database
144:02 - and we'll create a new sql database
144:06 - i'll call the name as rocky quad db
144:09 - and we can select any of the existing
144:11 - server or i can always create a new
144:14 - server
144:15 - will keep the default location and for
144:18 - the admin username you cannot use admin
144:22 - so i'll use admin user and password i'm
144:25 - gonna use admin one 123 star
144:28 - with a capital a
144:30 - so we'll use that and we will create a
144:33 - new sql database
144:36 - so with database we had to create a
144:38 - database server and then we had to
144:41 - create the database
144:43 - resource group can be common for both of
144:45 - the database as well as app service
144:50 - so great this looks good let's hit next
144:53 - here
144:54 - and we need to configure the connection
144:56 - string name
144:58 - how do we want to save the connection
145:00 - string we will go with the none option i
145:02 - do not want to configure these things
145:05 - we already know the username is admin
145:08 - user and password is admin 123 star
145:12 - once you do that we have the complete
145:15 - connection string right here
145:17 - so make sure you copy this we will hit
145:20 - the finish button
145:22 - that will configure the dependencies and
145:25 - will hit the close once it is done
145:28 - so you can see sql server has been
145:30 - configured
145:32 - next we will edit the deployment mode
145:34 - here and we need to change the
145:37 - connection string
145:39 - if you expand the database here you see
145:42 - the connection string we will remove
145:44 - this and we will paste the connection
145:46 - string that we copied
145:49 - we'll select the checkbox to use this
145:51 - connection string at runtime
145:54 - on top of that with entity framework
145:56 - core migrations if you scroll down we
145:59 - will paste our connection string here
146:02 - again
146:02 - and we will say apply migrations on
146:05 - publish
146:06 - that way if there are any pending
146:08 - migrations they will be applied
146:11 - right now the.net 5 is in preview
146:14 - version so we will have to change the
146:17 - deployment mode from framework dependent
146:19 - to self-contained
146:21 - if you do not make that change your
146:23 - application will not work
146:26 - once we make all of these changes let's
146:29 - hit the publish
146:31 - we have the site url right here so once
146:34 - it publishes it will automatically open
146:38 - up this url and we will see how things
146:41 - look in azure
146:52 - great so you can see application has
146:54 - been deployed and you see the url that
146:57 - is on azure
146:59 - if you go on category and in here we can
147:02 - create a new category
147:04 - let me try to create one category with
147:06 - display order
147:08 - and great you can see it works
147:11 - all the migrations were applied
147:13 - automatically and we did not have to do
147:16 - anything
147:17 - so with that the free course comes to an
147:20 - end
147:21 - but there is much more to learn when it
147:23 - comes to asp.net core mvc
147:26 - i have full course which is divided in
147:29 - two parts on
147:31 - dotnetmastery.com
147:33 - in the first part we will cover more
147:35 - topics on displaying all the products
147:38 - and placing inquiry
147:40 - then in the second part we will focus
147:43 - more on architecture
147:44 - of our application
147:46 - and we will build the complete order
147:48 - management in our website
147:51 - you can find all the details on
147:53 - dotnetmastery.com
147:55 - so good luck and i hope to see you guys
147:58 - in the detailed courses

Cleaned transcript:

hi guys and welcome to my course on introduction to asp.net core mvc and we'll be using dot net 5. i have seen many people struggle with the concept of mvc or getting to know how dot net core is different as compared to classic.net do not worry i have you covered if you need an introduction on what are the basic files and folders in a dotnet core project or how do you add database to the project how do you connect with entity framework core and much more before you take this free course i want you to be familiar with basics of c sharp and have a basic understanding of how sql queries work and sql server if you have that then this course will be easy to follow along before i walk you through what will be covered in this free course i would appreciate if you would like and subscribe to the channel so that you will be notified for all of the new free content that i will be posting that being said let's take a look at what we'll be covering in this free course we will first start with the fundamentals of asp.net core and the reason behind its evolution after that we will see what are the files and folder structures and we will understand what are basic terminal lodges like pipeline middlewares routing etc in a.net core mvc application once we get our solid foundation then we will add database to our project using entity framework core with that we'll be able to perform crud operations which stands for create read update and delete those are the basic topics that we'll be covering in this free course but that's not it once we have a functional crud operation website we will be deploying that to azure to see everything coming live with our database so we'll be building a website and will be deploying it to azure but along with that the most important thing is assignments and error solving i will be giving you assignments to practice the basic grud operations and you'll see common errors that we see and how to resolve those so join me in this exciting journey of learning asp.net core mvc with net core 5. before we get started i want to show you where you can get all the project resources if you go on.netmastery.com and courses i will have all of the courses listed right here now the free version that you'll see is a free version of the complete course asp.net core mvc up and running part one if you click on the details here and if you click on github code you will have the complete code we won't be building everything in this free course but if you go on the comments here and if you scroll down you go to the older comments you will see exactly on what was being changed like this section is included and if you click on here you will see what was changed in that git comment so if you face any issues you can come on github and you can check everything there one place for all the resources will be dotnet mastery if you click on details you will be able to get all the course content and the github code along with live preview of the course so that being said now you know how to get all of the project resources it is through dotnetmastery.com before we get started let's understand on what are all the softwares that we will need for this course the first software will be sql server 2019 you can also use any older version of sql server that's fine with me but if you want you can download the latest version scroll down here and you can install the developer version since it is the free edition once you have sql server then we need visual studio 2019 now the net core version that we are using is dotnet 5 and that is available in preview right now since it has not been released yet so for that you will need visual studio 2019 preview you can come here and download the community version and install it along with that you will also have to install.net core5 so you can install this and right now the preview version is preview 5. but the course that we will be building was built using preview 4. because of which in the course you will see i installed packages and everything for preview 4. but what you need to do is when you create the project whatever preview version you use make sure to use that same preview version throughout the course in all the packages or the installation that we do once the dot net core 5 is released i will update this and let you know to install.net core 5 and not to work with the preview version that being said if you do not want to work on the preview versions and you would rather work on visual studio 2019 you can follow along with the course as well for that you'll install visual studio 2019 and net core 3.1 the course will be compatible with that as well so that's all the tools and technology that you will need install them if you do not have them and join me from the next video in this video i want you to walk you through the journey of dot net core dot net core is probably the biggest change that dotnet language has encountered in 2002 microsoft introduced web forms which was a revolution at that time but as the time progressed there was need to organize things and with other drawbacks in picture came a new architecture which was asp.net mvc now even though i love mvc it had its flaws like it was created on top of the components for web forms because of that it was tied to iis and windows but as the web evolved microsoft had to keep up with the change with that finally in june of 2016 microsoft released asp.net core and it was the first version now asp.net core is built on top of the new dotnet core framework it is crossplatform version and hence it is not tied with windows also dotnet core was built with cloud in mind so it is extremely ravished with that then in august of 2018 microsoft released.net code 2.0 and microsoft team has been very active with releasing the new version as you can see in september of 2019 dotnet code 3 was released in the intermediate versions there was darknet code 2.1 and 2.2 there was quite a big change coming from 2.1 to 2.2 with respects to identity but with all the versions upgrading to the new version has not been that difficult then in december of 2019 dotnet code 3.1 was released which had a longterm support finally in november of 2020 dot net 5 will be released this dot net core 5 is right now in the preview version and we'll be using that to create our project so that is just a small journey for the dotnet core frameworks that have been encountered that being said why one should use dotnet core as compared to the classic.net there are quite a few advantages first is the asp.net core is fast and open source next benefit is it is crossplatform the classic.net was tied to windows and iis but when asp.net code was rewritten it removed that dependency with asp.net core we get the builtin support for dependency injection dependency injection saves a lot of time and it is extremely helpful as we proceed with the course you will see the benefits that dependence injection brings to the picture then the updates to new versions for dotnet code are easy because of that you can always keep up with the new versions dotnet core is also cloud friendly when asp.net code was rewritten it was written in a way to make sure that they had the cloud architecture in mind another benefit and one of the most important one of asp.net core framework is its higher performance with the new enhancements as well as upgrades the code actually gets much more optimized that results into improved performance the asp.net core compiler will eventually optimize the entire code whenever the code is recompiled using asp.net core framework asp.net core's actual performance is multiple times more than any of the famous framework implementations because of that it is clear that microsoft has quite a long term plan with this asp.net code technology so with that let's continue learning in the next video what we want to do first is we want to create our project so for that we will open up visual studio 2019 right now i am on the preview version because we do not have the dotnet 5 released so we'll be using the preview version with the.net 5 of preview as well so in here we will create a new project then we have a list of all of the templates that are available what we want is asp.net code web application you can also search for that if you cannot find it once we select that we will hit the next button and then we need to give project name location and a solution name i will call this as rocky and i'll change the location to where i want to save it so i'll select the location and we will hit the create button once you hit the create button it will give you more options that you can configure for asp.net code web application right here you can see the version which is asp.net core 5. along with that you can see right here we are on the preview version right now now if you'll be taking this course in the future preview versions might be different so make sure that you select the most latest preview version and then in all the other places make sure you use that exact preview version that being said once you have the dotnet core and asp.net core 5 here on the right hand side you can select authentication if you hit change here you have no authentication individual users account worker school or windows authentication now i could go with individual users account and get a builtin authentication but i want to set everything up from the scratch so we'll go with no authentication and then later in the course we will add authentication that being said in the advanced we have the configure for https we will select this we do not want to go into docker details right now so i will skip this next i will enable the razer runtime compilation now previously enable razer runtime compilation was not available here and you had to add a new get package for that but now they have added this in the options and i think this was a much needed move because razer runtime compilation is one of the core features that you need when developing application this enables that if you make some changes to javascript file and if you save the application go back and refresh it automatically populates the changes rather than restarting the application so that's enough details about that we will make sure that this box is checked and then the main thing here is what template that we want now here there are quite a few template we can start with an empty project api project web application which is razer pages or mvc application i will go with the mvc application and this will give us a basic setup for an mvc application we don't have the authentication and once everything looks exactly like i have let's hit the create button this will create our project and it will add few files and templates to our project great so our project has been added and right here we see quite a few files let's continue working on this in the next video our project has been created and it's time to take a look at the files and folders that we have inside our project the first file will be the project file that we will be taking a look at for that if you right click on the project you will see the option of edit project file other way of accessing that file is just double click on rocky that will load the project file by default now here in the project file you should notice the target framework that we are using is net core f5 so this will be the dotnet framework that we will be using for our solution if you are using 3.1 or 3.0 that is the version you will see right here then we have few more elements and the other important entity will be the item group item group will have all of the thirdparty packages that we will be installing in our project right now when we created the project we selected the runtime compilation on the project options because of which it has added that nuget package right here when we will be adding more packages like we'll be adding database packages email packages all of those will be added in the item group and we'll be watching them once we add new packages in the upcoming videos when you have to add the package you do not have to come here and manually add the line we will be doing that using new git packages that being said this looks good for our project file let's continue with the other files in the next video next important file that i want to show you is the program.cs now we won't be going through all the files in the same order but i will be going through them in an order that will be easier for you to understand the next file we'll be taking a look is the program.cs if we scroll down here you will see that there is a main method main method is more common in console application and the reason you see that here is initially.net core application starts as a console application the main method configures asp.net core and starts it the configuration is done by calling the create host builder and as you can see this is a method in the program class which returns an object of ihost builder on this object build and run are called and then onwards the application will become an asp.net core application the create host builder calls default builder which configures the web host using defaults also you can see the web builder is configured using the startup file before we take a look at the startup file in detail let's understand a core concept of asp.net core which is dependency injection in this video before we take a look at the other files i will introduce you to a new concept which is dependency injection asp.net core implements a simple builtin dependency injection container dependency injection is an integral part of asp.net core architecture dot net core injects objects of dependency classes through constructor by using the builtin ioc container that being said let me try to explain in simple words what dependency injection is and what benefit it brings let's consider a scenario without dependency injection so in any application let's say we have three pages right now and we have some common functionality that we want to use across all the three pages like email and database access now let's imagine that on all of these pages we need access to database first so what we will do is we will create the database object on all the three pages and in our case we'll call the class name sdb then we'll have to do the same then create object of the email implementation that we have in all the three pages for the email class now consider a scenario what happens if in future you change the implementation of how you access the database or email based on the current configuration you might have to make changes in all the three pages which is a big mess another issue here is on each page you have to deal with creating the object managing them as well as disposing them and that would consume time in each and every page which is a bad approach so that being said what is a solution to avoid all of this the answer is dependency injection with dependency injection let's first see how the scenario would look like we will again have all the three pages and the email and database functionality here along with all the things that we had before we will have something new which is a dependency injection container then we will have the email and database functionality but rather than having them in just classes we will also have an interface for email and database then our classes will be implementing those interface and we will register the interfaces in our dependency injection container as you can see so we will tell dependency injection container that i email is an interface and email is implementation of that interface when any page will need to access these functionalities it will just ask the dependency injection container to create object of this functionality and directly give us the object to use so inside the page we will actually be using interfaces and then dependency injection does all its magic of passing the object when the website needs it that way we do not have to deal with creating the object disposing or managing that object inside our pages our pages will look very clean with just the interface and all the instance and implementation will be done by the dependency injection container now in future if you want to change or replace the email class you do not have to make any change in the pages all you have to do is you just need to change the implementation that you do in the dependency injection container in one location also as i have said before creating and disposing object is now the responsibility of the builtin dependency injection container and we do not have to worry about it anymore which is a great relief so you can see that there are lots of advantages that dependency injection brings to the architecture that being said with net core we have the builtin dependency injection container now how do we register these dependencies or where do we register these dependencies let's understand a part of that in the next video we had to take a detour to understand dependency injection before we understand the next file which is startup right here you can right click here and go to the definition or you can open up the startup file from here itself now startup class as you can see is a basic class with no extensions or implementations of interface but the first thing that you notice if you scroll down is that there are two methods the first one is the configure services and the next one is the configure method both of these methods are invoked automatically by asp.net core configure services gets called first we will be registering all the dependencies with dependency injection container that is built in in asp.net core within the configure services so that is why i wanted to introduce you to dependency injection in the previous video because configure services is the place where you do the registration of your service if we switch back to the powerpoint the step that we do when we register our email and database with interface as well as the implementation that is the step that we will do inside configure services method so inside the configure services method we can add services to the collection of services services are basically any functionality that you want to register so other parts of application can use it as we saw it could be email database and much more we will be registering the services provided by the.net core framework as well as custom services that we will create as of now you can see right here we just have one services which is add controllers with views and with this we register mvc service to our application we will be adding more services here but before we dive into mvc in the next video let's understand the configure method but remember that configure services method gets called by the runtime and we use this method to add services to our container that being said let's continue in the next video in the last video we took a look at configure services next method that we have here is the configure method here we see the i application builder as well as the iweb host environment environment we are using only to check if it's development or if it's something else based on that we are configuring the pipeline but the i application builder configures the http request pipeline of asp.net core the pipeline specifies how the application should respond to http request let's take a look at this with an example so in order to understand what the pipeline is let me switch to the presentation here we have different browsers here and then we have a pipeline the pipeline specifies how the application should respond to http request when your application receives a request from the browser the request goes back and forth through the pipeline in the pipeline you can add items that you want pipeline is made up of middlewares and mvc is a middleware itself so if we want an application to be built using mvc we need to add that middleware other examples could be authentication middleware authorization middleware session middleware static files middleware and much more so what exactly happens is when your request will go through each middleware it can get modified by them and eventually it is either passed to the next middleware and if that is the last middleware in the pipeline the response is returned back to the server let's take a look at the few middlewares that are already added in our application so if we switch back to the code inside the configure method first we are checking if the environment is development then we are adding a middleware for developer exception page else we have the exception handler which displays a custom error message because we do not want to show them the developer or the coding error then the next middleware is use https redirection this forces the user to use a secure line and then we are adding static files what i mean by static files is that any web project needs styling javascript images and much more so all of the static content will be served by our application only because we added the middleware to use the static files then we are adding the routing middleware followed by authorization middleware you can see authorization is added before the end points right here and that is because order matters when it comes to the middleware when the request comes in it is passed from the first middleware to the second to the third and so on in endpoint we configure the default route for our application that being said before we understand the endpoints in more detail let me explain you routing in the next video inside the configure method we have seen the use routing as well as use endpoints that being said we haven't seen the actual mvc routing and how that works endpoint routing has been introduced in asp.net core 3. in the initial version of asp.net core routing was a part of mvc but it has been separated out to make routing available to all the middlewares and not just mvc whenever a request comes in it hits an endpoint and that endpoint is processed by the middleware before we get into those details let me switch to presentation and i can give you example of routing the url pattern for routing is considered after the domain name so in this case it will be after localhost and the port number which is five five five then in the example url that we have we see category forward slash index forward slash three in an mvc application the first thing that you will see will be the name of the controller after that we will have the name of the action followed by the id also keep in mind that id is an optional field some of these fields can be optional and if they are not present it will take the default value like if an action name is missing it will default the action name to be index you can change the defaults if you want but if we switch back to our application and if we see the end point that we are using we have a default pattern in which we have the controller name defaulted to home action name defaulted to index and we have an id property which is optional so with that in place let's try to see some more examples here the first example we have forward slash category forward slash index so in that case category will be the controller index will be the action we do not have anything for the id so id will be null next what we have is only category in that case the controller will be category controller and action will be defaulted to index action and if no id is present it will be null then we have category forward slash edit forward slash three we have all the fields here controller will be category edit will be the action and id will be three in the last example we have product forward slash details forward slash three again we have all the three entities controller will be the product action will be details and id will be three now in mvc there is a route table which tries to match endpoints to find out where to pass the request to be on track here if we have a url like this in mvc home would point to a controller and index would point to an action method as we saw in the last slide now if you are not aware about what is a controller what is an action method do not worry right now just understand that this is one way of routing we will be getting into mvc details very shortly but asp.net core is now more than just an mvc application it can also have razer pages and signalr that being said it is possible to have all three in a single application all of these technologies have middlewares that register endpoints so if we switch back to our application right here we see a middleware of use routing in startup.cs so let's imagine at some point we hit this middleware at this point the request will inspect all of the registered endpoints they can be endpoints registered by mvc or any other technology it determines whether it should send the request to mvc or any other technology then for all the middlewares that will be executed after this we'll know that end point has been selected like mvc or razer pages and then later on when it hits the end point in the use endpoints we will register the end point and then when the request arrives at this point it will be processed by the end point that was selected in use routing so in expression we have the end points and we have an object for the options on this object there are several extension methods that are available to register different endpoints like right here we are registering the mvc then we have other endpoints for razer and signalr as well we will be adding razer endpoint later in the course and within the controller which is the mvc we have added a default pattern so by default it will load the home controller and index action if nothing has been loaded so here we also have registered a default route for mvc application which has a controller name home and an action method called as index this map controller route uses routing table to match against the request this is the basic overview of routing middleware that we have that being said before i actually run the application and walk you through routing in demo let me finish the overview of the other files and then we'll get back to routing and view it live in action in this video i want to introduce you to appsettings.json this is the file in which we'll be adding all of the connection strings and static files like secrets that we want in a production application you can move this to words or secrets but we'll be using app settings for this course here right now we see the logging and in that we have some things that have been configured we will be adding connection strings along with other things in this course inside the app settings whenever there are any keys or anything that we want to use throughout the course it is a great place to store them right here that being said we'll come back to this file and we'll be adding new things in the upcoming videos next what we want to see here is we have a folder called www root this folder has been created since we selected the mvc application in here if you expand this there are more folders that has static files for our application static files could be css javascript or any of the thirdparty libraries you can also have images here or html templates if you remember in startup.cs if we go there we added a middleware use static files and that was added so that the application can use the static files that we add inside www root this www root folder will be the root folder in application for all static files none of the c sharp files will be placed in this folder this folder is only meant to serve all the static files for our application so we'll be using the static files folder extensively throughout the course when we have to add images or we want to add any class libraries or we want to modify external css once we have that the last thing that we have is launch settings.json launch settings.json is inside the properties folder and if we double click it displays different profile in which we can run the application like here if the profile is iis express it sets the environment variable for that profile to be development this way you can configure more profiles that you want with the url as a support and other functionalities also when we will run the application right here we will be seeing all the profiles that we have set up inside the launch settings so right here you can see iis express and we have the rocky profile if you want to modify them you can modify here directly or you can also do the same if you right click here and here if you go to the properties we will be having those profiles in the debug tab so right here you see iis express as well as rocky we can set the browser url and we can set the environment variables that we want here we have the other settings which you can set from that page or we can do in the launch settings.json now we won't be tweaking this much because this is more related to deployment and if you want to add more environment variable for like staging another environment but we'll just keep it with the basic for this course so with that we have covered all of the files that we see in the project except three main folders which is controllers models and views and as you would have guessed this is what mvc stands for which is model view and controller that being said let's understand the architecture of an mvc application the first thing in mvc is the model model represents the shape of the data a class in csharp is used to describe a model the model component corresponds to all the data related logic that user works with this can represent either the data that is being transferred between view and controller or any business logic related data model would also represent all the tables of the database so if you have 10 tables in the database you will have at least 10 models on top of that there is also more complexity but we will go into those details later on in the course so if a class is a model then all the properties in that class will be all the columns of a table so that is the simple relation that you can think about model right now then we have the view view in an mvc is a user interface view basically means whatever you see when you click a web page the ui that you see that will be represented by the view view in asp.net mvc is html css and some special syntax which is razer syntax so main thing about view is that it represents the user interface logic of your application finally we have the controller the controller handles the user request typically whenever a request comes in like user clicks anything it will raise an http request which will be handled by the controller the controller then uses the model as well as view to process the request and then it returns back an appropriate response so controller acts as an interface between model and view to process all the business logic incoming requests and it manipulates the data using model and interact with the view to render the final output this is just a brief overview of how model view and controller interacts so just to summarize what happens is first a user clicks something on the website so a request comes to controller controller will always be the main entry point in an mvc application and in controller it will hit any of the action methods that we have defined inside the controller now controller will uses the model and it will fetch all the data that it needs to display in a view then it passes that data to the view so that view can render the final page that user can see then view will send the request back to the controller and then based on whatever is rendered a response will be sent back and user will be able to see the page so you can see controller can be treated as heart of your application with that in place in the next video let's run our application for the first time and see how model view and controller interacts and how routing works now before i run the application and show you routing in detail let's take a look at the folders that we have with model views and controllers so right here we have a home controller and in the model we have the error view model whenever we'll be adding new models or if we want to add a new table in the database we will be adding models inside this folder controller as we know is the heart of the application in controller if you expand this you see there are many of the functions these are known as individual action method so a controller has action method if we go back to the routing template that we had we had the controller name and the action name so what means is if someone calls index then they can call it home forward slash index and the control will hit this breakpoint when the url is submitted and once the control gets here we are just returning back the view so this view will be inside the views folder and inside the home folder the folder name will match exactly as the controller name so it will look for an index view inside the home folder inside views and that will correspond to the action method that we see right here so what we have in the index view is if you open it we have a title we have welcome here and then we have learned about building web apps with asp.net core let's run this and make sure that this is actually working so let's run our application for the first time and great we see that page is loaded now right here in the url we do not see any controller or action name and the reason is if we go back to the application in startup we configured the default to home controller index action so that being said if you add a debugging point right here and if you go back and press enter you will see that it hits this breakpoint so it is actually calling the index action method inside your home controller that being said let's continue here and the view is loaded now what will happen when we click privacy you can see in the url on the bottom here it is going to home controller and privacy action method so right here inside home controller we have the privacy action method which just returns back a view that view will again be inside views home and we have the privacy view and this is what we should see when we click that let's go back and click here now you can see the control is getting to the privacy action method and if you hit continue the privacy view will be loaded great so we can see how routing is working so far right now we do not have any id even if you add an id it will still load the privacy because id is optional so if you have it or if you do not that doesn't matter so with this routing is making little bit more sense on how the controllers and view routing works one thing you should always remember is if your name is home controller you should have a folder within the view with the name home and in there you will add all the views corresponding to the action methods inside the home controller that being said right here there are few more views that i want to explain you let me do that in the next video in the last video we saw the routing and we saw how the model and views are integrated together that being said in the views we have a shared folder this shared folder is used for partial views partial views are similar to user components if you are coming from classic csharp so it is basically a view that you want to consume in multiple places in your application along with that we have a special partial view which is underscored layout underscore layout is the default master page for your application so in here if we scroll back to the project that we are running we have the header here so the header and footer are included in underscore layout right here we have the header then we have render body and we have the footer along with that in underscored layout we have some styling and javascript that can be used throughout the application so in future if you want a styling or a javascript functionality that you want to use throughout the application this is the place where you will add it other than underscore layout we have a partial view which is validation scripts partial this partial view just has the reference to some of the jquery for validation we will be using this in the future videos then we have error.cs hdml and this is just a common error view that we have in developer mode so that's about the shared folder views we will be adding more partial views in future that being said inside the views folder we also have two important files first is the view imports the purpose of view imports.cs hdml file is to provide a mechanism to make directives available to razer page globally so that you don't have to add them to the pages individually so right here it is adding the tag helpers so with this all the default tag helpers that asp.net code team provides will be added to all of the razer pages in your application if you do not have this then you won't be able to use tag helpers in your project an example of tag helpers can be seen in underscored layout if we expand the header right here you see this tag helpers asp area asp controller asp action these are all the tag helpers that make the binding look like html language but it does the binding with your c sharp code tag helpers is an idea that microsoft team has adopted from other languages after looking at the success like angular and react so if in future if you add more custom tag helpers you can register them here and they will be available for use throughout the application that being said we'll go to the next file which is view start the main purpose of view start is to set values that all the other views will have to use if this view exists and it is under the views folder it enables us to set the property that applies to all the views in the system right here a most common underscored layout view will set some properties the default one in mvc is the layout page however you can also do complex thing in view start for example you can say that for a specific controller you want to change the layout page you can add if condition check the controller name and do complex logic but we'll just leave it simple for now so here we are defining the default master page for the application is underscore layout right here so if you change this your master page could be changed using the layout property in view start also what you can do is you can add a view start inside the folder as well and then that file will take precedence so with that i believe we have covered all the files that we have when the project was created now this has been a lengthy section and it was mostly theoretical with very little exposure to routing and the project but this won't be the same moving forward moving forward everything will be hands on and we will be coding everything and exploring asp.net core in detail so that being said let's get started with everything from the next video now that our project is created and we have an overview of all of the files that comes by default let's add our model now what is a model model will represent a table that we want in our database so for our application we want to add a table in our database for category in there we will have three columns we'll have category id category name and display order as i told you before we will not be touching the database directly if we have to make any change to our database or even create the database we will be doing that from our code so for that what we will do is first inside the models folder here we will right click and we will add a new class file and we will call this as category inside category what are all the columns that we want all of those columns will be properties of this class so we can use the snippet prop and press tab twice then we have a property that is generated first we want the id which will be category id or i can call this as mid in sql server for columns you can have them as identity an identity column will mean that you do not have to pass those values whenever you add a new record it automatically increments by 1 and creates that but you only have id here how do you tell the database or entity framework code that this column needs to be a primary key and it needs to be identity for that we have data annotations you can see right here it is inside system.componentmodel.data annotations if you press enter here it automatically adds that namespace right here once you add data annotations it tells entity framework that this column needs to be an identity column and a primary key for our table entity framework also has default so if the name is id or if the name is category followed by id then it automatically adds it as a key entity so even if you do not add this it will be added by default but i always like to be explicit about it so that when someone sees our model they can get a better idea using this there are many more data annotations but we won't go into those details right now i want to start from all the basic and then we'll go into the advanced concept next what property we want we'll press prop again and tab twice next we want a string and we will call this category name you can call this category name or i'll just go with the name last property that we want is an integer and let me call this display order now we won't be using this but i'm just adding a new property so i can show that to you guys so now what we have is we want to create a category table in the database and we want these three columns in that table but how do we do all that let's take a look at that in the upcoming videos now we have created our first model which is the category model we need to push this model to our database but first we do not even have a database for our project so let's go to sql server management studio and right here let's connect to a server now here one thing that you should remember is the server name i have dot right now but i can also change it to local db ms sql localdb now for some this might be the server name they are able to connect to and for others it might be a dot i have both of the options so i can connect to a dot as well as i can connect to the local db ms sql local db great you can see both of these options work for me once you have that determine which of the server you want to use for our course we will be using the dot so if you expand the databases we have two databases you can expand this you can take a look but what we want is we want to add our own database right here so how do we do that for that we need to add a connection string in our rocky project so right here whenever we have to add a connection string we'll be going to appsettings.json this is the file where we will be adding all of the secrets or connection strings for our project now once you move this to production you can move this to appsecret.json but for the course app settings.json is a perfect location now the next question is where do you define connection string in here for that right here we need to create a connection strings and we can assign it inside the parentheses now in here we need to give a name so i will call this default connection and then within the double quotation we will write the connection string so right now we have server equal to and i will use a dot here because that is what we are using next thing that we have is the database name so we'll say database and what name do we want i'll call this as rocky after that we will set the trusted connection to true it will be trusted underscore connection is equal to true and then we will have the multiple active result sets to be true that's all we need for connection string now what i'll do is i'll copy and paste this one more time i'll comment this out and instead of dot here i will paste local db ms equal local db because this might be connection string you want to use if you wanted the different server we'll go with the dot now we have our connection string in place the next step will be using this connection string to actually create the database let's take a look at that in the next video now we need to create our database and we also have to push the category model to the database in order to do that we need a db context in our project dbcontext is provided by entity framework before we do that right here let me add a new folder and i'll call this as data in here we will right click add a new class file and i will call this application db context or you can call this any other name followed by a db context now this is just a basic class how do you make this class a db context in order to do that this class will have to implement or inherit from the db context right now that class does not exist if you do control dot here it will show you options to install packages so we need to include entity framework core in our project now there are multiple ways to do that first thing you can directly go here and you can click find and install the latest version next way you can go to tools nuget package manager and you can install the package if you know the name with the package manager console and if you don't know the exact name we will go to manage new kit packages for the solution in here what we will do is we will go to browse tab and we will search for our package which is entity framework core once you hit enter here the first package you see is microsoft dot entity framework core now entity framework code will not be the only package that we will need we will also need the package for sql server because entity framework core needs a database to work with so that will be sql server so right here if we search for sql server we will have a package microsoft dot entity framework core dot sql server so in order to install this package we'll click the project name and we will hit the install button now if you are on the preview versions make sure that when you created the project the version name for preview should match exactly like you created the project if you created the project with preview 3 right here it should be the preview 3 that you should be installing and not preview for that being said we'll switch to what we have once you make sure all of that is good let's hit the install button it asks us for the license we'll accept this and great package has been installed we see the error with db context but we will solve that later on now if you go to dependencies packages you see you have microsoft dot entity framework core dot sql server if you expand that you have microsoft packages and if you expand further you see that microsoft dot entity framework core is already installed the reason is because the sql server is dependent on entity framework core that's why if you install only sql server entity framework core gets installed by default now that the package has been installed if we close this and if we go to our application db context right here you click there and you will hit control dot for intellisense it says that you can now add using statement for microsoft dot entity framework core so with that we have added entity framework core in our project that being said we need to add some configuration here we need to create a constructor so we can type ctor you can see it is a code snippet for constructor and we'll press tab twice in here since we are implementing the db context we need to pass the db context options here and we need to configure the application db context class we'll call this as options what we have to do is we need to pass all of these options to the base class for db context now this will include connection string as well so we'll pass base and we'll use the options if you do not understand this do not worry it's just some configuration that you have to do in order to use the db context that's everything that we had to do to create a db context for our project right now things might not be making complete sense to you but just stick with me for few more videos and you'll see how easy and magical this is now the thing that is remaining is we need to create our category table in the database and we also have to create our database let's continue in the next video to finish the last step of our configuration now we have the application dbcontext class next what we want to do is we want to create the category table to our database whenever you have to do that you will come to the application db context once you have created the model and here we will create properties to push them to database so we'll do prop and this time the property type will be dbset in here what is the class name which is the entity so the entity that we want to create to the database is category entity and what name do you want to give to that table inside the database i want to call it the same name as category now by default the convention is to name it plural like categories but i like to name them same as the table name or the model in our project so that way we will be creating a table with the category name in the database this is all looking good and fancy but how will this come together for that we will be using our startup class file because we want to configure this db context to be used by our application when it starts and that configuration will always be done in startup class file so inside the startup class file where we have the services we will be adding a service for rdb context so here we have add db context and in here you need to pass the entity name which is application db context then we need to configure options on that property and if you see right here we are passing those options to db context so in startup what are the options we want to configure first thing is we want options that we want to use sql server so right here you will have to add the namespace microsoft dot entity framework core and then you need to configure the sql server options now sql server options does not need many things it just needs a connection string and that connection string is inside app settings.json inside connection strings make sure that you name this exactly and there is no spelling mistake or else this won't work once you make sure both of them are looking exactly like me you'll come back to startup and we have the configuration object here on configuration object we have an extension method get connection string what this will do is it will look into your app settings and it will go inside connection strings right here in there what key should it search for key will be the default connection so we will copy this come back here and inside double quotes we will paste default connection that way it will retrieve the connection string and it will pass it to the options for sql server so that's all configuration we had to do to add our db context and use of sql server to our project so with that we complete the configuration that was needed but right now the sql server does not have our database or the table for that we need to understand migrations whenever we will have to push any change from our website to our database we will be creating migrations let's understand them in the next video now we have added in our db context the category model so the next thing that we have to do is we need to add a migration to push that to the database in order to add migration we'll go to tools new get package manager and we will open up package manager console in here we will be adding our migration so for that we will add a command add migration and then we will give our migration a meaningful name what are we doing in the first migration we are adding the category table to database so we can say add category to database and we will hit enter when you do that you will see an error message it says the term add migration is not recognized as a name of command let function script file or operable program if you created your project with individual users account identity then you won't see this error because it installs the new git package that is needed for migration but since we did not do that we will have to install another nuget package so we'll go to the nuget package manager and we will search for tools we want to install microsoft.entityframework.tools right here this is entity framework core tools for nuget package manager console in visual studio make sure you install the correct version and great everything looks good so we will close this and if we go back to our application db context let me open the package manager console here let's try to run this one more time in order to run the same statement you just press the up arrow the build started build succeeded and it added our migration now this is entity framework code doing its magic you can see what it's doing is it is creating a table called as category and it has three columns first is the id column which is of type identity and nullable is false then we have the name and display order and it also adds a constraint to make the x dot id as the primary key so all of this magic is done by entity framework core it automatically converts your model that you have into migrations and then you can push this migrations to the database so how do you push them to database now for that if you go to package manager console here let me clear this out and the next command is update database so once you have that command and if you press enter it will push all the pending migrations to the database in case like ours where the database does not exist it will first create the database and then proceed further now if you have any errors while building the project you won't be able to get past the step because your project must build successfully in order to proceed so right here you can see it's done what exactly just happened let's understand that in the next video now that we have pushed the migration let's see what actually happened in sql server in here we see the new database which is rocky let's expand that and we have the tables now in tables you see we have created category table but entity framework code already added underscore ef migrations history here it keeps a track of which migrations are actually applied so that it can synchronize everything right now that will be just the name of the first migration that we added which is add category to database so we'll close this and then let's examine the category table it has the three columns that we wanted so it actually pushed our category model to the database and everything is looking good right now so remember whenever you have to make changes you first make the changes add a migration and then you update database to push the migration to the database so that being said let's continue in the next video before we start with anything let's run the application so if we go in the arrow here with the browser you can pick which browser you want for the application i will be using the new microsoft edge and let me run this and take a look at the result so our application is up and running and we see home and privacy what we want to do is we want to add a new tab here or we can replace the privacy tab with category how do we do that this navigation bar that we have is inside the shared folder inside views so if we go to views shared we have the underscored layout and right here we have the home and privacy here you can see the action name is privacy and the controller name is home what we will be doing is for category we will be adding a new controller so for that we'll go to solution explorer in controllers we'll add a new controller in order to do that we will have to stop the application and controllers add a new controller and we will go with the empty controller now what you need to do is we need to name our controller it should always end with the controller keyword so whatever is before that will be the controller name and we will call this category controller great so you can see our new controller has been created and in there we have an index action method how can we navigate to this controller using our url let's run the application and then if we want to go to the privacy action in home controller you can see the url is home followed by privacy so in order to go to our category it will be category controller and what is the action name that is the index action name but if you press enter right now you will see an error that view index was not found that is because we have added the action here but we have not added the view so inside layout what we will do is change this to category controller action we'll change this to index and we will call this category if you go back and if you refresh the home page let's go here this time the privacy will be updated to category but if you click on category you will still see that error message let's continue in the next video to fix this error message and add our view now if we try to navigate to category controller index action the view is not found so let's add that view for that it is simple you can do one of the two things first is inside views you can create a new folder with the exact name as the controller name which is category it won't be category controller it will be only category and then in there you can right click add a new view here and that will do the trick or simple way go to category controller right click on the action method select add view we will be using the razer view do not go with the empty option here and then you can see here we have some configuration first is the view name which will keep the same as index next you can use template when you create a view it can be create template edit details or delete we will be going with the empty template and we don't want any model classes right now if you select any of the other then you have to select the model class like if you want to create what object should it create should it create a new category if yes what should be the db context that should be used but if you go with empty you don't get those options that being said we have not used partial views right now so we'll leave this unchecked and option here is use a layout page if you check this and if you leave this empty it will use the default layout that you have so we'll just keep that and press the add button it will add few neoget packages for scaffolding and then it will create the index view one thing to notice is the view will be added inside a folder name with the exact name as your controller which is category that being said if you run the application now and if you hit the category you will see the page with the word index in there so if you hit category great you can see the view is being rendered so now that our view is added and our database is in place let's see how we can create a category let's continue working on the index page in the next video what do we want to do on the index page of category we want to display all of the categories that exist in our database right now we do not have any categories in our database but let's say we add some categories manually for our testing so we can go to database edit top 200 rows and we'll just give it a test name display order one will give it test to display order two we have two categories now so if you do select star here you will see two records let's see how we can display them here in order to display them we need to extract these values from the database so for that we'll be using entity framework and we need the application db context or the db context to do that so we'll go to the category controller and in here we need an object of application db context but thankfully dependence injection takes care of all of that so right here we'll just use application db context and we'll get that using dependency injection so right here we will be adding a private read only property and this will be for application db context we'll call this underscore db now we need to populate this property and we'll do that with constructor and we'll be using dependency injection if you go to your startup cs right here you have added the db context so you have already added that in your service container if you want to pull something from that container in the constructor you just write the class or the interface name so this one is application db context and we'll call this db what this object will have is it will have an instance of the db context that dependency injection would create and pass it to you in your constructor you do not have to worry about all the back end behind that asp.net core takes care of everything so you can just assign your local underscore db as the db object that is passed and then you can use this underscore db throughout your controller so we have the database object in underscore db what if we want to retrieve list of all of the category so in the index let's retrieve an i enumerable of category and let me call this object list obj list is equal to how do we retrieve that from database we will be using entity framework so we have the database object and in there you already see category if you just do like that it will retrieve all of the categories from your database and it will store them in this obj list let me copy paste it to the view and will return that list to be displayed in our view let's add a debugger and see if it actually passes anything let's run the application and let's hit category it will hit our debugging breakpoint and right now the list should be empty here that's good if we press f10 to continue to the next line if you hover now you see the list and result view it should have two values and these are the two categories that we added so you can see how easy it was we did not have to write a query like select star from category entity framework core takes care of everything just one line and you get all of the categories so even though we spend some time in configuration for entity framework and db set and db context you can see the advantage that it brings to the table and in future this will save tremendous amount of time as we will see so now we have list of all the categories and we are passing that to the view if you hit continue here you will see that we do not see any of the list that's because if we go to the index view we are not fetching that model or we are displaying anything in here other than index let's do that in the next video now we want to display all of the categories in our view so we are already passing that from our controller when we return to the view whenever you pass anything from the controller you need to make sure that you fetch it inside your view now how do you tell this view that actually a list of categories is going to be passed to you from the controller for that we will define at model on the top here in here m will be of lower case and then we will define what will be the model type here it's an innumerable of category so we'll say it's an i enumerable of category if you type just category this works but what i prefer is i prefer rocky dot models dot category this way you know the complete path for the category so in large scale application you are not confused now what will happen is the list that we will pass from here will be available on this view and we can display that so we can use some bootstrap styling and we can display a table we can add a div give it a class of container and we'll give padding 3 in here then we can add a div give it a class of row and padding top we'll give it four and in there we'll add a div give it class of column six we'll divide it in two pads we'll have another div class of column six in the first one here we will have an h2 tag and we'll give it a class of text primary and we'll call this as category list in here we want to display link to create new category that looks good then let me add some line here and then i'll display a table now the table i only want to display if there are more than one categories that have to be displayed so with razer syntax you can combine csharp syntax with the html for that you just write the add sign and then here we have the for loop we have for each loop you can see and we also have if conditions so we can use the c sharp if condition and we want to see if this has more than one category here the model was lower case but whenever anywhere else in the view if you want to access this model it will be a capital m so it will be model dot we just want the count on that if it is greater than zero that means that category exist so if the category exists we want to display a table and we can use bootstrap classes for table table bordered and table striped we can also give it a style of width of 100 percent inside here we have the thead and we have the table row in which we'll have the header first one let me display category name followed by display order and we'll have an empty th so this looks good for the heading then we have the t body in body let's say you have 10 category so you want a loop that is iterated 10 times and you display all of the properties so like we had if with the razor we also have for each and we'll iterate through all the categories so we'll say variable object in model now what is model model is actually the i enumerable or list of category so right here we will add a tr tag and we'll display td we'll give it a width of 50 percent the first thing here is the category name so at obj dot we have the name in there we'll copy this paste it one more time we'll give it 30 percent and we can display the display order and then in the last one here td let's say we want to display the buttons to edit or delete a category but we'll do that one thing at a time then we have the if condition so we can add else block and we can just display in paragraph no category exists so this looks good let's run our application and see how things look like we'll go to category and we'll continue on our debugger great we see both of the categories here we have the create new category so we'll make this a button or a link and we'll continue working on this in the next video now we have worked on our index page and we are loading all of the page for that what were the two things that were needed one was the controller action method inside category controller and we needed a corresponding view what we want to do is we want to create a new page for creating a new category so for that the first thing that we'll do is we'll need a new action method right here so we can copy this and paste it one more time and this will be for create what happens in the create in create we will display them to empty text box to enter the name and display order for the new category they want to create that being said since everything will be empty we do not even have to pass anything to the view it can be empty so this make sure that this is get for create once we have added the controller let's add the view as well it will be the razer view and we'll keep it the same let's add this first thing that you do whenever you add any view is will that be a model needed for this view we are not passing anything from the controller but that doesn't mean we won't be using a model in the view here we will be using model which will be category so we'll go to rocky.models.category now why do we need a model here and the reason we need model here is whenever user enters any of the category name and display order and hits the create button we want to pass those values to our action method which will be a post action method for category and we want to create the category so here what we'll do is we'll add a form and it will have a method of post and where it should post we can explicitly define that using tag helpers tag helpers looks exactly like html but they are asp dash and then these are the default tag helpers that asp team provides so right here you can see there is a tag helper called asp action we will call this as create this means that when the form executes a post method it should look for a post action method of create we will add that in the next video but i wanted to point that out in here we'll use some bootstrap classes of border and padding three and in here we'll add div give it a class of form group and row and we'll add the heading here h2 give it a class of text info and we'll give padding left of three we'll call this add category now that we have that let's run this application and see this title if we go to category and we'll remove this debugging point right now we do not have the button to navigate to the create new category so let's do that in the index right here we have the create new category how do we navigate to that page in order to go to that page you will have to go to the action method which is create inside the category controller thankfully we have tag helpers for that so right here inside the anchor tag we have the asp action tag helper what action do we want to redirect to we want to redirect to the create action and that is inside the controller which is the category controller typically you would write the controller name before the action name that's how the navigation goes first what controller in that controller what is the action method once you have that you'll close the anchor tag after the create new category let's go back and refresh here and if you click here it takes you to your ad category let's add a little bit of styling here so we'll add a class of btn btn primary and let's see how this looks okay we'll also align this to right so we have text right and perfect so when you hit on create new category it takes you to the add category let's continue working on add category in the next video now we want to add the text boxes for adding a new category options like name and display order so we'll go back to our project and let's stop this now we will be doing that inside create we will be adding little bit of more bootstrap styling i don't want to spend much time on bootstrap styling so i will be attaching snippets with the course where you can get them and paste those bootstrap directly here in section 1 i have lecture project resources in which i explain how you can get all the snippets so right here we are on section 2 but if you go back you will have all the section so we will open up the add category snippet and we'll copy this go back to the create and make sure you add this after this form group and row and paste it here you can see it's not doing anything fancy if you save this and run the application you will see what exactly was done so if we go to category here and we go to create new create uc name display order and here we need text boxes and we'll create two buttons one button to go back to the previous page and one button to create or add a category so let's switch back here we want to display name so rather than using just name we can use tag helpers so we have a label in there we have asp4 tag helper and here you will see all the properties in your model like name you can also add a class if you want but i'll keep it simple what is the advantage of using this tag helper rather than typing just name let me also add a display order here and we'll save this if you go back and refresh there you go not much difference the advantage that this tag helper brings is if we open up our category model right here you can use data annotations to display something else like here if you go back display order is one word what if you want a space in them for that we have data annotations so right here we have display name and here we'll say display order once you do that and if you run the application this time it will use whatever we gave as display name because we are using the tag helper so if you go to create new category now you see a space between so that way inside your model you can define what display name you want and there are many more data annotations which we will take a look in the upcoming videos so now you saw one advantage that you have with the tag helpers that being said we also have tag helpers for input as well so in the input tag here we will use the tag helper which is asp4 this input is for the name and we can give it a class of form control to take full width let's go back and refresh here and great we have a text box let me switch back to the application and do the same for display order if you refresh perfect we have two nice looking text boxes let's also add buttons so we'll go back and here we can do an input of type submit or you can just add a button here then we'll add bootstrap classes btn btn info and width of 100 percent let's call this create and we need a value will be create after that for back button we can add a link here and we can copy the link that we have in index and we'll paste it here when we want to go back we do not need the controller name the action name that we want to go to is the index action to display all the categories and here we can just display back if you save this and refresh great we have create and back and i make this as success and width of 100 so we have two buttons now if you click back it takes you back to the category one thing you notice here is you do not need the category name that name is optional because you are dealing with views in the same category if you had to go to the page or view that belongs to a different controller then you need to explicitly define the controller name here by default it assumes you mean the same controller that you are in right now so with this our page is looking in a good form when we see the add category let's continue in the next video this time what we want is when we enter anything here and hit the create button it should add a new category to database so for that if we go back to our application you can see we have input type of submit and then we have a form here which goes to the post of create so if we go to category controller we need to add that we can copy the get for create paste it here but this time we need a post for create now inside the post right here we will get a category object that we have to add to the database with post what you should do is you have to define that this is actually a post action method so you'll add an attribute http post and we will be using validate antiforgery token validate antiforgery token is a builtin mechanism with the forms in which it appends an antiforgery token and on the post you validate that that token is still valid and the security has not been tampered so we get that builtin security so we'll use that in all of the post action methods now here you will receive the object that you have to add to the database adding to database is simple you need to access the db context db on category you have the add method provided by entity framework core on there you can see it expects a category entity so we'll pass the object and then at this step it will not add the category to database if you want to add it you have to call save changes and then it makes the database call on line 41 once it adds the category what we want to do we can just go back to this index and display all the categories so rather than returning back to a view we want to return redirect to an action method and what action method do we want to redirect to we want to redirect to this index action since it is in the same controller we do not have to define the controller name here let's give this a try and see how things look let's go back and add a debugger right here and let's go to category add a new category we'll try to add this we hit our debugging point and inside the object here you see we have the display order as well as name which is valid how did it automatically bind this and passed it here the reason is if you go to the create you used tag helpers for input since we used asp4 it automatically knew that whatever was being entered in this text box it has to bind that to the name property of the model which is category and on the post it passes that to our controller right here so if you do f10 you execute the add statement if you go back to the database and you execute here it has not been executed if you run the save changes and if you go back now you'll see three records so you can see it actually executes on save changes let's hit continue and now we see the three categories great so with this you can see that how we can create a new category and we implemented the post action method for create everything looks good right now but what if we want some validations let's take a look at that in the next video before we move on to validations let's practice what we have learned so far with an assignment in this assignment i want you to create an application type model in that model we will have two properties id and name we created the category model with more properties so this should be somewhat similar to that once you create the model then you have to push that model to the database so that a table can be created for that model once you are able to successfully create the table inside the database then you should work on creating an application type controller so the name of the controller should be application type and in there you have to implement the index and create functionality that we did with controllers so far so it is exactly following the steps that we did but for a different model so good luck with the assignment and this will give you practice to understand what we have been implementing so far now in this video let's work on the solution for the assignment i hope you were able to do all the three points that were here let's start with the first one in which we have to create the model for application type and push that to the database we'll switch back to the application and in here we'll close everything that we have close all tabs let's go to solution explorer and we have our models right here we can copy the category model and paste it one more time here and we'll change the name to application type we will copy the name and we'll paste it here now we need properties inside the application type which is id and name we do not want the display order you can remove the key data annotation if you want but i'll just leave it here once you add the model you need to add this to database so for that what you have to do is you need to go to data application db context and we need to create a db set for application type we will call this application type and we won't use the plural notation once you save this you have to add the migration so tools nuget package manager we'll go to the console and here let me clear this and we'll add a new migration we'll call this at application type to database great so migration has been added and right here if you see it is adding the two columns id and name and it has a primary key on the id column this looks good let's update the database i'll increase the size here there we go and perfect database has been updated let's go to sql server to validate them we'll refresh here and we have the application type if we expand this we have two columns so perfect our first task from the assignment has been completed in which we had to create the application type model and we had to push that to the database next thing that we have to do is we need to create the application type controller so let's switch back again and we have the controllers i can just copy the category controller and paste it one more time i'll change the name to application type now i hope you did not do the copy and paste and you created from scratch i do not want to spend time there so i'll just make the changes we'll change the names here we need application db context right here this will be of application type and this will be application type as well we'll retrieve the application type object and we'll add that right here sweet so here it will be application type and that looks good final thing that you have to do is you need to add the views as well so what we can do is we'll just go here and we have the views which is category we can just copy this and paste this one more time we'll change the name to application type whoops we have a spreading mistake there there we go and we'll change the create the model will be application type in there we do not need display order we'll remove that everything else looks good in the index we do not need the display order and we do not need the controller only the action name is sufficient and this will be application type great we'll just have the name here and we do not need display order great now let's give this a test we'll go to solution explorer inside layout we need to add another link for application type here so we'll call this application type controller and perfect let's run our application and take a look at if we are able to create any new application type on the nav bar we have application type now we run into an editor here and i think that's in the application type controller we are passing application type list in the index we have category you can see the class is application type so this will be application type as well so you can see if the model here is different then what you pass from the controller you will get an error message then we'll hit the refresh button and this should load perfect we have the category list here so we'll change that to application type list great let's create a new application here also we have the category so inside create for application type we'll change the heading to add application type and refresh let's try to add a new application and great it's working as expected so that was the quick assignment that we did next thing we'll be working again on the category but before we work on the edit or delete functionality for category i want to show you validations that we have to implement in category so let's take a look at that in the next video now in the last video we had some practice with application type let's switch back our focus to category and in here let's add some validation we want a validation that name should be a required field and display order should be greater than zero how do we actually implement those validation now you can always use custom javascript to check what was entered and display alert message but with asp.net cool you get validations right out of the box in order to implement validations we again have data annotations in order to check that out let's switch back to the application and we did not have to rerun it let me stop that what we will do is we'll open up the category model we'll close everything else and we'll open up the category model here we have attributes like key display name similarly we have requirements for validation so on name we just add a required attribute before that property then the display order will make sure that this is required as well and with display order we want it to be greater than zero for that we have range with range you have to define the minimum which is one and what is the maximum so we can just say int dot max value could be the maximum and then for the third property here you can define an error message default editor message if you don't like it you can always provide a custom error message so here we can just display display order for category must be greater than zero once you add this how do you actually implement these validations inside your view let's take a look at that by going to our view so for category we have to create view here we have tag helpers for validation as well what we need to do is on the top here we first need a div and we'll use asp validation summary it has multiple properties all model only and none let's keep it to model only for now and we'll add a class of text danger to display it in red that being said where we have the individual properties in those places let's add a span and in there we have another tag helper asp validation for in this pen we will display if any error messages are for the name property so in here we'll define name here and we'll give it a class of text danger we will copy this and we'll do the same for display order so let me add that here once you do this and if you run the application you won't see the change because you are not right now validating it now validations you can do it on server side or on the client side let me show you first how to do the validations on the server side so server side we have the controller for category so we'll open up the category controller and before we actually add a category we want to validate we already have the validations inside the category model so asp.net core has a method here which is model state dot is valid this actually checks if all of the rules that you have defined in your model are those valid if those are valid only then it will go inside the if condition so only if it is valid we'll paste it to add the new category and return to the index if it is not valid we just want to return back to the view so that we can display the error message now when we return back to the view we can pass the object right here so that we can have those values let's see this in action so let's run the application and let me add a debugger and let me add a debugger once we do that let's continue in the next video now that we have added the debugger let me switch back to the application and let's go to category this time if we try to create a new category and hit it with the empty record you see it goes back and it hits our breakpoint here we have to debug the model state so if we go on model state let's first examine that is valid you can see it's false now what properties are invalid so if you hover on model state expand this go to result view you see both the properties and both of the validations are invalid so if it's invalid you'll continue it will return back to the view and it displays the error message okay so that looks good let's say we add some value here and the display order will make it zero display order if you remember we have validation that it should be greater than zero if you hit create again that is valid is still false this time if you examine what properties are not valid it's only display order the name is now valid so you can see how validations are working and now you see your custom error message that we implemented so with this we saw server side validation if you change this to something valid now and if you try to create it should be successful you can see it was created and we have the same test with display order too now we have the server side validations but what if we want to do the validations on client side to avoid a round trip implementing those is simple as well you will just go back to your create and right here at the end we will add a section for scripts here you can add any of the javascript if you take a look at the solution inside the shared we have validation scripts partial we need to use this inside the section here and it will do the clientside validations automatically so here we will use the tag helper in which we have partial we'll give it a name of underscore validation scripts partial make sure that the name is exactly as you see right here with that in place if you save this and if you refresh the application if you try to hit the create button you see the error message directly here without making a round trip if you go back we still have our debugger in model state that is valid but it doesn't even hit there and it displays the error message as soon as you change it so it's not hitting our server and the validations are being done on client side now so with this we have seen how we can implement clientside validations and server side validations i want to show you one more thing if you switch back to the create in the validation summary we have model only if we make it all and if we go back and refresh the page let's try to hit the create button now you see two things where we have the validation summary it displays all of the error message and then in the model it displays the corresponding so if you have model only in that place it was only displaying the error message where you have the asp validation for so those are the two things that i wanted to show you with all and model only so we'll save it and we'll just use model only even if you comment this line out and if you go back and hit create it still acts the same but i wanted to point out the changes so i added the validation summary but in future just validation for will be sufficient and for clientside we need to include validation scripts partial so that being said we have completed the validations for category now we need to add two more buttons here first button will be to edit a category and the next one will be to delete a category so let me switch back to the application stop it here and we'll go to the category index right here if we scroll down here where we have the td that is empty here we will be adding buttons so we can just add a class of text center here and we'll give a div give it a class of w 75 percent and we'll make it button group we can also add a role of group here and i want to add to anchor tag we have an anchor tag on the top so we can just copy this and paste it right here two times first one here will be for edit and the later one is for deleting a category now we need action names for edit and delete so we'll call them edit as well as delete we have not added these actions but we will do that in a while so we have ptn primary and for delete we'll make it danger to give it a red color now think about whenever we have to edit or delete a category what is one thing that we will need the one thing that will need is the category id that user wants to delete so how will we pass that id when this link will be clicked asp.net core also has a tag helper for that which is asb route hyphen and then you need to pass the id or the name that you want to give to that parameter we will just call it id and here we need to pass the id that we want to retrieve in the action method so that we can access using this obj so we'll pass obj dot we should see all of the properties and we want to pass the id of the category here so we'll copy this and we'll paste it in edit as well with that in place let's run our application and make sure the buttons are displaying we do not have the action so if you click it will just give us an added message so right here we go to category and we have the edit and delete i also want to add some margin here so where we have the classes right here i'll do margin x2 okay and this looks much better so now if you hover on the edit you can see the id is appended in the url and also if you go on delete you will see the same things if you click we have the url but we do not have that page or action method so let's add those action methods in the next video in this video we want to work on category controller and we want to add the edit and delete action now in edit and delete both of them we are passing the id so if we go to category controller we can copy the get for create and paste it right here we'll call it get for edit and we'll call this as edit as well in here we will be receiving an id because that is what we are passing from the asp route id right here so we'll receive an id and based on that id we need to retrieve that category from the database and we need to display that to the user so here we will first check if id is equal equal to now let's make it a nullable field or we can say if id is equal equal to zero if it is any one of these scenarios we will just return back not found because that is invalid if that is not the case we want to retrieve the category from the database now we will be using the db context in there we have category this will retrieve all of the categories but we just want the one category where id matches the id that we receive in the parameter so for that ef code provides a find method in which you need to pass the id here the find method works only on primary key so if you pass the primary key of category it will go through that column and pick a record whose primary key matches what we pass here which is the id after we get that we can check here if object is null this means record was not found and we can return back not found again if it finds the record let's pass the record to the view so that we can display it so this looks good let me add the view we'll go with the razer view and let's add this edit will look exactly similar to what we have for create but the only difference is values will be populated let's go to the create for category copy everything close this and paste it right here rather than action which is create we can just remove this from form the reason i was able to remove that is we are in edit and the post action is also the same name as edit so in that case it is an optional field if it was something else then you should define what action it should post to since it is same we can remove that we did not need the validation summary rather than add we will display edit category here we'll scroll down in the value create we will just display update with that in place let's run this application and give edit a try so we'll go to category we should have two buttons edit and delete let's click on edit great you can see the name as well as display order was populated by default so next thing that we want to do is when we hit this update these values should be updated in the database let's work on that in the next video now we need to implement the update functionality so we'll close the application here and we'll go to category controller we can copy the post action method for create and paste it for edit we'll call this edit and the object that it should receive should be category and we just need to change the name here to edit then when we are adding a category rather than add we should add the update here and then we'll save the changes redirect back and everything looks good now this will work for category but if you have complex object where within category you have other objects and everything here you will face an error the reason is if you go back to your edit right here we are using name and display order so when we'll be posting we'll be getting those two values but what about the id we have not used it anywhere here because of which the id will be zero so what is recommended is right here we'll have an input field we'll use asp4 which is the id and then we'll have it in a hidden field that way when we post the form in the object we have the id as well the update will only work if there is an id associated because based on that it finds out which entity or which category it has to update in the database that being said let's run this application and give that a try so if we go to category and if we try to edit the test with display order one two five five five update great you can see it has been updated successfully also in edit if you remove this and hit update we get the error message and everything is working as expected last thing that is remaining is the delete functionality let's take a look at that in the next video now what we want to work on is the delete functionality so the delete page will look somewhat similar to edit page the difference is these things will not be editable at all and will have a delete button so let's go back to our application and we can copy the edit we'll paste it for delete in delete as well we are getting the id that user wants to delete so we'll call this delete and this will be delete as well now with delete we do not want the complete object all we care about is the id so we are just getting the id and that should do the trick but when we do that we get some other error message with the delete the reason is we have two methods here with the same parameters previously we had the category object so this was fine how do we fix this we can change the name to something like delete confirmed or delete host but in the view we want the name as delete and that will take care of this error that being said rather than update we will have to use the remove method on there but we need the object so we can retrieve that object using this method here we'll paste it here and we'll find it based on the id pass it to remove save the changes redirect back to action this looks good for the delete post and delete cat will be exactly same as edit get because we need to retrieve the category and pass it to the view now with delete we don't care about the model state because there won't be validation the only check if you want to add is the object if this is null then we do not have anything to delete and we'll just return not found else we'll just remove the entity that we found and redirect back to the index action so this looks good next we need to add the view so inside category we can copy the edit and paste it one more time we'll call this delete and the model will be same rather than edit category this will be delete category then we want to display the name but we do not need any validations and we'll make them disabled so the user cannot edit them with the button we'll call this as delete and the class will be danger to display a red color perfect so everything looks good let's run this and give this a try once we know the basic foundations of one crud operations now you will see the pattern and everything will start to make much more sense when we go to category let's try to delete as soon as you try to hit the delete button nothing happens what is the reason the reason is simple right here if we go to the controller the name is delete post so what you can do is we'll copy this and we can go to the delete.cs.html in the form method we can write the asp action and we can say delete post since it is not the same name as delete you do that you refresh the application and you hit the delete button it works now so you can see one workaround when the action name is not same you can explicitly specify what action should be called on the post action method for this form so with this we have completed the crud operations on category now that we have completed the grud operations on category i want to add font awesome in my website so we'll go to font awesome here here we have the font awesome let's go there and let's hit on the start and we'll get started here we'll hit the download and the download begins once it finishes we'll open this up and extract it so i'll extract this and we'll close it here we'll go to our snippets folder because that is where i extracted and we have the font awesome right here what i will do is i will copy everything that we have here and we'll switch back to our solution we'll right click on ww root folder and open in folder explorer here what i will do is i'll add a new folder for font awesome and i paste everything that we copied great so we have copied everything here how do we use font awesome now using that is simple we'll just go back and we have to add that in underscore layout we have the css here we'll add a link rel of stylesheet and we'll add an href up will point to the css here the intellisense is not working let me stop the application and we will add that path so right here inside ww root we have font awesome css and all dot css let me pin this with that in place font awesome is added to our website now how do we use the icons let's run the application and see we don't see any error message and next thing we'll start using the icons we'll go to category and let me add a plus sign right here with the create new category so we'll go to the index and let me go to font awesome again and we'll search for plus sign you go here and you'll copy this will go back in the index where we have create we'll paste it and we'll add a space we'll save that go back and refresh not this there we go this should add a plus sign right here great you can see font awesome is working let me add icons for edit and delete so if we go here and if we search for edit we have the first icon i'll just use that copy it go back to the application we'll paste it here and then we'll do the delete icon copy this and just paste it right here next i won't go back i'll just use the sign out icon for that we'll copy this and we'll go back to edit we have the back right here we'll paste it i'll do the same in delete as well and we have to create so let me go to the views we have to create and we'll scroll down let's go back to the application and see if everything now looks good great we have edit and delete and then if we go on create new we have the back icon and perfect everything looks good now here rather than displaying edit delete and everything i'll just have the icon and i'll remove the text this is selfexplanatory so we'll leave it at that so with this we have completed adding font awesome to our project and all the crud operations with the category is working next it's time to replicate the pending things that we have for application type in the next assignment things are moving along great and we are making good progress next thing for our assignment is we need to add the required validation for the application type name and we want to do that on both client side and server side along with that we need to perform edit and delete functionality with application type this is exactly what we did with category so you should not face any issue so good luck with the assignment and in the next video i'll do the same to provide the solution so we need to do two functionalities first we need to add the validation so let me switch back and we need to work with application type model so right here we need to add the required and that will take care of making it a required property once you make this change then we need to add the validation summary so we'll close everything that we have here we'll save this and close it as well now we need to open up the category for create and we have the validation for we can just copy this we'll go back inside our application type we have create we'll paste it right after the input tag if you open up the create here and if you just copy everything that you see here and we'll just paste it we'll make sure this is for application type right here changing things will be much simple we just need application type add application type name looks good we do not want the display order and buttons looks good yep so everything is looking good right here next thing is we want to also modify the index for application type so we can just copy things that we have inside this td we'll go back here and we'll paste it right here the controller name you can either change this to application type or you can remove it because it is within the same controller once you do that changes inside the index it's time to go to the controller for application type and category here we will be dealing with only create but in future we have to perform edit and delete as well so why not just copy everything that we have in category controller we'll copy this paste it inside the application type controller right here we'll scroll up we'll copy the name application type controller and we'll just delete this we'll paste it here there we go and we'll change to application type we can change things one by one but rather than doing that i would prefer doing the bulk change there we go so what we did is we updated everything that we did for category with application type if we build our project we shouldn't see any error message now we have also added model state inside the post so let's give that a try one last thing we'll close the index in the create is if we go to the create for category and application type we have the validation scripts partial for the clientside validation so let's give that a try and see if our validations are working an application type will create and create it's working if we try to edit this the edit view was not found so let's add edit view and delete view and we'll add a plus sign on the index so we go to the index of category we have the plus sign here we'll copy that and we'll paste that in the index for application type next we want to edit and delete we can copy these paste it inside the application type and we'll modify them first thing will be the model which is application type and we do not want the display order i believe that's all that we had to change the action name is delete post and we have the delete post and application type yep we double check that next we have the edit so we'll change that to application type edit application type and we do not need the display order this looks good in delete we'll change it to delete application type let's run our application and with this everything should be done for our assignment now again i have been copying and pasting everything but i hope you do these things from scratch so that you get more exposure to what we just did let's try to edit this and that's working if we delete great everything is working as expected all the grud operations are working now with all the validations if you are interested in the full course you can view the details on dotnetmastery.com but i do not like to leave things at this i want to show you one important step in any web application which is deployment right now our application is a basic grud web application but still we can deploy our application so in order to do that we'll have to go to azure portal here you can sign up for your account you can get a free account for 12 months i already have my account so i will log in and rather than sign up it will show me i already have an existing subscription so i'll log in there and we are on our portal you can see i have 200 dollars of remaining credit that you get when you sign up for the first time in here whenever you have to deploy anything you create a resource group then in that resource group we will have to create an app service to host our website and we will need a database to actually insert all of the data we can do everything in the portal or we can switch back to visual studio and in here if we go on rocky let's right click here and we will select publish that will show us all the options that we have to configure we will select azure here we'll select the windows service then you have to make sure you sign in to your account if you are not signed in so in here we will be creating a new azure app service i'll call the application name as rocky crud and i already have an azure subscription which is the free subscription then we have to select the resource group if you are here for the first time you will just have to create a new resource group and you'll have to provide a name i already have a group so i will use that after that we need to select the hosting plan we can create a new hosting plan here and i'll call this rocky crud plan for size i will use the free one we will create this and that will configure in the existing resource group for my case it will create a new hosting plan for our crud application we'll wait for it to get done once it completes in here you see deployment slots we are not working with slots but in production application if you have multiple feature sites you can use deployment slots here let's click finish and once you do that it will show you some of the service dependencies like it says sql server database so we will configure the sql server database right here we will select the azure sql database and we'll create a new sql database i'll call the name as rocky quad db and we can select any of the existing server or i can always create a new server will keep the default location and for the admin username you cannot use admin so i'll use admin user and password i'm gonna use admin one 123 star with a capital a so we'll use that and we will create a new sql database so with database we had to create a database server and then we had to create the database resource group can be common for both of the database as well as app service so great this looks good let's hit next here and we need to configure the connection string name how do we want to save the connection string we will go with the none option i do not want to configure these things we already know the username is admin user and password is admin 123 star once you do that we have the complete connection string right here so make sure you copy this we will hit the finish button that will configure the dependencies and will hit the close once it is done so you can see sql server has been configured next we will edit the deployment mode here and we need to change the connection string if you expand the database here you see the connection string we will remove this and we will paste the connection string that we copied we'll select the checkbox to use this connection string at runtime on top of that with entity framework core migrations if you scroll down we will paste our connection string here again and we will say apply migrations on publish that way if there are any pending migrations they will be applied right now the.net 5 is in preview version so we will have to change the deployment mode from framework dependent to selfcontained if you do not make that change your application will not work once we make all of these changes let's hit the publish we have the site url right here so once it publishes it will automatically open up this url and we will see how things look in azure great so you can see application has been deployed and you see the url that is on azure if you go on category and in here we can create a new category let me try to create one category with display order and great you can see it works all the migrations were applied automatically and we did not have to do anything so with that the free course comes to an end but there is much more to learn when it comes to asp.net core mvc i have full course which is divided in two parts on dotnetmastery.com in the first part we will cover more topics on displaying all the products and placing inquiry then in the second part we will focus more on architecture of our application and we will build the complete order management in our website you can find all the details on dotnetmastery.com so good luck and i hope to see you guys in the detailed courses
