With timestamps:

00:05 - hey this is steve with davilab welcome
00:07 - to the course i'll be your instructor
00:09 - and the guy responding to any comments
00:11 - or questions that you might have as you
00:13 - work your way through the lessons
00:15 - the goal of this course is to give you a
00:16 - solid introduction to building skills
00:18 - for amazon alexa and to do that in a way
00:20 - that makes sense even if you've never
00:23 - written a line of code before in your
00:24 - life
00:26 - so there is absolutely no prior
00:29 - programming experience necessary however
00:32 - to make the best use of our time i will
00:34 - assume that you're familiar with what
00:36 - alexa is from a user's perspective and
00:38 - that you have just some basic computer
00:41 - skills
00:42 - the course is broken down into a
00:44 - collection of short videos most of them
00:46 - are under 10 minutes but a few are a bit
00:49 - longer
00:50 - also for some topics i'll be referencing
00:52 - related videos and resources that
00:54 - complement this course and for those
00:56 - i've included links in the course notes
00:59 - finally all of my demos are going to be
01:00 - done on a mac but if you're using
01:03 - windows or linux you should be able to
01:04 - follow along just fine
01:07 - okay i'm sure you're ready to get
01:09 - started so that's it for my introduction
01:11 - in the next video we'll take a look at
01:13 - how alexa works from a technical
01:15 - perspective and discuss what you'll need
01:17 - to get started as an alexa developer
01:27 - the jumping off point for getting
01:29 - started with alexa development is the
01:30 - alexa developer portal and it's located
01:32 - at developer.amazon.com
01:35 - alexa to get started you want to spend
01:38 - some time browsing through the public
01:39 - content there and what you'll quickly
01:41 - learn is that alexa is way more than
01:43 - just the brand and the brains behind the
01:45 - amazon echo alexa is also a service from
01:47 - amazon that makes it possible for
01:49 - anybody to extend alexa's capabilities
01:52 - or incorporate alexa into smart devices
01:55 - for developers the alexa service
01:58 - provides the alexa skills kit and the
02:00 - alexa voice service the skills kit lets
02:03 - you add new capabilities to make alexa
02:05 - smarter and these are called skills so
02:07 - if alexa doesn't do something now that
02:09 - you'd like her to do you can teach her
02:11 - how by creating a new skill
02:14 - the alexa voice service on the other
02:15 - hand is used for adding alexa to new
02:18 - devices or software so for example if
02:20 - you wanted to create an alexa enabled
02:22 - toaster you'd use the alexa voice
02:24 - service to do that our topic is building
02:27 - skills so we're going to talk more about
02:30 - the alexa skills kit
02:33 - the skills kit is a collection of
02:34 - resources to make it easy for developers
02:36 - to create skills for alexa skills kit
02:39 - includes documentation software
02:41 - development kits application programming
02:43 - interfaces and example code we'll be
02:46 - taking a look at all of these in more
02:47 - detail
02:49 - using the skills kit is free in fact in
02:51 - most cases you won't need to pay to
02:54 - publish
02:55 - build or host your skills and nothing
02:58 - that we're going to be doing in this
02:59 - course should cost you anything
03:02 - at a high level there are two things
03:03 - that you need to do to create skills you
03:05 - need to create a voice user interface
03:07 - for users to interact with your skill
03:09 - and you need to build a skill service
03:11 - that provides your skills functionality
03:14 - the first part is done through the alexa
03:16 - developer portal and doesn't require any
03:18 - coding but it does require an
03:20 - understanding of how alexa works from a
03:22 - technical perspective and we'll be
03:23 - covering that
03:24 - building a skill service is a bit more
03:26 - technical and does require some coding
03:28 - however even if you've never coded
03:30 - anything before in your life you can
03:32 - build a basic skill service using amazon
03:34 - web services fairly easily we'll talk
03:37 - more about building skills services in a
03:39 - minute but first let's take a closer
03:41 - look at the skill set up
03:44 - skill configuration settings and what's
03:47 - referred to as an interaction model tell
03:49 - the amazon alexa service about your
03:52 - skill and this lets the alexa service
03:54 - know how to recognize when users are
03:56 - requesting your skill and the
03:58 - functionality that it provides new
04:00 - skills are set up through the alexa
04:02 - developer portal at developer.amazon.com
04:06 - and when you set up a new skill you
04:08 - define how users enable and interact
04:10 - with it and how the alexa service will
04:12 - communicate with your skill service to
04:14 - provide your skills functionality
04:16 - the developer portal is also where you
04:18 - would submit your skill to be published
04:20 - in the skill store we'll talk more about
04:22 - the publishing process later on
04:25 - your skill service provides your skills
04:27 - functionality and this is code that
04:29 - you'll write to take action on and to
04:31 - respond to user requests
04:34 - amazon doesn't care how you create your
04:36 - skill service you can use any
04:38 - programming language and technology
04:40 - stack as long as it can properly
04:42 - communicate with the alexa service
04:44 - that said the easiest way and the
04:46 - recommended way to build a skill service
04:49 - is by using amazon web services or aws
04:53 - and that's what we'll be doing
04:56 - so to wrap up let me summarize how alexa
04:58 - works with a custom skill
05:01 - so first a user speaks to an echo or an
05:05 - alexa enabled device and the audio is
05:07 - streamed from the device to the amazon
05:09 - alexa service
05:12 - next the alexa service converts the
05:14 - voice stream to text and determines if
05:16 - the request is for a skill by looking at
05:19 - skill configuration information that the
05:21 - developer sets up in the alexa developer
05:24 - console
05:25 - if the request is for a skill the alexa
05:28 - service sends the request to a skill
05:30 - service that the developer created to
05:32 - provide the skills functionality the
05:34 - skill service takes action on the
05:37 - request and generates a response that is
05:40 - sent back to
05:41 - the alexa skill service through the
05:45 - alexa skills kit api
05:48 - from there the alexa service responds
05:51 - back to the user
05:53 - okay so that's it for our high level
05:56 - technical overview in the next video
05:57 - we're going to jump right in and create
06:00 - our first skill
06:03 - [Music]
06:09 - okay now we're going to jump in and
06:10 - we're going to start building a skill
06:12 - and we're going to take this process and
06:14 - break it into the the next couple of
06:16 - lessons to provide a high level overview
06:19 - of the process you can step through this
06:21 - as i'm going through it if you want to
06:23 - do that or you can just kind of watch
06:25 - the process to get a sense of what's
06:27 - going on we'll be building a custom
06:30 - skill later on but for this lesson in
06:33 - the next couple of lessons we'll be just
06:35 - walking through one of the skill
06:37 - examples or the example skills that
06:40 - amazon provides to just get familiar
06:42 - again with the setup process and kind of
06:45 - how everything is working
06:47 - like we talked about in the last lesson
06:49 - there are really two main parts that a
06:53 - developer needs to
06:55 - worry about when they're setting up a
06:58 - skill the first part is configuring the
07:01 - voice user interface and the
07:04 - other part is providing the the code or
07:07 - the functionality that is going to
07:09 - process and respond to requests that
07:11 - come in through that interface by users
07:14 - and
07:15 - the the first part of that creating the
07:18 - voice user interface is what we're going
07:20 - to take a look at in this lesson
07:22 - and then we'll um talk about
07:24 - the
07:25 - back end which is the skill service in
07:28 - the next lesson
07:30 - so the the starting point
07:32 - for setting up a skill is to go to
07:35 - developer.amazon.com
07:37 - and set up a an amazon developer account
07:41 - if you don't have one already in amazon
07:43 - developer account is free so you don't
07:45 - have to pay for anything you just sign
07:49 - up i'm not going to walk through the
07:50 - sign up process just because it's pretty
07:51 - straightforward
07:53 - the the only point i'll make on the
07:56 - developer account is that you probably
07:59 - if you have an amazon echo set up and
08:02 - you're
08:03 - you don't need to have an echo to do
08:04 - alexa development but if you have one
08:06 - you want to use the same email address
08:08 - with your amazon developer account that
08:10 - you used for the account that you set
08:12 - your echo up with and the reason that
08:14 - you want to do that is because if you're
08:15 - using the
08:17 - same email address or same amazon
08:19 - account for both your developer account
08:21 - and your echo then you'll be able to
08:23 - test your skills with your echo which is
08:26 - kind of cool even while they're in
08:27 - development you don't need to have an
08:28 - echo to do alexa development so if you
08:30 - don't have one no worries well
08:32 - there's a
08:33 - really nice
08:35 - test setup in here so you don't have to
08:36 - have a an amazon echo to do that but if
08:39 - you do
08:40 - then you want to use the same email
08:41 - address once you have signed up at
08:44 - developer.amazon.com
08:46 - go ahead and log in i'm already logged
08:48 - in and then you would go to your alexa
08:51 - consoles and then
08:53 - skills and this is going to bring you to
08:56 - your list of skills if you don't have
08:58 - any then you'll see something like this
09:00 - mine is empty right now
09:02 - and you're going to start by creating a
09:04 - skill
09:06 - and you're going to provide a skill name
09:07 - and we're going to call this one space
09:09 - facts
09:11 - and again this is uh
09:13 - this is an example skill that
09:16 - amazon provides and we're going to start
09:17 - with that to talk through what's going
09:19 - on so
09:20 - i'm going to enter the name and then
09:23 - select the the default language that the
09:25 - skills can use and in my case it's u.s
09:28 - english
09:29 - you also have support for
09:33 - different
09:34 - dialects of english australian canadian
09:37 - uh
09:40 - indian
09:41 - and uk english and then uh german
09:44 - japanese and french as well right now
09:47 - and then you choose next
09:50 - and you choose the model to add to your
09:53 - skill and this is like the the skill
09:54 - type and we're going to be working with
09:56 - a custom skill type right here which is
09:59 - the the most flexible of these skill
10:01 - types is where you're going to get the
10:02 - the most
10:03 - in terms of uh capabilities that you can
10:06 - uh provide as a developer these these
10:09 - other types uh provide sort of more
10:12 - specific functionality that's outside
10:14 - the scope of this course we're gonna be
10:15 - working with the custom skills so you
10:17 - want to select that and then
10:19 - choose create
10:21 - and this will bring you into the skill
10:23 - configuration area here and
10:26 - there's
10:28 - there's a lot going on in here we're
10:29 - going to talk through
10:30 - we're going to talk through all this it
10:31 - looks intimidating when you first get in
10:33 - here but it's really not that bad once
10:34 - you go through it
10:36 - at the at the high level what you're
10:38 - doing here is you're providing
10:39 - information that is going to be used to
10:42 - train the alexa
10:44 - service to recognize requests for your
10:47 - skill and for the functionality that
10:49 - your skill provides
10:50 - and that's all done through instructions
10:53 - that are provided in what's referred to
10:55 - as an interaction model
10:57 - and we'll we'll go through that in more
11:00 - detail a bit later but uh
11:03 - that's what's happening in this section
11:05 - here
11:05 - the other big part of what we're going
11:07 - to do when we're setting up the skill is
11:09 - tell the skill how it's going to
11:11 - communicate with the skill service which
11:13 - is the back end code that's actually
11:14 - going to provide the functionality we're
11:16 - not going to talk about that in this
11:18 - lesson we'll do that in the next lesson
11:19 - but that's done in this interface
11:21 - and then also
11:23 - from within here you
11:25 - are able to test your skill and we'll
11:26 - take a look at that after we get our
11:29 - skill fully set up
11:30 - and you can provide information to get
11:34 - your skills certified and launched in
11:36 - the alexa skills store here
11:38 - and then once your skill is live you can
11:41 - get metrics on its usage over here in
11:43 - the measure section
11:45 - so um we are going to set this up
11:50 - using a template like i said or some
11:53 - example code and we're going to get that
11:55 - code from github.com so if you go to
11:58 - github.com
12:00 - alexa
12:01 - you'll want to find the sample node
12:04 - fact
12:06 - skill here
12:07 - and
12:09 - in here if you go to models and then
12:12 - you're gonna pick the
12:14 - language that is the right language for
12:17 - your skill in my case it's this english
12:19 - us
12:21 - and then i'm gonna just copy this
12:25 - so just
12:26 - copy
12:28 - and then we're going to go back over
12:29 - here and
12:31 - we're going to just paste it in here so
12:33 - i'm at the json editor
12:36 - and i'm just pasting that in so um this
12:39 - is going to create the interaction model
12:42 - we'll talk about this in a lot more
12:44 - detail later in the course but for right
12:46 - now we're just going over the high level
12:48 - steps but the interaction model
12:50 - is
12:51 - what's used to train the alexa service
12:54 - the machine learning for the alexa
12:56 - service on how to recognize when your
12:59 - skill is uh being requested which is
13:03 - done through this here the invocation
13:04 - name space facts which we could also set
13:07 - through the graphical user interface
13:09 - here so anything that's done in the
13:11 - graphical interface is really just
13:16 - editing or changing this this json here
13:19 - that you can also see in the json editor
13:22 - and
13:23 - the
13:24 - the the intents and
13:27 - which are what the functionality your
13:28 - skill provides and then how that
13:31 - functionality is um is
13:33 - is gonna be asked for by the user so
13:35 - utterances or samples here and again
13:37 - we'll go over this in in more detail but
13:40 - at this point
13:42 - once we've got our uh our model in there
13:45 - and saved
13:46 - we can
13:47 - build the model
13:48 - and building the model is uh what
13:52 - trains the
13:54 - machine learning that's part of
13:56 - alexa and so depending on how complex
13:58 - the model is this can take a little
13:59 - while so at this point we've got our
14:02 - basic skill set up and the model
14:04 - building and the next thing that we're
14:06 - going to need to do is
14:08 - tell the skill how it's going to
14:10 - communicate with our skill service and
14:12 - we're going to do that in the next
14:14 - lesson
14:15 - [Music]
14:22 - now that we have our skill set up the
14:23 - next thing that we need to do is we need
14:25 - to configure the endpoint and the
14:28 - endpoint is going to
14:30 - tell the skill
14:32 - how to or the amazon service uh how to
14:36 - contact and communicate with
14:38 - the code or the service that we're going
14:40 - to be creating to handle the requests
14:42 - that come in from users and so
14:46 - at a high level again
14:47 - what's happening
14:49 - the flow if you recall from the uh the
14:53 - technical overview
14:54 - a user speaks to an alexa enabled device
14:57 - the device forwards the audio stream to
15:00 - the alexa service the alexa service
15:04 - takes that audio stream and converts it
15:06 - to text and then determines
15:08 - based on the interaction model what the
15:10 - user is requesting or the machine
15:13 - learning uh
15:14 - determines what the user is requesting
15:17 - and then if the request is for a skill
15:20 - the request is sent from the
15:23 - alexa service to a skill service and the
15:26 - skill service is code that we're going
15:29 - to create as developers
15:31 - to process the requests that come from
15:33 - the alexa service and in turn respond
15:35 - back to the alexa service with
15:37 - instructions or responses for how the
15:40 - alexa service should respond back to the
15:42 - user the important point here is just to
15:44 - to know that everything is going through
15:46 - the alexa service so uh the
15:50 - requests coming in from the user are
15:51 - going first through the alexa service
15:53 - from the alexa service to our skill
15:54 - service and then from our skill service
15:56 - back to the alexa service and back to
15:58 - the user
15:59 - the skill service can be hosted by
16:03 - really any
16:05 - any web server that can uh
16:08 - consume or or understand the requests
16:11 - that are coming in and they're they're
16:12 - just json requests if you're not
16:15 - familiar with json uh it is the it's an
16:18 - acronym that stands for javascript
16:19 - object notation uh this is json actually
16:23 - so it's um it's a text format and it is
16:28 - structured in a way that makes it easy
16:30 - for computers to work with and because
16:32 - it's text humans can see what's going on
16:35 - also but basically
16:37 - a message in this format goes back and
16:40 - forth between the alexa service and the
16:42 - the skill service and so the end point
16:44 - here is configuring where the alexa
16:47 - service is going to send those messages
16:49 - and where the alexa service is going to
16:51 - get responses back from those messages
16:54 - and in our example we're going to use
16:57 - a service that's provided by amazon web
16:59 - services called lambda aws lambda and so
17:03 - we're going to select lambda here and
17:05 - then the um
17:07 - aws amazon web services this is actually
17:10 - different from the developer the amazon
17:13 - developer console so you're going to
17:14 - need two different accounts you'll need
17:16 - one for
17:17 - the amazon developer council which we
17:20 - set up already the amazon developer
17:21 - account and then another
17:23 - for our web services account uh amazon
17:26 - web services account and this one is
17:28 - when you sign up you will be prompted
17:30 - for a credit card but there is a free
17:32 - tier
17:34 - so even though you've got a provided
17:35 - credit card nothing that we're doing in
17:36 - this course is going to cost you
17:37 - anything again we're using this lambda
17:40 - service here which provides a million
17:42 - free requests per month which is way
17:44 - more than you're going to need for this
17:45 - course so no no worries about that but
17:48 - you will need to provide a credit card
17:50 - so i thought i'd mention that i'm not
17:51 - going to walk through the sign up
17:52 - process here either because it's pretty
17:54 - straightforward but once you have an
17:55 - account
17:58 - you would just go ahead and sign in
18:04 - and you would go to
18:05 - the uh lambda
18:08 - service so if you just search for it
18:10 - here it'll remember down there
18:13 - and the lambda service allows you to run
18:16 - code without setting up servers and
18:17 - managing servers and all of that stuff
18:19 - so it's really great and uh simple to
18:22 - use for the most part let you just focus
18:24 - on your code and not all of the
18:27 - infrastructure
18:28 - stuff that is
18:31 - not
18:33 - not
18:34 - the main thing when it comes to uh
18:36 - writing code and creating services
18:39 - the um
18:41 - let's just jump in here and go through
18:43 - it so
18:44 - the uh the the service
18:46 - when you go in to create uh a lambda
18:49 - function you're going to create the code
18:51 - you've got a couple of different options
18:52 - here you can author a function from
18:55 - scratch and
18:56 - we'll take a look at doing that later in
18:58 - the the course
18:59 - but you can also use blueprints or this
19:02 - serverless application repository and
19:05 - these are
19:06 - uh like
19:07 - templates for setting up
19:11 - back-end services that are
19:14 - hosted in amazon web services
19:16 - and that's what we're going to use for
19:18 - our example here so if you select the
19:20 - serverless application repository and
19:22 - then just
19:24 - filter by alexa
19:27 - and
19:28 - the um let's see
19:31 - skills
19:32 - how to we are looking for the facts
19:35 - skills this one right here so the alexa
19:38 - skills kit node.js fax skill
19:41 - and this is the one that provides a a
19:44 - a random fact which is
19:47 - uh the the back end to what we grabbed
19:50 - from github in the last lesson
19:53 - so we're going to go ahead and
19:56 - select that and you can
19:59 - leave the defaults here
20:01 - and then just choose deploy
20:07 - and
20:10 - once it's deployed i'll show you what we
20:13 - what we get here
20:17 - it is still deploying loading our
20:19 - resources
20:27 - and
20:29 - there we go
20:31 - all right
20:32 - so
20:34 - now we can go over to
20:37 - the skill that was created
20:39 - uh the lambda function rather that was
20:41 - created
20:42 - and if we click on the lambda function
20:44 - we can see the code that was provided as
20:48 - a part of that template here
20:50 - so this is
20:53 - javascript the programming language here
20:56 - node.js and when you create lambda
20:59 - functions you actually have the option
21:00 - of using a variety of different
21:02 - programming languages c sharp go java
21:05 - python and node.js which is a runtime
21:09 - environment for javascript which is what
21:12 - we're using here and so we'll uh we'll
21:15 - talk more about the
21:17 - the code a little bit later on but you
21:19 - can just browse this and see um kind of
21:23 - what what
21:24 - what's happening this one again is a an
21:27 - example that's going to give a
21:29 - a random space fact so one of the facts
21:32 - is a year on mercury is just 88 days
21:34 - long
21:35 - to make this work
21:38 - this is this is important here this
21:40 - trigger so the alexa skills kit
21:43 - the
21:44 - alexa service is not available in all
21:47 - regions so if for whatever reason you
21:50 - run into issues here or you don't see
21:53 - the trigger added you want to go up here
21:56 - and you want to make sure that you're in
21:58 - the
21:59 - well it doesn't need to be the u.s east
22:01 - region the u.s east region does support
22:03 - the alexa skills kit for sure
22:05 - not all of them do a lot of them do
22:08 - but if you have any question and you
22:10 - just want to get to a region that
22:12 - supports skills kit for
22:14 - going through these steps you can just
22:15 - select us east because i know that one
22:16 - does
22:18 - and then
22:19 - the alexa
22:20 - skills kit is going to
22:23 - um
22:26 - enable the
22:28 - alexa service to call this function
22:31 - and so
22:32 - we are going to
22:35 - now just need to configure our
22:39 - alexa skill so that it can access
22:43 - this
22:44 - back-end skill service and we're going
22:46 - to do that
22:47 - by copying this up here which is a
22:51 - unique identifier for this function
22:53 - that's called an arn or an amazon
22:55 - resource name so i'm just copying that
22:58 - and then i'm going back to
23:01 - my
23:02 - developer console so at
23:04 - developer.amazon.com and to the service
23:06 - endpoint
23:07 - and i am just
23:09 - going to paste that in that endpoint to
23:12 - that lambda function
23:13 - and
23:14 - if
23:17 - it's all in there i can
23:19 - just
23:20 - save here
23:25 - and
23:26 - it's saved so at this point i have a
23:28 - complete skill set up i've got the skill
23:32 - set up in the developer console i've got
23:34 - the interaction model
23:37 - in here that i
23:38 - copied and pasted from the example on
23:41 - github and then i saved the interaction
23:44 - model and i
23:46 - built it and the build process is what
23:48 - trains the alexa service to recognize
23:52 - a request for this skill which is named
23:56 - space facts
23:57 - and
23:58 - it will be
23:59 - invoked using that name also space facts
24:02 - and then we configured
24:05 - the skilled point to the skill service
24:09 - and so now we can
24:11 - go ahead and test
24:13 - and this is where we're going to
24:16 - leave off for this lesson and then the
24:18 - next lesson we'll look at testing and
24:21 - talk a little bit about the testing
24:23 - process
24:24 - [Music]
24:30 - once you've got your skill completely
24:31 - set up the next thing you want to do is
24:33 - start testing it and like i mentioned
24:35 - earlier if you have an amazon echo and
24:38 - you set up your developer account using
24:41 - the same email address that you set up
24:43 - with your echo you can start testing
24:45 - your skill using your echo by simply
24:49 - enabling the test right here so when you
24:51 - do this you're also enabling the skill
24:54 - under your account again
24:55 - if you're using the same account that
24:57 - you used when you
25:00 - set up your echo or the same email
25:02 - address
25:03 - and if you don't have an echo like i
25:05 - mentioned earlier you don't need one
25:06 - because this test simulator here
25:09 - provides everything that you need to
25:11 - test the skills so
25:13 - we can use
25:15 - this just like we would use in echo so
25:18 - we can say
25:20 - alexa open space facts
25:25 - here's your fact earth is the only
25:27 - planet not named after a god
25:30 - all right and that pulled the fact from
25:32 - the skill service that we set up and i
25:35 - can also test in here using i could
25:38 - submit my
25:40 - input using text also so like open space
25:43 - facts
25:45 - [Music]
25:48 - like this
25:50 - here's your fact the milky way galaxy
25:53 - will collide with the andromeda galaxy
25:55 - in about five billion years
25:57 - okay so my skills working right now i
25:59 - want to just point out a couple of
26:01 - things here um so this
26:05 - json input and json output here
26:08 - the input is the input that's going from
26:11 - the alexa service to your skill service
26:14 - in our case that lambda function that we
26:16 - just set up so the alexa service is
26:18 - generating this
26:19 - and sending this to the endpoint and
26:23 - then our skill service our lambda
26:24 - function
26:25 - is reading this taking this in and
26:28 - responding with this
26:30 - here the the json output
26:33 - and this is what's going back and forth
26:35 - between the alexa service and the skill
26:37 - service all the time there's a json
26:39 - message like i mentioned earlier and the
26:41 - skill service is reading that message
26:44 - and acting on whatever the message is
26:47 - saying that the user wants and sending a
26:49 - response back
26:51 - the um
26:53 - the the one
26:54 - point here i want to make is really
26:57 - about um when
26:59 - things don't go right when you're
27:00 - testing so
27:02 - uh
27:03 - let me um let me let me show you uh
27:06 - kind of a case where things aren't
27:08 - working so right now everything worked
27:11 - and we got a a response back that the
27:13 - alexa service could understand but if
27:15 - you're having problems you you might not
27:18 - get enough information over here to know
27:20 - what's going on so let's let's uh create
27:23 - a problem like that so i'm gonna go over
27:25 - to my um
27:27 - i'm gonna go over here to my lambda
27:29 - function and i'm gonna just modify this
27:33 - so that
27:34 - it generates an error that um
27:39 - that the alexa service will not know
27:41 - what to do with so let me change this to
27:46 - just making this change again just to to
27:49 - generate an error to illustrate a point
27:52 - so now when i go back over here and i uh
27:55 - test i'll say open space facts
28:01 - [Music]
28:07 - there was a problem with the requested
28:08 - skills response
28:10 - and so this time because my skill
28:13 - service didn't respond with something
28:15 - that the alexa service
28:17 - knew what to do with uh the alexa
28:19 - service is just telling me that there
28:22 - was a problem with the skill service but
28:23 - the alexa service doesn't know what the
28:26 - problem is all the alexa service knows
28:28 - is that it didn't get a message back
28:30 - that
28:31 - it knew what to do with and so i
28:34 - just get a generic error message which
28:36 - if you're getting that
28:38 - and you don't know how to go about
28:40 - figuring out what's going on can be
28:42 - pretty frustrating and so what we're
28:44 - going to want to do if something like
28:46 - that comes up and we're we're not
28:48 - getting into in this lesson
28:50 - deep into the code and debugging and all
28:52 - of that stuff but i want to touch on
28:54 - this because
28:55 - it's important we're going to need this
28:57 - as we start building our own custom
29:00 - skill but what we're going to want to do
29:02 - is we're going to want to simulate the
29:03 - request that's coming from the alexa
29:06 - service to the lambda function and use
29:09 - the debugging in
29:11 - lambda to try to figure out what's going
29:13 - on and to do that it's pretty simple you
29:15 - would just copy an example of the
29:17 - request that's coming from the alexa
29:19 - service which you can do by just copying
29:21 - the json input here
29:23 - and then you want to take that over to
29:25 - your lambda function and there's
29:26 - actually
29:27 - a test a way to test right in here so
29:31 - you can
29:32 - do this test here
29:33 - [Music]
29:34 - configure test event and i already
29:36 - configured this so i'm going to do it
29:37 - again just to show you
29:38 - you would just paste in give your test
29:40 - uh a name and i called the the this one
29:45 - launch request you can call it whatever
29:46 - you want
29:47 - and then uh you would just save it in
29:50 - there if um
29:52 - i didn't already have this button would
29:53 - allow me to save and then once you've
29:55 - saved your
29:57 - test
29:58 - you can submit the test and then when
30:00 - you submit the test you will
30:03 - see
30:04 - the error message here with a lot more
30:06 - details and actually you see it down
30:07 - here as well
30:09 - so
30:10 - you can use this information to
30:13 - debug what's going on
30:16 - and again this lesson is not about
30:18 - debugging as much as it is just
30:20 - generally how you would approach testing
30:22 - alexa skills so we'll come back to this
30:24 - as we
30:25 - start modifying code a little bit later
30:27 - on
30:28 - but
30:29 - we
30:30 - would go about debugging our
30:34 - skill service in the lambda
30:38 - manager in the aws council
30:40 - and
30:42 - we could from here figure out well we
30:44 - know what's wrong with this because we
30:46 - created the error but we could figure
30:48 - out more easily because we have
30:50 - information to uh to figure out what's
30:52 - going on
30:54 - and we can debug it there and then when
30:55 - we go back of course it would uh it
30:58 - would be fixed or we could retest it in
31:01 - here
31:02 - so
31:02 - that is a just a quick introduction to
31:06 - how you would go about testing we're
31:08 - gonna need this as we're developing our
31:11 - skill especially when things go wrong
31:14 - which um they they will from time to
31:16 - time as you're as you're building stuff
31:18 - so you want to know how to go about
31:20 - debugging it
31:21 - in the uh next lesson we will
31:24 - dive into the code a little bit and look
31:27 - at modifying the code and with this
31:29 - debugging lesson we can do that
31:31 - hopefully confidently because if
31:32 - something goes wrong we'll know how to
31:33 - fix it so we will jump in that
31:36 - next
31:43 - okay now that our skill is set up and we
31:46 - know how to go about testing we can take
31:49 - a look at the code and the
31:52 - make some changes to our skill service
31:53 - code
31:54 - so the code that we we have here again
31:57 - is just
31:59 - an example that's provided by amazon and
32:01 - the example is written in javascript
32:04 - because we're using node.js
32:07 - and we're not going to dive
32:10 - deep into this right now but i do want
32:12 - to point out a couple of things so when
32:14 - you're in the
32:16 - uh the lambda editor here there is a
32:19 - pretty nice code editor that you can use
32:21 - to edit this code and you can expand it
32:25 - and
32:26 - if you're working on more complex skills
32:29 - you you'll probably want to use a local
32:31 - code editor for but for what we're doing
32:33 - this is um this this is great and you
32:36 - can see
32:37 - all the code here make changes to the
32:38 - code here and the the files that are
32:42 - associated with the code in this um case
32:44 - here we've got because this is node.js
32:47 - uh we've got some node modules that are
32:50 - included and node modules are reusable
32:52 - code and the notable one here
32:55 - is the
32:56 - the ask sdk and the ask is the alexa
32:59 - skills kit sdk
33:01 - and it is a
33:03 - a module that makes working with the
33:05 - requests
33:06 - from the alexa service really simple so
33:08 - rather than having to write code to
33:12 - decipher what
33:14 - is in that json message that's coming
33:16 - over and to generate a json message
33:18 - going back the alexa skills kit sdk
33:22 - provides methods that make that really
33:24 - easy for us to do without writing a
33:25 - whole lot of code
33:27 - and um we'll we'll talk about that more
33:29 - in a later lesson but for right now um
33:31 - let's just look at making a uh
33:35 - a couple of simple changes in here and
33:38 - then i want to talk about the the
33:39 - relationship between the code and the uh
33:42 - the interaction model because that's uh
33:44 - that's pretty important
33:45 - so um for starters making a change that
33:48 - goes back to uh your user through the
33:51 - alexa service is just a matter of making
33:53 - a change to your skill service so
33:56 - in this case here um you know here's
33:58 - your fact if i just change this to
33:59 - here's your cool fact
34:01 - and save it um
34:05 - save up here
34:07 - now if i go over and
34:09 - test here and just say open space facts
34:12 - [Music]
34:17 - here's your cool fact despite being
34:19 - farther from the sun venus experiences
34:22 - higher temperatures than mercury
34:24 - so the change that i made is
34:26 - immediately
34:28 - available for the user so any changes
34:30 - that you make in your skill service the
34:33 - alexa service is
34:35 - going to use whatever the skill service
34:37 - sends back and provided that the the
34:40 - response is a format that it can use it
34:42 - will be good to go
34:44 - the the the part that is a little bit
34:47 - more involved is
34:49 - figuring out what the alexa service is
34:52 - sending over and mapping what the user
34:55 - wants
34:56 - to
34:57 - a
34:58 - a a code function that can handle it and
35:02 - that is done through the interaction
35:05 - model and so i'm gonna talk through
35:07 - what's going on in a little bit more
35:09 - detail in the interaction model and how
35:11 - that relates to the the code and then
35:13 - we'll um
35:15 - we'll in the next lesson we'll go
35:18 - through some examples of using that but
35:19 - first i just want to talk through it so
35:22 - the uh the interaction model like i
35:24 - explained earlier is um is it's
35:28 - basically instructions for training the
35:30 - machine learning that is behind alexa so
35:34 - that it can understand requests from a
35:36 - user that are requests for your skill
35:39 - and functionality that your skill
35:40 - provides
35:41 - so in the
35:42 - interaction model
35:45 - and i'm just looking at the the json
35:47 - editor here
35:48 - which you can create the entire
35:50 - interaction model just in
35:52 - uh code like through the json editor
35:55 - like this
35:56 - the um the the key
35:58 - pieces that you want to understand are
36:01 - the um first the invocation name and we
36:04 - set up the invocation name through the
36:06 - visual editor or actually well we copied
36:08 - and pasted this in but the invocation
36:10 - name is the name that the user is going
36:12 - to use to invoke or start the skill
36:14 - and then um in addition to starting the
36:17 - skill the skill will provide
36:18 - functionality and and functionality is
36:21 - referred to
36:23 - as as intense or
36:27 - requested functionality is identified
36:30 - and uh referenced as intense it's a
36:34 - better way to say it i think so um so an
36:36 - intent is
36:38 - what your skill can do and
36:41 - it maps to what the user wants and what
36:44 - the user wants or is requesting
36:47 - is derived from utterances the things
36:50 - that a user says
36:52 - and so we provide along with intents we
36:55 - provide
36:56 - samples of things that a user might say
37:00 - to uh
37:02 - tell alexa uh
37:05 - how to recognize when the user wants
37:08 - something specifically that our skill
37:10 - provides
37:11 - and there are two kinds of intents there
37:13 - are custom intents and that is what this
37:16 - get new fact intent is
37:18 - and then there's also
37:19 - built-in intents and built-in intents we
37:22 - can
37:23 - we can add some of them are required
37:25 - like these ones are required but
37:27 - built-in intents are our default
37:29 - functionality that is part of the the
37:32 - alexa service
37:34 - and so for example the ones that we're
37:36 - looking at here like the cancel intent
37:38 - uh recognizes when a user is um
37:42 - wanting to cancel a uh
37:44 - a session with a skill
37:47 - and help is pretty self-explanatory but
37:50 - um is going to recognize when a user is
37:52 - asking for help within a skill
37:55 - and so these built-in intents here are
37:58 - kind of ready to go you don't have to
37:59 - provide utterances for them in some
38:01 - cases you can extend
38:03 - their their capabilities uh with
38:05 - additional utterances but it depends on
38:07 - the
38:08 - the intent there's lots
38:10 - there's lots of different built-in
38:11 - intents in fact
38:13 - take a look at that real quick so um
38:16 - there is a library of lots of different
38:19 - intents from uh
38:21 - you know types of musics and artists and
38:24 - you know all kinds of things so alexa
38:26 - can
38:27 - recognize
38:29 - lots of
38:30 - different things that a user would say
38:33 - even without you having to train it how
38:35 - to do that
38:37 - and so
38:38 - the the next part of this though is
38:41 - is how
38:42 - the
38:43 - intent maps to functionality that's
38:46 - provided by the skill service
38:48 - so it at the the high level flow we've
38:50 - got a case where a user is going to open
38:54 - up a skill
38:56 - without providing any other information
38:58 - other than the fact that they want to
38:59 - open the skill and we did that in the
39:01 - test here when we said um
39:04 - open space facts
39:06 - and in that case there
39:08 - the message that was sent over was let's
39:11 - do that
39:14 - [Music]
39:20 - here's your cool fact jupiter has the
39:22 - shortest day of all the planets
39:25 - okay so in in this case here all we did
39:28 - was ask
39:30 - the alexa service to invoke the space
39:32 - facts skill
39:34 - in this next example
39:37 - [Music]
39:41 - i'm going to ask for a fact
39:45 - and this is
39:46 - here's your cool fact a year on mercury
39:49 - is just 88 days long so in the example
39:52 - of this skill it's it's it's pretty
39:53 - tough to see the difference because the
39:55 - response that we get back is the same we
39:56 - get a random fact no matter what we do
39:58 - but if you look at the request here so
40:01 - in the first case uh the
40:03 - request
40:04 - that
40:05 - came in
40:06 - to the skill service if you look at it
40:10 - is
40:11 - a launch request and this is how our
40:14 - skill service knows that this was a case
40:17 - where the user was just opening the the
40:19 - skill up and not doing anything else
40:22 - in this example here
40:25 - the request came in uh but i asked space
40:28 - facts for a fact
40:30 - and
40:31 - the alexa service recognized that in
40:33 - this case the request
40:36 - was for a specific intent
40:38 - and that intent was the intent called
40:40 - get new fact intent and the way that the
40:44 - alexa service was able to determine that
40:46 - this utterance
40:48 - was for this intent
40:51 - is because of the samples that were
40:54 - provided and so if we go back over here
41:00 - and look at our
41:03 - get fact intent you can see the the
41:05 - samples in here and so the uh the
41:07 - utterance the things that users say
41:11 - uh are going to provide the information
41:13 - that the alexa service needs to uh
41:16 - determine what it is that the user wants
41:19 - in a really simple case the utterance is
41:22 - just going to map to an intent
41:25 - and it will be enough information to
41:28 - tell the alexa service and our skill
41:31 - service to
41:32 - execute whatever code is going to handle
41:35 - that intent
41:36 - in some cases however intents need
41:39 - additional information from the user
41:41 - before they can be fulfilled so
41:44 - this
41:45 - get new fact intent isn't an example of
41:47 - one but let's say we
41:49 - had a skill where a user could order a
41:52 - pizza
41:53 - in that case um we would need to know
41:56 - the size of the pizza the toppings
41:58 - um
42:00 - the delivery information and the
42:03 - parameters uh size topping those things
42:06 - are referred to as slots
42:10 - so slots are
42:12 - parameter values that we need to fulfill
42:15 - intents that are extracted from uh an
42:19 - utterance and we'll get into this
42:21 - in uh in more detail later on so this is
42:24 - just kind of high level
42:26 - talking through the these pieces and so
42:29 - minimally you will have a a launch
42:32 - request where all the service knows is
42:35 - that the user is
42:37 - invoking your skill
42:39 - you can have a launch request that
42:41 - includes an utterance that would
42:44 - not just tell the alexa service that
42:46 - you're trying to launch
42:49 - a skill but it would also provide
42:51 - information to map the request to
42:54 - an intent
42:56 - and then in some cases you'll have
42:59 - intents that require additional
43:01 - information
43:02 - to be fulfilled and that is
43:06 - information that is
43:08 - held in parameters called slots
43:11 - and then
43:13 - the the other point on slots is you can
43:16 - provide slot information as part of an
43:19 - utterance
43:20 - and
43:21 - a launch
43:22 - so if i
43:24 - had an intent that was um
43:29 - to order a pizza
43:30 - i might say and let's
43:33 - pretend my
43:34 - invocation name is um
43:36 - you know pizza skill i could say alexa
43:40 - tell pizza skill i want to order a pizza
43:43 - and that might map to my order intent
43:47 - but my order intent might need to know
43:49 - what toppings i need so
43:51 - if i didn't provide any slot that
43:56 - would
43:57 - be filled for toppings
44:00 - the intent would respond with
44:02 - okay what kind of toppings would you
44:05 - like but the user might also say alexa
44:09 - asks pizza skill to order a pizza with
44:11 - pepperoni
44:13 - on it and in that case i'm getting an
44:15 - utterance that is not just mapping to
44:17 - the intent but also
44:20 - providing information to fill the slot
44:23 - and again we're going to come back to
44:24 - this because we're going to use it as an
44:25 - example so right now i just wanted to uh
44:28 - to to talk through it
44:29 - and
44:31 - that information
44:34 - slot
44:35 - being the the intent being uh
44:38 - uh
44:39 - requested and
44:40 - the slot information is all going to get
44:43 - passed as a part of the request
44:46 - and
44:48 - we're going to need to handle that as it
44:50 - comes into
44:52 - our skill service
44:53 - and the um
44:55 - the alexa sdk is going to help us do
44:57 - that we're going to go into that and
44:59 - walk through an example of creating
45:02 - an intent that has a slot and passing
45:06 - that slot information over to our skill
45:08 - service and responding in the next
45:10 - lesson
45:18 - so in the last lesson we talked about
45:20 - intents slots and utterances now let's
45:22 - take a look at actually using them in
45:25 - our skill service code and we're going
45:27 - to start with
45:29 - the interaction model so we're going to
45:30 - create a new intent in here and then
45:33 - we're going to wire it up so that we can
45:35 - respond to the intent in our skill
45:38 - service so i'm going to create a
45:40 - simple custom intent called the hello
45:43 - intent
45:48 - and
45:49 - i'm going to
45:51 - add some sample utterances i'm going to
45:53 - start with just high and hello
45:56 - so when a user says hi or hello i want
46:00 - this intent
46:02 - to be the intent that um responds
46:04 - so i'm gonna save that for right now
46:08 - and i'm gonna start this model building
46:10 - we're gonna come back and we're gonna
46:12 - test and just a minute here but while
46:15 - this is building let's take a look at
46:17 - our skill service code
46:19 - so
46:20 - i'm going to use this space facts skill
46:23 - that we've been working with and hack it
46:25 - up a little bit here but
46:26 - i can use this as a starting point
46:28 - because it has the alexa skills kit sdk
46:31 - and some sample code that we can work
46:33 - with
46:34 - so um
46:35 - what i'm going to do is i'm going to
46:37 - just copy and paste for starters i'm
46:40 - going to copy this
46:42 - handler that was set up to get a random
46:45 - fact and i'm going to change this
46:48 - change the name of it to the
46:50 - hello handler
46:52 - and the first part of this code what
46:54 - it's doing is it's taking in the
46:57 - json that is being sent over by the
46:59 - alexa service that's this handler input
47:03 - value here
47:04 - and then
47:06 - that
47:08 - is down in this next line here that is
47:12 - being used or a piece of that object
47:14 - is being used or an object from within
47:16 - that object the request object
47:19 - is being used here is this constant
47:22 - named request and we're going to keep
47:24 - that
47:26 - but this
47:27 - next
47:29 - piece here is saying
47:31 - to use
47:32 - this handler when the request type is a
47:37 - a launch request which we don't want to
47:38 - do we're already doing that down here
47:40 - for the get new fact and we'll leave
47:43 - that the way that it is for right now
47:45 - um
47:47 - but what we will change here uh is what
47:49 - happens when this
47:52 - intent is uh
47:54 - is requested by the user and so
47:57 - we're going to get rid of this stuff
47:58 - here because
48:01 - we don't need that anymore and we're
48:03 - going to change this
48:05 - for now we're just going to say hello
48:07 - like that
48:09 - and we're going to get rid of this also
48:11 - this is
48:15 - writing back a card in the alexa
48:17 - companion app and we don't need that for
48:19 - this example
48:20 - okay so now we've got a handler that is
48:23 - going to look at the
48:25 - input that's coming in from the alexa
48:28 - service and if the input
48:32 - request is an intent request
48:34 - and the intent name is oh not not get
48:38 - new fact we want to change this to
48:39 - something different we'll say
48:41 - we'll call it the hello intent because
48:43 - that's what we
48:46 - named it okay so
48:50 - this all looks right all we need to do
48:52 - now is
48:54 - come down to the bottom here
48:56 - where uh this section that says exports
48:58 - handler and then
49:00 - add request handlers and we need to add
49:02 - this new request handler that we created
49:04 - in here just like that
49:06 - and then we can save it and so now
49:09 - if um
49:13 - now if we look at the code and just step
49:15 - through it again what's going to happen
49:16 - when the request comes over is the this
49:19 - handler is going to look to see if the
49:22 - intent request is
49:26 - named hello
49:27 - intent and if it is then this
49:31 - is going to respond with just hello
49:32 - really simple right now so let's go back
49:34 - over here
49:35 - to our uh
49:38 - developer console and oops got logged
49:41 - out
49:43 - log back in
49:45 - and let's test this out so
49:48 - um
49:51 - tell space
49:53 - oops
49:58 - tell space facts hello
50:02 - hello
50:04 - so it worked so let's look at the input
50:07 - here so the json
50:10 - that was sent over to the skill service
50:12 - from the alexa service you can see here
50:15 - in the request section here
50:17 - the type of the request was an intent
50:19 - request and the intent name
50:23 - is hello intent
50:25 - and the interaction model is what
50:29 - was used to
50:31 - generate this we created the interaction
50:33 - model so that the alexa service could
50:36 - understand that when a user says hello
50:38 - that we want the hello intent to handle
50:42 - that
50:42 - and so when this gets sent over to
50:45 - our skill service over here our skill
50:47 - service code now is able to recognize
50:50 - that and respond back with hello so that
50:54 - is the um
50:57 - those are the steps for
50:58 - setting up the interaction model and
51:00 - then handling the request in the skill
51:02 - service now let's take a look at what we
51:05 - would do to pass a slot value over to
51:09 - our skill service
51:11 - and the um the steps pretty similar
51:14 - so we want to go back to our interaction
51:17 - model again and we
51:20 - want to go to the slot that we just set
51:22 - up our hello intent slot and now we want
51:26 - to also include not a slot but an intent
51:29 - our hello intent intent and we want to
51:31 - add a slot to it so um i'm going to say
51:34 - my name
51:36 - is
51:37 - and then
51:41 - in curly braces
51:43 - add the name of a slot that i want
51:47 - to use as a placeholder for a value so
51:51 - i'm adding that right into my utterance
51:54 - so my utterances my name is and then
51:56 - curly braces name and when you do that
51:58 - you'll see down here the
52:00 - the slot
52:02 - with the name name gets added
52:04 - and then you just need to set a type for
52:06 - the slot and there is a slot type
52:09 - for names specifically first names
52:12 - and um i think there's also
52:16 - surnames or last names but i'm gonna use
52:19 - for this example
52:21 - amazon.usfirst name here so now
52:25 - this built-in slot can recognize first
52:28 - names and pull those out of the uh the
52:30 - utterance so i am good
52:33 - to go here so i'm gonna save that
52:37 - and i'm gonna build the model here
52:44 - okay
52:47 - and
52:48 - while that's
52:50 - building
52:56 - actually i'm not going to change the
52:57 - code until this is done building because
52:59 - i want to
53:01 - i want to show you something in the
53:03 - intent request first that we're going to
53:06 - use to um
53:08 - to
53:09 - know what to code in our skill service
53:12 - and this is kind of a
53:14 - pretty common way at least that i do it
53:16 - so i'll
53:18 - once i make changes to the interaction
53:20 - model i'll generally
53:21 - test first to see what the intent
53:24 - request is going to look like
53:27 - and then you
53:28 - just make sure that the inner that the
53:30 - alexa service is doing what it's
53:33 - supposed to be doing with the uh
53:35 - with the user
53:37 - utterance so i'm gonna go over here
53:40 - and just
53:43 - test this out so tell
53:45 - space facts
53:51 - my name
53:54 - is steve
53:56 - [Music]
53:59 - hello
54:01 - and let's make sure that it works so
54:03 - what i'm doing to make sure that it
54:05 - works is i'm looking at the json input
54:07 - and this again is what the alexa service
54:10 - generates to send over to the skill
54:12 - service and if i come down here into the
54:15 - request
54:16 - i can see that the
54:18 - hello intent is the intent that
54:21 - i'm uh i'm wanting and that my
54:25 - utterance here with my slot in it
54:28 - is also being uh recognized here so i
54:31 - can see now in the there's a new slot
54:33 - section down here and then the name
54:37 - name is the name of the slot and the
54:39 - value is steve and that's
54:41 - what i'm looking for when i'm testing
54:43 - now what i want to do is i want to
54:44 - respond back
54:46 - and use that value so i'll say like
54:48 - hello steve or whatever the value of the
54:51 - slot is when it comes over and to do
54:52 - that i'm going to go back over to my
54:57 - skill code here
54:59 - and i'm just going to say
55:02 - respond back with so the input handler
55:06 - here is the object that's going to
55:10 - um
55:12 - the object that's going to include
55:14 - everything that's
55:16 - in the json request so
55:19 - i can sort of navigate this object by
55:23 - looking at
55:24 - the json that's coming over so right now
55:27 - i can see in the request object
55:29 - i've got
55:30 - intent
55:33 - and slots and then name or value name
55:37 - here and then value here so i want
55:39 - intent slots
55:42 - name and value to get this so
55:45 - back over here i can go request
55:48 - intent
55:51 - name dot value
55:55 - slots right
55:58 - slots.name.value
56:02 - and then if i save this let me just
56:04 - double check so request intent slots
56:07 - name value and just confirm over here
56:10 - intent requests
56:12 - intent
56:13 - request intent slots name value okay so
56:17 - now if i test this again
56:20 - [Music]
56:27 - my name is steve
56:29 - hello steve
56:31 - okay so this time the response and
56:34 - is using the
56:36 - value that was um
56:38 - sent over for the slot
56:40 - and so just to recap what what we did
56:44 - here so we set up the interaction model
56:46 - with the intent
56:48 - and
56:49 - we added a slot to the intent and we
56:52 - included the
56:53 - slot parameter as part of the utterance
56:56 - so that when the user
56:59 - makes a request to the alexa service the
57:02 - alexa service can identify
57:04 - what
57:06 - intent the user wants
57:08 - and
57:09 - also extract the the value of the slot
57:13 - in this case name
57:15 - so that it can be passed over to the
57:17 - skill service and then once we pass it
57:19 - over to the skill service or the alexa
57:20 - service passes it to the skill service
57:22 - we can use it in our skill as part of
57:24 - the response and this was a really
57:27 - simple example in
57:28 - a
57:29 - more complete example we would do things
57:32 - like check for
57:34 - slots that aren't filled and if they
57:36 - aren't filled and we need the value then
57:38 - we might respond back
57:40 - by prompting the user with a prompt to
57:42 - the user for the the slot value things
57:44 - like that
57:45 - but for for right now we just wanted to
57:48 - step through
57:49 - the uh
57:50 - the process of using slots and uh
57:54 - setting up intents and using them in our
57:56 - code
57:57 - in the the next lesson we're going to
58:00 - step it up a bit and we're going to look
58:02 - at
58:04 - coding using a local editor and the
58:09 - alexa skills kit command line interface
58:12 - and so up to this point we've been
58:14 - doing everything in the browser which is
58:17 - fine for what we've been doing and fine
58:20 - for for simple skills
58:22 - but as you uh as you get
58:24 - uh
58:25 - to building more
58:27 - involved skills it becomes harder and
58:29 - harder to to work in the uh the web
58:33 - editor so we're going to take a look at
58:35 - a local editor and talk about the alexa
58:38 - skills kit command line interface next
58:41 - [Music]
58:48 - doing we've done through the browser we
58:50 - set up our skills at
58:52 - developer.amazon.com through the browser
58:54 - and we set up our skills service through
58:56 - aws and lambda also using a browser and
58:59 - being able to do everything in the
59:00 - browser is really nice however as you
59:02 - get more serious about building skills
59:04 - you're also going to want to know how to
59:06 - build skills from your local computer
59:08 - and that is what we're going to talk
59:09 - about in this lesson and to do this
59:13 - there's some software that you're going
59:14 - to want to have
59:15 - and i'm going to talk about the software
59:18 - that that i use
59:20 - and
59:21 - sort of your minimal requirements and
59:23 - then we'll look at it a little bit and
59:26 - move on from there
59:28 - so
59:28 - [Music]
59:29 - first you're going to want to have a
59:31 - code editor and there are lots of
59:33 - options here and there's not necessarily
59:36 - a right or wrong choice as long as you
59:38 - can edit
59:39 - text
59:40 - and code it will work
59:42 - the one that i use and i'm going to be
59:44 - using for the rest of the course in the
59:46 - demos is one called visual studio code
59:49 - and it's free it's open source and it's
59:51 - available for mac windows and linux it
59:55 - is uh
59:56 - supported and provided by microsoft so
59:59 - the documentation and support is really
60:01 - really good which is one of the things
60:03 - that i like and there's a great
60:04 - community around it so there's all kinds
60:05 - of plugins and
60:07 - uh themes and and all kinds of good
60:09 - stuff so i like this one a lot like i
60:11 - said before i mean there's lots and lots
60:13 - of editors out there so this is
60:15 - certainly not the only one uh but the
60:17 - one that i'll be using for the rest of
60:18 - the course and and my my my preference
60:22 - this is visual studio code here and uh
60:26 - one of the things that i like about
60:28 - visual studio code is that it has an
60:30 - integrated terminal so the
60:32 - the uh the command line if you're a mac
60:35 - person
60:36 - then you might be used to this
60:39 - and this is the same thing so i can the
60:42 - commands that i can run here i can run
60:44 - down here and that is integrated into
60:46 - visual studio code and the the terminal
60:49 - also works if you're a windows user and
60:53 - you use the windows command line
60:55 - you would have access to the command
60:57 - line here and this is important because
60:58 - a lot of what we'll be doing and what
61:00 - you'll be doing as you're building
61:01 - skills
61:03 - will involve using the command line
61:05 - because the other tool that you're going
61:07 - to want to have is the alexa skills kit
61:12 - command line interface or the ask cli
61:15 - in the ask cli is a a tool utility that
61:19 - allows you to
61:21 - create
61:22 - manage and deploy
61:24 - alexa skills and that means everything
61:27 - that we've done through the web browser
61:30 - can be done from the command line
61:33 - as long as you have the
61:34 - [Music]
61:35 - ask cli
61:37 - and so let me let me show you
61:39 - uh what i mean so um here
61:43 - um
61:45 - i've got the alexa skills kit cli
61:47 - installed and i'm not going to walk
61:49 - through installing and configuring the
61:51 - software in this course but i'll leave a
61:54 - link out if you go to
61:56 - devlab.com
61:57 - learn
61:58 - i'll leave a link there to a tutorial
62:02 - that i did that walks through
62:04 - setting up and configuring your your
62:06 - local environment so the alexa skills
62:08 - kit command line interface mainly
62:11 - and uh again i'm not gonna walk through
62:13 - that here so as i'm going in
62:16 - and doing this stuff i've already gone
62:17 - through and set it up and configured it
62:20 - with uh permissions that allow the cli
62:23 - to uh push
62:25 - my skills out to
62:27 - my alexa console and also to aws
62:31 - but with the alexa skills
62:33 - cli installed i can go ask new
62:37 - and
62:39 - this will prompt me for the name of a
62:42 - skill if i want to create one and let's
62:43 - say i want to create one called hello
62:45 - world
62:51 - it's going to create a skill project
62:54 - which is this folder over here and in
62:56 - the skill project i have
62:59 - everything that i need to
63:02 - deploy
63:03 - and create a skill uh both the the skill
63:07 - configuration information for the
63:09 - developer
63:10 - alexa developer council and and also the
63:12 - lambda function and so here's the lambda
63:15 - code there when i did this ask new
63:18 - it provides some boilerplate code when
63:21 - you do that it's sort of like a hello
63:23 - world skill
63:25 - and i'm not going to go through the code
63:26 - yet i'm going to do that in the next
63:28 - lesson but let me show you
63:30 - just by doing this how easy it is to
63:33 - deploy
63:34 - the code from your local computer out to
63:37 - the alexa
63:39 - skills console and lambda so you would
63:42 - just
63:44 - from the directory that you're working
63:45 - in
63:51 - you would go ask deploy
63:54 - like that
63:56 - and now what the ask cli is doing is
64:01 - packaging up the skill uh deploying it
64:04 - out to developer.amazon.com
64:06 - first
64:07 - building the interaction model next and
64:10 - then last it is pushing the um
64:14 - the
64:16 - lambda function out to
64:18 - aws and so this takes a minute for this
64:21 - to happen but
64:23 - what you'll note here is that everything
64:26 - is done from the command line i don't
64:28 - have to go
64:29 - and log in through the web browser at
64:32 - all to do this once it's set up and
64:33 - configured
64:34 - and that is a huge benefit just in your
64:37 - workflow as you're
64:39 - making changes to skills and
64:41 - republishing them and testing them and
64:43 - you can actually also test from the
64:45 - command line here as well but let me go
64:48 - out and just show you what happened
64:50 - we'll start in the developer console
64:52 - just by doing that now
64:54 - if i refresh now there's my hello world
64:57 - skill that
64:58 - was just created
65:00 - using the ask cli
65:02 - and if i go out to aws.lambda
65:06 - or
65:07 - aws.amazon.com to my lambda and you can
65:10 - see that there is also
65:13 - a lambda function that was created for
65:15 - my skill service and i could edit these
65:18 - here
65:19 - because all the code is here and i could
65:21 - edit the skill over here just like we
65:25 - did in the earlier lessons but i don't
65:27 - need to do that anymore because i can
65:29 - make all of the changes that i want to
65:31 - make
65:32 - locally i can edit the code here
65:35 - and i can edit the
65:37 - information as well again in the next
65:39 - lesson i'll go through and kind of walk
65:41 - through what what's going on in here and
65:43 - then i can just do
65:45 - deploy again and
65:48 - all of my changes will be deployed so
65:49 - it's a much
65:51 - uh
65:52 - much
65:53 - better workflow as you start working
65:56 - on
65:57 - especially more complex skills and
65:59 - making changes
66:00 - and uh so
66:02 - that again is what i'm going to be using
66:04 - going forward in the next lesson i'm
66:06 - going to spend a little bit of time
66:08 - going through this uh this code here to
66:11 - give get you familiar with what's going
66:13 - on
66:14 - and then i'm also going to show you
66:16 - how to get some sample code that you can
66:19 - work with to
66:20 - to to start understanding and building
66:22 - your own skills from so that we will
66:25 - talk about in the next lesson
66:33 - okay we're going to pick up where we
66:34 - left off and we're going to take a look
66:36 - at the code that the ask cli creates and
66:39 - how we can modify that code to make
66:41 - changes that we push out to lambda and
66:44 - to the alexa developer council
66:47 - so
66:48 - ask new
66:50 - when we ran that command we got our
66:52 - hello world skill and the
66:56 - if you look in the skill project this
66:58 - folder here you've got a few things here
67:01 - you've got a folder called lambda and
67:03 - this is where all of the lambda code is
67:06 - in this actually this custom folder here
67:09 - and so if we looked at the
67:12 - lambda function in aws actually let's do
67:15 - that
67:16 - we go over here and let's go to our
67:19 - functions here
67:21 - and this is the new one that was
67:23 - deployed
67:26 - if we look in here you can see the
67:30 - files and the node modules and all of
67:33 - the
67:35 - things that are here get
67:38 - deployed out to here and so
67:41 - that is what's in this
67:43 - custom
67:44 - lambda custom folder here
67:46 - and then the interaction model which is
67:50 - in
67:51 - the developer console let's refresh this
67:57 - so
67:58 - in here
68:03 - so the interaction model here is
68:07 - this here
68:08 - so we can change the
68:10 - we can add intents and slots and all of
68:13 - the things that we've looked at uh
68:15 - previously changed the invocation name
68:17 - the default invocation name for this is
68:19 - greeter
68:20 - um so we can change all of that here and
68:24 - then
68:25 - last is the
68:28 - skill manifester the configuration
68:30 - information which is this skill.json
68:32 - file
68:34 - and this file contains
68:36 - settings for all of the
68:39 - additional information that you would
68:41 - have about a skill so
68:43 - things like the
68:45 - public name and the description keywords
68:48 - all of that can be added to that
68:51 - skill.json file
68:53 - and you can use that to make all of your
68:56 - changes so you don't need to log into
68:58 - the developer console through the
69:00 - browser to make changes or
69:03 - logging you don't need to log into aws
69:05 - to make changes to your lambda function
69:07 - so it makes sure
69:09 - again your your workflow just a whole
69:11 - lot better let's let's make a couple of
69:13 - changes just so we can um
69:16 - take a look i'll just make a really
69:18 - simple change here so the default name
69:21 - is hello dash world which is the name
69:23 - that i gave it when we set it up and i'm
69:25 - going to just get rid of the hyphen and
69:27 - i'll just
69:29 - say
69:31 - and capitalize these so hello world like
69:34 - this so small change of course i could
69:37 - go through and
69:39 - edit
69:40 - the description testing instructions
69:42 - example phrases all that but just to
69:44 - illustrate the point i'm not going to do
69:45 - that
69:46 - and then the interaction model
69:50 - change it to my greeter
69:54 - and i'll save that
69:57 - and
69:58 - the lambda function will just make a
70:01 - change to this
70:02 - it says
70:04 - when we opened it up it was welcome to
70:06 - the alexa skills kit you can say hello
70:09 - and i'm going to just change this to
70:10 - welcome to the course
70:12 - you can say hello so i'll save that
70:15 - and so we just made a few simple changes
70:17 - and now i'm going to go down here and do
70:20 - ask deploy again
70:22 - and it's going to go through the same
70:23 - steps it's going to deploy the
70:27 - skill information first and then it's
70:30 - going to build the interaction model
70:32 - next and this takes a little while
70:34 - building the interaction model just like
70:35 - when we do that through the developer
70:38 - console through the web browser that
70:39 - takes takes a minute and that's what's
70:41 - going on right now and then once that's
70:43 - done the last thing is it's going to
70:45 - deploy the lambda code out to aws
70:49 - and um once that's done we can go test
70:52 - it you can actually test right from the
70:54 - command line too we're going to go into
70:56 - the
70:57 - the the web browser just so we can
71:00 - see the see the changes
71:03 - that's almost done here i think
71:09 - okay so now
71:11 - let's take a look so now if we go out
71:13 - here
71:14 - and refresh this we can see the change
71:17 - that i made to the name just remove the
71:20 - hyphen not a big change and then also if
71:23 - i go over here to build and look at the
71:26 - invocation name you can see that it's
71:28 - changed now from greeter to my greeter
71:31 - and then
71:32 - the last piece we'll see if this is
71:34 - finished deploying it is
71:37 - so we'll go over here and we'll test it
71:40 - and
71:41 - see if we get our new greeting so we'll
71:43 - just say open
71:46 - my greeter
71:50 - welcome to the course you can say hello
71:53 - so there's our change so you can see the
71:55 - workflow uh for making changes and
71:57 - updates when you're working with the ask
71:59 - cli and doing everything locally is just
72:02 - really really simple and that's what
72:05 - we're going to be using going forward i
72:06 - want to show you one a couple of other
72:09 - things about the
72:11 - ask cli
72:13 - specifically
72:14 - how you can
72:17 - use templates
72:19 - so the the default when you do the ask
72:22 - new command the default template is that
72:24 - hello world template
72:26 - and or the greeter template which is
72:28 - like a hello world template but if you
72:30 - do
72:31 - ask new and then dash dash template
72:36 - there are some other templates that are
72:37 - available from amazon that you can use
72:39 - as a starting point too so this buttons
72:43 - color changer template city guide
72:45 - decision tree fact which is the
72:49 - space facts template that we looked at
72:51 - previously
72:53 - a
72:54 - [Music]
72:55 - rss feed
72:57 - news feed template and then
72:58 - hi-lo game how to pet match
73:01 - quiz so there's a there's a bunch of
73:03 - them here that you can use as as
73:05 - starting points and we're going to take
73:07 - a look at a couple of those in the next
73:10 - lesson and we're going to look at
73:12 - modifying a couple of templates so that
73:14 - they work as a really good starting
73:17 - point let's for right now just take a
73:18 - look at the fact
73:20 - one because we looked at that before so
73:23 - we'll see what happens
73:27 - uh oh you know what i did i didn't move
73:29 - out of my
73:32 - when i created this i was still in the
73:34 - hello world folder
73:41 - do that again
73:46 - and we'll do this fact
73:52 - okay
73:54 - let's delete this
74:01 - and this is our
74:03 - space fax
74:06 - so the code in and this one is actually
74:08 - a little bit different than the default
74:09 - code that you get when you use the um
74:12 - the blueprint or
74:13 - we didn't use the blueprint but the uh
74:16 - the repository
74:18 - version but uh you can make the changes
74:21 - here again and deploy deploy this if you
74:24 - want to uh if you want to do that
74:26 - the the other thing that i want to show
74:28 - you is um
74:30 - you can also get templates from other
74:32 - locations so the if you do
74:35 - ask new
74:36 - dash dash template
74:39 - uh the default templates are going to
74:41 - come from amazon but you
74:43 - can also get templates from other
74:45 - locations and one
74:47 - of those is
74:49 - skilltemplates.com so https
74:54 - skill templates
74:57 - dot com
75:00 - slash templates
75:05 - dot json
75:07 - like that
75:09 - and
75:10 - these are templates that uh that i
75:12 - created actually and so uh it's a list
75:15 - of just basic starter templates that you
75:17 - can use to um
75:19 - uh to to to get going so
75:22 - like the basic starter one is really
75:24 - similar to
75:26 - the
75:29 - default one that amazon provides
75:31 - with the main difference being
75:35 - the
75:36 - configuration information so in the
75:38 - skill.json it's got all of the
75:41 - configuration information so that when
75:44 - you deploy this it
75:46 - by just changing this json here you're
75:49 - ready to submit the skill for
75:51 - certification you would just want to use
75:53 - your own images of course and keywords
75:55 - and change all this
75:56 - where the the default hello world one
75:59 - doesn't have all of the settings in here
76:01 - and so you end up having to go dig
76:03 - through the documentation to get the
76:05 - settings but those are all provided by
76:06 - this one there's some other templates
76:08 - what we're going to do in the next
76:11 - lesson is we're going to look at
76:13 - diving into one of the templates
76:15 - modifying the template and then
76:17 - deploying the template so that is coming
76:19 - up next
76:26 - so at this point we've covered
76:27 - everything that you need to know for the
76:29 - most part to get your first skill up and
76:33 - running based on a template and what
76:34 - we're going to do in this lesson is
76:36 - recap and walk through all of the steps
76:38 - and i'm also going to
76:40 - talk about how you would go about beta
76:42 - testing skills and
76:45 - also discuss the process of getting the
76:47 - skill certified if you want to develop a
76:50 - skill that's going to be public so we're
76:52 - going to start with the alexa skills kit
76:55 - cli and i'm going to use the ask
76:58 - new and we're going to use a template
77:01 - [Music]
77:03 - and there is a template
77:06 - that amazon provides called team lookup
77:11 - and this is like a company directory
77:14 - skill and so we're going to use that one
77:16 - for our example here
77:19 - and
77:21 - so what after you select the template
77:24 - that you want to work with uh and most
77:26 - of the templates provide if you look
77:28 - there's like a readme file and you can
77:31 - go preview like this
77:33 - to read about the template and there's
77:35 - instructions for
77:37 - setting the template up and all that
77:39 - good stuff
77:40 - the
77:43 - things that you're going to want to do
77:44 - um you're going to want to modify the
77:46 - lambda code and the the goal of this
77:49 - course was to um to not get into the the
77:52 - coding part uh so much so we are
77:56 - in the code of course here but we're not
77:58 - really writing code uh so much as just
78:01 - um finding the the pieces that need to
78:03 - be edited if you're working with a
78:05 - template and with this template in most
78:07 - of the templates they're very well
78:08 - documented so you can read the comments
78:11 - and uh sort of navigate your way through
78:13 - what needs to be done in between the
78:15 - comments and the code and the readme
78:17 - file you should be able to uh to
78:21 - navigate easily through this
78:23 - but in this template the
78:25 - team lookup template there is
78:28 - most of what you're going to need to do
78:29 - is just change
78:31 - the
78:32 - references to the people so they've got
78:35 - the development team and the alexa team
78:38 - in here and you can
78:40 - copy and paste and change this to add
78:43 - your own team members in here
78:45 - and then further down
78:47 - there's like the skill name you can
78:50 - change that and you can change the
78:51 - welcome messages and um pretty much
78:54 - anything that you see that's in
78:56 - quotes is
78:58 - something you can change and then i
79:00 - think they say yeah
79:01 - so this comment here so caution editing
79:04 - and editing anything below this line
79:07 - might break your skills so if you're not
79:08 - comfortable
79:10 - coding
79:11 - yet
79:13 - you can just avoid changing any of this
79:15 - stuff down here
79:16 - if if if you are comfortable coding or
79:19 - you want to
79:21 - start learning that templates are great
79:22 - because all the code is provided in all
79:24 - the templates and so you can
79:27 - come and look through the code here to
79:29 - get familiar with what's going on and if
79:31 - you want to build your own skill you can
79:33 - either build it directly based on a
79:35 - template or use some of the code in the
79:38 - template to
79:41 - build your own custom skills so a lot of
79:43 - times they for me will act as a
79:46 - reference you know so you can see how
79:48 - one skill does something and then use
79:50 - that in the skill that you're creating
79:52 - so
79:53 - once you've modified the lambda code the
79:56 - next thing that you would do is
79:59 - modify the model
80:02 - here so assuming that you're not making
80:04 - any major code uh changes all you would
80:07 - need to modify in the model is just the
80:09 - invocation name so the name that you're
80:11 - gonna
80:12 - use or the user is gonna use to start
80:14 - the skill up
80:16 - and then the last thing
80:18 - is the
80:19 - skill.json here so this is all of the
80:23 - setting information that's going to be
80:26 - used in the alexa developer console so
80:29 - this is going to provide the name of the
80:31 - skill here and you can change that
80:34 - and the description um the example
80:36 - phrases so you're going to want to go
80:38 - through and edit all this you're
80:39 - probably going to want to provide your
80:41 - own icons and so you would
80:45 - use 108 by 108 is the small icon 108
80:49 - pixels by 108 and then the large icon is
80:52 - 512 by 512 so you would want to provide
80:55 - a url to the icons that you're going to
80:58 - use for your skill
81:00 - and then at this point once you've
81:03 - modified everything
81:05 - then you would just deploy it so you
81:07 - would move into the team lookup folder
81:15 - and just do ask deploy
81:18 - [Music]
81:21 - like that
81:28 - and the
81:31 - cli is pushing the skill out to the
81:34 - developer console and then building the
81:36 - interaction model which takes a minute
81:38 - and then it's also going to deploy the
81:39 - lambda function
81:41 - and while that's happening let me show
81:43 - you one other resource that you you
81:46 - might want to use
81:47 - if you go to alexa.amazon.com
81:50 - and log in this is going to provide you
81:54 - with the equivalent of what you get in
81:56 - the alexa or in the echo
81:58 - alexa companion app for the amazon echo
82:00 - so if you've got an amazon echo and
82:02 - you've installed the app for ios or for
82:05 - android this is going to provide the
82:07 - same kind of functionality so this is
82:10 - where you would go
82:11 - and search for and enable skills
82:14 - and also
82:16 - on the home screen where you would see
82:17 - any card so if
82:19 - in a skill you can write back
82:21 - information to the companion app
82:24 - using cards
82:26 - and you can see this is a card that was
82:28 - written back earlier when we were
82:30 - working with the hello world skill
82:32 - and so if you want to test that you can
82:34 - use the
82:36 - alexa.amazon.com to to do that
82:39 - the other thing worth pointing out in
82:41 - here so if you're
82:44 - wondering if the name
82:46 - a name that you want to use for a skill
82:48 - has already been used you can search
82:49 - here for skills and find similar skills
82:52 - if you're trying to get inspiration or
82:54 - if you're trying to make something
82:55 - that's a little bit different and
82:56 - wondering if somebody's already built it
82:59 - and then over here
83:00 - your skills this is going to be a list
83:02 - of skills that you have enabled and then
83:04 - you'll see under dev skills any skills
83:06 - that are in development so like here's
83:08 - our team
83:09 - look up skill here
83:11 - and i would bet by now this is all
83:14 - deployed
83:15 - and it is okay so the next thing that we
83:18 - would do once the once the skill is
83:20 - deployed
83:21 - then we're ready to invite some beta
83:24 - testers and then once we get the beta
83:26 - testing process
83:27 - done and we've got the feedback that we
83:29 - need then we're ready to deploy it to
83:31 - the public skill store or maybe you just
83:34 - want to deploy it as a company skill and
83:36 - i'll show you how to do that so
83:37 - you're going to do that from in the
83:40 - developer council here so once you
83:44 - once you've
83:45 - deployed this skill you can go back into
83:48 - the developer console
83:50 - and
83:51 - here you would edit
83:53 - go to edit for our team look up and then
83:57 - you're going to go to so we we test
84:00 - ourselves while we're in development
84:03 - but then we also want to beta test and
84:05 - to do that we would go to launch here
84:08 - and provide all of the uh the details
84:11 - for the skill and this is the stuff that
84:13 - we provided inside the
84:16 - alexa.json file so here's like the
84:19 - reference to the image that are provided
84:21 - we would change those of course
84:23 - the only thing that is not provided at
84:26 - least in this one is the the privacy
84:28 - policy urls because these are going to
84:30 - be the urls that
84:32 - would point to your privacy policy of
84:34 - course so
84:36 - [Music]
84:37 - i'm going to do mine
84:42 - and also to
84:45 - your terms and conditions so you you
84:47 - these are required you need these if
84:49 - you're going to publish the skills so
84:50 - you'll need something out there
84:53 - and then save and continue
84:57 - and then there's some questions about um
84:59 - that you need to answer for the
85:00 - certification process does the skill
85:02 - allow users to
85:03 - make purchases or spend money you want
85:05 - to go through and answer all these
85:07 - and provide any testing instructions
85:10 - that if there are any any special
85:12 - instructions that you would want the
85:14 - testers to know
85:16 - and then save and continue
85:18 - and then the last step here is to
85:21 - choose
85:22 - how you want to publish the skill and so
85:24 - you can publish it publicly in the skill
85:26 - store and this would make it available
85:28 - for anybody to enable
85:31 - you can publish it for just your
85:33 - organization
85:34 - you would need to have
85:37 - alexa for business set up to to do that
85:41 - or
85:43 - you can use the beta test option here
85:46 - and so to beta test you provide your
85:48 - email
85:50 - and
85:51 - you're going to be the administrator so
85:54 - [Music]
85:56 - whatever your email is
85:58 - and then down here you would provide a
86:01 - list of email addresses for each one of
86:03 - the beta testers and you can upload a
86:06 - list in a csv format or you can enter
86:08 - individual email addresses separated by
86:10 - a semicolon and you can have up to 500
86:13 - of those
86:14 - the email address needs to be an email
86:16 - address that corresponds with an amazon
86:19 - account that is associated with either
86:22 - you know in a an amazon developer
86:24 - account
86:25 - or one that's used for an amazon echo
86:27 - and then
86:29 - the user or the beta tester is going to
86:31 - get an email
86:32 - and in the email there's a link that
86:34 - they can use to enable the skill and
86:37 - when they enable the skill it will show
86:39 - up in their skill list as a skill that's
86:42 - in development also so these are some
86:44 - skills i was invited to test which is
86:47 - why they're showing up
86:49 - and so
86:50 - if you got an invitation uh or your once
86:53 - your users get an invitation
86:55 - then they would be able to test the
86:56 - skill using their amazon echo
86:59 - even while it's in development before
87:01 - it's publicly available just like you
87:02 - can test it as the developer
87:05 - so
87:06 - that is the
87:08 - process
87:09 - for
87:11 - configuring the skill start to finish or
87:14 - using the template and then configuring
87:16 - it for beta testing and once you're done
87:19 - with the beta testing at this point you
87:21 - just save and continue to
87:23 - submit the skill for if you wanted to go
87:26 - public
87:26 - to submit the skill for certification
87:29 - and the certification is um
87:32 - pretty quick it's like a
87:34 - couple of days at the most usually and
87:37 - if the the skill if there's a problem
87:39 - with certification the response back
87:41 - that you get is um very detailed in my
87:44 - experience so they'll tell you exactly
87:46 - why if it fails certification why it
87:48 - failed and what you need to do to
87:49 - resolve that
87:51 - and um
87:53 - yeah so that is it
87:55 - at this point again you have everything
87:59 - that you need to get your first skill
88:02 - up and running based on a template and
88:05 - that is where we're going to to wrap up
88:08 - in the next video
88:10 - i'm just going to do a high level recap
88:13 - and talk about some resources and some
88:15 - things it's kind of next steps that you
88:17 - might want to
88:19 - to take a look at or that you might be
88:20 - interested in
88:28 - congratulations you've completed the
88:30 - course you should now have a solid
88:32 - introductory level understanding of how
88:33 - to build custom alexa skills and
88:35 - hopefully you're pretty close to having
88:37 - your first skill completed
88:39 - from here you'll want to practice what
88:41 - you've learned so far and then move on
88:42 - to some more advanced topics and here
88:44 - are some suggestions for possible next
88:46 - steps
88:47 - first head over to dabilab.com
88:50 - learn there you'll find links to all of
88:53 - the resources that i mentioned in this
88:55 - course and you can also subscribe to get
88:57 - notified when this course is updated or
88:59 - when i publish a new course i am
89:02 - planning on publishing more advanced
89:03 - courses so hopefully if you liked this
89:06 - one and you want to dive deeper you'll
89:08 - want to check those out too also alexa
89:10 - is constantly evolving and as a result
89:13 - this course will have revisions so by
89:15 - subscribing i'll let you know when those
89:17 - updates happen
89:18 - next you'll want to check out the dabble
89:21 - lab youtube channel at youtube.com
89:24 - there you'll find over 50 alexa
89:26 - development tutorials that complement
89:28 - this course
89:30 - you'll also want to go to github.com
89:33 - alexa to learn more about the alexa sdk
89:36 - for node and while you're there
89:38 - start digging through some of the code
89:40 - for the sample skills that amazon
89:42 - provides
89:43 - and we've also created some sample code
89:47 - starter templates that you can use and
89:49 - you'll find those at skill
89:51 - skilltemplates.com
89:52 - well that's it i really hope that you
89:54 - enjoyed the course but i also hope that
89:56 - you'll let me know if there is anything
89:57 - that you think i can do to make it
89:59 - better finally if you have any questions
90:02 - about anything that i've covered don't
90:04 - hesitate to leave a comment and i'll
90:05 - respond just as quickly as possible hey
90:08 - thanks again for taking the course i
90:10 - hope to see you in a future course

Cleaned transcript:

hey this is steve with davilab welcome to the course i'll be your instructor and the guy responding to any comments or questions that you might have as you work your way through the lessons the goal of this course is to give you a solid introduction to building skills for amazon alexa and to do that in a way that makes sense even if you've never written a line of code before in your life so there is absolutely no prior programming experience necessary however to make the best use of our time i will assume that you're familiar with what alexa is from a user's perspective and that you have just some basic computer skills the course is broken down into a collection of short videos most of them are under 10 minutes but a few are a bit longer also for some topics i'll be referencing related videos and resources that complement this course and for those i've included links in the course notes finally all of my demos are going to be done on a mac but if you're using windows or linux you should be able to follow along just fine okay i'm sure you're ready to get started so that's it for my introduction in the next video we'll take a look at how alexa works from a technical perspective and discuss what you'll need to get started as an alexa developer the jumping off point for getting started with alexa development is the alexa developer portal and it's located at developer.amazon.com alexa to get started you want to spend some time browsing through the public content there and what you'll quickly learn is that alexa is way more than just the brand and the brains behind the amazon echo alexa is also a service from amazon that makes it possible for anybody to extend alexa's capabilities or incorporate alexa into smart devices for developers the alexa service provides the alexa skills kit and the alexa voice service the skills kit lets you add new capabilities to make alexa smarter and these are called skills so if alexa doesn't do something now that you'd like her to do you can teach her how by creating a new skill the alexa voice service on the other hand is used for adding alexa to new devices or software so for example if you wanted to create an alexa enabled toaster you'd use the alexa voice service to do that our topic is building skills so we're going to talk more about the alexa skills kit the skills kit is a collection of resources to make it easy for developers to create skills for alexa skills kit includes documentation software development kits application programming interfaces and example code we'll be taking a look at all of these in more detail using the skills kit is free in fact in most cases you won't need to pay to publish build or host your skills and nothing that we're going to be doing in this course should cost you anything at a high level there are two things that you need to do to create skills you need to create a voice user interface for users to interact with your skill and you need to build a skill service that provides your skills functionality the first part is done through the alexa developer portal and doesn't require any coding but it does require an understanding of how alexa works from a technical perspective and we'll be covering that building a skill service is a bit more technical and does require some coding however even if you've never coded anything before in your life you can build a basic skill service using amazon web services fairly easily we'll talk more about building skills services in a minute but first let's take a closer look at the skill set up skill configuration settings and what's referred to as an interaction model tell the amazon alexa service about your skill and this lets the alexa service know how to recognize when users are requesting your skill and the functionality that it provides new skills are set up through the alexa developer portal at developer.amazon.com and when you set up a new skill you define how users enable and interact with it and how the alexa service will communicate with your skill service to provide your skills functionality the developer portal is also where you would submit your skill to be published in the skill store we'll talk more about the publishing process later on your skill service provides your skills functionality and this is code that you'll write to take action on and to respond to user requests amazon doesn't care how you create your skill service you can use any programming language and technology stack as long as it can properly communicate with the alexa service that said the easiest way and the recommended way to build a skill service is by using amazon web services or aws and that's what we'll be doing so to wrap up let me summarize how alexa works with a custom skill so first a user speaks to an echo or an alexa enabled device and the audio is streamed from the device to the amazon alexa service next the alexa service converts the voice stream to text and determines if the request is for a skill by looking at skill configuration information that the developer sets up in the alexa developer console if the request is for a skill the alexa service sends the request to a skill service that the developer created to provide the skills functionality the skill service takes action on the request and generates a response that is sent back to the alexa skill service through the alexa skills kit api from there the alexa service responds back to the user okay so that's it for our high level technical overview in the next video we're going to jump right in and create our first skill okay now we're going to jump in and we're going to start building a skill and we're going to take this process and break it into the the next couple of lessons to provide a high level overview of the process you can step through this as i'm going through it if you want to do that or you can just kind of watch the process to get a sense of what's going on we'll be building a custom skill later on but for this lesson in the next couple of lessons we'll be just walking through one of the skill examples or the example skills that amazon provides to just get familiar again with the setup process and kind of how everything is working like we talked about in the last lesson there are really two main parts that a developer needs to worry about when they're setting up a skill the first part is configuring the voice user interface and the other part is providing the the code or the functionality that is going to process and respond to requests that come in through that interface by users and the the first part of that creating the voice user interface is what we're going to take a look at in this lesson and then we'll um talk about the back end which is the skill service in the next lesson so the the starting point for setting up a skill is to go to developer.amazon.com and set up a an amazon developer account if you don't have one already in amazon developer account is free so you don't have to pay for anything you just sign up i'm not going to walk through the sign up process just because it's pretty straightforward the the only point i'll make on the developer account is that you probably if you have an amazon echo set up and you're you don't need to have an echo to do alexa development but if you have one you want to use the same email address with your amazon developer account that you used for the account that you set your echo up with and the reason that you want to do that is because if you're using the same email address or same amazon account for both your developer account and your echo then you'll be able to test your skills with your echo which is kind of cool even while they're in development you don't need to have an echo to do alexa development so if you don't have one no worries well there's a really nice test setup in here so you don't have to have a an amazon echo to do that but if you do then you want to use the same email address once you have signed up at developer.amazon.com go ahead and log in i'm already logged in and then you would go to your alexa consoles and then skills and this is going to bring you to your list of skills if you don't have any then you'll see something like this mine is empty right now and you're going to start by creating a skill and you're going to provide a skill name and we're going to call this one space facts and again this is uh this is an example skill that amazon provides and we're going to start with that to talk through what's going on so i'm going to enter the name and then select the the default language that the skills can use and in my case it's u.s english you also have support for different dialects of english australian canadian uh indian and uk english and then uh german japanese and french as well right now and then you choose next and you choose the model to add to your skill and this is like the the skill type and we're going to be working with a custom skill type right here which is the the most flexible of these skill types is where you're going to get the the most in terms of uh capabilities that you can uh provide as a developer these these other types uh provide sort of more specific functionality that's outside the scope of this course we're gonna be working with the custom skills so you want to select that and then choose create and this will bring you into the skill configuration area here and there's there's a lot going on in here we're going to talk through we're going to talk through all this it looks intimidating when you first get in here but it's really not that bad once you go through it at the at the high level what you're doing here is you're providing information that is going to be used to train the alexa service to recognize requests for your skill and for the functionality that your skill provides and that's all done through instructions that are provided in what's referred to as an interaction model and we'll we'll go through that in more detail a bit later but uh that's what's happening in this section here the other big part of what we're going to do when we're setting up the skill is tell the skill how it's going to communicate with the skill service which is the back end code that's actually going to provide the functionality we're not going to talk about that in this lesson we'll do that in the next lesson but that's done in this interface and then also from within here you are able to test your skill and we'll take a look at that after we get our skill fully set up and you can provide information to get your skills certified and launched in the alexa skills store here and then once your skill is live you can get metrics on its usage over here in the measure section so um we are going to set this up using a template like i said or some example code and we're going to get that code from github.com so if you go to github.com alexa you'll want to find the sample node fact skill here and in here if you go to models and then you're gonna pick the language that is the right language for your skill in my case it's this english us and then i'm gonna just copy this so just copy and then we're going to go back over here and we're going to just paste it in here so i'm at the json editor and i'm just pasting that in so um this is going to create the interaction model we'll talk about this in a lot more detail later in the course but for right now we're just going over the high level steps but the interaction model is what's used to train the alexa service the machine learning for the alexa service on how to recognize when your skill is uh being requested which is done through this here the invocation name space facts which we could also set through the graphical user interface here so anything that's done in the graphical interface is really just editing or changing this this json here that you can also see in the json editor and the the the intents and which are what the functionality your skill provides and then how that functionality is um is is gonna be asked for by the user so utterances or samples here and again we'll go over this in in more detail but at this point once we've got our uh our model in there and saved we can build the model and building the model is uh what trains the machine learning that's part of alexa and so depending on how complex the model is this can take a little while so at this point we've got our basic skill set up and the model building and the next thing that we're going to need to do is tell the skill how it's going to communicate with our skill service and we're going to do that in the next lesson now that we have our skill set up the next thing that we need to do is we need to configure the endpoint and the endpoint is going to tell the skill how to or the amazon service uh how to contact and communicate with the code or the service that we're going to be creating to handle the requests that come in from users and so at a high level again what's happening the flow if you recall from the uh the technical overview a user speaks to an alexa enabled device the device forwards the audio stream to the alexa service the alexa service takes that audio stream and converts it to text and then determines based on the interaction model what the user is requesting or the machine learning uh determines what the user is requesting and then if the request is for a skill the request is sent from the alexa service to a skill service and the skill service is code that we're going to create as developers to process the requests that come from the alexa service and in turn respond back to the alexa service with instructions or responses for how the alexa service should respond back to the user the important point here is just to to know that everything is going through the alexa service so uh the requests coming in from the user are going first through the alexa service from the alexa service to our skill service and then from our skill service back to the alexa service and back to the user the skill service can be hosted by really any any web server that can uh consume or or understand the requests that are coming in and they're they're just json requests if you're not familiar with json uh it is the it's an acronym that stands for javascript object notation uh this is json actually so it's um it's a text format and it is structured in a way that makes it easy for computers to work with and because it's text humans can see what's going on also but basically a message in this format goes back and forth between the alexa service and the the skill service and so the end point here is configuring where the alexa service is going to send those messages and where the alexa service is going to get responses back from those messages and in our example we're going to use a service that's provided by amazon web services called lambda aws lambda and so we're going to select lambda here and then the um aws amazon web services this is actually different from the developer the amazon developer console so you're going to need two different accounts you'll need one for the amazon developer council which we set up already the amazon developer account and then another for our web services account uh amazon web services account and this one is when you sign up you will be prompted for a credit card but there is a free tier so even though you've got a provided credit card nothing that we're doing in this course is going to cost you anything again we're using this lambda service here which provides a million free requests per month which is way more than you're going to need for this course so no no worries about that but you will need to provide a credit card so i thought i'd mention that i'm not going to walk through the sign up process here either because it's pretty straightforward but once you have an account you would just go ahead and sign in and you would go to the uh lambda service so if you just search for it here it'll remember down there and the lambda service allows you to run code without setting up servers and managing servers and all of that stuff so it's really great and uh simple to use for the most part let you just focus on your code and not all of the infrastructure stuff that is not not the main thing when it comes to uh writing code and creating services the um let's just jump in here and go through it so the uh the the service when you go in to create uh a lambda function you're going to create the code you've got a couple of different options here you can author a function from scratch and we'll take a look at doing that later in the the course but you can also use blueprints or this serverless application repository and these are uh like templates for setting up backend services that are hosted in amazon web services and that's what we're going to use for our example here so if you select the serverless application repository and then just filter by alexa and the um let's see skills how to we are looking for the facts skills this one right here so the alexa skills kit node.js fax skill and this is the one that provides a a a random fact which is uh the the back end to what we grabbed from github in the last lesson so we're going to go ahead and select that and you can leave the defaults here and then just choose deploy and once it's deployed i'll show you what we what we get here it is still deploying loading our resources and there we go all right so now we can go over to the skill that was created uh the lambda function rather that was created and if we click on the lambda function we can see the code that was provided as a part of that template here so this is javascript the programming language here node.js and when you create lambda functions you actually have the option of using a variety of different programming languages c sharp go java python and node.js which is a runtime environment for javascript which is what we're using here and so we'll uh we'll talk more about the the code a little bit later on but you can just browse this and see um kind of what what what's happening this one again is a an example that's going to give a a random space fact so one of the facts is a year on mercury is just 88 days long to make this work this is this is important here this trigger so the alexa skills kit the alexa service is not available in all regions so if for whatever reason you run into issues here or you don't see the trigger added you want to go up here and you want to make sure that you're in the well it doesn't need to be the u.s east region the u.s east region does support the alexa skills kit for sure not all of them do a lot of them do but if you have any question and you just want to get to a region that supports skills kit for going through these steps you can just select us east because i know that one does and then the alexa skills kit is going to um enable the alexa service to call this function and so we are going to now just need to configure our alexa skill so that it can access this backend skill service and we're going to do that by copying this up here which is a unique identifier for this function that's called an arn or an amazon resource name so i'm just copying that and then i'm going back to my developer console so at developer.amazon.com and to the service endpoint and i am just going to paste that in that endpoint to that lambda function and if it's all in there i can just save here and it's saved so at this point i have a complete skill set up i've got the skill set up in the developer console i've got the interaction model in here that i copied and pasted from the example on github and then i saved the interaction model and i built it and the build process is what trains the alexa service to recognize a request for this skill which is named space facts and it will be invoked using that name also space facts and then we configured the skilled point to the skill service and so now we can go ahead and test and this is where we're going to leave off for this lesson and then the next lesson we'll look at testing and talk a little bit about the testing process once you've got your skill completely set up the next thing you want to do is start testing it and like i mentioned earlier if you have an amazon echo and you set up your developer account using the same email address that you set up with your echo you can start testing your skill using your echo by simply enabling the test right here so when you do this you're also enabling the skill under your account again if you're using the same account that you used when you set up your echo or the same email address and if you don't have an echo like i mentioned earlier you don't need one because this test simulator here provides everything that you need to test the skills so we can use this just like we would use in echo so we can say alexa open space facts here's your fact earth is the only planet not named after a god all right and that pulled the fact from the skill service that we set up and i can also test in here using i could submit my input using text also so like open space facts like this here's your fact the milky way galaxy will collide with the andromeda galaxy in about five billion years okay so my skills working right now i want to just point out a couple of things here um so this json input and json output here the input is the input that's going from the alexa service to your skill service in our case that lambda function that we just set up so the alexa service is generating this and sending this to the endpoint and then our skill service our lambda function is reading this taking this in and responding with this here the the json output and this is what's going back and forth between the alexa service and the skill service all the time there's a json message like i mentioned earlier and the skill service is reading that message and acting on whatever the message is saying that the user wants and sending a response back the um the the one point here i want to make is really about um when things don't go right when you're testing so uh let me um let me let me show you uh kind of a case where things aren't working so right now everything worked and we got a a response back that the alexa service could understand but if you're having problems you you might not get enough information over here to know what's going on so let's let's uh create a problem like that so i'm gonna go over to my um i'm gonna go over here to my lambda function and i'm gonna just modify this so that it generates an error that um that the alexa service will not know what to do with so let me change this to just making this change again just to to generate an error to illustrate a point so now when i go back over here and i uh test i'll say open space facts there was a problem with the requested skills response and so this time because my skill service didn't respond with something that the alexa service knew what to do with uh the alexa service is just telling me that there was a problem with the skill service but the alexa service doesn't know what the problem is all the alexa service knows is that it didn't get a message back that it knew what to do with and so i just get a generic error message which if you're getting that and you don't know how to go about figuring out what's going on can be pretty frustrating and so what we're going to want to do if something like that comes up and we're we're not getting into in this lesson deep into the code and debugging and all of that stuff but i want to touch on this because it's important we're going to need this as we start building our own custom skill but what we're going to want to do is we're going to want to simulate the request that's coming from the alexa service to the lambda function and use the debugging in lambda to try to figure out what's going on and to do that it's pretty simple you would just copy an example of the request that's coming from the alexa service which you can do by just copying the json input here and then you want to take that over to your lambda function and there's actually a test a way to test right in here so you can do this test here configure test event and i already configured this so i'm going to do it again just to show you you would just paste in give your test uh a name and i called the the this one launch request you can call it whatever you want and then uh you would just save it in there if um i didn't already have this button would allow me to save and then once you've saved your test you can submit the test and then when you submit the test you will see the error message here with a lot more details and actually you see it down here as well so you can use this information to debug what's going on and again this lesson is not about debugging as much as it is just generally how you would approach testing alexa skills so we'll come back to this as we start modifying code a little bit later on but we would go about debugging our skill service in the lambda manager in the aws council and we could from here figure out well we know what's wrong with this because we created the error but we could figure out more easily because we have information to uh to figure out what's going on and we can debug it there and then when we go back of course it would uh it would be fixed or we could retest it in here so that is a just a quick introduction to how you would go about testing we're gonna need this as we're developing our skill especially when things go wrong which um they they will from time to time as you're as you're building stuff so you want to know how to go about debugging it in the uh next lesson we will dive into the code a little bit and look at modifying the code and with this debugging lesson we can do that hopefully confidently because if something goes wrong we'll know how to fix it so we will jump in that next okay now that our skill is set up and we know how to go about testing we can take a look at the code and the make some changes to our skill service code so the code that we we have here again is just an example that's provided by amazon and the example is written in javascript because we're using node.js and we're not going to dive deep into this right now but i do want to point out a couple of things so when you're in the uh the lambda editor here there is a pretty nice code editor that you can use to edit this code and you can expand it and if you're working on more complex skills you you'll probably want to use a local code editor for but for what we're doing this is um this this is great and you can see all the code here make changes to the code here and the the files that are associated with the code in this um case here we've got because this is node.js uh we've got some node modules that are included and node modules are reusable code and the notable one here is the the ask sdk and the ask is the alexa skills kit sdk and it is a a module that makes working with the requests from the alexa service really simple so rather than having to write code to decipher what is in that json message that's coming over and to generate a json message going back the alexa skills kit sdk provides methods that make that really easy for us to do without writing a whole lot of code and um we'll we'll talk about that more in a later lesson but for right now um let's just look at making a uh a couple of simple changes in here and then i want to talk about the the relationship between the code and the uh the interaction model because that's uh that's pretty important so um for starters making a change that goes back to uh your user through the alexa service is just a matter of making a change to your skill service so in this case here um you know here's your fact if i just change this to here's your cool fact and save it um save up here now if i go over and test here and just say open space facts here's your cool fact despite being farther from the sun venus experiences higher temperatures than mercury so the change that i made is immediately available for the user so any changes that you make in your skill service the alexa service is going to use whatever the skill service sends back and provided that the the response is a format that it can use it will be good to go the the the part that is a little bit more involved is figuring out what the alexa service is sending over and mapping what the user wants to a a a code function that can handle it and that is done through the interaction model and so i'm gonna talk through what's going on in a little bit more detail in the interaction model and how that relates to the the code and then we'll um we'll in the next lesson we'll go through some examples of using that but first i just want to talk through it so the uh the interaction model like i explained earlier is um is it's basically instructions for training the machine learning that is behind alexa so that it can understand requests from a user that are requests for your skill and functionality that your skill provides so in the interaction model and i'm just looking at the the json editor here which you can create the entire interaction model just in uh code like through the json editor like this the um the the key pieces that you want to understand are the um first the invocation name and we set up the invocation name through the visual editor or actually well we copied and pasted this in but the invocation name is the name that the user is going to use to invoke or start the skill and then um in addition to starting the skill the skill will provide functionality and and functionality is referred to as as intense or requested functionality is identified and uh referenced as intense it's a better way to say it i think so um so an intent is what your skill can do and it maps to what the user wants and what the user wants or is requesting is derived from utterances the things that a user says and so we provide along with intents we provide samples of things that a user might say to uh tell alexa uh how to recognize when the user wants something specifically that our skill provides and there are two kinds of intents there are custom intents and that is what this get new fact intent is and then there's also builtin intents and builtin intents we can we can add some of them are required like these ones are required but builtin intents are our default functionality that is part of the the alexa service and so for example the ones that we're looking at here like the cancel intent uh recognizes when a user is um wanting to cancel a uh a session with a skill and help is pretty selfexplanatory but um is going to recognize when a user is asking for help within a skill and so these builtin intents here are kind of ready to go you don't have to provide utterances for them in some cases you can extend their their capabilities uh with additional utterances but it depends on the the intent there's lots there's lots of different builtin intents in fact take a look at that real quick so um there is a library of lots of different intents from uh you know types of musics and artists and you know all kinds of things so alexa can recognize lots of different things that a user would say even without you having to train it how to do that and so the the next part of this though is is how the intent maps to functionality that's provided by the skill service so it at the the high level flow we've got a case where a user is going to open up a skill without providing any other information other than the fact that they want to open the skill and we did that in the test here when we said um open space facts and in that case there the message that was sent over was let's do that here's your cool fact jupiter has the shortest day of all the planets okay so in in this case here all we did was ask the alexa service to invoke the space facts skill in this next example i'm going to ask for a fact and this is here's your cool fact a year on mercury is just 88 days long so in the example of this skill it's it's it's pretty tough to see the difference because the response that we get back is the same we get a random fact no matter what we do but if you look at the request here so in the first case uh the request that came in to the skill service if you look at it is a launch request and this is how our skill service knows that this was a case where the user was just opening the the skill up and not doing anything else in this example here the request came in uh but i asked space facts for a fact and the alexa service recognized that in this case the request was for a specific intent and that intent was the intent called get new fact intent and the way that the alexa service was able to determine that this utterance was for this intent is because of the samples that were provided and so if we go back over here and look at our get fact intent you can see the the samples in here and so the uh the utterance the things that users say uh are going to provide the information that the alexa service needs to uh determine what it is that the user wants in a really simple case the utterance is just going to map to an intent and it will be enough information to tell the alexa service and our skill service to execute whatever code is going to handle that intent in some cases however intents need additional information from the user before they can be fulfilled so this get new fact intent isn't an example of one but let's say we had a skill where a user could order a pizza in that case um we would need to know the size of the pizza the toppings um the delivery information and the parameters uh size topping those things are referred to as slots so slots are parameter values that we need to fulfill intents that are extracted from uh an utterance and we'll get into this in uh in more detail later on so this is just kind of high level talking through the these pieces and so minimally you will have a a launch request where all the service knows is that the user is invoking your skill you can have a launch request that includes an utterance that would not just tell the alexa service that you're trying to launch a skill but it would also provide information to map the request to an intent and then in some cases you'll have intents that require additional information to be fulfilled and that is information that is held in parameters called slots and then the the other point on slots is you can provide slot information as part of an utterance and a launch so if i had an intent that was um to order a pizza i might say and let's pretend my invocation name is um you know pizza skill i could say alexa tell pizza skill i want to order a pizza and that might map to my order intent but my order intent might need to know what toppings i need so if i didn't provide any slot that would be filled for toppings the intent would respond with okay what kind of toppings would you like but the user might also say alexa asks pizza skill to order a pizza with pepperoni on it and in that case i'm getting an utterance that is not just mapping to the intent but also providing information to fill the slot and again we're going to come back to this because we're going to use it as an example so right now i just wanted to uh to to talk through it and that information slot being the the intent being uh uh requested and the slot information is all going to get passed as a part of the request and we're going to need to handle that as it comes into our skill service and the um the alexa sdk is going to help us do that we're going to go into that and walk through an example of creating an intent that has a slot and passing that slot information over to our skill service and responding in the next lesson so in the last lesson we talked about intents slots and utterances now let's take a look at actually using them in our skill service code and we're going to start with the interaction model so we're going to create a new intent in here and then we're going to wire it up so that we can respond to the intent in our skill service so i'm going to create a simple custom intent called the hello intent and i'm going to add some sample utterances i'm going to start with just high and hello so when a user says hi or hello i want this intent to be the intent that um responds so i'm gonna save that for right now and i'm gonna start this model building we're gonna come back and we're gonna test and just a minute here but while this is building let's take a look at our skill service code so i'm going to use this space facts skill that we've been working with and hack it up a little bit here but i can use this as a starting point because it has the alexa skills kit sdk and some sample code that we can work with so um what i'm going to do is i'm going to just copy and paste for starters i'm going to copy this handler that was set up to get a random fact and i'm going to change this change the name of it to the hello handler and the first part of this code what it's doing is it's taking in the json that is being sent over by the alexa service that's this handler input value here and then that is down in this next line here that is being used or a piece of that object is being used or an object from within that object the request object is being used here is this constant named request and we're going to keep that but this next piece here is saying to use this handler when the request type is a a launch request which we don't want to do we're already doing that down here for the get new fact and we'll leave that the way that it is for right now um but what we will change here uh is what happens when this intent is uh is requested by the user and so we're going to get rid of this stuff here because we don't need that anymore and we're going to change this for now we're just going to say hello like that and we're going to get rid of this also this is writing back a card in the alexa companion app and we don't need that for this example okay so now we've got a handler that is going to look at the input that's coming in from the alexa service and if the input request is an intent request and the intent name is oh not not get new fact we want to change this to something different we'll say we'll call it the hello intent because that's what we named it okay so this all looks right all we need to do now is come down to the bottom here where uh this section that says exports handler and then add request handlers and we need to add this new request handler that we created in here just like that and then we can save it and so now if um now if we look at the code and just step through it again what's going to happen when the request comes over is the this handler is going to look to see if the intent request is named hello intent and if it is then this is going to respond with just hello really simple right now so let's go back over here to our uh developer console and oops got logged out log back in and let's test this out so um tell space oops tell space facts hello hello so it worked so let's look at the input here so the json that was sent over to the skill service from the alexa service you can see here in the request section here the type of the request was an intent request and the intent name is hello intent and the interaction model is what was used to generate this we created the interaction model so that the alexa service could understand that when a user says hello that we want the hello intent to handle that and so when this gets sent over to our skill service over here our skill service code now is able to recognize that and respond back with hello so that is the um those are the steps for setting up the interaction model and then handling the request in the skill service now let's take a look at what we would do to pass a slot value over to our skill service and the um the steps pretty similar so we want to go back to our interaction model again and we want to go to the slot that we just set up our hello intent slot and now we want to also include not a slot but an intent our hello intent intent and we want to add a slot to it so um i'm going to say my name is and then in curly braces add the name of a slot that i want to use as a placeholder for a value so i'm adding that right into my utterance so my utterances my name is and then curly braces name and when you do that you'll see down here the the slot with the name name gets added and then you just need to set a type for the slot and there is a slot type for names specifically first names and um i think there's also surnames or last names but i'm gonna use for this example amazon.usfirst name here so now this builtin slot can recognize first names and pull those out of the uh the utterance so i am good to go here so i'm gonna save that and i'm gonna build the model here okay and while that's building actually i'm not going to change the code until this is done building because i want to i want to show you something in the intent request first that we're going to use to um to know what to code in our skill service and this is kind of a pretty common way at least that i do it so i'll once i make changes to the interaction model i'll generally test first to see what the intent request is going to look like and then you just make sure that the inner that the alexa service is doing what it's supposed to be doing with the uh with the user utterance so i'm gonna go over here and just test this out so tell space facts my name is steve hello and let's make sure that it works so what i'm doing to make sure that it works is i'm looking at the json input and this again is what the alexa service generates to send over to the skill service and if i come down here into the request i can see that the hello intent is the intent that i'm uh i'm wanting and that my utterance here with my slot in it is also being uh recognized here so i can see now in the there's a new slot section down here and then the name name is the name of the slot and the value is steve and that's what i'm looking for when i'm testing now what i want to do is i want to respond back and use that value so i'll say like hello steve or whatever the value of the slot is when it comes over and to do that i'm going to go back over to my skill code here and i'm just going to say respond back with so the input handler here is the object that's going to um the object that's going to include everything that's in the json request so i can sort of navigate this object by looking at the json that's coming over so right now i can see in the request object i've got intent and slots and then name or value name here and then value here so i want intent slots name and value to get this so back over here i can go request intent name dot value slots right slots.name.value and then if i save this let me just double check so request intent slots name value and just confirm over here intent requests intent request intent slots name value okay so now if i test this again my name is steve hello steve okay so this time the response and is using the value that was um sent over for the slot and so just to recap what what we did here so we set up the interaction model with the intent and we added a slot to the intent and we included the slot parameter as part of the utterance so that when the user makes a request to the alexa service the alexa service can identify what intent the user wants and also extract the the value of the slot in this case name so that it can be passed over to the skill service and then once we pass it over to the skill service or the alexa service passes it to the skill service we can use it in our skill as part of the response and this was a really simple example in a more complete example we would do things like check for slots that aren't filled and if they aren't filled and we need the value then we might respond back by prompting the user with a prompt to the user for the the slot value things like that but for for right now we just wanted to step through the uh the process of using slots and uh setting up intents and using them in our code in the the next lesson we're going to step it up a bit and we're going to look at coding using a local editor and the alexa skills kit command line interface and so up to this point we've been doing everything in the browser which is fine for what we've been doing and fine for for simple skills but as you uh as you get uh to building more involved skills it becomes harder and harder to to work in the uh the web editor so we're going to take a look at a local editor and talk about the alexa skills kit command line interface next doing we've done through the browser we set up our skills at developer.amazon.com through the browser and we set up our skills service through aws and lambda also using a browser and being able to do everything in the browser is really nice however as you get more serious about building skills you're also going to want to know how to build skills from your local computer and that is what we're going to talk about in this lesson and to do this there's some software that you're going to want to have and i'm going to talk about the software that that i use and sort of your minimal requirements and then we'll look at it a little bit and move on from there so first you're going to want to have a code editor and there are lots of options here and there's not necessarily a right or wrong choice as long as you can edit text and code it will work the one that i use and i'm going to be using for the rest of the course in the demos is one called visual studio code and it's free it's open source and it's available for mac windows and linux it is uh supported and provided by microsoft so the documentation and support is really really good which is one of the things that i like and there's a great community around it so there's all kinds of plugins and uh themes and and all kinds of good stuff so i like this one a lot like i said before i mean there's lots and lots of editors out there so this is certainly not the only one uh but the one that i'll be using for the rest of the course and and my my my preference this is visual studio code here and uh one of the things that i like about visual studio code is that it has an integrated terminal so the the uh the command line if you're a mac person then you might be used to this and this is the same thing so i can the commands that i can run here i can run down here and that is integrated into visual studio code and the the terminal also works if you're a windows user and you use the windows command line you would have access to the command line here and this is important because a lot of what we'll be doing and what you'll be doing as you're building skills will involve using the command line because the other tool that you're going to want to have is the alexa skills kit command line interface or the ask cli in the ask cli is a a tool utility that allows you to create manage and deploy alexa skills and that means everything that we've done through the web browser can be done from the command line as long as you have the ask cli and so let me let me show you uh what i mean so um here um i've got the alexa skills kit cli installed and i'm not going to walk through installing and configuring the software in this course but i'll leave a link out if you go to devlab.com learn i'll leave a link there to a tutorial that i did that walks through setting up and configuring your your local environment so the alexa skills kit command line interface mainly and uh again i'm not gonna walk through that here so as i'm going in and doing this stuff i've already gone through and set it up and configured it with uh permissions that allow the cli to uh push my skills out to my alexa console and also to aws but with the alexa skills cli installed i can go ask new and this will prompt me for the name of a skill if i want to create one and let's say i want to create one called hello world it's going to create a skill project which is this folder over here and in the skill project i have everything that i need to deploy and create a skill uh both the the skill configuration information for the developer alexa developer council and and also the lambda function and so here's the lambda code there when i did this ask new it provides some boilerplate code when you do that it's sort of like a hello world skill and i'm not going to go through the code yet i'm going to do that in the next lesson but let me show you just by doing this how easy it is to deploy the code from your local computer out to the alexa skills console and lambda so you would just from the directory that you're working in you would go ask deploy like that and now what the ask cli is doing is packaging up the skill uh deploying it out to developer.amazon.com first building the interaction model next and then last it is pushing the um the lambda function out to aws and so this takes a minute for this to happen but what you'll note here is that everything is done from the command line i don't have to go and log in through the web browser at all to do this once it's set up and configured and that is a huge benefit just in your workflow as you're making changes to skills and republishing them and testing them and you can actually also test from the command line here as well but let me go out and just show you what happened we'll start in the developer console just by doing that now if i refresh now there's my hello world skill that was just created using the ask cli and if i go out to aws.lambda or aws.amazon.com to my lambda and you can see that there is also a lambda function that was created for my skill service and i could edit these here because all the code is here and i could edit the skill over here just like we did in the earlier lessons but i don't need to do that anymore because i can make all of the changes that i want to make locally i can edit the code here and i can edit the information as well again in the next lesson i'll go through and kind of walk through what what's going on in here and then i can just do deploy again and all of my changes will be deployed so it's a much uh much better workflow as you start working on especially more complex skills and making changes and uh so that again is what i'm going to be using going forward in the next lesson i'm going to spend a little bit of time going through this uh this code here to give get you familiar with what's going on and then i'm also going to show you how to get some sample code that you can work with to to to start understanding and building your own skills from so that we will talk about in the next lesson okay we're going to pick up where we left off and we're going to take a look at the code that the ask cli creates and how we can modify that code to make changes that we push out to lambda and to the alexa developer council so ask new when we ran that command we got our hello world skill and the if you look in the skill project this folder here you've got a few things here you've got a folder called lambda and this is where all of the lambda code is in this actually this custom folder here and so if we looked at the lambda function in aws actually let's do that we go over here and let's go to our functions here and this is the new one that was deployed if we look in here you can see the files and the node modules and all of the things that are here get deployed out to here and so that is what's in this custom lambda custom folder here and then the interaction model which is in the developer console let's refresh this so in here so the interaction model here is this here so we can change the we can add intents and slots and all of the things that we've looked at uh previously changed the invocation name the default invocation name for this is greeter um so we can change all of that here and then last is the skill manifester the configuration information which is this skill.json file and this file contains settings for all of the additional information that you would have about a skill so things like the public name and the description keywords all of that can be added to that skill.json file and you can use that to make all of your changes so you don't need to log into the developer console through the browser to make changes or logging you don't need to log into aws to make changes to your lambda function so it makes sure again your your workflow just a whole lot better let's let's make a couple of changes just so we can um take a look i'll just make a really simple change here so the default name is hello dash world which is the name that i gave it when we set it up and i'm going to just get rid of the hyphen and i'll just say and capitalize these so hello world like this so small change of course i could go through and edit the description testing instructions example phrases all that but just to illustrate the point i'm not going to do that and then the interaction model change it to my greeter and i'll save that and the lambda function will just make a change to this it says when we opened it up it was welcome to the alexa skills kit you can say hello and i'm going to just change this to welcome to the course you can say hello so i'll save that and so we just made a few simple changes and now i'm going to go down here and do ask deploy again and it's going to go through the same steps it's going to deploy the skill information first and then it's going to build the interaction model next and this takes a little while building the interaction model just like when we do that through the developer console through the web browser that takes takes a minute and that's what's going on right now and then once that's done the last thing is it's going to deploy the lambda code out to aws and um once that's done we can go test it you can actually test right from the command line too we're going to go into the the the web browser just so we can see the see the changes that's almost done here i think okay so now let's take a look so now if we go out here and refresh this we can see the change that i made to the name just remove the hyphen not a big change and then also if i go over here to build and look at the invocation name you can see that it's changed now from greeter to my greeter and then the last piece we'll see if this is finished deploying it is so we'll go over here and we'll test it and see if we get our new greeting so we'll just say open my greeter welcome to the course you can say hello so there's our change so you can see the workflow uh for making changes and updates when you're working with the ask cli and doing everything locally is just really really simple and that's what we're going to be using going forward i want to show you one a couple of other things about the ask cli specifically how you can use templates so the the default when you do the ask new command the default template is that hello world template and or the greeter template which is like a hello world template but if you do ask new and then dash dash template there are some other templates that are available from amazon that you can use as a starting point too so this buttons color changer template city guide decision tree fact which is the space facts template that we looked at previously a rss feed news feed template and then hilo game how to pet match quiz so there's a there's a bunch of them here that you can use as as starting points and we're going to take a look at a couple of those in the next lesson and we're going to look at modifying a couple of templates so that they work as a really good starting point let's for right now just take a look at the fact one because we looked at that before so we'll see what happens uh oh you know what i did i didn't move out of my when i created this i was still in the hello world folder do that again and we'll do this fact okay let's delete this and this is our space fax so the code in and this one is actually a little bit different than the default code that you get when you use the um the blueprint or we didn't use the blueprint but the uh the repository version but uh you can make the changes here again and deploy deploy this if you want to uh if you want to do that the the other thing that i want to show you is um you can also get templates from other locations so the if you do ask new dash dash template uh the default templates are going to come from amazon but you can also get templates from other locations and one of those is skilltemplates.com so https skill templates dot com slash templates dot json like that and these are templates that uh that i created actually and so uh it's a list of just basic starter templates that you can use to um uh to to to get going so like the basic starter one is really similar to the default one that amazon provides with the main difference being the configuration information so in the skill.json it's got all of the configuration information so that when you deploy this it by just changing this json here you're ready to submit the skill for certification you would just want to use your own images of course and keywords and change all this where the the default hello world one doesn't have all of the settings in here and so you end up having to go dig through the documentation to get the settings but those are all provided by this one there's some other templates what we're going to do in the next lesson is we're going to look at diving into one of the templates modifying the template and then deploying the template so that is coming up next so at this point we've covered everything that you need to know for the most part to get your first skill up and running based on a template and what we're going to do in this lesson is recap and walk through all of the steps and i'm also going to talk about how you would go about beta testing skills and also discuss the process of getting the skill certified if you want to develop a skill that's going to be public so we're going to start with the alexa skills kit cli and i'm going to use the ask new and we're going to use a template and there is a template that amazon provides called team lookup and this is like a company directory skill and so we're going to use that one for our example here and so what after you select the template that you want to work with uh and most of the templates provide if you look there's like a readme file and you can go preview like this to read about the template and there's instructions for setting the template up and all that good stuff the things that you're going to want to do um you're going to want to modify the lambda code and the the goal of this course was to um to not get into the the coding part uh so much so we are in the code of course here but we're not really writing code uh so much as just um finding the the pieces that need to be edited if you're working with a template and with this template in most of the templates they're very well documented so you can read the comments and uh sort of navigate your way through what needs to be done in between the comments and the code and the readme file you should be able to uh to navigate easily through this but in this template the team lookup template there is most of what you're going to need to do is just change the references to the people so they've got the development team and the alexa team in here and you can copy and paste and change this to add your own team members in here and then further down there's like the skill name you can change that and you can change the welcome messages and um pretty much anything that you see that's in quotes is something you can change and then i think they say yeah so this comment here so caution editing and editing anything below this line might break your skills so if you're not comfortable coding yet you can just avoid changing any of this stuff down here if if if you are comfortable coding or you want to start learning that templates are great because all the code is provided in all the templates and so you can come and look through the code here to get familiar with what's going on and if you want to build your own skill you can either build it directly based on a template or use some of the code in the template to build your own custom skills so a lot of times they for me will act as a reference you know so you can see how one skill does something and then use that in the skill that you're creating so once you've modified the lambda code the next thing that you would do is modify the model here so assuming that you're not making any major code uh changes all you would need to modify in the model is just the invocation name so the name that you're gonna use or the user is gonna use to start the skill up and then the last thing is the skill.json here so this is all of the setting information that's going to be used in the alexa developer console so this is going to provide the name of the skill here and you can change that and the description um the example phrases so you're going to want to go through and edit all this you're probably going to want to provide your own icons and so you would use 108 by 108 is the small icon 108 pixels by 108 and then the large icon is 512 by 512 so you would want to provide a url to the icons that you're going to use for your skill and then at this point once you've modified everything then you would just deploy it so you would move into the team lookup folder and just do ask deploy like that and the cli is pushing the skill out to the developer console and then building the interaction model which takes a minute and then it's also going to deploy the lambda function and while that's happening let me show you one other resource that you you might want to use if you go to alexa.amazon.com and log in this is going to provide you with the equivalent of what you get in the alexa or in the echo alexa companion app for the amazon echo so if you've got an amazon echo and you've installed the app for ios or for android this is going to provide the same kind of functionality so this is where you would go and search for and enable skills and also on the home screen where you would see any card so if in a skill you can write back information to the companion app using cards and you can see this is a card that was written back earlier when we were working with the hello world skill and so if you want to test that you can use the alexa.amazon.com to to do that the other thing worth pointing out in here so if you're wondering if the name a name that you want to use for a skill has already been used you can search here for skills and find similar skills if you're trying to get inspiration or if you're trying to make something that's a little bit different and wondering if somebody's already built it and then over here your skills this is going to be a list of skills that you have enabled and then you'll see under dev skills any skills that are in development so like here's our team look up skill here and i would bet by now this is all deployed and it is okay so the next thing that we would do once the once the skill is deployed then we're ready to invite some beta testers and then once we get the beta testing process done and we've got the feedback that we need then we're ready to deploy it to the public skill store or maybe you just want to deploy it as a company skill and i'll show you how to do that so you're going to do that from in the developer council here so once you once you've deployed this skill you can go back into the developer console and here you would edit go to edit for our team look up and then you're going to go to so we we test ourselves while we're in development but then we also want to beta test and to do that we would go to launch here and provide all of the uh the details for the skill and this is the stuff that we provided inside the alexa.json file so here's like the reference to the image that are provided we would change those of course the only thing that is not provided at least in this one is the the privacy policy urls because these are going to be the urls that would point to your privacy policy of course so i'm going to do mine and also to your terms and conditions so you you these are required you need these if you're going to publish the skills so you'll need something out there and then save and continue and then there's some questions about um that you need to answer for the certification process does the skill allow users to make purchases or spend money you want to go through and answer all these and provide any testing instructions that if there are any any special instructions that you would want the testers to know and then save and continue and then the last step here is to choose how you want to publish the skill and so you can publish it publicly in the skill store and this would make it available for anybody to enable you can publish it for just your organization you would need to have alexa for business set up to to do that or you can use the beta test option here and so to beta test you provide your email and you're going to be the administrator so whatever your email is and then down here you would provide a list of email addresses for each one of the beta testers and you can upload a list in a csv format or you can enter individual email addresses separated by a semicolon and you can have up to 500 of those the email address needs to be an email address that corresponds with an amazon account that is associated with either you know in a an amazon developer account or one that's used for an amazon echo and then the user or the beta tester is going to get an email and in the email there's a link that they can use to enable the skill and when they enable the skill it will show up in their skill list as a skill that's in development also so these are some skills i was invited to test which is why they're showing up and so if you got an invitation uh or your once your users get an invitation then they would be able to test the skill using their amazon echo even while it's in development before it's publicly available just like you can test it as the developer so that is the process for configuring the skill start to finish or using the template and then configuring it for beta testing and once you're done with the beta testing at this point you just save and continue to submit the skill for if you wanted to go public to submit the skill for certification and the certification is um pretty quick it's like a couple of days at the most usually and if the the skill if there's a problem with certification the response back that you get is um very detailed in my experience so they'll tell you exactly why if it fails certification why it failed and what you need to do to resolve that and um yeah so that is it at this point again you have everything that you need to get your first skill up and running based on a template and that is where we're going to to wrap up in the next video i'm just going to do a high level recap and talk about some resources and some things it's kind of next steps that you might want to to take a look at or that you might be interested in congratulations you've completed the course you should now have a solid introductory level understanding of how to build custom alexa skills and hopefully you're pretty close to having your first skill completed from here you'll want to practice what you've learned so far and then move on to some more advanced topics and here are some suggestions for possible next steps first head over to dabilab.com learn there you'll find links to all of the resources that i mentioned in this course and you can also subscribe to get notified when this course is updated or when i publish a new course i am planning on publishing more advanced courses so hopefully if you liked this one and you want to dive deeper you'll want to check those out too also alexa is constantly evolving and as a result this course will have revisions so by subscribing i'll let you know when those updates happen next you'll want to check out the dabble lab youtube channel at youtube.com there you'll find over 50 alexa development tutorials that complement this course you'll also want to go to github.com alexa to learn more about the alexa sdk for node and while you're there start digging through some of the code for the sample skills that amazon provides and we've also created some sample code starter templates that you can use and you'll find those at skill skilltemplates.com well that's it i really hope that you enjoyed the course but i also hope that you'll let me know if there is anything that you think i can do to make it better finally if you have any questions about anything that i've covered don't hesitate to leave a comment and i'll respond just as quickly as possible hey thanks again for taking the course i hope to see you in a future course
