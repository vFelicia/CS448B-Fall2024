With timestamps:

00:00 - Joy is a great teacher who has 
created many amazing courses  
00:04 - and written a bunch of helpful 
technical articles. In this course,  
00:08 - He will teach you how a sink await 
and promises work in JavaScript.
00:12 - Hey guys, you're here in this video, we're gonna 
make ice cream and learn Asynchronous JavaScript.  
00:17 - Yes, you heard me right, we're gonna 
make ice cream today. And along the way,  
00:21 - we're going to discuss three topics, callbacks, 
promises, async await along with examples,  
00:26 - the video will go like this over here, we're going 
to make the main project, which is the ice cream  
00:30 - project. And over here, we're going to look at 
some examples so that you can better understand  
00:35 - how the system works. But the first question 
is, what is Asynchronous JavaScript? And why  
00:40 - should you even care? If you want to make bigger 
projects more efficiently, then this is for you.  
00:45 - What Asynchronous JavaScript does is it allows you 
to break down bigger projects into smaller tasks.  
00:52 - And then using any of these three methods over 
here, either callbacks, promises or async await,  
00:57 - what you can do is you can form a 
connection between these small steps  
01:01 - in a way that you can get the final result. So 
here's an example of what I mean. So this is the  
01:06 - ice cream that we're gonna make today. Here's the 
ice cream. Okay, so using Asynchronous JavaScript,  
01:12 - we can break it down into smaller steps. If we 
do that, it looks something like this, you can  
01:17 - see that these are the seven steps to make ice 
cream first, starting with the Place Order, then  
01:22 - we're going to cut the fruit, then we're going 
to add water and ice, so on and so forth. And at  
01:26 - the very last, we're going to serve ice cream. To 
make you understand this topic even better, I have  
01:31 - added some time function as well. You can see this 
over here, it takes two seconds to place the order  
01:37 - two seconds to cut the fruit one second to add 
water and ice, so on and so forth. And at the  
01:42 - very last we're gonna serve ice cream, take the 
money and buy ourselves a Lambo, because why not?  
01:48 - If you want to learn Asynchronous JavaScript 
better and know the difference between two things,  
01:52 - synchronous and asynchronous system, let's 
start discussing with the synchronous system.  
01:57 - Let me explain this to you in clear words. Let's 
say that I have given you 10 tasks and just one  
02:03 - hand 10 task one hand, so how will you do the 
task? You are going to do one by one, right? Like  
02:08 - this look, 123. So we are in tax number three, 
right? You cannot jump to the tax number seven  
02:16 - unless you do 456. And then seven. Right. So what 
are you doing? You're doing one by one, right.  
02:25 - But in the asynchronous system for 10 task, 
you will be given 10 hands so that you can work  
02:30 - independently without depending on anyone. Look 
at this image over here. This is a synchronous  
02:36 - system, they are loading one by one, the second 
image doesn't load unless the first one does.  
02:43 - And the third image doesn't load unless the 
second one does, which means that they're  
02:47 - following a order like this 123. And on the 
asynchronous way, you can see that nobody  
02:54 - depends on anyone they are loading on their own 
pace independently. By the way, I wrote an entire  
03:00 - article on the topic that we're going to discuss 
today so that you can understand it better.  
03:04 - At the same time, you can revise it from 
here more easily, efficiently and quickly.  
03:08 - Link of this article will be given in the 
description down below, go and check it out.  
03:13 - To summarize, let's say that we're setting up 
a marathon for three persons, how many person  
03:18 - three person, if you are doing it in the 
synchronous way, what will happen is you just have  
03:23 - one single lane, and you have to place those three 
persons on this single lane in this area of 123.  
03:31 - And the rule is nobody can overtake the other, 
everyone has to finish the race one by one. Look  
03:38 - at this image over here. This is the synchronous 
system. This is the finish line over here. Okay,  
03:43 - and the images, which is the person's One, two 
and three are standing on the same lane, which  
03:50 - lane same lane and nobody can overtake the other, 
everyone has to finish the race one by one. So the  
03:58 - person three or the image three will finish the 
race first, then the second one and the first one  
04:04 - like this, the single lane, the synchronous 
system. If anyone stops, the entire process stops.  
04:10 - If the image three stops over here that everyone 
has to stop. And if we are setting the marathon in  
04:16 - an asynchronous way, for three persons, we will 
have three lanes. If we have more participants,  
04:22 - then the number of lanes will also increase, 
which means that nobody stops for anyone, they can  
04:28 - finish the race independently on their own pace. 
If anyone stops, then the system still continues  
04:34 - to run. Look at this image over here. This is 
the finish line and this is the participants  
04:40 - over here and these are the lanes Okay, lane 
number one, two, and three, the image one, two,  
04:46 - and three. They're gonna finish the race on their 
own pace. I hope you understand the difference  
04:51 - between the synchronous and asynchronous system. 
Let's look at some examples right now. You can use  
04:57 - any code editor you want but for this tutorial, 
I'm going to write Don't go pen because it has  
05:01 - a simple interface. So you can follow along 
with me if you want. So open code pen.io. And  
05:07 - then you click this pen over here, then you're 
going to click this small pen icon over here,  
05:13 - and you're going to name this project, anything 
you want, I'm going to write it async j s.
05:21 - Okay, and then you save it Ctrl F, like this Ctrl 
S. And now you're going to drag it in the middle,  
05:28 - like this, and double click on the JavaScript 
section like this, and it's going to expand.  
05:34 - And in order to open the console, you're 
going to click this small icon over here,  
05:37 - you can see that like this, double click on here, 
and it's going to expand like this, we need to  
05:44 - know we need to do one more setting, you come over 
here, this small gear icon over here, click it,  
05:49 - click on behavior, and you enable everything 
except this one, the auto updating preview. Okay,  
05:56 - turn it off, Save and Close. And then we're 
going to manually get a run button over here.  
06:01 - Why is that? That's because every time we write 
a single letter, corporate runs it automatically,  
06:07 - which means that every time we write a single 
letter, we're going to get an error after error  
06:12 - after error. In order to avoid that I have turned 
off this setting. Every time we finished writing  
06:18 - our code, we can manually run it like this. Okay, 
now let's look at the synchronous system example.  
06:24 - So we're here we write synchronous si nc HRONOS 
synchronous like this. And you comment this like  
06:31 - this. And over here, we're going to write console 
dot log five times how many times five times like  
06:37 - this following console dot log, okay, brackets, 
double quotes space over here, okay, you copy this  
06:45 - Ctrl C, and then Ctrl, v 510s. Okay, 345. It's 
some gap over here as well, additional gaps,  
06:56 - like this. Alright, so over here, we're going 
to write a full sentence. Okay, I eat ice cream  
07:03 - with a spoon. So again, divided by phrases, okay, 
then follow me along. I eat ice cream. With sorry.  
07:23 - Spoon, okay, Ctrl S to save it. And then 
you're going to click this run over here.  
07:28 - And then we're going to get the result, 
there we go, you can see that our phrases  
07:34 - are printed one by one serial. That's because 
JavaScript runs from the top to the bottom,  
07:40 - how does JavaScript run from the top to the bottom 
serially? In this process, if anyone gets stuck,  
07:47 - then the entire process get stuck. This is the 
synchronous system. If you change the sale,  
07:54 - let's say that I want to change the spoon from 
here to here, okay, Ctrl x, and then you paste  
08:01 - it over here, Control V Control F, you clear this 
console over here, and then you run it again,  
08:07 - let's see what Let's see the result. Now you can 
see that I eat spoon ice cream with a you see  
08:14 - the JavaScript doesn't care about anything is 
gonna run the code from the top to the bottom.  
08:20 - This is what the synchronous system. Now 
let's look at the asynchronous system.  
08:25 - Now over here, right, asynchronous, okay, a 
synchronous done, clear the console over here, you  
08:32 - change the CL Ctrl x. Okay. And we're here Ctrl 
V Ctrl S. And now come over here at the bottom, I  
08:41 - need to make you understand a small function named 
set timeout function, which is a built in function  
08:47 - of JavaScript. What this does is it allows you 
to run a function after a specific amount of  
08:54 - time. So you write set timeout set, then capital 
letter T, timeout, this one, okay, then brackets,  
09:03 - the first thing that we are going to 
pass as an argument is a function. So  
09:07 - we're going to use the arrow function, don't 
worry, I'm going to explain arrow function  
09:12 - and the regular function with the arrow function 
like this, okay, equal to this sign curly braces.  
09:19 - Now let's look at the difference between function 
the regular one and the arrow function. Okay,  
09:24 - in the regular way, we write a function like 
this first, the function keyword, okay, then  
09:29 - we're going to name it like this A, B, C, D, E, 
F, G, however you like, right? Then you put that  
09:36 - then you put that bracket like this, okay? And 
then curly braces, this is the regular function,  
09:42 - but in the error function, how we write it is 
we're going to write either late var or const.  
09:49 - Okay, like this. And then we're gonna put the name 
over here. What was the name of this function? A,  
09:54 - B, C, D, D, right? So we're gonna write ABCDE 
D, which is the name of that funk. Like this,
10:04 - like this, and that equals, and then we're gonna 
put brackets over here and then this sign over  
10:11 - here, the arrow sign, and then curly braces. On a 
regular function, we used to put our arguments on  
10:17 - this bracket like a, b, c, d, etc. In the arrow 
function, we place our arguments over here, A,  
10:27 - B, sorry, D, C, D, etc. I hope you understood the 
difference between two for this project, I'm going  
10:35 - to use an arrow function. Okay, the latter one, 
this one. So once we have entered the function  
10:41 - inside the set timeout as an argument, the next 
thing that we're going to put is the time, okay,  
10:48 - so it is actually counted as milliseconds. If 
we write 1000 is going to count as millisecond,  
10:54 - which means one second. So if we write, let's say, 
3000, it means 3000 milliseconds, which is three  
11:01 - seconds. Okay? Now come over here. Let's say that 
I want to cut this and place it inside this set  
11:08 - timeout function. How will you do it? We'll cut 
it like this Ctrl x. And that insight over here,  
11:14 - this curly braces, we're going to place it over 
here, okay. Ctrl V. And now let's change it to  
11:19 - four seconds. By the way, it said timeout is a 
asynchronous function, okay. You got this from  
11:25 - here, Ctrl x, and you paste it over here. Ctrl 
V, like this Ctrl S to save it. And then we're  
11:33 - going to press this run function. But before that, 
do you remember what I told you? JavaScript runs  
11:38 - from the top to the bottom how from the top to 
the bottom. And let's see how this works. Okay,  
11:44 - run it like this. And let's see the result. 
Now you can see that we have got, I eat with  
11:51 - a spoon. And then after how many seconds after 
four seconds, we got the ice cream over here.  
11:57 - Now how does this system work? This is an 
asynchronous system. Okay, asynchronous system.  
12:03 - Look, the cereal is over here. Okay, I eat ice 
cream with a spoon. The sale is over here as well,  
12:09 - you can see that I eat ice cream with it spoon. 
The system is actually working like this Look,  
12:15 - I eat and then this ice cream over here it 
has a set time of function, which means that  
12:20 - we're going to have another hand over here 
is going to take this function at the side,  
12:26 - which is our second lane. Okay, this 
is our main lane. I mean main road,  
12:31 - this is the secondary road, it is taking that 
asynchronous call at this hand. And after four  
12:37 - seconds is going to release it on our main lane 
like this. Until then what will happen Look, I  
12:44 - eat ice cream is an asynchronous call, which 
means that is going to take it over here,  
12:50 - after four seconds is going to get released, then 
with a spoon after four seconds is going to come  
12:57 - over here. So this is how the asynchronous 
system works. I hope you understood it.  
13:03 - Now we're going to start our discussion with 
callbacks. But before that, if you're new to  
13:08 - the channel, feel free to subscribe because I 
post videos based on practical work projects  
13:12 - so that you can level up your coding skills. If 
that sounds interesting, hit the subscribe button  
13:17 - and join my gang under the further ado, let's 
get started. Let's talk about callbacks. What are  
13:23 - they? In simple terms, very simple terms. calling 
a function inside another function is called a  
13:30 - callback. In even more simple terms, what it does 
is it forms a connection between what functions.  
13:38 - Let's look at one example with callbacks. And 
then we're going to start our ice cream business.  
13:43 - Again, back to code pen. you delete 
everything okay? Ctrl A, then delete. Okay,  
13:49 - you clear the console over here as well. Ctrl 
S. Okay. So what did they tell you before  
13:55 - callbacks means calling a function inside another 
function. So we'll create two functions to form  
14:01 - the relationship. What relationship Okay, function 
one, function two, like this. function, one, okay.  
14:10 - We're going to use a regular function. Nothing 
complicated. No politics here. Okay. Function  
14:16 - two. Okay, now inside function one, what we're 
going to write is console dot log, okay, console  
14:25 - dot log. Over here, we're going to write function 
one, or let's write step one. Okay, step one,  
14:33 - of sorry, like this step one. In fact, we're here 
we're going to write console dot log, step two,
14:48 - like this, in order to run this 
function, what do we do we write  
14:52 - the name of the function at the bottom like this 
look. We call it like this one, then brackets over  
14:59 - here. Control As you run this button over 
here, after you clear the console, okay,  
15:04 - run it like this. And we're going to see step one 
on the console. Let's wait, there we go. This is  
15:10 - step one. Okay? And how do we call the function 
two in the same process, we write it over here.  
15:16 - I mean, we call it over here like this, okay? Ctrl 
F. Don't forget to clear the console over here,  
15:21 - create like this, and then you paste this run 
button. Now you can see that we have step one,  
15:26 - step two, that's because we have an order, right? 
JavaScript runs from the top to the bottom.  
15:33 - Look which one is first one is first, 
and then to what if we reverse the order  
15:40 - before I do first and then one like this Ctrl x 
Ctrl V like this. So first is two and then one.  
15:47 - So what will happen to will run first 
and then one, clear the console. Save it,  
15:54 - run it, you can see that we have step two first. 
And then step one, these are regular functions.  
15:59 - Now let's form a relationship between these 
two using a callback what a callback. Okay?  
16:05 - Let's remove this. Okay. Now we're going 
to make a connection of function to  
16:10 - inside function one. So how do we do it, we do 
it easy a argument, we're gonna write over here  
16:18 - called to see a double L, hyphen, okay? This 
is nothing, this is just an argument, okay?  
16:25 - Nothing else. And over here, we're going to write 
step one complete. Okay? This is nothing special,  
16:32 - this is just gonna get printed on our console. 
Okay? Please call step two, like this. Okay. Oh,  
16:43 - like this. Now, in order to provoke function to 
what we do is, we take this argument over here,
16:51 - called
16:52 - to, and then, as number two function is 
a function, what we're going to write  
16:59 - is we're going to give brackets over here 
like this. And now it's going to call it  
17:04 - every time. Once our console dot log is 
printed like this, look, we don't have  
17:10 - to call to anymore, we just call one, one. 
And then inside over here, we're gonna pass  
17:16 - function number two, which one function number 
two, okay, to like this, look, how do they form  
17:22 - a relationship between these two? If you clear the 
console, save it, run it, let's see the result.  
17:28 - Look what is happening, step one, complete, please 
call step two. And then we have the step two.  
17:35 - If you remember, JavaScript runs from the top 
to the bottom, right. So our console dot log is  
17:41 - at the first and then call to, but if you 
reverse the order, what will happen? Let's see.  
17:48 - Ctrl x, okay. Call it over here, Control V, 
Control S. Okay, and now clear the console,  
17:57 - run it and let's see what happens. Now you can see 
that step two is first and then step one complete  
18:02 - place called step two. Don't worry about this. 
If you don't understand it, we're going to look  
18:07 - at another example right now. For that we're 
gonna start our ice cream business right now.  
18:12 - For that we need to know the relationship 
between our customers and us. You can see  
18:17 - that this is the flow Okay, first we get the 
order from the customers, then we're going to  
18:22 - fish the ingredients. Then we're going to start 
the production and then we're going to serve  
18:26 - ice cream. Okay, so we're going to create two 
functions, how many functions two functions, order  
18:31 - function, production function, okay? If we don't 
get the order, we cannot start the production.  
18:38 - This is how we're forming a connection between 
these two functions using what Tell me using  
18:43 - a callback. Come on. Let's go to corporate and 
see the example. Come over to copan over here,  
18:48 - you delete everything. Okay, we're going to use 
arrow function what function arrow function,  
18:54 - right lead, first is order because without the 
order, the production doesn't start okay. Order  
19:01 - equal to brackets, then arrow 
sign curly braces like this. Okay,  
19:06 - now write the production function, but before 
that clear this console, okay? Let production  
19:15 - duction here we're going to make the ice 
cream. Okay. So once we get the order, we're  
19:20 - going to start the production of ice cream, okay. 
Production equal to brackets, arrow sign curly  
19:27 - braces like this. Okay? Now in order to form that 
connection, that every time we get the order, the  
19:34 - production will start. We do it like this. Okay, 
you come over here. Okay, you pass an argument.  
19:41 - We're going to name it call production, 
okay. Call underscore, pro dot tion, okay.  
19:49 - And inside these curly braces, we're going to 
write the same thing. Okay, the exact same name  
19:54 - Ctrl C Ctrl, V over here and then brackets 
Okay, brackets like this. And look at there.  
20:02 - We have formed a relationship between these two 
functions is it what a callback now let's test  
20:07 - it. Now we're going to write console dot 
log, console dot log, okay? order placed,  
20:18 - please call production like 
this, okay. And inside over here,  
20:26 - we're going to write console dot log console 
dot log order received. Starting broad duction.  
20:40 - Like this, okay. Now in order to run our 
function, what we'll do is, we're gonna  
20:45 - write order over here or there, and inside that 
order, we're going to write the production.  
20:52 - We're going to pass this function over 
here inside here, okay, bro. duction,  
20:56 - like this. Okay, so Ctrl F, clear the console, 
save it, run it. Let's see what happens.  
21:02 - Now, you can see that we have order placed, please 
call production. And then we got order received,  
21:10 - start production. I hope you understand how the 
system works, or forming relationship between  
21:17 - functions using a callback. Now let's understand 
one more thing, the relationship between the  
21:22 - front end and the back end. The front end is 
our kitchen where we will make the ice cream  
21:27 - and the back end is where we'll store ingredients 
like fruits, liquid stuffs, missionaries,  
21:36 - raw materials, chocolate, etc. You know what raw 
materials means, right? The stocks, our stocks,  
21:44 - the stocks is a back end kitchen is the front end, 
okay? So we're going to store our stocks inside a  
21:50 - variable, okay, so come over to code pen over here 
at the very top, okay. Keep some space over here.  
21:56 - And we're going to write let Okay, net stocks. 
So this variable will hold all of our stocks,  
22:03 - like fruits, liquids, holders, toppings like 
chocolate, peanuts, etc. Okay, and that's equal  
22:11 - to we're going to create a object over here 
like this object, okay? And inside the object,  
22:17 - we're going to write arrays like this look, 
f are you IDs Okay, then colon over here,  
22:24 - we're going to store all our foods 
inside what an array Okay, like this.  
22:29 - Then we're going to write the name of our 
fruits. As I have defined them over here,  
22:34 - I'm going to copy it over here. Okay. Ctrl C, and 
then Ctrl V over here. Now pause the video, take a  
22:44 - moment to write these foods. Okay. Now how do we 
access a single stock from this variable? Okay,  
22:50 - we comment everything from here from top to bottom 
like this, comment this like this. And in order to  
22:57 - select one stock, we'll do it like this. First 
of all, we write the name of the variable What  
23:03 - is the name of the variable stocks Okay, sto ck s 
then dot y dot because it is an object in order to  
23:11 - access the object we need to form a dot and then 
the name of the object is which is fruits, okay,  
23:17 - capital letter F r u IDs. And then what is this, 
this is an array. So how does the array works is  
23:25 - it is arranged in the order of 012 and three, 
okay? So you know, x is that you right,  
23:33 - square bracket, okay, and then if we want to 
access the banana, let's look at the order 012,  
23:40 - we write two over here. Okay, and now let's print 
on the console. In order to do that you write  
23:46 - console, dot log, then bracket at the end bracket, 
close it, Ctrl S, clear it, and then run it.  
23:56 - Look, we got the banana. In the same way we have 
more stocks, we have the holders, the cups, cone  
24:02 - sticks, and the toppings as chocolate sprinkles. 
So this is the variable that I have created. Okay,  
24:07 - I'm going to copy it from here Ctrl C. And 
then over here, I'm going to paste it Ctrl V.  
24:12 - Now pause the video, take a moment and 
write this talk on your code editor.  
24:16 - So once that's done, you clear this from 
here. Okay, clear the console and you bring  
24:23 - all of this back, okay, like this. There we go. 
Okay, now we're going to clean our console from  
24:30 - here remove this and we're going to remove this 
Okay, and keep everything else and then you come  
24:36 - in this form here, okay? Now Now the first thing 
is the order right customer places the order  
24:42 - the order is changeable, which means how many 
options do we have? Look at our menu, we have the  
24:47 - strawberry, grapes, banana, and Apple which means 
that the customer can pick anything he wishes,  
24:53 - which means that for this we need a variable. 
So over here we're going to write fruit, name  
24:59 - f Are you it? Okay, underscore and me 
like this 10th place Come over here.  
25:06 - So we have two arguments, the fruit name and the 
call production, the Customer Picks the fruit,  
25:13 - it gets over here. And then we get to 
know that what the customer picked.  
25:18 - And then we're going to start the production. 
This is how we're forming a relationship between  
25:22 - our functions. Okay. And over here, you uncomment 
this, and we need to keep it blank for now. Okay,  
25:30 - you give double quotes over here, then comma, 
okay, it's Ctrl S, if you remember, this is  
25:36 - our steps along with a time. So in order to ensure 
the time function, we're going to use set timeout.  
25:42 - And we're going to print the steps on our console. 
Okay, so follow along with me. First of all,  
25:47 - we're going to place the order by picking a fruit 
name, Okay, come back to VS code over here. And,  
25:55 - and in order to select the fruit and place the 
order, it takes two seconds, how many seconds,  
25:59 - two seconds. So come back to VS code over here 
and inside this order function. Okay, come  
26:06 - here and write console or before granting 
console dot log, you have to use a set  
26:11 - timeout function because it takes how many 
seconds, two seconds, set timeout like this.  
26:18 - And inside over here, we're going to use an arrow 
function. You can also use an anonymous function  
26:23 - like this look, function bracket curly braces 
like this, but we're going to keep it simple.  
26:30 - We remove this, remove this function from here, 
and you're going to give that arrow sign like  
26:36 - this, okay? And at the end, we're going to place 
the time function, okay, how many seconds, two  
26:42 - seconds. So we're gonna write 2000 milliseconds, 
okay. 2123, like this. And inside over here,  
26:48 - we're going to write console dot log, because 
we're going to, because we're going to print the  
26:53 - result on our console. Okay, and use a backtick. 
We're not going to use double quote, no, no,  
27:00 - we're not using double quotes, we're going to use 
a backtick. What backtick if you want to access  
27:05 - the backtick, look at my keyboard over here. This 
is the exit key. And this is the key to write  
27:12 - backticks. Okay, so you click this just once, and 
it is going to print us two backticks like this.  
27:18 - Now, we're going to pause this fruit name inside 
this console dot log. So how do we do this? First  
27:23 - of all, we're going to write $1 sign, okay, what 
$1 sign, dollar sign and then curly braces like  
27:29 - this. And then we're going to place this inside 
here, but before that, we need to write something.  
27:34 - We need to write the stocks. Okay? There's because 
we're picking it for stocks, right? So stocks,  
27:42 - then the name of our fruits, okay, 
so dot F r q IDs, and then what?  
27:50 - square brackets right square brackets over 
here, and then we're going to pass this  
27:54 - inside there, okay? Ctrl C, Ctrl, C, and 
then write Control V over here. Okay,  
28:00 - now we're going to save it. Let me show you 
how the system works. Okay, so over here,  
28:05 - we're going to write zero Ctrl F to the console, 
run it, let's see, what do we get on the result?  
28:13 - We got strawberry, you can see that the first 
fruit on our stock is a strawberry right? I  
28:19 - explained this to you right, if you can recall how 
to access the stocks, we do it like this stocks  
28:26 - dot F r u it s then square brackets and then the 
name of our food, I mean the order of I mean the  
28:34 - order of the food 0123 right. So I have placed 
this inside over here. And then inside the array,  
28:43 - I have placed this and over here I have placed 
zero which means that this zero is coming over  
28:48 - here, which eventually means that we are going to 
get the strawberry, I hope you understood this.  
28:53 - Nothing complicated. Okay, stocks dot fruits, 
then this and over here you write was selected  
29:02 - like this, then Ctrl F, clear the console, run it. 
Let's see what we get. Strawberry was selected,  
29:11 - you can see that you're gonna notice that we got 
the result after two seconds. Why is that? That's  
29:16 - because we are using a set timeout function 
over here, which takes two seconds. I mean  
29:20 - it I mean it prints a result after two seconds. 
Okay, let's start writing inside our production  
29:27 - function. Okay, so come over here, we're going 
to use another set timeout function which  
29:31 - runs in zero seconds. How do you do it? We do it 
like this right set timeout, bracket and plus a  
29:38 - function over here like this arrow function, okay. 
And that is going to run in zero seconds, how many  
29:43 - seconds? zero seconds. So right 0000. Instead, 
over here, we're going to write console dot log.
29:52 - And write production has started. And that is 
because we got the order right production have  
30:00 - started Ctrl S to clear the console. Let's run 
it. So we're going to get the result after two  
30:08 - seconds, one, two. There we go, we have the 
production has started and then strawberry was  
30:14 - selected. Now we are seeing a or behavior over 
here. Why is that we were supposed to get this  
30:21 - one first and the production has started at the 
last. That's because if you focus over here,  
30:26 - you can see that look at the order, okay, 
JavaScript runs from the top to the bottom. Okay,  
30:31 - so it is saying that this is a set timeout 
function, which means that it's going to take  
30:36 - two seconds and this one, this is going to take 
how many seconds, zero seconds, Okay, this one  
30:41 - will be stopped, this is over here. And this coal 
production will start immediately. So this is  
30:48 - the coal production, which is production has 
started over here, and strawberry was selected,  
30:53 - this is over here. That's why we're getting 
this order. But if you want to fix that,  
30:57 - what you have to do is you're going to cut it 
from here Ctrl x, and you're going to place  
31:02 - it where inside that set timeout function. 
Okay, like this look Ctrl V over here, okay.  
31:10 - Now what will happen is, it's not going to start 
the production unless the fruit was selected.  
31:17 - Now let's save it, clear the console 
and run it and let's see what happens.  
31:22 - One, two. So you can see that after two seconds, 
strawberry was selected, and immediately we got  
31:29 - the result production has started there is because 
we have said two seconds for which one strawberry  
31:35 - was selected and zero seconds for which one 
production has started like this. I hope you  
31:40 - understood so far. Now let's look at our second 
step, which is we're going to cut the fruit and  
31:44 - it will take two seconds. So come inside the 
production function, we are done with our order  
31:50 - function, okay, you can minimize it like this. We 
don't need it anymore. And don't make that mistake  
31:55 - again. Otherwise, you're going to get the reverse 
order, which we watch previously, which is we got  
32:01 - the production first and the strawberry at the 
last. Don't write it outside, okay. Don't write  
32:06 - it over here. You're going to write it inside this 
set timeout function. Okay. So you come over here,  
32:12 - and we're going to write another set timeout. 
Okay, it's gonna be two seconds, how many  
32:17 - two seconds, set timeout, okay, brackets, and then 
pass a arrow function like this. Okay, arrow sign,  
32:25 - curly braces, and then the time function, okay, 
how many seconds, two seconds. 2123, like this.  
32:31 - And inside over here, we're going to write the 
food has been chopped console, the log. Das fruit  
32:41 - has been shot Ctrl F, the let's clear the console. 
Save it. Let's run it and see what happens. One,  
32:51 - two. Again, one, two. So we're getting the 
strawberry after two seconds. We have got  
32:59 - the production immediately. And then we have got 
the fruit has been shoved after another additional  
33:04 - two seconds. Now our system is running perfectly 
fine. Now let's follow the steps and complete our  
33:11 - ice cream production so that we can buy ourselves 
a Lambo because why not? Now the third step is  
33:17 - to add water and it takes one second how many one 
seconds. So inside the production function, where  
33:23 - will we write, we're going to write it inside 
this set timeout function. So this is the parent  
33:28 - children, it will be the grandchildren. 
Okay, so the food has been chopped over here.  
33:34 - Enter to give some spacings and you're gonna 
write set timeout like this, okay, brackets,  
33:40 - then pause the arrow function like this equal to 
Okay, clearly basis. Don't worry, I know where  
33:46 - we're going. We're going to a callback hell, 
his collar callback hell, and I'm coming to  
33:51 - the point don't wait, don't, don't panic, okay. 
And over here, you write the time function, okay?  
33:57 - 1000 seconds over here like this. Okay, and 
inside over here, console dot log like this.  
34:05 - Okay, inside over here, we're not going to write 
double quotes, we're going to write backticks.  
34:11 - That's because we have to add water and ice and 
the water and ice inside our stocks over here,  
34:16 - which is the liquid and then water ice zero and 
one in order to pick them. Pay close attention  
34:23 - to what I write over here. Okay? Don't focus on 
anything else. 123 This is the third step. Okay,  
34:30 - inside over here. backticks What backticks like 
this dollar sign, and then curly braces, okay,  
34:38 - curly braces like this, any right end over here, 
okay, and then curly braces, again like this.  
34:45 - Along with the dollar sign. Okay, you're 
going to, you're going to write was added.
34:52 - So, if you translate, it sounds like this dash 
and dash was added. So we're going to write  
35:00 - So we're going to pick the water and ice. So first 
of all, you're going to write stocks. Okay? stocks  
35:07 - dot liquid, okay? As because it is the 
name of that object, liquid and then  
35:13 - square brackets like this. Over here 
you're going to write zero. Okay,  
35:18 - that's because it will select the water. The 
first thing is the water and then we have the ice  
35:24 - in order to pick that ice over here, okay, 
we're going to write stocks, dot liquid.  
35:31 - Okay, then square brackets, we're gonna write one 
and it will pick the ice like this, okay? Ctrl F.  
35:38 - And then we have also set it to one second. 
Okay, so we're going to get it after one second,  
35:43 - clear the console. Save it right, let's count one, 
two, again, 121. Now we can see that we got this  
35:55 - after two seconds, we got this immediately, we got 
it after two seconds, and an additional one second  
36:02 - later, we got water and ice was added, which 
means that our function is running properly.  
36:09 - Now we're gonna start the machine, it will take 
one second, okay? Inside this, okay, stocks,  
36:16 - dot liquid, I mean, where we have selected 
the water and ice, okay, so inside over here,  
36:23 - we're going to write set timeout. Okay, good. 
Then the arrow function over here, curly braces.  
36:30 - And over here we're going to write what the 
time function okay? 1000 seconds like this.  
36:34 - And inside here, we're going to write console dot 
log. And then we're going to write the machine  
36:42 - was started. Let's write the machine 
has been started. Made the machine has  
36:50 - been, let's write the machine was started. 
Okay, Ctrl S, let's complete all of our  
36:58 - steps and then run it together. Okay. The next 
step is we need to select the container. Okay.  
37:04 - Now, if we come over to the stocks, 
you can see that on the holder object,  
37:08 - we have a lot of options. We have the cone, 
the cup and the stick. Let's pick the cup.  
37:13 - No, I changed my mind. Let's pick the cone. Okay. 
In order to do that, you can go here, okay, where  
37:19 - the machine was started, okay. And at the bottom 
over here, we're going to write the set timeout.  
37:24 - So the cup takes two seconds, okay. So you're 
going to write set, timeout like this, okay?  
37:31 - Give some space. Otherwise, you're going to 
get confused by yourself. Okay, set timeout,  
37:37 - and then brackets. Then over here, you're 
going to give that arrow sign, I mean,  
37:43 - the arrow function and then you're going to set it 
up. Sorry, the time over here. Okay, two seconds.  
37:50 - And then you said over here, I'm going to 
write console dot log, we have pick which  
37:56 - one? The code right, let's see that where is the 
code? holder? Okay. Stocks dot holder dot zero.  
38:06 - Okay, let's write it over here. Okay, don't get 
confused. It is over here below the machine. Okay,  
38:13 - we're going to give what backticks that's 
because we're trying to get something  
38:18 - outside the function. Okay, so dollar sign 
curly braces, stocks strc Ks stocks dot which  
38:26 - one was that holder? It's your LD. That's 
because this is the holder over here. Okay.  
38:32 - Stocks dot holder and then zero. Let's come 
back over here. Then we're going to give  
38:40 - square brackets like this and then we're going 
to write zero over here and then we're done.  
38:45 - What's the next step? The next step is we're 
going to select the topping ah my favorite  
38:48 - I love chocolates whatever you comment down 
below Do you like waffles chocolates or peanuts?  
38:55 - Okay then um where was I? Oh yes, we're going to 
select what chocolates okay as the toppings look  
39:01 - stocks dot toppings we have that so don't forget 
that Okay, and then we're going to pick the zero  
39:07 - You can also pick peanuts also as well. In order 
to pick that peanut you're going to write one okay  
39:13 - stocks dot toppings dot one okay. Over here okay. 
This is the holder Oh, I forgot to write okay.  
39:22 - Which means that the cup was I mean 
the cone was selected. Again selected.  
39:29 - Or you can also write ice cream was placed on the 
cone. Okay, come over here and write ice cream
39:41 - was placed on what the ice cream was placed on 
this one which means on the cold ice cream was  
39:49 - placed on go. Alright, so inside over here, 
give some spacings and we're going to pick  
39:56 - what the topping it takes three seconds because 
we need some time to make The chocolate right?  
40:02 - So we're here right? set timeout, okay, exact 
date and arrow function like this and then it's  
40:10 - going to take three or sorry, three seconds. Okay. 
So what are we going to do? We're going to pick  
40:15 - toppings. So console, log like this 
and backticks Okay, don't forget that  
40:22 - backticks like this. dollar sign, curly braces 
and what we're going to write stocks, stocks dot  
40:31 - toppings, we have the S at the last toppings and 
then this square brackets, then write 01 through  
40:40 - s. And what's the last step? We're going to serve 
the ice cream okay. So in order to serve the ice  
40:45 - cream come over here, okay, where we have written 
this Oh, this is just plain chocolate. I forgot  
40:52 - to write more text okay. So stocks dot toppings, 
which is a chocolate was added okay? As toppings  
41:02 - like this, okay. And over here, give some spacing, 
right, another set timeout function. Okay,  
41:07 - set timeout. And over here. We're going 
to place an arrow function like this.  
41:14 - And then we're going to set the time which takes 
how many seconds to serve two seconds, okay. 2123  
41:22 - console dot log. Then double 
quotes. Serve. Ice cream  
41:33 - Ctrl S, okay, now clear the console over here. 
Now run the code. Let's see what happens. Okay,  
41:41 - strawberry was selected production has started 
fruit has been chopped water and ice added the  
41:46 - machine was started, ice cream was placed on cone 
chocolate was added as toppings. Then we're gonna  
41:52 - serve the ice cream. Then we're going to take the 
money and buy ourselves a Lambo. Yay, party. Okay,  
41:58 - now we have completed our process, the callbacks. 
But look at look at this, what have we created?  
42:05 - Let me expand this and let me show you what 
we have created. It is called a callback hell.
42:12 - Look at here Look. Look at this format of how it 
is going. Okay, look, look look look like this.  
42:18 - And then it is indeed like this. This is called a 
callback hell, what is it called? callback hell.  
42:23 - Let me show you the format. The callback hell 
looks something like this. Look at this format  
42:28 - over here. And look at our code over here. 
It looks similar. It looks like this. Look,  
42:33 - it looks like a Christmas tree. You can also call 
it the Christmas tree of hell. Because why not?  
42:41 - I know I know. I know that callbacks 
are very confusing. And it is a hell.  
42:46 - So what's the solution of callbacks, we have 
promises and promises looks like this. Look.  
42:53 - This is the promises It looks very clean. Very 
neat. So let's compare again, this is our callback  
43:00 - hell. And this is our promises. Look how clean it 
looks. The thing works like this callbacks make  
43:08 - relationships, parent children, grandchildren, 
grand grandchildren, grand grand grandchildren,  
43:14 - grand grand grand grandchildren, it was 
relationship like this. So what what what  
43:19 - promises do is it takes instructions like this, 
first do this, then this, then this, then this,  
43:25 - then then then then then it works like this. Which 
means that you can keep your code very neat and  
43:31 - clean. So far, so good. Let's start discussing 
our promises. In order to understand the promise,  
43:37 - first of all, you need to understand the promise 
cycle. So this is the diagram I made about  
43:42 - the promise cycle. First of all, a promise is 
made, what promise do we make to our customers,  
43:49 - sir, we promise that we're gonna serve you 
ice cream, what ice cream, we promise we're  
43:55 - going to serve you ice cream. So there are two 
parts of this promise, either a truly fulfilled  
44:01 - or it will get rejected. Okay, so here, first of 
all, it comes to this stage, the pending stage,  
44:08 - every customer when they come into our shop, we 
promise we're gonna serve you ice cream. So our  
44:13 - customer interests, our shop sits on the table 
looks at the menu, and he or she didn't order  
44:19 - anything. He's there sitting over there. This 
stage is called the painting stage. He didn't  
44:25 - order anything just sitting over there. So this 
is the pending stage, nothing is happening.  
44:29 - We then take the order, we didn't start the 
production. Okay. And now let's say that  
44:36 - the customer has placed an order he wants mango 
ice cream. If we have the mango on our stock,  
44:43 - then we can go to the next stage, which is we can 
resolve the promise, which means that we can serve  
44:49 - ice cream to our customer. But if we don't have 
the mango, then what will happen is we have to  
44:54 - reject him by saying Sir, we don't have mango at 
our stocks. We're very sorry. So let's say that  
45:00 - we have mango on our stocks, what will happen 
is, is going to get resolved, first of all,  
45:05 - and then after that, what will happen is we have 
seven steps to make ice cream, right? Yes or No,  
45:10 - we have seven steps to make ice cream, and it 
will follow like this, first of all do this,  
45:16 - then this, then this, then this, like this 
intro, there are seven dents or six dents,  
45:23 - depending on the circumstances, depending on the 
situation, don't worry, we're gonna write code  
45:28 - and see how this thing works. Once that's 
done, we can serve ice cream to our customers.  
45:33 - But let's say that we didn't 
have mango, what will happen is,  
45:36 - we have to pass through this reject stage. And 
then over here on this catch, we're gonna write a  
45:42 - sorry, note, we're gonna say, sir, we're 
very sorry, we don't have this on our stock.  
45:46 - We sincerely apologize for the inconvenience. 
And once either we get resolved,  
45:53 - either our promise gets resolved or rejected, this 
finally will always run, let's say that we serve  
46:00 - zero customers. At the end of the day, we have to 
close our shutters. I mean, we have to close our  
46:06 - shop. But let's say that at the end of the 
day, we serve 100 customers, 100 customers,  
46:12 - we still have to close our shop, right? Because 
the employees has to leave, we have to leave.  
46:17 - This is the finally handler, don't worry, 
we're going to discuss all of them in details.  
46:21 - Once you have understood this promise cycle, we 
need to understand for more things, don't worry,  
46:26 - this is very short. First of all, we need to 
understand the relationship between two things,  
46:30 - time and work, what time and work. Because 
we have this list over here, you can see  
46:36 - that first of all, we have the work and then 
the time. That's why those two relationships.  
46:42 - The next thing is the promise chaining. What 
promise chaining is, if you come over here,  
46:47 - you can see that we are doing all the steps 
through then then then then this is the  
46:52 - promise chaining. Okay, so first of all, we get 
resolved, okay, and then it comes over here,  
46:58 - then we return it First of all, resolve, then 
return, return, return return like that, don't  
47:04 - worry, we're gonna write code and explain, and I'm 
gonna explain that to you. All right. So this is  
47:09 - a promise chaining, the error handling part is 
this one. Look, this catch handler is the error  
47:15 - handling part when we have a reject. All right, 
and the final handler I told you earlier, right,  
47:21 - this is the final handler handler is gonna 
run whether we serve zero or 100 customers,  
47:27 - I mean, whether our promise gets resolved or 
rejected, or I then come to your code editor  
47:33 - over here, delete everything except your stocks. 
Variable over here, and you clear the console over  
47:40 - here. Okay. Now, the first thing is the absolute 
first thing is we're going to create a variable  
47:45 - named is shop open, follow me. Let is underscore 
shop underscore open, okay, equal to true.  
47:56 - So what this is holding is, we're asking 
the question is our shop open or closed? If  
48:02 - it is true, we are serving ice cream. If it is 
closed, we're sorry, sir, we are closed. Okay.  
48:09 - Now we're going to create a function, an arrow 
function with the name order like this, let  
48:16 - order equal to brackets over here, then equal to 
arrow function. Now what we're going to do is,  
48:24 - remember the relationship between time and 
work that I told you earlier, we're going  
48:28 - to write time and work over here, okay, time 
over here, and work over here. You can also  
48:34 - shift the positions you can write work first and 
then time, it totally depends on you. And the next  
48:40 - thing is we're going to make a promise. First, we 
made the order then we made the promise sir, we're  
48:46 - going to serve you a stream like this. Follow 
me. First of all, you're going to write return,  
48:52 - okay, new, then capital letter P, what capital 
letter p, p, r o m i s e promise like this look,  
49:01 - then brackets, you a little bit of space so that 
you can understand what we are writing. Okay,  
49:06 - over here, we're going to give brackets over here 
again, we're going to create a arrow function  
49:11 - look like this, okay? Like this. We've made 
a arrow function over here. Now, press Enter.
49:19 - Now, inside this bracket, we're gonna 
pass two arguments resolve reject,  
49:25 - which means that we have how many stage 
three stages, pending resolve, reject,  
49:31 - we're gonna write resolve, reject, we don't 
need the pending. Okay? Now, right resolve,  
49:38 - like this resolve like this. And over here, you're 
gonna write, reject, reject like this. Okay, so we  
49:44 - made a promise. Now it's time to run that promise. 
Okay, now we have two stages, resolve and reject.  
49:51 - Let's write an if else statement. So right. If 
is shop open, which means If a shop is open,  
50:02 - then we're gonna resolve it like this resolve, 
which means that we're gonna serve ice cream  
50:09 - that our shop is open. Welcome, sir, we're gonna 
serve you ice cream, how are we gonna serve our  
50:15 - ice cream, we're going to write this work. You 
see this work over here, we're gonna write this  
50:20 - work over here, like this. Look, we pass the work 
over here, which means that when the shop is open,  
50:28 - when our customer came, we're gonna say sir, 
we promise that we're gonna serve ice cream.  
50:32 - As long as we have all the stocks and the raw 
materials, then we're going to start working.  
50:38 - Alright, now if our shop is closed, then what will 
happen we're going to write an L statement over  
50:43 - here, okay, curly braces. And over here, we're 
going to write one reject, reject like this. And  
50:49 - you close it like this, I mean, the brackets 
and over here, you write console of sorry,  
50:56 - console dot log, like this, okay. And over 
here, we're going to write our, sorry, our  
51:04 - shop is closed, okay? Like this. So far, so good. 
Now, you can see that we have formed relationship  
51:12 - between with just work Look, this work is over 
here. But we also need to form relationship  
51:17 - between time also along with work. So what will 
we use, we're going to use a set timeout function,  
51:24 - so that we can form the relationship between our 
time and work. Follow along with me, okay, so  
51:30 - below this if statement, right, set timeout, 
okay. And then brackets over here form a  
51:37 - arrow function like this look, okay, arrow 
function like this. And then what you're  
51:43 - going to do is you're going to put a comma 
over here, comma, we're going to pause this  
51:48 - time function, I mean, the time word over here, 
which means that every time we need to write  
51:54 - the order function, we're going to place 
the time and the work. Don't worry, we're  
51:58 - gonna write it. And then what you're gonna do is 
you're going to cut this result from here, Ctrl x,  
52:04 - okay? And then you're going to paste it inside 
this arrow function. Now what will happen is,  
52:10 - is going to form a seal after 1234567 we have got 
seven steps. Now save this code. Let's test it.  
52:21 - Okay, so what is the name of our function? It's 
order, okay? So come on at the very bottom over  
52:26 - here, right order. Okay, now brackets. Now look 
at the first thing, what is it? First thing is  
52:34 - the time and then the work. So how you are going 
to define this follow along with me. The first  
52:40 - thing is time. Okay, so let's look at the chart. 
So this is our chart, which carries all the steps.  
52:47 - First thing is we need to place the order Okay, 
it's gonna take two seconds, in order to write  
52:51 - that first of all, we're going to give the time 
Okay, you're gonna write two seconds, like this to  
52:55 - 123 2000 milliseconds and then a comma, comma like 
this. And now we're going to create a small arrow  
53:01 - function, look at this. Okay? And then the arrow 
sign. If you write the statement in a single line,  
53:08 - you don't have to put these curly braces, you can 
just use directly like this console dot log. Okay,  
53:16 - first of all, we're going to select the fruit 
in order to select the foot. What do you need?  
53:20 - backticks? What backticks like this, okay, 
then dollar sign curly braces like this. So  
53:26 - what's the name of our stocks? There's one 
Okay, stocks dot fruit. Let me check fruits,  
53:34 - yes, stocks, dot fruits like this. And then 
we're going to pick the strawberry, okay, zero.
53:43 - This has square brackets and then zero like 
this. Now let's test it Ctrl S and then  
53:52 - the console, save it and run it like this. After 
two seconds, we're going to get the result One,  
53:59 - two. There we go. We have struggled over here. 
Now let's complete this by saying that strawberry  
54:06 - was selected, okay. Ctrl S, let the 
console run it. One, two. There we go.  
54:16 - We have our strawberry was selected. I hope you 
understood the relationship between the time  
54:20 - and work function. This was pretty simple. Now 
let's start discussing about the promise chaining  
54:26 - which is this one over here. That then then then 
then part first you have to do this, then this  
54:33 - then this, etc. Let's come back to the VS code 
over here and at the very bottom, if we want to  
54:38 - work with the promise chaining you cannot have 
anything between the first call of the order  
54:45 - and then your then handler 
like this. If you want to  
54:48 - do promise chaining you have to do 
this dot then Okay, then dot then  
54:56 - dot, then so on and so forth of me a spelling 
mistake My bad, then you cannot have this  
55:02 - semicolon over here, okay, so just remove the 
semicolon from there. Okay, now it's going to work  
55:07 - perfectly fine, you can have 100 lines of spaces 
like this. And it's still going to work like this.  
55:14 - But for this tutorial, I'm going to have just two 
spaces so that it can look very good and tidy.  
55:21 - Okay? So, like this, look at that. It looks 
quite good. And now in order to write, I mean,  
55:28 - in order to given instructions said that then, 
let's look at our chart. So this is the chart,  
55:34 - which carries the steps. What is the 
next step, we need to cut the fruit,  
55:38 - and it's going to take two seconds. Okay, 
now come back to code pen and over here,  
55:42 - before cutting the fruit. Let's give a call 
to start the production. How do we do this,  
55:46 - first of all, write an arrow function like this 
looked, okay, arrow sign, you can also write it  
55:52 - in a single line, but I'm gonna give curly braces 
over here, and then you're gonna return it,  
55:59 - you have to return it otherwise it's not 
gonna work. The first part is resolve, then  
56:05 - return, return, return, return, return, so on 
and so forth. If you don't write the return over  
56:11 - there, then it's not gonna work. Okay, follow 
along with me, right return over here. Okay?  
56:16 - Then order. What was that order the name of our 
function, okay, like this look, and then you're  
56:22 - going to place what time first, in order to start 
the production, it takes zero second 0000, comma,  
56:32 - and then you're going to write a function 
over here, okay? arrow function like this.  
56:37 - Console dot log, like this. And then we're 
going to write over here, production has started  
56:44 - production has, sorry, started. Okay, save it, and 
then we're gonna clear the console. Let's run it.  
56:55 - So we're going to get this one after two seconds. 
And this one immediately One, two. There is our  
57:01 - strawberry was selected and production has started 
it will took two seconds, and this one took just  
57:07 - zero seconds. Okay, now let's write the next 
step. What was the next step we need to chop  
57:12 - the foot? It takes two seconds, I'm in cut the 
foot. Okay, let's follow the same process. Okay,  
57:18 - over here, you're going to write an arrow 
function like this equal to then this arrow  
57:23 - sign curly braces right over here. What return 
what was it return? Return like this. Okay, order.  
57:33 - We're going to write 2000 over here, which 
means two seconds. Okay, it goes to like  
57:38 - this then console dot log. What was it? We're 
gonna cut the fruit okay? The fruit was chop  
57:51 - sorry Ctrl S Okay. There we go. Following 
this chart, let's complete our process. Okay,  
58:00 - next is we have to add water and 
ice let's go and do it. So over here  
58:04 - we're going to follow the same process. 
Let's actually copy this code from here Okay,
58:10 - no
58:12 - let's not copy the code Okay, let's just 
do it manually so that you can learn it  
58:16 - okay follow along with me arrow function 
over here okay. We there we turn  
58:24 - order is going to take how many seconds one 
second okay 1123 Okay. Then this sign which is  
58:35 - the error function given curly braces over here 
okay. And inside of a hearing right console  
58:42 - dot log. What was it backticks Okay, then dollar 
sign curly braces that is because we need to  
58:49 - select what our liquid which is water and ice 
okay stocks dot liquid come at the very bottom  
58:55 - over here right stocks dot liquid like this 
and then zero in order to select what the water  
59:04 - okay and over here right and again you 
write dollar sign curly basis stocks  
59:11 - dot liquid. And then what was it one? Okay. So 
water and ice was selected like this. There we go.  
59:22 - And remember this this is very crucial. You 
cannot have semicolons between dens okay? Remove  
59:29 - this semicolon from here I mistakenly wrote it 
okay. space and over here we're going to write  
59:35 - then. brackets, arrow sign like this. curly 
braces. What's the next step? Let's see. We start  
59:44 - the machine in one second. Okay. So right read 
terror, sorry, return border square bracket. Then  
59:58 - first of all need to write That time, 
okay, one seconds, like this arrow sign,  
60:05 - like this. Console dot log. 
Start the machine, like this.  
60:17 - Next step is we need to select the 
container, we're gonna select the cone,  
60:21 - okay? In order to do that, come here, 
then. Okay, then arrow function like this  
60:28 - return order. It takes how many seconds? Two 
seconds to select a comb. Okay. Sorry, my bag of  
60:38 - then the arrow function over here. curly 
braces inside you're gonna write console.  
60:44 - log. What was it? backticks Okay, then dollar 
sign curly braces over here the right stocks  
60:53 - dot which was it? Let's see. Top n a holder holder 
and then zero because the cone is over here. Okay.  
61:01 - At the very bottom, holder issue LD 
are like this. square bracket, zero.  
61:09 - Okay, then you're going to write was ice cream was 
placed on this holder. Okay, so ice cream placed  
61:20 - on it translates to ice cream 
placed on comb. Okay, next step is  
61:26 - select toppings. We're going to pick chocolate dot 
then Okay, then this side, I mean arrow function,  
61:36 - return. Return order. Three seconds because 
chocolate takes time to melt right? So equal to  
61:48 - arrow function, then console dot log. Then 
inside over here backticks. Okay, when  
61:55 - backticks Okay, don't forget. dollar sign, 
curly braces. And we're here you write stocks  
62:03 - dot toppings, d o p i n g s, don't forget the last 
s droppings and then square brackets over here  
62:12 - we're gonna write zero. Chocolate was selected 
like this. So we're almost done. Then we're  
62:19 - going to serve the ice cream serve ice cream 
we're going to write dot 10. Okay, like this.  
62:28 - Return order, right how many seconds is gonna 
take is gonna take two seconds Okay, equal to  
62:36 - three races. We don't need curly braces Actually, 
we can write it directly ok 123 like this. Like  
62:46 - this equal to this sign the arrow function and 
then console dot log. Okay, double quotes icecream
62:58 - was served Ctrl S There we go. completed our 
process now let's run our code before that  
63:05 - clear this console. Run it let's go strawberry 
your selected production has started the food  
63:12 - was chopped water and ice added start the machine 
ice cream place and co then where is the chocolate  
63:19 - there is our chocolate chocolate was selected 
ice cream was served. He was the money and let  
63:24 - us buys the Lambo Yay. Now is now it's time 
to understand the error handling part, okay,  
63:32 - which is this one over here the catch handler 
in order to understand the catch handler,  
63:36 - comment a variable bottom over here, okay, 
and he right? Or don't forget to remove  
63:41 - this technical form here. Otherwise, it's not 
going to work, right dot catch like this, okay,  
63:48 - like this, then write an arrow 
function like this, okay,  
63:52 - equal to curly braces like this. And over 
here, right console, the log customer left  
64:02 - like this Ctrl S and then cleared 
the console. Now this catch will  
64:06 - only work when our promise is rejected. I mean, 
when we cannot serve ice cream to our customers,  
64:13 - then this sketch, then this sketch will work. 
Let me show you. Okay, if you can read if you  
64:17 - can remember this variable at the very top over 
here below the stock, which is his shop open.  
64:24 - It is true, let's convert it to false and let's 
see what will happen theoretically theoretically,  
64:30 - then we're going to run this code Okay. Let's 
see. We have this if statement over here.  
64:35 - It will run when the variable is true, 
but it is false which means our shop is  
64:40 - closed it look at here else reject our 
shop is closed. So false and then this
64:49 - this code will be run first and then 
at the very bottom we have the sketch,  
64:55 - then this line of code will run and these things 
will not run this All then then then it will not  
65:01 - run. Let's do a test run it and let's see 
what happens okay so our shop is closed  
65:07 - the first thing we're going to get is our 
shop is closed look at this message over  
65:12 - here inside this reject statement look our shop 
is closed and then on the way bottom look at this  
65:18 - is catch handler customer left We're very sorry 
this left the left us look the customer left.  
65:26 - We're not going to make the money we can't 
buy the Lambo We're very sorry. Alright then  
65:31 - I hope you understood this catch I mean the 
error handling part with the catch handler  
65:37 - let's now understand this finally handler I told 
you earlier that is this will run whether our  
65:42 - promises resolved or rejected it will run anyways. 
Okay, now let's look at this example. But first,  
65:50 - remove this semicolon otherwise it's not gonna 
work okay then dot finally like this. And inside  
65:56 - over here we're going to write what Tell me 
arrow function take like this equal to this sign  
66:02 - curly braces like this. We're gonna write console 
dot log like this and inside over here we're gonna  
66:08 - write our shop is closed. Now let's write day 
ended shop is closed Okay, dead end dead shop  
66:19 - is closed like this Okay, let's say we remember 
what state is it in our shop is closed which is  
66:26 - false. Okay, let's run it in this way. You can 
also run it in through let's look at our shop is  
66:33 - closed This message is coming from this rejects 
statement over here customer left is coming from  
66:40 - this statement over here this catch handler okay 
and this day ended shop is closed it's coming  
66:46 - from this finally handler let's set it to true 
and let's see what will actually happen without  
66:52 - finally handle okay Ctrl S run it to 
the console and let's see what happens  
66:58 - okay we got this statement then this then water 
nice edit then this is completion code then my  
67:06 - favorite part is the chocolate Yay. And then ice 
cream was served day ended shop is close look  
67:12 - at this look look at the various day ended 
shop is closed is coming from this finally  
67:17 - handler so what did you understand? It will 
run whether our promises resolved or rejected.  
67:22 - And with that we finished our discussion with 
promises everyone please welcome async await Yay.  
67:30 - So this is actually proclaim to be a better way to 
write promises. Let's go and dissect async await  
67:37 - but first you take a break because it really 
deserves a break in order to understand the async  
67:43 - await first of all learn to know the difference 
between the promises and async await let's look  
67:48 - at an example. Come back to VS code I mean code 
pen delete everything except our this part okay?  
67:57 - Keep the shop and stocks okay now in the promises 
part How did we make a promise like this look?  
68:06 - function Let's name it order okay order like this. 
Okay, no, we actually didn't write it like this My  
68:14 - bad we wrote it in the airway function I mean the 
arrow function to let order equal to this equal to  
68:24 - arrow sign curly braces like this and in order to 
make the promise we wrote what return new promise  
68:31 - return new my brand new capital letter P r o m 
i s he promises like this and then inside these  
68:39 - brackets we wrote another arrow function like 
this okay and inside here we wrote resolve reject  
68:50 - like this Okay. And then he said over here what we 
wrote if statement Okay, then this one and inside  
68:56 - over here. What did we rewrite? What did we write? 
We wrote the result like this, okay. Look at this  
69:03 - and over the else statement. What did we write? 
Okay, they wrote the reject over here. Oh, my bad.  
69:11 - JACK like this. Okay. We wrote it like this. 
This was the promise. What how do we write the  
69:18 - async await? Look at this blog look, right first 
of all the async keyword what the async keyword
69:27 - is sink. Okay, you write the function order. 
Okay, this and then the curly braces. And there  
69:36 - we go. We made ourselves a promise. How simple 
is that? But wait, the story doesn't end here.  
69:42 - We need to understand two more things, the try 
catch handler and how to use the await keyword.  
69:48 - So this is the async keyword, we need to 
understand the await keyword. Let's dive  
69:52 - in. Now let's come back to our code pen and 
understand the difference between the promise  
70:00 - And our async await only then we're gonna 
understand the try catch. Okay? Come over here and  
70:06 - see this if an else statement, what did we write? 
How did we make the promise we made this promise  
70:12 - like this first of all, we load the function over 
here, and then return new promise, then resolve  
70:18 - reject. And then we wrote The if statement, which 
is if this is true, we wrote this tr, e true,  
70:25 - okay? Then it's going to resolve it. If it is not 
true, then it is going to reject it like this.  
70:30 - This is how we make the promise. And then what 
did we do? Okay, we comment this is like this.  
70:37 - Let me actually finish with the promise part. Then 
we're going to come to the async JavaScript part.  
70:41 - I'm an async await part. This is the order right? 
How did we write it? order? Okay, order. This is  
70:48 - our first start. And then what did you write? 
dot then? Okay, dot, then dot, then. Oh, sorry,  
70:59 - my bad. And then what did you write? And then we 
wrote dot catch, catch. TC CIT, C of I forgot my  
71:09 - bad ca tch catch handler and then the dot finally 
handler, okay, so this will work when, what,  
71:19 - if our promise was resolved, this will work 
when it is rejected, this will work anyways,  
71:26 - is still going to work even if it was resolved or 
rejected. But in terms of this async await, let's  
71:33 - actually test it with this how this works, okay. 
Don't worry about this one. Let's comment this.  
71:39 - We're gonna return over here. Okay, don't worry. 
Comment this like this and come over here. So  
71:44 - first thing is if we want to declare, I mean, if 
we want to work with promises in the async await.  
71:51 - World, then what we have to do is we have to 
declare this async word before the function  
71:56 - I showed you a little while ago, right? And then 
inside over here, you have three options. I mean,  
72:02 - three things to write, try, get. And finally, 
what do we try to get final over here we wrote  
72:10 - what the if else statement, and over here 
we're going to write try, catch Finally,  
72:16 - following the right cry over here. 
Okay. Go your braces like this.  
72:20 - And then you're going to write the catch, okay. 
And brackets over here. You write error. Okay.  
72:27 - curly braces. And over here you write. 
Finally like this. Okay, then curly braces.  
72:33 - So what does this finally does it? It runs 
code anyways, okay, let's write it. Okay. Don't  
72:37 - worry. We're going to test it. Okay. Console dot 
log, runs code any way. Okay. Inside this catch  
72:46 - handler. I mean, let's start with the try. Okay, 
let's create a fake problem. What problem fake  
72:52 - problem over here we're going to right away, don't 
worry about a word keyword I'm going to discuss  
72:57 - in detail about this await keyword. Okay, 
it's coming. Wait, you're right. Anyway, ABC.  
73:03 - So this ABC is actually pointing out to a function 
which doesn't exist. I still wrote it because it's  
73:11 - a fake function. What function fake function 
okay? So in fact, this catch handler, what we're  
73:17 - going to write is console, the log like this and 
over here, we're gonna write ABC doesn't exist.  
73:26 - exist, okay? And this error is actually 
written like this coma arrow. Okay.  
73:34 - For now, we don't need this error part, but we're 
just keeping it over here as it is, we just want  
73:39 - to work with our try catch this console log and 
this Finally, in this Finally, handler in order to  
73:48 - understand the main theory of the async await, 
okay, so you clear the console here. As I told  
73:54 - you earlier, this aways ABC I mean, this ABC 
part doesn't exist look at the entire code  
74:00 - field. Nothing exists which is named ABC right? 
So in order to run this first of all you need to  
74:06 - provoke it like by saying order at the 
very bottom over here right order okay?  
74:12 - My bad sorry, like this Ctrl S and let's run it 
and let's see what happens there we go. We got  
74:20 - the message. First of all, ABC doesn't exist 
because we don't have anything named ABC. Then
74:28 - it then we have run scope. Anyways, look at this 
the finally handler Do you remember this Finally,  
74:35 - from the promises, this is over here, it will 
run code anyways. By the way, do you remember  
74:41 - this handlers this then catch finally handlers, 
you can also use them inside I mean, outside the  
74:48 - async await system as well. Let me show you a 
demo. Okay. You right at the bottom of the order  
74:54 - after removing that semicolon, but then like this, 
okay brackets, then create a Arrow function like  
75:02 - this and over here you write console dot log then 
write anything you wish I'm gonna write like this  
75:10 - My read I read I don't I cannot think anything of 
good right now Ctrl F clear this run it like this.  
75:19 - There we go. We have got that then handler it 
is pending over here. Okay? First of all we  
75:25 - got that error and then the final is going 
to run anyways Okay, so that is over here  
75:31 - and then that then what will happen after our 
promise is resolved is going to do this part over  
75:37 - here. And you can also use those then cat finally 
etc. After here is the chaining part. Okay,  
75:45 - I hope you understood this far. Now let's do a 
small test and understand that a weight keyword  
75:50 - let's say that I am the chef of the 
restaurant, okay, just look at me.  
75:54 - I am the chef of the restaurant. Okay, I make ice 
cream. I took the order from the customer and I'm  
75:59 - making ice cream okay tu tu tu tu tu my bed sorry. 
Okay, so I'm making ice cream over here but I then  
76:05 - realized that my customer didn't tell me which 
topping would he like so I have to go outside the  
76:11 - kitchen ask the customer sir which stuffing 
topping would you like chocolate or peanut?  
76:17 - There he is going to give me the order. Give me 
chocolate and then I have to return to the kitchen  
76:24 - and start working. Look how the process 
is working. I am going outside which means  
76:29 - that the kitchen is being stopped completely 
without the chef the kitchen doesn't work.  
76:34 - But realize this that there are other employees at 
the restaurant who is working who is cleaning the  
76:41 - tables, cleaning the dishes, taking orders, etc. 
Everything else except the kitchen is working.  
76:50 - This is where we use the await keyword. Let's do 
a C test and understand about this await keyword  
76:56 - in details. Let's start now come back to corporate 
Now come back to code pen and remove everything  
77:02 - except the stocks and the East shop open. Okay, 
remove everything like this. Goodbye forever.  
77:09 - Okay, now what we're going to do is 
we're going to create a function what  
77:13 - a function which run arrow function. Okay, 
let, let's write toppings choice, okay.  
77:23 - Which will add to the customer. So which topic 
would you love? Okay, it was blue my bed equal to  
77:30 - bracket. This sign is the arrow sign and instead 
we're here we're going to make a new promise what  
77:35 - new promise. Okay, so return new promise like 
this. And we're here we're going to write,  
77:44 - resolve, reject, don't worry, I'm coming on the 
async await part. Okay. So equal to arrow sign  
77:51 - curly braces and over here what we are going to 
write come on to me resolve reject. Resolving  
77:58 - My bad. We check like this. Okay. Now over here, 
what are we going to do? We're going to create  
78:04 - a set timeout. Let's say that the asking 
process takes how many seconds three seconds,  
78:09 - how many? Three seconds. Okay, in order to do 
that, we're going to write set timeout, okay,  
78:14 - for three seconds. So write set timeout like this, 
okay? And then what we have to write is Come on,  
78:20 - tell me arrow function. Okay, like 
this. And then we're gonna set the  
78:25 - time, how many seconds, three seconds. 
3123. All right, now inside over here,  
78:31 - we're going to write console dot log console. dot 
log. We're here right? Which stop being you love  
78:42 - of my read. Like this. Remove this console. From 
here. Clear. Okay, Ctrl S. Now we made a small  
78:50 - promise that we have to go outside the kitchen 
x our customer, what would you love to have  
78:55 - as a topping. Now at the very bottom, what we're 
going to create is function a sync function is  
79:03 - sync function. We're going to write what brackets 
are. We also have to give it a name. We're gonna  
79:08 - name it kitchen. kitc HTN kitchen over here, and 
then curly braces over here like this. Now follow  
79:17 - along with me. We're gonna write console dot 
log five times A, B, C, D, E, like this, okay?
79:24 - console dot log. Okay, like this. 
Ctrl C, one of my red 2345. Okay, now,  
79:37 - we'll get right over here. Ah, don't worry. I'm 
going to explain that why I wrote ABCD My bad. T.  
79:53 - Hey, okay. Now what we're going to do is, let me 
actually explain why I wrote this ABC and all the  
79:59 - spots. Okay, the thing is, these are the steps 
we're walking into. I mean, we're working at the  
80:04 - kitchen. Okay, we're making ice cream. We're 
following the steps 1234 and the very mill,  
80:09 - we just realized which topping would our customer 
love. Okay, so we have to go outside the kitchen.  
80:14 - What? Outside the kitchen, ask him. So what 
did you love to have? So this is our kitchen,  
80:20 - we're inside over here, where where we're inside 
this kitchen, we're working. Now we need to go  
80:26 - outside and come to this toppings choice, which 
is the where the customer is sitting asked him.  
80:32 - So what would you love to have. And then once 
we have got the data, we're going to come back  
80:38 - to our kitchen, start working and then serve 
Him. In the meantime, what will happen, others  
80:43 - other works like cleaning the dishes, cleaning 
the table, taking other customers orders will  
80:49 - keep running. Don't worry, I'm coming to that 
part. Okay. Now what you're going to write is at  
80:54 - the very middle over here, you're going to write 
a wait, then what the name of this function What  
81:00 - is this toppings choice Ctrl C, that one Ctrl 
V, and then brackets, close it on. And then  
81:07 - what we're going to do is in order to provoke 
this function, we're going to come over at the  
81:11 - very bottom over here, you're going to write 
kitchen, what kitchen it's like this, okay?  
81:18 - And then we're gonna define other task, which is 
happening except myself. I'm the work on the chef.  
81:25 - Okay, other words? What cooking? I mean, sorry, 
cleaning the dishes. Cleaning the table. The other  
81:32 - quarters? Let's write them. Okay. Console, the 
log? cleaning my bag. sealing the dishes console,  
81:45 - the log like this conference. I mean, this one 
Ctrl C Ctrl. V, then what? Cleaning the tables?  
81:57 - Actually, you right doing the dishes? It 
sounds good. I guess. doing dishes dishes,  
82:04 - cleaning the table. And then at the bottom, 
we're going to write taking others order  
82:13 - like this. Okay. Ctrl S. Now, let me 
theoretically explain you before running the Run  
82:19 - button that what is actually happening. Okay, 
so I'm working over here. Okay, I'm making the  
82:25 - ice cream. And then I realized that I didn't 
have the necessary direction which topping  
82:30 - would my customer love. So I'm physically 
going outside the kitchen to ask the customer  
82:36 - what would you love to have, which means that this 
entire process is stopped, my kitchen is stopped,  
82:42 - nothing is happening because the chef is outside. 
And in the meantime, other work like this one  
82:49 - will still happen like doing the dishes, cleaning 
the table, taking others orders. And once a return  
82:56 - to the kitchen, this to work D and E will work. 
Let's run it and let's test what will happen.  
83:04 - Okay, look, a B, C, doing the dishes cleaning the 
table taking others orders. Which topic would you  
83:12 - love? Oh, we didn't actually get the D and D. 
That's because I actually forgot something.  
83:18 - I forgot to write the resolve over here. And 
without reading the resolve, it's not going to  
83:23 - return our other tasks. Okay, so come over here on 
the toppings choice Okay, or and inside over here,  
83:29 - you're going to write V zoolz. Like this bracket. 
And inside the brackets, we're going to place this  
83:37 - console over here. Okay. Ctrl x, my apologies. 
I actually forgot to write that part and Ctrl S  
83:44 - Okay, now clear this and run the code and let's 
see what actually happens. Okay. Oh, I actually  
83:51 - have an error. I don't know why but let's check 
it out. Okay, console log. Which dropping my bad.  
84:06 - Like go like this Ctrl S. Let's see what happens 
right now if you had a console like this.  
84:13 - Now you can see that we have fixed our error 
over here we have written the result over here  
84:17 - and we have replaced the console log inside this  
84:20 - line over here now it's gonna work perfectly 
fine. Let's run the code and see what happens.
84:26 - There we go. We have ABC doing the dishes, 
cleaning the tables taking other orders which  
84:32 - dropping Do you like and then we have other works. 
What is happening Let me explain again. So what is  
84:38 - happening look here in the kitchen, I am working 
in the kitchen, where am I working in the kitchen.  
84:42 - So these three tasks are done. Then I remember 
what topping does my customer likes. So I'm going  
84:48 - outside and asking him in the meantime others are 
working look, other people are working over here.  
84:55 - If there was 100 tasks, they would have worked. 
They would have been working On those tasks,  
85:01 - okay. So once these tasks are done in the 
meantime what I have done is I have gone to  
85:07 - the customer action to the data returned to the 
kitchen and I started working then D and E is  
85:13 - completed on this bottom over here you can see 
that, I hope you understood the await keyword.  
85:20 - I hope you understood the resolve keyword. 
Let's reopen our shop and welcome customers.  
85:25 - Okay, now come back to code and delete everything 
except this one. And this one, okay, like this,  
85:32 - follow along with me delete goodbye. And 
over here, what we're going to write is  
85:37 - first of all a time function because we need to 
set the relationship between time and work right?  
85:44 - So you write a function, okay, time, and right 
over here, MS, which is milliseconds, okay.  
85:51 - curly braces like this, we're going to 
create a new promise. Okay, return, Neil.  
85:58 - Tom is don't worry about the async await I'm 
coming to that part. Okay, capital letter P,  
86:03 - not small letter p, r, O, and my se. And 
then you said over here we're going to write  
86:08 - the resolve and reject part resolve. And the 
reject part, the check like this, and arrow  
86:17 - function, my bad arrow function over here like 
this. And then the if else statement like this,  
86:24 - if our shop is open, is shop open look at this 
is shop open, and then we're going to write what  
86:32 - we're going to create set timeout. Remember 
this set timeout like this, and over here,  
86:39 - we're forming a relationship between our time and 
work okay, so inside here, we're going to write  
86:44 - the result we are passing this result over here, 
which means that we're setting the relationship  
86:49 - between the time and work okay. So resolve over 
here and then that Ms part should be over here,  
86:57 - m s like this, at on the L statement, e 
l s statement. So what this will do is  
87:04 - it will notify us when our shop is closed, I mean 
when is shop open, set to false, okay, like that.  
87:12 - So we're gonna write reject, like this. Instead, 
over here, we're gonna write console. Console,  
87:20 - dot log, like this. And we're going to 
write, shop, my bag is closed Ctrl S. Now  
87:30 - we're going to write an async function named 
kitchen to start our production inside there.  
87:36 - Okay, come at the very bottom of before that you 
clean the console because it looks quite dirty.  
87:41 - Okay, so now you're going to write a sync, like 
this function create the kitchen, okay? Okay,  
87:49 - it CH, E and kitchen like this curly braces, like 
this over here. And then we're going to write cry,  
87:58 - okay, like this, then catch, like this. And 
if you want, you can also write the Finally,  
88:05 - that's completely up to you, but I'm gonna write 
it because a lot of you don't really understand  
88:09 - how to work with the try, catch. And finally, 
I'm going to explain everything in details.  
88:13 - Don't worry about it. Okay. And over here, I 
actually forgot to write brackets and arrow,  
88:19 - like this. All right. And now in order to run 
this, what we have to write is at the very bottom,  
88:24 - we are right the kitchen, which is the trigger 
kitchen, like this, okay, Ctrl S. Now let's  
88:31 - actually test a function to check whether if it's 
working or not, so come on in this catch handler,  
88:38 - and we're going to write console dot log like 
this. We're going to write customer left, okay,  
88:46 - customer, left like this and over here and 
right arrow like this. And inside over here,  
88:53 - what we're going to write is shop is closed. Okay? 
console. log. de endet. shop is closed. Okay. Now,  
89:05 - what are we going to write inside this 
fry handler? Let's see. Okay, one by one.
89:11 - If you remember this chart, the first thing 
that we need to pick is the order I mean,  
89:15 - the fruit name. Okay, so come back 
to our code pen over here. And  
89:19 - we're going to write console, log log, 
and then backticks. Don't forget that  
89:26 - dollar sign curly braces like this. 
And then we're going to write stocks,  
89:30 - like the stocks dot fruit, f r u, it s, and 
then we're going to pick the strawberry zero,  
89:37 - or you can pick anything you wish from this list 
of stocks, okay? You can pick grapes, banana, etc.  
89:44 - Alright, now what we're going to do is, 
remember this, we have two seconds of time,  
89:49 - how are we gonna define the two seconds over 
here? In order to define the two seconds? Do  
89:53 - you remember this function over here, the time 
function? We're gonna utilize this look at here,  
89:59 - look Write a wait. And then what the 
name of this function time, okay,  
90:06 - time over here. And then we're going to 
set it to how many seconds, two seconds  
90:10 - to 123 2000 milliseconds means two seconds. Now 
let's test that code. Okay, as our shop is open,  
90:18 - now it's gonna give us what resolve you can this 
is going to get resolved. Okay, let's run the code  
90:26 - and see what happens. So after two seconds, we're 
going to get this property over here. That's  
90:31 - because we have set it to two seconds, and they 
ended shop clothes will be printed immediately  
90:36 - because we didn't assign any time over here. So it 
is assured that that function works and there is  
90:42 - no problem in our function. Let's complete our 
ice cream production business, following these  
90:49 - steps over here, okay, now what you're going to do 
is come over here, you press Enter, Enter. I will  
90:55 - keep some space between your code so that it looks 
neat and clean. And then we're gonna write console  
91:03 - dot log. Start the production, okay? Start the 
production, it's not gonna take any time. Okay,  
91:12 - we're going to keep it blank for now, what if 
you want to learn, but if you want, you can keep  
91:18 - a wait. Time. 0000 is completely up to you. But 
for making you understand how the system works,  
91:27 - we're going to keep it 0000 so that you can know 
that this thing takes zero seconds to start. Okay,  
91:33 - now we're gonna start, we're gonna cut the fruit, 
okay, so console dot log. Got the fruit like this  
91:44 - is gonna take how many seconds? Two seconds? 
Every time to 123 I mean two seconds. Okay,  
91:51 - then we have the add water and ice is going 
to take one second. Let's go boys and girls.  
91:58 - Oh, my bad, I will do the wrong thing. Anyway, Tom 
is going to take 123 like this console dot log.  
92:09 - And we're gonna write what water and ice backticks 
dollar sign curly braces and dollar sign curly  
92:19 - braces was added like this and over here we're 
gonna write big the water stocks dot liquid  
92:30 - square bracket zero. Okay, stocks dot liquid. 
Then we're going to write one. There we go.  
92:41 - And over here, we're going to start the machine 
in one second. Select the container to second.  
92:45 - So how do we do this? We can also copy this No 
worries. Like this okay Ctrl V. First we need  
92:52 - what one second to start the machine and then 
two seconds to select the container. So one  
92:57 - second is over here. And the two second part 
is over here. Okay, the second part is here  
93:02 - and let's actually complete altogether the 
toppings parse takes three seconds to serve ice  
93:07 - cream which takes two seconds Okay, so let's do it 
like this. So these are three seconds over here.
93:14 - This is our serving over here Okay, 
two seconds now we're going to write
93:19 - stuff start the mission okay. So console 
log. Start deep machine like this.  
93:28 - And then console dot log. It will be our select 
the container okay. backticks dollar sign curly  
93:38 - braces. Stops got holder? Zero it will pick 
the cone. Okay. Ice cream placed on cone  
93:47 - ice cream placed on cone like this. 
Okay, now configured log console dot log  
93:55 - like this. Do we need backticks? Yes, because 
we need to pick that toppings. Chocolate  
94:02 - backticks dollar sign curly braces, stocks dot 
toppings DOB imgs then zero which will pick the  
94:14 - chocolate was selected as the very last what we 
are going to write Yes, we can serve ice cream  
94:21 - take the money and buy ourselves a Lambo because 
why not? Come on boys and girls console a dot log.
94:28 - Okay
94:30 - sir, ice cream.  
94:37 - Let's save our code clear our console like this. 
And let's run a run it and see what happens.  
94:44 - Maintaining time everything will run strawberry. 
Oh actually forgot right strawberry was selected.  
94:50 - My bag was selected. Okay, clear this console. 
Save it, run it again. Sequential Maintaining  
95:01 - time it will run look straightaway to a selected 
start the production cut the fruit then this start  
95:06 - the machine I simulation code then after three 
seconds we will have chocolate was selected  
95:13 - service day and shop is closed but what will 
happen if we have false over here let's see okay  
95:20 - false which means that is going to reject it look 
at here reject on the block shop is closed which  
95:26 - means that this else this reject this thing will 
come. I mean this thing will be painted first and  
95:33 - then look at this catch over here. Get a better 
customer left and then the final day ended shop  
95:40 - is closed. Let's test it. We're gonna shop is 
closed customer left they ended shop is closed.  
95:50 - This is coming from where let me show you this is 
coming from this else this reject from the time  
95:55 - function customer left it is coming from where 
look at this is fun coming from the catch and they  
96:02 - ended shop is closed. This will run anyways 
it is coming from this finally handler  
96:07 - so we successfully made ice cream today. And 
along with that we have completed our tutorial.  
96:13 - If you liked the video, give a like share 
it with a friend and feel free to subscribe  
96:17 - Till then Take care and I'll 
see in the next video. Bye bye

Cleaned transcript:

Joy is a great teacher who has created many amazing courses and written a bunch of helpful technical articles. In this course, He will teach you how a sink await and promises work in JavaScript. Hey guys, you're here in this video, we're gonna make ice cream and learn Asynchronous JavaScript. Yes, you heard me right, we're gonna make ice cream today. And along the way, we're going to discuss three topics, callbacks, promises, async await along with examples, the video will go like this over here, we're going to make the main project, which is the ice cream project. And over here, we're going to look at some examples so that you can better understand how the system works. But the first question is, what is Asynchronous JavaScript? And why should you even care? If you want to make bigger projects more efficiently, then this is for you. What Asynchronous JavaScript does is it allows you to break down bigger projects into smaller tasks. And then using any of these three methods over here, either callbacks, promises or async await, what you can do is you can form a connection between these small steps in a way that you can get the final result. So here's an example of what I mean. So this is the ice cream that we're gonna make today. Here's the ice cream. Okay, so using Asynchronous JavaScript, we can break it down into smaller steps. If we do that, it looks something like this, you can see that these are the seven steps to make ice cream first, starting with the Place Order, then we're going to cut the fruit, then we're going to add water and ice, so on and so forth. And at the very last, we're going to serve ice cream. To make you understand this topic even better, I have added some time function as well. You can see this over here, it takes two seconds to place the order two seconds to cut the fruit one second to add water and ice, so on and so forth. And at the very last we're gonna serve ice cream, take the money and buy ourselves a Lambo, because why not? If you want to learn Asynchronous JavaScript better and know the difference between two things, synchronous and asynchronous system, let's start discussing with the synchronous system. Let me explain this to you in clear words. Let's say that I have given you 10 tasks and just one hand 10 task one hand, so how will you do the task? You are going to do one by one, right? Like this look, 123. So we are in tax number three, right? You cannot jump to the tax number seven unless you do 456. And then seven. Right. So what are you doing? You're doing one by one, right. But in the asynchronous system for 10 task, you will be given 10 hands so that you can work independently without depending on anyone. Look at this image over here. This is a synchronous system, they are loading one by one, the second image doesn't load unless the first one does. And the third image doesn't load unless the second one does, which means that they're following a order like this 123. And on the asynchronous way, you can see that nobody depends on anyone they are loading on their own pace independently. By the way, I wrote an entire article on the topic that we're going to discuss today so that you can understand it better. At the same time, you can revise it from here more easily, efficiently and quickly. Link of this article will be given in the description down below, go and check it out. To summarize, let's say that we're setting up a marathon for three persons, how many person three person, if you are doing it in the synchronous way, what will happen is you just have one single lane, and you have to place those three persons on this single lane in this area of 123. And the rule is nobody can overtake the other, everyone has to finish the race one by one. Look at this image over here. This is the synchronous system. This is the finish line over here. Okay, and the images, which is the person's One, two and three are standing on the same lane, which lane same lane and nobody can overtake the other, everyone has to finish the race one by one. So the person three or the image three will finish the race first, then the second one and the first one like this, the single lane, the synchronous system. If anyone stops, the entire process stops. If the image three stops over here that everyone has to stop. And if we are setting the marathon in an asynchronous way, for three persons, we will have three lanes. If we have more participants, then the number of lanes will also increase, which means that nobody stops for anyone, they can finish the race independently on their own pace. If anyone stops, then the system still continues to run. Look at this image over here. This is the finish line and this is the participants over here and these are the lanes Okay, lane number one, two, and three, the image one, two, and three. They're gonna finish the race on their own pace. I hope you understand the difference between the synchronous and asynchronous system. Let's look at some examples right now. You can use any code editor you want but for this tutorial, I'm going to write Don't go pen because it has a simple interface. So you can follow along with me if you want. So open code pen.io. And then you click this pen over here, then you're going to click this small pen icon over here, and you're going to name this project, anything you want, I'm going to write it async j s. Okay, and then you save it Ctrl F, like this Ctrl S. And now you're going to drag it in the middle, like this, and double click on the JavaScript section like this, and it's going to expand. And in order to open the console, you're going to click this small icon over here, you can see that like this, double click on here, and it's going to expand like this, we need to know we need to do one more setting, you come over here, this small gear icon over here, click it, click on behavior, and you enable everything except this one, the auto updating preview. Okay, turn it off, Save and Close. And then we're going to manually get a run button over here. Why is that? That's because every time we write a single letter, corporate runs it automatically, which means that every time we write a single letter, we're going to get an error after error after error. In order to avoid that I have turned off this setting. Every time we finished writing our code, we can manually run it like this. Okay, now let's look at the synchronous system example. So we're here we write synchronous si nc HRONOS synchronous like this. And you comment this like this. And over here, we're going to write console dot log five times how many times five times like this following console dot log, okay, brackets, double quotes space over here, okay, you copy this Ctrl C, and then Ctrl, v 510s. Okay, 345. It's some gap over here as well, additional gaps, like this. Alright, so over here, we're going to write a full sentence. Okay, I eat ice cream with a spoon. So again, divided by phrases, okay, then follow me along. I eat ice cream. With sorry. Spoon, okay, Ctrl S to save it. And then you're going to click this run over here. And then we're going to get the result, there we go, you can see that our phrases are printed one by one serial. That's because JavaScript runs from the top to the bottom, how does JavaScript run from the top to the bottom serially? In this process, if anyone gets stuck, then the entire process get stuck. This is the synchronous system. If you change the sale, let's say that I want to change the spoon from here to here, okay, Ctrl x, and then you paste it over here, Control V Control F, you clear this console over here, and then you run it again, let's see what Let's see the result. Now you can see that I eat spoon ice cream with a you see the JavaScript doesn't care about anything is gonna run the code from the top to the bottom. This is what the synchronous system. Now let's look at the asynchronous system. Now over here, right, asynchronous, okay, a synchronous done, clear the console over here, you change the CL Ctrl x. Okay. And we're here Ctrl V Ctrl S. And now come over here at the bottom, I need to make you understand a small function named set timeout function, which is a built in function of JavaScript. What this does is it allows you to run a function after a specific amount of time. So you write set timeout set, then capital letter T, timeout, this one, okay, then brackets, the first thing that we are going to pass as an argument is a function. So we're going to use the arrow function, don't worry, I'm going to explain arrow function and the regular function with the arrow function like this, okay, equal to this sign curly braces. Now let's look at the difference between function the regular one and the arrow function. Okay, in the regular way, we write a function like this first, the function keyword, okay, then we're going to name it like this A, B, C, D, E, F, G, however you like, right? Then you put that then you put that bracket like this, okay? And then curly braces, this is the regular function, but in the error function, how we write it is we're going to write either late var or const. Okay, like this. And then we're gonna put the name over here. What was the name of this function? A, B, C, D, D, right? So we're gonna write ABCDE D, which is the name of that funk. Like this, like this, and that equals, and then we're gonna put brackets over here and then this sign over here, the arrow sign, and then curly braces. On a regular function, we used to put our arguments on this bracket like a, b, c, d, etc. In the arrow function, we place our arguments over here, A, B, sorry, D, C, D, etc. I hope you understood the difference between two for this project, I'm going to use an arrow function. Okay, the latter one, this one. So once we have entered the function inside the set timeout as an argument, the next thing that we're going to put is the time, okay, so it is actually counted as milliseconds. If we write 1000 is going to count as millisecond, which means one second. So if we write, let's say, 3000, it means 3000 milliseconds, which is three seconds. Okay? Now come over here. Let's say that I want to cut this and place it inside this set timeout function. How will you do it? We'll cut it like this Ctrl x. And that insight over here, this curly braces, we're going to place it over here, okay. Ctrl V. And now let's change it to four seconds. By the way, it said timeout is a asynchronous function, okay. You got this from here, Ctrl x, and you paste it over here. Ctrl V, like this Ctrl S to save it. And then we're going to press this run function. But before that, do you remember what I told you? JavaScript runs from the top to the bottom how from the top to the bottom. And let's see how this works. Okay, run it like this. And let's see the result. Now you can see that we have got, I eat with a spoon. And then after how many seconds after four seconds, we got the ice cream over here. Now how does this system work? This is an asynchronous system. Okay, asynchronous system. Look, the cereal is over here. Okay, I eat ice cream with a spoon. The sale is over here as well, you can see that I eat ice cream with it spoon. The system is actually working like this Look, I eat and then this ice cream over here it has a set time of function, which means that we're going to have another hand over here is going to take this function at the side, which is our second lane. Okay, this is our main lane. I mean main road, this is the secondary road, it is taking that asynchronous call at this hand. And after four seconds is going to release it on our main lane like this. Until then what will happen Look, I eat ice cream is an asynchronous call, which means that is going to take it over here, after four seconds is going to get released, then with a spoon after four seconds is going to come over here. So this is how the asynchronous system works. I hope you understood it. Now we're going to start our discussion with callbacks. But before that, if you're new to the channel, feel free to subscribe because I post videos based on practical work projects so that you can level up your coding skills. If that sounds interesting, hit the subscribe button and join my gang under the further ado, let's get started. Let's talk about callbacks. What are they? In simple terms, very simple terms. calling a function inside another function is called a callback. In even more simple terms, what it does is it forms a connection between what functions. Let's look at one example with callbacks. And then we're going to start our ice cream business. Again, back to code pen. you delete everything okay? Ctrl A, then delete. Okay, you clear the console over here as well. Ctrl S. Okay. So what did they tell you before callbacks means calling a function inside another function. So we'll create two functions to form the relationship. What relationship Okay, function one, function two, like this. function, one, okay. We're going to use a regular function. Nothing complicated. No politics here. Okay. Function two. Okay, now inside function one, what we're going to write is console dot log, okay, console dot log. Over here, we're going to write function one, or let's write step one. Okay, step one, of sorry, like this step one. In fact, we're here we're going to write console dot log, step two, like this, in order to run this function, what do we do we write the name of the function at the bottom like this look. We call it like this one, then brackets over here. Control As you run this button over here, after you clear the console, okay, run it like this. And we're going to see step one on the console. Let's wait, there we go. This is step one. Okay? And how do we call the function two in the same process, we write it over here. I mean, we call it over here like this, okay? Ctrl F. Don't forget to clear the console over here, create like this, and then you paste this run button. Now you can see that we have step one, step two, that's because we have an order, right? JavaScript runs from the top to the bottom. Look which one is first one is first, and then to what if we reverse the order before I do first and then one like this Ctrl x Ctrl V like this. So first is two and then one. So what will happen to will run first and then one, clear the console. Save it, run it, you can see that we have step two first. And then step one, these are regular functions. Now let's form a relationship between these two using a callback what a callback. Okay? Let's remove this. Okay. Now we're going to make a connection of function to inside function one. So how do we do it, we do it easy a argument, we're gonna write over here called to see a double L, hyphen, okay? This is nothing, this is just an argument, okay? Nothing else. And over here, we're going to write step one complete. Okay? This is nothing special, this is just gonna get printed on our console. Okay? Please call step two, like this. Okay. Oh, like this. Now, in order to provoke function to what we do is, we take this argument over here, called to, and then, as number two function is a function, what we're going to write is we're going to give brackets over here like this. And now it's going to call it every time. Once our console dot log is printed like this, look, we don't have to call to anymore, we just call one, one. And then inside over here, we're gonna pass function number two, which one function number two, okay, to like this, look, how do they form a relationship between these two? If you clear the console, save it, run it, let's see the result. Look what is happening, step one, complete, please call step two. And then we have the step two. If you remember, JavaScript runs from the top to the bottom, right. So our console dot log is at the first and then call to, but if you reverse the order, what will happen? Let's see. Ctrl x, okay. Call it over here, Control V, Control S. Okay, and now clear the console, run it and let's see what happens. Now you can see that step two is first and then step one complete place called step two. Don't worry about this. If you don't understand it, we're going to look at another example right now. For that we're gonna start our ice cream business right now. For that we need to know the relationship between our customers and us. You can see that this is the flow Okay, first we get the order from the customers, then we're going to fish the ingredients. Then we're going to start the production and then we're going to serve ice cream. Okay, so we're going to create two functions, how many functions two functions, order function, production function, okay? If we don't get the order, we cannot start the production. This is how we're forming a connection between these two functions using what Tell me using a callback. Come on. Let's go to corporate and see the example. Come over to copan over here, you delete everything. Okay, we're going to use arrow function what function arrow function, right lead, first is order because without the order, the production doesn't start okay. Order equal to brackets, then arrow sign curly braces like this. Okay, now write the production function, but before that clear this console, okay? Let production duction here we're going to make the ice cream. Okay. So once we get the order, we're going to start the production of ice cream, okay. Production equal to brackets, arrow sign curly braces like this. Okay? Now in order to form that connection, that every time we get the order, the production will start. We do it like this. Okay, you come over here. Okay, you pass an argument. We're going to name it call production, okay. Call underscore, pro dot tion, okay. And inside these curly braces, we're going to write the same thing. Okay, the exact same name Ctrl C Ctrl, V over here and then brackets Okay, brackets like this. And look at there. We have formed a relationship between these two functions is it what a callback now let's test it. Now we're going to write console dot log, console dot log, okay? order placed, please call production like this, okay. And inside over here, we're going to write console dot log console dot log order received. Starting broad duction. Like this, okay. Now in order to run our function, what we'll do is, we're gonna write order over here or there, and inside that order, we're going to write the production. We're going to pass this function over here inside here, okay, bro. duction, like this. Okay, so Ctrl F, clear the console, save it, run it. Let's see what happens. Now, you can see that we have order placed, please call production. And then we got order received, start production. I hope you understand how the system works, or forming relationship between functions using a callback. Now let's understand one more thing, the relationship between the front end and the back end. The front end is our kitchen where we will make the ice cream and the back end is where we'll store ingredients like fruits, liquid stuffs, missionaries, raw materials, chocolate, etc. You know what raw materials means, right? The stocks, our stocks, the stocks is a back end kitchen is the front end, okay? So we're going to store our stocks inside a variable, okay, so come over to code pen over here at the very top, okay. Keep some space over here. And we're going to write let Okay, net stocks. So this variable will hold all of our stocks, like fruits, liquids, holders, toppings like chocolate, peanuts, etc. Okay, and that's equal to we're going to create a object over here like this object, okay? And inside the object, we're going to write arrays like this look, f are you IDs Okay, then colon over here, we're going to store all our foods inside what an array Okay, like this. Then we're going to write the name of our fruits. As I have defined them over here, I'm going to copy it over here. Okay. Ctrl C, and then Ctrl V over here. Now pause the video, take a moment to write these foods. Okay. Now how do we access a single stock from this variable? Okay, we comment everything from here from top to bottom like this, comment this like this. And in order to select one stock, we'll do it like this. First of all, we write the name of the variable What is the name of the variable stocks Okay, sto ck s then dot y dot because it is an object in order to access the object we need to form a dot and then the name of the object is which is fruits, okay, capital letter F r u IDs. And then what is this, this is an array. So how does the array works is it is arranged in the order of 012 and three, okay? So you know, x is that you right, square bracket, okay, and then if we want to access the banana, let's look at the order 012, we write two over here. Okay, and now let's print on the console. In order to do that you write console, dot log, then bracket at the end bracket, close it, Ctrl S, clear it, and then run it. Look, we got the banana. In the same way we have more stocks, we have the holders, the cups, cone sticks, and the toppings as chocolate sprinkles. So this is the variable that I have created. Okay, I'm going to copy it from here Ctrl C. And then over here, I'm going to paste it Ctrl V. Now pause the video, take a moment and write this talk on your code editor. So once that's done, you clear this from here. Okay, clear the console and you bring all of this back, okay, like this. There we go. Okay, now we're going to clean our console from here remove this and we're going to remove this Okay, and keep everything else and then you come in this form here, okay? Now Now the first thing is the order right customer places the order the order is changeable, which means how many options do we have? Look at our menu, we have the strawberry, grapes, banana, and Apple which means that the customer can pick anything he wishes, which means that for this we need a variable. So over here we're going to write fruit, name f Are you it? Okay, underscore and me like this 10th place Come over here. So we have two arguments, the fruit name and the call production, the Customer Picks the fruit, it gets over here. And then we get to know that what the customer picked. And then we're going to start the production. This is how we're forming a relationship between our functions. Okay. And over here, you uncomment this, and we need to keep it blank for now. Okay, you give double quotes over here, then comma, okay, it's Ctrl S, if you remember, this is our steps along with a time. So in order to ensure the time function, we're going to use set timeout. And we're going to print the steps on our console. Okay, so follow along with me. First of all, we're going to place the order by picking a fruit name, Okay, come back to VS code over here. And, and in order to select the fruit and place the order, it takes two seconds, how many seconds, two seconds. So come back to VS code over here and inside this order function. Okay, come here and write console or before granting console dot log, you have to use a set timeout function because it takes how many seconds, two seconds, set timeout like this. And inside over here, we're going to use an arrow function. You can also use an anonymous function like this look, function bracket curly braces like this, but we're going to keep it simple. We remove this, remove this function from here, and you're going to give that arrow sign like this, okay? And at the end, we're going to place the time function, okay, how many seconds, two seconds. So we're gonna write 2000 milliseconds, okay. 2123, like this. And inside over here, we're going to write console dot log, because we're going to, because we're going to print the result on our console. Okay, and use a backtick. We're not going to use double quote, no, no, we're not using double quotes, we're going to use a backtick. What backtick if you want to access the backtick, look at my keyboard over here. This is the exit key. And this is the key to write backticks. Okay, so you click this just once, and it is going to print us two backticks like this. Now, we're going to pause this fruit name inside this console dot log. So how do we do this? First of all, we're going to write $1 sign, okay, what $1 sign, dollar sign and then curly braces like this. And then we're going to place this inside here, but before that, we need to write something. We need to write the stocks. Okay? There's because we're picking it for stocks, right? So stocks, then the name of our fruits, okay, so dot F r q IDs, and then what? square brackets right square brackets over here, and then we're going to pass this inside there, okay? Ctrl C, Ctrl, C, and then write Control V over here. Okay, now we're going to save it. Let me show you how the system works. Okay, so over here, we're going to write zero Ctrl F to the console, run it, let's see, what do we get on the result? We got strawberry, you can see that the first fruit on our stock is a strawberry right? I explained this to you right, if you can recall how to access the stocks, we do it like this stocks dot F r u it s then square brackets and then the name of our food, I mean the order of I mean the order of the food 0123 right. So I have placed this inside over here. And then inside the array, I have placed this and over here I have placed zero which means that this zero is coming over here, which eventually means that we are going to get the strawberry, I hope you understood this. Nothing complicated. Okay, stocks dot fruits, then this and over here you write was selected like this, then Ctrl F, clear the console, run it. Let's see what we get. Strawberry was selected, you can see that you're gonna notice that we got the result after two seconds. Why is that? That's because we are using a set timeout function over here, which takes two seconds. I mean it I mean it prints a result after two seconds. Okay, let's start writing inside our production function. Okay, so come over here, we're going to use another set timeout function which runs in zero seconds. How do you do it? We do it like this right set timeout, bracket and plus a function over here like this arrow function, okay. And that is going to run in zero seconds, how many seconds? zero seconds. So right 0000. Instead, over here, we're going to write console dot log. And write production has started. And that is because we got the order right production have started Ctrl S to clear the console. Let's run it. So we're going to get the result after two seconds, one, two. There we go, we have the production has started and then strawberry was selected. Now we are seeing a or behavior over here. Why is that we were supposed to get this one first and the production has started at the last. That's because if you focus over here, you can see that look at the order, okay, JavaScript runs from the top to the bottom. Okay, so it is saying that this is a set timeout function, which means that it's going to take two seconds and this one, this is going to take how many seconds, zero seconds, Okay, this one will be stopped, this is over here. And this coal production will start immediately. So this is the coal production, which is production has started over here, and strawberry was selected, this is over here. That's why we're getting this order. But if you want to fix that, what you have to do is you're going to cut it from here Ctrl x, and you're going to place it where inside that set timeout function. Okay, like this look Ctrl V over here, okay. Now what will happen is, it's not going to start the production unless the fruit was selected. Now let's save it, clear the console and run it and let's see what happens. One, two. So you can see that after two seconds, strawberry was selected, and immediately we got the result production has started there is because we have said two seconds for which one strawberry was selected and zero seconds for which one production has started like this. I hope you understood so far. Now let's look at our second step, which is we're going to cut the fruit and it will take two seconds. So come inside the production function, we are done with our order function, okay, you can minimize it like this. We don't need it anymore. And don't make that mistake again. Otherwise, you're going to get the reverse order, which we watch previously, which is we got the production first and the strawberry at the last. Don't write it outside, okay. Don't write it over here. You're going to write it inside this set timeout function. Okay. So you come over here, and we're going to write another set timeout. Okay, it's gonna be two seconds, how many two seconds, set timeout, okay, brackets, and then pass a arrow function like this. Okay, arrow sign, curly braces, and then the time function, okay, how many seconds, two seconds. 2123, like this. And inside over here, we're going to write the food has been chopped console, the log. Das fruit has been shot Ctrl F, the let's clear the console. Save it. Let's run it and see what happens. One, two. Again, one, two. So we're getting the strawberry after two seconds. We have got the production immediately. And then we have got the fruit has been shoved after another additional two seconds. Now our system is running perfectly fine. Now let's follow the steps and complete our ice cream production so that we can buy ourselves a Lambo because why not? Now the third step is to add water and it takes one second how many one seconds. So inside the production function, where will we write, we're going to write it inside this set timeout function. So this is the parent children, it will be the grandchildren. Okay, so the food has been chopped over here. Enter to give some spacings and you're gonna write set timeout like this, okay, brackets, then pause the arrow function like this equal to Okay, clearly basis. Don't worry, I know where we're going. We're going to a callback hell, his collar callback hell, and I'm coming to the point don't wait, don't, don't panic, okay. And over here, you write the time function, okay? 1000 seconds over here like this. Okay, and inside over here, console dot log like this. Okay, inside over here, we're not going to write double quotes, we're going to write backticks. That's because we have to add water and ice and the water and ice inside our stocks over here, which is the liquid and then water ice zero and one in order to pick them. Pay close attention to what I write over here. Okay? Don't focus on anything else. 123 This is the third step. Okay, inside over here. backticks What backticks like this dollar sign, and then curly braces, okay, curly braces like this, any right end over here, okay, and then curly braces, again like this. Along with the dollar sign. Okay, you're going to, you're going to write was added. So, if you translate, it sounds like this dash and dash was added. So we're going to write So we're going to pick the water and ice. So first of all, you're going to write stocks. Okay? stocks dot liquid, okay? As because it is the name of that object, liquid and then square brackets like this. Over here you're going to write zero. Okay, that's because it will select the water. The first thing is the water and then we have the ice in order to pick that ice over here, okay, we're going to write stocks, dot liquid. Okay, then square brackets, we're gonna write one and it will pick the ice like this, okay? Ctrl F. And then we have also set it to one second. Okay, so we're going to get it after one second, clear the console. Save it right, let's count one, two, again, 121. Now we can see that we got this after two seconds, we got this immediately, we got it after two seconds, and an additional one second later, we got water and ice was added, which means that our function is running properly. Now we're gonna start the machine, it will take one second, okay? Inside this, okay, stocks, dot liquid, I mean, where we have selected the water and ice, okay, so inside over here, we're going to write set timeout. Okay, good. Then the arrow function over here, curly braces. And over here we're going to write what the time function okay? 1000 seconds like this. And inside here, we're going to write console dot log. And then we're going to write the machine was started. Let's write the machine has been started. Made the machine has been, let's write the machine was started. Okay, Ctrl S, let's complete all of our steps and then run it together. Okay. The next step is we need to select the container. Okay. Now, if we come over to the stocks, you can see that on the holder object, we have a lot of options. We have the cone, the cup and the stick. Let's pick the cup. No, I changed my mind. Let's pick the cone. Okay. In order to do that, you can go here, okay, where the machine was started, okay. And at the bottom over here, we're going to write the set timeout. So the cup takes two seconds, okay. So you're going to write set, timeout like this, okay? Give some space. Otherwise, you're going to get confused by yourself. Okay, set timeout, and then brackets. Then over here, you're going to give that arrow sign, I mean, the arrow function and then you're going to set it up. Sorry, the time over here. Okay, two seconds. And then you said over here, I'm going to write console dot log, we have pick which one? The code right, let's see that where is the code? holder? Okay. Stocks dot holder dot zero. Okay, let's write it over here. Okay, don't get confused. It is over here below the machine. Okay, we're going to give what backticks that's because we're trying to get something outside the function. Okay, so dollar sign curly braces, stocks strc Ks stocks dot which one was that holder? It's your LD. That's because this is the holder over here. Okay. Stocks dot holder and then zero. Let's come back over here. Then we're going to give square brackets like this and then we're going to write zero over here and then we're done. What's the next step? The next step is we're going to select the topping ah my favorite I love chocolates whatever you comment down below Do you like waffles chocolates or peanuts? Okay then um where was I? Oh yes, we're going to select what chocolates okay as the toppings look stocks dot toppings we have that so don't forget that Okay, and then we're going to pick the zero You can also pick peanuts also as well. In order to pick that peanut you're going to write one okay stocks dot toppings dot one okay. Over here okay. This is the holder Oh, I forgot to write okay. Which means that the cup was I mean the cone was selected. Again selected. Or you can also write ice cream was placed on the cone. Okay, come over here and write ice cream was placed on what the ice cream was placed on this one which means on the cold ice cream was placed on go. Alright, so inside over here, give some spacings and we're going to pick what the topping it takes three seconds because we need some time to make The chocolate right? So we're here right? set timeout, okay, exact date and arrow function like this and then it's going to take three or sorry, three seconds. Okay. So what are we going to do? We're going to pick toppings. So console, log like this and backticks Okay, don't forget that backticks like this. dollar sign, curly braces and what we're going to write stocks, stocks dot toppings, we have the S at the last toppings and then this square brackets, then write 01 through s. And what's the last step? We're going to serve the ice cream okay. So in order to serve the ice cream come over here, okay, where we have written this Oh, this is just plain chocolate. I forgot to write more text okay. So stocks dot toppings, which is a chocolate was added okay? As toppings like this, okay. And over here, give some spacing, right, another set timeout function. Okay, set timeout. And over here. We're going to place an arrow function like this. And then we're going to set the time which takes how many seconds to serve two seconds, okay. 2123 console dot log. Then double quotes. Serve. Ice cream Ctrl S, okay, now clear the console over here. Now run the code. Let's see what happens. Okay, strawberry was selected production has started fruit has been chopped water and ice added the machine was started, ice cream was placed on cone chocolate was added as toppings. Then we're gonna serve the ice cream. Then we're going to take the money and buy ourselves a Lambo. Yay, party. Okay, now we have completed our process, the callbacks. But look at look at this, what have we created? Let me expand this and let me show you what we have created. It is called a callback hell. Look at here Look. Look at this format of how it is going. Okay, look, look look look like this. And then it is indeed like this. This is called a callback hell, what is it called? callback hell. Let me show you the format. The callback hell looks something like this. Look at this format over here. And look at our code over here. It looks similar. It looks like this. Look, it looks like a Christmas tree. You can also call it the Christmas tree of hell. Because why not? I know I know. I know that callbacks are very confusing. And it is a hell. So what's the solution of callbacks, we have promises and promises looks like this. Look. This is the promises It looks very clean. Very neat. So let's compare again, this is our callback hell. And this is our promises. Look how clean it looks. The thing works like this callbacks make relationships, parent children, grandchildren, grand grandchildren, grand grand grandchildren, grand grand grand grandchildren, it was relationship like this. So what what what promises do is it takes instructions like this, first do this, then this, then this, then this, then then then then then it works like this. Which means that you can keep your code very neat and clean. So far, so good. Let's start discussing our promises. In order to understand the promise, first of all, you need to understand the promise cycle. So this is the diagram I made about the promise cycle. First of all, a promise is made, what promise do we make to our customers, sir, we promise that we're gonna serve you ice cream, what ice cream, we promise we're going to serve you ice cream. So there are two parts of this promise, either a truly fulfilled or it will get rejected. Okay, so here, first of all, it comes to this stage, the pending stage, every customer when they come into our shop, we promise we're gonna serve you ice cream. So our customer interests, our shop sits on the table looks at the menu, and he or she didn't order anything. He's there sitting over there. This stage is called the painting stage. He didn't order anything just sitting over there. So this is the pending stage, nothing is happening. We then take the order, we didn't start the production. Okay. And now let's say that the customer has placed an order he wants mango ice cream. If we have the mango on our stock, then we can go to the next stage, which is we can resolve the promise, which means that we can serve ice cream to our customer. But if we don't have the mango, then what will happen is we have to reject him by saying Sir, we don't have mango at our stocks. We're very sorry. So let's say that we have mango on our stocks, what will happen is, is going to get resolved, first of all, and then after that, what will happen is we have seven steps to make ice cream, right? Yes or No, we have seven steps to make ice cream, and it will follow like this, first of all do this, then this, then this, then this, like this intro, there are seven dents or six dents, depending on the circumstances, depending on the situation, don't worry, we're gonna write code and see how this thing works. Once that's done, we can serve ice cream to our customers. But let's say that we didn't have mango, what will happen is, we have to pass through this reject stage. And then over here on this catch, we're gonna write a sorry, note, we're gonna say, sir, we're very sorry, we don't have this on our stock. We sincerely apologize for the inconvenience. And once either we get resolved, either our promise gets resolved or rejected, this finally will always run, let's say that we serve zero customers. At the end of the day, we have to close our shutters. I mean, we have to close our shop. But let's say that at the end of the day, we serve 100 customers, 100 customers, we still have to close our shop, right? Because the employees has to leave, we have to leave. This is the finally handler, don't worry, we're going to discuss all of them in details. Once you have understood this promise cycle, we need to understand for more things, don't worry, this is very short. First of all, we need to understand the relationship between two things, time and work, what time and work. Because we have this list over here, you can see that first of all, we have the work and then the time. That's why those two relationships. The next thing is the promise chaining. What promise chaining is, if you come over here, you can see that we are doing all the steps through then then then then this is the promise chaining. Okay, so first of all, we get resolved, okay, and then it comes over here, then we return it First of all, resolve, then return, return, return return like that, don't worry, we're gonna write code and explain, and I'm gonna explain that to you. All right. So this is a promise chaining, the error handling part is this one. Look, this catch handler is the error handling part when we have a reject. All right, and the final handler I told you earlier, right, this is the final handler handler is gonna run whether we serve zero or 100 customers, I mean, whether our promise gets resolved or rejected, or I then come to your code editor over here, delete everything except your stocks. Variable over here, and you clear the console over here. Okay. Now, the first thing is the absolute first thing is we're going to create a variable named is shop open, follow me. Let is underscore shop underscore open, okay, equal to true. So what this is holding is, we're asking the question is our shop open or closed? If it is true, we are serving ice cream. If it is closed, we're sorry, sir, we are closed. Okay. Now we're going to create a function, an arrow function with the name order like this, let order equal to brackets over here, then equal to arrow function. Now what we're going to do is, remember the relationship between time and work that I told you earlier, we're going to write time and work over here, okay, time over here, and work over here. You can also shift the positions you can write work first and then time, it totally depends on you. And the next thing is we're going to make a promise. First, we made the order then we made the promise sir, we're going to serve you a stream like this. Follow me. First of all, you're going to write return, okay, new, then capital letter P, what capital letter p, p, r o m i s e promise like this look, then brackets, you a little bit of space so that you can understand what we are writing. Okay, over here, we're going to give brackets over here again, we're going to create a arrow function look like this, okay? Like this. We've made a arrow function over here. Now, press Enter. Now, inside this bracket, we're gonna pass two arguments resolve reject, which means that we have how many stage three stages, pending resolve, reject, we're gonna write resolve, reject, we don't need the pending. Okay? Now, right resolve, like this resolve like this. And over here, you're gonna write, reject, reject like this. Okay, so we made a promise. Now it's time to run that promise. Okay, now we have two stages, resolve and reject. Let's write an if else statement. So right. If is shop open, which means If a shop is open, then we're gonna resolve it like this resolve, which means that we're gonna serve ice cream that our shop is open. Welcome, sir, we're gonna serve you ice cream, how are we gonna serve our ice cream, we're going to write this work. You see this work over here, we're gonna write this work over here, like this. Look, we pass the work over here, which means that when the shop is open, when our customer came, we're gonna say sir, we promise that we're gonna serve ice cream. As long as we have all the stocks and the raw materials, then we're going to start working. Alright, now if our shop is closed, then what will happen we're going to write an L statement over here, okay, curly braces. And over here, we're going to write one reject, reject like this. And you close it like this, I mean, the brackets and over here, you write console of sorry, console dot log, like this, okay. And over here, we're going to write our, sorry, our shop is closed, okay? Like this. So far, so good. Now, you can see that we have formed relationship between with just work Look, this work is over here. But we also need to form relationship between time also along with work. So what will we use, we're going to use a set timeout function, so that we can form the relationship between our time and work. Follow along with me, okay, so below this if statement, right, set timeout, okay. And then brackets over here form a arrow function like this look, okay, arrow function like this. And then what you're going to do is you're going to put a comma over here, comma, we're going to pause this time function, I mean, the time word over here, which means that every time we need to write the order function, we're going to place the time and the work. Don't worry, we're gonna write it. And then what you're gonna do is you're going to cut this result from here, Ctrl x, okay? And then you're going to paste it inside this arrow function. Now what will happen is, is going to form a seal after 1234567 we have got seven steps. Now save this code. Let's test it. Okay, so what is the name of our function? It's order, okay? So come on at the very bottom over here, right order. Okay, now brackets. Now look at the first thing, what is it? First thing is the time and then the work. So how you are going to define this follow along with me. The first thing is time. Okay, so let's look at the chart. So this is our chart, which carries all the steps. First thing is we need to place the order Okay, it's gonna take two seconds, in order to write that first of all, we're going to give the time Okay, you're gonna write two seconds, like this to 123 2000 milliseconds and then a comma, comma like this. And now we're going to create a small arrow function, look at this. Okay? And then the arrow sign. If you write the statement in a single line, you don't have to put these curly braces, you can just use directly like this console dot log. Okay, first of all, we're going to select the fruit in order to select the foot. What do you need? backticks? What backticks like this, okay, then dollar sign curly braces like this. So what's the name of our stocks? There's one Okay, stocks dot fruit. Let me check fruits, yes, stocks, dot fruits like this. And then we're going to pick the strawberry, okay, zero. This has square brackets and then zero like this. Now let's test it Ctrl S and then the console, save it and run it like this. After two seconds, we're going to get the result One, two. There we go. We have struggled over here. Now let's complete this by saying that strawberry was selected, okay. Ctrl S, let the console run it. One, two. There we go. We have our strawberry was selected. I hope you understood the relationship between the time and work function. This was pretty simple. Now let's start discussing about the promise chaining which is this one over here. That then then then then part first you have to do this, then this then this, etc. Let's come back to the VS code over here and at the very bottom, if we want to work with the promise chaining you cannot have anything between the first call of the order and then your then handler like this. If you want to do promise chaining you have to do this dot then Okay, then dot then dot, then so on and so forth of me a spelling mistake My bad, then you cannot have this semicolon over here, okay, so just remove the semicolon from there. Okay, now it's going to work perfectly fine, you can have 100 lines of spaces like this. And it's still going to work like this. But for this tutorial, I'm going to have just two spaces so that it can look very good and tidy. Okay? So, like this, look at that. It looks quite good. And now in order to write, I mean, in order to given instructions said that then, let's look at our chart. So this is the chart, which carries the steps. What is the next step, we need to cut the fruit, and it's going to take two seconds. Okay, now come back to code pen and over here, before cutting the fruit. Let's give a call to start the production. How do we do this, first of all, write an arrow function like this looked, okay, arrow sign, you can also write it in a single line, but I'm gonna give curly braces over here, and then you're gonna return it, you have to return it otherwise it's not gonna work. The first part is resolve, then return, return, return, return, return, so on and so forth. If you don't write the return over there, then it's not gonna work. Okay, follow along with me, right return over here. Okay? Then order. What was that order the name of our function, okay, like this look, and then you're going to place what time first, in order to start the production, it takes zero second 0000, comma, and then you're going to write a function over here, okay? arrow function like this. Console dot log, like this. And then we're going to write over here, production has started production has, sorry, started. Okay, save it, and then we're gonna clear the console. Let's run it. So we're going to get this one after two seconds. And this one immediately One, two. There is our strawberry was selected and production has started it will took two seconds, and this one took just zero seconds. Okay, now let's write the next step. What was the next step we need to chop the foot? It takes two seconds, I'm in cut the foot. Okay, let's follow the same process. Okay, over here, you're going to write an arrow function like this equal to then this arrow sign curly braces right over here. What return what was it return? Return like this. Okay, order. We're going to write 2000 over here, which means two seconds. Okay, it goes to like this then console dot log. What was it? We're gonna cut the fruit okay? The fruit was chop sorry Ctrl S Okay. There we go. Following this chart, let's complete our process. Okay, next is we have to add water and ice let's go and do it. So over here we're going to follow the same process. Let's actually copy this code from here Okay, no let's not copy the code Okay, let's just do it manually so that you can learn it okay follow along with me arrow function over here okay. We there we turn order is going to take how many seconds one second okay 1123 Okay. Then this sign which is the error function given curly braces over here okay. And inside of a hearing right console dot log. What was it backticks Okay, then dollar sign curly braces that is because we need to select what our liquid which is water and ice okay stocks dot liquid come at the very bottom over here right stocks dot liquid like this and then zero in order to select what the water okay and over here right and again you write dollar sign curly basis stocks dot liquid. And then what was it one? Okay. So water and ice was selected like this. There we go. And remember this this is very crucial. You cannot have semicolons between dens okay? Remove this semicolon from here I mistakenly wrote it okay. space and over here we're going to write then. brackets, arrow sign like this. curly braces. What's the next step? Let's see. We start the machine in one second. Okay. So right read terror, sorry, return border square bracket. Then first of all need to write That time, okay, one seconds, like this arrow sign, like this. Console dot log. Start the machine, like this. Next step is we need to select the container, we're gonna select the cone, okay? In order to do that, come here, then. Okay, then arrow function like this return order. It takes how many seconds? Two seconds to select a comb. Okay. Sorry, my bag of then the arrow function over here. curly braces inside you're gonna write console. log. What was it? backticks Okay, then dollar sign curly braces over here the right stocks dot which was it? Let's see. Top n a holder holder and then zero because the cone is over here. Okay. At the very bottom, holder issue LD are like this. square bracket, zero. Okay, then you're going to write was ice cream was placed on this holder. Okay, so ice cream placed on it translates to ice cream placed on comb. Okay, next step is select toppings. We're going to pick chocolate dot then Okay, then this side, I mean arrow function, return. Return order. Three seconds because chocolate takes time to melt right? So equal to arrow function, then console dot log. Then inside over here backticks. Okay, when backticks Okay, don't forget. dollar sign, curly braces. And we're here you write stocks dot toppings, d o p i n g s, don't forget the last s droppings and then square brackets over here we're gonna write zero. Chocolate was selected like this. So we're almost done. Then we're going to serve the ice cream serve ice cream we're going to write dot 10. Okay, like this. Return order, right how many seconds is gonna take is gonna take two seconds Okay, equal to three races. We don't need curly braces Actually, we can write it directly ok 123 like this. Like this equal to this sign the arrow function and then console dot log. Okay, double quotes icecream was served Ctrl S There we go. completed our process now let's run our code before that clear this console. Run it let's go strawberry your selected production has started the food was chopped water and ice added start the machine ice cream place and co then where is the chocolate there is our chocolate chocolate was selected ice cream was served. He was the money and let us buys the Lambo Yay. Now is now it's time to understand the error handling part, okay, which is this one over here the catch handler in order to understand the catch handler, comment a variable bottom over here, okay, and he right? Or don't forget to remove this technical form here. Otherwise, it's not going to work, right dot catch like this, okay, like this, then write an arrow function like this, okay, equal to curly braces like this. And over here, right console, the log customer left like this Ctrl S and then cleared the console. Now this catch will only work when our promise is rejected. I mean, when we cannot serve ice cream to our customers, then this sketch, then this sketch will work. Let me show you. Okay, if you can read if you can remember this variable at the very top over here below the stock, which is his shop open. It is true, let's convert it to false and let's see what will happen theoretically theoretically, then we're going to run this code Okay. Let's see. We have this if statement over here. It will run when the variable is true, but it is false which means our shop is closed it look at here else reject our shop is closed. So false and then this this code will be run first and then at the very bottom we have the sketch, then this line of code will run and these things will not run this All then then then it will not run. Let's do a test run it and let's see what happens okay so our shop is closed the first thing we're going to get is our shop is closed look at this message over here inside this reject statement look our shop is closed and then on the way bottom look at this is catch handler customer left We're very sorry this left the left us look the customer left. We're not going to make the money we can't buy the Lambo We're very sorry. Alright then I hope you understood this catch I mean the error handling part with the catch handler let's now understand this finally handler I told you earlier that is this will run whether our promises resolved or rejected it will run anyways. Okay, now let's look at this example. But first, remove this semicolon otherwise it's not gonna work okay then dot finally like this. And inside over here we're going to write what Tell me arrow function take like this equal to this sign curly braces like this. We're gonna write console dot log like this and inside over here we're gonna write our shop is closed. Now let's write day ended shop is closed Okay, dead end dead shop is closed like this Okay, let's say we remember what state is it in our shop is closed which is false. Okay, let's run it in this way. You can also run it in through let's look at our shop is closed This message is coming from this rejects statement over here customer left is coming from this statement over here this catch handler okay and this day ended shop is closed it's coming from this finally handler let's set it to true and let's see what will actually happen without finally handle okay Ctrl S run it to the console and let's see what happens okay we got this statement then this then water nice edit then this is completion code then my favorite part is the chocolate Yay. And then ice cream was served day ended shop is close look at this look look at the various day ended shop is closed is coming from this finally handler so what did you understand? It will run whether our promises resolved or rejected. And with that we finished our discussion with promises everyone please welcome async await Yay. So this is actually proclaim to be a better way to write promises. Let's go and dissect async await but first you take a break because it really deserves a break in order to understand the async await first of all learn to know the difference between the promises and async await let's look at an example. Come back to VS code I mean code pen delete everything except our this part okay? Keep the shop and stocks okay now in the promises part How did we make a promise like this look? function Let's name it order okay order like this. Okay, no, we actually didn't write it like this My bad we wrote it in the airway function I mean the arrow function to let order equal to this equal to arrow sign curly braces like this and in order to make the promise we wrote what return new promise return new my brand new capital letter P r o m i s he promises like this and then inside these brackets we wrote another arrow function like this okay and inside here we wrote resolve reject like this Okay. And then he said over here what we wrote if statement Okay, then this one and inside over here. What did we rewrite? What did we write? We wrote the result like this, okay. Look at this and over the else statement. What did we write? Okay, they wrote the reject over here. Oh, my bad. JACK like this. Okay. We wrote it like this. This was the promise. What how do we write the async await? Look at this blog look, right first of all the async keyword what the async keyword is sink. Okay, you write the function order. Okay, this and then the curly braces. And there we go. We made ourselves a promise. How simple is that? But wait, the story doesn't end here. We need to understand two more things, the try catch handler and how to use the await keyword. So this is the async keyword, we need to understand the await keyword. Let's dive in. Now let's come back to our code pen and understand the difference between the promise And our async await only then we're gonna understand the try catch. Okay? Come over here and see this if an else statement, what did we write? How did we make the promise we made this promise like this first of all, we load the function over here, and then return new promise, then resolve reject. And then we wrote The if statement, which is if this is true, we wrote this tr, e true, okay? Then it's going to resolve it. If it is not true, then it is going to reject it like this. This is how we make the promise. And then what did we do? Okay, we comment this is like this. Let me actually finish with the promise part. Then we're going to come to the async JavaScript part. I'm an async await part. This is the order right? How did we write it? order? Okay, order. This is our first start. And then what did you write? dot then? Okay, dot, then dot, then. Oh, sorry, my bad. And then what did you write? And then we wrote dot catch, catch. TC CIT, C of I forgot my bad ca tch catch handler and then the dot finally handler, okay, so this will work when, what, if our promise was resolved, this will work when it is rejected, this will work anyways, is still going to work even if it was resolved or rejected. But in terms of this async await, let's actually test it with this how this works, okay. Don't worry about this one. Let's comment this. We're gonna return over here. Okay, don't worry. Comment this like this and come over here. So first thing is if we want to declare, I mean, if we want to work with promises in the async await. World, then what we have to do is we have to declare this async word before the function I showed you a little while ago, right? And then inside over here, you have three options. I mean, three things to write, try, get. And finally, what do we try to get final over here we wrote what the if else statement, and over here we're going to write try, catch Finally, following the right cry over here. Okay. Go your braces like this. And then you're going to write the catch, okay. And brackets over here. You write error. Okay. curly braces. And over here you write. Finally like this. Okay, then curly braces. So what does this finally does it? It runs code anyways, okay, let's write it. Okay. Don't worry. We're going to test it. Okay. Console dot log, runs code any way. Okay. Inside this catch handler. I mean, let's start with the try. Okay, let's create a fake problem. What problem fake problem over here we're going to right away, don't worry about a word keyword I'm going to discuss in detail about this await keyword. Okay, it's coming. Wait, you're right. Anyway, ABC. So this ABC is actually pointing out to a function which doesn't exist. I still wrote it because it's a fake function. What function fake function okay? So in fact, this catch handler, what we're going to write is console, the log like this and over here, we're gonna write ABC doesn't exist. exist, okay? And this error is actually written like this coma arrow. Okay. For now, we don't need this error part, but we're just keeping it over here as it is, we just want to work with our try catch this console log and this Finally, in this Finally, handler in order to understand the main theory of the async await, okay, so you clear the console here. As I told you earlier, this aways ABC I mean, this ABC part doesn't exist look at the entire code field. Nothing exists which is named ABC right? So in order to run this first of all you need to provoke it like by saying order at the very bottom over here right order okay? My bad sorry, like this Ctrl S and let's run it and let's see what happens there we go. We got the message. First of all, ABC doesn't exist because we don't have anything named ABC. Then it then we have run scope. Anyways, look at this the finally handler Do you remember this Finally, from the promises, this is over here, it will run code anyways. By the way, do you remember this handlers this then catch finally handlers, you can also use them inside I mean, outside the async await system as well. Let me show you a demo. Okay. You right at the bottom of the order after removing that semicolon, but then like this, okay brackets, then create a Arrow function like this and over here you write console dot log then write anything you wish I'm gonna write like this My read I read I don't I cannot think anything of good right now Ctrl F clear this run it like this. There we go. We have got that then handler it is pending over here. Okay? First of all we got that error and then the final is going to run anyways Okay, so that is over here and then that then what will happen after our promise is resolved is going to do this part over here. And you can also use those then cat finally etc. After here is the chaining part. Okay, I hope you understood this far. Now let's do a small test and understand that a weight keyword let's say that I am the chef of the restaurant, okay, just look at me. I am the chef of the restaurant. Okay, I make ice cream. I took the order from the customer and I'm making ice cream okay tu tu tu tu tu my bed sorry. Okay, so I'm making ice cream over here but I then realized that my customer didn't tell me which topping would he like so I have to go outside the kitchen ask the customer sir which stuffing topping would you like chocolate or peanut? There he is going to give me the order. Give me chocolate and then I have to return to the kitchen and start working. Look how the process is working. I am going outside which means that the kitchen is being stopped completely without the chef the kitchen doesn't work. But realize this that there are other employees at the restaurant who is working who is cleaning the tables, cleaning the dishes, taking orders, etc. Everything else except the kitchen is working. This is where we use the await keyword. Let's do a C test and understand about this await keyword in details. Let's start now come back to corporate Now come back to code pen and remove everything except the stocks and the East shop open. Okay, remove everything like this. Goodbye forever. Okay, now what we're going to do is we're going to create a function what a function which run arrow function. Okay, let, let's write toppings choice, okay. Which will add to the customer. So which topic would you love? Okay, it was blue my bed equal to bracket. This sign is the arrow sign and instead we're here we're going to make a new promise what new promise. Okay, so return new promise like this. And we're here we're going to write, resolve, reject, don't worry, I'm coming on the async await part. Okay. So equal to arrow sign curly braces and over here what we are going to write come on to me resolve reject. Resolving My bad. We check like this. Okay. Now over here, what are we going to do? We're going to create a set timeout. Let's say that the asking process takes how many seconds three seconds, how many? Three seconds. Okay, in order to do that, we're going to write set timeout, okay, for three seconds. So write set timeout like this, okay? And then what we have to write is Come on, tell me arrow function. Okay, like this. And then we're gonna set the time, how many seconds, three seconds. 3123. All right, now inside over here, we're going to write console dot log console. dot log. We're here right? Which stop being you love of my read. Like this. Remove this console. From here. Clear. Okay, Ctrl S. Now we made a small promise that we have to go outside the kitchen x our customer, what would you love to have as a topping. Now at the very bottom, what we're going to create is function a sync function is sync function. We're going to write what brackets are. We also have to give it a name. We're gonna name it kitchen. kitc HTN kitchen over here, and then curly braces over here like this. Now follow along with me. We're gonna write console dot log five times A, B, C, D, E, like this, okay? console dot log. Okay, like this. Ctrl C, one of my red 2345. Okay, now, we'll get right over here. Ah, don't worry. I'm going to explain that why I wrote ABCD My bad. T. Hey, okay. Now what we're going to do is, let me actually explain why I wrote this ABC and all the spots. Okay, the thing is, these are the steps we're walking into. I mean, we're working at the kitchen. Okay, we're making ice cream. We're following the steps 1234 and the very mill, we just realized which topping would our customer love. Okay, so we have to go outside the kitchen. What? Outside the kitchen, ask him. So what did you love to have? So this is our kitchen, we're inside over here, where where we're inside this kitchen, we're working. Now we need to go outside and come to this toppings choice, which is the where the customer is sitting asked him. So what would you love to have. And then once we have got the data, we're going to come back to our kitchen, start working and then serve Him. In the meantime, what will happen, others other works like cleaning the dishes, cleaning the table, taking other customers orders will keep running. Don't worry, I'm coming to that part. Okay. Now what you're going to write is at the very middle over here, you're going to write a wait, then what the name of this function What is this toppings choice Ctrl C, that one Ctrl V, and then brackets, close it on. And then what we're going to do is in order to provoke this function, we're going to come over at the very bottom over here, you're going to write kitchen, what kitchen it's like this, okay? And then we're gonna define other task, which is happening except myself. I'm the work on the chef. Okay, other words? What cooking? I mean, sorry, cleaning the dishes. Cleaning the table. The other quarters? Let's write them. Okay. Console, the log? cleaning my bag. sealing the dishes console, the log like this conference. I mean, this one Ctrl C Ctrl. V, then what? Cleaning the tables? Actually, you right doing the dishes? It sounds good. I guess. doing dishes dishes, cleaning the table. And then at the bottom, we're going to write taking others order like this. Okay. Ctrl S. Now, let me theoretically explain you before running the Run button that what is actually happening. Okay, so I'm working over here. Okay, I'm making the ice cream. And then I realized that I didn't have the necessary direction which topping would my customer love. So I'm physically going outside the kitchen to ask the customer what would you love to have, which means that this entire process is stopped, my kitchen is stopped, nothing is happening because the chef is outside. And in the meantime, other work like this one will still happen like doing the dishes, cleaning the table, taking others orders. And once a return to the kitchen, this to work D and E will work. Let's run it and let's test what will happen. Okay, look, a B, C, doing the dishes cleaning the table taking others orders. Which topic would you love? Oh, we didn't actually get the D and D. That's because I actually forgot something. I forgot to write the resolve over here. And without reading the resolve, it's not going to return our other tasks. Okay, so come over here on the toppings choice Okay, or and inside over here, you're going to write V zoolz. Like this bracket. And inside the brackets, we're going to place this console over here. Okay. Ctrl x, my apologies. I actually forgot to write that part and Ctrl S Okay, now clear this and run the code and let's see what actually happens. Okay. Oh, I actually have an error. I don't know why but let's check it out. Okay, console log. Which dropping my bad. Like go like this Ctrl S. Let's see what happens right now if you had a console like this. Now you can see that we have fixed our error over here we have written the result over here and we have replaced the console log inside this line over here now it's gonna work perfectly fine. Let's run the code and see what happens. There we go. We have ABC doing the dishes, cleaning the tables taking other orders which dropping Do you like and then we have other works. What is happening Let me explain again. So what is happening look here in the kitchen, I am working in the kitchen, where am I working in the kitchen. So these three tasks are done. Then I remember what topping does my customer likes. So I'm going outside and asking him in the meantime others are working look, other people are working over here. If there was 100 tasks, they would have worked. They would have been working On those tasks, okay. So once these tasks are done in the meantime what I have done is I have gone to the customer action to the data returned to the kitchen and I started working then D and E is completed on this bottom over here you can see that, I hope you understood the await keyword. I hope you understood the resolve keyword. Let's reopen our shop and welcome customers. Okay, now come back to code and delete everything except this one. And this one, okay, like this, follow along with me delete goodbye. And over here, what we're going to write is first of all a time function because we need to set the relationship between time and work right? So you write a function, okay, time, and right over here, MS, which is milliseconds, okay. curly braces like this, we're going to create a new promise. Okay, return, Neil. Tom is don't worry about the async await I'm coming to that part. Okay, capital letter P, not small letter p, r, O, and my se. And then you said over here we're going to write the resolve and reject part resolve. And the reject part, the check like this, and arrow function, my bad arrow function over here like this. And then the if else statement like this, if our shop is open, is shop open look at this is shop open, and then we're going to write what we're going to create set timeout. Remember this set timeout like this, and over here, we're forming a relationship between our time and work okay, so inside here, we're going to write the result we are passing this result over here, which means that we're setting the relationship between the time and work okay. So resolve over here and then that Ms part should be over here, m s like this, at on the L statement, e l s statement. So what this will do is it will notify us when our shop is closed, I mean when is shop open, set to false, okay, like that. So we're gonna write reject, like this. Instead, over here, we're gonna write console. Console, dot log, like this. And we're going to write, shop, my bag is closed Ctrl S. Now we're going to write an async function named kitchen to start our production inside there. Okay, come at the very bottom of before that you clean the console because it looks quite dirty. Okay, so now you're going to write a sync, like this function create the kitchen, okay? Okay, it CH, E and kitchen like this curly braces, like this over here. And then we're going to write cry, okay, like this, then catch, like this. And if you want, you can also write the Finally, that's completely up to you, but I'm gonna write it because a lot of you don't really understand how to work with the try, catch. And finally, I'm going to explain everything in details. Don't worry about it. Okay. And over here, I actually forgot to write brackets and arrow, like this. All right. And now in order to run this, what we have to write is at the very bottom, we are right the kitchen, which is the trigger kitchen, like this, okay, Ctrl S. Now let's actually test a function to check whether if it's working or not, so come on in this catch handler, and we're going to write console dot log like this. We're going to write customer left, okay, customer, left like this and over here and right arrow like this. And inside over here, what we're going to write is shop is closed. Okay? console. log. de endet. shop is closed. Okay. Now, what are we going to write inside this fry handler? Let's see. Okay, one by one. If you remember this chart, the first thing that we need to pick is the order I mean, the fruit name. Okay, so come back to our code pen over here. And we're going to write console, log log, and then backticks. Don't forget that dollar sign curly braces like this. And then we're going to write stocks, like the stocks dot fruit, f r u, it s, and then we're going to pick the strawberry zero, or you can pick anything you wish from this list of stocks, okay? You can pick grapes, banana, etc. Alright, now what we're going to do is, remember this, we have two seconds of time, how are we gonna define the two seconds over here? In order to define the two seconds? Do you remember this function over here, the time function? We're gonna utilize this look at here, look Write a wait. And then what the name of this function time, okay, time over here. And then we're going to set it to how many seconds, two seconds to 123 2000 milliseconds means two seconds. Now let's test that code. Okay, as our shop is open, now it's gonna give us what resolve you can this is going to get resolved. Okay, let's run the code and see what happens. So after two seconds, we're going to get this property over here. That's because we have set it to two seconds, and they ended shop clothes will be printed immediately because we didn't assign any time over here. So it is assured that that function works and there is no problem in our function. Let's complete our ice cream production business, following these steps over here, okay, now what you're going to do is come over here, you press Enter, Enter. I will keep some space between your code so that it looks neat and clean. And then we're gonna write console dot log. Start the production, okay? Start the production, it's not gonna take any time. Okay, we're going to keep it blank for now, what if you want to learn, but if you want, you can keep a wait. Time. 0000 is completely up to you. But for making you understand how the system works, we're going to keep it 0000 so that you can know that this thing takes zero seconds to start. Okay, now we're gonna start, we're gonna cut the fruit, okay, so console dot log. Got the fruit like this is gonna take how many seconds? Two seconds? Every time to 123 I mean two seconds. Okay, then we have the add water and ice is going to take one second. Let's go boys and girls. Oh, my bad, I will do the wrong thing. Anyway, Tom is going to take 123 like this console dot log. And we're gonna write what water and ice backticks dollar sign curly braces and dollar sign curly braces was added like this and over here we're gonna write big the water stocks dot liquid square bracket zero. Okay, stocks dot liquid. Then we're going to write one. There we go. And over here, we're going to start the machine in one second. Select the container to second. So how do we do this? We can also copy this No worries. Like this okay Ctrl V. First we need what one second to start the machine and then two seconds to select the container. So one second is over here. And the two second part is over here. Okay, the second part is here and let's actually complete altogether the toppings parse takes three seconds to serve ice cream which takes two seconds Okay, so let's do it like this. So these are three seconds over here. This is our serving over here Okay, two seconds now we're going to write stuff start the mission okay. So console log. Start deep machine like this. And then console dot log. It will be our select the container okay. backticks dollar sign curly braces. Stops got holder? Zero it will pick the cone. Okay. Ice cream placed on cone ice cream placed on cone like this. Okay, now configured log console dot log like this. Do we need backticks? Yes, because we need to pick that toppings. Chocolate backticks dollar sign curly braces, stocks dot toppings DOB imgs then zero which will pick the chocolate was selected as the very last what we are going to write Yes, we can serve ice cream take the money and buy ourselves a Lambo because why not? Come on boys and girls console a dot log. Okay sir, ice cream. Let's save our code clear our console like this. And let's run a run it and see what happens. Maintaining time everything will run strawberry. Oh actually forgot right strawberry was selected. My bag was selected. Okay, clear this console. Save it, run it again. Sequential Maintaining time it will run look straightaway to a selected start the production cut the fruit then this start the machine I simulation code then after three seconds we will have chocolate was selected service day and shop is closed but what will happen if we have false over here let's see okay false which means that is going to reject it look at here reject on the block shop is closed which means that this else this reject this thing will come. I mean this thing will be painted first and then look at this catch over here. Get a better customer left and then the final day ended shop is closed. Let's test it. We're gonna shop is closed customer left they ended shop is closed. This is coming from where let me show you this is coming from this else this reject from the time function customer left it is coming from where look at this is fun coming from the catch and they ended shop is closed. This will run anyways it is coming from this finally handler so we successfully made ice cream today. And along with that we have completed our tutorial. If you liked the video, give a like share it with a friend and feel free to subscribe Till then Take care and I'll see in the next video. Bye bye
