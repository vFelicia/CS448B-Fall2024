With timestamps:

00:06 - hey everybody welcome to live coding
00:08 - with jesse i'm jesse and today we're
00:10 - going to do some testing
00:13 - so
00:15 - um
00:17 - got a few uh comments in the chat
00:19 - already
00:20 - uh so
00:22 - you just i think it's just everybody
00:23 - saying hi say everybody
00:26 - um
00:27 - if you're just joining us for the first
00:30 - time
00:31 - we are building a
00:33 - a game just a really basic
00:35 - children's game to help them learn math
00:39 - we're building it in react native web
00:41 - which means we use
00:43 - react native
00:45 - syntax
00:47 - and then it gets
00:49 - turned into a web app
00:52 - this may seem a little bit strange why
00:54 - not just use react
00:57 - well if you do it like this then you
00:58 - could use the same code base for a web
01:00 - app and a mobile app uh so that's why
01:03 - we're doing it like this if you want
01:05 - more explanation check out some of the
01:06 - earlier streams
01:08 - like maybe like day one and two
01:11 - and then
01:12 - i go
01:14 - in a lot more detail about why
01:16 - we're doing it like this
01:19 - all right so
01:21 - this is the way the stream will go i'm
01:23 - going to start a pomodoro timer so 25
01:25 - minute timer during that 25 minutes i'm
01:27 - going to focus mostly on the code and
01:30 - just narrate
01:31 - when the timer goes off i'm going to go
01:33 - to the live chat and answer questions so
01:35 - if you have a question
01:37 - just hang in there i will get to it at
01:40 - some point
01:42 - i do read everything in the chat so i'm
01:45 - not i'm not ignoring it
01:48 - just trying to get some get as much done
01:50 - as i can
01:53 - early on when i started streaming i
01:55 - tried to keep up with the chat as i was
01:57 - coding and really quickly it became
01:59 - apparent that i would get nothing done
02:02 - if i kept on interrupting my my train of
02:04 - thought uh for the chat
02:07 - okay
02:08 - um
02:11 - great we have some viewers there was a
02:13 - little lag on these statistics and it
02:15 - looked like nobody was watching for a
02:17 - while
02:18 - all right
02:19 - um i do want to
02:23 - um
02:24 - point out let's see our pull requests
02:28 - yeah so we have pull requests that have
02:29 - not been merged
02:31 - so i do want to merge these pull
02:32 - requests first
02:35 - before we get started
02:37 - so some of these like the add the
02:39 - license
02:41 - is awesome i can just auto merge this
02:45 - i'm not going to have to test it we can
02:46 - just check
02:47 - with files changed and we've added the
02:50 - license that's the only thing that
02:51 - changed
02:53 - uh it's always important to include a
02:55 - license with your open source work um
02:57 - that lets people know
03:00 - if if they can use it how they can use
03:02 - it right
03:05 - so always try to get that into your
03:06 - project as early as you can so i'm just
03:09 - going to merge that confirm that merge
03:12 - and
03:14 - write a little thank you note
03:19 - if you're maintaining open source
03:20 - project i think it's really important to
03:22 - always thank people um even if you end
03:25 - up not accepting their their pull
03:27 - request it's it's still you know they
03:29 - put in work so
03:30 - um car
03:32 - kartikey
03:33 - uh thank you so much
03:35 - not sure if you're watching right now or
03:37 - not but i really appreciate that
03:40 - let's check out uh the other full
03:42 - requests we had this is add submit on
03:44 - enter key press so this is awesome i
03:46 - kept mentioning that i wanted to
03:47 - implement this and then just never
03:51 - never
03:52 - got around to doing it
03:54 - so this looks good for this one too i'm
03:57 - just going to check the files because it
03:58 - should be a really um
04:00 - simple change
04:02 - so yeah so it's
04:03 - um on submit text inputs
04:09 - one text change on submit
04:11 - editing
04:24 - actually that's really interesting
04:27 - i don't know so
04:28 - uh
04:29 - who did this full request let's see
04:32 - uh ibrahim
04:35 - if you're watching let me know i'm not
04:38 - familiar with this like um
04:42 - the on submit editing
04:45 - i'm like i'm not saying it doesn't work
04:47 - but i'm just not familiar with it so i'm
04:49 - going to go ahead and since this is such
04:51 - a simple change i'm going to merge it
04:52 - and we'll just test it like on the fly
04:55 - normally if these were more extensive
04:57 - change i would actually pull it down as
04:58 - a separate branch and then test it
05:01 - and then decide whether or not i'm going
05:02 - to merge it
05:04 - um but for very small changes like this
05:08 - especially on a little side project like
05:11 - this
05:12 - i don't really have a problem merging
05:13 - merging these as is so let's merge this
05:16 - as well
05:26 - all right
05:27 - so now that should be in the code we
05:29 - still have some open issues
05:31 - uh so let me close these because these
05:34 - this one is
05:35 - closed now
05:37 - um
05:38 - let's close that
05:41 - and then this one is that
05:45 - on submit enter key press you can see
05:47 - that's
05:48 - that's been merged there
05:50 - let's just verify um
05:53 - that this is working so
05:55 - we'll do a
05:56 - get pool
05:59 - there we go i need that
06:01 - so you've done a git pool and we should
06:03 - have yep
06:05 - we have the changes
06:07 - and so now let's check
06:11 - our app
06:12 - and see what happens
06:18 - um
06:19 - let me do a hard refresh and just see
06:23 - okay cool
06:27 - great yeah so we um
06:30 - we do have a submit on enter key and
06:32 - that's really cool i
06:34 - i definitely want to look into
06:38 - how you did that
06:41 - because up until this point
06:44 - let's see our app.js
06:47 - so we have our press here
06:50 - so what i had done
06:54 - before was like um
06:57 - instead of this on submit
07:00 - editing
07:01 - that's wild
07:02 - okay that's cool that must be
07:05 - built into
07:09 - react native let me see basically it
07:11 - says basically on submit editing will
07:12 - trigger an event provided when the go
07:15 - button is clicked from an android soft
07:17 - keyboard
07:19 - nice
07:21 - okay so this
07:23 - is intended to work with the android
07:25 - soft keyboard but when you're doing it
07:27 - on the web it actually
07:29 - submits on enter
07:31 - that's awesome i have some other stuff
07:33 - i'm working on that i'll probably
07:34 - refactor to use this now
07:37 - because otherwise i actually just would
07:39 - track the key press
07:40 - and see like if it was the enter key
07:42 - that would press i would submit but
07:46 - that is excellent that's really awesome
07:48 - uh that's i love doing this the show
07:51 - because i learned so much
07:54 - um like even little things like that
07:56 - which you know when it comes to the code
08:00 - it's going to reduce my code slightly
08:02 - but you know i use that a lot of places
08:05 - so like overall it's going to have a
08:07 - cool
08:08 - effect and
08:10 - it's also going to enable
08:12 - functionality on mobile
08:14 - with the same code so web and mobile
08:16 - will share the same code which is
08:19 - pretty awesome so thank you so much for
08:21 - that um
08:23 - that was ibrahim
08:25 - that is yeah i think that one was
08:27 - abraham so awesome so let's go ahead and
08:28 - close that as well
08:32 - okay
08:33 - cool
08:35 - yeah so now we just have one open issue
08:37 - i'm sure we'll we'll add to that i
08:39 - already i talked with um
08:41 - with someone on twitter about
08:43 - some other things that need done and i
08:45 - need to make issues for those as well
08:48 - but today we want to focus on
08:51 - testing
08:52 - right so in particular i'd like to set
08:54 - up uh some end-to-end tests
08:58 - these will definitely work with the web
09:00 - version i'm not exactly sure how the
09:03 - test would work with mobile so once we
09:05 - end up doing a mobile build then we'll
09:08 - think about the tests for for that but
09:11 - right now since we're only worried about
09:12 - web
09:13 - we're just going to go with with the web
09:15 - stuff
09:19 - um
09:20 - yeah so here's what
09:25 - what i'd like to use is um puppeteer
09:29 - okay to do a headless chrome browser
09:34 - and then so basically it'll
09:36 - it will mimic what the user is doing
09:39 - um so i'm going to open
09:42 - on another screen i'm going to open up
09:45 - a um
09:49 - json file
09:50 - that i have on another project
09:53 - and
09:54 - to remind me of everything that i need
09:56 - to install
09:58 - all right so
10:00 - let's go with
10:04 - here's what we're going to go with
10:06 - for
10:07 - our
10:09 - installation we're going to do a yarn
10:12 - add and then we're going to give it this
10:14 - d flag which means it's going to be
10:16 - added as a dev dependency
10:19 - right a dev dependency is not going to
10:21 - be included like in your your build
10:24 - right so
10:26 - um
10:27 - things you don't need for the program to
10:29 - run to actually run you can put in your
10:31 - dev dependencies and then that will
10:34 - decrease the size of your your build
10:39 - but
10:41 - people who clone your repo will still
10:43 - see like okay i need these for
10:45 - testing or whatever
10:48 - you need these for
10:49 - all right so i'm gonna do
10:51 - chai
10:53 - mocha
10:56 - um
10:57 - oh
10:58 - mocha
11:00 - um
11:01 - puppeteer
11:05 - and
11:08 - let's see i think that's it so we we
11:10 - don't we're gonna use jess but we don't
11:12 - need to bring in jess
11:13 - because
11:15 - [Music]
11:17 - jest is built in
11:19 - with create react app so since we use
11:21 - create react app we already have jess in
11:23 - fact if i would try to add jest
11:25 - create react app would
11:27 - give me a message in the console saying
11:29 - like hey we've detected
11:32 - different versions of jest and so we're
11:35 - just not going to adjust but and we're
11:36 - also going to add
11:38 - enzyme
11:41 - now enzyme is from airbnb
11:43 - i'm not sure what the status of that
11:44 - project is uh airbnb is moving away from
11:47 - react native so that may not be
11:51 - um kept up to date but for what we're
11:53 - gonna use it for it's gonna be fine
11:57 - but there just keep that in mind though
11:59 - that
12:02 - may be a good idea to find a replacement
12:05 - for enzyme
12:08 - but i'm used to using enzymes so at this
12:10 - point i'm just i'm gonna go with it and
12:12 - um
12:13 - i'm expecting that at some point
12:15 - i'll probably have to figure out
12:19 - how to do stuff without using enzyme
12:22 - so these are just gonna install the
12:24 - packages while that's happening
12:26 - we can add in
12:29 - um to our package json
12:33 - another
12:35 - um
12:36 - let's see so we're going to add in
12:38 - another script
12:40 - right so react scripts this this is what
12:43 - create react app comes with um
12:46 - already has its test okay so we're not
12:48 - going to use that i'm going to make
12:50 - another one that i'm just going to call
12:52 - e2e
12:54 - right because we're going to these are
12:55 - going to be our end to end test
12:57 - and then
12:59 - in our end to end test
13:01 - i'm going to
13:05 - um
13:10 - this is gonna be a lot
13:12 - so we're gonna run
13:14 - mocha
13:16 - and we're gonna give it a timeout
13:23 - let's see uh what's my time out here one
13:25 - two three four
13:29 - three
13:35 - all right so that'll be like 30 seconds
13:37 - so the timeout's in milliseconds
13:39 - um
13:40 - we'll give it 30 seconds right now
13:45 - that should be enough for what we're
13:46 - doing um depending on how many tests you
13:49 - have like it may you may want a greater
13:52 - timeout
13:54 - but for now i think this should just be
13:56 - this would be fine
13:57 - um and then we're going to set up some
14:01 - files but i'm going to call these files
14:03 - right now so we're going to end up
14:04 - having a folder called e2e
14:07 - and
14:08 - runner.js so we're going to split out
14:12 - some of our testing into separate files
14:14 - so we're going to
14:16 - start this up from our runner.js file
14:19 - and
14:20 - we're also going to do
14:22 - let me see oops e2 e
14:26 - and
14:28 - we're going to have a test folder and
14:30 - then anything in that test folder
14:33 - that has the
14:35 - suffix of
14:37 - dot spec
14:39 - dot js
14:42 - we're gonna we're gonna run those tests
14:45 - okay
14:46 - so
14:48 - this is basically the this is our
14:50 - command we're running mocha with a
14:52 - timeout of 30 seconds
14:55 - okay we're using
14:56 - our runner.js file which you'll you'll
14:58 - see that in a second
15:01 - and then
15:02 - we're going to have our
15:04 - anything in our test folder with this
15:06 - suffix is going to run as a test so
15:09 - let me save that
15:11 - oops failed to save
15:13 - uh okay
15:17 - let's um
15:19 - i'm going to cut that for a second and
15:21 - just close this
15:24 - don't save let's reopen this so um as
15:27 - these were installing it made changes to
15:29 - package json so we could see we have our
15:31 - dev dependencies now so that's why it
15:33 - gave me that message
15:35 - so let's just add that back in and save
15:37 - now
15:39 - um
15:40 - if you didn't see that message it was
15:41 - just saying there were newer changes
15:44 - that were made um so there was it was
15:47 - like conflicting right
15:49 - all right so now we have our dev
15:51 - dependencies we have this set up our end
15:53 - and test
15:55 - now we need to actually um
15:57 - bring in
15:58 - our test so what i'm going to do is i'm
16:01 - going to go to a previous project that
16:03 - we did on on this show
16:07 - so i believe maybe this was like project
16:09 - five or something i can't remember for
16:11 - sure um but i'm gonna go to my github
16:15 - and let's go to
16:18 - a4
16:21 - let's go here i believe i had it set up
16:24 - here yep so we have a test folder here
16:27 - and you can see
16:28 - oops no that's not it there's our unit
16:30 - test here's our end to end test so we're
16:32 - going to grab
16:35 - set up from this project and this will
16:37 - save us a lot of time since we already
16:39 - have it set up
16:41 - and then we're going to use that
16:45 - so
16:47 - i'm going to
16:49 - open these
16:51 - so we can just copy and paste very
16:53 - quickly
16:57 - and
16:58 - we'll just grab like
17:00 - one of these just to get some
17:01 - boilerplate
17:06 - all right so now
17:08 - let's see
17:10 - runner
17:12 - and you'll notice i don't know if uh
17:14 - harshit is watching right now this
17:16 - morning i haven't seen him in the chat
17:17 - but uh harshit set these up initially on
17:20 - this project so uh thanks again to
17:23 - harshit uh for doing the initial setup
17:25 - on these uh on these tests these nan
17:28 - tests
17:29 - okay so this will be our runner.js file
17:32 - so you can see
17:33 - um
17:34 - this is just basic setup right like
17:36 - we're requiring
17:39 - um
17:40 - browser and options which we'll see
17:42 - those files in a second
17:43 - and then we're just starting it up
17:46 - and closing it down
17:48 - right starting up our headless browser
17:50 - closing it down
17:52 - okay
17:53 - um and it
17:54 - it's nice to have it in this file
17:56 - otherwise we would have to do this like
17:58 - before and after all of our tests so
18:00 - this just this saves us some work
18:04 - all right so let's go back to
18:08 - here and let's set up our our folders
18:11 - right so we want a folder called e2e
18:16 - inside e2e
18:18 - we want to add a file called
18:21 - runner
18:23 - runner
18:24 - dot js
18:26 - and
18:28 - we're going to copy that in
18:30 - okay
18:31 - um
18:34 - let's go back here and do
18:39 - oh yeah
18:41 - let's close this
18:42 - so i know i don't need it this is our
18:44 - browser.js
18:46 - okay so
18:47 - let's copy this we'll go over it in a
18:49 - second
18:53 - let me try
18:55 - i i found out about being able to do
18:58 - these multiple desktops on windows
19:01 - so i need to get used to the um
19:05 - the shorthand keys for that so i think
19:07 - it's
19:08 - like windows control
19:12 - is that it
19:14 - no that's not it the window control
19:23 - all right maybe i don't have my hotkey
19:25 - set up if anybody knows about how to do
19:27 - these different desktops on
19:30 - windows let me know
19:32 - um
19:33 - but i definitely don't have it down so
19:35 - far i want it to just work just like it
19:37 - does in mac
19:39 - but i haven't got that down
19:41 - all right so let's verify this was
19:42 - browser.js so let's create that
19:50 - browser.js and we're going to copy that
19:53 - in
19:53 - okay so
19:55 - in browser.js
19:57 - right we're we're requiring puppeteers
19:59 - this is where we're bringing in
20:00 - puppeteer
20:01 - right and then
20:03 - we're we're setting this up
20:06 - right so this is just like the
20:07 - boilerplate that you need to
20:10 - set things up
20:13 - we pull in our options which we we um
20:17 - uh we'll have an options file for that
20:19 - right
20:22 - so
20:24 - this stuff like once you have it set up
20:26 - you'll probably never change it so this
20:28 - is the only time we're ever really going
20:29 - to look at these files
20:31 - and our last one
20:35 - our last setup file
20:37 - will be
20:39 - oops did i forget to do
20:41 - i think i accidentally closed options
20:48 - options
20:49 - yep there we go
20:51 - okay the options is the the easiest file
20:54 - to
20:55 - figure out what's going on
20:57 - um
21:00 - options dot js
21:04 - okay so in our options.js we're setting
21:07 - our app url to localhost
21:09 - right which
21:11 - we're going to test locally we're
21:12 - running
21:13 - uh our project on locos 3000 so
21:16 - obviously you change this to whatever
21:18 - you need it to be and then we're going
21:19 - to run this in headless mode if you set
21:22 - this to false you'll actually see a
21:24 - browser pop up and you'll see stuff
21:26 - happening in the browser which is kind
21:28 - of cool to look at but
21:30 - if you're doing these tests like
21:32 - constantly
21:33 - uh it gets annoying after a while so i
21:35 - usually just set it to um
21:38 - to true and leave it set to true
21:41 - i don't know we may do like one test run
21:44 - once we get some tests set up uh where
21:46 - we have it set to
21:48 - um false just to see also if you're
21:50 - having trouble with your test sometimes
21:52 - just looking at what's happening
21:54 - is a good way to debug i actually did
21:56 - that yesterday is um
21:58 - having some issues where the tests were
22:00 - hanging at one point and after i ran it
22:04 - not in headless mode i could see exactly
22:06 - what was happening
22:08 - uh and it helped me to debug the test so
22:12 - there are times when you would run a
22:14 - actually see what's happening so let's
22:16 - close these out now that we have them
22:18 - set up
22:19 - let's make our our actual tests folder
22:26 - oops that's not it
22:28 - i want to make it inside here
22:34 - so tess and then inside tess
22:38 - let's add our first test
22:43 - if you get some comments in the chat in
22:44 - about four minutes i'm gonna go back to
22:46 - the live chat and answer your questions
22:47 - so uh hang in there
22:51 - so we're gonna have to change
22:53 - this a bit i don't remember what's going
22:55 - on in this test from the last project so
22:57 - it may actually work
22:59 - um
23:00 - i think it may just be testing to make
23:01 - sure that something loads on the page
23:04 - oops
23:07 - so we're gonna make this
23:10 - what did we call this one um
23:13 - page.spec.js
23:15 - yeah let's just call this one
23:20 - app.spec.js and what was that
23:23 - yeah
23:24 - spec
23:33 - okay and now we'll paste this in here
23:35 - and let's look at what this test is
23:37 - actually doing
23:38 - okay so
23:40 - we're requiring we're pulling in this
23:42 - expect
23:44 - from chai
23:45 - okay so we see we use it down here and
23:48 - uh we'll we'll get to that in a second
23:50 - uh we're also pulling in tests from our
23:53 - browser
23:54 - file right
23:56 - um
23:57 - so what we're doing is so let's say
24:00 - i don't want page two let's say
24:02 - describe this is
24:13 - i'll just put some in there for now and
24:15 - for now it says page can be seen at
24:17 - slash page and i'm not going to say
24:20 - slash page i'm just going to see at
24:21 - slash right so just at our home
24:24 - and
24:25 - so we're going to start our test we're
24:26 - passing in our browser and our options
24:29 - okay so now we are loading a new page
24:32 - right so new page
24:35 - and that this everything going on in
24:37 - here is kind of a mix of stuff you can
24:39 - do with puppeteer with chai
24:42 - with jest so it's like
24:44 - it's very with mocha
24:46 - um so
24:47 - when i do this i usually have to have
24:49 - like four different documentation pages
24:51 - open
24:52 - but once you get like a few tests
24:54 - written you can usually just modify copy
24:56 - and paste and modify your tests as you
24:58 - go along
25:04 - so now we are actually going to let's
25:06 - get rid of this because we want to go to
25:07 - the home page right
25:09 - so this is going to be our url from our
25:12 - options which is localhost 3000 okay
25:15 - now we're creating um a constant to hold
25:19 - the value of body
25:21 - right so
25:22 - or it's just going to be the string body
25:25 - okay and we're going gonna wait till we
25:27 - find the selector body on the page right
25:30 - so html pages all have right like body
25:33 - let me check my timer all right one
25:35 - minute we'll go to the chat
25:37 - and then
25:38 - now we're creating a constant called
25:41 - inner text so what we're doing is we're
25:43 - evaluating the page
25:45 - okay and we're looking for
25:50 - all of the inner text
25:54 - that's inside of body right the body tag
25:57 - on the page right so this is not going
25:59 - to give you html it's just going to give
26:01 - you text that's on the page and in this
26:03 - case we want to make sure
26:05 - that
26:06 - 404 which would be a 404 error does not
26:10 - show up anywhere on the page so all this
26:13 - test is doing is saying that
26:15 - something loaded
26:17 - when we went there like something other
26:19 - than a 404 error
26:21 - happened when we went to this page so
26:24 - this is a very basic test right it's not
26:27 - saying much
26:29 - really not much at all
26:32 - but this test should run it should work
26:34 - so let's let's
26:36 - test out the test here and let's say
26:40 - yarn
26:41 - e
26:43 - to e
26:45 - let's see what happens okay so our test
26:47 - is running home screen can be seen at
26:50 - slash and so we've passed our test it
26:52 - took one second
26:54 - uh total so they rounded up so it's kind
26:56 - of nice it shows you
26:58 - all the tests that you passed and it'll
27:00 - tell you how long each one took
27:02 - and then it'll give you a report of how
27:04 - many you passed and how many you failed
27:07 - so that's our first test
27:10 - it has limited usefulness as it is now
27:12 - but we will add on some more tests that
27:15 - will be a little bit more useful
27:18 - and
27:19 - hopefully that'll give us confidence to
27:20 - be able to make changes
27:22 - and we'll run our tests and be sure
27:25 - if our tests pass
27:26 - that our changes have not broken
27:28 - anything
27:31 - um
27:33 - we also if we have time we might set it
27:35 - up so that the tests will run
27:37 - automatically when you try to commit
27:40 - uh and you won't be able to commit
27:41 - unless the tests pass
27:44 - so i think that's kind of cool to set up
27:47 - um
27:48 - there we go here's my timer all right so
27:50 - i'm gonna take a short break i'm gonna
27:51 - go to the chat and i'm gonna start way
27:54 - up at the top and try to get through as
27:56 - many questions as i can and i also need
27:58 - a drink
28:05 - okay
28:09 - um
28:10 - all right so i'm going to skip through
28:12 - all the the uh hellos but i'm just going
28:14 - to give one big hello to everybody
28:15 - that's saying hi
28:19 - okay uh we have a request ravi says
28:21 - please make a video on javascript and
28:23 - angularjs
28:24 - i am not
28:26 - i have very little knowledge of
28:28 - angularjs so i'm probably not the best
28:30 - person to make that video
28:33 - but we do i think we do have some
28:35 - angular videos on the free code camp
28:37 - channel here so check those out
28:40 - um
28:41 - let's see
28:48 - [Music]
28:54 - i'm not sure how to pronounce your name
28:55 - so please let me know how i should
28:56 - pronounce it but anyway they say thank
28:58 - you for merging the pr oh you're welcome
29:00 - thank you for submitting the pr that was
29:02 - super helpful i i definitely appreciate
29:04 - it i always get so excited when i see
29:06 - that pull requests are being merged i
29:08 - need to put more issues in so that
29:10 - anybody that wants to work on the
29:11 - project will know what what to add so
29:13 - um
29:15 - maybe i'll try to do that today
29:19 - and if you all think of some issue or
29:21 - some feature or see a bug or something
29:23 - feel free to put an issue in the the
29:25 - github repo as well
29:27 - um
29:30 - michael cruz said and now the wait for
29:32 - puppeteer to install it actually
29:33 - installed really fast so
29:35 - if i was trying to do this stream on my
29:37 - laptop it that would have been the end
29:39 - of the stream like it would have just
29:41 - the frames frame rate would have dropped
29:43 - like it would have taken forever but on
29:44 - this new machine like
29:46 - i'm i'm very impressed with my new uh my
29:49 - new pc so far and its performance while
29:52 - streaming
29:59 - all right michael lane says what is
30:01 - react used for
30:02 - react is used for creating
30:08 - sorry about the yawns uh react is used
30:10 - for creating web apps um
30:14 - like single page applications
30:15 - progressive web apps uh but react native
30:18 - which is what we're using can also be
30:21 - used to create mobile apps
30:23 - um
30:25 - basically that you you can create a wide
30:27 - variety of things with react because it
30:29 - has the ability to render
30:31 - to four different platforms so
30:34 - your uh javascript html type code can be
30:40 - transformed into something that can be
30:42 - run on a variety of devices and
30:45 - platforms uh so
30:48 - it's very very cool so i mean that's
30:51 - a very like short summary and leaves out
30:54 - a lot but i that's basically what reacts
30:58 - what i use react for
31:04 - uh
31:05 - then
31:06 - danjuma says fyi uh for your information
31:09 - react also builds vr apps i have seen
31:12 - that and i'm i really really want to
31:14 - build a vr app at some point so maybe
31:16 - that can be one of our next projects
31:19 - um
31:21 - maybe we could have battle math vr who
31:23 - knows uh but i i definitely want to try
31:25 - that out
31:26 - um otown says the screen is blurry okay
31:29 - let me know is anybody else having a
31:31 - blurry screen um
31:33 - on my end
31:34 - like all the analytics are saying the
31:36 - stream is fine
31:38 - on my end but
31:39 - let me know um
31:42 - it should be i should be putting out
31:44 - 1080p so if your connection can handle
31:46 - it um you should be getting a 1080p
31:48 - stream right now
31:51 - nikki says have you tried cypress for
31:53 - end-to-end testing i have not tried
31:54 - cypress but i'm interested in hearing
31:57 - more about it
31:58 - uh james lark says sir please tell me
32:00 - what should i choose uh software dev or
32:04 - web dev for better job opportunities um
32:07 - it kind of depends on your area and
32:08 - what's in more demand
32:11 - so
32:15 - i guess
32:17 - it really does depend like
32:20 - i don't know
32:21 - where you're at uh or what you're where
32:23 - you're looking at to actually get a job
32:26 - but there are a ton of jobs either way
32:28 - web dev software dev
32:31 - and really like the line between a web
32:33 - dev and a software developer are so
32:35 - blurred now
32:36 - with things like
32:38 - like a web developer could create a
32:41 - desktop app or a mobile app using the
32:44 - same tools they used to do web apps
32:46 - right so it's the line is very blurred
32:48 - so
32:49 - um
32:50 - you probably could learn the same skill
32:52 - set essentially and get a job doing
32:54 - either one
32:56 - um
33:01 - bottom left corner
33:04 - okay so we're saying alt tab yeah let me
33:06 - try this actually for a second while we
33:08 - have this up here so i can alt tab
33:11 - and see
33:13 - these screens
33:14 - okay
33:17 - what i want to try to do though is do um
33:24 - let's see
33:28 - what i i want to do is be able to do a
33:30 - shortcut to just automatically switch
33:33 - to another desktop so like i can tab and
33:36 - i can see like there's two desktops here
33:40 - but i don't want to even see it like i
33:42 - want to get to the point where i can
33:43 - just do like
33:47 - wait a second did that no that's not it
33:49 - that's what i did last time and i
33:53 - um
33:55 - the guy that sits next to me at work
33:56 - yesterday was we were messing with it
33:58 - and trying to figure it out and i think
34:00 - he was able to do like windows key
34:02 - control
34:04 - and then arrow keys and it let him
34:06 - switch
34:07 - but it's not working for me right now
34:09 - let me see maybe windows alt
34:12 - windows shift
34:14 - yeah it's windows shift that's it
34:17 - okay awesome so window shift lets me go
34:20 - back and forth
34:23 - this is actually weird it's it's
34:24 - changing both of my screens though
34:28 - that's weird
34:30 - all right so i don't want that
34:33 - i need to look into this more so
34:35 - uh what it was doing was when i'd switch
34:37 - so like right now on the screen and you
34:40 - all can see that i'm in the code but
34:42 - when i press window shift arrow key
34:45 - it shows this screen but on my other
34:47 - screen it's now covered up my
34:49 - um my streaming software and
34:52 - it's added the code over there
34:55 - so
34:56 - i need to to mess with maybe the
34:59 - settings or learn more about that but if
35:01 - you've ever used a mac it's very easy
35:03 - like to go between your desktops
35:06 - so i'm trying to like get that same ease
35:09 - of use on windows
35:11 - because i'm just so used to it from my
35:12 - mac
35:14 - all right but anyway let's write some
35:16 - tests
35:17 - so i'm gonna
35:20 - mark down here where i left off at in
35:22 - the chat so i can come right back to it
35:26 - um
35:28 - let's see
35:30 - 753 looks like a good place
35:34 - 753
35:36 - okay
35:37 - so i'll come right back to there
35:40 - uh and continue on with the live chat
35:42 - after we do
35:45 - um
35:46 - another pomodoro session
35:49 - yeah so i may not do this entire session
35:51 - i just would like to get one like
35:53 - additional test written and then try it
35:56 - out
35:59 - so let's see
36:02 - let's go
36:06 - let's go back here and let's think about
36:09 - like what we would want to test so right
36:10 - now this is basically saying
36:13 - um
36:14 - can we see
36:16 - we expect it not to contain a 404 all
36:18 - right but that's not really
36:21 - like potentially that's not telling us a
36:23 - lot because the the page could not show
36:25 - anything really
36:28 - and this test would still pass right
36:32 - so let's add something
36:36 - that's going to give us a little like
36:37 - better indication of what's actually
36:40 - going to happen on the page so
36:42 - let's expect inner page
36:45 - to contain
36:48 - and
36:49 - i believe we have the word battle math
36:52 - here so let's expect it to contain
36:54 - battle math right
36:55 - um
36:59 - and let's see if that
37:01 - if that passes right so not only do we
37:04 - not want a 404 error but we we wanted to
37:06 - say battle math okay
37:08 - um
37:11 - really
37:12 - if if it says battle math we
37:14 - probably don't need that 404 so let's
37:16 - just get rid of that right
37:18 - um so i want to know like
37:22 - not only like is there something there
37:25 - but is there
37:26 - this title there which should be uh
37:28 - there on all the pages right
37:37 - um
37:41 - let's see
37:46 - run this oops
37:50 - there we go okay so that passes now
37:53 - still took about the same amount of time
37:55 - actually
37:56 - a few milliseconds less than the last
37:58 - time
37:59 - um so now
38:02 - i i think
38:03 - i'm i'm no expert in testing right but i
38:05 - think this is a little bit of a better
38:07 - it tells us more right it says
38:09 - hey
38:10 - we went to your homepage and the title
38:13 - of your app is actually visible at your
38:14 - home page right so if this test were to
38:17 - fail i know something is definitely
38:19 - wrong with my app so i i broke something
38:22 - for sure
38:24 - okay let's try to make another test so
38:26 - we can copy and paste this it
38:33 - right and we can make a completely new
38:36 - test here so
38:37 - we could say
38:40 - um
38:41 - let's look at our app for a second and
38:43 - say what else
38:44 - let's restart it see what our basic
38:47 - um thing is like what else would we want
38:49 - to see on the page
38:52 - um and if we didn't see it on the page
38:54 - it would definitely be a problem
38:56 - right so
38:59 - um i guess
39:09 - i mean we would want to be able to see
39:13 - on the very first page like a hero
39:16 - and three enemies
39:18 - um
39:22 - let's just let's do one for now let's
39:24 - let's say we can definitely see a hero
39:26 - character on the page we'll keep it
39:28 - really basic
39:29 - right
39:33 - so what we'll do is in our app
39:37 - dot js we need to give our hero
39:40 - an id
39:42 - so that we can
39:44 - pick them out on the page right so we
39:47 - have our
39:48 - hero right now is just a view
39:51 - right eventually this will hopefully
39:53 - change and it won't just be a square
39:55 - but for now it's a square so
39:57 - normally we could just put an id here
40:00 - but in react native we want to use
40:02 - native id
40:06 - so actually with react native web if we
40:08 - just wrote id it would work
40:10 - okay but it it won't work um
40:14 - with web like it'll it'll give us at
40:16 - least i think it'll throw a warning at
40:18 - some point that we we can't use ids or
40:21 - something like that so
40:23 - it's been a while since i did that but i
40:25 - do remember getting some sort of warning
40:26 - about that so anyway the react native
40:28 - way to add an id is with native id so
40:31 - let's just say hero right
40:35 - and usually you remember i mean this is
40:37 - like basic html stuff but you only want
40:39 - to have one id on the page so they they
40:42 - have to be unique so there should only
40:45 - be one hero on the page one hero id okay
40:48 - when we get down to enemies what we'll
40:50 - probably want to do is instead of an id
40:55 - we would want to use a class or we would
40:57 - want to give each a unique id by saying
41:00 - something like the id equals
41:03 - enemy and then
41:04 - like the iterator so the enemy
41:07 - like
41:08 - zero enemy one enemy two right
41:11 - uh so it's just
41:13 - whatever you the id can be whatever you
41:15 - want but it has to be unique
41:23 - uh let's see oops i meant to go back to
41:25 - our test all right so now that we have
41:27 - that
41:29 - what we can do is we can say
41:32 - [Music]
41:33 - let me grab
41:35 - let me go back to my other screen here
41:36 - and see some of the other tests that
41:38 - i've
41:39 - i've set up
41:41 - uh so what we can do is
41:50 - we can check for
41:51 - [Music]
41:54 - the html
41:58 - so let's do one where we actually check
42:00 - for the inner html
42:02 - okay so
42:04 - um
42:05 - let's get rid of this for a second
42:07 - and
42:09 - can we get rid of this too
42:10 - i believe we can
42:14 - yeah so let's get rid of all this and
42:16 - just show
42:17 - kind of a different way
42:20 - um
42:21 - to do this
42:23 - [Music]
42:28 - so right now we're still getting our
42:31 - page all right we're still waiting like
42:33 - we're gonna go to that home page but now
42:36 - let's do a um
42:40 - let result
42:43 - uh we could probably make this a const
42:45 - really const res
42:48 - const result
42:49 - in general it's good to use const unless
42:52 - you really need to use something else
42:55 - um
42:56 - so we're going to just call this a
42:58 - result we're going to say await
43:01 - page
43:02 - dot
43:03 - evals we're going to do
43:05 - eval
43:07 - right page.eval
43:09 - and then we're going to evaluate body so
43:11 - remember last time we actually made a
43:14 - a const for body selector for body right
43:17 - now we're just going to skip that and
43:19 - just say body
43:21 - right
43:23 - and then inside here as our second
43:26 - argument that we passed to to eval right
43:29 - uh we're going to put a function right
43:31 - so we're going to say e
43:33 - i'm just going to do an arrow function
43:36 - so
43:37 - we're going to dot e dot inner
43:41 - and we're going to do html this time
43:43 - instead of
43:45 - text so what this will do now
43:47 - is
43:49 - before we just had the text
43:51 - right so
43:52 - we couldn't for instance like verify
43:55 - that there was an input on the page with
43:56 - this or anything this is just giving us
43:58 - the text
44:00 - now we'll actually be able to see things
44:02 - that are in the html in the markup of
44:05 - the page so we'll be able to do
44:07 - something like
44:11 - we expect the result to contain
44:17 - and
44:18 - we could say
44:20 - um what do we call his hero
44:24 - now normally the hero would not show up
44:27 - under text right because that doesn't
44:28 - actually display his text in the page
44:30 - it's it's an attribute of
44:33 - uh an html element right but now we
44:36 - should be able to see that
44:42 - so let's save that and
44:45 - run our end and test see if we've done
44:47 - it correctly yep
44:49 - so we can see that title battle math
44:52 - oops and i forgot to change this so
44:55 - let's change this to
44:58 - um
45:02 - visible at slash
45:04 - and
45:05 - hero
45:06 - let's say
45:10 - hero can be seen at slash
45:13 - let's let's change it up so keep it
45:18 - keep it the same
45:20 - so title can be seen at slash hero can
45:23 - be seen as slash
45:25 - okay
45:26 - so now we'll just see like in our
45:28 - testing we'll get better messages
45:32 - see
45:33 - title hero
45:36 - so it's good to give these good names so
45:40 - describe you can give like the name to
45:42 - the the whole group of tests that you're
45:44 - doing
45:45 - and then under the each it you can give
45:48 - a name to each one of these a
45:49 - descriptive name to what you're testing
45:52 - then when you see like a test will fail
45:54 - it'll be a lot easier to figure out
45:57 - what you need to look for to fix it
46:00 - if you give nice descriptive names here
46:03 - all right
46:04 - uh let's see how much time i have i'd
46:07 - like to do at least one test where we
46:09 - actually um like do something on the
46:12 - page so
46:16 - let's see
46:20 - we need to do a little bit of setup in
46:21 - our app.js
46:23 - so
46:25 - in order to get things from the page
46:28 - let's see where we're at
46:31 - okay so
46:32 - right now we have inside this text we
46:34 - have our value our operator and our
46:37 - value two
46:38 - but
46:41 - that's going to be hard for us to get
46:42 - access to in our tests what we really
46:45 - should have is
46:46 - um
46:48 - we should have ids for each one of these
46:52 - right
46:53 - so let's let's do that let's switch this
46:55 - up and let's put
47:00 - let's separate these out so that we have
47:02 - three
47:04 - text
47:05 - and let me verify that our styles won't
47:08 - get messed up by this styles.math text
47:10 - where are styles at
47:12 - up here
47:14 - okay
47:16 - you know what i'm actually i'm gonna
47:17 - move these styles down below
47:21 - because i just i like moving them down
47:23 - below so that um
47:27 - this first stuff that you see is more
47:29 - like the actual like logic of the
47:31 - component
47:33 - so i'm just used to that uh if
47:37 - so that's what i'm going to use for my
47:38 - projects there's nothing wrong with
47:39 - putting them up top that's just
47:42 - what i've been used to and like i said i
47:43 - just like to see as soon as i see the
47:45 - component first thing i'll see is like
47:47 - the functions the logic i'll scroll down
47:50 - i'll actually see the markup
47:51 - and then the styles at the bottom
47:53 - because usually the styles tell you the
47:55 - least about what the component actually
47:56 - does it's just my experience
48:00 - so our math
48:02 - text all it has is a font size and a
48:05 - padding right
48:06 - so we're going to get rid of that
48:08 - padding right because we don't want that
48:11 - everywhere right so let's get rid of
48:12 - that padding right
48:14 - and let's make sure we put that on the
48:16 - view
48:18 - itself uh where's the
48:24 - math row
48:25 - actually you know what we can put that
48:27 - on the text input so we have styles
48:29 - input
48:32 - so we had a
48:34 - input input input
48:42 - oops
48:46 - i thought i had the uh
48:52 - there we go
48:54 - what was that again
48:57 - padding right there we go
48:59 - okay so let's move this and make it a
49:01 - padding
49:02 - left or better yet let's make it a
49:05 - margin left
49:14 - okay all right so now the input is going
49:18 - to have a margin left right which should
49:19 - take care of this so now we can actually
49:21 - copy and paste our text
49:24 - here
49:26 - without worrying about weird spacing
49:28 - happening
49:30 - okay so now we're going to have text
49:41 - oops totally messed that up
49:44 - i wanted to do is get rid of
49:47 - these
49:48 - and this and then for this one we'll get
49:50 - rid of that
49:52 - and then actually i guess we'll need
49:54 - another one for our equals
50:04 - there we go all right so first off let's
50:06 - see if this even displays properly
50:12 - hey it does we're missing
50:16 - some spaces but that actually looks okay
50:20 - i may like that better without the
50:22 - spaces now i think about it
50:24 - i get i
50:26 - yeah i kind of like that i'm gonna leave
50:28 - it without spaces for now
50:30 - um
50:32 - but now what this will let us do is add
50:35 - native ids
50:42 - so we can have a native id for each one
50:44 - of these
50:47 - and
50:48 - uh our native id will be like
50:52 - well let's just say val
50:56 - about one and then for this one
50:59 - we'll make it about two
51:02 - for this one we don't need anything
51:06 - uh and for this one we'll just say
51:08 - operate error
51:12 - okay
51:14 - all right so we have that
51:17 - now our input needs a native id
51:24 - let's say native id equals
51:27 - um
51:30 - answer
51:33 - let's say answer input
51:36 - let's keep it the same
51:38 - answer input
51:40 - okay so normally like everything we're
51:42 - doing is like camel case but
51:44 - generally uh like within the dom
51:47 - you would usually use um
51:51 - your uh your hyphens
51:54 - for things like classes and ids so
51:57 - that's why i'm kind of keeping this
52:00 - because this is gonna end up being in
52:02 - the in the dom right
52:05 - okay
52:06 - i think that's all we need
52:09 - you know what let's put this uh i native
52:11 - id on this as well native id
52:14 - equals
52:16 - um
52:18 - we'll say this is submit
52:21 - all right great
52:22 - now when we come back to our test
52:26 - this will all make a bit more sense
52:29 - when we actually write out our test
52:32 - right so let's say
52:34 - [Music]
52:39 - can
52:43 - submit
52:48 - and submit answer
52:50 - uh
52:51 - let's see
52:55 - and we need a way to check
53:04 - let's see
53:06 - not only can't submit let's just say
53:08 - like um
53:14 - correct answer
53:17 - reduces enemies by one okay so if we
53:20 - actually test this this is going to tell
53:22 - us a lot about our application
53:25 - so this is an ambitious test right um
53:28 - it's going to take a couple of steps but
53:30 - that's what i want to try to do let me
53:32 - see all right seven minutes it's going
53:34 - to be rough to get into seven minutes
53:35 - but we'll see what i can do so we're
53:37 - still going to go to the home page right
53:39 - and
53:40 - we are going to
53:43 - actually let's
53:44 - let's do one more thing if we're gonna
53:46 - see where the enemies are we need to
53:47 - give the enemies
53:49 - um
53:50 - some
53:52 - at least classes right
53:55 - so
53:56 - let's say class
53:58 - name right so in react we need to use
54:01 - class name because in javascript class
54:04 - is a reserved word right
54:07 - so we're going to say class name and
54:09 - let's say
54:11 - enemy
54:12 - since there'll be multiple enemies we
54:13 - need to use a class instead of an id
54:19 - [Music]
54:22 - okay
54:25 - so now
54:27 - we need to
54:29 - have the
54:30 - user um
54:33 - have some type of action right
54:36 - uh so for that
54:38 - we can say we can use our our type right
54:42 - so we already have our page element
54:44 - right so we could say page dot
54:47 - type
54:49 - and this actu literally means we're
54:50 - going to type something into the page so
54:53 - the first
54:54 - uh
54:55 - parameter that we pass in here is going
54:57 - to be
54:58 - the id of our the place where we want to
55:02 - type so our input so this is going to be
55:04 - the answer input
55:07 - so we're going to type in our answer
55:09 - input
55:12 - and
55:13 - inside the answer input let's we're
55:16 - going to type answer
55:18 - right but i need to create that so let's
55:20 - create answer
55:23 - um
55:28 - answer is going to equal
55:31 - val 1 um
55:36 - how are we gonna do this
55:41 - about one plus
55:43 - let's just do it plus
55:46 - two about one plus vowel two correct
55:51 - addition
55:55 - so for this one i'm just gonna test
55:56 - addition okay so correct addition
55:58 - that'll make it just a little bit easier
56:00 - since we're running out of time correct
56:02 - addition answer
56:04 - um
56:05 - should give us val it should be val one
56:08 - plus val2 right so
56:10 - let's do const
56:13 - um
56:16 - vowel one
56:19 - and
56:20 - const vowel one is going to be
56:24 - uh let's see how i can get this
56:31 - uh i think i can get
56:33 - let's see i might be able to do it like
56:34 - this um
56:41 - this might be overkill i may not need
56:43 - all of this but let's see
56:49 - so instead of body if i eval the
56:54 - id
56:55 - val1
56:57 - and then instead of inner html
57:00 - i get inner
57:04 - text
57:06 - this should give me that value
57:11 - and javascript should be able to handle
57:13 - the fact that it's getting this as a
57:15 - string
57:16 - but it can it'll know that like i want
57:18 - to add these as numbers at least i think
57:20 - that's that'll be the case
57:22 - um we'll know really quickly if that's
57:24 - not the case okay so now we're grabbing
57:28 - value one
57:30 - and value two
57:32 - and
57:34 - i'd like to actually see like is there
57:36 - some way i could do this without
57:40 - like faster or maybe in only one line
57:42 - but for now this i think this will work
57:46 - so
57:47 - we'll get the values
57:49 - we'll get the answer here
57:52 - and then we should input the answer
57:55 - right then
57:56 - after we input the answer we're going to
57:59 - why is my
58:02 - my indentation is so messed up
58:04 - um
58:06 - we input the answer now we need to
58:10 - click the um
58:14 - need to click the button
58:16 - uh so for this click
58:20 - let's say
58:22 - i think we can just do a page.click so
58:24 - we can do
58:25 - um
58:28 - do i need to do i need to do a weight
58:30 - sorry i forgot a weight here
58:32 - uh let's do await
58:36 - i i need to fix all this indentation
58:39 - page.click
58:42 - and then
58:44 - this is going to be
58:45 - our submit
58:47 - right we named it submit
58:50 - okay so after we do this click
58:53 - now
58:56 - we can see the
58:59 - result we can evaluate our html
59:03 - right and we want it to contain
59:05 - and here's where i may have to look this
59:07 - up let's see what time it is
59:09 - um
59:11 - okay
59:12 - only have one minute no
59:15 - okay
59:16 - we may have to we may not get finished
59:18 - with this but let's see uh
59:21 - expected to contain
59:23 - let's see
59:24 - um
59:26 - i think this would be in just um
59:30 - um
59:40 - there we go
59:41 - find
59:43 - selected
59:46 - uh
59:47 - find the number of render to child
59:49 - components
59:50 - children
59:52 - uh support for calling all child
59:54 - elements
59:56 - for support for counting all child
59:58 - elements
60:00 - all right let's just let's try the first
60:02 - ones you know that much time so find
60:04 - selector
60:10 - expect fine to have length of nice okay
60:13 - so we can do two halve length of
60:16 - excellent
60:17 - so
60:18 - we should expect it to have length of
60:21 - two
60:22 - right so let's just grab this whole
60:24 - thing
60:25 - uh no i don't want rapper i don't want
60:28 - to have to use wrapper
60:31 - um
60:32 - okay
60:45 - let's try it with
60:46 - contains
60:49 - uh my time is up wrapper contains
61:00 - all right
61:03 - i need to get out of this shallow
61:05 - wrapper because i'm not using the
61:07 - shallow
61:08 - shallow wrapper
61:10 - um
61:11 - selectors
61:14 - static rendering
61:16 - no i'm not using render i'm using
61:20 - we're only using one thing from enzyme
61:22 - what is it
61:24 - expect
61:25 - that's it or no it's not even from
61:27 - enzyme we're requiring that from chai
61:29 - what the heck am i using from enzyme
61:31 - nothing
61:33 - i'm not using anything i don't even need
61:35 - enzyme sorry i got confused at the
61:37 - beginning
61:38 - um i use enzyme for unit testing stuff
61:42 - not for end end testing yesterday i was
61:44 - doing the last two days i've been doing
61:46 - unit and end in tests so
61:48 - apologies for getting that mixed up what
61:50 - i need is
61:53 - cha or not let's see yeah let's see if i
61:55 - can do it with chai
61:58 - um
62:00 - find number
62:02 - of elements
62:09 - support for counting child elements
62:11 - um
62:13 - let's see
62:16 - yeah let's just find this
62:26 - there we go expect here's this wrapper
62:28 - again to have length of
62:33 - let's see if i could just use this
62:35 - without the wrapper thing okay so
62:39 - you want to expect
62:42 - our
62:43 - inner html
62:49 - to contain
62:51 - expect results
62:57 - look this up
63:00 - call children
63:02 - you know what
63:04 - we're gonna have to do a part two of our
63:05 - react testing so next time we're gonna
63:07 - do part two because i'm out of time
63:10 - here's what i need to happen though
63:12 - so let's leave a little comment in here
63:14 - so we know where we left off at so at
63:16 - this point i need to
63:20 - [Music]
63:23 - let's say
63:25 - there should only be
63:28 - two
63:31 - elements with the class
63:35 - e-n-e-m-y with the class enemy okay so
63:39 - that's what we need to check for
63:41 - uh
63:42 - let's get rid of
63:46 - i guess we'll leave it in for now but i
63:47 - mean that's not we know we have to
63:49 - change this right so
63:51 - what we have so far is uh our
63:56 - we're getting our values we're adding
63:58 - our values we're putting that answer
64:00 - into the input we're clicking submit
64:02 - then we should check to make sure that
64:05 - when we've clicked submit
64:07 - we've taken away the enemy so it starts
64:09 - by default with three enemies so now
64:10 - there should only be two enemies left so
64:13 - we should we need to figure out a way to
64:15 - check
64:17 - how many
64:18 - elements on the page have the class of
64:20 - enemy and that should be equal to two if
64:23 - it's equal to two our test passes if
64:26 - it's not equal to 2 our test fails so
64:28 - that's the next thing we need to do let
64:30 - me do a get
64:32 - status
64:34 - also i think we can do a yarn remove
64:40 - you want to remove enzyme
64:43 - did we add yeah
64:44 - so get rid of enzyme
64:47 - now that i've realized that i messed up
64:48 - and i don't actually even need it
64:50 - okay and now we can do a git add
64:55 - and we'll do a get
64:56 - commit
64:59 - m
65:00 - and we'll say
65:03 - add tests for
65:06 - home page
65:12 - do a git push
65:16 - okay so now all of this is available on
65:18 - the repo if you want to check it out
65:20 - submit a pool request whatever it's
65:22 - there
65:25 - um now i'm going to try to answer as
65:27 - many questions as i can
65:29 - and
65:31 - i will have to end i can't let this go
65:33 - too long because i gotta i gotta start
65:35 - work um so but i'll see how many i can
65:37 - get through
65:39 - and
65:42 - 753.
65:43 - okay so we left off at 753.
65:47 - yes
65:51 - all right so the question from
65:52 - talentscout77 is what program is that
65:55 - that he is running uh visual studio code
65:58 - i think that's probably what you're
66:00 - asking about uh [ __ ] says is the secret
66:03 - to coding practice yeah absolutely
66:05 - practice practice is like
66:09 - you got to do it you're not going to be
66:11 - good unless you practice right even
66:14 - more so than anything else like
66:16 - you should be actually coding more than
66:19 - you
66:20 - read tutorials uh online videos books
66:23 - like whatever
66:25 - the thing that will help you more than
66:26 - anything is practice when you get stuck
66:29 - then go to the tutorials and the books
66:31 - and everything
66:32 - and like as you get more confident
66:34 - you'll probably be spending more and
66:36 - more time coding and then just using the
66:38 - other things as a reference
66:40 - there's nothing wrong with doing the
66:41 - reading and stuff you can't be coding
66:43 - all the time but
66:44 - the thing that's going to level your
66:45 - skills up more than anything else is
66:48 - actually coding trying to figure things
66:51 - out working through problems
66:55 - uh michael creole says i'm thinking of
66:57 - doing a project with geolocation any
66:59 - recommendations for packages
67:01 - uh i don't know any packages offhand
67:03 - because because
67:05 - the uh the browser
67:07 - has um
67:09 - the geolocation stuff built in
67:12 - um assuming you're going with a browser
67:14 - if you're going with mobile i'm not sure
67:16 - uh so you may not even need a package
67:18 - you may be able to just directly call
67:20 - the the geolocation like from the window
67:22 - object
67:23 - uh so i would check that out first and
67:26 - see
67:26 - now i mean i don't know about backwards
67:28 - compatibility but
67:30 - with let's say older browsers
67:33 - but at least with newer browsers you
67:35 - should be able to get that geolocation
67:38 - straight from the the browser api
67:43 - um ohtown says i cannot see the letters
67:44 - at all on the screen very blurry oh man
67:47 - i'm sorry
67:48 - that if did anybody else have that same
67:50 - issue i mean it's
67:51 - if it's okay for everybody else then
67:53 - it's it may be your connection oh town
67:56 - which i'm i'm sorry if if that is the
67:58 - case
67:59 - um
68:00 - let's see
68:02 - i could try to make the fawn a little
68:03 - bit bigger let me know if you think if
68:06 - anybody would like the font to be bigger
68:07 - i'll try to do that next time
68:10 - let's see
68:21 - uh
68:22 - tech from fifth s how long can it be and
68:25 - is this a full tutorial uh usually i go
68:27 - for about an hour
68:28 - um and it's not really a full tutorial
68:31 - this is more just kind of a code along
68:33 - where like
68:35 - everybody kind of not only watches me
68:37 - code but helps code either through pull
68:40 - requests or through suggestions in the
68:41 - chat
68:43 - and we just kind of code a project
68:44 - together
68:46 - i do my best to explain things though
68:48 - but
68:50 - i wouldn't exactly call it a tutorial
68:59 - master says test the test and nikki
69:01 - replies who watches the watchers
69:09 - uh somebody says larvae with a question
69:11 - mark i've never used larval so i don't i
69:14 - don't know very much about it
69:19 - let's see
69:20 - um
69:22 - uh we have react or angular i mean i
69:25 - know reacts pretty well and i know very
69:28 - little about angular so i'm going to
69:30 - choose react obviously like objectively
69:32 - which one is better i don't really know
69:33 - i guess it depends on what you're trying
69:35 - to do
69:36 - and what skills your team already has
69:41 - master says what's the difference
69:42 - between web dev and software dev
69:44 - honestly
69:45 - there's very little difference now uh
69:48 - because of the fact that web dev is
69:50 - moving so much towards progressive web
69:52 - apps
69:53 - um
69:54 - that that act like web applications that
69:56 - you can actually use something like
69:58 - electron to make it a desktop
70:00 - application like the the line between
70:03 - uh software dev and web dev is
70:07 - is almost non-existent now so
70:09 - i would say there's very little
70:11 - difference
70:12 - but maybe there i'm sure there are other
70:15 - point of views that they probably you
70:16 - know would have some good arguments the
70:18 - other way
70:24 - um michelle says i want to know about c
70:27 - programming
70:28 - i don't know very much about c
70:30 - programming myself so i i probably can't
70:33 - help you there
70:34 - um let's see
70:43 - uh prakash says are you testing react
70:45 - web or native okay so the testing that
70:47 - we're using actually is works for react
70:51 - um on the web so like this would work
70:53 - for normal react right because we're
70:55 - we're starting up a browser and we're
70:57 - testing what's in the browser
70:59 - so
71:01 - uh this would not work then for
71:03 - a react native mobile app so once we go
71:07 - to
71:08 - deploy this on mobile then we'll have to
71:10 - add
71:11 - other tests like another testing
71:13 - solution for mobile
71:16 - so it is the case that when you do this
71:18 - you can share a large amount of code but
71:20 - there are certain things that you
71:21 - probably have to implement for each
71:24 - platform right so routing is one thing
71:26 - that you probably have to implement more
71:28 - than once
71:29 - um because of the way mobile handles
71:31 - routing versus uh the browser
71:34 - um and then
71:36 - uh obviously your testing is especially
71:39 - your end-to-end testing like if we were
71:41 - doing unit testing
71:43 - maybe you could keep the same ones um
71:45 - but
71:46 - and then tests are something that
71:48 - you're probably gonna have to implement
71:50 - twice
71:51 - so that's a good question though
71:59 - political world war news says help me
72:01 - code
72:03 - what do you need help with
72:05 - master says might ask what is the
72:06 - purpose of tests uh basically the tests
72:09 - are there so that you can be confident
72:11 - like that if you make it so if you write
72:14 - your tests well
72:15 - any change you make to the code
72:18 - if you change something and then you run
72:20 - the test and they all pass you can be
72:22 - sure that your change has not broken
72:24 - anything
72:26 - so it just gives
72:27 - confidence so for a little app like this
72:32 - you could say like oh i could just
72:33 - manually test it myself
72:35 - well you could but for a larger app
72:38 - and over like the long term
72:40 - you're going to spend a lot of time
72:42 - manually testing but if you automate
72:44 - your testing like we're doing here
72:48 - you don't have to actually do the tests
72:49 - yourself it's a good idea to still do
72:51 - them occasionally but you don't have to
72:53 - do them with every change instead you
72:56 - run the tests
72:57 - and we're actually going to make the
72:58 - test run automatically when we change
73:00 - stuff so it'll be even easier um and
73:04 - then you'll know automatically before
73:05 - you try to deploy or anything like that
73:08 - whether or not you've broken something
73:13 - let's see
73:17 - chris bennett says what game are we
73:18 - making
73:19 - um and he also said hey stop cheating
73:21 - off your other computer
73:24 - it's not cheating at some point i
73:26 - actually figured out how to do these
73:28 - tests
73:29 - i'm just not going to re-figure them out
73:32 - on the stream i'm gonna
73:33 - let it cheat so
73:35 - i'm actually i'm looking at my own code
73:38 - just on another screen
73:42 - um basically the game we're making is
73:44 - just a very basic math game for uh for
73:47 - young children learning how to do um
73:50 - uh
73:50 - like basic math uh and starting with
73:53 - addition
73:57 - did i say michael creole just said hero
74:00 - be seen at
74:01 - i think i messed it up title can be seen
74:04 - hero be seen at uh i messed that up all
74:07 - right there we go there's a good
74:09 - there's a good pull request right there
74:11 - to fix my my improper grammar here
74:15 - good catch on that
74:24 - chris bennett says that actually looks
74:25 - pretty decent not gonna lie um
74:28 - are you are you talking about the game
74:30 - or the code or the test i don't know
74:34 - um
74:36 - so which which should i use next js and
74:40 - react.js when should i get to use uh use
74:44 - use neck j next js if you need server
74:47 - side rendering
74:48 - uh let's say for like search engine
74:50 - optimization purposes
74:52 - if you need that server-side rendering i
74:54 - highly recommend next js
74:57 - it will handle so much of the stuff for
74:59 - you that's generally kind of complicated
75:02 - so
75:02 - definitely use it for that if you have
75:04 - no need whatsoever for server side
75:06 - rendering then you might be better off
75:08 - going with create react app the only
75:10 - other thing that that's really big that
75:12 - next gives you is a built-in routing
75:14 - system
75:14 - so
75:16 - it may be also good like if you don't
75:18 - need the server-side rendering but you
75:19 - just you also like don't want to mess
75:21 - with doing your own routing then maybe
75:24 - use next as well
75:26 - but i love next js
75:29 - definitely an awesome
75:31 - awesome tool
75:36 - chris bennett says is react.js similar
75:37 - to angular uh there are some
75:39 - similarities uh i would say
75:42 - um
75:43 - let's see
75:49 - chris bennett says i need to learn how
75:50 - to use linux only familiar with windows
75:52 - and mac
75:54 - um
75:55 - yeah i mean linux the the cool thing is
75:57 - uh if you know a lot of the commands for
76:00 - mac like in the terminal they're the
76:02 - same as they are on linux so
76:04 - um like if you're going to set up a
76:06 - linux server a lot of the commands to
76:08 - get around in the terminal will be the
76:10 - same
76:16 - oh actually what did this say
76:30 - all right i'm gonna have to finish i
76:32 - might not get to all the questions here
76:34 - i might have to finish up because i got
76:35 - to go to work but
76:37 - um
76:38 - how about this
76:40 - if i didn't get to your question put it
76:42 - in the comments to the video and i'll
76:44 - try to get to it or you can wait till
76:45 - the next stream which will probably be
76:47 - friday morning and i'll get to it then
76:49 - um
76:51 - but uh thanks all so much the next
76:54 - stream we'll finish up with this test
76:56 - and maybe add some more
76:58 - um
77:00 - yeah so be looking out for that
77:02 - hopefully friday morning uh right around
77:05 - the same time like 7 30 or 8 o'clock a.m
77:07 - eastern time
77:09 - so
77:11 - thanks so much um yeah until friday i
77:15 - guess have a great day
77:17 - for a couple of days
77:19 - and i'll see you then thanks again bye

Cleaned transcript:

hey everybody welcome to live coding with jesse i'm jesse and today we're going to do some testing so um got a few uh comments in the chat already uh so you just i think it's just everybody saying hi say everybody um if you're just joining us for the first time we are building a a game just a really basic children's game to help them learn math we're building it in react native web which means we use react native syntax and then it gets turned into a web app this may seem a little bit strange why not just use react well if you do it like this then you could use the same code base for a web app and a mobile app uh so that's why we're doing it like this if you want more explanation check out some of the earlier streams like maybe like day one and two and then i go in a lot more detail about why we're doing it like this all right so this is the way the stream will go i'm going to start a pomodoro timer so 25 minute timer during that 25 minutes i'm going to focus mostly on the code and just narrate when the timer goes off i'm going to go to the live chat and answer questions so if you have a question just hang in there i will get to it at some point i do read everything in the chat so i'm not i'm not ignoring it just trying to get some get as much done as i can early on when i started streaming i tried to keep up with the chat as i was coding and really quickly it became apparent that i would get nothing done if i kept on interrupting my my train of thought uh for the chat okay um great we have some viewers there was a little lag on these statistics and it looked like nobody was watching for a while all right um i do want to um point out let's see our pull requests yeah so we have pull requests that have not been merged so i do want to merge these pull requests first before we get started so some of these like the add the license is awesome i can just auto merge this i'm not going to have to test it we can just check with files changed and we've added the license that's the only thing that changed uh it's always important to include a license with your open source work um that lets people know if if they can use it how they can use it right so always try to get that into your project as early as you can so i'm just going to merge that confirm that merge and write a little thank you note if you're maintaining open source project i think it's really important to always thank people um even if you end up not accepting their their pull request it's it's still you know they put in work so um car kartikey uh thank you so much not sure if you're watching right now or not but i really appreciate that let's check out uh the other full requests we had this is add submit on enter key press so this is awesome i kept mentioning that i wanted to implement this and then just never never got around to doing it so this looks good for this one too i'm just going to check the files because it should be a really um simple change so yeah so it's um on submit text inputs one text change on submit editing actually that's really interesting i don't know so uh who did this full request let's see uh ibrahim if you're watching let me know i'm not familiar with this like um the on submit editing i'm like i'm not saying it doesn't work but i'm just not familiar with it so i'm going to go ahead and since this is such a simple change i'm going to merge it and we'll just test it like on the fly normally if these were more extensive change i would actually pull it down as a separate branch and then test it and then decide whether or not i'm going to merge it um but for very small changes like this especially on a little side project like this i don't really have a problem merging merging these as is so let's merge this as well all right so now that should be in the code we still have some open issues uh so let me close these because these this one is closed now um let's close that and then this one is that on submit enter key press you can see that's that's been merged there let's just verify um that this is working so we'll do a get pool there we go i need that so you've done a git pool and we should have yep we have the changes and so now let's check our app and see what happens um let me do a hard refresh and just see okay cool great yeah so we um we do have a submit on enter key and that's really cool i i definitely want to look into how you did that because up until this point let's see our app.js so we have our press here so what i had done before was like um instead of this on submit editing that's wild okay that's cool that must be built into react native let me see basically it says basically on submit editing will trigger an event provided when the go button is clicked from an android soft keyboard nice okay so this is intended to work with the android soft keyboard but when you're doing it on the web it actually submits on enter that's awesome i have some other stuff i'm working on that i'll probably refactor to use this now because otherwise i actually just would track the key press and see like if it was the enter key that would press i would submit but that is excellent that's really awesome uh that's i love doing this the show because i learned so much um like even little things like that which you know when it comes to the code it's going to reduce my code slightly but you know i use that a lot of places so like overall it's going to have a cool effect and it's also going to enable functionality on mobile with the same code so web and mobile will share the same code which is pretty awesome so thank you so much for that um that was ibrahim that is yeah i think that one was abraham so awesome so let's go ahead and close that as well okay cool yeah so now we just have one open issue i'm sure we'll we'll add to that i already i talked with um with someone on twitter about some other things that need done and i need to make issues for those as well but today we want to focus on testing right so in particular i'd like to set up uh some endtoend tests these will definitely work with the web version i'm not exactly sure how the test would work with mobile so once we end up doing a mobile build then we'll think about the tests for for that but right now since we're only worried about web we're just going to go with with the web stuff um yeah so here's what what i'd like to use is um puppeteer okay to do a headless chrome browser and then so basically it'll it will mimic what the user is doing um so i'm going to open on another screen i'm going to open up a um json file that i have on another project and to remind me of everything that i need to install all right so let's go with here's what we're going to go with for our installation we're going to do a yarn add and then we're going to give it this d flag which means it's going to be added as a dev dependency right a dev dependency is not going to be included like in your your build right so um things you don't need for the program to run to actually run you can put in your dev dependencies and then that will decrease the size of your your build but people who clone your repo will still see like okay i need these for testing or whatever you need these for all right so i'm gonna do chai mocha um oh mocha um puppeteer and let's see i think that's it so we we don't we're gonna use jess but we don't need to bring in jess because jest is built in with create react app so since we use create react app we already have jess in fact if i would try to add jest create react app would give me a message in the console saying like hey we've detected different versions of jest and so we're just not going to adjust but and we're also going to add enzyme now enzyme is from airbnb i'm not sure what the status of that project is uh airbnb is moving away from react native so that may not be um kept up to date but for what we're gonna use it for it's gonna be fine but there just keep that in mind though that may be a good idea to find a replacement for enzyme but i'm used to using enzymes so at this point i'm just i'm gonna go with it and um i'm expecting that at some point i'll probably have to figure out how to do stuff without using enzyme so these are just gonna install the packages while that's happening we can add in um to our package json another um let's see so we're going to add in another script right so react scripts this this is what create react app comes with um already has its test okay so we're not going to use that i'm going to make another one that i'm just going to call e2e right because we're going to these are going to be our end to end test and then in our end to end test i'm going to um this is gonna be a lot so we're gonna run mocha and we're gonna give it a timeout let's see uh what's my time out here one two three four three all right so that'll be like 30 seconds so the timeout's in milliseconds um we'll give it 30 seconds right now that should be enough for what we're doing um depending on how many tests you have like it may you may want a greater timeout but for now i think this should just be this would be fine um and then we're going to set up some files but i'm going to call these files right now so we're going to end up having a folder called e2e and runner.js so we're going to split out some of our testing into separate files so we're going to start this up from our runner.js file and we're also going to do let me see oops e2 e and we're going to have a test folder and then anything in that test folder that has the suffix of dot spec dot js we're gonna we're gonna run those tests okay so this is basically the this is our command we're running mocha with a timeout of 30 seconds okay we're using our runner.js file which you'll you'll see that in a second and then we're going to have our anything in our test folder with this suffix is going to run as a test so let me save that oops failed to save uh okay let's um i'm going to cut that for a second and just close this don't save let's reopen this so um as these were installing it made changes to package json so we could see we have our dev dependencies now so that's why it gave me that message so let's just add that back in and save now um if you didn't see that message it was just saying there were newer changes that were made um so there was it was like conflicting right all right so now we have our dev dependencies we have this set up our end and test now we need to actually um bring in our test so what i'm going to do is i'm going to go to a previous project that we did on on this show so i believe maybe this was like project five or something i can't remember for sure um but i'm gonna go to my github and let's go to a4 let's go here i believe i had it set up here yep so we have a test folder here and you can see oops no that's not it there's our unit test here's our end to end test so we're going to grab set up from this project and this will save us a lot of time since we already have it set up and then we're going to use that so i'm going to open these so we can just copy and paste very quickly and we'll just grab like one of these just to get some boilerplate all right so now let's see runner and you'll notice i don't know if uh harshit is watching right now this morning i haven't seen him in the chat but uh harshit set these up initially on this project so uh thanks again to harshit uh for doing the initial setup on these uh on these tests these nan tests okay so this will be our runner.js file so you can see um this is just basic setup right like we're requiring um browser and options which we'll see those files in a second and then we're just starting it up and closing it down right starting up our headless browser closing it down okay um and it it's nice to have it in this file otherwise we would have to do this like before and after all of our tests so this just this saves us some work all right so let's go back to here and let's set up our our folders right so we want a folder called e2e inside e2e we want to add a file called runner runner dot js and we're going to copy that in okay um let's go back here and do oh yeah let's close this so i know i don't need it this is our browser.js okay so let's copy this we'll go over it in a second let me try i i found out about being able to do these multiple desktops on windows so i need to get used to the um the shorthand keys for that so i think it's like windows control is that it no that's not it the window control all right maybe i don't have my hotkey set up if anybody knows about how to do these different desktops on windows let me know um but i definitely don't have it down so far i want it to just work just like it does in mac but i haven't got that down all right so let's verify this was browser.js so let's create that browser.js and we're going to copy that in okay so in browser.js right we're we're requiring puppeteers this is where we're bringing in puppeteer right and then we're we're setting this up right so this is just like the boilerplate that you need to set things up we pull in our options which we we um uh we'll have an options file for that right so this stuff like once you have it set up you'll probably never change it so this is the only time we're ever really going to look at these files and our last one our last setup file will be oops did i forget to do i think i accidentally closed options options yep there we go okay the options is the the easiest file to figure out what's going on um options dot js okay so in our options.js we're setting our app url to localhost right which we're going to test locally we're running uh our project on locos 3000 so obviously you change this to whatever you need it to be and then we're going to run this in headless mode if you set this to false you'll actually see a browser pop up and you'll see stuff happening in the browser which is kind of cool to look at but if you're doing these tests like constantly uh it gets annoying after a while so i usually just set it to um to true and leave it set to true i don't know we may do like one test run once we get some tests set up uh where we have it set to um false just to see also if you're having trouble with your test sometimes just looking at what's happening is a good way to debug i actually did that yesterday is um having some issues where the tests were hanging at one point and after i ran it not in headless mode i could see exactly what was happening uh and it helped me to debug the test so there are times when you would run a actually see what's happening so let's close these out now that we have them set up let's make our our actual tests folder oops that's not it i want to make it inside here so tess and then inside tess let's add our first test if you get some comments in the chat in about four minutes i'm gonna go back to the live chat and answer your questions so uh hang in there so we're gonna have to change this a bit i don't remember what's going on in this test from the last project so it may actually work um i think it may just be testing to make sure that something loads on the page oops so we're gonna make this what did we call this one um page.spec.js yeah let's just call this one app.spec.js and what was that yeah spec okay and now we'll paste this in here and let's look at what this test is actually doing okay so we're requiring we're pulling in this expect from chai okay so we see we use it down here and uh we'll we'll get to that in a second uh we're also pulling in tests from our browser file right um so what we're doing is so let's say i don't want page two let's say describe this is i'll just put some in there for now and for now it says page can be seen at slash page and i'm not going to say slash page i'm just going to see at slash right so just at our home and so we're going to start our test we're passing in our browser and our options okay so now we are loading a new page right so new page and that this everything going on in here is kind of a mix of stuff you can do with puppeteer with chai with jest so it's like it's very with mocha um so when i do this i usually have to have like four different documentation pages open but once you get like a few tests written you can usually just modify copy and paste and modify your tests as you go along so now we are actually going to let's get rid of this because we want to go to the home page right so this is going to be our url from our options which is localhost 3000 okay now we're creating um a constant to hold the value of body right so or it's just going to be the string body okay and we're going gonna wait till we find the selector body on the page right so html pages all have right like body let me check my timer all right one minute we'll go to the chat and then now we're creating a constant called inner text so what we're doing is we're evaluating the page okay and we're looking for all of the inner text that's inside of body right the body tag on the page right so this is not going to give you html it's just going to give you text that's on the page and in this case we want to make sure that 404 which would be a 404 error does not show up anywhere on the page so all this test is doing is saying that something loaded when we went there like something other than a 404 error happened when we went to this page so this is a very basic test right it's not saying much really not much at all but this test should run it should work so let's let's test out the test here and let's say yarn e to e let's see what happens okay so our test is running home screen can be seen at slash and so we've passed our test it took one second uh total so they rounded up so it's kind of nice it shows you all the tests that you passed and it'll tell you how long each one took and then it'll give you a report of how many you passed and how many you failed so that's our first test it has limited usefulness as it is now but we will add on some more tests that will be a little bit more useful and hopefully that'll give us confidence to be able to make changes and we'll run our tests and be sure if our tests pass that our changes have not broken anything um we also if we have time we might set it up so that the tests will run automatically when you try to commit uh and you won't be able to commit unless the tests pass so i think that's kind of cool to set up um there we go here's my timer all right so i'm gonna take a short break i'm gonna go to the chat and i'm gonna start way up at the top and try to get through as many questions as i can and i also need a drink okay um all right so i'm going to skip through all the the uh hellos but i'm just going to give one big hello to everybody that's saying hi okay uh we have a request ravi says please make a video on javascript and angularjs i am not i have very little knowledge of angularjs so i'm probably not the best person to make that video but we do i think we do have some angular videos on the free code camp channel here so check those out um let's see i'm not sure how to pronounce your name so please let me know how i should pronounce it but anyway they say thank you for merging the pr oh you're welcome thank you for submitting the pr that was super helpful i i definitely appreciate it i always get so excited when i see that pull requests are being merged i need to put more issues in so that anybody that wants to work on the project will know what what to add so um maybe i'll try to do that today and if you all think of some issue or some feature or see a bug or something feel free to put an issue in the the github repo as well um michael cruz said and now the wait for puppeteer to install it actually installed really fast so if i was trying to do this stream on my laptop it that would have been the end of the stream like it would have just the frames frame rate would have dropped like it would have taken forever but on this new machine like i'm i'm very impressed with my new uh my new pc so far and its performance while streaming all right michael lane says what is react used for react is used for creating sorry about the yawns uh react is used for creating web apps um like single page applications progressive web apps uh but react native which is what we're using can also be used to create mobile apps um basically that you you can create a wide variety of things with react because it has the ability to render to four different platforms so your uh javascript html type code can be transformed into something that can be run on a variety of devices and platforms uh so it's very very cool so i mean that's a very like short summary and leaves out a lot but i that's basically what reacts what i use react for uh then danjuma says fyi uh for your information react also builds vr apps i have seen that and i'm i really really want to build a vr app at some point so maybe that can be one of our next projects um maybe we could have battle math vr who knows uh but i i definitely want to try that out um otown says the screen is blurry okay let me know is anybody else having a blurry screen um on my end like all the analytics are saying the stream is fine on my end but let me know um it should be i should be putting out 1080p so if your connection can handle it um you should be getting a 1080p stream right now nikki says have you tried cypress for endtoend testing i have not tried cypress but i'm interested in hearing more about it uh james lark says sir please tell me what should i choose uh software dev or web dev for better job opportunities um it kind of depends on your area and what's in more demand so i guess it really does depend like i don't know where you're at uh or what you're where you're looking at to actually get a job but there are a ton of jobs either way web dev software dev and really like the line between a web dev and a software developer are so blurred now with things like like a web developer could create a desktop app or a mobile app using the same tools they used to do web apps right so it's the line is very blurred so um you probably could learn the same skill set essentially and get a job doing either one um bottom left corner okay so we're saying alt tab yeah let me try this actually for a second while we have this up here so i can alt tab and see these screens okay what i want to try to do though is do um let's see what i i want to do is be able to do a shortcut to just automatically switch to another desktop so like i can tab and i can see like there's two desktops here but i don't want to even see it like i want to get to the point where i can just do like wait a second did that no that's not it that's what i did last time and i um the guy that sits next to me at work yesterday was we were messing with it and trying to figure it out and i think he was able to do like windows key control and then arrow keys and it let him switch but it's not working for me right now let me see maybe windows alt windows shift yeah it's windows shift that's it okay awesome so window shift lets me go back and forth this is actually weird it's it's changing both of my screens though that's weird all right so i don't want that i need to look into this more so uh what it was doing was when i'd switch so like right now on the screen and you all can see that i'm in the code but when i press window shift arrow key it shows this screen but on my other screen it's now covered up my um my streaming software and it's added the code over there so i need to to mess with maybe the settings or learn more about that but if you've ever used a mac it's very easy like to go between your desktops so i'm trying to like get that same ease of use on windows because i'm just so used to it from my mac all right but anyway let's write some tests so i'm gonna mark down here where i left off at in the chat so i can come right back to it um let's see 753 looks like a good place 753 okay so i'll come right back to there uh and continue on with the live chat after we do um another pomodoro session yeah so i may not do this entire session i just would like to get one like additional test written and then try it out so let's see let's go let's go back here and let's think about like what we would want to test so right now this is basically saying um can we see we expect it not to contain a 404 all right but that's not really like potentially that's not telling us a lot because the the page could not show anything really and this test would still pass right so let's add something that's going to give us a little like better indication of what's actually going to happen on the page so let's expect inner page to contain and i believe we have the word battle math here so let's expect it to contain battle math right um and let's see if that if that passes right so not only do we not want a 404 error but we we wanted to say battle math okay um really if if it says battle math we probably don't need that 404 so let's just get rid of that right um so i want to know like not only like is there something there but is there this title there which should be uh there on all the pages right um let's see run this oops there we go okay so that passes now still took about the same amount of time actually a few milliseconds less than the last time um so now i i think i'm i'm no expert in testing right but i think this is a little bit of a better it tells us more right it says hey we went to your homepage and the title of your app is actually visible at your home page right so if this test were to fail i know something is definitely wrong with my app so i i broke something for sure okay let's try to make another test so we can copy and paste this it right and we can make a completely new test here so we could say um let's look at our app for a second and say what else let's restart it see what our basic um thing is like what else would we want to see on the page um and if we didn't see it on the page it would definitely be a problem right so um i guess i mean we would want to be able to see on the very first page like a hero and three enemies um let's just let's do one for now let's let's say we can definitely see a hero character on the page we'll keep it really basic right so what we'll do is in our app dot js we need to give our hero an id so that we can pick them out on the page right so we have our hero right now is just a view right eventually this will hopefully change and it won't just be a square but for now it's a square so normally we could just put an id here but in react native we want to use native id so actually with react native web if we just wrote id it would work okay but it it won't work um with web like it'll it'll give us at least i think it'll throw a warning at some point that we we can't use ids or something like that so it's been a while since i did that but i do remember getting some sort of warning about that so anyway the react native way to add an id is with native id so let's just say hero right and usually you remember i mean this is like basic html stuff but you only want to have one id on the page so they they have to be unique so there should only be one hero on the page one hero id okay when we get down to enemies what we'll probably want to do is instead of an id we would want to use a class or we would want to give each a unique id by saying something like the id equals enemy and then like the iterator so the enemy like zero enemy one enemy two right uh so it's just whatever you the id can be whatever you want but it has to be unique uh let's see oops i meant to go back to our test all right so now that we have that what we can do is we can say let me grab let me go back to my other screen here and see some of the other tests that i've i've set up uh so what we can do is we can check for the html so let's do one where we actually check for the inner html okay so um let's get rid of this for a second and can we get rid of this too i believe we can yeah so let's get rid of all this and just show kind of a different way um to do this so right now we're still getting our page all right we're still waiting like we're gonna go to that home page but now let's do a um let result uh we could probably make this a const really const res const result in general it's good to use const unless you really need to use something else um so we're going to just call this a result we're going to say await page dot evals we're going to do eval right page.eval and then we're going to evaluate body so remember last time we actually made a a const for body selector for body right now we're just going to skip that and just say body right and then inside here as our second argument that we passed to to eval right uh we're going to put a function right so we're going to say e i'm just going to do an arrow function so we're going to dot e dot inner and we're going to do html this time instead of text so what this will do now is before we just had the text right so we couldn't for instance like verify that there was an input on the page with this or anything this is just giving us the text now we'll actually be able to see things that are in the html in the markup of the page so we'll be able to do something like we expect the result to contain and we could say um what do we call his hero now normally the hero would not show up under text right because that doesn't actually display his text in the page it's it's an attribute of uh an html element right but now we should be able to see that so let's save that and run our end and test see if we've done it correctly yep so we can see that title battle math oops and i forgot to change this so let's change this to um visible at slash and hero let's say hero can be seen at slash let's let's change it up so keep it keep it the same so title can be seen at slash hero can be seen as slash okay so now we'll just see like in our testing we'll get better messages see title hero so it's good to give these good names so describe you can give like the name to the the whole group of tests that you're doing and then under the each it you can give a name to each one of these a descriptive name to what you're testing then when you see like a test will fail it'll be a lot easier to figure out what you need to look for to fix it if you give nice descriptive names here all right uh let's see how much time i have i'd like to do at least one test where we actually um like do something on the page so let's see we need to do a little bit of setup in our app.js so in order to get things from the page let's see where we're at okay so right now we have inside this text we have our value our operator and our value two but that's going to be hard for us to get access to in our tests what we really should have is um we should have ids for each one of these right so let's let's do that let's switch this up and let's put let's separate these out so that we have three text and let me verify that our styles won't get messed up by this styles.math text where are styles at up here okay you know what i'm actually i'm gonna move these styles down below because i just i like moving them down below so that um this first stuff that you see is more like the actual like logic of the component so i'm just used to that uh if so that's what i'm going to use for my projects there's nothing wrong with putting them up top that's just what i've been used to and like i said i just like to see as soon as i see the component first thing i'll see is like the functions the logic i'll scroll down i'll actually see the markup and then the styles at the bottom because usually the styles tell you the least about what the component actually does it's just my experience so our math text all it has is a font size and a padding right so we're going to get rid of that padding right because we don't want that everywhere right so let's get rid of that padding right and let's make sure we put that on the view itself uh where's the math row actually you know what we can put that on the text input so we have styles input so we had a input input input oops i thought i had the uh there we go what was that again padding right there we go okay so let's move this and make it a padding left or better yet let's make it a margin left okay all right so now the input is going to have a margin left right which should take care of this so now we can actually copy and paste our text here without worrying about weird spacing happening okay so now we're going to have text oops totally messed that up i wanted to do is get rid of these and this and then for this one we'll get rid of that and then actually i guess we'll need another one for our equals there we go all right so first off let's see if this even displays properly hey it does we're missing some spaces but that actually looks okay i may like that better without the spaces now i think about it i get i yeah i kind of like that i'm gonna leave it without spaces for now um but now what this will let us do is add native ids so we can have a native id for each one of these and uh our native id will be like well let's just say val about one and then for this one we'll make it about two for this one we don't need anything uh and for this one we'll just say operate error okay all right so we have that now our input needs a native id let's say native id equals um answer let's say answer input let's keep it the same answer input okay so normally like everything we're doing is like camel case but generally uh like within the dom you would usually use um your uh your hyphens for things like classes and ids so that's why i'm kind of keeping this because this is gonna end up being in the in the dom right okay i think that's all we need you know what let's put this uh i native id on this as well native id equals um we'll say this is submit all right great now when we come back to our test this will all make a bit more sense when we actually write out our test right so let's say can submit and submit answer uh let's see and we need a way to check let's see not only can't submit let's just say like um correct answer reduces enemies by one okay so if we actually test this this is going to tell us a lot about our application so this is an ambitious test right um it's going to take a couple of steps but that's what i want to try to do let me see all right seven minutes it's going to be rough to get into seven minutes but we'll see what i can do so we're still going to go to the home page right and we are going to actually let's let's do one more thing if we're gonna see where the enemies are we need to give the enemies um some at least classes right so let's say class name right so in react we need to use class name because in javascript class is a reserved word right so we're going to say class name and let's say enemy since there'll be multiple enemies we need to use a class instead of an id okay so now we need to have the user um have some type of action right uh so for that we can say we can use our our type right so we already have our page element right so we could say page dot type and this actu literally means we're going to type something into the page so the first uh parameter that we pass in here is going to be the id of our the place where we want to type so our input so this is going to be the answer input so we're going to type in our answer input and inside the answer input let's we're going to type answer right but i need to create that so let's create answer um answer is going to equal val 1 um how are we gonna do this about one plus let's just do it plus two about one plus vowel two correct addition so for this one i'm just gonna test addition okay so correct addition that'll make it just a little bit easier since we're running out of time correct addition answer um should give us val it should be val one plus val2 right so let's do const um vowel one and const vowel one is going to be uh let's see how i can get this uh i think i can get let's see i might be able to do it like this um this might be overkill i may not need all of this but let's see so instead of body if i eval the id val1 and then instead of inner html i get inner text this should give me that value and javascript should be able to handle the fact that it's getting this as a string but it can it'll know that like i want to add these as numbers at least i think that's that'll be the case um we'll know really quickly if that's not the case okay so now we're grabbing value one and value two and i'd like to actually see like is there some way i could do this without like faster or maybe in only one line but for now this i think this will work so we'll get the values we'll get the answer here and then we should input the answer right then after we input the answer we're going to why is my my indentation is so messed up um we input the answer now we need to click the um need to click the button uh so for this click let's say i think we can just do a page.click so we can do um do i need to do i need to do a weight sorry i forgot a weight here uh let's do await i i need to fix all this indentation page.click and then this is going to be our submit right we named it submit okay so after we do this click now we can see the result we can evaluate our html right and we want it to contain and here's where i may have to look this up let's see what time it is um okay only have one minute no okay we may have to we may not get finished with this but let's see uh expected to contain let's see um i think this would be in just um um there we go find selected uh find the number of render to child components children uh support for calling all child elements for support for counting all child elements all right let's just let's try the first ones you know that much time so find selector expect fine to have length of nice okay so we can do two halve length of excellent so we should expect it to have length of two right so let's just grab this whole thing uh no i don't want rapper i don't want to have to use wrapper um okay let's try it with contains uh my time is up wrapper contains all right i need to get out of this shallow wrapper because i'm not using the shallow shallow wrapper um selectors static rendering no i'm not using render i'm using we're only using one thing from enzyme what is it expect that's it or no it's not even from enzyme we're requiring that from chai what the heck am i using from enzyme nothing i'm not using anything i don't even need enzyme sorry i got confused at the beginning um i use enzyme for unit testing stuff not for end end testing yesterday i was doing the last two days i've been doing unit and end in tests so apologies for getting that mixed up what i need is cha or not let's see yeah let's see if i can do it with chai um find number of elements support for counting child elements um let's see yeah let's just find this there we go expect here's this wrapper again to have length of let's see if i could just use this without the wrapper thing okay so you want to expect our inner html to contain expect results look this up call children you know what we're gonna have to do a part two of our react testing so next time we're gonna do part two because i'm out of time here's what i need to happen though so let's leave a little comment in here so we know where we left off at so at this point i need to let's say there should only be two elements with the class enemy with the class enemy okay so that's what we need to check for uh let's get rid of i guess we'll leave it in for now but i mean that's not we know we have to change this right so what we have so far is uh our we're getting our values we're adding our values we're putting that answer into the input we're clicking submit then we should check to make sure that when we've clicked submit we've taken away the enemy so it starts by default with three enemies so now there should only be two enemies left so we should we need to figure out a way to check how many elements on the page have the class of enemy and that should be equal to two if it's equal to two our test passes if it's not equal to 2 our test fails so that's the next thing we need to do let me do a get status also i think we can do a yarn remove you want to remove enzyme did we add yeah so get rid of enzyme now that i've realized that i messed up and i don't actually even need it okay and now we can do a git add and we'll do a get commit m and we'll say add tests for home page do a git push okay so now all of this is available on the repo if you want to check it out submit a pool request whatever it's there um now i'm going to try to answer as many questions as i can and i will have to end i can't let this go too long because i gotta i gotta start work um so but i'll see how many i can get through and 753. okay so we left off at 753. yes all right so the question from talentscout77 is what program is that that he is running uh visual studio code i think that's probably what you're asking about uh [ __ ] says is the secret to coding practice yeah absolutely practice practice is like you got to do it you're not going to be good unless you practice right even more so than anything else like you should be actually coding more than you read tutorials uh online videos books like whatever the thing that will help you more than anything is practice when you get stuck then go to the tutorials and the books and everything and like as you get more confident you'll probably be spending more and more time coding and then just using the other things as a reference there's nothing wrong with doing the reading and stuff you can't be coding all the time but the thing that's going to level your skills up more than anything else is actually coding trying to figure things out working through problems uh michael creole says i'm thinking of doing a project with geolocation any recommendations for packages uh i don't know any packages offhand because because the uh the browser has um the geolocation stuff built in um assuming you're going with a browser if you're going with mobile i'm not sure uh so you may not even need a package you may be able to just directly call the the geolocation like from the window object uh so i would check that out first and see now i mean i don't know about backwards compatibility but with let's say older browsers but at least with newer browsers you should be able to get that geolocation straight from the the browser api um ohtown says i cannot see the letters at all on the screen very blurry oh man i'm sorry that if did anybody else have that same issue i mean it's if it's okay for everybody else then it's it may be your connection oh town which i'm i'm sorry if if that is the case um let's see i could try to make the fawn a little bit bigger let me know if you think if anybody would like the font to be bigger i'll try to do that next time let's see uh tech from fifth s how long can it be and is this a full tutorial uh usually i go for about an hour um and it's not really a full tutorial this is more just kind of a code along where like everybody kind of not only watches me code but helps code either through pull requests or through suggestions in the chat and we just kind of code a project together i do my best to explain things though but i wouldn't exactly call it a tutorial master says test the test and nikki replies who watches the watchers uh somebody says larvae with a question mark i've never used larval so i don't i don't know very much about it let's see um uh we have react or angular i mean i know reacts pretty well and i know very little about angular so i'm going to choose react obviously like objectively which one is better i don't really know i guess it depends on what you're trying to do and what skills your team already has master says what's the difference between web dev and software dev honestly there's very little difference now uh because of the fact that web dev is moving so much towards progressive web apps um that that act like web applications that you can actually use something like electron to make it a desktop application like the the line between uh software dev and web dev is is almost nonexistent now so i would say there's very little difference but maybe there i'm sure there are other point of views that they probably you know would have some good arguments the other way um michelle says i want to know about c programming i don't know very much about c programming myself so i i probably can't help you there um let's see uh prakash says are you testing react web or native okay so the testing that we're using actually is works for react um on the web so like this would work for normal react right because we're we're starting up a browser and we're testing what's in the browser so uh this would not work then for a react native mobile app so once we go to deploy this on mobile then we'll have to add other tests like another testing solution for mobile so it is the case that when you do this you can share a large amount of code but there are certain things that you probably have to implement for each platform right so routing is one thing that you probably have to implement more than once um because of the way mobile handles routing versus uh the browser um and then uh obviously your testing is especially your endtoend testing like if we were doing unit testing maybe you could keep the same ones um but and then tests are something that you're probably gonna have to implement twice so that's a good question though political world war news says help me code what do you need help with master says might ask what is the purpose of tests uh basically the tests are there so that you can be confident like that if you make it so if you write your tests well any change you make to the code if you change something and then you run the test and they all pass you can be sure that your change has not broken anything so it just gives confidence so for a little app like this you could say like oh i could just manually test it myself well you could but for a larger app and over like the long term you're going to spend a lot of time manually testing but if you automate your testing like we're doing here you don't have to actually do the tests yourself it's a good idea to still do them occasionally but you don't have to do them with every change instead you run the tests and we're actually going to make the test run automatically when we change stuff so it'll be even easier um and then you'll know automatically before you try to deploy or anything like that whether or not you've broken something let's see chris bennett says what game are we making um and he also said hey stop cheating off your other computer it's not cheating at some point i actually figured out how to do these tests i'm just not going to refigure them out on the stream i'm gonna let it cheat so i'm actually i'm looking at my own code just on another screen um basically the game we're making is just a very basic math game for uh for young children learning how to do um uh like basic math uh and starting with addition did i say michael creole just said hero be seen at i think i messed it up title can be seen hero be seen at uh i messed that up all right there we go there's a good there's a good pull request right there to fix my my improper grammar here good catch on that chris bennett says that actually looks pretty decent not gonna lie um are you are you talking about the game or the code or the test i don't know um so which which should i use next js and react.js when should i get to use uh use use neck j next js if you need server side rendering uh let's say for like search engine optimization purposes if you need that serverside rendering i highly recommend next js it will handle so much of the stuff for you that's generally kind of complicated so definitely use it for that if you have no need whatsoever for server side rendering then you might be better off going with create react app the only other thing that that's really big that next gives you is a builtin routing system so it may be also good like if you don't need the serverside rendering but you just you also like don't want to mess with doing your own routing then maybe use next as well but i love next js definitely an awesome awesome tool chris bennett says is react.js similar to angular uh there are some similarities uh i would say um let's see chris bennett says i need to learn how to use linux only familiar with windows and mac um yeah i mean linux the the cool thing is uh if you know a lot of the commands for mac like in the terminal they're the same as they are on linux so um like if you're going to set up a linux server a lot of the commands to get around in the terminal will be the same oh actually what did this say all right i'm gonna have to finish i might not get to all the questions here i might have to finish up because i got to go to work but um how about this if i didn't get to your question put it in the comments to the video and i'll try to get to it or you can wait till the next stream which will probably be friday morning and i'll get to it then um but uh thanks all so much the next stream we'll finish up with this test and maybe add some more um yeah so be looking out for that hopefully friday morning uh right around the same time like 7 30 or 8 o'clock a.m eastern time so thanks so much um yeah until friday i guess have a great day for a couple of days and i'll see you then thanks again bye
