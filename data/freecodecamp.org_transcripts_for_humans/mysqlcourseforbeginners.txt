With timestamps:

00:00 - unlock the power of databases with this
00:02 - MySQL course for beginners whether
00:05 - you're new to databases or looking to
00:07 - level up your skills this course has you
00:10 - covered you'll learn how to create
00:12 - manage and manipulate data using MySQL
00:15 - you'll discover the secrets of keys
00:17 - learn to write queries like a pro and
00:19 - automate tasks with triggers no jargon
00:22 - just practical knowledge Josh from
00:25 - keepit techie teaches this course he
00:27 - works as a SQL Server database
00:29 - administrator so he's the perfect person
00:31 - to teach this course what's up guys this
00:34 - Josh from keep techi and welcome to my
00:36 - comprehensive course on MySQL now MySQL
00:40 - is a relational database management
00:43 - system and in this course I'll try to
00:45 - explore the ins and outs of my SQL on
00:48 - Rocky Linux which is a powerful
00:51 - combination for managing your data
00:54 - effectively now my SQL is not just any
00:56 - database it's the fundamental Port of
00:59 - the lamp stack which stands for Linux
01:01 - Apache MySQL and PHP and then also the
01:05 - limp stack which is Linux engine X MySQL
01:09 - and PHP and these Stacks are widely used
01:12 - for Content Management Systems like
01:14 - WordPress jumer and various other web
01:17 - applications and I'll start with the
01:19 - basics covering the installation login
01:23 - procedures and a little bit of database
01:25 - management so whether you're a beginner
01:27 - or have some experience this course will
01:30 - help you master my SQL on this fantastic
01:33 - Linux distribution so let's head over to
01:35 - to Rocky Linux 9 server and get started
01:38 - with the installation process okay so
01:40 - here we are logged into Rocky Linux 99
01:43 - server and to install my SQL we'll
01:45 - follow these simple steps and I just
01:48 - brought up the OS release information
01:51 - under so you guys can see that I am on
01:54 - Rocky Linux 9 which is a one toone
01:57 - comparison to Red Hat 9 so let's go on
02:00 - and clear and first let's ensure that
02:03 - our system is up to date and we need to
02:05 - run the following command to refresh the
02:08 - package repositories and apply any
02:10 - available updates and that command is
02:12 - pseudo dnf and update and we'll wait for
02:16 - this to finish but this will basically
02:17 - check to see if there is any updates and
02:19 - if there are it'll upgrade those
02:21 - packages on the server and as you can
02:23 - see we don't have any updates so we're
02:25 - good to go I believe I updated this
02:27 - before I started this video so now to
02:30 - install my SQL all we have to do is type
02:32 - pseudo dnf install and then my SQL
02:36 - server and I'll just tab it out it'll
02:38 - pull up the latest version of my SQL so
02:41 - that's basically the version number and
02:43 - all that stuff for this actual package
02:45 - so let's go on press enter that'll go
02:46 - through and resolve all the dependencies
02:49 - for MySQL as well as the package for
02:51 - MySQL so all we have to do is type why
02:53 - for yes we want to install this package
02:57 - and use the amount of space that it will
02:59 - use use on the operating system so
03:01 - scroll on press enter it'll go through
03:03 - like I said download all those
03:05 - dependencies as well as the MySQL server
03:07 - package and then install it on the
03:09 - system so I'll be back when it finishes
03:11 - all right so the installation is
03:13 - complete and now we need to check the
03:16 - MySQL Services status and we can do that
03:19 - by using the system CTL command so let's
03:21 - type pseudo system CTL and one thing I
03:24 - noticed on Rocky Linux it doesn't start
03:27 - the service after the installation or
03:30 - part of the installation process similar
03:33 - to like you buntu typically when you
03:35 - install MySQL it'll go down and start
03:37 - the service and you may have to go in
03:38 - and enable the service but most of the
03:41 - time it starts the service right off but
03:43 - on Rocky Linux or rail it doesn't so
03:46 - system CTL and then status and then what
03:48 - we want to do is check that my SQL
03:50 - status and you'll see that it's not
03:51 - started boom and it'll say right here
03:54 - where where it says active it says
03:56 - inactive so right now that lets you know
03:58 - that it's not started and then also Al
04:00 - the enabled portion of it this is
04:02 - essentially for when you reboot the
04:04 - server itself that service will store it
04:07 - up right now it's disabled we want to
04:09 - enable that so it's two commands we can
04:11 - run right fast we basically have to run
04:13 - the pseudo system CTL start and this
04:17 - will start the actual service so let's
04:19 - go and press enter all right and so we
04:20 - can run the status command again and
04:23 - this will show you that that service is
04:24 - running now so as you can see it says
04:26 - active and running but we still need to
04:28 - enable it so let's let's go down and
04:30 - press Q that'll drop us back down to the
04:32 - terminal again and we get up arrow and
04:35 - then let's remove the status and type
04:38 - enable press enter and it'll go through
04:40 - and enable This Server so each time you
04:42 - reboot your Rocky Linux server my SQL
04:45 - will stored and so let's check the
04:46 - status again we can go back in here and
04:48 - look at it and this is what we're
04:50 - looking for where it says enabled that
04:52 - lets you know it's enabled so that
04:53 - service is stored up and so that's
04:55 - pretty much it we've successfully
04:56 - installed my SQL and now it's time to
04:59 - show you you guys how to log into it and
05:01 - you use a command called MySQL and you
05:03 - also want to put the user account and if
05:05 - there is a password then you want to put
05:07 - that password there as well or the
05:09 - option to ask for a password but since
05:12 - this root account that's on the system
05:14 - of the default root account it doesn't
05:16 - have a password you can log right in and
05:18 - so let me go down and type the command
05:20 - in and we are using a pseudo account so
05:23 - we have to type pseudo in order to run
05:25 - the MySQL command so let's type pseudo
05:27 - MySQL and then we need to put our user
05:30 - so we have to put our option in there-
05:32 - you and then the username so I'm going
05:34 - to use that that root account like I
05:36 - said that's the default account that's
05:38 - there after installation and it doesn't
05:41 - have a password on there but we need to
05:42 - put- P at the end of it so it will
05:44 - access for the password and you'll see
05:47 - once we get past this step It'll ask for
05:49 - the password but we don't have to put a
05:51 - password in because there is no password
05:53 - set for it now I want to point this out
05:55 - to you as well though you want to make
05:57 - sure you follow best practices and
05:59 - create a dedicated user account for your
06:02 - projects you don't want to be using this
06:04 - root account with no password on it so
06:06 - go on and press enter It'll ask you for
06:09 - a password it says enter password and
06:10 - since we ran pseudo it normally will ask
06:12 - you for a pseudo account so if you you
06:14 - may see it asking for the pseudo account
06:17 - so you want to type that in of course
06:19 - but then it'll pop up with this enter
06:20 - password for the MySQL account so I just
06:23 - want to know let you guys know that the
06:24 - way you're seeing it on mine it may not
06:26 - show up on yours you might have to type
06:28 - in a password for pseudo
06:30 - and then press enter because there is no
06:32 - password so let's press enter right fast
06:34 - and that'll get us into our MySQL server
06:36 - now that we're in let's explore some
06:38 - basic MySQL commands and functionality
06:41 - now once you're inside the MySQL prompt
06:44 - which is what it's showing right here
06:45 - with the my SQL and then that right
06:47 - arrow you can begin executing commands
06:50 - and so let me walk you guys through a
06:51 - few ones the first one you need to know
06:54 - is the help command so if we type help
06:57 - and then every command pretty much every
06:59 - command you have to type a semicolon
07:02 - behind it similar to typing out a query
07:04 - in order for it to run that statement
07:07 - for you so help will basically give you
07:09 - a whole bunch of information on how to
07:12 - use my SQL if you scroll through here
07:14 - you'll see a Le list of all MySQL
07:16 - commands and some of these commands they
07:18 - use that left slash in front of it and
07:20 - that's what I was going to show you guys
07:21 - as well after this by typeing help you
07:24 - know as one word and then the semicolon
07:26 - there's another way of actually getting
07:27 - to the help and that's the back SL and H
07:30 - but the other ones are there and they
07:32 - have an explanation of what they
07:33 - actually do and I won't go through them
07:35 - all cuz I typically don't use a lot of
07:38 - these commands these my SQL commands
07:40 - right here but I just wanted to show you
07:41 - guys where to get that information from
07:43 - if you need it now let me go to and run
07:45 - that back slash and then H and that way
07:47 - you guys can look at the same thing and
07:49 - it looks like it didn't change because
07:51 - it just basically ran it again and
07:53 - display the same information so we are
07:55 - good to go now the first thing I wanted
07:57 - to show you guys is how to to find
08:00 - databases within your database
08:02 - management system and so I'll show you
08:03 - guys that command now and it's
08:04 - essentially the show command so all we
08:06 - have to do is type show and then we want
08:08 - to type what we what we're looking for
08:10 - which is databases so databases with an
08:13 - S and then semic calling at the end of
08:15 - it and this will show you all the
08:18 - databases that are currently on the
08:20 - system so let's go down and press enter
08:22 - and what you'll see is some built-in
08:24 - databases for the database management
08:26 - system like information schema like the
08:29 - performance schema this my SQL database
08:32 - as well as the cyst database and I
08:33 - recommend you don't touch any of those
08:35 - those are vital to the system running
08:38 - properly but this is how you actually
08:41 - look at all the databases that are on
08:42 - the system all right so now that we know
08:44 - how to look at the databases that are
08:46 - currently on the system I wanted to show
08:47 - you guys how to create a database cuz
08:50 - this is like one of the most important
08:52 - steps after that because we need to
08:55 - understand how to create those databases
08:57 - so all we have to do is type create and
08:59 - a lot of these commands you'll you'll
09:01 - start remembering them almost like a
09:03 - sentence cuz that's essentially what it
09:05 - is like show databases simple you know
09:09 - create database so we want to create a
09:12 - database and that's the command right
09:14 - there so create database with no s cuz
09:16 - it's singular you know so no s is needed
09:19 - and then the database name so we can
09:21 - name it whatever we want to I'm going
09:23 - just do DB name and then put a semicolon
09:26 - at the end of it and go down and press
09:27 - and it'll create our database as you can
09:29 - see query okay one row affected so and
09:33 - what row they're talking about is the
09:35 - built-in table that list out all the
09:37 - databases that are in the database
09:39 - management system so we can go back and
09:41 - look at that show database command show
09:44 - databases command and we'll see that
09:47 - that new database is there is called DB
09:50 - name that's what we named it now
09:51 - probably the next question you have is
09:53 - how do I create tables within the
09:55 - database that we just created and I need
09:57 - to show you another C command beforehand
10:00 - and you need to specify the database you
10:02 - want to run queries against by using the
10:05 - use command so like I said almost like a
10:07 - sentence you just type use and we want
10:10 - to use a specific database and which
10:12 - database we want to use is that DB name
10:15 - and then you can end out your sentence
10:16 - with the semicolon and press enter and
10:18 - this will make a change so that we are
10:21 - using database name for the following
10:23 - commands and you need to do that every
10:25 - single time so my SQL will know what
10:28 - database you're creating things with or
10:31 - even running other queries like select
10:33 - or update it needs to know what database
10:35 - is working with so you have to use this
10:37 - command in order to change it to the
10:39 - database that you want to work with and
10:41 - now I'm going to show you guys how to
10:42 - create a table and like I said it's
10:44 - almost like a sentence so create table
10:47 - and then we want to create a table name
10:49 - so we have to name that table so I'm
10:51 - going just name it employees now this is
10:53 - a little bit more complicated because it
10:55 - requires multiple lines so after this we
10:57 - have to specify each one of the columns
11:00 - within that table and you can press
11:01 - enter in here and that's why it's
11:04 - important to understand the purpose of
11:06 - that semicolon that closes out your
11:08 - query until you type that semicolon it
11:10 - will not close out the query so let's go
11:12 - down and press enter boom and as you can
11:14 - see it'll go to the next line allowing
11:16 - you to type some more information and we
11:18 - want to go through and create each one
11:19 - of the columns within our database and
11:21 - so the first one is
11:23 - employee ID a lot of times when you
11:26 - create a table you want to create what
11:28 - they call a primary key and this is a
11:31 - unique identifier for each row of data
11:35 - within the database and that just keeps
11:36 - things a little bit more cleaner in the
11:38 - database as well as a way to make sure
11:41 - we don't have any duplicate information
11:43 - and if the information is duplicate in
11:45 - other columns it will still recognize it
11:48 - as a different record so the next thing
11:51 - we want to use is integer so this is an
11:53 - integer meaning a number so and then
11:57 - also with our primary key there's an
11:59 - option you can put here called
12:00 - autoincrement and this will allow it to
12:03 - create numbers in sequence so 1 2 3 4 5
12:06 - 6 7 89 10 it will you know keep going as
12:10 - new records are added to the database or
12:12 - to the table and so let's type that in
12:14 - right fast so autocore increment and
12:17 - then also this is a primary so we have
12:20 - to type that out as well and then we
12:21 - have to put a Comm at the end of it
12:23 - that'll let us know that that is one of
12:25 - the columns within our table and then we
12:27 - can press enter and we can type in our
12:29 - next column and let's start off with
12:31 - first name and just like the init we
12:33 - have to specify what type of characters
12:36 - are in it the init is integer like I
12:38 - said that's a number well this is a
12:40 - variable you know all those letters and
12:43 - so we have to type V chore and then we
12:45 - can specify the amount of characters
12:47 - that you can type within that and so the
12:50 - default is like 255 you'll see a lot of
12:53 - people put 255 so that's a good length
12:56 - for the amount of characters that can be
12:58 - put into it and then we can also specify
13:01 - that this column should always have
13:03 - information in it you don't you can't
13:05 - create another row unless information is
13:08 - in that field within that column so
13:11 - let's go type not null and that's what
13:14 - that mean null meaning not empty or
13:16 - blank and so we can type a comma at the
13:18 - end of it and let's go on and type in
13:21 - our next column which I go with lastore
13:24 - name and then same thing so V chore and
13:27 - then 255
13:29 - and we can close that out and then not
13:31 - all as well for that one hit a comma and
13:34 - let's do one more and that'll be the
13:36 - birth date of our employee so that's
13:39 - just some information we want to put in
13:41 - there for this table or require for this
13:43 - table and then we can put dates and then
13:45 - we could leave it not and all off
13:47 - because we don't need the birthday I'm
13:49 - going just I'm just showing you guys
13:51 - that and then once it's the last one you
13:52 - don't have to put a comma at the end of
13:54 - it but we do have to press enter and
13:56 - close out these parentheses if you open
13:58 - a parentheses you need to close it so
14:00 - let's go on and close it right fast and
14:03 - then what is the last thing I'm sure you
14:05 - guys remember but is the semicolon that
14:08 - will close out your query and so all of
14:10 - this information here it will create
14:12 - each one of the columns within that
14:14 - table so it'll create the table and then
14:17 - it'll create all the columns within that
14:19 - table here so let's go and press enter
14:22 - and as long as you see query okay zero
14:24 - rows affected that means it successfully
14:27 - created that table and so now we have
14:29 - that employees table within the database
14:31 - we can check the structure of it to
14:33 - verify that we typed it in correctly by
14:36 - using the describe commands so let's go
14:38 - on and type describe and then our table
14:42 - so it is the employees table and of
14:45 - course at the end of each statement you
14:46 - have to put that semicolon at the end of
14:48 - it and this will give you information
14:50 - about this table so as you can see the
14:53 - fills we got our fills our different
14:55 - columns within the table and we got
14:56 - employee ID then it's uh integer and
14:59 - then null and then this is the primary
15:02 - key and then also this is auto increment
15:04 - you'll see that listed there and this
15:06 - will break down basically the structure
15:08 - of this table so this is what that
15:10 - describe is for now I won't go into
15:12 - adding data yet but I'll show you guys
15:15 - how to drop this table and with my SQL
15:18 - or with SQL the actual language that
15:20 - we're using drop is actually how you
15:23 - delete something within the database so
15:26 - let's say we want to drop that employees
15:28 - table that we just created so all we
15:30 - have to do is type drop and then we want
15:31 - to specify that we want to drop a table
15:34 - and then the table name so like I said
15:36 - employees and then type a semicolon at
15:39 - the end and this will drop that table
15:41 - and I forgot before I drop that table I
15:43 - wanted to show you guys something now so
15:45 - I'm going just press uh up arrow and
15:47 - find that create table employees table
15:50 - and I'm going bring it back right fast
15:51 - so let's press enter and of course
15:53 - that's one way of showing you guys you
15:55 - could type this out without the separate
15:57 - lines it's just easier to see if you put
16:00 - it on a separate line you see what I'm
16:02 - saying but you could type it out just
16:03 - like that the way it's listed there so I
16:05 - wanted to show you guys the show tables
16:07 - command and let's go on and type that in
16:09 - so show tables and like I said we're
16:12 - still using that DB name database and so
16:15 - let's go on and press enter boom and
16:17 - that will show you the actual table
16:19 - that's there and now let's go back and
16:21 - remove that table I'm going to drop it
16:23 - again so drop table employees boom and
16:26 - then we can run that show tables again
16:28 - and this will show you that there are no
16:30 - more tables on there so I didn't want to
16:33 - move forward without showing you guys
16:34 - that now the last thing I want to show
16:36 - you guys is how to actually drop a
16:38 - database and essentially that's deleting
16:40 - the entire database just like we deleted
16:43 - the entire table we can delete the
16:45 - entire database so let's go on and type
16:47 - that command in right fast but it's
16:49 - simply drop and then database and like I
16:51 - said it's just like a sentence and then
16:53 - we need to specify that database name so
16:56 - DB name and then semic at the end of it
16:59 - press enter and that will drop that
17:01 - database and now we can type show
17:04 - databases and then the semicolon at the
17:06 - end of it and press enter and this will
17:09 - let you verify that that name database
17:11 - is gone so you won't see it anymore so
17:14 - we get to go now be very cautious when
17:16 - running that command because it will
17:18 - remove all tables and data within that
17:22 - database so just be very careful with it
17:24 - okay so moving on to the next part of
17:26 - the course we need to have a database
17:29 - with lots of data so you can see
17:31 - examples clearly and I'm going to import
17:34 - a test database name to inlo and this is
17:37 - on GitHub and let me switch over to my
17:39 - browser so you guys can see the link and
17:42 - if you want to do the same you can find
17:45 - a link in the description to import the
17:48 - database and this database was created
17:50 - by bik base on GitHub and like I said
17:52 - I'll have the link so you can get here
17:55 - but let me just show you guys the
17:57 - directory structure so so they have a
17:59 - MySQL dump that you can import and this
18:02 - will generate a full SQL database for
18:05 - you it's called the employees database
18:06 - so if we go under MySQL you can see they
18:09 - have a postgress as well if you need a
18:11 - PO example but MySQL is what we'll be
18:13 - using and they have a data full or a
18:16 - data set full data set large data set
18:19 - small in the full we'll have the full
18:21 - amount of data which is the one I
18:23 - recommend you guys use they also have a
18:25 - large which is a smaller version of the
18:27 - f doesn't have as much data in it and
18:30 - then the small is kind of like a sample
18:33 - size of the data so you can use that as
18:35 - well it really doesn't matter just pick
18:37 - which one you want I'll import the data
18:39 - set full essentially what we're going to
18:41 - do is install this data dump it's a SQL
18:44 - dump and I'll get to this in a later
18:46 - part of the video where I show you guys
18:47 - how to back up databases and import
18:50 - databases or restore databases but this
18:53 - is the five whee import and let me go
18:55 - down and go here first and what I want
18:57 - to do is clone this repository to the
18:59 - server so we're going to copy that link
19:01 - and then go back to our Ser server
19:03 - terminal and exit out of my SQL so we
19:06 - could just type exit and this is a good
19:08 - time for me to show you guys how to exit
19:09 - you could just type exit and press enter
19:11 - and it'll get you out of my squel and
19:14 - and now that we back at the terminal we
19:15 - can go down and install get cuz we need
19:17 - get installed so we can just type P sudo
19:19 - dnf install and then get and press enter
19:23 - type in our Pudo password boom and it'll
19:26 - go through install G as well as all this
19:28 - dependencies and we type why for yes
19:31 - boom now go on and install get on our
19:34 - system and now we can get clone that
19:35 - actual repository and we don't need to
19:38 - change directories we can use our home
19:40 - directory and so all we have to do is
19:42 - type get clone and then we can paste
19:45 - that link and press enter and it'll
19:47 - clone down that actual repository for us
19:49 - and now we can import this test database
19:51 - so first thing you need to do let's LS
19:53 - right fast I show you guys the directory
19:56 - but we need to CD into that directory
19:58 - and we want to go
20:00 - into my SQL and then we need to go into
20:03 - the directory of the location of the
20:05 - size of the database that you want to in
20:07 - install so let's T it out right fast but
20:10 - there is that full like I said so that's
20:13 - the directory we need to go into now if
20:14 - you want to go into the other ones you
20:16 - just select large or the small one as
20:19 - well you can select that one as well
20:21 - like I said I'm going to do the full
20:22 - boom press enter and if we LS this
20:24 - directory this will show you all the
20:26 - files that are in there and it's so
20:28 - allow you to see the file that we want
20:30 - to import and we need to use Pudo cuz
20:33 - we're running MySQL under a regular
20:35 - account which is that Josh account so we
20:37 - get sudo my SQL and then what we want to
20:39 - do is use the left arrow and then the
20:42 - actual SQL file that we want to import
20:44 - or the database that we want to import
20:45 - which is that
20:46 - employees. SQL file so scroll on press
20:49 - enter this will take a little time
20:51 - because the full is pretty big it has
20:54 - about 300,000 records in at least in the
20:57 - employee table and so it does take a
21:00 - while let me go down and press enter
21:01 - we're going to need this in order so I
21:03 - can show you guys this information in a
21:05 - better way as far as running the queries
21:08 - and the different things I want to show
21:10 - you guys in the examples it's best to
21:12 - have a database with a lot of data in it
21:14 - and this is the quickest and easiest way
21:16 - to set that up and like I said this see
21:18 - that table right there it says loading
21:20 - employee that's the biggest table that's
21:22 - in there and it's going to take a while
21:24 - to actually import everything so I'll be
21:26 - back when it finishes and then we can
21:27 - log back in Sequel and go through the
21:30 - more of the examples all right so the
21:32 - import completed successfully it took
21:34 - about 3 minutes and 57 seconds and so
21:36 - let me show you guys how to test it
21:37 - right fast I'm going LS this directory
21:39 - again so you guys can see but there is a
21:41 - test file in here it's a md5 hash test
21:44 - so we can run this test by typing pseudo
21:47 - MySQL and then- T and we need to put our
21:50 - left arrow in there again and then that
21:53 - testore employee md5 SQL and that will
21:58 - test the actual database and just make
22:00 - sure everything was imported
22:01 - successfully on the server so just go on
22:04 - and run it right fast and it'll have
22:06 - some output you got you guys will see
22:08 - and as long as you don't see any errors
22:10 - that means everything was imported
22:12 - successfully all right so the test is
22:13 - complete and we can scroll through this
22:15 - and just see that it it just verifies
22:17 - that everything is okay so all the
22:19 - records match you know what's supposed
22:21 - to be imported when you run this thing
22:23 - and as you can see it took a while cuz
22:25 - this Server doesn't have many resources
22:27 - assigned to it it would have ran a
22:29 - little faster if I had more processing
22:31 - power and probably a little bit more RAM
22:33 - on the system but it's fine it ran
22:35 - through and did it it's not affecting
22:36 - you guys that's watching the video it's
22:38 - only affecting me cuz this is the
22:40 - computation time that it took all right
22:42 - so let's go on the CD right fast just to
22:45 - get out that directory we don't need to
22:46 - and I'm going to clear again and let's
22:48 - go on and get back in our my SQL
22:51 - database so typees sudo my SQL dasu for
22:54 - user and we want to go back into that
22:55 - root account and d p press enter it'll
22:58 - access for our shudo password boom and
23:02 - it'll access for the password for the
23:03 - rout and if you guys remember from
23:04 - earlier there is no password set for the
23:06 - root account so let's press enter
23:08 - that'll get us in MySQL and then what I
23:10 - wanted to do was show the databases so
23:12 - that same command we ran earlier so show
23:15 - databases semicolon at the end press
23:18 - enter and we'll see that new database is
23:21 - added to our server so we got the
23:22 - employees database so now we can move on
23:25 - to the rest of our examples of how to to
23:28 - manage my SQL all right so the next
23:30 - section I want to cover is managing user
23:34 - accounts in my SQL and this is a very
23:36 - important section because this basically
23:39 - manages how people access your MySQL
23:41 - server even applications how those
23:44 - applications connect to your MySQL
23:46 - server as well as the databases in it
23:48 - and so the first thing I want to do is
23:50 - show you guys how to create a new user
23:52 - account and this allows you to control
23:54 - who has access and can manage your
23:56 - databases and and and so it's not that
23:58 - difficult of a command and it's just
24:00 - like I talked about in previous commands
24:02 - it's almost like writing a sent and so
24:04 - all you got to do is type create and
24:06 - then user and then we have to put the
24:08 - user information in there so we have to
24:10 - put it in single quotes So the name
24:12 - first so let's just name this DB user
24:16 - and then after that quote we have to put
24:18 - an at because you have to say how you
24:20 - want this user to connect to the server
24:23 - and you put this in single quotes as
24:25 - well and this is considered the host
24:27 - name and most most of the time you will
24:28 - see Local Host which is what I'll use
24:31 - currently and that basically means that
24:33 - this user can connect to this my SQL
24:35 - Server via Local Host so you have to be
24:37 - connected to this server in order to
24:40 - access this my SQL database and then
24:43 - after that you want to give it a way to
24:45 - access the server and that is via a
24:48 - password so identifi so you have to type
24:51 - it in properly just make sure you type
24:52 - it in properly because I used to spell
24:54 - this incorrectly a lot of times and I
24:56 - ran into errors but it's identified by
25:00 - and then our password which I'll just
25:02 - put password to three and then close
25:06 - these single quotes and then after that
25:08 - for our SQL statement we have to close
25:10 - it out by typing a semicolon at the end
25:12 - of it and this will create our new user
25:15 - account as you can see long as you don't
25:16 - run into any errors it says query okay
25:18 - zero row is affected you're good to go
25:20 - you created that user account and like I
25:22 - said earlier this command sets up a user
25:25 - account with access limited to the local
25:28 - host meaning that the user can only
25:30 - connect to mySQL server from the same
25:33 - system where MySQL is running and I just
25:35 - wanted you guys understand that because
25:37 - if you want to Grant access from let's
25:39 - say another host and you have to replace
25:41 - that Local Host with the remote machine
25:44 - IP address so let's say you have an
25:46 - application running on a application
25:48 - server and you wanted that user account
25:50 - to connect from that application server
25:52 - cuz let's say this user account is what
25:55 - allows that application to connect to
25:57 - the my squ server you have to put that
25:59 - IP address of where it's connecting from
26:01 - otherwise it won't have access it'll
26:03 - just have access via Local Host like it
26:05 - states now there is a wild cord and the
26:08 - wild cord it will allow access from any
26:10 - host and let's go on and type it out
26:11 - again so create user and I'll create
26:14 - another user account so let's put it in
26:16 - single quotes So DB user 2 and this is a
26:20 - totally different account press the at
26:22 - symbol and then the host we wanted to be
26:24 - able to connect from I'll use that wild
26:27 - cord and wild cord is the percent sign
26:29 - and so that's uh shift five and then we
26:32 - have to close those single quotes and
26:34 - then next let's put identified by and
26:38 - then we put our password so I'm going to
26:40 - use that same password one two and then
26:42 - our single quote to close it out and
26:44 - then our semicolon to close that query
26:46 - out and let's press enter we going run
26:48 - into any issues we typed everything
26:50 - correctly and this is considered that
26:52 - wild cord now let's say you need to
26:54 - change the SQL user accounts password
26:57 - well let me walk you guys through that
26:59 - query right now and it's using the alter
27:02 - command and the way you do it is by
27:04 - typing alter user and like I said it's
27:06 - just like a sentence so alter user and
27:09 - let's say we want to alter that DB user
27:13 - that first one let's say we want to
27:14 - change it to and then we have to type it
27:16 - all out just make sure you type it all
27:18 - out Local Host then single quote and
27:20 - then identified so that's basically all
27:24 - all you doing is typing it out the exact
27:25 - same way we did to create that user but
27:27 - you're using alter so identify by and
27:30 - then we just type in a new password so
27:32 - let's go password 456 and let's close
27:36 - out those quotes and then the semicolon
27:39 - at the end of it and press enter and
27:41 - that will alter the password for it and
27:43 - like I said as long as you don't see any
27:44 - errors you get to go now another command
27:46 - I want to show you guys is how to list
27:48 - out all the MySQL user accounts and
27:51 - there are some built-in user accounts
27:52 - you obviously got that root one and you
27:54 - got a couple more and you guys will see
27:56 - them once I type in this next command so
27:58 - we're going into select statement so
28:00 - select user and then comma host and
28:03 - basically we're selecting two columns
28:06 - within a specific table and this is from
28:08 - the MySQL do user table so let's go on
28:13 - and uh put that cic colon at the end
28:15 - press enter and it'll grab those two
28:17 - columns for us and as you can see we can
28:19 - see all our accounts that we created
28:22 - even the new ones that we just created
28:23 - so DB user is only accessible via the
28:26 - Local Host and DB user 2 has that wild
28:29 - card there and just to show you guys the
28:31 - other accounts that are there so my.
28:33 - infos schema I don't recommend you mess
28:35 - around with any of these Accounts at
28:37 - least until you understand fully what
28:39 - they do but these three accounts are
28:41 - systems accounts and then we got our
28:43 - root account as well which we're logged
28:45 - in using that now the next step is
28:47 - deleting those user accounts so let's
28:50 - say we want to delete the DB user
28:52 - account so it's the same as with tables
28:56 - and databases is the drop command and so
28:59 - drop user and then the user account so
29:02 - we have to put that in single quotes and
29:04 - it's just like when we created it the
29:05 - exact same format so DB user and let me
29:09 - move the cursor out the way and then
29:10 - close out that single quote then at and
29:13 - then open up a single quote let me close
29:15 - it right fast I always do that that's
29:17 - just a habit but Local Host and then we
29:19 - go back to the end and type that semi
29:21 - colon at the end and press enter and
29:23 - that will drop that so let's press the
29:25 - up arrow and go back in here and select
29:27 - those user accounts right fast from that
29:30 - MySQL users table and you'll see that
29:32 - that DB user is gone from the system now
29:35 - let's test out this user account that we
29:37 - still have available on the server and
29:39 - so what I'm going to do is type exit
29:40 - that'll get us out of that roote account
29:42 - and let's run the MySQL command but
29:45 - let's log in using the DB user 2 account
29:50 - and so you basically type it in just
29:52 - like we typed in for roots press enter
29:54 - and then type in our pseudo password for
29:56 - our Josh accounts just make sure you
29:59 - understand that it's going to ask you
30:00 - that for that password twice let's go
30:02 - down and press enter and then now it's
30:04 - going to ask you for the DB user 2
30:07 - password which we set when we created
30:09 - the account and that password was
30:11 - password with a capital P and then 1 2 3
30:14 - and press enter and that allow us to log
30:17 - into my so now let me show you guys some
30:18 - of the differences because right now
30:20 - this account doesn't have any
30:22 - permissions to any databases on the
30:24 - server so let's run show databases and
30:27 - then semicolon at the end and you guys
30:30 - should see the difference we only see
30:32 - two databases and these are the schema
30:34 - databases that are built into my SQL and
30:37 - so that lets you know that this user
30:40 - account doesn't have access to any of
30:42 - the databases on there and so I want to
30:44 - go into the grant section of managing
30:47 - these user accounts so let's go on and
30:49 - exit out because we need to add some
30:51 - permissions to this account so they can
30:53 - actually see the databases or do certain
30:55 - things to the database like select
30:57 - statements and all that good stuff so
30:59 - let's go on log back in using our root
31:01 - accounts type in our password which is
31:04 - nothing and let's go on and show that
31:06 - those user accounts again on the system
31:08 - so select user and then host at that my
31:11 - SQL do user database that way we can
31:13 - have a reference when we're typing
31:14 - everything out so what we want to do is
31:16 - Grant privileges to that user account so
31:19 - all we have to do is type Grant and
31:21 - there's a whole bunch of privileges that
31:23 - could be set for a user account there's
31:26 - all privileges you can set certain
31:28 - things like alter they can only alter a
31:31 - specific table they can create tables
31:33 - create databases that's to create
31:35 - privileges but what I'm going to do is
31:37 - just do all privileges just show you
31:39 - guys the base level of actually giving
31:42 - an account and actually that's not the
31:44 - base level I recommend you give the
31:46 - least access that a user needs so if
31:48 - they only need access to a specific
31:51 - database and they only need to let's say
31:53 - select certain things then you want to
31:55 - just give it select permissions you
31:56 - don't want want to give it a all
31:58 - privileges if it doesn't need it for
32:00 - that account but like I said I'm going
32:02 - to just do all privileges just to make
32:04 - it simple just so you guys can see but I
32:06 - recommend you guys look at all the
32:07 - different types of privileges so you can
32:10 - understand them and give the least
32:11 - privileges needed for the account so
32:14 - privilege and make sure you type it in
32:15 - right but that's Privileges and let's
32:17 - say we only want to give them access to
32:20 - a specific database well you put on that
32:23 - database name and we'll use that
32:25 - employee database it's employees and you
32:28 - want to give it access to all the tables
32:30 - so you just put a period and then the
32:31 - store at the end of it that's like a
32:33 - wild cord for all the tables under that
32:35 - database and now we have to put in the
32:37 - user account we want to apply this to so
32:40 - that's why I say it's like a sentence
32:41 - you know what I'm saying Grant all
32:42 - privileges on this database all tables
32:46 - to the user account and so that user
32:48 - account is the DB user 2 and then at the
32:53 - single quote and then wild cord single
32:55 - quotes and then our semiot in and press
32:58 - enter and it will grant those privileges
33:00 - now let's go on exit out again cuz I I
33:03 - just want to show you guys but if we log
33:05 - back in under that user account that we
33:07 - created so password 1 2 3 Center skip
33:11 - back in it and let's run that show
33:13 - databases command and see me coling at
33:15 - the end press enter as you can see we
33:17 - now have access to that employees
33:19 - database let's go on exit out and get
33:21 - back into our root account but I just
33:23 - want to show you guys that's how you
33:24 - grant those privileges now let's say you
33:26 - want to Grant all priv is on all
33:27 - databases let me go back up here to that
33:30 - and all you have to do is put in a wild
33:32 - cord so the wild cord in front of the
33:34 - period and that specifies all databases
33:37 - and all tables under each one of those
33:39 - databases and so we got all those
33:41 - permissions now so we can exit out and
33:43 - then log back into that account and type
33:45 - in our password again and press enter
33:48 - and then let's show databases and this
33:50 - is something you definitely don't want
33:52 - to do I just want to show you guys that
33:53 - you can do it you see how you can see
33:55 - the other SQL database on here like
33:57 - before we couldn't see my SQL or that
34:00 - CIS database now we have access to see
34:02 - pretty much all databases and all tables
34:05 - and let's exit out go back into our root
34:07 - accounts boom and it doesn't make sense
34:09 - to go through everything so I'll just
34:11 - show you guys a few other things let's
34:12 - say you wanted to go employee database
34:17 - and I know one of the specific tables in
34:19 - there is department and so employee
34:22 - Department you only want this user to
34:24 - have access to just that database with
34:26 - that table
34:27 - you only want that user to have access
34:29 - to that specific thing like I said you
34:32 - can narrow this down you know deep so
34:35 - people only have or user accounts only
34:37 - have access to specific ports of a
34:40 - database this can be accomplished by
34:41 - typing out the commands like this and
34:43 - then I won't run this I'll just go back
34:45 - in let's put a store in there cuz I
34:47 - wanted to show you guys something else
34:48 - but let's say you instead of graning all
34:51 - privileges to This Server we can go back
34:53 - in here remove those privileges and we
34:55 - can add a whole bunch of other
34:57 - privileges so we could just do select
35:00 - let's say you want to do a insert and
35:02 - then you can also put like delete and
35:04 - then on you know this database and all
35:07 - tables so you can narrow down like I
35:10 - said even more with this grant command
35:13 - and let me just go to run that and just
35:15 - see what happens and let's actually exit
35:17 - it out I want to see what it looks like
35:19 - uh when we go over there boom I want to
35:21 - see if it removed all the other
35:22 - privileges so let's log in and then run
35:26 - these
35:27 - databases and semicolon boom and we can
35:30 - see all the table so it still has those
35:33 - permissions for all the databases so you
35:35 - might want to run a revoke before that
35:37 - and then run it so it specifies okay
35:40 - that makes sense so it still has that
35:42 - those settings still there for all
35:44 - privileges all tables so let's exit out
35:46 - and now let's walk through how to revoke
35:50 - permissions so this is an important part
35:53 - you want to revoke permissions or at
35:55 - least understand how to revoke voke all
35:57 - privileges for a specific user and we'll
36:00 - go through and do that for this account
36:02 - and let's go back in here and select all
36:04 - the user accounts I always like to do
36:06 - that so I can have a reference when I'm
36:08 - typing out things so I don't mess up
36:09 - misspell certain things but the command
36:11 - is revoke and revoke all privileges on
36:15 - and I'm going actually put store there
36:16 - as for all databases and then period all
36:19 - tables and then from that specific
36:22 - account which is our DB and forgot about
36:24 - our quotes but yeah single quotes in
36:26 - there make sure you type that in and
36:28 - then this this one has the wild cord on
36:30 - the end of it so we'll type it out
36:31 - exactly how it is up there so from that
36:34 - user account on this server so let's go
36:36 - on and press enter and we forgot about
36:38 - our semicolon so if you do forget about
36:40 - it it'll bring it up on a second line
36:42 - you can just type in the semicolon press
36:44 - enter and it run the query and so let's
36:46 - exit out again I know I keep jumping
36:48 - back and forth but I just want to verify
36:50 - a lot of this stuff and that I'm showing
36:52 - you guys the right thing and I want you
36:54 - guys to follow along so you can get used
36:56 - to it cuz once you start typing these
36:57 - commands out you get the hang of it you
36:59 - know fairly quickly so let's go on and
37:02 - type out our show databases again and
37:04 - then put that semic colon at the end
37:06 - boom you'll see we don't have access to
37:08 - any of the databases on the server and
37:10 - then let's exit out and what I want to
37:12 - do is show you guys something else after
37:14 - this let's log back in our root account
37:16 - and Grant some privileges again and I
37:19 - want to get real specific with this
37:21 - account and that way the next command I
37:23 - show you guys will make a lot more sense
37:26 - and so let's grants and then select and
37:28 - let's also do that insert as well and
37:31 - then the delete on the employees
37:35 - database and let's get that departments
37:37 - table within that database and it's not
37:40 - a s now that I think about it it's not a
37:42 - s and then let's hpe two and then our
37:44 - user account which is that that DB user
37:47 - to and then at then a wild card and then
37:50 - the see me coling at the end and press
37:52 - enter and it'll Grant those specific
37:55 - permissions for that user account and
37:57 - now let me show you guys the last
37:59 - command which is the show grants so we
38:01 - can show all the grants that we have for
38:04 - a specific user so and let type it in
38:07 - correctly and we have to type in that
38:08 - user account the exact same way so DB
38:10 - user 2 and then at our wild cord and
38:14 - then the semicolon at the end and press
38:16 - enter and this will show you the
38:18 - specific permissions that this user has
38:20 - and as you can see it has Grant select
38:22 - insert delete on the employees database
38:26 - and then the departments table for that
38:29 - user so it's very specific you can get
38:31 - very specific with these privileges now
38:34 - this next section we'll be diving into
38:35 - queries and this is where that employees
38:38 - database will come into effect and I'll
38:40 - show you guys different types of queries
38:43 - throughout the demonstration so first
38:45 - thing we need to do is Select that
38:46 - database that we want to use so first
38:48 - off let's show our databases and I just
38:50 - want to get you guys in the habit of
38:52 - actually doing this but show databases
38:55 - semicolon at the end press enter that
38:57 - will show us all our databases that we
38:59 - have on the server and what we're
39:00 - looking for is that employees database
39:02 - and that's the one we want to select by
39:05 - using the use command so use and then
39:07 - the database name so employee and then
39:09 - let's put a semicolon at the end press
39:11 - enter and now our database has been
39:13 - changed to the employees database that's
39:16 - the one we are currently using now the
39:18 - core of quering data is the select
39:20 - statement and it retrieves data from
39:23 - tables and you can customize what you
39:25 - want to see now first first off we need
39:27 - to find out what the tables are in the
39:29 - database and we can go back to that
39:31 - command that says show tables and then
39:34 - semicolon at the end press enter and it
39:36 - will show us all the tables within the
39:38 - employees database and now let me show
39:40 - you guys the basic structure of the
39:42 - select statement and all we have to do
39:44 - is type select and then we'll start off
39:46 - with store which is for everything is
39:48 - pretty much the wild cord for all
39:51 - columns within the table and then we
39:52 - want to specify that table so from a
39:55 - specific table so we can pick one in
39:57 - here let's start with the Departments
39:59 - table and then put a semicolon at the
40:01 - end press enter and that will list out
40:03 - all the data within that table and you
40:05 - can do this for each table within the
40:07 - database and so let's look up here we
40:09 - have another table and I'll start with
40:11 - the employees one as well so there's the
40:13 - employee table as well so let's run that
40:16 - select from but instead of selecting the
40:19 - department let's look at the employees
40:21 - and let's put a semicolon at the end
40:23 - press enter and you'll see it'll pull up
40:25 - a lot of data this table has about
40:28 - 500,000 records within this one table
40:32 - and that's representative of all the
40:34 - employees within this organization and
40:36 - so that select statement will pull
40:38 - everything with that store wild cord in
40:41 - there in the select statement now let's
40:43 - say we want to look at the first 10 rows
40:46 - of this table well we can limit the
40:49 - results that are put in front of us by
40:51 - using the limit Clause within our select
40:54 - statement so we can go to the end of
40:56 - this select statement and we can limit
40:58 - the results to let's say 20 we only want
41:01 - to see the first 20 records so we can go
41:04 - down and press enter and this will limit
41:06 - the results and you'll see that we only
41:08 - have 20 rows pulled and like I said this
41:11 - is just a way of limiting it really for
41:13 - you guys that are watching this video so
41:15 - you guys can see less data on the screen
41:18 - now let's work on work on these columns
41:20 - let's say we only want to see specific
41:22 - columns so certain data we only need for
41:25 - whatever we're running this select
41:27 - statement for and so let's go through
41:29 - and let's hit the up arrow and I'll be
41:31 - using the up Arrow a lot and this allows
41:33 - me to run previous queries but let's say
41:35 - we don't want to pull all those columns
41:39 - like I said you can specify specific
41:41 - columns so let's say we only want to
41:42 - look at the employee number and the
41:45 - first name and the last name so we can
41:47 - type
41:49 - empore number and then we put a comma
41:52 - behind it and then first uncore name and
41:55 - then let's let look at the last name as
41:58 - well so lastore name and then we can
42:00 - press enter we don't have to put a comma
42:02 - after that that is the last column that
42:04 - we want to pull and also let's change
42:06 - the limit as well so I can show you guys
42:09 - the information right on the table so it
42:10 - doesn't pull in too much too much more
42:12 - information let's go down hit 10 and
42:14 - press enter and boom as you can see it
42:16 - only pulls in those particular columns
42:19 - that we specified in our select
42:21 - statement so employee number first name
42:24 - last name and there you go within the
42:25 - table so employee number first name last
42:27 - name boom now one other thing with the
42:30 - select statement you can pull in this
42:32 - information in whatever order you want
42:34 - to and what I mean by that is the
42:36 - columns let's say we don't want to see
42:38 - the we want to see the employee ID after
42:41 - our first name and last name so let's go
42:43 - back to the end of it put a comma and
42:46 - let's pull in that employee number and
42:49 - let's pull it in that order we want to
42:51 - see first name last name or actually
42:53 - let's do it a little bit different as
42:55 - well we can do first name name right
42:56 - here so let's put a space and go first
43:00 - underscore name and then put that comma
43:02 - there and then let's remove the first
43:04 - name up here at the front and we want to
43:06 - pull last name first name and then
43:08 - employee number so let's go on and press
43:11 - enter and as you can see it'll put it in
43:13 - that order for us so last name first
43:15 - name and then employee number at the end
43:17 - now let's say we want to filter the data
43:20 - and I don't know how many results will
43:22 - come up let's say if I select a specific
43:25 - name so I'm going just select one just
43:26 - to see and I want to see how many
43:28 - employees have this same last name so
43:30 - bam Ford and I know this is a fake name
43:33 - but there is a way of filtering and this
43:35 - is using the wear clause in our query so
43:38 - we can up arrow and then let's go back
43:40 - in here and put the store let's remove
43:43 - the columns put the store in there for
43:45 - the wild cord from employees and then
43:48 - where we want to type the wear claw in
43:49 - there so let's take this limit off we
43:51 - I'm not going to use it I'm going to see
43:53 - what pulls up but where the last name
43:56 - underscore and we need to put a equal
43:58 - sign in it because we're searching for
43:59 - something specific so we're searching
44:01 - for the last name to be a specific
44:04 - variable and so let's put it in quotes
44:07 - and let's uh paste it in there right
44:09 - fast I don't think you guys can see that
44:11 - but bam forward we want to look for
44:13 - people with the last name of bam for
44:15 - within the employees table so let's go
44:17 - on and press enter and see how many
44:19 - results we get and we get a whole bunch
44:21 - of results so it's 178 rows that have
44:25 - that meet criteria and that's
44:27 - essentially how you filter using the
44:30 - wear claw and then we can filter this
44:32 - down even more let's say we want to look
44:35 - for all the females that have the last
44:37 - name banford so let's put the up Arrow
44:41 - up there and then after the banord we
44:43 - could put another clause which is and so
44:46 - and the gender equals and thenone want
44:49 - to specify female so let's put it in a
44:52 - single quote as well so with a capital f
44:54 - and boom we are good to go let's see see
44:56 - what it pulls up and it pulls up
44:58 - everybody that has the last name of
45:00 - banford with the gender of female so
45:04 - that's super cool and then you could
45:06 - specify that query you know columns if
45:09 - you want to you can go in here and pull
45:11 - in the last name and then the first name
45:14 - and then the gender and then let's go
45:16 - down and pull in an employee number as
45:18 - well so and let's go down press enter
45:21 - and boom it'll pull in just those four
45:23 - columns that we wanted as well as
45:24 - searching for that specific criteria so
45:27 - we got our last name of B of bonford and
45:30 - then all female employees with all the
45:32 - columns re requested to see and then you
45:35 - can modify it you can change this to
45:37 - let's say male we want to see all the
45:38 - male employees like that and as you can
45:40 - see it pulls in you know specifically
45:43 - males for this these results and it's
45:46 - 103 males versus 75 you know females so
45:50 - let me show you guys another option you
45:52 - can run with the select statement and
45:54 - that is the order buy and first off let
45:57 - me run a normal select so nor select
46:01 - store from the employee table and
46:04 - semicolon at the end press enter and I
46:06 - will pull in all the information and
46:08 - what I wanted to do is look at this
46:09 - column right here this is the actual
46:11 - hire date of the employee so let's say
46:13 - we want to order the results by that
46:16 - hire date and let's look at the oldest
46:19 - employee up to the newest employee and
46:22 - so let's run and select again but let's
46:24 - limit it to just 10 and I'm only doing
46:27 - that so you guys can see a little
46:28 - clearer so that shows pretty much the
46:31 - first 10 records or the first 10 results
46:34 - and their hire date and like I said I
46:36 - want to show you guys the order by
46:38 - clause and so we can type that select
46:41 - store from employees I'm going to leave
46:43 - that limit there but the other option is
46:46 - order by and it's two words and what we
46:49 - want to order it by is the column so
46:51 - that's the hire date so let type
46:54 - hore dates and and press enter and as
46:57 - you can see it'll pull up the oldest
46:59 - dates and so that's
47:00 - 1985 January 1st and it goes up from
47:04 - there so these are our oldest employees
47:06 - and the reason we know it's going up
47:07 - because the next employee on a different
47:10 - date that was hired is January 14th so
47:13 - 1985 so it'll go up from there and I
47:15 - don't want to I just want to limit the
47:17 - results so you guys can kind of see it
47:19 - in that order and you can order it by a
47:21 - specific column A lot of times you want
47:23 - to look for that and then also so you
47:25 - can do the exact same thing for this
47:27 - this is another date column but there is
47:29 - a birth date and so we can change that
47:32 - up and not use the higher date but
47:34 - instead of that let's look at the birth
47:36 - dates and this could be for let's say HR
47:40 - purposes or something to that effect
47:42 - let's say you want to look at the birth
47:43 - date of all your employees for whatever
47:45 - reason you can order you know all the
47:48 - results by those dates and then you can
47:50 - also throw your filtering in there with
47:52 - the wear claw so go on press enter boom
47:55 - and as you can see that's our oldest
47:57 - employee right there or a couple of our
47:59 - oldest employees right here that have
48:01 - the same birth date which is February
48:03 - 1st of 195 is what what's that about six
48:07 - employees that have that same birth date
48:10 - and so this is a good reason to show you
48:12 - guys another way of filtering by using
48:14 - that wear clause and let's say we were
48:16 - looking for all the people with a birth
48:17 - date but in just the year of 1950 so we
48:21 - can go through and just search for
48:23 - specific people with a birth date of of
48:26 - 1952 and let me show you guys that break
48:28 - out this order by let's remove it and
48:31 - let's use our wear claw so let's go wear
48:33 - the birth dates uncore and there's
48:36 - another clause in there you can put and
48:38 - that's like and this allows you to
48:41 - search for text that match but also have
48:44 - different things either in front of it
48:46 - or behind it and what we're looking for
48:48 - is that year two and so we have to put
48:50 - it in single quotes so single quotes and
48:53 - then there is a wild cord of the percent
48:55 - sign so anything before which it doesn't
48:58 - have anything before we really don't
48:59 - need to put that there I just wanted to
49:01 - put it there so you guys can see but's
49:03 - say it put that wild cord at the end of
49:05 - it so anything after that as well and
49:08 - then the quotes at the end of it to
49:10 - close it out and let's go on and press
49:12 - enter boom and that'll pull in all the
49:16 - employees with a birth date in within
49:18 - two now let's explore how to add data to
49:21 - a table and first off let's show the
49:23 - tables again right fast so let's go show
49:26 - tables semicolon press enter and what I
49:29 - want to do is look at the Departments
49:31 - table cuz that's the easiest one to work
49:33 - with when it comes to inserting data and
49:35 - let's run a select on the Departments
49:38 - table right fast select store from
49:41 - departments and then semicolon at the
49:43 - end press enter as you can see we only
49:46 - have a couple records so nine rows so
49:49 - let's say we want to add a new
49:51 - Department well to insert new data we
49:55 - have to use the insert into statement
49:58 - and so let me give you guys a quick
50:00 - example we can run through and type
50:02 - inserts into and then we want to insert
50:04 - it into the department table and then
50:06 - now we have to specify our columns so we
50:08 - have the department number and the
50:10 - department name so we need to put
50:12 - parentheses in here and this is to
50:14 - specify our columns so let's start off
50:16 - with the first one so department so
50:19 - dtore number and then put a comma after
50:23 - that and then a space and then the
50:24 - department name so D
50:26 - _ name and now that we have our columns
50:30 - selected where we want to insert data we
50:33 - have to type in the values that we want
50:35 - to put into each one of those columns
50:37 - for this new Ro that we're adding so
50:40 - values and then we have to put it in the
50:42 - same order as they're represented up
50:45 - here so our department number and
50:47 - Department name and we just put those
50:48 - values and we have to put them in a
50:50 - single quote so let's put the first one
50:53 - in which is our department number and as
50:55 - you you can see the next number is
50:57 - Department 10 so let's put D 010 and
51:01 - that's Department 10 and I know you guys
51:04 - can't tell but it's out of order but
51:06 - Department 9 is the highest one so I
51:09 - want to go with Department 10 that's how
51:10 - I figured that out but let's put a
51:12 - comment in here now let's add our
51:14 - department name and let's say this is
51:16 - the technology department so or
51:19 - information technology whatever you want
51:20 - to put in here you want to put it in
51:22 - quotes again sorry about that I didn't
51:24 - put the quote in but put it in quotes
51:27 - and then close out our parentheses
51:29 - anything you open you need to close and
51:31 - we close out that parenthesis and then
51:33 - put semicolon at the end and this will
51:35 - insert that data into the Departments
51:37 - table so let's go on and press enter
51:39 - boom query okay one row affected and now
51:43 - let's select from that department table
51:45 - again and you guys should see our new
51:48 - row which is our technology R so D 0000
51:52 - and that's thep the technology
51:54 - department now let's say we made a
51:56 - mistake while inserting that data into
51:59 - it well we can use another statement
52:01 - which is a update statement which will
52:04 - allow you to make changes to any of the
52:07 - data within the table and when you're
52:08 - building out this query you want to make
52:10 - sure you find some form of a unique
52:12 - identifier that's why majority of tables
52:14 - will have a primary key or some type of
52:18 - number that identifies that role
52:20 - especially if you don't want duplicates
52:22 - within the table and so our unique
52:24 - identifier is the deportment number
52:26 - because that's different per row that's
52:29 - in the table and so we'll use that as
52:31 - our wear Clause when we type out our
52:34 - update query so let's go on and break
52:35 - this out so let's type updates and what
52:38 - we want to update is something in our
52:40 - departments table so update department
52:44 - and let's say we want to change the
52:46 - technology to help Des so we have to
52:49 - type set and then Department name or the
52:52 - column that we're looking for which is
52:53 - that department name that we're changing
52:56 - so Deport uncore name and we want it to
53:00 - be so we can do equals and we put it in
53:02 - single quotes so let's say we want to
53:05 - change that to help Des so the help desk
53:07 - Department if you you know I'm just
53:09 - coming up with something but we need
53:11 - that unique identifier so where
53:13 - department number equals and we can put
53:16 - this in single quotes this is just
53:18 - basically to search for it but the
53:21 - d010 and then let's close it out with
53:23 - semicolon and then updates that
53:26 - department name where the department
53:28 - number is the 010 so scroll on and press
53:31 - enter and that should make changes to it
53:33 - so as you can see right there it says
53:35 - rows matched and then rows changed and
53:38 - no warnings as long as we don't see any
53:39 - warnings or errors we get to go so let's
53:42 - go down and select from that table again
53:44 - and as you can see we have a help desk
53:47 - department now and that's
53:49 - d010 now let's say we want to delete
53:51 - that row that help Des row we just
53:53 - created so there is a statement you can
53:56 - run and that is the delete statement so
53:58 - let's go on and type this out so delete
54:01 - and then we want to delete from the
54:02 - Department table so we have to type that
54:05 - out and then where the department and I
54:08 - already know what to use I'm going to
54:09 - use department number because that's our
54:10 - unique identifier and plus it's super
54:13 - short and specific as far as the
54:15 - department number and there's no other
54:18 - number like that so you can't make a
54:20 - mistake but department number equals and
54:23 - we use that exact same format so single
54:25 - quotes and then
54:28 - d010 and then put a semicolon at the end
54:31 - but that will delete that Row from the
54:33 - table so boom and as you see query okay
54:36 - and then we can go back in select from
54:38 - the Departments and you'll see that help
54:39 - desk is gone I know it's kind of hard to
54:41 - see because it's not ordered properly
54:43 - but yeah help desk is gone from this
54:45 - table so the next thing I want to cover
54:47 - is primary keys and foreign Keys now
54:50 - first off let me explain what a primary
54:52 - key is a primary key in my SQL is like a
54:56 - special idid for each row within the
54:59 - table it's a unique number or code that
55:02 - helps you identify and organize the data
55:05 - so if you think about it it's just like
55:06 - your fingerprint is unique to you a
55:09 - primary key ensures that each row within
55:12 - a table is different from the others and
55:15 - this makes it easier to find and manage
55:18 - information within a database and let me
55:20 - start off by showing you guys a primary
55:23 - key right fast which I showed you one
55:25 - earlier in the video when we created our
55:27 - first table but let's show you the
55:29 - primary key within one of the tables
55:31 - within this employees database that
55:33 - we're looking at now so let's start off
55:35 - with the employees one by running the
55:37 - describe command and this will basically
55:40 - give you the information about a
55:41 - particular table and let's type employee
55:44 - and then semicolon at the end press
55:46 - enter and like I said this will give you
55:48 - all the information about this table and
55:50 - as you can see right here under key this
55:52 - column right here it says Prime that
55:54 - stands for prime primary so our employee
55:56 - number is our primary key and typically
55:59 - the data type is integer and it's and
56:02 - pretty much a primary key is unique so
56:05 - this number is different for each row
56:08 - within the table now let's talk talk
56:10 - about a foreign key and a foreign key is
56:13 - like a bridge between two tables it
56:15 - helps one table understand information
56:18 - from another table so for instance this
56:20 - employees table and let's say the
56:22 - Department's table well a foreign key in
56:25 - the employees table links to the
56:27 - Department's table showing which
56:29 - department each employee belongs to and
56:31 - it's like a connection that keeps data
56:33 - organized and related between tables and
56:36 - what I want to do is create a foreign
56:38 - key using both of those tables and let's
56:41 - describe the Departments table right
56:43 - fast so you guys can see the information
56:45 - about that table as well and departments
56:48 - and then semic and press enter and it'll
56:50 - describe that table as well and as you
56:53 - can see the primary key is is the
56:55 - department number and so what we want to
56:57 - do is add the department key which is
57:00 - that primary key or the department
57:01 - number to this table and that way we can
57:04 - have a foreign key or a foreign
57:06 - connection between the department as
57:09 - well as the employees so each employee
57:11 - will know what department they work for
57:14 - and so this is a great example and the
57:15 - first thing we need to do is add another
57:17 - column here because you can't use a
57:20 - column any of the columns that are
57:21 - already there cuz they already have data
57:23 - in it so you need to add another col
57:24 - colum to this table and what I typically
57:26 - do when I'm adding a foreign key I'll
57:28 - use the same field name that way you
57:30 - don't get confused with it and so let's
57:32 - go down and alter this table so alter
57:35 - table and then we want to alter the
57:37 - employees table and what we want to do
57:40 - is add a column and I haven't showed you
57:42 - guys this yet but add column and then
57:44 - what we want to do is specify the column
57:45 - name so we want to add
57:48 - department number and then we have to
57:50 - tell the character type and that's why I
57:53 - described this table as well the
57:54 - apartment's table the apartment number
57:56 - is Char so characters and four
57:59 - characters so let's go down and put the
58:01 - exact same thing so chore and then in
58:04 - parentheses we can put the number four
58:07 - in there so four characters and let's go
58:09 - down and put a semicolon at the end of
58:11 - it and this will alter that table boom
58:13 - and we're good to go so query okay you
58:16 - know zero rows affected and then let's
58:18 - describe our employees table again let's
58:22 - go back in here and look at describe
58:24 - employee
58:25 - boom as you can see we have a new column
58:28 - in there it's that deportment numbers it
58:30 - has that same data type which is TR 4
58:32 - and I put in there uh yes I left it yes
58:35 - as it could be no and the default is no
58:38 - and now let's go down and alter our
58:40 - employees table in order to make that a
58:43 - foreign key and so let's walk through
58:44 - this we can type alter and then table
58:47 - and then the employee table and what we
58:49 - need to do is add a constraint and you
58:52 - can name the actual foreign key and
58:54 - that's what this line actually means so
58:57 - add constraint and let's name our
58:59 - foreign key let's name it uh foreign key
59:01 - let's see uncore departments underscore
59:05 - number and so I just give it something
59:06 - unique forign key so that FK and then
59:09 - underscore deportment number that's the
59:11 - name of our constraint and then let's
59:13 - press enter and then let's add our
59:15 - foreign key so let's go foreign key and
59:17 - then we have to specify that column
59:19 - within our table our employee table and
59:21 - that is the department uncore number and
59:25 - let's go down and close that out press
59:27 - enter and then we have to reference our
59:29 - forign key so the reference is going to
59:31 - be in our deportment table so we have to
59:34 - type references and then deportment and
59:37 - then specify that column as well which
59:39 - is basically the same so department
59:41 - uncore number and let's go down and
59:43 - close that out and then we put our CA
59:45 - colon at the end and let's press enter
59:47 - and it should add our forign key and as
59:49 - you can see that kind of took a little
59:50 - while it was about 53 seconds that it
59:53 - took almost a minute minute because of
59:55 - the 300,000 rows that it has to go
59:58 - through and basically it's just updating
60:00 - that column and marking it as a foreign
60:03 - key location now let's go to and run a
60:05 - quick select right fast so you guys can
60:07 - see that column in action so select
60:10 - store from our employee table and let's
60:14 - limit it to 10 cuz I don't want to see
60:17 - all those rows let's go on press enter
60:19 - boom and as you can see we have that
60:21 - department number column and then also
60:24 - let's describe that table as well so
60:26 - let's go in here and look at our
60:28 - employees table again under the describe
60:31 - and as you can see it is a foreign key
60:33 - and just to explain what this means
60:35 - right here it says Ma so that basically
60:38 - means multiple and this is our foreign
60:40 - key so that means that multiple
60:42 - occurrences of a given value are
60:44 - permitted within that column so that's
60:46 - essentially what that means now next
60:48 - I'll run a quick query and this is a
60:50 - update query it'll actually take me a
60:52 - while to actually run this because I'll
60:54 - do a update and what I'm doing is
60:56 - grabbing random deportment IDs and
60:59 - dropping it into our employees table
61:02 - under that new department number column
61:05 - and this is so I can next show you guys
61:07 - how to work with joins so you can follow
61:10 - along if you want to if you don't this
61:12 - will take some time depending on the
61:14 - resources on your server because it has
61:16 - to go through 300,000 rows and update
61:18 - them so what I want to do is update the
61:21 - employee and what we want to do is set
61:23 - that appartment number within that table
61:26 - and we want it to equal some information
61:28 - that we select basically and this is
61:31 - basically a nested query so to speak so
61:34 - I'm going to just throw this in there
61:35 - and that's to open up the parentheses
61:38 - for the other query and what I'm doing
61:40 - is a select and then we want to select
61:42 - that deportment number and what we want
61:44 - to select it from is the Departments
61:46 - table so let's press enter from
61:49 - Department table and we want to order it
61:51 - because there's other options like I
61:53 - said I didn't go too deep into a lot of
61:55 - these options but there are plenty of
61:57 - options out there I didn't want to it'll
61:59 - take me all day to go through all the
62:01 - options that you could do within a
62:02 - select query I just wanted to show you
62:04 - the base level and then you can build
62:05 - from there by looking at the
62:07 - documentation and what I want to do is
62:09 - use a variable that's built into my SQL
62:12 - which is called random and so r a n d
62:15 - and then we put the parentheses at the
62:17 - end of it it'll basically pull random
62:19 - deportment numbers for each row within
62:23 - this table and so let's type a limit in
62:26 - there and we want a limit to one and
62:28 - then let's close out our top parentheses
62:30 - up here anything you open you must close
62:33 - so close that parentheses and then put
62:35 - our semicolon at the end and like I said
62:37 - this is going to take some time and if
62:39 - you want to just pause the video that
62:41 - way you can copy this and that way you
62:43 - can run this query as well to update
62:45 - your employees table with a random
62:47 - deportment number so let's go on and
62:49 - press enter and like I said this is
62:51 - going to run for a little while and I'll
62:53 - be back and it should tell you at the
62:56 - end of it how long it took me and let's
62:57 - compare times be right back all right
62:59 - cool so that wasn't too long it was uh
63:02 - 35 seconds so 35.2 eight let me know if
63:05 - you beat my time down in the comments
63:07 - but it updated each one of those rows
63:09 - with a random department number and
63:11 - let's verify this by selecting store
63:15 - from our employee table and semic
63:18 - calling at the end press enter and it'll
63:20 - give us our results and as you can see
63:21 - it has a random department number
63:23 - throughout the whole table and so
63:25 - that'll allow me to show you guys joints
63:27 - now one other thing I did was I went
63:29 - back and ran another query that'll
63:32 - change some of the department numbers to
63:34 - null so that way the inner joins and the
63:37 - left joins and all that stuff will show
63:40 - properly so you guys can get a good
63:42 - example of how they work and so let's
63:45 - start off by explaining what a joint is
63:48 - it's like bringing two tables together
63:51 - to find related information and there
63:53 - are three types types of joins and the
63:55 - first joint I want to show you guys is a
63:57 - in joint and it shows only common data
64:00 - between both tables for example if we
64:03 - join that employees table and the
64:05 - Department's table using the department
64:07 - number which is our foreign key within
64:10 - that employees table we'll get a list of
64:12 - employees belonging to specific
64:15 - departments and so it'll exclude all the
64:18 - rols that have null in in it it doesn't
64:21 - have a specific Department in it and
64:23 - let's go on and run a enter join right
64:25 - fast and let's type select and I'll put
64:27 - this stuff on multiple lines so select
64:30 - store from employee and then what we
64:32 - want to do is a inner join between two
64:35 - different tables and the other table is
64:37 - our department table because they both
64:40 - have something in common which is that
64:42 - department ID and so we have to specify
64:44 - that so hit on type on and this is
64:47 - basically a injin in departments on
64:51 - these specific column so let's type
64:52 - employees first which is our first table
64:56 - and we want to match our Department's
64:58 - number column within this table so let's
65:02 - make sure I type it in correctly so
65:03 - Department no and then we want to make
65:05 - sure it equals the department and then
65:09 - department uncore number and then let's
65:11 - close out our query and press enter and
65:14 - this will give you a good clear picture
65:17 - of what it actually does so what it'll
65:19 - do is it'll bring in all the information
65:21 - from both tables so we got our employee
65:24 - the ID we have that date of birth we
65:27 - have that first name last name and then
65:29 - their gender and then their hire date
65:31 - and then we also have that employee ID
65:34 - and we have it twice and this is the one
65:36 - represented within our employees table
65:39 - and then this one right here is the
65:40 - representation of the one in our
65:42 - department table and then ourselves so
65:45 - that's considered a inner joint and
65:47 - basically it's joining on those two
65:50 - columns just matching them up and one
65:52 - other thing I want to point out as you
65:53 - can see the row amount it's actually
65:55 - 300,000 rows within there but some of
65:58 - them are set to null or they have null
66:01 - within that department ID and so they're
66:03 - excluded and so that's what makes the
66:05 - difference between a inner join and a
66:08 - left join and a right join the inner
66:09 - join will only bring in roles that match
66:13 - 100% so if this doesn't have a
66:16 - department ID it will exclude it from
66:19 - the results and let's run this query
66:20 - again right fast and let me show you
66:22 - something a little bit different so
66:24 - we're going to run a enter join again
66:25 - and this applies to all the different
66:27 - types of joins a left join and a right
66:30 - join as well you can select specific
66:32 - columns and so let's say we only want to
66:34 - see the employee number so let's put
66:37 - that there and then the first name as
66:39 - well as our last name and then the
66:42 - department that they work for so this is
66:44 - from that other table that is joined so
66:46 - let's type department and then
66:48 - underscore name so we want to see their
66:51 - employee ID or employee number their
66:54 - first name last name and then the
66:55 - department that they work for and we
66:57 - don't have to put a comma at the end of
66:59 - it and let's go on and press enter and
67:01 - that should pull in just that
67:02 - information that we requested and as you
67:04 - can see you don't have to see that
67:06 - department ID you can just see the
67:08 - department name and that's a great way
67:10 - of organizing the results and using a
67:13 - join to bring in information from other
67:15 - tables now a left join this type shows
67:19 - all the data from the left table which
67:21 - is our employees table and only matching
67:25 - data from the right table so it'll list
67:28 - all the employees and their departments
67:30 - if they're available so this is where
67:32 - we'll bring in those NS because certain
67:35 - records won't have a department ID but
67:38 - it'll still bring in those employees and
67:41 - it'll just show null next to it so let's
67:44 - go on and do a left join right fast and
67:46 - all I'm going to do is go over here I'm
67:48 - going leave everything the same and
67:50 - we're going to type left here and like I
67:52 - said it's going to pull everything from
67:54 - the employees table and it's all based
67:56 - on that department number you know all
67:58 - that good stuff so let's go down and run
68:00 - it again and you'll see that it'll pull
68:02 - in all the records and then you'll start
68:05 - seeing all the NS in there so this will
68:08 - bring in all our employees and it'll
68:10 - also show you the ones that have an
68:12 - employee ID associated with it it'll
68:15 - show that employee name as well and then
68:18 - n for the ones that don't have one so
68:20 - that's what a left join will do it'll
68:21 - basically bring in all the records from
68:23 - the left table and then the information
68:26 - that's related from the other table
68:28 - instead of excluding all the NS or the
68:30 - exact matches and then the right join is
68:33 - the exact opposite it'll basically
68:36 - display all the data from the right
68:37 - table and the matching data from the
68:40 - left table and this will give you a list
68:41 - of all departments and their employees
68:44 - if any and so this right join it may
68:47 - look a little weird let's see let's
68:49 - actually see what happens but let's go
68:51 - right and this may not work too well
68:53 - well and this is based on my mind just
68:55 - thinking through what it will actually
68:57 - show so let's go through and look at it
69:00 - right fast and it's it kind of looks
69:02 - like that inner join because it'll only
69:04 - bring in records from that table that
69:06 - match so that right join won't really
69:08 - work for this example but you can see it
69:11 - actually works it works it pulls in only
69:13 - those that match the right table which
69:16 - excludes all the dos and so that's
69:18 - pretty much how to use joins in my squel
69:21 - all right so let me show you a little
69:22 - bit more Advan
69:24 - of a view and I'll just kind of type
69:26 - this one out so you guys can see but
69:28 - first let me explain exactly what I'm
69:30 - trying to do so if we select our
69:33 - departments table so select store from
69:36 - department and then semic colon at the
69:38 - end press Center boom let's say we want
69:41 - to add into this table the amount of
69:44 - employees that are in each department
69:47 - and so you could do this or accomplish
69:49 - this by using a joint and essentially
69:51 - what we'll be adding is another column
69:53 - here from our employees table that will
69:56 - count the amount of employees that fall
69:59 - under each one of these departments and
70:01 - so me go on to show you guys how to do
70:02 - this right fast and we can type select
70:05 - and then
70:06 - department.
70:07 - department number and this is a way to
70:10 - drill down to all of the columns that we
70:13 - want to use within this table we can
70:15 - specify it by putting the table as well
70:18 - as the column and so sometimes you have
70:21 - to do this because if you leave it kind
70:23 - of generic especially when some of these
70:25 - tables have the same column title you
70:28 - have to kind of specify it like for
70:30 - instance the employees table does have
70:33 - that department number column in it so
70:35 - you want to specify it and then let's do
70:37 - Department table again and then we want
70:40 - to get that department name and we need
70:42 - to put that underscore in there and then
70:44 - now we'll use a built-in variable in
70:46 - order to create our third column here
70:49 - and what we want to do is count and you
70:51 - have to put the information within par
70:53 - parentheses that you're trying to do as
70:55 - far as the variable what it's actually
70:57 - doing so we want to count the employees
71:00 - table and then the employee number
71:02 - column so
71:04 - empore number and now we want to
71:06 - continue out our join so as number and
71:10 - this is what we want to name it so we
71:12 - we're naming this column as num of
71:15 - employees so we type that in and then we
71:18 - want to catch that from the Departments
71:20 - table so boom and now let's build out
71:22 - our join so let's do a left join and
71:24 - that way it'll pull everything from the
71:26 - Department's table and then all the
71:28 - information that matches within the
71:29 - employees table so let's go employee and
71:32 - then on and then we specify what we need
71:34 - to match and then that is the
71:36 - department. department number and then
71:39 - we want that to equal our employee table
71:42 - and then that department number that we
71:44 - have in there soore number and now let's
71:47 - add a little more in here let's Group by
71:50 - Department's number and then departments
71:53 - and that is the department name that we
71:56 - want to do so we want to group it by
71:58 - that so let's go on and close it out
72:00 - this query should run perfectly as long
72:02 - as I didn't type it in incorrectly or
72:04 - type anything incorrectly but we can go
72:07 - back and check if we need to so let's go
72:08 - on and press enter see what happens and
72:10 - yes it worked correct so we got our
72:13 - department number we got our department
72:15 - name and this is pulling the number of
72:17 - employees from the employee table that
72:20 - fall under each one of these departments
72:22 - and I kind of just wanted to show you
72:23 - guys something a little bit more complex
72:25 - and what you can actually do with these
72:28 - joins all right so let's talk about
72:30 - views in my SQL and Views are like a
72:34 - saved query that you can use to simplify
72:36 - your data retrieval and it's essentially
72:39 - a virtual table created from one or more
72:43 - existing tables it doesn't store data
72:45 - itself and so views allow you to see
72:48 - specific data from your table without
72:51 - altering the original data and one thing
72:54 - about of you is it's constantly updated
72:57 - and it's all based on the data in those
73:00 - original tables so if you delete data in
73:02 - a specific table that's associated with
73:04 - a view the next time you run that view
73:06 - it will show you the updated information
73:08 - for that table and it's all based on how
73:11 - you run the query within the view and so
73:13 - let me go down and show you guys a quick
73:15 - example right fast and let's just start
73:17 - with the basic syntax and that is create
73:20 - View and like I said I've said
73:22 - throughout this whole course that these
73:24 - queries sound like sentences so we want
73:27 - to create a view and we want to name
73:29 - that view so we want to name it whatever
73:30 - we want to name it so I'm going to name
73:32 - this one
73:33 - employee gender because I want this view
73:36 - to be specific to the genders of the
73:39 - employees within the table and then we
73:41 - have to type as because this is the
73:43 - query we want to run every time we run
73:46 - this View and so let's type select and
73:48 - then let's look at the first name so of
73:51 - that employees table and then and the
73:53 - last name of that employees table and
73:56 - then also the gender and then let's
73:59 - press enter and then we want to specify
74:00 - what we want this information pulled
74:02 - from which is the employees table let's
74:05 - put a semicolon at the end to close out
74:07 - our query press enter and it will create
74:09 - our view long as you don't see an error
74:11 - that mean the query was okay it ran
74:13 - successfully it created that view now
74:15 - let's run show tables that way we can
74:17 - see the actual View and it looks as
74:21 - though it's a table and I'll show you
74:22 - guys that second so show tables and
74:25 - press enter and as you can see we got
74:27 - our employees gender view there now it
74:30 - doesn't put anything next to it or it
74:32 - doesn't show in any way that it's a view
74:35 - the only way you can kind of see it is
74:36 - if you're in let's say MySQL workbench
74:38 - you'll see it'll show up under a
74:40 - different section when you're connected
74:42 - to the database but we know that it's a
74:44 - view and so you can interact with this
74:46 - just like any table and so let's go on
74:49 - in and type in our select statement and
74:52 - store from and then let's select that
74:54 - view so employee uncore gender then see
74:58 - me coling at the end press enter boom
75:01 - and that's our view and it'll pull in
75:02 - all the data and it's all based on what
75:05 - you put within that query for the view
75:08 - and it'll always show that information
75:10 - the exact same way and then let's say
75:12 - one of these employees is removed from
75:13 - the original table then it will update
75:16 - this view automatically you don't have
75:18 - to update in two different places like
75:20 - update in the original table and then
75:22 - update Within the view the view will
75:24 - automatically update based on the
75:27 - original table and data so let me show
75:29 - you guys how to drop that view so let's
75:31 - run show tables again and it's
75:34 - essentially like dropping a table so
75:37 - let's go show tables and then all you
75:39 - have to do is type drop View and since
75:41 - we know that's a view you know tables
75:44 - won't work so if you if you type drop
75:46 - table that won't work we have to drop
75:48 - view because we know it's a view so drop
75:50 - view then
75:52 - employee gender and then semicolon at
75:54 - the end press enter that'll drop that
75:56 - view for us so we don't we won't see it
75:59 - anymore now let me give you guys another
76:01 - example and we'll look at a different
76:02 - table because I don't like using that
76:04 - employees table because of amount of
76:06 - data that's in it let's focus in on the
76:09 - Departments table and let's just run
76:11 - select right fast store from department
76:15 - and then semicolon at the end press
76:17 - enter boom and as you can see that's all
76:19 - the data within there let's say let's
76:21 - add a column to this table and you guys
76:24 - remember the alter table command so
76:26 - let's type alter table and then
76:28 - department and then let's add a colum so
76:31 - add column and then let's create a email
76:35 - column and let me tell you how this
76:37 - makes sense so let's say each department
76:40 - has an email address that's associated
76:42 - with that department and typically what
76:44 - that's called is a distribution list so
76:46 - each department will have a distribution
76:48 - list and so when someone sends an email
76:50 - to that distribution list it will send
76:53 - send a email to all the employees that
76:55 - work for that department and so that's
76:58 - the concept behind what I'm doing so
77:00 - let's add the column and let's call it
77:02 - emails and then let's specify the type
77:05 - of data to be stored in that column so
77:07 - let's go vure and then let's give it
77:10 - about 50 characters cuz like I said it's
77:12 - it's a email address so it probably
77:14 - shouldn't be that long you know what I'm
77:16 - saying so 50 characters should work so
77:18 - let's go and press enter boom that'll go
77:20 - down in create that column for us and
77:22 - then we can at the tables again the
77:25 - deportment table and press enter and as
77:27 - you can see we have that column now and
77:30 - so let's add some data to this column
77:33 - and I'm building this out you'll see
77:34 - once we get to the view section what I'm
77:36 - actually doing and so let's update the
77:38 - data by adding a email address for each
77:40 - one of the Departments so let's go
77:43 - update the Departments table and let's
77:46 - set our email for the first one which is
77:50 - marketing to equal and we can put those
77:53 - single quotes in there that way it'll
77:55 - add that information in there for us and
77:56 - let's go with marketing atcom and so
77:59 - that's our distribution email address
78:02 - and then we have to run a where in so we
78:04 - can specify where that needs to go cuz
78:07 - right now it doesn't know where to put
78:08 - that information and we want to put that
78:10 - under the marketing department email
78:12 - address so we could go where department
78:15 - number equals and then we want to search
78:18 - for one so d001 and we know that that is
78:21 - the marketing role and so let's put a
78:24 - semicolon at the end and press enter and
78:27 - that should update that Row for us and
78:29 - let's just run a quick select all right
78:32 - fast select from departments boom and as
78:34 - you can see we got our email address in
78:36 - there for the marketing department and
78:38 - so I won't bore you guys with watching
78:40 - me do this I'm basically going to run
78:42 - the last command multiple times just
78:44 - updating and adding an email address for
78:47 - each one of them so I'll be back when
78:49 - this finishes all right cool so I
78:51 - updated the table let's go go on and run
78:53 - a select again so select store from
78:56 - department and press enter and as you
78:59 - can see we have an email address or a
79:01 - distribution email address for each one
79:03 - of the Departments within our
79:05 - organization now let's go down and
79:07 - create another view so let's type create
79:09 - View and then we want to call this view
79:12 - deportment email so that's our
79:15 - department email and we want to set our
79:17 - query as and let's go on and type it out
79:20 - but let's type our select and then let's
79:23 - pull in just two columns within here and
79:25 - let's look at the Departments uncore
79:28 - number and then also let's look at the
79:30 - email and then we want to do this from
79:32 - our Department's table boom and press
79:35 - enter and it'll run that query it'll
79:37 - create that view and so let's go show
79:40 - and then you'll see that we have our
79:41 - department email view there and let's go
79:44 - down and select that view right fast so
79:46 - select store from Department _ email and
79:51 - semicolon press enter and that is our
79:54 - view that we created now here is the
79:56 - full example so let's go into let's
79:58 - actually inser insert some more data
80:00 - into our departments tables like a new
80:03 - Department similar to what we did
80:05 - earlier as far as adding let's say a
80:07 - help test department so let's gooll on
80:09 - and write out a quick query to insert
80:12 - into department and this will add us
80:14 - some data in there so department and
80:17 - then specify those columns that we want
80:18 - to update or input data in we have to
80:21 - put those in parentheses so departments
80:24 - uncore number and then departments
80:26 - uncore name and then we want to use our
80:29 - new column which is that email column so
80:31 - let going to close out our parentheses
80:33 - and then let's type in the values so
80:35 - values and then let's put those in
80:38 - quotes so let's create a new department
80:40 - number Department 10 so 0 one 0 Let's
80:45 - close out those quotes and then let's
80:47 - name let's give it a department name so
80:49 - our department name is help Des we'll
80:51 - just use that same one we used for so
80:53 - help des and then the email address is
80:56 - we can name it let's say help and also
80:59 - let's make sure we add our quotes I
81:01 - don't want to forget that so let's put
81:02 - our quotes in there and then let's put
81:04 - our quotes for our email address as well
81:06 - so let's name it help at
81:10 - abc.com close out our quotes close out
81:12 - our parentheses and then put our
81:15 - semicolon at the end of it and press
81:17 - enter and cool so we added that new line
81:20 - in there and let's run a select of our
81:23 - just the normal table so from
81:25 - departments and just to show you guys
81:27 - that the information has been updated so
81:29 - help des and then it we added in that
81:31 - email address for the help Des
81:33 - department or that distribution list and
81:35 - then as you can see this is our view so
81:37 - we updated it just in our Department's
81:40 - table and so with our view I'm going
81:42 - just run this same select query for our
81:45 - department email View and you'll see
81:47 - that it'll update based on what's in the
81:50 - original table so we don't have to
81:52 - updated in two places that's the whole
81:54 - purpose of me showing you guys this
81:55 - exercise so as you can see we got the
81:57 - help Des change that we made to the
82:00 - original departments table so hopefully
82:02 - that gives you a better understanding of
82:04 - how views work and it's the same way
82:06 - let's say we removed that column out of
82:09 - there it will update our view as well
82:11 - all right so the next thing I want to
82:13 - cover is indexes and a index is
82:16 - basically a quick reference for your
82:19 - database and it helps speed up data
82:21 - retrieval it's a structure that
82:24 - organizes data in a way that makes
82:26 - searching for specific information much
82:29 - faster so think of it as a index in a
82:32 - book that tells you where to find a
82:34 - particular topic without reading the
82:36 - whole book so let's go through a few
82:38 - examples right fast and first off let me
82:40 - show you guys how to see the indexes
82:43 - that are currently there for a
82:44 - particular table and what I want to do
82:46 - is look at our employees table so all we
82:49 - have to do is type show indexes and then
82:52 - from from a specific table which we will
82:54 - look at the employee table and just put
82:57 - a semicolon at the end press enter and
82:59 - this will show you all the indexes and
83:01 - there currently are two indexes on the
83:04 - employees table currently and the first
83:06 - one is associated with the primary key
83:08 - and the second one is the foreign key
83:11 - but let's say with this table we do a
83:12 - lot of searches by last name well we
83:15 - could create a index to structure and
83:18 - organize that data to make it searchable
83:20 - a whole lot faster and so let me give
83:23 - you an example of creating that index
83:25 - and all you have to do is type create
83:27 - index and then you want to name that
83:29 - index and what I typically do or the
83:31 - format I do X and whatever column I'm
83:34 - working with so last name is what we
83:36 - want to search so or what we typically
83:38 - search a lot and then now we have to
83:40 - specify the actual column within the
83:42 - table we have to specify the table and
83:44 - then the column so all we have to do is
83:46 - type on our table which is that employee
83:49 - table and then we have to specify the
83:50 - column and we put that in parth pares so
83:53 - we can go back in here and type our
83:55 - column name which is last name and then
83:58 - put a semicolon at the end press enter
84:01 - and that will create our index it takes
84:03 - some time depending on how big the data
84:05 - is cuz it has to structure it but as you
84:08 - can see that query ran successfully and
84:10 - it created our index now let's go back
84:13 - and run these show indexes for employee
84:16 - and let's see our new index that's in
84:18 - there and as you can see it's the idx
84:20 - last name that's the name that we gave
84:22 - it and then it looks at that last name
84:24 - column within the table and so let's
84:26 - just run a quick query right fast and
84:29 - you guys may or may not see a difference
84:31 - when we last ran the select on the
84:33 - employees table because it's all
84:36 - dependent on the amount of data that's
84:37 - in the database whether this will
84:39 - benefit you or not and then how often
84:42 - this information is updated as well as
84:44 - searched so let's type store and then
84:46 - from employee and let's put a wear
84:49 - clause in there so wear last name equals
84:52 - and let's look for a employee last name
84:55 - of bass I know that's one of the names
84:57 - in there so let's type ba a a z and then
85:01 - close that out and then semicolon at the
85:02 - end press enter and as you can see it
85:05 - took no time to actually find that it
85:08 - was less than a second to actually pull
85:10 - all the data for a bass and that's what
85:12 - it'll do it'll increase that speed on
85:15 - searching within that based on the
85:17 - column that you specify in your index
85:20 - and so let's remember that so it only to
85:22 - it took less than a second to actually
85:24 - search for all the employees with the
85:26 - last name of baz and so let's drop that
85:28 - index and this is a good opportunity for
85:30 - me to show you guys how to do that and
85:32 - essentially all you have to do is type
85:33 - alter table employee and then we want to
85:36 - drop our index and then we have to
85:39 - specify that name so id id X and
85:43 - underscore last name and it'll drop that
85:46 - index for us so let's go on put a
85:48 - semicolon at the end press enter that'll
85:50 - drop that index and then now let's run
85:52 - run that same select where we search for
85:54 - the last name of bass and press enter
85:57 - and it took 10 seconds so you'll see you
86:00 - know a difference depending on how much
86:02 - data it is within that table and so
86:04 - there are some downsides to using a
86:07 - index for instance there are slower
86:09 - rights so let's say this table is
86:11 - updated a lot then it slows down the
86:15 - insertion or the updates and the
86:17 - deletion operations because they must be
86:20 - maintained alongside the data and I mean
86:23 - the indexes they have to be maintained
86:25 - and then also there may be an issue with
86:28 - storage because these indexes they
86:30 - consume extra disc space and so if the
86:33 - database is super large then those
86:35 - resources could be significant and also
86:38 - the complexity of these indexes you know
86:40 - what I'm saying they require regular
86:42 - maintenance and then also like one of
86:44 - the other cons so to speak of using
86:47 - indexes is the memory usage it does use
86:50 - a lot of memory and that can affect
86:52 - effect these servers performance so you
86:54 - have to think about that when creating
86:56 - these indexes and be very strategic all
86:59 - right so next I want to talk about
87:00 - subqueries and a subquery is basically a
87:04 - query within a query and it's a way to
87:06 - retrieve data from one table based on
87:09 - the results of another query and for
87:11 - example you can use a subquery to find
87:14 - employees in a specific Department by
87:17 - first querying the department and then
87:20 - using the results to search the
87:22 - employees table so let's go through a
87:25 - demonstration right fast and I actually
87:26 - wrote out a query for this and I'll show
87:28 - you guys that demonstration now and
87:31 - let's just type select and then store
87:33 - from our employees table and so this is
87:36 - our main query this is the main query
87:39 - that we want to use and I'll show you
87:41 - guys the subquery in a second but I'll
87:43 - use it under the wear Clause within this
87:45 - query so let's go select store from
87:47 - employees and then where department
87:50 - number equals and this is where we we
87:52 - will put our subqueries and we have to
87:53 - put our subquery in parentheses cuz it's
87:56 - a totally separate query and then let's
87:58 - type another select and then department
88:01 - number and then what I'll do is pull
88:03 - this information from another table
88:05 - which is that Department's table so so
88:07 - let's talk that in department and then
88:09 - where Department name equals sales let's
88:13 - look for the sales department and let's
88:15 - put that in quotes single quotes and
88:17 - then let's close out our query and it
88:19 - should work for us so let's press enter
88:21 - both as you can see it pulls in all the
88:24 - people from sales so that's super dope
88:27 - right it goes through and searches and
88:28 - finds all those people with the
88:31 - Department name of sales and it's all
88:33 - based on the department number so that's
88:36 - essentially a subquery example and I
88:38 - only wanted to cover like one example
88:41 - because subqueries can be get very
88:43 - complex well queries in general can get
88:45 - very complex and then when you start
88:47 - adding subqueries into the mix it takes
88:49 - a little time to build out those queries
88:51 - queries and so I want you guys to
88:53 - practice writing out queries as well as
88:56 - subqueries based on documentation that
88:58 - you look out there for my SQL or SQL
89:01 - queries all right so next I wanted to
89:03 - cover store procedures now store
89:05 - procedures are like a reusable script
89:07 - that contains a series of SQL statements
89:10 - and it's like creating a custom function
89:13 - that allows you to perform specific
89:15 - tasks especially if they're repeatable
89:17 - for instance if you guys remember the
89:19 - query we ran during the join ction and
89:22 - I'll actually paste it in here so you
89:24 - guys can see but this is the select
89:26 - statement that we created in order to
89:28 - pull the count of employees based on the
89:30 - Departments and so let's go down and run
89:32 - it right fast so you guys can get a
89:33 - picture of what what I'm saying so
89:36 - department number Department name and
89:38 - then the amount of employees that are in
89:40 - each one of these departments and so
89:42 - let's say we had to type this out a
89:44 - whole bunch of times you know this is
89:45 - something that we reuse all the time
89:48 - like every day or so well it'll be a
89:50 - pain to have to retype this every single
89:52 - time so we can create what is called a
89:54 - store procedure with this query built
89:58 - into it and so let me give you example
89:59 - of how to actually do that so the first
90:01 - thing let me show you guys something
90:02 - right fast so if we type select store
90:06 - from departments and I'm just showing
90:08 - you a basic query so you can understand
90:09 - what I'm going to show you so at the end
90:11 - of each SQL statement or query you have
90:14 - to put what they call a delimiter and
90:16 - the delimiter by default is the
90:18 - semicolon within SQL but within our
90:21 - store procedure while we creating that
90:23 - procedure we have to put this query in
90:25 - the middle of another query and so in
90:28 - order to end the creation of the store
90:31 - procedure we have to change that
90:33 - delimiter so it doesn't mess up our
90:35 - actual query that we're going to put in
90:37 - the inside of it and so I'm not going to
90:38 - run this query let's go on and back it
90:40 - off but I'm going to show you guys how
90:41 - to change the delimiter and all you have
90:43 - to do is type delimiter and then we can
90:45 - specify what that delimiter is most
90:47 - people use these slashes that's
90:49 - typically what you'll see in
90:51 - documentation but there's others you can
90:53 - use but I'll just use the slashes so
90:56 - four slashes let's press enter and that
90:58 - will change our delimiter for ending a
91:01 - SQL statement now let's go on and type
91:03 - out our store procedure and the way you
91:06 - create it is simply create and then we
91:08 - want to create a procedure and then we
91:10 - want to name that procedure so I'll just
91:12 - name it
91:14 - employee accountor by department so
91:17 - department and then at the end of the
91:19 - name of the procedure we have to put C's
91:22 - and so this is essentially like a custom
91:24 - function so after this we have to
91:25 - continue writing but we have to specify
91:28 - the beginning of our query that we want
91:31 - to run within our store procedure so by
91:33 - specifying you have to type begin and
91:36 - this is just a designator to let SQL
91:38 - know that this is the beginning of the
91:40 - script and so let's press enter and then
91:43 - let's paste our query in there boom and
91:46 - and right now if we didn't go in and
91:48 - change our delimiter when I press enter
91:51 - it's going to to finish out this this
91:52 - whole statement that we wrote out which
91:54 - we did don't want it to do that's why we
91:56 - changed the delimiters so just like we
91:58 - put the begin here of where our select
92:01 - statement starts we have to put an end
92:03 - so if we didn't change that delimiter we
92:05 - wouldn't be able to end the statement so
92:07 - let's press enter now and as you can see
92:09 - it didn't complete out our SQL statement
92:11 - and so let's go down to type in and then
92:13 - our slashes and that will allow us to
92:16 - end this statement that we wrote so
92:18 - let's go on and press enter as you can
92:20 - see query Okay so it ran successfully it
92:23 - created our procedure now let's go on
92:25 - and change our delimiter back you don't
92:27 - want to forget to do this otherwise
92:29 - you're going to be running other queries
92:32 - and you'll be like what why is it not
92:33 - running properly and that's because the
92:35 - delimiter hasn't been changed back so
92:37 - let's type delimiter and then the
92:39 - semicolon like what is typically used
92:41 - for our queries press enter and that'll
92:44 - change our delimiter back to that
92:46 - semicolon now let me show you guys how
92:48 - to call that store procedure that we
92:50 - have cuz it will use this name right
92:53 - here so employee counts department so
92:55 - I'm going to copy it right fast and then
92:58 - all you have to do is type call and it's
93:00 - like calling a function so call and then
93:03 - the procedure name and then let's go to
93:05 - put the semicolon at the end and press
93:07 - enter and that will run that query for
93:09 - us and so that's a great way of running
93:12 - complex queries you know that you have
93:14 - to use multiple times or you run daily
93:17 - or multiple times a day this is a great
93:19 - way of running those queries by creating
93:22 - a store procedure and then you can call
93:24 - it store procedure and plus it's less
93:26 - text you have to type and so lastly let
93:28 - me show you guys how to drop that store
93:30 - procedure so all we have to do is type
93:32 - drop and this will basically remove the
93:34 - procedure so procedure and then the
93:37 - procedure name and I'm going to paste it
93:39 - in here but you don't need these uh
93:41 - parentheses at the end of it that's
93:43 - mainly just for the function or calling
93:46 - it and then when you create it you have
93:47 - to put those parentheses there but all
93:49 - it is is a name so you want to just drop
93:52 - that procedure by its name without the
93:54 - parentheses so let's go on and press
93:56 - enter that will drop that story
93:58 - procedure and as you can see if we call
94:00 - it again it'll say error because it does
94:02 - not exist anymore we deleted it all
94:04 - right so the next important thing I want
94:06 - to show you guys in my squel is triggers
94:08 - and triggers is like a set of predefined
94:11 - actions that automatically occur when
94:14 - specific events take place within your
94:17 - database and this could be things such
94:19 - as inserting or updating
94:22 - or even deleting data and so let me go
94:24 - down and show you guys a quick example
94:27 - and I have to go through a couple
94:29 - processes one of the first thing I want
94:30 - first things I want to do is create a
94:32 - new table I want to show you guys how to
94:34 - create a audit log and basically the
94:37 - purpose of this is every time we make an
94:39 - update to the employees table I want
94:41 - this information tracked within another
94:44 - table and so let's start off by creating
94:46 - that table so we can type create table
94:49 - and then let's name this employee Audits
94:52 - and then let's put our information for
94:53 - the table in there let's start off with
94:56 - a audit ID boom and then we can make
94:59 - this Sager so int and then let's make
95:02 - this Auto increment so
95:04 - autocore increment and this is basically
95:07 - to auton number each row within our
95:10 - table and then let's make this the
95:11 - primary key boom and then let's put a
95:13 - comma there and let's create our next
95:16 - column and let's start with the
95:18 - department number because I want to do
95:20 - this based on the department so let's
95:22 - say and this is the only example I could
95:24 - think of to show you guys a trigger so
95:27 - let's say an employee is assigned to a
95:30 - different department and we need to
95:31 - update and let's say we want to track
95:33 - those changes well we'll put this in
95:35 - here so it can track the new department
95:37 - for that user and then this will be at
95:39 - integer and press comma and let's get
95:42 - the next step so let's go with our
95:45 - action so this is the actual action of
95:47 - what happens as far as the type of query
95:50 - that's running and like I said I want to
95:52 - show you guys after an update so let's
95:54 - go action and then vour and let's make
95:57 - the number of characters around 50 boom
96:00 - just go on put a commment there and then
96:02 - lastly Let's uh put the action dates so
96:06 - this will track the actual time that
96:07 - this change happened within that table
96:10 - and then we can set the type to time
96:12 - stamp that's a good one to actually use
96:15 - and let's press enter and then close out
96:17 - our parentheses as well as the semicolon
96:20 - press enter and that should create our
96:23 - table for us and let's go with a select
96:25 - right fast just to check it out so
96:26 - select store from our employee _ audit
96:30 - table and let's close it out with the
96:32 - semicolon press enter and it won't show
96:34 - anything cuz there's no data in there
96:35 - yet but our table is created so now
96:38 - let's go on and create our trigger and
96:40 - we have to change our delimiter again
96:42 - because of the way I'm writing this
96:44 - trigger so let's change it to our for
96:46 - slashes again and press enter and the
96:48 - way you create a trigger is as follows
96:51 - so so create trigger and then let's name
96:53 - our trigger so we can call this employee
96:56 - uncore Audits and then underscore we can
96:59 - just specify that it is a trigger and
97:01 - let's go on and type out the details of
97:03 - our trigger so after an update on the
97:08 - employee table and then for each row
97:12 - enter and then this will be the
97:14 - beginning of our statement so let's type
97:16 - begin and press enter and then let's do
97:18 - our insert into our employ employee
97:22 - audit table and then we want to update
97:24 - specific columns within that table so
97:26 - let's start off with the department
97:29 - number and then the action we want to
97:31 - update the action column as well as our
97:34 - action date and let's close out those
97:36 - parentheses and now let's type in our
97:39 - values so values and there's a built-in
97:42 - way of looking at the change like you
97:44 - can type new and this will show you the
97:47 - new information that's being inserted
97:49 - into the table or you can also look at
97:52 - old which is the current data that's
97:54 - there but we want to look at the new
97:56 - data we just want to track that new data
97:58 - that's being inserted into the table so
98:00 - new and then it's coming from the
98:03 - Departments number and then also let's
98:05 - say we want to just we know this is a
98:08 - update trigger so let's say we only want
98:10 - to put text in there that just says
98:12 - update so we can specify you know
98:14 - specific text within a column so we
98:16 - could just put updates so each one of
98:19 - the triggers that will happen it will
98:21 - put update in there and that's a way of
98:23 - tracking our updates then also the
98:26 - action date we can use a built-in
98:28 - variable which is now and I'm going to
98:30 - type it in all cap so you guys can
98:32 - understand it but it's just a built-in
98:34 - function that you can use and that will
98:36 - bring the current time and date and put
98:39 - that into our field so let's close out
98:42 - our main parentheses and then let's go
98:44 - down and put our semicolon at the end CU
98:47 - that'll end out our insert query and
98:50 - let's press enter and just like we had
98:53 - to type begin we have to type in that
98:55 - was the whole purpose of changing our
98:57 - delimiter so let's type in then our
99:00 - delimiter that we have currently set
99:02 - which is the for slash4 slash so let's
99:05 - go and press enter boom so that took and
99:08 - that created our trigger now let's
99:09 - change our delimiter back right fast and
99:12 - we want to change it back to our
99:14 - semicolon so when we run our following
99:16 - queries they'll work properly and so let
99:18 - me show you guys how to show the
99:20 - triggers so so it's a very simple
99:22 - command all you have to do is type show
99:23 - triggers with an S put semicolon at the
99:26 - end and this will show all our triggers
99:27 - right there as you can see that is our
99:29 - trigger that we just created so the
99:31 - employee audit trigger and it gives you
99:33 - all the information about the actual
99:35 - trigger and if you have other triggers
99:37 - they'll be listed here as well so now
99:39 - let's find some information to update so
99:41 - let's type select and let's just select
99:43 - some information from our employees
99:46 - table so let's type that in semicolon at
99:48 - the end press enter and maybe I should
99:51 - have did it this way let's throw in the
99:53 - limits after that so we can just pull up
99:56 - the top 10 records that will be
99:58 - displayed so this is a easy way of
100:00 - finding something to update so let's say
100:03 - we want to update this first line and
100:05 - it's all based on the department number
100:06 - like I said once you update the
100:08 - department number it will track that in
100:10 - our audit table so let's go on and run a
100:13 - update query so let's type updates and
100:15 - then employee table and then let's set
100:19 - our department number because that's
100:21 - what set Sofi trigger so department
100:23 - number and then let's change the
100:25 - department number to let's say Georgie
100:29 - forcillo works for the help Des
100:31 - department so let's go and throw the
100:33 - help Des ID in there department number
100:35 - in there so it's 010 and then close that
100:38 - out and then now let's do our wear
100:40 - Clause so wear employee number equals
100:44 - and let's go to and grab their employee
100:46 - number right fast and drop that in there
100:48 - and put our semicolon at the end and
100:50 - let's go to and run our update query and
100:52 - looks like we have an issue hold on
100:54 - let's see and I believe I made a mistake
100:56 - when I created the table so this is a
100:58 - good way of showing you guys how to
101:00 - alter the table right fast and let's
101:03 - describe our employees table and I just
101:07 - want to see what the character is set
101:09 - for and yeah it looks like I made the
101:12 - wrong setup for the audit table that we
101:15 - created and yeah we can look at that
101:16 - right there just by describing this
101:18 - table as well so it's our audit table so
101:21 - employee Audits and let's check this out
101:23 - and it looks like yeah I put the
101:24 - department number as an integer when it
101:27 - should be character for so that's the
101:29 - mistake I made and so I'm glad this
101:31 - actually happened so I can show you guys
101:33 - how to fix issues like this or track
101:35 - them down because as you can see this
101:37 - error it just kind of gives you it gives
101:39 - you information you know don't get me
101:41 - wrong it gives you information but a lot
101:43 - of times you got to dig sometimes the
101:45 - errors are vague and you got to kind of
101:47 - dig through where the issue lies and so
101:49 - let's alter that table right fast that
101:52 - employees audit let's go right here just
101:54 - type in the front so alter table and
101:57 - then employees audits let's delete that
101:59 - off and then let's modify a column and
102:02 - this is changing the type so all we have
102:05 - to do is specify that column which is
102:08 - our department uncore number and then we
102:11 - can specify what we want to change it to
102:12 - and so that's why I described this so I
102:14 - could just typeing in you know properly
102:16 - so Char and then put four right here and
102:19 - let's put the semicolon at the end
102:21 - and move the mouse out the way so you
102:22 - guys can see but this will alter our
102:24 - table and now let's describe it again
102:27 - and that way we could see the changes
102:29 - and boom we are good to go so let's go
102:31 - on and make our changes in our employees
102:33 - table again so let's scroll up and let's
102:36 - see where we can find that change yeah
102:37 - this is the change we want to make so
102:39 - update employee set department number to
102:42 - d010 where employee number is 10,000 so
102:46 - let's press enter and we shouldn't run
102:48 - into that area yeah we don't so let's
102:49 - select our our employees audit table so
102:52 - select store from
102:55 - employee audit so you guys can see the
102:57 - information that's presented to that
102:59 - table and that lets us know our trigger
103:01 - actually worked and as you can see it
103:03 - pulls in the department number the new
103:06 - department number and see this is just a
103:09 - basic understanding or basic concept of
103:12 - setting this up you can set up Tri
103:13 - triggers that are way more complex like
103:16 - for instance you can track the old data
103:19 - as well as the new data you can create
103:21 - more columns in here and that's
103:23 - typically how you'll see it in a
103:24 - production environment it'll track old
103:26 - and new changes that way you can correct
103:29 - those changes if need be by looking
103:32 - through the Audits and now let me show
103:33 - you guys a little bit more of this audit
103:35 - log or this trigger in action like a
103:38 - while back I created a query that would
103:41 - go in and randomly insert departments
103:44 - within all of the users within the
103:46 - employees table and so let's run that
103:49 - again so you guys can see the rows that
103:52 - are inserted throughout this table and I
103:54 - know it'll populate this audit there'll
103:56 - be a whole bunch of changes or updates
103:59 - within this table but I just want to
104:00 - show you guys how these triggers
104:01 - actually can be very beneficial so let's
104:04 - hit paste let's paste it in there and
104:06 - this is something that I wrote a while
104:07 - back and I'll just break it down for you
104:09 - right fast but it's basically going to
104:10 - update the employees table it's going to
104:12 - set the department number to equal and
104:15 - then we have a nested query and this is
104:17 - basically select the department number
104:19 - from Department table and then we
104:21 - ordering it by random so this is a
104:24 - built-in function and then we can limit
104:26 - it to one and that will do that for
104:28 - every rle within the employees table and
104:31 - so let's go down and press enter and let
104:33 - this run and then we'll look back at our
104:35 - audit table up here our employees audit
104:37 - table once this completes and we'll see
104:40 - all the Okay cool so our update query
104:42 - has ran successfully as you can see it
104:44 - made a couple changes or not a lot of
104:47 - changes and so let's select our audits
104:50 - table again and press enter and let's
104:53 - see all the changes as you can see it's
104:55 - like 30,000 cuz it went through every
104:57 - record you know what I'm saying and this
104:59 - will keep going as you run updates on
105:01 - that table so let's say you make a lot
105:02 - of changes depending on the department
105:05 - it'll list them all here and that way
105:08 - you can trace back any issues that may
105:11 - have been made in the table
105:12 - unintentionally all right so after
105:14 - showing you guys these store procedures
105:16 - and triggers I wanted to show you guys
105:18 - another command within my SQL which is
105:21 - process list and this is essentially
105:23 - like a to-do list for the database
105:25 - server and it keeps track of all the
105:27 - tasks the server is currently working on
105:30 - and each task similar to a operating
105:32 - system is called a process and can
105:35 - include things like executing queries
105:37 - handling connections or performing
105:40 - updates and so let me show you guys this
105:42 - Command right fast and it's very simple
105:44 - all you have to do is type show process
105:47 - list and then semicolon at the end and
105:49 - this will show you all the process is
105:50 - currently running on a server as you can
105:52 - see it breaks everything in columns so
105:55 - you got your ID you got your user you
105:57 - got your host the database that's
105:59 - associated with that user so to speak
106:01 - the commands the time State you know
106:04 - information about the server so as you
106:07 - can see it's pulling in that process
106:08 - right there show process list that's the
106:10 - query that I just ran using my root
106:13 - account so you can see pretty much any
106:15 - and everything that's going on on the
106:17 - server and I wanted to let you guys know
106:19 - this an important command to understand
106:21 - because it helps you manage all the
106:23 - processes and then also understand the
106:25 - performance of the server okay so the
106:27 - next thing I want to cover is MySQL dump
106:31 - and MySQL dump is a built-in utility
106:34 - that's included with mySQL that allows
106:36 - you to make backups of your entire
106:39 - database and you can also get very
106:41 - specific with it and back up just
106:43 - specific parts of the database as well
106:46 - and this tool will help you save your
106:47 - data so you can restore it if something
106:50 - something goes wrong or let's say you
106:52 - need to move the database to a different
106:54 - server that provides more performance
106:56 - for the amount of data that's included
106:58 - in it well this allow you to do that as
107:00 - well and so just to kind of cover it
107:02 - MySQL dumps it takes all the data and
107:05 - structure of your database and save it
107:07 - into a file and it's typically a SQL
107:10 - file so if you guys remember earlier in
107:12 - the course I imported that test database
107:15 - it had the extension of SQL so I'm sure
107:18 - they created that test database for
107:21 - others to use using MySQL dump and so
107:24 - when we get into the examples I want to
107:25 - show you that it's is like very super
107:28 - easy to use and you can run it right
107:30 - from the command line and another thing
107:32 - you don't have to stop like my SQL in
107:34 - order to create the backup it'll work
107:37 - while the database is running and a
107:38 - super cool part about it it will ensure
107:41 - that your data's Integrity is maintained
107:43 - during the backup process and so let's
107:45 - go through a couple examples right fast
107:48 - and what I need to do is exit out of my
107:51 - SQL because like I said it's a separate
107:53 - utility that comes along with my SQL and
107:56 - so let's go down and back up that
107:57 - employees table with all those changes
107:59 - that we made so let's go with mySQL dump
108:02 - and then we have to specify a user in
108:04 - order to connect to our mySQL database
108:06 - and we want to use our root account and
108:09 - then we can put- P for our password and
108:12 - it's similar to how we logged into it
108:15 - and also I forgot about this we have to
108:17 - put pseudo in there so we can connect to
108:19 - the database and now let's do the
108:22 - employees database and then let's
108:25 - specify the file that we want to name it
108:27 - so we have to put the right arrow just
108:29 - like when we import it we use the left
108:32 - arrow pointing to the left we need to
108:34 - use the one that points to the right
108:36 - because we're grabbing all the data or
108:38 - the database from within the SQL server
108:41 - and dumping it to a file and this is the
108:44 - structure and everything associated with
108:46 - it it even includes the data that's
108:48 - within the database and so let's name
108:50 - name our file EMP and then let's goore
108:55 - backup and then it will store it in the
108:58 - current working directory we are in
109:00 - which is our home directory so that's
109:02 - fine for now but you can specify another
109:04 - directory by typing out the full path
109:07 - we'll just roll with it like this and
109:08 - press enter and then it'll ask us for
109:10 - our pseudo password because we had to
109:12 - type pseudo and then there is no
109:15 - password for our roote account so let's
109:17 - press enter and go down and Export or
109:19 - dump our database and as you can see it
109:21 - didn't take long at all and so let's LS
109:24 - our current working directory and you
109:27 - guys will see the employees back up and
109:29 - then let's put this in human readable
109:30 - form so you guys can see the size of the
109:33 - actual database file so it's 176
109:35 - megabytes that's how big the actual
109:38 - database is and let's log back into our
109:41 - database right fast so P sudo my SQL and
109:44 - then our user which is roots and then- P
109:48 - for password press enter and press enter
109:51 - no password and let's go show databases
109:55 - and semicolon at the end press enter
109:57 - it'll show us all our databases so what
109:58 - I'm going to do is drop the employees
110:00 - database and we all remember how to drop
110:03 - a database and all we have to do is type
110:05 - drop and then the database and then the
110:07 - database name we're going to drop that
110:09 - employee database and semicolon at the
110:12 - end and let's go enter and that will
110:15 - delete that database and so let's run
110:17 - these show again right fast and we'll
110:19 - see that that database is gone and we're
110:22 - like oh crap made a mistake I did not
110:24 - mean to delete that database well one
110:27 - good thing about this we created a
110:28 - backup of our database now in order to
110:31 - restore the database we have to have a
110:33 - database within the MySQL server with
110:35 - that previous name and so let's go on
110:37 - and create a database and this will be a
110:40 - empty database so create database and
110:43 - then you want to name it the exact same
110:45 - name that it was before so employees
110:47 - with a comma press enter just go through
110:50 - and show the databases again we'll see
110:52 - that we have that database there but it
110:53 - doesn't have any data or tables or
110:55 - anything in it we're going to get that
110:57 - from our backup file so now that we have
111:00 - everything set up we can exit out of my
111:02 - SQL and let me show you the command to
111:05 - restore the database so P sudo my SQL
111:08 - and then we have to put our user in
111:09 - there so roots and then- P for the
111:11 - password and then we have to specify
111:13 - that database that we just created that
111:15 - empty database because it needs
111:17 - somewhere for it to go it's not going to
111:19 - just create that database for you it's
111:21 - just going to modify that current name
111:24 - database that we have in there to
111:25 - represent what we had previously within
111:27 - the backup so now we just put that left
111:30 - arrow in there just like we did when we
111:31 - imported before and then we pull in our
111:35 - employee backup and press enter it's
111:38 - going to ask us for our password we
111:40 - don't need a password and press enter
111:42 - and it'll go through and import all the
111:44 - database all the tables and everything
111:46 - within that database and then we'll
111:48 - verify this back up once we complete
111:50 - this I'll go through and show you guys
111:51 - the tables that all the tables are
111:53 - restored and pretty much everything the
111:55 - data is there as well by running a
111:57 - couple select queries so I'll be back
111:58 - when this finishes all right and so the
112:00 - import is done let's go in to my SQL and
112:03 - check our database and just verify that
112:06 - the tables are there and we can also run
112:09 - couple queries to see if the data is
112:11 - still there and so first off let's uh
112:13 - show databases which we know it was
112:15 - there before cuz we created it before we
112:17 - logged out of the system and imported
112:19 - our file now let's type use employee
112:22 - database and press enter and then now
112:25 - let's show tables and semicolon press
112:29 - enter so as you can see we can tell
112:31 - right off that we have our full database
112:33 - back so like for instance I created that
112:36 - audit table for the auditing so it has a
112:39 - trigger associated with it so if any
112:41 - updates to the employees table
112:43 - departments column it will track it
112:46 - within this a audit table that we
112:48 - created so that's a Telltale sign that
112:50 - we have our database back and that's
112:52 - different from the original database
112:54 - that I installed on the system and
112:55 - actually let's just run a select on that
112:57 - table right fast so you guys can see
112:59 - that that information is back and so
113:01 - let's go from
113:03 - employee audit and semicolon press enter
113:07 - as you can see it has all those records
113:09 - there it hasn't changed so all our
113:11 - records are back as well so we can do
113:13 - the exact same thing by checking other
113:15 - tables if we need to like this is the
113:17 - employees table and we know from the
113:20 - original database we didn't have this
113:21 - column in here with the Department ID
113:23 - and so that lets you know that this is
113:25 - the database that we dropped and there
113:27 - you have it you have successfully
113:29 - completed my MySQL course and I hope
113:32 - you've gained a valuable insight into
113:34 - this powerful relational database
113:36 - management system so whether you're a
113:38 - beginner or already had some experience
113:40 - I trust that you're now more confident
113:43 - in working with mySQL and also MySQL is
113:46 - a fundamental tool for anyone dealing
113:48 - with data and your new found knowledge
113:50 - will be an asset in various domains from
113:53 - web development to data analyst and
113:56 - remember the best way to become
113:58 - proficient in myql is through practice
114:01 - and so keep experimenting building and
114:03 - refining your skills with determination
114:06 - and dedication you can become a master
114:08 - of my sequel so thanks for choosing my
114:10 - course I wish you the best of luck in
114:12 - your database Endeavors and may your
114:15 - MySQL journey be filled with success and
114:18 - of course keep protect okay

Cleaned transcript:

unlock the power of databases with this MySQL course for beginners whether you're new to databases or looking to level up your skills this course has you covered you'll learn how to create manage and manipulate data using MySQL you'll discover the secrets of keys learn to write queries like a pro and automate tasks with triggers no jargon just practical knowledge Josh from keepit techie teaches this course he works as a SQL Server database administrator so he's the perfect person to teach this course what's up guys this Josh from keep techi and welcome to my comprehensive course on MySQL now MySQL is a relational database management system and in this course I'll try to explore the ins and outs of my SQL on Rocky Linux which is a powerful combination for managing your data effectively now my SQL is not just any database it's the fundamental Port of the lamp stack which stands for Linux Apache MySQL and PHP and then also the limp stack which is Linux engine X MySQL and PHP and these Stacks are widely used for Content Management Systems like WordPress jumer and various other web applications and I'll start with the basics covering the installation login procedures and a little bit of database management so whether you're a beginner or have some experience this course will help you master my SQL on this fantastic Linux distribution so let's head over to to Rocky Linux 9 server and get started with the installation process okay so here we are logged into Rocky Linux 99 server and to install my SQL we'll follow these simple steps and I just brought up the OS release information under so you guys can see that I am on Rocky Linux 9 which is a one toone comparison to Red Hat 9 so let's go on and clear and first let's ensure that our system is up to date and we need to run the following command to refresh the package repositories and apply any available updates and that command is pseudo dnf and update and we'll wait for this to finish but this will basically check to see if there is any updates and if there are it'll upgrade those packages on the server and as you can see we don't have any updates so we're good to go I believe I updated this before I started this video so now to install my SQL all we have to do is type pseudo dnf install and then my SQL server and I'll just tab it out it'll pull up the latest version of my SQL so that's basically the version number and all that stuff for this actual package so let's go on press enter that'll go through and resolve all the dependencies for MySQL as well as the package for MySQL so all we have to do is type why for yes we want to install this package and use the amount of space that it will use use on the operating system so scroll on press enter it'll go through like I said download all those dependencies as well as the MySQL server package and then install it on the system so I'll be back when it finishes all right so the installation is complete and now we need to check the MySQL Services status and we can do that by using the system CTL command so let's type pseudo system CTL and one thing I noticed on Rocky Linux it doesn't start the service after the installation or part of the installation process similar to like you buntu typically when you install MySQL it'll go down and start the service and you may have to go in and enable the service but most of the time it starts the service right off but on Rocky Linux or rail it doesn't so system CTL and then status and then what we want to do is check that my SQL status and you'll see that it's not started boom and it'll say right here where where it says active it says inactive so right now that lets you know that it's not started and then also Al the enabled portion of it this is essentially for when you reboot the server itself that service will store it up right now it's disabled we want to enable that so it's two commands we can run right fast we basically have to run the pseudo system CTL start and this will start the actual service so let's go and press enter all right and so we can run the status command again and this will show you that that service is running now so as you can see it says active and running but we still need to enable it so let's let's go down and press Q that'll drop us back down to the terminal again and we get up arrow and then let's remove the status and type enable press enter and it'll go through and enable This Server so each time you reboot your Rocky Linux server my SQL will stored and so let's check the status again we can go back in here and look at it and this is what we're looking for where it says enabled that lets you know it's enabled so that service is stored up and so that's pretty much it we've successfully installed my SQL and now it's time to show you you guys how to log into it and you use a command called MySQL and you also want to put the user account and if there is a password then you want to put that password there as well or the option to ask for a password but since this root account that's on the system of the default root account it doesn't have a password you can log right in and so let me go down and type the command in and we are using a pseudo account so we have to type pseudo in order to run the MySQL command so let's type pseudo MySQL and then we need to put our user so we have to put our option in there you and then the username so I'm going to use that that root account like I said that's the default account that's there after installation and it doesn't have a password on there but we need to put P at the end of it so it will access for the password and you'll see once we get past this step It'll ask for the password but we don't have to put a password in because there is no password set for it now I want to point this out to you as well though you want to make sure you follow best practices and create a dedicated user account for your projects you don't want to be using this root account with no password on it so go on and press enter It'll ask you for a password it says enter password and since we ran pseudo it normally will ask you for a pseudo account so if you you may see it asking for the pseudo account so you want to type that in of course but then it'll pop up with this enter password for the MySQL account so I just want to know let you guys know that the way you're seeing it on mine it may not show up on yours you might have to type in a password for pseudo and then press enter because there is no password so let's press enter right fast and that'll get us into our MySQL server now that we're in let's explore some basic MySQL commands and functionality now once you're inside the MySQL prompt which is what it's showing right here with the my SQL and then that right arrow you can begin executing commands and so let me walk you guys through a few ones the first one you need to know is the help command so if we type help and then every command pretty much every command you have to type a semicolon behind it similar to typing out a query in order for it to run that statement for you so help will basically give you a whole bunch of information on how to use my SQL if you scroll through here you'll see a Le list of all MySQL commands and some of these commands they use that left slash in front of it and that's what I was going to show you guys as well after this by typeing help you know as one word and then the semicolon there's another way of actually getting to the help and that's the back SL and H but the other ones are there and they have an explanation of what they actually do and I won't go through them all cuz I typically don't use a lot of these commands these my SQL commands right here but I just wanted to show you guys where to get that information from if you need it now let me go to and run that back slash and then H and that way you guys can look at the same thing and it looks like it didn't change because it just basically ran it again and display the same information so we are good to go now the first thing I wanted to show you guys is how to to find databases within your database management system and so I'll show you guys that command now and it's essentially the show command so all we have to do is type show and then we want to type what we what we're looking for which is databases so databases with an S and then semic calling at the end of it and this will show you all the databases that are currently on the system so let's go down and press enter and what you'll see is some builtin databases for the database management system like information schema like the performance schema this my SQL database as well as the cyst database and I recommend you don't touch any of those those are vital to the system running properly but this is how you actually look at all the databases that are on the system all right so now that we know how to look at the databases that are currently on the system I wanted to show you guys how to create a database cuz this is like one of the most important steps after that because we need to understand how to create those databases so all we have to do is type create and a lot of these commands you'll you'll start remembering them almost like a sentence cuz that's essentially what it is like show databases simple you know create database so we want to create a database and that's the command right there so create database with no s cuz it's singular you know so no s is needed and then the database name so we can name it whatever we want to I'm going just do DB name and then put a semicolon at the end of it and go down and press and it'll create our database as you can see query okay one row affected so and what row they're talking about is the builtin table that list out all the databases that are in the database management system so we can go back and look at that show database command show databases command and we'll see that that new database is there is called DB name that's what we named it now probably the next question you have is how do I create tables within the database that we just created and I need to show you another C command beforehand and you need to specify the database you want to run queries against by using the use command so like I said almost like a sentence you just type use and we want to use a specific database and which database we want to use is that DB name and then you can end out your sentence with the semicolon and press enter and this will make a change so that we are using database name for the following commands and you need to do that every single time so my SQL will know what database you're creating things with or even running other queries like select or update it needs to know what database is working with so you have to use this command in order to change it to the database that you want to work with and now I'm going to show you guys how to create a table and like I said it's almost like a sentence so create table and then we want to create a table name so we have to name that table so I'm going just name it employees now this is a little bit more complicated because it requires multiple lines so after this we have to specify each one of the columns within that table and you can press enter in here and that's why it's important to understand the purpose of that semicolon that closes out your query until you type that semicolon it will not close out the query so let's go down and press enter boom and as you can see it'll go to the next line allowing you to type some more information and we want to go through and create each one of the columns within our database and so the first one is employee ID a lot of times when you create a table you want to create what they call a primary key and this is a unique identifier for each row of data within the database and that just keeps things a little bit more cleaner in the database as well as a way to make sure we don't have any duplicate information and if the information is duplicate in other columns it will still recognize it as a different record so the next thing we want to use is integer so this is an integer meaning a number so and then also with our primary key there's an option you can put here called autoincrement and this will allow it to create numbers in sequence so 1 2 3 4 5 6 7 89 10 it will you know keep going as new records are added to the database or to the table and so let's type that in right fast so autocore increment and then also this is a primary so we have to type that out as well and then we have to put a Comm at the end of it that'll let us know that that is one of the columns within our table and then we can press enter and we can type in our next column and let's start off with first name and just like the init we have to specify what type of characters are in it the init is integer like I said that's a number well this is a variable you know all those letters and so we have to type V chore and then we can specify the amount of characters that you can type within that and so the default is like 255 you'll see a lot of people put 255 so that's a good length for the amount of characters that can be put into it and then we can also specify that this column should always have information in it you don't you can't create another row unless information is in that field within that column so let's go type not null and that's what that mean null meaning not empty or blank and so we can type a comma at the end of it and let's go on and type in our next column which I go with lastore name and then same thing so V chore and then 255 and we can close that out and then not all as well for that one hit a comma and let's do one more and that'll be the birth date of our employee so that's just some information we want to put in there for this table or require for this table and then we can put dates and then we could leave it not and all off because we don't need the birthday I'm going just I'm just showing you guys that and then once it's the last one you don't have to put a comma at the end of it but we do have to press enter and close out these parentheses if you open a parentheses you need to close it so let's go on and close it right fast and then what is the last thing I'm sure you guys remember but is the semicolon that will close out your query and so all of this information here it will create each one of the columns within that table so it'll create the table and then it'll create all the columns within that table here so let's go and press enter and as long as you see query okay zero rows affected that means it successfully created that table and so now we have that employees table within the database we can check the structure of it to verify that we typed it in correctly by using the describe commands so let's go on and type describe and then our table so it is the employees table and of course at the end of each statement you have to put that semicolon at the end of it and this will give you information about this table so as you can see the fills we got our fills our different columns within the table and we got employee ID then it's uh integer and then null and then this is the primary key and then also this is auto increment you'll see that listed there and this will break down basically the structure of this table so this is what that describe is for now I won't go into adding data yet but I'll show you guys how to drop this table and with my SQL or with SQL the actual language that we're using drop is actually how you delete something within the database so let's say we want to drop that employees table that we just created so all we have to do is type drop and then we want to specify that we want to drop a table and then the table name so like I said employees and then type a semicolon at the end and this will drop that table and I forgot before I drop that table I wanted to show you guys something now so I'm going just press uh up arrow and find that create table employees table and I'm going bring it back right fast so let's press enter and of course that's one way of showing you guys you could type this out without the separate lines it's just easier to see if you put it on a separate line you see what I'm saying but you could type it out just like that the way it's listed there so I wanted to show you guys the show tables command and let's go on and type that in so show tables and like I said we're still using that DB name database and so let's go on and press enter boom and that will show you the actual table that's there and now let's go back and remove that table I'm going to drop it again so drop table employees boom and then we can run that show tables again and this will show you that there are no more tables on there so I didn't want to move forward without showing you guys that now the last thing I want to show you guys is how to actually drop a database and essentially that's deleting the entire database just like we deleted the entire table we can delete the entire database so let's go on and type that command in right fast but it's simply drop and then database and like I said it's just like a sentence and then we need to specify that database name so DB name and then semic at the end of it press enter and that will drop that database and now we can type show databases and then the semicolon at the end of it and press enter and this will let you verify that that name database is gone so you won't see it anymore so we get to go now be very cautious when running that command because it will remove all tables and data within that database so just be very careful with it okay so moving on to the next part of the course we need to have a database with lots of data so you can see examples clearly and I'm going to import a test database name to inlo and this is on GitHub and let me switch over to my browser so you guys can see the link and if you want to do the same you can find a link in the description to import the database and this database was created by bik base on GitHub and like I said I'll have the link so you can get here but let me just show you guys the directory structure so so they have a MySQL dump that you can import and this will generate a full SQL database for you it's called the employees database so if we go under MySQL you can see they have a postgress as well if you need a PO example but MySQL is what we'll be using and they have a data full or a data set full data set large data set small in the full we'll have the full amount of data which is the one I recommend you guys use they also have a large which is a smaller version of the f doesn't have as much data in it and then the small is kind of like a sample size of the data so you can use that as well it really doesn't matter just pick which one you want I'll import the data set full essentially what we're going to do is install this data dump it's a SQL dump and I'll get to this in a later part of the video where I show you guys how to back up databases and import databases or restore databases but this is the five whee import and let me go down and go here first and what I want to do is clone this repository to the server so we're going to copy that link and then go back to our Ser server terminal and exit out of my SQL so we could just type exit and this is a good time for me to show you guys how to exit you could just type exit and press enter and it'll get you out of my squel and and now that we back at the terminal we can go down and install get cuz we need get installed so we can just type P sudo dnf install and then get and press enter type in our Pudo password boom and it'll go through install G as well as all this dependencies and we type why for yes boom now go on and install get on our system and now we can get clone that actual repository and we don't need to change directories we can use our home directory and so all we have to do is type get clone and then we can paste that link and press enter and it'll clone down that actual repository for us and now we can import this test database so first thing you need to do let's LS right fast I show you guys the directory but we need to CD into that directory and we want to go into my SQL and then we need to go into the directory of the location of the size of the database that you want to in install so let's T it out right fast but there is that full like I said so that's the directory we need to go into now if you want to go into the other ones you just select large or the small one as well you can select that one as well like I said I'm going to do the full boom press enter and if we LS this directory this will show you all the files that are in there and it's so allow you to see the file that we want to import and we need to use Pudo cuz we're running MySQL under a regular account which is that Josh account so we get sudo my SQL and then what we want to do is use the left arrow and then the actual SQL file that we want to import or the database that we want to import which is that employees. SQL file so scroll on press enter this will take a little time because the full is pretty big it has about 300,000 records in at least in the employee table and so it does take a while let me go down and press enter we're going to need this in order so I can show you guys this information in a better way as far as running the queries and the different things I want to show you guys in the examples it's best to have a database with a lot of data in it and this is the quickest and easiest way to set that up and like I said this see that table right there it says loading employee that's the biggest table that's in there and it's going to take a while to actually import everything so I'll be back when it finishes and then we can log back in Sequel and go through the more of the examples all right so the import completed successfully it took about 3 minutes and 57 seconds and so let me show you guys how to test it right fast I'm going LS this directory again so you guys can see but there is a test file in here it's a md5 hash test so we can run this test by typing pseudo MySQL and then T and we need to put our left arrow in there again and then that testore employee md5 SQL and that will test the actual database and just make sure everything was imported successfully on the server so just go on and run it right fast and it'll have some output you got you guys will see and as long as you don't see any errors that means everything was imported successfully all right so the test is complete and we can scroll through this and just see that it it just verifies that everything is okay so all the records match you know what's supposed to be imported when you run this thing and as you can see it took a while cuz this Server doesn't have many resources assigned to it it would have ran a little faster if I had more processing power and probably a little bit more RAM on the system but it's fine it ran through and did it it's not affecting you guys that's watching the video it's only affecting me cuz this is the computation time that it took all right so let's go on the CD right fast just to get out that directory we don't need to and I'm going to clear again and let's go on and get back in our my SQL database so typees sudo my SQL dasu for user and we want to go back into that root account and d p press enter it'll access for our shudo password boom and it'll access for the password for the rout and if you guys remember from earlier there is no password set for the root account so let's press enter that'll get us in MySQL and then what I wanted to do was show the databases so that same command we ran earlier so show databases semicolon at the end press enter and we'll see that new database is added to our server so we got the employees database so now we can move on to the rest of our examples of how to to manage my SQL all right so the next section I want to cover is managing user accounts in my SQL and this is a very important section because this basically manages how people access your MySQL server even applications how those applications connect to your MySQL server as well as the databases in it and so the first thing I want to do is show you guys how to create a new user account and this allows you to control who has access and can manage your databases and and and so it's not that difficult of a command and it's just like I talked about in previous commands it's almost like writing a sent and so all you got to do is type create and then user and then we have to put the user information in there so we have to put it in single quotes So the name first so let's just name this DB user and then after that quote we have to put an at because you have to say how you want this user to connect to the server and you put this in single quotes as well and this is considered the host name and most most of the time you will see Local Host which is what I'll use currently and that basically means that this user can connect to this my SQL Server via Local Host so you have to be connected to this server in order to access this my SQL database and then after that you want to give it a way to access the server and that is via a password so identifi so you have to type it in properly just make sure you type it in properly because I used to spell this incorrectly a lot of times and I ran into errors but it's identified by and then our password which I'll just put password to three and then close these single quotes and then after that for our SQL statement we have to close it out by typing a semicolon at the end of it and this will create our new user account as you can see long as you don't run into any errors it says query okay zero row is affected you're good to go you created that user account and like I said earlier this command sets up a user account with access limited to the local host meaning that the user can only connect to mySQL server from the same system where MySQL is running and I just wanted you guys understand that because if you want to Grant access from let's say another host and you have to replace that Local Host with the remote machine IP address so let's say you have an application running on a application server and you wanted that user account to connect from that application server cuz let's say this user account is what allows that application to connect to the my squ server you have to put that IP address of where it's connecting from otherwise it won't have access it'll just have access via Local Host like it states now there is a wild cord and the wild cord it will allow access from any host and let's go on and type it out again so create user and I'll create another user account so let's put it in single quotes So DB user 2 and this is a totally different account press the at symbol and then the host we wanted to be able to connect from I'll use that wild cord and wild cord is the percent sign and so that's uh shift five and then we have to close those single quotes and then next let's put identified by and then we put our password so I'm going to use that same password one two and then our single quote to close it out and then our semicolon to close that query out and let's press enter we going run into any issues we typed everything correctly and this is considered that wild cord now let's say you need to change the SQL user accounts password well let me walk you guys through that query right now and it's using the alter command and the way you do it is by typing alter user and like I said it's just like a sentence so alter user and let's say we want to alter that DB user that first one let's say we want to change it to and then we have to type it all out just make sure you type it all out Local Host then single quote and then identified so that's basically all all you doing is typing it out the exact same way we did to create that user but you're using alter so identify by and then we just type in a new password so let's go password 456 and let's close out those quotes and then the semicolon at the end of it and press enter and that will alter the password for it and like I said as long as you don't see any errors you get to go now another command I want to show you guys is how to list out all the MySQL user accounts and there are some builtin user accounts you obviously got that root one and you got a couple more and you guys will see them once I type in this next command so we're going into select statement so select user and then comma host and basically we're selecting two columns within a specific table and this is from the MySQL do user table so let's go on and uh put that cic colon at the end press enter and it'll grab those two columns for us and as you can see we can see all our accounts that we created even the new ones that we just created so DB user is only accessible via the Local Host and DB user 2 has that wild card there and just to show you guys the other accounts that are there so my. infos schema I don't recommend you mess around with any of these Accounts at least until you understand fully what they do but these three accounts are systems accounts and then we got our root account as well which we're logged in using that now the next step is deleting those user accounts so let's say we want to delete the DB user account so it's the same as with tables and databases is the drop command and so drop user and then the user account so we have to put that in single quotes and it's just like when we created it the exact same format so DB user and let me move the cursor out the way and then close out that single quote then at and then open up a single quote let me close it right fast I always do that that's just a habit but Local Host and then we go back to the end and type that semi colon at the end and press enter and that will drop that so let's press the up arrow and go back in here and select those user accounts right fast from that MySQL users table and you'll see that that DB user is gone from the system now let's test out this user account that we still have available on the server and so what I'm going to do is type exit that'll get us out of that roote account and let's run the MySQL command but let's log in using the DB user 2 account and so you basically type it in just like we typed in for roots press enter and then type in our pseudo password for our Josh accounts just make sure you understand that it's going to ask you that for that password twice let's go down and press enter and then now it's going to ask you for the DB user 2 password which we set when we created the account and that password was password with a capital P and then 1 2 3 and press enter and that allow us to log into my so now let me show you guys some of the differences because right now this account doesn't have any permissions to any databases on the server so let's run show databases and then semicolon at the end and you guys should see the difference we only see two databases and these are the schema databases that are built into my SQL and so that lets you know that this user account doesn't have access to any of the databases on there and so I want to go into the grant section of managing these user accounts so let's go on and exit out because we need to add some permissions to this account so they can actually see the databases or do certain things to the database like select statements and all that good stuff so let's go on log back in using our root accounts type in our password which is nothing and let's go on and show that those user accounts again on the system so select user and then host at that my SQL do user database that way we can have a reference when we're typing everything out so what we want to do is Grant privileges to that user account so all we have to do is type Grant and there's a whole bunch of privileges that could be set for a user account there's all privileges you can set certain things like alter they can only alter a specific table they can create tables create databases that's to create privileges but what I'm going to do is just do all privileges just show you guys the base level of actually giving an account and actually that's not the base level I recommend you give the least access that a user needs so if they only need access to a specific database and they only need to let's say select certain things then you want to just give it select permissions you don't want want to give it a all privileges if it doesn't need it for that account but like I said I'm going to just do all privileges just to make it simple just so you guys can see but I recommend you guys look at all the different types of privileges so you can understand them and give the least privileges needed for the account so privilege and make sure you type it in right but that's Privileges and let's say we only want to give them access to a specific database well you put on that database name and we'll use that employee database it's employees and you want to give it access to all the tables so you just put a period and then the store at the end of it that's like a wild cord for all the tables under that database and now we have to put in the user account we want to apply this to so that's why I say it's like a sentence you know what I'm saying Grant all privileges on this database all tables to the user account and so that user account is the DB user 2 and then at the single quote and then wild cord single quotes and then our semiot in and press enter and it will grant those privileges now let's go on exit out again cuz I I just want to show you guys but if we log back in under that user account that we created so password 1 2 3 Center skip back in it and let's run that show databases command and see me coling at the end press enter as you can see we now have access to that employees database let's go on exit out and get back into our root account but I just want to show you guys that's how you grant those privileges now let's say you want to Grant all priv is on all databases let me go back up here to that and all you have to do is put in a wild cord so the wild cord in front of the period and that specifies all databases and all tables under each one of those databases and so we got all those permissions now so we can exit out and then log back into that account and type in our password again and press enter and then let's show databases and this is something you definitely don't want to do I just want to show you guys that you can do it you see how you can see the other SQL database on here like before we couldn't see my SQL or that CIS database now we have access to see pretty much all databases and all tables and let's exit out go back into our root accounts boom and it doesn't make sense to go through everything so I'll just show you guys a few other things let's say you wanted to go employee database and I know one of the specific tables in there is department and so employee Department you only want this user to have access to just that database with that table you only want that user to have access to that specific thing like I said you can narrow this down you know deep so people only have or user accounts only have access to specific ports of a database this can be accomplished by typing out the commands like this and then I won't run this I'll just go back in let's put a store in there cuz I wanted to show you guys something else but let's say you instead of graning all privileges to This Server we can go back in here remove those privileges and we can add a whole bunch of other privileges so we could just do select let's say you want to do a insert and then you can also put like delete and then on you know this database and all tables so you can narrow down like I said even more with this grant command and let me just go to run that and just see what happens and let's actually exit it out I want to see what it looks like uh when we go over there boom I want to see if it removed all the other privileges so let's log in and then run these databases and semicolon boom and we can see all the table so it still has those permissions for all the databases so you might want to run a revoke before that and then run it so it specifies okay that makes sense so it still has that those settings still there for all privileges all tables so let's exit out and now let's walk through how to revoke permissions so this is an important part you want to revoke permissions or at least understand how to revoke voke all privileges for a specific user and we'll go through and do that for this account and let's go back in here and select all the user accounts I always like to do that so I can have a reference when I'm typing out things so I don't mess up misspell certain things but the command is revoke and revoke all privileges on and I'm going actually put store there as for all databases and then period all tables and then from that specific account which is our DB and forgot about our quotes but yeah single quotes in there make sure you type that in and then this this one has the wild cord on the end of it so we'll type it out exactly how it is up there so from that user account on this server so let's go on and press enter and we forgot about our semicolon so if you do forget about it it'll bring it up on a second line you can just type in the semicolon press enter and it run the query and so let's exit out again I know I keep jumping back and forth but I just want to verify a lot of this stuff and that I'm showing you guys the right thing and I want you guys to follow along so you can get used to it cuz once you start typing these commands out you get the hang of it you know fairly quickly so let's go on and type out our show databases again and then put that semic colon at the end boom you'll see we don't have access to any of the databases on the server and then let's exit out and what I want to do is show you guys something else after this let's log back in our root account and Grant some privileges again and I want to get real specific with this account and that way the next command I show you guys will make a lot more sense and so let's grants and then select and let's also do that insert as well and then the delete on the employees database and let's get that departments table within that database and it's not a s now that I think about it it's not a s and then let's hpe two and then our user account which is that that DB user to and then at then a wild card and then the see me coling at the end and press enter and it'll Grant those specific permissions for that user account and now let me show you guys the last command which is the show grants so we can show all the grants that we have for a specific user so and let type it in correctly and we have to type in that user account the exact same way so DB user 2 and then at our wild cord and then the semicolon at the end and press enter and this will show you the specific permissions that this user has and as you can see it has Grant select insert delete on the employees database and then the departments table for that user so it's very specific you can get very specific with these privileges now this next section we'll be diving into queries and this is where that employees database will come into effect and I'll show you guys different types of queries throughout the demonstration so first thing we need to do is Select that database that we want to use so first off let's show our databases and I just want to get you guys in the habit of actually doing this but show databases semicolon at the end press enter that will show us all our databases that we have on the server and what we're looking for is that employees database and that's the one we want to select by using the use command so use and then the database name so employee and then let's put a semicolon at the end press enter and now our database has been changed to the employees database that's the one we are currently using now the core of quering data is the select statement and it retrieves data from tables and you can customize what you want to see now first first off we need to find out what the tables are in the database and we can go back to that command that says show tables and then semicolon at the end press enter and it will show us all the tables within the employees database and now let me show you guys the basic structure of the select statement and all we have to do is type select and then we'll start off with store which is for everything is pretty much the wild cord for all columns within the table and then we want to specify that table so from a specific table so we can pick one in here let's start with the Departments table and then put a semicolon at the end press enter and that will list out all the data within that table and you can do this for each table within the database and so let's look up here we have another table and I'll start with the employees one as well so there's the employee table as well so let's run that select from but instead of selecting the department let's look at the employees and let's put a semicolon at the end press enter and you'll see it'll pull up a lot of data this table has about 500,000 records within this one table and that's representative of all the employees within this organization and so that select statement will pull everything with that store wild cord in there in the select statement now let's say we want to look at the first 10 rows of this table well we can limit the results that are put in front of us by using the limit Clause within our select statement so we can go to the end of this select statement and we can limit the results to let's say 20 we only want to see the first 20 records so we can go down and press enter and this will limit the results and you'll see that we only have 20 rows pulled and like I said this is just a way of limiting it really for you guys that are watching this video so you guys can see less data on the screen now let's work on work on these columns let's say we only want to see specific columns so certain data we only need for whatever we're running this select statement for and so let's go through and let's hit the up arrow and I'll be using the up Arrow a lot and this allows me to run previous queries but let's say we don't want to pull all those columns like I said you can specify specific columns so let's say we only want to look at the employee number and the first name and the last name so we can type empore number and then we put a comma behind it and then first uncore name and then let's let look at the last name as well so lastore name and then we can press enter we don't have to put a comma after that that is the last column that we want to pull and also let's change the limit as well so I can show you guys the information right on the table so it doesn't pull in too much too much more information let's go down hit 10 and press enter and boom as you can see it only pulls in those particular columns that we specified in our select statement so employee number first name last name and there you go within the table so employee number first name last name boom now one other thing with the select statement you can pull in this information in whatever order you want to and what I mean by that is the columns let's say we don't want to see the we want to see the employee ID after our first name and last name so let's go back to the end of it put a comma and let's pull in that employee number and let's pull it in that order we want to see first name last name or actually let's do it a little bit different as well we can do first name name right here so let's put a space and go first underscore name and then put that comma there and then let's remove the first name up here at the front and we want to pull last name first name and then employee number so let's go on and press enter and as you can see it'll put it in that order for us so last name first name and then employee number at the end now let's say we want to filter the data and I don't know how many results will come up let's say if I select a specific name so I'm going just select one just to see and I want to see how many employees have this same last name so bam Ford and I know this is a fake name but there is a way of filtering and this is using the wear clause in our query so we can up arrow and then let's go back in here and put the store let's remove the columns put the store in there for the wild cord from employees and then where we want to type the wear claw in there so let's take this limit off we I'm not going to use it I'm going to see what pulls up but where the last name underscore and we need to put a equal sign in it because we're searching for something specific so we're searching for the last name to be a specific variable and so let's put it in quotes and let's uh paste it in there right fast I don't think you guys can see that but bam forward we want to look for people with the last name of bam for within the employees table so let's go on and press enter and see how many results we get and we get a whole bunch of results so it's 178 rows that have that meet criteria and that's essentially how you filter using the wear claw and then we can filter this down even more let's say we want to look for all the females that have the last name banford so let's put the up Arrow up there and then after the banord we could put another clause which is and so and the gender equals and thenone want to specify female so let's put it in a single quote as well so with a capital f and boom we are good to go let's see see what it pulls up and it pulls up everybody that has the last name of banford with the gender of female so that's super cool and then you could specify that query you know columns if you want to you can go in here and pull in the last name and then the first name and then the gender and then let's go down and pull in an employee number as well so and let's go down press enter and boom it'll pull in just those four columns that we wanted as well as searching for that specific criteria so we got our last name of B of bonford and then all female employees with all the columns re requested to see and then you can modify it you can change this to let's say male we want to see all the male employees like that and as you can see it pulls in you know specifically males for this these results and it's 103 males versus 75 you know females so let me show you guys another option you can run with the select statement and that is the order buy and first off let me run a normal select so nor select store from the employee table and semicolon at the end press enter and I will pull in all the information and what I wanted to do is look at this column right here this is the actual hire date of the employee so let's say we want to order the results by that hire date and let's look at the oldest employee up to the newest employee and so let's run and select again but let's limit it to just 10 and I'm only doing that so you guys can see a little clearer so that shows pretty much the first 10 records or the first 10 results and their hire date and like I said I want to show you guys the order by clause and so we can type that select store from employees I'm going to leave that limit there but the other option is order by and it's two words and what we want to order it by is the column so that's the hire date so let type hore dates and and press enter and as you can see it'll pull up the oldest dates and so that's 1985 January 1st and it goes up from there so these are our oldest employees and the reason we know it's going up because the next employee on a different date that was hired is January 14th so 1985 so it'll go up from there and I don't want to I just want to limit the results so you guys can kind of see it in that order and you can order it by a specific column A lot of times you want to look for that and then also so you can do the exact same thing for this this is another date column but there is a birth date and so we can change that up and not use the higher date but instead of that let's look at the birth dates and this could be for let's say HR purposes or something to that effect let's say you want to look at the birth date of all your employees for whatever reason you can order you know all the results by those dates and then you can also throw your filtering in there with the wear claw so go on press enter boom and as you can see that's our oldest employee right there or a couple of our oldest employees right here that have the same birth date which is February 1st of 195 is what what's that about six employees that have that same birth date and so this is a good reason to show you guys another way of filtering by using that wear clause and let's say we were looking for all the people with a birth date but in just the year of 1950 so we can go through and just search for specific people with a birth date of of 1952 and let me show you guys that break out this order by let's remove it and let's use our wear claw so let's go wear the birth dates uncore and there's another clause in there you can put and that's like and this allows you to search for text that match but also have different things either in front of it or behind it and what we're looking for is that year two and so we have to put it in single quotes so single quotes and then there is a wild cord of the percent sign so anything before which it doesn't have anything before we really don't need to put that there I just wanted to put it there so you guys can see but's say it put that wild cord at the end of it so anything after that as well and then the quotes at the end of it to close it out and let's go on and press enter boom and that'll pull in all the employees with a birth date in within two now let's explore how to add data to a table and first off let's show the tables again right fast so let's go show tables semicolon press enter and what I want to do is look at the Departments table cuz that's the easiest one to work with when it comes to inserting data and let's run a select on the Departments table right fast select store from departments and then semicolon at the end press enter as you can see we only have a couple records so nine rows so let's say we want to add a new Department well to insert new data we have to use the insert into statement and so let me give you guys a quick example we can run through and type inserts into and then we want to insert it into the department table and then now we have to specify our columns so we have the department number and the department name so we need to put parentheses in here and this is to specify our columns so let's start off with the first one so department so dtore number and then put a comma after that and then a space and then the department name so D _ name and now that we have our columns selected where we want to insert data we have to type in the values that we want to put into each one of those columns for this new Ro that we're adding so values and then we have to put it in the same order as they're represented up here so our department number and Department name and we just put those values and we have to put them in a single quote so let's put the first one in which is our department number and as you you can see the next number is Department 10 so let's put D 010 and that's Department 10 and I know you guys can't tell but it's out of order but Department 9 is the highest one so I want to go with Department 10 that's how I figured that out but let's put a comment in here now let's add our department name and let's say this is the technology department so or information technology whatever you want to put in here you want to put it in quotes again sorry about that I didn't put the quote in but put it in quotes and then close out our parentheses anything you open you need to close and we close out that parenthesis and then put semicolon at the end and this will insert that data into the Departments table so let's go on and press enter boom query okay one row affected and now let's select from that department table again and you guys should see our new row which is our technology R so D 0000 and that's thep the technology department now let's say we made a mistake while inserting that data into it well we can use another statement which is a update statement which will allow you to make changes to any of the data within the table and when you're building out this query you want to make sure you find some form of a unique identifier that's why majority of tables will have a primary key or some type of number that identifies that role especially if you don't want duplicates within the table and so our unique identifier is the deportment number because that's different per row that's in the table and so we'll use that as our wear Clause when we type out our update query so let's go on and break this out so let's type updates and what we want to update is something in our departments table so update department and let's say we want to change the technology to help Des so we have to type set and then Department name or the column that we're looking for which is that department name that we're changing so Deport uncore name and we want it to be so we can do equals and we put it in single quotes so let's say we want to change that to help Des so the help desk Department if you you know I'm just coming up with something but we need that unique identifier so where department number equals and we can put this in single quotes this is just basically to search for it but the d010 and then let's close it out with semicolon and then updates that department name where the department number is the 010 so scroll on and press enter and that should make changes to it so as you can see right there it says rows matched and then rows changed and no warnings as long as we don't see any warnings or errors we get to go so let's go down and select from that table again and as you can see we have a help desk department now and that's d010 now let's say we want to delete that row that help Des row we just created so there is a statement you can run and that is the delete statement so let's go on and type this out so delete and then we want to delete from the Department table so we have to type that out and then where the department and I already know what to use I'm going to use department number because that's our unique identifier and plus it's super short and specific as far as the department number and there's no other number like that so you can't make a mistake but department number equals and we use that exact same format so single quotes and then d010 and then put a semicolon at the end but that will delete that Row from the table so boom and as you see query okay and then we can go back in select from the Departments and you'll see that help desk is gone I know it's kind of hard to see because it's not ordered properly but yeah help desk is gone from this table so the next thing I want to cover is primary keys and foreign Keys now first off let me explain what a primary key is a primary key in my SQL is like a special idid for each row within the table it's a unique number or code that helps you identify and organize the data so if you think about it it's just like your fingerprint is unique to you a primary key ensures that each row within a table is different from the others and this makes it easier to find and manage information within a database and let me start off by showing you guys a primary key right fast which I showed you one earlier in the video when we created our first table but let's show you the primary key within one of the tables within this employees database that we're looking at now so let's start off with the employees one by running the describe command and this will basically give you the information about a particular table and let's type employee and then semicolon at the end press enter and like I said this will give you all the information about this table and as you can see right here under key this column right here it says Prime that stands for prime primary so our employee number is our primary key and typically the data type is integer and it's and pretty much a primary key is unique so this number is different for each row within the table now let's talk talk about a foreign key and a foreign key is like a bridge between two tables it helps one table understand information from another table so for instance this employees table and let's say the Department's table well a foreign key in the employees table links to the Department's table showing which department each employee belongs to and it's like a connection that keeps data organized and related between tables and what I want to do is create a foreign key using both of those tables and let's describe the Departments table right fast so you guys can see the information about that table as well and departments and then semic and press enter and it'll describe that table as well and as you can see the primary key is is the department number and so what we want to do is add the department key which is that primary key or the department number to this table and that way we can have a foreign key or a foreign connection between the department as well as the employees so each employee will know what department they work for and so this is a great example and the first thing we need to do is add another column here because you can't use a column any of the columns that are already there cuz they already have data in it so you need to add another col colum to this table and what I typically do when I'm adding a foreign key I'll use the same field name that way you don't get confused with it and so let's go down and alter this table so alter table and then we want to alter the employees table and what we want to do is add a column and I haven't showed you guys this yet but add column and then what we want to do is specify the column name so we want to add department number and then we have to tell the character type and that's why I described this table as well the apartment's table the apartment number is Char so characters and four characters so let's go down and put the exact same thing so chore and then in parentheses we can put the number four in there so four characters and let's go down and put a semicolon at the end of it and this will alter that table boom and we're good to go so query okay you know zero rows affected and then let's describe our employees table again let's go back in here and look at describe employee boom as you can see we have a new column in there it's that deportment numbers it has that same data type which is TR 4 and I put in there uh yes I left it yes as it could be no and the default is no and now let's go down and alter our employees table in order to make that a foreign key and so let's walk through this we can type alter and then table and then the employee table and what we need to do is add a constraint and you can name the actual foreign key and that's what this line actually means so add constraint and let's name our foreign key let's name it uh foreign key let's see uncore departments underscore number and so I just give it something unique forign key so that FK and then underscore deportment number that's the name of our constraint and then let's press enter and then let's add our foreign key so let's go foreign key and then we have to specify that column within our table our employee table and that is the department uncore number and let's go down and close that out press enter and then we have to reference our forign key so the reference is going to be in our deportment table so we have to type references and then deportment and then specify that column as well which is basically the same so department uncore number and let's go down and close that out and then we put our CA colon at the end and let's press enter and it should add our forign key and as you can see that kind of took a little while it was about 53 seconds that it took almost a minute minute because of the 300,000 rows that it has to go through and basically it's just updating that column and marking it as a foreign key location now let's go to and run a quick select right fast so you guys can see that column in action so select store from our employee table and let's limit it to 10 cuz I don't want to see all those rows let's go on press enter boom and as you can see we have that department number column and then also let's describe that table as well so let's go in here and look at our employees table again under the describe and as you can see it is a foreign key and just to explain what this means right here it says Ma so that basically means multiple and this is our foreign key so that means that multiple occurrences of a given value are permitted within that column so that's essentially what that means now next I'll run a quick query and this is a update query it'll actually take me a while to actually run this because I'll do a update and what I'm doing is grabbing random deportment IDs and dropping it into our employees table under that new department number column and this is so I can next show you guys how to work with joins so you can follow along if you want to if you don't this will take some time depending on the resources on your server because it has to go through 300,000 rows and update them so what I want to do is update the employee and what we want to do is set that appartment number within that table and we want it to equal some information that we select basically and this is basically a nested query so to speak so I'm going to just throw this in there and that's to open up the parentheses for the other query and what I'm doing is a select and then we want to select that deportment number and what we want to select it from is the Departments table so let's press enter from Department table and we want to order it because there's other options like I said I didn't go too deep into a lot of these options but there are plenty of options out there I didn't want to it'll take me all day to go through all the options that you could do within a select query I just wanted to show you the base level and then you can build from there by looking at the documentation and what I want to do is use a variable that's built into my SQL which is called random and so r a n d and then we put the parentheses at the end of it it'll basically pull random deportment numbers for each row within this table and so let's type a limit in there and we want a limit to one and then let's close out our top parentheses up here anything you open you must close so close that parentheses and then put our semicolon at the end and like I said this is going to take some time and if you want to just pause the video that way you can copy this and that way you can run this query as well to update your employees table with a random deportment number so let's go on and press enter and like I said this is going to run for a little while and I'll be back and it should tell you at the end of it how long it took me and let's compare times be right back all right cool so that wasn't too long it was uh 35 seconds so 35.2 eight let me know if you beat my time down in the comments but it updated each one of those rows with a random department number and let's verify this by selecting store from our employee table and semic calling at the end press enter and it'll give us our results and as you can see it has a random department number throughout the whole table and so that'll allow me to show you guys joints now one other thing I did was I went back and ran another query that'll change some of the department numbers to null so that way the inner joins and the left joins and all that stuff will show properly so you guys can get a good example of how they work and so let's start off by explaining what a joint is it's like bringing two tables together to find related information and there are three types types of joins and the first joint I want to show you guys is a in joint and it shows only common data between both tables for example if we join that employees table and the Department's table using the department number which is our foreign key within that employees table we'll get a list of employees belonging to specific departments and so it'll exclude all the rols that have null in in it it doesn't have a specific Department in it and let's go on and run a enter join right fast and let's type select and I'll put this stuff on multiple lines so select store from employee and then what we want to do is a inner join between two different tables and the other table is our department table because they both have something in common which is that department ID and so we have to specify that so hit on type on and this is basically a injin in departments on these specific column so let's type employees first which is our first table and we want to match our Department's number column within this table so let's make sure I type it in correctly so Department no and then we want to make sure it equals the department and then department uncore number and then let's close out our query and press enter and this will give you a good clear picture of what it actually does so what it'll do is it'll bring in all the information from both tables so we got our employee the ID we have that date of birth we have that first name last name and then their gender and then their hire date and then we also have that employee ID and we have it twice and this is the one represented within our employees table and then this one right here is the representation of the one in our department table and then ourselves so that's considered a inner joint and basically it's joining on those two columns just matching them up and one other thing I want to point out as you can see the row amount it's actually 300,000 rows within there but some of them are set to null or they have null within that department ID and so they're excluded and so that's what makes the difference between a inner join and a left join and a right join the inner join will only bring in roles that match 100% so if this doesn't have a department ID it will exclude it from the results and let's run this query again right fast and let me show you something a little bit different so we're going to run a enter join again and this applies to all the different types of joins a left join and a right join as well you can select specific columns and so let's say we only want to see the employee number so let's put that there and then the first name as well as our last name and then the department that they work for so this is from that other table that is joined so let's type department and then underscore name so we want to see their employee ID or employee number their first name last name and then the department that they work for and we don't have to put a comma at the end of it and let's go on and press enter and that should pull in just that information that we requested and as you can see you don't have to see that department ID you can just see the department name and that's a great way of organizing the results and using a join to bring in information from other tables now a left join this type shows all the data from the left table which is our employees table and only matching data from the right table so it'll list all the employees and their departments if they're available so this is where we'll bring in those NS because certain records won't have a department ID but it'll still bring in those employees and it'll just show null next to it so let's go on and do a left join right fast and all I'm going to do is go over here I'm going leave everything the same and we're going to type left here and like I said it's going to pull everything from the employees table and it's all based on that department number you know all that good stuff so let's go down and run it again and you'll see that it'll pull in all the records and then you'll start seeing all the NS in there so this will bring in all our employees and it'll also show you the ones that have an employee ID associated with it it'll show that employee name as well and then n for the ones that don't have one so that's what a left join will do it'll basically bring in all the records from the left table and then the information that's related from the other table instead of excluding all the NS or the exact matches and then the right join is the exact opposite it'll basically display all the data from the right table and the matching data from the left table and this will give you a list of all departments and their employees if any and so this right join it may look a little weird let's see let's actually see what happens but let's go right and this may not work too well well and this is based on my mind just thinking through what it will actually show so let's go through and look at it right fast and it's it kind of looks like that inner join because it'll only bring in records from that table that match so that right join won't really work for this example but you can see it actually works it works it pulls in only those that match the right table which excludes all the dos and so that's pretty much how to use joins in my squel all right so let me show you a little bit more Advan of a view and I'll just kind of type this one out so you guys can see but first let me explain exactly what I'm trying to do so if we select our departments table so select store from department and then semic colon at the end press Center boom let's say we want to add into this table the amount of employees that are in each department and so you could do this or accomplish this by using a joint and essentially what we'll be adding is another column here from our employees table that will count the amount of employees that fall under each one of these departments and so me go on to show you guys how to do this right fast and we can type select and then department. department number and this is a way to drill down to all of the columns that we want to use within this table we can specify it by putting the table as well as the column and so sometimes you have to do this because if you leave it kind of generic especially when some of these tables have the same column title you have to kind of specify it like for instance the employees table does have that department number column in it so you want to specify it and then let's do Department table again and then we want to get that department name and we need to put that underscore in there and then now we'll use a builtin variable in order to create our third column here and what we want to do is count and you have to put the information within par parentheses that you're trying to do as far as the variable what it's actually doing so we want to count the employees table and then the employee number column so empore number and now we want to continue out our join so as number and this is what we want to name it so we we're naming this column as num of employees so we type that in and then we want to catch that from the Departments table so boom and now let's build out our join so let's do a left join and that way it'll pull everything from the Department's table and then all the information that matches within the employees table so let's go employee and then on and then we specify what we need to match and then that is the department. department number and then we want that to equal our employee table and then that department number that we have in there soore number and now let's add a little more in here let's Group by Department's number and then departments and that is the department name that we want to do so we want to group it by that so let's go on and close it out this query should run perfectly as long as I didn't type it in incorrectly or type anything incorrectly but we can go back and check if we need to so let's go on and press enter see what happens and yes it worked correct so we got our department number we got our department name and this is pulling the number of employees from the employee table that fall under each one of these departments and I kind of just wanted to show you guys something a little bit more complex and what you can actually do with these joins all right so let's talk about views in my SQL and Views are like a saved query that you can use to simplify your data retrieval and it's essentially a virtual table created from one or more existing tables it doesn't store data itself and so views allow you to see specific data from your table without altering the original data and one thing about of you is it's constantly updated and it's all based on the data in those original tables so if you delete data in a specific table that's associated with a view the next time you run that view it will show you the updated information for that table and it's all based on how you run the query within the view and so let me go down and show you guys a quick example right fast and let's just start with the basic syntax and that is create View and like I said I've said throughout this whole course that these queries sound like sentences so we want to create a view and we want to name that view so we want to name it whatever we want to name it so I'm going to name this one employee gender because I want this view to be specific to the genders of the employees within the table and then we have to type as because this is the query we want to run every time we run this View and so let's type select and then let's look at the first name so of that employees table and then and the last name of that employees table and then also the gender and then let's press enter and then we want to specify what we want this information pulled from which is the employees table let's put a semicolon at the end to close out our query press enter and it will create our view long as you don't see an error that mean the query was okay it ran successfully it created that view now let's run show tables that way we can see the actual View and it looks as though it's a table and I'll show you guys that second so show tables and press enter and as you can see we got our employees gender view there now it doesn't put anything next to it or it doesn't show in any way that it's a view the only way you can kind of see it is if you're in let's say MySQL workbench you'll see it'll show up under a different section when you're connected to the database but we know that it's a view and so you can interact with this just like any table and so let's go on in and type in our select statement and store from and then let's select that view so employee uncore gender then see me coling at the end press enter boom and that's our view and it'll pull in all the data and it's all based on what you put within that query for the view and it'll always show that information the exact same way and then let's say one of these employees is removed from the original table then it will update this view automatically you don't have to update in two different places like update in the original table and then update Within the view the view will automatically update based on the original table and data so let me show you guys how to drop that view so let's run show tables again and it's essentially like dropping a table so let's go show tables and then all you have to do is type drop View and since we know that's a view you know tables won't work so if you if you type drop table that won't work we have to drop view because we know it's a view so drop view then employee gender and then semicolon at the end press enter that'll drop that view for us so we don't we won't see it anymore now let me give you guys another example and we'll look at a different table because I don't like using that employees table because of amount of data that's in it let's focus in on the Departments table and let's just run select right fast store from department and then semicolon at the end press enter boom and as you can see that's all the data within there let's say let's add a column to this table and you guys remember the alter table command so let's type alter table and then department and then let's add a colum so add column and then let's create a email column and let me tell you how this makes sense so let's say each department has an email address that's associated with that department and typically what that's called is a distribution list so each department will have a distribution list and so when someone sends an email to that distribution list it will send send a email to all the employees that work for that department and so that's the concept behind what I'm doing so let's add the column and let's call it emails and then let's specify the type of data to be stored in that column so let's go vure and then let's give it about 50 characters cuz like I said it's it's a email address so it probably shouldn't be that long you know what I'm saying so 50 characters should work so let's go and press enter boom that'll go down in create that column for us and then we can at the tables again the deportment table and press enter and as you can see we have that column now and so let's add some data to this column and I'm building this out you'll see once we get to the view section what I'm actually doing and so let's update the data by adding a email address for each one of the Departments so let's go update the Departments table and let's set our email for the first one which is marketing to equal and we can put those single quotes in there that way it'll add that information in there for us and let's go with marketing atcom and so that's our distribution email address and then we have to run a where in so we can specify where that needs to go cuz right now it doesn't know where to put that information and we want to put that under the marketing department email address so we could go where department number equals and then we want to search for one so d001 and we know that that is the marketing role and so let's put a semicolon at the end and press enter and that should update that Row for us and let's just run a quick select all right fast select from departments boom and as you can see we got our email address in there for the marketing department and so I won't bore you guys with watching me do this I'm basically going to run the last command multiple times just updating and adding an email address for each one of them so I'll be back when this finishes all right cool so I updated the table let's go go on and run a select again so select store from department and press enter and as you can see we have an email address or a distribution email address for each one of the Departments within our organization now let's go down and create another view so let's type create View and then we want to call this view deportment email so that's our department email and we want to set our query as and let's go on and type it out but let's type our select and then let's pull in just two columns within here and let's look at the Departments uncore number and then also let's look at the email and then we want to do this from our Department's table boom and press enter and it'll run that query it'll create that view and so let's go show and then you'll see that we have our department email view there and let's go down and select that view right fast so select store from Department _ email and semicolon press enter and that is our view that we created now here is the full example so let's go into let's actually inser insert some more data into our departments tables like a new Department similar to what we did earlier as far as adding let's say a help test department so let's gooll on and write out a quick query to insert into department and this will add us some data in there so department and then specify those columns that we want to update or input data in we have to put those in parentheses so departments uncore number and then departments uncore name and then we want to use our new column which is that email column so let going to close out our parentheses and then let's type in the values so values and then let's put those in quotes so let's create a new department number Department 10 so 0 one 0 Let's close out those quotes and then let's name let's give it a department name so our department name is help Des we'll just use that same one we used for so help des and then the email address is we can name it let's say help and also let's make sure we add our quotes I don't want to forget that so let's put our quotes in there and then let's put our quotes for our email address as well so let's name it help at abc.com close out our quotes close out our parentheses and then put our semicolon at the end of it and press enter and cool so we added that new line in there and let's run a select of our just the normal table so from departments and just to show you guys that the information has been updated so help des and then it we added in that email address for the help Des department or that distribution list and then as you can see this is our view so we updated it just in our Department's table and so with our view I'm going just run this same select query for our department email View and you'll see that it'll update based on what's in the original table so we don't have to updated in two places that's the whole purpose of me showing you guys this exercise so as you can see we got the help Des change that we made to the original departments table so hopefully that gives you a better understanding of how views work and it's the same way let's say we removed that column out of there it will update our view as well all right so the next thing I want to cover is indexes and a index is basically a quick reference for your database and it helps speed up data retrieval it's a structure that organizes data in a way that makes searching for specific information much faster so think of it as a index in a book that tells you where to find a particular topic without reading the whole book so let's go through a few examples right fast and first off let me show you guys how to see the indexes that are currently there for a particular table and what I want to do is look at our employees table so all we have to do is type show indexes and then from from a specific table which we will look at the employee table and just put a semicolon at the end press enter and this will show you all the indexes and there currently are two indexes on the employees table currently and the first one is associated with the primary key and the second one is the foreign key but let's say with this table we do a lot of searches by last name well we could create a index to structure and organize that data to make it searchable a whole lot faster and so let me give you an example of creating that index and all you have to do is type create index and then you want to name that index and what I typically do or the format I do X and whatever column I'm working with so last name is what we want to search so or what we typically search a lot and then now we have to specify the actual column within the table we have to specify the table and then the column so all we have to do is type on our table which is that employee table and then we have to specify the column and we put that in parth pares so we can go back in here and type our column name which is last name and then put a semicolon at the end press enter and that will create our index it takes some time depending on how big the data is cuz it has to structure it but as you can see that query ran successfully and it created our index now let's go back and run these show indexes for employee and let's see our new index that's in there and as you can see it's the idx last name that's the name that we gave it and then it looks at that last name column within the table and so let's just run a quick query right fast and you guys may or may not see a difference when we last ran the select on the employees table because it's all dependent on the amount of data that's in the database whether this will benefit you or not and then how often this information is updated as well as searched so let's type store and then from employee and let's put a wear clause in there so wear last name equals and let's look for a employee last name of bass I know that's one of the names in there so let's type ba a a z and then close that out and then semicolon at the end press enter and as you can see it took no time to actually find that it was less than a second to actually pull all the data for a bass and that's what it'll do it'll increase that speed on searching within that based on the column that you specify in your index and so let's remember that so it only to it took less than a second to actually search for all the employees with the last name of baz and so let's drop that index and this is a good opportunity for me to show you guys how to do that and essentially all you have to do is type alter table employee and then we want to drop our index and then we have to specify that name so id id X and underscore last name and it'll drop that index for us so let's go on put a semicolon at the end press enter that'll drop that index and then now let's run run that same select where we search for the last name of bass and press enter and it took 10 seconds so you'll see you know a difference depending on how much data it is within that table and so there are some downsides to using a index for instance there are slower rights so let's say this table is updated a lot then it slows down the insertion or the updates and the deletion operations because they must be maintained alongside the data and I mean the indexes they have to be maintained and then also there may be an issue with storage because these indexes they consume extra disc space and so if the database is super large then those resources could be significant and also the complexity of these indexes you know what I'm saying they require regular maintenance and then also like one of the other cons so to speak of using indexes is the memory usage it does use a lot of memory and that can affect effect these servers performance so you have to think about that when creating these indexes and be very strategic all right so next I want to talk about subqueries and a subquery is basically a query within a query and it's a way to retrieve data from one table based on the results of another query and for example you can use a subquery to find employees in a specific Department by first querying the department and then using the results to search the employees table so let's go through a demonstration right fast and I actually wrote out a query for this and I'll show you guys that demonstration now and let's just type select and then store from our employees table and so this is our main query this is the main query that we want to use and I'll show you guys the subquery in a second but I'll use it under the wear Clause within this query so let's go select store from employees and then where department number equals and this is where we we will put our subqueries and we have to put our subquery in parentheses cuz it's a totally separate query and then let's type another select and then department number and then what I'll do is pull this information from another table which is that Department's table so so let's talk that in department and then where Department name equals sales let's look for the sales department and let's put that in quotes single quotes and then let's close out our query and it should work for us so let's press enter both as you can see it pulls in all the people from sales so that's super dope right it goes through and searches and finds all those people with the Department name of sales and it's all based on the department number so that's essentially a subquery example and I only wanted to cover like one example because subqueries can be get very complex well queries in general can get very complex and then when you start adding subqueries into the mix it takes a little time to build out those queries queries and so I want you guys to practice writing out queries as well as subqueries based on documentation that you look out there for my SQL or SQL queries all right so next I wanted to cover store procedures now store procedures are like a reusable script that contains a series of SQL statements and it's like creating a custom function that allows you to perform specific tasks especially if they're repeatable for instance if you guys remember the query we ran during the join ction and I'll actually paste it in here so you guys can see but this is the select statement that we created in order to pull the count of employees based on the Departments and so let's go down and run it right fast so you guys can get a picture of what what I'm saying so department number Department name and then the amount of employees that are in each one of these departments and so let's say we had to type this out a whole bunch of times you know this is something that we reuse all the time like every day or so well it'll be a pain to have to retype this every single time so we can create what is called a store procedure with this query built into it and so let me give you example of how to actually do that so the first thing let me show you guys something right fast so if we type select store from departments and I'm just showing you a basic query so you can understand what I'm going to show you so at the end of each SQL statement or query you have to put what they call a delimiter and the delimiter by default is the semicolon within SQL but within our store procedure while we creating that procedure we have to put this query in the middle of another query and so in order to end the creation of the store procedure we have to change that delimiter so it doesn't mess up our actual query that we're going to put in the inside of it and so I'm not going to run this query let's go on and back it off but I'm going to show you guys how to change the delimiter and all you have to do is type delimiter and then we can specify what that delimiter is most people use these slashes that's typically what you'll see in documentation but there's others you can use but I'll just use the slashes so four slashes let's press enter and that will change our delimiter for ending a SQL statement now let's go on and type out our store procedure and the way you create it is simply create and then we want to create a procedure and then we want to name that procedure so I'll just name it employee accountor by department so department and then at the end of the name of the procedure we have to put C's and so this is essentially like a custom function so after this we have to continue writing but we have to specify the beginning of our query that we want to run within our store procedure so by specifying you have to type begin and this is just a designator to let SQL know that this is the beginning of the script and so let's press enter and then let's paste our query in there boom and and right now if we didn't go in and change our delimiter when I press enter it's going to to finish out this this whole statement that we wrote out which we did don't want it to do that's why we changed the delimiters so just like we put the begin here of where our select statement starts we have to put an end so if we didn't change that delimiter we wouldn't be able to end the statement so let's press enter now and as you can see it didn't complete out our SQL statement and so let's go down to type in and then our slashes and that will allow us to end this statement that we wrote so let's go on and press enter as you can see query Okay so it ran successfully it created our procedure now let's go on and change our delimiter back you don't want to forget to do this otherwise you're going to be running other queries and you'll be like what why is it not running properly and that's because the delimiter hasn't been changed back so let's type delimiter and then the semicolon like what is typically used for our queries press enter and that'll change our delimiter back to that semicolon now let me show you guys how to call that store procedure that we have cuz it will use this name right here so employee counts department so I'm going to copy it right fast and then all you have to do is type call and it's like calling a function so call and then the procedure name and then let's go to put the semicolon at the end and press enter and that will run that query for us and so that's a great way of running complex queries you know that you have to use multiple times or you run daily or multiple times a day this is a great way of running those queries by creating a store procedure and then you can call it store procedure and plus it's less text you have to type and so lastly let me show you guys how to drop that store procedure so all we have to do is type drop and this will basically remove the procedure so procedure and then the procedure name and I'm going to paste it in here but you don't need these uh parentheses at the end of it that's mainly just for the function or calling it and then when you create it you have to put those parentheses there but all it is is a name so you want to just drop that procedure by its name without the parentheses so let's go on and press enter that will drop that story procedure and as you can see if we call it again it'll say error because it does not exist anymore we deleted it all right so the next important thing I want to show you guys in my squel is triggers and triggers is like a set of predefined actions that automatically occur when specific events take place within your database and this could be things such as inserting or updating or even deleting data and so let me go down and show you guys a quick example and I have to go through a couple processes one of the first thing I want first things I want to do is create a new table I want to show you guys how to create a audit log and basically the purpose of this is every time we make an update to the employees table I want this information tracked within another table and so let's start off by creating that table so we can type create table and then let's name this employee Audits and then let's put our information for the table in there let's start off with a audit ID boom and then we can make this Sager so int and then let's make this Auto increment so autocore increment and this is basically to auton number each row within our table and then let's make this the primary key boom and then let's put a comma there and let's create our next column and let's start with the department number because I want to do this based on the department so let's say and this is the only example I could think of to show you guys a trigger so let's say an employee is assigned to a different department and we need to update and let's say we want to track those changes well we'll put this in here so it can track the new department for that user and then this will be at integer and press comma and let's get the next step so let's go with our action so this is the actual action of what happens as far as the type of query that's running and like I said I want to show you guys after an update so let's go action and then vour and let's make the number of characters around 50 boom just go on put a commment there and then lastly Let's uh put the action dates so this will track the actual time that this change happened within that table and then we can set the type to time stamp that's a good one to actually use and let's press enter and then close out our parentheses as well as the semicolon press enter and that should create our table for us and let's go with a select right fast just to check it out so select store from our employee _ audit table and let's close it out with the semicolon press enter and it won't show anything cuz there's no data in there yet but our table is created so now let's go on and create our trigger and we have to change our delimiter again because of the way I'm writing this trigger so let's change it to our for slashes again and press enter and the way you create a trigger is as follows so so create trigger and then let's name our trigger so we can call this employee uncore Audits and then underscore we can just specify that it is a trigger and let's go on and type out the details of our trigger so after an update on the employee table and then for each row enter and then this will be the beginning of our statement so let's type begin and press enter and then let's do our insert into our employ employee audit table and then we want to update specific columns within that table so let's start off with the department number and then the action we want to update the action column as well as our action date and let's close out those parentheses and now let's type in our values so values and there's a builtin way of looking at the change like you can type new and this will show you the new information that's being inserted into the table or you can also look at old which is the current data that's there but we want to look at the new data we just want to track that new data that's being inserted into the table so new and then it's coming from the Departments number and then also let's say we want to just we know this is a update trigger so let's say we only want to put text in there that just says update so we can specify you know specific text within a column so we could just put updates so each one of the triggers that will happen it will put update in there and that's a way of tracking our updates then also the action date we can use a builtin variable which is now and I'm going to type it in all cap so you guys can understand it but it's just a builtin function that you can use and that will bring the current time and date and put that into our field so let's close out our main parentheses and then let's go down and put our semicolon at the end CU that'll end out our insert query and let's press enter and just like we had to type begin we have to type in that was the whole purpose of changing our delimiter so let's type in then our delimiter that we have currently set which is the for slash4 slash so let's go and press enter boom so that took and that created our trigger now let's change our delimiter back right fast and we want to change it back to our semicolon so when we run our following queries they'll work properly and so let me show you guys how to show the triggers so so it's a very simple command all you have to do is type show triggers with an S put semicolon at the end and this will show all our triggers right there as you can see that is our trigger that we just created so the employee audit trigger and it gives you all the information about the actual trigger and if you have other triggers they'll be listed here as well so now let's find some information to update so let's type select and let's just select some information from our employees table so let's type that in semicolon at the end press enter and maybe I should have did it this way let's throw in the limits after that so we can just pull up the top 10 records that will be displayed so this is a easy way of finding something to update so let's say we want to update this first line and it's all based on the department number like I said once you update the department number it will track that in our audit table so let's go on and run a update query so let's type updates and then employee table and then let's set our department number because that's what set Sofi trigger so department number and then let's change the department number to let's say Georgie forcillo works for the help Des department so let's go and throw the help Des ID in there department number in there so it's 010 and then close that out and then now let's do our wear Clause so wear employee number equals and let's go to and grab their employee number right fast and drop that in there and put our semicolon at the end and let's go to and run our update query and looks like we have an issue hold on let's see and I believe I made a mistake when I created the table so this is a good way of showing you guys how to alter the table right fast and let's describe our employees table and I just want to see what the character is set for and yeah it looks like I made the wrong setup for the audit table that we created and yeah we can look at that right there just by describing this table as well so it's our audit table so employee Audits and let's check this out and it looks like yeah I put the department number as an integer when it should be character for so that's the mistake I made and so I'm glad this actually happened so I can show you guys how to fix issues like this or track them down because as you can see this error it just kind of gives you it gives you information you know don't get me wrong it gives you information but a lot of times you got to dig sometimes the errors are vague and you got to kind of dig through where the issue lies and so let's alter that table right fast that employees audit let's go right here just type in the front so alter table and then employees audits let's delete that off and then let's modify a column and this is changing the type so all we have to do is specify that column which is our department uncore number and then we can specify what we want to change it to and so that's why I described this so I could just typeing in you know properly so Char and then put four right here and let's put the semicolon at the end and move the mouse out the way so you guys can see but this will alter our table and now let's describe it again and that way we could see the changes and boom we are good to go so let's go on and make our changes in our employees table again so let's scroll up and let's see where we can find that change yeah this is the change we want to make so update employee set department number to d010 where employee number is 10,000 so let's press enter and we shouldn't run into that area yeah we don't so let's select our our employees audit table so select store from employee audit so you guys can see the information that's presented to that table and that lets us know our trigger actually worked and as you can see it pulls in the department number the new department number and see this is just a basic understanding or basic concept of setting this up you can set up Tri triggers that are way more complex like for instance you can track the old data as well as the new data you can create more columns in here and that's typically how you'll see it in a production environment it'll track old and new changes that way you can correct those changes if need be by looking through the Audits and now let me show you guys a little bit more of this audit log or this trigger in action like a while back I created a query that would go in and randomly insert departments within all of the users within the employees table and so let's run that again so you guys can see the rows that are inserted throughout this table and I know it'll populate this audit there'll be a whole bunch of changes or updates within this table but I just want to show you guys how these triggers actually can be very beneficial so let's hit paste let's paste it in there and this is something that I wrote a while back and I'll just break it down for you right fast but it's basically going to update the employees table it's going to set the department number to equal and then we have a nested query and this is basically select the department number from Department table and then we ordering it by random so this is a builtin function and then we can limit it to one and that will do that for every rle within the employees table and so let's go down and press enter and let this run and then we'll look back at our audit table up here our employees audit table once this completes and we'll see all the Okay cool so our update query has ran successfully as you can see it made a couple changes or not a lot of changes and so let's select our audits table again and press enter and let's see all the changes as you can see it's like 30,000 cuz it went through every record you know what I'm saying and this will keep going as you run updates on that table so let's say you make a lot of changes depending on the department it'll list them all here and that way you can trace back any issues that may have been made in the table unintentionally all right so after showing you guys these store procedures and triggers I wanted to show you guys another command within my SQL which is process list and this is essentially like a todo list for the database server and it keeps track of all the tasks the server is currently working on and each task similar to a operating system is called a process and can include things like executing queries handling connections or performing updates and so let me show you guys this Command right fast and it's very simple all you have to do is type show process list and then semicolon at the end and this will show you all the process is currently running on a server as you can see it breaks everything in columns so you got your ID you got your user you got your host the database that's associated with that user so to speak the commands the time State you know information about the server so as you can see it's pulling in that process right there show process list that's the query that I just ran using my root account so you can see pretty much any and everything that's going on on the server and I wanted to let you guys know this an important command to understand because it helps you manage all the processes and then also understand the performance of the server okay so the next thing I want to cover is MySQL dump and MySQL dump is a builtin utility that's included with mySQL that allows you to make backups of your entire database and you can also get very specific with it and back up just specific parts of the database as well and this tool will help you save your data so you can restore it if something something goes wrong or let's say you need to move the database to a different server that provides more performance for the amount of data that's included in it well this allow you to do that as well and so just to kind of cover it MySQL dumps it takes all the data and structure of your database and save it into a file and it's typically a SQL file so if you guys remember earlier in the course I imported that test database it had the extension of SQL so I'm sure they created that test database for others to use using MySQL dump and so when we get into the examples I want to show you that it's is like very super easy to use and you can run it right from the command line and another thing you don't have to stop like my SQL in order to create the backup it'll work while the database is running and a super cool part about it it will ensure that your data's Integrity is maintained during the backup process and so let's go through a couple examples right fast and what I need to do is exit out of my SQL because like I said it's a separate utility that comes along with my SQL and so let's go down and back up that employees table with all those changes that we made so let's go with mySQL dump and then we have to specify a user in order to connect to our mySQL database and we want to use our root account and then we can put P for our password and it's similar to how we logged into it and also I forgot about this we have to put pseudo in there so we can connect to the database and now let's do the employees database and then let's specify the file that we want to name it so we have to put the right arrow just like when we import it we use the left arrow pointing to the left we need to use the one that points to the right because we're grabbing all the data or the database from within the SQL server and dumping it to a file and this is the structure and everything associated with it it even includes the data that's within the database and so let's name name our file EMP and then let's goore backup and then it will store it in the current working directory we are in which is our home directory so that's fine for now but you can specify another directory by typing out the full path we'll just roll with it like this and press enter and then it'll ask us for our pseudo password because we had to type pseudo and then there is no password for our roote account so let's press enter and go down and Export or dump our database and as you can see it didn't take long at all and so let's LS our current working directory and you guys will see the employees back up and then let's put this in human readable form so you guys can see the size of the actual database file so it's 176 megabytes that's how big the actual database is and let's log back into our database right fast so P sudo my SQL and then our user which is roots and then P for password press enter and press enter no password and let's go show databases and semicolon at the end press enter it'll show us all our databases so what I'm going to do is drop the employees database and we all remember how to drop a database and all we have to do is type drop and then the database and then the database name we're going to drop that employee database and semicolon at the end and let's go enter and that will delete that database and so let's run these show again right fast and we'll see that that database is gone and we're like oh crap made a mistake I did not mean to delete that database well one good thing about this we created a backup of our database now in order to restore the database we have to have a database within the MySQL server with that previous name and so let's go on and create a database and this will be a empty database so create database and then you want to name it the exact same name that it was before so employees with a comma press enter just go through and show the databases again we'll see that we have that database there but it doesn't have any data or tables or anything in it we're going to get that from our backup file so now that we have everything set up we can exit out of my SQL and let me show you the command to restore the database so P sudo my SQL and then we have to put our user in there so roots and then P for the password and then we have to specify that database that we just created that empty database because it needs somewhere for it to go it's not going to just create that database for you it's just going to modify that current name database that we have in there to represent what we had previously within the backup so now we just put that left arrow in there just like we did when we imported before and then we pull in our employee backup and press enter it's going to ask us for our password we don't need a password and press enter and it'll go through and import all the database all the tables and everything within that database and then we'll verify this back up once we complete this I'll go through and show you guys the tables that all the tables are restored and pretty much everything the data is there as well by running a couple select queries so I'll be back when this finishes all right and so the import is done let's go in to my SQL and check our database and just verify that the tables are there and we can also run couple queries to see if the data is still there and so first off let's uh show databases which we know it was there before cuz we created it before we logged out of the system and imported our file now let's type use employee database and press enter and then now let's show tables and semicolon press enter so as you can see we can tell right off that we have our full database back so like for instance I created that audit table for the auditing so it has a trigger associated with it so if any updates to the employees table departments column it will track it within this a audit table that we created so that's a Telltale sign that we have our database back and that's different from the original database that I installed on the system and actually let's just run a select on that table right fast so you guys can see that that information is back and so let's go from employee audit and semicolon press enter as you can see it has all those records there it hasn't changed so all our records are back as well so we can do the exact same thing by checking other tables if we need to like this is the employees table and we know from the original database we didn't have this column in here with the Department ID and so that lets you know that this is the database that we dropped and there you have it you have successfully completed my MySQL course and I hope you've gained a valuable insight into this powerful relational database management system so whether you're a beginner or already had some experience I trust that you're now more confident in working with mySQL and also MySQL is a fundamental tool for anyone dealing with data and your new found knowledge will be an asset in various domains from web development to data analyst and remember the best way to become proficient in myql is through practice and so keep experimenting building and refining your skills with determination and dedication you can become a master of my sequel so thanks for choosing my course I wish you the best of luck in your database Endeavors and may your MySQL journey be filled with success and of course keep protect okay
