With timestamps:

00:04 - hi everyone i hope all of you are doing
00:06 - good thank you very much for signing up
00:08 - to this d3.js course
00:11 - so what is d3
00:13 - d3 is an open source javascript library
00:17 - this library may be used to create
00:19 - visual representations of your data
00:22 - this means that you can create dom
00:24 - elements using your data
00:26 - these dom elements may be simple html
00:28 - elements like headings paragraphs
00:31 - buttons or they may include
00:33 - sophisticated charts and graphs as well
00:36 - d3 makes use of html css and svg to
00:40 - create those representations
00:43 - as you know that these are the
00:45 - technologies of web so whatever you
00:47 - create using d3 you can view on any
00:49 - modern browser like chrome firefox
00:52 - safari or internet explorer
00:56 - this course consists of 10 screencasts
00:59 - and i've tried to keep each screencast
01:01 - short and simple
01:03 - i'll be explaining fundamental concepts
01:05 - of d3 with the help of simple
01:07 - and interesting examples
01:10 - to learn more about d3 there are many
01:12 - good resources available online
01:14 - the official documentation of d3.js is
01:18 - also very helpful in this regard
01:20 - there are also lots of blogs available
01:22 - about d3 on different platforms like
01:25 - medium
01:26 - here i've included the links of couple
01:28 - of blogs first blog was written by me
01:31 - and the other one was written by per
01:33 - herald who is also the co-creator of
01:35 - this tool scrimba
01:38 - so who am i i am saheb nihal i'm a
01:41 - full-stack javascript developer
01:43 - i love traveling reading and making new
01:46 - friends
01:48 - you can connect me via twitter my handle
01:50 - is given below
01:51 - i hope you would enjoy this course thank
01:53 - you again for joining in let's get
01:55 - started
02:01 - hi there in this lesson we'll be
02:03 - learning some basic techniques to do dom
02:05 - selection and manipulation using d3.js
02:09 - in our html file as you can see that we
02:12 - have an h1 tag and a couple of script
02:14 - tags
02:16 - the first script tag is loading d3.js
02:19 - library from its official link the other
02:22 - script tag is loading the javascript
02:24 - file in which we'll be writing all of
02:26 - our d3.js code
02:29 - using d3 we can select dom elements
02:32 - using their css selectors or the name of
02:34 - element itself
02:37 - d3 provides us two methods to select dom
02:40 - elements they are b3 dot select
02:43 - and d3 dot select all
02:48 - both of these methods accept a css
02:51 - selector or the name of dom element as a
02:54 - parameter and return selection of the
02:56 - element
02:58 - d3.select method returns the first
03:00 - selection of dom element matching the
03:02 - criteria while d3 dot select all returns
03:06 - all the elements matching the criteria
03:10 - for example if we want to select our
03:12 - heading tag we can call d3 dot
03:15 - select h1
03:20 - which will look into the dom and written
03:22 - as the first h1 tag it finds
03:26 - if there is no h1 tag inside the dom it
03:28 - will return an empty selection
03:32 - using d3 we can manipulate a dom
03:34 - elements as well which means we can
03:36 - update their style
03:38 - values or bind data with them
03:41 - for example we can apply some style to
03:44 - our h1 tag using dot style method
03:51 - we can give it a color
03:53 - with a save
03:55 - and see that the color of our heading
03:57 - has been updated
04:00 - in d3 we can chain methods with each
04:02 - other as well so that it helps keeping
04:04 - the code clean and easy to read
04:07 - using dot attr method we can apply
04:10 - different attributes to our selected
04:12 - element for example adding a class
04:15 - or id to it
04:19 - we can also update the text of our
04:22 - selected element using a dot text method
04:29 - if you want to append the dom elements
04:31 - we can use dot append method for example
04:34 - we can select our body element here
04:38 - and append a paragraph tag
04:43 - we give it a text of
04:46 - first paragraph
04:49 - we give it a save
04:51 - and see that the paragraph has been
04:53 - appended to our
04:54 - dom let's add couple of more paragraphs
05:01 - give it a save and see that now we have
05:03 - three paragraphs inside a dom
05:06 - let's select all of these paragraphs
05:08 - using d3 dot select all
05:14 - and give it a style of
05:17 - color blue
05:19 - we give it a save and see that the color
05:21 - of our paragraph tags have been updated
05:24 - to blue
05:26 - in the next lesson we will be learning
05:28 - some techniques about data loading and
05:31 - binding using d3.js thank you for
05:34 - watching
05:39 - hi there in the previous lesson we
05:41 - learned about dom selection and
05:43 - manipulation using d3.js
05:46 - it is time to introduce some data into
05:48 - the scene
05:50 - using d3 we can map data into our dom
05:53 - elements meaning we can append
05:56 - update or display dom elements using our
05:58 - data set
06:00 - in our example we have an array of some
06:02 - numbers
06:04 - what we are trying to do here is to
06:06 - create paragraph tags for each data item
06:08 - in the array
06:10 - we first of all select our body element
06:13 - using select method
06:15 - and afterwards we select all the
06:17 - paragraph tags inside it
06:20 - since we do not have any paragraph tags
06:22 - yet it will return an empty selection
06:26 - now we call dot data method and pass it
06:29 - our data set as an argument
06:32 - this method will put data into the
06:35 - waiting state for further processing
06:38 - we then call dot enter method
06:41 - this method will take data items one by
06:44 - one and perform further operations on
06:46 - them
06:48 - for each data item we are appending a
06:51 - paragraph tag and binding some dummy
06:53 - text inside it
06:56 - let's give it a save and see what
06:57 - appears on the dom
07:01 - as you can see that five paragraph tags
07:04 - have been appended into our dom
07:07 - each paragraph tag represents the data
07:09 - item in our data set
07:13 - we can also update the text of our
07:15 - paragraphs to show the value of data
07:17 - item by passing it a function
07:21 - inside the dot text method
07:24 - this function will be getting the value
07:26 - of data item in its parameter which we
07:28 - can return from it
07:31 - now you see that our paragraphs are
07:33 - displaying the value of data item inside
07:35 - it
07:36 - in the next lesson we'll be learning how
07:38 - to create a bar chart using d3.js thank
07:42 - you for watching
07:47 - hello everyone in this lesson we'll be
07:49 - learning how to create a simple bar
07:51 - chart
07:52 - in our html file we have an svg tag
07:56 - in our javascript file we have our data
07:58 - set which we will be using to create the
08:00 - bar chart
08:02 - we have variables defined for the width
08:04 - and height of svg container and the
08:06 - padding between the bars
08:10 - we calculate the width of each bar by
08:12 - dividing the total width of svg
08:14 - container with the total number of
08:16 - elements in our data set
08:19 - below that we select our svg container
08:22 - and give it the attribute of width and
08:24 - height
08:26 - next we will create our bar chart
08:29 - to create a bar chart we can make use of
08:31 - the fact that bars are nothing but
08:34 - rectangles
08:36 - so first of all we select all the
08:38 - rectangles by using select all method
08:41 - since we do not have any rectangles in
08:43 - our svg so far this will return an empty
08:46 - selection
08:48 - afterwards we call the data method and
08:51 - provide it our data set
08:53 - this method would take our data set into
08:55 - the waiting state
08:58 - afterwards we call and enter method
09:01 - this enter method will take our data set
09:03 - from the waiting state and perform
09:06 - further operations
09:09 - this enter method takes the data from
09:11 - the waiting state
09:13 - and perform next operations on each data
09:16 - item
09:17 - so for example it will call all these
09:19 - methods
09:20 - for 80 1556 and rest of the data items
09:26 - for each data item we are appending a
09:28 - rectangle inside our svg container
09:32 - we provide the attribute of y height
09:35 - width and transform to each of the
09:37 - rectangle
09:39 - to give the y attribute we call the
09:41 - attribute method
09:43 - this takes a function which gets the
09:45 - data in its parameter
09:47 - we calculate the y attribute by
09:50 - subtracting the data item with the svg
09:53 - height
09:54 - the next attribute we set is height we
09:57 - return the data value from the callback
09:59 - function
10:00 - afterwards we provide width to our bar
10:03 - chart for this
10:05 - we subtract bar padding from the bar
10:07 - width we calculated in the beginning
10:10 - in the end we apply the transformation
10:13 - of translate to our bar chart so d3
10:15 - provides us with a lot of options to
10:17 - transform any object
10:20 - here we are using the translation kind
10:22 - of transform for our rectangles
10:25 - so we do not want our bars to start from
10:27 - the same position
10:29 - therefore we would want to translate
10:31 - them one after another
10:33 - and this is what we are doing over here
10:35 - in this function
10:37 - in this step we calculate the value of
10:39 - translation for our bars
10:42 - so as you can see that there are two
10:43 - values in this translate array
10:46 - one is the amount of translation on
10:48 - x-axis and another one on y-axis
10:52 - since we are translating each rectangle
10:55 - one after another therefore we calculate
10:57 - the value by multiplying the index with
10:59 - the bar width
11:01 - in the end we return the translate
11:03 - string with the value of translation
11:05 - which we calculated above
11:07 - when we give it a save
11:09 - we can see that our bar chart has been
11:11 - appended inside our dom
11:14 - thank you very much for watching
11:20 - hi there in the previous lesson we
11:22 - learned how to create a bar chart using
11:25 - d3.js
11:27 - we use the array of numbers as our data
11:29 - set to create a bar chart
11:32 - in this lesson we will be applying
11:34 - labels to our bar chart
11:36 - since labels are text therefore we'll be
11:38 - appending a text element for each data
11:40 - item on top of each bar
11:43 - like we added rectangles for our bar
11:46 - chart in the previous example we'll be
11:48 - adding text element for each data item
11:51 - for this
11:53 - let's first of all select all the text
11:55 - element inside our svg
11:57 - since we have no text element so far
12:00 - this will return an empty selection
12:03 - afterwards we introduce a data set using
12:06 - data method and get in enter mode using
12:09 - dot enter method
12:11 - this will bring in data items one by one
12:14 - for further processing
12:16 - we want to append the text for each data
12:18 - item and want to keep its value to be
12:20 - the number itself
12:22 - using text method we can get the value
12:25 - of our data item
12:27 - text method either takes a string or a
12:30 - function as a parameter
12:32 - the function gets the data value in its
12:34 - parameter which we can return from
12:36 - inside it
12:39 - afterwards we give the y attribute like
12:42 - we did with our rectangles above
12:44 - the only difference is that we want our
12:46 - text to be slightly higher than our bar
12:49 - and that is why we are subtracting two
12:51 - more pixels from it
12:54 - we give the x attribute to be the
12:56 - starting point of each rectangle
12:59 - and we get it by using the values of bar
13:02 - with
13:03 - an index of the data element
13:06 - in the end we give text element some
13:09 - color by using the fill attribute
13:12 - we give it a save
13:14 - and see that labels have been appended
13:16 - on top of each bar
13:18 - in the next lesson we will learn how to
13:20 - create scales into our charts thank you
13:23 - for watching
13:28 - hi everyone in this lesson we'll be
13:31 - using the same examples as we used in
13:33 - our previous two lessons about creating
13:35 - bar chart and adding labels to them
13:38 - we now would be introducing a rather
13:40 - advanced topic which is about using
13:42 - scales for our data
13:44 - so what are scales
13:46 - scales are functions which will
13:48 - transform your data by either increasing
13:50 - or decreasing their values for better
13:52 - visualizations
13:54 - so far our bar chart looks like this
13:58 - what if you update the data set and
14:00 - introduce much smaller values
14:05 - so our bars are hardly visible now this
14:08 - is because the values which we are using
14:10 - are much smaller
14:12 - in the scenarios like these we can make
14:14 - use of the scales
14:16 - here we have created a variable by the
14:18 - name of y scale and we are calling the
14:21 - function of d3 dot scale linear
14:25 - we will then change the method of dot
14:27 - domain which will take an array as an
14:29 - argument
14:30 - this array contains two elements first
14:33 - one is zero and another one is the
14:35 - maximum number in our data set we can
14:38 - calculate this number by using d3.max
14:41 - function
14:43 - then we also change the method of dot
14:45 - range which will keep the scaled values
14:48 - inside the range of our svg container
14:50 - it also takes an array of which the
14:52 - first element is 0 and the second
14:54 - element is the height of our svg
14:56 - container now we finally parse the
14:59 - values of our y-coordinate
15:01 - and the height of the rectangle using
15:04 - y-scale method
15:07 - and we give it a save
15:09 - our bars now have been properly scaled
15:11 - for the visual representations in the
15:13 - next lesson we'll learn how to create
15:15 - accesses insider charts thank you for
15:18 - watching
15:23 - hi guys welcome back to another tutorial
15:26 - in this lesson we'll be learning about
15:27 - the concept of accesses in d3.js
15:31 - as you know that accesses are an
15:33 - integral part of any chart or a graph
15:37 - accesses are made of lines
15:39 - ticks and text
15:41 - you can imagine how complicated it would
15:43 - be to create all three of them
15:44 - separately but thankfully d3 provides us
15:47 - a very simple api to create accesses for
15:50 - our charts
15:51 - d3 provides us four significant methods
15:54 - to create accesses they are d3 dot
15:57 - access top
15:58 - x is right x is bottom and x is left
16:03 - let's learn from a simple example how to
16:05 - create x and y axes for our chart
16:09 - after selecting our svg element and
16:11 - providing it with the attributes of
16:13 - width and height we move towards
16:15 - creating scales for our accesses
16:18 - we'll be using linear functions to
16:20 - create our scales
16:22 - we have created skills exactly like this
16:25 - in our previous lessons as well so let's
16:27 - move forward
16:29 - moving forward and now we actually
16:31 - create our accesses
16:33 - as i mentioned earlier d3 provides us a
16:35 - very simple api to create accesses
16:38 - for x-axis we'll be calling
16:41 - d3.axis bottom
16:43 - this will return a function which we are
16:45 - going to chain with another function of
16:47 - a scale and provide it our x scale
16:51 - similarly to create a y axis
16:53 - we call d3 dot x is left and then chain
16:56 - it with a scale function and provide it
16:59 - the y scale
17:01 - afterwards we append a group element
17:03 - inside our svg element
17:06 - and provide it the attribute of
17:07 - translate transformation and then we
17:10 - call y-axis on this group element
17:13 - afterwards we append another group
17:15 - element inside our svg container
17:18 - and provide it the translate
17:20 - transformation attribute
17:22 - in the end we call x-axis on this group
17:25 - element let's give it a save and we can
17:28 - see that our accesses have been appended
17:30 - inside our dom we can see that our
17:32 - accesses have lines ticks and text as
17:35 - well and it was all created just using
17:38 - the access methods provided by d3
17:41 - thank you very much for watching
17:47 - hi there welcome to another lesson of
17:49 - our d3.js course
17:51 - in this lesson we'll be learning how to
17:53 - create different svg elements using d3
17:57 - as always in our html file we have an
17:59 - svg tag and a script tags to load d3.js
18:03 - library and a javascript file where we
18:05 - write all of our code
18:08 - svg or scalable vector graphics is a
18:10 - powerful tool to define vector graphics
18:13 - for the web
18:14 - using svg we can create different shapes
18:17 - and apply different styles to them
18:19 - since it's a vector graphic we can scale
18:21 - them as much as we want without getting
18:24 - them distorted
18:26 - in our javascript file we first of all
18:28 - select our svg element using d3.select
18:31 - and give it the attribute of width and
18:34 - height
18:35 - we also give it the attribute of class
18:37 - of svg container which we have defined
18:40 - in our css file
18:43 - to create a line using svg we need
18:45 - coordinates of a starting and ending
18:47 - point of a line
18:49 - starting coordinates would be x1 y1
18:52 - while ending coordinates would be x2 y2
18:56 - these should be the coordinates inside
18:58 - our svg element
19:00 - we also give it the attribute of a
19:02 - stroke
19:03 - and the stroke will take the name of any
19:05 - color
19:06 - we give it a save
19:07 - and see that the line has been rendered
19:09 - inside our svg container
19:14 - if we want to make our line slightly
19:15 - thicker we can give it the attribute of
19:18 - a stroke width
19:21 - it takes a number
19:25 - and we see that a line has become a
19:27 - little bit thicker
19:29 - now let's create a rectangle
19:31 - to create a rectangle we need to provide
19:33 - x and y coordinates which will be the
19:35 - beginning point of our rectangle
19:38 - we also need to provide it the attribute
19:40 - of width and height
19:42 - if we save and refresh
19:46 - we can see that rectangle has also been
19:48 - rendered inside our svg container
19:52 - it appears purple because we have given
19:54 - it the attribute of fill with the hash
19:56 - of a color
19:58 - to create a circle using d3.js we need
20:02 - to provide the coordinates of center of
20:04 - the circle
20:05 - these coordinates would be cx and cy
20:09 - also we need to provide the radius of
20:11 - our circle
20:12 - radius is a distance from center of a
20:14 - circle to any point on the boundary of a
20:17 - circle
20:18 - like rectangle we can also give it the
20:20 - attribute of fill if we want to apply
20:22 - any color inside it
20:26 - now we can see that all of our svg
20:28 - elements circle rectangle and line have
20:30 - been appended inside our svg container
20:33 - thank you for watching
20:41 - hi everyone in this lesson we'll be
20:43 - creating a pie chart using d3.js
20:46 - we'll be displaying the market share of
20:48 - top three operating systems in our pi
20:50 - chart in our javascript file
20:53 - we have our data set which is a
20:54 - collection of objects in which each
20:56 - object contains the name of the platform
20:59 - and its percentage share
21:02 - we first of all select our svg element
21:04 - and give it the attribute of width and
21:07 - height then we move on to creating a
21:09 - group element inside our svg container
21:12 - this group element will hold our pie
21:14 - chart after appending the group element
21:17 - we transform it by translating it to the
21:20 - center of our svg container then we
21:22 - select the range of colors provided by
21:24 - the built-in method of d3 we will be
21:26 - using this function to provide colors to
21:28 - the pies of our chart to prepare our
21:30 - data to be compatible with drawing pie
21:32 - chart we pass it through d3 dot py
21:35 - method since we want to use the
21:37 - attribute of percentage from a data set
21:39 - to create pies we pass a callback
21:41 - function to d3 dot pi and return the
21:44 - percentage attribute now we call a d3
21:47 - dot arc method which will create path
21:49 - elements using the arc data
21:52 - we change outer radius and inner radius
21:54 - method which will define the boundaries
21:56 - of those arcs
22:01 - hello everyone in this last lesson of
22:03 - our d3.js course we'll be learning how
22:06 - to create a line chart
22:08 - we'll be using a real-time data of
22:10 - bitcoin price index of past four months
22:12 - we'll be fetching the data from an
22:14 - external api and at the end of this
22:16 - lesson we'll be able to create a line
22:18 - chart like this
22:20 - so let's get started
22:22 - in our javascript file we have an api
22:25 - which will be fetching the data of
22:27 - bitcoin price index of past four months
22:29 - below that we have an event listener
22:31 - which gets fired once the dom has been
22:33 - loaded
22:35 - in this event listener we are fetching
22:36 - the data using the api we declared at
22:39 - the beginning once we have this data we
22:41 - pass it to another function which
22:42 - converts this data into the form which
22:44 - is suitable to create line chart
22:48 - this function makes an array of objects
22:50 - in which each object contains date and
22:52 - the price of bitcoin on that particular
22:54 - date once the data has been parsed we
22:57 - call another function we name this
22:59 - function drawchart and pass it our data
23:02 - this function would be responsible to
23:04 - create the line chart
23:06 - in this drawchart function we are
23:07 - getting a data set in this parameters
23:10 - afterwards we have defined some
23:12 - variables to calculate the width and
23:14 - height of the chart
23:16 - in the next step we select our svg
23:18 - element like always and provided the
23:20 - attributes of width and height
23:23 - then we append a group tag inside our
23:25 - svg element
23:27 - we use attribute method to apply
23:29 - transformation as an attribute to this
23:31 - group element
23:33 - even though transform can accept
23:34 - multiple types of options here we are
23:37 - keeping it to translation transform
23:39 - which actually pushes the group over and
23:41 - down by the amount we are providing over
23:43 - here
23:44 - then we create scales for our line chart
23:48 - since we'll be displaying the price
23:49 - index of bitcoin over the period of past
23:52 - few months
23:53 - it makes sense to display the time
23:54 - duration on the x-axis
23:56 - d3 provides us a function of a scale
23:59 - time to create such kind of a scales
24:01 - for a y-axis though it makes sense to
24:03 - keep the scale linear since we are just
24:06 - showing the price of bitcoin on that
24:08 - axis in the next step we'll create the
24:10 - line chart we'll use the function of d3
24:13 - dot line this function returns another
24:15 - function which creates the line next we
24:18 - will change this method to another
24:19 - function which will set its x attribute
24:24 - dot x method takes an anonymous function
24:27 - which gets passed the data
24:29 - we'll be returning the attribute of date
24:31 - for our x attribute please notice that
24:33 - we are passing the value of date through
24:35 - our scale method which we have defined
24:37 - above
24:40 - similarly we will change the dot y
24:41 - function to set the y attribute we'll be
24:44 - returning the attribute of value of
24:46 - bitcoin from this method after passing
24:48 - it through the yscale function
24:51 - the domain function here is designed to
24:53 - let d3 know about the scope of the data
24:55 - when it is passed to scale function
24:58 - if we look at x dot domain here we are
25:00 - using extend method to let d3 know about
25:03 - the scope of the data
25:04 - extend method takes an anonymous
25:06 - function which returns data value and in
25:08 - the end it returns minimum and maximum
25:11 - value of the dates
25:13 - similar things happen with y dot domain
25:15 - method in which it returns the minimum
25:17 - and maximum value
25:18 - this value would be used to create the
25:20 - scales properly
25:23 - we then append a group element inside
25:25 - our parent group and apply some
25:27 - transformations to it
25:29 - then we pass d3.exe bottom function to
25:32 - call method
25:33 - when we are using the call function over
25:35 - here we are actually calling d3 dot x's
25:37 - bottom on our newly created group
25:40 - element
25:42 - we then select any classes of domain and
25:45 - remove it
25:47 - moving forward we append another group
25:49 - element inside our parent group
25:51 - and we call the method of d3 dot xs and
25:54 - left y on it afterwards we append some
25:57 - text and pass them the attributes of
26:00 - fill transform and some of the
26:02 - coordinates as well
26:04 - this block of code would basically
26:06 - generate the y axis
26:11 - in the end we append a path inside our
26:13 - parent group element
26:15 - this path would be the line which we see
26:17 - in the line chart
26:18 - to create this path we call the method
26:21 - of datum and we pass a data set
26:23 - we apply some more attributes like fill
26:26 - stroke stroke width and provide them the
26:28 - appropriate values and then in the end
26:30 - we apply the attribute of d
26:33 - and we pass our line function over here
26:35 - this line function would basically be
26:37 - creating the line for that d attribute
26:40 - in the end we give it a save
26:42 - and here you can see that our line chart
26:44 - has been appended inside our dom
26:48 - congratulations you have now completed
26:50 - the course and have the basic
26:52 - understanding of d3.js
26:54 - if you have any questions feel free to
26:56 - reach out to me via twitter or in the q
26:59 - a section
27:00 - also if you enjoyed this course i would
27:02 - appreciate if you would share it
27:04 - here is the link so feel free to for
27:06 - example email it to someone you know or
27:09 - share it on facebook or twitter
27:11 - thank you very much again for watching
27:13 - and good luck with the coding

Cleaned transcript:

hi everyone i hope all of you are doing good thank you very much for signing up to this d3.js course so what is d3 d3 is an open source javascript library this library may be used to create visual representations of your data this means that you can create dom elements using your data these dom elements may be simple html elements like headings paragraphs buttons or they may include sophisticated charts and graphs as well d3 makes use of html css and svg to create those representations as you know that these are the technologies of web so whatever you create using d3 you can view on any modern browser like chrome firefox safari or internet explorer this course consists of 10 screencasts and i've tried to keep each screencast short and simple i'll be explaining fundamental concepts of d3 with the help of simple and interesting examples to learn more about d3 there are many good resources available online the official documentation of d3.js is also very helpful in this regard there are also lots of blogs available about d3 on different platforms like medium here i've included the links of couple of blogs first blog was written by me and the other one was written by per herald who is also the cocreator of this tool scrimba so who am i i am saheb nihal i'm a fullstack javascript developer i love traveling reading and making new friends you can connect me via twitter my handle is given below i hope you would enjoy this course thank you again for joining in let's get started hi there in this lesson we'll be learning some basic techniques to do dom selection and manipulation using d3.js in our html file as you can see that we have an h1 tag and a couple of script tags the first script tag is loading d3.js library from its official link the other script tag is loading the javascript file in which we'll be writing all of our d3.js code using d3 we can select dom elements using their css selectors or the name of element itself d3 provides us two methods to select dom elements they are b3 dot select and d3 dot select all both of these methods accept a css selector or the name of dom element as a parameter and return selection of the element d3.select method returns the first selection of dom element matching the criteria while d3 dot select all returns all the elements matching the criteria for example if we want to select our heading tag we can call d3 dot select h1 which will look into the dom and written as the first h1 tag it finds if there is no h1 tag inside the dom it will return an empty selection using d3 we can manipulate a dom elements as well which means we can update their style values or bind data with them for example we can apply some style to our h1 tag using dot style method we can give it a color with a save and see that the color of our heading has been updated in d3 we can chain methods with each other as well so that it helps keeping the code clean and easy to read using dot attr method we can apply different attributes to our selected element for example adding a class or id to it we can also update the text of our selected element using a dot text method if you want to append the dom elements we can use dot append method for example we can select our body element here and append a paragraph tag we give it a text of first paragraph we give it a save and see that the paragraph has been appended to our dom let's add couple of more paragraphs give it a save and see that now we have three paragraphs inside a dom let's select all of these paragraphs using d3 dot select all and give it a style of color blue we give it a save and see that the color of our paragraph tags have been updated to blue in the next lesson we will be learning some techniques about data loading and binding using d3.js thank you for watching hi there in the previous lesson we learned about dom selection and manipulation using d3.js it is time to introduce some data into the scene using d3 we can map data into our dom elements meaning we can append update or display dom elements using our data set in our example we have an array of some numbers what we are trying to do here is to create paragraph tags for each data item in the array we first of all select our body element using select method and afterwards we select all the paragraph tags inside it since we do not have any paragraph tags yet it will return an empty selection now we call dot data method and pass it our data set as an argument this method will put data into the waiting state for further processing we then call dot enter method this method will take data items one by one and perform further operations on them for each data item we are appending a paragraph tag and binding some dummy text inside it let's give it a save and see what appears on the dom as you can see that five paragraph tags have been appended into our dom each paragraph tag represents the data item in our data set we can also update the text of our paragraphs to show the value of data item by passing it a function inside the dot text method this function will be getting the value of data item in its parameter which we can return from it now you see that our paragraphs are displaying the value of data item inside it in the next lesson we'll be learning how to create a bar chart using d3.js thank you for watching hello everyone in this lesson we'll be learning how to create a simple bar chart in our html file we have an svg tag in our javascript file we have our data set which we will be using to create the bar chart we have variables defined for the width and height of svg container and the padding between the bars we calculate the width of each bar by dividing the total width of svg container with the total number of elements in our data set below that we select our svg container and give it the attribute of width and height next we will create our bar chart to create a bar chart we can make use of the fact that bars are nothing but rectangles so first of all we select all the rectangles by using select all method since we do not have any rectangles in our svg so far this will return an empty selection afterwards we call the data method and provide it our data set this method would take our data set into the waiting state afterwards we call and enter method this enter method will take our data set from the waiting state and perform further operations this enter method takes the data from the waiting state and perform next operations on each data item so for example it will call all these methods for 80 1556 and rest of the data items for each data item we are appending a rectangle inside our svg container we provide the attribute of y height width and transform to each of the rectangle to give the y attribute we call the attribute method this takes a function which gets the data in its parameter we calculate the y attribute by subtracting the data item with the svg height the next attribute we set is height we return the data value from the callback function afterwards we provide width to our bar chart for this we subtract bar padding from the bar width we calculated in the beginning in the end we apply the transformation of translate to our bar chart so d3 provides us with a lot of options to transform any object here we are using the translation kind of transform for our rectangles so we do not want our bars to start from the same position therefore we would want to translate them one after another and this is what we are doing over here in this function in this step we calculate the value of translation for our bars so as you can see that there are two values in this translate array one is the amount of translation on xaxis and another one on yaxis since we are translating each rectangle one after another therefore we calculate the value by multiplying the index with the bar width in the end we return the translate string with the value of translation which we calculated above when we give it a save we can see that our bar chart has been appended inside our dom thank you very much for watching hi there in the previous lesson we learned how to create a bar chart using d3.js we use the array of numbers as our data set to create a bar chart in this lesson we will be applying labels to our bar chart since labels are text therefore we'll be appending a text element for each data item on top of each bar like we added rectangles for our bar chart in the previous example we'll be adding text element for each data item for this let's first of all select all the text element inside our svg since we have no text element so far this will return an empty selection afterwards we introduce a data set using data method and get in enter mode using dot enter method this will bring in data items one by one for further processing we want to append the text for each data item and want to keep its value to be the number itself using text method we can get the value of our data item text method either takes a string or a function as a parameter the function gets the data value in its parameter which we can return from inside it afterwards we give the y attribute like we did with our rectangles above the only difference is that we want our text to be slightly higher than our bar and that is why we are subtracting two more pixels from it we give the x attribute to be the starting point of each rectangle and we get it by using the values of bar with an index of the data element in the end we give text element some color by using the fill attribute we give it a save and see that labels have been appended on top of each bar in the next lesson we will learn how to create scales into our charts thank you for watching hi everyone in this lesson we'll be using the same examples as we used in our previous two lessons about creating bar chart and adding labels to them we now would be introducing a rather advanced topic which is about using scales for our data so what are scales scales are functions which will transform your data by either increasing or decreasing their values for better visualizations so far our bar chart looks like this what if you update the data set and introduce much smaller values so our bars are hardly visible now this is because the values which we are using are much smaller in the scenarios like these we can make use of the scales here we have created a variable by the name of y scale and we are calling the function of d3 dot scale linear we will then change the method of dot domain which will take an array as an argument this array contains two elements first one is zero and another one is the maximum number in our data set we can calculate this number by using d3.max function then we also change the method of dot range which will keep the scaled values inside the range of our svg container it also takes an array of which the first element is 0 and the second element is the height of our svg container now we finally parse the values of our ycoordinate and the height of the rectangle using yscale method and we give it a save our bars now have been properly scaled for the visual representations in the next lesson we'll learn how to create accesses insider charts thank you for watching hi guys welcome back to another tutorial in this lesson we'll be learning about the concept of accesses in d3.js as you know that accesses are an integral part of any chart or a graph accesses are made of lines ticks and text you can imagine how complicated it would be to create all three of them separately but thankfully d3 provides us a very simple api to create accesses for our charts d3 provides us four significant methods to create accesses they are d3 dot access top x is right x is bottom and x is left let's learn from a simple example how to create x and y axes for our chart after selecting our svg element and providing it with the attributes of width and height we move towards creating scales for our accesses we'll be using linear functions to create our scales we have created skills exactly like this in our previous lessons as well so let's move forward moving forward and now we actually create our accesses as i mentioned earlier d3 provides us a very simple api to create accesses for xaxis we'll be calling d3.axis bottom this will return a function which we are going to chain with another function of a scale and provide it our x scale similarly to create a y axis we call d3 dot x is left and then chain it with a scale function and provide it the y scale afterwards we append a group element inside our svg element and provide it the attribute of translate transformation and then we call yaxis on this group element afterwards we append another group element inside our svg container and provide it the translate transformation attribute in the end we call xaxis on this group element let's give it a save and we can see that our accesses have been appended inside our dom we can see that our accesses have lines ticks and text as well and it was all created just using the access methods provided by d3 thank you very much for watching hi there welcome to another lesson of our d3.js course in this lesson we'll be learning how to create different svg elements using d3 as always in our html file we have an svg tag and a script tags to load d3.js library and a javascript file where we write all of our code svg or scalable vector graphics is a powerful tool to define vector graphics for the web using svg we can create different shapes and apply different styles to them since it's a vector graphic we can scale them as much as we want without getting them distorted in our javascript file we first of all select our svg element using d3.select and give it the attribute of width and height we also give it the attribute of class of svg container which we have defined in our css file to create a line using svg we need coordinates of a starting and ending point of a line starting coordinates would be x1 y1 while ending coordinates would be x2 y2 these should be the coordinates inside our svg element we also give it the attribute of a stroke and the stroke will take the name of any color we give it a save and see that the line has been rendered inside our svg container if we want to make our line slightly thicker we can give it the attribute of a stroke width it takes a number and we see that a line has become a little bit thicker now let's create a rectangle to create a rectangle we need to provide x and y coordinates which will be the beginning point of our rectangle we also need to provide it the attribute of width and height if we save and refresh we can see that rectangle has also been rendered inside our svg container it appears purple because we have given it the attribute of fill with the hash of a color to create a circle using d3.js we need to provide the coordinates of center of the circle these coordinates would be cx and cy also we need to provide the radius of our circle radius is a distance from center of a circle to any point on the boundary of a circle like rectangle we can also give it the attribute of fill if we want to apply any color inside it now we can see that all of our svg elements circle rectangle and line have been appended inside our svg container thank you for watching hi everyone in this lesson we'll be creating a pie chart using d3.js we'll be displaying the market share of top three operating systems in our pi chart in our javascript file we have our data set which is a collection of objects in which each object contains the name of the platform and its percentage share we first of all select our svg element and give it the attribute of width and height then we move on to creating a group element inside our svg container this group element will hold our pie chart after appending the group element we transform it by translating it to the center of our svg container then we select the range of colors provided by the builtin method of d3 we will be using this function to provide colors to the pies of our chart to prepare our data to be compatible with drawing pie chart we pass it through d3 dot py method since we want to use the attribute of percentage from a data set to create pies we pass a callback function to d3 dot pi and return the percentage attribute now we call a d3 dot arc method which will create path elements using the arc data we change outer radius and inner radius method which will define the boundaries of those arcs hello everyone in this last lesson of our d3.js course we'll be learning how to create a line chart we'll be using a realtime data of bitcoin price index of past four months we'll be fetching the data from an external api and at the end of this lesson we'll be able to create a line chart like this so let's get started in our javascript file we have an api which will be fetching the data of bitcoin price index of past four months below that we have an event listener which gets fired once the dom has been loaded in this event listener we are fetching the data using the api we declared at the beginning once we have this data we pass it to another function which converts this data into the form which is suitable to create line chart this function makes an array of objects in which each object contains date and the price of bitcoin on that particular date once the data has been parsed we call another function we name this function drawchart and pass it our data this function would be responsible to create the line chart in this drawchart function we are getting a data set in this parameters afterwards we have defined some variables to calculate the width and height of the chart in the next step we select our svg element like always and provided the attributes of width and height then we append a group tag inside our svg element we use attribute method to apply transformation as an attribute to this group element even though transform can accept multiple types of options here we are keeping it to translation transform which actually pushes the group over and down by the amount we are providing over here then we create scales for our line chart since we'll be displaying the price index of bitcoin over the period of past few months it makes sense to display the time duration on the xaxis d3 provides us a function of a scale time to create such kind of a scales for a yaxis though it makes sense to keep the scale linear since we are just showing the price of bitcoin on that axis in the next step we'll create the line chart we'll use the function of d3 dot line this function returns another function which creates the line next we will change this method to another function which will set its x attribute dot x method takes an anonymous function which gets passed the data we'll be returning the attribute of date for our x attribute please notice that we are passing the value of date through our scale method which we have defined above similarly we will change the dot y function to set the y attribute we'll be returning the attribute of value of bitcoin from this method after passing it through the yscale function the domain function here is designed to let d3 know about the scope of the data when it is passed to scale function if we look at x dot domain here we are using extend method to let d3 know about the scope of the data extend method takes an anonymous function which returns data value and in the end it returns minimum and maximum value of the dates similar things happen with y dot domain method in which it returns the minimum and maximum value this value would be used to create the scales properly we then append a group element inside our parent group and apply some transformations to it then we pass d3.exe bottom function to call method when we are using the call function over here we are actually calling d3 dot x's bottom on our newly created group element we then select any classes of domain and remove it moving forward we append another group element inside our parent group and we call the method of d3 dot xs and left y on it afterwards we append some text and pass them the attributes of fill transform and some of the coordinates as well this block of code would basically generate the y axis in the end we append a path inside our parent group element this path would be the line which we see in the line chart to create this path we call the method of datum and we pass a data set we apply some more attributes like fill stroke stroke width and provide them the appropriate values and then in the end we apply the attribute of d and we pass our line function over here this line function would basically be creating the line for that d attribute in the end we give it a save and here you can see that our line chart has been appended inside our dom congratulations you have now completed the course and have the basic understanding of d3.js if you have any questions feel free to reach out to me via twitter or in the q a section also if you enjoyed this course i would appreciate if you would share it here is the link so feel free to for example email it to someone you know or share it on facebook or twitter thank you very much again for watching and good luck with the coding
