With timestamps:

00:00 - this video is about how to write clean
00:01 - code in your formatting and comments
00:05 - first formatting formatting is
00:07 - subjective the main point is not to
00:09 - argue over formatting just choose a
00:11 - certain type of formatting between you
00:13 - and your team and just go with it it's
00:16 - important to be consistent I'm just
00:18 - going to go over a few things about
00:20 - formatting one is that you should use
00:22 - consistent capitalization so here's an
00:24 - example of the bad way um you can see
00:26 - there's two constants here so you could
00:28 - choose either ways as long as you're
00:30 - consistent but we're going to change
00:32 - this to
00:33 - days in month okay and down here we have
00:38 - two arrays and we have the songs array
00:41 - and the artist array we're just going to
00:42 - make this not capitalized so it'll be
00:44 - consistent now we have two functions
00:46 - this one's camel case this one's not so
00:48 - let's change this so it's consistent and
00:51 - then we have two classes uh just make
00:53 - sure they're consistent if this is
00:55 - lowercase this should be lowercase next
00:57 - up is function collar and Coles should
01:00 - be close together ideally the caller
01:03 - should be right above the call E we tend
01:06 - to read code from top to bottom so it
01:08 - should make sense just reading down how
01:09 - the code supposed to go together so
01:11 - let's look at this bad example we have a
01:13 - bunch of functions and we're going to
01:15 - change the order here you can see that
01:17 - this uh perf review function calls three
01:20 - other functions so we're going to just
01:21 - cut that out and put that
01:24 - first and the first function it calls is
01:27 - get peer reviews so let's put that one
01:29 - right after after the per
01:32 - review and this calls look up here so
01:34 - we'll put that one next it's already
01:36 - next and now the next one that this per
01:39 - riew function calls us get manager
01:40 - reviews so we'll put that
01:44 - next and this is going to call lookup
01:46 - manager so that's next and now this
01:49 - calls get self review which we will put
01:52 - last here so now we've reordered the
01:55 - functions in this so it makes more sense
01:57 - it kind of reads in order now now we're
02:00 - going to move on to comments only
02:02 - comment things that have business logic
02:04 - complexity comments are an apology not a
02:07 - requirement good code comments itself so
02:10 - let's look at a piece of code here we
02:12 - have this function hash it and then look
02:14 - at the first comment the hash well we
02:16 - can tell it's the hash that's what the
02:18 - name of the variable is so let's take
02:19 - that one out and then we have length of
02:21 - string well we can see just by reading
02:23 - the Str the code that this is the length
02:25 - of the string so we don't need that
02:26 - comment this says Loop through every
02:28 - character in data yeah I think most
02:30 - people know that four means it's a loop
02:32 - so we can take that one out um get
02:34 - character code well this says right here
02:36 - care code at so see a lot of comments
02:38 - are unnecessary make the hash well we're
02:40 - saying hash equals something so we must
02:42 - be making the hash this is the only
02:44 - comment we're going to keep convert to
02:46 - 32-bit integer because this may be a
02:48 - little less obvious to some people what
02:50 - it means so you can still keep some
02:52 - comments just nothing that's pretty easy
02:55 - to figure out just by looking at the
02:56 - code the next thing is don't leave
02:58 - commented out code code in your code
03:00 - base that's why we have Version Control
03:03 - so if you have this function do stuff
03:05 - and then you had all these other
03:07 - functions and you're not using them
03:08 - anymore so you commented them out uh
03:10 - just get rid of them because you can
03:13 - always go back using your version
03:15 - control system to previous versions and
03:17 - you don't need to keep that in your code
03:19 - next up is don't have Journal comments
03:21 - this is another thing that you should
03:23 - use your version control for use git log
03:25 - to to get the history of your code so
03:28 - you don't need to have the history re
03:30 - write in your code so we're just going
03:31 - to delete all these and then the last
03:34 - one is avoid positional markers so this
03:36 - right here these are these are markers
03:38 - just to so you can see where in your
03:40 - code you are pretty easily but they just
03:43 - add noise you should let the functions
03:44 - and variable names and just how you
03:46 - format the code give your the structure
03:48 - to your code so you don't need these
03:51 - well thanks for watching this has been
03:52 - the last video in my clean code series
03:55 - all these videos were based on Ryan MC's
03:57 - great article on the topic you can check
04:00 - the link in the description to see the
04:01 - original article my name is Bo KS don't
04:04 - forget to subscribe and remember use
04:06 - your code for good

Cleaned transcript:

this video is about how to write clean code in your formatting and comments first formatting formatting is subjective the main point is not to argue over formatting just choose a certain type of formatting between you and your team and just go with it it's important to be consistent I'm just going to go over a few things about formatting one is that you should use consistent capitalization so here's an example of the bad way um you can see there's two constants here so you could choose either ways as long as you're consistent but we're going to change this to days in month okay and down here we have two arrays and we have the songs array and the artist array we're just going to make this not capitalized so it'll be consistent now we have two functions this one's camel case this one's not so let's change this so it's consistent and then we have two classes uh just make sure they're consistent if this is lowercase this should be lowercase next up is function collar and Coles should be close together ideally the caller should be right above the call E we tend to read code from top to bottom so it should make sense just reading down how the code supposed to go together so let's look at this bad example we have a bunch of functions and we're going to change the order here you can see that this uh perf review function calls three other functions so we're going to just cut that out and put that first and the first function it calls is get peer reviews so let's put that one right after after the per review and this calls look up here so we'll put that one next it's already next and now the next one that this per riew function calls us get manager reviews so we'll put that next and this is going to call lookup manager so that's next and now this calls get self review which we will put last here so now we've reordered the functions in this so it makes more sense it kind of reads in order now now we're going to move on to comments only comment things that have business logic complexity comments are an apology not a requirement good code comments itself so let's look at a piece of code here we have this function hash it and then look at the first comment the hash well we can tell it's the hash that's what the name of the variable is so let's take that one out and then we have length of string well we can see just by reading the Str the code that this is the length of the string so we don't need that comment this says Loop through every character in data yeah I think most people know that four means it's a loop so we can take that one out um get character code well this says right here care code at so see a lot of comments are unnecessary make the hash well we're saying hash equals something so we must be making the hash this is the only comment we're going to keep convert to 32bit integer because this may be a little less obvious to some people what it means so you can still keep some comments just nothing that's pretty easy to figure out just by looking at the code the next thing is don't leave commented out code code in your code base that's why we have Version Control so if you have this function do stuff and then you had all these other functions and you're not using them anymore so you commented them out uh just get rid of them because you can always go back using your version control system to previous versions and you don't need to keep that in your code next up is don't have Journal comments this is another thing that you should use your version control for use git log to to get the history of your code so you don't need to have the history re write in your code so we're just going to delete all these and then the last one is avoid positional markers so this right here these are these are markers just to so you can see where in your code you are pretty easily but they just add noise you should let the functions and variable names and just how you format the code give your the structure to your code so you don't need these well thanks for watching this has been the last video in my clean code series all these videos were based on Ryan MC's great article on the topic you can check the link in the description to see the original article my name is Bo KS don't forget to subscribe and remember use your code for good
