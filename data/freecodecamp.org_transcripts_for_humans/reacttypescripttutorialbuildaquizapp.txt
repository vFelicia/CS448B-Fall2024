With timestamps:

00:00 - welcome to this tutorial i'm thomas
00:02 - webenfart a developer and instructor
00:04 - from sweden i created this tutorial for
00:06 - free code camp and free code camp is
00:08 - great i also want to tell you that i
00:10 - have my own youtube channel wabenfalk
00:13 - but for now let's get started with this
00:18 - all right this is the quiz that we're
00:19 - building in this tutorial so we can
00:21 - start and we get some questions here and
00:24 - we have four different choices to choose
00:26 - from so if we press here you can see
00:27 - that it showed me that i answered
00:29 - incorrectly and it also showed me the
00:31 - correct answer and then we can move on
00:33 - through the questions here and this is
00:35 - all built with react and typescript so
00:38 - that's what i'm going to show you in
00:39 - this tutorial so this is the finished
00:41 - application
00:44 - all right so let's get started
00:49 - we're going to bootstrap our application
00:51 - with create direct app and we're going
00:53 - to set it to use typescript so if we
00:55 - check the site here create dash
00:57 - react-app.dev
00:59 - we can see that they have they have an
01:00 - option for adding typescript
01:02 - so we can use mpx create react app and
01:05 - the name of the application
01:07 - template and typescript and this will
01:09 - install everything with typescript
01:11 - support for us so we can do that so
01:13 - let's go inside of our console
01:16 - clear it
01:17 - and then we type in mpx create dash
01:20 - the react dash app and then our
01:23 - application is going to be named
01:25 - react-quiz
01:28 - in this case
01:29 - we type in
01:30 - template
01:32 - and typescript
01:34 - and we wait for it so this will install
01:36 - everything with typescript support for
01:38 - us so we just have to wait and it will
01:40 - be bootstrapped for us
01:43 - okay that went smooth let's see what
01:45 - we've got we have a react quiz folder so
01:47 - we can navigate inside of that one cd
01:49 - react dash quiz
01:51 - and then i open up the code editor we're
01:53 - going to clean up our product a little
01:55 - bit
02:01 - as you can see if we look in the folder
02:03 - here we have some files here and inside
02:05 - src folder we can actually remove some
02:07 - stuff that we're not going to need setup
02:10 - tests service worker
02:12 - the logo the index.css
02:15 - the app.test.tsx
02:18 - and the app.css remove those files
02:22 - like that and then we're going to do
02:24 - some refactoring here in the index.tsx
02:26 - file we can remove this one where we ins
02:29 - where we import the css file
02:32 - we can remove this one to import a
02:33 - service worker and also remove it down
02:36 - below here and this should be it
02:39 - save the file and then in the app.tsx
02:42 - file
02:44 - we remove the css import and the logo
02:47 - and for now we're just going to say
02:51 - quiz inside of here and do some auto
02:53 - formatting and save it then we're going
02:55 - to use star components to style this one
02:57 - i'm going to style it at the end of the
03:00 - tutorial so we're just going to build
03:01 - the functionality first but we can
03:03 - install the dependency for the star
03:05 - components and we can install it by
03:07 - typing mpmi
03:08 - style dash components and as this is in
03:11 - typescript we're going to do this
03:12 - application
03:14 - we also have to install the types for
03:15 - this one and we can grab those ones from
03:18 - at
03:20 - types forward slash
03:22 - style
03:23 - dash components
03:25 - like that so we first install the style
03:27 - components library itself and then we
03:29 - install the types for the style
03:30 - components and we do it in one go so
03:33 - press enter
03:35 - all right then we can just start this up
03:37 - to see that it works mpm start
03:42 - and we can go to localhost
03:46 - 3000 and you can see that it says quiz
03:48 - here and that's great we know that it's
03:50 - working so localhost colon 3000
03:53 - that's the dev server that this one
03:55 - creates for us and you can see you can
03:56 - also just click here and it will open up
03:58 - in your browser hopefully
04:00 - all right so that's the dependencies we
04:02 - only need to install style components
04:03 - for this one as a dependency but we have
04:06 - to do some more stuff here first we're
04:08 - going to have this nice little summer
04:10 - background image and i grabbed that one
04:12 - from on splash.com
04:14 - and i found this image down below here
04:17 - it's not adnan that has
04:19 - photographed this image so that's the
04:21 - one that i'm using so we can just
04:23 - download this one
04:26 - or if you want to use another image you
04:27 - can use that also
04:29 - so if we check out this image it should
04:32 - be in the downloaded folder
04:34 - and you can see i actually have two of
04:36 - them here because i've already
04:37 - downloaded it before
04:39 - so let's go inside the code editor again
04:42 - and inside
04:43 - the src folder we're going to create
04:45 - another folder that we call images
04:48 - maybe overkill for this one as we only
04:50 - have one image but i like to have a good
04:52 - structure on things so images
04:55 - and then
04:57 - we grab this image and drag it inside of
05:00 - there and i can actually rename it also
05:04 - because it has this strange long name we
05:07 - keep the name of the guy that has taken
05:09 - the photo
05:10 - all right so that's the images we're
05:12 - also going to need a couple of google
05:15 - fonts so go back to the web browser
05:18 - and i open this one up for us i'm going
05:20 - to use the font that's called catamaran
05:22 - i don't know if i pronounced that
05:23 - correctly
05:24 - i'm going to use the weight of 700. so
05:26 - select this one i already selected it
05:28 - here and i'm also going to use a font
05:30 - that's called fashionnate inline so
05:32 - these are the two fonts that i'm going
05:34 - to use so i've selected that one also so
05:36 - you can browse the fonts you can search
05:38 - for them here
05:39 - and then you add them and then we get
05:41 - this embed link here so copy this link
05:44 - go back to our code editor and we're
05:46 - going to navigate inside of the public
05:48 - folder and we have the index.html and in
05:51 - this case
05:53 - we're going to paste it in here so we
05:55 - import it in this index.html this is the
05:58 - file that is run when the application is
06:00 - built so we can import it here just like
06:03 - in a regular html file
06:05 - save it and this will make sure that we
06:07 - have those fonts all right so that's the
06:09 - fonts i can close this once and then we
06:12 - can just briefly check out the api that
06:14 - we're going to use for the questions
06:16 - so i found this open trivia api as you
06:19 - can see we can configure it we can
06:21 - select
06:22 - which category we want i'm going to use
06:24 - the any category we can select
06:26 - difficulty i'm not going to implement to
06:28 - select difficulty in the ui but i'm
06:30 - going to implement it in the app itself
06:32 - so you can change it in the code and we
06:34 - can also change to have multiple choice
06:36 - or true or false we're going to have
06:37 - multiple choice and we're going to use
06:39 - the default encoding and if we click
06:41 - generate the api url it should generate
06:44 - the url for us up here
06:46 - so this is the url and this will give us
06:48 - a json response with the questions and
06:50 - the answers
06:51 - as we just get this object it will be
06:54 - really easy to sheet if you want to do
06:56 - that because you can always check the
06:58 - questions and answers in the code
07:00 - because if we want to make a serious
07:02 - quiz game we probably have to create the
07:04 - proxy api or already use an api that
07:07 - won't show us the answers in the client
07:10 - so we have to make a request to a server
07:13 - and then it will get a response with
07:14 - answers and stuff like that
07:16 - but in our case for example if you have
07:18 - a react dev tools you can just check the
07:20 - state and you will see all the questions
07:22 - there and the answers
07:23 - so it's a very simple implementation of
07:26 - a quiz game and that should be it for
07:29 - the setup let's move on to create the
07:30 - logic for the application and then last
07:33 - in the tutorial we're going to create
07:34 - the ui the design for the application
07:39 - okay make sure that you have the
07:40 - application running by typing in npm
07:43 - start in the folder that we created with
07:45 - create dragged app and it will hopefully
07:47 - show quiz for you and it's also a good
07:49 - idea to have the console open so we can
07:51 - open that one up
07:55 - like that and then move back to our code
07:57 - editor the first thing i'm going to do
07:59 - now is to create a couple of new files
08:01 - and a folder because we are going to
08:03 - create a component for our question card
08:06 - so inside our soc folder i create a new
08:09 - folder that i call
08:10 - components
08:12 - and then i'm going to create a file
08:14 - inside of that one
08:16 - that i call question
08:20 - card dot tsx capital q capital c
08:24 - question card dot tsx and we can just
08:26 - scaffold this one out for now so we
08:29 - import react from react
08:33 - and then we create the const
08:36 - question card
08:38 - and an error function and for now
08:41 - we can create a div that says question
08:43 - card
08:44 - and we export default
08:47 - question card do some more formatting
08:49 - and save it so that is our
08:51 - question card component we're going to
08:52 - come back to this later
08:54 - and then inside of the src folder we're
08:56 - going to create two more files
08:58 - so first we have a file that we call api
09:00 - dot ts
09:02 - capital letters on api and then we have
09:05 - another file that i'm going to call
09:07 - utils.ts
09:09 - like that
09:10 - so the api file is going to be used
09:12 - where i create the logic for fetching
09:14 - data from the api and the utils file is
09:17 - just going to keep a small function that
09:19 - we're going to use to randomize the
09:20 - answers to the questions
09:22 - all right and we're going to come back
09:23 - to those also and then later we're going
09:25 - to create more files here because when
09:27 - we create the styles with a style
09:28 - component i like to have the styles in a
09:30 - separate file so we're going to create
09:32 - separate files for those also but we do
09:34 - that when we've created all the logic
09:36 - for this quiz game
09:38 - so let's start off in the app.tsx file
09:40 - this is going to be the main file for
09:42 - our application
09:44 - and if you want you can change this one
09:46 - to an arrow function
09:48 - i like to have error function but this
09:50 - is highly what you call it highly
09:52 - subjective if you don't like arrow
09:54 - functions you can use regular functions
09:56 - so it's okay
09:58 - this is the main component in our
10:00 - application
10:01 - so if we start scaffolding this one out
10:03 - we're going to have one function that we
10:05 - fire off when we start the quiz so const
10:08 - start
10:10 - trivia or start quiz
10:12 - start trivia i think that is fine this
10:14 - one is going to be async because we're
10:16 - going to make the api call from this one
10:18 - so we can already know mark it with
10:20 - async
10:21 - so we leave it empty for now
10:24 - then we're going to have one function
10:25 - that we're going to trigger when the
10:27 - user selects an answer it's a const
10:30 - check answer
10:31 - equals
10:33 - this one is going to take in the event
10:35 - like this and you can see that it
10:37 - complains you know because this is
10:39 - typescript they're telling us we haven't
10:40 - specified a type for this one so it's
10:42 - implicitly set to any and we should set
10:45 - a type for it so the event is going to
10:47 - be a mouse event
10:49 - and we can specify it even more so we
10:51 - specify to html
10:55 - button element
10:57 - and we end it
10:59 - with a angle bracket like that
11:03 - something like that and of course we
11:05 - need to have a colon here also and as
11:07 - we're in react i guess we have to tell
11:10 - it react dot mouse event also like that
11:14 - so react.mouseevent and then we specify
11:16 - it even more by telling it it's from an
11:18 - html button element
11:21 - so that's how you type this event then
11:23 - we're gonna have a function that will
11:24 - trigger when the user click for the next
11:26 - question so const
11:29 - next question
11:31 - equals and in this one we don't actually
11:34 - need the event so we just create an
11:35 - empty error function like this so this
11:37 - is all the functions that we need for
11:39 - this trivia and of course we're going to
11:41 - come back to them in a second but first
11:43 - we're going to scaffold out our jsx here
11:46 - in the return statement
11:49 - so we wrap it in a parenthesis first
11:52 - like this
11:55 - and then we have the repetitive that's
11:56 - called app now
11:58 - we're going to rename these ones also
11:59 - later when we create the star components
12:01 - but for now they will be divs with class
12:03 - names
12:05 - and first we're going to have an h1 tag
12:07 - with a header for the quiz and we call
12:09 - it react quiz
12:11 - like that
12:12 - then we're gonna have a button to start
12:13 - the game so we create a button with a
12:16 - class name
12:18 - of start
12:19 - and we set the on click handler to the
12:21 - function that we created start trivial
12:24 - like that
12:28 - and it can just say
12:30 - and it can just say start inside of it
12:34 - so that's the button then we're going to
12:36 - have a paragraph with a class name of
12:40 - score
12:41 - and this is the one that's going to hold
12:43 - the score so for now we're just setting
12:45 - score like this
12:49 - then we're going to have a
12:50 - paragraph with a class name
12:55 - that is telling us loading
12:57 - questions
12:59 - you could of course implement a spinner
13:01 - or something if you want to do that
13:02 - instead
13:05 - and then we're going to have our
13:06 - question card so we can import that one
13:08 - up here
13:10 - i mark it with components
13:12 - and import
13:14 - question card
13:16 - from
13:17 - it's in our components folder and then
13:19 - we have the question card like that
13:24 - so down below here
13:30 - we create the question card
13:32 - like that
13:33 - and the last thing we're going to have
13:35 - is a button below everything of this
13:37 - that is used to click to the next
13:39 - question so button
13:41 - class name equals next
13:44 - and for this one we have an on click
13:46 - handler
13:48 - next question
13:50 - like that
13:53 - and we can just type out next question
13:57 - and do some order formatting
14:00 - so you can see that we're using the next
14:01 - question and the start trivia here this
14:03 - one here is going to be sent in by props
14:06 - to the question card component so we can
14:08 - create the question card component now
14:10 - so let's go inside the question card dot
14:13 - tsx file just as before we create
14:16 - parentheses here we can make an implicit
14:18 - return on this one so we don't have to
14:20 - have a return statement
14:23 - and as we're in typescript now we have
14:25 - to type the props for this one
14:29 - so we create a type call it props you
14:31 - can call it whatever you want it doesn't
14:33 - need to
14:34 - have the name props
14:36 - first we're going to give it the
14:37 - question
14:39 - and this one is going to be a string the
14:41 - question is always going to be a string
14:43 - then we're going to give it all the
14:45 - answers and the answers is going to be
14:47 - an array of strings so string
14:50 - array this is how you type an array of
14:52 - strings
14:55 - then we're going to give it a call back
14:57 - and for now we can just set it to annie
15:01 - and we have the user answer that's the
15:04 - answer that the user is going to give us
15:06 - it's also going to be a string
15:09 - we have the question number it's going
15:12 - to be a number
15:15 - quest
15:16 - number like that
15:18 - then we have total questions
15:22 - that one is also going to be a number so
15:24 - these are the props for this component
15:26 - but how do we specify it to use these
15:28 - props
15:30 - first of all we have to specify this one
15:32 - to be a functional component so just
15:34 - after the name here
15:36 - we have a colon and from react we have
15:39 - something that's called fc so dot fc
15:42 - these are the types from react itself so
15:44 - it will tell typescript that this is a
15:46 - functional component
15:48 - and if we want to specify props we do
15:50 - that inside of angle brackets like this
15:54 - so we tell it that we want to use these
15:56 - props that we created up here
15:58 - and then just as usual we can just
16:00 - structure out the props
16:02 - so we have the question
16:04 - we have the answer you can see that we
16:05 - get this nice auto completion here where
16:07 - it tells us what we've got
16:10 - we have the callback
16:12 - we have the user answer
16:16 - we have the question number and we have
16:18 - the total questions i'm going to do some
16:20 - order formatting here because i have
16:22 - this insanely large font because i want
16:25 - you to be able to see what i'm typing
16:27 - but it's hard to work with it actually
16:30 - so these are the props that we have now
16:32 - and now we can use them inside or our
16:35 - component
16:36 - so this div is going to be a repetitive
16:39 - i'm going to create parentheses here
16:41 - again
16:42 - so we have the repetitive we have the
16:44 - ending parenthesis
16:48 - remove some stuff there
16:50 - so this is the repetitive we're gonna
16:52 - display the current question that we're
16:53 - on so we can do that in a p tag
16:56 - with a class name
16:58 - of
16:59 - number and then we can type out question
17:03 - colon
17:04 - and then from the props we're going to
17:06 - grab the question number
17:08 - like that
17:10 - and then we do a forward slash and then
17:12 - we grab the total
17:14 - questions
17:16 - like so because we're in jsx now so when
17:18 - you want to grab a javascript variable
17:21 - or
17:22 - create a javascript expression we do
17:24 - that inside of curly brackets
17:26 - all right so that is going to indicate
17:28 - what question the user is on and then we
17:30 - have the question itself
17:32 - and in the response from the api we're
17:34 - going to get some html in react we have
17:36 - something that's called dangerously set
17:38 - inner html that we can use when we want
17:41 - to render out some html and it's called
17:44 - like this because it is dangerous to use
17:46 - because you never know
17:47 - what can be injected here in our case we
17:50 - know that it's safe so we can use it
17:52 - here so we create a p tag
17:54 - and we use dangerously set inner html
17:57 - and we have curly brackets then we have
17:59 - a new set of curly brackets because it's
18:01 - an object and we have underscore
18:03 - underscore html
18:05 - and we're going to give it the question
18:07 - no it shouldn't be the question number
18:09 - it should be the question like that
18:12 - all right
18:13 - then we're going to have a repetitive
18:14 - for all the answers to the question
18:17 - and we're going to map through the
18:18 - answers because we have all the answers
18:20 - in this prop here
18:23 - it should actually be called answers
18:24 - with an s and not answer
18:27 - so we can change that one answers with
18:29 - an s
18:32 - so down below here in the wrapping div
18:34 - we create curly brackets and we have the
18:36 - answers
18:38 - dot map so we map through them we have
18:40 - an answer
18:43 - like that we create an inline arrow
18:45 - function we can use implicit return here
18:47 - also so we create parenthesis and then
18:49 - we have a wrapper for our button
18:52 - so we create another set of divs and
18:54 - inside of there we create a button
18:56 - it's going to be disabled depending on
18:59 - if the user has made a choice if the
19:01 - user has answered something
19:03 - so we set to disabled equals
19:07 - user answer this one is going to be a
19:09 - boolean
19:11 - so it will
19:12 - be disabled if this one is
19:14 - useful i set it to string you can see
19:16 - that typescript complains here now
19:18 - because i said it's the string it will
19:20 - complain we will make sure that this
19:22 - will get the true or false value later
19:24 - so we have to change this one now
19:27 - so it should be a boolean instead
19:30 - you can see that it won't complain
19:32 - anymore so this is one of the great
19:34 - strengths with typescript it will tell
19:36 - you when you code if you do something
19:38 - wrong and you can correct it before the
19:40 - bug even happens all right then we have
19:41 - an on click handler on this one and this
19:43 - is going to call the callback
19:47 - like so we close it i'm going to have
19:49 - some text for the button also and this
19:51 - one is also going to get the text in
19:53 - html format so we create a span
19:58 - and dangerously set inner html equals
20:01 - curly brackets and we have the object
20:03 - with another set of curly brackets
20:06 - underscore underscore html
20:09 - and we give it the answer in this case
20:13 - and then we self-close the span do some
20:15 - auto formatting see that everything
20:18 - works i think it is
20:20 - working yeah
20:22 - save the file
20:24 - but now you can see inside of the
20:25 - app.tsx file if we go back to that file
20:28 - so you can see that it complains now
20:30 - because it wants the props and we're
20:32 - going to give it the props also but
20:33 - first i'm going to create the states
20:34 - that we're going to use for this
20:36 - application and we're going to have six
20:37 - of them
20:38 - actually because i'm going to split them
20:40 - up that's great with hooks node you
20:42 - don't need to have one big state we can
20:44 - have
20:45 - a few of them instead so up here first
20:48 - we import use state like that
20:51 - and just down below here in the
20:52 - component at the beginning we're going
20:54 - to create our states
20:56 - first we're going to have a loading
20:57 - state
20:58 - so const loading
21:00 - and set loading like that
21:03 - and we use state we set it to false as a
21:06 - default
21:08 - then we're going to have the questions
21:12 - like that and set questions
21:17 - and we use state
21:18 - and we give it an empty array for now
21:21 - we're also going to specify this later
21:24 - and give it a type but we can't do that
21:26 - yet because i'm going to create a type
21:28 - when we create the function for the api
21:31 - then we have a state with a number and
21:34 - set number and this is going to be the
21:35 - number that the user is currently on the
21:38 - question number
21:40 - so use state we're going to start at
21:43 - zero
21:45 - then we're gonna have a state for the
21:47 - user answers
21:53 - and set user
21:55 - answers like that and use state
22:01 - and we give it an empty array
22:04 - as initial value
22:06 - and then we're gonna have the score and
22:08 - set score
22:13 - and use state and this one is zero as
22:15 - initial value
22:18 - and then i also gonna have one that's
22:20 - called game over and set game over
22:24 - so that we can keep track on
22:26 - when the game is finished so you stayed
22:31 - and we set it to true initially
22:34 - okay so let's give this question card
22:36 - it's props
22:39 - first we have the question number
22:41 - and this one we're going to get from
22:43 - number
22:44 - but we're going to add one because the
22:46 - number
22:47 - is going to be used for the array and
22:48 - the array starts at zero and we don't
22:51 - want to start our questions with a zero
22:53 - so we add one to this one because that
22:56 - will make the first question to have the
22:57 - number one
23:00 - okay then we have the total questions
23:03 - and for this one we're going to create a
23:05 - const up here
23:07 - const and we have capital letter total
23:10 - underscore questions
23:13 - equals 10 and this one is because it
23:16 - will be easy to just change this for us
23:18 - if we want to modify the total questions
23:22 - so total questions is going to be the
23:24 - total underscore questions
23:26 - like that
23:29 - then we're going to have the question
23:30 - itself and we're going to grab this
23:32 - question from our question state and we
23:36 - have the question stated here it's going
23:37 - to be an array of questions
23:42 - so if we want to give it the current
23:43 - question we can do that
23:46 - with questions
23:48 - and then we grab from number
23:52 - and then we give it the question itself
23:55 - and you can see that it complains now
23:57 - because for now typescript doesn't know
23:58 - that it exists so it complains here to
24:01 - us
24:04 - we're going to give it the answers
24:06 - and we have our answers
24:08 - also in the questions
24:10 - number
24:11 - and in a property that's called answers
24:15 - like that and then we're going to give
24:16 - it the actual answer from the user so
24:18 - user answer
24:20 - equals and then we check if we have some
24:22 - user answers
24:25 - we create a turner operator and if we
24:27 - have some answers in the user answer
24:30 - state
24:32 - user answers
24:34 - we can grab the correct answer by
24:37 - specifying the number
24:39 - otherwise we just give it undefined
24:43 - like that
24:45 - and you can see here yeah it should say
24:47 - user answers and this one will complain
24:49 - now because i realized
24:51 - that if we go back to the question card
24:53 - you can see that
24:54 - tell this one that it's a boolean it's
24:56 - actually not so we set it to annie for
24:58 - now
24:59 - go back to our app.tsx file and you can
25:01 - see that it won't complain now
25:04 - and the last one we're going to give it
25:05 - is the callback
25:08 - and it's going to be the check answer
25:11 - like that and now you can see that it
25:12 - won't complain here because we're giving
25:14 - it all the props it will just complain
25:16 - here because it doesn't know that these
25:18 - properties exist but we'll fix this soon
25:23 - so i think we have everything set up now
25:25 - actually and we can move over to the
25:27 - api.ts file and create the function that
25:29 - will grab the data from the api
25:32 - so we export const
25:37 - fetch
25:39 - quiz
25:41 - questions like that
25:43 - and this one is going to be async and
25:45 - we're going to have a couple of
25:46 - parameters here because we want to be
25:47 - able to specify how many questions that
25:49 - we want to grab so we can create a
25:51 - parameter amount it's going to be a
25:53 - number
25:54 - and then we have another one that we
25:56 - call
25:58 - difficulty
26:00 - and this is going to be easy medium or
26:02 - hard because we can't grab this from the
26:04 - api
26:05 - so we should be able to set it here how
26:07 - do we specify this because it can only
26:09 - be easy medium or hard and in typescript
26:12 - we have something that's called an enum
26:16 - so export
26:18 - enum
26:21 - we call it
26:22 - difficulty like this and we can specify
26:25 - the constants inside of here we have one
26:27 - that's called ec
26:30 - and it's going to equal ec
26:34 - then we have the medium one and it's
26:36 - going to of course equal medium
26:39 - make sure you have a coma after these
26:41 - ones also and then we have hard
26:46 - and it's going to equal hard
26:48 - and i actually want to have a capital d
26:50 - on difficulty so we can specify this
26:53 - parameter as
26:55 - the enum difficulty
26:58 - all right
26:59 - and this will make sure that we only can
27:01 - use these values and it won't accept
27:03 - anything else that way we won't make a
27:06 - mistake of typing something like this
27:08 - for example
27:09 - because then the endpoint won't work
27:13 - so that's the parameters for this one
27:15 - then we want to specify the return type
27:19 - it's going to be a promise of
27:21 - yeah i can actually remove this one for
27:23 - now because we're going to console.log
27:24 - out what we get from the api first and
27:26 - then we can see what type we're going to
27:28 - specify for this one so inside here we
27:30 - create a const with endpoint
27:32 - i create a template literal with
27:34 - backticks so http
27:37 - s
27:38 - colon forward slash forward slash open
27:43 - tdb
27:45 - dot com forward slash api dot php
27:49 - question mark
27:51 - amount and then we have an equal sign
27:53 - and then we can grab
27:55 - this variable here amount so we create
27:57 - the dollar sign curly brackets
28:00 - and give it the amount
28:02 - and this one that i'm typing in now is
28:04 - of course from the api so we could of
28:06 - course just also copied it then we have
28:09 - an ampersand and we're going to give it
28:11 - the next variable here so difficulty
28:15 - equals and then we have a dollar sign
28:17 - curly brackets and we give it the
28:19 - difficulty
28:20 - argument
28:21 - and the last one we have another
28:23 - ampersand and we set the type equals to
28:26 - multiple
28:28 - so as you can see you can configure this
28:30 - as you want in this case i'm just
28:33 - making sure that we can change the
28:34 - amount and the difficulty but you could
28:36 - change the type and stuff like that
28:38 - and really customize it how you want it
28:40 - to be we end it with a semicolon all
28:43 - right so that's the end point
28:46 - then in a cons that i call data i'm
28:48 - going to await because we are going to
28:50 - hit that endpoint now so i await
28:53 - and then i have a parenthesis i await
28:56 - again i get a lot of questions on why
28:58 - i'm using double weights and that's
29:00 - because first we await
29:02 - the fetch itself and then we're gonna
29:04 - wait when we convert it to json so await
29:08 - fetch
29:09 - parenthesis we give it the end point
29:11 - like that
29:12 - and then here we have dot json
29:15 - and we call that one
29:17 - so this will await the fetch itself and
29:19 - then it will await when we convert it to
29:21 - json
29:24 - and for now we're just going to console
29:26 - log out the data
29:30 - like so
29:31 - we're going to come back to this one
29:33 - go back to the app.tsx file
29:35 - and i'm actually going to
29:39 - comment out this one for now so we don't
29:40 - have an error
29:48 - and up here we can import that function
29:50 - that we created so import
29:55 - fetch quiz
29:58 - questions
29:59 - from
30:01 - dot forward slash and we have it in the
30:03 - api.ts file
30:06 - like so
30:08 - and what i want to do now is to try this
30:11 - function out to see what we've got so we
30:13 - have this function here fetch quiz
30:15 - questions
30:16 - really hard to say for me
30:19 - and we can call it here
30:22 - the console.log
30:25 - fetch with questions
30:30 - like that
30:32 - and we need to give it two parameters
30:34 - now you can see that it complains
30:35 - expected two arguments but got zero so
30:38 - this is also great with typescript it's
30:40 - telling us all the time if we're doing
30:42 - something wrong so first we're gonna
30:44 - give it
30:46 - the total questions and then we need to
30:48 - give it easy medium or hard
30:51 - and if you remember in the api.tsi we
30:54 - created this enum here that i also also
30:56 - export so that means that we can import
30:58 - this one in the app
31:00 - dot tsx file
31:03 - so i'm going to mark this one with types
31:06 - and i import
31:09 - difficulty
31:12 - from
31:14 - dot forward slash api
31:16 - like so
31:18 - and that means that we can use it here
31:21 - so in our console log
31:23 - as the second argument from difficulty
31:25 - we're gonna grab
31:27 - the easy one
31:30 - save it back to our browser you can see
31:33 - that we have everything here now
31:36 - and here is the response you can see
31:38 - that we have a response code of zero and
31:40 - we have the result so this is what we
31:42 - care about here we have the ten
31:43 - questions here and now we can see the
31:45 - structure of
31:46 - the object the question object here by
31:49 - looking at this one here
31:51 - we can actually create the type for this
31:52 - one
31:53 - so we have a category the correct answer
31:55 - and difficulty these are all strings
31:57 - then we have the incorrect answers in an
32:00 - array and then we have the question and
32:02 - the type so let's move back to the code
32:07 - and inside of the api.ts file i'm going
32:10 - to specify the type for each question
32:13 - so type
32:15 - i'm going to export this one also export
32:18 - type
32:19 - question equals
32:22 - it's always good to export stuff like
32:24 - this because you never know when you
32:25 - need it in your application
32:28 - so first if we go back to the browser
32:30 - you can see that by the category correct
32:32 - answer difficulty incorrect answer
32:33 - question and type
32:36 - so now it's just a matter of specifying
32:39 - this here category
32:41 - this one is going to be string
32:43 - we have the correct underscore answer
32:46 - this one is also going to be a string
32:49 - we have the difficulty
32:53 - it's a
32:54 - string we have the incorrect underscore
32:58 - answer and this one is going to be an
33:00 - array of string so string and an array
33:05 - we have the question itself it's going
33:07 - to be a string and then we have the type
33:09 - it's also going to be a string
33:11 - but one thing i want to do here also
33:13 - because i want to modify the state that
33:15 - i get back here because in this case we
33:17 - have the correct answer in a separate
33:19 - property and we have the incorrect
33:20 - answers in a separate array i want to
33:23 - have them in the same array because what
33:25 - i want to do later is that i want to map
33:27 - through this array and create the
33:29 - answers in the ui in the jsx so it's
33:32 - easier to have them in one array so we
33:34 - can have both the correct answer and
33:35 - incorrect answers in one array instead
33:38 - so i'm going to add a property
33:41 - in the object that we return here from
33:42 - the api and we also have to specify that
33:45 - with typescript of course and how do you
33:47 - do that
33:48 - well i'm going to create another type i
33:50 - export type
33:53 - and i'm going to call it
33:54 - question
33:55 - state
33:57 - so first i grab the question that i
33:59 - created here but i want to add something
34:01 - to this one so i create an ampersand
34:04 - and then i have an object
34:06 - i'm going to create a new property
34:08 - that's called answers and this one is
34:10 - going to be an array of strings
34:13 - so like that
34:14 - do some more formatting so this will use
34:17 - the types from the question but add this
34:19 - property to it and it will create this
34:21 - question state type instead so we're all
34:23 - good to go now we can return the correct
34:25 - data here in the fetch quiz questions
34:28 - yeah it's actually misspelled here
34:31 - questions it cell and then i need to
34:34 - change it in the app
34:36 - also
34:38 - like so
34:40 - and also here
34:42 - yeah something like that go back to the
34:44 - api dot ts file
34:46 - all right so we know that we get our
34:48 - data then we have to return some things
34:50 - so i return and from the data
34:52 - dot results
34:54 - i'm going to map through all of them and
34:56 - add this property that i talked about
34:58 - it's a map
35:01 - we have a question and now we can
35:03 - specify it as a question from our type
35:05 - question
35:06 - like that
35:08 - we make an implicit return we have a
35:10 - pair of curly brackets because we return
35:12 - an object
35:14 - and then we spread the question
35:18 - we want to use all the properties that
35:19 - we get from the question and you can do
35:21 - that with es6 syntax that's called
35:23 - spread so that's what we're doing here
35:24 - and then we add the new property
35:26 - of answer
35:29 - and there's actually one more thing i
35:31 - want to do because i want to shuffle the
35:32 - array here otherwise the correct answer
35:35 - will always be on the same place and
35:37 - that's why i created this utils.ts file
35:40 - so move inside of that one and we create
35:43 - another small function here export const
35:47 - shuffle array
35:50 - and this one takes in
35:53 - the array
35:54 - and it can be of any type
35:56 - in the array this one
35:59 - we have an error function
36:01 - so this array that we give this function
36:03 - i'm going to create a new array
36:06 - by spreading it inside of a new one this
36:08 - is also es6 syntax spreading it inside
36:10 - of here creating a new array
36:13 - and then i use sort
36:15 - give it an inline error function
36:18 - and use math dot random
36:22 - minus 0.5 do some auto formatting and
36:26 - this is kind of a quick fix for creating
36:28 - a
36:28 - randomizer function it's not completely
36:31 - accurate but in our case it will do
36:34 - so this yeah this have to do for now
36:36 - this is not a tutorial about creating
36:38 - random functions so this will do the
36:41 - trick for us this will do the job
36:43 - so save it and go back inside the api.ts
36:46 - file and up here at the top we can
36:49 - import this one
36:52 - so import
36:54 - shuffle array
36:57 - from dot forward slash and utils
37:02 - like so
37:03 - so go back below here where we create
37:05 - the object and inside the answer
37:07 - property
37:08 - i'm going to call the shuffle array and
37:10 - give it the array that i want to shuffle
37:13 - so yet again i use es6 syntax i create
37:16 - an array
37:17 - i spread from
37:19 - the question dot
37:21 - the incorrect answer you can see here
37:23 - typescript gives us all the properties
37:25 - that's available for us
37:27 - so the question dot incorrect answer
37:30 - and then
37:31 - from the question
37:33 - dot
37:34 - correct answers correct answer
37:37 - so we spread all the incorrect answers
37:39 - and the
37:40 - correct answer and then we shuffle it
37:42 - with this function here
37:44 - do some more formatting and it will look
37:46 - something like this yeah and before we
37:48 - do anything this one should be incorrect
37:50 - answers
37:54 - like so
37:57 - i keep forgetting these esses i
37:59 - don't know why but i keep forgetting
38:01 - them make sure that it says incorrect
38:03 - answers with an s and also change the
38:05 - type to that one save it
38:07 - and this one goes also here this
38:09 - property here should be called answers
38:11 - with an s
38:16 - yeah because it says answers here also
38:18 - so keep forgetting those ss add them to
38:20 - these ones otherwise it won't work
38:23 - all right save it go back to the browser
38:26 - reload it and you can see now we have a
38:28 - promise here but we can see that it's
38:30 - resolved and if we look at the question
38:32 - here you can see that we have the new
38:34 - property with answers here so we can see
38:36 - that the correct answer for this one is
38:38 - bull we have that one inside of here and
38:40 - the incorrect answers it's bad horse and
38:42 - snake and we also have these ones so
38:44 - this is exactly what we want now we have
38:46 - an easy way to map through all the
38:48 - answers when we do that
38:51 - all right so let's get back inside of
38:53 - the code this is the api.ts file it's
38:55 - finished now and also the utils.ts is
38:58 - finished
39:00 - so back inside the app.tsx file so in
39:03 - the types we're also going to use the
39:05 - question state the question
39:07 - state
39:09 - that's the one that we created we import
39:10 - that one also here and now we can set
39:12 - this one is going to be an array of the
39:14 - type question state
39:16 - so we can specify that one here inside
39:19 - of the angle bracket
39:22 - question state and an array
39:25 - like that then typescript will know
39:27 - because we're sending this to an empty
39:28 - array it can't really know what this is
39:30 - going to be but by specifying it like
39:32 - this we tell typescript that this is
39:34 - going to be an array of question state
39:36 - so we have to create this type for the
39:38 - answer object also
39:40 - just below here we create a new type we
39:43 - don't have to export this one because
39:44 - we're not using it in another component
39:46 - answer object
39:48 - equals and the answer is going to have a
39:50 - property with a question
39:53 - it's going to be a string
39:55 - we're gonna have the answer
39:58 - and this is a string we're gonna have a
40:00 - correct
40:01 - that's the boolean
40:04 - like so and then we have the correct
40:06 - answer
40:09 - and it's a string so the correct will
40:11 - tell if the user answered correctly and
40:13 - the correct answer will have the correct
40:15 - answer and then we have the user answer
40:17 - here and we also have the question and
40:18 - this is good to have a complete object
40:21 - like this because if we for example want
40:23 - to extend our game and show all the
40:25 - questions in the end when the quiz is
40:28 - finished we have them nicely in this
40:30 - array that's called user answers we're
40:32 - not really going to do that now
40:34 - but i created it this way so you can
40:37 - kind of extend from here if you want to
40:39 - do that
40:41 - now we can specify these user answers so
40:43 - we create
40:45 - angle brackets
40:47 - and answer objects and an array
40:53 - so then we have all our types for the
40:54 - states
40:57 - save it and just make sure that it still
40:59 - works
41:00 - it does so that's great so we're going
41:02 - to implement the start trivia function
41:04 - now so that we can start a game
41:06 - so inside of that function
41:09 - we have to do
41:10 - some stuff here first
41:12 - when we click the start button we're
41:14 - going to trigger the api fetch and that
41:16 - means that we're loading something so
41:17 - we're going to set the loading to true
41:20 - that's the first thing that we do and
41:22 - we're also gonna set the game over to
41:24 - false because when we start a new game
41:26 - it's not game over so when we've done
41:28 - that when we set the loading and the
41:30 - game over we can hit the endpoint so we
41:32 - create a const
41:34 - new questions
41:36 - then we're going to await
41:38 - and recall the fetch quiz questions
41:41 - and we're going to give it the two
41:43 - arguments that it needs it needs the
41:45 - total questions
41:46 - and just as before we give it the
41:48 - difficulty dot easy
41:50 - as the second argument
41:53 - all right so that will grab the new
41:55 - questions and put it in this const here
41:59 - so when we awaited this one and we have
42:01 - all the questions we can set the
42:03 - questions
42:06 - with the new questions like that
42:09 - and hopefully we have all the questions
42:10 - in this state and in this tutorial i'm
42:13 - not doing any error handling so you
42:15 - could of course
42:16 - use a try or catch block and if you want
42:18 - to catch the error or something like
42:20 - that
42:21 - this video is already getting long so i
42:23 - won't go into that here but you should
42:25 - of course always do some arrow handling
42:27 - if you have an error
42:29 - all right
42:30 - then we're also going to set the score
42:31 - to zero because we're starting from
42:33 - scratch now
42:34 - so it should be reset and we set the
42:36 - user answers
42:38 - to an empty array
42:42 - so we're kind of resetting everything
42:44 - here so set
42:46 - number we're also setting that one to
42:48 - zero
42:49 - and then when we're done all of this we
42:51 - hopefully have our questions in our
42:53 - state and everything is working then we
42:55 - can set the loading
42:56 - the false because we're not loading
42:58 - anymore and this is it for the start
43:01 - trivia function
43:04 - so save it go back here and click start
43:07 - you can see that we get the promise here
43:12 - but that's because we're console logging
43:14 - it out here we can remove this one here
43:18 - and actually just
43:19 - console log out
43:21 - the questions instead
43:23 - go back to the browser press start
43:27 - you can see that we have all the
43:28 - questions inside of here and you
43:29 - shouldn't worry because you may wonder
43:31 - why whoa it renders a lot of stuff here
43:34 - but that's fine there's no performance
43:36 - issue here that's because we have a lot
43:38 - of these states that will trigger a
43:40 - rerender but it will only re-render
43:42 - stuff that is new for each render so you
43:45 - shouldn't worry too much about that
43:46 - especially not in a small app like this
43:50 - all right so we know that we have our
43:51 - questions in the state that's fine it's
43:53 - working
43:55 - really nice
43:57 - but for now also you can see that it
43:58 - just says loading questions we want to
44:00 - display the questions and the answers
44:01 - here also
44:04 - so we can modify our jsx here
44:08 - so first this button here to start the
44:10 - game is only going to be displayed if
44:12 - the game is over or if the user has
44:15 - answered the last question so we create
44:17 - curly brackets
44:19 - we check if game over
44:21 - or
44:23 - we have double pipe
44:26 - user answers dot length equals
44:30 - total questions then we know that we're
44:32 - on the last question and then we're
44:33 - going to display this
44:35 - button
44:39 - it can get a little bit messy here now
44:42 - so we have parentheses around that one
44:44 - otherwise we return null we have the
44:46 - ending curly bracket there
44:49 - like so
44:51 - i think and you could also do a regular
44:53 - short circuit without this turner
44:55 - operator if you want to do that but i
44:56 - think it's great to return at least null
44:59 - and as you can see now it displays the
45:01 - button but not now when we press it
45:04 - so that's working
45:06 - okay that's the start button and then we
45:07 - want to show the score we only want to
45:10 - show the score if we're not in a game
45:12 - over mode for this one
45:16 - so curly brackets not game over
45:20 - we have another toner operator
45:22 - and otherwise we show null and we have
45:24 - the end curly bracket like so
45:28 - and the loading questions is only going
45:30 - to be shown when we load something so
45:32 - curly bracket loading
45:37 - like so
45:41 - and now yeah it may be better to just
45:43 - have a short circuit
45:46 - i can do it like this for this one
45:50 - so if it's loading it's going to show
45:51 - this one save it and we can see what
45:53 - we've got
45:54 - so we have start and next question we
45:56 - start
45:59 - you can see that the loading was showing
46:02 - and we showed the score so this is
46:04 - working also go back to the code
46:07 - and now we're going to bring back the
46:09 - question card
46:11 - and the question card is only going to
46:12 - be shown if we're not loading and if
46:15 - we're not in game over so we create a
46:17 - curly bracket
46:19 - not loading
46:21 - and
46:23 - not game over
46:26 - yeah i do a short circuit here
46:32 - a little bit messy here again
46:35 - something like that do some more
46:36 - formatting so if we're not loading and
46:38 - if it's not game over we're gonna show
46:40 - the question card save it go back to the
46:43 - browser start
46:46 - you can see that well the question and
46:48 - the answers here so that's sweet
46:51 - now we have the next question button
46:53 - also
46:54 - but we haven't implemented those
46:55 - functions yet
46:57 - all right that's the question card and
46:59 - then we have the next button and this
47:01 - one is only going to be shown
47:04 - if we're not in a game over
47:07 - and we're not loading and the user
47:11 - answers
47:13 - dot length
47:15 - equals number plus one
47:18 - and by doing this we just want to show
47:20 - the next question when the user actually
47:22 - has put in an answer so that's why we
47:25 - check it here if the user answers dot
47:26 - length equals number plus one
47:29 - so we don't show it if the user haven't
47:31 - given us an answer yet
47:33 - and the last thing we want to check if
47:35 - we're not on the last question so number
47:38 - not equals
47:42 - total questions
47:43 - but we have to modify this one also
47:45 - because we have to set it to -1
47:48 - and then i have a question mark
47:51 - parentheses this is really messy here
47:53 - now
47:56 - i'm going to move up the button inside
47:58 - of there
48:00 - and down below here colon and null
48:05 - yeah it should just be two equal signs
48:07 - there of course
48:09 - and do some order formatting and i think
48:11 - that this will work
48:15 - go back to the browser
48:18 - yeah so now it's not showing because we
48:20 - have to give an answer first before we
48:22 - showing that one yeah and it's telling
48:24 - me that it should have a key prop here
48:26 - we're going to fix that one also
48:30 - and that one is in the question card
48:32 - because here where we map through these
48:34 - ones we should have a key
48:37 - and we can give it answer as a key and
48:39 - this will make this arrow go away or
48:42 - this warning
48:44 - all right so this is working now go back
48:47 - to the app.tsx we're going to implement
48:49 - the other functions now and then the
48:51 - game will work and then we can move on
48:53 - to create the style for this one
48:57 - so inside the check answer
49:01 - first we're only going to run this
49:02 - function if we're not in a game over so
49:05 - if not game over
49:10 - then we get the user's answer
49:15 - const answer
49:17 - equals and we get that from the e dot
49:19 - current target
49:22 - dot value
49:24 - because this is when we press
49:26 - that button here
49:28 - so you can see that we're calling this
49:29 - callback on click and that's why we also
49:32 - have to set this value on here so value
49:35 - we give it the answer like this
49:38 - otherwise we won't be able to read the
49:39 - values so it's very important to set the
49:41 - value also on the button here on the
49:43 - question card in the question card
49:45 - component
49:46 - like that go back to the app dot tsx so
49:50 - from e dot current target dot value we
49:52 - get that value and that's gonna be the
49:54 - answer
49:55 - then we're gonna check
49:59 - answer against
50:02 - the correct value
50:04 - or the correct answer
50:06 - so const correct
50:08 - equals
50:10 - and from questions
50:13 - we have the current number that's the
50:14 - question that we're on we have the
50:16 - property that's called correct
50:18 - underscore answer
50:19 - and we check if that one equals the
50:21 - answer then we know if if it's correct
50:23 - or not so this will give us true or
50:24 - false
50:28 - add score if answer is correct
50:32 - so if correct
50:35 - set score
50:38 - and we have the previous score and we
50:41 - add it by one
50:43 - like so
50:46 - all right so that's if it's correct then
50:48 - we add to the score and then we're going
50:50 - to save the answer in the array of
50:52 - answers here and we have this answer
50:53 - object
50:55 - we're going to give it a question answer
50:57 - correct and correct answer
50:59 - so that's what we're setting here
51:02 - so save
51:05 - answer in the array
51:08 - for user answers
51:10 - something like that const
51:12 - answer object
51:14 - equals and we create an object question
51:22 - and from the questions
51:25 - number
51:28 - we grab the question
51:30 - and then we have the answer
51:32 - and then we have the correct
51:34 - and this is also es6 syntax if this one
51:37 - is the same this is exactly the same as
51:40 - typing out answer when these two are the
51:42 - same
51:43 - we just need to type it out once like
51:45 - this
51:47 - and then we have the correct answer
51:51 - and from questions
51:54 - and the number we have the property
51:56 - that's called correct answer
52:00 - do some order formatting and this will
52:02 - make sure that it creates this object
52:03 - with the data about the answer and then
52:05 - we need to put it in the answer array
52:08 - so set user
52:10 - answers
52:13 - we have the previous state
52:15 - and we create a new array
52:17 - spread out the previous
52:18 - and we give it the answer object
52:21 - auto format it
52:23 - and save it and this should be it for
52:24 - the answers
52:26 - go back to the browser see that it works
52:28 - reload it start
52:32 - yeah you can see the next question is
52:34 - showing up also
52:36 - but it's not working now because we
52:37 - haven't implemented this function
52:40 - but it seems to be working so we just
52:42 - have to implement that function also and
52:44 - then we have a fully working game but it
52:46 - will look like crap because we haven't
52:48 - styled it yet
52:50 - so we have the next question function
52:53 - here
52:55 - move on to
52:56 - the next question
52:59 - if not the last
53:02 - question
53:03 - so we have to check if we're on the last
53:05 - question the const next
53:08 - question
53:09 - equals
53:11 - number plus one because the question
53:13 - we're currently on is the number and
53:16 - then we add to 1 and then we can check
53:18 - if this is the last question or not
53:20 - so
53:21 - if
53:22 - next question
53:24 - equals total questions
53:26 - we know that that one is the last
53:28 - question
53:30 - because total questions is always going
53:32 - to be one number ahead of the number
53:34 - because we're using this for the array
53:36 - that starts at index zero and this one
53:39 - doesn't do that so we have to add one
53:41 - so when we check the next question with
53:43 - the total questions that will give us
53:44 - the answer if we're on the last question
53:47 - and if we're on the last question we set
53:49 - game over
53:50 - to true
53:51 - like so
53:54 - else
53:55 - we're not on the last question so we can
53:57 - set the number
53:59 - to the next question like so order
54:02 - format it and save it and go back to the
54:04 - browser reload it just to be sure
54:08 - and start
54:09 - select and answer
54:11 - which of the following was not one of
54:13 - the magnificent seven oh i really don't
54:16 - know actually
54:20 - next question and you can see
54:23 - it will move through the questions we
54:25 - can't see the correct answer now because
54:26 - we haven't styled it
54:28 - but it seems to be working let's see
54:30 - what it does when it's on the last
54:32 - question
54:34 - yeah you can see it displays the start
54:36 - button when we're on the last question
54:38 - and it's not displaying the next
54:39 - question so we can restart the game
54:43 - and it's working quite nicely i think
54:46 - but as i told you we can't really see if
54:47 - we
54:48 - put in the correct answer because we do
54:50 - all that stuff with the styling
54:53 - and that's what we're going to do next
54:54 - we're going to use style components to
54:56 - style this quiz
54:58 - all right before we move on with the
55:00 - styling for this one i'm going to fix
55:02 - these types because i forgot that we had
55:04 - these annie types here and if we can fix
55:06 - it we should do that so we can type this
55:09 - correctly and we're going to change this
55:11 - callback and the user answer so for the
55:13 - callback we already have the types for
55:15 - that one in the
55:17 - app.tsx file if we go down here to that
55:20 - function this check answer function
55:22 - we're already typing this one here so we
55:25 - can just copy this one
55:28 - like that
55:29 - copy that one go back to the
55:31 - questioncard.tsx file and replace the
55:34 - annie
55:35 - with this one instead and we're going to
55:37 - return void for this one we're not
55:39 - returning anything so we can specify it
55:41 - as void
55:42 - so that's the callback and the user
55:45 - answer we actually created a type for
55:47 - this one also in the app.tsx file we
55:49 - have this answer object i think i said
55:52 - that we didn't need to export this one
55:54 - but we have to export it because we can
55:56 - use it in the question card now to
55:58 - specify that type so add an export to
56:01 - that one and then we can import it in
56:03 - the questioncard.tsx
56:05 - so add an export save the file and then
56:08 - go back to the questioncard.tsx
56:10 - and up here we can mark it with types
56:13 - so import answer object
56:17 - and we import it from dot forward slash
56:22 - app
56:24 - something like that
56:26 - so we have the type here now for the
56:28 - user answer so instead of any we can use
56:31 - answer object but it can also be
56:33 - undefined
56:34 - so we create a pipe
56:36 - and specify it as undefined
56:39 - like that
56:41 - save the file and there's also one more
56:43 - thing we have to do now because down
56:45 - here this one
56:47 - disabled it wants a boolean and this one
56:50 - is not a boolean now so if we want to
56:52 - convert this one to a boolean value we
56:55 - can use
56:56 - double bangs
56:58 - double exclamation marks
57:00 - or we can specify it like this with a
57:03 - turner operator if we have the user
57:06 - answer we set it to true otherwise we
57:08 - set it to false so it's up to you you
57:10 - can use whatever you want but just make
57:11 - sure that you give this one a boolean
57:14 - value otherwise it won't work so this is
57:16 - it this is all the types now we don't
57:18 - have any any type now except in this
57:21 - utils function because this one can take
57:24 - an array with any value
57:26 - so make sure to save the files and i'm
57:28 - also going to check
57:29 - so that it works go back to the browser
57:32 - reload it
57:33 - and it still works and that's great
57:36 - so that's the types let's move on with
57:37 - the styling
57:42 - okay we're going to give this quiz some
57:43 - styling but first we have to also make
57:46 - sure that we display the score i forgot
57:48 - that one so we have the state with score
57:50 - so move down here to the jsx
57:52 - in the app.tsx component
57:55 - just somewhere
57:57 - here
57:59 - yeah here where we set the score we're
58:00 - actually not showing anything there now
58:03 - so we're gonna add that one here so we
58:05 - have curly brackets and we show the
58:07 - score like that
58:10 - this will make sure that we show the
58:11 - score to the user
58:13 - and you should be able to see
58:17 - yeah
58:18 - yeah i've had a score one there yeah so
58:20 - you can see that it's displaying nice
58:22 - all right so we're going to create a new
58:24 - file now we're going to create some
58:25 - styling for the app.tsx file first so
58:28 - inside the source folder the src folder
58:30 - create a new file
58:32 - app.styles.ts
58:36 - and we're going to import some stuff
58:37 - from style components so import styled
58:40 - coma
58:41 - and then with the structure out create
58:44 - global
58:46 - style like that
58:48 - from dot style components
58:52 - so style is the regular thing that you
58:54 - import and we're also importing create
58:55 - global style i think it is self
58:58 - explaining we're going to create some
58:59 - global styling with that one so that's
59:01 - the first thing that we're going to do
59:03 - but first we also want to import our
59:05 - background image
59:06 - bd image you can call it whatever you
59:08 - want
59:09 - from
59:11 - dot forward slash images
59:14 - forward slash and then we have that
59:17 - i really don't know why it can't find it
59:23 - yeah and this one is complaining because
59:24 - i removed the test file before i think
59:28 - that shouldn't matter
59:30 - but this is strange i think we just
59:34 - created ts ignore for this one for now
59:38 - something like that
59:39 - i think it will work we'll see if it
59:41 - work later
59:42 - so export const
59:45 - global style you can call it whatever
59:46 - you want you don't need to call it
59:48 - global style but we call the create
59:51 - global style
59:52 - with double back ticks
59:54 - and we can create a global styling first
59:56 - we set the html
59:58 - i'm going to set the height to 100
60:01 - on that one
60:03 - and just as usual
60:05 - when i style stuff like this there are
60:07 - some room for optimization i think i
60:09 - just did these styles really quickly so
60:12 - there probably will be more effective
60:14 - ways of doing stuff here
60:17 - but i'm in a summer vacation mode now so
60:19 - this will probably be one of the last
60:20 - videos before i take a well-deserved
60:23 - vacation so that's why i actually didn't
60:27 - think i was going to do this before the
60:28 - summer but then i felt yeah why not so
60:30 - that's why i created this one
60:32 - all right so we have the body we set the
60:34 - background
60:36 - dash image
60:39 - to the url and then we can grab this url
60:42 - with dollar sign curly brackets
60:45 - pd image like that
60:51 - and then we set the background size
60:56 - to cover
60:58 - i set the margin to zero the padding
61:02 - is going to be 0 and 20 pixels
61:04 - i set the display to flex
61:07 - and justify content to sender
61:11 - so that's the body
61:13 - and then
61:14 - i have an asterisk i'm going to set the
61:16 - box
61:17 - sizing
61:21 - book sizing to border box
61:24 - and then i'm also going to set the font
61:26 - on every element on this one so font
61:28 - family
61:30 - catamaran
61:35 - and
61:36 - sans riff as a fallback font
61:39 - all right so that's the global styling
61:41 - i'm actually gonna import that one in
61:42 - the app component now to see if this
61:44 - background image works so go back to the
61:46 - app.tsx file
61:48 - and up here
61:50 - i mark it with styles
61:54 - i import
61:58 - global style from
62:02 - dot forward slash app.styles
62:06 - and then when you create a global style
62:07 - with style components we get the regular
62:09 - component here so we can use that one
62:11 - down in the jsx
62:13 - we can put it somewhere here at the top
62:15 - so i create a fragment because dsx can
62:18 - only return one element
62:21 - i close it here
62:23 - and then we can
62:25 - use
62:26 - the global star component like this
62:30 - do some order formatting
62:33 - and save it go back to the application
62:36 - yeah and the image works i don't really
62:39 - know i complained there
62:41 - so if it complains just add that
62:44 - little
62:45 - comment there
62:47 - that i created
62:48 - to comment this one out i don't really
62:50 - know because it worked in my other
62:52 - application when i created this example
62:54 - so
62:55 - don't really know why
62:58 - but that's the global styling and then
63:00 - we can do some styling in the app itself
63:04 - so export const i'm going to create a
63:06 - component that i call wrapper
63:09 - style.div
63:11 - double backticks
63:14 - it's going to be displayed as flex
63:19 - flex direction is going to be column
63:23 - and the align items
63:26 - is going to be center
63:28 - like so then i want to style the p tag
63:32 - in this wrapper so i created a forward
63:34 - error and the p to just style the p tag
63:37 - in this app wrapper i don't want it to
63:40 - be styled on all the p tags
63:42 - so i set the color
63:44 - to white
63:48 - so that's the p tag
63:50 - then i'm gonna have a class that i call
63:51 - score and that's of course the score
63:53 - table
63:54 - i set the color there also to white we
63:57 - could of course specify some css
63:59 - variables for the colors if we want to
64:01 - do that that's one way you can optimize
64:03 - this css
64:05 - i set the font size to 2rem
64:08 - the margin is going to be 0 on this one
64:11 - all right so that's the score class then
64:14 - we have the h1 tag and this is going to
64:16 - be this one up here that's going to be
64:18 - the actual logo that i'm styling with
64:20 - css
64:22 - all right so the font family is going to
64:24 - be fascinate
64:28 - inline
64:30 - not impact
64:33 - inline like that
64:38 - then i set the background image
64:44 - and this one is going to be the linear
64:46 - gradient so linear
64:48 - dash gradient
64:51 - and inside it's going to be 180 degrees
64:54 - 180 deg
64:56 - i set the first value to white
64:59 - and the second one is going to be
65:01 - 8 7 f
65:04 - 1 f f
65:06 - and to be able to show this linear
65:07 - gradient in the font we also have to set
65:10 - the background size
65:12 - to 100
65:14 - and the background
65:19 - dash clip is going to be text
65:24 - then we can also set all the webkit
65:26 - stuff here for this one so webkit
65:28 - dash background clip
65:33 - it's going to be text
65:37 - webkit
65:38 - dash text
65:40 - fill
65:41 - color is going to be transparent
65:46 - and we have the moss
65:48 - door dash background
65:51 - clip it's going to be text and we have
65:54 - the moss
65:56 - text
65:57 - fill
65:59 - dash color
66:03 - it's gonna be transparent
66:08 - double dash maybe
66:11 - all right
66:13 - now we're gonna have some drop shadow on
66:14 - this one so we set the filter
66:18 - to drop dash shadow
66:21 - and 2 pixels 2 pixels and the color is
66:24 - going to be
66:25 - 0 0 8 5
66:28 - a 3.
66:31 - the font size is going to be
66:34 - 70 pixels
66:36 - text line
66:38 - is going to be center
66:41 - and the margin is going to be 20 pixels
66:43 - on this one
66:44 - okay we're not really finished yet but
66:46 - we can import these styles
66:48 - inside of here
66:50 - in the app.tsx file just to see that
66:52 - this one works
66:55 - so we import the wrapper
66:59 - and below here we have to change our jsx
67:01 - because now instead of this div with
67:03 - class name app we're going to use the
67:05 - wrapper component
67:07 - and make sure to also close it down
67:10 - below here
67:11 - save it go back to the browser and you
67:14 - can see that it's not quite working here
67:16 - and i don't know why i think it's those
67:21 - app.styles
67:22 - i think maybe these ones should be just
67:25 - one
67:26 - and i also want to set the font weight
67:31 - to 400 on this one
67:34 - save it go back
67:35 - yeah and now it's working so there's a
67:37 - little bit of
67:39 - trouble doing stuff like this as you can
67:41 - see there's a little bit of special
67:43 - syntax here to get it to work if you
67:45 - don't like to do it this way you can
67:47 - save that logo as an svg file instead
67:50 - and that will also work just fine
67:53 - all right then we have a couple of more
67:55 - classes here
67:57 - so we have the start and the dot next
68:00 - class
68:02 - i'm going to set the cursor to a pointer
68:06 - i'm going to set the background on these
68:08 - ones as a linear gradient
68:12 - 180 degrees on that one also
68:15 - i set it to white
68:16 - and the second color is going to be ffcc
68:20 - 91
68:22 - so that's the start on the next button
68:25 - we set the border to two pixels solid
68:29 - and the color is going to be d3
68:32 - eight five five
68:34 - eight
68:36 - like so i'm gonna have a box shadow
68:41 - zero pixels five pixels 10 pixels
68:45 - and then i set the rgba
68:49 - 000 and 0.5 now
68:52 - 0.25
68:54 - on the box shadow
68:58 - i set the border radius
69:03 - to 10 pixels
69:05 - and the height is going to be 40 pixels
69:08 - the margin is going to be 20 pixels 0
69:12 - and the padding
69:13 - is going to be 0 40 pixels
69:16 - like so and then i want to do some
69:18 - special styling on the start button
69:22 - so max dash
69:24 - width is 200 pixels
69:27 - order format it and save it go back to
69:30 - the browser and this should be it
69:32 - hopefully start
69:35 - you can see that the next button is also
69:37 - style here but we're not styling the
69:39 - actual question card now so that's what
69:42 - we're going to do next
69:49 - all right
69:53 - so inside the components folder we have
69:54 - our question card
69:56 - to create a new file
69:58 - question
70:00 - card
70:00 - dot
70:01 - dot
70:03 - and for this one we import style from
70:06 - style components
70:10 - then we export
70:11 - const wrapper
70:14 - style.div you can see also that in this
70:17 - tutorial
70:18 - i just create a wrapper and then i have
70:19 - regular classes you can of course create
70:21 - a style component for each little thing
70:23 - if you want to do that but sometimes i
70:25 - think it's overkill so it's just enough
70:27 - to have this wrapper and i create
70:29 - classes in this case i'm also going to
70:31 - have a bottom wrapper on this question
70:33 - card so i create two components for this
70:35 - one
70:36 - but it's fully legit to just have a
70:38 - wrapper and then you have your classes
70:40 - inside if you don't want to create a
70:41 - style components for every little thing
70:43 - in your application
70:45 - all right we set a max width
70:48 - on this one to 1100 pixels
70:51 - i set the background to
70:55 - ebf e f f
70:59 - i set the border dash radius
71:01 - to 10 pixels
71:03 - i set the border to 2 pixels
71:06 - solid and the color is going to be 0 0 8
71:09 - 5
71:11 - a three
71:13 - the padding is going to be 20 pixels
71:16 - and i have a box shadow on this one also
71:18 - so box shadow 0 pixels 5 pixels 10
71:22 - pixels
71:23 - rgba
71:25 - 0 0 0 and 0.25
71:31 - and the text line
71:33 - is going to be center
71:36 - right then i start the p tag for this
71:38 - one
71:39 - we're gonna set the font size
71:42 - to one rem
71:44 - like that
71:45 - so that's the wrapper component then we
71:47 - have the bottom wrapper
71:50 - so export const
71:52 - button wrapper
71:55 - equal style dot div and this one is
71:58 - actually going to take in some props
72:00 - and how do you do that in style
72:01 - components well we can create a type
72:04 - here for example
72:06 - type bottom wrapper props
72:09 - and it's going to take in two props
72:11 - correct
72:12 - that's going to be a boolean
72:16 - and use the clicked
72:18 - that's also going to be a boolean
72:21 - all right
72:23 - and to use these props in the style
72:24 - components we create angle brackets here
72:27 - and we specify
72:28 - the bottom wrapper props and then we
72:30 - have double back ticks
72:33 - and then we can go on just as usual here
72:36 - and on this bottom wrapper i'm going to
72:37 - set a transition
72:41 - i'm lazy i'm just turning it to all 0.3
72:44 - seconds and is
72:48 - the hover is going to be
72:51 - i set the opacity to 0.8
72:56 - when we hover over the bottom
72:59 - and then we have the button itself so
73:01 - button
73:02 - i set the cursor to a pointer
73:06 - the user select
73:09 - is going to be none i don't want the
73:11 - user to be able to select the text
73:13 - the font size
73:15 - is going to be
73:16 - 0.8 rem
73:19 - the width
73:20 - is 100 percent
73:23 - the height is 40 pixels
73:26 - the margin is 5 pixels and 0 on this one
73:30 - then we're going to set the background
73:31 - and this one is going to be a nested
73:34 - ternary because we want to change the
73:36 - background depending on if we're showing
73:37 - the correct answer or if the user put in
73:40 - the wrong answer so we set the
73:42 - background
73:45 - and in style components we can grab the
73:48 - props
73:49 - by dollar sign
73:51 - curly brackets and then i can
73:53 - destructure out them like this
73:56 - so we have the correct prop and the user
73:58 - clicked prop
74:00 - and then we have the inline function
74:02 - here
74:05 - so first we're going to check if correct
74:07 - if that one is true
74:10 - i have a toner operator then i set the
74:12 - linear
74:15 - gradient
74:17 - to 90 degrees
74:20 - and the color is going to be 5 6
74:23 - ff
74:24 - a4
74:26 - as the first color and the second color
74:28 - is going to be
74:29 - 5 9
74:31 - bc
74:33 - 8 6
74:35 - like so
74:37 - so that's the first linear gradient so
74:39 - that is if it's the correct answer then
74:41 - it's going to show in green
74:44 - then we have the colon
74:46 - and then we have a nested toner operator
74:48 - here so if not correct
74:51 - and
74:53 - the user clicked
74:54 - so the user clicked is going to tell us
74:56 - if the user clicked on that specific
74:58 - button
74:59 - so we have a nested ternary operator
75:01 - here
75:02 - so we have another question mark
75:04 - and i can actually just copy this this
75:06 - one here
75:09 - paste it in and i just changed these
75:11 - values here
75:13 - this one is going to be
75:16 - ff5656
75:19 - and this one is going to be
75:22 - c1 six eight
75:26 - six eight
75:28 - and we add in the last one here so colon
75:32 - and we have the last linear gradient
75:35 - so this one is gonna be 5 6
75:39 - ccff
75:40 - and
75:43 - 6 e
75:44 - a f b
75:46 - 4
75:48 - do some auto formatting but i have some
75:50 - mistake here yeah that's because that
75:52 - question mark shouldn't be there
75:55 - so order format it and that's the
75:56 - background
75:58 - then we have some few more properties to
76:00 - set here
76:01 - i'm going to set the border
76:03 - to three pixels solid
76:07 - white
76:08 - i'm gonna set the box shadow
76:12 - one pixel two pixel zero pixel rgba
76:16 - zero zero
76:18 - zero and 0.1
76:22 - all right almost finished here with the
76:24 - styling border
76:27 - radius
76:29 - is going to be 10 pixels on this one and
76:32 - the color is going to be white
76:35 - and the last one is the text shadow
76:38 - zero pixels one pixel zero pixel rgba
76:43 - zero zero zero and zero point two five
76:47 - and auto format it
76:49 - so that's the styling
76:51 - now we just need to implement it in the
76:53 - component itself so optimize it if you
76:56 - want to do that at least it works now
76:58 - but it may not be the most optimized css
77:01 - so go back to the
77:02 - questioncard.tsx file and up here at the
77:05 - top we first gonna import our styles
77:09 - import
77:12 - wrapper and
77:14 - bottom wrapper from
77:17 - dot forward slash
77:18 - question card styles
77:21 - like that and then we have to modify our
77:23 - jsx here a little bit
77:25 - so first we have this repetitive that of
77:27 - course is going to be the wrapper
77:29 - make sure to end it with the wrapper
77:31 - also
77:32 - then there's nothing here to change
77:35 - this one is the bottom wrapper so this
77:37 - one is going to change
77:38 - it's going to be the bottom wrapper and
77:40 - if you remember we're going to send in
77:42 - two props to this one also
77:45 - because it's complaining now you can see
77:46 - it wants two props
77:50 - so the key is correct there that's fine
77:55 - but we're going to add in the props here
77:58 - so correct that's the prop
78:00 - we're going to check
78:02 - the user answer
78:04 - and here i'm using something that's
78:05 - called optional chaining in typescript
78:07 - so i create a question mark dot
78:11 - and the correct answer
78:13 - and i check it if that one equals the
78:15 - answer
78:17 - we should have triple equal sign so if i
78:18 - remove this one
78:21 - we don't actually know if we have a
78:22 - value here but if we use a question mark
78:25 - this one will not throw an error it will
78:28 - make this undefined if we don't have an
78:30 - answer here so that's why i'm using
78:31 - optional chaining
78:33 - then we have the user clicked
78:36 - so user answer
78:38 - yet again i use the optional chaining
78:41 - dot answer
78:43 - equals answer
78:45 - auto format it
78:46 - so if we don't have this one here it
78:48 - will throw an error if we don't have a
78:50 - user answer but by specifying like this
78:52 - it won't throw an error
78:54 - and i think this actually should be it
78:56 - so save it go back to the application
78:59 - we try it out start
79:01 - and yes we have our question here
79:06 - that's what okay that was right i didn't
79:08 - actually know that one all right the
79:10 - next question
79:12 - so
79:13 - as you can see i answered wrong but it's
79:15 - given me the correct answer here so
79:17 - everything seems to be working fine
79:26 - yeah and that's the last question and
79:28 - then it gives us the start button again
79:30 - so the quiz is working
79:35 - and that's super sweet so this is how
79:37 - you build a fairly simple little quiz
79:39 - game with react and typescript there are
79:42 - room for improvement but hopefully this
79:44 - gave you some insight in how it is to
79:46 - build an application with typescript and
79:48 - react so if you like this kind of
79:50 - tutorials make sure to subscribe and
79:52 - support me i will put out these
79:54 - tutorials regularly on my channel and
79:57 - hopefully i see you in another one

Cleaned transcript:

welcome to this tutorial i'm thomas webenfart a developer and instructor from sweden i created this tutorial for free code camp and free code camp is great i also want to tell you that i have my own youtube channel wabenfalk but for now let's get started with this all right this is the quiz that we're building in this tutorial so we can start and we get some questions here and we have four different choices to choose from so if we press here you can see that it showed me that i answered incorrectly and it also showed me the correct answer and then we can move on through the questions here and this is all built with react and typescript so that's what i'm going to show you in this tutorial so this is the finished application all right so let's get started we're going to bootstrap our application with create direct app and we're going to set it to use typescript so if we check the site here create dash reactapp.dev we can see that they have they have an option for adding typescript so we can use mpx create react app and the name of the application template and typescript and this will install everything with typescript support for us so we can do that so let's go inside of our console clear it and then we type in mpx create dash the react dash app and then our application is going to be named reactquiz in this case we type in template and typescript and we wait for it so this will install everything with typescript support for us so we just have to wait and it will be bootstrapped for us okay that went smooth let's see what we've got we have a react quiz folder so we can navigate inside of that one cd react dash quiz and then i open up the code editor we're going to clean up our product a little bit as you can see if we look in the folder here we have some files here and inside src folder we can actually remove some stuff that we're not going to need setup tests service worker the logo the index.css the app.test.tsx and the app.css remove those files like that and then we're going to do some refactoring here in the index.tsx file we can remove this one where we ins where we import the css file we can remove this one to import a service worker and also remove it down below here and this should be it save the file and then in the app.tsx file we remove the css import and the logo and for now we're just going to say quiz inside of here and do some auto formatting and save it then we're going to use star components to style this one i'm going to style it at the end of the tutorial so we're just going to build the functionality first but we can install the dependency for the star components and we can install it by typing mpmi style dash components and as this is in typescript we're going to do this application we also have to install the types for this one and we can grab those ones from at types forward slash style dash components like that so we first install the style components library itself and then we install the types for the style components and we do it in one go so press enter all right then we can just start this up to see that it works mpm start and we can go to localhost 3000 and you can see that it says quiz here and that's great we know that it's working so localhost colon 3000 that's the dev server that this one creates for us and you can see you can also just click here and it will open up in your browser hopefully all right so that's the dependencies we only need to install style components for this one as a dependency but we have to do some more stuff here first we're going to have this nice little summer background image and i grabbed that one from on splash.com and i found this image down below here it's not adnan that has photographed this image so that's the one that i'm using so we can just download this one or if you want to use another image you can use that also so if we check out this image it should be in the downloaded folder and you can see i actually have two of them here because i've already downloaded it before so let's go inside the code editor again and inside the src folder we're going to create another folder that we call images maybe overkill for this one as we only have one image but i like to have a good structure on things so images and then we grab this image and drag it inside of there and i can actually rename it also because it has this strange long name we keep the name of the guy that has taken the photo all right so that's the images we're also going to need a couple of google fonts so go back to the web browser and i open this one up for us i'm going to use the font that's called catamaran i don't know if i pronounced that correctly i'm going to use the weight of 700. so select this one i already selected it here and i'm also going to use a font that's called fashionnate inline so these are the two fonts that i'm going to use so i've selected that one also so you can browse the fonts you can search for them here and then you add them and then we get this embed link here so copy this link go back to our code editor and we're going to navigate inside of the public folder and we have the index.html and in this case we're going to paste it in here so we import it in this index.html this is the file that is run when the application is built so we can import it here just like in a regular html file save it and this will make sure that we have those fonts all right so that's the fonts i can close this once and then we can just briefly check out the api that we're going to use for the questions so i found this open trivia api as you can see we can configure it we can select which category we want i'm going to use the any category we can select difficulty i'm not going to implement to select difficulty in the ui but i'm going to implement it in the app itself so you can change it in the code and we can also change to have multiple choice or true or false we're going to have multiple choice and we're going to use the default encoding and if we click generate the api url it should generate the url for us up here so this is the url and this will give us a json response with the questions and the answers as we just get this object it will be really easy to sheet if you want to do that because you can always check the questions and answers in the code because if we want to make a serious quiz game we probably have to create the proxy api or already use an api that won't show us the answers in the client so we have to make a request to a server and then it will get a response with answers and stuff like that but in our case for example if you have a react dev tools you can just check the state and you will see all the questions there and the answers so it's a very simple implementation of a quiz game and that should be it for the setup let's move on to create the logic for the application and then last in the tutorial we're going to create the ui the design for the application okay make sure that you have the application running by typing in npm start in the folder that we created with create dragged app and it will hopefully show quiz for you and it's also a good idea to have the console open so we can open that one up like that and then move back to our code editor the first thing i'm going to do now is to create a couple of new files and a folder because we are going to create a component for our question card so inside our soc folder i create a new folder that i call components and then i'm going to create a file inside of that one that i call question card dot tsx capital q capital c question card dot tsx and we can just scaffold this one out for now so we import react from react and then we create the const question card and an error function and for now we can create a div that says question card and we export default question card do some more formatting and save it so that is our question card component we're going to come back to this later and then inside of the src folder we're going to create two more files so first we have a file that we call api dot ts capital letters on api and then we have another file that i'm going to call utils.ts like that so the api file is going to be used where i create the logic for fetching data from the api and the utils file is just going to keep a small function that we're going to use to randomize the answers to the questions all right and we're going to come back to those also and then later we're going to create more files here because when we create the styles with a style component i like to have the styles in a separate file so we're going to create separate files for those also but we do that when we've created all the logic for this quiz game so let's start off in the app.tsx file this is going to be the main file for our application and if you want you can change this one to an arrow function i like to have error function but this is highly what you call it highly subjective if you don't like arrow functions you can use regular functions so it's okay this is the main component in our application so if we start scaffolding this one out we're going to have one function that we fire off when we start the quiz so const start trivia or start quiz start trivia i think that is fine this one is going to be async because we're going to make the api call from this one so we can already know mark it with async so we leave it empty for now then we're going to have one function that we're going to trigger when the user selects an answer it's a const check answer equals this one is going to take in the event like this and you can see that it complains you know because this is typescript they're telling us we haven't specified a type for this one so it's implicitly set to any and we should set a type for it so the event is going to be a mouse event and we can specify it even more so we specify to html button element and we end it with a angle bracket like that something like that and of course we need to have a colon here also and as we're in react i guess we have to tell it react dot mouse event also like that so react.mouseevent and then we specify it even more by telling it it's from an html button element so that's how you type this event then we're gonna have a function that will trigger when the user click for the next question so const next question equals and in this one we don't actually need the event so we just create an empty error function like this so this is all the functions that we need for this trivia and of course we're going to come back to them in a second but first we're going to scaffold out our jsx here in the return statement so we wrap it in a parenthesis first like this and then we have the repetitive that's called app now we're going to rename these ones also later when we create the star components but for now they will be divs with class names and first we're going to have an h1 tag with a header for the quiz and we call it react quiz like that then we're gonna have a button to start the game so we create a button with a class name of start and we set the on click handler to the function that we created start trivial like that and it can just say and it can just say start inside of it so that's the button then we're going to have a paragraph with a class name of score and this is the one that's going to hold the score so for now we're just setting score like this then we're going to have a paragraph with a class name that is telling us loading questions you could of course implement a spinner or something if you want to do that instead and then we're going to have our question card so we can import that one up here i mark it with components and import question card from it's in our components folder and then we have the question card like that so down below here we create the question card like that and the last thing we're going to have is a button below everything of this that is used to click to the next question so button class name equals next and for this one we have an on click handler next question like that and we can just type out next question and do some order formatting so you can see that we're using the next question and the start trivia here this one here is going to be sent in by props to the question card component so we can create the question card component now so let's go inside the question card dot tsx file just as before we create parentheses here we can make an implicit return on this one so we don't have to have a return statement and as we're in typescript now we have to type the props for this one so we create a type call it props you can call it whatever you want it doesn't need to have the name props first we're going to give it the question and this one is going to be a string the question is always going to be a string then we're going to give it all the answers and the answers is going to be an array of strings so string array this is how you type an array of strings then we're going to give it a call back and for now we can just set it to annie and we have the user answer that's the answer that the user is going to give us it's also going to be a string we have the question number it's going to be a number quest number like that then we have total questions that one is also going to be a number so these are the props for this component but how do we specify it to use these props first of all we have to specify this one to be a functional component so just after the name here we have a colon and from react we have something that's called fc so dot fc these are the types from react itself so it will tell typescript that this is a functional component and if we want to specify props we do that inside of angle brackets like this so we tell it that we want to use these props that we created up here and then just as usual we can just structure out the props so we have the question we have the answer you can see that we get this nice auto completion here where it tells us what we've got we have the callback we have the user answer we have the question number and we have the total questions i'm going to do some order formatting here because i have this insanely large font because i want you to be able to see what i'm typing but it's hard to work with it actually so these are the props that we have now and now we can use them inside or our component so this div is going to be a repetitive i'm going to create parentheses here again so we have the repetitive we have the ending parenthesis remove some stuff there so this is the repetitive we're gonna display the current question that we're on so we can do that in a p tag with a class name of number and then we can type out question colon and then from the props we're going to grab the question number like that and then we do a forward slash and then we grab the total questions like so because we're in jsx now so when you want to grab a javascript variable or create a javascript expression we do that inside of curly brackets all right so that is going to indicate what question the user is on and then we have the question itself and in the response from the api we're going to get some html in react we have something that's called dangerously set inner html that we can use when we want to render out some html and it's called like this because it is dangerous to use because you never know what can be injected here in our case we know that it's safe so we can use it here so we create a p tag and we use dangerously set inner html and we have curly brackets then we have a new set of curly brackets because it's an object and we have underscore underscore html and we're going to give it the question no it shouldn't be the question number it should be the question like that all right then we're going to have a repetitive for all the answers to the question and we're going to map through the answers because we have all the answers in this prop here it should actually be called answers with an s and not answer so we can change that one answers with an s so down below here in the wrapping div we create curly brackets and we have the answers dot map so we map through them we have an answer like that we create an inline arrow function we can use implicit return here also so we create parenthesis and then we have a wrapper for our button so we create another set of divs and inside of there we create a button it's going to be disabled depending on if the user has made a choice if the user has answered something so we set to disabled equals user answer this one is going to be a boolean so it will be disabled if this one is useful i set it to string you can see that typescript complains here now because i said it's the string it will complain we will make sure that this will get the true or false value later so we have to change this one now so it should be a boolean instead you can see that it won't complain anymore so this is one of the great strengths with typescript it will tell you when you code if you do something wrong and you can correct it before the bug even happens all right then we have an on click handler on this one and this is going to call the callback like so we close it i'm going to have some text for the button also and this one is also going to get the text in html format so we create a span and dangerously set inner html equals curly brackets and we have the object with another set of curly brackets underscore underscore html and we give it the answer in this case and then we selfclose the span do some auto formatting see that everything works i think it is working yeah save the file but now you can see inside of the app.tsx file if we go back to that file so you can see that it complains now because it wants the props and we're going to give it the props also but first i'm going to create the states that we're going to use for this application and we're going to have six of them actually because i'm going to split them up that's great with hooks node you don't need to have one big state we can have a few of them instead so up here first we import use state like that and just down below here in the component at the beginning we're going to create our states first we're going to have a loading state so const loading and set loading like that and we use state we set it to false as a default then we're going to have the questions like that and set questions and we use state and we give it an empty array for now we're also going to specify this later and give it a type but we can't do that yet because i'm going to create a type when we create the function for the api then we have a state with a number and set number and this is going to be the number that the user is currently on the question number so use state we're going to start at zero then we're gonna have a state for the user answers and set user answers like that and use state and we give it an empty array as initial value and then we're gonna have the score and set score and use state and this one is zero as initial value and then i also gonna have one that's called game over and set game over so that we can keep track on when the game is finished so you stayed and we set it to true initially okay so let's give this question card it's props first we have the question number and this one we're going to get from number but we're going to add one because the number is going to be used for the array and the array starts at zero and we don't want to start our questions with a zero so we add one to this one because that will make the first question to have the number one okay then we have the total questions and for this one we're going to create a const up here const and we have capital letter total underscore questions equals 10 and this one is because it will be easy to just change this for us if we want to modify the total questions so total questions is going to be the total underscore questions like that then we're going to have the question itself and we're going to grab this question from our question state and we have the question stated here it's going to be an array of questions so if we want to give it the current question we can do that with questions and then we grab from number and then we give it the question itself and you can see that it complains now because for now typescript doesn't know that it exists so it complains here to us we're going to give it the answers and we have our answers also in the questions number and in a property that's called answers like that and then we're going to give it the actual answer from the user so user answer equals and then we check if we have some user answers we create a turner operator and if we have some answers in the user answer state user answers we can grab the correct answer by specifying the number otherwise we just give it undefined like that and you can see here yeah it should say user answers and this one will complain now because i realized that if we go back to the question card you can see that tell this one that it's a boolean it's actually not so we set it to annie for now go back to our app.tsx file and you can see that it won't complain now and the last one we're going to give it is the callback and it's going to be the check answer like that and now you can see that it won't complain here because we're giving it all the props it will just complain here because it doesn't know that these properties exist but we'll fix this soon so i think we have everything set up now actually and we can move over to the api.ts file and create the function that will grab the data from the api so we export const fetch quiz questions like that and this one is going to be async and we're going to have a couple of parameters here because we want to be able to specify how many questions that we want to grab so we can create a parameter amount it's going to be a number and then we have another one that we call difficulty and this is going to be easy medium or hard because we can't grab this from the api so we should be able to set it here how do we specify this because it can only be easy medium or hard and in typescript we have something that's called an enum so export enum we call it difficulty like this and we can specify the constants inside of here we have one that's called ec and it's going to equal ec then we have the medium one and it's going to of course equal medium make sure you have a coma after these ones also and then we have hard and it's going to equal hard and i actually want to have a capital d on difficulty so we can specify this parameter as the enum difficulty all right and this will make sure that we only can use these values and it won't accept anything else that way we won't make a mistake of typing something like this for example because then the endpoint won't work so that's the parameters for this one then we want to specify the return type it's going to be a promise of yeah i can actually remove this one for now because we're going to console.log out what we get from the api first and then we can see what type we're going to specify for this one so inside here we create a const with endpoint i create a template literal with backticks so http s colon forward slash forward slash open tdb dot com forward slash api dot php question mark amount and then we have an equal sign and then we can grab this variable here amount so we create the dollar sign curly brackets and give it the amount and this one that i'm typing in now is of course from the api so we could of course just also copied it then we have an ampersand and we're going to give it the next variable here so difficulty equals and then we have a dollar sign curly brackets and we give it the difficulty argument and the last one we have another ampersand and we set the type equals to multiple so as you can see you can configure this as you want in this case i'm just making sure that we can change the amount and the difficulty but you could change the type and stuff like that and really customize it how you want it to be we end it with a semicolon all right so that's the end point then in a cons that i call data i'm going to await because we are going to hit that endpoint now so i await and then i have a parenthesis i await again i get a lot of questions on why i'm using double weights and that's because first we await the fetch itself and then we're gonna wait when we convert it to json so await fetch parenthesis we give it the end point like that and then here we have dot json and we call that one so this will await the fetch itself and then it will await when we convert it to json and for now we're just going to console log out the data like so we're going to come back to this one go back to the app.tsx file and i'm actually going to comment out this one for now so we don't have an error and up here we can import that function that we created so import fetch quiz questions from dot forward slash and we have it in the api.ts file like so and what i want to do now is to try this function out to see what we've got so we have this function here fetch quiz questions really hard to say for me and we can call it here the console.log fetch with questions like that and we need to give it two parameters now you can see that it complains expected two arguments but got zero so this is also great with typescript it's telling us all the time if we're doing something wrong so first we're gonna give it the total questions and then we need to give it easy medium or hard and if you remember in the api.tsi we created this enum here that i also also export so that means that we can import this one in the app dot tsx file so i'm going to mark this one with types and i import difficulty from dot forward slash api like so and that means that we can use it here so in our console log as the second argument from difficulty we're gonna grab the easy one save it back to our browser you can see that we have everything here now and here is the response you can see that we have a response code of zero and we have the result so this is what we care about here we have the ten questions here and now we can see the structure of the object the question object here by looking at this one here we can actually create the type for this one so we have a category the correct answer and difficulty these are all strings then we have the incorrect answers in an array and then we have the question and the type so let's move back to the code and inside of the api.ts file i'm going to specify the type for each question so type i'm going to export this one also export type question equals it's always good to export stuff like this because you never know when you need it in your application so first if we go back to the browser you can see that by the category correct answer difficulty incorrect answer question and type so now it's just a matter of specifying this here category this one is going to be string we have the correct underscore answer this one is also going to be a string we have the difficulty it's a string we have the incorrect underscore answer and this one is going to be an array of string so string and an array we have the question itself it's going to be a string and then we have the type it's also going to be a string but one thing i want to do here also because i want to modify the state that i get back here because in this case we have the correct answer in a separate property and we have the incorrect answers in a separate array i want to have them in the same array because what i want to do later is that i want to map through this array and create the answers in the ui in the jsx so it's easier to have them in one array so we can have both the correct answer and incorrect answers in one array instead so i'm going to add a property in the object that we return here from the api and we also have to specify that with typescript of course and how do you do that well i'm going to create another type i export type and i'm going to call it question state so first i grab the question that i created here but i want to add something to this one so i create an ampersand and then i have an object i'm going to create a new property that's called answers and this one is going to be an array of strings so like that do some more formatting so this will use the types from the question but add this property to it and it will create this question state type instead so we're all good to go now we can return the correct data here in the fetch quiz questions yeah it's actually misspelled here questions it cell and then i need to change it in the app also like so and also here yeah something like that go back to the api dot ts file all right so we know that we get our data then we have to return some things so i return and from the data dot results i'm going to map through all of them and add this property that i talked about it's a map we have a question and now we can specify it as a question from our type question like that we make an implicit return we have a pair of curly brackets because we return an object and then we spread the question we want to use all the properties that we get from the question and you can do that with es6 syntax that's called spread so that's what we're doing here and then we add the new property of answer and there's actually one more thing i want to do because i want to shuffle the array here otherwise the correct answer will always be on the same place and that's why i created this utils.ts file so move inside of that one and we create another small function here export const shuffle array and this one takes in the array and it can be of any type in the array this one we have an error function so this array that we give this function i'm going to create a new array by spreading it inside of a new one this is also es6 syntax spreading it inside of here creating a new array and then i use sort give it an inline error function and use math dot random minus 0.5 do some auto formatting and this is kind of a quick fix for creating a randomizer function it's not completely accurate but in our case it will do so this yeah this have to do for now this is not a tutorial about creating random functions so this will do the trick for us this will do the job so save it and go back inside the api.ts file and up here at the top we can import this one so import shuffle array from dot forward slash and utils like so so go back below here where we create the object and inside the answer property i'm going to call the shuffle array and give it the array that i want to shuffle so yet again i use es6 syntax i create an array i spread from the question dot the incorrect answer you can see here typescript gives us all the properties that's available for us so the question dot incorrect answer and then from the question dot correct answers correct answer so we spread all the incorrect answers and the correct answer and then we shuffle it with this function here do some more formatting and it will look something like this yeah and before we do anything this one should be incorrect answers like so i keep forgetting these esses i don't know why but i keep forgetting them make sure that it says incorrect answers with an s and also change the type to that one save it and this one goes also here this property here should be called answers with an s yeah because it says answers here also so keep forgetting those ss add them to these ones otherwise it won't work all right save it go back to the browser reload it and you can see now we have a promise here but we can see that it's resolved and if we look at the question here you can see that we have the new property with answers here so we can see that the correct answer for this one is bull we have that one inside of here and the incorrect answers it's bad horse and snake and we also have these ones so this is exactly what we want now we have an easy way to map through all the answers when we do that all right so let's get back inside of the code this is the api.ts file it's finished now and also the utils.ts is finished so back inside the app.tsx file so in the types we're also going to use the question state the question state that's the one that we created we import that one also here and now we can set this one is going to be an array of the type question state so we can specify that one here inside of the angle bracket question state and an array like that then typescript will know because we're sending this to an empty array it can't really know what this is going to be but by specifying it like this we tell typescript that this is going to be an array of question state so we have to create this type for the answer object also just below here we create a new type we don't have to export this one because we're not using it in another component answer object equals and the answer is going to have a property with a question it's going to be a string we're gonna have the answer and this is a string we're gonna have a correct that's the boolean like so and then we have the correct answer and it's a string so the correct will tell if the user answered correctly and the correct answer will have the correct answer and then we have the user answer here and we also have the question and this is good to have a complete object like this because if we for example want to extend our game and show all the questions in the end when the quiz is finished we have them nicely in this array that's called user answers we're not really going to do that now but i created it this way so you can kind of extend from here if you want to do that now we can specify these user answers so we create angle brackets and answer objects and an array so then we have all our types for the states save it and just make sure that it still works it does so that's great so we're going to implement the start trivia function now so that we can start a game so inside of that function we have to do some stuff here first when we click the start button we're going to trigger the api fetch and that means that we're loading something so we're going to set the loading to true that's the first thing that we do and we're also gonna set the game over to false because when we start a new game it's not game over so when we've done that when we set the loading and the game over we can hit the endpoint so we create a const new questions then we're going to await and recall the fetch quiz questions and we're going to give it the two arguments that it needs it needs the total questions and just as before we give it the difficulty dot easy as the second argument all right so that will grab the new questions and put it in this const here so when we awaited this one and we have all the questions we can set the questions with the new questions like that and hopefully we have all the questions in this state and in this tutorial i'm not doing any error handling so you could of course use a try or catch block and if you want to catch the error or something like that this video is already getting long so i won't go into that here but you should of course always do some arrow handling if you have an error all right then we're also going to set the score to zero because we're starting from scratch now so it should be reset and we set the user answers to an empty array so we're kind of resetting everything here so set number we're also setting that one to zero and then when we're done all of this we hopefully have our questions in our state and everything is working then we can set the loading the false because we're not loading anymore and this is it for the start trivia function so save it go back here and click start you can see that we get the promise here but that's because we're console logging it out here we can remove this one here and actually just console log out the questions instead go back to the browser press start you can see that we have all the questions inside of here and you shouldn't worry because you may wonder why whoa it renders a lot of stuff here but that's fine there's no performance issue here that's because we have a lot of these states that will trigger a rerender but it will only rerender stuff that is new for each render so you shouldn't worry too much about that especially not in a small app like this all right so we know that we have our questions in the state that's fine it's working really nice but for now also you can see that it just says loading questions we want to display the questions and the answers here also so we can modify our jsx here so first this button here to start the game is only going to be displayed if the game is over or if the user has answered the last question so we create curly brackets we check if game over or we have double pipe user answers dot length equals total questions then we know that we're on the last question and then we're going to display this button it can get a little bit messy here now so we have parentheses around that one otherwise we return null we have the ending curly bracket there like so i think and you could also do a regular short circuit without this turner operator if you want to do that but i think it's great to return at least null and as you can see now it displays the button but not now when we press it so that's working okay that's the start button and then we want to show the score we only want to show the score if we're not in a game over mode for this one so curly brackets not game over we have another toner operator and otherwise we show null and we have the end curly bracket like so and the loading questions is only going to be shown when we load something so curly bracket loading like so and now yeah it may be better to just have a short circuit i can do it like this for this one so if it's loading it's going to show this one save it and we can see what we've got so we have start and next question we start you can see that the loading was showing and we showed the score so this is working also go back to the code and now we're going to bring back the question card and the question card is only going to be shown if we're not loading and if we're not in game over so we create a curly bracket not loading and not game over yeah i do a short circuit here a little bit messy here again something like that do some more formatting so if we're not loading and if it's not game over we're gonna show the question card save it go back to the browser start you can see that well the question and the answers here so that's sweet now we have the next question button also but we haven't implemented those functions yet all right that's the question card and then we have the next button and this one is only going to be shown if we're not in a game over and we're not loading and the user answers dot length equals number plus one and by doing this we just want to show the next question when the user actually has put in an answer so that's why we check it here if the user answers dot length equals number plus one so we don't show it if the user haven't given us an answer yet and the last thing we want to check if we're not on the last question so number not equals total questions but we have to modify this one also because we have to set it to 1 and then i have a question mark parentheses this is really messy here now i'm going to move up the button inside of there and down below here colon and null yeah it should just be two equal signs there of course and do some order formatting and i think that this will work go back to the browser yeah so now it's not showing because we have to give an answer first before we showing that one yeah and it's telling me that it should have a key prop here we're going to fix that one also and that one is in the question card because here where we map through these ones we should have a key and we can give it answer as a key and this will make this arrow go away or this warning all right so this is working now go back to the app.tsx we're going to implement the other functions now and then the game will work and then we can move on to create the style for this one so inside the check answer first we're only going to run this function if we're not in a game over so if not game over then we get the user's answer const answer equals and we get that from the e dot current target dot value because this is when we press that button here so you can see that we're calling this callback on click and that's why we also have to set this value on here so value we give it the answer like this otherwise we won't be able to read the values so it's very important to set the value also on the button here on the question card in the question card component like that go back to the app dot tsx so from e dot current target dot value we get that value and that's gonna be the answer then we're gonna check answer against the correct value or the correct answer so const correct equals and from questions we have the current number that's the question that we're on we have the property that's called correct underscore answer and we check if that one equals the answer then we know if if it's correct or not so this will give us true or false add score if answer is correct so if correct set score and we have the previous score and we add it by one like so all right so that's if it's correct then we add to the score and then we're going to save the answer in the array of answers here and we have this answer object we're going to give it a question answer correct and correct answer so that's what we're setting here so save answer in the array for user answers something like that const answer object equals and we create an object question and from the questions number we grab the question and then we have the answer and then we have the correct and this is also es6 syntax if this one is the same this is exactly the same as typing out answer when these two are the same we just need to type it out once like this and then we have the correct answer and from questions and the number we have the property that's called correct answer do some order formatting and this will make sure that it creates this object with the data about the answer and then we need to put it in the answer array so set user answers we have the previous state and we create a new array spread out the previous and we give it the answer object auto format it and save it and this should be it for the answers go back to the browser see that it works reload it start yeah you can see the next question is showing up also but it's not working now because we haven't implemented this function but it seems to be working so we just have to implement that function also and then we have a fully working game but it will look like crap because we haven't styled it yet so we have the next question function here move on to the next question if not the last question so we have to check if we're on the last question the const next question equals number plus one because the question we're currently on is the number and then we add to 1 and then we can check if this is the last question or not so if next question equals total questions we know that that one is the last question because total questions is always going to be one number ahead of the number because we're using this for the array that starts at index zero and this one doesn't do that so we have to add one so when we check the next question with the total questions that will give us the answer if we're on the last question and if we're on the last question we set game over to true like so else we're not on the last question so we can set the number to the next question like so order format it and save it and go back to the browser reload it just to be sure and start select and answer which of the following was not one of the magnificent seven oh i really don't know actually next question and you can see it will move through the questions we can't see the correct answer now because we haven't styled it but it seems to be working let's see what it does when it's on the last question yeah you can see it displays the start button when we're on the last question and it's not displaying the next question so we can restart the game and it's working quite nicely i think but as i told you we can't really see if we put in the correct answer because we do all that stuff with the styling and that's what we're going to do next we're going to use style components to style this quiz all right before we move on with the styling for this one i'm going to fix these types because i forgot that we had these annie types here and if we can fix it we should do that so we can type this correctly and we're going to change this callback and the user answer so for the callback we already have the types for that one in the app.tsx file if we go down here to that function this check answer function we're already typing this one here so we can just copy this one like that copy that one go back to the questioncard.tsx file and replace the annie with this one instead and we're going to return void for this one we're not returning anything so we can specify it as void so that's the callback and the user answer we actually created a type for this one also in the app.tsx file we have this answer object i think i said that we didn't need to export this one but we have to export it because we can use it in the question card now to specify that type so add an export to that one and then we can import it in the questioncard.tsx so add an export save the file and then go back to the questioncard.tsx and up here we can mark it with types so import answer object and we import it from dot forward slash app something like that so we have the type here now for the user answer so instead of any we can use answer object but it can also be undefined so we create a pipe and specify it as undefined like that save the file and there's also one more thing we have to do now because down here this one disabled it wants a boolean and this one is not a boolean now so if we want to convert this one to a boolean value we can use double bangs double exclamation marks or we can specify it like this with a turner operator if we have the user answer we set it to true otherwise we set it to false so it's up to you you can use whatever you want but just make sure that you give this one a boolean value otherwise it won't work so this is it this is all the types now we don't have any any type now except in this utils function because this one can take an array with any value so make sure to save the files and i'm also going to check so that it works go back to the browser reload it and it still works and that's great so that's the types let's move on with the styling okay we're going to give this quiz some styling but first we have to also make sure that we display the score i forgot that one so we have the state with score so move down here to the jsx in the app.tsx component just somewhere here yeah here where we set the score we're actually not showing anything there now so we're gonna add that one here so we have curly brackets and we show the score like that this will make sure that we show the score to the user and you should be able to see yeah yeah i've had a score one there yeah so you can see that it's displaying nice all right so we're going to create a new file now we're going to create some styling for the app.tsx file first so inside the source folder the src folder create a new file app.styles.ts and we're going to import some stuff from style components so import styled coma and then with the structure out create global style like that from dot style components so style is the regular thing that you import and we're also importing create global style i think it is self explaining we're going to create some global styling with that one so that's the first thing that we're going to do but first we also want to import our background image bd image you can call it whatever you want from dot forward slash images forward slash and then we have that i really don't know why it can't find it yeah and this one is complaining because i removed the test file before i think that shouldn't matter but this is strange i think we just created ts ignore for this one for now something like that i think it will work we'll see if it work later so export const global style you can call it whatever you want you don't need to call it global style but we call the create global style with double back ticks and we can create a global styling first we set the html i'm going to set the height to 100 on that one and just as usual when i style stuff like this there are some room for optimization i think i just did these styles really quickly so there probably will be more effective ways of doing stuff here but i'm in a summer vacation mode now so this will probably be one of the last videos before i take a welldeserved vacation so that's why i actually didn't think i was going to do this before the summer but then i felt yeah why not so that's why i created this one all right so we have the body we set the background dash image to the url and then we can grab this url with dollar sign curly brackets pd image like that and then we set the background size to cover i set the margin to zero the padding is going to be 0 and 20 pixels i set the display to flex and justify content to sender so that's the body and then i have an asterisk i'm going to set the box sizing book sizing to border box and then i'm also going to set the font on every element on this one so font family catamaran and sans riff as a fallback font all right so that's the global styling i'm actually gonna import that one in the app component now to see if this background image works so go back to the app.tsx file and up here i mark it with styles i import global style from dot forward slash app.styles and then when you create a global style with style components we get the regular component here so we can use that one down in the jsx we can put it somewhere here at the top so i create a fragment because dsx can only return one element i close it here and then we can use the global star component like this do some order formatting and save it go back to the application yeah and the image works i don't really know i complained there so if it complains just add that little comment there that i created to comment this one out i don't really know because it worked in my other application when i created this example so don't really know why but that's the global styling and then we can do some styling in the app itself so export const i'm going to create a component that i call wrapper style.div double backticks it's going to be displayed as flex flex direction is going to be column and the align items is going to be center like so then i want to style the p tag in this wrapper so i created a forward error and the p to just style the p tag in this app wrapper i don't want it to be styled on all the p tags so i set the color to white so that's the p tag then i'm gonna have a class that i call score and that's of course the score table i set the color there also to white we could of course specify some css variables for the colors if we want to do that that's one way you can optimize this css i set the font size to 2rem the margin is going to be 0 on this one all right so that's the score class then we have the h1 tag and this is going to be this one up here that's going to be the actual logo that i'm styling with css all right so the font family is going to be fascinate inline not impact inline like that then i set the background image and this one is going to be the linear gradient so linear dash gradient and inside it's going to be 180 degrees 180 deg i set the first value to white and the second one is going to be 8 7 f 1 f f and to be able to show this linear gradient in the font we also have to set the background size to 100 and the background dash clip is going to be text then we can also set all the webkit stuff here for this one so webkit dash background clip it's going to be text webkit dash text fill color is going to be transparent and we have the moss door dash background clip it's going to be text and we have the moss text fill dash color it's gonna be transparent double dash maybe all right now we're gonna have some drop shadow on this one so we set the filter to drop dash shadow and 2 pixels 2 pixels and the color is going to be 0 0 8 5 a 3. the font size is going to be 70 pixels text line is going to be center and the margin is going to be 20 pixels on this one okay we're not really finished yet but we can import these styles inside of here in the app.tsx file just to see that this one works so we import the wrapper and below here we have to change our jsx because now instead of this div with class name app we're going to use the wrapper component and make sure to also close it down below here save it go back to the browser and you can see that it's not quite working here and i don't know why i think it's those app.styles i think maybe these ones should be just one and i also want to set the font weight to 400 on this one save it go back yeah and now it's working so there's a little bit of trouble doing stuff like this as you can see there's a little bit of special syntax here to get it to work if you don't like to do it this way you can save that logo as an svg file instead and that will also work just fine all right then we have a couple of more classes here so we have the start and the dot next class i'm going to set the cursor to a pointer i'm going to set the background on these ones as a linear gradient 180 degrees on that one also i set it to white and the second color is going to be ffcc 91 so that's the start on the next button we set the border to two pixels solid and the color is going to be d3 eight five five eight like so i'm gonna have a box shadow zero pixels five pixels 10 pixels and then i set the rgba 000 and 0.5 now 0.25 on the box shadow i set the border radius to 10 pixels and the height is going to be 40 pixels the margin is going to be 20 pixels 0 and the padding is going to be 0 40 pixels like so and then i want to do some special styling on the start button so max dash width is 200 pixels order format it and save it go back to the browser and this should be it hopefully start you can see that the next button is also style here but we're not styling the actual question card now so that's what we're going to do next all right so inside the components folder we have our question card to create a new file question card dot dot and for this one we import style from style components then we export const wrapper style.div you can see also that in this tutorial i just create a wrapper and then i have regular classes you can of course create a style component for each little thing if you want to do that but sometimes i think it's overkill so it's just enough to have this wrapper and i create classes in this case i'm also going to have a bottom wrapper on this question card so i create two components for this one but it's fully legit to just have a wrapper and then you have your classes inside if you don't want to create a style components for every little thing in your application all right we set a max width on this one to 1100 pixels i set the background to ebf e f f i set the border dash radius to 10 pixels i set the border to 2 pixels solid and the color is going to be 0 0 8 5 a three the padding is going to be 20 pixels and i have a box shadow on this one also so box shadow 0 pixels 5 pixels 10 pixels rgba 0 0 0 and 0.25 and the text line is going to be center right then i start the p tag for this one we're gonna set the font size to one rem like that so that's the wrapper component then we have the bottom wrapper so export const button wrapper equal style dot div and this one is actually going to take in some props and how do you do that in style components well we can create a type here for example type bottom wrapper props and it's going to take in two props correct that's going to be a boolean and use the clicked that's also going to be a boolean all right and to use these props in the style components we create angle brackets here and we specify the bottom wrapper props and then we have double back ticks and then we can go on just as usual here and on this bottom wrapper i'm going to set a transition i'm lazy i'm just turning it to all 0.3 seconds and is the hover is going to be i set the opacity to 0.8 when we hover over the bottom and then we have the button itself so button i set the cursor to a pointer the user select is going to be none i don't want the user to be able to select the text the font size is going to be 0.8 rem the width is 100 percent the height is 40 pixels the margin is 5 pixels and 0 on this one then we're going to set the background and this one is going to be a nested ternary because we want to change the background depending on if we're showing the correct answer or if the user put in the wrong answer so we set the background and in style components we can grab the props by dollar sign curly brackets and then i can destructure out them like this so we have the correct prop and the user clicked prop and then we have the inline function here so first we're going to check if correct if that one is true i have a toner operator then i set the linear gradient to 90 degrees and the color is going to be 5 6 ff a4 as the first color and the second color is going to be 5 9 bc 8 6 like so so that's the first linear gradient so that is if it's the correct answer then it's going to show in green then we have the colon and then we have a nested toner operator here so if not correct and the user clicked so the user clicked is going to tell us if the user clicked on that specific button so we have a nested ternary operator here so we have another question mark and i can actually just copy this this one here paste it in and i just changed these values here this one is going to be ff5656 and this one is going to be c1 six eight six eight and we add in the last one here so colon and we have the last linear gradient so this one is gonna be 5 6 ccff and 6 e a f b 4 do some auto formatting but i have some mistake here yeah that's because that question mark shouldn't be there so order format it and that's the background then we have some few more properties to set here i'm going to set the border to three pixels solid white i'm gonna set the box shadow one pixel two pixel zero pixel rgba zero zero zero and 0.1 all right almost finished here with the styling border radius is going to be 10 pixels on this one and the color is going to be white and the last one is the text shadow zero pixels one pixel zero pixel rgba zero zero zero and zero point two five and auto format it so that's the styling now we just need to implement it in the component itself so optimize it if you want to do that at least it works now but it may not be the most optimized css so go back to the questioncard.tsx file and up here at the top we first gonna import our styles import wrapper and bottom wrapper from dot forward slash question card styles like that and then we have to modify our jsx here a little bit so first we have this repetitive that of course is going to be the wrapper make sure to end it with the wrapper also then there's nothing here to change this one is the bottom wrapper so this one is going to change it's going to be the bottom wrapper and if you remember we're going to send in two props to this one also because it's complaining now you can see it wants two props so the key is correct there that's fine but we're going to add in the props here so correct that's the prop we're going to check the user answer and here i'm using something that's called optional chaining in typescript so i create a question mark dot and the correct answer and i check it if that one equals the answer we should have triple equal sign so if i remove this one we don't actually know if we have a value here but if we use a question mark this one will not throw an error it will make this undefined if we don't have an answer here so that's why i'm using optional chaining then we have the user clicked so user answer yet again i use the optional chaining dot answer equals answer auto format it so if we don't have this one here it will throw an error if we don't have a user answer but by specifying like this it won't throw an error and i think this actually should be it so save it go back to the application we try it out start and yes we have our question here that's what okay that was right i didn't actually know that one all right the next question so as you can see i answered wrong but it's given me the correct answer here so everything seems to be working fine yeah and that's the last question and then it gives us the start button again so the quiz is working and that's super sweet so this is how you build a fairly simple little quiz game with react and typescript there are room for improvement but hopefully this gave you some insight in how it is to build an application with typescript and react so if you like this kind of tutorials make sure to subscribe and support me i will put out these tutorials regularly on my channel and hopefully i see you in another one
