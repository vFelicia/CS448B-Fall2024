With timestamps:

00:00 - just before I get started the slides for
00:03 - this talk are on my website right now
00:06 - I'm telling you this because there's a
00:09 - ton of content and we have a short
00:12 - period of time here so I'm gonna cram
00:14 - through it and you will want to review
00:16 - later so now you know where to find it I
00:20 - have a book in my bag and on that book I
00:24 - draw all sorts of layouts all the time
00:27 - that's how I design websites they start
00:28 - with a piece of paper and I'll just draw
00:30 - some stuff and I go haha this would be
00:31 - super cool so a couple of years ago I
00:34 - made this design and when you look at it
00:38 - you go yeah this looks like a standard
00:39 - web design it's fairly basic it has some
00:43 - interesting stuff like there's the
00:45 - categories and title at the top and then
00:47 - you have the featured image and then you
00:49 - have the meta content on the left hand
00:51 - side or right hand side right hand side
00:55 - and then the content itself and you go
00:57 - yeah sure this is relatively easy to do
01:00 - except on smaller screens I wanted to
01:07 - make a slight change move the meta
01:09 - content from next to the content up
01:11 - above the featured image and then on
01:15 - even smaller screens I want to move the
01:17 - featured image of above rest of the
01:19 - content and at this point you go this is
01:24 - not so easy you see any one of these
01:26 - three on their own as a piece of cake
01:29 - combined on one website with just CSS
01:33 - and HTML impossible because you'd have
01:37 - to change the markup structure to get
01:39 - this to work with old layout tools so
01:43 - instead you'd have to go with JavaScript
01:44 - and have to change everything which is
01:46 - not great because then you're changing
01:48 - everything and it shouldn't be like that
01:51 - today I want to talk to you about a
01:54 - whole new way of thinking about layouts
01:57 - on the web and this whole new way of
01:59 - thinking about layouts will truly change
02:01 - the way we design websites from here on
02:04 - forward I'm not talking about emerging
02:07 - technologies that are coming two or
02:09 - three years from now I'm talking about
02:11 - technologies that are here today that
02:13 - you
02:13 - to start using today it's called CSS
02:16 - grid I'm Morten Ramm Hendrickson and
02:18 - let's get cracking so just to prove to
02:22 - you that I'm not making things up this
02:24 - is the layout I drew built purely in
02:27 - HTML and CSS and WordPress running in a
02:31 - browser today and all the stuff that you
02:33 - saw is happening plus a bunch of other
02:36 - things this website you're seeing here
02:39 - is my website so if you go to Morton com
02:42 - grab the side of your browser and start
02:45 - doing this you'll actually see the
02:47 - content jumping around on the page and
02:49 - your brain will say there's some
02:51 - JavaScript happening here or this might
02:53 - be bootstrap it's not it's just pure
02:55 - simple CSS and in fact the HTML behind
02:58 - it is cleaner than any HTML you'll ever
03:01 - see from WordPress before this point so
03:07 - instead of going through the entire
03:08 - WordPress theme which will take way too
03:09 - long I decided to make a slightly
03:11 - simpler example so I made this little
03:14 - web page for the room we're in so this
03:18 - is the speaker track for today and when
03:21 - you look at it I want you to think about
03:23 - how you would make this layout using
03:25 - only HTML and CSS no frameworks nothing
03:29 - else just look at it for one second I
03:32 - think how would I mark this up all right
03:36 - it's here so first you're probably going
03:41 - to do something like draw boxes around
03:44 - the main items so here we have some sort
03:46 - of header thing and then there's a huge
03:48 - section on the side but all the content
03:50 - and then on the other side there's like
03:51 - a logo and then there's some other
03:53 - sidebar stuff good so we have those
03:56 - boxes and we'll mark that up in HTML
03:58 - then because we have to lay this out we
04:01 - need to start grouping elements so below
04:03 - the main header thing there's a bunch of
04:05 - content but the content is displayed in
04:07 - two columns so we need to put a box
04:09 - around them so we can float them left to
04:11 - right or use flex to put them left and
04:12 - right then in the sidebar we have
04:16 - another grouping of contents and since
04:18 - we're floating that we need to put a box
04:20 - around that and then inside the cyber
04:22 - itself there's two more pieces of
04:24 - content that need box to surround them
04:26 - so we end up with something like this
04:29 - the blue sections are semantic markup
04:33 - things that are required for the
04:34 - document to work this is the actual
04:35 - content the red sections are boxes that
04:39 - we drew around content solely to say
04:41 - this is a thing that will go next to
04:44 - another thing and this is another thing
04:45 - that will go next to another thing and
04:47 - you can see that the mark-up is full of
04:49 - that stuff when you start looking at
04:53 - responsively as that gets super
04:56 - complicated because in this responsive
04:58 - layout you see that that thing the black
05:00 - box that's on the sidebar that's
05:02 - actually the header and this the small
05:08 - box on the far right hand side that has
05:11 - some address information that's actually
05:13 - the footer and on a mobile display the
05:17 - semantic structure is as it should be on
05:20 - the other end of the scale everything
05:23 - has been moved around and then you say I
05:27 - can do this
05:28 - bootstrap is my friend everything is
05:31 - fine the problem is what bootstrap does
05:35 - to fix this and all the other frameworks
05:37 - is take the HTML and apply some
05:40 - JavaScript and move the HTML around in
05:43 - the document to get this stuff to work
05:45 - that means for accessibility reasons the
05:49 - whole document is now jumbled which is
05:50 - not great it also means we're leaning on
05:52 - external technologies just to do
05:54 - something that should work on its own
05:56 - the problem is web layouts the way we've
05:59 - been doing it since the beginning of web
06:02 - time have always been broken and all
06:04 - we've been doing this entire time is
06:06 - refine how we break the layout so we
06:09 - started with tables then we had frames
06:11 - then we had layers then we had floats
06:15 - and clears then we had flexbox and all
06:17 - this stuff is trying to solve this
06:18 - fundamental problem which is a web
06:20 - document so HTML is a document that
06:24 - starts at the top and ends at the bottom
06:25 - and anytime you want to put something
06:27 - next to something else you have to
06:29 - somehow break the document just to do
06:31 - that which goes against everything we
06:34 - want to do in design consider this super
06:37 - simple example you have a box
06:40 - and then two boxes inside two column
06:43 - layout simple right should be well if
06:47 - you look at just the markup this is what
06:49 - you get just two boxes below each other
06:51 - with a box around them then you have to
06:53 - put them next to one another so you use
06:55 - float few floats one item to the left
06:57 - and the other one item to the right and
06:59 - then the box that surrounds the
07:00 - collapses because of course you're
07:03 - floating content so you're pulling them
07:05 - out of the structure of the document and
07:07 - then you want content to float around it
07:08 - to fix that you then have to introduce a
07:11 - clear fix so that's just empty content
07:13 - that you stuff from the bottom corner
07:15 - solely for the purpose of making that
07:17 - box wrap around the contents again and
07:19 - then you say well we have better tools
07:21 - now we have flex box and it's true flex
07:23 - box does solve this problem but if I
07:26 - make it just one element more
07:28 - complicated flex box doesn't help us
07:29 - anymore because now we can't say to flex
07:33 - put the content to other pieces next to
07:36 - another than one piece not flex box
07:38 - would try to treat all three as the same
07:40 - thing because flex box works in one
07:42 - direction either horizontal or vertical
07:46 - so now we have to introduce an extra box
07:50 - and say can you please flex this
07:52 - container thing next to the other thing
07:55 - and then inside the container we'll put
07:57 - two things underneath one another this
08:01 - is the hack this is not the way it's
08:07 - supposed to be this is truly a hack this
08:08 - is how we design websites today we cheat
08:11 - we build a bunch of extra stuff just to
08:14 - get our layouts to work it's nuts if you
08:17 - think about it it's totally crazy flawed
08:19 - and flex
08:20 - forced us to put extra content into our
08:23 - HTML for the sole purpose of layouts
08:25 - which goes against everything we've
08:26 - learned about how to markup websites
08:30 - this is also layouts today this is how
08:33 - we have to do things well it is today
08:38 - that you're gonna change all this just
08:43 - before I get into it consider what the
08:45 - web looks like right now
08:46 - this is bootstrap the official
08:48 - documentation telling you how to make a
08:50 - layout that has two columns look at the
08:53 - HTML look
08:54 - how many nested divs are necessary to
08:56 - get this to work
08:58 - this is WordPress theme builder plus
09:04 - some sort of page layouts plugin I can
09:10 - tell you by looking at this HTML all of
09:13 - this stuff generates a box with some
09:16 - content in it but it's necessary because
09:19 - we have to do all this floating and
09:21 - clearing and nesting and nesting and
09:23 - nesting and nesting underscores that's
09:26 - the same in a slightly less extreme
09:28 - version when you look at the overall
09:30 - markup of underscores there's a bunch of
09:32 - elements within underscores that are
09:34 - there solely for the purpose of layout
09:37 - so the blue boxes here are the header
09:40 - the main the side and the footer the red
09:44 - boxes are there for layout purposes so
09:48 - what if we could take all that extra
09:49 - craft away have just the semantic markup
09:53 - and nothing else and then solve the
09:56 - layout problems in CSS in a clean and
09:59 - simple way instead of this layout we'd
10:04 - have this which is easier to read it
10:06 - makes way more sense what if we didn't
10:14 - have to do all this crazy stuff anymore
10:17 - if you look at my example the blue items
10:22 - are the ones that matter the red don't
10:24 - but even if I take away the red items
10:26 - the structure of this document still
10:28 - makes no sense we have a heading 1 then
10:31 - we have a main then we have a header
10:33 - then we have an aside and then we have a
10:35 - footer if I take all the extra craft
10:38 - away and reorganize the document all of
10:41 - a sudden it makes much more sense from a
10:42 - semantic standpoint header h1 main aside
10:47 - footer the problem is up until this
10:52 - point all our layout tools have been
10:54 - content out and one-dimensional meaning
10:58 - you apply a layout to an individual item
11:02 - and then you have to relate that item to
11:04 - other things what we need is a to demand
11:07 - a layout that works layout in and that's
11:11 - what CSS grid gives us so instead of
11:16 - doing all the boxing thing I was talking
11:18 - about before what if we start by saying
11:20 - here's what we want let's apply a grid
11:23 - to it just like you would do in design
11:25 - you draw a grid on top and then you say
11:29 - we're gonna place contents on this grid
11:32 - so you have your semantic markup then
11:36 - you simply grab each item the header the
11:40 - h1 the main the side buyer and the
11:44 - footer and you place them on the
11:46 - document that makes sense all of a
11:50 - sudden you know the thing with the guy
11:53 - with the blinds that everyone shares on
11:55 - the internet all the time
11:56 - that's it'll be like zip old applies
11:59 - work too bad this works perfectly go to
12:08 - code pen this example is a live website
12:11 - all those screen grabs are from the
12:13 - website all the content restructures the
12:15 - way it's supposed to you can play around
12:17 - with it you can see exactly what's going
12:18 - on and the craziest part is when you
12:20 - read the code you'll be like I
12:21 - understand what's happening here I don't
12:23 - even need to understand CSS grid I can
12:25 - actually see how this works so how does
12:31 - it work
12:33 - I've been told that listening to my
12:35 - talks could be a bit like trying to
12:36 - capture a firehose sometimes so I've
12:40 - decided to try to structure this in such
12:41 - a way that it's more like strapping fire
12:43 - hoses on a platform and then flying all
12:47 - right but but this means I need your
12:50 - absolute attention I'm gonna crash
12:52 - through some stuff here if it'll be nice
12:53 - and quick okay so brace yourself stand
12:59 - firm CSS grid needs new terminology so
13:05 - we have grid container grade item grid
13:07 - line grid cell good track grid area grid
13:09 - gap I apologize I know you have to do
13:13 - this there's a simultaneous translator
13:15 - you're just not appreciate me speaking
13:17 - fast
13:18 - so a grid container is any container in
13:21 - your document now you create a grid
13:24 - inside you do that by simply declaring
13:27 - display grid you can do this to as many
13:30 - elements as you want on the page it just
13:32 - in that it does not matter a grid item
13:36 - is any direct descendant of a grid
13:38 - container so if you create a grid any
13:41 - direct descendant automatically becomes
13:43 - a grid item that's placed inside the
13:44 - grid but only the first level
13:46 - descendants just like it is with flexbox
13:48 - a grid line is any of the lines you draw
13:51 - inside the grid horizontal or vertical
13:54 - the grid lines are numbered by default
13:56 - so the first edge of the grid either
13:59 - vertical horizontal has to line number
14:01 - one and then you just count them two
14:03 - three four five six and the last one has
14:05 - the last number a grid cell is any cell
14:08 - inside the grid a grid area is any
14:10 - defined rectangular area and inside the
14:14 - grid that covers more than one cell a
14:16 - grid track is either a horizontal track
14:19 - or a vertical tracks or a row or a
14:20 - column and a great gap is the space
14:23 - between each of the cells if you choose
14:26 - to add basically gutters got that good
14:33 - don't worry these slides are online you
14:35 - can go look at them later and this will
14:38 - become part of your vocabulary anyway so
14:40 - CSS grid in a nutshell how does this
14:42 - actually work how do we apply it today
14:45 - number one define a grid on an element
14:49 - where you want a grid to appear number
14:51 - two place items within that grid where
14:54 - you want them to appear
14:55 - number three make world peace that's all
15:00 - there is to it
15:00 - what does it look like well here's my
15:04 - example this is the semantic markup with
15:07 - know CSS apply except for color then we
15:12 - start by grabbing just the site
15:13 - container that's the container that
15:15 - wraps everything and we declare display
15:17 - grid so now we have a grid then we
15:22 - decide how many columns and how many
15:24 - rows we want I mean you do that using
15:25 - grid template columns and grid template
15:28 - rows and here what we do is say the
15:30 - distance from the
15:32 - edge of the grid to the first line
15:33 - that's the first Valley then the
15:36 - distance to the next one it's the next
15:37 - value and so on and so on
15:39 - so you're declaring the width between
15:41 - each of the lines and then another line
15:44 - is drawn this comes with new features
15:47 - like the fr or fraction value that
15:52 - allows you to say take one fraction of
15:54 - the available space and then put a line
15:57 - there so you can make truly dynamic
15:58 - layout do the same with rows you just
16:01 - declare a list where you want the rows
16:03 - appear and they will appear
16:04 - automatically once you've drawn lower
16:08 - rows you have cells and your browser
16:11 - automatically places all the direct
16:13 - descendants of the grid element in those
16:16 - cells from the top left to the bottom
16:19 - right then for each individual element
16:24 - you can if you want to declare a grid
16:27 - column and a grid row property and say I
16:30 - want this element to appear from column
16:33 - line 2 to column line 4 and from row
16:37 - line 2 to row line 3 that means you
16:41 - literally find column line 2 and column
16:44 - line 4 and you put the content in
16:45 - between those two lines
16:47 - same with rows well I here you see what
16:54 - I'm talking about we're doing layout in
16:56 - so we create the layout first let me
16:58 - just dump content where we want them to
17:01 - appear when you look at this you realize
17:02 - there are all these new things you can
17:04 - do like for instance create actual white
17:06 - space on a layout you can just choose
17:08 - not to populate cells then you have
17:11 - white space no space urges or anything
17:14 - like that anymore
17:15 - once you know this you can then place
17:18 - any of your elements anywhere you want
17:20 - some the grid looks promising right but
17:23 - uh you have to do all this counting
17:25 - stuff I keep track of the line numbers
17:27 - and then what if it's responsibly to
17:29 - keep changing the greater gets kind of
17:30 - nuts in my layout I move elements
17:36 - particularly the header on the footer
17:40 - keeping track alive with numbers would
17:42 - be a pain and
17:44 - to be fair you can't actually give each
17:46 - of the track lines a name and refer to
17:49 - them by name instead of my number but
17:50 - that's still quite a lot of stuff to
17:52 - deal with so we have this new property
17:54 - called grid template areas and grid
17:57 - template areas is nuts it's almost like
18:00 - a ski you declare grid template area and
18:04 - then you write out each of the cells and
18:06 - your grid and you say what is the name
18:08 - of this cell so for instance here I have
18:10 - the three cells at the top our title
18:13 - title title and then we have main header
18:16 - header and main slide bar footer then
18:19 - you use the grid area property on
18:22 - individual child items and you just
18:24 - declare the name of the area you want
18:27 - that woman to appear so if you say grid
18:31 - area header well that's wrong no it's
18:34 - right if you say grid area header the
18:39 - element goes to the header area if you
18:43 - say grid area title it goes to the title
18:45 - area and this allows us to do crazy
18:50 - responsive web design because that means
18:56 - instead of doing a bunch of crazy stuff
18:59 - all you have to do is change the grid
19:02 - template areas and then the items that
19:06 - you've already said this is going in the
19:07 - title area this is going in the header
19:09 - area we'll just move around the grid so
19:12 - your responsive code and your media
19:14 - queries become very very simple and
19:17 - anyone who reads this code can see okay
19:20 - so we have a grid that has two columns
19:23 - and then we put the title and title and
19:26 - mine and header and main and sidebar and
19:28 - then when the screen gets wider we have
19:30 - three columns and here we have title
19:32 - title title main header header the CSS
19:34 - actually visibly declares what's going
19:37 - on no more no more everything just works
19:47 - this is the point where your brain will
19:50 - start going like this doesn't actually
19:56 - compute yet
19:57 - and trust me I've been working with this
19:59 - for over a year every time I sit down
20:01 - and do a new grid layout my brain keeps
20:03 - telling me to do things the old way and
20:05 - I have to keep throwing my brain out and
20:08 - then replacing it with a new one
20:10 - which means my kid is walking around in
20:15 - the background they're making noises
20:16 - when he grows up he won't think the way
20:19 - I do and he'll be like this is super
20:21 - simple and then I'll tell them about
20:22 - flows and clear why would you do it like
20:25 - that that's so crazy there's also this
20:30 - weird little thing called nested grids
20:33 - now in the original grid specification
20:36 - from a couple of years ago you had the
20:39 - ability to create a grid and then have
20:42 - an element within the grid inherit the
20:44 - grid so you would get consistency that
20:46 - never happened in browsers so instead
20:48 - what we do is we declare multiple grids
20:50 - inside one another and it turns out
20:51 - that's actually a huge benefit because
20:53 - then you can say I have an overall
20:55 - layout grid right layout my header my
20:57 - footer my sidebar and so on then you can
20:59 - have a sub grid just for the main
21:03 - content layout and you can even have a
21:04 - grid inside that read before something
21:06 - else and you have detailed control over
21:08 - every single component within your
21:10 - layout and as you know the new trend in
21:12 - web design is to work on component level
21:14 - well let's the grids allow you to
21:17 - literally work on component level and
21:19 - this means for example if you're making
21:21 - a wordpress theme you can make
21:23 - individual content grids for individual
21:26 - types of content so if you apply a
21:28 - certain class to any element then you
21:31 - can change the grid completely using
21:33 - pure CSS no more fancy templates and
21:36 - crazy PHP just use CSS but older
21:40 - browsers this is the absolute biggest
21:45 - argument against CSS grid first of all
21:49 - all modern browsers support CSS grid now
21:54 - every single one of them there's an
22:02 - issue but I'll get to that in a second
22:04 - before we get to that there's also the
22:05 - question of I think it's too soon this
22:07 - is emerging technology it's not mature
22:09 - yet
22:11 - true it's emerging technology but you
22:13 - know small websites like the New York
22:15 - Times have started using them so I would
22:17 - say any client that says we're not ready
22:19 - for this yet because no one is using it
22:20 - is can be urged forward this is
22:23 - something we can do today but there are
22:25 - two elephants in the room right so you
22:28 - have these see you give me way too much
22:36 - credit
22:37 - they're always these things that don't
22:40 - work the way we want to so we have an
22:42 - Internet Explorer 10 and 11 and we have
22:44 - edge who are not currently following the
22:46 - spec exactly point of order if it wasn't
22:52 - for Internet Explorer 10 we wouldn't
22:53 - have CSS grid CSS grid was invented for
22:57 - Internet Explorer 10 and the reason why
23:00 - these two browsers are lagging behind is
23:02 - because the other browsers decided to
23:05 - change the spec but the spec is built
23:07 - into Windows so Microsoft has to update
23:11 - all of their operating systems to get
23:13 - this to catch on however edge is
23:16 - probably a couple of weeks away from
23:18 - getting full grid support and I'll show
23:21 - you how to create proper backwards
23:24 - compatibility for all other browsers
23:27 - there's this other thing that has
23:29 - nothing to do with CSS grid that's
23:31 - called a feature query that we can use
23:33 - now to ask a browser do you support this
23:35 - grid problem this CSS property and we
23:37 - can use that to test whether or not the
23:39 - browser supports grid the canonical best
23:43 - practice is to ask add support display
23:46 - grid works exactly like a media query so
23:48 - if it says yes then we run the code
23:50 - inside the problem is edge does support
23:53 - grid it just sports the wrong spec so if
23:57 - you're testing for grid support and edge
23:59 - test for something that edge does not
24:01 - support within the grid spec for example
24:03 - grid area auto then edge won't try to
24:07 - run the grid my recommendation here is
24:14 - actually to serve up the mobile
24:18 - experience on all browsers that don't
24:21 - support grid
24:23 - and this is where people fall off the
24:26 - horse right this is like wait wait wait
24:29 - wait what so that means the site will
24:32 - look the same in all browsers that's
24:40 - exactly right
24:41 - the thing is we've been doing responsive
24:43 - web design for ten years now no we have
24:45 - not we've been doing responsive web
24:47 - design since 2010 and that we've
24:51 - established an entire language around
24:54 - not serving up the same experience
24:56 - across all browsers because on a mobile
24:59 - browser the website looks totally
25:01 - different from what it does on a large
25:02 - desktop browser there is no actual
25:05 - reason why a website should look the
25:07 - same across all browsers except that we
25:09 - keep saying they should so we can change
25:12 - our methodology around this making
25:15 - everything look the same across all
25:16 - browsers is a bad habit we should be
25:18 - making things look the best they can on
25:21 - whatever browsers are supported in
25:25 - responsive web design allows us to do
25:27 - this we just had to migrate it from not
25:29 - just saying responsive web design it's
25:31 - about the width of the screen to also
25:33 - say we can make it responsive to the age
25:36 - of the browser accessible mobile first
25:43 - layouts work well on all browsers if you
25:46 - don't believe me go look at the mobile
25:49 - version of Wikipedia on your desktop
25:51 - browser you will never use regular
25:54 - Wikipedia again the mobile version on
25:56 - the desktop browser is so much better I
25:58 - don't understand why they just don't
26:00 - move forward this is progressive
26:02 - enhancement this is our responsibility
26:04 - we progressively enhance the web because
26:07 - if we don't then we'll get stuck in the
26:10 - past forever so practical approach to
26:13 - CSS grid right now so you can use it
26:16 - when you walk out of this room first
26:19 - build accessible mobile first layouts
26:22 - without grid that is your baseline so
26:25 - make it work on a mobile phone make it
26:27 - sure that it still works when it's on a
26:28 - wide screen then use that mobile first
26:32 - layout as the fallback so if everything
26:34 - goes to hell
26:36 - mobile-first works then use add support
26:39 - to detect grid support at the
26:42 - appropriate break point when everything
26:44 - starts looking weird add a grid then
26:47 - keep scaling up the width of the screen
26:49 - add another grid add another grid on
26:52 - another grid because people have screens
26:54 - that are this wide right now so you need
26:56 - to account for that if you don't believe
26:59 - me go to my brother's house he has two
27:02 - ridiculously here screen
27:03 - so remember the layout I drew that was
27:09 - impossible if you apply grid to it it's
27:14 - not only impossible it's something that
27:16 - makes sense and just works and it's the
27:19 - layout that send a new theme on my
27:21 - website and you can go check it out on
27:23 - github and put it on your own site as
27:25 - well your path to CSS grid starts here
27:29 - today right now number one use Firefox
27:33 - when you develop because Firefox has a
27:35 - grid inspector so anytime you find it an
27:38 - element that has grid on it there's a
27:40 - little hashtag type thing that's
27:43 - supposed to look like your grid and if
27:44 - you click on that in the inspector the
27:47 - gridlines appear in your browser and you
27:49 - can actually see the grid while you're
27:51 - working with it I'm sure the other
27:52 - browsers will catch up and right now
27:53 - Firefox has it
27:55 - second Rachel andrew has a website
27:59 - called grid by example this is basically
28:01 - doctrine rachel andrew is by and large
28:04 - the reason why we have CSS cribben
28:07 - browsers today she's been pushing it for
28:08 - years and years and years and she's
28:10 - documented absolutely everything so we
28:13 - want to know how it works go to grid by
28:15 - example Mozilla developer Network has
28:19 - tons of documentation most of it written
28:21 - by either Rachel Andrew or gem Simmons
28:23 - it is a great resource it's documented
28:25 - every single property and everything
28:26 - that's going on CSS tricks has a
28:29 - complete guide to CSS grid which is just
28:31 - like the complete guide to flexbox which
28:33 - is also the same content over again
28:36 - my new theme which is running on my
28:38 - website is on github and you can go
28:40 - check it out pick it apart
28:42 - send pull requests complain about the
28:44 - lack of internationalization what you'll
28:48 - notice is CSS grid respects text
28:51 - direction so there is no RTL see a style
28:55 - sheet because wood CSS grid you don't
28:58 - need it anymore
29:02 - I wrote an article about this that came
29:04 - out in Smashing Magazine yesterday
29:06 - called the building production-ready CSS
29:09 - grid layout today that covers what I
29:11 - talked about here plus how I designed
29:13 - the theme plus a bunch of other stuff go
29:15 - read it go where you want to go where
29:21 - you want the web to go and the rest will
29:24 - follow we in this room control a large
29:29 - percentage of the web and if we all
29:30 - adopt CSS for it now and do it properly
29:33 - the web will follow don't believe me
29:36 - this is the LinkedIn office in
29:37 - Carpinteria that I go to occasionally
29:39 - they built a new building and then they
29:41 - put this huge patch of grass directly in
29:43 - front of the entrance so if you look at
29:45 - the image here there's a building here
29:49 - so everyone walks like this and I saw
29:52 - the patch of grass so this was taken on
29:53 - the first day and I'm like this is
29:54 - insane
29:55 - whoever designed this was now thinking
29:57 - about the end user so I just started
29:58 - walking across the grass and I was
30:00 - walking across the grass for a couple
30:01 - hours to make a path and then a couple
30:05 - of months later someone sent me this
30:06 - picture and then their code a week ago
30:11 - someone sent me this picture
30:13 - if you paved cow paths meaning walk
30:19 - where you want everything to head
30:20 - eventually someone put paving stones
30:23 - down so designers in the room
30:26 - CSS grid means you can finally use
30:29 - proper grid systems in your designs
30:31 - there also means design the browser is
30:33 - now really easy theme developers start
30:37 - using CSS grid today in all your work
30:40 - even if it means providing full
30:42 - fallbacks for everything you do I have
30:44 - links for that if you want to talk to me
30:45 - later
30:46 - framework people CSS grid cures your
30:50 - dividers so you should take a strong
30:54 - inoculation right now page builders this
30:58 - is make or break time
31:00 - CSS grid plus Guttenberg and WordPress
31:03 - means that most of what page builders
31:07 - does will be handled inside WordPress
31:09 - itself so if you're building a page
31:11 - builder you need to get on top of the
31:13 - spec and figure out how it fits into
31:14 - your business model set best practices
31:19 - be responsible because CSS grid allows
31:22 - you to mess around with the structure
31:24 - order of your content and can make sites
31:27 - really inaccessible so don't do that but
31:29 - use it for good build the web you want
31:33 - to see and repeat after me
31:37 - make it accessible make it fancy and
31:47 - make sure the fancy doesn't break
31:50 - accessibility oh come on
31:56 - stand up everyone of you stand up come
32:01 - on everyone of you stand up this is your
32:06 - mantra all right number one what
32:13 - number two number three thank you very
32:22 - much
32:31 - awesome okay winner take five minutes of
32:36 - questions now do we have questions in
32:38 - the room because I guess the alternative
32:40 - is everyone piles on Morten and an
32:43 - expert bar or somewhere like that where
32:46 - do you think you're going to be for
32:47 - questions if people want to come in and
32:48 - get into the detail expert Baron
32:50 - Haussmann right okay Oh what you are
32:58 - gonna have to ask questions the other
33:00 - room is running late they're not as
33:03 - sharp as we are so I need some questions
33:06 - on the floor while you're thinking about
33:09 - that I have got a question to get
33:11 - started with hmm what really is the
33:14 - guttenberg implications with CSS grid
33:17 - can you think of some really nice
33:19 - examples straight off the bat okay so
33:22 - are you all familiar with Gutenberg the
33:25 - new content editor yeah okay so there's
33:30 - a new content editor coming to WordPress
33:32 - called Gutenberg that works on the
33:33 - principle of block elements so instead
33:36 - of saying you're right a bunch of
33:37 - content and you add an image and they
33:38 - write a bunch of content and there's
33:39 - just one big blob you're now able to say
33:42 - add block that is a quote add a block
33:46 - that is regular text add a block that is
33:48 - something else at a block that is a
33:50 - video add a block that is and inline
33:52 - something and the idea over time is that
33:55 - Gutenberg will evolve to have things
33:56 - like columns and things like other types
34:00 - of layouts which is completely new to us
34:02 - in the WordPress community if you take
34:05 - that idea that all the stuff that you
34:08 - put into a blog post or eventually all
34:11 - the stuff you put on the entire view
34:13 - because Gutenberg will likely evolved to
34:15 - the point where you can customize the
34:17 - entire view including your header and
34:18 - your sidebar and everything else and
34:19 - then combine that with CSS grid there's
34:22 - a door that opens to customization
34:24 - within WordPress that is truly mind
34:27 - breaking which is imagine if you go into
34:31 - the content editor WordPress in you're
34:33 - writing up posts or some other type of
34:36 - content and then you say for this
34:38 - content I want to have an extra sidebar
34:41 - and then you can go in and just
34:45 - out a guide and place content to the
34:50 - left or the right of that guy I'm not
34:52 - saying that this is what the Guttenberg
34:53 - team is working on now I'm sure if
34:55 - anyone in the rooms from the good work
34:56 - team they're like this is not part of it
35:00 - I haven't written this article yet I
35:03 - have crazy ideas but the thing is once
35:07 - we have CSS grid all the layout
35:10 - components of a layout are handled by
35:13 - the CSS and that means you can provide
35:16 - different style style rules for
35:19 - individual types of content on the page
35:22 - and it also means that WordPress can
35:24 - generate different layouts in pure CSS
35:26 - because Guttenberg outputs everything at
35:29 - block levels so you can target each
35:32 - individual block that's added to the
35:33 - content as a grid item so this opens the
35:39 - door for WordPress itself to become a
35:41 - page builder it also opens the door for
35:43 - WordPress itself to allow for custom
35:46 - layouts for each individual piece of
35:48 - content to create across a WordPress
35:50 - site
35:50 - this could happen it should happen it
35:55 - should also be in the hands of theme
35:56 - developers to control how much of this
35:58 - customization is possible but this is
36:00 - one of those times
36:02 - when all paths are open and whatever we
36:05 - do besides where we end up going yes
36:11 - yeah that was long ago yet okay thank
36:13 - you kind of mind-blowing very cool that
36:18 - come on there must be some questions
36:19 - yeah yes so do note your hop to the
36:21 - microphone ground a big wall story if
36:23 - you could do that there's another mic
36:26 - from the others as well but gram your
36:28 - question please yes thanks Morton there
36:31 - is unbelievably informative presentation
36:34 - you mentioned flexbox earlier do you
36:37 - think that with the use of grids that
36:41 - it's going to effectively replace the
36:43 - necessity for flex box or is could you
36:45 - see the two coexisting in any situations
36:49 - will CSS flex CSS and flex box coexist
36:54 - absolutely CSS grid and flex
36:59 - coexistence allows us to do magical
37:02 - things they should be used in
37:06 - conjunction with each other in fact grid
37:09 - flex and float all have a place in
37:13 - layouts is just now we can use float for
37:15 - what it supposed to be which is floating
37:17 - elements next to other elements and
37:18 - letting content flow around it we can
37:20 - use flex for what it's supposed to be
37:22 - which is flexing contents within a box
37:24 - to either line up horizontally or
37:26 - vertically or break nicely and then we
37:28 - can use grid for the overall layout so
37:30 - one of the most interesting demos I've
37:33 - seen of CSS grid so far was a grid where
37:36 - they used they made an actual grid and
37:39 - they put content inside each of the
37:41 - cells and then they use flex to scale
37:44 - the contents in each of the cells to be
37:46 - consistent so using grid and flex
37:50 - together mates for that gives us extra
37:53 - layout tools that we previously didn't
37:56 - have because we can now relegate the
37:58 - responsibility to the right type of tool
38:00 - fine set was a great answer cheese okay
38:04 - yes again me tree hi Morten thanks for
38:08 - the great talk and my question is I know
38:12 - that the future of the web is kind of
38:17 - influenced by what the default WordPress
38:19 - themes do in terms of layouts in terms
38:23 - of CSS in terms of HTML do you have a
38:25 - strategy to like advocate CSS grids to
38:29 - use them in default themes and how we as
38:33 - theme developers can influence that and
38:35 - what are like step-by-step guide to use
38:38 - more you CSS graze more okay there are
38:41 - two questions there so first is there a
38:44 - strategy in place to make the default
38:46 - theme in WordPress use CSS grid yes I am
38:49 - building a conspiracy to make that
38:52 - happen
38:53 - I started it last year so
38:58 - there but but seriously there are
39:01 - conversations around this because
39:04 - hopefully the next considering the
39:08 - introduction of Gutenberg the next
39:11 - WordPress team should display what it's
39:14 - possible and as far as I'm concerned
39:16 - what is possible becomes more
39:18 - interesting if we use CSS grid for it of
39:21 - course
39:21 - when we when WordPress ships a default
39:24 - theme you have to consider the fact that
39:26 - WordPress is a global tool that people
39:28 - use all over the world and we have to
39:31 - account for every single type of user
39:33 - including users that are on older
39:35 - hardware on slower networks on less
39:39 - updated browsers so in that conversation
39:42 - we have to have a conversation about
39:44 - backwards compatibility about how to
39:46 - handle fall backs properly and all that
39:47 - kind of stuff and my scorched-earth
39:50 - policy on responsive on progressive
39:53 - enhancement might not work for WordPress
39:55 - core but I think we're going to get
39:59 - there as for everyone else who is not
40:02 - developing a core theme that ships with
40:05 - WordPress you should use CSS grid in
40:09 - your layouts even if it's just a
40:11 - progressive enhancement for modern
40:13 - browsers because a year from now two
40:15 - years from now five years from now this
40:17 - is what's going to be expected and you
40:19 - need to learn it now because otherwise
40:21 - the kids that are in school now who are
40:23 - learning web design who are learning
40:25 - this stuff will just jump over you case
40:28 - this is better and easier and more
40:31 - performance thank you thank you
40:36 - anyone else any more from the floor I
40:39 - think you got AB under the expert bar
40:41 - that'll be good okay
40:43 - oh yes yes sir so for those of us who
40:48 - like to learn by breaking things
40:50 - is there a CSS grid theme you'd
40:52 - recommend we start off with so as far as
40:58 - I know based on doing no research
41:04 - I think the kunda theme I built is
41:07 - probably the first WordPress theme that
41:09 - only uses CSS code for layouts I don't
41:11 - know if there are other things that do
41:12 - it by all means go trash it it's on
41:16 - github and it's even on my website so
41:18 - you can just muck around with it on the
41:19 - website I'm going to document that theme
41:22 - once it's done it's still in its infancy
41:25 - and but I'd like to see more themes
41:29 - showing up the thing with CSS grid is
41:33 - all the things that we know about
41:35 - layouts are no longer relevant
41:38 - this requires a completely different way
41:40 - of thinking about web layouts and if you
41:43 - approach it that way so you just start
41:45 - designing something without considering
41:46 - you know floats and clears and
41:48 - everything then you can do new
41:49 - interesting things and I would love to
41:50 - see our community start building new and
41:53 - interesting designs using CSS grid
41:55 - layout that break the norms you'll
41:58 - notice that pretty much sticks
41:59 - within common parameters about design
42:02 - because I want it to be something that
42:04 - people can relate to but I think the
42:06 - next theme that it's built should be
42:09 - something totally new and different yes
42:13 - I have a question yes so one of the
42:21 - things that comes up when I do this talk
42:23 - or even talk about CSS grid is what is
42:26 - happening to the frameworks people use
42:28 - the bootstrap foundation all these
42:30 - things are they going to adopt CSS grid
42:32 - I actually can't answer that question I
42:35 - know you have it so that's why I'm
42:37 - bringing it up I can't answer that
42:39 - question I went and looked at the beta
42:41 - version of bootstrap yesterday and it
42:43 - does not have CSS grid in it they're
42:45 - doubling down on flexbox as the layout
42:48 - module I'm interested it's interesting
42:52 - to think about where these frameworks
42:56 - will go next because the frameworks are
42:58 - very much rooted in this idea of using
43:00 - divs and containers to create these
43:04 - advanced layouts and with CSS grid a lot
43:06 - of that goes away so if the frameworks
43:09 - were to migrate to CSS grid they would
43:11 - have to break their standard practice
43:14 - and retrain all the people who use it
43:16 - that might mean
43:18 - that these frameworks will date themself
43:22 - out of the game it also might mean that
43:26 - you in this room can build a new better
43:29 - framework based on CSS grid that may
43:32 - out-compete these old dinosaurs just
43:36 - think about that it's nice to end on a
43:40 - call to action isn't it
43:42 - thank you very much gone that was
43:44 - fantastic
43:44 - [Applause]
43:54 - you

Cleaned transcript:

just before I get started the slides for this talk are on my website right now I'm telling you this because there's a ton of content and we have a short period of time here so I'm gonna cram through it and you will want to review later so now you know where to find it I have a book in my bag and on that book I draw all sorts of layouts all the time that's how I design websites they start with a piece of paper and I'll just draw some stuff and I go haha this would be super cool so a couple of years ago I made this design and when you look at it you go yeah this looks like a standard web design it's fairly basic it has some interesting stuff like there's the categories and title at the top and then you have the featured image and then you have the meta content on the left hand side or right hand side right hand side and then the content itself and you go yeah sure this is relatively easy to do except on smaller screens I wanted to make a slight change move the meta content from next to the content up above the featured image and then on even smaller screens I want to move the featured image of above rest of the content and at this point you go this is not so easy you see any one of these three on their own as a piece of cake combined on one website with just CSS and HTML impossible because you'd have to change the markup structure to get this to work with old layout tools so instead you'd have to go with JavaScript and have to change everything which is not great because then you're changing everything and it shouldn't be like that today I want to talk to you about a whole new way of thinking about layouts on the web and this whole new way of thinking about layouts will truly change the way we design websites from here on forward I'm not talking about emerging technologies that are coming two or three years from now I'm talking about technologies that are here today that you to start using today it's called CSS grid I'm Morten Ramm Hendrickson and let's get cracking so just to prove to you that I'm not making things up this is the layout I drew built purely in HTML and CSS and WordPress running in a browser today and all the stuff that you saw is happening plus a bunch of other things this website you're seeing here is my website so if you go to Morton com grab the side of your browser and start doing this you'll actually see the content jumping around on the page and your brain will say there's some JavaScript happening here or this might be bootstrap it's not it's just pure simple CSS and in fact the HTML behind it is cleaner than any HTML you'll ever see from WordPress before this point so instead of going through the entire WordPress theme which will take way too long I decided to make a slightly simpler example so I made this little web page for the room we're in so this is the speaker track for today and when you look at it I want you to think about how you would make this layout using only HTML and CSS no frameworks nothing else just look at it for one second I think how would I mark this up all right it's here so first you're probably going to do something like draw boxes around the main items so here we have some sort of header thing and then there's a huge section on the side but all the content and then on the other side there's like a logo and then there's some other sidebar stuff good so we have those boxes and we'll mark that up in HTML then because we have to lay this out we need to start grouping elements so below the main header thing there's a bunch of content but the content is displayed in two columns so we need to put a box around them so we can float them left to right or use flex to put them left and right then in the sidebar we have another grouping of contents and since we're floating that we need to put a box around that and then inside the cyber itself there's two more pieces of content that need box to surround them so we end up with something like this the blue sections are semantic markup things that are required for the document to work this is the actual content the red sections are boxes that we drew around content solely to say this is a thing that will go next to another thing and this is another thing that will go next to another thing and you can see that the markup is full of that stuff when you start looking at responsively as that gets super complicated because in this responsive layout you see that that thing the black box that's on the sidebar that's actually the header and this the small box on the far right hand side that has some address information that's actually the footer and on a mobile display the semantic structure is as it should be on the other end of the scale everything has been moved around and then you say I can do this bootstrap is my friend everything is fine the problem is what bootstrap does to fix this and all the other frameworks is take the HTML and apply some JavaScript and move the HTML around in the document to get this stuff to work that means for accessibility reasons the whole document is now jumbled which is not great it also means we're leaning on external technologies just to do something that should work on its own the problem is web layouts the way we've been doing it since the beginning of web time have always been broken and all we've been doing this entire time is refine how we break the layout so we started with tables then we had frames then we had layers then we had floats and clears then we had flexbox and all this stuff is trying to solve this fundamental problem which is a web document so HTML is a document that starts at the top and ends at the bottom and anytime you want to put something next to something else you have to somehow break the document just to do that which goes against everything we want to do in design consider this super simple example you have a box and then two boxes inside two column layout simple right should be well if you look at just the markup this is what you get just two boxes below each other with a box around them then you have to put them next to one another so you use float few floats one item to the left and the other one item to the right and then the box that surrounds the collapses because of course you're floating content so you're pulling them out of the structure of the document and then you want content to float around it to fix that you then have to introduce a clear fix so that's just empty content that you stuff from the bottom corner solely for the purpose of making that box wrap around the contents again and then you say well we have better tools now we have flex box and it's true flex box does solve this problem but if I make it just one element more complicated flex box doesn't help us anymore because now we can't say to flex put the content to other pieces next to another than one piece not flex box would try to treat all three as the same thing because flex box works in one direction either horizontal or vertical so now we have to introduce an extra box and say can you please flex this container thing next to the other thing and then inside the container we'll put two things underneath one another this is the hack this is not the way it's supposed to be this is truly a hack this is how we design websites today we cheat we build a bunch of extra stuff just to get our layouts to work it's nuts if you think about it it's totally crazy flawed and flex forced us to put extra content into our HTML for the sole purpose of layouts which goes against everything we've learned about how to markup websites this is also layouts today this is how we have to do things well it is today that you're gonna change all this just before I get into it consider what the web looks like right now this is bootstrap the official documentation telling you how to make a layout that has two columns look at the HTML look how many nested divs are necessary to get this to work this is WordPress theme builder plus some sort of page layouts plugin I can tell you by looking at this HTML all of this stuff generates a box with some content in it but it's necessary because we have to do all this floating and clearing and nesting and nesting and nesting and nesting underscores that's the same in a slightly less extreme version when you look at the overall markup of underscores there's a bunch of elements within underscores that are there solely for the purpose of layout so the blue boxes here are the header the main the side and the footer the red boxes are there for layout purposes so what if we could take all that extra craft away have just the semantic markup and nothing else and then solve the layout problems in CSS in a clean and simple way instead of this layout we'd have this which is easier to read it makes way more sense what if we didn't have to do all this crazy stuff anymore if you look at my example the blue items are the ones that matter the red don't but even if I take away the red items the structure of this document still makes no sense we have a heading 1 then we have a main then we have a header then we have an aside and then we have a footer if I take all the extra craft away and reorganize the document all of a sudden it makes much more sense from a semantic standpoint header h1 main aside footer the problem is up until this point all our layout tools have been content out and onedimensional meaning you apply a layout to an individual item and then you have to relate that item to other things what we need is a to demand a layout that works layout in and that's what CSS grid gives us so instead of doing all the boxing thing I was talking about before what if we start by saying here's what we want let's apply a grid to it just like you would do in design you draw a grid on top and then you say we're gonna place contents on this grid so you have your semantic markup then you simply grab each item the header the h1 the main the side buyer and the footer and you place them on the document that makes sense all of a sudden you know the thing with the guy with the blinds that everyone shares on the internet all the time that's it'll be like zip old applies work too bad this works perfectly go to code pen this example is a live website all those screen grabs are from the website all the content restructures the way it's supposed to you can play around with it you can see exactly what's going on and the craziest part is when you read the code you'll be like I understand what's happening here I don't even need to understand CSS grid I can actually see how this works so how does it work I've been told that listening to my talks could be a bit like trying to capture a firehose sometimes so I've decided to try to structure this in such a way that it's more like strapping fire hoses on a platform and then flying all right but but this means I need your absolute attention I'm gonna crash through some stuff here if it'll be nice and quick okay so brace yourself stand firm CSS grid needs new terminology so we have grid container grade item grid line grid cell good track grid area grid gap I apologize I know you have to do this there's a simultaneous translator you're just not appreciate me speaking fast so a grid container is any container in your document now you create a grid inside you do that by simply declaring display grid you can do this to as many elements as you want on the page it just in that it does not matter a grid item is any direct descendant of a grid container so if you create a grid any direct descendant automatically becomes a grid item that's placed inside the grid but only the first level descendants just like it is with flexbox a grid line is any of the lines you draw inside the grid horizontal or vertical the grid lines are numbered by default so the first edge of the grid either vertical horizontal has to line number one and then you just count them two three four five six and the last one has the last number a grid cell is any cell inside the grid a grid area is any defined rectangular area and inside the grid that covers more than one cell a grid track is either a horizontal track or a vertical tracks or a row or a column and a great gap is the space between each of the cells if you choose to add basically gutters got that good don't worry these slides are online you can go look at them later and this will become part of your vocabulary anyway so CSS grid in a nutshell how does this actually work how do we apply it today number one define a grid on an element where you want a grid to appear number two place items within that grid where you want them to appear number three make world peace that's all there is to it what does it look like well here's my example this is the semantic markup with know CSS apply except for color then we start by grabbing just the site container that's the container that wraps everything and we declare display grid so now we have a grid then we decide how many columns and how many rows we want I mean you do that using grid template columns and grid template rows and here what we do is say the distance from the edge of the grid to the first line that's the first Valley then the distance to the next one it's the next value and so on and so on so you're declaring the width between each of the lines and then another line is drawn this comes with new features like the fr or fraction value that allows you to say take one fraction of the available space and then put a line there so you can make truly dynamic layout do the same with rows you just declare a list where you want the rows appear and they will appear automatically once you've drawn lower rows you have cells and your browser automatically places all the direct descendants of the grid element in those cells from the top left to the bottom right then for each individual element you can if you want to declare a grid column and a grid row property and say I want this element to appear from column line 2 to column line 4 and from row line 2 to row line 3 that means you literally find column line 2 and column line 4 and you put the content in between those two lines same with rows well I here you see what I'm talking about we're doing layout in so we create the layout first let me just dump content where we want them to appear when you look at this you realize there are all these new things you can do like for instance create actual white space on a layout you can just choose not to populate cells then you have white space no space urges or anything like that anymore once you know this you can then place any of your elements anywhere you want some the grid looks promising right but uh you have to do all this counting stuff I keep track of the line numbers and then what if it's responsibly to keep changing the greater gets kind of nuts in my layout I move elements particularly the header on the footer keeping track alive with numbers would be a pain and to be fair you can't actually give each of the track lines a name and refer to them by name instead of my number but that's still quite a lot of stuff to deal with so we have this new property called grid template areas and grid template areas is nuts it's almost like a ski you declare grid template area and then you write out each of the cells and your grid and you say what is the name of this cell so for instance here I have the three cells at the top our title title title and then we have main header header and main slide bar footer then you use the grid area property on individual child items and you just declare the name of the area you want that woman to appear so if you say grid area header well that's wrong no it's right if you say grid area header the element goes to the header area if you say grid area title it goes to the title area and this allows us to do crazy responsive web design because that means instead of doing a bunch of crazy stuff all you have to do is change the grid template areas and then the items that you've already said this is going in the title area this is going in the header area we'll just move around the grid so your responsive code and your media queries become very very simple and anyone who reads this code can see okay so we have a grid that has two columns and then we put the title and title and mine and header and main and sidebar and then when the screen gets wider we have three columns and here we have title title title main header header the CSS actually visibly declares what's going on no more no more everything just works this is the point where your brain will start going like this doesn't actually compute yet and trust me I've been working with this for over a year every time I sit down and do a new grid layout my brain keeps telling me to do things the old way and I have to keep throwing my brain out and then replacing it with a new one which means my kid is walking around in the background they're making noises when he grows up he won't think the way I do and he'll be like this is super simple and then I'll tell them about flows and clear why would you do it like that that's so crazy there's also this weird little thing called nested grids now in the original grid specification from a couple of years ago you had the ability to create a grid and then have an element within the grid inherit the grid so you would get consistency that never happened in browsers so instead what we do is we declare multiple grids inside one another and it turns out that's actually a huge benefit because then you can say I have an overall layout grid right layout my header my footer my sidebar and so on then you can have a sub grid just for the main content layout and you can even have a grid inside that read before something else and you have detailed control over every single component within your layout and as you know the new trend in web design is to work on component level well let's the grids allow you to literally work on component level and this means for example if you're making a wordpress theme you can make individual content grids for individual types of content so if you apply a certain class to any element then you can change the grid completely using pure CSS no more fancy templates and crazy PHP just use CSS but older browsers this is the absolute biggest argument against CSS grid first of all all modern browsers support CSS grid now every single one of them there's an issue but I'll get to that in a second before we get to that there's also the question of I think it's too soon this is emerging technology it's not mature yet true it's emerging technology but you know small websites like the New York Times have started using them so I would say any client that says we're not ready for this yet because no one is using it is can be urged forward this is something we can do today but there are two elephants in the room right so you have these see you give me way too much credit they're always these things that don't work the way we want to so we have an Internet Explorer 10 and 11 and we have edge who are not currently following the spec exactly point of order if it wasn't for Internet Explorer 10 we wouldn't have CSS grid CSS grid was invented for Internet Explorer 10 and the reason why these two browsers are lagging behind is because the other browsers decided to change the spec but the spec is built into Windows so Microsoft has to update all of their operating systems to get this to catch on however edge is probably a couple of weeks away from getting full grid support and I'll show you how to create proper backwards compatibility for all other browsers there's this other thing that has nothing to do with CSS grid that's called a feature query that we can use now to ask a browser do you support this grid problem this CSS property and we can use that to test whether or not the browser supports grid the canonical best practice is to ask add support display grid works exactly like a media query so if it says yes then we run the code inside the problem is edge does support grid it just sports the wrong spec so if you're testing for grid support and edge test for something that edge does not support within the grid spec for example grid area auto then edge won't try to run the grid my recommendation here is actually to serve up the mobile experience on all browsers that don't support grid and this is where people fall off the horse right this is like wait wait wait wait what so that means the site will look the same in all browsers that's exactly right the thing is we've been doing responsive web design for ten years now no we have not we've been doing responsive web design since 2010 and that we've established an entire language around not serving up the same experience across all browsers because on a mobile browser the website looks totally different from what it does on a large desktop browser there is no actual reason why a website should look the same across all browsers except that we keep saying they should so we can change our methodology around this making everything look the same across all browsers is a bad habit we should be making things look the best they can on whatever browsers are supported in responsive web design allows us to do this we just had to migrate it from not just saying responsive web design it's about the width of the screen to also say we can make it responsive to the age of the browser accessible mobile first layouts work well on all browsers if you don't believe me go look at the mobile version of Wikipedia on your desktop browser you will never use regular Wikipedia again the mobile version on the desktop browser is so much better I don't understand why they just don't move forward this is progressive enhancement this is our responsibility we progressively enhance the web because if we don't then we'll get stuck in the past forever so practical approach to CSS grid right now so you can use it when you walk out of this room first build accessible mobile first layouts without grid that is your baseline so make it work on a mobile phone make it sure that it still works when it's on a wide screen then use that mobile first layout as the fallback so if everything goes to hell mobilefirst works then use add support to detect grid support at the appropriate break point when everything starts looking weird add a grid then keep scaling up the width of the screen add another grid add another grid on another grid because people have screens that are this wide right now so you need to account for that if you don't believe me go to my brother's house he has two ridiculously here screen so remember the layout I drew that was impossible if you apply grid to it it's not only impossible it's something that makes sense and just works and it's the layout that send a new theme on my website and you can go check it out on github and put it on your own site as well your path to CSS grid starts here today right now number one use Firefox when you develop because Firefox has a grid inspector so anytime you find it an element that has grid on it there's a little hashtag type thing that's supposed to look like your grid and if you click on that in the inspector the gridlines appear in your browser and you can actually see the grid while you're working with it I'm sure the other browsers will catch up and right now Firefox has it second Rachel andrew has a website called grid by example this is basically doctrine rachel andrew is by and large the reason why we have CSS cribben browsers today she's been pushing it for years and years and years and she's documented absolutely everything so we want to know how it works go to grid by example Mozilla developer Network has tons of documentation most of it written by either Rachel Andrew or gem Simmons it is a great resource it's documented every single property and everything that's going on CSS tricks has a complete guide to CSS grid which is just like the complete guide to flexbox which is also the same content over again my new theme which is running on my website is on github and you can go check it out pick it apart send pull requests complain about the lack of internationalization what you'll notice is CSS grid respects text direction so there is no RTL see a style sheet because wood CSS grid you don't need it anymore I wrote an article about this that came out in Smashing Magazine yesterday called the building productionready CSS grid layout today that covers what I talked about here plus how I designed the theme plus a bunch of other stuff go read it go where you want to go where you want the web to go and the rest will follow we in this room control a large percentage of the web and if we all adopt CSS for it now and do it properly the web will follow don't believe me this is the LinkedIn office in Carpinteria that I go to occasionally they built a new building and then they put this huge patch of grass directly in front of the entrance so if you look at the image here there's a building here so everyone walks like this and I saw the patch of grass so this was taken on the first day and I'm like this is insane whoever designed this was now thinking about the end user so I just started walking across the grass and I was walking across the grass for a couple hours to make a path and then a couple of months later someone sent me this picture and then their code a week ago someone sent me this picture if you paved cow paths meaning walk where you want everything to head eventually someone put paving stones down so designers in the room CSS grid means you can finally use proper grid systems in your designs there also means design the browser is now really easy theme developers start using CSS grid today in all your work even if it means providing full fallbacks for everything you do I have links for that if you want to talk to me later framework people CSS grid cures your dividers so you should take a strong inoculation right now page builders this is make or break time CSS grid plus Guttenberg and WordPress means that most of what page builders does will be handled inside WordPress itself so if you're building a page builder you need to get on top of the spec and figure out how it fits into your business model set best practices be responsible because CSS grid allows you to mess around with the structure order of your content and can make sites really inaccessible so don't do that but use it for good build the web you want to see and repeat after me make it accessible make it fancy and make sure the fancy doesn't break accessibility oh come on stand up everyone of you stand up come on everyone of you stand up this is your mantra all right number one what number two number three thank you very much awesome okay winner take five minutes of questions now do we have questions in the room because I guess the alternative is everyone piles on Morten and an expert bar or somewhere like that where do you think you're going to be for questions if people want to come in and get into the detail expert Baron Haussmann right okay Oh what you are gonna have to ask questions the other room is running late they're not as sharp as we are so I need some questions on the floor while you're thinking about that I have got a question to get started with hmm what really is the guttenberg implications with CSS grid can you think of some really nice examples straight off the bat okay so are you all familiar with Gutenberg the new content editor yeah okay so there's a new content editor coming to WordPress called Gutenberg that works on the principle of block elements so instead of saying you're right a bunch of content and you add an image and they write a bunch of content and there's just one big blob you're now able to say add block that is a quote add a block that is regular text add a block that is something else at a block that is a video add a block that is and inline something and the idea over time is that Gutenberg will evolve to have things like columns and things like other types of layouts which is completely new to us in the WordPress community if you take that idea that all the stuff that you put into a blog post or eventually all the stuff you put on the entire view because Gutenberg will likely evolved to the point where you can customize the entire view including your header and your sidebar and everything else and then combine that with CSS grid there's a door that opens to customization within WordPress that is truly mind breaking which is imagine if you go into the content editor WordPress in you're writing up posts or some other type of content and then you say for this content I want to have an extra sidebar and then you can go in and just out a guide and place content to the left or the right of that guy I'm not saying that this is what the Guttenberg team is working on now I'm sure if anyone in the rooms from the good work team they're like this is not part of it I haven't written this article yet I have crazy ideas but the thing is once we have CSS grid all the layout components of a layout are handled by the CSS and that means you can provide different style style rules for individual types of content on the page and it also means that WordPress can generate different layouts in pure CSS because Guttenberg outputs everything at block levels so you can target each individual block that's added to the content as a grid item so this opens the door for WordPress itself to become a page builder it also opens the door for WordPress itself to allow for custom layouts for each individual piece of content to create across a WordPress site this could happen it should happen it should also be in the hands of theme developers to control how much of this customization is possible but this is one of those times when all paths are open and whatever we do besides where we end up going yes yeah that was long ago yet okay thank you kind of mindblowing very cool that come on there must be some questions yeah yes so do note your hop to the microphone ground a big wall story if you could do that there's another mic from the others as well but gram your question please yes thanks Morton there is unbelievably informative presentation you mentioned flexbox earlier do you think that with the use of grids that it's going to effectively replace the necessity for flex box or is could you see the two coexisting in any situations will CSS flex CSS and flex box coexist absolutely CSS grid and flex coexistence allows us to do magical things they should be used in conjunction with each other in fact grid flex and float all have a place in layouts is just now we can use float for what it supposed to be which is floating elements next to other elements and letting content flow around it we can use flex for what it's supposed to be which is flexing contents within a box to either line up horizontally or vertically or break nicely and then we can use grid for the overall layout so one of the most interesting demos I've seen of CSS grid so far was a grid where they used they made an actual grid and they put content inside each of the cells and then they use flex to scale the contents in each of the cells to be consistent so using grid and flex together mates for that gives us extra layout tools that we previously didn't have because we can now relegate the responsibility to the right type of tool fine set was a great answer cheese okay yes again me tree hi Morten thanks for the great talk and my question is I know that the future of the web is kind of influenced by what the default WordPress themes do in terms of layouts in terms of CSS in terms of HTML do you have a strategy to like advocate CSS grids to use them in default themes and how we as theme developers can influence that and what are like stepbystep guide to use more you CSS graze more okay there are two questions there so first is there a strategy in place to make the default theme in WordPress use CSS grid yes I am building a conspiracy to make that happen I started it last year so there but but seriously there are conversations around this because hopefully the next considering the introduction of Gutenberg the next WordPress team should display what it's possible and as far as I'm concerned what is possible becomes more interesting if we use CSS grid for it of course when we when WordPress ships a default theme you have to consider the fact that WordPress is a global tool that people use all over the world and we have to account for every single type of user including users that are on older hardware on slower networks on less updated browsers so in that conversation we have to have a conversation about backwards compatibility about how to handle fall backs properly and all that kind of stuff and my scorchedearth policy on responsive on progressive enhancement might not work for WordPress core but I think we're going to get there as for everyone else who is not developing a core theme that ships with WordPress you should use CSS grid in your layouts even if it's just a progressive enhancement for modern browsers because a year from now two years from now five years from now this is what's going to be expected and you need to learn it now because otherwise the kids that are in school now who are learning web design who are learning this stuff will just jump over you case this is better and easier and more performance thank you thank you anyone else any more from the floor I think you got AB under the expert bar that'll be good okay oh yes yes sir so for those of us who like to learn by breaking things is there a CSS grid theme you'd recommend we start off with so as far as I know based on doing no research I think the kunda theme I built is probably the first WordPress theme that only uses CSS code for layouts I don't know if there are other things that do it by all means go trash it it's on github and it's even on my website so you can just muck around with it on the website I'm going to document that theme once it's done it's still in its infancy and but I'd like to see more themes showing up the thing with CSS grid is all the things that we know about layouts are no longer relevant this requires a completely different way of thinking about web layouts and if you approach it that way so you just start designing something without considering you know floats and clears and everything then you can do new interesting things and I would love to see our community start building new and interesting designs using CSS grid layout that break the norms you'll notice that pretty much sticks within common parameters about design because I want it to be something that people can relate to but I think the next theme that it's built should be something totally new and different yes I have a question yes so one of the things that comes up when I do this talk or even talk about CSS grid is what is happening to the frameworks people use the bootstrap foundation all these things are they going to adopt CSS grid I actually can't answer that question I know you have it so that's why I'm bringing it up I can't answer that question I went and looked at the beta version of bootstrap yesterday and it does not have CSS grid in it they're doubling down on flexbox as the layout module I'm interested it's interesting to think about where these frameworks will go next because the frameworks are very much rooted in this idea of using divs and containers to create these advanced layouts and with CSS grid a lot of that goes away so if the frameworks were to migrate to CSS grid they would have to break their standard practice and retrain all the people who use it that might mean that these frameworks will date themself out of the game it also might mean that you in this room can build a new better framework based on CSS grid that may outcompete these old dinosaurs just think about that it's nice to end on a call to action isn't it thank you very much gone that was fantastic you
