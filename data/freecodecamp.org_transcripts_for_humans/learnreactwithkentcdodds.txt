With timestamps:

00:38 - hey everybody
00:40 - so uh let's get this started my name is
00:42 - kent c dodds and i'm going to be talking
00:44 - about react with you all
00:47 - this evening and or whenever whatever
00:49 - time of day it is wherever you are um so
00:52 - let's just jump into things i've got a
00:53 - couple of slides here
00:55 - and
00:56 - we'll go over some logistics and stuff
00:58 - for the next um hour that we'll be
01:00 - together
01:01 - so
01:02 - um
01:03 - yeah so this is some stuff about me
01:04 - we're gonna be learning react and um
01:07 - yeah just a bunch of little icons and
01:09 - things you can click on i've got my
01:11 - slides right here um maybe we'll add
01:13 - those to the to the notes at slides.com
01:17 - kensey.learn.react
01:18 - um so these are my slides for my normal
01:20 - workshop
01:22 - which is like a full day workshop and
01:24 - very very interactive and so
01:27 - um yeah just be aware that some of the
01:30 - like exercises and things are kind of
01:32 - catered toward a
01:33 - hands-on react uh react workshop this
01:36 - will not really be hands-on like you can
01:38 - follow along if you want to but
01:40 - um we only have an hour tonight so
01:43 - we won't be doing everything for example
01:45 - we won't be doing the air squats that i
01:46 - normally like to do
01:48 - but though you can feel free to do air
01:50 - squats health is a good thing
01:53 - um so like i said it
01:55 - the the exercises and things you can
01:57 - actually do on your own um you'll see
02:00 - there are lots of comments and the
02:01 - exercises to tell you exactly what to do
02:04 - this is really fundamental stuff and so
02:07 - whether you've been using react for a
02:08 - long time or you're just wanting to get
02:10 - into it this will be really valuable
02:12 - because
02:13 - um
02:13 - often when we start building products
02:16 - with a framework or something we don't
02:17 - really understand what exactly is going
02:19 - on under the hood
02:20 - or how things are working and so that's
02:22 - hopefully what i'll be able to give you
02:24 - uh from this
02:26 - it's very very bare bones so we're not
02:28 - um like i i start out with just
02:31 - index.html file
02:33 - so that you can draw a queen separation
02:35 - between
02:36 - uh react the framework and all the other
02:39 - stuff uh like webpack and things
02:42 - um so
02:43 - yeah we're
02:45 - all the examples aren't 100 practical
02:46 - it's not we're not covering everything
02:48 - you can do with react
02:49 - but most things the nice thing about
02:51 - react is that it's pretty
02:52 - has a pretty small api surface area
02:55 - and
02:56 - i'm not going to go through every single
02:58 - api and say like okay so let's look at
03:00 - the docs here are all the apis
03:02 - lifecycle methods and things it's it is
03:04 - a little bit more practical than that um
03:07 - but uh yeah it's not everything so
03:10 - um we are gonna be talking about react
03:12 - create element and jsx um and how those
03:15 - uh relate to each other we'll go over
03:17 - custom components prop type styling
03:19 - event handler state dom manipulation
03:21 - forms and http we'll see how far we get
03:24 - uh it's pretty likely we won't get like
03:26 - really all that far i'm not going to
03:28 - give you any time to do the exercises on
03:30 - your own um and so
03:33 - yeah that's um
03:35 - unfortunate but that's uh
03:38 - kind of the nature of the time limit
03:39 - that we have so we'll probably get
03:41 - through quite a bit more than we would
03:43 - if you were doing the exercises on your
03:44 - own i give you time for that um and the
03:47 - cool thing about having this recorded is
03:49 - that you can
03:50 - um watch it later and and pause it and
03:52 - do the exercises and then watch my
03:54 - solution
03:55 - okay cool so if you haven't set it up
03:57 - this is how you do it um there you can
03:59 - actually
04:01 - run everything
04:02 - in code sandbox so if you haven't heard
04:04 - of code sandbox before
04:06 - um
04:08 - it you're gonna have your mind blown
04:09 - because it's amazing
04:11 - so this is the repository for it um we
04:14 - have a gitter chat but i'm not going to
04:16 - open that up i'm going to use the
04:17 - youtube chat
04:20 - maybe there's a lot of
04:23 - chatter which is great um but i'll try
04:26 - to keep up on questions and stuff in
04:28 - there
04:29 - but yeah if you go to the repo
04:31 - and then go to code sandbox.io go on
04:34 - that link there then it'll open up in
04:37 - code sandbox which is a full
04:41 - like it's almost like an integrated
04:43 - developer experience an ide in the
04:45 - browser it even runs the test which is
04:47 - like
04:48 - really awesome um so yeah this you can
04:51 - do most of the workshop just right in
04:53 - here so you don't have to install
04:54 - anything
04:55 - which i think is pretty rad
04:57 - so
04:58 - um
04:59 - yeah you can find a link to this repo in
05:02 - the description of the video
05:04 - um okay so once you get that set up just
05:08 - a couple logistics we're not in person
05:10 - so there's no real raising hands i will
05:14 - try to keep an eye on the chat here but
05:17 - um
05:18 - it's kind of hard so
05:19 - yeah if you have something just go
05:21 - like in the chat or something um and
05:23 - feel free to answer each other's
05:25 - questions i think that is really helpful
05:28 - um yeah and when you're going through
05:30 - the exercises uh fill out the
05:31 - elaboration and feedback forms for the
05:33 - exercises that will help you solidify
05:35 - what you're learning in your brain which
05:37 - is useful um if you have questions for
05:39 - me that are not related to this feel
05:41 - free to ask on my ama or first search
05:43 - because i've got like 400 questions that
05:45 - i've answered on there
05:47 - and then as always follow me on twitter
05:49 - because i tweet things and some people
05:51 - think it's use
05:53 - um
05:54 - so the normal routine for my workshops
05:56 - is i i give a quick intro to the use
05:58 - case that we're trying to support and
06:00 - then we do an exercise
06:03 - and then elaboration and you fill out
06:05 - the elaboration and feedback form and
06:06 - then if you have some extra time you do
06:08 - these extra things help each other and
06:10 - stuff
06:11 - um
06:12 - for us i'm just gonna skip all this
06:14 - stuff and we'll go i'll finish the
06:17 - exercise for you
06:19 - okay so that's it that's like literally
06:21 - all my slides no more slides uh slightly
06:23 - boring
06:24 - okay
06:25 - so
06:27 - here we go um i've got
06:29 - the project set up locally and
06:32 - um
06:34 - yeah we're gonna actually start in this
06:36 - intro directory so um here we have
06:39 - exercises exercises final uh this is
06:42 - actually a create react app app so if
06:44 - you've used create react app before then
06:47 - this should be pretty familiar you can
06:48 - look at the package.json and check out
06:50 - the scripts that we have here we'll be
06:52 - using some of those
06:53 - um
06:55 - and but from the right get-go we just
06:58 - have
06:59 - these exercises and then the final
07:01 - version of the exercise so if you want
07:02 - to peek at the final version then you
07:03 - can do that
07:05 - um
07:06 - so sorry i just realized i don't have
07:09 - things arranged the way that i wanted
07:10 - them to be arranged
07:13 - move things over a little bit
07:16 - um people are saying nice things in the
07:18 - chat thank you that makes me feel good
07:19 - okay
07:20 - so let's go ahead and um i've already
07:23 - opened up this file you can just in your
07:26 - terminal open
07:27 - intro
07:28 - exercises zero zero dot html that'll pop
07:32 - it open in your browser so i'm gonna pop
07:34 - that open and look oh my goodness
07:37 - where's the code
07:39 - see we're gonna actually start with a
07:41 - very very basic
07:43 - hello world in just javascript so we're
07:46 - not even going to do
07:47 - react
07:48 - for this first thing so
07:50 - to get us started we're going to have a
07:52 - body
07:53 - and then we're going to have a div
07:55 - and we're going to give that div an id
07:57 - of root
07:59 - and then we're going to have a script
08:01 - and that script is going to be type
08:03 - text javascript
08:06 - love javascript and um
08:09 - yeah for this javascript we're going to
08:10 - have a variable i'm going to get the
08:13 - root element
08:15 - or we'll just call it root l
08:17 - and that'll be document get element by
08:20 - id root
08:22 - all right sweet so now i'm going to
08:24 - create an element i want to say hello
08:27 - world to the world right so
08:30 - um
08:32 - sorry i just got distracted by a chat um
08:35 - we're going to
08:36 - make our
08:38 - element
08:39 - document dot create element div that's
08:42 - the kind of element we want to create
08:44 - i'm going to
08:45 - set the text content to
08:48 - hello
08:49 - world and then just for fun
08:51 - i'm going to
08:53 - set the class name
08:55 - to
08:56 - a container
08:58 - you know because why not
09:00 - and then we'll say root l append child
09:03 - element
09:04 - okay so this is how we do this in
09:06 - javascript i refresh and i get that here
09:08 - let's pull up in the developer tools
09:10 - pull the bottom make sure we don't get
09:12 - any errors in the console
09:14 - all right cool so that's hello world in
09:17 - a regular javascript where document
09:20 - create element um to
09:22 - make an element and then we append that
09:23 - to our root you can think of that as
09:25 - kind of rendering this element to
09:28 - the our root element if i don't do that
09:31 - you're not going to see anything in here
09:32 - this element is just like existing uh
09:36 - somewhere in in memory it's not actually
09:38 - being rendered to user
09:40 - so
09:41 - um
09:43 - yeah
09:44 - so let's go ahead i'm i'm seeing some
09:46 - questions so let me address some of
09:47 - those really quick
09:48 - um
09:50 - so a quick question can you include
09:52 - redux in this tutorial i actually will
09:54 - not be including redox and that's
09:55 - totally intentional
09:57 - um
09:58 - i have a talk
10:00 - actually i have a blog post uh let me
10:02 - blog
10:05 - dots.com how to react there we go
10:08 - um and i'm sorry i can't actually paste
10:11 - links in the chat i think unless maybe a
10:14 - moderator can yeah i can't paste links
10:16 - in the chat so you'll have to google it
10:17 - um
10:18 - but uh yeah how to react and i talk
10:20 - about how it's a really bad idea to
10:22 - start with redux so we're not going to
10:24 - be doing that
10:25 - um
10:26 - today because that would
10:29 - be more distracting than helpful
10:31 - um
10:33 - so let's see will this live stream be
10:35 - updated later um
10:38 - probably maybe i don't know um i can't
10:41 - tell the future um but this content like
10:44 - lots of this content uh is like it's all
10:47 - totally up to date today and most of
10:49 - this content actually hasn't changed
10:52 - um for many versions of react um these
10:55 - fundamentals are are true for lots of
10:58 - versions of react
10:59 - um
11:00 - let's see
11:02 - oh that's really nice benny um
11:05 - what type of program you use for these
11:06 - type of recordings check out my ama
11:08 - kcd.imama
11:10 - that's actually just a github repo
11:13 - and i answer that question there you can
11:15 - search around okay so let's take a look
11:16 - at the next one uh and feel free to like
11:19 - ping me in here oh good question from
11:22 - somebody named machine
11:24 - are you a robot uh okay is react like
11:26 - angular or like bootstrap it's more like
11:29 - angular bootstrap is a bunch of css and
11:32 - some some javascript for interactivity
11:35 - uh it's like a
11:36 - ui library um for
11:38 - um like uh design uh system
11:42 - um react is more building user
11:45 - interfaces so you could actually build
11:47 - something like bootstrap with react um
11:49 - and people have uh so yeah it's
11:51 - definitely more like angular in that way
11:53 - in the way that it's a framework but
11:55 - you'll see it's quite different in
11:57 - actual implementation which editor are
11:59 - using using casey imvs code that will
12:02 - take you to
12:05 - my editor settings and lots of
12:07 - information about that on that note um
12:09 - my
12:10 - font theme
12:12 - um so you'll go to that and that will
12:14 - send you to a tweet that i just tweeted
12:16 - today so that people don't ask me about
12:17 - my font and my theme because everybody
12:19 - asks about my font in my theme so learn
12:21 - more about that there
12:23 - um
12:24 - am i going to do any context api stuff
12:26 - in this tutorial no i'm not um but
12:29 - um
12:30 - if you go to kcd i am slash advanced
12:33 - react that will take you to a course
12:35 - where i do go into context i also have
12:38 - a blog post about contacts and also on
12:41 - my youtube channel acne i am youtube
12:44 - you'll find the um i have
12:47 - somewhere on there like look in my
12:49 - playlist my toxic workshops i have a
12:50 - recorded version of the advanced react
12:53 - component patterns course
12:55 - which i gave it at paypal to some
12:58 - coworkers
12:59 - so you can
13:00 - learn more about
13:02 - the context api there
13:04 - um
13:06 - okay cool sweet now we can move on feel
13:08 - free to interrupt me with questions that
13:10 - you have that are um both relevant and
13:12 - and not relevant but hopefully mostly
13:14 - relevant
13:15 - okay
13:16 - so the next thing that we're going to do
13:19 - i have
13:20 - our
13:21 - script here this is basically the same
13:22 - thing that we had before just with more
13:24 - comments let me navigate to
13:27 - this thing
13:28 - okay so we have our rendered hello world
13:31 - so now i'm going to
13:33 - bring in react
13:34 - and we're just using script tag so i've
13:37 - actually got
13:38 - react dom and react in here
13:41 - and react is responsible for an api
13:45 - called
13:46 - react dot create element so this is how
13:49 - we cr
13:50 - similar to document.createelement you
13:53 - have a react create element and we'll
13:55 - take a look at that then react dom is
13:57 - responsible for the same thing we have
13:59 - here with this append child you can take
14:02 - a react element that you got from react
14:05 - and react dom will render that element
14:08 - to the dom you also have react native
14:11 - and you have the ability to render to a
14:14 - string of html rather than a dom node so
14:16 - you can do server side rendering
14:19 - and there's a whole bunch of other
14:20 - renderers there's even a renderer
14:22 - for react to render react elements to a
14:25 - word document or to a pdf or to canvas
14:29 - so there's that separation between
14:31 - creating react elements and rendering
14:34 - those react elements to some sort of
14:36 - environment
14:37 - so let's go ahead and re-implement this
14:39 - using
14:40 - um
14:42 - using react so i'm going to say
14:44 - react.createelement and then
14:46 - react createelements
14:48 - or react.createelement that api is a
14:51 - little bit different from
14:52 - document.createelement
14:54 - i guess i figured you don't want to
14:55 - monkeypatch a bunch of properties onto
14:59 - onto things
15:00 - and so instead you can set those
15:04 - right away as an object so here instead
15:06 - of text content
15:08 - of hello world we're actually going to
15:12 - call this children
15:14 - and it
15:15 - kind of makes sense if i were to make a
15:16 - div and i'd say hello world
15:20 - um
15:21 - this is text content but it's also a
15:23 - child of the div and so i can apply that
15:27 - same children concept to a span or
15:30 - whatever else that i want um and so just
15:33 - calling it children not worrying about
15:35 - the text content idea i kind of like
15:36 - that
15:38 - so that's what the children are gonna be
15:39 - so we got text content and then class
15:41 - name we actually have the same thing
15:43 - container
15:45 - whoops i just did something okay
15:51 - um
15:52 - there we go okay
15:56 - cool so
15:57 - now we have an element but this is not a
16:00 - dom element let's actually take a look
16:02 - really quick at
16:03 - uh right here you bump the font size up
16:06 - there
16:07 - dot create
16:09 - element div see what we get back okay
16:12 - um
16:13 - sometimes chrome tries to be helpful but
16:15 - it
16:16 - isn't entirely helpful console.log
16:19 - if
16:21 - there we go okay so if i expand that
16:24 - then i can see a whole bunch of
16:26 - properties here it's actually a
16:28 - created element is actually just a
16:31 - um a huge javascript object
16:35 - that has a lot of properties on it
16:37 - and lots of those things are associated
16:39 - with the dom specifically
16:40 - um the
16:42 - for our element that we're creating with
16:44 - react however if i log that element that
16:46 - we created with react i'll refresh i'm
16:50 - getting a message here talking about
16:51 - reactive tools and stuff
16:53 - um ignore that
16:55 - if i click on this this console log
16:59 - thing it's actually also an object it's
17:01 - not quite as big
17:03 - it has some like underscore properties
17:05 - which is basically react telling us hey
17:07 - don't touch these things this is like
17:09 - internal implementation stuff so here we
17:11 - have this type of thing that's just how
17:13 - react ensures that this is actually a
17:16 - react element and then we have this key
17:18 - thing we'll learn more about the key
17:20 - later when we're entering arrays right
17:22 - now it doesn't it's not really relevant
17:23 - and then we have this props thing and
17:25 - that's those things that we passed here
17:27 - it's the second argument as an object so
17:30 - that props object is um
17:32 - exactly what we provided
17:34 - and then we have a ref we'll learn more
17:36 - about that when we're talking about
17:37 - interacting with dom nodes and then a
17:40 - type that's that first argument so react
17:43 - element when you do react.createelement
17:46 - you're just creating a javascript object
17:49 - that represents a react element
17:51 - you can't render react elements to
17:54 - the dom
17:55 - with a root element of pen child you
17:58 - actually need to use react dom to do
18:00 - that and react dom will uh will pen the
18:02 - child for us and manage um
18:05 - keeping it up to date and stuff which
18:06 - we'll learn more about later
18:08 - so let's go ahead and do that we're
18:09 - going to do react dom which we're
18:12 - getting from this script
18:15 - and we're going to render
18:16 - our element
18:18 - to the root element
18:21 - and then if we save that refresh
18:24 - we get our hello world
18:27 - so uh just quick comparison you um
18:31 - actually it's just these
18:33 - lines that are different
18:36 - um
18:38 - yes thank you aj for that consulter that
18:41 - was i should have done that okay um so
18:43 - we have we're creating an element we're
18:45 - setting a couple properties on that
18:47 - element and then we're appending that to
18:48 - the document
18:50 - in react you create an element and you
18:53 - provide some of those properties and
18:54 - then you use react dom to render that to
18:57 - the document okay good so far hopefully
19:00 - i'm going to check for a couple
19:02 - questions oh i'm blocking the console
19:04 - with my video thank you for telling me
19:07 - let me move this around
19:10 - we'll put it over here
19:12 - or actually you know what maybe
19:15 - instead i'll just do just screen there
19:18 - you go you don't need to see my face
19:20 - um
19:21 - okay so let me just check on some of the
19:24 - questions if there's anything
19:26 - i am going to skip some repeat questions
19:28 - and things so if if somebody asks a
19:30 - question that has already been asked
19:32 - please do answer them because i'll be
19:33 - skipping things
19:35 - um
19:39 - okay
19:40 - yep no
19:42 - no question so let's move on then to our
19:45 - next step so um anybody who's actually
19:47 - used or seen react code before probably
19:50 - doesn't normally see react create
19:52 - element in the code
19:53 - and that's because most of the time
19:55 - we're using something called jsx
19:58 - because let's say we wanted to
20:01 - render
20:03 - as like an additional child another div
20:06 - so i'm going to
20:07 - create another element here we'll just
20:10 - say kant's child element
20:13 - and this one's going to be a span
20:17 - that says hello
20:18 - and it doesn't need a class name
20:21 - oh yeah
20:23 - and then we'll we'll do
20:25 - actually we'll call it this hello
20:26 - element
20:29 - and then we'll have a goodbye element
20:33 - okay
20:34 - cool so now um we want those to be the
20:37 - children here of this element so we can
20:40 - actually make children an array because
20:41 - they uh you can have multiple children
20:44 - and we'll have hello
20:46 - element and goodbye element
20:48 - and we'll save that refresh and now
20:50 - we're getting hello hello because i
20:52 - forgot to do
20:53 - um
20:54 - world this should not be goodbye element
20:56 - this should be world element
20:58 - okay
20:59 - if i refresh you'll notice there's no
21:01 - space there so let's add a space
21:03 - um as a child
21:06 - there we go
21:07 - well so this is like totally not fun um
21:11 - to create variables for all this stuff
21:12 - like clearly this is a hello element
21:14 - because it has a childhood element so i
21:16 - don't like i don't want to name that so
21:18 - let's go ahead and put that there in its
21:19 - place and we'll do this same thing for
21:22 - this world element
21:23 - and get rid of that
21:25 - and
21:26 - um now good okay cool we're we're all
21:28 - set here
21:30 - except like this is horrid who would
21:33 - ever want to write code like this
21:35 - not me and so this is why we have um
21:40 - and actually sorry i have seen some
21:41 - people um who don't like jsx some people
21:44 - will do something like this they'll say
21:47 - um
21:48 - like they'll call it h i'm not sure why
21:49 - they call it h but react dot create
21:52 - element
21:53 - and then in all the places where you're
21:54 - using create element we'll do
21:56 - h i honestly don't feel like that's any
21:59 - better but i have seen people who don't
22:01 - like to use um react create element um
22:05 - use h instead
22:07 - kind of weird
22:08 - um
22:09 - and so yeah like let's let's make this a
22:12 - little bit easier and that's where jsx
22:14 - comes into play
22:17 - okay so somebody mentioned i'm going a
22:19 - little fast so i'm gonna slow down a
22:21 - little we're gonna go to exercise number
22:24 - two
22:26 - it's still
22:27 - in the intro
22:29 - and here i moved the react dom
22:33 - render down here and now we're just
22:35 - getting the element by id root here
22:38 - so we don't have to have any extra code
22:40 - that's
22:42 - irrelevant yeah at the top
22:44 - okay so
22:46 - jsx it's this really
22:48 - uh kind of neat thing let me give you a
22:51 - quick intro
22:52 - so oh actually i have a
22:54 - newsletter
22:56 - that you might appreciate just this
22:58 - week's article
23:00 - is about what we're going to talk about
23:02 - um so if i go what is jsx
23:06 - and we'll just go through some of these
23:07 - um
23:08 - examples here in just a second um but
23:10 - yeah you can subscribe to this every
23:12 - week i send out an article and then two
23:14 - weeks later that hits my blog
23:16 - um
23:17 - so let's go ahead and convert this to
23:20 - jsx wouldn't it be easier
23:22 - if we could
23:23 - make this be
23:26 - div
23:28 - and close that off
23:30 - and hello world
23:32 - and then class
23:34 - name is container and it looks like html
23:38 - right there's there's a little bit of
23:39 - difference right here we'll talk about
23:41 - that
23:41 - but uh yeah it's a lot easier and now we
23:43 - could actually add our span
23:46 - low
23:47 - fan and
23:48 - base and span again
23:51 - uh world
23:53 - right so it
23:54 - definitely looks a lot better than this
23:57 - but it is the
23:59 - basically the equivalent of what we had
24:01 - [Music]
24:03 - let me just format this a little bit
24:06 - prettier formatting isn't applying for
24:08 - some reason
24:10 - um so this is jsx we're we're in
24:12 - javascript we're in text javascript
24:14 - right um this like makes total sense
24:17 - inside of html
24:19 - but
24:20 - this isn't javascript syntax
24:23 - so this is what's called jsx and it is a
24:27 - shorthand for the react create element
24:29 - api
24:31 - uh for this to work let's we'll go ahead
24:33 - and comment this out
24:34 - if i go to zero three
24:38 - oh no we're on two that's right and i
24:40 - refresh here i'm gonna get a syntax
24:42 - error unexpected token less than okay so
24:45 - it's that token right there it's like
24:46 - wait what is going on here
24:49 - so
24:50 - the problem here is that because jsx is
24:53 - not actually javascript you need to
24:55 - convert it into
24:57 - the javascript version of the same api
25:00 - before the browser runs it and to do
25:02 - that we use a what's called a
25:06 - transpiler
25:07 - and a transpiler
25:10 - is able to make this conversion for us
25:12 - my transpiler of choice is babel you can
25:15 - also use typescript typescript will also
25:18 - transpile uh jsx code but i have babel
25:21 - loaded in here as as part of a script
25:23 - tag so i didn't mention this but i
25:25 - probably should
25:27 - don't do this in production
25:29 - it's a bad idea to do in production but
25:31 - it's great here because it makes it a
25:33 - lot more clear where the lines are
25:35 - between abstractions so babel is going
25:38 - to be responsible for taking all the
25:39 - code inside of this script tag and doing
25:43 - its translation magic to convert it to
25:46 - um
25:47 - actual javascript and then running that
25:50 - that converted version in the browser so
25:53 - to make that work we're going to change
25:55 - this from text javascript to text babel
25:58 - and now
26:00 - this babel script is going to look in
26:02 - the document for all instances of script
26:05 - where the type is text babel it'll take
26:06 - the contents of that run it through its
26:09 - magical transpilation to convert stuff
26:11 - like this
26:12 - into stuff like this
26:14 - and then um and then run that in the
26:16 - browser
26:17 - so if we save this and refresh
26:20 - we're going to
26:21 - get our hello world hooray
26:24 - um and we're also going to get this
26:25 - warning that says don't do this in
26:27 - production this is a bad idea
26:29 - um
26:32 - okay let's see
26:34 - um
26:36 - yeah so i'm not seeing any um any other
26:39 - relevant questions so i am going to just
26:42 - demo a couple of things for you that you
26:44 - might want to pull up yourself
26:46 - so let's go to oh actually sorry one
26:48 - second
26:49 - i just want to show you there's no smoke
26:52 - and mirrors going on here
26:53 - so
26:54 - um
26:56 - go here and look at the dom we're going
26:58 - to have that div classes container here
27:00 - we're calling it class name
27:03 - that's one of the differences between
27:05 - jsx and html
27:07 - and then we have a span and a span for
27:09 - hello and world okay so
27:11 - um all that same stuff
27:14 - in our actual
27:16 - um
27:18 - dom
27:19 - cool so um in my blog post that or my
27:22 - newsletter that i just sent out this
27:23 - last week uh which actually by the way
27:25 - if you subscribe you'll it'll send it
27:27 - out to you right now so you can get that
27:29 - in your inbox
27:30 - um but i give a couple examples i talk
27:32 - about this a little bit more
27:34 - how react create element just gives you
27:36 - an object um but i'm going to
27:38 - at the bottom here i link to
27:42 - um
27:43 - babel
27:44 - um online babel has a what's called a
27:47 - rebel that's um read evaluate uh print
27:50 - and
27:52 - i actually i don't know what it load i
27:54 - don't know i can't remember what that
27:55 - last one is
27:57 - um
27:58 - so here you can actually
28:00 - type out your um
28:02 - jsx stuff and on the right side you'll
28:04 - see what babel will turn that into
28:07 - so
28:09 - one thing i didn't actually mention to
28:10 - you
28:11 - that i probably should have is here with
28:14 - this children api
28:16 - you can actually clean this up a little
28:18 - um
28:19 - what we're looking at a little bit
28:21 - by
28:22 - using a convenience
28:26 - part of the api so
28:28 - the this middle um
28:31 - argument to react create element is the
28:34 - props that you pass so if i said class
28:37 - name
28:38 - i
28:38 - that's going to be
28:40 - that object right there any other
28:42 - arguments following that are considered
28:45 - children so if i do
28:47 - ban
28:48 - or we'll do hello
28:51 - ban
28:53 - and then another span of world
28:56 - then we're gonna see on the right side
28:59 - um we have the type we have the props
29:02 - and then the rest of the arguments to
29:04 - this react create element call are the
29:06 - children
29:08 - so that's neat so let's go ahead and um
29:12 - well i'm not i'm not going to waste your
29:13 - time and uh
29:15 - convert the old one just trust me that's
29:17 - how it works
29:19 - um
29:20 - so yeah let's go ahead and we'll just
29:21 - take this really quick copy this in here
29:26 - and that's
29:27 - yeah that's what we're gonna get i think
29:28 - that was basically the same
29:30 - um let's see some other really
29:33 - important things to know about jsx
29:36 - is like what if we wanted here we'll say
29:39 - this is our element
29:41 - and i'm going to do that pretty high
29:46 - um
29:47 - what if i wanted to take this container
29:49 - and extract that class name out to
29:51 - something else or maybe i want to
29:53 - make it a
29:55 - dynamic value so here we'll start with
29:58 - my class name
30:00 - container
30:02 - and then i can make this dynamic by
30:04 - doing an interpolation
30:06 - before i show you that actually i'm
30:07 - gonna um if you're familiar with uh
30:10 - template literals then you can have
30:12 - something like
30:13 - um
30:14 - yeah my html equals this template
30:17 - literal and we're gonna have
30:19 - um a
30:20 - div in this template literal and then
30:24 - this is actual html so we'll use class
30:26 - so this is not jsx it's just a real html
30:30 - so in a template literal you can do
30:32 - multilines you can do all kinds of
30:34 - things but if you want to stick a
30:36 - variable into that template literal what
30:38 - you're going to do
30:39 - is use this dollar sign and these curly
30:41 - braces
30:42 - and everything that ends up inside of
30:45 - those curly braces is what's called an
30:47 - interpolation so you can provide a
30:50 - javascript expression and whatever that
30:53 - expression evaluates to will get
30:55 - inserted into that spot in the string so
30:57 - i'm going to say my class
30:59 - name
31:01 - and
31:02 - here if we
31:03 - also log my html
31:06 - um
31:07 - let's see if that happens yeah tada
31:11 - fancy stuff right
31:12 - so um anything goes in in these
31:15 - interpolations i can do plus one i could
31:18 - even do
31:20 - like regular arithmetic
31:22 - so now that class is three um and then i
31:25 - can do like
31:27 - really weird stuff too so i could
31:30 - do an immediately invoked function
31:32 - expression
31:33 - uh using an arrow function
31:35 - um and this could be
31:36 - like return
31:38 - i
31:39 - and if we pop open the console here
31:41 - we're going to get classes high so you
31:43 - can anything that is a javascript
31:45 - expression
31:47 - can go inside of these curly braces okay
31:50 - so that is template literals jsx is
31:53 - actually really similar
31:55 - in that um if you wanted to make a part
31:58 - of it dynamic
32:00 - then you turn
32:02 - use an interpolation and instead of a
32:04 - dollar and curly braces you just use
32:07 - curly braces and now you're in
32:08 - interpolation zone and so we can say my
32:11 - class
32:12 - name
32:13 - and it will be interpolated
32:15 - and the value of my class name will be
32:17 - assigned to the class name prop which as
32:20 - you can see on the right here
32:23 - we have my classname variable
32:25 - and classname the prop is getting
32:27 - assigned to my class name
32:30 - so here we're creating an element its
32:31 - type is div and it has these props
32:34 - and before it was let's look at that
32:37 - again container
32:39 - the class name is just just the string
32:42 - now we're doing an interpolation
32:45 - of my class name
32:50 - and it's just the the value of the
32:51 - variable so it's actually not doing a
32:53 - whole lot of magic things it's just
32:55 - whatever goes inside of these curly
32:57 - braces
32:58 - is what's going to be assigned to the
33:00 - value of that prompt okay so i'm going
33:02 - to jump over here really quick to check
33:04 - out um
33:06 - if there are any questions that are
33:09 - of relevance to everybody
33:20 - okay yeah so somebody asked the question
33:23 - env or stage two for babel or both in
33:25 - regards to import statements um we i can
33:28 - actually turn that off
33:29 - um
33:30 - yeah
33:31 - use env
33:33 - definitely use env
33:35 - um i don't have it enabled right now i
33:36 - just have react enabled because i don't
33:38 - want to
33:39 - transpile more than i need to
33:41 - um
33:43 - oh my dog just walked up i gotta close
33:45 - this otherwise she'll start howling at
33:46 - me
33:50 - i have a uh
33:52 - walk-out basement so the window is like
33:54 - at ground level with the dog
33:57 - okay
33:58 - um
33:59 - let's see uh any other questions can i
34:01 - explain things in slightly greater
34:04 - detail
34:05 - if i'm
34:07 - um
34:08 - if you could ask more specific questions
34:10 - then
34:11 - uh maybe
34:13 - am i going to talk about class based
34:15 - versus functional components or function
34:17 - components yes
34:19 - time is slipping away very fast but i
34:21 - will
34:22 - um i will probably get to that
34:25 - okay
34:26 - so that's that's jsx i don't think we
34:28 - need to spend any more time there other
34:30 - than to say you can use it for
34:32 - attributes you can use it for
34:35 - values within
34:37 - the like the children
34:39 - area of the
34:42 - jsx
34:43 - here i added a space and you'll see
34:45 - actually if i
34:46 - go back and forth look on the right side
34:48 - here
34:50 - um
34:51 - so i have an interpolation and then a
34:52 - space or anything
34:55 - and that will get added as this
34:57 - additional argument so more children
35:00 - okay cool
35:02 - um so that i i think that's like
35:05 - really really important to uh to
35:08 - uh grab is interpolations and javascript
35:11 - expressions if you can figure that out
35:13 - and and learn more about what a
35:16 - javascript expression is
35:18 - then you can really nail
35:21 - jsx and you can come up with new
35:22 - patterns and and good ways to interact
35:24 - with your
35:25 - react stuff
35:28 - okay cool let me just check out
35:30 - something here really quick make sure
35:32 - i'm not missing anything yeah okay
35:34 - so wouldn't it be cool
35:36 - um if we
35:38 - could have like let's say we wanted to
35:40 - do
35:40 - um two of these hello world and goodbye
35:45 - world
35:46 - and
35:47 - um we wanted each one of these to
35:50 - be inside of a div by themselves
35:53 - [Music]
35:56 - and both of these we want to have the
35:59 - class name of message
36:02 - okay
36:04 - right that's that's pretty cool we can
36:06 - um we can do that the thing i don't like
36:08 - about this is the repetition and
36:10 - especially like as your application gets
36:12 - bigger and things eventually you're
36:14 - going to get to the point where the um
36:17 - you
36:18 - want to make some sort of abstraction
36:21 - so if we think about this from a like
36:24 - react create element standpoint then it
36:27 - might actually make a little bit more
36:28 - sense so what i'm going to do is i'm
36:29 - going to comment this out really quick
36:32 - and man why is the formatting not
36:34 - working
36:36 - yeah i need to set up vs code to format
36:39 - my html i guess i don't know
36:41 - i used to use atom and it worked great
36:44 - um okay so these things look very
36:46 - similar so in javascript
36:49 - like
36:50 - the way we abstract things is by making
36:52 - functions so i'm going to make a const
36:55 - message function
36:57 - and that's just going to be an arrow
36:58 - function implicit return here and it'll
37:00 - implicitly return react to create
37:02 - element
37:03 - okay so with that
37:06 - i want to be able to take what the
37:08 - message should be so i'm going to call
37:10 - this
37:11 - i'm going to make it take an object um
37:13 - just for our
37:15 - purposes here and
37:17 - let's see we'll stick with the um or
37:19 - actually yeah we'll just
37:21 - do msg or the message
37:25 - and then instead of hello world as a
37:27 - hard-coded string in this function we'll
37:29 - just do ms
37:30 - cool so now i can
37:34 - change both of these to a function
37:36 - function call into message
37:39 - okay so if i refresh
37:41 - um
37:43 - stuff is busted what
37:47 - am i in the right file yeah
37:53 - ooh
37:55 - message message oh right ah
37:59 - you were supposed to correct me
38:02 - i was testing you no just kidding i
38:04 - messed up
38:05 - so we're passing an object right i'm
38:06 - just structuring that
38:09 - okay there we go
38:11 - so i'm um creating an object i
38:14 - destructure that object to pull out the
38:15 - message property and then i pass that
38:17 - message property along to
38:19 - this
38:21 - uh function call of create element as
38:23 - the child
38:24 - cool okay so
38:26 - how do we do this same kind of thing in
38:28 - jsx well let's uncomment this again
38:32 - and we'll move this up here so we can
38:34 - use it
38:35 - and
38:36 - we're going to take this message and
38:38 - remember any javascript expression a
38:40 - function call is a javascript expression
38:42 - so i can do this
38:44 - and i can do
38:47 - this
38:48 - okay so as long as i'm in interpolation
38:51 - mode
38:52 - um i'm in jsx here jsx jsx boom
38:55 - interpolation now i can do javascript
38:57 - stuff all the way until the matching
39:00 - curly brace and now boom i'm in jsx
39:04 - um here look
39:06 - hello world jsx
39:08 - oh uh busted
39:10 - here we go wait
39:12 - what my editor is kind of confused there
39:15 - we go
39:17 - okay hello world jsx goodbye world
39:20 - right okay but this is not
39:22 - like this is cool i've been able to
39:23 - abstract things away um make
39:26 - this thing reusable
39:28 - but it's not a super great way to
39:30 - compose things together like let's say
39:33 - for the message
39:34 - i wanted to
39:36 - um i don't know here let's
39:38 - well it'd be more confusing but what if
39:40 - i wanted to make a message a child of a
39:43 - message here like i wouldn't really be
39:45 - able to do that and it doesn't look very
39:48 - jsxy
39:50 - um so let's change this a little bit
39:53 - remember this react create element api
39:56 - it takes a string that's a div it
39:58 - actually also can take something else
40:01 - what if we could do i'm going to log
40:03 - this react dot create element
40:06 - message
40:07 - i want to create an element that is of
40:10 - type message let's count to log that
40:12 - and
40:14 - pull up my
40:15 - thing here i'm going to get an object
40:17 - i'm going to get the type is a function
40:19 - now if you recall
40:21 - we'll do
40:21 - a div here
40:25 - the div is just type is this string and
40:27 - then here our type is this function
40:29 - and it's that
40:31 - um message function right here
40:34 - okay so i've created an element that is
40:36 - of type message um can i pass it some
40:39 - props
40:40 - yeah probably as a second argument right
40:42 - that's props msg
40:45 - hello world
40:48 - we'll refresh that and now if i look
40:49 - here props okay message hello world okay
40:52 - yeah cool so what would happen
40:55 - if i put that react element in here
40:57 - instead
40:59 - and i refresh
41:00 - oh look it actually still works because
41:03 - what i'm rendering now
41:05 - what i'm interpolating
41:07 - is now not just
41:08 - um well i'm actually just kind of moving
41:12 - where things are happening so i'm
41:14 - creating an element that actually
41:16 - creates an element itself
41:19 - and i'm um and then i'm rendering that
41:22 - created element so it would be the same
41:24 - as if i were to say
41:25 - const um good
41:28 - or other
41:29 - message
41:30 - is a div
41:31 - hi there div and then i can interpolate
41:35 - that in here so i'm doing the exact same
41:37 - thing
41:38 - um so let's actually
41:41 - do this
41:43 - with hello world
41:45 - we're gonna create elements
41:49 - okay
41:50 - so that should work
41:52 - um
41:53 - but remember how with the react create
41:55 - element of div
41:57 - i was able to convert that into this jsx
42:00 - thing which i kind of really like that
42:02 - i want to be able to use that and so
42:05 - huh
42:06 - what if
42:08 - i just did
42:10 - like message
42:12 - and then
42:14 - this needs to be a prop so msg
42:17 - hello world
42:18 - maybe that works try that
42:20 - refresh oh that's not gonna work i'm
42:23 - getting a warning
42:24 - message is unrecognized in this browser
42:28 - well
42:29 - here if we look actually we can see our
42:31 - message is getting rendered
42:33 - so the react folks the people who are
42:34 - making this jsx thing they're like okay
42:37 - how do we solve this problem we want to
42:40 - give the same kind of experience with
42:42 - these custom functions
42:44 - of creating react elements i want to
42:46 - give that same kind of experience to
42:48 - that we have for creating um divs
42:52 - and being able to convert that to jsx
42:55 - so how do we do that well what if we
42:58 - tell the remember all of this is getting
43:01 - converted into these react create
43:04 - element apis using babel
43:06 - it's transpiling them
43:08 - so what if
43:10 - we just tell babel that anytime
43:13 - something is capitalized
43:16 - leave it alone
43:19 - and transpile it to
43:21 - just what it was before
43:23 - so if we capitalize this function
43:25 - and then use that capitalized version
43:28 - we'll use the capitalized version in our
43:30 - function call there
43:32 - and
43:35 - that
43:37 - good work
43:39 - except time that's a logging up okay
43:43 - cool okay so we're doing this create
43:46 - element of that capital message
43:48 - rendering that out and in jsx land
43:52 - we can use the capital version
43:54 - okay
43:55 - cool so let's go ahead and
43:57 - just see this in action over here
44:00 - if i put message right there
44:03 - so it transpiles that into react create
44:06 - element message with our props our props
44:09 - can be anything they don't have to be
44:11 - html things and in the case of custom
44:15 - react components like what we've created
44:18 - here custom functions
44:20 - it's just actually arguments that our
44:22 - function is getting past
44:25 - and then they can do whatever they want
44:27 - with those arguments so we're not
44:28 - forwarding that on as props to or
44:31 - attributes to our
44:33 - div tag
44:34 - we're forwarding on something else
44:35 - entirely and we're just using that as
44:38 - the uh children the
44:40 - additional arguments
44:42 - and what's cool about this is um now i
44:45 - can
44:46 - have a
44:47 - much better composability model so what
44:50 - if we
44:50 - re
44:51 - rename this
44:53 - message
44:55 - to children
44:57 - now
44:58 - we can take this hello world and
45:00 - remember this is this is the children
45:02 - prop right between here that's um that's
45:05 - what gets accepted as the children prop
45:07 - so i take that children
45:09 - and i
45:11 - remove that um
45:13 - and switch it over to children here
45:16 - ask children as a prop
45:19 - and now i can say
45:21 - let's switch this over
45:23 - really quick
45:25 - sorry
45:26 - here we'll just do this
45:30 - okay
45:32 - cool
45:34 - so i have this really nice looking
45:37 - it's almost like html but it's not quite
45:39 - html
45:40 - and what's cool about this is now i can
45:42 - put things or i can nest things just
45:44 - like i would in normal html so i know
45:46 - i've got a message and a message
45:48 - we can see that evidenced here we have
45:51 - this message in a message
45:53 - and i have this really really nice
45:55 - composability model where i can
45:58 - create custom components custom
46:01 - functions
46:02 - that return more jsx and react can
46:05 - create elements out of those
46:07 - and it will continue down the chain
46:09 - until it finds all of the elements that
46:11 - are
46:13 - of type div
46:14 - or type span or actual dom elements
46:18 - these lowercase elements let's actually
46:20 - rewrite this really quick to just be jsx
46:23 - the more typical
46:25 - standard here so we're gonna do a div
46:28 - and class name is going to equal message
46:30 - and then um
46:32 - children is children
46:36 - that's a prop right
46:37 - self-closing tag that's one handy thing
46:40 - with jsx is you don't need to actually
46:42 - close divs if you don't have any
46:43 - children that you're putting in between
46:45 - it opening and closing you just
46:46 - self-close it
46:48 - okay so that's working
46:50 - but i kind of don't like the children
46:52 - prop when i'm using jsx
46:55 - so i'll just do
46:56 - [Music]
46:58 - do this
46:59 - now i do have a self-closing tag or
47:01 - non-self-closing i have a closing tag
47:04 - cool and that works
47:06 - and so now uh things look a fair amount
47:08 - more um
47:11 - palatable
47:12 - it's it's easier to reuse this stuff let
47:14 - me just put this on oops
47:17 - new line there
47:19 - um
47:20 - and i can create all the custom
47:22 - components that you could imagine so to
47:24 - create a custom component in react
47:27 - you make a function
47:30 - and it's called whatever you want so
47:33 - my component that was really boring
47:37 - and then it accepts props
47:39 - and those props are whatever passed
47:42 - my component
47:44 - as
47:45 - prompt one
47:47 - hi
47:48 - and prop two is
47:50 - true drop 3 is
47:54 - 34 and whatever else
47:57 - prop
47:58 - 4 is
47:59 - a function
48:01 - to be anything
48:03 - and then
48:04 - in here we can use those props and
48:06 - return more jsx turn
48:10 - div i
48:11 - we don't have to use the props um we
48:14 - just get them and we render more jsx
48:17 - that more jsx can actually be
48:22 - yet another component and it's
48:24 - components all the way down
48:27 - cool so it's been a little bit i'm going
48:28 - to check on the questions we've only got
48:30 - like 10 minutes left
48:32 - which is unfortunate um
48:35 - but uh this is like
48:37 - paramountly important for you to be
48:39 - successful using react
48:41 - um or
48:43 - most efficient using react and so
48:45 - that's why i include it okay let's see
48:49 - a couple of questions
49:00 - so am i explaining what's happening
49:01 - under the hood or does this really react
49:03 - so um
49:06 - yeah so like
49:07 - this isn't typical react um
49:10 - like in an application you will not see
49:12 - react written this way
49:14 - um we're starting to get to more typical
49:16 - react with the jsx stuff um but yeah
49:19 - mostly i'm just trying to explain how
49:22 - um
49:23 - this jsx stuff works and javascript
49:25 - expressions because it's really really
49:27 - important to being successful and and
49:29 - understanding what's going on with the
49:31 - future stuff
49:33 - okay cool so um i'm just gonna show you
49:36 - a couple of things because we were
49:37 - limited on time um and then i'm i'll go
49:40 - through a couple of exercises probably
49:43 - so when um
49:45 - you want to like spend more time in
49:47 - these exercises just a couple of things
49:50 - um i have a
49:52 - another process over here that's running
49:54 - npm start so you're on npm start hit
49:58 - enter in your terminal and it'll pop
50:00 - open an app that looks like this
50:03 - and in here you'll have um
50:06 - the exercise version and the final
50:08 - version
50:09 - and for each one of these exercises that
50:12 - we have
50:13 - kind of fun stuff
50:17 - so
50:18 - um the yeah so that's that's the actual
50:20 - app
50:22 - you can also do this in um in code
50:24 - sandbox the app works there too we also
50:27 - have some tests so oops
50:30 - that
50:31 - so if you run npm t to run the test or
50:34 - npm run test or npm test all three of
50:36 - those things will work then it'll start
50:38 - jest in watch mode and just watch mode
50:40 - is awesome
50:41 - if you hit the p key you can filter by
50:44 - file name regex pattern so we'll do zero
50:46 - one or actually here let's see which one
50:48 - do we want to do
50:50 - we're gonna
50:51 - um
50:55 - oh i've got that label drawn
50:57 - um
51:01 - we'll probably do this one
51:02 - actually you know what with the last 10
51:04 - minutes i'll do
51:07 - i'll do this one you'll see a bunch of
51:09 - stuff that you hadn't seen um but
51:10 - hopefully it'll give your mind the idea
51:13 - of what you want to or what's possible
51:16 - um so yeah we're going to be doing
51:17 - number five
51:18 - and so that will just filter down to the
51:20 - tests
51:21 - that are
51:23 - that match that pattern which is just
51:25 - the zero five exercise
51:27 - and then if we go to
51:29 - our test directory zero five we can
51:32 - comment out exercise final comment in
51:34 - exercise zero five
51:37 - and it will start failing and it'll tell
51:39 - you what's going on um and you're
51:41 - supposed to
51:42 - supposed to do some stuff
51:44 - um to make things
51:46 - things work so let's go ahead
51:48 - and um
51:50 - jump into number five
51:53 - on the exercises thing
51:55 - and i'll work through this and that
51:56 - that'll be the end of our
51:58 - doodad
52:00 - uh for today
52:01 - so here let me jump over to five or
52:04 - actually the url just zero five
52:07 - so this is the final version of what
52:08 - we're going to build
52:09 - jumping around a bit
52:13 - yikes
52:14 - there we go
52:16 - cool so then we stop start stop clear
52:19 - start clear so that's what it's um what
52:22 - we're going to build here
52:24 - uh with react
52:27 - um let me actually just jump over here
52:29 - really quick make sure i don't mess up
52:32 - really bad
52:37 - okay
52:38 - cool so to get us started i'm actually
52:40 - going to just show the
52:44 - isolated example of exercise
52:48 - so that we can
52:49 - be focused
52:51 - okay
52:52 - so the first thing that i get that i
52:54 - like to do when i'm creating a component
52:56 - oh sorry take a step back because we
52:58 - kind of skipped over a couple of things
53:00 - so you know how i made a function
53:02 - message that takes some props and then
53:04 - you can return some jsx from that
53:06 - so you can actually
53:08 - use a class as well javascript class and
53:11 - the only stipulation is that the class
53:13 - has to extend
53:14 - react.component
53:16 - and with that
53:18 - and like some of this stuff will be new
53:21 - to you and i don't have time to explain
53:22 - it all because we just have like five
53:24 - minutes left
53:25 - um but uh
53:26 - yeah so here we're creating a
53:29 - property that will be added to every
53:31 - instance of the stopwatch class that we
53:33 - instantiate and that property is called
53:36 - state and this is the initial value when
53:38 - that is constructed
53:40 - and so
53:42 - um yeah we're gonna start with a lapse
53:44 - of zero and it's not running so that's
53:47 - our initial initial state there
53:50 - and then we're gonna do a bunch of
53:51 - things here
53:52 - um that's cody the qual bear helping us
53:54 - out
53:56 - and then we're going to
53:58 - we every react class has a render method
54:01 - so if you're if you're using a function
54:03 - that function is the render method so
54:05 - that message function its render method
54:08 - is something that returns more jsx more
54:10 - react elements
54:12 - so here we're creating a
54:14 - class that has a render method and that
54:16 - render method is responsible for
54:17 - returning the jsx
54:19 - so that's what we're going to do here
54:21 - i'm going to create a div
54:23 - we'll get rid of this thing
54:24 - and we'll return
54:27 - that div
54:28 - let's render our label
54:30 - so our label is going to say
54:33 - the elapsed time
54:35 - and here inside of this render we have
54:38 - access to this dot state
54:40 - and this dot state has a property on it
54:43 - called lapse
54:44 - so that's what we want to render
54:47 - we'll say
54:49 - and actually this is interpolation right
54:52 - here
54:53 - lapse we're interpolating the elapsed
54:55 - variable into there
54:56 - and then ms for milliseconds
54:59 - and we save that and we're going to see
55:02 - zero milliseconds awesome we're going to
55:05 - have two buttons one that says clear and
55:07 - then this one that says running
55:10 - or it says stop if it's running and
55:12 - start if it's not running so let's pull
55:14 - out the running state
55:18 - and here we'll say
55:20 - if it's running
55:22 - you're going to see a lot of ternaries
55:24 - in jsx because a ternary is an
55:26 - expression
55:28 - you can't do like an if statement inside
55:30 - of the jsx if you want to do that you
55:32 - can do that up here but i like that and
55:35 - then you can make like a
55:36 - let
55:38 - element equal
55:40 - or whatever and then if and then set the
55:42 - element and then render the element
55:44 - but i like to just inline it so we'll
55:46 - use a ternary so if we're running
55:49 - then we're going to say stop otherwise
55:51 - we'll say start
55:53 - and save that and now
55:57 - do we have start and clear let's go
56:00 - ahead and add a couple styles so i did i
56:02 - skipped over this but um in
56:06 - in react and with jsx you can use the
56:10 - style prop but
56:13 - the way that it or or the style
56:14 - attribute like in regular html you have
56:16 - a style attribute you can have a string
56:18 - of css but that string of css doesn't
56:21 - compose very well um so you can't like
56:24 - you can concatenate strings of css but
56:27 - like how do you um
56:29 - reliably override things and and
56:33 - stuff like that it's just like a little
56:35 - bit harder and so um
56:37 - in jsx they decided hey let's have it
56:40 - accept an object of things that look
56:42 - like css and so that's what these things
56:44 - are you can look back at the exercise
56:46 - for styling
56:47 - to see more about that but here we have
56:49 - button styles and label styles so let's
56:51 - apply those
56:53 - so style equals that object
56:57 - and like really often you'll see that in
57:00 - lines like border
57:02 - border
57:03 - none stuff like that
57:05 - but we have this as a variable
57:07 - so we'll just interpolate that variable
57:11 - and we'll have button styles for both of
57:12 - those and then style is
57:15 - label
57:16 - io
57:18 - files with an s
57:20 - and
57:21 - refresh
57:23 - it looks all nice
57:24 - css is pretty cool
57:27 - okay
57:28 - so
57:29 - let's go ahead and make this interactive
57:30 - so we skipped over the event handling
57:32 - stuff um but uh we want to add a quick
57:36 - handler onto this button
57:38 - unfortunately um
57:40 - in like regular javascript and like with
57:43 - jquery and stuff you have to say okay
57:46 - find me that button node and i'm add
57:47 - event listener onto it and
57:50 - now i have a javascript callback that
57:52 - responds whenever that listener
57:54 - happens
57:55 - in react it's a lot more direct a lot
57:58 - more straightforward what's going on we
58:00 - simply have it on click
58:03 - and this on click we're going to assign
58:05 - it to a um a instance uh variable we're
58:10 - going to call
58:12 - handle run click
58:15 - and um
58:16 - we'll just make that one work for now
58:18 - actually you know what let's
58:20 - um let's
58:21 - do the easier one first so we'll have on
58:24 - click
58:25 - and this will be this dot handle clear
58:28 - click
58:31 - and you know what all these comments are
58:33 - just distracting me oh
58:35 - i'm getting get rid of all this stuff
58:37 - see it's not all that bad
58:39 - so um we need this handle clear click to
58:41 - be an instance method
58:45 - and um
58:46 - it's just gonna be an arrow function so
58:48 - it can
58:49 - make use of the lexical this and i
58:51 - actually just today talked about this in
58:54 - um
58:56 - tips
58:57 - i have daily videos that i
58:59 - put out during the weekday
59:02 - that are just little tips and stuff
59:04 - today was how does this work in
59:06 - javascript so you can learn more about
59:08 - the reason that i'm doing this arrow
59:10 - function thing
59:11 - um so go check that out
59:14 - yeah how does this work in javascript
59:17 - um yeah don't google that uh kcd because
59:21 - you'll find a million things youtube and
59:23 - then you can find mine out there
59:26 - okay so handle clear click
59:28 - um here we need to update the running
59:31 - state
59:32 - so that it's no longer running i'm going
59:34 - to initialize it to true so we can
59:36 - see this handle clear click actually
59:38 - working
59:39 - and we'll start out here with alert
59:42 - hi just to make sure that things are
59:43 - wired up properly so when i click on a
59:45 - handle clear click it's gonna or sorry
59:47 - when i click on the clear button it's
59:49 - gonna call my handle click callback and
59:51 - that should alert so i click
59:54 - hi
59:55 - and we know we're in a running state
59:57 - because stop is showing and so now we
60:00 - need to change that state we need to
60:02 - tell react hey listen i know that the
60:04 - state is running true but i'd like to
60:06 - change it to running false if that's
60:07 - cool with you and so we'll say this
60:10 - dot set state
60:12 - now where's the set state method coming
60:14 - from i don't see it in here
60:16 - coming from react component we're
60:18 - extending react component grant
60:20 - component provides this dot set state
60:22 - and here we can say
60:24 - running is false
60:26 - and it's not going to change the value
60:28 - of our lapse it does a shallow merge of
60:31 - our properties so we don't have to say
60:33 - um like merge this dot state or whoops
60:37 - you do that on the other side we did
60:39 - um
60:40 - because react will actually do that for
60:42 - us and so we just provide the state
60:45 - um the first level of the object the
60:48 - properties that we want changed
60:50 - um so cool let's we'll save that this
60:52 - gets refreshed and i click on clear and
60:55 - you'll see the stop turns to start
60:57 - cool so the query button is working
61:00 - let's make the
61:02 - unclick
61:04 - this dot handle
61:06 - start or
61:07 - run click
61:09 - that one's tricky because it's also it's
61:11 - start and it's stop um but that's what
61:13 - we're going to call it so we're going to
61:15 - do the same thing here just going to be
61:17 - an arrow function
61:19 - and
61:20 - i need to determine i need to set some
61:22 - state i need to make some changes to
61:24 - state i need to say that it's
61:26 - it's running now
61:28 - or it's not running now and
61:30 - i need to know what the current value of
61:32 - state is
61:34 - and so i can say this dot state dot
61:36 - running and i can know okay if it's
61:39 - running then
61:40 - i want to change it to running false
61:42 - otherwise running true whatever
61:44 - and then like i need to start a timer
61:46 - somewhere
61:47 - um but for reasons that i don't have
61:49 - time to get into
61:50 - if um
61:52 - react actually well i have some time to
61:54 - get into it watch this
61:56 - okay so if i wanted to
61:59 - um
62:00 - instead of
62:01 - this.false i wanted to call setstate a
62:04 - bunch of times and maybe it wouldn't all
62:06 - be right here in the same function it'd
62:07 - be
62:09 - part of the code path like this calls
62:10 - another function which calls set state
62:12 - and that calls another one and whatever
62:14 - and let's say that i was using not this
62:16 - dot
62:17 - state dot
62:18 - running okay so um i'm saying okay set
62:22 - state running is the opposite of what it
62:25 - the current state is then i'm going to
62:26 - toggle it back and toggle it back and
62:28 - toggle it back so we're
62:30 - bumping back and forth between running
62:31 - and not running
62:32 - um if i
62:34 - save that
62:38 - then presumably we're we're in a running
62:40 - true state so this should now say
62:42 - running false running true writing false
62:45 - running true
62:47 - okay bye click on
62:49 - clear
62:50 - oh actually i need to be an odd number
62:53 - to show the problem sorry
62:56 - i click
62:59 - did i mess something up
63:03 - all right yeah no so it's going to
63:05 - toggle every single time so um
63:08 - what's happening here is the set state
63:12 - method is actually
63:14 - batched and so it doesn't run
63:16 - synchronously so here maybe a better way
63:18 - to illustrate this is this dot state dot
63:21 - running
63:22 - and i'll console log that between every
63:24 - single one of these
63:26 - here we'll do another one at the
63:27 - beginning
63:30 - i pop open the dev tools
63:34 - and if i click on clear
63:36 - i'm going to get true every single time
63:37 - even though i'm calling set state each
63:39 - one of these times
63:40 - i'm getting um
63:43 - through every time and so setstate is um
63:46 - it's run in a batch and the reason for
63:49 - that is um
63:51 - it like we don't want to render like a
63:53 - million times to our user um like it's
63:56 - kind of nonsensical to do this like i
63:58 - could just store up a variable and then
63:59 - set state once but react doesn't want to
64:01 - make you have to think about that or
64:03 - worry about that worry about performance
64:05 - this is one thing that react does for
64:07 - performance
64:08 - um so it waits until all of your set
64:11 - state calls have run
64:12 - and then it flushes
64:14 - the state to determine what the actual
64:15 - state should be
64:17 - so anyway that whole long thing that i
64:19 - just went through
64:20 - all just to say
64:23 - that here when we do handle run quick if
64:25 - i want to get this dot state
64:27 - running
64:29 - then
64:30 - and i'm going to be updating state we're
64:32 - going to do anything else
64:35 - then i need to say hey react what is the
64:37 - state of running at this time in our
64:39 - batch run
64:40 - so i'm going to say this dot set state
64:43 - and we're going to use a function
64:46 - and so then if i call this over and over
64:48 - and over again it's going to
64:50 - react can run this one and then this one
64:52 - and each time it's going to give me the
64:54 - state
64:56 - and it'll give me an opportunity to
64:58 - return what i want for this the new
65:00 - state to be based off of the current
65:02 - state in our current batch run
65:05 - okay
65:06 - so that may be a little bit heavy and
65:08 - i'm sorry about that that i didn't um
65:11 - have quite as much time to to get deeper
65:13 - into that but just if you don't like
65:15 - complicated rules of like should i use
65:17 - an object or should i use a function
65:20 - then just always use a function and you
65:22 - don't have to accept any arguments uh so
65:24 - we could actually refactor this and this
65:26 - is probably what i should have done and
65:27 - not gotten into all this stuff but
65:29 - um
65:32 - so
65:32 - that is totally cool
65:35 - to do things out this way if you if you
65:37 - want to just always use a function
65:39 - i have no qualms with that
65:42 - okay cool so um here we're going to get
65:45 - our state
65:46 - and we can say if state.running
65:50 - and we're going to do something
65:51 - otherwise we're going to do something
65:52 - else
65:54 - and
65:55 - in either case we're going to return
65:58 - date
65:59 - dot
66:00 - or actually we're going to we're going
66:01 - to toggle the running state right so
66:03 - we're going to say running
66:05 - is
66:05 - [Music]
66:07 - opposite of state dot running
66:10 - okay
66:11 - cool so we're not actually doing
66:13 - actually running any of these
66:17 - like a timer yet or anything updating
66:19 - that lapse value but we can stop and uh
66:22 - start and clear and stop start and stop
66:24 - start and clear
66:26 - so all of that is working our running
66:28 - state is being updated properly um so
66:30 - we're we're gold in there
66:32 - so what we need to do now
66:34 - is if state dot running
66:37 - um then we need to set
66:40 - an interval
66:44 - and um let's see
66:46 - so every
66:48 - like as soon as possible that's the
66:51 - default is zero so as soon as possible i
66:54 - want to update the laps so i need to
66:56 - know what the current the start time is
66:58 - so we'll say start time equals date
67:02 - dot now
67:04 - and
67:05 - now i can get what the lapse is with
67:08 - um
67:09 - let's see
67:10 - or we'll we'll just say this dot set
67:13 - state lapse
67:15 - we don't need to know what the previous
67:16 - last was so we can just use an object
67:18 - here
67:19 - um and i'll say start time
67:22 - or sorry date dot now
67:25 - minus the start time
67:28 - okay
67:29 - cool
67:30 - so let's see what happens when i do that
67:35 - and i actually put that in the wrong
67:36 - spot
67:39 - that should be there but anyway so
67:41 - that's working cool isn't that okay so
67:44 - listen
67:45 - every single time that number is
67:47 - changing that's that's happening as fast
67:49 - as possible as fast as this set interval
67:51 - is running
67:52 - and it's running all of this stuff doing
67:54 - react create element for the div and the
67:57 - label and the button it's running all of
67:59 - that over and over and over again as
68:01 - fast as the browser could possibly go
68:03 - it's kind of nuts i think that's pretty
68:04 - cool i love doing this exercise because
68:06 - i like to see that
68:08 - but now we have no way to stop this so i
68:11 - hit clear and running is uh now false
68:14 - but this keeps on going and that's
68:16 - happening because inside the set
68:18 - interval we're calling this dot set
68:19 - state on lapse over and over and over
68:21 - again
68:22 - we need to clear this interval what i'm
68:25 - going to do is i'm going to set a
68:26 - property this dot interval
68:30 - and inside of this handle clear click
68:32 - i'm going to say clear interval
68:34 - this dot interval
68:38 - and so with that i can now
68:41 - refresh
68:43 - start and then clear
68:45 - and it stops
68:47 - it doesn't change the um
68:50 - the laps though so let's have that
68:52 - set state
68:53 - change the lapse to zero
68:58 - and i'm gonna initialize this to false
69:00 - now because that makes more sense
69:04 - and so i start it and then i clear it
69:07 - start it and then i stop it well
69:09 - stopping doesn't work yet so let's make
69:11 - stop work
69:12 - so here um if it is running then we're
69:15 - going to stop it so i'll say clear
69:17 - interval
69:19 - your interval
69:21 - this dot interval
69:24 - okay and then
69:25 - um
69:27 - yeah that's actually it um for that so i
69:30 - can now
69:31 - start
69:32 - and i don't want to
69:35 - set it to zero milliseconds anymore
69:38 - um but when i hit start again it's going
69:40 - to start over
69:41 - i don't want it to start over so what
69:43 - we're going to do is i'm going to move
69:44 - this start time to up here
69:52 - oh actually no that doesn't work hold on
69:53 - how did i solve that
69:56 - sorry i'm cheating
70:00 - what
70:05 - oh right
70:06 - you know what
70:08 - all that stuff that i said uh rats
70:14 - oh i know what i'm doing okay sorry let
70:15 - me just copy this over because i don't
70:16 - want to waste your time
70:18 - uh and i'll explain things
70:21 - [Music]
70:24 - okay
70:25 - so magic happens so here we're saying um
70:29 - if the state is running then we're going
70:30 - to just clear the interval otherwise
70:31 - we're going to do this set interval and
70:34 - then here when we're calling set state
70:37 - to swap the running state we're using
70:39 - the state updater function to be
70:41 - perfectly honest like in this situation
70:44 - using state updater functions versus
70:45 - using just regular objects it's really
70:48 - not that huge of a deal so i would like
70:50 - encourage you not to get dogmatic about
70:52 - this but
70:53 - it is just a good general practice to
70:56 - avoid surprising bugs by using a state
70:59 - updater if you need to reference the
71:00 - state that's all i'm going to say about
71:02 - that so
71:03 - here though we are determining what to
71:06 - do based off of the state whether to
71:08 - even set state
71:10 - or start this interval and so in this
71:12 - situation it is totally
71:14 - like it's actually better uh to use
71:16 - this.
71:18 - okay cool and so then when we set our
71:21 - interval we get our start time
71:23 - and
71:24 - um
71:25 - yeah so let's did i save that no i don't
71:27 - think i did
71:28 - we'll save that and
71:31 - start and stop and start again and stop
71:34 - again
71:35 - stop
71:36 - yeah so this is actually the magic that
71:38 - was i could have fixed this the start
71:40 - time is now
71:42 - um a variable based off of the current
71:44 - lapse time that's what fixed the bug
71:47 - okay cool so that's actually almost it
71:50 - there's one last thing
71:51 - and i can't really demonstrate it with
71:54 - the way that this works
71:55 - um right now but i'll just explain it so
71:58 - let's say that
72:00 - um
72:02 - let's see
72:04 - yeah let's say that i have a toggle
72:07 - button or something to
72:08 - render
72:09 - uh the stopwatch and so if i toggle it
72:11 - on it renders the stopwatch i toggle it
72:13 - off stopwatch is gone it's completely
72:15 - removed from the dom
72:17 - like i would have some state that says
72:21 - stop this.state.renderstopwat
72:22 - then i ran to the stopwatch otherwise i
72:24 - don't render anything just no
72:26 - um and so
72:28 - when react reruns the render method
72:30 - it's going to actually remove not only
72:32 - the dom nodes but
72:34 - it'll
72:35 - destroy the component as well so it gets
72:37 - garbage collected and whatever it's just
72:38 - an
72:40 - old object
72:42 - so
72:43 - um in that kind of situation
72:45 - if the stopwatch we're running at the
72:47 - time that it gets ripped out
72:49 - then
72:50 - this set interval is still going to be
72:52 - happening we're calling this dot set
72:54 - state every like
72:56 - millisecond or as quickly as we possibly
72:58 - can
72:58 - and so
73:00 - um that can be a problem because it
73:04 - means that every instance of the
73:05 - stopwatch that gets rendered will hang
73:07 - around forever because it can't get
73:09 - garbage collected because it's being
73:11 - referenced inside of this callback
73:12 - function so we need to
73:15 - clear this away clear this interval
73:18 - um right before react removes things
73:20 - from the dom and
73:22 - tries to destroy the
73:23 - instance
73:24 - what react calls that is mounting so
73:27 - when a component i'm going to stop this
73:30 - it's probably distracting
73:32 - when a component is
73:33 - rendered to the page it's going to be
73:35 - mounted to the page so there's a life
73:37 - cycle hook called component did mount
73:40 - there's an inverse life cycle method for
73:43 - when react is going to pull it off the
73:44 - page and throw it away that's called
73:46 - component did unmount and that's what we
73:48 - need we need to say hey react
73:50 - before you take this off i want to do
73:52 - some work
73:53 - and so we're going to say component did
73:55 - unmount
73:56 - and that accepts the
73:59 - that's component did update whoops
74:01 - opponent did unmount
74:03 - i guess i don't have an autocomplete
74:05 - that that's too bad
74:08 - okay component oh sorry that's component
74:11 - will unmount sorry
74:13 - excuse me um yeah and that doesn't
74:15 - accept any arguments
74:17 - that's what threw me off okay so
74:19 - component will unmount it's like hey
74:20 - react is like hey by the way this
74:22 - thing's about to go away
74:24 - uh do any of your cleanup work and all
74:26 - we really need to do is this clear
74:28 - interval
74:30 - and that will prevent a memory leak um
74:32 - really important um for stuff where you
74:35 - set up callbacks like if you're
74:37 - subscribing to a store or
74:39 - you're subscribing to some third-party
74:42 - service like a socket or something like
74:45 - that then you're going to want to use
74:47 - component to down mount to clean up
74:48 - those subscriptions
74:50 - okay so there's a ton more stuff in here
74:52 - like we had this really cool
74:54 - thing to interact with the
74:56 - whoops
74:57 - go interact with the dom
74:59 - and a fun um
75:01 - vanilla tilt library um also
75:04 - using forms
75:06 - submit
75:08 - that's um yeah and then like low
75:13 - lows
75:14 - uh so like validation
75:16 - also check this out apple and
75:20 - all those things are synced together and
75:21 - stuff so all of these things i show you
75:23 - how to do
75:25 - i i show you some of the pitfalls with
75:26 - rendering arrays
75:28 - um and then making http requests
75:31 - so i don't have time to show you all
75:33 - that stuff right now because i'm going
75:34 - to go hang out with my wife but
75:36 - if you want to see some of this stuff
75:38 - then you can go to kcdim beginner react
75:43 - and this is a totally free course
75:45 - available on egghead i o
75:47 - um
75:48 - called the beginner's guide to react and
75:50 - it has like all of this same content um
75:53 - i don't go quite as deep into stuff and
75:56 - it's a little bit faster pace you can
75:57 - slow down the video if you want i guess
75:59 - um but um
76:01 - yeah it's actually just about an hour
76:03 - um
76:04 - and yeah hopefully that kind of fills in
76:06 - some of the gaps uh if some of this was
76:08 - a little like more confusing here at the
76:11 - end
76:12 - but um
76:13 - yeah i think that's pretty much it if
76:15 - you uh want to get to my sites there are
76:18 - those and uh definitely feel free to
76:20 - ping me on twitter
76:22 - and
76:23 - also
76:24 - my ama
76:25 - if you have any questions
76:27 - um i've got lots and lots of stuff on
76:30 - um on my ama like 400 questions already
76:33 - so you can peruse those too
76:35 - i'm going to check really quick if
76:37 - anybody has last-minute questions and
76:38 - then we'll wrap this up
76:40 - so
76:42 - um
76:43 - let's see
76:52 - doesn't look like it's a complete list
76:54 - on the github
76:56 - um
76:56 - i'm not sure what you're suggesting or
76:58 - saying there um that but i yeah i should
77:01 - mention
77:02 - that the
77:03 - um this content here the learn react
77:06 - repo is actually not entirely finished
77:09 - uh so the exercises final are done but
77:11 - not all of the tests are done it's i
77:13 - think it's just like the last one um
77:16 - number 11 here
77:18 - yeah this is a to do but all the other
77:20 - ones are done and um
77:22 - this should be done here before too long
77:24 - i'm going to be doing this eventually
77:26 - um
77:31 - do you need arrow notation for the oh oh
77:33 - i'm so glad you asked this um
77:36 - uh press enough
77:38 - yeah okay so
77:40 - really quick um and if you look at my
77:42 - dev tips how does this work in
77:44 - javascript you'll understand why i'm
77:46 - using this syntax normally you'll want
77:48 - to use this syntax so this is a member
77:52 - property every single instance of the
77:55 - component this um
77:57 - this stopwatch component is going to get
77:59 - a its own copy of the handle clear click
78:02 - function
78:03 - um component will unmount render uh
78:06 - lifecycle hooks like this
78:08 - these will
78:09 - be a single function that's assigned to
78:12 - the prototype of stopwatch and so all
78:15 - the instances of stopwatch will have
78:17 - access to it through its prototype
78:20 - so um
78:22 - yeah the pretty much the kind of the
78:24 - rule is if you're passing a function
78:27 - to as a prop
78:29 - um
78:30 - where you don't control where it's
78:32 - called
78:33 - then you're probably going to want to
78:35 - use this uh syntax to make it work so
78:39 - that you can use this inside
78:41 - um yeah that also only applies if you're
78:43 - actually using this if you're not using
78:45 - this dot then you don't need to worry
78:47 - about it either uh so yeah definitely
78:49 - watch this
78:50 - that'll probably give you a better idea
78:52 - of uh of y but yeah if you can try to
78:54 - use the method because um it's less
78:56 - memory intensive but
78:58 - um if you can't then this is
79:01 - acceptable also
79:03 - um
79:04 - i think that's it so i'm gonna jump off
79:07 - i'm um
79:09 - yeah i hope that you're all uh like
79:12 - found this hopefully um sort of useful
79:15 - and i will see you all later here i'm
79:18 - just gonna
79:19 - do a goodbye
79:20 - see ya
79:23 - oh i don't have a i have a b right back
79:26 - i have just the screen just me
79:28 - me and the screen a starting
79:31 - and then i've got my sweet
79:33 - dev tips intro so i'll just play that
79:35 - for you until they they turn me off bye
79:58 - you

Cleaned transcript:

hey everybody so uh let's get this started my name is kent c dodds and i'm going to be talking about react with you all this evening and or whenever whatever time of day it is wherever you are um so let's just jump into things i've got a couple of slides here and we'll go over some logistics and stuff for the next um hour that we'll be together so um yeah so this is some stuff about me we're gonna be learning react and um yeah just a bunch of little icons and things you can click on i've got my slides right here um maybe we'll add those to the to the notes at slides.com kensey.learn.react um so these are my slides for my normal workshop which is like a full day workshop and very very interactive and so um yeah just be aware that some of the like exercises and things are kind of catered toward a handson react uh react workshop this will not really be handson like you can follow along if you want to but um we only have an hour tonight so we won't be doing everything for example we won't be doing the air squats that i normally like to do but though you can feel free to do air squats health is a good thing um so like i said it the the exercises and things you can actually do on your own um you'll see there are lots of comments and the exercises to tell you exactly what to do this is really fundamental stuff and so whether you've been using react for a long time or you're just wanting to get into it this will be really valuable because um often when we start building products with a framework or something we don't really understand what exactly is going on under the hood or how things are working and so that's hopefully what i'll be able to give you uh from this it's very very bare bones so we're not um like i i start out with just index.html file so that you can draw a queen separation between uh react the framework and all the other stuff uh like webpack and things um so yeah we're all the examples aren't 100 practical it's not we're not covering everything you can do with react but most things the nice thing about react is that it's pretty has a pretty small api surface area and i'm not going to go through every single api and say like okay so let's look at the docs here are all the apis lifecycle methods and things it's it is a little bit more practical than that um but uh yeah it's not everything so um we are gonna be talking about react create element and jsx um and how those uh relate to each other we'll go over custom components prop type styling event handler state dom manipulation forms and http we'll see how far we get uh it's pretty likely we won't get like really all that far i'm not going to give you any time to do the exercises on your own um and so yeah that's um unfortunate but that's uh kind of the nature of the time limit that we have so we'll probably get through quite a bit more than we would if you were doing the exercises on your own i give you time for that um and the cool thing about having this recorded is that you can um watch it later and and pause it and do the exercises and then watch my solution okay cool so if you haven't set it up this is how you do it um there you can actually run everything in code sandbox so if you haven't heard of code sandbox before um it you're gonna have your mind blown because it's amazing so this is the repository for it um we have a gitter chat but i'm not going to open that up i'm going to use the youtube chat maybe there's a lot of chatter which is great um but i'll try to keep up on questions and stuff in there but yeah if you go to the repo and then go to code sandbox.io go on that link there then it'll open up in code sandbox which is a full like it's almost like an integrated developer experience an ide in the browser it even runs the test which is like really awesome um so yeah this you can do most of the workshop just right in here so you don't have to install anything which i think is pretty rad so um yeah you can find a link to this repo in the description of the video um okay so once you get that set up just a couple logistics we're not in person so there's no real raising hands i will try to keep an eye on the chat here but um it's kind of hard so yeah if you have something just go like in the chat or something um and feel free to answer each other's questions i think that is really helpful um yeah and when you're going through the exercises uh fill out the elaboration and feedback forms for the exercises that will help you solidify what you're learning in your brain which is useful um if you have questions for me that are not related to this feel free to ask on my ama or first search because i've got like 400 questions that i've answered on there and then as always follow me on twitter because i tweet things and some people think it's use um so the normal routine for my workshops is i i give a quick intro to the use case that we're trying to support and then we do an exercise and then elaboration and you fill out the elaboration and feedback form and then if you have some extra time you do these extra things help each other and stuff um for us i'm just gonna skip all this stuff and we'll go i'll finish the exercise for you okay so that's it that's like literally all my slides no more slides uh slightly boring okay so here we go um i've got the project set up locally and um yeah we're gonna actually start in this intro directory so um here we have exercises exercises final uh this is actually a create react app app so if you've used create react app before then this should be pretty familiar you can look at the package.json and check out the scripts that we have here we'll be using some of those um and but from the right getgo we just have these exercises and then the final version of the exercise so if you want to peek at the final version then you can do that um so sorry i just realized i don't have things arranged the way that i wanted them to be arranged move things over a little bit um people are saying nice things in the chat thank you that makes me feel good okay so let's go ahead and um i've already opened up this file you can just in your terminal open intro exercises zero zero dot html that'll pop it open in your browser so i'm gonna pop that open and look oh my goodness where's the code see we're gonna actually start with a very very basic hello world in just javascript so we're not even going to do react for this first thing so to get us started we're going to have a body and then we're going to have a div and we're going to give that div an id of root and then we're going to have a script and that script is going to be type text javascript love javascript and um yeah for this javascript we're going to have a variable i'm going to get the root element or we'll just call it root l and that'll be document get element by id root all right sweet so now i'm going to create an element i want to say hello world to the world right so um sorry i just got distracted by a chat um we're going to make our element document dot create element div that's the kind of element we want to create i'm going to set the text content to hello world and then just for fun i'm going to set the class name to a container you know because why not and then we'll say root l append child element okay so this is how we do this in javascript i refresh and i get that here let's pull up in the developer tools pull the bottom make sure we don't get any errors in the console all right cool so that's hello world in a regular javascript where document create element um to make an element and then we append that to our root you can think of that as kind of rendering this element to the our root element if i don't do that you're not going to see anything in here this element is just like existing uh somewhere in in memory it's not actually being rendered to user so um yeah so let's go ahead i'm i'm seeing some questions so let me address some of those really quick um so a quick question can you include redux in this tutorial i actually will not be including redox and that's totally intentional um i have a talk actually i have a blog post uh let me blog dots.com how to react there we go um and i'm sorry i can't actually paste links in the chat i think unless maybe a moderator can yeah i can't paste links in the chat so you'll have to google it um but uh yeah how to react and i talk about how it's a really bad idea to start with redux so we're not going to be doing that um today because that would be more distracting than helpful um so let's see will this live stream be updated later um probably maybe i don't know um i can't tell the future um but this content like lots of this content uh is like it's all totally up to date today and most of this content actually hasn't changed um for many versions of react um these fundamentals are are true for lots of versions of react um let's see oh that's really nice benny um what type of program you use for these type of recordings check out my ama kcd.imama that's actually just a github repo and i answer that question there you can search around okay so let's take a look at the next one uh and feel free to like ping me in here oh good question from somebody named machine are you a robot uh okay is react like angular or like bootstrap it's more like angular bootstrap is a bunch of css and some some javascript for interactivity uh it's like a ui library um for um like uh design uh system um react is more building user interfaces so you could actually build something like bootstrap with react um and people have uh so yeah it's definitely more like angular in that way in the way that it's a framework but you'll see it's quite different in actual implementation which editor are using using casey imvs code that will take you to my editor settings and lots of information about that on that note um my font theme um so you'll go to that and that will send you to a tweet that i just tweeted today so that people don't ask me about my font and my theme because everybody asks about my font in my theme so learn more about that there um am i going to do any context api stuff in this tutorial no i'm not um but um if you go to kcd i am slash advanced react that will take you to a course where i do go into context i also have a blog post about contacts and also on my youtube channel acne i am youtube you'll find the um i have somewhere on there like look in my playlist my toxic workshops i have a recorded version of the advanced react component patterns course which i gave it at paypal to some coworkers so you can learn more about the context api there um okay cool sweet now we can move on feel free to interrupt me with questions that you have that are um both relevant and and not relevant but hopefully mostly relevant okay so the next thing that we're going to do i have our script here this is basically the same thing that we had before just with more comments let me navigate to this thing okay so we have our rendered hello world so now i'm going to bring in react and we're just using script tag so i've actually got react dom and react in here and react is responsible for an api called react dot create element so this is how we cr similar to document.createelement you have a react create element and we'll take a look at that then react dom is responsible for the same thing we have here with this append child you can take a react element that you got from react and react dom will render that element to the dom you also have react native and you have the ability to render to a string of html rather than a dom node so you can do server side rendering and there's a whole bunch of other renderers there's even a renderer for react to render react elements to a word document or to a pdf or to canvas so there's that separation between creating react elements and rendering those react elements to some sort of environment so let's go ahead and reimplement this using um using react so i'm going to say react.createelement and then react createelements or react.createelement that api is a little bit different from document.createelement i guess i figured you don't want to monkeypatch a bunch of properties onto onto things and so instead you can set those right away as an object so here instead of text content of hello world we're actually going to call this children and it kind of makes sense if i were to make a div and i'd say hello world um this is text content but it's also a child of the div and so i can apply that same children concept to a span or whatever else that i want um and so just calling it children not worrying about the text content idea i kind of like that so that's what the children are gonna be so we got text content and then class name we actually have the same thing container whoops i just did something okay um there we go okay cool so now we have an element but this is not a dom element let's actually take a look really quick at uh right here you bump the font size up there dot create element div see what we get back okay um sometimes chrome tries to be helpful but it isn't entirely helpful console.log if there we go okay so if i expand that then i can see a whole bunch of properties here it's actually a created element is actually just a um a huge javascript object that has a lot of properties on it and lots of those things are associated with the dom specifically um the for our element that we're creating with react however if i log that element that we created with react i'll refresh i'm getting a message here talking about reactive tools and stuff um ignore that if i click on this this console log thing it's actually also an object it's not quite as big it has some like underscore properties which is basically react telling us hey don't touch these things this is like internal implementation stuff so here we have this type of thing that's just how react ensures that this is actually a react element and then we have this key thing we'll learn more about the key later when we're entering arrays right now it doesn't it's not really relevant and then we have this props thing and that's those things that we passed here it's the second argument as an object so that props object is um exactly what we provided and then we have a ref we'll learn more about that when we're talking about interacting with dom nodes and then a type that's that first argument so react element when you do react.createelement you're just creating a javascript object that represents a react element you can't render react elements to the dom with a root element of pen child you actually need to use react dom to do that and react dom will uh will pen the child for us and manage um keeping it up to date and stuff which we'll learn more about later so let's go ahead and do that we're going to do react dom which we're getting from this script and we're going to render our element to the root element and then if we save that refresh we get our hello world so uh just quick comparison you um actually it's just these lines that are different um yes thank you aj for that consulter that was i should have done that okay um so we have we're creating an element we're setting a couple properties on that element and then we're appending that to the document in react you create an element and you provide some of those properties and then you use react dom to render that to the document okay good so far hopefully i'm going to check for a couple questions oh i'm blocking the console with my video thank you for telling me let me move this around we'll put it over here or actually you know what maybe instead i'll just do just screen there you go you don't need to see my face um okay so let me just check on some of the questions if there's anything i am going to skip some repeat questions and things so if if somebody asks a question that has already been asked please do answer them because i'll be skipping things um okay yep no no question so let's move on then to our next step so um anybody who's actually used or seen react code before probably doesn't normally see react create element in the code and that's because most of the time we're using something called jsx because let's say we wanted to render as like an additional child another div so i'm going to create another element here we'll just say kant's child element and this one's going to be a span that says hello and it doesn't need a class name oh yeah and then we'll we'll do actually we'll call it this hello element and then we'll have a goodbye element okay cool so now um we want those to be the children here of this element so we can actually make children an array because they uh you can have multiple children and we'll have hello element and goodbye element and we'll save that refresh and now we're getting hello hello because i forgot to do um world this should not be goodbye element this should be world element okay if i refresh you'll notice there's no space there so let's add a space um as a child there we go well so this is like totally not fun um to create variables for all this stuff like clearly this is a hello element because it has a childhood element so i don't like i don't want to name that so let's go ahead and put that there in its place and we'll do this same thing for this world element and get rid of that and um now good okay cool we're we're all set here except like this is horrid who would ever want to write code like this not me and so this is why we have um and actually sorry i have seen some people um who don't like jsx some people will do something like this they'll say um like they'll call it h i'm not sure why they call it h but react dot create element and then in all the places where you're using create element we'll do h i honestly don't feel like that's any better but i have seen people who don't like to use um react create element um use h instead kind of weird um and so yeah like let's let's make this a little bit easier and that's where jsx comes into play okay so somebody mentioned i'm going a little fast so i'm gonna slow down a little we're gonna go to exercise number two it's still in the intro and here i moved the react dom render down here and now we're just getting the element by id root here so we don't have to have any extra code that's irrelevant yeah at the top okay so jsx it's this really uh kind of neat thing let me give you a quick intro so oh actually i have a newsletter that you might appreciate just this week's article is about what we're going to talk about um so if i go what is jsx and we'll just go through some of these um examples here in just a second um but yeah you can subscribe to this every week i send out an article and then two weeks later that hits my blog um so let's go ahead and convert this to jsx wouldn't it be easier if we could make this be div and close that off and hello world and then class name is container and it looks like html right there's there's a little bit of difference right here we'll talk about that but uh yeah it's a lot easier and now we could actually add our span low fan and base and span again uh world right so it definitely looks a lot better than this but it is the basically the equivalent of what we had let me just format this a little bit prettier formatting isn't applying for some reason um so this is jsx we're we're in javascript we're in text javascript right um this like makes total sense inside of html but this isn't javascript syntax so this is what's called jsx and it is a shorthand for the react create element api uh for this to work let's we'll go ahead and comment this out if i go to zero three oh no we're on two that's right and i refresh here i'm gonna get a syntax error unexpected token less than okay so it's that token right there it's like wait what is going on here so the problem here is that because jsx is not actually javascript you need to convert it into the javascript version of the same api before the browser runs it and to do that we use a what's called a transpiler and a transpiler is able to make this conversion for us my transpiler of choice is babel you can also use typescript typescript will also transpile uh jsx code but i have babel loaded in here as as part of a script tag so i didn't mention this but i probably should don't do this in production it's a bad idea to do in production but it's great here because it makes it a lot more clear where the lines are between abstractions so babel is going to be responsible for taking all the code inside of this script tag and doing its translation magic to convert it to um actual javascript and then running that that converted version in the browser so to make that work we're going to change this from text javascript to text babel and now this babel script is going to look in the document for all instances of script where the type is text babel it'll take the contents of that run it through its magical transpilation to convert stuff like this into stuff like this and then um and then run that in the browser so if we save this and refresh we're going to get our hello world hooray um and we're also going to get this warning that says don't do this in production this is a bad idea um okay let's see um yeah so i'm not seeing any um any other relevant questions so i am going to just demo a couple of things for you that you might want to pull up yourself so let's go to oh actually sorry one second i just want to show you there's no smoke and mirrors going on here so um go here and look at the dom we're going to have that div classes container here we're calling it class name that's one of the differences between jsx and html and then we have a span and a span for hello and world okay so um all that same stuff in our actual um dom cool so um in my blog post that or my newsletter that i just sent out this last week uh which actually by the way if you subscribe you'll it'll send it out to you right now so you can get that in your inbox um but i give a couple examples i talk about this a little bit more how react create element just gives you an object um but i'm going to at the bottom here i link to um babel um online babel has a what's called a rebel that's um read evaluate uh print and i actually i don't know what it load i don't know i can't remember what that last one is um so here you can actually type out your um jsx stuff and on the right side you'll see what babel will turn that into so one thing i didn't actually mention to you that i probably should have is here with this children api you can actually clean this up a little um what we're looking at a little bit by using a convenience part of the api so the this middle um argument to react create element is the props that you pass so if i said class name i that's going to be that object right there any other arguments following that are considered children so if i do ban or we'll do hello ban and then another span of world then we're gonna see on the right side um we have the type we have the props and then the rest of the arguments to this react create element call are the children so that's neat so let's go ahead and um well i'm not i'm not going to waste your time and uh convert the old one just trust me that's how it works um so yeah let's go ahead and we'll just take this really quick copy this in here and that's yeah that's what we're gonna get i think that was basically the same um let's see some other really important things to know about jsx is like what if we wanted here we'll say this is our element and i'm going to do that pretty high um what if i wanted to take this container and extract that class name out to something else or maybe i want to make it a dynamic value so here we'll start with my class name container and then i can make this dynamic by doing an interpolation before i show you that actually i'm gonna um if you're familiar with uh template literals then you can have something like um yeah my html equals this template literal and we're gonna have um a div in this template literal and then this is actual html so we'll use class so this is not jsx it's just a real html so in a template literal you can do multilines you can do all kinds of things but if you want to stick a variable into that template literal what you're going to do is use this dollar sign and these curly braces and everything that ends up inside of those curly braces is what's called an interpolation so you can provide a javascript expression and whatever that expression evaluates to will get inserted into that spot in the string so i'm going to say my class name and here if we also log my html um let's see if that happens yeah tada fancy stuff right so um anything goes in in these interpolations i can do plus one i could even do like regular arithmetic so now that class is three um and then i can do like really weird stuff too so i could do an immediately invoked function expression uh using an arrow function um and this could be like return i and if we pop open the console here we're going to get classes high so you can anything that is a javascript expression can go inside of these curly braces okay so that is template literals jsx is actually really similar in that um if you wanted to make a part of it dynamic then you turn use an interpolation and instead of a dollar and curly braces you just use curly braces and now you're in interpolation zone and so we can say my class name and it will be interpolated and the value of my class name will be assigned to the class name prop which as you can see on the right here we have my classname variable and classname the prop is getting assigned to my class name so here we're creating an element its type is div and it has these props and before it was let's look at that again container the class name is just just the string now we're doing an interpolation of my class name and it's just the the value of the variable so it's actually not doing a whole lot of magic things it's just whatever goes inside of these curly braces is what's going to be assigned to the value of that prompt okay so i'm going to jump over here really quick to check out um if there are any questions that are of relevance to everybody okay yeah so somebody asked the question env or stage two for babel or both in regards to import statements um we i can actually turn that off um yeah use env definitely use env um i don't have it enabled right now i just have react enabled because i don't want to transpile more than i need to um oh my dog just walked up i gotta close this otherwise she'll start howling at me i have a uh walkout basement so the window is like at ground level with the dog okay um let's see uh any other questions can i explain things in slightly greater detail if i'm um if you could ask more specific questions then uh maybe am i going to talk about class based versus functional components or function components yes time is slipping away very fast but i will um i will probably get to that okay so that's that's jsx i don't think we need to spend any more time there other than to say you can use it for attributes you can use it for values within the like the children area of the jsx here i added a space and you'll see actually if i go back and forth look on the right side here um so i have an interpolation and then a space or anything and that will get added as this additional argument so more children okay cool um so that i i think that's like really really important to uh to uh grab is interpolations and javascript expressions if you can figure that out and and learn more about what a javascript expression is then you can really nail jsx and you can come up with new patterns and and good ways to interact with your react stuff okay cool let me just check out something here really quick make sure i'm not missing anything yeah okay so wouldn't it be cool um if we could have like let's say we wanted to do um two of these hello world and goodbye world and um we wanted each one of these to be inside of a div by themselves and both of these we want to have the class name of message okay right that's that's pretty cool we can um we can do that the thing i don't like about this is the repetition and especially like as your application gets bigger and things eventually you're going to get to the point where the um you want to make some sort of abstraction so if we think about this from a like react create element standpoint then it might actually make a little bit more sense so what i'm going to do is i'm going to comment this out really quick and man why is the formatting not working yeah i need to set up vs code to format my html i guess i don't know i used to use atom and it worked great um okay so these things look very similar so in javascript like the way we abstract things is by making functions so i'm going to make a const message function and that's just going to be an arrow function implicit return here and it'll implicitly return react to create element okay so with that i want to be able to take what the message should be so i'm going to call this i'm going to make it take an object um just for our purposes here and let's see we'll stick with the um or actually yeah we'll just do msg or the message and then instead of hello world as a hardcoded string in this function we'll just do ms cool so now i can change both of these to a function function call into message okay so if i refresh um stuff is busted what am i in the right file yeah ooh message message oh right ah you were supposed to correct me i was testing you no just kidding i messed up so we're passing an object right i'm just structuring that okay there we go so i'm um creating an object i destructure that object to pull out the message property and then i pass that message property along to this uh function call of create element as the child cool okay so how do we do this same kind of thing in jsx well let's uncomment this again and we'll move this up here so we can use it and we're going to take this message and remember any javascript expression a function call is a javascript expression so i can do this and i can do this okay so as long as i'm in interpolation mode um i'm in jsx here jsx jsx boom interpolation now i can do javascript stuff all the way until the matching curly brace and now boom i'm in jsx um here look hello world jsx oh uh busted here we go wait what my editor is kind of confused there we go okay hello world jsx goodbye world right okay but this is not like this is cool i've been able to abstract things away um make this thing reusable but it's not a super great way to compose things together like let's say for the message i wanted to um i don't know here let's well it'd be more confusing but what if i wanted to make a message a child of a message here like i wouldn't really be able to do that and it doesn't look very jsxy um so let's change this a little bit remember this react create element api it takes a string that's a div it actually also can take something else what if we could do i'm going to log this react dot create element message i want to create an element that is of type message let's count to log that and pull up my thing here i'm going to get an object i'm going to get the type is a function now if you recall we'll do a div here the div is just type is this string and then here our type is this function and it's that um message function right here okay so i've created an element that is of type message um can i pass it some props yeah probably as a second argument right that's props msg hello world we'll refresh that and now if i look here props okay message hello world okay yeah cool so what would happen if i put that react element in here instead and i refresh oh look it actually still works because what i'm rendering now what i'm interpolating is now not just um well i'm actually just kind of moving where things are happening so i'm creating an element that actually creates an element itself and i'm um and then i'm rendering that created element so it would be the same as if i were to say const um good or other message is a div hi there div and then i can interpolate that in here so i'm doing the exact same thing um so let's actually do this with hello world we're gonna create elements okay so that should work um but remember how with the react create element of div i was able to convert that into this jsx thing which i kind of really like that i want to be able to use that and so huh what if i just did like message and then this needs to be a prop so msg hello world maybe that works try that refresh oh that's not gonna work i'm getting a warning message is unrecognized in this browser well here if we look actually we can see our message is getting rendered so the react folks the people who are making this jsx thing they're like okay how do we solve this problem we want to give the same kind of experience with these custom functions of creating react elements i want to give that same kind of experience to that we have for creating um divs and being able to convert that to jsx so how do we do that well what if we tell the remember all of this is getting converted into these react create element apis using babel it's transpiling them so what if we just tell babel that anytime something is capitalized leave it alone and transpile it to just what it was before so if we capitalize this function and then use that capitalized version we'll use the capitalized version in our function call there and that good work except time that's a logging up okay cool okay so we're doing this create element of that capital message rendering that out and in jsx land we can use the capital version okay cool so let's go ahead and just see this in action over here if i put message right there so it transpiles that into react create element message with our props our props can be anything they don't have to be html things and in the case of custom react components like what we've created here custom functions it's just actually arguments that our function is getting past and then they can do whatever they want with those arguments so we're not forwarding that on as props to or attributes to our div tag we're forwarding on something else entirely and we're just using that as the uh children the additional arguments and what's cool about this is um now i can have a much better composability model so what if we re rename this message to children now we can take this hello world and remember this is this is the children prop right between here that's um that's what gets accepted as the children prop so i take that children and i remove that um and switch it over to children here ask children as a prop and now i can say let's switch this over really quick sorry here we'll just do this okay cool so i have this really nice looking it's almost like html but it's not quite html and what's cool about this is now i can put things or i can nest things just like i would in normal html so i know i've got a message and a message we can see that evidenced here we have this message in a message and i have this really really nice composability model where i can create custom components custom functions that return more jsx and react can create elements out of those and it will continue down the chain until it finds all of the elements that are of type div or type span or actual dom elements these lowercase elements let's actually rewrite this really quick to just be jsx the more typical standard here so we're gonna do a div and class name is going to equal message and then um children is children that's a prop right selfclosing tag that's one handy thing with jsx is you don't need to actually close divs if you don't have any children that you're putting in between it opening and closing you just selfclose it okay so that's working but i kind of don't like the children prop when i'm using jsx so i'll just do do this now i do have a selfclosing tag or nonselfclosing i have a closing tag cool and that works and so now uh things look a fair amount more um palatable it's it's easier to reuse this stuff let me just put this on oops new line there um and i can create all the custom components that you could imagine so to create a custom component in react you make a function and it's called whatever you want so my component that was really boring and then it accepts props and those props are whatever passed my component as prompt one hi and prop two is true drop 3 is 34 and whatever else prop 4 is a function to be anything and then in here we can use those props and return more jsx turn div i we don't have to use the props um we just get them and we render more jsx that more jsx can actually be yet another component and it's components all the way down cool so it's been a little bit i'm going to check on the questions we've only got like 10 minutes left which is unfortunate um but uh this is like paramountly important for you to be successful using react um or most efficient using react and so that's why i include it okay let's see a couple of questions so am i explaining what's happening under the hood or does this really react so um yeah so like this isn't typical react um like in an application you will not see react written this way um we're starting to get to more typical react with the jsx stuff um but yeah mostly i'm just trying to explain how um this jsx stuff works and javascript expressions because it's really really important to being successful and and understanding what's going on with the future stuff okay cool so um i'm just gonna show you a couple of things because we were limited on time um and then i'm i'll go through a couple of exercises probably so when um you want to like spend more time in these exercises just a couple of things um i have a another process over here that's running npm start so you're on npm start hit enter in your terminal and it'll pop open an app that looks like this and in here you'll have um the exercise version and the final version and for each one of these exercises that we have kind of fun stuff so um the yeah so that's that's the actual app you can also do this in um in code sandbox the app works there too we also have some tests so oops that so if you run npm t to run the test or npm run test or npm test all three of those things will work then it'll start jest in watch mode and just watch mode is awesome if you hit the p key you can filter by file name regex pattern so we'll do zero one or actually here let's see which one do we want to do we're gonna um oh i've got that label drawn um we'll probably do this one actually you know what with the last 10 minutes i'll do i'll do this one you'll see a bunch of stuff that you hadn't seen um but hopefully it'll give your mind the idea of what you want to or what's possible um so yeah we're going to be doing number five and so that will just filter down to the tests that are that match that pattern which is just the zero five exercise and then if we go to our test directory zero five we can comment out exercise final comment in exercise zero five and it will start failing and it'll tell you what's going on um and you're supposed to supposed to do some stuff um to make things things work so let's go ahead and um jump into number five on the exercises thing and i'll work through this and that that'll be the end of our doodad uh for today so here let me jump over to five or actually the url just zero five so this is the final version of what we're going to build jumping around a bit yikes there we go cool so then we stop start stop clear start clear so that's what it's um what we're going to build here uh with react um let me actually just jump over here really quick make sure i don't mess up really bad okay cool so to get us started i'm actually going to just show the isolated example of exercise so that we can be focused okay so the first thing that i get that i like to do when i'm creating a component oh sorry take a step back because we kind of skipped over a couple of things so you know how i made a function message that takes some props and then you can return some jsx from that so you can actually use a class as well javascript class and the only stipulation is that the class has to extend react.component and with that and like some of this stuff will be new to you and i don't have time to explain it all because we just have like five minutes left um but uh yeah so here we're creating a property that will be added to every instance of the stopwatch class that we instantiate and that property is called state and this is the initial value when that is constructed and so um yeah we're gonna start with a lapse of zero and it's not running so that's our initial initial state there and then we're gonna do a bunch of things here um that's cody the qual bear helping us out and then we're going to we every react class has a render method so if you're if you're using a function that function is the render method so that message function its render method is something that returns more jsx more react elements so here we're creating a class that has a render method and that render method is responsible for returning the jsx so that's what we're going to do here i'm going to create a div we'll get rid of this thing and we'll return that div let's render our label so our label is going to say the elapsed time and here inside of this render we have access to this dot state and this dot state has a property on it called lapse so that's what we want to render we'll say and actually this is interpolation right here lapse we're interpolating the elapsed variable into there and then ms for milliseconds and we save that and we're going to see zero milliseconds awesome we're going to have two buttons one that says clear and then this one that says running or it says stop if it's running and start if it's not running so let's pull out the running state and here we'll say if it's running you're going to see a lot of ternaries in jsx because a ternary is an expression you can't do like an if statement inside of the jsx if you want to do that you can do that up here but i like that and then you can make like a let element equal or whatever and then if and then set the element and then render the element but i like to just inline it so we'll use a ternary so if we're running then we're going to say stop otherwise we'll say start and save that and now do we have start and clear let's go ahead and add a couple styles so i did i skipped over this but um in in react and with jsx you can use the style prop but the way that it or or the style attribute like in regular html you have a style attribute you can have a string of css but that string of css doesn't compose very well um so you can't like you can concatenate strings of css but like how do you um reliably override things and and stuff like that it's just like a little bit harder and so um in jsx they decided hey let's have it accept an object of things that look like css and so that's what these things are you can look back at the exercise for styling to see more about that but here we have button styles and label styles so let's apply those so style equals that object and like really often you'll see that in lines like border border none stuff like that but we have this as a variable so we'll just interpolate that variable and we'll have button styles for both of those and then style is label io files with an s and refresh it looks all nice css is pretty cool okay so let's go ahead and make this interactive so we skipped over the event handling stuff um but uh we want to add a quick handler onto this button unfortunately um in like regular javascript and like with jquery and stuff you have to say okay find me that button node and i'm add event listener onto it and now i have a javascript callback that responds whenever that listener happens in react it's a lot more direct a lot more straightforward what's going on we simply have it on click and this on click we're going to assign it to a um a instance uh variable we're going to call handle run click and um we'll just make that one work for now actually you know what let's um let's do the easier one first so we'll have on click and this will be this dot handle clear click and you know what all these comments are just distracting me oh i'm getting get rid of all this stuff see it's not all that bad so um we need this handle clear click to be an instance method and um it's just gonna be an arrow function so it can make use of the lexical this and i actually just today talked about this in um tips i have daily videos that i put out during the weekday that are just little tips and stuff today was how does this work in javascript so you can learn more about the reason that i'm doing this arrow function thing um so go check that out yeah how does this work in javascript um yeah don't google that uh kcd because you'll find a million things youtube and then you can find mine out there okay so handle clear click um here we need to update the running state so that it's no longer running i'm going to initialize it to true so we can see this handle clear click actually working and we'll start out here with alert hi just to make sure that things are wired up properly so when i click on a handle clear click it's gonna or sorry when i click on the clear button it's gonna call my handle click callback and that should alert so i click hi and we know we're in a running state because stop is showing and so now we need to change that state we need to tell react hey listen i know that the state is running true but i'd like to change it to running false if that's cool with you and so we'll say this dot set state now where's the set state method coming from i don't see it in here coming from react component we're extending react component grant component provides this dot set state and here we can say running is false and it's not going to change the value of our lapse it does a shallow merge of our properties so we don't have to say um like merge this dot state or whoops you do that on the other side we did um because react will actually do that for us and so we just provide the state um the first level of the object the properties that we want changed um so cool let's we'll save that this gets refreshed and i click on clear and you'll see the stop turns to start cool so the query button is working let's make the unclick this dot handle start or run click that one's tricky because it's also it's start and it's stop um but that's what we're going to call it so we're going to do the same thing here just going to be an arrow function and i need to determine i need to set some state i need to make some changes to state i need to say that it's it's running now or it's not running now and i need to know what the current value of state is and so i can say this dot state dot running and i can know okay if it's running then i want to change it to running false otherwise running true whatever and then like i need to start a timer somewhere um but for reasons that i don't have time to get into if um react actually well i have some time to get into it watch this okay so if i wanted to um instead of this.false i wanted to call setstate a bunch of times and maybe it wouldn't all be right here in the same function it'd be part of the code path like this calls another function which calls set state and that calls another one and whatever and let's say that i was using not this dot state dot running okay so um i'm saying okay set state running is the opposite of what it the current state is then i'm going to toggle it back and toggle it back and toggle it back so we're bumping back and forth between running and not running um if i save that then presumably we're we're in a running true state so this should now say running false running true writing false running true okay bye click on clear oh actually i need to be an odd number to show the problem sorry i click did i mess something up all right yeah no so it's going to toggle every single time so um what's happening here is the set state method is actually batched and so it doesn't run synchronously so here maybe a better way to illustrate this is this dot state dot running and i'll console log that between every single one of these here we'll do another one at the beginning i pop open the dev tools and if i click on clear i'm going to get true every single time even though i'm calling set state each one of these times i'm getting um through every time and so setstate is um it's run in a batch and the reason for that is um it like we don't want to render like a million times to our user um like it's kind of nonsensical to do this like i could just store up a variable and then set state once but react doesn't want to make you have to think about that or worry about that worry about performance this is one thing that react does for performance um so it waits until all of your set state calls have run and then it flushes the state to determine what the actual state should be so anyway that whole long thing that i just went through all just to say that here when we do handle run quick if i want to get this dot state running then and i'm going to be updating state we're going to do anything else then i need to say hey react what is the state of running at this time in our batch run so i'm going to say this dot set state and we're going to use a function and so then if i call this over and over and over again it's going to react can run this one and then this one and each time it's going to give me the state and it'll give me an opportunity to return what i want for this the new state to be based off of the current state in our current batch run okay so that may be a little bit heavy and i'm sorry about that that i didn't um have quite as much time to to get deeper into that but just if you don't like complicated rules of like should i use an object or should i use a function then just always use a function and you don't have to accept any arguments uh so we could actually refactor this and this is probably what i should have done and not gotten into all this stuff but um so that is totally cool to do things out this way if you if you want to just always use a function i have no qualms with that okay cool so um here we're going to get our state and we can say if state.running and we're going to do something otherwise we're going to do something else and in either case we're going to return date dot or actually we're going to we're going to toggle the running state right so we're going to say running is opposite of state dot running okay cool so we're not actually doing actually running any of these like a timer yet or anything updating that lapse value but we can stop and uh start and clear and stop start and stop start and clear so all of that is working our running state is being updated properly um so we're we're gold in there so what we need to do now is if state dot running um then we need to set an interval and um let's see so every like as soon as possible that's the default is zero so as soon as possible i want to update the laps so i need to know what the current the start time is so we'll say start time equals date dot now and now i can get what the lapse is with um let's see or we'll we'll just say this dot set state lapse we don't need to know what the previous last was so we can just use an object here um and i'll say start time or sorry date dot now minus the start time okay cool so let's see what happens when i do that and i actually put that in the wrong spot that should be there but anyway so that's working cool isn't that okay so listen every single time that number is changing that's that's happening as fast as possible as fast as this set interval is running and it's running all of this stuff doing react create element for the div and the label and the button it's running all of that over and over and over again as fast as the browser could possibly go it's kind of nuts i think that's pretty cool i love doing this exercise because i like to see that but now we have no way to stop this so i hit clear and running is uh now false but this keeps on going and that's happening because inside the set interval we're calling this dot set state on lapse over and over and over again we need to clear this interval what i'm going to do is i'm going to set a property this dot interval and inside of this handle clear click i'm going to say clear interval this dot interval and so with that i can now refresh start and then clear and it stops it doesn't change the um the laps though so let's have that set state change the lapse to zero and i'm gonna initialize this to false now because that makes more sense and so i start it and then i clear it start it and then i stop it well stopping doesn't work yet so let's make stop work so here um if it is running then we're going to stop it so i'll say clear interval your interval this dot interval okay and then um yeah that's actually it um for that so i can now start and i don't want to set it to zero milliseconds anymore um but when i hit start again it's going to start over i don't want it to start over so what we're going to do is i'm going to move this start time to up here oh actually no that doesn't work hold on how did i solve that sorry i'm cheating what oh right you know what all that stuff that i said uh rats oh i know what i'm doing okay sorry let me just copy this over because i don't want to waste your time uh and i'll explain things okay so magic happens so here we're saying um if the state is running then we're going to just clear the interval otherwise we're going to do this set interval and then here when we're calling set state to swap the running state we're using the state updater function to be perfectly honest like in this situation using state updater functions versus using just regular objects it's really not that huge of a deal so i would like encourage you not to get dogmatic about this but it is just a good general practice to avoid surprising bugs by using a state updater if you need to reference the state that's all i'm going to say about that so here though we are determining what to do based off of the state whether to even set state or start this interval and so in this situation it is totally like it's actually better uh to use this. okay cool and so then when we set our interval we get our start time and um yeah so let's did i save that no i don't think i did we'll save that and start and stop and start again and stop again stop yeah so this is actually the magic that was i could have fixed this the start time is now um a variable based off of the current lapse time that's what fixed the bug okay cool so that's actually almost it there's one last thing and i can't really demonstrate it with the way that this works um right now but i'll just explain it so let's say that um let's see yeah let's say that i have a toggle button or something to render uh the stopwatch and so if i toggle it on it renders the stopwatch i toggle it off stopwatch is gone it's completely removed from the dom like i would have some state that says stop this.state.renderstopwat then i ran to the stopwatch otherwise i don't render anything just no um and so when react reruns the render method it's going to actually remove not only the dom nodes but it'll destroy the component as well so it gets garbage collected and whatever it's just an old object so um in that kind of situation if the stopwatch we're running at the time that it gets ripped out then this set interval is still going to be happening we're calling this dot set state every like millisecond or as quickly as we possibly can and so um that can be a problem because it means that every instance of the stopwatch that gets rendered will hang around forever because it can't get garbage collected because it's being referenced inside of this callback function so we need to clear this away clear this interval um right before react removes things from the dom and tries to destroy the instance what react calls that is mounting so when a component i'm going to stop this it's probably distracting when a component is rendered to the page it's going to be mounted to the page so there's a life cycle hook called component did mount there's an inverse life cycle method for when react is going to pull it off the page and throw it away that's called component did unmount and that's what we need we need to say hey react before you take this off i want to do some work and so we're going to say component did unmount and that accepts the that's component did update whoops opponent did unmount i guess i don't have an autocomplete that that's too bad okay component oh sorry that's component will unmount sorry excuse me um yeah and that doesn't accept any arguments that's what threw me off okay so component will unmount it's like hey react is like hey by the way this thing's about to go away uh do any of your cleanup work and all we really need to do is this clear interval and that will prevent a memory leak um really important um for stuff where you set up callbacks like if you're subscribing to a store or you're subscribing to some thirdparty service like a socket or something like that then you're going to want to use component to down mount to clean up those subscriptions okay so there's a ton more stuff in here like we had this really cool thing to interact with the whoops go interact with the dom and a fun um vanilla tilt library um also using forms submit that's um yeah and then like low lows uh so like validation also check this out apple and all those things are synced together and stuff so all of these things i show you how to do i i show you some of the pitfalls with rendering arrays um and then making http requests so i don't have time to show you all that stuff right now because i'm going to go hang out with my wife but if you want to see some of this stuff then you can go to kcdim beginner react and this is a totally free course available on egghead i o um called the beginner's guide to react and it has like all of this same content um i don't go quite as deep into stuff and it's a little bit faster pace you can slow down the video if you want i guess um but um yeah it's actually just about an hour um and yeah hopefully that kind of fills in some of the gaps uh if some of this was a little like more confusing here at the end but um yeah i think that's pretty much it if you uh want to get to my sites there are those and uh definitely feel free to ping me on twitter and also my ama if you have any questions um i've got lots and lots of stuff on um on my ama like 400 questions already so you can peruse those too i'm going to check really quick if anybody has lastminute questions and then we'll wrap this up so um let's see doesn't look like it's a complete list on the github um i'm not sure what you're suggesting or saying there um that but i yeah i should mention that the um this content here the learn react repo is actually not entirely finished uh so the exercises final are done but not all of the tests are done it's i think it's just like the last one um number 11 here yeah this is a to do but all the other ones are done and um this should be done here before too long i'm going to be doing this eventually um do you need arrow notation for the oh oh i'm so glad you asked this um uh press enough yeah okay so really quick um and if you look at my dev tips how does this work in javascript you'll understand why i'm using this syntax normally you'll want to use this syntax so this is a member property every single instance of the component this um this stopwatch component is going to get a its own copy of the handle clear click function um component will unmount render uh lifecycle hooks like this these will be a single function that's assigned to the prototype of stopwatch and so all the instances of stopwatch will have access to it through its prototype so um yeah the pretty much the kind of the rule is if you're passing a function to as a prop um where you don't control where it's called then you're probably going to want to use this uh syntax to make it work so that you can use this inside um yeah that also only applies if you're actually using this if you're not using this dot then you don't need to worry about it either uh so yeah definitely watch this that'll probably give you a better idea of uh of y but yeah if you can try to use the method because um it's less memory intensive but um if you can't then this is acceptable also um i think that's it so i'm gonna jump off i'm um yeah i hope that you're all uh like found this hopefully um sort of useful and i will see you all later here i'm just gonna do a goodbye see ya oh i don't have a i have a b right back i have just the screen just me me and the screen a starting and then i've got my sweet dev tips intro so i'll just play that for you until they they turn me off bye you
