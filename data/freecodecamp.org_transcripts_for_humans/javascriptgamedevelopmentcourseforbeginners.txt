With timestamps:

00:00 - in this complete game development course
00:01 - you will learn how to develop a variety
00:03 - of games using javascript frank's
00:05 - courses are top notch and he has a
00:07 - really creative way of presenting things
00:09 - you are going to love this course hi
00:11 - coders in this class we will use html
00:14 - css and javascript to build nine
00:16 - separate game development projects i
00:19 - will write and explain all the code from
00:21 - scratch line by line using just plain
00:23 - vanilla javascript no frameworks and no
00:26 - libraries we will start by learning
00:28 - individual 2d game development
00:30 - techniques on smaller standalone
00:32 - projects and once we covered everything
00:34 - we apply all of them to build a simple
00:36 - mobile game simple point and shoot game
00:39 - and a more advanced fast-paced 3d side
00:41 - scroller with precise keyboard controls
00:43 - and special visual effects my name is
00:45 - frank and i'm a front-end web developer
00:48 - if you want to learn even more about
00:49 - game development and creative coding you
00:51 - can check out my youtube channel in this
00:53 - course we will learn everything you need
00:55 - to know about sprite animation we will
00:57 - write the javascript code that handles
00:59 - seamless endlessly scrolling parallax
01:01 - backgrounds we will learn how to extend
01:03 - javascript classes to create a variety
01:05 - of enemy types with different visuals
01:07 - and different behaviors i will show you
01:09 - how to implement state design pattern to
01:11 - manage player states and special
01:13 - abilities we will learn how to use
01:15 - collision detection by color collision
01:17 - between circles and between rectangles
01:20 - we will add different particle effects
01:21 - and many other things this class is made
01:24 - out of nine separate standalone projects
01:26 - and a couple of special lessons so if
01:28 - you already know some of these
01:29 - techniques you can skip around this
01:31 - class is not for complete beginners but
01:33 - if you are already comfortable with the
01:34 - basics of javascript and you understand
01:36 - functions for loops objects and arrays
01:39 - come join me and let's build some games
01:41 - in the first class we will explore two
01:43 - different javascript techniques you can
01:45 - use to animate sprite sheets and we will
01:47 - build this project where you can choose
01:49 - different player animations from the
01:50 - dropdown we are giving away a lot of
01:52 - free art assets you can download them in
01:54 - the video description and you can use
01:56 - them to follow along with this course
01:58 - for more beautiful game art assets visit
02:00 - this website now let's do a quick
02:02 - javascript setup i will show you how
02:04 - little code you need to animate
02:05 - something on canvas i create a custom
02:07 - variable called canvas that will hold a
02:10 - reference to my actual html canvas
02:12 - element i created in index.html i point
02:15 - javascript towards it using
02:17 - getelementbyid and i pass it id i gave
02:19 - it canvas1
02:21 - constant variable i call for example ctx
02:23 - shortcut for context is equal to this
02:26 - canvas variable from line one dot get
02:28 - context and i pass it to d i could also
02:31 - pass it webgl here which would give us
02:33 - access to a completely different set of
02:35 - drawing methods but that's for another
02:36 - video
02:37 - now i have all canvas 2d drawing methods
02:40 - stored in my custom ctx variable and i
02:43 - can call them from here for example ctx
02:46 - fill rect will call a method to draw a
02:48 - rectangular canvas if i console.log ctx
02:51 - we can inspect this object it has some
02:53 - properties which basically are global
02:55 - canvas settings such as fill style that
02:57 - says color of shapes we draw or font
03:00 - which sets size and font family of text
03:03 - we draw on canvas
03:05 - this tutorial will be focused on sprite
03:07 - animation we want to learn how to create
03:09 - animated characters for games so we are
03:12 - most interested in building canvas draw
03:14 - image method which sits right
03:16 - here i will explain everything you need
03:19 - to know about draw image method and its
03:21 - three versions in a minute it's easy
03:23 - don't worry about it
03:25 - before we do that i will quickly finish
03:26 - canvas setup
03:28 - to make sure we have correct scaling i
03:30 - need to set canvas width and canvas
03:32 - height by default canvas will be set to
03:35 - 300 x 150 pixels
03:37 - and our drawings can come out distorted
03:40 - that's why i will manually set it to 600
03:42 - x 600 the same values i gave it in style
03:45 - css
03:46 - i create a custom variable called canvas
03:48 - width i will use capital letters here to
03:50 - make it clear this is a global variable
03:53 - i set it equal to canvas from line 1 dot
03:56 - width
03:57 - and i set it all to 600
04:00 - same width i gave it in style css
04:05 - i do the same for canvas height also 600
04:10 - now that we made sure scaling is correct
04:12 - let's bring an image into the project
04:15 - in this tutorial i want to show you two
04:17 - different ways you can animate sprites
04:19 - very simple one for beginners and then
04:21 - more advanced more complex and flexible
04:23 - way where you can just run commands like
04:25 - run jump sit and it will play the
04:27 - correct animation for us when you know
04:30 - both you can decide which one to use
04:31 - when you are building your games i want
04:33 - everyone to get the same result that's
04:35 - why i will be giving away this animated
04:37 - sprite sheet for free today
04:40 - to bring image into javascript project i
04:42 - can just declare a custom variable i
04:44 - call for example player image and i set
04:46 - it equal to new image like this
04:49 - this is a built-in image class
04:51 - constructor it will create html image
04:53 - element same as you would create if you
04:55 - put image tag img tag in index html
04:59 - markup
05:00 - we can append it to our web page if you
05:02 - want
05:03 - but today we will just use it to store
05:04 - that spreadsheet image for us so that we
05:06 - can animate it with the javascript
05:09 - i need to give it source
05:11 - so player image variable from line 6 dot
05:13 - src and i set it to path to my sprite
05:16 - sheet your path might be different it
05:18 - depends on how you organized your
05:20 - project files
05:21 - let's animate something on canvas i
05:23 - create a custom function called for
05:25 - example draw frame
05:27 - actually let's call it animate because
05:29 - this is our animation loop let's make
05:30 - sure that's clear
05:33 - inside animation loop first i want to
05:35 - clear old paint from canvas between
05:37 - every animation frame so i take ctx
05:39 - variable from line 2
05:42 - dot clear rectangle built-in method
05:45 - it expects four arguments to specify
05:47 - what area on canvas we want to clear
05:50 - i want to clear the entire canvas so
05:52 - from coordinates 0 0 to canvas with
05:55 - canvas height
05:58 - now we can draw
06:00 - i will just test if everything works by
06:02 - drawing a simple rectangle at position
06:04 - 50 50 and i give it width and height of
06:06 - 100 pixels
06:08 - now i can call a request animation frame
06:11 - built-in method which will simply run a
06:13 - function we pass to it it will call that
06:15 - function once
06:17 - if i pass it animate the name of its
06:19 - parent function from line 9 it will just
06:21 - run over and over create an animation
06:24 - loop
06:25 - so we declared animate i also have to
06:27 - call it like this and we have a black
06:29 - rectangle drawn on canvas
06:31 - if we don't specify fill style color of
06:34 - shapes on canvas always default to black
06:37 - it looks like a static image but it's
06:39 - actually animating the same rectangle
06:40 - over and over i can simply prove it by
06:43 - creating a global variable called x
06:45 - i set it to 0
06:47 - and here on line 12 i replace hard coded
06:49 - value with this variable and every time
06:52 - animation loop runs i increase x by 1. i
06:55 - told you you don't need much code to
06:56 - animate something on canvas well done
06:59 - you are a programmer now see you later
07:02 - okay there's a bit more i can show you
07:04 - let's put it back and let's use built-in
07:07 - draw image method to draw our sprite
07:08 - sheet on canvas draw image method is a
07:11 - bit special you can pass it three or
07:13 - five or nine arguments depending on how
07:16 - much control do you want to have over
07:18 - the image you are drawing the first
07:20 - argument is always the image you want to
07:23 - draw so i pass it player image variable
07:24 - from line 6.
07:27 - then i pass it x and y coordinates where
07:30 - on canvas i want my image to be drawn
07:32 - if i pass it 0 for x and 0 for y it will
07:36 - be drawn from the top left corner of
07:38 - canvas coordinates 0 0
07:41 - it will also keep the image at the
07:43 - original width and height the sprite
07:45 - sheet i'm using has 10 rows and 11
07:47 - columns of animation frames
07:49 - it's many times larger than my canvas so
07:51 - now we can only see this small part 600
07:54 - times 600 pixels in the top left corner
07:56 - of my sprite sheet it's 600 x 600
07:59 - because that's the size
08:01 - i set my canvas to
08:03 - so this is the version of draw image
08:05 - with only three arguments it works and
08:07 - you can change x and y coordinates to
08:08 - move your image around but you would
08:10 - need to resize your images using some
08:12 - other programs such as microsoft paint
08:15 - or photoshop
08:16 - but you don't have to do that because
08:18 - draw image also accepts five arguments
08:21 - that's its second version if you pass it
08:23 - five arguments the fourth argument will
08:25 - be width and fifth argument will be
08:27 - height so we are now able to scale the
08:29 - image up and down and we can also
08:31 - stretch it vertically or horizontally if
08:33 - i pass it canvas width and canvas height
08:35 - it will stretch the image to match my
08:37 - canvas area 600 600 pixels and since the
08:41 - image is not the same ratio as my canvas
08:43 - you can see the image is stretched just
08:45 - a little bit let's remove the black
08:47 - rectangle by commenting out line 11.
08:51 - i can pass any values as width and
08:53 - height and javascript will just stretch
08:54 - my image based on these values
09:01 - you can also change x and y to move the
09:03 - entire image around
09:05 - the final third version of draw image
09:07 - method accepts nine arguments this gives
09:10 - us the most control over the image the
09:12 - first argument again is the image you
09:14 - want to draw the next four arguments
09:16 - determine rectangular area we want to
09:18 - cut out from the source image source x
09:21 - source y
09:22 - source width and source height
09:25 - and the last four arguments will tell
09:26 - javascript where on our destination
09:29 - canvas we want to draw just that cropped
09:32 - out part onto
09:34 - destination x destination y destination
09:37 - with and destination height
09:42 - these last four values basically work
09:44 - the same as these four values in the
09:46 - previous draw image call
09:48 - i showed you the only difference is they
09:50 - are not used to position and stretch the
09:52 - entire image but just the area we cut
09:55 - out using these arguments
09:57 - i comment outline 12 but i will leave it
09:59 - here for reference
10:01 - and on line 13 i will add source x
10:04 - source y source width and source height
10:07 - arguments and i will use them to cut out
10:09 - only one dock at a time
10:11 - one frame from my large sprite sheet
10:16 - so these four values determine area we
10:18 - cut out from the original sprite sheet
10:21 - and these four values determine where on
10:24 - canvas we want to place that cut out
10:26 - piece of image on two
10:32 - if i set source x to 0
10:35 - source y to 0 source width to 200 source
10:38 - height to 200 we are cutting out square
10:41 - 200 x 200 pixels from the top left
10:44 - corner
10:46 - there is nothing in the area
10:50 - if i change it to square 400 times 400
10:53 - pixels we can see part of our dog
10:57 - i can put any values here and cut out
10:59 - any chunk of the original sprite sheet i
11:01 - want i can also scale it stretch it i
11:04 - can do whatever i want here
11:17 - i create a global variable called sprite
11:20 - with let's have a look at our sprite
11:22 - sheet if i take width of the entire file
11:25 - and divide it by number of columns i get
11:27 - width of one frame
11:29 - my spreadsheet is
11:31 - 6876 pixels wide and it has 12 columns
11:37 - 6876 divided by 12 is 573
11:42 - i will use 575 for now because i made
11:45 - the last frame a bit smaller when
11:47 - assembling my sprite sheet in photoshop
11:49 - and there's some margin that snuck in
11:52 - sometimes when you see that your
11:53 - animation is moving sideways when it
11:55 - shouldn't try to fix it by adjusting
11:57 - width and height by small pixel amounts
11:59 - and watch what happens i will show you a
12:00 - bit later what i mean it's simple you
12:02 - can just ignore it for now
12:04 - sprite height or height of a single
12:07 - frame will be height of my entire sprite
12:09 - sheet which is
12:10 - 5230 divided by the number of rows we
12:13 - have 10 animations 10 rows so 5 230
12:17 - divided by 10 is 523
12:27 - on line 15 i can replace source width
12:30 - and source height with sprite width and
12:32 - sprite height variables i just
12:33 - calculated
12:37 - and now we are cropping out exactly one
12:39 - frame from our sprite sheet
12:44 - and in destination width and destination
12:45 - height instead of stretching it to cover
12:48 - the entire canvas i can also use sprite
12:50 - width and sprite height variables here
12:52 - and we are drawing the frame at its
12:53 - original size
12:55 - if you are still not clear what each of
12:57 - these individual arguments passed to
12:59 - draw image method does feel free to play
13:01 - with it change the values and see what
13:03 - happens it's quite straightforward once
13:05 - you get used to it
13:07 - here i'm giving it an image i want to
13:09 - draw these four values specify a
13:11 - rectangle area to crop out from the
13:14 - original large sprite sheet and here i
13:16 - am telling it where i want that cropped
13:19 - out piece of my sprite sheet to be
13:21 - displayed on canvas
13:28 - if i set source x coordinate to 1 times
13:30 - sprite width i'm jumping one frame as
13:33 - this number increases i am moving to the
13:35 - right jumping by the amount of sprite
13:37 - width
13:43 - this way i can display my animation row
13:45 - frame by frame
13:48 - when this number gets too high there
13:50 - will be no frame there eventually
13:52 - so source x argument allows us to cycle
13:54 - through sprite sheet horizontally
13:57 - if i want to swap between different
13:58 - animations the way our spreadsheet is
14:00 - structured i have to travel through it
14:02 - vertically
14:03 - we have source y argument for that
14:07 - again starting from top would be 0 x
14:10 - sprite height variable from line 9 and
14:13 - that will give me the top row
14:15 - in this case we have idle animation
14:17 - there one times sprite height is row 2
14:20 - jump animation
14:22 - then there is fall animation running and
14:24 - so on
14:26 - traveling through the sprite sheet
14:27 - vertically along the y axis switches
14:30 - between different animations and we do
14:32 - it by changing source y argument
14:34 - traveling horizontally cycles between
14:36 - individual frames of these animations
14:38 - and can be done by changing value we
14:40 - pass as source x argument
14:47 - instead of manually changing numbers
14:48 - like this let's output it to variables
14:54 - i create variables called frame x and
14:56 - frame y and i set them to 0 initially
14:59 - then i just replace hard coded zeros
15:02 - inside my draw image method with frame x
15:04 - and frame y and now i can swap between
15:07 - animation frames by assigning different
15:09 - values to these variables
15:11 - frame x cycles through frames of each
15:14 - animation horizontally frame y swaps
15:17 - between different animations it travels
15:19 - through my sprite sheet vertically
15:21 - now let's cover a very simple way you
15:23 - can animate your sprites and then i will
15:25 - show you proper advanced scalable
15:27 - technique that is suitable for both
15:29 - small and larger game projects
15:32 - the simple way is this we know that
15:34 - frame x variable cycles through our
15:36 - spreadsheet horizontally first row in
15:38 - our sprite sheet is idle animation it
15:40 - has 7 frames inside animation loop on
15:43 - line 18 i can say if frame x from line
15:46 - 10 is less than 7
15:48 - increase frame x by 1 frame x plus plus
15:55 - else meaning when it's equal or larger
15:57 - than seven reset it back to zero
16:01 - you can notice two things our animation
16:03 - is blinking and it's going very fast
16:06 - let's deal with it
16:07 - first frame is zero so last frame is
16:10 - actually position six if i change this
16:12 - to six the empty frame is removed and
16:14 - blinking is gone
16:25 - on line 11 i can just change values of
16:28 - frame y
16:29 - and we are animating different rows in
16:31 - the sprite sheet
16:39 - problem comes when i get to frame y 4
16:41 - which is row 5. we are starting from 0.
16:44 - this animation has 11 frames but i'm
16:47 - cycling only until frame 6 so we are not
16:50 - playing the entire animation
16:57 - when i get to this row we have a problem
17:00 - again sitting animation has 5 frames and
17:02 - we are cycling through more frames here
17:05 - so now it's blinking because we are
17:07 - including some empty frames
17:09 - to get this to work properly every time
17:11 - we want to swap between animations we
17:13 - have to change frame y value on line 11
17:16 - but also this hard hard-coded number 6
17:18 - on line 18.
17:19 - ideally it would have to be a variable
17:21 - that always changes to the correct value
17:23 - that reflects the number of frames for
17:24 - each animation row depending which one
17:27 - we are animating right now
17:29 - i would solve it by having variable
17:31 - called for example max frame i would
17:33 - slot it here and every time i change
17:36 - frame y variable i would change value of
17:38 - that max frame variable from 6 to
17:40 - whatever value we need here to display
17:42 - all frames so 10 for this row and 4 for
17:46 - this row since we are animating from
17:48 - frame 0.
17:52 - animation is going very fast to slow it
17:54 - down we can use this simple trick
17:57 - i will create a led variable called the
17:59 - game frame and i set it to 0.
18:04 - on line 22 inside animation loop i take
18:07 - this game frame variable and for every
18:09 - loop we increase it by 1. so now game
18:12 - frame is endlessly increasing as our
18:14 - animation loop runs over and over
18:17 - on line 19 i create an if statement let
18:20 - me just write it and i will explain it
18:22 - when we see the whole thing
18:24 - i say if game frame modulus percentage
18:27 - symbol something question marks for now
18:30 - is equal to 0
18:32 - only then increase frame x
18:36 - on line 13 i create a custom constant
18:38 - variable called stagger frames whatever
18:41 - value i give it it will slow down
18:43 - animation by that amount
18:45 - let's try 5
18:48 - on line 20
18:49 - i say if game frame modulus stagger
18:52 - frame is 0
18:54 - only then increase frame x
18:57 - modulus operator percentage symbol is
18:59 - also called remainder operator it
19:02 - returns remainder when we divide the
19:04 - first number by the second
19:06 - let's say game frame is 17 and stack of
19:09 - frames is 5 17 modulus 5 is 2 because 17
19:14 - divided by 5 is 3 that gives us 15 and
19:18 - remainder to 17 is
19:22 - 2. remainder operator simply divides the
19:25 - first operand by the second one and
19:28 - returns the remainder here i am checking
19:30 - if the remainder is zero
19:32 - game frame is ever increase in the
19:34 - number and stagger frames is always 5.
19:38 - this statement will return remainder 0
19:41 - and be true every 5 frames
19:45 - so because i set stagger frames to 5
19:48 - this code block on line 20 will run
19:50 - every 5 frames slowing down our
19:52 - animation 5 times
19:55 - new frame in our sprite sheet will only
19:57 - be served every time the main animation
19:59 - loop runs 5 times
20:02 - i can also slow it just by 2.
20:08 - 0 here will stop animating the higher
20:11 - the number you use here as stagger
20:13 - frames the slower the animation will be
20:22 - let's leave it at 5 for now i think it
20:24 - looks good for most animations
20:29 - as i said when i change frame y to 4 if
20:32 - i want to display all frames in my
20:34 - animation i also have to change 6 here
20:37 - on line 21 to number 9.
20:44 - for shorter animation rows like this
20:46 - sitting animation it has only 5 frames
20:48 - so i have to change this number to 4.
20:51 - so now we have a way to swap between
20:53 - animations but we always have to change
20:56 - two values
21:09 - let's refactor this code and let me show
21:11 - you more advanced sprite animation
21:13 - method that allows us swooping between
21:15 - different animation states by changing
21:18 - just one value we are venturing into a
21:20 - bit more advanced territory if you are
21:23 - new to javascript don't worry if it
21:24 - takes you a bit longer to understand
21:26 - what i'm about to show you it becomes
21:28 - easier with practice we all started
21:30 - somewhere
21:31 - i delete code between lines 20 and 23 we
21:34 - used it to cycle between animation
21:36 - frames horizontally in this more
21:38 - advanced method we will do it
21:39 - differently
21:41 - i set frame y to zero that's my top row
21:44 - idle animation
21:46 - i also delete lines 17 and 18. they are
21:48 - commented out anyway
21:50 - let's clean this up
21:53 - inside animation loop on line 17 i
21:55 - create a let variable called for example
21:57 - position its job will be to cycle
22:00 - through horizontal sprite sheets but in
22:02 - a different way we will need this later
22:05 - i take a game frame variable from line
22:07 - 12. this variable is increasing over and
22:10 - over on line 20 as animation loop runs i
22:13 - divide it by stagger frames variable
22:16 - from line 13
22:18 - and i wrap all of this in math.floor to
22:21 - get rid of potential decimal points i
22:24 - want this value to be only integers
22:26 - whole numbers without decimal points
22:29 - then i take this entire value and i do
22:31 - remainder operator and six
22:34 - six is here because i'm doing idle
22:36 - animation which has six frames counting
22:38 - from zero this line of code is not the
22:41 - easiest thing to wrap your head around i
22:43 - said this would be slightly more
22:45 - advanced don't worry if you're
22:46 - struggling to read this this is not
22:48 - beginner level javascript anymore what's
22:50 - happening here on line 17
22:52 - game frame divided by stagger frames
22:55 - means we will have to increase game
22:57 - frame 5 times before we get to 1
23:01 - because as game frame variable increases
23:03 - 1 divided by 5 is 0.2 2 divided by 5 is
23:07 - 0.4 3 divided by 5 is 0.6
23:11 - game frame 4 divided by stagger frames 5
23:14 - is 0.8 and only when we get to game
23:18 - frame 5 divided by stagger frame 5 we
23:21 - get value of 1 here
23:23 - so as game frame cycled from 1 2 3 4 5
23:28 - by dividing game frame by stagger frames
23:31 - we go to 0 0.2 0.4 0.6 and 0.8
23:37 - all of these values were turned into
23:39 - zeros because it's wrapped in mastered
23:42 - floor it took five animation loops five
23:45 - increases of game frame variable to get
23:47 - the number one here when this is 1
23:51 - 1 modulus 6 is 1 because 1 divided by 6
23:55 - is a 0 and remainder from 0 to 1 is 1.
24:00 - basically this value increases by 1
24:03 - every time game frame variable increases
24:05 - by 5 slowing or staggering our animation
24:09 - 5 times making it 5 times slower
24:12 - we are using math.floor removing decimal
24:15 - points from these
24:16 - divisions for the first five frames we
24:19 - get zero modulus six which is zero then
24:22 - this calculation increases to one for
24:25 - the next five frames one modulus six is
24:28 - one
24:28 - then two modulus six is a two 3 modulus
24:32 - 6 is 3 and so on
24:34 - position variable increases until it
24:36 - reaches 6. 6 modulus 6 is 0 7 modulus 6
24:41 - is 1 8 modulus 6 is remainder 2 and so
24:44 - on this calculation makes sure position
24:47 - variable only cycles between a 0 and
24:50 - this number
24:51 - i appreciate that this calculation is
24:53 - quite complex this is not course in
24:55 - advanced mathematics and logic so for
24:58 - now just take this little formula here
24:59 - and believe me when i say it works don't
25:02 - worry about understanding it completely
25:03 - we are focusing on javascript today
25:06 - being able to understand this
25:07 - calculation has nothing to do with your
25:08 - ability to be good with javascript these
25:11 - are two unrelated skills
25:23 - on line 18 i take frame x variable from
25:26 - line 10
25:27 - and i set it equal to sprite width from
25:30 - line 8
25:31 - and i multiplied by this position
25:33 - variable we just calculated on line 17.
25:36 - as i said this position variable will
25:39 - cycle between 0
25:40 - and number we put here
25:43 - first row in my sprite sheet has 7
25:45 - frames starting from 0 frame x will be
25:49 - cycling through these values
25:50 - horizontally
25:53 - on line 19 inside the draw image i
25:56 - remove sprite width because width of our
25:59 - sprites is already accounted for inside
26:01 - my frame x variable on line 18.
26:04 - i misspelled stagger frames on line 17.
26:07 - when i fix this small typo we can see
26:09 - this is working and we are animating row
26:11 - 1 in our sprite sheet
26:14 - don't feel that you need to fully
26:15 - understand this calculation online 17 to
26:18 - be good at javascript i did not come up
26:20 - with this formula tricks like this are
26:22 - usually figured out by someone much
26:23 - smarter than me we can just use them and
26:26 - they will work for us i could have
26:27 - achieved the same result using a bit
26:30 - more code
26:31 - and simple more readable calculations
26:34 - this is more complex and hard to read
26:36 - for beginners because it's such a short
26:37 - calculation it's kind of a neat trick to
26:40 - use this but it's not a necessity i like
26:43 - it because it makes the code look clean
26:44 - and compact
26:46 - i can still change value of stagger
26:48 - frames variable on line 15 and it will
26:50 - slow down or speed up my animation
26:55 - this is really nice code base to animate
26:57 - any sprite sheet but it can be done even
26:59 - better to swap between animations i
27:02 - still have to change frame y variable on
27:04 - line 11 and i have to make sure that
27:06 - this value on line 17 sets the correct
27:09 - amount of frames per row to make sure we
27:11 - don't have any empty frames or that we
27:13 - are animating all available frames from
27:15 - that particular row depending on what
27:17 - animation we are currently drawing
27:34 - i would like to have code structure like
27:36 - this
27:38 - some kind of data array called for
27:39 - example sprite animations that contains
27:42 - objects
27:43 - each object's name in this array is the
27:45 - same as the name of that particular
27:47 - animation it holds data for so for
27:49 - example idle jump run and so on
27:53 - each of these objects can contain
27:55 - additional data for example for
27:57 - irregular sprites it can be pixel values
27:59 - for width and height that can be
28:01 - different for each frame and mainly it
28:03 - will contain locations array
28:06 - this location array will hold a set of
28:08 - javascript objects and each of these
28:11 - objects will have x and y property
28:13 - each of these objects represents one
28:16 - frame in that particular animation
28:18 - and its x and y properties will be
28:20 - coordinates we need if we want to use
28:22 - draw method to cut out this particular
28:25 - frame from the sprite sheet
28:27 - that way we can access any frame we want
28:30 - anytime by directly targeting positions
28:32 - in this array i can just cycle through
28:35 - this location array with a for loop and
28:38 - it will always play the entire animation
28:40 - for me without the need to set up number
28:42 - of frames each animation has each time
28:44 - it will know how many frames that
28:46 - animation has based on the number of
28:48 - objects in this location array
28:50 - each object will be one frame
28:53 - so how do we create a data structure
28:54 - like this with javascript and how do we
28:57 - map it correctly to match our sprite
28:58 - sheet let me show you
29:04 - on line 14 i create a custom constant
29:06 - variable i call for example sprite
29:08 - animations and i set it equal to an
29:10 - empty array
29:11 - this will serve as the main container to
29:13 - hold all data for all my animations
29:17 - i will create another variable i call
29:19 - animation states
29:20 - this will also be an array and i will
29:23 - use it as a place where i can create
29:24 - kind of a simple map that will match my
29:27 - docs sprite sheet
29:28 - i will go through my sprite sheet row by
29:30 - row from top to bottom for every
29:33 - animation row in my sprite sheet i will
29:35 - create an object like this
29:38 - with two properties name property will
29:40 - be whatever i want to call that
29:42 - animation row so for the first row
29:45 - let's call it idle
29:46 - and i will also need frames property i
29:49 - check my sprite sheet and i see that
29:51 - idle animation is made out of 7 frames
29:57 - the second row i will call jump
29:59 - animation and it has 7 frames i will
30:03 - create an object like this for every row
30:05 - in my sprite sheet going from top to
30:07 - bottom but before i do that let's check
30:09 - if it works
30:11 - on line 15 i have this animation states
30:13 - array which currently contains two
30:16 - objects one for idle and one for jump
30:19 - animation
30:20 - i could have also given it more
30:21 - properties but this sprite sheet is not
30:24 - irregular so name and frames properties
30:26 - is all i need to map coordinates for
30:29 - each animation frame
30:31 - i take animation states array and i call
30:33 - build in array for each method for each
30:36 - method execute provided function once
30:39 - for each array element i will do es6
30:43 - syntax here this is so called arrow
30:45 - function
30:46 - it's a simplified syntax to write
30:49 - function expression in javascript
30:51 - i can skip function keyword here and i
30:54 - just create brackets where arguments i
30:56 - pass to this callback function go with
30:59 - for each the first argument we pass to
31:01 - it is just a variable that will
31:03 - represent each element in the array as
31:05 - we are cycling through it
31:07 - i will call it state as for each method
31:10 - runs state will first represent this
31:13 - object then this object and so on if we
31:15 - add more
31:16 - i'm simply saying inside this callback
31:18 - function i'm about to write refer to
31:21 - these objects as state so this name
31:24 - property can be accessed as state dot
31:27 - name for example
31:28 - i'll also pass it second argument i call
31:31 - index
31:32 - index is another built-in feature of for
31:34 - each array method it simply stores
31:36 - number of each element as we cycle
31:39 - through the array so this first object
31:41 - will have index 0
31:43 - this will have index 1 and so on i
31:45 - expect you understand basic array
31:47 - manipulation with javascript and
31:48 - fundamental methods like for each but i
31:50 - still wanted to explain in case we have
31:52 - some beginners here
31:54 - so this callback function will run for
31:56 - each element in my animation states
31:58 - array now i want to run through
32:00 - animation states and create data
32:02 - structure like this
32:04 - that maps my sprite sheet and
32:05 - coordinates for each frame
32:09 - i create lead variable called frames and
32:11 - i set it equal to an object inside i
32:14 - will have property called loc location
32:17 - that will be an empty array for now
32:21 - i will create a for loop that will cycle
32:23 - through state dot frames property so for
32:26 - idle animation it will run seven times
32:29 - as i set it here on line 18.
32:31 - every time this for loop runs i want to
32:33 - calculate x and y coordinates of that
32:35 - animation frame from my sprite sheet and
32:38 - i want to place them inside location
32:40 - array on line 27
32:42 - how do i calculate that
32:45 - i create a temporary variable called
32:47 - position x and it will be equal to j
32:49 - variable from the for loop times sprite
32:52 - width that i set to 575 pixels earlier
32:56 - as the for loop runs and j increases
32:58 - position x will be calculated for each
33:00 - frame
33:01 - i will also need position y which will
33:03 - be index from line 25 times sprite
33:06 - height we declared sprite height earlier
33:09 - and we set it equal to 523 pixels to
33:12 - match our sprite sheet
33:14 - position y will be the same for all
33:16 - seven frames of idle animation when for
33:19 - each method moves to the second
33:20 - animation object here
33:22 - index will increase and for that
33:24 - animation row different position y will
33:26 - be calculated
33:28 - this might be quite a lot going on if
33:30 - you are a beginner this is more advanced
33:32 - than the first sprite animation method
33:34 - don't feel discouraged if you are
33:35 - struggling to follow it takes time and
33:37 - practice it wasn't easy for any of us at
33:39 - first
33:41 - so this for loop calculates position x
33:43 - and position y for each frame as it
33:46 - cycles through my sprite sheet
33:48 - every time we calculate x and y i take
33:51 - frames dot location array from line 27
33:54 - and i use push method
33:57 - i create another small object here on a
33:59 - fly
34:00 - it has x property set to position x from
34:03 - line 30 and y property set to position y
34:07 - from line 31 i push these values into my
34:10 - location array on line 27
34:13 - so this for loop will run through all
34:15 - the frames in one row
34:17 - in this case seven times and once we
34:19 - create seven objects with x and y
34:21 - coordinates and push them into location
34:23 - array i take sprite animations array
34:25 - from line 14 and i create a new key in
34:28 - there
34:29 - i will create something called key value
34:31 - pair key is the name of the property
34:34 - value is the value of that property
34:36 - so i'm taking sprite animations array
34:39 - from line 14 and i'm passing it state
34:42 - dot name which will first refer to idle
34:45 - then to jump as for each method runs
34:47 - through animation states array
34:50 - i'm saying create a new key new property
34:52 - in sprite animations array call it idle
34:56 - and its value will be frames from line
34:58 - 27 frames object contains locations
35:01 - array which i just filled with seven
35:03 - objects that contain x and y properties
35:06 - for each frame in this animation
35:09 - that's it we created the data structure
35:11 - that maps locations in my sprite sheet i
35:14 - can console log it now
35:20 - i can see i made a typo here on line 29
35:23 - you probably noticed it already
35:25 - this should be j not s
35:28 - so now i'm going to consoling animation
35:30 - states from line 15 that's fine but what
35:32 - i actually want to see is sprite
35:34 - animations array from line 14 which we
35:36 - just created and filled with data
35:39 - you can see that my sprite animations
35:41 - contains two properties called idle and
35:43 - jump
35:44 - if i look inside each contains a
35:46 - location array from line 27 and number
35:49 - of elements in that array corresponds to
35:51 - frames i declared for each animation
35:54 - each of these values was calculated here
35:56 - on lines 30 and 31 you can see that all
36:00 - y coordinates for idle are 0 and for
36:02 - jump animation vertical y coordinate is
36:05 - 523
36:06 - as we moved on to the second row in our
36:08 - sprite sheet
36:12 - now i can replace hard-coded number six
36:14 - here on line 40 with length of this
36:17 - location's arrays
36:19 - i access this location array by
36:21 - targeting sprite animations dot lock
36:23 - actually no i skipped one level i need
36:25 - to specify if i want location array for
36:28 - idle or jump
36:30 - let's just hard code idle here for a
36:32 - moment and i want length of this array
36:35 - remember i am just replacing hard coded
36:37 - number six that was here so dot length
36:41 - and that's it now it's dynamic i can add
36:44 - animations with 4 or 15 frames per row
36:47 - or however many i want and it will still
36:49 - work with no blank or left out animation
36:52 - frames here i am accessing sprite
36:54 - animations from line 14
36:56 - idle
36:57 - location dot length
37:03 - inside animation loop we are still
37:05 - calculating frames using frame x and
37:07 - frame y variables from lines 10 and 11.
37:10 - we don't need these anymore because now
37:12 - we have the exact coordinates stored in
37:14 - locations array
37:16 - i delete lines 10 and 11.
37:20 - on line 40 i add let keyword in front of
37:23 - frame x
37:24 - and i will declare frame y variable here
37:27 - frame y is just the value we can see
37:29 - here so i can access it by saying sprite
37:33 - animations idle
37:38 - dot location at index position from line
37:41 - 39 dot y
37:43 - i could do the same thing for frame x or
37:45 - i can just leave it as is both will work
37:48 - let's replace idle with a jump
37:53 - it breaks
37:54 - notice that row 1 with idle animation
37:57 - was working and row 2 doesn't which
38:00 - suggests something is wrong with how we
38:02 - draw vertical position
38:04 - inside the draw image on line 43 i
38:06 - remove sprite width value from source y
38:09 - argument we don't need it anymore as
38:10 - frame y contains complete already
38:13 - calculated coordinate
38:15 - now i can go back inside animation
38:17 - states array and i add data for all the
38:19 - remaining animations
38:21 - it's important to understand that you
38:22 - can't skip rows here you have to go row
38:25 - by row from top to bottom to match your
38:27 - sprite sheet because vertical y
38:29 - coordinate is tied to index in for each
38:32 - method
38:33 - i add full animation with 9 frames
38:37 - run animation has 9 frames
38:40 - dizzy 11 frames
38:42 - seat has only 5 frames
38:44 - roll seven frames and so on
38:48 - i also need to make sure there is comma
38:50 - between every object
38:58 - if i try fall i can blink in
39:00 - there must be an empty frame
39:02 - full animation is actually only 7 frames
39:08 - if i put less here we play only part of
39:10 - animation if i put more here we get
39:12 - blinking because some frames are empty
39:19 - run animation works
39:22 - dizzy works
39:24 - seat animation works as well
39:26 - you can see seed animation has 5 frames
39:29 - and this animation has 11 frames and i
39:32 - can swap between them easily without
39:34 - having to manually change number of
39:35 - frames like we did before
39:39 - roll animation works
39:41 - byte animation works let's go back to
39:43 - idle
39:45 - putting hard-coded text here like this
39:47 - is not ideal of course i go up to line
39:49 - 10 and i create a variable called player
39:52 - state
39:53 - i set it to run initially
39:56 - down on line 71 and 73 i replace idle
40:00 - with this new player state variable
40:03 - now i can swap between animations here
40:05 - on line 10.
40:10 - so it works
40:12 - jump works
40:14 - full works
40:18 - in index html i create a new div with a
40:20 - class of controls inside there will be a
40:23 - select element with an id of animations
40:26 - and name animations
40:31 - label for animations will say choose
40:33 - animation
40:41 - i give it some options that match names
40:43 - we gave to animations in script js file
41:05 - in style css i target controls and i
41:07 - give it position absolute set index 10
41:12 - top 50 pixels
41:17 - and transform translate x minus 50
41:20 - to center it horizontally
41:23 - i take controls select and option and i
41:26 - increase their font size to 25 pixels
41:30 - i can also remove the border around my
41:32 - canvas
41:34 - i want animations to change when i
41:36 - choose different value in this drop down
41:39 - in script js i take player state from
41:41 - line 10
41:44 - and i put it up top on line 1.
41:48 - i create a constant variable called
41:49 - drop-down and i point it towards this
41:52 - new select element with id of animations
42:00 - i take drop down and call add event
42:02 - listener on it i will listen for change
42:05 - event
42:07 - every time its value changes
42:11 - we will take player state from line 1
42:13 - and since we are inside callback
42:15 - function on event listener we have
42:17 - access to event object i'm referring to
42:20 - it as e event object has target property
42:23 - target is simply referring to an element
42:25 - that was clicked and it has value
42:27 - property because i have added values
42:29 - myself
42:30 - whenever any of these option elements in
42:32 - my drop down is clicked player state
42:35 - variable will be set to its value
42:37 - attribute
42:38 - now i can easily swap between different
42:40 - animations in my sprite sheet just by
42:42 - selecting different options in a drop
42:44 - down
43:08 - parallax scrolling is when background
43:10 - images move past the camera slower than
43:13 - the foreground creating an illusion of
43:15 - depth in a 2d space
43:18 - this is what my game looks without it
43:21 - and this is what it looks with parallax
43:24 - which one do you prefer
43:25 - today we are learning about vanilla
43:27 - javascript game development for
43:28 - beginners and by the end of this video
43:31 - you will have deep understanding about
43:33 - endlessly scrolling backgrounds and how
43:35 - to add parallax effect to your games and
43:38 - websites when we have full control of
43:40 - individual layers we can match scroll
43:42 - speed to different actions our game
43:44 - character takes for example my dog
43:47 - character can sit down and the game
43:49 - stops moving or it can do this rolling
43:51 - attack and the game speeds up art assets
43:54 - for this episode were created by this
43:56 - amazing artist check out their website
43:58 - for more if you want what is the easiest
44:01 - way to create endlessly scrolling
44:02 - backgrounds how to make different layers
44:05 - move at different speeds to create
44:06 - parallax effect how to make scroll speed
44:08 - dynamics so we can easily change it we
44:11 - will learn all of that and more let's
44:13 - bring our coding skills one step further
44:15 - today together and have some fun with
44:17 - plain vanilla javascript this tutorial
44:20 - is for beginners let's go click the like
44:23 - please
44:25 - [Music]
44:27 - i create a basic web page markup in
44:29 - document head i use link tag to include
44:32 - my style css file
44:33 - we will use it to position canvas at the
44:36 - bottom of document body i place my
44:38 - script dark script.js file will contain
44:41 - all functionality and logic for our
44:43 - project
44:44 - i also create html canvas element with
44:47 - an id of canvas 1.
44:49 - it will be our main project area and we
44:52 - will draw on it with javascript
44:55 - in style css i take bodytalk and i set
44:57 - its background to black
45:02 - canvas will be set to position absolute
45:07 - border 3 pixels solid white
45:10 - width of 800 pixels height 700 pixels
45:14 - i do transform translate minus 50 for x
45:17 - axis and minus fifty percent for y axis
45:21 - and then i offset the top by fifty
45:23 - percent and left by fifty percent this
45:26 - will center my canvas in the middle of
45:28 - the page both vertically and
45:29 - horizontally
45:33 - in script.js i create a custom variable
45:35 - called canvas and i point it towards my
45:38 - html canvas element by id canvas 1.
45:43 - ctx shortcut for context will take this
45:46 - canvas variable from line 1 and it will
45:48 - call get context built-in method on it
45:52 - getcontext can only be called on a
45:54 - variable that holds a reference to
45:56 - canvas element and when i pass it
45:58 - argument that says 2d it will create an
46:01 - instance of built-in canvas 2d api
46:03 - object that contains all properties and
46:06 - drawing methods we will need today i
46:08 - need to make sure we have the correct
46:09 - scaling because if you don't set canvas
46:11 - width and height it will default to 300
46:14 - x 150 pixels
46:16 - i create a variable i call canvas
46:18 - underscore with all capitals to make it
46:20 - clear it's a global variable
46:22 - i set it equal to canvas from line 1 dot
46:26 - width which will access with attribute
46:28 - on html canvas element we created in
46:30 - index html
46:32 - and
46:33 - i set all to 800 pixels the same value
46:36 - we gave canvas with in style css
46:39 - i do the same thing for height canvas
46:42 - underscore height is equal to canvas dot
46:45 - height is equal to 700 pixels
46:48 - this is how you set up most canvas
46:50 - projects now we have our drawing board
46:52 - ready and we can focus on building
46:54 - parallax effect
46:56 - i want the scroll speed to be dynamic
46:58 - tied to a variable so that in our game
47:01 - we can speed up or slow down using
47:03 - special moves with our character to
47:05 - control scrolling speed i will declare a
47:07 - global variable called gamespeed and i
47:09 - will initially set it to for example 5.
47:12 - notice i didn't use const keyword here i
47:14 - used let that keyword in javascript is
47:17 - used to declare variables that can be
47:18 - reassigned to different values later i
47:21 - will need this to be able to dynamically
47:23 - change scrolling speed
47:26 - it's time to bring images to the project
47:28 - art for this episode was created by this
47:30 - artist i really like his art style you
47:32 - can download them in the video
47:34 - description you can use these images for
47:36 - learning purposes for commercial
47:38 - projects you will have to purchase a
47:39 - full license from his website this
47:42 - effect will also work with any other
47:43 - image but maybe you first want to use
47:46 - the same files i'm using so that you get
47:48 - the same result and don't have to worry
47:49 - about calculating different width and
47:51 - height or making sure your layers match
47:54 - once you fully understand the code from
47:55 - today's lesson it will be easy to switch
47:57 - the images and adjust values so that the
47:59 - code base works with your own files the
48:02 - images are very large if you experience
48:04 - any lagging or frame drops making images
48:07 - smaller will significantly improve
48:09 - performance i kept them large on purpose
48:11 - so that we get nice clean visuals but
48:14 - especially if you are creating a mobile
48:15 - game these images can be much smaller
48:18 - you can download the project files in
48:19 - the video description our background
48:21 - will have 5 layers it is perfect to
48:24 - demonstrate seamless parallax scrolling
48:26 - for games this is one of my favorite 2d
48:28 - game artists if you want you can go and
48:30 - check out his website i will leave a
48:32 - link in the video description he offers
48:34 - some free art assets you can play with
48:36 - and used in your games but if you want
48:38 - something a bit more special his prices
48:40 - are very affordable there aren't many 2d
48:43 - game artists out there so if you can
48:45 - help me out to support them and buy some
48:47 - of their assets for your projects it
48:49 - will help us to make our games unique
48:51 - and by purchasing from and supporting
48:53 - our artists they can make more beautiful
48:55 - game assets for us
49:00 - to bring image into our canvas project
49:02 - is very simple with javascript i create
49:04 - a constant variable called background
49:06 - layer 1 and i set it equal to new image
49:09 - this is built in image class constructor
49:11 - it simply creates an image element we
49:13 - can use append child built in javascript
49:16 - method and it would slot image tag img
49:19 - tag into our html file same as if we
49:22 - wrote that dark in index html ourselves
49:25 - we can also choose not to append it and
49:27 - it will stay hidden and it will just
49:29 - store the image for us
49:31 - image constructor has the same
49:33 - functionality as the
49:34 - document.createelement
49:36 - img we are simply creating html image
49:38 - element and saving it in this variable
49:41 - at first that image element is blank so
49:44 - i access its source property and i set
49:46 - it equal to layer 1.png
49:50 - for you the path might be different
49:52 - depending on how you structured your
49:53 - project files and folders i left my
49:55 - image files in the same folder with my
49:57 - script file for now we have 5 layers 5
50:00 - different images so let's do the same
50:02 - thing for all of them to bring them into
50:04 - the project
50:11 - let's create animation loop i create a
50:13 - custom function called for example
50:15 - animate it will contain all the code i
50:17 - need to draw my backgrounds
50:19 - i will be calling it over and over to
50:21 - create animation
50:23 - let's start by calling
50:25 - image built in canvas method this method
50:28 - will take image and it will draw it on
50:30 - canvas the first argument i pass it is
50:32 - the image i want to draw so background
50:34 - layer 1 from line 7.
50:37 - i want to draw it at coordinates 0 0 so
50:39 - from the top left corner of canvas
50:42 - then i call build in the request
50:43 - animation frame function and i pass it
50:45 - animate the name of its parent function
50:48 - from line 18.
50:52 - this way animate will run over and over
50:54 - creating my animation loop
50:56 - on line 19 i need to call draw image
50:59 - from my ctx variable from line 2.
51:02 - background layer 1 image is not the best
51:04 - one to use as an example let's try layer
51:07 - two
51:08 - layer three
51:11 - four
51:12 - five
51:14 - let's do this at first with layer four
51:16 - to see exactly what's going on and then
51:18 - we can throw in all the other layers it
51:20 - looks like a static image but it's
51:21 - actually animating over and over let me
51:24 - show you on line 18 i create a variable
51:26 - called x and i set it to 0. on line 21
51:30 - inside draw image method i replace
51:32 - hardcoded0 with this x variable and
51:35 - every time animation loop runs i
51:37 - decrease x by 1. this will make our
51:39 - image move to the left in a negative
51:41 - direction on horizontal x-axis the
51:44 - reason the image is being smudged like
51:46 - this is because we can see all previous
51:48 - frames we can see old paint if we want
51:51 - to see only the current animation frame
51:53 - we need to delete old paint i use built
51:55 - in clear rectangle method it expects
51:58 - four arguments to determine what part of
52:00 - canvas i want to delete i want to clear
52:03 - the entire canvas so from coordinates to
52:05 - 0 0 to canvas width canvas height now
52:09 - old paint is being deleted and we can
52:11 - only see the current animation frame
52:13 - image is moving to the left by 1 pixel
52:15 - per frame
52:16 - on line 5 we declare the gamespeed
52:19 - variable so down here on line 23 i can
52:21 - say x minus equals gamespeed and now
52:25 - scrolling of our game is attached to
52:27 - this gamespeed variable if i do 15 it
52:30 - moves much faster
52:32 - as you can see the background just moves
52:34 - endlessly to the left and eventually it
52:36 - leaves canvas empty
52:37 - these images were specifically crafted
52:40 - for endlessly scrolling games and they
52:41 - are seamless it means you can stack them
52:44 - next to each other and it will look like
52:46 - it's one repeating image i need to
52:48 - somehow detect when my image has moved
52:50 - off screen and i need to reset it so it
52:52 - can scroll again
52:54 - let's try it what if i say if x is less
52:56 - than minus 1000 pixels
53:00 - set it back to zero
53:03 - else x minus equals game speed i
53:06 - increase game speed to 15 here on line
53:08 - 5. you can see the image is reset in but
53:11 - we can clearly see the jump when the
53:13 - reset happens
53:14 - let's try 1600 on line 23 still it jumps
53:19 - i know that images we are using today
53:21 - are 2 400 pixels wide so what if i use
53:25 - 2400 pixels here
53:27 - and i also reset x to 2400
53:33 - now we have this image that is 2400
53:36 - pixels wide scrolling endlessly over the
53:38 - canvas
53:40 - and there is this black empty space that
53:42 - is also 2 400 pixels wide
53:50 - the trick people use is to simply draw
53:52 - the same image twice and always reset it
53:54 - the one that has moved off screen so
53:56 - that it's available to scroll again and
53:58 - canvas is never empty i will show you
54:01 - exactly what's going on using two
54:02 - separate x variables one for each image
54:05 - and then we will optimize it once we
54:07 - fully understand what's going on
54:09 - on line 18 i have x variable which will
54:12 - serve as horizontal position for one of
54:14 - my background images
54:16 - i will create variable i call for
54:17 - example x2
54:19 - that's for the position of my second
54:21 - identical image
54:23 - x will start at position 0
54:25 - and on lines 24 and 25 i have my reset
54:28 - checks to make sure it cycles around
54:30 - endlessly
54:31 - x2 will start where the first image ends
54:34 - since my images are 2400 pixels wide x2
54:38 - will be 2400 images we are using today
54:41 - are very large you might experience
54:43 - frame drops and login if you do you can
54:46 - make them smaller but maybe if you can
54:48 - just follow along with me till the end
54:50 - and then refactor your code and image
54:51 - files for performance just to make sure
54:53 - we are looking at the same numbers at
54:55 - first
54:56 - it makes it easier for you to debug your
54:58 - code if it's the same as mine
55:00 - once you fully understand this technique
55:02 - you can use it for any image size and
55:04 - any scroll direction your game needs
55:07 - on line 24 i just call draw image again
55:09 - for the same identical image but instead
55:11 - of drawing it at position x from line 18
55:14 - we will draw it at position x 2 from
55:17 - line 19 like this
55:21 - i also need to reset x2 the same way i'm
55:24 - resetting x this is so called spaghetti
55:26 - code we have some code repetition here
55:28 - and it doesn't look very clean yet i'm
55:30 - just doing it for complete clarity to
55:32 - show you what's going on we will
55:33 - refactor it later you will notice we
55:36 - have one problem when we do it this way
55:38 - but don't worry we will optimize it and
55:40 - fix everything i want even beginners to
55:42 - understand now i can see some frame
55:44 - drops because my images are large but i
55:46 - only see it on my screen recording
55:47 - software it still runs smooth in my
55:49 - browser don't worry about the frame
55:51 - drops at this stage it can be easily
55:53 - fixed by making our images smaller let's
55:55 - focus on the code first and make sure we
55:57 - understand it you might notice there is
55:59 - a gap between my images
56:09 - what's happening now i have image 1
56:11 - drawn at position x from line 18 and i
56:14 - have image 2 drawn at position x2 from
56:18 - line 19.
56:21 - the problem with this technique is that
56:22 - my images ignore each other they reset
56:25 - based on two different variables x and
56:27 - x2 these variables are completely
56:29 - disconnected so if width of my image is
56:32 - not divisible by gamespeed variable
56:34 - it can actually happen that this gap
56:37 - between images will grow larger or
56:39 - smaller over time and we really don't
56:41 - want that we want endlessly scrolling
56:43 - seamless background let's deal with it
56:45 - step by step so what's this gap between
56:48 - my images why is it there and how do i
56:50 - offset my images to get rid of it part
56:52 - of the gap is my game speed because
56:54 - these if statements that reset x and x2
56:57 - happen independently of each other we
56:59 - have situations where x resets and x2
57:03 - will move 15 pixels to the left for that
57:06 - frame 15 pixels because that's what my
57:08 - gamespeed variable is set to on line 5
57:10 - at the moment they never reset at the
57:12 - same time because one of them is always
57:14 - visible on canvas so when x resets image
57:17 - 1 resets on line 25 or when x2 image 2
57:21 - resets on line 27 i need to offset the
57:24 - other one by the amount of game speed to
57:26 - account for the fact that for that frame
57:29 - the other image kept moving while the
57:31 - other one was reset in
57:42 - gap is smaller now but there is still a
57:44 - gap
57:45 - game speed is 15 pixels per frame and my
57:48 - images reset when their x position is
57:51 - less than minus 2 2400
57:54 - so unless 2400 which is my image width
57:57 - is divisible by the current speed with
58:00 - no remainder there will always be some
58:02 - leftover pixels creating a gap
58:04 - this gap could even grow larger and
58:06 - larger as the scrolling and resetting
58:08 - continues some people deal with it by
58:10 - only allowing their game speed to be
58:12 - certain values so that image width is
58:14 - always divisible by game speed without
58:16 - any remainder but we don't want this
58:18 - limitation we want our game speed to be
58:20 - fully dynamic maybe you want your game
58:22 - to slowly go faster and faster as player
58:25 - progresses to more and more difficult
58:26 - levels or maybe you want to have special
58:29 - moves in your game and when player
58:30 - performs these moves you want them to
58:33 - affect speed of scrolling like i do with
58:35 - this role attack for example
58:38 - to do this we just need to make sure
58:39 - that our x and x2 reset statements check
58:43 - position of the other image before they
58:45 - reset
58:46 - and they offset its new position based
58:48 - on the current position of the other
58:50 - image
58:51 - that way even when gap is somehow
58:53 - created it auto corrects itself next
58:55 - time around during the next reset
58:58 - i do it by accounting for the current x2
59:00 - position in my x reset check on line 25
59:04 - and i account for current x position in
59:07 - my x2 reset check on line 27.
59:10 - keep in mind that when these reset
59:12 - checks happen x or x2 are small numbers
59:15 - somewhere around 0 at that point this
59:17 - might be a bit tricky to visualize and i
59:18 - know that some of you are already saying
59:20 - frank what are you doing there is much
59:22 - simpler way to reset endlessly scrolling
59:23 - backgrounds using just one variable
59:25 - there is no need for this x2 variable
59:28 - there is no need for all this offsetting
59:30 - by speed and position of the other image
59:32 - to synchronize them it can be done with
59:34 - much less code and it is so simple and
59:36 - if you already realize that well done
59:38 - you are good let me know in the comments
59:40 - if you are one of those people i went
59:42 - through all of this to show you my
59:43 - process and to actually show you how it
59:45 - works i didn't realize it can be done
59:47 - with one variable until i got to this
59:49 - stage when i was building the initial
59:50 - prototype also i think everything we
59:53 - have done so far is really good for
59:54 - beginners to see what's going on and how
59:56 - this trick is achieved we will clean
59:58 - this all up and optimize everything but
60:01 - before we do that let's animate all
60:03 - layers and make them move at different
60:05 - speeds
60:07 - parallax effect is when foreground layer
60:10 - moves faster than the background layer
60:12 - it creates kind of a 3d effect illusion
60:14 - of depth in a 2d space it can be used in
60:16 - games but it also looks really nice on
60:18 - websites in our project we will have 5
60:21 - layers 5 images and i want each one to
60:24 - move at a different speed at the same
60:26 - time i want all the layers to be tied to
60:29 - the same gamespeed variable so that when
60:31 - player performs special move for example
60:34 - the speed of all five layers is affected
60:36 - proportionately how do we do that let me
60:38 - show you
60:41 - first let's check if all five layers are
60:43 - animated correctly
60:51 - everything is working perfect so how do
60:53 - i animate all of these layers at the
60:55 - same time i guess i could just copy draw
60:57 - image on lines 23 and 24 and duplicate
61:00 - it for all 5 layers then i would have to
61:03 - create a separate reset checks for their
61:05 - x and x 2 positions to make sure they
61:08 - scroll at the different speeds it's
61:10 - possible to do that but there will be a
61:11 - lot of code repetition let's do it in a
61:13 - clean way
61:15 - i delete x and x2 variable from line 18
61:18 - and 19 i also delete all this code
61:20 - between lines 20 and 25.
61:23 - i will use javascript classes to create
61:25 - a blueprint for a layer object then i
61:28 - create five instances of that layer
61:30 - class one for each of my five layers i
61:33 - will put all of them inside an array and
61:35 - i will be cycling through that array to
61:37 - update and draw them it might sound
61:39 - complicated if you never used the
61:40 - javascript classes before but don't
61:42 - worry i will explain everything it's
61:44 - actually quite simple
61:45 - javascript classes are used when you
61:47 - want to create many similar objects in
61:50 - our case we will create five image layer
61:52 - objects javascript class is a blueprint
61:55 - i will define it and then whenever i
61:57 - call it it will create one instance of
61:59 - that object based on my custom blueprint
62:02 - when i say it creates similar objects i
62:04 - mean these layer objects will have
62:06 - shared properties and methods but some
62:08 - of the properties will have different
62:10 - values they will all have the same width
62:12 - of 2400 pixels each layer object will
62:15 - also have image and speed property but
62:18 - each layer will have different image
62:20 - assigned to it and different speed value
62:22 - that's what it means when i say similar
62:25 - same properties but maybe different
62:26 - values let me show you how simple it is
62:29 - step by step we define class by using
62:31 - class keyword followed by custom name of
62:34 - that class starting with a capital
62:36 - letter i will call my custom class layer
62:38 - for example each javascript class has
62:41 - one mandatory method called constructor
62:44 - in object-oriented programming when you
62:46 - say method all it means is function
62:48 - attached to an object method is just a
62:50 - function so this special mandatory
62:52 - constructor method has only one job
62:54 - whenever our class is called later
62:56 - constructor will trigger itself it will
62:58 - create one new blank object and it will
63:01 - assign values and properties to that new
63:03 - blank object based on blueprint inside
63:06 - the constructor constructor runs only
63:09 - once per object every time javascript
63:11 - class is called using the new keyword i
63:13 - will show you in a minute
63:15 - my constructor will expect two arguments
63:17 - image we want to assign to that layer
63:20 - and speed modifier because i want each
63:22 - layer to scroll at slightly different
63:24 - speed
63:26 - we will pass these arguments from the
63:28 - outside when we create our five layer
63:30 - objects
63:32 - i will show you in a minute for now
63:33 - let's finish our blueprint the syntax
63:36 - might be a bit strange for you if you
63:37 - are new to object oriented programming
63:39 - each layer object will have horizontal x
63:41 - coordinate that starts at position 0. i
63:44 - say this dot x because my layer class
63:47 - will create many similar objects so i'm
63:49 - saying here on line 20 set x property on
63:53 - this particular object you are creating
63:55 - right now to zero
63:57 - because we are inside blueprint that
63:59 - will trigger every time we call our
64:01 - class to create an object
64:03 - i will also have vertical y coordinate
64:05 - that will be set to zero
64:07 - all our layers will have the same width
64:09 - of 2400 pixels
64:12 - height will be 700 pixels for all my
64:15 - layers
64:17 - x2 coordinate will be where we draw the
64:19 - second image the second image needs to
64:21 - start where my first image ends so at
64:24 - the horizontal position 2400 pixels
64:29 - i know i said we could do this without
64:31 - x2 property using just one variable let
64:34 - me just recreate what we had before as a
64:36 - class and then we optimize it together i
64:38 - want to do this step by step for clarity
64:41 - this dot image equals image this
64:43 - declaration is a bit different what i'm
64:45 - doing here i'm telling my constructor
64:48 - create property called image on this new
64:51 - object you are creating right now and
64:53 - set it to image we pass as argument on
64:55 - line 19. i will show you how to pass
64:58 - arguments to constructor when the class
65:00 - is complete
65:01 - i will do the same now with this dot
65:04 - speed modifier it equals the speed
65:06 - modifier passed on line 19 as an
65:08 - argument to my class constructor
65:13 - this dot speed will be how fast is my
65:15 - image layer moving i will calculate it
65:17 - by taking my global game speed variable
65:24 - and i multiplied times this dot speed
65:27 - modifier from line 26
65:29 - doing this will allow me to pass
65:31 - different speed modifier value for each
65:33 - of my five layers
65:35 - and that way each layer will move at a
65:37 - different speed but it will still be
65:39 - tied to my global game speed
65:41 - you will see in a minute my layer object
65:43 - will also have access to custom method i
65:45 - call for example update its job will be
65:48 - to move layers horizontally by changing
65:50 - their disk dot x and this dot x2
65:52 - properties from lines 20 and 24 and it
65:55 - will reset them when the layers move off
65:58 - screen the same way we did it before we
66:00 - are doing the same thing we had before
66:02 - but this time we are wrapping it in a
66:04 - reusable class syntax so that we can do
66:07 - all of this at the same time for all 5
66:09 - layers
66:11 - we will also have a method i call for
66:13 - example draw its job will be to take
66:16 - information about this layer object and
66:18 - to draw it on canvas every time update
66:20 - method runs to change horizontal x
66:22 - position draw will run again to redraw
66:25 - the image after the new position
66:27 - to make sure my game speed is dynamic
66:29 - and always reacting to the current value
66:31 - of my global gamespeed variable from
66:33 - line 10 i need to recalculate this dot
66:35 - speed like this
66:38 - if you want your game to have a constant
66:39 - never changing scrolling speed you don't
66:41 - need to do this line of code
66:44 - now i just say if this dot x from line
66:46 - 20 is less or equal to minus this dot
66:50 - width from line 22 so minus 2 400 pixels
66:54 - then set this.x to this dot width plus
66:58 - offset it by the current position of my
67:00 - x2 minus this.speed
67:03 - i'm just recreating the same thing we
67:05 - did before i explained why i'm
67:06 - offsetting it by x2 and speed it is to
67:09 - make sure there is no gap between my
67:11 - images
67:12 - i copy this entire code block and i do
67:15 - the same thing for this dot x2 property
67:17 - from line 24.
67:21 - so this.x needs to be offset by the
67:24 - current value of x2 and this.x2 needs to
67:27 - be offset by the current value of this
67:30 - dot x
67:31 - if they are not resetting i just want my
67:33 - x property to decrease by the amount of
67:36 - this dot speed from line 27 to make my
67:39 - background layer move to the left i will
67:41 - wrap it in method floor to make sure we
67:43 - have no decimal points in there
67:45 - not sure if this is a good idea let's
67:46 - see a bit later
67:49 - i do the same thing for this.x2 this can
67:51 - be optimized and simplified and we will
67:53 - do it in a minute
67:55 - now i can take this newly updated x and
67:57 - x2 coordinates and i draw two identical
68:00 - images next to each other like we did
68:02 - before
68:04 - so draw image built in canvas method
68:07 - i pass it distort image from line 25
68:12 - this dot x and this dot y
68:16 - this dot width and distort height
68:19 - then i draw the same image but i will
68:21 - draw it at this.x2 horizontal coordinate
68:24 - like we did before
68:26 - and that's it layer class is complete we
68:29 - have a blueprint inside the constructor
68:31 - and my layer objects have access to
68:33 - custom update and draw methods
68:36 - now i can create a new constant variable
68:38 - i call for example layer 4 and i set it
68:41 - equal to new layer like this the new
68:44 - keyword is a special command in
68:46 - javascript it will look for class with
68:48 - that name in our code and it will
68:50 - trigger its constructor
68:52 - on line 19 i can see that my layer
68:54 - constructor expects two arguments image
68:57 - and speed modifier
68:59 - i need to pass them here when i'm
69:01 - creating an instance of my class
69:04 - so i will pass it background layer 4
69:06 - variable as image
69:09 - and speed modifier will be maybe 0.5 i
69:12 - want this layer to be moving at half of
69:14 - my game speed so if my game speed is 10
69:17 - pixels this layer will be moving at 5
69:19 - pixels per frame let's test it
69:22 - so here on line 46 i call my layer class
69:24 - constructor from line 19.
69:27 - it created one new blank object for me
69:29 - and assigned it properties and values i
69:31 - defined in my blueprint between lines 20
69:34 - and 27
69:35 - then it saved that new layer object
69:37 - inside this layer 4 variable so this is
69:40 - how you create an instance of your
69:41 - custom javascript class as we know my
69:44 - layer class has access to update method
69:46 - from line 29 and to draw method from
69:49 - line 40.
69:50 - i can just go inside my animation loop i
69:52 - can take layer 4 variable from line 46
69:55 - and i can call update and draw on it
69:57 - like this
70:03 - and here we go we refactored our image
70:06 - layers into javascript class and now
70:08 - it's very easy to work with it i can
70:10 - pass it different speed modifier on line
70:12 - 46 to make it move at a different speed
70:15 - that speed is still relative to my
70:16 - global game speed variable from line 5
70:19 - because i keep track of that on line 30
70:21 - inside update method
70:28 - i create variables for all my five
70:30 - layers i will pass different images to
70:33 - each one
70:40 - i could just call their update and draw
70:41 - methods by duplicating lines 54 and 55
70:44 - like this
70:45 - now i'm drawing layer 4 and layer 5 but
70:48 - there would be a lot of code repetition
70:50 - if i did it for all 5 layers if i change
70:53 - speed modifier value i pass the layer
70:55 - class constructor on line 50 you can see
70:58 - their relative speed changes and we have
71:00 - parallax effect awesome it is because
71:02 - that speed modifier takes game speed and
71:05 - adjusts it by multiplying game speed
71:07 - from line 5 times this modifier value
71:11 - at first it happens on line 27 when the
71:13 - new object is created then it happens on
71:15 - line 30 whenever update method runs to
71:18 - make sure we can change global game
71:20 - speed dynamically which we will do in a
71:22 - minute then we are just using this dot
71:24 - speed property to recalculate horizontal
71:26 - x position of our background images here
71:28 - on lines 37 and 38 and this is how you
71:31 - make your layers scroll at different
71:33 - speeds but still tie them together by
71:35 - using global game speed variable
71:37 - inside my animation loop i can just call
71:39 - update and draw for all five layer
71:41 - objects but i don't want any code
71:43 - repetition i create a new variable i
71:45 - call for example game objects and i set
71:48 - it equal to an array
71:53 - i put layer one variable from line 46 in
71:55 - there layer two three four five
71:59 - now i have all five layers inside a
72:01 - single array so on line 56 i take this
72:04 - game objects array and i call built in
72:07 - for each array method for each method
72:09 - we'll simply run through all elements in
72:11 - the array and it will apply whatever
72:13 - callback function i give it to each of
72:15 - these elements each of the layers
72:18 - first i need to declare how i want to
72:20 - refer to individual objects in game
72:23 - objects array within my for each
72:25 - callback
72:26 - i will refer to them as object for
72:28 - example i'm doing es6 arrow function
72:31 - syntax here where you can omit function
72:34 - keyword
72:36 - so for each layer object in my game
72:38 - objects array i will call their
72:40 - associated update and draw methods like
72:43 - this
72:44 - here we go we are drawing all five
72:46 - layers now awesome let's pass each layer
72:49 - a different speed modifier to create
72:51 - proper parallax effect 0.2 0.4 0.6 0.8
72:57 - and 1.
72:58 - now each layer moves at different speed
73:01 - but they are all still relative to our
73:02 - global game speed variable from line 5.
73:05 - if i change global game speed variable
73:07 - it will affect all 5 image layers
73:09 - proportionately because their speed is
73:11 - calculated by multiplying game speed
73:13 - times speed modifier
73:15 - if you get any frame drops at this point
73:17 - it is because we are using 5 images that
73:20 - are 2 400 x 700 pixels you will get much
73:23 - better performance if you make the
73:25 - images smaller in photoshop or some
73:27 - other graphics editor
73:28 - as you can see i can change my game
73:30 - speed to any value and parallax
73:32 - background will still scroll based on
73:34 - that
73:41 - i want to allow my users to easily
73:43 - change scroll speed in index html i
73:46 - create a div with an id of container
73:48 - inside i will have paragraph tag that
73:51 - will say gamespeed colon and span
73:53 - element with an id of show game speed
73:56 - this will show real time value of
73:58 - gamespeed variable
74:00 - i create html input element with type
74:02 - properties set to range
74:04 - min value will be 0 max value will be 20
74:08 - starting value will be 5
74:10 - class will be slider for example and id
74:13 - slider as well
74:15 - i put html canvas element inside the
74:17 - container
74:24 - in style css i take container
74:28 - i give it position absolute with 800
74:31 - pixels
74:33 - i center it in the middle of the page
74:35 - using transform translate i set canvas
74:38 - to position relative so that it aligns
74:40 - with container i put border on the
74:42 - container so we see where it is
74:45 - input with an id of slider will have
74:47 - width of hundred percent text color
74:49 - white okay that doesn't work i take
74:51 - paragraph tag and i move text color
74:54 - there
74:55 - on container i set font size to 25
74:58 - pixels
74:59 - and i remove border
75:03 - in script js i create a new constant
75:05 - variable i call for example slider and i
75:08 - point javascript towards my new slider
75:10 - element with getelementbyid
75:14 - on the first page load i will set slider
75:16 - value property which is
75:19 - here
75:22 - to gamespeed variable from line 5.
75:28 - then i take hold of this span element
75:30 - with id of showgamespeed and i save it
75:32 - in a variable i call showgamespeed as
75:35 - well
75:39 - on the first page load i set its inner
75:42 - html equal to the current value of
75:44 - gamespeed variable from line 5.
75:50 - if i change value of gamespeed and
75:51 - reload page you can see it works
75:54 - now i want to change scrolling speed of
75:56 - my layers when i click this slider to do
75:58 - that i need to connect it to gamespeed
76:00 - variable from line 5.
76:02 - on line 22 i take slider from line 18
76:05 - and i call at event listener we will
76:07 - listen for change event and in callback
76:10 - function whenever change event occurs on
76:12 - the slider which means whenever user
76:14 - clicks on it to change its value i will
76:16 - run some code callback function on event
76:19 - listener has access to its built-in
76:21 - event object i will refer to it as e
76:24 - here
76:25 - i can refer to it however i want
76:27 - javascript knows that the first argument
76:29 - passed the callback function on event
76:31 - listener refers to this built-in event
76:33 - object
76:34 - if i console this e you can see it gets
76:37 - console locked every time change event
76:39 - occurs on slider and it contains a lot
76:42 - of useful information about that event
76:44 - right now i'm interested in its target
76:46 - property which references target of this
76:49 - change event
76:50 - which is html input element with an id
76:52 - of slider
76:54 - when it gives me that i can access its
76:56 - current value attribute which is exactly
76:58 - what i need if i console.log
77:00 - e.target.value
77:02 - it will give me the current value of
77:04 - this slider input element
77:06 - i set minimum value to 0 and maximum to
77:09 - 20 here
77:12 - all i have to do now is take gamespeed
77:14 - variable from line 5
77:18 - and i set it equal to e dot target.value
77:21 - like this
77:23 - and i will also update innerhtml in
77:25 - showgamespeedspan
77:26 - so that it displays the correct current
77:28 - speed for us
77:32 - now i can change scroll speed of my
77:34 - layers by clicking on slider
77:38 - if i change it to max 50 we can get it
77:41 - to scroll really fast i hope your
77:43 - computer can handle that these images
77:45 - are too large
77:47 - let's set max value back to 20.
77:50 - you probably already realized earlier
77:53 - that we don't need to have this.x2
77:55 - property here online 33 and we can
77:58 - calculate position of both images using
78:00 - just this dot x that way we don't need
78:02 - to have two separate reset checks here
78:05 - and since everything is coming from just
78:06 - one variable we don't need to do all
78:08 - this complicated offsetting we did
78:10 - earlier because we don't need to make
78:12 - sure x and x2 are synchronized if you
78:15 - want little challenge pause the video
78:17 - right now and try to refactor update
78:19 - method yourself by deleting all
78:21 - references to this.x2 and using only
78:23 - this.x to calculate positions of both
78:26 - images if you don't know how to do it
78:27 - don't worry i also didn't realize it at
78:29 - first until i started working on this
78:31 - tutorial
78:32 - i comment out line 33 on line 51 inside
78:36 - draw image method i replace this.x2 with
78:39 - this.x from 929
78:43 - i comment out this if statement
78:47 - and also this line 48
78:49 - i remove reference to this.x2 since i'm
78:52 - using this.x for both images on line 51
78:56 - and 52 you can see our parallax has gap
78:59 - again this time a big gap
79:01 - lucky for us it's very simple fix on
79:03 - line 52 i set horizontal x coordinate to
79:07 - this dot x from line 29 plus this dot
79:10 - width from line 31.
79:12 - that doesn't quite fix it yet as you can
79:14 - see i also have to look at my if
79:16 - statement on line 40. if this dot x is
79:19 - less or equal to minus this dot with
79:22 - minus 2 400 pixels set this dot x back
79:26 - to zero
79:29 - if you don't understand what is
79:30 - happening right now look at this
79:33 - i have one image drawn at position x
79:35 - which starts at 0
79:38 - and the second image is drawn at
79:40 - position x plus width
79:44 - these images sit next to each other and
79:46 - scroll to the left together like this
79:49 - when the first image moves past the left
79:51 - edge of canvas the second image is there
79:53 - to fill the gap and make it look
79:55 - seamless
79:56 - when the right edge of the first image
79:58 - hits the left edge of canvas at the same
80:01 - time digital x is minus 2400 pixels
80:04 - because my image is 2400 pixels wide we
80:07 - will trigger reset it will just jump
80:10 - back here
80:11 - and start scrolling again
80:17 - the first method was controlling
80:18 - x-coordinate for these two images
80:20 - separately by using this.x and this.x2
80:24 - variables
80:25 - we had to make sure it synchronizes
80:27 - correctly both images were moving
80:29 - independently and i was offsetting them
80:31 - by their scroll speed and by the current
80:33 - horizontal position of the other image
80:36 - to make sure they stayed aligned this is
80:38 - just a visual representation of what was
80:40 - happening of course the transition
80:42 - itself where the image resets after
80:44 - leaving the screen was happening
80:45 - instantly more like this
80:55 - this second improved technique uses just
80:58 - one variable to move images horizontally
81:01 - this image is at position this dot x and
81:04 - the position of the second image is
81:05 - calculated from that by adding this dot
81:08 - x plus this dot width the second image
81:11 - is always 2 400 pixels to the right of
81:14 - the first image this way they will
81:16 - always be synchronized since the
81:17 - position of both images is coming from
81:19 - the same variable
81:21 - as you can see the movement is different
81:22 - now we never actually fully see the
81:24 - second image anymore we just see this
81:26 - small part that pops in place so that it
81:28 - looks like it's one long seamless image
81:31 - again the transition the reset where the
81:34 - images move to the right to start from
81:36 - their original position happens very
81:38 - fast it happens instantly so we jump
81:40 - from this to this and that makes it look
81:43 - like it's just one seamless movement
81:53 - we can also calculate position x
81:54 - differently
81:58 - i can create game frame variable and i
82:00 - set it to 0.
82:02 - then in my animation loop here on line
82:04 - 65 i increase game frame by 1 for every
82:06 - animation frame this way we have a
82:08 - number that is endlessly increasing
82:11 - now i can replace this if statement on
82:13 - line 40 with a different calculation
82:16 - when i remove this if statement
82:17 - completely the backgrounds no longer
82:19 - reset when they leave the screen
82:21 - i also comment outline 43 and i can
82:24 - replace all of this with just one line
82:26 - of code
82:28 - i say this.x from 930 is equal to game
82:31 - frame variable we just created and i use
82:34 - remainder operator and this dot width
82:37 - from line 32
82:38 - this.width is currently 2400 pixels
82:42 - and game frame is endlessly increase in
82:44 - number this calculation will make sure
82:47 - this dot x cycles endlessly between 0
82:50 - and the value of this.width between 0
82:52 - and 2400 pixels which will have the same
82:55 - effect as we had before
82:58 - oh it will go to the right i need to do
83:00 - game frame minus minus or 966 that's
83:03 - better
83:04 - but now all our layers are moving at the
83:07 - same speed i need to factor in this dot
83:09 - speed for line 36 in this calculation on
83:12 - line 44.
83:13 - this dot x equals to game frame times
83:16 - this.speed modulus this.width now we
83:19 - have the same parallax effect this one
83:21 - line of javascript replaced all the code
83:24 - between lines 40 and 43.
83:26 - i don't think it's very clear and easy
83:28 - to see what's happening on line 44 just
83:30 - by looking at it i really have to use my
83:32 - brain and remind myself how modulus
83:34 - operator works to understand why it's
83:36 - cycling between 0 and this dot width
83:38 - i did a complete breakdown of this
83:40 - technique in my sprite animation video i
83:42 - will link it in the video description
83:43 - i'm not going to explain this
83:45 - calculation all over again
83:47 - i don't think we need to understand this
83:48 - line because it has one disadvantage
83:50 - when compared to the code i had
83:52 - previously on lines 40-43 look when i
83:55 - change scrolling speed the position of
83:57 - background jumps somewhere else because
83:59 - we aren't gradually increasing this.x
84:02 - like we did before we are recalculating
84:04 - that value completely every time
84:06 - gamespeed changes
84:08 - clicking this input slider changes
84:10 - gamespeed global variable changing
84:12 - gamespeed affects this.speed because of
84:14 - line 39 and this.speed changes value of
84:18 - this.x on line 44.
84:20 - if you know how to use this technique to
84:22 - make it seamless without jumps in
84:24 - horizontal position when i change game
84:25 - speed let me know please i'm sure there
84:27 - is some smart way to do it i played with
84:30 - it for a while and i couldn't work it
84:31 - out do you see how the background jumps
84:33 - every time i change game speed let's
84:35 - comment out these lines so that we can
84:37 - compare it when using the original
84:39 - technique horizontal position
84:40 - transitions smoothly without jumps and
84:43 - that is exactly what i want i need to be
84:45 - able to change my scrolling speed
84:47 - dynamically because i want the scroll
84:49 - speed of my game to change when a
84:51 - character performs special moves like
84:53 - roll or set
84:55 - let's comment out line 66 since we
84:58 - decided not to use this technique
85:00 - and i also comment outline 6.
85:03 - our images are large it works well
85:05 - because i'm running my code locally if
85:07 - this code base was hosted somewhere
85:08 - online we need to make sure all images
85:11 - and html elements on my page are fully
85:13 - loaded before we start the game on line
85:16 - 19 i take browser window object and i
85:18 - call add event listener on it i listen
85:21 - for load event in callback function when
85:23 - the page is fully loaded only then i
85:26 - will run all this code that depends on
85:28 - images canvas and slider element to be
85:31 - properly loaded and available
85:33 - in this video we will build four small
85:36 - projects completely from scratch we will
85:38 - learn how to generate groups of animated
85:40 - computer controlled characters for our
85:42 - games and we will explore four different
85:45 - movement animation patterns i went to
85:48 - the forest and i caught some dangerous
85:49 - magical creatures for you today we will
85:52 - study them and learn how they move some
85:54 - of them have wings some of them spin
85:56 - around and some just float in the air it
85:58 - will be interesting to explore their
86:00 - movement patterns
86:02 - [Music]
86:05 - this is creative coating tutorial for
86:07 - beginners let's learn fundamental
86:09 - vanilla javascript principles and
86:11 - techniques by building fun projects
86:13 - together hope you get a lot of value
86:15 - today art for this episode was made by
86:17 - this amazing artist go check out his
86:19 - website if you want to see more we will
86:21 - cover 4
86:22 - different movement animation techniques
86:24 - and by the end of this video you will
86:26 - have 4 complete projects and you will be
86:28 - able to introduce a variety of different
86:30 - enemies and movement patterns to your
86:32 - personal javascript games sometimes we
86:35 - tend to make our games too easy and
86:36 - predictable let's give our players some
86:38 - challenge by including different enemy
86:40 - types
86:43 - i create a simple web page markup i give
86:46 - it some title
86:47 - i link style css file in document head
86:50 - we will draw everything on canvas so i
86:52 - create it here and i give it id canvas 1
86:54 - so that we can target it with css and
86:56 - javascript later
86:58 - i also link my script.js file which will
87:00 - contain all animation logic
87:03 - in the style css i take my canvas
87:05 - element i just created and i want to
87:07 - give it some border size and i want to
87:10 - center it in the middle of the page so
87:12 - border 3 pixels solid black position
87:15 - absolute top 50 percent left fifty
87:18 - percent
87:21 - transform translate minus fifty percent
87:23 - minus fifty percent
87:27 - now it's in the middle
87:29 - let's make it vertical so height
87:31 - thousand pixels
87:33 - width will be for example 500 pixels
87:36 - everything else will be drawn with code
87:37 - in script js file this is a beginner
87:40 - tutorial so don't worry i will take you
87:41 - through it step by step
87:44 - as with every canvas project i need to
87:46 - point javascript towards my canvas
87:48 - element we just created in index.html i
87:51 - do it by using getelementbyid and i pass
87:54 - it id i gave my canvas element canvas1
87:57 - like this
87:58 - ctx shortcut for context is equal to
88:01 - canvas dot get context and i pass it 2d
88:05 - we will use a built-in set of 2d drawing
88:08 - methods today
88:10 - now i can call all these built-in
88:11 - methods from my ctx variable if i type
88:14 - ctx dot like this you can see that in vs
88:17 - code editor my autocomplete feature
88:19 - doesn't suggest any built in canvas
88:21 - methods if i want them to be suggested i
88:23 - can go up to line 1 and type
88:26 - add type html canvas element
88:30 - like this
88:31 - this way i tell vs code this is a canvas
88:33 - project and it will suggest built-in
88:35 - html canvas methods for me you can see
88:38 - arc method here to draw a circle clear
88:40 - rectangle to delete paint from canvas
88:42 - and so on we will use some of these in a
88:44 - minute when we start drawing and
88:46 - animating but first let's quickly finish
88:48 - canvas setup we need to set canvas width
88:50 - and height to make sure we get correct
88:52 - scaling of our drawings so i create a
88:54 - custom global variable called canvas
88:56 - underscore width i set it equal to
88:58 - canvas from line 2 dot with
89:03 - and i set it all equal to 500.
89:06 - canvas underscore height is canvas dot
89:08 - height is equal to thousand
89:11 - these values need to be the same i gave
89:13 - it in style css
89:15 - i want to create a factory function that
89:17 - will produce many similar objects for me
89:20 - each of these objects will be one
89:21 - animated enemy before we create many
89:24 - enemies let's just build one and make it
89:26 - absolutely clear for beginners what's
89:27 - going on when we have that it's easy to
89:29 - scale it up i will create a temporary
89:31 - enemy1 variable and i set it equal to
89:34 - javascript object i give it x and y
89:36 - properties and i set them to zero these
89:39 - will represent horizontal and vertical
89:41 - coordinate on canvas where we draw that
89:43 - enemy
89:44 - i will also give it width of 200 pixels
89:47 - and height of 200 pixels like this
89:50 - so now i have this simple javascript
89:52 - object that is storing position and size
89:54 - of one enemy let's animate it to create
89:58 - animation loop i like to write a custom
89:59 - function i call for example animate
90:02 - inside i call build in fill rectangle
90:04 - method this method expects x y width and
90:08 - height of the rectangle we want to draw
90:10 - so i will give it x y with a height of
90:12 - this anime object
90:16 - when i call animate like this we are
90:18 - drawing a black rectangle representing
90:20 - the enemy object i can change its values
90:23 - and when i refresh the page it will be
90:25 - reflected on canvas we are not animating
90:28 - yet what if i want the horizontal x
90:30 - position to be slowly increasing to make
90:32 - the enemy travel to the right i can say
90:34 - for each run of animation loop increase
90:37 - enemy1.x property from line 8 by 1.
90:41 - to create animation loop i call built-in
90:43 - request animation frame method i pass it
90:46 - animate
90:47 - now animate will run all its code and
90:49 - then it will call itself again this will
90:52 - create an endless animation loop
90:56 - i also need to delete old paint previous
90:59 - frames from canvas i do it by using
91:02 - built in clear rectangle method and i
91:04 - clear canvas from coordinates 0 0 to
91:07 - canvas with canvas height
91:10 - now we see only the current animation
91:12 - frame
91:13 - i can also increase vertical y position
91:15 - by 1 for every frame so we get movement
91:18 - towards bottom right like this
91:20 - i can change width and height of my
91:22 - enemy easily you get the idea i think
91:28 - let's comment out this temporary enemy
91:30 - object and make it into a javascript
91:32 - class so that we can generate a large
91:33 - number of enemies at once javascript
91:36 - class is kind of a template to create
91:38 - many similar object it's a factory and
91:40 - every time we ask it it will produce one
91:43 - new object for us based on a blueprint
91:45 - we give it classes are new syntax for
91:48 - older javascript prototypes under the
91:51 - hood is the same thing it's just
91:53 - so-called syntactical sugar simpler
91:55 - nicer way to do the same thing classes
91:57 - are very easy and intuitive let me show
91:59 - you we use class keyword and then we
92:01 - name our class starting with a capital
92:03 - letter my class will be called nme
92:06 - constructor is a mandatory method every
92:08 - class must have it will contain a
92:10 - blueprint based on which every enemy
92:12 - object will be created so here in
92:14 - constructor i just give it x y width and
92:17 - height same as we had in this simple
92:19 - enemy object on line 7. the syntax might
92:22 - be a bit strange at first here i'm
92:24 - telling my constructor on this new enemy
92:26 - object you are creating right now give
92:29 - it property called x and set it equal to
92:33 - 10 pixels
92:36 - starting vertical y coordinate will be
92:37 - 50 pixels
92:39 - width will be 100 pixels and height 100
92:41 - as well
92:43 - so this is how you recreate single
92:44 - javascript object into a reusable class
92:47 - now we can call our enemy class as many
92:49 - times as we want and each time it will
92:51 - generate one new enemy for us based on a
92:54 - blueprint inside constructor method
92:56 - between lines 16 to 19.
92:59 - i can delete the old code
93:01 - and now these variables are undefined
93:03 - because anyone doesn't exist so i create
93:06 - a new constant variable called anime1
93:08 - again
93:10 - and i set it equal to an instance of my
93:12 - new anime class to do that i use the new
93:15 - keyword followed by a class name the new
93:18 - keyword will simply look at that class
93:20 - name in my code it will enter its
93:22 - constructor it will create one new blank
93:25 - javascript object and it will assign it
93:27 - values and properties based on a
93:29 - blueprint inside the constructor
93:32 - now my fill rectangle method online 21
93:35 - can use these values again to display a
93:37 - rectangle what if i want another enemy i
93:40 - can create another variable called
93:42 - enemy2 and i set it to new enemy again
93:45 - inside animation loop i take nma2 and i
93:48 - increase its x and y coordinates as well
93:51 - and on line 25 i need to draw another
93:53 - rectangle representing that enemy like
93:55 - this
93:58 - they're moving at the same speed in the
94:00 - same direction so we can't see the
94:01 - second one let's adjust its speed for
94:04 - example
94:05 - now we can see that there are two of
94:06 - them we can control them separately like
94:08 - this but this wouldn't be very efficient
94:10 - if we had let's say 50 or even 500
94:13 - enemies so how do we make this code
94:15 - better and remove repetition first let's
94:17 - output this code between lines 21 and 24
94:20 - that handles movement along x and y axis
94:23 - into a shared class method that way we
94:26 - can write this code only once and it
94:28 - will be available to all objects created
94:31 - by enemy class
94:33 - i will call that custom function for
94:34 - example update and as i said its job
94:37 - will be to update coordinates of my
94:39 - objects it will handle position
94:41 - calculation and movement so inside i say
94:44 - for every frame increase x by one
94:48 - and also increase y by one
94:52 - let's delete all this code and to run
94:54 - update method i just created all i have
94:56 - to do is call anyone dot update like
94:59 - this
95:03 - since anime1 object was created here on
95:05 - line 19 as an instance of my enemy class
95:08 - from line 7 it automatically has access
95:11 - to this new update class method from
95:13 - line 14.
95:15 - i also need to remove line 25 so now we
95:18 - put all movement calculation
95:19 - functionality into this update method i
95:22 - also want to put this drawing code into
95:24 - its separate method so that we can draw
95:26 - all enemies at the same time we can also
95:28 - give them animated sprites and so on i
95:31 - will show you in a minute
95:32 - on line 18 i create a custom draw method
95:36 - inside i call ctx fill rectangle the
95:39 - same way we did here on line 27 but
95:41 - instead of hardcoding enemy1 object here
95:44 - like this i will use this keyword that
95:46 - way this method will be reusable and can
95:49 - animate not only enemy 1 but also anime
95:52 - 2 enemy 10 and m800 it can animate all
95:54 - the enemies created by this class at
95:56 - once
95:57 - on line 27 i can replace these
95:59 - hard-coded values with anime1.draw
96:03 - it will look the same but now it's
96:04 - reusable and scalable
96:09 - inside constructor between lines 9 and
96:11 - 12 all enemies start at the same x and y
96:14 - coordinates so if i create 50 enemies
96:17 - they would all stuck on top of each
96:19 - other and wouldn't be visible
96:20 - let's randomize that every time i create
96:23 - a new enemy its horizontal x coordinate
96:26 - will be a random number between zero and
96:28 - canvas width
96:30 - and vertical y coordinate will be a
96:32 - random number between zero and canvas
96:34 - height
96:35 - now every time i refresh page my enemy
96:38 - appears at a different position
96:40 - i could also randomize width and height
96:42 - if i wanted to to make each enemy random
96:44 - size i think you get the idea
96:48 - so how do i create many enemies instead
96:50 - of just one i comment out line 22 and i
96:53 - create a for loop this for loop will run
96:55 - for example 100 times
96:59 - actually let's go up to line 6 and
97:01 - create a constant variable called the
97:03 - number of enemies and i set it to 100
97:06 - and i replace hard-coded 100 on line 24
97:09 - with this new variable
97:11 - that's better we shouldn't be hardcoding
97:13 - values if we can avoid it i want this
97:16 - for loop to run 100 times and create 100
97:18 - enemies for me using my custom anime
97:20 - class but how do i store all these anime
97:23 - objects and their properties such as
97:24 - their x and y values i can for example
97:27 - go up here to line 7 and create a custom
97:30 - variable called enemies array and i set
97:32 - it equal to an empty array
97:36 - down here on line 26 i take that enemies
97:39 - array and i call build in array push
97:41 - method push method will just take
97:44 - whatever we pass to it and it will push
97:46 - it to the end of the array i pass it new
97:48 - enemy
97:51 - every time this for loop runs and it
97:53 - will run 100 times it will create one
97:55 - new anime using my enemy class
97:58 - constructor and it will push that new
98:00 - enemy into enemies array
98:02 - it's the same as we did with anime 1 on
98:05 - line 24 but here we are doing it 100
98:07 - times
98:10 - let's delete line 24
98:12 - i also have to comment outlines 31 and
98:14 - 32 because anime one variable doesn't
98:16 - exist anymore
98:19 - how do i access all these hundred
98:20 - objects i just pushed into my enemies
98:23 - array and how do i trigger their update
98:25 - and draw methods one by one so that they
98:27 - can be animated on canvas first let's
98:29 - console.log enemy's array to make sure
98:31 - that for loop on line 25 did its job and
98:34 - filled it with hundred objects
98:37 - in console i can see we have hundred
98:39 - enemies and each one has randomized x
98:41 - and y coordinate
98:42 - perfect
98:44 - so as i said the goal now is to cycle
98:47 - through all hundred enemy objects inside
98:49 - enemies array and to trigger their
98:51 - update and draw methods
98:54 - this will need to happen for every
98:55 - animation frame over and over because we
98:58 - need update method to constantly
99:00 - recalculate enemy position and a draw
99:02 - method to draw them at that new position
99:06 - on line 33 inside animation loop i take
99:08 - enemies array that contains my hundred
99:10 - objects and i call built-in array for
99:13 - each method for each simply calls
99:15 - providedcallback function for each
99:17 - element in the array i will use new es6
99:20 - syntax with arrow function here
99:22 - inside my for each callback refer to
99:25 - each individual object as enemy as you
99:27 - cycle through enemies array
99:30 - and for each of these objects call their
99:32 - associated draw method
99:35 - and also their update method like this
99:40 - perfect you can see that each rectangle
99:42 - appears at randomized x position and
99:45 - they all move in the same direction
99:46 - because of lines 17 and 18. what if my
99:49 - enemy had randomized speed
99:51 - i create a new property called
99:53 - this.speed and i set it equal to a
99:56 - random number between minus two and plus
99:58 - two because i want some of them to go to
100:00 - the left and some of them to go to the
100:02 - right
100:04 - if you find it hard to read this line of
100:06 - code as a random number between -2 and
100:08 - plus 2. think of it this way this part
100:11 - of code generates a random number in
100:13 - this range so between 0 and 4 and this
100:16 - number sets the start of that range so
100:18 - we are generating a random number
100:21 - between 0 and 4 but we are pushing that
100:23 - range to start from -2 so result we get
100:27 - is a random number between minus 2 and
100:29 - plus 2. i remember i always found math
100:32 - at random very unintuitive until i found
100:34 - a better way to think of it anyway now i
100:37 - have this top speed property and i can
100:39 - replace it here on line 18 for
100:41 - horizontal position and also on line 19
100:44 - for vertical position now you can see we
100:46 - have rectangles moving in many different
100:48 - directions
100:51 - i delete code on line 29 and also on
100:54 - lines 32 and 33.
100:56 - on line 21 inside draw method our
100:59 - enemies don't have to be represented by
101:01 - black rectangle we can write any drawing
101:03 - code here and it will be called and
101:04 - replicated for all enemies at once i can
101:07 - for example try stroke rectangle instead
101:10 - we can also draw circles stars you can
101:12 - put selfies from your holidays to
101:14 - represent each enemy object here we have
101:16 - complete flexibility
101:18 - what i want to do here is to create
101:20 - animated creatures because we want these
101:22 - to be enemies for our javascript games
101:25 - with this video we are giving away 4
101:27 - different animated enemies drawn by this
101:30 - amazing artist go check out his website
101:32 - for more content he is very talented he
101:34 - allowed me to share this prize with you
101:36 - for educational purposes for free you
101:38 - can download them in the video
101:40 - description and you can also find link
101:42 - to his website there if you want to use
101:44 - these sprites for commercial purposes
101:46 - you would have to go to his website and
101:48 - buy a full license
101:50 - they are free only for purposes of this
101:52 - educational video show him some support
101:54 - if you can we don't have many good 2d
101:57 - artists like this if we support them
101:59 - they will be able to create more
102:00 - beautiful game art assets for us
102:03 - today we will create four different
102:05 - projects each one will have different
102:06 - enemy with a different movement pattern
102:09 - and on each one we will demonstrate
102:11 - different beginner-friendly movement
102:13 - animation technique
102:14 - i want you to always have a nice
102:15 - complete project at the end of my videos
102:18 - so that you have something to show to
102:19 - your friends or on your coding portfolio
102:22 - it feels good to complete something
102:24 - don't you think
102:25 - you can use these as animated
102:26 - backgrounds or a screensaver or you can
102:28 - take this code and slot it into your
102:30 - personal games it will be compatible
102:32 - with my previous games if you follow
102:34 - these tutorials
102:35 - let's start with a very simple one the
102:37 - first project will have baths flying in
102:40 - random jumpy patterns perfect for
102:42 - halloween game or even a website for
102:44 - example i'll leave the creative
102:46 - applications of this on you
102:48 - first i need to bring new image into my
102:50 - javascript project to do it i create a
102:53 - custom variable called anime image and i
102:55 - set it equal to new image
102:58 - animeimage.src is equal to enemy1.png
103:01 - if you are using the same spritesheet i
103:03 - am using
103:04 - it might be a good idea to use the same
103:06 - files at first and follow along and once
103:08 - you understand the code it's easy to
103:10 - adjust it and to use your own custom
103:11 - images on line 26 inside the draw method
103:15 - i call built in draw image canvas method
103:17 - we will use it to animate our butt
103:19 - sprite sheet i will explain sprite
103:21 - animation quickly as i code but if you
103:23 - need more detailed explanation i made a
103:25 - special video where i focus on it in
103:27 - depth i will link it in the video
103:29 - description ctx dot draw image and i
103:32 - pass it image i want to draw and i pass
103:34 - it x and y coordinates
103:39 - and this is what we get
103:41 - we can also pass it optional with and
103:42 - height arguments which will scale the
103:44 - entire image into that specified size
103:47 - you can see it pushes the entire sprite
103:49 - sheet with all six frames inside the
103:51 - rectangle
103:53 - we don't really want that we only want
103:54 - to crop out one frame at a time and we
103:57 - want to be jumping by the amount of
103:59 - sprite width to the right to display the
104:01 - next sprite frame we want to go frame by
104:04 - frame from left to right until we reach
104:06 - the last frame
104:08 - then we want to jump back to the first
104:09 - one and start again we can do this with
104:12 - the draw image method because it offers
104:13 - additional four optional arguments we
104:15 - can pass to it
104:18 - let's go up inside anime constructor to
104:20 - create property called sprite width i
104:22 - check my sprite sheet divide its width
104:24 - by the number of frames and i can see
104:26 - that width of a single frame is 293
104:30 - pixels sprite height of this particular
104:32 - sprite sheet is
104:33 - pixels
104:34 - now let's add additional four arguments
104:36 - to draw image method to tell it what
104:38 - area we want to crop out from this
104:40 - sprite sheet to display only one frame
104:43 - let's start by displaying just frame one
104:46 - so i want to crop out area from
104:48 - coordinates 0 0
104:49 - to coordinates sprite with sprite height
104:56 - now we are drawing just frame 1.
104:59 - so in this version of draw image method
105:01 - we are passing it nine arguments in
105:02 - total the first is the image we want to
105:05 - draw
105:07 - the next four represent the area we want
105:10 - to crop out from the source sprite sheet
105:16 - and these last four arguments determine
105:18 - where on canvas we want to place that
105:20 - cropped out frame onto
105:27 - you can see my pads are slightly
105:29 - distorted because i am stretching them
105:30 - to fit this.width and this dot height
105:32 - here which are unrelated to the actual
105:35 - dimensions of my butt enemy character
105:37 - ideally i want to preserve the aspect
105:39 - ratio so i make width and height
105:41 - relative to the sprite size
105:44 - i take width and height and i move them
105:46 - to go after sprite width and sprite
105:48 - height so that they can see these values
105:50 - now i can make width one third of sprite
105:53 - width
105:55 - and height one third of sprite height
105:58 - now our bytes are the correct ratio
106:00 - maybe i want to make them a bit larger
106:02 - let's try 2.5
106:06 - that's better
106:07 - right now we are displaying only frame 1
106:10 - because of these hard-coded 0-0
106:12 - coordinates let's cycle through all
106:14 - frames and animate our characters
106:20 - on enemy class i need a new property
106:22 - called this dot frame and i set it to 0.
106:25 - on line 30 instead of hard coding
106:27 - horizontal coordinate 0 which will give
106:29 - us this frame i will take
106:32 - this dot frame variable and i multiply
106:34 - it times this dot sprite width that way
106:37 - when frame is 0 we display this frame
106:40 - when it's 1 we display this frame
106:43 - 2 3 and so on
106:45 - so now all i have to do is that frame
106:47 - cycles between this and this frame
106:49 - between 0 and 5.
106:51 - i will use es6 ternary operator which is
106:53 - a simple one line if else statement
106:55 - basically i say if this dot frame is
106:58 - more than four question mark set this
107:01 - dot frame back to zero
107:04 - else colon increase frame by one this
107:08 - dot frame plus plus
107:10 - this should be colon
107:12 - our buds are flapping their wings and
107:14 - animating but they flap very fast and
107:16 - all of them flap at the same time let's
107:18 - fix that there's a proper way to time
107:21 - animation frames using request animation
107:23 - frame and delta time and i will show you
107:25 - how to do that in some other video today
107:27 - let's slow down our animation the
107:29 - simplest way possible on line 11 i
107:31 - create a variable called a game frame
107:33 - and i set it equal to zero
107:35 - inside animation loop on line 46 i
107:37 - increase game frame by 1 for every loop
107:41 - and up on line 28 inside update method i
107:44 - say if this ever increasing game frame
107:47 - variable is divisible by let's say 2
107:50 - with a remainder of 0 only then serve a
107:54 - new animation frame this line simply
107:56 - means run this code only every 2 loops
107:59 - of main animation loop
108:00 - if you are getting a little unsure i
108:02 - made a special sprite animation video
108:04 - where i go in depth and slowly over all
108:07 - of this for now let's just move on and
108:09 - focus on movement patterns
108:11 - now bats animate slower but they all
108:13 - still move their wings at the same time
108:15 - in the same rhythm i want to randomize
108:17 - their animation frequency i create a
108:19 - custom property called for example flap
108:21 - speed and i set it equal to random
108:23 - number between 1 and 4.
108:26 - i replace hard coded 2 on line 29 with
108:29 - this randomized flap speed value
108:32 - this will make some of them animate very
108:34 - quickly some of them slower some will
108:36 - animate every one or two or three or
108:38 - four frames it will be randomized the
108:41 - reason it doesn't work is because math
108:42 - at random returns numbers with the
108:44 - decimal point so game frame is never
108:46 - divisible by that very specific number
108:48 - with a remainder of 0
108:50 - and frames never increase
108:53 - to fix that i just need to wrap it in
108:55 - math.floor
108:59 - now some bats flap their wings slower
109:02 - and some do it very fast
109:05 - i will remove the stroke rectangle
109:11 - i can also take enemy image variable
109:13 - from line 9 and actually make it a
109:15 - property on javascript class like this
109:17 - this dot image equals new image
109:21 - this dot image src source is nma1png
109:26 - i delete that and inside draw image on
109:29 - line 34 i refer to this dot image in
109:31 - stat
109:40 - by changing value of number of enemies
109:42 - on line 6 we get a different number of
109:44 - bots in our project
109:46 - currently our buds just fly away from
109:48 - canvas and never come back we don't
109:50 - really want that
109:51 - let's create the first simplest movement
109:53 - pattern which will simply be just
109:55 - randomized jumpy chaotic movement
109:57 - i comment out this dot speed on line 17
110:00 - and on line 26 i replace it with math at
110:02 - random times 3.
110:07 - i do the same with this.y on line 27
110:10 - since we are adding positive numbers to
110:11 - x and y all bats are going to leave
110:14 - canvas like this how about we tried a
110:16 - random number between minus 1.5 and plus
110:19 - 1.5
110:22 - now they kind of stay in place and just
110:24 - wiggle around we can increase their
110:26 - wiggle by giving this random number a
110:28 - larger range for example between plus
110:30 - 2.5 and minus 2.5
110:36 - i can see that my initial enemy x and y
110:39 - coordinates are not 100 within canvas
110:42 - let's adjust line 15 like this
110:48 - and since i'm using this.width here i
110:50 - need to move it after this.weight has
110:52 - been declared
110:54 - now they initially spawn within canvas
110:56 - horizontally these brackets are
110:58 - important look what happens when i
110:59 - remove them
111:00 - they just start from minus distort width
111:02 - which is wrong these brackets need to be
111:05 - here
111:06 - let's do the same thing vertically for
111:08 - this dot y
111:16 - i reduce the number of enemies to 100 or
111:20 - 10.
111:21 - let's make the range much larger on line
111:22 - 26 between minus 7.5 and plus 7.5
111:27 - i can just play with these values and
111:29 - get the random simple jumping movement
111:31 - this is the simplest way you can animate
111:33 - enemy characters or npcs for your
111:35 - javascript games we will do three more
111:37 - adding a little bit more complexity each
111:39 - time
111:40 - let's see what comes out of that
111:42 - i will be expanding deleting and
111:44 - adjusting the same code base so if you
111:46 - want maybe it's a good idea to create a
111:48 - copy of this project at this stage so
111:50 - you have this movement pattern saved in
111:52 - case you want to use it for your games
111:53 - later i will be using different enemies
111:55 - spreadsheet and different movement
111:57 - pattern for the next one i hope you're
111:58 - having fun
112:04 - for the second movement pattern we will
112:06 - do something a bit different first let's
112:08 - switch to a different sprite sheet here
112:10 - on line 14. i will use image i called
112:12 - enemy2 png
112:15 - it's different size so i have to change
112:17 - sprite width and sprite height sprite
112:19 - width is 266 pixels and sprite height is
112:22 - 188 pixels
112:25 - i uncomment this dot speed on line 15
112:27 - and i give each game character a random
112:29 - speed between 1 and 5 pixels per frame
112:32 - for example on line 26 i set this.x to
112:35 - be equal to minus this dot speed
112:42 - if i comment out why we can see that
112:45 - bats just fly to the left in a straight
112:47 - horizontal line and they never come back
112:50 - let's first do a reset check if this dot
112:53 - x from line 20 plus this dot width from
112:56 - line 18 is less than zero meaning when
112:58 - the character moved behind the left edge
113:01 - of canvas and is completely hidden
113:03 - that's why i included this dot width
113:05 - here when that happens i want its
113:07 - horizontal x position to be reset back
113:09 - to canvas width moving it behind the
113:11 - right edge of canvas so that it can do
113:13 - another flyover
113:15 - now we have endless right to left
113:17 - movement awesome
113:18 - we already have something interesting
113:20 - here but what if i want them to sway up
113:22 - and down as they flap their wings making
113:24 - it a bit more dynamic and if these were
113:26 - enemies in my javascript game maybe it
113:28 - would make it a bit more difficult for
113:30 - player to avoid them how do i create
113:32 - wavy movement do you know what sine wave
113:35 - is
113:35 - let's do a little bit of a very simple
113:37 - beginner friendly trigonometry
113:40 - trigonometry is a branch of mathematics
113:42 - that studies relationships between side
113:44 - lengths and angles of triangles we use
113:47 - it to create wavy and circular movement
113:49 - in our javascript animations thanks to
113:51 - built in javascript math methods today
113:54 - we will have a look at math.sine and
113:56 - math.cosine built in javascript methods
113:59 - sine is a trigonometric function of an
114:01 - angle defined in a context of a right
114:04 - triangle all we need to know for now is
114:06 - that market sign returns the sign of a
114:09 - number we pass to it that number
114:12 - represents angle value in radians and it
114:14 - returns numeric value between -1 and
114:17 - plus 1.
114:18 - so this input angle value it takes if i
114:21 - put it inside animation loop and slowly
114:23 - start increasing it over time by very
114:25 - small amounts when i pass this angle
114:27 - value to math.sine it will return a
114:30 - series of values that endlessly cycles
114:32 - between -1 and plus 1 making it easy for
114:35 - us to convert these values into wavy
114:37 - movement so called sine wave what i just
114:40 - said might be a bit complicated for
114:42 - beginners and it might not make much
114:43 - sense yet let me show you
114:46 - i will need this angle property on my
114:48 - enemy class constructor and i initially
114:51 - set it to 0.
114:53 - this is the number that will be
114:54 - increasing and after being passed to my
114:56 - dot sign it will give us that series of
114:58 - values between -1 and plus 1 as i just
115:01 - mentioned
115:02 - let's do it so you can see on line 28 i
115:05 - set position y plus equals math.sine and
115:08 - i pass it this dot angle
115:11 - then i increase this.angle by 0.1 for
115:14 - every animation frame
115:16 - as the angle slowly increases do you see
115:18 - the waves
115:19 - i can change the value here on line 29
115:22 - to change shape of my sine wave
115:24 - angle doesn't have to start from zero it
115:26 - can be a bit randomized let's try with
115:28 - math at random times two
115:30 - it will not be very visible it will
115:32 - become clear what it does a bit later i
115:34 - will point it out quickly said starting
115:37 - value of this.angle determines what
115:39 - position along the sine wave
115:41 - this particular character appears at
115:43 - first before it starts moving it's more
115:45 - obvious if we map movement to a circle
115:48 - and we'll do that in a minute
115:50 - i can also randomize the speed at which
115:52 - angle value increases on line 30. i do
115:55 - that by creating a new property called
115:56 - for example angle speed and i set it to
115:59 - a random number between 0 and 0.2
116:04 - then i take this variable and i replace
116:06 - this hardcoded 0.05 with it
116:09 - now each anime has its own angle value
116:12 - that is being increased by a slightly
116:14 - different amount for each frame this
116:16 - will randomize the wave shape for each
116:18 - enemy
116:19 - let's set this.angle to 0 for now
116:23 - i reduce the number of enemies on line
116:25 - 6.
116:26 - as i said method sign returns values
116:29 - that cycle periodically between -1 and
116:31 - plus 1.
116:32 - what if i wanted to make the curve more
116:34 - prominent
116:37 - i can simply just multiply it times 3
116:39 - here on line 29 and now we are getting
116:41 - values that cycle between -3 and plus 3.
116:45 - do you see how the sine wave of enemy
116:46 - movement is more prominent
116:49 - look what happens when i put the
116:51 - different numbers here
116:55 - i hope it's becoming more clear what i'm
116:57 - doing
117:00 - if i put times 10 we get a very
117:02 - prominent curve
117:04 - if these are enemies in your game good
117:06 - luck to all players trying to avoid them
117:09 - especially for certain sprite sheets
117:10 - this movement might be very suitable
117:12 - maybe you have some strange aliens in
117:14 - your space game and you want to move
117:16 - them in this weird wavy pattern instead
117:18 - of hardcoding number 10 here i can again
117:21 - put this value in a variable that will
117:23 - be randomized for each enemy that way we
117:25 - get even more variation in movement
117:27 - between enemies i will call it
117:29 - this.curve for example
117:31 - sorry about my variable names sometimes
117:32 - it's hard for me to come up with
117:34 - suitable names for all these custom
117:35 - properties i hope it's becoming at least
117:38 - a little bit clear what each of these
117:39 - properties does so far i want curve
117:41 - property to be a random number between 0
117:44 - and 10 and i replace this hardcoded 10
117:47 - with it here on line 30.
117:49 - maybe 10 is too much let's do times 7
117:52 - here on line 26
117:54 - do you see what we just did
117:56 - some of them move in a very prominent
117:57 - waves some have barely any vertical
117:59 - movement this would make our game more
118:01 - unpredictable
118:03 - i can add as many enemies as i want
118:05 - let's put 200 here on line 6.
118:09 - but infestation this will be a hard mode
118:11 - in my game
118:13 - so we did endless horizontal movement
118:15 - with vertical sine wave element to it
118:17 - what if we bring it a step further and
118:19 - also add some trigonometry for
118:21 - horizontal x-coordinate
118:23 - we can make the enemies move in all
118:24 - kinds of different shapes and patterns
118:26 - that way let me show you
118:28 - as usual i will first swap to a
118:30 - different image on line 14 i set image
118:32 - src to nma3 png
118:35 - i check my sprite sheet and i see that
118:37 - width of a single frame is 218 pixels
118:40 - and height is 177 pixels
118:44 - let's comment out lines 29 and 30 which
118:47 - will stop our character from moving
118:48 - around on line 29 i want horizontal
118:51 - movement to be cycling within a certain
118:53 - range
118:54 - i call math.sine and i pass it
118:56 - this.angle from line 24. this.angle
118:59 - value is increasing over and over on
119:01 - line 31 as update method is called from
119:04 - inside animation loop i will also
119:06 - multiply it times method pi divided by
119:09 - 180
119:11 - let's just experiment here a bit
119:14 - if i multiply this whole thing by 10
119:17 - nothing happens 50
119:20 - we see some movement 100
119:24 - yes they are moving now this angle speed
119:27 - on line 25 affects how fast angle value
119:30 - on line 31 is increasing
119:32 - if i set it to 0.9 they will move faster
119:37 - times 2 might be a good speed for now
119:41 - they kind of disappear behind canvas
119:43 - edge i can move them by adding some
119:45 - value to this dot x position like this
119:47 - plus 10 will move everything slightly to
119:49 - the right
119:50 - plus hundred
119:52 - how about plus canvas width divided by
119:54 - two
119:55 - i want to center them horizontally now
119:57 - they are too much to the right i need to
119:59 - offset them by the amount of their width
120:03 - i change this.curve on line 26 to be a
120:05 - random number between 0 and 200 and i
120:08 - replace hard-coded 100 on line 29 with
120:11 - this dot curve property now some of them
120:14 - move in a large range some only in a
120:16 - small area
120:17 - as we said before method sign when we
120:20 - feed it an angle it will return a value
120:22 - between plus 1 and -1 since this angle
120:25 - is ever increasing on line 31 we are
120:28 - getting a continuous series of values
120:30 - that endlessly bounce between minus 1
120:32 - and plus 1 by multiplying all of this by
120:35 - this dot curve here for characters that
120:37 - have this dot curve 200 for example they
120:40 - are endlessly cycling between -200 and
120:42 - plus 200.
120:44 - put it in brackets
120:48 - actually this has to be this dot width
120:50 - divided by two
120:51 - yeah now they are centered horizontally
120:55 - on line 29 we are animating horizontal x
120:58 - position let's also do this with this
121:00 - dot y on line 30 and see what happens
121:03 - if i copy the same formula and replace
121:05 - width with height
121:07 - because we are dealing with vertical
121:08 - movement
121:11 - we get this pattern
121:13 - this is where cosine comes in
121:17 - i'm not going to explain trigonometry in
121:19 - detail in this video but the main idea
121:21 - is you have a circle and radius of that
121:23 - circle can represent hypotenuse the
121:26 - longest side of a right angle triangle
121:28 - if we connect lines like this to
121:30 - complete the triangle
121:34 - sine value represents relationship
121:36 - between opposite side of the triangle
121:38 - and hypotenuse
121:42 - cosine is the relationship between the
121:44 - adjacent side of that triangle and
121:46 - hypotenuse hypotenuse size never changes
121:49 - but sine and cosine is cycle
121:51 - periodically as the size of opposite and
121:53 - adjacent side of this imaginary triangle
121:56 - changes
122:03 - as a result sine and cosine complement
122:06 - each other to map a circle path and
122:09 - that's what we are taking advantage of
122:10 - here method sign is creating periodical
122:13 - horizontal movement for me online 29 and
122:16 - on line 30 math.cosine is doing that for
122:18 - vertical values together they complement
122:21 - each other in a way that results in a
122:23 - circle movement you can play with these
122:25 - values swap sine and cosine make both of
122:28 - them sine or cosine it should illustrate
122:31 - it better what's going on if you see how
122:32 - these changes affect our animation
122:36 - if i want to have some space in the
122:37 - middle we know that this dot curve
122:39 - determines radius of the circle my
122:41 - characters are moving in that value is
122:43 - randomized for each one i can give it a
122:46 - minimum value for example let's do a
122:48 - random number between 50 and 250.
122:53 - i can also change angle speed on line 25
122:55 - this will affect how fast angle is
122:57 - increasing on line 31 and because that
123:00 - angle is being passed over and over to
123:02 - mattered sign and mattered cosine it
123:04 - will increase the speed at which our
123:06 - characters move along the circular path
123:09 - see here we already have some
123:10 - interesting movement pattern for our
123:12 - enemies i could use this in some parts
123:14 - of my game right now sine and cosine are
123:17 - even what i mean is they cycle between
123:19 - the same set of values over and over
123:22 - which results in even circular movement
123:24 - what if i make the horizontal position
123:26 - the cycle at half the speed compared to
123:29 - vertical position by saying math.pi
123:32 - divided by 360 here now vertical
123:35 - position does two cycles while
123:37 - horizontal position does only one
123:39 - because of the difference between 360
123:41 - and 180
123:43 - these two values here this will give us
123:45 - a different movement pattern if i give
123:48 - both of them the same number it will be
123:49 - a circle smaller numbers will result in
123:52 - a faster movement the resultant movement
123:54 - is always a relationship between these
123:56 - two values these values don't have to be
123:58 - directly divisible by one another but it
124:01 - might help to visualize it better
124:03 - for example here horizontal position
124:05 - will go over five cycles while vertical
124:07 - position will do one cycle it's because
124:10 - of the relationship between 90 and 500
124:13 - it gives us interest in movement
124:16 - i can change their speed also by
124:18 - adjusting this.angle speed on line 25.
124:25 - so this technique can be customized to
124:27 - achieve movement pattern you are looking
124:29 - for
124:32 - maybe your game starts easy but later it
124:34 - becomes more difficult so you need
124:35 - faster enemies
124:39 - if i put 360 here 360 is divisible by
124:42 - 90. if you watch the animation we will
124:45 - get four horizontal cycles before we get
124:47 - one vertical cycle because 360 divided
124:50 - by 90 is 4.
124:52 - don't feel like you have to fully
124:53 - understand sine and cosine at this stage
124:55 - to take advantage of this technique i
124:57 - will make a special video where we deep
124:59 - dive into this functionality for now
125:01 - this is all we need to know to be able
125:03 - to use this for our games if i want the
125:05 - shape to be number 8 i can just make
125:07 - vertical value double of horizontal
125:08 - value here
125:13 - i can play with different numbers and
125:14 - see what happens
125:20 - can also have cosine for both like this
125:22 - it will cause them to backtrack to go
125:24 - back and forth following the same path
125:26 - rather than moving in circles swapping
125:29 - sine and cosine will make our characters
125:31 - follow circular path in the opposite
125:33 - direction i don't like how they fill the
125:35 - entire width but they don't fill the
125:36 - height of my canvas how do i make them
125:39 - use all available space we are using
125:41 - this.curve which is a random number
125:43 - between 50 and 250 and it makes them
125:45 - move within that range what if i replace
125:48 - it with canvas width on line 29
125:51 - okay that's too much because this value
125:53 - is radius of their movement half circle
125:55 - if i want them to cover width of canvas
125:57 - i need to give them canvas width divided
125:59 - by two
126:00 - much better let's do the same for
126:03 - vertical position on line 30 canvas
126:05 - height divided by two
126:10 - awesome now our movement path is even
126:13 - more obvious
126:16 - i will increase number of enemies on
126:18 - line 6 just so that we fill the path
126:20 - with more objects and see it better
126:22 - now you can clearly see that our enemies
126:24 - are running along a set path shape of
126:27 - this particular path is determined by
126:29 - relationship between 90 and 270 here
126:33 - three horizontal cycles fit into one
126:35 - vertical cycle because 270 divided by 90
126:39 - is 3.
126:40 - if i make the values the same we get
126:42 - circular path again it's an ellipse
126:44 - because i'm stretching the movement here
126:46 - and here
126:49 - 108 in x and 90 in y will mean two
126:52 - vertical cycles happen before we get one
126:55 - horizontal cycle what happens if i swap
126:57 - 180 and 90.
127:03 - interesting
127:06 - to get h shape i would have to swap sine
127:08 - and cosine here
127:12 - are you starting to understand how these
127:14 - values affect the shape of path our
127:16 - animated characters take
127:21 - you can play with this for a while
127:22 - experiment with different values and see
127:24 - what happens on canvas trial and error
127:26 - can sometimes be the best way to come up
127:28 - with unique interesting results
127:35 - trigonometry is a big topic and we will
127:37 - come back to it in some other course
127:42 - i'm sure some of you get other ideas for
127:44 - this technique it doesn't have to be
127:46 - used for patrolling enemies in games as
127:48 - we are doing here
127:50 - you can for example use it to create
127:52 - automatically moving particle effects
127:54 - and animations for website and many
127:56 - other things
127:58 - creative coding gives us a lot of
127:59 - opportunities to come up with unique
128:01 - beautiful stuff and that's why we are
128:02 - building these projects together to
128:04 - improve our vanilla javascript skills
128:06 - and at the same time to explore what's
128:08 - possible maybe it will spark new ideas
128:10 - in some of you
128:12 - i know that there are many creative
128:13 - people watching my videos i'm just here
128:15 - to give you the tools where you take it
128:17 - and how you decide to use it is up to
128:19 - you
128:21 - we can play with these values and create
128:23 - different paths this.angle property on
128:25 - line 24 determines where along our path
128:28 - our animated characters appear at first
128:30 - i can spread their starting position
128:32 - along the path by using math at random
128:39 - i could have also used something a bit
128:41 - more unusual like oscillators or pearly
128:43 - noise here but i want to keep this video
128:45 - beginner friendly we can do more
128:47 - advanced path following and random
128:49 - movement algorithms later
128:51 - another simple technique uses a
128:53 - completely different trick and it
128:55 - results in what i think is the best
128:56 - movement pattern if you want your
128:58 - enemies to appear like they have mind of
129:00 - their own at least when we stay in the
129:02 - world of simple beginner algorithms
129:05 - there are many advanced ai techniques
129:07 - you could use but this is javascript for
129:09 - beginners you might want to make a copy
129:11 - of this codebase because to achieve the
129:12 - next effect i will break this one little
129:15 - bit
129:16 - let's delete lines 24 25 and 26
129:22 - i will also set this.x and this.wire to
129:24 - 0 inside my update method
129:28 - and i delete line 28.
129:31 - comment out lines 26 and 27 and now
129:34 - initial x coordinate is randomized on
129:37 - line 20 and vertical coordinate is
129:39 - randomized here on line 21.
129:42 - i will create a new property a call for
129:44 - example new x and i set it to random
129:47 - number between 0 and canvas with i do
129:50 - the same for vertical y coordinate with
129:52 - this dot new y property
129:54 - so i have initial horizontal position on
129:56 - line 20 and i have a new horizontal
129:59 - position on line 22.
130:02 - on line 9 i have game frame variable
130:04 - that is endlessly increasing inside my
130:06 - animation loop i will say every time
130:09 - game frame is divisible by 30 with a
130:11 - remainder of 0 which basically means
130:13 - every 30 frames of my main animation
130:15 - loop i want to reset this dot new x and
130:18 - this dot mu y to a different random
130:21 - position
130:22 - basically i just need to copy lines 22
130:24 - and 23 here
130:28 - now i will calculate variable i call for
130:31 - example dx distance on horizontal x-axis
130:34 - it simply is the difference between this
130:36 - dot x from line 20 and this dot new x
130:39 - from line 22
130:41 - dui distance on vertical y axis is this
130:44 - dot y from line 21 minus this dot nu y
130:48 - from line 23.
130:49 - now that we have distance between
130:51 - current position and the new position i
130:53 - can make characters move towards that
130:54 - new position by saying this dot x minus
130:57 - equals dx from line 32 and this dot y
131:01 - minus equals d y from line 33
131:06 - it's resetting too fast let's change 30
131:08 - to 60 here on line 28. now we get
131:11 - instant position change every 60 frames
131:13 - i can make them travel towards that
131:15 - position by saying dx divided by 20. i
131:18 - can also do that for vertical position
131:20 - by saying dy divided by 20 here
131:23 - now current position is always moving
131:25 - towards the new position by 20th of
131:27 - their distance for every animation frame
131:30 - i can increase these numbers to make
131:31 - them move slower
131:33 - i can also increase the interval on line
131:36 - 28. i like this but you can see that
131:38 - positions reset every 100 frames for all
131:40 - enemies at the same time that looks a
131:42 - bit weird i want each character to reset
131:45 - at its own randomized interval
131:47 - i create a property i call for example
131:49 - distort interval and it will be a random
131:52 - number between 50 and 250.
131:55 - then i replace hardcoded hundred with
131:57 - this.interval on line 29. it won't work
132:00 - yet because this.interval is a random
132:02 - number with decimal points so gameframe
132:04 - will never be divisible by that very
132:06 - specific number with a remainder of 0 so
132:09 - new positions will never be calculated
132:12 - to fix that i need to wrap this in
132:13 - math.floor which will round it down and
132:16 - make sure we get only integers whole
132:18 - numbers without decimal points
132:21 - also now you can see that each enemy is
132:23 - moving at their own rhythm
132:27 - i can add more enemies on line 6.
132:30 - it kind of looks like a swarm of
132:32 - mosquitoes
132:33 - [Music]
132:40 - i also need to swap enemy sprite sheet
132:42 - to keep up with tradition
132:45 - i will use anime 4 png here
132:49 - i look at my sprite sheet and width and
132:51 - height is 213 pixels this time
132:55 - there are many other calculations and
132:57 - algorithms that you can use to make
132:59 - enemies move in a certain way let's make
133:01 - that today's challenge can you alter
133:03 - some of the code we wrote today and
133:05 - create your own movement pattern you can
133:07 - also make enemies follow the mouse or
133:09 - maybe try to avoid it there are many
133:11 - ways to make this interactive let me
133:13 - know in the comments if you watched all
133:14 - the way here if you did well done today
133:16 - we added an important set of techniques
133:18 - to our vanilla javascript game
133:20 - development toolkit i'll see you soon if
133:22 - you want more game development check out
133:24 - my playlists links in the video
133:26 - description
133:32 - collision detection is important if you
133:34 - want to build the javascript games and
133:35 - you need to detect when two elements
133:38 - collide
133:40 - or when you are building particle
133:42 - systems where objects interact with each
133:44 - other or maybe you want your canvas
133:46 - animations to interact with regular
133:48 - website elements
133:49 - for most projects all we need is simple
133:51 - collision detection algorithm between
133:53 - two rectangles or between two circles
133:56 - for more complex shapes we also use
133:58 - collision detection technique called
134:00 - separating axis theorem
134:02 - it can be used to detect collision
134:04 - between convex polygons or rectangles
134:06 - that are rotated and aren't axis aligned
134:10 - you might also have more specific needs
134:12 - for your games or creative coding
134:13 - projects some of other common scenarios
134:16 - are collision detection between point
134:18 - and circle
134:20 - point and square
134:22 - between line and circle
134:24 - line and square
134:25 - between two lines and so on it becomes
134:28 - more complex when you need to detect
134:30 - collisions where shapes such as convex
134:32 - and concave polygons are involved
134:35 - there are some clever tricks people came
134:37 - up with to handle these more advanced
134:39 - scenarios
134:40 - such as detecting collision by color or
134:43 - projecting lines from a point and
134:45 - checking if the number of intersections
134:47 - between that line and polygon is odd or
134:49 - even a number with more complex shapes
134:52 - it's a good practice to wrap them in
134:54 - simple rectangles and only run advanced
134:56 - collision checks if these rectangles
134:58 - collide and we know that the shapes are
135:00 - close enough and collision is possible
135:02 - for many games all you need is to create
135:04 - a generic shape around our objects so
135:06 - called hitbox even though the collision
135:09 - is not pixel perfect we can adjust these
135:11 - hitboxes to roughly match collision
135:13 - areas of objects with different shapes
135:16 - main advantage is that the code is very
135:17 - simple and performant because it doesn't
135:20 - require complex calculations to
135:22 - determine whether two objects collide or
135:24 - not
135:25 - these hitboxes can have shape or
135:27 - rectangle circle or polygon
135:30 - the simplest collision detection
135:31 - algorithm is between two rectangles that
135:34 - are axis aligned it means that they are
135:36 - not rotated
135:38 - it simply compares x and y coordinates
135:40 - and width and height of these two
135:41 - rectangles if they overlap we get
135:44 - collision if there is a gap between them
135:46 - we know there is no collision
135:48 - let me show you two different simple
135:50 - algorithms you can use to detect
135:52 - collision between two rectangles two
135:54 - hitboxes in our games let's say we have
135:56 - rectangle one and rectangle two both of
135:59 - these objects have x and y coordinates
136:02 - and some width and height
136:04 - the first way i can check if they
136:06 - collide is this i create a simple if
136:08 - statement and i check if horizontal
136:10 - position x of rectangle 1 is less than
136:13 - horizontal position x of rectangle 2
136:16 - plus width of rectangle 2.
136:19 - basically if this point is less than
136:21 - this point less means if it's to the
136:23 - left on horizontal x-axis
136:27 - at the same time we want to check if x
136:29 - of rectangle 1 plus width of rectangle 1
136:32 - is more than x of rectangle 2.
136:34 - that means if this point is to the right
136:37 - from this point
136:39 - we also do this vertically so we check
136:41 - if vertical y coordinate of rectangle 1
136:44 - is less than vertical y of rectangle 2
136:47 - plus height of rectangle 2
136:50 - if this point is above this point
136:53 - and lastly we check if vertical
136:54 - coordinate of rectangle 1 plus height of
136:57 - rectangle 1 is more than horizontal y
137:00 - position of rectangle 2.
137:02 - if this point is below this point if all
137:06 - of these 4 conditions are true we enter
137:08 - this code block in our if statement and
137:10 - collision is triggered
137:12 - else we know there is no collision we
137:15 - can also flip the logic completely this
137:17 - second algorithm does the same checks
137:20 - but it's a bit more efficient if i
137:22 - change the logic a little bit
137:24 - and use or operator it returns true if
137:27 - at least one of its operands are true
137:30 - let's go through the logic here
137:33 - if x of rectangle one is more than x of
137:36 - rectangle two plus width of rectangle
137:39 - two we know they cannot possibly collide
137:42 - so this will return true and we know
137:44 - straight away there is no collision
137:50 - also if x of rectangle 1 plus width of
137:53 - rectangle 1 is less than x of rectangle
137:56 - 2 again we know these rectangles can't
137:59 - possibly collide just one check and we
138:01 - know there is no collision
138:06 - if y of rectangle 1 is more than y of
138:08 - rectangle 2 plus height of rectangle 2
138:11 - there is no way for collision to happen
138:15 - if y of rectangle 1 plus its height is
138:18 - less than y of rectangle 2 we also know
138:21 - they don't collide
138:23 - so if at least one of these four checks
138:25 - is true we know there is no collision if
138:28 - all four return false we know that the
138:30 - rectangles must collide else statement
138:33 - is entered and collision is detected
138:37 - i hope this was visual enough and you
138:38 - got some clarity on how these checks
138:40 - work if you have any questions let me
138:42 - know
138:43 - if you want to see how to implement
138:45 - these particular algorithms in an actual
138:47 - project and where exactly to place them
138:49 - in your code base i use them in many of
138:51 - my games such as in tower defense
138:53 - frogger flappy bird and many more i will
138:56 - link some in the video description if
138:58 - you want to learn more with me check out
139:00 - some videos on my vanilla javascript
139:02 - game development playlist i also do web
139:04 - animations generative art for beginners
139:07 - and more everything with vanilla
139:08 - javascript using no frameworks and no
139:11 - libraries hope you have fun and show me
139:13 - some of your creative coding projects
139:15 - please you can message me on twitter if
139:16 - you want let's be friends
139:23 - collision detection is important if you
139:25 - want to build particle systems where
139:26 - elements interact with each other
139:29 - or when you are building javascript
139:30 - games and you want to detect when two
139:32 - objects collide or maybe when you want
139:34 - your canvas animations to interact with
139:37 - regular website elements
139:38 - three of the most common techniques we
139:40 - use for games and creative coding are
139:42 - collision detection between circles
139:44 - rectangles and polygons there are also
139:47 - other potential scenarios and some
139:49 - clever people came up with interesting
139:50 - ways how to detect them with code some
139:53 - are easier than others one of the most
139:55 - useful ones is collision detection
139:56 - between two circles
139:58 - you can detect if two circles collide
140:00 - with javascript very easily the
140:02 - algorithm just takes two center points
140:05 - of our circles and checks if the
140:07 - distance between them is less than the
140:10 - radii of these two circles added
140:12 - together what does that look like in
140:14 - code let me quickly show you let's say
140:16 - we have two javascript objects circle
140:18 - one and circle two they have some
140:20 - coordinates so position on horizontal
140:22 - x-axis and position on vertical y-axis
140:25 - and some radius i connect their center
140:28 - points with a line
140:29 - this line represents distance between
140:31 - center points of these two circles i
140:34 - connect position of circle 2 to my
140:35 - current mouse position so we can move it
140:37 - around
140:38 - if the distance between these two center
140:40 - points is more than radius of circle 1
140:43 - plus radius of circle two we know they
140:45 - can't collide if the distance is the
140:47 - same we know they touch and if the
140:49 - distance is smaller then some of these
140:51 - two radii added together we know the
140:53 - circles overlap they collide to be able
140:56 - to measure distance between two points
140:58 - of a javascript in this case center
140:59 - point of circle one and center point of
141:01 - circle two we will use simple and very
141:03 - powerful algorithm once you learn this
141:06 - and get comfortable with it you will
141:07 - unlock next level in your coding and
141:09 - animation projects to measure the
141:10 - distance between these two points and
141:12 - check if the circles collide we need to
141:14 - know length of this line we calculated
141:17 - by imagining there is a right angle
141:19 - triangle in between like this
141:22 - in this triangle our distance is
141:24 - actually hypotenuse the longest side of
141:26 - a right triangle opposite to the right
141:28 - angle
141:29 - this is the right angle 90 degrees
141:32 - we know x and y position of center point
141:34 - of circle one
141:36 - and we also know x and y position of
141:38 - center point of circle 2. with that we
141:40 - can calculate length of both arms of the
141:43 - right triangle this side is simply just
141:45 - the difference between horizontal x
141:47 - position of center point of circle 2
141:49 - minus horizontal x position of center
141:52 - point of circle one
141:59 - we can do the same thing to calculate
142:00 - this side
142:03 - vertical position of this center point
142:07 - minus vertical position of this center
142:10 - point
142:14 - now we have this imaginary right
142:15 - triangle between our two points we know
142:17 - this side
142:19 - we know this side and we know this is
142:21 - the right angle 90 degrees
142:25 - now we want to know how long is this
142:27 - side hypotenuse of our triangle opposite
142:29 - to the right angle we can achieve that
142:32 - easily with pythagorean theorem it
142:34 - allows us to calculate relations among
142:36 - the three sides of a right triangle
142:38 - imagine we draw squares on top of each
142:40 - line like this pythagorean theorem tells
142:42 - us that the sum of the areas of the two
142:45 - squares around the right angle equals to
142:48 - the area of the square on the hypotenuse
142:51 - c squared is equal to a squared plus b
142:55 - squared
142:56 - that means c is square root of a squared
142:59 - plus b squared if you want to know why
143:02 - this is true check out radu's video i
143:04 - will link it in the video description
143:07 - so distance between center point of
143:09 - circle 1 and center point of circle 2 is
143:12 - dx times dx
143:14 - which is side a
143:16 - squared plus d y times d y
143:20 - side b squared this would give us a
143:23 - squared value and i want square root so
143:25 - i wrap it in math dot square root like
143:30 - this now we calculated the hypotenuse of
143:33 - the right angle triangle which is the
143:35 - distance between center points of circle
143:37 - one and circle two
143:46 - the distance is less than radius of
143:48 - circle 1 plus radius of circle 2
143:51 - we have collision
143:54 - if the distance is exactly the same
143:55 - number as the sum of radius of circle 1
143:58 - plus radius of circle 2 we know they
144:01 - touch
144:03 - if the distance is more we know there is
144:05 - some space between the circles and they
144:06 - don't collide
144:14 - visual and audio feedback that reacts to
144:17 - player actions and in-game events is
144:19 - really important if you want your
144:20 - javascript games to feel good
144:22 - you can for example attach sound and
144:24 - explosion animation whenever collision
144:26 - happens in your game you can also use
144:28 - this technique to make score points
144:30 - float from defeated enemies
144:32 - or from collected items
144:34 - today we will build an easy fun project
144:36 - together that combines javascript audio
144:39 - and sprite animation when we covered all
144:41 - these basics of triggered event-based
144:43 - animations we will build a game that
144:45 - will look something like this to really
144:47 - put all these principles in action
144:49 - [Music]
144:52 - i create a regular web page markup
144:54 - in document head i link my css style
144:56 - sheet
144:59 - i create html5 canvas element with an id
145:02 - of canvas one we will draw on it with
145:04 - code i also link my javascript file down
145:07 - here at the bottom just before the
145:08 - closing body tag
145:10 - all i need to do install css is to
145:12 - position my canvas element so i target
145:14 - it with id
145:16 - i give it border 3 pixel solid black
145:20 - position absolute
145:22 - height 700 pixels with 500 pixels
145:26 - background black
145:27 - let's center it so top 50 percent left
145:30 - 50
145:31 - and transform translate minus 50 minus
145:33 - 50
145:34 - this trick will only center elements
145:36 - that have position set to absolute as we
145:38 - do here on line three
145:41 - everything else will be drawn with plain
145:42 - vanilla javascript here in script js
145:45 - file i need to point javascript towards
145:47 - my canvas element so custom variable
145:49 - called for example canvas is equal to
145:52 - document.getelementbyid
145:54 - canvas1
145:56 - ctx shortcut for context is equal to
145:59 - canvas.getcontext2d
146:01 - this will instantiate object that holds
146:04 - all 2d drawing methods we will need
146:06 - today
146:07 - canvas width is 500
146:11 - canvas height is 700
146:14 - let's test if we set it up correctly by
146:16 - drawing a quick simple shape it's good
146:18 - to test your code as you go makes it
146:20 - easier to debug i set global canvas fill
146:22 - style to white this will apply to fill
146:25 - of all shapes now unless i redeclare it
146:27 - again and give it a different color i
146:29 - call build in fill rectangle method
146:32 - i pass it coordinates 5050
146:34 - with 100 pixels and height 150 pixels
146:38 - perfect we set it up correctly and we
146:40 - are drawing on canvas now let's make it
146:42 - more fun
146:44 - i delete the rectangle and i create a
146:46 - variable called for example explosions i
146:49 - set it equal to an empty array its job
146:51 - will be to hold all active explosion
146:54 - objects i create i created them using
146:56 - javascript class i call it for example
146:59 - explosion with a capital e
147:01 - constructor will expect x and y
147:03 - coordinates coming from the outside this
147:05 - is important because we want the
147:07 - animation to be triggered at a specific
147:09 - location where the event happens for
147:11 - example we wanted to animate at
147:13 - coordinates where two elements collided
147:15 - or at coordinates of mouse click i will
147:17 - pass this x and y coordinates to the
147:19 - constructor whenever i want to trigger
147:21 - new animation and create new object
147:23 - using this class it's very simple i will
147:26 - show you in a minute
147:27 - so on this new explosion object give it
147:30 - this.x property and assign it to x that
147:33 - was passed as an argument on line 8 from
147:35 - the outside
147:37 - do the same for this.y vertical y
147:39 - coordinate
147:41 - this dot sprite width will be weight of
147:43 - a single frame in my sprite sheet i
147:45 - calculated by taking width of my sprite
147:47 - sheet and i divide it by the number of
147:49 - frames in this case my sprite sheet is
147:51 - 1000 pixels wide and has 5 frames
147:55 - 1 000 divided by 5 is 200.
147:59 - height of my sprite is 179 pixels
148:02 - sometimes you get sprite sheets that are
148:04 - too large or too small so you might want
148:05 - to scale it while still keeping the
148:07 - aspect ratio relationship between width
148:10 - and height to make sure the image is not
148:12 - stretched or squished
148:14 - i declare the slot width property and i
148:16 - set it equal to this dot sprite width
148:18 - from line 11 divided by 2.
148:21 - this load height will be this dot sprite
148:23 - height divided by 2. it's important to
148:26 - divide or multiply them by the same
148:28 - number to keep the same aspect ratio by
148:30 - the way for optimization it's always
148:32 - better to multiply than to divide
148:34 - division operation in javascript is more
148:36 - performance expensive so instead of
148:38 - dividing them by 2 i could have
148:40 - multiplied them times 0.5
148:44 - i will bring my sprite sheet into the
148:45 - project you could declare it as a global
148:47 - variable but i think it's a bit cleaner
148:49 - to put it as a property on class like
148:51 - this this dot image equals new image
148:55 - this is just image class constructor and
148:56 - it will create new blank html image
148:59 - element
149:00 - this dot image src will give it source
149:02 - attribute and i set it to boom.png if
149:06 - you want to use the same file you can
149:07 - download it in the video description
149:09 - this image was kindly provided by one of
149:11 - my favorite game artists i will link his
149:13 - website in the video description as well
149:15 - he has a lot of cool game art there if
149:17 - you are interested
149:19 - to animate this sprite sheet i will crop
149:21 - out one frame and i will be jumping to
149:24 - the right by the amount of sprite width
149:26 - frame by frame to do that i will need
149:28 - this.frame variable i will set it to 0
149:31 - at first we will also need to add some
149:33 - behavior to this class we do it by
149:36 - creating class methods i will need one
149:38 - to update and one to draw my explosions
149:41 - update method will only have one job for
149:43 - now to increase this dot frame from line
149:45 - 17 by one for every animation loop this
149:48 - dot frame plus plus
149:50 - draw method will take values from the
149:52 - constructor and it will draw current
149:54 - frame of animation on canvas we will use
149:56 - built in html canvas draw image method
149:58 - that takes image we pass to it and it
150:00 - draws it draw image method has three
150:02 - versions with three or five or nine
150:05 - arguments depending on how much control
150:07 - you want over the image you are drawing
150:10 - since we are animating a sprite sheet we
150:12 - will use the longest version with nine
150:14 - arguments the arguments we need to pass
150:16 - to it is image we want to draw
150:18 - source x source y source width and
150:21 - source height
150:22 - of area you want to crop out from the
150:24 - source sprite sheet
150:26 - and destination x destination y
150:29 - destination width and destination height
150:31 - these last four arguments will determine
150:33 - where on destination canvas you want to
150:35 - place that cropped out image on two
150:40 - it might sound complicated but it makes
150:42 - sense if you use it couple of times when
150:44 - you learn how to use draw image method
150:46 - and you get really comfortable with it
150:47 - you will have complete control over
150:49 - sprite sheets you want to animate it's
150:51 - really good and so useful so now i will
150:53 - replace these placeholder values with
150:55 - actual variables we prepared inside
150:58 - constructor image we want to draw is
151:00 - this dot image from line 15.
151:03 - source x is the only one from these nine
151:05 - arguments that might be a bit more
151:07 - complicated for beginners to calculate
151:09 - current horizontal position i need to
151:11 - take sprite width from line 11 and i
151:14 - multiplied times this dot frame from
151:16 - line 17 as the program runs this dot
151:19 - frame increases inside update method on
151:21 - line 20 we will get frame 0 1 2 3 4
151:26 - because we are multiplying sprite with
151:28 - times frame
151:32 - source y is horizontal y coordinate we
151:35 - want to crop out from the source since
151:37 - this sprite sheet has only one row
151:39 - source y will always be zero source
151:42 - width is this dot sprite width and
151:44 - source height is this dot sprite height
151:46 - from line 12.
151:48 - so now we told javascript what sprite
151:50 - sheet we want to draw and what area we
151:53 - want to crop out from it
151:55 - to display just one frame
151:57 - now i just simply tell it where on
151:59 - canvas i want to draw it
152:01 - destination x is this dot x from line 9
152:04 - destination y is this dot y from line 10
152:07 - destination width and height is this dot
152:09 - width and distort height from lines 13
152:11 - and 14. our class is complete this is
152:14 - all we need to trigger this dust cloud
152:16 - animation and attach it to any event we
152:18 - want to
152:19 - there are many events we can do here
152:21 - let's try one i call window.add event
152:24 - listener built in javascript method we
152:27 - will be listening for mouseclick event
152:29 - and in callback function that will run
152:31 - every time click event occurs
152:33 - i will at first just draw a simple
152:35 - rectangle to make sure everything works
152:38 - fill rectangle expects four arguments x
152:41 - y width and height
152:42 - i want this rectangle to be drawn at the
152:44 - current coordinates of my mouse click
152:46 - to do that is easy callback function on
152:48 - event listener has access to built-in
152:51 - event objects usually we name it e or
152:54 - event like this
152:55 - but you can name it anything you want
152:57 - javascript knows that this argument
153:00 - passed to callback function on event
153:01 - listener refers to event object you can
153:04 - put abc here and it will still work as
153:06 - long as you refer to it as abc later in
153:09 - the code as well basically here i am
153:11 - saying take event object with
153:13 - information about this click event and
153:16 - save it in a custom variable i call e
153:19 - if i console log this e i will get an
153:21 - error
153:22 - let's comment outline 29 for a second
153:25 - now whenever i click on canvas i get
153:27 - this console log that contains all
153:29 - information about current click event
153:31 - that just occurred if i open it i can
153:33 - see we have all kinds of details here
153:36 - all we want is where on canvas this
153:38 - event happened so we can draw a
153:39 - rectangle at the least coordinates i can
153:42 - see x and y coordinates are down here
153:44 - as properties called x and y now that i
153:47 - know the name of properties i'm looking
153:49 - for i can use these values inside fill
153:51 - rectangle method i want to draw it at x
153:53 - coordinate of current mouse click
153:56 - i know that value is stored on my event
153:58 - object in a property called x as we just
154:01 - saw so i put e dot x here and e dot y
154:05 - width and height could be anything i
154:07 - want i want my rectangle to be for
154:09 - example 50 x 50 pixels
154:13 - i can't see anything when i click that
154:15 - is because i used black background and
154:16 - default fill is also black i set fill
154:19 - style to white color when i click you
154:21 - can see that we draw a white rectangle
154:23 - on canvas but it's not being drawn under
154:25 - mouse why is that in this case event.x
154:29 - gives me value that doesn't account for
154:31 - this top and left margin between start
154:33 - of my webpage and start of canvas what i
154:36 - need to do is offset my coordinates to
154:38 - account for it good way to do that is to
154:40 - measure canvas position first you can do
154:42 - this with one line of code i create a
154:44 - custom variable called for example
154:46 - canvas position and i set it equal to
154:48 - canvas from line one and i call get
154:52 - bounding client rectangle built-in
154:53 - method on it
154:55 - get bound inclined rectangle is a very
154:57 - useful built-in javascript method it
155:00 - returns an object provided information
155:02 - about the size of an element and its
155:04 - position relative to the viewport
155:07 - i can console log my canvas position
155:09 - variable now and you can see the object
155:12 - here
155:13 - it contains bottom left right and top
155:15 - position on the graphics here you can
155:18 - see exactly what these values represent
155:20 - it also contains information about its
155:22 - width and height and its x and y
155:24 - position you can use this to measure any
155:26 - html element on your page if you are
155:29 - offsetting something it's really useful
155:31 - i delete console log on line 7. i like
155:33 - to clean up after myself as i go
155:36 - so if i want my white rectangle to be
155:38 - drawn under the current mouse position i
155:40 - need to offset e dot x and e dot y by
155:43 - top and left margin between viewport and
155:46 - canvas horizontal x coordinate is e dot
155:49 - x minus canvas position dot left
155:52 - now you can see that horizontal position
155:54 - is exactly under mouse
155:56 - i also fix vertical position by saying e
155:59 - dot y minus canvas position top
156:02 - perfect
156:03 - you can see that rectangle is being
156:05 - drawn towards the right bottom from my
156:07 - mouse cursor this is how rectangles work
156:10 - on canvas if i want my mouse to be
156:12 - exactly in the middle of the rectangle
156:14 - both vertically and horizontally i need
156:17 - to do one more small tweak here i offset
156:19 - my positions by half of width and height
156:22 - my width and height is 50 so i offset x
156:25 - and y by minus 25
156:30 - now when i click mouse cursor is exactly
156:32 - in the middle of white rectangle when i
156:34 - place it on canvas i know this might be
156:36 - very basic for some of you but i want
156:38 - beginners to be able to follow along
156:40 - with us this course is for everyone
156:42 - now that we understand how to draw a
156:43 - simple rectangle on click let's take it
156:45 - to the next level and use our custom
156:47 - explosion class to create sprite
156:49 - animation every time we click somewhere
156:51 - on canvas first thing i want to do is to
156:54 - take this calculation that offsets and
156:56 - centers my horizontal and vertical
156:57 - positions and i put them here in
157:00 - separate variables this is just to keep
157:02 - my code clean and easy to read
157:04 - i call them position x and position y
157:06 - and i just copy this formula in there
157:09 - i can't really do -25 here if i want to
157:12 - keep my code base reusable i need to
157:14 - offset it inside my explosion class i
157:17 - will show you in a second
157:21 - i do this position y vertical formula
157:24 - i remove console log on line 31 and i
157:27 - also delete my white rectangle we will
157:29 - be drawing animated cartoon explosions
157:31 - now
157:32 - on line 5 i have this array that will
157:34 - hold all my current active explosion
157:36 - objects the goal is to use explosion
157:39 - class on line 8 and when we click we
157:41 - push new object into this array from
157:43 - line 5. we cycle through all its frames
157:47 - using update method on line 20 we draw
157:49 - each step to display the animation and
157:51 - then when we reach the last frame we
157:54 - remove the object from the array and we
157:56 - delete it
157:59 - line 31 inside click event listener i
158:01 - take this empty explosions array from
158:03 - line 5 and i call push on it push is a
158:06 - built-in array method it will take
158:08 - whatever we pass to it as an argument
158:10 - and it will push it at the end of the
158:12 - array
158:13 - i pass it new explosion
158:15 - the new keyword will find my class on
158:18 - line 8 and it will run its constructor
158:20 - to create a new object based on this
158:22 - class's blueprint on line 9 i can see my
158:25 - constructor expects two arguments for x
158:27 - and y coordinates this is important
158:29 - because we need to know where on canvas
158:31 - we want to create this triggered
158:33 - animation here on line 31 i just pass it
158:35 - position x and position y variables we
158:38 - calculated on lines 29 and 30.
158:40 - so now i have a way to add new explosion
158:43 - object into my array on mouse click
158:46 - i will need a function to cycle through
158:48 - all objects in the array to update and
158:50 - draw them
158:51 - let's create animation loop i will write
158:53 - a custom function called animate inside
158:56 - i create a for loop that will cycle
158:58 - through all elements in the array
159:00 - sometimes if we click really fast in
159:02 - sequence we will have many objects
159:04 - animated at the same time sometimes this
159:06 - array will be empty it will have 0
159:08 - elements and this loop will be skipped
159:10 - for each object in the array we will
159:12 - call its update method
159:14 - and also it's a draw method
159:18 - to create animation loop i call built in
159:20 - request animation frame function and i
159:22 - pass it animate the name of its parent
159:25 - function from line 34.
159:27 - now i can call animate to kick off
159:29 - animation loop
159:30 - awesome this is working kinda we can see
159:33 - old frames because we are not clearing
159:35 - canvas and i also need to center my
159:36 - animation around the cursor better
159:39 - to only see the current frame i call
159:41 - built in clear rectangle method and i
159:43 - want to clear the entire canvas
159:48 - if you look closely you will notice we
159:50 - are skipping frame 0 because update
159:52 - method increases frame variable by 1
159:54 - before we draw the first frame i want
159:56 - each triggered animation to have its own
159:58 - timer that way we can stagger the
160:00 - animation speed
160:02 - on line 19 i created this dot timer
160:04 - property and i set it to 0.
160:09 - on line 22 inside animation loop i
160:11 - increase this dot timer by 1 for each
160:13 - animation step now i can say if this dot
160:16 - timer is divisible by 10 with a
160:18 - remainder of 0 this simply means run
160:21 - this code every 10 frames
160:24 - only when timer is divisible by 10
160:26 - increase frame by 1. this will slow down
160:29 - the animation timer has to increase 10
160:31 - times before frame increases once
160:35 - now we can see the initial first frame
160:37 - as well and animation speed is 10 times
160:40 - slower than before
160:42 - let's make width and height slightly
160:43 - bigger on lines 14 and 15.
160:48 - you can see that my animation is drawn
160:50 - too much down from mouse cursor same as
160:53 - we did with white rectangle before i
160:55 - want mouse cursor to be in the center of
160:57 - the animation
160:58 - to do that i can simply offset x and y
161:00 - by half of width and height i can either
161:03 - do it here or i can also do it here
161:05 - inside draw image method it would give
161:07 - us the same result i can't offset x and
161:10 - y here in my event listener because at
161:12 - this point i don't know what width and
161:14 - height my animation is i could hard code
161:16 - some values here but that would not be
161:18 - reusable
161:19 - i think the cleanest way is to move
161:20 - this.x and this.y to go after width and
161:23 - height here
161:24 - so that they can see these properties
161:27 - and i offset them here this dot x is
161:30 - equal to x which was passed as an
161:32 - argument on line 9 minus this dot width
161:35 - from line 12 divided by 2. this centered
161:38 - my animation around the cursor
161:40 - horizontally
161:41 - and this dot y is y minus this dot
161:45 - height divided by two
161:47 - perfect
161:48 - right now i'm just adding more and more
161:50 - objects into my array they stay there
161:52 - even after they stopped animating
161:55 - you can see that if we console
161:57 - explosions array from line 5.
162:03 - we are just adding more and more objects
162:05 - into the array every time we click i
162:07 - need to find a way to remove the ones
162:09 - that have stopped animating we could do
162:11 - object pooling here to avoid
162:12 - instantiating and deleting objects over
162:14 - and over but i will show you how to do
162:16 - that in some more advanced tutorial
162:18 - today let's just do the simplest
162:19 - solution on line 45 inside the for loop
162:22 - that runs through all objects in my
162:24 - explosions array after i draw and update
162:27 - them i check if this particular object
162:29 - has frame property more than 5.
162:31 - frame property comes from line 18 and on
162:34 - line 24 we are increasing it to draw our
162:36 - animation frame by frame sprite sheet
162:38 - has 5 frames and we count from 0 so i
162:41 - know if frame property is more than 5 we
162:45 - played the entire animation
162:47 - on line 44
162:48 - if this particular object has frame
162:50 - property more than 5 i will remove it
162:53 - using built-in array splice method
162:56 - splice method just wants index of object
162:59 - we want to remove so i for index and i
163:02 - want to remove one object at this index
163:05 - so i comma 1 to make sure the next
163:08 - object in the array is correctly updated
163:10 - and animated after we removed its
163:12 - neighbor we need to adjust index by -1 i
163:16 - minus minus because i'm controlling my
163:19 - array on line 36 in browser console i
163:21 - can see that we are correctly adding and
163:24 - removing objects from the array awesome
163:28 - we have a solid infrastructure for
163:29 - triggered animation and we can connect
163:31 - this code to collision coordinates for
163:33 - example and run this animation when two
163:35 - objects collide in our game we can also
163:37 - connect it to different events and user
163:39 - input it doesn't have to be a click
163:40 - event to avoid code repetition i will
163:42 - put this code into a separate custom
163:45 - function i call for example create
163:47 - animation
163:51 - i cut all this code
163:53 - and i paste it here
163:56 - i call create animation from inside my
163:58 - click event we need to pass down
164:00 - reference to event object to calculate
164:02 - coordinates like this
164:07 - look what happens if i connect it to
164:09 - mousemove event
164:14 - it gives us pretty cool effect
164:16 - experiments this looks like some deep
164:18 - sea creature
164:19 - when i move it like this you can see
164:21 - that the first frame of dust cloud
164:23 - animation is always rotated the same way
164:26 - maybe i want to rotate it a different
164:28 - angle every time we create new explosion
164:30 - to do that i use built-in save and
164:32 - restore html canvas methods let me just
164:35 - write this and then i will explain
164:36 - what's happening
164:40 - translate will set rotation center point
164:42 - in this case i want to rotate around its
164:44 - center so this dot x and this dot y
164:47 - i want each one to be rotated by a
164:49 - different random angle value i create a
164:52 - new property on line 20 called this dot
164:54 - angle
164:55 - circle is 360 degrees
164:58 - html canvas rotate method expects
165:00 - radians so 360 degrees is roughly 6.2
165:04 - radians this dot angle will be a random
165:06 - number between 0 and 6.2
165:09 - i pass this.angle to canvas rotate
165:11 - method on line 31 like this
165:14 - now it's rotating too much
165:16 - it's because i translated the drawing
165:18 - context to this.x and this.y on line 30.
165:21 - then i rotate it and then i go from that
165:23 - point further to another this dot x and
165:25 - this.y here x and y coordinates for our
165:28 - animation are already captured here on
165:30 - line 30. so on line 32 i replace this.x
165:34 - and this.y to zero think about it this
165:37 - way i use translate which would be point
165:39 - zero zero on canvas to this.x and this.y
165:43 - so between these save and restore calls
165:46 - 0 0 is actually this dot x and this.y
165:51 - that's better i also need to offset it
165:53 - by this.width divided by 2 and this dot
165:56 - height divided by 2 here inside draw
165:58 - method
166:00 - and remove it on lines 14 and 15. this
166:03 - is how you rotate anything on canvas you
166:05 - save the current state of canvas to make
166:07 - sure the following changes affect only
166:09 - one draw call i translate rotation
166:11 - center point on top of my current object
166:13 - i want to rotate i rotate the entire
166:16 - canvas context by random angle value we
166:19 - draw our image and we restore canvas
166:21 - context to the original save point to
166:23 - make sure this translate and rotate only
166:25 - affects one draw call of one object
166:28 - canvas rotation is one of the more
166:29 - difficult concepts for beginners to
166:31 - understand i spent the entire halloween
166:33 - episode explaining it so don't worry if
166:35 - this was too fast for you if you want
166:37 - more details on how to rotate things on
166:39 - canvas i will link that episode in the
166:41 - video description for now let's just
166:43 - move on you can see each dust cloud is
166:46 - now rotated randomly so the trail itself
166:48 - looks more chaotic as every dust trail
166:51 - should let's comment out mouse move
166:53 - event
166:57 - now we have this nice cartoon dust cloud
166:59 - animation whenever we click on canvas
167:01 - it's missing something let's give it
167:03 - some sound it's really easy to attach
167:05 - sound to event animations in javascript
167:08 - i go to opengameart.org
167:10 - and let's click browse
167:12 - and sound effects
167:15 - i remember there was one i really liked
167:18 - here on left i will type magic in title
167:20 - search
167:21 - [Music]
167:26 - oh yes it's this one magic special
167:28 - effect spark it contains four cool magic
167:31 - sounds
167:34 - i download it and i take the one called
167:36 - ice blast
167:40 - i rename it to boom.wav
167:47 - for you the path might be different if
167:49 - you chose different file or you placed
167:50 - it in a different folder i only want to
167:53 - play the sound file once per animation
167:55 - so in update method on line 25
167:58 - i say if this dot frame is equal to 0
168:01 - take this dot sound from line 21 and
168:04 - call build in play method on it like
168:06 - this
168:13 - choosing the right sound and animation
168:14 - speed is very important to how your game
168:17 - feels in the end
168:18 - if you do it well your game will be
168:20 - satisfying and your users will love to
168:22 - play it don't forget to click the like
168:23 - if you learned something new today for
168:25 - more vanilla javascript game development
168:27 - and animations check out my playlist i
168:29 - will link relevant videos in the
168:31 - description down below thanks for coding
168:32 - with me today hope you had fun
168:40 - do you want to build awesome games and
168:42 - master front and web development at the
168:44 - same time in this final javascript and
168:46 - html5 canvas game tutorial i want to
168:49 - show you 5 techniques i wish i used
168:50 - sooner today we will build a game
168:52 - completely from scratch step by step
168:54 - with no frameworks and no libraries we
168:57 - will learn how to achieve pixel perfect
168:59 - collision detection using colors how to
169:02 - use time stamps and delta time to make
169:04 - sure our game runs at the same speed on
169:06 - different machines we will learn about
169:08 - arrays and i will show you how to remove
169:11 - all the game objects using array filter
169:13 - method and how to use array sort method
169:15 - to create a correct draw order in a 2d
169:18 - game we will also talk about modern
169:20 - javascript syntax and we will learn how
169:22 - to make our animation code cleaner and
169:24 - less repetitive with spread operator i
169:26 - will also share many small tips and
169:28 - tricks as we go along students of
169:30 - today's course will get two premium
169:32 - spreadsheets completely for free kindly
169:34 - provided by this amazing artist check
169:36 - out his website for more click the like
169:37 - please if you are excited and ready to
169:39 - learn let's talk about javascript have
169:41 - fun
169:42 - [Music]
169:51 - i want you to build projects you can
169:53 - show off to someone and be proud about
169:55 - so as usual we will build a game and by
169:57 - the end of this tutorial you will have a
169:59 - complete project i learned some of these
170:01 - techniques from my friend raju he has a
170:03 - lot of other cool things to teach you if
170:05 - you want you can go and check out his
170:06 - courses i will link some in the video
170:08 - description some of you tell me that you
170:10 - only make games by animating divs and
170:12 - other html elements it's a great way to
170:14 - start and learn the basics html canvas
170:17 - can handle many more moving objects at
170:18 - the same time so if you want to try and
170:20 - build games that have a little bit more
170:22 - complexity maybe this is the time for
170:24 - you to give canvas a chance let me show
170:26 - you it is easier than you think to build
170:28 - interactive animated projects with it i
170:30 - will take you through it step by step
170:32 - and help you understand i have a
170:34 - introductory game development series and
170:36 - a beginner playlist where i go slower
170:38 - over all the important techniques if you
170:40 - find yourself struggling at some point
170:42 - or you think i'm going a bit too fast
170:44 - maybe try to watch that one first over
170:46 - there we also create really cool
170:48 - projects but i keep beginners in mind at
170:50 - all times it might be an easier starting
170:52 - point for you and then you will be ready
170:54 - to take on videos like this one and
170:56 - actually properly understand everything
170:58 - i will leave some links in the video
171:00 - description let's go
171:03 - [Music]
171:16 - let's create some ravens i will have an
171:18 - array that will hold all my raven
171:20 - objects it needs to be a led variable
171:22 - not const i will explain why in a minute
171:25 - i create a custom class called raven it
171:27 - will be a blueprint based on which all
171:29 - my animated ravens will be created by
171:31 - javascript constructor will create one
171:34 - blank new object every time it is called
171:37 - and it will assign it properties and
171:38 - values as we define them here
171:41 - it will have width property and its
171:43 - value will be for example 100 pixels
171:45 - height will be 50 pixels this dot x
171:48 - starting horizontal x coordinate will be
171:50 - just behind the right edge of canvas so
171:52 - they can fly across to the left so
171:54 - canvas width vertical y coordinate will
171:56 - be a random number between 0 and canvas
171:58 - height since rectangles on canvas are
172:01 - drawn from the top left corner going
172:03 - right and down i don't want any ravens
172:05 - to be partially hidden below the bottom
172:07 - edge of screen initial y position will
172:10 - be a random number between 0 and canvas
172:12 - height minus the height of a raven
172:15 - between here and somewhere around here
172:18 - it needs to be in brackets like this to
172:20 - give us the correct range of values
172:22 - direction x will be horizontal speed
172:24 - basically it will be a random number
172:27 - between a 3 and 8. i want ravens to
172:29 - bounce up and down as they fly so the
172:32 - initial vertical speed i call direction
172:34 - y for example will be a random number
172:37 - between minus 2.5 and plus 2.5 minus
172:40 - values will move upwards plus values
172:43 - will move the raven down along the
172:45 - vertical y-axis update method will move
172:47 - the raven around and adjust any values
172:50 - that needs to be adjusted before we draw
172:52 - the next frame at first i will just
172:54 - simply move it to the left so this dot x
172:57 - from line 11 minus equals this direction
172:59 - x from line 13. draw method will take
173:02 - these updated values and any drawing
173:04 - code we put here will represent single
173:06 - raven object visually first let's start
173:09 - with a simple rectangle i call built in
173:12 - fill rectangle method and i pass it x y
173:15 - width and height ravenclass is complete
173:18 - we have a way to create ravens let's
173:20 - create animation loop i create a custom
173:22 - function i call for example animate it
173:25 - will take argument i call timestamp this
173:28 - will be a numeric value in milliseconds
173:30 - so one second will be number 1000 i will
173:33 - show you exactly how it works any code
173:35 - inside this animate function will run
173:37 - over and over updating and drawing our
173:39 - game frame by frame
173:41 - the first thing we will do between every
173:43 - frame is clear old paint all the
173:46 - drawings from the previous frame so
173:48 - clear rectangle and i want to clear the
173:50 - entire canvas from coordinates 0 0 to
173:52 - coordinates canvas with canvas height we
173:55 - will run some code in between and then
173:57 - at the end we will use
173:59 - requestanimationframer method that we'll
174:01 - call animate again create an endless
174:03 - animation loop
174:04 - i will console.log test to make sure it
174:06 - works and i also need to call animate
174:09 - like this on the first page load to
174:11 - trigger the first loop in browser
174:13 - console i can see the loop is running
174:15 - perfect
174:16 - it's good to test your code as you go to
174:18 - make sure there are no typos it's safer
174:20 - than to write the entire project and
174:22 - then try to look for bugs there step by
174:24 - step approach will save you a lot of
174:26 - time
174:27 - i can also test if my raven class is
174:29 - working i will use it to create many
174:31 - ravens but i can also just create one
174:34 - i create a variable called raven and i
174:36 - assign it to new raven like this this
174:39 - will create one raven object for me
174:42 - which will have access to update class
174:44 - method from line 16 and draw method from
174:46 - line 19.
174:49 - i call it from inside my animation loop
174:52 - and
174:53 - here's my raven it just flies over once
174:56 - if i refresh the page it flies again
174:58 - this works so far we are doing great
175:01 - instead of having one raven i want to
175:02 - create a new raven periodically and i
175:05 - want to make sure that periodic event is
175:07 - triggered at the same interval on very
175:09 - slow old computers and on brand new
175:12 - gaming super pcs to make sure the
175:14 - timings in my game are consistent and
175:17 - based on time and milliseconds rather
175:19 - than on the power of my computer and its
175:21 - ability to serve frames at a certain
175:23 - speed i will use timestamps i will
175:26 - compare how many milliseconds elapsed
175:28 - since the last loop and only when we
175:30 - reach certain amount of time between
175:32 - frames only then we will draw the next
175:34 - frame it's actually very simple but it
175:36 - might take some time to get used to it
175:38 - if you are a beginner let's do it and
175:40 - see how it works
175:41 - what is happening here we are calling
175:43 - animate using request animation frame
175:46 - animate becomes a callback function on
175:48 - requestanimationframe method and default
175:50 - javascript behavior for callback here is
175:53 - to pass it automatic timestamp as an
175:55 - argument its value is in milliseconds
175:59 - just so you know where this timestamp
176:00 - will be coming from it's a default
176:02 - javascript behavior when using request
176:04 - animation frame it will pass its
176:07 - callback function
176:08 - in our case animate automatic timestamp
176:11 - argument we will see it better in a
176:12 - minute as the loop runs request
176:15 - animation frame calls animate over and
176:17 - over passing it timestamps my goal here
176:19 - is to take time from the current loop
176:22 - save that value run the loop again with
176:24 - a new timestamp value and compare them
176:26 - to see how many milliseconds it took in
176:28 - between frames
176:30 - i will need some helper variables here
176:33 - time to next raven will be a variable
176:35 - that will accumulate millisecond values
176:37 - between frames until it reaches my
176:39 - interval value and trigger next frame
176:42 - initially it will start at 0. raven
176:45 - interval will be a value in milliseconds
176:47 - every time time to next raven
176:50 - accumulates enough to reach 500
176:52 - milliseconds it will trigger next raven
176:54 - and it will reset back to 0 to start
176:57 - counting again
176:59 - i will also need variable that will hold
177:00 - value of timestamp from the previous
177:02 - loop the initial value will be 0.
177:06 - inside my animation loop i will
177:08 - calculate delta time this will be a
177:10 - value in milliseconds between timestamp
177:12 - from this loop and saved timestamp value
177:15 - from the previous loop
177:20 - after i used last time value to
177:22 - calculate delta time i will assign last
177:24 - time variable from line 8 to the new
177:27 - timestamp passed here in this loop so
177:30 - that we have that value ready to compare
177:32 - in the next loop
177:34 - let's console timestamp
177:36 - i can see i misspelled last time here
177:39 - capitalization of letters is very
177:40 - important in javascript
177:43 - you can see in console i'm getting
177:45 - timestamps in milliseconds since the
177:47 - loop started the very first value is a
177:49 - second so it goes like this seven eight
177:52 - seconds and so on so this is the
177:54 - automatically passed timestamp value
177:56 - here it's generated by default by
177:59 - javascript because we made animate into
178:01 - a callback function on request animation
178:04 - frame method here on line 33
178:07 - there is a way to do this without
178:09 - calculating delta time at all but i
178:11 - haven't tested that and i'm not sure
178:13 - what is the browser support for that
178:15 - technique so let's go with this tested
178:17 - safer solution today i will remove
178:19 - console.log leaving too many console
178:21 - logs in your projects especially the
178:22 - ones running so often like this can
178:24 - affect your performance so keep that in
178:26 - mind on line 6 i have time to next raven
178:30 - variable here in my animation loop i
178:32 - will increase its value by delta time
178:34 - for every animation frame
178:36 - i will console log delta time now
178:41 - again i need to be careful about
178:43 - spelling my variables correctly here
178:48 - i can see that on my computer time
178:50 - between frames is around 16 milliseconds
178:53 - my computer is powerful and it is able
178:55 - to serve a new frame every 16
178:57 - milliseconds
178:59 - on your computer the number might be
179:00 - different i would actually be very
179:02 - interested to know if it's the same
179:04 - number or a different one for most of
179:06 - you if you are following and coding with
179:08 - me can you leave a quick comment with
179:09 - that number please you can just type 16
179:12 - if it's the same number or whatever
179:14 - different number you are getting right
179:16 - now
179:16 - so time to next raven starts at 0 and is
179:20 - increasing by this value of around 16
179:23 - milliseconds per each frame
179:25 - on line 7 i created a variable called
179:28 - raven interval and i set it to 500
179:30 - milliseconds in my animation loop i will
179:33 - say when time to next raven reaches this
179:37 - raven interval
179:38 - when this number that starts at 0 and
179:41 - increases by the amount of milliseconds
179:43 - that happened between frames reaches 500
179:46 - at that point we will take raven's array
179:49 - from line 10 and use built-in array push
179:51 - method
179:54 - i will pass it new raven which will
179:56 - trigger my raven class constructor
179:58 - create one new raven object and it will
180:01 - push it inside raven's array
180:04 - when that happens i set time to next
180:06 - raven back to zero so it can start
180:09 - counting again from the beginning
180:11 - i know i just said raven a lot
180:14 - time to next raven starts at zero it
180:17 - increases by the amount of a delta time
180:20 - by the amount of milliseconds between
180:21 - each frame
180:22 - which will be dependent on performance
180:24 - of your computer however since slower
180:27 - computers will take longer to serve the
180:29 - next frame
180:30 - their delta time will be a higher number
180:32 - and it will move towards our target
180:35 - raven interval in bigger steps as a
180:37 - result this code will be triggered at
180:40 - the exactly same time on slow and fast
180:42 - computers this is one way how you can
180:44 - properly trigger periodic events in your
180:47 - projects using time stamps this might be
180:49 - a bit too much to wrap your head around
180:51 - if you are a beginner it's one of the
180:52 - reasons i don't always use timestamps in
180:55 - my animation tutorials because i can't
180:57 - really explain all of this in every
180:58 - single video but try to learn it if you
181:00 - can if you still don't get it don't
181:02 - worry i will explain it in future
181:04 - projects again so eventually it will
181:05 - start making more sense repetition and
181:08 - practice is the best way to learn at
181:09 - least for me it is
181:11 - i console cravens and i see nothing is
181:14 - happening even though my animation loop
181:16 - is running it seems that this if
181:18 - statement never evaluates the true so
181:20 - the code inside is never triggered
181:22 - controlling is great for debugging i
181:24 - console time to next raven first
181:28 - oh i can see its value is a non not a
181:30 - number
181:31 - here's our problem
181:33 - why is it this value it must be because
181:35 - we are adding delta time to it here i
181:37 - consolidate delta time and i can see
181:39 - that the first initial value is also not
181:42 - a number delta time is calculated here
181:45 - on line 30 so now i console log
181:47 - timestamp
181:51 - and this is the root of our problem that
181:54 - cascaded all the way through my
181:55 - variables that use each other to
181:57 - calculate their values when the animate
181:59 - loop starts the very first time stamp is
182:02 - undefined because timestamp only gets
182:04 - created on the second loop here on line
182:06 - 39 when we call request animation frame
182:10 - to fix that is easy i just need to give
182:12 - timestamp a starting value on the first
182:14 - call of animate that starts my animation
182:16 - loop here
182:18 - i will pass it timestamp of 0 as an
182:20 - argument
182:23 - awesome that fixed it and since i'm
182:26 - consolidating raven's array on line 36 i
182:28 - can see it adds new raven object to the
182:31 - array every 500 milliseconds
182:35 - i remove the console log we have data
182:37 - for ravens inside the array we just need
182:40 - to cycle through that array through
182:42 - every single raven object and call their
182:44 - update and draw methods so that we can
182:46 - actually see movement on canvas
182:49 - i declared my ravens array here on line
182:51 - 10.
182:52 - inside animation loop i will use this
182:54 - syntax which might be a bit unusual for
182:57 - you here i'm creating so called array
183:00 - literal by just dropping square brackets
183:02 - like that i'm creating a quick new array
183:05 - on the fly
183:06 - and these three dots are so called
183:09 - spread
183:10 - operator now i'm spreading my ravens
183:13 - array inside this new quick array i just
183:16 - created
183:17 - spread operator allows us to spread
183:19 - iterable such as this ravens array to be
183:22 - expanded into another array let's finish
183:25 - writing this line of code and i will
183:27 - explain why i'm doing that since we are
183:29 - dealing with an array i can call
183:32 - built-in array for each method i need to
183:34 - assign it a variable name for each
183:36 - object in this array so we can use it as
183:39 - we iterate
183:40 - as we cycle through it i will call that
183:42 - variable for example object so this
183:45 - object variable now represents each
183:47 - individual raven object in raven's array
183:50 - and i can say for each raven object in
183:53 - ravens array call their associated
183:55 - update method we wrote on line 20.
183:59 - so this line of code will cycle through
184:01 - the entire ravens array and it will
184:03 - trigger update method on all of them
184:06 - since we are inside animation loop this
184:08 - will happen over and over for each
184:10 - animation frame
184:12 - i will do exactly the same thing for
184:14 - draw method from line 23
184:17 - and we are updating and drawing our
184:19 - ravens awesome
184:21 - now you might ask why am i using this
184:22 - fancy syntax here where i created a new
184:25 - array and i use the spread operator to
184:27 - expand my ravens into that new array
184:30 - just so that i can call update and draw
184:32 - on them i could have just called it on
184:34 - the raven's array directly without
184:36 - expanding it like this the reason i did
184:38 - that is because when i create particle
184:40 - class in a minute i can just spread my
184:42 - particles into the same array along with
184:45 - the ravens as long as my particle class
184:47 - will have update and draw methods to
184:49 - call the code will work and i can call
184:51 - all my classes by just expanding more
184:54 - and more arrays in here
184:56 - i can for example also have an array of
184:58 - enemies obstacles power ups and other
185:01 - elements in my game i can spread all of
185:03 - them into a single array and call their
185:05 - update and draw methods all at once i
185:08 - will show you exactly what that looks
185:09 - like in a minute i think it makes the
185:11 - code look clean and easy to read what do
185:13 - you think
185:14 - online 34 i'm periodically adding new
185:17 - object into raven's array right now it's
185:20 - an endlessly growing array of objects
185:22 - and on lines 37 and 38 i'm iterating
185:25 - over all of them even the ones that have
185:28 - moved off screen and are not visible
185:30 - anymore eventually this would build up
185:32 - and cause performance issues so i need a
185:34 - way to remove the ones that have moved
185:36 - past the left edge of game area
185:38 - sometimes i use array splice method to
185:40 - do that i used splice in many other
185:43 - tutorials before but there might be a
185:44 - better way to do it using splice while
185:47 - cycling through the array removes
185:48 - objects from somewhere in the middle of
185:50 - the array so then we have to write code
185:52 - to adjust the index to make sure
185:54 - neighbors of that object don't get
185:56 - skipped easier way to discard objects we
185:59 - don't need might be using built-in array
186:02 - filter method we will just run through
186:04 - the array call update and draw for each
186:06 - raven and then we will filter out ravens
186:09 - that have moved past the left edge of
186:11 - screen what does that look like in
186:13 - javascript let me show you
186:15 - i create a new class property called
186:17 - marked for deletion and initially i set
186:19 - it to false
186:21 - in update method i say if horizontal x
186:24 - coordinate of this particular even
186:26 - object is less than 0 minus this dot
186:29 - width meaning it has moved all the way
186:31 - behind the left edge i set its marked
186:34 - for deletion property to true inside
186:36 - animation loop i take the variable that
186:38 - holds my raven's array from line 10 and
186:41 - i reassign it to a new array
186:43 - that's why the initial declaration of
186:45 - raven's array needs to be a led variable
186:47 - not const because const variable cannot
186:49 - be reassigned
186:51 - it will be the same array but objects
186:53 - that have marked for deletion property
186:55 - set to true will be filtered out filter
186:58 - method creates a new array with all
187:00 - elements that passed the test
187:03 - implemented by provided function so here
187:05 - i'm saying take raven's variable from
187:07 - line 10 and replace it with the same
187:09 - array but i wanted that array to be
187:11 - filled only with objects for which this
187:14 - condition is true
187:16 - here we have a little bit of double
187:17 - negative sorry the test in my callback
187:20 - function wants marked for deletion value
187:22 - to be false if marked for deletion is
187:25 - false then this condition evaluates as
187:27 - true and this particular even object
187:30 - will not be deleted again and said very
187:33 - simply take raven's array from line 10
187:35 - delete everything in there and replace
187:38 - it with contents of the same ravens
187:40 - array but only with those objects that
187:42 - have marked for deletion property set to
187:45 - false
187:46 - exclamation mark here means false
187:49 - since we are going to look in raven's on
187:51 - line 42 i can check in browser console
187:54 - and i can see that number of objects in
187:56 - the array is between 3 and 6. it only
187:59 - contains ravens that are active and
188:01 - visible on screen perfect
188:03 - i remove the console log these ravens
188:06 - look a bit boring just black rectangles
188:09 - let's use animated sprite sheets instead
188:11 - on my class i create a new property
188:13 - called this dot image and i set it equal
188:15 - to new image i set source on that new
188:18 - image as raven png
188:20 - art for this episode was made by this
188:22 - amazing artist link to his website is in
188:25 - the video description he also allowed me
188:27 - to share this particular spreadsheet
188:29 - completely for free with my students so
188:31 - you can download it along with all other
188:33 - project files in the description for
188:36 - more game art check out his website and
188:38 - support him if you can there aren't many
188:40 - good 2d artists like this and he's one
188:42 - of my favorites i try to buy his game
188:45 - art assets whenever i can
188:47 - i will need a couple of helper
188:49 - properties here this dot sprite width is
188:51 - width of a single frame in my raven's
188:53 - sprite sheet in this case 271 pixels
188:57 - if you are using a different sprite
188:59 - sheet take its width and divide it by
189:01 - the number of horizontal frames maybe it
189:03 - would be easier if you follow along with
189:05 - me using the same sprite sheet and then
189:08 - when you understand the code and it's
189:09 - working for you you can replace it
189:12 - sprite height is 194 pixels
189:17 - on line 31 inside draw method i call
189:19 - built in draw image method it expects
189:22 - between 3 and 9 arguments depending on
189:24 - how much control you want over the image
189:26 - you are drawing minimum is 3 arguments
189:29 - image you want to draw so this dot image
189:31 - from line 20 and x and y coordinates
189:34 - where to draw it
189:36 - now it's just simply taking the entire
189:38 - sprite sheet and drawing the whole thing
189:40 - at its original size
189:42 - we can also give it optional width and
189:43 - height arguments which will scale it
189:46 - i need to make sure my brackets and
189:47 - commas are correct here
189:50 - so now it's scaling the entire sprite
189:52 - sheet to fit inside 100 times 50 pixels
189:55 - let's do stroke rectangle here so we can
189:58 - see it better
190:01 - we can also give it a total of 9
190:03 - arguments
190:05 - these additional 4 arguments will allow
190:07 - us to only crop portion of the image
190:09 - source x source y source width and
190:12 - source height
190:14 - so the longest version of draw image
190:16 - method takes 9 arguments image we want
190:19 - to draw
190:20 - x y width and height of area to group
190:23 - out from the source image
190:25 - x y with an height of where to place
190:27 - that cropped out image on destination
190:29 - canvas
190:32 - let's just crop out the first frame now
190:35 - source x and source y is scored in at 0
190:37 - 0.
190:41 - source width is sprite width and source
190:44 - height is sprite height
190:48 - you can see our ravens are a bit
190:49 - stretched it's because these initial
190:51 - width and height values are completely
190:53 - disconnected from the actual dimensions
190:55 - and aspect ratio of our sprite sheet
190:58 - i move sprite width and sprite height up
191:00 - here so that we can use them to
191:02 - calculate values that come after with
191:04 - could be for example sprite width
191:06 - divided by 2 and height could be height
191:09 - divided by 2.
191:11 - this works but now all our ravens are
191:13 - the same size and as my friend marcus
191:16 - says multiplication is faster than
191:18 - division so let's create a new property
191:20 - called size modifier and it will be a
191:22 - random number between 0.4 and 1.
191:28 - now instead of dividing it by 2 i will
191:31 - multiply width and height by this random
191:34 - size modifier value which will make the
191:36 - ravens be different sizes
191:38 - while still preserving the aspect ratio
191:40 - so no stretching
191:46 - this dot frame is the number of frames
191:48 - in our sprite sheet counting from zero
191:51 - so the initial value will be zero this
191:53 - frame
191:54 - this dot max frame could be four or five
191:56 - depending on how you reset it back to
191:58 - frame zero let's go with four maybe i
192:01 - will adjust my frame reset check to this
192:03 - value in a minute
192:04 - if this dot frame from line 25 is more
192:07 - than this dot max frame from line 26 set
192:10 - this dot frame to zero
192:15 - else increase frame by one
192:18 - to actually reflect this value on canvas
192:20 - i replace source x argument on line 37
192:23 - with this dot frame times this dot
192:26 - sprite width so it will go 0
192:29 - 1 2 3 4 5
192:32 - and back to 0
192:34 - as frame variable cycles on line 32
192:37 - all the ravens are flopping wings very
192:39 - fast and at the same interval
192:42 - how do we speed up or slow down sprite
192:44 - animation the speed at which the next
192:46 - frame is served
192:48 - and how do we make sure it's consistent
192:50 - across all machines on old slow
192:52 - computers and new powerful ones as well
192:55 - we can do that by using delta time we
192:58 - calculated delta time on line 43 inside
193:00 - animation loop
193:02 - delta time is the difference in
193:04 - milliseconds between last frame and
193:06 - current frame and this value will differ
193:08 - based on power of your computer some
193:11 - computers can surf frames much faster
193:13 - than others
193:14 - since i already calculated this speed at
193:16 - which my machine can surf frames in my
193:18 - game i will just pass a delta time as an
193:21 - argument to my update method here on
193:23 - line 50. that way it will be available
193:25 - up
193:27 - here let's test it i console delta time
193:34 - it won't be available until i passed
193:35 - delta time as an argument here as well
193:38 - now the values are coming through
193:41 - i will need a couple of helper
193:42 - properties
193:44 - time since flap will be 0 at first it
193:46 - will be growing by the amount of delta
193:48 - time until it reaches value in flap
193:51 - interval
193:52 - then it will trigger next frame of
193:54 - sprite sheet and reset back to zero
193:58 - this time since flop plus equals a delta
194:01 - time remember that delta time is the
194:04 - amount of milliseconds between frames so
194:06 - faster computers will have smaller
194:07 - numbers here slower computers will have
194:10 - high delta time values as a result it
194:12 - will reach the target value at the same
194:14 - time on slow and fast computers unifying
194:17 - animation speed across different devices
194:22 - i say if this.time since flap from line
194:24 - 27 is more than flap interval from line
194:27 - 28 only then run this code that handles
194:30 - cycling through frames
194:33 - for this to work every time this
194:34 - condition is met and if statement is
194:37 - entered i also have to reset time since
194:39 - flap back to 0 so it can start counting
194:42 - again when to serve the next frame
194:48 - now i can change the value of flap
194:50 - interval and you can see it changes the
194:52 - speed at which we cycle through frames
194:55 - in our sprite sheet
194:57 - 500 milliseconds per frame is very slow
195:00 - five milliseconds per frame is fast
195:02 - faster than my computer can handle us
195:04 - since we know my computer can handle the
195:06 - serve next frame every 16 milliseconds
195:08 - as maximum i can also randomize flap
195:11 - interval so that each raven animates at
195:13 - a slightly different rhythm
195:15 - random number between 100 and 200 feels
195:18 - too slow
195:20 - how about a random number between 50 and
195:22 - 100
195:25 - that feels better
195:27 - quick recap we are calculating delta
195:30 - time difference in milliseconds between
195:32 - last frame and current frame the value
195:34 - of delta time will be different on slow
195:36 - and fast computers to make sure we have
195:39 - consistent time in across different
195:41 - machines we have time since flap
195:43 - variable that increases by the value of
195:46 - delta time per each frame until it
195:48 - reaches target value in the flap
195:50 - interval
195:51 - then it serves the next frame resets
195:54 - back to 0 and starts counting again
195:56 - preparing to serve the next frame
196:01 - ravens are flying in straight lines from
196:03 - right to left i also created the
196:05 - direction y property on line 21. it's a
196:08 - random number between minus 2.5 and plus
196:11 - 2.5 so summary events will move up and
196:14 - some will move down in negative or
196:16 - positive direction along vertical y axis
196:19 - based on this value
196:21 - inside update method i say
196:24 - this dot y plus equals this dot
196:26 - direction y now you can see some
196:28 - vertical movement
196:30 - it's now a little bit harder to target
196:32 - them making our game more difficult for
196:34 - players
196:35 - one thing i don't like now is how they
196:37 - disappear behind the top and bottom edge
196:40 - i want them to move all the way across
196:42 - the screen and when they touch bottom or
196:44 - top edge of game area i want them to
196:47 - kind of bounce and reverse their
196:48 - vertical movement to the opposite
196:50 - direction
196:51 - i do that with an if statement i say if
196:54 - this dot y is less than 0
196:57 - or if this dot y is more than canvas
196:59 - height minus distort height
197:03 - set their direction property from line
197:05 - 21 to its opposite value this to
197:08 - direction y times -1
197:11 - now they just bounce when they reach
197:13 - edges of the game area
197:22 - let's draw score i create a led variable
197:25 - called score and i assign it to 0
197:28 - initially
197:29 - i create a custom function called draw
197:31 - score inside i set fill style to white i
197:34 - want white numbers
197:37 - i call built in fill text method
197:41 - inside i will hard code string score
197:43 - colon space plus score variable we just
197:46 - declared and i wanted a drone on canvas
197:49 - at coordinates 50 75 for example
197:54 - now i just call draw score from inside
197:56 - my animation loop keep in mind since we
197:58 - are drawing everything on the same kind
198:00 - of a sequence in which you call this
198:02 - will affect how our game is layered
198:05 - i want score to be behind ravens so
198:07 - first i draw score then i draw ravens
198:11 - it's very small so let's set the global
198:13 - canvas font to 50 pixels impact
198:17 - now it's easier to read
198:19 - i will play with it a bit i can use
198:20 - canvas shadows here but i can also just
198:22 - draw the same text again at slightly
198:25 - different coordinates for example 55 and
198:28 - 80.
198:29 - the first layer will be black
198:31 - the second layer will be white
198:36 - in the game we will have to click ravens
198:38 - before they disappear behind the left
198:39 - edge of screen i create an event
198:41 - listener for click event callback
198:43 - function on event listener has the
198:45 - default access to this event object i
198:48 - assign it variable name for example e it
198:51 - contains information about the click
198:53 - event that happened for example its x
198:55 - and y coordinates in relation to
198:57 - viewport if i console e dot x and e dot
199:00 - y i get coordinates of my click whenever
199:03 - i click somewhere in the game area i
199:05 - promised we would do collision detection
199:07 - by color today to do that we first need
199:09 - to know what color is the pixel we are
199:12 - clicking on
199:13 - i create a custom variable i call for
199:15 - example detect pixel color it will be
199:18 - equal to built in get image data method
199:21 - get image data simply scans area of
199:24 - canvas and returns an array like object
199:26 - called uint8 clamped array it's a simple
199:30 - data structure full of unassigned 8-bit
199:33 - integers
199:34 - it's clamped which means it can contain
199:36 - only integers whole numbers between a
199:38 - certain value range specifically between
199:41 - 0 and 255.
199:44 - let's scan canvas and inspect what it
199:46 - gives us
199:47 - get image data needs four arguments x y
199:50 - with and height of area we want to scan
199:54 - i want to scan just one pixel we click
199:56 - on with mouse so coordinates of this
199:58 - click event e dot x e dot y
200:01 - and width and height of scanned area
200:03 - will be just one pixel we want pixel
200:05 - perfect precision here
200:07 - okay let's just console log this
200:09 - variable to see in what format get image
200:12 - data gives us the pixel color
200:14 - to make sure we understand how it works
200:16 - if you are getting error at this point
200:18 - keep watching i will explain it and i
200:20 - will show you how to deal with it now
200:22 - whenever i click somewhere on canvas get
200:24 - image data scans area of one pixel
200:26 - directly under the mouse click and it
200:29 - gives us this image data object
200:32 - this auto-generated image data object
200:34 - contains three main properties
200:37 - data property which is an array
200:38 - currently it has four numbers inside and
200:41 - within height of scanned area in our
200:43 - case one pixel the way color data is
200:46 - structured here is that each four
200:48 - elements in this data array represent
200:50 - one pixel specifically it's red green
200:53 - blue and alpha value
200:55 - if you use css you know that any color
200:58 - can be created by combining a certain
201:00 - amount of red green and blue
201:02 - the only difference between css rgba
201:05 - declaration and this is that in css
201:08 - opacity is a value between 0 and 1. here
201:11 - opacity alpha is also a number between 0
201:15 - and 255.
201:17 - 0 is transparent
201:18 - 255 is fully visible
201:21 - here for example you can see i clicked
201:23 - and it gave us 0 0 0 for red green and
201:26 - blue and 0 for alpha it means we click
201:29 - somewhere in the empty area keep in mind
201:31 - that canvas is just the ravens and score
201:34 - the rest is transparent rainbow colors
201:36 - you see are on the background and are
201:39 - applied to body element with css
201:42 - we are calling get image data on ctx
201:45 - variables so it is just scanning that
201:47 - particular canvas element it doesn't see
201:48 - anything else
201:50 - some of you might be getting error when
201:52 - you click on canvas and try to run get
201:53 - image data on it we are drawing sprite
201:56 - sheets our raven images on canvas in
201:58 - some browsers you won't be able to call
202:01 - get image data on the same canvas where
202:03 - you draw images it will give you an
202:05 - error that says something like canvas
202:07 - was tainted by cross-origin data if you
202:10 - are running your code locally most
202:12 - likely you see that error i'm using
202:14 - local server so i'm not getting that
202:16 - error right now it's a security measure
202:19 - related to cross-origin resource sharing
202:21 - apparently there could be viruses hidden
202:23 - in some images and by scanning that
202:25 - image with get image data you could
202:27 - expose yourself to that virus there are
202:29 - many ways to get around this problem and
202:32 - scan canvas without exposing yourself to
202:34 - any potential risks
202:36 - in our case it's simple let me show you
202:38 - but first i will assign a differently
202:40 - colored hitbox to each raven so i want
202:43 - one canvas that has only these hitboxes
202:45 - and no ravens
202:47 - because when i click it i want to get
202:48 - color of that particular hitbox not of
202:51 - the black raven if i create a secondary
202:53 - canvas and i use it just to draw these
202:55 - hitboxes and no images it won't give me
202:58 - tainted canvas error i will explain more
203:00 - as we write it in index.html i create an
203:03 - additional canvas with an id of
203:05 - collision canvas
203:07 - in style css i comment out rainbow
203:09 - background for a moment so that it's
203:11 - very clear what we are doing
203:14 - the same as i set up the first canvas i
203:16 - will also set up this new collision
203:18 - canvas
203:20 - be careful here i always make mistakes
203:22 - and typos when assigning multiple
203:24 - canvases like this for some reason i
203:26 - don't know why
203:27 - constant variable called collision
203:29 - canvas is document getelementbyid
203:32 - collisioncanvas
203:34 - collisionctx which is context is
203:36 - collisioncanvas.getcontext2d
203:40 - i also set collision canvas width and
203:42 - height
203:44 - just to check i give it red background
203:48 - yes it's covering the entire browser
203:50 - window perfect on my raven class i
203:52 - create a property called random colors
203:55 - at the point where each raven is created
203:57 - i want to roll the dice and randomly
203:59 - give it red green and blue color value
204:01 - we know that color values can be in a
204:03 - range between 0 and 255 so red will be
204:06 - math at random times 255 like this
204:11 - it will give us decimal points i need
204:12 - only integers here so i wrap it in
204:14 - math.floor
204:16 - i do the same thing for green and blue
204:20 - now we have three random values in this
204:22 - array assigned to each raven object
204:25 - i create one additional property called
204:27 - this dot color and here i concatenate
204:29 - rgba color declaration using these
204:31 - values red is random colors index zero
204:36 - green is index one
204:40 - blue is index 2 plus closing bracket
204:42 - like this
204:46 - to use this color i declare fill
204:48 - rectangle on line 54 and i set fill
204:50 - style to this dot color from line 37 now
204:54 - each raven has a random red green and
204:56 - blue color assigned when it's created by
204:58 - our class constructor and we use these
205:01 - three values to create rgb color for its
205:03 - hidden box hitbox means collision
205:06 - detection area and in our case it's the
205:08 - colored rectangle around each raven we
205:11 - can also do much more complex shapes and
205:13 - still get pixel perfect collision
205:14 - detection but for purposes of this
205:16 - tutorial rectangles are fine i don't
205:19 - want to complicate things too much this
205:20 - tutorial is to help you understand the
205:22 - technique so now each raven has an array
205:25 - of three random values between 0 and 255
205:29 - and these values are used to draw its
205:32 - hitbox
205:33 - we will use these values scan as a
205:35 - unique password for each raven we click
205:38 - on canvas get rgb value of that pixel we
205:40 - clicked on using getimagedata method and
205:44 - we compare them with this random colors
205:46 - property if they all match we know we
205:48 - click on this particular raven
205:50 - this technique has one downside there is
205:52 - a very small chance that there will be
205:54 - two identical colors generated next to
205:56 - each other but since we do random number
205:58 - between 0 and 255 3 times
206:02 - and we only have between three and seven
206:04 - active ravens on the screen at any given
206:06 - time the chances of that happening are
206:08 - astronomically low if we have any math
206:10 - experts who can run the numbers let me
206:12 - know in the comments it will be one in
206:14 - millions possibly billions now i told
206:16 - you what i want to do what does that
206:18 - look like in javascript
206:20 - before we write collision code there is
206:22 - one small thing layers i want big ravens
206:25 - to be up in front and small ravens to be
206:27 - behind to create a sense of depth and
206:30 - correct the draw order in a 2d space
206:33 - right now sometimes you see smaller
206:35 - ravens up front because they are drawn
206:37 - here on line 83 based on the order at
206:39 - which they were pushed into the array on
206:41 - line 78 i don't have to sort them for
206:44 - every animation frame only every time i
206:46 - push new raven to the array
206:48 - i want to sort out all objects in the
206:50 - array by size i use built in array sort
206:53 - method sort method will simply
206:55 - reorganize order of elements in the
206:57 - array their indexes based on provided
207:00 - check in a callback function it will run
207:03 - through the array and compare every
207:04 - element against every other element and
207:07 - sort them in ascending or descending
207:09 - order
207:10 - ascending order is default it will run
207:13 - over my ravens array and use these a and
207:15 - b variables for each object
207:17 - i can choose many different properties
207:19 - to sort them by today i will choose
207:21 - width because i know ravens in the back
207:23 - will have smaller width than the ones up
207:25 - front
207:27 - i'm just gonna return it like this
207:29 - simple syntax and i'm comparing width of
207:31 - every element in the array against the
207:34 - width of every other element in the same
207:36 - array a minus b will sort my array in
207:40 - ascending order based on width which is
207:42 - exactly what i want i want small ones to
207:44 - be drawn first and larger ones to be
207:46 - drawn on top you can read more about
207:49 - built in javascript sort method online
207:51 - we can see that it works large ravens
207:53 - are up front and smaller ones are behind
207:55 - perfect as i said i want to avoid
207:59 - tainted canvas error so i need to make
208:00 - sure i have a separate canvas i can scan
208:03 - color from that doesn't have any images
208:05 - drawn on it
208:07 - i take collision context variable i
208:09 - declared on line 6 and i draw my colored
208:11 - rectangles on that canvas instead
208:14 - by adjusting code here on lines 54 and
208:17 - 55.
208:19 - nice that worked i can see we are not
208:21 - clearing the old paint on that canvas so
208:24 - on line 74 i call clear rectangle on
208:27 - collision context as well now we have
208:29 - two canvas elements one has colored
208:31 - collision rectangle and the other has
208:33 - ravens and score drawn on it on line 68
208:37 - inside click event listener instead of
208:39 - scanning my main game canvas for pixel
208:41 - data
208:44 - i will scan just collision canvas
208:46 - instead
208:47 - now when i click it will ignore the
208:49 - black ravens and imagedata object will
208:51 - give me red green blue and alpha value
208:54 - of rectangle i clicked on
208:56 - i will compare it with red green blue
208:59 - value inside random colors property on
209:01 - each raven to know which one was clicked
209:04 - on and then i will set its marked for
209:06 - deletion property to true there are many
209:08 - techniques you can use to compare two
209:10 - array-like objects against each other
209:12 - let's just keep it simple
209:14 - when i click on one of these rectangles
209:16 - i can see the values are inside this
209:18 - image data object on a property called
209:21 - data
209:22 - data is an array with red green blue and
209:24 - alpha value of pixel we clicked on
209:31 - i create a variable to get hold of this
209:33 - array
209:34 - detect
209:35 - pixelcolor.data which refers to this
209:38 - uint8 clamped array with four elements
209:41 - there is also a way to check for
209:43 - collision detection between two objects
209:45 - based on opacity alpha value like this
209:48 - but today we will do collision between
209:50 - point and shape between mouse and ravens
209:52 - i will ignore alpha value from now on
209:54 - and i will just focus on these three
209:56 - values red green blue
210:01 - so this pc pixel color variable holds
210:04 - this data array with four elements i
210:07 - take my ravens array and i call for each
210:10 - on it
210:14 - for each raven object in the array i
210:16 - will check if its random colors property
210:18 - from line 36 if the first element in the
210:21 - array index 0 is the same value as pixel
210:24 - we clicked on
210:30 - at the same time we also need the second
210:33 - and the third element to match if random
210:36 - colors array on my raven matches exactly
210:39 - red green and blue values on pixel we
210:41 - clicked on we know we have a collision
210:44 - index 0 is red index 1 is green index 2
210:47 - is blue
210:48 - we are comparing the 2.
211:07 - if they match we have collision so i
211:08 - will take that raven object and set its
211:11 - marked for deletion property to true
211:15 - and i will increase score variable by 1.
211:20 - awesome it works i can click on ravens
211:22 - and they disappear and increase my score
211:27 - i can set opacity on collision canvas to
211:29 - zero
211:32 - and i can enable rainbow background on
211:34 - body element
211:36 - collision detection still works
211:38 - correctly well done if you followed this
211:40 - far you are doing great
211:42 - what should we do next
211:44 - how about we add explosion animation and
211:46 - sound effect whenever we click on a
211:48 - raven
211:49 - i will just repeat the same pattern we
211:51 - did for raven class i create an array
211:54 - called explosions it will hold all
211:56 - active animated explosion objects i will
211:59 - create a class to create a blueprint for
212:01 - these objects its constructor will
212:04 - expect three arguments x y and size
212:07 - because position and size will come from
212:09 - the outside and will depend on the raven
212:11 - we clicked on
212:13 - this dot image will be new image
212:17 - this dot image src will be boom png you
212:20 - can download the spreadsheet for free in
212:22 - the video description
212:23 - sprite width will be 200 pixels
212:27 - sprite height 179 pixels
212:31 - this dot size will be size we passed as
212:33 - an argument on line 61.
212:36 - same for this dot x and this dot y these
212:39 - values come from the outside this dot
212:41 - frame active frame will start from zero
212:44 - this dot sound will be new audio like
212:47 - this
212:50 - this dot sound src source and here as a
212:53 - source you can add any sound you like
212:56 - for example i will go to
212:57 - opengameart.org website i click browse
213:01 - sound effects and i will search for
213:03 - magic sfx special effects
213:06 - [Music]
213:08 - i will choose this pack of 4 sounds i
213:11 - download it and i will use the one
213:13 - called ice blast
213:14 - i will rename that file as a boom dot
213:17 - wav
213:18 - and i will add it to my project folder
213:21 - you can choose a different sound if you
213:22 - want you can also have multiple sounds
213:25 - and play a random one here it's up to
213:26 - you
213:27 - in update method same as we did before i
213:30 - will use delta time to time my animation
213:33 - we will have one variable to accumulate
213:35 - the delta time values called for example
213:37 - time since last frame
213:39 - it will start at zero
213:41 - then we need a second variable to define
213:43 - limit when the next frame triggers
213:46 - i call it for example frame interval and
213:48 - i set it to 200 milliseconds
213:52 - i pass delta time as argument to update
213:54 - method
213:55 - it will be coming directly from
213:57 - animation loop i will show you in a
213:58 - minute this.time since last frame will
214:01 - be slowly increasing by the amount of
214:03 - delta time
214:06 - if time since last frame is more than
214:09 - frame interval 200 milliseconds i
214:11 - increase this dot frame from line 69 by
214:14 - one
214:16 - i also want to play the sound when we
214:17 - are on frame zero when the explosion
214:20 - first appears there are better ways to
214:22 - do that but for today i will simply
214:24 - check if active frame of this explosion
214:27 - is a zero and i take this sound from
214:30 - line 70 and i call build in play method
214:32 - on it
214:34 - explosions will also need draw method
214:36 - which will draw the actual sprite sheet
214:37 - animation
214:40 - we will pass the draw image 9 arguments
214:42 - same as we did with ravens image we want
214:44 - to draw this dot image from line 62 four
214:48 - values for area to crop out single frame
214:51 - so source x is this dot frame times this
214:54 - dot sprite width source y will be zero
214:56 - because we only have one row of sprites
214:59 - source width will be
215:00 - sprite width from line 64 and the source
215:03 - height will be sprite height from 965.
215:06 - so now we told javascript what area we
215:08 - want to crop out now we need to give it
215:11 - x y width and height where to place it
215:13 - on destination canvas so this dot x this
215:15 - dot y
215:17 - and this dot size for width and distal
215:19 - size for height
215:22 - as this dot frame variable increases
215:24 - here on line 79 because of this source x
215:27 - property
215:28 - here we will show frames 0 1 2 3 and 4.
215:35 - now where do we trigger this code to
215:37 - create and animate new explosion the
215:39 - best place would be here i think
215:42 - this if statement detects collision by
215:44 - color
215:45 - so when collision is detected i take
215:47 - explosions array from line 59
215:52 - and i push new explosion in there this
215:55 - will trigger explosion class constructor
215:57 - on line 61. i can see it expects value
216:00 - for x and y coordinates and size because
216:03 - i want explosion to depend on the size
216:05 - of the raven we clicked so here we are
216:08 - cycling through raven's array referring
216:10 - to individual ravens as object i want to
216:13 - pass x y and width of that raven as x y
216:17 - and size arguments here
216:20 - okay
216:21 - that should work
216:23 - i can test it by console again
216:25 - explosions array from line 59.
216:29 - i can see as i click and hit ravens
216:31 - explosions are being added perfect
216:34 - i made sure my explosion class has
216:36 - update and draw method
216:38 - same as my raven class that's why here
216:40 - on line 123 i can simply just use spread
216:44 - operator and expand the entire
216:46 - explosions array into this array i'm
216:48 - creating on a fly
216:50 - so that i can call update on all ravens
216:53 - and all explosions at the same time
216:55 - like this
216:57 - i do the same thing for draw method on
216:59 - line 124
217:01 - i like this syntax it looks clean
217:04 - down here i will also remove all the
217:06 - explosion objects from the array using
217:08 - built-in array filter method
217:10 - i need to create a property called
217:11 - marked for deletion on my explosion
217:13 - class for this to work
217:15 - as you can see i'm repeating the same
217:17 - pattern we used for ravens i hope that
217:19 - using the same structure like this helps
217:21 - you to understand and navigate in the
217:22 - code a bit better
217:24 - initially i set it to false
217:29 - in update method i write an if statement
217:32 - if this.frame from line 69 is more than
217:35 - 5 which means after all the frames of
217:37 - sprite sheet have been displayed one by
217:39 - one and explosion animation is complete
217:42 - i set marked for deletion from line 74
217:45 - to true
217:46 - when i click on ravens sound plays and
217:48 - explosion sprites are animated we are
217:50 - making great progress we just need to
217:52 - polish some details here
217:54 - if i change frame interval on line 73 to
217:57 - 500 you can see it only affects the
217:59 - first frame the rest of animation is
218:02 - playing really fast
218:04 - oh it is because i need to reset time
218:06 - since last frame back to 0 every time so
218:09 - it can count towards the next frame
218:10 - interval over and over to serve next
218:13 - frames
218:22 - 500 milliseconds is too slow let's try
218:25 - 200
218:28 - i want to align explosion animation
218:30 - better over the raven sprites
218:33 - let's move it a bit upwards by adjusting
218:35 - destination y argument in draw image
218:37 - method
218:38 - i will make it relative to size this dot
218:40 - y minus this dot size
218:43 - this dot size divided by four
218:46 - yeah
218:47 - i think this is aligned well now
218:54 - let's create game over condition on line
218:56 - 11 i create a global variable called
218:58 - game over and i set it to false
219:01 - initially inside update method on
219:03 - ravenclaws i create an if statement
219:06 - if any raven manages to get all the way
219:08 - across the screen and behind the left
219:10 - edge of game area game will end if this
219:13 - dot x is less than 0 minus this dot with
219:16 - set game over from line 11 to true
219:19 - and inside animation loop on line 132 i
219:22 - only want to run request animation frame
219:25 - and serve the next frame
219:26 - of our game as long as game over is not
219:29 - true exclamation mark here
219:32 - when raven gets all the way across the
219:34 - screen game over will be set to true and
219:36 - game will stop
219:37 - like this
219:42 - i also want to display game over message
219:44 - same as we did at draw score i will
219:46 - create a function called draw game over
219:53 - first style will be black
219:56 - fill text will be for example game over
219:59 - your score is
220:03 - plus i concatenate score variable
220:06 - i want it in the middle of the screen so
220:07 - x coordinate will be canvas width
220:09 - divided by 2 and y coordinate will be
220:12 - canvas height divided by 2.
220:14 - now i need to call my draw game over
220:16 - function here in animate if game over is
220:18 - false keep serving the next frame
220:21 - else call draw game over method to
220:23 - display message and final score it's not
220:26 - centered it's because these coordinates
220:28 - on line 101 mark top left corner and the
220:32 - text goes towards right and bottom from
220:34 - that point same as when you are drawing
220:36 - rectangle or image on canvas with text
220:39 - it's easy to center by setting text
220:41 - align property to center like this
220:46 - yes that worked same as i did with score
220:48 - i want to give it shadow i will use this
220:51 - trick where i draw the same text twice
220:53 - with different fill color and i offset
220:55 - it by 5 pixels
221:00 - nice
221:01 - let's change direction of background
221:03 - gradient maybe 45 degrees
221:06 - 125 degrees
221:08 - let's do a little bit of experimenting
221:10 - now and also to solidify what we learned
221:12 - today i will use the same code pattern
221:14 - we used for ravens and explosions to add
221:17 - particle effects to our game i will go a
221:19 - bit faster now this part is just for fun
221:22 - feel free to run your own coding
221:23 - experiments
221:25 - i create an array that will hold all my
221:27 - particle objects
221:29 - i create particle class constructor will
221:32 - expect x y size and color this will be
221:34 - coming from outside the class and will
221:36 - depend on what raven is leaving this
221:38 - trail and creating these particles it
221:40 - will be shooting from their tails as
221:42 - usual we will create properties for this
221:44 - dot x and this dot y
221:46 - this dot radius since particles will be
221:48 - drawn as circles it will be random
221:51 - number tied to size of a raven let's try
221:53 - this formula and see what it looks like
221:56 - particles will be growing in size so we
221:58 - need max radius to know when to remove
222:00 - them and also at which point they reach
222:02 - maximum opacity
222:04 - it will be random number between 35 and
222:06 - 55 for example
222:08 - marked for deletion as usual will be
222:10 - false at first horizontal speed x will
222:13 - be a random number between 0.5 and 1.5
222:16 - because i want the particles to slowly
222:18 - draft to the right
222:20 - this dot color will be passed from the
222:22 - outside update method will move
222:24 - particles to the right horizontally
222:31 - it will increase radius by 0.2 per frame
222:34 - and it will check if this dot radius is
222:36 - more than max radius if it is it will
222:39 - set marked for deletion to true
222:42 - draw method will just draw a simple
222:44 - circle begin path to start the drawing
222:47 - fill style will be this dot color from
222:49 - line 101
222:50 - arc method to draw a circle
222:53 - i pass it x y
222:55 - radius start angle and ant angle like
222:58 - this
222:59 - and we fill circular path with color
223:03 - we have a class that will serve as a
223:04 - blueprint to create particles i want
223:07 - them to follow ravens as they fly to
223:09 - create trails behind them to do that i
223:11 - go up inside update method on raven
223:13 - class every time we serve next sprite
223:16 - sheet frame at the same interval we are
223:19 - going to take particles array we just
223:21 - created and we will push new particle
223:24 - inside
223:25 - my particle class constructor expects
223:27 - four values to come from the outside x y
223:31 - size and color so i pass it x and y of
223:34 - this raven width of the raven as a size
223:37 - argument
223:38 - and this dot color we use for collision
223:40 - detection rectangles will also be color
223:43 - of particle trail for that particular
223:45 - raven
223:46 - you can see here on line 95 constructor
223:48 - wants these four properties to come from
223:50 - the outside so that it knows where on
223:52 - canvas to draw the particles how large
223:55 - and what color
223:57 - i can see i forgot to declare this dot
223:59 - size here
224:00 - like this it will come from here and it
224:02 - will be used here to make radius of
224:04 - particle circles relative to the size of
224:07 - raven smaller ones should have smaller
224:09 - trails so we have particle class
224:12 - here on line 52 we are creating new
224:14 - particle object and pushing it into
224:17 - particles array
224:18 - inside animate i use spread operator
224:20 - again to expand contents of particles
224:23 - array
224:24 - here so that their update method gets
224:26 - called and i also expanded here for draw
224:29 - method
224:34 - i also need to make sure all particles
224:36 - with marked for deletion properties set
224:38 - to true get filtered out from particles
224:40 - array
224:43 - nice we are drawing particle trails you
224:45 - can see they come from the top left
224:47 - corner of raven hitbox i will adjust
224:49 - that position a bit here inside particle
224:51 - class constructor
224:53 - first i need to move this dot size up so
224:55 - that its value is available for all
224:57 - properties coming after it this dot x
225:00 - will be x passed as argument on line 95
225:03 - plus this dot size from line 96 divided
225:06 - by 2 to center it horizontally
225:08 - yes this dot y will be y plus this dot
225:11 - size divided by two
225:15 - no that's too low this dot size divided
225:18 - by three much better
225:20 - i want particles to be drawn behind
225:22 - ravens we are drawing everything on a
225:24 - single canvas element so how things are
225:26 - layered depends on the order at which
225:28 - javascript cycles through these objects
225:31 - and calls their draw methods for every
225:33 - frame i will change the order here to
225:35 - draw particles first and then ravens and
225:38 - explosions will be drawn over them like
225:40 - this
225:44 - awesome we have a working code let's
225:46 - clean it up
225:47 - in update method on particle class i
225:50 - want radius to grow faster
225:52 - 0.5 0.8
225:57 - 0.5 is fine
225:59 - drawing trail on every single raven can
226:01 - be performance expensive i want a
226:03 - property that will allow me to randomize
226:05 - it and allow me to set what percentage
226:08 - of ravens will have particle trails on
226:10 - my raven class i create a property
226:12 - called this.hessa trail i want this
226:14 - property to be true for certain amount
226:16 - of ravens and falls for the rest
226:19 - as marcus pointed out in my generative
226:21 - art tutorial any conditional expression
226:24 - results in a boolean value so instead of
226:26 - doing if else statement here i can
226:28 - simply just roll dice with math at
226:30 - random
226:31 - master random code like this will return
226:33 - a random value between 0 and 1. so i
226:36 - call it and i check if that random value
226:39 - is more than 0.5 and that's it it should
226:42 - be true roughly for 50 of ravens this
226:45 - conditional expression results in a
226:47 - boolean value true or false depending on
226:50 - if math at random rolls a random number
226:52 - that's higher or lower than 0.5 i really
226:55 - like this syntax very simple and clean
226:58 - inside update method on ravenclass i
227:00 - will only create new particles if this
227:03 - dot has trail is true
227:06 - like this
227:07 - now only half of my ravens will have
227:09 - trails
227:10 - i also want particles to animate from
227:12 - fully visible to transparent
227:16 - inside draw method on particle class i
227:18 - set global alpha property on my canvas
227:20 - to be 1 which is maximum fully visible
227:24 - minus the current size of the particle
227:27 - divided by max size as the particle's
227:30 - radius grows eventually radius will be
227:32 - the same size as max radius so let's say
227:36 - max radius is 30 pixels at that point
227:38 - where the current radius is the same
227:40 - size as max radius we will have 30
227:42 - divided by 30 here which is one and one
227:46 - minus one is zero particle is slowly
227:48 - growing more and more transparent and at
227:51 - the point when it reaches maximum radius
227:54 - it will be at zero global alpha this
227:56 - formula might be a bit difficult to
227:58 - completely understand if it's the first
227:59 - time you see it but it's very useful we
228:01 - will talk about it again in some other
228:03 - video
228:06 - as you can see global alpha is spilling
228:08 - over and affecting my ravens as well
228:10 - that's an easy fix if you want to change
228:13 - some global canvas properties such as
228:15 - fill style global alpha rotate translate
228:18 - and so on and you want those properties
228:20 - to affect only a single element you draw
228:23 - and not the others you can just wrap
228:25 - that drawing code between built-in save
228:27 - and restore methods save will create a
228:30 - snapshot of current canvas global
228:32 - settings and then we change global alpha
228:35 - here which will affect just this one
228:37 - particular particle and then i call
228:39 - restore to revert canvas settings back
228:42 - to what they were at this point
228:44 - save and restore are especially useful
228:46 - for rotating elements on canvas but you
228:48 - can also use them for other things like
228:50 - this
228:55 - my particles are blinking before they
228:57 - disappear it is because javascript first
228:59 - runs over the entire array before it
229:01 - filters the particles that are too large
229:04 - out
229:05 - and my global alpha formula works only
229:07 - in a specific range between 0 and max
229:10 - radius some particles get outside that
229:12 - range and are drawn fully opaque for a
229:14 - second before they get filtered out to
229:16 - fix it is simple i just trigger marked
229:19 - for deletion a little bit sooner for
229:22 - example by saying max radius minus 5 in
229:25 - my check online 111
229:28 - let's make the trail nicer i will add
229:30 - five particles every time instead of
229:32 - adding just one on line 54 i create a
229:35 - for loop like this and i put this code
229:37 - inside
229:42 - if i make radius grow slower trail will
229:45 - be longer because it will take particles
229:47 - more time to reach max radius
229:49 - be a bit careful here not to have too
229:51 - many active particles on screen at once
229:53 - because at some point it will start
229:55 - affecting performance and frame rate
230:00 - i can also randomize the initial x and y
230:02 - coordinates a little for example i can
230:04 - add random number between minus 25 and
230:06 - plus 25
230:09 - i think it looks a bit more interesting
230:11 - like this i can also add more enemy
230:13 - types for example i can add fast flying
230:16 - bats that will be worth extra score
230:18 - points maybe i want ravens with trails
230:20 - to be worth more score but also have
230:22 - more lives there are many things we can
230:24 - do here if you are still feeling
230:26 - creative check out some of my playlists
230:28 - i have creative coding for beginners
230:30 - game development playlists and advanced
230:32 - animation effects everything with just
230:34 - html css and plain vanilla javascript no
230:38 - frameworks and no libraries check out
230:40 - some recommended courses in the video
230:42 - description i'll see you there if you
230:44 - want to build games with javascript all
230:46 - you need is a small set of tools and
230:48 - techniques let's add a couple more of
230:50 - them to our toolkit today and make sure
230:53 - we really understand them in javascript
230:55 - the extends keyword is used to create
230:57 - so-called child class that way i can
231:00 - have my main parent class where i define
231:02 - properties and values share between all
231:04 - my enemy types and then i can have child
231:06 - subclasses that define specifics such as
231:09 - different visuals different movement
231:11 - patterns and so on for each enemy type
231:14 - then when i instantiate my ghost object
231:16 - and i call update on it if javascript
231:19 - can't find update method on the ghost
231:21 - class it will go look for it
231:22 - automatically on the parent anime class
231:24 - and it will run the code from there
231:26 - there is another special keyword called
231:28 - super today i will show you exactly when
231:31 - and how to use it let's build a project
231:33 - step by step completely from scratch and
231:36 - in the process let's learn everything we
231:38 - need to know about subclassing in
231:40 - javascript and how to use it to keep our
231:42 - code modular clean and easy to read
231:48 - this tutorial is for beginners i will
231:50 - take you through the code in a way to
231:52 - make sure you understand everything we
231:54 - will build a really fun animation
231:55 - project and i will show you many game
231:57 - development techniques today this video
231:59 - is independent and i will explain the
232:01 - code from scratch but it's part of a
232:03 - larger series where i teach you tools
232:05 - and techniques you will need if you want
232:07 - to be a game developer or if you just
232:09 - want to learn front-end web development
232:11 - and javascript on fun visual animation
232:14 - projects
232:15 - if you go along with me today you will
232:17 - get three free premium sprite sheets so
232:19 - that you can get exactly the same result
232:21 - check out this website for more
232:23 - beautiful game development art assets to
232:25 - start my project i create a basic
232:27 - webpage boilerplate markup a link style
232:30 - css file javascript file and i created
232:33 - html5 canvas element with an id of
232:35 - canvas one i bring my three images into
232:38 - the project by creating three img tags
232:41 - with ids worm ghost and spider you can
232:44 - find these images to download in the
232:46 - video description it might be a good
232:48 - idea to use the same images as me at
232:50 - first and then modify the code and use
232:52 - your own art assets once you get
232:54 - everything working it might save you a
232:56 - lot of time debugging if you follow
232:58 - exactly what i'm doing especially if you
233:00 - are a beginner
233:01 - i give my canvas a border width and
233:03 - height
233:05 - and i position it with css in the middle
233:07 - of the page
233:11 - i will also hide the project images
233:14 - we will draw them and animate them with
233:15 - javascript in a minute by including
233:17 - images as image tags i can make sure
233:19 - they are fully loaded before my
233:21 - javascript code runs by using load event
233:24 - listener it will prevent potential
233:26 - errors i will show you exactly what i
233:27 - mean as we go along i set up my canvas
233:30 - using these four lines of code as usual
233:32 - let's outline the entire project
233:34 - structure now so that you can see what
233:36 - functions and classes we need and how
233:38 - they are connected to each other when we
233:41 - have the complete project structure we
233:42 - will be expanding on individual parts to
233:45 - add more functionality the most
233:47 - important thing today will be my game
233:49 - class i will use it as the wrapper that
233:51 - contains and controls all movement and
233:54 - animation logic and basically everything
233:56 - else it's a javascript class so it will
233:58 - need a constructor which is a monitor
234:00 - method for all javascript classes it
234:02 - will also have update and draw methods
234:05 - in game class constructor i create a
234:07 - property i call this dot enemies my game
234:10 - object will hold an array that contains
234:13 - all enemies like this
234:15 - my game class will also have a private
234:17 - method called add new enemy this method
234:20 - will be called every time i need to
234:21 - create and set up a new enemy for my
234:23 - game if method's name starts with a hash
234:26 - symbol like this it will be a private
234:28 - class method it means it can only be
234:30 - called from within my game class to
234:32 - manage some kind of internal
234:34 - functionality in our case adding a new
234:36 - enemy into this.enemies array from line
234:39 - 8. if you try to call this private
234:41 - method from outside game class you will
234:44 - get an error
234:45 - notice that update and draw methods are
234:47 - public because i will need to call them
234:49 - from my animation loop from the outside
234:51 - a bit later
234:52 - my add new anime private method will
234:55 - need a way to create new enemies for the
234:57 - game
234:58 - so we will write another class i call
235:00 - anime and inside we declare a blueprint
235:03 - whenever i call this anime class from
235:05 - inside add new anime method it will
235:08 - create one new enemy object for me i
235:10 - will show you how to make animated
235:12 - ghosts worms and spiders they will all
235:14 - be created by this enemy class but they
235:17 - will have different animations and
235:18 - different behaviors to make our game
235:20 - more interesting and maybe more
235:22 - difficult for the players so again as
235:24 - you know every class needs a constructor
235:27 - to hold the blueprint
235:29 - and we will also have update and draw
235:31 - methods here update and draw method on
235:33 - gameobject here will be handling
235:35 - updating and drawing my entire game for
235:37 - example all enemies player obstacles
235:40 - backgrounds menus and so on update and
235:43 - draw method here on the anime class will
235:45 - be handling only each individual enemy
235:48 - such as their position movement pattern
235:50 - sprite animation and so on and finally
235:53 - to complete the skeleton of our project
235:55 - we will need a custom animate function
235:57 - that will call what needs to be called
235:59 - and a loop around to move and animate
236:01 - things in our game here in animation
236:03 - loop i declare what happens in our game
236:05 - frame by frame at first we will call
236:08 - built in clear rectangle method and we
236:11 - will clear old paint from the entire
236:13 - canvas so from coordinates 0 0 to
236:15 - coordinates canvas with canvas height if
236:18 - you are a complete beginner this is
236:20 - horizontal x axis and this is vertical y
236:22 - y-axis so point zero zero is here and
236:26 - point x two hundred y two hundred for
236:28 - example is here
236:30 - this is the basic thing you need to
236:31 - understand if you want to draw on canvas
236:33 - so we cleared old paint from canvas to
236:35 - make sure we can only see the current
236:37 - animation frame we write some code here
236:39 - depending on what we want to happen in
236:41 - our game and we call request animation
236:44 - frame built in javascript method which
236:46 - will simply take function we pass to it
236:48 - and it will call it once
236:50 - animate will run its code and call
236:52 - itself again run its code and call
236:54 - itself again over and over this is how
236:57 - you create animation loop i don't want
236:59 - any of this code to run until i'm sure
237:01 - my web page including canvas element and
237:03 - all project images have been loaded so i
237:06 - highlight all the code and i cut it for
237:08 - a second
237:10 - i want to put it inside load event
237:12 - listener
237:13 - document dot add event listener and we
237:16 - will listen for dom content loaded
237:18 - javascript event i actually made a
237:20 - mistake here because the dom content
237:22 - loaded event fires when the initial html
237:25 - document has been loaded and parsed but
237:27 - it doesn't wait for style sheets and
237:29 - images the correct event to listen for
237:31 - here is the load event which only fires
237:34 - when the whole page has been loaded
237:35 - including all dependent resources such
237:38 - as style sheets and images so please
237:40 - replace dom content loaded event with
237:43 - load event here you will not notice any
237:46 - difference if you are working locally
237:47 - because images will load instantly but
237:49 - if you are loading images from an online
237:51 - server somewhere load event is the one
237:53 - you need here
237:55 - so i paste all the code back here inside
237:57 - my load event listener
238:00 - we have canvas setup
238:02 - main game class enemy class and animate
238:05 - function if you want to animate
238:07 - something it's important that it runs at
238:09 - the same speed on slow old computers and
238:11 - on brand new gaming super pcs not every
238:14 - computer is able to surf frames at the
238:16 - same speed also some screens have
238:18 - different refresh rates and request
238:20 - animation frame adjusts when it serves
238:22 - the next frame based on screen refresh
238:25 - rate
238:26 - so what i want to do now is count how
238:28 - many milliseconds happened between
238:30 - frames and only when we reach certain
238:32 - threshold we will serve the next frame
238:35 - since we are passing animate as an
238:37 - argument to request animation frame here
238:39 - request animation frame has another
238:41 - secret feature it will pass an automatic
238:44 - timestamp argument to the function it
238:46 - calls so our animate has access to
238:49 - timestamp argument which was
238:51 - automatically generated by javascript
238:53 - because i called animate using request
238:56 - animation frame here i want to calculate
238:58 - the difference between previous and
239:00 - current animate call in milliseconds
239:03 - difference between frames and animation
239:05 - is also called delta time simply
239:07 - explained as request animation frame
239:09 - runs over and over it is passing animate
239:12 - this automatic timestamp argument i want
239:15 - to know what is the difference in
239:16 - milliseconds between previous timestamp
239:19 - and timestamp from the current loop so
239:21 - called deltatime
239:23 - i will calculate it by saying a
239:25 - timestamp that was passed in this loop
239:27 - minus timestamp that was passed in the
239:30 - previous loop i will call it for example
239:32 - last time after i used last time
239:34 - variable that was holding old timestamp
239:37 - from the previous loop to calculate
239:39 - delta time i can reassign last time to
239:42 - the new time stamp from this loop so
239:44 - that it can be used in the next loop
239:46 - again
239:47 - let's console delta time to see if it
239:49 - works
239:50 - here i declare animate i also need to
239:52 - call it the start the first animation
239:54 - loop
239:55 - oh yeah last time is not declared i
239:58 - declare it right here and i initially
240:00 - set it to 1. this value of 1 will only
240:02 - be used for the very first loop because
240:04 - on the second loop it will get
240:06 - reassigned to the current timestamp
240:10 - in console i can see my delta time is
240:12 - around 16 milliseconds this is very
240:14 - common refresh rate for most computer
240:16 - screens but if you have high refresh
240:18 - screen you can get a lower number here
240:20 - and if you have old computer you can get
240:22 - higher number here especially when you
240:24 - create a bigger project where you
240:25 - animate many moving parts at this point
240:28 - even very slow computers should handle
240:30 - 16 milliseconds delta time time between
240:32 - animation frames since our game doesn't
240:34 - have any graphics yet
240:36 - if i scroll in console all the way up to
240:38 - my first delta time console aux i can
240:41 - see the initial call was none not a
240:43 - number it's because animate only
240:45 - receives automatic timestamp argument
240:47 - here when it gets called by request
240:49 - animation frame on the very first
240:51 - initial call it doesn't have any
240:53 - timestamp argument so i will pass it 0
240:55 - just for that first loop
240:59 - now we know how to calculate delta time
241:01 - number of milliseconds between frames
241:04 - faster computers will have lower number
241:06 - slower old computers might have higher
241:08 - delta time because it can take them more
241:10 - milliseconds to serve the next frame
241:12 - since we have this delta time value we
241:14 - can adjust animation speed with it to
241:16 - make sure our game runs at the same
241:18 - speed on slow and fast computers i will
241:21 - show you where and how to use it as we
241:23 - build our project and start animate and
241:26 - move game characters around on canvas
241:28 - console lock like this can cause
241:29 - performance issues so don't forget to
241:31 - remove your console logs when you don't
241:33 - need them anymore
241:34 - on line 22 i have my anime class it has
241:37 - a mandatory constructor method which
241:39 - will be used as a blueprint to create
241:41 - one new enemy object whenever i call
241:43 - this class with a new keyword from
241:45 - somewhere in my project let's write that
241:47 - blueprint and inside we declare
241:49 - properties and values of our enemies
241:52 - each anime will need x and y starting
241:54 - coordinates so that javascript knows
241:56 - where we want to draw them on canvas our
241:59 - first hard code coordinates 100 hundred
242:02 - we will change that in a minute i will
242:04 - also give each enemy width of 100 pixels
242:06 - and height of 100 pixels
242:09 - update method on enemy class will just
242:11 - move the enemy by 1 pixel to the left
242:14 - draw method on my custom enemy class
242:16 - we'll call build in a fill rectangle
242:18 - method and it will first draw a black
242:21 - rectangle representing my enemy i pass
242:23 - it this dot x from line 24 this.y this
242:27 - dot with and this load height
242:29 - great we have anime class now we can
242:31 - call it to create enemy object and add
242:34 - it to our game inside add new enemy
242:36 - private method i take this loot enemies
242:38 - from line 9 and i call build in push
242:41 - method push method can be called on
242:43 - arrays and it will take whatever we pass
242:45 - to it and it will push that at the end
242:47 - of the array so i pass it new enemy
242:50 - the new keyword is a special command in
242:52 - javascript it will make javascript look
242:54 - for a class with the name enemy and when
242:57 - it finds it it will take its constructor
243:00 - and use the blueprint inside to create
243:02 - one new blank javascript object and
243:05 - assign it values and properties based on
243:07 - instructions inside the blueprint
243:11 - that new anime object will also
243:13 - automatically have access to update and
243:15 - draw method on anime class
243:17 - when you instantiate object with the
243:18 - javascript it will run its blueprint
243:21 - inside constructor so i will do
243:23 - something which might look a bit strange
243:24 - to you any code put inside the
243:26 - constructor will be executed when you
243:28 - create a new instance of that object
243:31 - with the new keyword so here when i
243:33 - create new instance of my game object
243:36 - i will create enemies array and i will
243:38 - call its private add new enemy method
243:41 - automatically which will push new enemy
243:43 - inside enemies array
243:45 - to check if that really happened i will
243:47 - also console lock this dot enemies to
243:50 - execute all this code here all i need to
243:52 - do is to instantiate my game class so
243:54 - let's do it down here on line 39 i
243:57 - create a new constant variable i call
243:58 - for example game and i set it equal to
244:01 - new game like this
244:03 - doing that created one new blank game
244:06 - object and a train code inside
244:08 - constructor here on line 8 so this
244:11 - console log from line 11 is showing that
244:13 - this dot enemies from line 9 contains
244:16 - one new enemy object perfect
244:19 - you can see that enemy object has x and
244:21 - y width and height as we declared here
244:23 - on line 25.
244:25 - now inside update method on game class i
244:27 - will cycle through all enemy objects
244:29 - inside this dot enemies array and i will
244:32 - call their update method from line 31. i
244:34 - hope you know syntax of for each method
244:37 - i'm simply saying here take
244:39 - this.enemiesarray from line 9 and for
244:42 - each object in this array run their
244:44 - associated update method
244:46 - this is es6 syntax so called arrow
244:49 - function i will also take the same
244:51 - enemies array from line 9 and i will
244:53 - call draw method from line 34 on all
244:56 - these enemy objects currently there is
244:58 - only one inside but there could be many
245:00 - more
245:01 - down here inside my animation loop i
245:03 - take instance of my game class from line
245:05 - 39 i call update method we just wrote
245:10 - and i also call draw method and here we
245:12 - are animating one enemy in our game
245:15 - i hope you can see advantages of code
245:17 - structure like this let's say i also
245:19 - have array of obstacles background
245:21 - layers power ups players and so on i can
245:24 - call all of these from update and draw
245:26 - method on my game class to get
245:28 - everything moving with very little code
245:30 - from a single wrapper function keeping
245:32 - my code clean and organized this way
245:34 - it's a good practice not to use global
245:36 - variables inside our classes so i will
245:39 - take context with and hide and i will
245:41 - put them inside my game class these
245:44 - arguments will be passed here on line 39
245:46 - when i create an instance of game class
245:50 - so i pass it ctx from line 3 to tell
245:53 - javascript which canvas i want to draw
245:55 - on i will define width of my game by
245:57 - passing it canvas width from line 4 and
246:00 - canvas height from line 5.
246:04 - these three variables just as my game
246:06 - class constructor expects here on line
246:08 - 8.
246:09 - then i take these arguments and convert
246:12 - them into class properties
246:14 - this dot ctx is ctx passed on line 8
246:18 - this.width is width and this.height is
246:20 - height
246:22 - now i converted public variables into
246:24 - class properties and i can pass them
246:26 - around when i need them by passing game
246:28 - object as an argument i will show you
246:30 - let's say i need width and height of my
246:32 - game inside the enemy class because i
246:34 - want my enemies to appear behind the
246:36 - edges of game area
246:38 - on line 23 when i create new anime
246:40 - object i will pass it this keyword which
246:43 - here refers to the game object we are
246:46 - currently inside
246:47 - that game object will carry all
246:49 - references to its width height and other
246:51 - properties with it let me show you so
246:54 - i'm passing this keyword and inside my
246:56 - anime constructor i will call it game
246:59 - here i created this.game property and i
247:02 - set it to game that was passed as an
247:04 - argument
247:05 - now i have access to game object from
247:07 - inside my anime class i can console log
247:10 - it and you can see all its properties
247:12 - including width and height
247:13 - so now i have access to width of my game
247:16 - from inside enemy class by saying
247:18 - this.game.width the initial starting x
247:21 - horizontal coordinate for enemies will
247:23 - be just behind the right edge of canvas
247:26 - initial starting y-coordinate will be a
247:28 - random number between 0 and this dot
247:31 - game height so in this case between 0
247:34 - and 800 pixels because height of my game
247:36 - is 800
247:38 - now whenever i reload page new enemy is
247:41 - generated with random vertical
247:42 - coordinate i achieve that by passing
247:45 - reference to my game class to enemy
247:47 - class constructor online 23 which will
247:49 - take all these properties and values
247:51 - with it
247:52 - i call it game and convert it into class
247:54 - property on my enemy class making them
247:56 - available when i need to position newly
247:58 - created enemies this is one way how you
248:01 - can pass class variables around if you
248:03 - want to avoid using global variables in
248:04 - your projects i don't really want to add
248:07 - just one anime when i create instance of
248:09 - game class i want to create new enemies
248:11 - over and over in a certain interval
248:14 - if i just call this.add new anime from
248:16 - inside update method it will create new
248:18 - anime for every animation frame that is
248:20 - too many and it would freeze my game
248:22 - very quickly i commented out
248:25 - game class is responsible for adding new
248:27 - enemies to the game so i will give it
248:29 - two new properties this dot enemy
248:31 - interval will define number of
248:33 - milliseconds between adding each new
248:35 - enemy into the game let's try 400
248:37 - milliseconds
248:39 - this dot enemy timer will count
248:40 - milliseconds from 0 to 400 over and over
248:44 - in update method i can say if this dot
248:47 - enemy timer is more than enemy interval
248:53 - call add new enemy private class method
248:55 - also at that point we want to reset
248:57 - enemy timer back to zero so it can start
249:00 - counting again
249:01 - else meaning if enemy timer is less than
249:04 - 400 milliseconds increase enemy timer by
249:06 - one
249:07 - every time we add a new enemy i will
249:09 - counterlog this.enemies array from line
249:12 - 12 just so we can check if it's adding
249:14 - objects or not
249:16 - i decrease enemy interval on line 13.
249:19 - awesome we are adding enemies but you
249:21 - know how we said that each computer
249:23 - could run at a different speed that
249:25 - could mean that enemies are being added
249:27 - faster or slower on some computers i
249:29 - want my game to run at the same speed on
249:31 - every computer and that's why down here
249:33 - on line 56 in animation loop we
249:36 - calculated the delta time time between
249:38 - frames and milliseconds i will use it
249:40 - now i pass delta time to game.update
249:43 - method on line 58. from my previous
249:46 - console log i know my delta time is 16
249:48 - milliseconds my computer can serve a new
249:50 - frame every 16 milliseconds value of
249:53 - delta time is dependent by the power of
249:55 - your computer but also on your screen
249:57 - refresh rate because request animation
249:59 - frame method adjusts to maximum screen
250:01 - refresh rate if the computer can handle
250:04 - it now i have access to delta time value
250:06 - here in my update method so instead of
250:08 - adding hardcoded value plus 1 i will add
250:11 - value of delta time to my enemy timer on
250:14 - line 13 i set an m interval to 400
250:16 - milliseconds
250:18 - or maybe 1000 milliseconds
250:21 - here i am increasing enemy timer by 16
250:23 - milliseconds per frame when we
250:25 - accumulate enough to reach 1000
250:27 - milliseconds one second we will add new
250:29 - enemy to the game
250:31 - if somebody has a faster computer their
250:33 - delta time will have smaller value
250:35 - on slow computers delta time will have
250:38 - higher value and will be getting near to
250:40 - the target 1000 less often but in larger
250:43 - steps so in the end my code will run at
250:46 - the same or very similar speed on slow
250:49 - and fast computers regardless of their
250:51 - power or monitor refresh rate and this
250:54 - is how you use the delta time to trigger
250:56 - periodic events in your games or
250:58 - animation projects i also need to make
251:00 - sure i'm passing the reference to my
251:01 - canvas properly and not using global
251:03 - variable
251:04 - let's follow the logic we declare ctx
251:07 - here on line 3. i pass that global
251:09 - variable to my game class when i
251:11 - instantiate it on line 52.
251:13 - on line 9 i take that argument and i
251:16 - convert it to class property
251:20 - then i pass ctx from line 9 to draw
251:23 - method on my enemies
251:26 - and on line 47 i need to make sure draw
251:29 - method on enemy class expects that
251:31 - argument and this way line 48 is using
251:34 - this.ctx that was passed around from
251:37 - gameobject rather than using globalctx
251:39 - variable
251:41 - i'm going to log in this.enemiesarray
251:42 - online20 and i can see it keeps growing
251:45 - i need a way to remove enemies that have
251:47 - left the screen we could potentially
251:50 - also use something called object pooling
251:52 - here but i will leave that for another
251:55 - episode first i will need a flag on my
251:57 - enemy objects that will mark them as
252:00 - ready to be deleted and then we will
252:01 - simply filter these objects out i will
252:04 - call that property this dot marked for
252:06 - deletion and i initially set it to false
252:09 - then inside update method on anime class
252:12 - i will check if this dot x is less than
252:14 - zero minus this dot with meaning the
252:16 - enemy has moved across the screen and
252:19 - behind the left edge of canvas if it has
252:21 - i will set its marked for deletion
252:23 - property to true
252:25 - now i can go inside update method on
252:27 - game class and here i will take
252:29 - this.enemiesarray from line 12 which
252:31 - currently has around 20 objects and it
252:34 - keeps growing and i will filter it
252:36 - filter is a built in javascript method
252:38 - that manipulates arrays it simply
252:40 - creates a new array with all elements
252:42 - that pass the test implemented by the
252:44 - provided function so here on line 17 i'm
252:47 - saying take this.enemies from line 17
252:50 - and reassign it to the same array but
252:53 - only include elements that have this dot
252:56 - marked for deletion property set to
252:58 - false exclamation mark here means false
253:03 - let's run the code and see if it works
253:18 - yeah we stop at 10 enemies and it's not
253:20 - growing anymore because we are removing
253:22 - old ones as we are adding new ones might
253:24 - be one good performance idea here you
253:27 - don't have to check and filter enemies
253:28 - for every frame of animation we could
253:30 - for example do it in a certain interval
253:32 - i could even take this line of code and
253:34 - put it inside this if statement
253:37 - it would still filter old enemies but it
253:39 - would run only periodically whenever i
253:41 - add a new enemy to the game
253:46 - we are making nice progress we have
253:48 - already implemented so many features
253:50 - here between lines 35 and 53 i have my
253:53 - enemy class it's a blueprint with
253:54 - properties and methods that determine
253:57 - what my enemies look like how they move
253:59 - and how they behave let's expand on it
254:02 - and make them more interesting rather
254:04 - than simple black rectangles i will
254:06 - create a so-called sub class or child
254:08 - class by saying class worm extends enemy
254:13 - doing that will make anime a parent
254:15 - class of worm and for example if i call
254:17 - update or draw and javascript can't find
254:20 - that method on my worm class it will
254:22 - automatically go looking for it on the
254:24 - parent class so it will look for that
254:26 - method on anime class same goes for
254:29 - properties declared in constructor if
254:31 - there is no constructor on my worm class
254:33 - it will automatically use the
254:34 - constructor from anime
254:36 - when i do this i can have shared enemy
254:38 - class that declares all logic properties
254:41 - methods and features that all my enemies
254:43 - have in common for example their sprite
254:45 - animation logic collision checks with
254:47 - player and so on while at the same time
254:50 - i can declare child classes where i can
254:52 - override improve and change some of
254:54 - these properties and methods to create
254:56 - unique and very different behaviors for
254:58 - different enemy types and that's exactly
255:00 - what we will do now let me show you how
255:02 - much visual and behavior variety we can
255:05 - create without repeating the code all
255:07 - enemies have in common doing this will
255:09 - keep our code clean and modular and you
255:11 - can go crazy with different enemy types
255:13 - while still keeping your logic organized
255:15 - and easy to read on my worm class i
255:18 - don't have to declare constructor at all
255:20 - and javascript will automatically use
255:22 - constructor from line 36 on enemy class
255:25 - but in most cases you want each enemy to
255:28 - have different width height x and y
255:30 - position and so on so i kind of want to
255:32 - use both
255:33 - i want to take all properties from enemy
255:35 - constructor and i want to add some
255:37 - additional properties on top of it that
255:40 - will be specific only for my worm
255:42 - objects i declare constructor and i know
255:45 - worms will have unique value for image
255:47 - properties so this dot image equals worm
255:50 - this line of code is a weird syntax and
255:52 - i will explain what's going on and how
255:54 - comment works when i bring image to my
255:56 - project this way in a minute let's first
255:58 - finish constructor method on worm class
256:01 - same as on line 36 worm class
256:03 - constructor will expect the game as an
256:05 - argument
256:08 - now i want to say take all the code
256:10 - between lines 37 and 43 on enemy class
256:12 - constructor and use it here to do that
256:15 - we use special super keyword the super
256:18 - keyword is a special command in
256:20 - javascript and it's used to access and
256:22 - call function on an object's parent so
256:25 - here i call super and i pass it game to
256:28 - literally run the constructor on its
256:30 - parent class
256:31 - after that i can add more properties on
256:34 - my worm class constructor like this
256:36 - important thing to note here is that you
256:38 - have to first call super and run parent
256:41 - constructor like this before you declare
256:43 - any additional properties using this
256:44 - keyword otherwise you will get a
256:46 - reference error
256:48 - in derived classes like this super must
256:50 - be called before you can use this
256:52 - keyword so now my worm constructor
256:55 - contains all the code from between lines
256:57 - 37 and 43 and additional distort image
257:00 - property set to worm each enemy type
257:03 - will have different starting x and y
257:05 - coordinates and different width and
257:07 - height so i will actually take all these
257:09 - and put them on my worm
257:11 - i want enemy class constructor to have
257:13 - only properties and values that are
257:15 - shared for all my enemy types
257:17 - up here on line 31 inside private add
257:20 - new anime method rather than
257:22 - instantiating parent anime class i will
257:24 - instantiate child worm class
257:26 - again i'm passing it this as an argument
257:29 - and because we are inside game class
257:31 - this reference is the entire game object
257:34 - so all these properties
257:36 - we travel down to worm class and inside
257:38 - constructor we are taking that game and
257:40 - passing it to super
257:42 - instantiating constructor of its parent
257:44 - anime class which is
257:46 - here
257:47 - anime class also has update and draw
257:49 - methods and when i call update and draw
257:52 - on my worm and javascript can't find it
257:54 - it will automatically go looking for
257:56 - them on the parent anime class i hope
257:58 - it's becoming a little bit more clear
258:00 - how this works and how parent and child
258:02 - classes relate and work together if i
258:05 - run the code we have our worms coming
258:07 - again just to prove that draw method
258:09 - that is called from line 46 is taking
258:11 - properties from worm class constructor
258:14 - let's change this dot with on line 56
258:17 - as you can see now my worms are 200
258:20 - pixels wide so what is this weird syntax
258:23 - online 58 this is not how we usually
258:25 - bring images into a project usually i
258:28 - would use getelementbyid to target my
258:30 - image element with an id of worm that i
258:33 - created in index.html in the beginning i
258:35 - wasn't aware of this so all the credit
258:37 - goes to dany who says a little known
258:40 - fact is that any elements created in the
258:42 - dom with an id attribute are
258:44 - automatically added to the javascript
258:46 - execution environment as a global
258:48 - variable
258:49 - this means that you can access any html
258:51 - element with a javascript using its id
258:54 - no need for
258:56 - document.getelementbyid or queryselector
258:58 - i'm just doing this as an experiment and
259:00 - you will see in a minute that it
259:01 - actually works if you're having any
259:03 - issues you can still bring the image
259:05 - into the project the usual way and also
259:07 - ideally pass it to the worm class
259:09 - constructor as an argument so that we
259:11 - are not pulling global variables
259:12 - directly from the outside i'm just
259:14 - experimenting here a bit i really like
259:16 - tips like this thanks danny
259:18 - nowhere in my code have i declared this
259:20 - worm variable the only place you can
259:22 - find this reference is id on line 12
259:25 - inside index html but this image will
259:28 - still work you can test it by console
259:30 - logging this.image
259:34 - i have too many console.logs let's
259:36 - comment outline 38.
259:42 - yes you can see that the javascript is
259:44 - actually finding the image with an id of
259:46 - worm automatically without us having to
259:48 - use getelementbyid like we usually do so
259:51 - let's use that image and make our worms
259:53 - look a bit better than black rectangles
259:56 - you can download these spreadsheets for
259:58 - free in the description and you can use
260:00 - them to follow along with this video for
260:02 - educational purposes to use them in any
260:04 - commercial project you would have to buy
260:06 - a full license from the artist's website
260:08 - i will link his site as well he has a
260:10 - lot of great game development art assets
260:12 - there check it out
260:14 - i feel like i explained built in canvas
260:16 - draw image method 100 times on this
260:17 - channel this method is so important at
260:20 - first i will just use the version with 5
260:22 - arguments image we want to draw
260:25 - x
260:26 - y
260:27 - width and height where to draw it on
260:29 - canvas this way we will just squeeze the
260:32 - entire sprite sheet with all its six
260:34 - frames into the predefined area of 200
260:37 - times 100 pixels notice that i'm calling
260:39 - draw method on my worm class it's using
260:42 - these properties but since javascript
260:44 - can't find draw method on worm it will
260:46 - look for it on parent enemy class and it
260:48 - will use that one
260:49 - let's remove this console.log
260:51 - and this fill rectangle as well
260:54 - i can change width and height but now i
260:56 - would actually like to draw just the
260:58 - first frame from the worm sprite sheet
261:01 - i removed all these lines i commented
261:03 - out earlier
261:05 - i create a new property on worm class
261:07 - called this.sprite width and it will be
261:09 - a width of a single frame in my sprite
261:11 - sheet if i take width of my sprite sheet
261:14 - and divide it by 6 the number of frames
261:17 - i will get 229 pixels height of a single
261:21 - frame is 171 pixels
261:24 - i take width and height and move them up
261:26 - here
261:29 - now i need to use draw method to cut out
261:31 - just single frame from that sprite sheet
261:33 - and place it on canvas for that i will
261:35 - need to give it nine arguments so
261:37 - additional four to tell javascript what
261:40 - area i want to crop out from the source
261:42 - image i need to give it source x
261:45 - source y source width and source height
261:48 - arguments source x and source y will be
261:51 - 0 0 since i'm just cropping out the
261:54 - first frame for now source width and
261:56 - source height will be distort sprite
261:58 - width from line 52 and this dot sprite
262:01 - height from line 53 so to crop out a
262:03 - single frame from an image with draw
262:06 - image method i need to give it nine
262:08 - arguments image i want to draw
262:10 - x y width and height of what area i want
262:13 - to crop out and x y with an height of
262:16 - where on canvas we want to place that
262:19 - cropped out piece of image onto
262:21 - now we are drawing just one frame
262:23 - perfect you probably noticed that it's a
262:26 - bit stretched that's because this width
262:28 - and height which is coming from here has
262:31 - no relation to the actual size of a
262:33 - single frame
262:34 - so the ratio is different let's make
262:36 - width and height the same aspect ratio
262:39 - as our sprite sheet
262:40 - i do that by making width half of sprite
262:43 - width and height will be half of sprite
262:45 - height i need it to do half because the
262:47 - original size would be too large as long
262:49 - as i use the same modifier on both width
262:51 - and height in this case i divide both of
262:54 - them by two it will preserve the aspect
262:56 - ratio of the original sprite frame
262:58 - all my worms are moving to the left by
263:00 - one pixel per frame what if i want each
263:03 - worm to have different speed for example
263:05 - a random value between 0.1 and 0.2
263:10 - and up here inside update method on
263:13 - enemy class i say this dot x minus
263:15 - equals the slot speed
263:18 - that will be very very slow let's make
263:20 - it faster you might have realized that
263:22 - i'm not using delta time in this
263:24 - movement calculation so let's use it to
263:26 - make sure the worms move at the same
263:28 - speed on all machines
263:30 - i'm calling this update method here on
263:32 - line 25
263:36 - so i pass it delta time which we made
263:39 - available here before
263:40 - now that i have access to delta time in
263:43 - update method on enemy class i will pass
263:45 - it here as an argument and to factor in
263:48 - time difference between animation frames
263:50 - when moving something around we have to
263:52 - multiply it that way faster refresh rate
263:55 - with lower delta time will move often
263:57 - but by smaller steps slower pcs will
263:59 - have higher delta time they will not
264:01 - draw frames so often but they will have
264:04 - higher delta time so they will make
264:06 - larger steps to compensate for the
264:08 - difference
264:09 - now the base speed is too much so i
264:11 - amend it on line 59
264:14 - i will actually rename it vx velocity on
264:17 - horizontal x-axis because maybe some
264:19 - other enemies will have a vertical
264:21 - movement also i need to rename it on
264:23 - line 41.
264:25 - if i go up on line 13 and reduce enemy
264:28 - interval to 100 milliseconds we will get
264:30 - a lot of worms and something will become
264:32 - apparent they are layered randomly in
264:34 - order as they are added to the game for
264:36 - example this worm should be probably
264:38 - behind this one and this one behind this
264:41 - one if we pretend this is 3d game space
264:44 - and worms that are higher should be
264:46 - behind worms that are lower it would
264:48 - look better how do we achieve that that
264:50 - index or whether worm is in front or
264:52 - behind at worms depends on order at
264:55 - which they are added to the array on
264:57 - their index in that array because as i
265:00 - push them into enemies array one by one
265:02 - we cycle through them from index 0 to
265:05 - the maximum index in that array and we
265:07 - draw worm with index 0 then worm with
265:10 - index 1 on top of it if they are in the
265:13 - same area
265:14 - then worm with index 2 will be on top of
265:17 - them and so on
265:18 - i want to reorganize my array so that
265:20 - index in the array is tied to their
265:22 - vertical position so that we first draw
265:24 - worms in this area and then we draw the
265:27 - ones in this area on top of them as we
265:30 - go down on the page vertically in plus
265:32 - direction on vertical y-axis that will
265:34 - cause worms to look like they are
265:36 - properly behind each other and not messy
265:38 - like this look at this this is a mess
265:40 - this one is sliding over the other one's
265:42 - eye
265:44 - so every time i push new worm into the
265:46 - array i will just build javascript sort
265:48 - method you can simply just call sort on
265:50 - the array and it will sort them in
265:52 - ascending order by default if you want
265:55 - more control you can give it a callback
265:57 - function sort simply takes every element
266:00 - in the array and it performs a check
266:02 - comparing values between these two
266:04 - elements pushing them up and down in the
266:06 - array depending on the condition in the
266:08 - callback i want worms with lower
266:11 - vertical y coordinates to have lower
266:12 - index so that they are drawn first so my
266:15 - condition will be a dot y minus b dot y
266:18 - like this
266:20 - sort is a built in javascript method it
266:22 - abstracts away the actual algorithm that
266:24 - does the sorting work so let's not spend
266:26 - more time on it now all we need to know
266:28 - for now is how to use it when i run the
266:30 - code you can see that worms that are
266:32 - higher are drawn behind the worms that
266:34 - are lower making it look like they are
266:36 - moving in actual 3d or maybe in two and
266:39 - a half the cartoon space well it doesn't
266:42 - look messy anymore you can swap between
266:44 - ascending and descending order by
266:46 - swapping these values in our case we
266:48 - want a minus b also notice i'm not
266:51 - sorting the array for every animation
266:53 - frame only when i add new enemy into the
266:56 - array
266:57 - so this is our worm class it's a child
266:59 - of anime and it doesn't have update and
267:01 - draw methods because as we said if
267:03 - javascript doesn't find them on the worm
267:05 - class it will go looking for these
267:07 - methods on the parent class
267:09 - but what if i want to use the base code
267:11 - from draw method on enemy class and i
267:14 - want to add some extra code to it to
267:16 - create some additional visuals for
267:18 - example as boris suggested ghosts need
267:21 - to be semi-transparent but i don't want
267:23 - reduced opacity on worms only on ghosts
267:26 - so how do we do something like that i'm
267:28 - sure you can come up with some clever if
267:30 - statement but let's keep it clean and
267:32 - use child classes for that
267:36 - i will copy my room class and rename it
267:38 - to ghost
267:40 - image online 74 will be ghost
267:42 - referencing the id
267:44 - here on line 13 in index html i look at
267:47 - my sprite sheet width divided by number
267:50 - of frames so sprite width of single
267:52 - frame is 261 pixels
267:55 - height is 209 pixels in this case
267:58 - horizontal speed modifier will be a
268:00 - little bit higher than worms let's say a
268:02 - random number between 0.1 and 0.3 so
268:06 - that's the base ghost child class how do
268:08 - i randomly push worms or ghosts into my
268:11 - game one way to do that is to create a
268:13 - property on my main game object called
268:15 - distort enemy types
268:19 - it will be an array with two elements
268:21 - for now worm and ghost
268:27 - inside add new anime private method i
268:30 - will randomly pick one of the options in
268:32 - the array i create a constant variable
268:34 - called random anime and i set it equal
268:36 - to this dot anime types and square
268:39 - brackets so if index here is 0 we get
268:42 - worm
268:43 - and if index here is 1 we get ghost how
268:46 - do i randomize this index and let it
268:48 - choose one of these randomly every time
268:50 - we run add new anime method i can just
268:52 - put math at random statement and it will
268:55 - be a random number between zero and
268:57 - length of distilled enemy types array
268:59 - that way i can keep adding more and more
269:01 - enemy types to the array and this code
269:03 - will still work maybe my game will have
269:05 - 20 different enemy types it doesn't
269:07 - matter it will still work the only
269:09 - problem is that math at random returns
269:11 - numbers with decimal points and there is
269:12 - no index 1.5 in this array it's easy to
269:16 - fix
269:17 - i will wrap it inside method floor which
269:19 - will round it down to the closest
269:21 - integer now i can check if random enemy
269:24 - variable is warm
269:26 - we will push new worm into this dot
269:29 - enemies array
269:32 - else if random anime is ghost we will
269:35 - push new ghost perfect so we have
269:37 - this.enemy types array on the main game
269:39 - class this can contain as many enemy
269:42 - types as you want inside add new enemy
269:45 - we randomly choose one of them every
269:47 - time we are about to create new enemy
269:49 - object and based on that random choice
269:51 - we create either worm or ghost so now
269:54 - both worm and ghost are child classes
269:58 - that extend my main enemy class
270:00 - let's switch to kind of flat 2d view i
270:03 - want worms to move only on the ground so
270:05 - i change their vertical y position to
270:07 - this.game.height
270:08 - minus distort height
270:11 - worms are sliding on the floor ghosts
270:13 - are flying in the air i want ghosts to
270:15 - take up only the top 80 percent of the
270:18 - game area
270:19 - not to be so close to the ground their
270:22 - vertical y position will be a random
270:24 - number between 0 and game height times
270:26 - 0.8
270:28 - or maybe 0.6 yeah
270:31 - since we switched to this new view i
270:33 - don't really need to be sorting my
270:35 - enemies by their vertical position
270:36 - anymore so i comment out this code on
270:38 - line 35. with both worm and ghost we are
270:42 - only modifying properties on the
270:43 - constructor they both inherited the same
270:46 - identical update and draw method from
270:48 - the main enemy class with no
270:50 - modifications at the moment we said we
270:52 - wanted to make the ghost
270:54 - semi-transparent so let's do it
270:56 - i declare draw method on ghost class and
270:58 - now two things can happen
271:00 - we can override the draw method with a
271:02 - completely different code here because
271:04 - when we create a new worm javascript
271:06 - will not find the draw method and we'll
271:08 - go looking for it on enemy parent class
271:10 - but with ghost it will find the draw
271:12 - method right here and it will ignore the
271:15 - original draw method on enemy class the
271:18 - second option is that i want the code
271:20 - from draw method on enemy class to run
271:22 - plus i want to write some additional
271:24 - code on top of it that will be unique
271:26 - only for ghosts i can do that by calling
271:29 - super the super keyword here simply
271:32 - represents parent class so imagine i'm
271:34 - saying enemy dot draw because i want to
271:37 - call it's draw method first super.draw
271:41 - means animate.draw basically super
271:43 - represents the super class the parent
271:46 - class so here inside the draw method on
271:48 - ghost class first i call draw method on
271:50 - enemy class and i know it expects ctx as
271:54 - an argument so that it knows what canvas
271:56 - we want to draw on that ctx property is
271:59 - coming from
272:01 - here on line 29 by the way where i'm
272:03 - calling draw on all objects inside
272:06 - this.enemies array i'm calling draw on
272:09 - all ghosts and all worms at the same
272:11 - time
272:12 - so first we call draw method on parent
272:14 - enemy class from 950.
272:16 - we will run all the code in here
272:19 - but we will also add some additional
272:21 - code that will be specific only for
272:23 - ghost objects in this case i will set
272:25 - global alpha property to 0.5 this will
272:28 - set opacity to 50
272:30 - you can see that it affects all ghosts
272:33 - and all worms as well it's because
272:35 - global alpha canvas property works the
272:37 - same as fill style for example once you
272:40 - set it you are setting it for the entire
272:41 - canvas it will stay that value for
272:44 - everything drawn on the same canvas
272:46 - unless you redeclare it to something
272:48 - else since i want global alpha to only
272:50 - affect ghosts and nothing else on canvas
272:53 - i set it to 0.5 i draw my ghost and i
272:56 - set it back to 1.
273:00 - the alternative way to do this would be
273:02 - to call ctx save built-in method which
273:05 - will take a snapshot of all canvas
273:06 - settings at that point then we can
273:09 - change global alpha and anything else we
273:11 - need to change we draw the ghost and we
273:14 - call ctx restore which will
273:16 - automatically restore canvas properties
273:18 - including global alpha back to what they
273:20 - were at this point when we called safe
273:23 - for the first time this technique is
273:25 - especially useful if i was changing
273:27 - multiple canvas properties at the same
273:29 - time not just global alpha so this is
273:31 - how you extend a method from parent
273:33 - class with a help of super keyword
273:36 - now that we know how to do it we can
273:38 - also extend update method and make
273:40 - ghosts move in wavy patterns let's try i
273:43 - redeclare update method on ghost class
273:45 - and i pass it delta time
273:50 - i call super dot update and i pass the
273:53 - delta time
273:54 - this will run all the code in update
273:56 - method on enemy class from line 46
273:59 - here
274:03 - i add a new property called this.angle
274:05 - and initially i set it to 0.
274:08 - then in update method i will say this
274:10 - dot y vertical position of my ghosts
274:13 - plus equals mastered sign built in
274:15 - javascript trigonometry function and i
274:18 - pass it this.angle as an argument
274:21 - i covered this in my enemy movement
274:23 - patterns episode as part of the series
274:25 - before so now just quickly moth.sine is
274:28 - a built-in javascript function that
274:30 - returns a sign of a number we pass to it
274:33 - it expects angle value in radians and it
274:35 - will return a value between -1 and plus
274:38 - 1. if you keep calling it and passing it
274:40 - every increase in angle value as we are
274:43 - about to do here it will endlessly cycle
274:45 - by small increments between minus one
274:47 - and plus one creating wavy movement
274:49 - pattern so called sine wave so every
274:52 - time update method runs i will increase
274:55 - this dot angle from line 79 by one that
274:58 - angle value is being passed to math.sine
275:01 - function
275:02 - here at the same time
275:04 - you can see it makes the ghost shake up
275:06 - and down we can also multiply it times a
275:09 - certain radius value this will make the
275:11 - curve larger like this we need to be
275:14 - increasing angle much slower let's try
275:16 - 0.1 per frame
275:21 - 0.05
275:26 - 0.02
275:28 - you can see how that affects the
275:29 - movement curve i change radius value
275:38 - and angle value
275:40 - let's randomize the wave size for each
275:42 - ghost i create a property i call for
275:44 - example this dot curve it will be random
275:47 - number between 0 and 3.
275:51 - and i use it here
275:53 - now some ghosts move in smaller some in
275:56 - larger waves
275:58 - i reduce the number of enemies by
275:59 - increasing enemy interval on line 13.
276:02 - let's add a new enemy every 500
276:04 - milliseconds for example
276:06 - so with ghost class we are extending
276:08 - draw method to make it semi-transparent
276:11 - and update method to give it wavy
276:13 - vertical movement worm class is just
276:16 - using the base draw and update methods
276:18 - from its parent anime class let's create
276:20 - another child class and let me show you
276:22 - a completely different type of movement
276:24 - for the third enemy type i just copy
276:26 - worm class here so that i don't have to
276:28 - write all of that again
276:30 - i will call it spider
276:32 - i check my sprite sheet sprite width
276:35 - width of a single frame is 310 pixels
276:38 - sprite height is 175
276:40 - i want spiders to start from just behind
276:43 - the top edge of game area so 0 minus
276:46 - distorted height their horizontal speed
276:48 - will be 0.
276:50 - i only want them to move up and down
276:52 - image will be spider referencing this id
276:55 - from line 14 in index html
277:00 - i give them v y velocity y property and
277:03 - set it to 1.
277:04 - now i create update method i pass it
277:07 - delta time first i call update method
277:10 - from parent anime class from line
277:12 - 46
277:14 - and then i add some additional code at
277:16 - first let's just increase vertical speed
277:18 - by one
277:23 - on line 15 i add spider to my enemy
277:26 - types and here i say else if random
277:29 - enemy is spider push new spider object
277:32 - into enemies array
277:34 - my spiders are not showing and that's
277:35 - because
277:39 - yes they just move down and their
277:41 - horizontal coordinate is off canvas so
277:42 - we can't see them
277:44 - i set their horizontal coordinate to be
277:46 - a random number between zero and game
277:48 - with
277:53 - nice we have spiders here let's make
277:55 - them move up and down let's say if this
277:57 - dot y is more than 200 pixels from the
278:00 - top revert this v y to a negative number
278:04 - since we are adding this dot v y to
278:06 - vertical position here on line 110
278:09 - if it becomes a negative number it will
278:11 - make the spider go up awesome we have
278:13 - spiders going up and down what about
278:16 - instead of hardcoding 200 here each
278:18 - spider will have a different maximum
278:20 - movement range this.max length is a
278:23 - random number between 100 and 300 for
278:25 - example actually between 0 and game
278:28 - height might be better
278:36 - now i just replace hard-coded 200 with
278:39 - this.max length here
278:42 - i also want each spider to move up and
278:44 - down at different speed
278:46 - so this dot v y is a random number
278:48 - between 0.1 and
278:50 - 0.2 i should also multiply it times
278:53 - delta time so we get consistency across
278:56 - different machines
279:00 - i want the spiders to swing up and down
279:02 - from a spider web so let's extend draw
279:04 - method as well and draw it
279:12 - first i will call draw method from
279:14 - parent class from line 51.
279:16 - here on line 88 i need to pass ctx as an
279:20 - argument i forgot to do that we don't
279:22 - want to use global variables inside our
279:24 - classes so on line 114 i pass draw
279:27 - method ctx i call draw from its super
279:30 - class from enemy parent online 51 to run
279:34 - all the code in there
279:36 - and also i will draw a spider web here
279:38 - so begin path to start a new shape
279:41 - build in canvas move to method to set
279:43 - starting coordinates of the line
279:45 - let's pass it coordinates 0 0 for now
279:48 - line 2 will be the ending coordinates of
279:50 - my line so this dot x this.y i want it
279:53 - to be where my spider is at the moment
280:01 - i stroke the lines and here they are we
280:03 - have spider webs coming from coordinates
280:05 - 0 0 2 coordinates of my spiders
280:08 - let's change the starting coordinates to
280:10 - be exactly on top of the spider
280:11 - horizontally so this dot x horizontal
280:14 - and 0 vertical this dot x position is
280:17 - top left corner of my enemy rectangle so
280:20 - if i want the web to come from the
280:21 - middle i need to take this dot x
280:23 - position and add half of enemy width to
280:26 - it
280:29 - i also do that for the starting
280:31 - coordinates
280:33 - i can see there is a small vertical gap
280:35 - between spiders and the ends of their
280:37 - webs so let's do this.y plus 10 pixels
280:40 - to make the lines a bit longer
280:42 - notice that i'm not actually animating
280:44 - the sprite sheets we are just showing
280:46 - the first frame for each anime type the
280:48 - best thing about our code structure now
280:50 - is that i can just write sprite
280:52 - animation logic once and it will
280:54 - automatically be applied to all spiders
280:56 - worms and ghosts i go up to line 46
280:59 - inside constructor on enemy class where
281:01 - i declared properties and values that
281:03 - are shared between all enemy types in my
281:06 - game
281:07 - we will need frame x property which will
281:09 - cycle between 0 and 5 to specify which
281:11 - horizontal frame from the spreadsheet we
281:13 - want to show i also declare this.max
281:16 - frame which could be specific to each
281:19 - enemy but in this case all my enemy
281:21 - spritesheets have 6 frames we count from
281:23 - frame 0 so max frame is 5.
281:26 - i also need to account for delta time
281:29 - when animating frames to make sure it
281:31 - runs at the same speed on slow and fast
281:33 - computers we already done it once today
281:35 - i will have a frame interval variable so
281:37 - let's say 100 milliseconds and then i
281:40 - will have one accumulation variable that
281:42 - will be going from zero accumulating
281:44 - delta time until it reaches my frame
281:46 - interval value
281:48 - i will call it for example this.frame
281:50 - timer i set it to 0 initially
281:53 - i check if this dot frame timer from
281:55 - line 49 is more than frame interval from
281:58 - 948
282:03 - if it is i do something
282:05 - else i increase frame time variable by
282:08 - delta time
282:09 - now i just realized we need access to
282:11 - delta time here so all this code
282:12 - actually needs to be inside update
282:14 - method
282:15 - here
282:17 - now i can say frame timer plus equals
282:19 - delta time
282:20 - remember that delta time is milliseconds
282:22 - between frames so fast computers will
282:25 - surf frames of our game animation very
282:27 - fast but will have smaller delta time on
282:30 - the other hand slow computers can't surf
282:32 - frames so often but their delta time is
282:35 - larger so as a result it evens out and
282:37 - both fast and slow computers will reach
282:40 - frame interval of 100 milliseconds at
282:42 - the same time
282:43 - this will ensure all the movement and
282:45 - animation in our games has the same
282:47 - timing regardless of speed of the
282:49 - machine we run the code on
282:52 - frame timer will start at zero it will
282:54 - be increasing by delta time and when it
282:57 - reaches frame interval we can move to
282:59 - the next frame in sprite sheet
283:01 - i have to check if current frame x from
283:03 - line 46 is less than max frame from line
283:06 - 47. if it is slice we increase frame x
283:09 - by 1.
283:10 - else we set frame x back to 0.
283:13 - at the same time i set frame timer back
283:15 - to 0 so it can start accumulating delta
283:18 - time again
283:20 - on line 46 i set frame x initially to 0.
283:24 - now i'm cycling between frame x 0 and
283:26 - frame x 5.
283:28 - to actually display that in game i have
283:30 - to replace hard-coded source x and
283:32 - source y properties in draw image method
283:34 - which i set to 0 0. i have to replace
283:37 - them with my new variables source y can
283:40 - actually stay hard coded to zero because
283:42 - our sprite sheet has only one row there
283:44 - will be no vertical navigation within
283:46 - this sprite sheet source x argument will
283:48 - be frame x from line 47 times sprite
283:51 - width from line 70. that way when frame
283:54 - x is 1 we cut out this frame frame x2 is
283:58 - this frame and so on i have entire
284:00 - episode on this uh as part of this
284:02 - series if you want more details about
284:04 - how to animate sprites properly and in
284:05 - that episode i also show alternative
284:07 - techniques how to do this i can also add
284:10 - more functionality here in update method
284:12 - on enemy class and it will be shared
284:14 - across all my enemy types it could be
284:17 - for example collagen checks with player
284:19 - some javascript generated sounds enemies
284:21 - can have particle effects and so on
284:24 - being able to write code here in one
284:25 - place and share it for all my enemy
284:27 - subclasses will save a lot of code
284:29 - repetition that would happen otherwise
284:31 - on line 53 i'm checking if enemies have
284:34 - moved behind the left edge of screen and
284:36 - i'm marking them for deletion
284:38 - this check works for both ghosts and
284:40 - worms as they move from right to left
284:42 - the problem is that spiders never move
284:43 - past that point they have no horizontal
284:45 - movement so as you can see in the
284:47 - console if i let my game run it will
284:49 - just keep accumulating more and more
284:50 - spiders i need a different check here to
284:53 - mark spiders as ready to be deleted i go
284:55 - inside update method on spider class and
284:58 - i say if this dot y is less than 0 minus
285:02 - this dot height times 2 then mark it as
285:05 - ready for deletion spiders start at 0
285:08 - minus distant height as declared here on
285:11 - line 114 they will move down and then
285:14 - they will move back up
285:16 - when they reach point 0 minus this dot
285:18 - height times 2 we delete them i will be
285:20 - extending classes a lot in my games so i
285:22 - hope you learned something new today
285:24 - creating child classes is not only
285:26 - useful for animations and game
285:28 - development but it's a very important
285:30 - javascript technique with many different
285:32 - applications across all front and web
285:33 - development i think sometimes it's
285:35 - better to learn these concepts on fun
285:37 - projects like this to learn more
285:39 - fundamental javascript techniques on
285:41 - creative coding projects check out
285:43 - related videos in the video description
285:45 - great job on completing today's course
285:48 - say hi in the comments
285:49 - [Music]
285:52 - hey coders so i heard you like making
285:54 - games me too
285:55 - i think projects like this are great not
285:57 - only for aspiring game developers but
285:59 - also to learn and improve html css and
286:02 - javascript skills in this class we will
286:04 - build easy animated side squirrel game
286:06 - completely from scratch with plain
286:08 - vanilla javascript no frameworks and no
286:10 - libraries the main goal today is to
286:12 - learn about basic code structure how to
286:14 - split responsibilities between objects
286:16 - that make up our game how to make them
286:18 - communicate with each other effectively
286:20 - and how to put all of that together in
286:22 - an easy to understand way this class is
286:24 - a part of a longer series in each
286:26 - episode we built a small standalone
286:28 - project for beginners to learn about
286:29 - fundamental building blocks of game
286:31 - development with the javascript full
286:33 - series is linked in the description in
286:35 - this part we will build a simple version
286:36 - of the game to learn the fundamentals in
286:39 - the next part we will expand on each
286:41 - element using the things we learned
286:42 - across the series let's see how it all
286:44 - comes together games should be exciting
286:46 - full of secrets and special features i
286:49 - hope this series helps you to bring your
286:50 - creative ideas to life
286:53 - we will work with three files in
286:55 - index.html i link my css stylesheet and
286:58 - javascript file i create html5 canvas
287:01 - element with an id of canvas 1 and i put
287:04 - all my game assets here in this area so
287:07 - that we can use load event listener to
287:09 - wait for these assets to be fully loaded
287:11 - and available before we run the game
287:14 - art assets were provided by this
287:16 - talented artist you can find more on
287:18 - their website i will have player image
287:21 - background image and anime image here
287:24 - you can download project files in the
287:26 - video description
287:28 - install css i give my body black
287:30 - background i make canvas blue and i
287:33 - position it in the middle of my web page
287:37 - i also want to hide my image elements
287:39 - because we will draw them with
287:40 - javascript on canvas so player image
287:43 - display none
287:44 - same goes for background image and enemy
287:47 - image
287:49 - i want javascript to wait until all
287:51 - images are fully loaded so i will wrap
287:54 - my game inside an event listener we will
287:57 - listen for load event
287:59 - load event waits for all assets such as
288:01 - sprite sheets and images to be fully
288:03 - loaded before it executes code in its
288:06 - callback function i will place the
288:09 - entire code of our game inside this
288:11 - anonymous callback function in
288:13 - javascript anonymous function usually
288:15 - means a function without a name by
288:18 - placing all my code inside this
288:20 - anonymous callback function i separate
288:22 - scope of my game from a global scope to
288:25 - make sure my custom class and variable
288:27 - names don't clash with any other outside
288:30 - code
288:31 - when all the assets are fully loaded the
288:33 - code inside will be executed line by
288:36 - line i assign variable to my canvas
288:38 - element i create context instance of
288:41 - built-in canvas 2d api that holds all
288:45 - drawing methods and properties we will
288:47 - need to animate our game
288:49 - i set canvas width to 800 pixels
288:52 - and canvas height to 720 pixels i make
288:56 - canvas transparent in this class i want
288:59 - to make it very clear how we split
289:01 - responsibilities between objects and how
289:04 - these objects interact with each other
289:06 - to create a complete game so let's just
289:08 - write all the building blocks we will
289:10 - need today our game will need input
289:12 - handler class which will apply event
289:15 - listeners to keyboard events and it will
289:17 - hold an array of all currently active
289:20 - keys
289:21 - player class will react to these keys
289:24 - as they are being pressed drawing and
289:26 - updating the player
289:28 - i will have a simple separate class that
289:30 - will handle endlessly scrolling
289:31 - backgrounds we will also need a class
289:34 - that will generate enemies for us we
289:36 - will have multiple active enemies in our
289:38 - game so i will have a function called
289:40 - handle enemies that will be responsible
289:42 - for adding animating and removing
289:45 - enemies from the game
289:47 - i will have a utility function i call
289:49 - for example display status text which
289:51 - will handle things like displaying score
289:54 - or game over message
289:56 - and lastly we will have main animation
289:58 - loop this function will run 60 times per
290:00 - second updating and drawing our game
290:03 - over and over
290:04 - so that's it here we can see all the
290:06 - building blocks we need to create a
290:08 - complete game i could have wrapped
290:10 - everything in a main game class for
290:12 - example but i'm trying to keep it clean
290:14 - and simple today
290:16 - input handler class will apply event
290:18 - listeners to the game and it will keep
290:20 - track of all keys that are currently
290:22 - pressed down inside constructor i
290:25 - created this dot keys property and i set
290:27 - it equal to an empty array the way i
290:30 - want to handle controls today will be a
290:32 - bit different from my previous courses i
290:34 - want to have an array and i will be
290:36 - adding and removing keys from it as they
290:38 - are being pressed and released that way
290:41 - i can keep track of multiple key presses
290:44 - i will place event listener directly
290:46 - inside the constructor when we create an
290:48 - instance of a class all the code inside
290:50 - constructor is executed because of that
290:53 - just by simply creating an instance of
290:56 - input handler class later all event
290:58 - listeners will be automatically applied
291:00 - i will have event listener for key down
291:02 - event callback function on event
291:05 - listener has access to this built in
291:07 - event object i will assign it a variable
291:10 - name for example e
291:12 - and i console log it
291:15 - now i create an instance of input
291:17 - handler class which will run all the
291:19 - code inside constructor so at this point
291:23 - the event listener is applied
291:25 - let's test it
291:26 - when i click my canvas and i press key
291:28 - on keyboard i can see this event object
291:31 - here it contains all different details
291:33 - about keyboard event that just occurred
291:36 - what i care about today is this key
291:38 - property it contains a string that
291:41 - represents name of key that was pressed
291:43 - so to get that value directly i say e
291:46 - dot key
291:47 - now i'm getting those values as console
291:49 - logs
291:50 - i care only about arrow keys right now
291:52 - so i say if e dot key is arrow down
291:56 - take this dot keys array from line 9 and
291:59 - push that value inside
292:01 - i move this console log here and i will
292:03 - also console log this.keys
292:07 - we will get an error this dot keys is
292:09 - undefined
292:10 - javascript cannot find it it's because
292:12 - i'm instantiating input here and the
292:15 - event listener is called from window
292:17 - object
292:18 - by the time that event listener is
292:20 - called javascript forgot that this
292:23 - keyword refers to this input handler
292:25 - object and it's this.key's property to
292:28 - make sure this keyword points to the
292:30 - correct object i can use javascriptbind
292:33 - method or i can use es6ro function
292:37 - arrow functions don't bind their own
292:39 - disks but they inherit the one from
292:41 - their parent scope this is called
292:43 - lexical scoping doing that will make
292:46 - sure javascript doesn't forget which
292:48 - object this keyword stands for and it
292:50 - will work you can see pressing arrow
292:53 - down adds an entry into this dot keys
292:56 - array
292:57 - i don't want to have multiple entries
292:58 - for each key here we can see it added
293:01 - arrow down 4 times i only want to add it
293:04 - if that specific key is not in the array
293:06 - yet so i do second condition here and i
293:09 - say if this dot key's index of e dot key
293:13 - key that was pressed is equal to -1 with
293:16 - arrays if index off is equal to -1 it
293:20 - means that element is not present in the
293:22 - array
293:23 - so i'm saying if key that was pressed is
293:25 - arrow down and if that key is not yet
293:28 - inside this dot keys array only then
293:31 - push it into the array now you can see
293:34 - that when i press arrow down multiple
293:36 - times it adds it to the array only once
293:39 - perfect i copy this code block and i
293:41 - turn it into key up event
293:45 - if key that was released is arrow down i
293:47 - want to remove it from this dot keys
293:49 - array so i call splice that takes two
293:52 - arguments index of element we want to
293:54 - remove and how many elements starting
293:57 - from that index we want to remove so i
294:00 - find index of arrow down inside this dot
294:03 - keys array by using index of method
294:06 - again
294:07 - and second argument to splice i want to
294:10 - remove one element at this index
294:13 - so here i'm saying when we release a key
294:16 - if that key is arrowed down find index
294:19 - of that key inside this dot keys array
294:21 - and use splice to remove one element
294:24 - from that array
294:25 - now when i press down arrow key it's
294:28 - added to the array when i release it
294:30 - it's removed from the array nice
294:33 - let's also listen for other keys using
294:35 - or operator
294:37 - i start with arrow up
294:39 - then we also need to listen for key down
294:42 - on arrow left and arrow right
294:45 - i'm gonna break this down on individual
294:47 - lines for clarity and i use tab key to
294:50 - make them vertically aligned be careful
294:52 - here not to forget a bracket otherwise
294:54 - the code will break
294:56 - i will also listen for the same four
294:58 - keys inside key up event
295:00 - so we have this dot keys array here in
295:03 - key down if arrow down up left or right
295:07 - is pressed and that key is not yet
295:10 - present in this dot keys array we push
295:12 - it into the array
295:14 - in key up when any of these four arrows
295:17 - are released we find index of that key
295:20 - inside this dot keys array and we use
295:22 - splice method to remove it this dot keys
295:25 - array now holds information about which
295:28 - arrow keys are currently pressed down
295:30 - sometimes it could be multiple ones at
295:32 - the same time
295:33 - i remove these console logs
295:36 - by instantiating input handler class
295:38 - here on line 50 all the code inside
295:41 - constructor on line 8 will be executed
295:44 - we have this.keys property as an empty
295:46 - array and we use keydown and keyup event
295:50 - listeners to add and remove specific
295:52 - keyboard inputs from that array and now
295:55 - we know how to handle keyboard inputs in
295:57 - a game we will use them to move player
295:59 - around in the next part
296:01 - player class will define properties of
296:04 - player object it will draw it animate it
296:07 - and update its position based on user
296:09 - input player object needs to be aware of
296:12 - game boundaries we don't want it to run
296:14 - off screen so i pass it game with and
296:17 - game height as arguments and i convert
296:20 - them into class properties like this
296:23 - i'm using sprite sheet of specific size
296:25 - here we have frames of width and height
296:27 - of 200 pixels it's a good practice to
296:30 - size your sprite sheets to the actual
296:32 - size you will use in your game i can
296:34 - also resize them with code but it's
296:37 - cleaner to have art assets of the right
296:39 - size
296:40 - this.x will be 0 and this.y will be 0 at
296:44 - first
296:45 - player object will have public draw
296:47 - method it will expect context as an
296:49 - argument to specify which canvas we want
296:52 - to draw on in case we want multiple
296:54 - layers and multiple canvases in our game
296:57 - i will start by calling build in fill
296:59 - rectangle method to draw a rectangle to
297:02 - represent our player i pass it x y width
297:05 - and height
297:07 - since i have black background i set fill
297:09 - style to white so that we can see the
297:11 - rectangle
297:12 - on line 62 i create an instance of
297:15 - player class using the new keyword here
297:17 - on line 31 i can see player class
297:20 - constructor expects game width and game
297:22 - height as arguments so i pass it canvas
297:24 - width from line 4
297:26 - and canvas height from line 5.
297:29 - i get an error game with is not defined
297:33 - it's because i made a typo here on line
297:35 - 32
297:36 - now it works and i can display our
297:38 - player by calling its public draw method
297:40 - we just wrote
297:42 - it expects context as an argument so i
297:44 - pass it ctx from line three
297:48 - i can move player around by adjusting
297:50 - its x and y coordinates let's make it
297:53 - stand on the bottom of game area so this
297:55 - dot game height
297:57 - minus this dot height
298:00 - we will also need update method to move
298:02 - player around let's start by increasing
298:05 - player's horizontal x-coordinate by 1
298:07 - for every call of update method
298:10 - if i call update method just like this
298:12 - there won't be any visible movement i
298:14 - put it inside animation loop and i use
298:17 - request animation frame built in method
298:19 - to make it loop i pass it animate the
298:22 - name of its parent function to create
298:24 - endless animation loop and i call
298:26 - animate like this to start it
298:28 - i also need to put draw inside
298:31 - i delete this
298:32 - we can see trail behind player rectangle
298:35 - i want to only see the current animation
298:37 - frame to delete old paint from canvas i
298:40 - use built-in clear rectangle method it
298:42 - will delete entire canvas between each
298:44 - animation loop
298:46 - perfect now we have player moving from
298:48 - left to right as we defined in its
298:50 - update method instead of drawing a white
298:53 - rectangle let's draw a player image i
298:56 - call build in draw image method
298:58 - i need to bring player sprite sheet into
299:00 - the project so this dot image property
299:02 - is a document dot get element by id and
299:06 - i give it id of player image
299:10 - i pass this.image from line 38 to draw
299:13 - method and i pass it x and y of 0 0 so
299:16 - top left corner of canvas it will just
299:19 - draw the entire sprite sheet at these
299:21 - coordinates i pass it this this.x and
299:23 - this.y instead you can see it just draws
299:26 - the entire large sprite sheet with all
299:29 - the frames draw image method can accept
299:31 - optional fourth and fifth arguments for
299:33 - width and height it will then stretch or
299:36 - shrink the image to fill all available
299:38 - area
299:39 - like this
299:40 - i actually just want to draw one frame
299:42 - so i pass it another four optional
299:44 - arguments source x source y source width
299:47 - and source height
299:49 - this defined rectangle we want to crop
299:51 - out from the source sprite sheet and the
299:54 - destination x destination y destination
299:56 - width and destination height define
299:59 - where on destination canvas we want to
300:01 - place that cropped out rectangle onto
300:04 - i pass it 0 0 as source x source y and
300:08 - we are cropping to this dot with this
300:10 - dot height so this area
300:12 - now we can see top left frame in the
300:15 - sprite sheet i can use source x and
300:17 - source y to jump around the sprite sheet
300:20 - by changing value of source y we can
300:22 - jump between different rows by changing
300:25 - the value we pass as source x we are
300:27 - navigating within the sprite sheet
300:29 - horizontally let's just turn these
300:31 - values into class properties called for
300:33 - example frame x and frame y
300:37 - i replace them here and now we can
300:40 - navigate around sprite sheet by changing
300:42 - values of these properties perfect i
300:44 - commented this line out the movement
300:47 - will work this way we will have this dot
300:49 - speed property initially i set it to
300:51 - zero we will be adding this dot speed to
300:54 - this dot x at all times when it's zero
300:57 - there will be no movement when this dot
300:59 - speed is a positive number player will
301:01 - move to the right when it's a negative
301:03 - number player will move to the left on
301:06 - the negative direction on horizontal
301:08 - x-axis
301:09 - now we can connect keyboard inputs to
301:11 - player movement update method will
301:14 - expect input as an argument i take input
301:17 - from line 69 and i pass it to
301:19 - playerupdate method here
301:21 - we are interested in this.key's property
301:23 - from line 9 which holds all currently
301:26 - active keys we can access that property
301:28 - from input argument we are receiving
301:30 - here so this section will deal with
301:33 - horizontal movement
301:35 - if input dot keys contains arrow up so
301:38 - if index of arrow up is more than -1 run
301:42 - the following code actually let's start
301:44 - with arrow right and set this dot speed
301:47 - from line 41 to 5. when arrow write is
301:50 - found in this array from line 9 set
301:53 - player speed to 5. it will make player 2
301:56 - move to the right but there is nothing
301:58 - to set speed back to zero so it never
302:00 - stops moving i create an else statement
302:03 - here and inside i set player speed back
302:05 - to zero now player moves to the right
302:08 - only when i hold down right arrow key
302:11 - nice
302:12 - i do else if statement here be careful
302:14 - about the brackets it's easy to get it
302:16 - wrong and get an error here
302:18 - else if arrow left is pressed set player
302:21 - speed to -5
302:23 - now i can move player left and right
302:25 - player can easily move off screen if we
302:27 - hold the arrow for too long let's
302:29 - introduce some horizontal boundaries
302:32 - if horizontal x coordinate is less than
302:34 - zero set it back to zero now we can't
302:37 - move past the left edge of game area
302:40 - else if player's horizontal coordinate
302:42 - is more than game with minus player's
302:45 - width meaning right edge of player
302:47 - rectangle is touching the right edge of
302:49 - canvas area also don't allow it to move
302:52 - past this point
302:53 - perfect
302:55 - jumping is a bit more complicated but
302:57 - it's not that hard i say if arrow up key
303:00 - was pressed set velocity y property to
303:03 - -30 i set velocity y property on player
303:06 - object and initially i set it to zero
303:09 - let's just move this around so that i
303:11 - have controls in one place
303:13 - horizontal movement separate and i
303:15 - create a section for vertical movement
303:18 - actually this line also belongs under
303:20 - horizontal movement here
303:23 - at all times i will be adding velocity y
303:25 - property from line 42 to player's
303:27 - vertical coordinate from line 37
303:30 - initially velocity y is set to zero so
303:32 - we will get no vertical movement when i
303:35 - press up arrow key velocity y is set to
303:38 - -30 and player just flies off screen i
303:41 - need a force that will push in the
303:42 - opposite direction i can call it gravity
303:45 - or maybe weight i set it to 0 at first i
303:49 - need a check to see if player is in the
303:51 - air or standing on ground i will need
303:53 - that check in multiple places so i might
303:55 - as well make it into a utility method
303:57 - like this
303:59 - i call it for example on ground and it
304:01 - will return true or false based on how
304:04 - this statement evaluates if this.y is
304:06 - more or equal to game height minus
304:09 - player height we know player is standing
304:11 - on solid ground here in vertical
304:14 - movement section i say if on ground is
304:16 - false meaning if player is currently in
304:19 - the air take velocity y and start
304:21 - gradually increasing it by distort
304:23 - weight from line 43
304:26 - i set this.weight to 1
304:28 - we jump and eventually player falls back
304:31 - down
304:32 - size of the jump depends on how long you
304:34 - hold up arrow key we don't want it to
304:36 - work like that let's fix it when we
304:39 - press up arrow key i set velocity y to
304:41 - minus 10 so we can see it better
304:44 - i create an else statement here and
304:46 - inside we set velocity y back to zero so
304:49 - if player is in the air gradually add
304:51 - more and more weight to velocity y
304:54 - else if player is back on ground reset
304:56 - velocity y back to zero to stop vertical
304:59 - movement if i jump too high player
305:02 - partially falls through the floor before
305:04 - velocity y is reset back to 0. to
305:06 - prevent this from happening let's
305:08 - introduce a vertical boundary on the
305:10 - ground level if player's y-coordinate is
305:12 - more than game height minus player's
305:15 - height i set it the game height minus
305:18 - player's hide player can never be below
305:20 - this point
305:21 - that works
305:23 - the height of jump is still dependent on
305:25 - how long i hold up arrow key because
305:28 - each tick adds another -10 to velocity y
305:32 - also if i press up arrow over and over
305:34 - player will keep jumping higher and
305:36 - higher we only want player to be able to
305:38 - jump when it's standing on solid ground
305:41 - here on line 55 i say if up arrow is
305:45 - pressed and if player is on ground only
305:48 - then decrease velocity y by -10
305:52 - now we can't double jump anymore let's
305:54 - do -30 for a bigger jump
305:58 - maybe minus 32
306:00 - so jumping works like this velocity y is
306:02 - 0. when we press up arrow key velocity
306:05 - is immediately set to -32 this statement
306:09 - on line 66 becomes true and weight of 1
306:12 - is being added over and over to velocity
306:15 - y
306:15 - that will make velocity y go from -32 to
306:19 - 0 and then back to positive numbers so
306:22 - player will go up it will gradually slow
306:24 - down stop and it will start falling back
306:27 - down again as the value of velocity y
306:30 - goes from negative into positive numbers
306:33 - when we hit the floor again line 69 will
306:35 - set velocity back to 0 and the jump is
306:38 - complete
306:40 - when we jump we want to animate a
306:41 - different row of sprite sheet i want
306:44 - this jumping animation so i set this dot
306:46 - frame y to 1.
306:48 - when we land back on ground i set frame
306:51 - y to zero
306:54 - endlessly scrolling backgrounds are very
306:56 - easy to implement i made a special
306:58 - episode about different techniques i
306:59 - like to use and how to split it into
307:02 - individual layers for parallax effect
307:04 - today we will just do a single endlessly
307:06 - scrolling layer constructor will expect
307:09 - the game width and game height and i
307:11 - convert these arguments into class
307:13 - properties
307:15 - this dot image will be my background
307:17 - image i gave it an id of background
307:20 - image spelled like this
307:24 - this dot x will be 0 this dot y will be
307:26 - 0 i check my image and i can see its
307:29 - width is 2 400 pixels height is 720
307:34 - pixels draw method will take context as
307:36 - an argument to specify which canvas we
307:39 - want to draw on i call built in draw
307:41 - image method and i want to draw this dot
307:43 - image from line 84. i pass it x and y
307:47 - on line 109
307:49 - i instantiate my background class by
307:51 - calling the new keyword i pass it game
307:54 - dimensions so canvas width and canvas
307:56 - height
307:58 - inside animation loop i call background
308:00 - dota draw draw method from line 90 and i
308:04 - pass it ctx as an argument we are
308:06 - drawing everything on a single canvas
308:08 - element so i need to draw background
308:10 - first before i draw the player so that
308:12 - the player is visible
308:15 - now i want to make the background
308:16 - animate to the left first i pass it
308:18 - width and height here even though i
308:20 - didn't have to do it since my art assets
308:22 - are already correct final sizes there is
308:26 - no need for resizing them with code
308:28 - custom update method i create a property
308:30 - i call speed and i set it to 20.
308:33 - horizontal coordinate of the background
308:35 - will be minus equals 20 pixels per frame
308:38 - this will make it scroll to the left
308:41 - inside animation loop i call background
308:43 - update
308:45 - and it just scrolls off screen
308:48 - in update method i create a reset check
308:50 - i say if this dot x is less than 0 minus
308:54 - this.width from line 87 meaning if
308:56 - background scrolled all the way off
308:58 - screen set its horizontal x position
309:00 - back to zero
309:04 - to create an illusion of endlessly
309:05 - scrolling background we need to use a
309:07 - trick here i will be drawing the same
309:09 - image twice i will position the second
309:12 - image to the right next to the first one
309:14 - by setting its horizontal x coordinate
309:16 - to this dot x plus this dot width now it
309:19 - looks like it's just one single and less
309:22 - seamless image if i put a gap of 50
309:24 - pixels you will see where the first
309:26 - image ends and the second image starts
309:29 - i remove the gap we never actually see
309:31 - the full size of the second image they
309:33 - are both scrolling at the same speed and
309:36 - when we get to this point the image on
309:38 - the right just fills the gap before the
309:40 - first image can reset and start
309:42 - scrolling again this happens very fast
309:44 - so it creates an illusion of endlessly
309:46 - scrolling seamless image i go much
309:48 - deeper on this topic in a special
309:49 - episode for now this is all we need to
309:51 - know here sometimes you can still see a
309:54 - small gap where the first image ends and
309:56 - the second one begins you can easily fix
309:58 - it by accounting for scrolling speed
310:00 - when setting horizontal position of the
310:02 - second image
310:06 - i will comment out line 120 for now so
310:09 - the movement doesn't distract us
310:12 - you can do the same or keep it going
310:13 - it's up to you
310:15 - in our game player needs to avoid
310:16 - dangerous enemies by jumping over them
310:19 - enemy class will serve as a blueprint to
310:21 - create a single enemy object
310:24 - constructor will expect game width and
310:26 - game height as arguments because enemies
310:28 - need to be aware of game area boundaries
310:32 - i check my sprite sheet and width of
310:34 - single frame is
310:35 - pixels
310:36 - height is 119 pixels
310:39 - this dot image will point towards image
310:41 - element with an id of
310:43 - enemy image
310:47 - draw method will expect context as an
310:49 - argument we call built in draw image
310:51 - method i pass it this dot image from
310:53 - line 107.
310:55 - i will also need this.x and this.y
310:58 - properties on my enemy
310:59 - i pass them to draw method here
311:02 - i create an instance of anime class
311:05 - using the new keyword i pass it canvas
311:07 - width and canvas height
311:09 - i call enemy1 draw from inside animation
311:12 - loop and i pass it cdx now we can see
311:15 - what we are doing so back inside the
311:17 - draw image method on anime class i pass
311:20 - it width and height
311:22 - i also need to pass it source x source y
311:25 - source width and source height like we
311:27 - did with player because we want to crop
311:29 - out single frame from the sprite sheet
311:32 - source x will be number zero times this
311:34 - dot width source y could be zero times
311:37 - this.height but since this sprite sheet
311:39 - has only one row there will be no
311:41 - vertical navigation so source y value
311:44 - can stay hard coded to zero
311:46 - i create frame x for horizontal
311:48 - navigation in sprite sheet and i replace
311:50 - it here inside the draw image method
311:53 - vertical coordinate of the enemy will be
311:55 - game height minus height of the enemy
311:58 - and horizontal position is game width so
312:01 - that it's hidden just behind the right
312:03 - edge of canvas i create an update method
312:05 - and inside we will just decrease x by
312:08 - one per frame to make enemy move to the
312:10 - left
312:11 - i call enemy 1 update from inside
312:13 - animation loop and we are animating one
312:15 - enemy created with our enemy class i
312:18 - don't want to just have one enemy i want
312:20 - to have multiple active enemies on the
312:22 - screen at the same time
312:24 - up here on line 6 i create a led
312:26 - variable i call for example enemies and
312:29 - i set it to an empty array
312:31 - i delete these two lines of code from
312:33 - inside animation loop we will draw and
312:35 - update our enemies from inside handle
312:38 - enemies function on line 121
312:40 - handle enemies function will also be
312:42 - periodically adding new enemies to the
312:44 - game so i take enemies array from line 6
312:47 - and i call push on it we will push
312:50 - instance of enemy class so new enemy
312:52 - like this i know i have to pass it game
312:54 - with and game height so i pass it canvas
312:57 - width and canvas height here
312:59 - then i want to call draw method and
313:01 - update method from line 116 for each
313:04 - enemy object in the array so enemies for
313:07 - each
313:08 - i call individual object in that array
313:10 - for example anime and i use arrow
313:12 - function syntax here for each enemy
313:14 - object inside enemies array call their
313:17 - draw method i pass it ctx and also call
313:21 - their update method
313:22 - i will be calling handle enemies
313:24 - function for every animation frame so i
313:26 - can't just leave
313:27 - this line of code here like this i don't
313:30 - want to push 60 enemies per second into
313:32 - our game i take this line outside
313:35 - temporarily so it will just run once on
313:37 - the initial page load so it will add
313:39 - just one enemy to the array at first
313:42 - i call handle enemies from inside
313:44 - animation loop here on line 143
313:47 - perfect everything still works
313:50 - let's say i want to add new anime into
313:52 - the array every two seconds how do i do
313:54 - that we can use timestamps and delta
313:57 - time
313:58 - i create a helper variable called last
314:00 - time which will hold the value of
314:02 - timestamp from the previous animation
314:04 - frame inside animation loop i create a
314:06 - constant called delta time
314:08 - delta time is the difference in
314:10 - milliseconds between timestamp from this
314:12 - loop and timestamp from the previous
314:15 - loop the value of delta time tells us
314:17 - how many milliseconds our computer needs
314:19 - to serve one animation frame usually if
314:22 - we are running at 60 frames per second
314:24 - delta time is around 16 milliseconds so
314:27 - delta time is timestamp from this loop
314:30 - minus timestamp from the previous loop
314:32 - this time stem value is auto-generated
314:34 - here request animation frame has a
314:37 - special feature it automatically
314:39 - generates a timestamp and passes it as
314:41 - an argument to the function it calls
314:44 - so because animate is being called over
314:46 - and over by request animation frame here
314:48 - it receives timestamp values as argument
314:51 - each time it's called the first initial
314:53 - call of animate here on line 149 doesn't
314:56 - have auto-generated timestamp because
314:58 - it's not being called by request
314:59 - animation frame so i have to pass it
315:02 - something here i pass it zero
315:05 - when i calculated delta time difference
315:07 - in milliseconds between timestamp from
315:09 - this loop and timestamp from the
315:11 - previous loop i set last time to
315:14 - timestamp so that it can be used in the
315:16 - next loop as the value for timestamp
315:18 - from the previous loop our animation
315:20 - loop is created by request animation
315:22 - frame it automatically adjusts the
315:25 - screen refresh rate so most screens will
315:27 - run at 60 frames per second which means
315:30 - if i control delta time i should get
315:32 - 1000 milliseconds divided by 60 frames
315:35 - per second my delta time should be
315:37 - around 16.6 milliseconds if you get a
315:40 - different number here let me know i
315:42 - wonder if we all get the same value
315:44 - now that we have delta time we can use
315:46 - it to time different things around our
315:48 - code base we will use it to trigger
315:50 - periodic events i pass delta time to
315:53 - handle enemies
315:55 - i comment this out i make sure handle
315:58 - enemies expects delta time value to time
316:00 - something periodically with delta time i
316:03 - need two helper variables enemy timer
316:06 - which will be counting milliseconds from
316:07 - 0 to a certain limit and every time it
316:10 - reaches that limit it will trigger
316:12 - something and reset itself back to zero
316:15 - we will need enemy interval which will
316:16 - be a value in milliseconds for that time
316:19 - limit
316:20 - i want to add new enemy in the game
316:22 - every thousand milliseconds
316:24 - every time timer reaches 1000
316:26 - in handle enemies i say if enemy timer
316:29 - from line 140 is more than enemy
316:31 - interval from line 141 push new enemy
316:35 - into enemies array then reset enemy
316:37 - timer back to 0 so we can count again
316:40 - else just keep adding delta time to our
316:42 - enemy timer until the limit defined in
316:45 - enemy interval is reached using delta
316:48 - time like this will make sure our events
316:50 - are timed the same on slow and fast
316:52 - computers because faster computer will
316:54 - have lower delta time so it will take
316:56 - more loops to accumulate enough in its
316:58 - timer that way fast and slow computer
317:01 - will reach the limit at the same time i
317:03 - explain this in more detail in a special
317:05 - class i can also set enemy interval to
317:08 - 2000 milliseconds 2 seconds i create
317:11 - this dot speed property on enemy class i
317:13 - could give each enemy randomized speed
317:15 - here using math at random i will give
317:18 - all of them the same speed of 8 and here
317:20 - i say this.x minus equals this.speed you
317:24 - can see enemies come in a set interval
317:26 - of 2 seconds very predictable maybe i
317:28 - want to randomize that interval a little
317:30 - bit
317:31 - i can for example create a variable
317:33 - called a random enemy interval and i set
317:36 - it to a random number between 500 and
317:39 - 1500 milliseconds
317:41 - i change enemy interval to thousand
317:43 - whenever enemy timer reaches enemy
317:45 - interval plus random enemy interval i
317:48 - push new enemy and i set random enemy
317:50 - interval from line 147 to a different
317:53 - value
317:54 - i could have also randomly set some
317:56 - enemies further along x-axis to get the
317:59 - same result now enemies are coming in
318:01 - more random less predictable intervals
318:09 - inside the draw method on player class i
318:11 - can remove the white rectangle behind
318:12 - the player i pause the background again
318:15 - by commenting out line 154.
318:18 - we are displaying just the first frame
318:20 - in player and enemy sprite sheets let's
318:22 - actually animate those sprite frames the
318:25 - sprite sheets we are using are optimized
318:27 - for speed between 15 to 20 frames per
318:30 - second so i would like to be able to set
318:32 - fps frames per second for sprite frame
318:35 - animation while still allowing the rest
318:37 - of our game things like player position
318:39 - and background scrolling to update 60
318:42 - times per second how do we do it with
318:45 - delta time i'm passing delta time to
318:47 - handle enemies here on line 157
318:50 - i pass it along to enemy update method
318:53 - and i make sure update method on anime
318:56 - class expects that value update method
318:58 - is being called from inside animate 60
319:01 - times per second inside update method
319:03 - here i will use the delta time to keep
319:05 - track of how many milliseconds passed
319:07 - between individual calls and only when
319:10 - the right threshold is reached i will
319:12 - swap frames in the sprite sheet to
319:14 - animate sprite sheets horizontally i
319:16 - will cycle between frame x of 0 and max
319:19 - frame which in case of enemy sprite
319:22 - sheet is 5. to time frame rate with
319:24 - delta time i will need 3 helper
319:26 - properties this dot fbs to set frames
319:29 - per second let's do 20. keep in mind
319:33 - this fps will affect horizontal
319:35 - navigation within enemy sprite sheet how
319:37 - fast we swap between individual
319:39 - animation frames nothing else will be
319:41 - affected i want the rest of the game to
319:43 - run at 60 frames per second i could use
319:46 - this technique to slow the entire game
319:47 - down to 20 frames per second but then
319:50 - player controls wouldn't feel very
319:52 - responsive we would get delays in
319:54 - collision detection displayed text and
319:56 - so on i want to slow down only animation
319:59 - of enemy sprite sheet nothing else i
320:02 - will also need frame timer which will
320:04 - count from 0 to frame interval over and
320:07 - over and frame interval will define that
320:10 - value we are counting towards it's a
320:12 - value of how many milliseconds each
320:14 - frame lasts so thousand milliseconds
320:17 - divided by 20 frames per second in this
320:19 - case
320:20 - first let's cycle between frames at full
320:23 - speed so if this dot frame x from line
320:25 - 111 is more than max frame set frame x
320:29 - back to zero
320:31 - else increase frame x by one
320:35 - i have to do more or equal here so we
320:37 - don't get empty frame
320:39 - because of this source x attribute we
320:41 - are pass into draw image method on line
320:42 - 119 cycling between 0 and 5 with the
320:46 - frame x variable will animate sprite
320:48 - sheet horizontally now you can see anime
320:50 - sprite sheet is animating but it's very
320:53 - fast these particular sprite sheets were
320:55 - designed for lower frame rate we defined
320:58 - fps of 20 on line 113
321:01 - here i say if this.frame timer from line
321:04 - 114 is more than frame interval from
321:07 - line 115 only then run this code that
321:10 - manages frame x cycles at the same time
321:13 - reset frame timer back to zero so it can
321:16 - count again
321:17 - else just keep adding delta time to
321:20 - frame timer until the threshold of
321:22 - milliseconds defined in frame interval
321:25 - is reached now you can see enemy sprite
321:28 - sheet is swapping between frames slower
321:30 - at 20 frames per second while enemy
321:32 - movement is still at original 60 frames
321:35 - per second
321:36 - inside update method on player class i
321:38 - will do exactly the same thing first i
321:40 - say if frame x from line 40 is more than
321:43 - max frame
321:44 - which i need to define here
321:47 - we will start with this row and there we
321:50 - have eight horizontal frames counting
321:52 - from zero if frame x is more or equal to
321:55 - max frame
321:56 - set frame x back to zero else increase
322:00 - frame x by 1.
322:02 - run an animation on player is animated i
322:05 - go down here to anime class and i copy
322:07 - fps frame timer and frame interval
322:11 - properties and i paste them here on our
322:14 - player class
322:15 - inside update method here we are dealing
322:17 - with sprite animation here are controls
322:20 - yes so if frame timer from line 44 is
322:24 - more than frame interval run all this
322:27 - sprite animation
322:28 - code and reset frame timer back to zero
322:33 - else keep increasing frame timer by
322:35 - delta time
322:38 - update method doesn't have access to
322:40 - delta time so i make sure it takes it as
322:43 - an argument when we call it here on line
322:45 - 181
322:49 - up here i make sure update method
322:51 - expects that argument now player sprite
322:54 - sheet is animating at 20 frames per
322:56 - second when i jump we get blink in
322:59 - because max frame is set to 8 on line 41
323:02 - and jump row doesn't have that many
323:03 - frames so we are including empty frames
323:06 - we have only two player states basically
323:08 - jumping and running on ground so dealing
323:10 - with that is easy down here we deal with
323:13 - vertical movement when we are not on
323:15 - ground we set max frame to 5 for jumping
323:18 - animation else meaning we are on ground
323:21 - set max frame to 8 for running
323:24 - animation on line 151 we are adding new
323:28 - anime to our game in a randomized
323:30 - interval when i console look enemies
323:32 - array i can see it's endlessly growing
323:35 - and adding more and more enemies i
323:37 - actually want to remove enemies that
323:39 - moved off-screen from enemies array on
323:42 - enemy class i create a property i call
323:44 - marked for deletion and i initially set
323:46 - it to false in update method i say if
323:49 - horizontal x-coordinate on nma is less
323:52 - than 0 minus enemy width meaning if it
323:55 - has moved past the left edge of game
323:57 - area set marked for deletion to true
324:01 - inside handle enemies i say take enemies
324:03 - array which we defined earlier as a let
324:06 - variable and reassign it to the same
324:08 - array but filter that array first and
324:11 - only include elements that have marked
324:13 - for deletion property set to false
324:16 - filter is a built in array method which
324:18 - creates a new array with all elements
324:20 - that pass the test implemented by the
324:22 - provided function in our case all our
324:25 - elements are tested and checked if their
324:27 - marked for deletion property is false
324:30 - now you can see in console we have
324:31 - between one and two enemies in the array
324:33 - at any given time older enemies are
324:36 - being removed
324:37 - i want to display score on line 7 i
324:40 - define a led variable called score and i
324:43 - initially set it to 0.
324:45 - on line 168 we have display status text
324:48 - function i will use it to display
324:50 - current score i pass it context as an
324:53 - argument to specify which canvas we want
324:55 - to draw on i set fill style to black
324:57 - color
324:58 - i set canvas font to 40 pixels helvetica
325:02 - fill text built in canvas method will
325:04 - actually draw the text it expects text
325:07 - we want to draw and x and y were to draw
325:09 - it i want the text to say score colon
325:12 - space
325:13 - plus value of score variable from line 7
325:16 - x coordinate 20 y-coordinate 50. i call
325:20 - this new function from inside animation
325:22 - loop and i pass it ctx
325:25 - inside update method on anime class i
325:27 - will count score every time enemy moves
325:30 - off screen assuming player successfully
325:32 - avoided colliding with that enemy
325:34 - and i increment score by one
325:37 - that works nice i want to highlight the
325:40 - font i can give it canvas shadow but for
325:42 - some reason in firefox built in canvas
325:45 - shadow property causes lock and frame
325:47 - rate drops so i will do a trick here i
325:50 - will draw the same message twice one
325:52 - black one white the top one will have
325:54 - two pixels offset so i kind of created
325:57 - my own shadow manually let's check for
326:00 - collisions between player and enemies
326:03 - first we need to decide on the right
326:04 - technique to use here the easiest ones
326:07 - are collision between rectangles and
326:09 - collision between circles where we give
326:11 - elements like player and anime hitboxes
326:14 - shaped as rectangles or circles we could
326:16 - also do more complex and more precise
326:19 - collision checks here such as collision
326:20 - check between polygons called separating
326:23 - axis theorem or we can base collisions
326:26 - on color or opacity
326:28 - our stroke rectangle around our enemies
326:30 - so we can see basic collision hitbox
326:33 - let's make it white
326:35 - i do the same for player
326:39 - you can see the rectangles now if i use
326:41 - collision detection between rectangles
326:43 - and i keep those hitboxes at their base
326:45 - sizes whenever these two rectangles
326:47 - touch or intersect we will get collision
326:50 - between player and enemy i tried to
326:52 - apply it before and i played with it and
326:54 - sometimes we get really unfortunate
326:56 - collisions like on this screenshot where
326:58 - my player is landing from a jump
327:01 - duck and worm images are clearly far
327:03 - away from each other but you can see
327:04 - that the corners intersect and we got
327:06 - game over
327:08 - i asked you in my community tab how you
327:10 - would approach this challenge we spoke
327:12 - about the different options we have here
327:14 - some of you suggested separating access
327:16 - theorem for collision between polygons
327:18 - some of you think that we could use a
327:19 - set of smaller rectangles that match
327:21 - shapes of player and enemy sprites more
327:23 - closely than one larger shape some of
327:26 - you think that simple collision
327:27 - detection between circles would be
327:28 - enough in this scenario let's try to
327:30 - draw circular hitboxes around our
327:32 - objects to see what it would look like
327:35 - it's also easy to offset these circles
327:38 - by a specific pixel value horizontally
327:40 - or vertically in relation to player and
327:42 - enemy object we can also make them
327:44 - smaller or larger if needed i agree with
327:47 - you and i think that using circular
327:49 - collision detection for jumping game
327:51 - like this will get rid of accidental
327:53 - collisions where two corners of
327:54 - rectangles collide now i need to decide
327:57 - where in our codebase we will run
327:59 - collision checks i know i need to check
328:01 - position of player against position of
328:03 - all active enemies for each animation
328:05 - frame so i might as well do it inside
328:08 - playerupdate method i pass it enemies
328:10 - array as an argument it contains all
328:12 - currently active enemy objects
328:15 - on line 59 inside update method on
328:17 - player class i make sure update method
328:20 - expects that argument we will calculate
328:22 - collision detection here we need to run
328:24 - it against every enemy object in enemies
328:27 - array so enemies we passed as an
328:29 - argument for each and then i do
328:31 - collision detection calculation between
328:33 - player circle hitbox and enemy circle
328:36 - hitbox to do that we need to calculate
328:39 - the distance between the center points
328:40 - of these two circles and we compare that
328:43 - distance with radius of circle 1 and
328:46 - radius of circle two if the distance is
328:49 - less than these two radii added together
328:52 - we know we have a collision to get
328:54 - distance between two points two center
328:56 - points we use pythagoras theorem formula
328:59 - we have a center point of player circle
329:01 - and center point of enemy circle
329:03 - we calculate distance on horizontal
329:05 - x-axis dx
329:08 - we calculate the distance on vertical
329:09 - y-axis d y
329:11 - it gives us imaginary right triangle and
329:14 - we know hypotenuse of this triangle is
329:16 - the distance between these two points we
329:18 - calculate it as square root of dx
329:21 - squared plus d y squared if distance
329:24 - between center point of player circle
329:26 - and center point of enemy circle is less
329:29 - than radius of enemy circle plus radius
329:32 - of player circle we have collision and
329:34 - we set game over to true
329:36 - upon line 8 i create a led variable
329:38 - called game over and i set it to false
329:40 - at first i want the game to pause when
329:43 - game over is true so inside animation
329:45 - loop i say only run request animation
329:47 - frame and continue animating our game if
329:50 - game over is false
329:52 - you can see that when collision is
329:53 - detected game stops perfect i also want
329:57 - to display game over message so inside
329:59 - the display status text function i say
330:01 - if game over is true set text align to
330:04 - center fill style to block
330:06 - fill text game over try again and
330:09 - coordinates canvas width divided by 2
330:12 - and 50 200
330:14 - make a copy again set fill style to
330:16 - white and offset the second line by 2
330:19 - pixels
330:21 - i need to fix our collision detection we
330:23 - are using enemy x and enemy y
330:25 - coordinates as center points of
330:27 - collision circle which means collision
330:29 - area on each enemy is this blue circle
330:33 - and same with the player since player x
330:36 - and player y is at the top left corner
330:39 - of rectangle area from which player
330:41 - image is drawn i can't set it as center
330:44 - point of collision circle because i did
330:47 - do that we are not checking for
330:48 - collisions between white circles we are
330:51 - actually checking for collisions between
330:52 - the blue circles i just drew the fix is
330:55 - simple dx distance on the horizontal
330:58 - x-axis between two center points needs
331:00 - to be offset by half of enemy width and
331:03 - half of player width to move these
331:05 - center points from top left corner to
331:07 - the middle of rectangle area
331:10 - same goes for vertical dui check
331:12 - brackets are very important here
331:14 - now after this fix collisions are
331:17 - correctly being detected between white
331:19 - circle areas around player and enemies i
331:22 - can offset these circles by specific
331:24 - amount to move them around i can make
331:26 - them smaller or larger we will expand on
331:29 - this in the next episode in this class
331:31 - we will learn how to use native
331:33 - javascript full screen functionality how
331:36 - to add touch support to our games and
331:38 - how to measure length and direction of
331:40 - swipes so that we can attach specific
331:42 - events to them full series linked in the
331:44 - video description let's make a mobile
331:46 - game with html css and javascript let's
331:50 - go
331:51 - this is the game we built in the
331:52 - previous lesson i will be using google
331:54 - chrome browser as usual and if i right
331:56 - click to inspect the page we have this
331:58 - small mobile device icon here this tool
332:01 - is great for designing responsive
332:02 - websites keep in mind this is just an
332:04 - estimate there might be some differences
332:07 - when you run the same code on the actual
332:09 - device this simulator is not 100
332:11 - accurate as you can see canvas doesn't
332:13 - even fit mobile screen on landscape
332:15 - currently this project is not mobile
332:18 - friendly at all it's actually very easy
332:20 - to fix this i can click this icon to
332:22 - toggle between landscape and portrait
332:24 - view
332:25 - i can choose different devices from this
332:27 - drop down
332:28 - so the first thing i want to do is to
332:30 - make sure we can see the entire canvas
332:32 - at all times on mobile i will do it with
332:34 - css i give canvas max width property of
332:37 - 100
332:39 - we are missing left border here let's
332:42 - reset all default margins and paddings
332:44 - and set box size into borderbox to make
332:47 - sure elements border is included in its
332:49 - total width modern css makes life so
332:51 - much easier
332:53 - so now in portrait mode you can set
332:55 - canvas to any width and it will always
332:57 - scale up or down to make sure we can see
333:00 - all of it i switch to landscape and we
333:02 - have the same problem how do we solve
333:04 - this this is actually also very easy
333:06 - barely an inconvenience
333:08 - i give canvas max height 100
333:11 - now canvas will scale until it hits
333:13 - edges of screen vertically or
333:15 - horizontally depending on aspect ratio
333:17 - whichever boundary it hits first
333:20 - look what happens when i make canvas
333:21 - wider it still works i can switch
333:24 - devices toggle between landscape and
333:26 - portrait we can see all of canvas at all
333:28 - times perfect there is also a way to
333:30 - make canvas fit the entire screen with
333:32 - no black edges but because of the
333:34 - scrolling background we are using here i
333:36 - would have to calculate aspect ratio i
333:38 - want to keep this class beginner
333:39 - friendly with no algorithms so i will
333:41 - get back to that in more advanced
333:43 - tutorial now you know a quick and easy
333:45 - way to make canvas fit on mobile screen
333:48 - without stretching and distortion
333:51 - the only way to restart game right now
333:53 - is to refresh browse window let's write
333:55 - an actual restart game function so that
333:57 - we can connect it to buttons or
333:59 - keypresses or touch events we have to
334:01 - think what needs to happen when game
334:03 - restarts well first we need to restart
334:05 - the player to its initial position
334:07 - i will actually do it as a method on
334:09 - player class i will call it restart and
334:12 - inside we set x and y to the original
334:14 - values
334:16 - let's move player 100 pixels to the
334:18 - right here and here
334:20 - that's better after we start i want
334:23 - player in running animation so max frame
334:25 - will be 8 and frame y is 0.
334:29 - down on line 200 inside our custom
334:31 - restart game function i take instance of
334:34 - player class from line 205 and i call
334:37 - restart method we just wrote
334:39 - i don't really have to restart
334:40 - background or maybe i will just restart
334:43 - its exposition back to 0 so that we get
334:45 - some more visual feedback that we are
334:47 - actually starting a new game again i
334:49 - take an instance of background class
334:51 - from line 210 and i call restart method
334:54 - we just wrote
334:56 - the last thing i need to do when game
334:57 - restarts is to take enemies array score
335:00 - and game over and send them back to
335:02 - their initial values notice i'm removing
335:05 - led keywords because i'm not declaring
335:07 - new variables i'm just assigning new
335:09 - values to existing variables where do we
335:11 - call this restart game function from
335:14 - here inside event listener inside key
335:16 - down event we listen for arrows and we
335:18 - push them into this dot keys array i
335:21 - will create an else statement and if key
335:23 - that was pressed is enter
335:26 - and at the same time game over from line
335:28 - 8 is true we call the new restart game
335:31 - function we just wrote
335:33 - it's still not working and it's because
335:37 - when game over is true i stop calling
335:39 - request animation frame here since we
335:41 - are setting game over back to its
335:43 - initial false value i can call animate
335:45 - again the start new animation loop like
335:48 - this so we are playing game is running
335:51 - i get game over
335:53 - i press enter and reset function resets
335:55 - our game awesome we are doing great so
335:57 - far i should tell the user to press
335:59 - enter otherwise how would they know you
336:01 - can see after game reset score is off
336:03 - screen it's because it's taking this
336:05 - text align center we used for game over
336:08 - message i need to set text align to left
336:10 - here
336:11 - and the message will be something like
336:13 - game over
336:14 - press enter to restart
336:16 - this works ok touch events this will be
336:19 - fun first i remove this console log from
336:21 - line 175
336:23 - up here inside input handler class we
336:25 - will create a new event listener for
336:27 - touch start event it will run whenever
336:30 - user touches browser window when that
336:32 - happens i console lock something i will
336:34 - actually also need touch move and touch
336:37 - end events
336:39 - i'm gonna console start in touch start
336:42 - moving in touch move and end in touch
336:45 - end the way these work touch start fires
336:48 - once as we start interacting with screen
336:50 - then touch move fires over and over as
336:53 - long as we are moving finger over the
336:54 - screen and touch end just fires once
336:57 - when user releases the touch this is
337:00 - important to remember as we have to
337:01 - consider these when we are structuring
337:03 - our code code in touch start and touch
337:06 - end will run once and the code in touch
337:08 - move will run over and over as long as
337:10 - the event is firing this is actually
337:12 - very useful and we can use touch start
337:14 - to set something up touch move to make
337:16 - calculations such as direction and time
337:19 - of the event and in touch end we do some
337:21 - cleanup and discard or reset values we
337:23 - don't need anymore there is no swipe up
337:25 - and swipe down event so let me show you
337:27 - how you can easily use these three touch
337:29 - events combined to determine direction
337:31 - of swipe let's have a look at auto
337:33 - generated touch start event object by
337:35 - console login e when i touch screen this
337:38 - event fires and i can inspect it there
337:40 - are many useful values here for example
337:42 - it keeps track whether alt and control
337:44 - keys were pressed at the time of the
337:46 - event we have timestamp of the touch
337:48 - here very useful and the main thing we
337:50 - care about is x and y coordinates of the
337:52 - touch x and y coordinates of touch event
337:55 - are stored inside this read-only changed
337:58 - touches property it's a list that stores
338:00 - auto-generated touch objects that
338:02 - contributed to this touch event with
338:05 - touch start event we get just one object
338:07 - so we have to open index 0 and here we
338:10 - can see page x and page y properties
338:13 - perfect we know where on screen this
338:15 - touch event started
338:17 - if i console touch move and i swipe
338:19 - across my screen you can see that event
338:21 - fires many times
338:23 - let's go to one of the ones at the start
338:26 - if i check inside change touches list at
338:28 - index 0 i can see page y is 71 as i was
338:32 - swiping the event was firing so let's go
338:34 - to the last time it fired and here
338:37 - i see page y is 104. i know this
338:40 - particular swipe went vertically from
338:42 - coordinate 71 to coordinate 104. we have
338:46 - all these values we need to determine
338:47 - whether user swiped up or down i put
338:50 - this console lock into touch start event
338:52 - and i remove all other console logs to
338:55 - access vertical coordinate of touch
338:56 - event i say e dot changed touches index
339:00 - 0 because this is a list and i want this
339:02 - page y property
339:05 - okay let's put that inside touch move
339:07 - and touch end
339:10 - i create a new property on input handler
339:12 - class i call it for example touch y it
339:14 - will store the initial start in vertical
339:17 - coordinate maybe i also want the game to
339:19 - only react to longer swipes to make sure
339:22 - user actually swipes and the game
339:24 - doesn't accidentally react to the simple
339:26 - short tabs
339:27 - i will call this property touch
339:29 - threshold and i set it for example to
339:31 - 30. i wanted the starting touch point
339:34 - and the ending touch point to be at
339:36 - least 30 pixels apart to trigger the
339:39 - event i could also make the player jump
339:40 - higher here based on how long the swipe
339:42 - is this technique is easy and very
339:44 - powerful if you are designing mobile
339:46 - games i hope you are realizing the
339:48 - potential here in touch start event i
339:50 - just want to set starting coordinate so
339:52 - this dot touch y from line 13 is equal
339:55 - to page y value from this event let's
339:57 - delete all these
339:59 - inside touch move i will compare current
340:01 - coordinate and starting coordinate to
340:03 - determine direction so let's have a
340:05 - temporary helper variable called for
340:07 - example swipe distance and set it to
340:09 - page y value
340:11 - of this tick of touch move event minus
340:13 - the initial start in vertical coordinate
340:16 - so minus this dot touch y from line 13.
340:19 - keep in mind that touch move fires over
340:22 - and over again as long as user is
340:23 - swiping
340:25 - i need more space
340:26 - here if swipe distance is less than
340:30 - minus this dot touch threshold from 914
340:33 - so minus 30 we are swiping up so this
340:36 - dot keys push swipe up this might be a
340:39 - little bit difficult to visualize for
340:40 - some of us so here's some animation if
340:42 - it helps
340:47 - at the same time i want to check if
340:49 - swipe up is not yet in the keys array
340:52 - so this is the distance between current
340:54 - vertical coordinate and start in y
340:56 - coordinate if this swipe distance is
340:59 - less than -30 and swipe up is not yet in
341:03 - keys array push swipe up into keys array
341:06 - else if swipe distance is more than this
341:09 - dot touch threshold so plus 30
341:12 - push swipe down into this dot keys array
341:15 - also here i need to check that swipe
341:17 - down is not yet in the array before i
341:19 - push it in there i don't want duplicates
341:21 - of the same value in touch end i just
341:24 - can't lock this dot keys
341:27 - i can see we are getting many duplicates
341:29 - in the array so something must be wrong
341:31 - here i zoom out a bit so i can see the
341:33 - whole thing on a single line these
341:35 - brackets need to be here brackets are
341:37 - important it's easy to make a mistake
341:39 - and even a small thing can break the
341:40 - entire project that's programmer's life
341:43 - attention to detail and debugging
341:45 - perfect now it gets added only once per
341:48 - value
341:48 - as i said i will use touch and event for
341:51 - cleanup i will use splice method to find
341:53 - swipe up in keys array and remove it and
341:56 - i do the same thing for swipe down so in
341:59 - touch start i save initial vertical
342:01 - coordinate of touch event in touch move
342:04 - i compare starting vertical coordinate
342:06 - to the current vertical coordinate to
342:08 - determine whether user is swiping up or
342:10 - down and in touch end i clean up and
342:13 - remove all touch events from our custom
342:15 - keys array
342:17 - let's remove this console log i want to
342:20 - restart game when we swipe down i might
342:23 - as well put it in here why not so if we
342:25 - swipe down call our custom restart game
342:28 - function we wrote earlier but only do it
342:30 - if game over is true like this
342:35 - so i get game over
342:37 - i'm swiping up nothing happens i swipe
342:40 - down and game restarts great
342:43 - i can increase touch threshold if i want
342:45 - some functionality to work only with
342:47 - very long swipes i set it to 200 i swipe
342:51 - down but only short nothing happens
342:54 - longer swipe still nothing
342:56 - i have to swipe almost the entire screen
342:58 - from top to bottom to restart game now
343:01 - so let's put the threshold back to 30.
343:04 - i want player to jump when we swipe up
343:07 - so here inside update method on
343:08 - playerclass i put this part in brackets
343:11 - because i want it to evaluate first
343:13 - if keys array contains arrow up or if it
343:17 - contains swipe up
343:19 - and at the same time if player is on
343:21 - ground make player jump
343:24 - be careful about brackets it's easy to
343:26 - create a bug here if you forget one
343:29 - let's see reload game i run
343:32 - swipe up and player jumps i swipe again
343:36 - and again
343:37 - this works touch events work really well
343:40 - with simple games like this in the next
343:42 - episode i will create a game with more
343:44 - complex moves and special abilities game
343:46 - like that is a bit more complicated when
343:48 - it comes to touch events also in most
343:50 - cases to make a mobile game like this
343:52 - work you should resize your art assets
343:55 - my player's sprite sheet has frames 200
343:57 - times 200 pixels that's massive for a
343:59 - mobile game and if i had many animated
344:01 - objects on screen at the same time it
344:03 - would start lagging very fast for a
344:05 - bigger game i would have to create two
344:07 - or more sets of art assets for different
344:09 - screen sizes let's change game over
344:12 - message so that user knows we can now
344:14 - swipe down to restart
344:16 - javascript also offers built-in native
344:19 - full screen api that's easy to use it's
344:22 - now well supported in all modern
344:23 - browsers as far as i know only internet
344:26 - explorer and mobile version of safari
344:28 - don't fully support it we are web
344:30 - developers here so i'm sure all of you
344:31 - use updated version of a modern secure
344:34 - browser on your machine
344:36 - full screen api gives us methods that
344:39 - allow us to present a specific element
344:42 - and its descendants in a full screen
344:44 - mode it will hide all browser user
344:47 - interface elements sidebars and other
344:49 - applications as long as full screen is
344:51 - active let's create a button to toggle
344:53 - full screen i give it id full screen
344:56 - button for example and it will say
344:59 - toggle full screen
345:01 - in css i give it position absolute font
345:05 - size 20 pixels but in 10 pixels
345:08 - top 10 pixels
345:12 - and transform translate x minus 50 to
345:15 - center it horizontally
345:20 - i bring it to my javascript project
345:22 - using get element by id
345:26 - i create a new function i call for
345:28 - example toggle full screen let's
345:30 - console.log
345:30 - [Music]
345:32 - document.fullscreenelement like this
345:34 - and call toggle full screen function we
345:36 - just wrote full screen element is a
345:38 - built-in read-only property on document
345:41 - object that returns the element that is
345:43 - currently being presented in full screen
345:45 - mode if it's null it means the full
345:47 - screen is not active we can use this
345:50 - property to check if we are currently in
345:52 - full screen mode
345:54 - i say if full screen mode is not active
345:58 - take canvas variable from line 2
346:00 - and call built in request full screen
346:03 - this method is asynchronous it returns a
346:06 - promise which means i can chain then and
346:09 - catch methods to run some follow-up code
346:11 - when the promise is fulfilled or
346:13 - rejected i will just use cache today to
346:15 - display potential error notice that the
346:18 - request full screen is called on the
346:19 - element i want to make full screen but
346:22 - full screen element property sits on the
346:24 - document object
346:25 - today i won't put any follow-up code in
346:28 - then method so i can delete it
346:30 - in catch i will take the auto generated
346:33 - error object if error happens we will
346:35 - create alert and it will say some error
346:38 - message
346:39 - to concatenate message i can use
346:41 - backticks instead of quotes this is so
346:44 - called template literal syntax it's just
346:46 - a simple way to combine strings of text
346:49 - and expressions that need to be
346:50 - evaluated into a single final line of
346:53 - text i say for example error can't
346:56 - enable full screen mode
346:58 - and to insert variable or expression
347:00 - inside template string we use dollar
347:02 - sign and brackets like this here i just
347:04 - put this auto generated error object and
347:07 - its message property so we can read what
347:08 - went wrong
347:10 - so if full screen is currently not
347:12 - active present canvas in full screen
347:14 - mode else meaning full screen is active
347:17 - call built in exit full screen method to
347:19 - switch back to windowed mode
347:22 - notice that exit full screen is again
347:24 - called from document object if i save my
347:26 - project and refresh browse the window i
347:28 - get an error you can see catch method
347:30 - worked and created alert pop-up window
347:32 - with our message in console i can see
347:35 - more information it says full screen can
347:37 - only be initiated by user gesture here i
347:40 - declared my toggle full screen function
347:42 - and here i'm calling it on the first
347:44 - page load we can't do that full screen
347:46 - can only be triggered by user generated
347:48 - events such as click or touch that's
347:51 - what this error message is telling us we
347:53 - can't just make javascript to
347:54 - automatically trigger full screen it
347:56 - needs to be triggered by a
347:57 - user-generated event so instead of
348:00 - running it on the first page load i
348:01 - create an event listener for click event
348:04 - on full screen button element we created
348:06 - earlier when user clicks button then run
348:09 - toggle full screen to exit full screen
348:12 - on a computer you can also just press
348:14 - escape key on mobile you can exit full
348:16 - screen by swiping to reveal main
348:18 - controls and press back or home key
348:20 - depending on which phone you are using
348:24 - sometimes we get unexpected collisions
348:27 - and game over when player and enemy
348:29 - images are not actually touching like
348:31 - this it's because we are checking for
348:33 - collision detection on circular hitboxes
348:35 - around player and enemy and these
348:37 - circles don't exactly match the sprite
348:40 - sheet image collisions between complex
348:42 - shape take a lot of performance and
348:44 - especially for mobile games performance
348:46 - is something we need to be more careful
348:48 - about phones don't have as much
348:49 - computing power as our desktop computers
348:51 - do
348:52 - it's usually not a problem when hitbox
348:54 - doesn't exactly match sprite sheet shape
348:56 - but it should be positioned in a way
348:58 - that it's predictable when collision can
349:00 - and cannot happen
349:02 - i drew a simple circle around player and
349:04 - now we can see its collision area let's
349:06 - copy this code to display collision area
349:08 - of enemies as well
349:11 - you can see when these two white circles
349:13 - touch we get collision and since the
349:15 - circles are larger than player and enemy
349:17 - image sometimes we get collision when
349:19 - player and enemy images are clearly not
349:22 - touching especially this one when we are
349:24 - about to land from what seems to be a
349:26 - successful jump how do we fix this
349:29 - since player and enemy images are not
349:31 - scalable in this game they are drawn at
349:33 - fixed width and height we can shrink and
349:35 - scale hitboxes by a value relative to
349:38 - image size and we can also move the
349:40 - hitbox left and right by specific pixel
349:43 - amounts to try and match images more
349:45 - closely and make collisions more
349:47 - predictable we don't want surprise game
349:49 - over like this i'm using a bit
349:51 - unconventional technique here because
349:53 - sprites are in a sense rectangular they
349:55 - have start in x and y position and width
349:57 - and height but i chose collision
349:59 - detection between circles to remove
350:01 - rectangular edges from sticking out
350:03 - outside player and enemy shapes what i'm
350:05 - about to do will work with rectangular
350:07 - collisions as well if you prefer that we
350:10 - are calculating collision detection
350:11 - between player and all active enemies
350:13 - here i explained it in the previous
350:15 - episode we are basically checking
350:17 - distance between center point of player
350:19 - circle and center point of enemy circle
350:22 - first horizontally and then vertically
350:25 - we are drawing imaginary right triangle
350:27 - and using pythagoras theorem to
350:30 - calculate the length of hypotenuse which
350:32 - is basically the distance between center
350:34 - point of player circle and center point
350:37 - of enemy circle
350:38 - then we are comparing radius of player
350:40 - circle plus radius of enemy circle to
350:43 - that distance
350:46 - if distance is more than sum of these
350:48 - two radii circles are far apart
350:51 - if it's the same circles are touching
350:53 - and if the distance is less than sum of
350:55 - radii circles are overlapping
350:59 - here i'm just drawing white collision
351:00 - area circle it's just a visual it
351:03 - doesn't actually detect collision
351:04 - collision is being detected here we are
351:07 - inside player class and this is the
351:09 - horizontal center point position of
351:10 - player circle this is being used for
351:13 - collision detection here
351:15 - this is vertical coordinate of that
351:16 - center point which is being used in
351:18 - collision detection formula here
351:22 - and this is the radius of collision area
351:24 - circle we are drawing and that same
351:26 - value is being used in collision
351:28 - detection formula here i can simply
351:30 - offset and resize that collision circle
351:32 - visual in this area and then replicate
351:35 - those changes inside the actual
351:37 - collision detection calculation area
351:39 - here let me show you what i mean
351:41 - what if i want player circle to be
351:43 - smaller maybe i don't mind that ears and
351:46 - tail overlap let's say they are soft and
351:48 - they don't count when it comes to
351:50 - collision also maybe i want to make my
351:52 - game a bit easier and forgiven this will
351:54 - allow a small overlap between player and
351:57 - enemy image what if i want to move the
351:59 - collision hitbox downwards relative to
352:01 - player image i change its vertical
352:03 - center point position here plus 20
352:05 - pixels seems fine now i compare changes
352:08 - i made to the visualization and i make
352:10 - sure i update the actual collision
352:12 - detection formula to match these new
352:14 - values
352:15 - i didn't make any changes to horizontal
352:17 - center point so that value stays the
352:19 - same
352:20 - i added plus 20 pixels to vertical
352:22 - center point so i update it in collision
352:25 - calculation here
352:28 - i also made the circle smaller so i
352:31 - update player radius value in this area
352:35 - we successfully adjusted player hitbox
352:37 - let's also do something about enemies i
352:40 - can for example reduce the radius of
352:42 - enemy circle
352:43 - i also want to move it to the left to
352:45 - cover head of the worm better
352:48 - maybe -20 pixels for a horizontal center
352:50 - point
352:51 - i'm actually happy with this i want
352:53 - collision to only happen when these two
352:55 - adjusted smaller circles collide let's
352:58 - take the changed values we used to
353:00 - adjust enemy hitbox visual and transfer
353:02 - them into collision detection formula
353:04 - like we did with player i copy this line
353:07 - just so i can look at it for reference
353:10 - i put it here just temporarily collision
353:12 - detection is inside player class so this
353:15 - keyword here points to player object if
353:18 - i want to point towards anime object i
353:20 - can't use this keyword in this area we
353:23 - adjusted horizontal coordinate of enemy
353:25 - circle center point so i need to adjust
353:27 - it here minus 20.
353:29 - vertical center point of enemies stated
353:31 - the same so i will not be making any
353:33 - changes here
353:34 - we did change enemy radius so i will
353:36 - change enemy radius here and this is how
353:39 - you resize scale and reposition hitboxes
353:42 - in your game to make sure they match
353:43 - your art assets more closely
353:46 - i didn't plan to make this episode but
353:48 - so many of you asked how to add mobile
353:50 - support to our games so here we go
353:52 - we can take it much further but i think
353:54 - this was a good beginner friendly
353:55 - introduction check out full series in
353:58 - the video description if you want i'll
353:59 - see you there
354:01 - [Music]
354:04 - when your games and applications start
354:06 - getting bigger more exciting and full of
354:08 - extra features it will be more and more
354:11 - challenging to keep your code clean and
354:12 - organized over time people came up with
354:15 - the general reusable solutions to
354:17 - commonly occurring problems these well
354:19 - tested and widely used code structures
354:22 - are called design patterns design
354:24 - patterns are a tool kit of tried and
354:26 - tested solutions to common problems in
354:29 - software design you could split design
354:31 - patterns into three main categories in
354:33 - this class we will use state design
354:36 - pattern to control player character in a
354:38 - game it's a behavioral pattern that lets
354:41 - an object alter its behavior when its
354:43 - internal state changes why do we need to
354:46 - manage player state let's say we have a
354:48 - simple side scroller game our character
354:51 - is standing and when i press up arrow
354:53 - key i want it to jump this code has a
354:56 - bug if i keep pressing up arrow while
354:58 - jumping player character will fly off
355:00 - screen so i have to do a check here only
355:03 - run this code and jump if character is
355:06 - standing on a solid ground great that
355:08 - fixed it i also want to add sitting
355:10 - animation but player can't enter sitting
355:12 - state while it's in the middle of jump
355:14 - player can sit down only when it's
355:16 - standing or running on solid ground
355:19 - maybe i also want a dive attack when
355:22 - player tackles enemies from the air
355:24 - again this move can only be entered by
355:26 - pressing down arrow key while jumping
355:28 - because when we are standing down arrow
355:30 - key will make players sit down i'm sure
355:33 - you can imagine how adding more moves
355:35 - will create a very complicated if-else
355:37 - statement and since all of that is
355:39 - contained in a single piece of logic
355:41 - adding one new move later on can break
355:43 - all your other existing conditions and
355:45 - you will have to review that single
355:47 - massive logic tree every time you need
355:49 - to fix a bug or add a new feature
355:52 - since this is a very common challenge
355:54 - game designers had to deal with for a
355:56 - long time there is a tried and tested
355:58 - way to do this right what if instead of
356:00 - this complicated spaghetti code if else
356:02 - statement we model our code structure
356:04 - based on finite state machine we want to
356:07 - have a limited set of states player
356:09 - object can be in such as standing
356:11 - jumping or sitting player object can
356:14 - only be in one of those states at a time
356:16 - and for each state it will only react to
356:18 - a limited set of inputs we define
356:21 - that way we have a class for each state
356:24 - and in rules of that class i can say
356:27 - that while player is jumping wait for a
356:30 - certain time before switching it to
356:32 - falling state or if you detect down
356:35 - arrow key input transition player into
356:37 - diving state other than that while in
356:40 - jumping state ignore all other inputs so
356:43 - pressing down arrow key while jumping
356:45 - will switch player into diving state
356:47 - pressing down arrow key while standing
356:50 - will transition player into a seating
356:51 - state in this class we will learn how to
356:54 - implement state design pattern in a side
356:56 - scroller game we will learn how to use
356:58 - the native javascript modules to split
357:00 - our code into multiple parts and many
357:02 - other important game development tricks
357:04 - and techniques as usual big like if you
357:07 - are ready to start building bigger games
357:08 - and learn how to make our code bases
357:10 - scalable easy to navigate in easy to
357:13 - manage and debug we are diving into more
357:16 - advanced territory today the challenge
357:18 - for beginners will mostly be to keep
357:20 - track of what each class and function is
357:22 - doing and how they interact with each
357:24 - other check out some beginner-friendly
357:25 - game development tutorials in the video
357:27 - description if you just recently started
357:29 - with html css and javascript i created a
357:32 - simple web page this doc image will be
357:35 - our spreadsheet you can download it in
357:37 - the video description it was made by
357:39 - this amazing artist check out his site
357:41 - for more game development art assets i
357:43 - include my image as img tag this time
357:46 - that way i can wait for the image to get
357:48 - fully loaded before i run any javascript
357:51 - i include my javascript by using a
357:53 - script tag but this time i will set its
357:56 - type attribute to module like this this
357:59 - will cause the browser to process any
358:01 - contents of this particular script as
358:03 - javascript module which will allow us to
358:06 - split our code into multiple separate
358:08 - files and use import export keywords to
358:10 - connect the data inside you can see i'm
358:13 - importing only the main script.js file
358:16 - but we will also have player.js state.js
358:19 - input.js and utilities.js splitting
358:22 - files like this makes our project a bit
358:24 - cleaner and easier to navigate in
358:26 - javascript modules allow us to split our
358:29 - programs into separate parts that can be
358:31 - imported where they are needed node.js
358:34 - had this ability for a long time but now
358:36 - modern browsers support module
358:38 - functionality natively use of native
358:40 - javascript modules is dependent on the
358:42 - import export statements and we will
358:44 - cover how to use them today it's easy
358:47 - don't worry there is only one catch when
358:49 - using modules you need to run the code
358:51 - in some kind of dev environment you need
358:53 - to have a server if you just write index
358:56 - html file and click to open it in
358:58 - browser locally as you can do with all
359:00 - my other course projects import export
359:02 - keywords will not work you need to run
359:04 - this code through a server there are
359:06 - many ways to set up local server the
359:09 - easiest one is to install a small plugin
359:11 - to your code editor i'm using visual
359:13 - studio code and when i click here on the
359:15 - left side on the extensions icon and i
359:18 - search extensions for live server i find
359:21 - this plugin
359:23 - it's been downloaded over 17 million
359:25 - times so it's very popular mine is
359:27 - already installed but if you don't have
359:29 - it it will say install here after
359:31 - installation you might have to close or
359:33 - reopen your vs code when it's
359:35 - successfully installed you will see this
359:38 - go live icon right here if you never
359:40 - used it it can act a bit unexpectedly
359:43 - when you click go live it doesn't open
359:45 - the file you are looking at at the
359:46 - moment it will run code from the entire
359:49 - project folder your vs code is currently
359:51 - pointed at to make sure your live server
359:54 - goes live with the correct set of files
359:56 - you click file in the top left corner
359:59 - and then click open folder and you
360:01 - navigate to your project folder on your
360:03 - local computer when you find it click
360:06 - select folder and then when you go live
360:08 - the correct project will open if you
360:10 - can't see this new live server
360:12 - notification area close your vs code
360:14 - completely and reopen it and it will get
360:17 - loaded the best thing about live server
360:20 - extension is that when you save any of
360:21 - the project files it will reload browser
360:23 - window automatically you can always see
360:26 - the latest preview of your code without
360:27 - constantly manually reloading browser
360:30 - on my windows computer i use control
360:32 - plus s keyboard shortcut to save changes
360:34 - to my file i use it a lot while working
360:37 - in this environment so now we should
360:39 - have a project folder running through
360:41 - live server extension we have index html
360:43 - file style css main script js file we
360:47 - will have player js where we write all
360:49 - the logic to control and animate our
360:51 - player character state gs will be where
360:54 - we write state design pattern to swap
360:57 - between different player states input.js
360:59 - will handle keyboard input and
361:02 - utilities.js will have small useful
361:04 - functions that for example display
361:06 - status text or some other small tasks i
361:09 - will speed up css setup because that's
361:11 - very basic global reset to make sure the
361:13 - page looks the same across different
361:15 - browsers i will give canvas some
361:17 - background so we can see it and i will
361:19 - hide the sprite sheet image since we
361:21 - will be drawing and animating it with
361:23 - javascript i will also show you how to
361:25 - create a very simple loading screen i
361:28 - wrote this h1 tag with an id of loading
361:31 - so i grab it here
361:32 - i center it in the middle of the page
361:34 - and i adjust its font size
361:37 - script.js is my main module which will
361:39 - connect all other parts into a final
361:42 - piece of logic the spreadsheet we are
361:44 - using today is a big image file so it
361:46 - might take a second to fully load to
361:48 - make sure javascript waits for all the
361:50 - assets to be fully loaded before it runs
361:53 - i will create a simple event listener
361:55 - for load event
361:56 - load event will wait for the entire page
361:58 - to be fully loaded and available
362:00 - including page content such as style
362:03 - sheets images and so on in the meantime
362:06 - this text that says load in will be
362:08 - visible so if you add more art assets
362:10 - user will see this loading screen for
362:13 - however long it takes to load all assets
362:16 - when everything is fully loaded this
362:18 - event listener will run its code and
362:20 - inside i will target this loading text
362:23 - and i will hide it because the page is
362:25 - fully loaded at the point when this code
362:27 - runs
362:28 - i will also set up my canvas so
362:30 - document.getelementbyidcanvas1
362:33 - i instantiate context object which
362:36 - contains all built-in 2d drawing
362:38 - properties and methods we will need
362:40 - today
362:41 - i set canvas width to window in width
362:43 - and canvas height to window inner height
362:47 - i can see canvas is now full screen so i
362:49 - make it transparent
362:51 - it's time to draw the player in
362:53 - player.js i create a class i call player
362:56 - player always needs to be aware of
362:58 - boundaries of game area since we will be
363:01 - running and jumping around and we need
363:03 - to know when we reach the edges of
363:05 - screen so i will pass it game with and
363:07 - game height from the outside as
363:09 - arguments and i will convert these
363:11 - arguments to class properties like this
363:15 - today we are learning about state
363:16 - management we will be swapping player
363:18 - between different states this dot states
363:21 - will be an array and each position in
363:23 - that array will be one possible player
363:26 - state such as running jumping sitting
363:29 - and so on
363:30 - then we will have this dot current state
363:32 - property because player can only ever be
363:35 - in one state at one time current state
363:37 - will be one of the options from this dot
363:40 - states array so for example this dot
363:42 - states index 0 will be standing state
363:45 - index 1 will be jumping state and so on
363:48 - this dot states is an empty array now
363:50 - but we will fill it with states very
363:52 - soon this dot image will be the docs
363:54 - spreadsheet i already loaded it into our
363:56 - project on line 12 in index html so here
363:59 - i just point this variable towards it
364:01 - using its dock image id i gave it the
364:04 - dock image is a sprite sheet with
364:06 - multiple frames when you divide width by
364:08 - number of frames in the longest row or
364:11 - you can think of these as columns you
364:12 - will get width of one frame in this case
364:15 - it's 200 pixels height divided by the
364:18 - number of rows will give us the height
364:20 - of a single frame in this case
364:23 - 181.83 pixels
364:25 - let's first draw it at x and
364:27 - y-coordinates 0 0 so from the top left
364:30 - corner of canvas area
364:32 - i create a public draw method that takes
364:35 - context as an argument to specify which
364:37 - canvas element we want to draw on i call
364:40 - built in canvas draw image method i pass
364:43 - it my doc image from line 7 and i draw
364:46 - it at coordinates x and y
364:48 - so this is our player class creating a
364:51 - self-contained class that handles all
364:53 - player functionality is a good example
364:56 - of the first principle of
364:57 - object-oriented programming called
364:59 - encapsulation encapsulation means we rub
365:02 - variables or data and functions that
365:05 - operate on that data into objects
365:07 - encapsulation can be used to protect our
365:10 - data from unwanted outside access it
365:12 - simplifies maintenance of our code by
365:14 - keeping it organized and easier to
365:16 - understand
365:18 - since we are including our main
365:19 - script.js file as a module and we are
365:22 - running our code through a local server
365:24 - we can use export import statements
365:27 - native javascript modules are part of
365:29 - es6 standard and allow us to split our
365:31 - code into separate files so called
365:34 - modules members of these modules so
365:37 - classes functions and variables can be
365:39 - exported and imported around our program
365:42 - wherever they are needed i want to
365:44 - export my player class there are two
365:46 - types of exports named exports and
365:49 - default exports each module each file
365:52 - can have only one default export but
365:55 - there is no limit on the number of named
365:57 - exports namedexport looks the same just
365:59 - without this default keyword to make my
366:02 - player class available in main script.js
366:05 - file i go up top and i say import player
366:08 - from player.js
366:10 - this dot slash means that player.js file
366:13 - is in the same folder as script js
366:17 - since player is a default export i don't
366:19 - need brackets for named exports exports
366:22 - that don't have default keyword in front
366:24 - of them i would have to wrap them in
366:26 - brackets like this but since player
366:28 - class is a default export we don't need
366:31 - brackets here and i can also refer to
366:33 - player using default here but there is
366:35 - no need to go into that much detail
366:37 - about modules today i just want you to
366:39 - understand the main idea and get
366:41 - comfortable exporting and importing your
366:43 - variables classes and functions between
366:46 - modules
366:47 - so now player class is available here
366:50 - let's test if it works and instantiate
366:52 - it i create a constant variable called
366:55 - for example player and i set it to new
366:58 - player here on line 2 in player js i can
367:01 - see our player class expects game width
367:04 - and game height arguments so i pass it
367:06 - canvas width from line 8 and canvas
367:08 - height from line 9.
367:11 - if i consolidate player i can see my
367:13 - object here and i can inspect it to see
367:15 - all its properties and values
367:17 - congratulations now you understand how
367:19 - to use native javascript modules what
367:21 - else should we learn today click the
367:23 - like if you are getting any value
367:25 - we created a public draw method on our
367:27 - player class so let's call it here
367:30 - i have an error because draw method
367:32 - needs an argument for context otherwise
367:34 - it doesn't know what canvas to draw on i
367:37 - pass it ctx from line 7 because in this
367:39 - project we only have one canvas element
367:42 - nice we are drawing player image on
367:44 - canvas what you see on canvas right now
367:46 - is the entire sprite sheet on line 14
367:49 - here we are telling draw method what
367:51 - image to draw and what coordinates to
367:54 - draw it at draw method will just take
367:57 - the entire image at its original size
367:59 - and it places it at these coordinates i
368:02 - can change the coordinates here
368:04 - built in canvas the draw image method
368:06 - can take 3 5 or 9 arguments depending on
368:09 - how much control we want to have over
368:12 - the image we are drawing if i give it
368:14 - optional fourth and fifth arguments
368:16 - these stand for width and height and the
368:18 - entire image will be stretched to fill
368:21 - the rectangle defined by these starting
368:23 - coordinates and these ending coordinates
368:27 - the last longest version of draw image
368:29 - method expects 9 arguments and it gives
368:31 - us full control over the image we pass
368:34 - it image we want to draw x y width and
368:37 - height of rectangle we want to crop out
368:39 - from the source image and x y width and
368:42 - height of rectangular area where we want
368:45 - to place that cropped out piece of image
368:47 - on destination canvas
368:49 - so right now i want to draw just a
368:51 - single frame from player sprite sheet so
368:53 - destination values will be this dot x
368:56 - this dot y this dot width and this dot
368:58 - height
368:59 - and source values will be
369:02 - let's start by cropping out this frame
369:04 - in the top left corner so from
369:06 - coordinates 0 0 two coordinates distort
369:09 - with this.height
369:11 - these two values determine start of
369:14 - cropping rectangle so i can navigate
369:16 - around the sprite sheet horizontally and
369:18 - vertically just by changing these two
369:20 - values
369:21 - now i'm traveling along the sprite sheet
369:23 - horizontally it's not very obvious on
369:25 - this simple standing animation if you
369:27 - watch doc's tale you will see we are
369:29 - swapping between frames source y
369:31 - argument here is for vertical navigation
369:34 - now i jumped to this frame
369:36 - i can swap between frames just by
369:38 - changing these values
369:40 - i might as well put them into separate
369:42 - variables i create frame x variable for
369:44 - horizontal navigation and i replace it
369:47 - here i also create frame y for vertical
369:50 - navigation and i replace it here
369:53 - now i can jump between frames in our
369:55 - sprite sheet by changing frame x and
369:58 - frame y variables
370:00 - wow we covered the main principles of
370:02 - javascript sprite animation so fast
370:04 - today i have a special glass about it if
370:06 - you want to go deeper to finalize sprite
370:09 - animation we just rotate between sprites
370:11 - on each row endlessly using frame x
370:13 - property and as we swap between
370:16 - different player states such as running
370:18 - and in we will be swapping between rows
370:20 - of sprite sheet vertically using frame y
370:23 - variable
370:24 - before we do that let's place player in
370:26 - the middle bottom of canvas to make it
370:28 - seem like it's standing on the ground
370:30 - this dot x is a game width divided by 2
370:33 - minus player's width divided by 2
370:37 - and middle bottom placement is game
370:39 - height minus height of the player like
370:41 - this
370:44 - there are many ways to handle keyboard
370:45 - inputs i want to keep our code clean and
370:47 - modular so i have this input.js file
370:50 - inside i create a default export again
370:53 - and this time it will be a class called
370:55 - input handler this class's job will be
370:58 - to setup listeners for specific keys and
371:01 - to keep track of the last key that was
371:03 - pressed or released and it will have
371:05 - only one class property called for
371:07 - example this dot last key this value
371:10 - will be updated every time one of our
371:12 - selected keys is pressed or released
371:15 - inside constructor i create an event
371:17 - listener for keydown event callback
371:19 - function on event listener in javascript
371:21 - has this auto-generated event object
371:24 - that is automatically passed as an
371:26 - argument here i will refer to it as e
371:28 - for example this e event object has all
371:31 - kinds of different information about key
371:33 - down event that just occurred you can
371:36 - console e to see it i used it many times
371:38 - before so i know this event object has a
371:40 - property called key that gives us the
371:43 - name of keyboard button that was pressed
371:46 - i could use if-else statements here or i
371:48 - can use a javascript switch statement
371:50 - which is used to perform different
371:52 - actions based on different conditions we
371:55 - use it to select one of many blocks of
371:57 - code to be executed based on which key
372:00 - was pressed the syntax goes like this i
372:03 - open switch statement and i pass it
372:05 - expression to validate in this case i
372:08 - wanted to check for value of event.key
372:11 - which contains name of the key that was
372:13 - just pressed in this keydown event i say
372:16 - case arrow left and here some code to be
372:19 - executed if e dot key is arrow left in
372:22 - this case i will take this to the last
372:24 - key from line 3 and i give it value
372:26 - press left
372:28 - make sure you spell it the same as me
372:30 - it's case sensitive we can have multiple
372:32 - cases here so far i just have one but i
372:34 - will add more arrow keys in a minute
372:36 - switch expression on line 5 is evaluated
372:39 - once and it is compared with each case
372:42 - in this case it will check if e dot key
372:44 - is equal to arrow left
372:47 - if it is code on line 7 will be executed
372:50 - we can also give it default case with
372:52 - code to run if there is no match but i
372:54 - will not be doing that today let's copy
372:56 - this event listener and i change it to
372:59 - key up event
373:00 - when arrow left is released i will set
373:03 - this dot last key from line 3 to release
373:07 - left this way i can keep track of
373:09 - specific keys being pressed and released
373:12 - i can't lock e dot key inside key down
373:15 - event just to check if everything works
373:17 - so far so i have this custom input
373:19 - handler class and all this code is
373:21 - inside its class constructor which means
373:24 - all this code will get auto executed
373:26 - when i create an instance of this class
373:29 - using the new keyword instantiate an
373:31 - input handler class will automatically
373:33 - attach these two event listeners to our
373:36 - browser window object
373:37 - i'm exporting this class here and i will
373:40 - instantiate it from a main script js
373:42 - file by saying import input handler from
373:45 - input.js
373:48 - with input handler class available i
373:50 - create a constant variable called for
373:52 - example input and i set it to new input
373:55 - handler that's it now when i click my
373:58 - canvas and i start pressing keyboard
374:00 - it will console log names of those keys
374:03 - those names are values of key property
374:05 - on auto generated event object coming
374:08 - from e dot key here so creating an
374:10 - instance of input handle class
374:12 - automatically executed all the code
374:14 - inside its constructor which added event
374:17 - listeners to our project
374:19 - we care only about certain keys we will
374:21 - ignore others right now pressing and
374:24 - releasing left arrow key will update
374:26 - this dot last key property last key
374:28 - stores the last keyboard input that was
374:31 - pressed or released i will add more keys
374:34 - in key down i add case for arrow right
374:37 - and i set last key to press right
374:42 - and in key up event listener we set it
374:45 - to release right
374:46 - i will add break keyword after each case
374:49 - if we find a match we don't have to
374:51 - check the others so we are listening for
374:53 - presses and releases of left and right
374:56 - keys let's see if everything works i
374:58 - can't lock input from line 14
375:01 - dot last key which is coming from line 3
375:04 - and input js file
375:07 - it's not working because we have a
375:08 - problem with this keyword since i'm
375:10 - attaching event listener to window
375:12 - object from inside a class i need to
375:15 - bind that reference to this keyword so
375:17 - that when event listener runs this line
375:19 - later it still remembers that this
375:22 - keyword stands for this property on
375:24 - input handler object i can use built
375:27 - javascript bind method here or i can use
375:29 - es6 arrow function syntax which has a
375:32 - special built-in feature when compared
375:33 - to regular function
375:35 - arrow functions do not bind to their own
375:37 - in this but they inherit one from their
375:39 - parent scope this is so called lexical
375:42 - scoping because of this behavior arrow
375:44 - functions allow us to retain the scope
375:47 - of the caller inside the function so we
375:49 - don't need to use bind
375:51 - in other words use an arrow function
375:53 - here we'll make sure these lines of code
375:56 - will correctly remember we are pointing
375:58 - them to this class property
376:01 - i will also need animation loop so
376:03 - custom function i call for example
376:04 - animate inside i will console
376:07 - input.lastkey
376:10 - request animation frame and i pass it
376:12 - animate which will create an endless
376:14 - animation loop
376:15 - i start the loop by calling animate like
376:18 - this
376:19 - now when i click on canvas and i press
376:21 - left or right arrow keys we get the
376:23 - correct console logs for left
376:26 - i misspelled arrow right on lines 9 and
376:28 - 19.
376:34 - now everything works great
376:40 - utils.js is just a place where i can
376:42 - have my small utility functions i want
376:45 - the function that will display the last
376:47 - key that was pressed i want to draw that
376:49 - text on canvas so that i don't have to
376:51 - check console it will be very simple i
376:54 - call it draw status text
376:56 - it will take arguments for context to
376:58 - specify what canvas we want to draw on
377:01 - and input so that we have access to the
377:03 - last key value
377:05 - i set canvas font property to 10 pixels
377:07 - helvetica for example fill text method
377:10 - takes text we want to draw and x and y
377:13 - where on canvas we want to draw it so i
377:15 - pass it last input colon space plus
377:19 - input dot last key and i want to draw it
377:22 - at coordinates 10 20 i guess
377:26 - let's export it and import it in script
377:28 - js this time i'm not exporting it as a
377:31 - default so i have to wrap it in curly
377:33 - brackets like this
377:35 - i import draw status text in brackets
377:38 - from utils.js and i call it inside
377:40 - animation loop here on line 19. it
377:43 - expects context and input as arguments
377:46 - so i pass it ctx from line 9 and input
377:49 - from line 15.
377:52 - let's make it larger maybe 30 pixels
377:56 - and coordinates 2050
378:01 - nice it works i need to make sure i
378:03 - clear my canvas between frames to delete
378:06 - old paint build in clear rectangle
378:08 - method and i want to clear the entire
378:10 - canvas from coordinates 0 0 to
378:13 - coordinates canvas with canvas height
378:15 - this will delete my player so i have to
378:17 - redraw it for every frame by placing
378:19 - player.draw inside animation loop
378:23 - nice so far we only care about left and
378:25 - right arrow keys when we press them
378:28 - canvas gets updated let's delete this
378:30 - console log
378:32 - state design pattern allows objects to
378:34 - change their behavior based on their
378:36 - current state in this case we will start
378:39 - very simple to demonstrate the main idea
378:41 - we will swap player between stand and
378:43 - left and stand and write state entering
378:46 - each state will draw a different row in
378:48 - sprite sheet and in each of these states
378:51 - player will only respond to a limited
378:53 - set of keyboard inputs when we are
378:55 - standing left we will ignore additional
378:57 - presses of left key and we will only
378:59 - react when user presses the right key
379:02 - which will swap us to standing right
379:04 - state in the stand and right we will
379:07 - ignore any additional presses of right
379:09 - key and only pressing left arrow key
379:11 - will swap us to standing left state in
379:14 - each state we can limit what keys player
379:16 - will react to and we can write logic
379:19 - that defines behavior for each key press
379:21 - separately i will keep all potential
379:24 - player states in this dot states array
379:26 - here and i will keep track of the
379:27 - current one in this dot current state
379:30 - here the way this is done is that each
379:32 - state in this dot states array will be
379:35 - its own object generated by a separate
379:38 - class don't worry let's go through it
379:40 - now and make sure we explain it properly
379:42 - so that it's easy to understand in state
379:44 - js i will define class for each state i
379:47 - will have an object that will contain a
379:49 - list of all possible states usually it's
379:52 - a good idea to use enum for this in this
379:54 - case we will use enum to define a set of
379:57 - named constants we define a name for
380:00 - each state and assign it a number the
380:02 - order of these states must match the
380:04 - order in which we add them to player
380:06 - states array and that way swapping
380:09 - between states will be more readable
380:10 - because instead of swapping to state 0 i
380:13 - will be able to swap to state standing
380:15 - left for example it will make our code
380:18 - easier to read that's why we're writing
380:20 - this enum statement i will have just two
380:22 - states at first to demonstrate the
380:24 - entire logic on a simple example
380:26 - standing left will be state 0 and stand
380:29 - and write will be state 1. i create a
380:31 - custom class called state its job will
380:34 - be just to hold this dot state property
380:37 - which will be passed to constructor as
380:39 - an argument it will take this argument
380:41 - and it will turn it into class property
380:44 - this is just to keep track of name of
380:46 - the currently active state so that we
380:48 - can write that state name on canvas
380:51 - in state design pattern each state is
380:54 - usually defined by a separate class so
380:56 - let's create a class called standing
380:58 - left
380:59 - and that class extends state class from
381:02 - line
381:03 - extends keyword is used to create a
381:05 - child class by extending a class i'm
381:08 - setting up a relationship between these
381:10 - two classes this is parent and this is
381:13 - child
381:14 - extending classes is a good example of
381:16 - one of four pillars of object-oriented
381:18 - programming called inheritance
381:20 - inheritance is a process where one class
381:22 - inherits attributes and methods from
381:24 - another class we use it to avoid code
381:27 - repetition
381:28 - i will create multiple child classes
381:30 - that all extend this state class if i
381:33 - want i can define a method on parent
381:35 - state class and it will be inherited by
381:38 - all child classes automatically so that
381:40 - i don't have to define them on each
381:42 - class separately
381:43 - all child classes will also have access
381:46 - to this.state property because if i
381:48 - reference a method or a property from
381:50 - inside a child class if javascript can't
381:53 - find it on this class it will go look
381:55 - for it automatically on the parent so
381:58 - this is our parent class also called
382:00 - super class and this is so called child
382:03 - class or sub class it will have its own
382:05 - constructor and that constructor will
382:08 - expect player object as an argument
382:10 - because i need access to player
382:12 - properties on here since i want to be
382:14 - changing things like player sprite sheet
382:16 - row or player speed as we swap between
382:18 - different states constructor is
382:20 - automatically executed when we create an
382:23 - instance of a class so the first thing i
382:24 - will do is use super keyword we can use
382:28 - super keyword in child classes to access
382:31 - and call methods on object's parent when
382:34 - super is used in a constructor like we
382:36 - are doing here it must be used before
382:38 - this keyword calling super here will
382:41 - execute all the code inside the parent
382:43 - constructor on line 7. in this case we
382:45 - need to pass it name of current state
382:48 - standing left and constructor will set
382:50 - it as a value for this dot state class
382:52 - property on this particular subclass
382:55 - we'll just use that to write currently
382:57 - active state on canvas a bit later now i
382:59 - take player object passed as an argument
383:02 - and i convert it to class property here
383:05 - my standing left child class will have
383:07 - enter method that will do everything
383:09 - that needs to be done when player enters
383:11 - this particular state for example it
383:13 - will change its speed or sprite sheet it
383:16 - will also have handle input method which
383:18 - will listen for a predefined set of
383:21 - inputs and swap to a different state
383:23 - when the correct key is pressed enter
383:25 - method will just run once when standing
383:27 - left state is entered handle input
383:29 - method will run over and over per each
383:31 - animation frame
383:33 - let's copy all this and make another
383:35 - child class called standing right i pass
383:38 - stand and write string to its super
383:40 - class constructor
383:42 - notice that we have two subclasses
383:44 - extending one superclass both of these
383:47 - child classes have methods that are
383:49 - named exactly the same this is very
383:51 - important
383:52 - placing methods with the same names on
383:54 - different objects is an example of one
383:57 - of the core concepts of object-oriented
383:59 - programming called polymorphism out of
384:01 - these four concepts it's the most
384:03 - complex one to fully understand since it
384:06 - has multiple types in this case
384:08 - polymorphism allows methods to display
384:10 - different behavior depending on which
384:12 - class calls it we will be calling enter
384:15 - and handle input methods from player
384:17 - class using the same line of code every
384:20 - time but as player swaps between
384:21 - different states different code will be
384:24 - executed because enter method and handle
384:26 - input methods will contain different
384:28 - behavior for each player's state for
384:30 - each class those differences will be
384:32 - defined here so for this code to work
384:35 - every player state class we define needs
384:38 - to have enter method that runs once
384:40 - every time we enter that state to set
384:42 - things up and it needs to have handle
384:44 - input class method that runs
384:46 - continuously waiting for specific inputs
384:49 - to be pressed to switch player object to
384:51 - a different state handle input method
384:54 - will take input as an argument player
384:56 - object has this dot frame y property
384:59 - which determines which row of player
385:01 - sprite sheet we are animating
385:04 - when we enter stand in left state i want
385:06 - to animate row 1.
385:08 - stand and write animation frames are on
385:10 - row with index 0. the main principle of
385:14 - state management pattern is that when in
385:16 - specific state object will only react to
385:19 - a limited set of inputs other inputs for
385:22 - which we don't define behavior here will
385:24 - be ignored so inside standing left class
385:28 - if input is pressed right we will set
385:30 - state to stand in right
385:34 - when player object is in stand and write
385:36 - state and input is pressed left we will
385:38 - switch player to stand in the left state
385:42 - and the final piece is the mechanism
385:44 - that will actually allow us to swap
385:46 - player to a different state that code
385:48 - will come here i create a custom public
385:50 - method on player class called for
385:52 - example set state and it will take the
385:55 - new state as an argument inside i set
385:58 - this dot current state from line 6 to
386:01 - distort states from line 5 and index
386:04 - will be this state number we passed as
386:07 - argument of course this will only work
386:09 - if this.states actually contains some
386:11 - states right now it's empty we will fill
386:14 - it in a minute
386:15 - we know that each of our states has
386:17 - enter method which will run once when
386:19 - player enters that particular state to
386:21 - set up our sprite sheet to make sure we
386:23 - are animating the correct row
386:25 - back in set state we switch player to a
386:27 - new state and we call that enter method
386:30 - if we pass it 1 here enter method will
386:33 - be called on standing left state if we
386:36 - pass it 0 here method will be called
386:38 - from and write state
386:40 - because in our enum we gave standing
386:44 - left state a value of 0 and standing
386:46 - right state is value 1.
386:49 - so now we have a public method that can
386:51 - swap player between different states if
386:54 - player is currently in standing left
386:56 - state and handle input method detects
386:58 - that we pressed right arrow key we call
387:01 - it
387:02 - this.player.setstate and on line 18 here
387:05 - i see it expects state as an argument
387:08 - that argument will be a number right now
387:10 - we only have two states so either zero
387:13 - for standing left or one for stand and
387:15 - write will come here
387:16 - you can see we say distant states
387:19 - and index in square brackets so we are
387:22 - referring to this dot states from line
387:24 - 5.
387:25 - again we will fill this array with state
387:27 - objects in a minute so i want to swap
387:29 - player to stand in right state here i
387:32 - can see stand right is 1 here so to pass
387:35 - it number 1 i pass it states from line 1
387:38 - dot stand and write from line 3. this
387:41 - entire enum object is here just to give
387:43 - me more readable values to these numbers
387:46 - that represent states it would also work
387:48 - if i just passed it number one directly
387:50 - here but number one past the set state
387:53 - method will be passed here on line 18 as
387:55 - an argument and this dot current state
387:57 - will be assigned this dot states from
388:00 - line five index one this array will need
388:03 - to have two elements as we have two
388:04 - states element with an index of zero and
388:07 - element with an index of one these will
388:10 - not be just simple numbers like this
388:12 - these will be entire instances of
388:14 - standing left and standing right class
388:17 - but before i can use those classes here
388:19 - in player.js i need to import them
388:21 - to import multiple classes from the same
388:24 - file we need to wrap them in brackets
388:26 - in state.js i export standing left class
388:29 - from line 10
388:31 - and standing right class from line 22.
388:34 - in player.js i import both of them from
388:36 - statejs like this
388:40 - i need to make sure i save changes to
388:42 - all files i made changes to
388:45 - i have an error because i didn't finish
388:46 - this other if statement if player is in
388:49 - stand and write state and handle input
388:52 - method detects we press left arrow key
388:55 - call set state on player class and pass
388:57 - it number 0 states that standing left
389:01 - this stands for 0 so 0 is being passed
389:04 - here to set state and this dot current
389:07 - state is set to this dot states from
389:09 - line 7 index 0 which is this now we can
389:12 - finally define our states here properly
389:15 - so index 0 in player states array will
389:17 - be an instance of standing left class so
389:20 - new standing left
389:22 - and index 1 will be new standing right
389:25 - we need to make sure that state objects
389:27 - in this array have the same indexes as
389:30 - numbers we defined for each of these
389:32 - states inside enum here
389:35 - now that we can swap between states i
389:37 - also need to be calling a handle input
389:39 - method over and over so that we can
389:40 - listen for new inputs and change states
389:43 - when needed i create update method on
389:45 - player class and it will take input as
389:47 - an argument inside this method i will be
389:50 - periodically calling handle input from
389:52 - this.currentstate property from line 8.
389:54 - this property represents currently
389:56 - active state because of logic we defined
389:59 - on line 24 so player will be either in
390:01 - standing left or in stand in write state
390:04 - it will call either handle input method
390:06 - from line 19 that reacts only to press
390:09 - right or handle input method from line
390:12 - 30 that reacts only to press left
390:15 - i call it like this and i pass it input
390:18 - that we passed here as an argument that
390:21 - input then comes through here so that
390:23 - handle input method can check what was
390:25 - pressed and if the right key is pressed
390:28 - it will swap player states
390:30 - we call playerupdate we just wrote from
390:32 - animation loop and i pass it input from
390:34 - mine17 dot last key from line 3 in
390:38 - input.js
390:39 - we are done we just wrote the entire
390:41 - logic for state management of player
390:43 - object let's quickly follow the logic
390:45 - one more time to make sure it's clear
390:47 - we are calling update method for every
390:49 - animation frame and passing it
390:51 - input.lastkey the last key from selected
390:54 - inputs that user interacted with that
390:56 - input last key is passed here this time
390:59 - i call it just input and i pass it to
391:01 - this.currentstate from line 8
391:04 - dot handle input and i pass that same
391:06 - input value along
391:08 - this dot current state represents the
391:10 - entire state object at first i am
391:12 - setting it to distort states index 0
391:15 - which is this standing left object so
391:17 - for this animation frame handle input
391:20 - will be called from standing left class
391:22 - so from here i can see constructor for
391:25 - standing left and standing right expects
391:28 - player as an argument so that we can
391:30 - then correctly set up our sprite sheets
391:32 - here and here inside player.js i need to
391:35 - pass it that player argument since we
391:37 - are inside player class right now i pass
391:40 - it this keyword which in this scope of
391:42 - this class represents the entire player
391:45 - object
391:46 - okay so current state is this dot states
391:49 - index 0 which means our standing left
391:51 - class and we are calling handle input on
391:53 - it so handle input from line 18 will be
391:56 - called
391:57 - if the initial current state is index 1
392:00 - that would be stand and write state so
392:02 - this handle input method will be called
392:04 - from line 30 instead
392:06 - if handle input is called from standing
392:08 - left class it will only react if right
392:10 - arrow key is pressed and it will swap
392:13 - player to stand in write state if player
392:15 - is currently in stand in write state
392:17 - handle input will only react to left
392:20 - arrow key being pressed and it will swap
392:22 - player to stand in left state whenever
392:24 - we set a new state it will update which
392:27 - of these two states this dot current
392:29 - state is pointing towards and then from
392:31 - that new state it will call this enter
392:34 - method enter method was defined on lines
392:37 - 15 and 27 and depending on the current
392:39 - state it will set sprite sheet to
392:41 - animate a different row i save changes
392:44 - to all my files and when i click my
392:46 - canvas and press left and right arrow
392:48 - keys we are correctly swapping between
392:50 - standing left and standing right state
392:53 - let's display what state player is
392:54 - currently in on canvas as well here on
392:57 - line 24 every time set state is called
393:00 - we set this dot current state from line
393:02 - 8 to one of our available states so far
393:05 - we have standing left at index 0 and
393:08 - standing right at index 1.
393:11 - parent class of all our states has
393:13 - this.state property in its constructor
393:16 - we are given that property a different
393:17 - value from each child state by calling
393:20 - superclass constructor from each
393:22 - subclass basically all that this is we
393:25 - are declaring this.state property on
393:27 - parent class that property is being
393:29 - inherited by all child classes and it's
393:33 - set to standing left on this class on
393:35 - line 12 and to standing right on this
393:38 - class on line 24. i just wanted to draw
393:41 - this value on canvas so that we know
393:43 - currently active state
393:45 - i will use our existing draw status text
393:48 - function for that we are calling it from
393:50 - inside animation loop here and i need to
393:52 - pass it player object so that we can
393:54 - access current player state
393:57 - here i make sure my function expects
393:59 - that argument the same as we did with
394:01 - input last key
394:03 - i will call fill text and i say active
394:05 - state
394:06 - colon space plus player we passed as
394:09 - argument dot current state dot state
394:14 - when current state is set to standing
394:16 - left this dot state here will be set to
394:18 - standing left and that's what will get
394:20 - displayed for standing right it will
394:22 - display this line
394:24 - as i said before using super keyword
394:27 - inside child class constructor will call
394:29 - constructor of its super class its
394:31 - parent class and it will execute all its
394:34 - code in this case this code will assign
394:37 - value of stand and write to this
394:39 - inherited state property when using live
394:42 - server in vs code watch for these dots
394:44 - here it means you have unsaved changes
394:47 - in your file so just make sure you save
394:49 - all your code in each file if you're not
394:51 - getting the same result as me i save my
394:54 - changes i also have to give fill text
394:57 - some x and y coordinates how about 2100
395:01 - maybe 90 and i reduce font size to 28
395:04 - pixels
395:06 - when i save my changes and interact with
395:08 - canvas now when i press left and right
395:11 - keys we see status text that tells user
395:14 - the last input that was pressed or
395:16 - released and currently active player
395:19 - status that's it state pattern is
395:21 - complete now we just add more states by
395:23 - extending it before we add sitting and
395:25 - running state let's recap the logic
395:28 - because i realize this must be lot for
395:29 - beginners to follow if you are following
395:31 - so far well done you are doing great
395:34 - it all starts by calling playerupdate
395:36 - and passing it the last key that was
395:39 - pressed or released
395:41 - inside update method we take that input
395:43 - and we pass it along to handle input
395:45 - method
395:46 - the whole trick here is that we are
395:48 - calling handle input from this dot
395:50 - current state property which swaps
395:52 - between different states
395:54 - when we pass it 1 it points to state
395:57 - with index 1 inside this dot states
395:59 - array so in this case stand and write
396:01 - object if it's zero it points towards
396:04 - standing left state object both of these
396:07 - objects have their own version of handle
396:09 - input method so that as we point current
396:11 - state towards different state objects
396:14 - behavior of player will change even
396:16 - though we are always calling the same
396:18 - handle input method it's important that
396:20 - all our state objects have their own
396:22 - definition of enter method and handle
396:25 - input method i could also created a
396:27 - backup enter and handle input method on
396:29 - their parent class here
396:31 - in case child class doesn't have methods
396:33 - with these names but let's not over
396:35 - complicate things i like to think of
396:37 - this type of state management as we are
396:39 - locking player in different states while
396:42 - player is in a specific state it will
396:44 - ignore some inputs and it will only
396:46 - react to inputs we define in its handle
396:49 - input method
396:51 - here we can see that while in standing
396:53 - left state player will only react to
396:55 - pressing right arrow key and it will
396:57 - make it switch to stand and write state
397:00 - while in stand and write state player
397:02 - will ignore all inputs except for
397:04 - pressing of left arrow key which will
397:06 - make it swap to standing left state
397:09 - you might notice that state design
397:11 - pattern has some code repetition but the
397:13 - code is easy to navigate in and if we
397:15 - get a bug it will be limited to a
397:17 - specific state making larger projects
397:20 - much easier to manage and debug if we
397:22 - get some unexpected behavior we can see
397:25 - what state was our player object in when
397:28 - that unexpected thing happened and what
397:30 - was the last input key that was pressed
397:32 - or released and we check our code inside
397:35 - handle input method on that particular
397:37 - state to see what went wrong structuring
397:39 - your code like this comes very useful
397:41 - when you want to give your player
397:42 - multiple abilities weapons and special
397:44 - moves
397:46 - we are capturing the last key that was
397:48 - pressed here inside our input handler
397:50 - class i'm importing and instantiating
397:53 - that class here in script.js and passing
397:55 - it to playerupdate method
397:58 - we pass that input value along to
398:00 - handleinput method and value of that
398:03 - input gets checked against the set of
398:05 - specific values we define for each state
398:08 - and based on that we swap player to a
398:10 - different state using our custom set
398:12 - state method
398:14 - setstate method takes a single number as
398:16 - an argument as we defined them inside
398:19 - enum state that standing right is one
398:22 - state dot standard left is zero so right
398:24 - now i'm basically passing it number one
398:27 - here
398:29 - that number travels as an argument past
398:32 - the set state here
398:34 - it's passed along here and it represents
398:37 - index of that state inside this dot
398:40 - states array on player class so number
398:42 - assigned to each state inside enum
398:44 - object in state js have to correspond to
398:47 - index of each of these particular states
398:49 - inside this dot states array on player
398:52 - class
398:53 - that way when it receives number 1 here
398:55 - it swaps to stand in write state if it
398:58 - receives number 0 it will set state to
399:00 - stand in left after swap into a specific
399:03 - state enter method will run once to set
399:06 - up player object for entering that state
399:09 - in our case we just adjust spreadsheet
399:11 - row for now
399:12 - and then it continuously calls handle
399:14 - input method from that state class which
399:17 - listens to specific set of keyboard
399:19 - inputs that's why we have enter and
399:22 - handle input methods with the same names
399:24 - on each state so that we call them from
399:26 - the same place but we get different
399:28 - behaviors depending on which state
399:30 - object is player dot current state
399:33 - pointing to words at that particular
399:35 - moment
399:38 - let's add sitting state i copy this code
399:40 - block and case will be arrow down if you
399:43 - want to know what are the values of e
399:45 - dot key so that you can check for
399:47 - correct spelling of key names you can
399:49 - just console log it here
399:52 - i'm going to say if e dot key value is
399:55 - arrow down set this laplace key from
399:58 - line 3 to press down
400:01 - in keyup event we set it to release down
400:07 - in state.js i copy this code block i use
400:10 - it to create a new class called sit in
400:12 - left i pass it sitting left here i check
400:15 - my spreadsheet and i see that sitting
400:17 - left animation is on row nine
400:20 - we are counting from zero while in sit
400:22 - in left state if we detect that user
400:24 - pressed right key we will swap player to
400:27 - sit in right state which we will create
400:29 - in a minute else if we detect that user
400:32 - pressed up arrow key we will make it
400:34 - stand up again
400:37 - i need to create these new key value
400:38 - pairs in my enum object up here so
400:41 - sitting left will be 2 and sit and write
400:43 - will be 3.
400:47 - in input js i will check if pressed key
400:49 - is arrow up and i set last key to press
400:53 - up in key up event i set it to release
400:56 - up
400:58 - so now we are tracking presses and
401:00 - releases of all four arrow keys perfect
401:04 - in my new sitting left class when we
401:06 - press right we set state to sit and
401:09 - write and when we press up
401:11 - our dock will simply stand back up so
401:13 - here i need to do standing left because
401:15 - we are going from sit in left state
401:19 - i copy this code block and i turn it
401:21 - into sit and write class we set name of
401:24 - state to sit and write so that it
401:26 - displays correctly here
401:28 - while in sit and write state if we press
401:30 - left we set state to sit in the left
401:33 - if we press up we set state to stand and
401:35 - write
401:38 - in player.js i import these two new
401:40 - state classes i instantiate them inside
401:43 - this.states array while making sure i am
401:46 - adding them in the right order
401:49 - nice so we have two new state classes i
401:52 - hope you can see now how state pattern
401:54 - limits the number of inputs player
401:56 - reacts in each state
401:58 - we have logic that defines how player
402:00 - behaves while in these two new sitting
402:02 - states but we have no way to actually
402:04 - enter these sitting states i go inside
402:06 - standing right class and i say if input
402:09 - is pressed down
402:11 - we set state to sit in right
402:14 - if we press down while in standing left
402:16 - class we set state to sit in left i also
402:20 - need to make sure enter method on the
402:22 - seat and left class sets player sprite
402:24 - sheet to the correct row
402:25 - sitting left is row with index 8.
402:28 - actually sorry sitting left is row index
402:30 - 9 sitting right is row index 8. now it's
402:34 - correct i will also set the initial
402:36 - state to stand and write so distort
402:38 - states index 1 just for the first page
402:41 - load before we start pressing keys and
402:43 - swapping player states now when we press
402:45 - the down arrow key player will sit we
402:48 - can press left and right keys to make
402:49 - player turn left and right while sitting
402:52 - and pressing up arrow will make it stand
402:54 - up and face the correct direction
402:57 - this is going really well we can also
402:59 - change how the entire sitting state
403:01 - works by only making the player sit
403:03 - while arrow down key is being pressed
403:05 - and when it's released player will stand
403:07 - back up automatically so inside sitting
403:10 - left state if input is released down we
403:13 - set player to standing left and inside
403:15 - sit in right we set player to stand and
403:18 - write
403:18 - it well depends on what kind of game you
403:20 - are building and what player behavior
403:22 - you want i hope you can see that you get
403:24 - a lot of freedom and flexibility with
403:26 - this code structure you can easily
403:28 - control every detail of player behavior
403:30 - when you structure code like this the
403:32 - way i wrote this code we only react to
403:34 - the last key pressed i'm not keeping
403:36 - track of multiple key presses in memory
403:38 - since i want to keep this simple but i
403:40 - will cover how to handle pressing
403:41 - multiple keys at the same time in a
403:43 - special episode as well probably
403:47 - added running states will be similar but
403:49 - we will have to handle horizontal speed
403:51 - so let me show you how to do that again
403:53 - i start by adding new states inside my
403:56 - enum running left will be state number
403:58 - four running right will be number five i
404:01 - make a copy of this block and name it
404:03 - run and left
404:05 - i put running left here i check my
404:07 - sprite sheet and the row for this
404:09 - animation is 7. when we release left
404:11 - while in this state we will switch
404:13 - player into standing left state and when
404:15 - we press right we will switch into run
404:18 - and right
404:19 - i also copy this line of code from here
404:21 - and when we press down from running left
404:23 - state we will go into sit in left state
404:26 - duplicate this and turn it into run and
404:28 - write state if we press left arrow key
404:30 - while in run and write state we will
404:32 - switch into run and left
404:34 - if we release right key we will go into
404:36 - stand right and pressing down arrow key
404:39 - will make players sit to the right
404:42 - not every game needs to have left and
404:43 - right version of each state also there
404:45 - are other ways to write code when you
404:47 - have a set of states that each has left
404:49 - and right version or maybe each state
404:51 - has a version with weapon ready and
404:52 - weapon hidden for example again i'm
404:55 - doing it like this for simplicity and to
404:57 - demonstrate the main idea of my version
404:59 - of state management pattern
405:01 - so we defined behavior for player while
405:04 - in running states now we need a way to
405:06 - actually enter these states we can enter
405:08 - running from standing state for example
405:11 - while standing left if we press right we
405:13 - set state to run and right
405:17 - here inside run and write state we see
405:19 - that when we release right key it will
405:21 - switch back to stand and write state
405:24 - so we are only running as long as the
405:26 - key is being pressed down if we press
405:28 - left while in standing state we will
405:31 - start running to the left i get this
405:33 - error because i refreshed my project
405:35 - before i finished adding new state on
405:37 - player class don't worry about that
405:39 - while in standing right state if we
405:42 - press left we will start running left
405:48 - if we press right we will start running
405:50 - right
405:51 - so here we are exporting two new state
405:54 - classes we just wrote
405:56 - here we are assigning them values four
405:58 - and five these numbers need to
406:00 - correspond to indexes
406:02 - to order in which we add these states
406:04 - inside this dot states array here first
406:07 - i import them on line 1 as usual and
406:10 - then i add instance of running left
406:12 - class as index 4 in this array and
406:15 - running right will be the fifth item in
406:17 - this array counting from 0.
406:21 - i save changes to all my files run in
406:24 - right animation is row 6 in our sprite
406:26 - sheet perfect it works and swaps between
406:29 - running and standing states correctly we
406:31 - also want player to actually move when
406:33 - in running state so let's give it this
406:35 - dot speed property and set it to zero
406:38 - then i create max speed property and i
406:40 - set it to 10 pixels per frame for
406:42 - example when we enter running state we
406:45 - set player speed to player max speed and
406:48 - in running left we set player to minus
406:50 - player max speed because moving left is
406:52 - in the negative direction on horizontal
406:55 - x-axis inside update method on player
406:57 - class i will be adding player speed from
406:59 - line 16 to horizontal position from line
407:02 - 12. problem now is that player will just
407:04 - move off screen because even when we
407:06 - switch away from running state nothing
407:08 - is setting player speed back to zero
407:11 - so when we enter standing left state we
407:13 - set player speed back to zero
407:15 - we do the same thing inside enter method
407:17 - on stand and right
407:19 - sitting left and sit in right state
407:22 - perfect
407:23 - player now stops moving when we enter
407:25 - standing or sit in a state i will also
407:27 - introduce horizontal boundaries so users
407:30 - can't move player outside the canvas if
407:33 - horizontal position of player is less or
407:35 - equal to zero i set the position to zero
407:38 - else if the position is more or equal to
407:40 - game width minus player with meaning
407:43 - player's right edge is touching right
407:45 - edge of canvas i will also not allow it
407:47 - to move past that point
407:50 - this is going so well we applied state
407:52 - management to our player and we have
407:54 - granular control over its behavior
407:56 - separated for each state we can do so
407:58 - many things with this
408:00 - common thing you will see in games is
408:02 - jumping again there is a new small trick
408:04 - we have to use here if you never coded
408:06 - jumping in a 2d side scroller game we
408:08 - will learn how to do it properly right
408:10 - now and we will make it look really good
408:12 - by switching player to a separate
408:14 - falling animation after it reached peak
408:16 - height of its jump let me show you that
408:18 - swapping between states doesn't always
408:20 - have to happen on user input we can also
408:22 - tie state swapping to other game events
408:25 - in this case we will swap a player from
408:27 - jumping into falling state after it
408:30 - reached maximum height of its jump
408:33 - we are creating new states as usual i
408:35 - will first add them up here to our
408:37 - states object which we are using to pair
408:40 - readable state names with numbers that
408:42 - represent each state i copy already
408:44 - exist in state class and i turn it into
408:47 - jumping left class i check my
408:49 - spreadsheet to see which row has a jump
408:51 - in left animation frames i delete player
408:54 - speed i think because i want the speed
408:56 - to be inherited whether we enter jump
408:57 - from standing on running state
409:00 - we will see about that
409:02 - i delete all these inputs for now i copy
409:05 - this block and turn it into jumping
409:07 - right class
409:12 - frame y for jumping right is row with
409:14 - index of 2.
409:18 - i go up to standing left state and when
409:20 - input is pressed we switch player to
409:22 - jump in left
409:23 - inside stand and write state when we
409:25 - press up arrow key we set state to jump
409:28 - in right
409:29 - i'm exporting these new state classes so
409:32 - in player.js i can import them
409:35 - and i instantiate them inside player
409:37 - states array
409:41 - i'm getting an error
409:44 - it's because up here in my enum i
409:46 - skipped some values let's assign my new
409:48 - states to the correct values now we
409:51 - correctly enter jumping state when i'm
409:53 - in that state it doesn't matter what i
409:55 - press we are locked in that state
409:56 - because inside handle input method i
409:58 - didn't give it any way to switch off to
410:00 - a different state first when we enter
410:03 - jumping state let's push player upwards
410:05 - on minus direction on vertical y axis
410:08 - when we enter i say this.velocity y
410:11 - minus equals
410:13 - i do the same for jumping right state
410:17 - in player.js inside update method we
410:19 - will deal with vertical movement here
410:21 - i give player v y velocity y property
410:25 - and i give it property i call for
410:26 - example weight i could have also called
410:29 - it gravity or something i will use
410:31 - velocity y to pull player upwards and
410:34 - wait to pull player down
410:37 - as the ratio between these two values
410:39 - changes during the jump it will create a
410:41 - nice jumping curve
410:43 - for every frame we will add
410:44 - this.velocity y from line 14 to player's
410:47 - vertical y position from line 13.
410:51 - right now velocity y is zero so even
410:53 - when we are adding it there will be no
410:55 - vertical movement
410:56 - if player is not standing on the ground
410:59 - so if player y is less than this.game
411:01 - height minus player height gradually add
411:04 - value of player weight to velocity y
411:07 - else meaning player is standing on the
411:09 - ground set velocity y back to zero give
411:12 - me a second to figure this out to make
411:14 - sure i'm doing it correctly
411:16 - in state gs here i actually want to
411:18 - access the velocity y property on player
411:20 - object so this dot player v y minus
411:23 - equals 20.
411:24 - i get small jump and it stops moving
411:26 - again
411:31 - oh yeah this is a typo this needs to be
411:34 - game height
411:36 - now it's working we have multiple places
411:39 - in our code where we need to check if
411:41 - player is standing on the ground or if
411:43 - it's currently in the air this is a good
411:45 - time to create a small utility method on
411:47 - our player i will call it unground
411:50 - and its job is to check if player is
411:53 - standing on the ground
411:55 - i will just make it return true or false
411:57 - directly like this
411:58 - based on how this expression evaluates
412:01 - if player's y coordinate which is the
412:03 - top edge of player image rectangle if
412:06 - it's more or equal then game height so
412:08 - this point minus player height so if
412:11 - this point is more or equal than this
412:14 - point we know player is standing on the
412:16 - ground so this method will return true
412:18 - else it will return false now i can just
412:21 - call this method whenever i need to do
412:23 - this check and it will also make the
412:25 - checks more readable
412:27 - here on line 32 i'm checking if player
412:29 - is not on ground so i say if on ground
412:32 - is false
412:33 - actually if this dot on ground is false
412:36 - now it's working
412:38 - i want player to be able to switch sides
412:40 - while jumping so in jump in left state
412:43 - if we press right arrow key we set state
412:45 - the jump in right
412:47 - in jump and write state if we press left
412:49 - arrow key we set state the jumping left
412:53 - player is flying off screen really far
412:55 - let's change this to minus equals 10.
412:58 - that's a very small jump but you will
412:59 - notice a bug here if i swap between
413:02 - jumping left and jumping right quickly
413:04 - each time we enter these states we are
413:06 - running their enter method so each time
413:08 - we push player further and further up i
413:11 - want the player to only be able to
413:13 - propel itself further up if it's
413:15 - standing on the ground so in enter
413:17 - method on both jumping states i will
413:19 - first check if player.on ground is true
413:22 - before we push it upwards
413:25 - if it's already in the air this will be
413:27 - false and player will receive no
413:28 - vertical push i change these values to
413:31 - minus equals 40.
413:34 - i just make sure i spell on ground
413:36 - correctly
413:37 - perfect we are able to turn to sides
413:39 - while jumping i will actually give it
413:41 - some horizontal speed as well when we
413:43 - enter jumping left set player's
413:45 - horizontal speed to half of player's max
413:47 - speed
413:50 - and the same for jumping right
413:53 - in jumping left it actually has to be
413:54 - negative number since we want to move in
413:57 - minus direction on horizontal x-axis
414:00 - that works awesome i can switch between
414:02 - jumping left and jump and right states
414:04 - but otherwise i'm locked in jumping i
414:06 - didn't give it any way to get back to
414:08 - running or stand in state inside jumping
414:10 - left i check if player on ground is true
414:13 - and when player gets back on the ground
414:15 - we set its state to stand and left
414:19 - in jumping right again we check if
414:21 - player is back on ground and we set it
414:23 - to standing right
414:25 - we are running standing sitting and
414:28 - jumping well done if you followed this
414:29 - far let's polish this and make it look
414:31 - even better jumping works this way we
414:34 - are always adding velocity y to player's
414:36 - vertical position here on line 31. most
414:39 - of the time that velocity y is zero so
414:41 - there is no vertical movement when we
414:44 - enter jumping state we set velocity y to
414:46 - minus 40 which will push player upwards
414:49 - in minus direction on vertical y axis
414:52 - when that happens player is no longer
414:54 - standing on the ground so this if
414:56 - statement triggers and we start
414:58 - increasing velocity from line 14 by
415:00 - player weight from line 15. this happens
415:03 - for every frame step by step so actually
415:05 - velocity y goes from -40 to zero making
415:09 - player move up slower and slower when
415:11 - it's zero player will stop moving at
415:14 - that point we are still not on the
415:15 - ground so this line of code keeps
415:17 - increasing and it moves velocity y from
415:20 - negative to positive numbers which will
415:22 - make player reach peak of its jump and
415:24 - it will start falling back down when we
415:27 - touch the ground this else statement
415:29 - triggers velocity y is set back to 0 and
415:32 - vertical movement will stop
415:34 - understanding how velocity y goes from
415:36 - -40 to zero and then into positive
415:38 - numbers gives us ability to tie player
415:41 - state change to it i can tell that
415:43 - player is at its peak of its jump
415:45 - because its velocity y switched from
415:46 - negative to positive values i will just
415:49 - add a quick check here to make sure
415:51 - player doesn't fall through the floor it
415:53 - shouldn't happen but this is kind of my
415:54 - insurance if player y is more than game
415:57 - height minus player height set player y
416:00 - to gain height minus player height this
416:02 - line will make it impossible for a
416:04 - player to move below ground level under
416:06 - any circumstances i don't think this
416:09 - check is needed even when i increase
416:10 - player weight to 10 we still don't fall
416:13 - through the floor maybe you can just
416:15 - comment it out it's up to you
416:17 - it's just the check to be secure
416:20 - i created falling states falling left is
416:23 - 8 and fall in right is 9.
416:26 - i copy one of my state classes and i
416:28 - turn it into fall and left enter method
416:31 - we'll just set frame y to five
416:33 - inside handle input method while in fall
416:35 - in left if we press right arrow key we
416:38 - want to turn so we will switch to fall
416:40 - and right
416:41 - i also want to keep this check when we
416:43 - fall all the way to the ground we will
416:45 - switch player to standing left state
416:48 - i copy this and turn it into fall and
416:50 - write class
416:52 - frame y here will be 4 and when we press
416:55 - left we set state to fall in left
417:01 - i import these classes in player.js and
417:03 - i instantiate them inside player states
417:05 - array so how do we enter fall in state
417:08 - as we said when we enter jump velocity y
417:11 - is set to -40 and we start adding player
417:14 - weight to it so it goes all the way to 0
417:17 - and into positive numbers i know at the
417:20 - point velocity y reached 0 we are at the
417:22 - peak of jump and as it goes into
417:24 - positive numbers player is falling back
417:27 - down
417:35 - bear with me a second here please
417:45 - so inside the jumping left state if
417:47 - velocity y on player object is more than
417:50 - zero we set player state to fall in left
417:53 - inside jump in right state if velocity y
417:56 - is more than 0 we set state the jumping
417:59 - right so this is one example of how you
418:01 - can switch states based on other
418:03 - conditions state changes don't always
418:05 - have to be triggered by user present
418:07 - keys on keyboard this works really well
418:09 - we created standing sitting running
418:12 - jumping and falling states we are just
418:15 - drawing the first frame in each sprite
418:16 - sheet row let's actually animate the
418:18 - frames horizontally we have frame x
418:21 - property for horizontal navigation
418:22 - within our sprite sheet for every
418:24 - animation frame i check if frame x is
418:27 - less than max frame and i increase frame
418:29 - x by 1.
418:31 - i set frame x back to 0. some rows have
418:34 - different maximum number of frames but
418:36 - that's easy to deal with initially i set
418:38 - max frame to 5 we are counting from 0
418:43 - you can see that sit in animation has
418:45 - less frames so it's blinking since we
418:46 - are animating empty frames we will start
418:49 - with standing animation so the initial
418:51 - max frame is 6. every time we enter a
418:54 - new state we set max frame to a
418:56 - different value
418:57 - when we enter standing left we set max
419:00 - frame to 6.
419:01 - probably i should be set in max frame
419:03 - before i set frame 1 because in some
419:05 - cases if i switch row at first we can
419:07 - get blinking before the right max frame
419:09 - is applied
419:11 - or maybe i could also set frame x to
419:13 - zero every time we enter a new state i'm
419:15 - not gonna go deep into this today i made
419:17 - other episodes about sprite animation
419:19 - this is just a quick solution
419:25 - running left and running right we'll set
419:27 - max frame to 8.
419:34 - jumping and falling have max frame six
419:40 - awesome we are correctly animating all
419:42 - our rows
419:45 - if you want to make player move faster
419:47 - you can change max speed property here
419:48 - on line 20. this value affects
419:51 - horizontal movement
419:53 - the sprites are animated very fast maybe
419:55 - i want to slow them down a bit without
419:57 - changing fps of the entire game how do i
420:00 - set fps for how often we switch between
420:02 - horizontal frames in sprite sheet while
420:04 - still keeping everything else running at
420:06 - maximum 60fps as always we can use
420:09 - timestamps and delta time last time will
420:11 - be the value of timestamp from the
420:13 - previous loop animate takes this auto
420:16 - generated timestamp argument which was
420:18 - produced and automatically passed to it
420:20 - by request animation frame from line 23
420:23 - delta time is the number of milliseconds
420:25 - that passed between the last animation
420:27 - loop and this animation loop it's the
420:29 - difference between timestamps from each
420:31 - loop so delta time equals the timestamp
420:34 - from this loop minus timestamp from the
420:36 - previous loop when we have that
420:38 - calculation i set last time to the
420:40 - current timestamp so that it can be used
420:42 - for the next loop i also have to pass
420:45 - animate the initial timestamp just for
420:47 - the first loop because request animation
420:49 - frame also generates it from the second
420:51 - loop onwards so now we have delta time
420:54 - we know how many milliseconds it takes
420:56 - for our computer to serve the next
420:58 - animation frame it depends on power of
421:00 - our machine how much animation and
421:02 - calculations our game is doing per each
421:04 - frame as well as on refresh rate of
421:06 - screen we are using this number can be
421:08 - different for every computer but we can
421:11 - use it to unify how our game runs across
421:13 - different machines today i will use it
421:16 - to control how often we serve the next
421:18 - horizontal frame in doc's sprite sheet i
421:20 - pass delta time to player draw method
421:22 - here and in player js i make sure draw
421:25 - method expects that argument
421:28 - damning things with delta time needs
421:30 - three helper variables
421:32 - one variable to set fps frames per
421:34 - second one timer variable that will
421:37 - accumulate delta time until it reaches a
421:39 - certain value
421:40 - and one variable that defines that value
421:42 - we want to reach i call that value frame
421:45 - interval and it will be thousand
421:46 - milliseconds divided by frames per
421:48 - second which will give me number of
421:50 - milliseconds i want each frame to be
421:52 - displayed on the screen before we switch
421:54 - to the next one so if frame timer from
421:57 - line 22 is more than frame interval from
421:59 - line 23 only then switch frame x
422:02 - variable
422:04 - at the same time set frame timer back to
422:06 - 0 so that it can count again
422:09 - else just increase frame timer by delta
422:11 - time and wait until it accumulates
422:13 - enough milliseconds
422:17 - it's not working
422:19 - i see here in animation loop i need to
422:21 - correctly assign last time to the new
422:23 - timestamp value after we used it to
422:25 - calculate delta time so that it can be
422:27 - used to calculate delta time in the next
422:30 - loop if i change fps it affects how fast
422:33 - we serve horizontal sprites while still
422:35 - allowing player to move around at
422:37 - maximum 60 frames per second or whatever
422:40 - your request animation frame can handle
422:42 - on your computer if i give it fps that's
422:44 - higher than my screen's refresh rate
422:46 - request animation frame will
422:47 - automatically copy it so it won't
422:49 - animate faster past a certain value that
422:52 - maximum value of frames per second is
422:54 - limited by your screen's refresh rate
422:58 - making games with javascript is one of
423:00 - my favorite ways to practice coding
423:02 - today we will build a 2d game and we
423:05 - will animate everything to bring it to
423:06 - life i want to show you how to make
423:08 - keyboard controls feel quick and
423:09 - responsive we will apply animated sprite
423:12 - sheets and parallax backgrounds we will
423:14 - learn how to give our game different
423:16 - skins we will explore a new technique to
423:18 - make particle effects and we will
423:20 - challenge our players by giving
423:22 - different enemy types different
423:23 - behaviors on my community page i asked
423:26 - you to choose between three super powers
423:28 - and you chose the fireball tackle so let
423:30 - me show you how to turn into a flaming
423:32 - ball of plasma and vaporize enemies to
423:35 - earn points come join me and learn how
423:37 - to create your own 2d adventures with
423:39 - html css and plain vanilla javascript no
423:43 - frameworks and no libraries click like
423:45 - if you want more games
423:46 - [Music]
423:53 - to keep the code organized and easy to
423:55 - navigate in i will split javascript into
423:57 - multiple files so called modules and i
424:00 - will export and import them around the
424:02 - code base as needed to enable this
424:04 - functionality we have to run our code in
424:06 - some kind of dev environment they need
424:09 - to be run through some kind of server
424:11 - you might already have a preferred way
424:13 - to run a local server you can go ahead
424:15 - and do that for the rest of us the
424:17 - easiest way to create a simple local
424:19 - server is to use vs code editor which
424:21 - has a built-in one when you open your vs
424:23 - code check if you have this notification
424:25 - area down here that says go live if you
424:28 - can't see it you can just come here to
424:30 - extensions and search for live server
424:32 - it's this one mine is already installed
424:35 - you can just click install here when you
424:37 - install it close your vs code and reopen
424:40 - it and you will see go live down here
424:42 - one last thing to do we have to point vs
424:44 - code to the correct folder with the
424:46 - files we want to run through this live
424:48 - server we do it by going to file open
424:51 - folder and in there you navigate to the
424:53 - folder you will work with today on your
424:55 - local computer and click open now when i
424:58 - create new files they will be
425:00 - automatically created in that folder so
425:02 - i create index html style css and main
425:06 - js
425:07 - in index html i create a basic blank web
425:10 - page markup in vs code you can just
425:12 - press exclamation mark and tab key and
425:15 - it will create it for you let's give it
425:17 - some title and link style css file like
425:20 - this
425:21 - i create a canvas element with an id of
425:23 - canvas one
425:26 - down here i link my javascript using a
425:28 - script doc i give it type attribute and
425:31 - set it to module to specify that this
425:34 - file will be a javascript module it will
425:36 - be my top level module and we will be
425:38 - importing other javascript modules
425:40 - inside i click this go live button and
425:42 - the live server plugin will
425:43 - automatically open my default browser
425:46 - and it will run our project in it it
425:48 - will also automatically reload the
425:50 - browser window whenever we save any of
425:52 - the project files you don't have to use
425:54 - vs code and live server plugin if you
425:56 - know how to create your own local server
425:57 - in a different way feel free to do that
425:59 - so now i can see my live server is
426:01 - running on port 5501 it will reload
426:04 - browser window whenever i save any
426:06 - project file i usually use control plus
426:09 - s keyboard shortcut to save sometimes
426:11 - you have to manually reload the browser
426:13 - page for the first time and then it will
426:15 - start doing it automatically in style
426:17 - css i reset margin and padding to 0 on
426:20 - all elements and i set a box size into
426:22 - border books this is so called a global
426:24 - reset and we do it to make sure our page
426:26 - looks the same across different browsers
426:28 - canvas 1 will have border 5 pixels solid
426:31 - black and i center it in the middle of
426:33 - the page so the usual four lines of css
426:36 - position absolute top fifty percent left
426:38 - fifty percent transform translate minus
426:40 - fifty percent minus fifty percent i will
426:43 - provide you with game art assets you can
426:45 - use to code along with me and at the end
426:47 - in the experiment sections i will show
426:49 - you how to apply different skins to your
426:51 - game so that you can make it unique
426:53 - based on your own creative preferences
426:55 - check out this website for more
426:57 - beautiful art assets that are already
426:59 - compatible with today's project today we
427:01 - will be using images for player
427:03 - backgrounds enemies and other things the
427:06 - easiest way to make sure our code runs
427:08 - only after all art assets are loaded is
427:10 - by placing the images inside index.html
427:13 - which we will do in a minute and we will
427:14 - put all javascript inside a callback
427:17 - function on event listener for window
427:19 - load event that way javascript waits for
427:22 - all dependent resources such as
427:23 - stylesheets and images to be fully
427:25 - loaded and available before it runs when
427:28 - the page is fully loaded we will point
427:30 - javascript towards our canvas element
427:32 - using its id i create an instance of
427:34 - built-in 2d drawing api using getcontext
427:38 - method and i save it as ctx shortcut for
427:41 - context canvas width will be for example
427:43 - 500 pixels and height 500 pixels as well
427:47 - you can make your project wider but keep
427:48 - the height at 500 pixels for now because
427:51 - i optimized the background images for
427:53 - that size we can make canvas scale up
427:55 - and down to make sure it's always fully
427:58 - visible if i set width to 1500 pixels we
428:01 - can only see the middle it's cut off on
428:03 - left and right i can give it max width
428:05 - 100 percent and it will make it scale
428:07 - down until it's fully visible whenever
428:10 - the width of the page is less than the
428:11 - width of the canvas element i can also
428:13 - give it max height 100 in case that the
428:16 - restricting factor is page height now we
428:18 - can always see the entire canvas
428:20 - regardless of its width and height i set
428:22 - it back to 500 500 for now
428:25 - the main brain of our project will be
428:27 - this game class all logic in our project
428:29 - will somehow go through it it will
428:31 - expect width and height as arguments and
428:33 - inside we convert these to class
428:35 - properties like this it will have update
428:38 - method that will run for every animation
428:40 - frame and trigger all calculations that
428:42 - need to happen and draw method will draw
428:44 - our images score and so on right now we
428:47 - don't have anything to update or draw
428:49 - yet
428:50 - i create a new javascript file called
428:52 - player.js if you are a beginner it will
428:54 - be easier for you if you follow my code
428:56 - exactly and use the sprites and images i
428:58 - provide you and only once you have a
429:00 - working project then you can modify it
429:02 - and add your own art assets and game
429:04 - features if that's what you want to do
429:06 - inside player.js i create a class called
429:09 - player its job will be to draw and
429:11 - update our superdog character
429:13 - constructor will take the entire game
429:15 - object as an argument through it we will
429:17 - have access to some things we will need
429:19 - such as width and height of the game
429:21 - area and so on javascript objects are so
429:23 - called reference data types which means
429:26 - when i pass the entire game object to
429:28 - other classes like this i'm not creating
429:30 - a copy of the game object i'm just
429:32 - pointing to it so now it's time to bring
429:34 - player image to the project it was
429:36 - provided by this talented artist and you
429:38 - can download it for free in the video
429:40 - description and use it for learning
429:41 - purposes to follow along with this class
429:43 - check out their website for more game
429:45 - art assets if you want to make your
429:47 - projects unique so we have some images
429:49 - and sometimes it can take a while maybe
429:51 - even a couple of seconds for the images
429:53 - and audio files to load in javascript if
429:56 - you try to use an image that hasn't yet
429:58 - been fully loaded you will get an error
430:01 - we need to make sure our images are
430:02 - loaded and available before we draw them
430:05 - one way to do that and the simplest way
430:07 - to do that is to actually include those
430:08 - images on our web page i simply create
430:11 - an image element
430:12 - and as a source i point it towards the
430:15 - image file i have a folder called assets
430:17 - in the same place where my index.html
430:19 - file is and in there the image i want is
430:22 - called playerpng i give it id player
430:25 - like this
430:26 - i will draw that image on canvas with
430:28 - javascript so i don't really want to
430:30 - display it on the web page like this
430:32 - install css i target it using its id and
430:35 - i set its display to none it's a good
430:37 - practice to make your images the exact
430:39 - size you will use in your projects we
430:41 - can scale it down with javascript but
430:43 - for maximum performance it's better to
430:45 - size your images in photoshop or some
430:47 - other graphics editor i already did that
430:50 - with the images i gave you today and i
430:52 - sized each frame to the same size we
430:54 - will display in game the width of each
430:56 - single frame in the sprite sheet will be
430:58 - 100 pixels and height will be 91.3
431:01 - pixels if you are using your own sprite
431:04 - sheets you can get the width of a single
431:05 - frame by taking the width of the entire
431:07 - sprite sheet and dividing it by the
431:09 - number of horizontal frames and height
431:11 - is the height of the entire sprite sheet
431:13 - divided by the number of vertical frames
431:15 - the number of rows player will also need
431:17 - to be positioned somewhere on canvas so
431:19 - it will need x and y position it will
431:22 - have update method that will move it
431:23 - around based on user input and it will
431:26 - cycle through the sprite frames and the
431:28 - draw method will take those values and
431:30 - it will draw currently active frame and
431:32 - the current coordinates
431:34 - it will need context as an argument to
431:36 - specify which canvas element we want to
431:38 - draw on let's start by calling fill
431:40 - rectangle first and we draw it at
431:42 - coordinates this dot x this.y and we
431:45 - also specify its width and height if i
431:47 - want to use this javascript class in a
431:49 - different module in a different file i
431:51 - need to export it i can just say export
431:53 - like this each file can have unlimited
431:55 - amount of exports or i can say export
431:58 - default each file each module can have
432:01 - only one default export in main.js i
432:04 - import playerclass by going up top and
432:06 - saying import player in brackets like
432:08 - this from dot forward slash player.js in
432:11 - quotes class constructor on javascript
432:14 - class is a special type of method it
432:16 - gets automatically executed when we call
432:18 - this class using the new keyword it will
432:21 - create one new instance of this class
432:23 - and as a side effect all the code inside
432:26 - the constructor will run we can take
432:28 - advantage of that by putting in any code
432:30 - we want to run at that point when i
432:33 - create an instance of game class i also
432:35 - want to automatically create an instance
432:37 - of player class since i'm importing
432:39 - player class on line 1 i can instantiate
432:42 - it here this dot player property on game
432:44 - class will be new player like this
432:47 - inside player js on line 2 i can see
432:50 - that player class expects game as an
432:52 - argument
432:53 - so here since we are inside that game
432:55 - class i will pass it this inside game
432:58 - class this keyword means this game
433:00 - object
433:01 - now that we have access to the player
433:03 - object from within a game class here
433:06 - inside draw method i can take this dot
433:08 - player from line 13 and i call its draw
433:10 - method we declare that draw method here
433:13 - on line 12 inside player js and i can
433:15 - see it expects context as an argument my
433:18 - main public method will be this draw on
433:20 - game class it will get context pass from
433:23 - the outside in a minute and we will just
433:25 - pass that reference along to player draw
433:27 - like this
433:28 - our game class is complete let's create
433:30 - an instance of it i need to pass it
433:32 - width and height so i pass it canvas
433:34 - width from line 6 and canvas height from
433:36 - line 7.
433:38 - so now we created an instance of game
433:41 - class which triggered class constructor
433:43 - and that automatically triggers class
433:44 - constructor on imported player class and
433:47 - also creates our player make sure you
433:49 - save changes to both player js and main
433:51 - js file every time you make any change
433:54 - if you have any unsaved changes in
433:56 - player js at this point you will not get
433:57 - the same result as me i console log a
434:00 - game and i can see it has height
434:02 - width and it contains player object as
434:04 - we defined in the constructor perfect
434:07 - we will also need animation loop because
434:09 - i want the game to update and draw over
434:11 - and over 60 times per second i create a
434:14 - custom function i call for example
434:16 - animate inside i call game.draw from
434:19 - line 18 and as context i pass it ctx
434:22 - from line 5.
434:24 - then i call request animation frame and
434:26 - i pass it animate to create animation
434:28 - loop when i call it we are drawing this
434:30 - black rectangle representing player
434:32 - object nice this code inside draw method
434:35 - on player class will determine what the
434:37 - player looks like i can make it red for
434:39 - example
434:40 - i can move it around by changing its
434:42 - coordinates if i want to align the
434:44 - player on the bottom of the game area
434:46 - player object needs to be aware of game
434:48 - height i have width and height of the
434:50 - game area here as properties on game
434:52 - object and i'm passing a reference to
434:54 - the entire game object to the player
434:56 - here inside player js i convert that
434:59 - reference to a class property called
435:01 - this.game and i can extract width and
435:04 - height of the game from that so to
435:06 - position the player on the bottom of
435:08 - game area i set its vertical y
435:10 - coordinate to this.game.height minus
435:13 - distort height height of the player i
435:15 - don't really want the player to look as
435:17 - a red rectangle we have a special sprite
435:19 - sheet with our superdog to use here we
435:22 - are about to learn how to use built-in
435:24 - draw image method to animate a game
435:25 - character from a sprite sheet if you
435:27 - want to go deeper on sprite animation
435:29 - the very first episode in the series
435:31 - linked below will explain it in a
435:33 - beginner-friendly way this is an
435:34 - advanced video if you feel it's too
435:36 - challenging for you at some point don't
435:38 - worry it will make more sense if you
435:40 - keep going and you can always watch a
435:41 - special episode describing each
435:43 - technique on a simpler project so draw
435:45 - image is a special html canvas method we
435:47 - can use to draw and even to animate an
435:50 - image it's simple i have my player
435:51 - sprite sheet here in html and i gave it
435:54 - an id of player i create a property on
435:57 - player class called this.image and i
436:00 - point it towards that image element
436:02 - using getelementbyid
436:04 - now i can draw that image draw image
436:06 - method needs at least three arguments
436:08 - image we want to draw and x and y where
436:11 - to draw it
436:12 - by the way i'm not sure if you know but
436:14 - i don't really have to use get element
436:16 - by id here i give my image id of player
436:19 - here and javascript automatically
436:21 - creates references to all elements with
436:23 - ids into the global namespace using its
436:26 - id as a variable name so i can simply
436:29 - just use that id as a variable name here
436:32 - and it will still work
436:34 - it's a bit strange and for some reason
436:35 - nobody uses this feature but it will
436:37 - work
436:38 - i will go back to getelementbyid here
436:41 - even though it's kinda redundant
436:43 - draw image method can also accept
436:45 - optional fourth and fifth argument for
436:46 - width and height and it will shrink or
436:48 - stretch the image to occupy these
436:50 - dimensions now it's just squeezing the
436:52 - entire sprite sheet into the small space
436:55 - the longest version of draw image method
436:56 - takes nine arguments and that's the
436:58 - version we need we pass it image we want
437:01 - to draw source x source y source width
437:04 - and source height of the rectangle we
437:06 - want to crop out from the source image
437:08 - in our case a single frame of the sprite
437:10 - sheet and destination x destination y
437:13 - destination width and destination height
437:15 - will define where on destination canvas
437:17 - we want to draw that cropped out
437:19 - rectangle onto at first i just want to
437:22 - crop out the top left frame in my sprite
437:24 - sheet so i crop from coordinates 0 0 and
437:27 - the area will have a width of 100 pixels
437:29 - and height of 91.3 pixels i'm cropping
437:33 - out exactly one frame i don't need the
437:35 - red rectangle anymore we are redrawing
437:37 - the same image over and over 60 times
437:39 - per second but it looks static let's
437:42 - check if we are actually animated by
437:43 - putting some code inside playerupdate
437:46 - method for every animation frame i want
437:48 - to increase player's horizontal x
437:49 - coordinate by 1 pixel to actually run
437:52 - the code i need to go to update method
437:54 - on game class and i take this.player
437:56 - from line 13 and i call update on it
437:59 - like this finally i call game.update
438:01 - from inside animation loop and we have
438:03 - some emotion congratulations you are
438:06 - javascript animation master
438:08 - okay we can do a bit more with this if
438:09 - you want
438:10 - the dog is leaving a black trail behind
438:13 - that's old paint we can just see all the
438:15 - previous frames if you want to see only
438:17 - the current animation frame we need to
438:19 - clear canvas each time we update and
438:21 - draw i call built in clear rectangle
438:23 - method and i want to clear the entire
438:25 - canvas from coordinates 0 0 to canvas
438:28 - with canvas height now we can just see
438:30 - the current animation frame
438:33 - i don't really want the player to move
438:34 - like this let's comment this out i want
438:37 - the player to move left and right jump
438:39 - and to use super powers based on
438:41 - keyboard inputs i create a new
438:43 - javascript file a new module i call it
438:45 - input js its job will be to capture and
438:48 - keep track of user input again i will
438:50 - create a javascript class here i will
438:53 - call it for example input handler inside
438:56 - its constructor i create a property
438:58 - called this dot keys and i set it to an
439:01 - empty array at first i will be adding
439:03 - keys that are pressed down into this
439:05 - array and removing the keys that are
439:07 - being released
439:09 - that way we can always check if a
439:10 - specific key is pressed by chicken if
439:13 - it's included in this array as we said
439:15 - before the code inside a class
439:17 - constructor is executed automatically
439:19 - whenever we create an instance of this
439:21 - class so i will take advantage of that
439:23 - and i will apply key down event listener
439:25 - from here
439:27 - event listeners return an auto-generated
439:29 - event object which contains all kinds of
439:32 - information about the event that just
439:34 - occurred
439:35 - the property that holds the name of the
439:36 - key that was pressed is called key so
439:39 - let's console.log e dot key
439:41 - i export input handler up here
439:45 - inside main.js i import my new input
439:47 - handler class same as i did with player
439:53 - i will create an instance of input
439:54 - handler class inside gamer class
439:56 - constructor i will call this property
439:59 - this dot input
440:00 - this way input handler class gets
440:03 - automatically instantiated when i create
440:05 - an instance of game class it will create
440:07 - this dot keys array from line 3 and it
440:09 - will also automatically apply this key
440:11 - down event listener
440:13 - now when i press keys on my keyboard i
440:15 - can see their values
440:17 - i don't want to react to every key we
440:19 - will ignore some and we will only
440:21 - respond to specific controls defined
440:23 - here we will also make sure each key can
440:26 - be added to this dot key's array only
440:28 - once so when the user holds down a
440:30 - specific key it will not be added 20
440:32 - times it will just be added once let me
440:35 - show you i say if e.k meaning the key
440:38 - that was just press has key value of
440:40 - arrow down and at the same time this key
440:43 - that was pressed is not yet included in
440:45 - this dot keys array so this dot keys
440:48 - index of e.k is equal to -1 you can also
440:52 - say is more than -1 in javascript when
440:55 - element has index -1 it means it's not
440:58 - present in the array then i just do
441:00 - this.keys push e dot key so if the key
441:03 - that was pressed is arrow down and if
441:05 - arrow down is not yet inside this dot
441:08 - keys array push arrow down into this dot
441:11 - keys array i can console lock key that
441:13 - was pressed and this dot keys array you
441:16 - can see it will stay empty until i press
441:18 - arrow down if i press it it will be
441:20 - added to this.keys array once i will
441:23 - also create an eventlistener for keyup
441:25 - event if e dot key is arrowdown meaning
441:28 - if the key that was released is arrow
441:30 - down i will use splice method to remove
441:32 - it from this dot keys array splice
441:34 - method takes at least two arguments
441:37 - index of the element we want to remove
441:41 - and how many elements to remove at that
441:43 - index
441:45 - let's test it
441:48 - actually to test it properly i want the
441:50 - console log after the if statement now
441:53 - when i press arrow down it gets added to
441:55 - this dot keys array through the code
441:57 - inside keydown event when i release it
441:59 - keyup event removes it from the array
442:01 - perfect
442:03 - i also want to listen for arrow up key
442:05 - so i use or operator
442:07 - be careful about brackets here i have to
442:10 - wrap this block in brackets like this
442:12 - if key that was pressed is arrow down or
442:15 - arrow up in brackets and at the same
442:17 - time the key is not yet present in this
442:20 - dot keys array only then push it inside
442:23 - i also need to make sure i remove that
442:25 - arrow up key on keyup event again pay
442:28 - attention to how i use brackets here
442:30 - it's easy to make a mistake here and
442:31 - break your code
442:33 - we will also listen for arrow left so or
442:36 - operator e dot key is arrow left and
442:38 - another or operator and i check for
442:40 - arrow right
442:42 - i will check for one more key for now i
442:44 - will use it for a special move and
442:46 - attack and you can use alt ctrl but be
442:49 - careful mac and windows call alt and
442:51 - control keys differently they might have
442:53 - a different value console e.k and press
442:56 - them on your machine to check for that
442:57 - value in this case i will use enter key
443:00 - which should be more universal and
443:02 - compatible with both mac and windows
443:04 - systems let's add all these keys to key
443:06 - up event as well and i have to make sure
443:09 - my syntax is correct now it should work
443:11 - i click my canvas to select it and when
443:14 - i start pressing arrows and enter i can
443:16 - see they are correctly being added and
443:18 - removed from the array
443:20 - you can see we are also keeping track of
443:22 - multiple key presses at the same time
443:24 - great
443:25 - so now this dot key's property on input
443:27 - handler class always contains all
443:29 - currently active keys
443:32 - i have an instance of that class here
443:34 - saved as this dot input for every
443:36 - animation frame i want to pass the
443:38 - current list of active inputs to
443:40 - playerupdate method as an argument so
443:42 - that it can react to it i will pass it
443:45 - this.input.keys
443:48 - inside player.js i make sure the player
443:50 - expects that input value i will call it
443:53 - for example input it still refers to
443:55 - this.keys array we have on our input
443:57 - handler class
443:58 - inside update method on playerclass i
444:00 - want to check if it includes specific
444:03 - values i use built-in array includes
444:06 - method i could also use index off method
444:09 - here it would work the same if input
444:11 - includes arrow write increase horizontal
444:13 - x-coordinate of the player by 1.
444:16 - else if it includes arrow left decrease
444:18 - x by one making the player move left on
444:21 - the negative direction on horizontal
444:22 - x-axis
444:24 - i actually need to say this.x to
444:26 - correctly refer to the property from
444:27 - line six
444:28 - the error i'm getting now is because i
444:30 - didn't save my changes to input js or
444:33 - main.js files with file structure like
444:35 - this when we're using modules we always
444:37 - have to make sure we save every file
444:39 - whenever we make any changes to it
444:42 - now when i press right arrow player
444:44 - moves right
444:45 - when i press the left arrow key the
444:47 - player moves left
444:49 - let's refactor this i give player a
444:51 - speed property and initially i set it to
444:53 - 0. i also give it max speed property
444:56 - which will be its speed in pixels per
444:58 - frame when it's moving so this section
445:01 - of code will handle horizontal movement
445:03 - for every frame i will increase player's
445:05 - horizontal x position by its current
445:07 - speed
445:08 - so right now the speed is zero so the
445:10 - player is not moving
445:12 - down here i say if input includes arrow
445:14 - right set this dot speed to mark speed
445:17 - if it's arrow left set speed to minus
445:20 - max speed now i can move left and right
445:22 - again but i can't really stop there is
445:24 - no condition when the speed returns back
445:26 - to zero i can fix it by saying else
445:29 - this.speed is zero meaning if input
445:32 - array doesn't include arrow right or
445:34 - arrow left stop the horizontal movement
445:37 - i also don't want the player to be able
445:39 - to move outside of the game area so i
445:41 - need to introduce some boundaries i say
445:44 - if this dot x is less than zero set this
445:47 - dot x to zero
445:48 - now i can't move past the left edge i
445:51 - also say if this dot x is more than this
445:53 - that game width minus the width of the
445:55 - player set x to game with minus player
445:58 - with now i can't move past the right
446:01 - edge of game area as well perfect
446:03 - it's time to handle vertical movement
446:05 - which will include the jump in and also
446:07 - a special dive move where we crush
446:08 - enemies from above i create a new class
446:11 - property called this dot v y velocity y
446:14 - basically a vertical speed initially i
446:17 - set it to 0.
446:19 - for every animation frame we will add
446:21 - the current vertical velocity
446:23 - v y to player's vertical y position
446:26 - currently v y is set to zero so there
446:28 - will be no vertical movement at first
446:31 - i will have to check in multiple places
446:32 - in my code whether the player is
446:34 - standing on solid ground or if it's
446:36 - currently in the air to make our code
446:38 - more readable and to avoid code
446:39 - repetition i will put that check into a
446:41 - small utility method i will call it for
446:44 - example on the ground and i just want it
446:46 - to return true if the player is on
446:48 - ground or false if the player is in the
446:50 - air i do that simply by say in return
446:54 - this dot y is more or equal to height of
446:56 - the game minus the height of the player
447:00 - let's start by saying if input includes
447:02 - arrow up set this.velocity y from line 8
447:06 - to -20 i press up arrow key and the
447:09 - player just flies up off-screen okay
447:11 - that worked
447:13 - i only want the player to be able to
447:14 - jump while it's standing on ground i
447:16 - don't want it to jump higher and higher
447:18 - in the air when we are pressing up arrow
447:20 - repeatedly
447:21 - i add one more check here to see if on
447:24 - ground from line 28 is true
447:26 - i set velocity y to -2 nice
447:30 - if you want a nice jumping curve in a 2d
447:32 - game we usually do it by making the
447:34 - power of the jump in our case v-y
447:36 - property work against the gravity or
447:39 - weight of the object and while that
447:41 - object is in the air we keep increasing
447:43 - its weight until it eventually is higher
447:45 - than its jump power and it will make it
447:47 - slow down and start falling down let me
447:50 - show you exactly what i mean this used
447:52 - to be a bit confusing for me but it
447:54 - becomes easy when you use it a few times
447:56 - i create a new property called this.wait
447:58 - for example and i set it to one so we
448:01 - have velocity y property on line 8 and
448:04 - when we press up arrow key we set it to
448:06 - -10 this will be the power pulling the
448:09 - player upwards at the same time i want
448:11 - the weight of the player from line 9 to
448:13 - be pulling it down and i want that pull
448:16 - to be stronger the longer the player is
448:18 - in the air to get that smooth curve when
448:20 - we jump i do that by saying whenever
448:23 - this dot on ground is false whenever the
448:25 - player is not standing on the ground
448:28 - increase its velocity y by this.weight
448:32 - nice we kinda jumped
448:35 - i also need to make sure that when the
448:36 - player lands back on the ground velocity
448:39 - y is reset back to zero to stop all
448:41 - vertical movement i say else this dot
448:44 - velocity y is a zero for this to
448:47 - actually work as intended i need to
448:48 - first run this line of code and then
448:51 - this one
448:53 - and we are jumping velocity y is
448:55 - constantly being added to player's
448:57 - vertical y position at first it's zero
449:00 - so nothing is happening when i press up
449:02 - arrow key i give it a push in the
449:03 - negative direction on the vertical y
449:06 - axis so upwards at that point the player
449:08 - is currently not on the ground so this
449:10 - line of code will start running and
449:12 - velocity y which is currently set to -20
449:16 - and which is moving the player 20 pixels
449:19 - up per animation frame will start
449:21 - decreasing by this dot weight from line
449:24 - 9 so minus twenty plus one is minus
449:27 - nineteen minus eighteen minus seventeen
449:30 - all the way to zero
449:32 - when we reach velocity y of zero player
449:34 - is at the peak of its jump but it's
449:36 - still not on the ground so this line is
449:39 - still adding weight to velocity y making
449:41 - the player fall down faster and faster
449:44 - when the player hits the ground this
449:46 - else statement will set velocity y back
449:48 - to zero and the jump is finished the
449:51 - ratio between weight and this minus
449:53 - value will determine the curve height
449:56 - and speed of the jump i will keep weight
449:58 - at 1 and i will adjust velocity y to
450:00 - make the player jump all the way to the
450:02 - top of the game area we have run in and
450:05 - jump in i would like to add more player
450:07 - states and properly animate them we need
450:10 - a fireball attack and when the player
450:12 - sits down i want the game to stop
450:14 - scrolling how do we organize and manage
450:16 - this functionality by structuring our
450:18 - javascript code in so-called state
450:20 - design pattern i will show you exactly
450:23 - how to do that in the next part we are
450:25 - building a fast-paced animated side
450:27 - scroll game with vanilla javascript and
450:29 - html canvas in the first episode we
450:31 - created the main game logic animation
450:34 - loop and the player let's continue
450:36 - building our game in this class we will
450:38 - apply state design pattern to our player
450:40 - to make it switch between the states
450:42 - properly we will learn how to control
450:44 - fps how to animate sprite sheets and how
450:47 - to implement multi-layered seamless
450:49 - backgrounds with scrolling speed that
450:52 - reacts to player movement part 1 is
450:54 - linked in the video description let's go
450:56 - i like writing my code like this for
450:58 - small simple games as you can see there
451:00 - are quite a lot of if else statements in
451:02 - here already i want to add some special
451:04 - moves this single code block already
451:06 - does so many things and we have just run
451:08 - in and jumping if we keep adding more
451:10 - and more in here we can get to the stage
451:12 - where changing one line of code can
451:14 - break something else unexpectedly for
451:16 - small games it's fine to have all logic
451:18 - in one place like this but for this game
451:20 - we will go ahead and structure our code
451:22 - a little bit better i will manage player
451:24 - states separately in its own file i call
451:26 - it player states js at first i will
451:29 - create a simple enum object that will
451:31 - pair values and names of each state it
451:34 - will help with code readability rather
451:36 - than swap into state 2 i will swap the
451:39 - state.jumping which has a value of 2
451:42 - behind it it will be easier to see what
451:44 - our code is doing this episode might be
451:46 - a bit challenging for beginners we will
451:48 - be passing values around between
451:50 - javascript modules and classes and i can
451:52 - imagine if you are a beginner it might
451:54 - take some effort to keep track of which
451:56 - values are coming from where i will
451:58 - guide you through all the steps and we
452:00 - will make our code easy to navigate in
452:02 - but this is the finale of my vanilla
452:04 - javascript 2d game development series so
452:06 - i expect you either already watched my
452:08 - beginner-friendly episode on state
452:10 - management linked in the description or
452:12 - that you have already done some
452:13 - javascript coding before i will explain
452:15 - everything today no previous knowledge
452:17 - is needed but it will be easier if you
452:19 - watch the beginner class first it's up
452:21 - to you today's tutorial is mainly to
452:23 - show you how i put everything together
452:25 - to make a polished animated game that
452:27 - feels good to play check the video
452:29 - description for the full series i create
452:32 - a class i call for example state each
452:34 - state will have its own class so that i
452:36 - can give each state a different entry
452:38 - method to set the player up when it
452:40 - enters that particular state
452:42 - and handle method that will react to
452:44 - different user inputs depending on which
452:46 - state the player is in at that moment in
452:49 - time for example when the player is in
452:51 - the running state and i press arrow down
452:54 - i want to switch to sitting state but
452:57 - when the player is in jumping state and
452:58 - i press arrow down i don't want the
453:00 - player to sit in the air i wanted to do
453:03 - a crushing dive attack from above state
453:05 - design pattern is perfect for changing
453:07 - how the object behaves depending on its
453:09 - current state i will show you exactly
453:11 - what i mean as we write the code
453:13 - constructor will take a single argument
453:15 - called for example state it will be a
453:18 - simple line of text with the name of the
453:20 - state such as sit in run-in jump jumping
453:23 - and so on inside i converted that
453:25 - argument to a class property i will use
453:28 - this value only so that i can console
453:30 - the name of the currently active state
453:32 - for debugging purposes it's not
453:33 - important for the logic of state
453:35 - swapping we will have one class for each
453:37 - state the first state will be sitting
453:40 - which will also be special because it
453:42 - will stop the game from scrolling as the
453:44 - player sits down we will export it so
453:46 - export class sit-in constructor will
453:50 - take a reference to the player object as
453:51 - an argument so that it can access
453:53 - properties on the player class i am
453:55 - extending a class and i want the code
453:57 - from this constructor on the parent to
453:59 - run as well so i have to call super
454:02 - keyword here the trigger constructor of
454:04 - its parent class also known as a super
454:06 - class we can see that the parent class
454:09 - constructor expects a value for state
454:11 - this is simply for monitoring purposes i
454:13 - will pass it word sitting and it will
454:16 - get converted to this dot state property
454:18 - here only after we called super we can
454:20 - use this keyword here in a child class
454:23 - if we use this keyword before using
454:26 - super we will get an error super on
454:28 - child class always needs to be called
454:30 - before this keyword is used each class
454:33 - will have enter method that will run
454:35 - once when this state is entered and
454:37 - handle input method that will take input
454:40 - as an argument and it will keep checking
454:42 - if the correct key is pressed and it
454:44 - will switch player to a different state
454:46 - when that happens for example it will
454:48 - switch to jumping state when we press up
454:51 - arrow key in player js we will need
454:53 - three helper properties to apply state
454:56 - design pattern let's just write them and
454:58 - i will explain in a minute we will need
454:59 - a property called this dot this.states
455:01 - which is an array of values we will also
455:04 - need this.currentstate which will point
455:06 - to indexes in this array
455:10 - when the player object is initialized
455:12 - for the first time we will call its
455:14 - entry method to activate its initial
455:16 - default state
455:18 - i'm exporting my sit-in class here let's
455:20 - import it up here in player.js i import
455:23 - the entire sitting class from
455:25 - playerstate.js
455:28 - quick overview of how we will apply
455:30 - steady design pattern into our code base
455:32 - today player object will have this dot
455:34 - states property which will be an array
455:36 - containing individual states such as
455:39 - sitting running and so on the player can
455:42 - only be in one state at a time so we
455:44 - will have another property here called
455:46 - this dot current state
455:48 - when this.current state is equal to this
455:51 - dot states index 0 player is sitting
455:54 - when it's this dot states index 1 the
455:57 - player is in the running state and so on
455:59 - the final piece of logic will be that
456:01 - each player's state is actually its own
456:03 - class we will have a class for sit-in
456:06 - another class for run-in there will be a
456:08 - separate class for every state the
456:10 - reason for that is that each state needs
456:11 - to have its own separate enter method
456:13 - that will set speed animation row and
456:16 - everything else that needs to be done
456:18 - whenever the player enters a new state
456:20 - each state class will also have handle
456:22 - update method which will listen for
456:23 - keyboard inputs and it will be ready to
456:26 - switch the player to a different state
456:28 - whenever the correct key is pressed
456:29 - because all state classes have their own
456:31 - enter and handle input method and
456:34 - because this dot current state points to
456:36 - different states as the player switches
456:38 - from one state to another we can just
456:40 - keep calling
456:41 - this.currentstate.handleinput
456:43 - and we will get different behaviors
456:45 - depending on the current state the
456:47 - player is in at that point in time and
456:50 - this is the entire logic behind state
456:52 - design pattern if it's still not clear
456:54 - don't worry i will go over it today step
456:56 - by step as we write the code it will
456:58 - make more sense if you practice and code
457:00 - with me inside this.states array i will
457:03 - instantiate each state class right now
457:05 - i'm creating an instance of sit in class
457:08 - here on line 14 in playerstates.js i can
457:11 - see that it expects a reference to the
457:13 - entire player object as an argument
457:16 - because here we are inside playerclass i
457:19 - pass it this keyword which references
457:21 - this entire player class
457:23 - when we enter sit in state i want to
457:25 - draw a different animation row in player
457:28 - sprite sheet let's set up sprite
457:29 - animation
457:31 - we will have frame x horizontal frame
457:33 - that will cycle from left to right
457:35 - animating the player and we will have
457:37 - frame y which will travel in the sprite
457:39 - sheet vertically whenever we switch to a
457:41 - different state you can see that frame y
457:43 - 0 is standing frame y 1 is jumping and
457:47 - so on changing the values of frame x and
457:49 - frame y will jump by the width and
457:51 - height of a single frame so that we can
457:53 - animate the sprite sheet in draw method
457:56 - i replace hardcoded coordinates 0 0
457:58 - which are currently displaying this top
458:00 - left frame to dynamic values source x
458:03 - value will be this dot frame x times the
458:06 - width of the player frame
458:08 - source y will be dot frame y times the
458:10 - height of the player frame
458:13 - i'm getting a console error it's because
458:15 - i forgot a forward slash here on line
458:18 - one in player js
458:21 - now it's fixed
458:22 - so now frame x cycles horizontally frame
458:25 - y travels around the sprite sheet
458:27 - vertically i can see that the setting
458:29 - animation is frame y5
458:32 - when we enter sitting state i take this
458:34 - dot player from line 16 which points
458:36 - towards the player object and i set its
458:39 - frame y property to 5. i could have
458:41 - defined getters and setters on the
458:43 - player object to do this by the book but
458:45 - i don't think it's necessary for our
458:47 - purposes today this code will work well
458:49 - back in player.js i set the initial
458:51 - frame y to 0 which is this standing
458:54 - animation now i need a method that will
458:56 - allow us to switch player between the
458:58 - states
458:59 - i define it down here on the player
459:01 - class i will call it for example set
459:03 - state it will take this new state we are
459:06 - about to switch to as an argument it
459:08 - will be a number corresponding to
459:10 - indexes in this dot states array from
459:12 - line 17. inside i set this.current state
459:15 - from line 19 to one of the states from
459:17 - line 17 depending on which index i
459:20 - passed to it right now we only have one
459:22 - element in the array the sitting state
459:24 - that's index 0. if we have more state
459:27 - classes in the array on line 17 i will
459:29 - be able to swap to index 1 2 and so on
459:32 - to switch player to those states keep in
459:34 - mind set state will take one argument
459:37 - called state which will be a number
459:39 - corresponding to the index in this dot
459:41 - states array
459:44 - then we call enter method on the
459:46 - currently active state to set up things
459:48 - like speed sprite animation and so on
459:52 - there's also handle input method we
459:53 - defined here enter method will run once
459:56 - every time we enter that state handle
459:59 - input method will be running 60 times
460:01 - per second waiting for keys to be
460:03 - pressed so it can switch the player into
460:05 - a different state when the user requests
460:07 - it by pressing the right set of keys in
460:09 - our case mostly arrows so far
460:12 - i will be calling it from inside update
460:14 - method on player class here so this dot
460:16 - current state dot handle input and pass
460:19 - an input value as an argument to the
460:21 - update method here
460:23 - the value of input is coming from update
460:25 - method on game class pointing to keys
460:27 - array on an instance of input handler
460:30 - class from line 15. this way
460:32 - playerupdate method can always see what
460:34 - keys are being pressed in our game by
460:36 - checking if they are present in this
460:38 - input keys array we defined it before
460:41 - here on line 3 in input js if you
460:43 - remember
460:44 - we pass it through game class to update
460:46 - method on player class
460:49 - and i will just pass that argument along
460:51 - to handle input method like this
460:54 - this code will be run in 60 times per
460:56 - second constantly checking what keys are
460:58 - present in input keys array handle input
461:01 - expects keys array here as an argument
461:04 - i called it input and we will be
461:05 - checking and waiting for specific keys
461:08 - to be pressed the main function of state
461:10 - design pattern is that we are basically
461:12 - locking player object in one state at a
461:14 - time and while the player is in a
461:16 - certain state it will only react to a
461:18 - limited number of keyboard inputs while
461:21 - the player is in the sitting state we
461:22 - will react to arrow left and arrow right
461:24 - keys and when they are pressed we will
461:26 - switch into running state
461:29 - so i say if this input value that was
461:31 - passed as an argument which points to
461:33 - this dot keys array on input handler
461:35 - class if that array includes arrow left
461:38 - key or if it includes arrow right key
461:41 - call set state method on player object
461:46 - here we can see that setstate method
461:48 - expects state as an argument and it will
461:51 - set the current state of the player to
461:53 - that index in this dot states array from
461:56 - line 17.
461:58 - right now that array has only one
462:00 - element so it will only work when i pass
462:02 - it index 0 as a value of this state
462:04 - argument here
462:05 - it will then call enter method on that
462:07 - new state we just switched to
462:10 - back to player states js
462:12 - so now we know that we have to pass this
462:14 - set state method a number that will be
462:17 - used as an index in player states array
462:19 - to correctly switch it into that state i
462:22 - can pass it number 0 here but we have
462:24 - this enum object here to convert numbers
462:26 - to words like sitting and running to
462:29 - make our code more readable
462:31 - the order of states in this enum must be
462:33 - exactly the same as the order of states
462:35 - in this dot states array on line 17
462:38 - inside the player class index 0 is
462:40 - sitting state because it's the first
462:42 - element in the array this enum also
462:44 - needs to have the value of 0 paired with
462:46 - sitting which it does now i can call set
462:49 - state
462:50 - and instead of passing a number 1 which
462:53 - would also work but it would be less
462:54 - readable i pass it states from line 1
462:59 - dot run in which has a value of 1 behind
463:02 - it as well
463:03 - i hope it's a bit more clear this is the
463:05 - most complicated part and we just
463:06 - covered it just keep coding with me and
463:08 - it will start making more sense right
463:10 - now there is no index one in this array
463:12 - yet we need to create running class to
463:14 - add it
463:16 - i copy this code block and i rename it
463:18 - to run in
463:20 - and i also put a run in here i check the
463:22 - sprite sheet and i can see the fourth
463:25 - row in the sprite sheet is run in so i
463:27 - set frame y to three because we count
463:29 - from zero
463:30 - in handle input on running class we will
463:32 - listen for arrow down and when it's
463:35 - pressed we switch player to the setting
463:37 - state
463:39 - we are exporting running class here i
463:41 - import it up here in player.js
463:44 - and i instantiate it as an element with
463:46 - an index of 1 inside this dot states
463:49 - array
463:51 - nice so now when we are in the sit in
463:53 - state and we press left or right key we
463:56 - switch into the running state when we
463:58 - are in running state we listen for arrow
464:00 - down key and when it's pressed we switch
464:03 - back to the seating state
464:05 - perfect we have all the logic for
464:07 - swapping states in place let's add a
464:09 - jumping state again i copy this code
464:12 - block i rename it to jump in
464:15 - and i put a jump in here
464:18 - i comment outline 31 inside player js
464:22 - that we used for jumping before let's
464:24 - refactor it
464:26 - when we enter jumping state we set frame
464:28 - y to 1.
464:31 - if the player is on ground that method
464:33 - comes from line 39 in player js
464:38 - we set velocity y on the player to -30
464:42 - pushing it upwards
464:43 - as we discussed in part 1 during a jump
464:46 - velocity y goes from -30 to 0 moving the
464:49 - player upwards and then as it moves into
464:52 - positive numbers the player will start
464:54 - falling down we have a nice falling
464:56 - animation row in our sprite sheet so
464:58 - let's switch the player into falling
465:00 - state when it reaches the peak of its
465:02 - jump instead of listening for key
465:04 - presses we can also check for values of
465:06 - properties on the player
465:08 - when velocity y switches to the positive
465:10 - values and is more than player weight
465:12 - more than one we know the player is
465:14 - falling down at that point so we set
465:16 - state the states dot falling that will
465:19 - point up here so i add fallen in our
465:22 - enum and i give it a value of 3.
465:25 - we have our new jump in state but there
465:27 - is currently no way to enter jumping in
465:29 - our game we can enter it from running
465:32 - state for example when the player is in
465:33 - the running state we already listen for
465:35 - down arrow key we will also be checking
465:38 - for up arrow like this if input includes
465:41 - arrow up while the player is running set
465:44 - state to jump in so value two
465:48 - now i copy jump in state
465:51 - and i rename it to fall in
465:53 - i give it a text value of fallen in here
465:56 - while we are falling we won't be
465:57 - listening for any keys
466:00 - we will just wait for the player to be
466:02 - back on the ground
466:04 - and then we set state to run in
466:07 - we are exporting jumping class on line
466:10 - 46 and falling class on line 62. i
466:13 - import them up here inside player.js
466:18 - then i instantiate both of these classes
466:20 - inside this.states array the order in
466:23 - which you do that is important and it
466:25 - needs to be the same as states enum we
466:27 - have on line 1 inside player states js
466:31 - those indexes have to match you can see
466:33 - i'm importing jump in as index 2 in this
466:36 - dot states array falling is index 3
466:40 - and here inside enum object jump in has
466:42 - also the value of 2 and falling has a
466:44 - value of 3. it needs the match
466:49 - while we are inside the sitting state we
466:51 - can press arrow left and arrow right and
466:54 - it will switch player into running state
466:56 - while we are inside run in state we can
466:59 - press arrow down to sit or arrow up to
467:02 - jump to keep things simple i can also
467:04 - check for arrow left and arrow right
467:06 - here inside update method because i want
467:08 - the player to be able to move left and
467:10 - right in basically all states when the
467:12 - arrows are pressed the controls feel
467:15 - better that way that means we can move
467:17 - left and right in the air even while we
467:19 - are jumping or falling or rolling
467:23 - when i'm in the running state if i press
467:25 - up arrow key we jump and when we reach
467:27 - the peak of the jump we get
467:28 - automatically swapped into a falling
467:30 - state
467:32 - when we hit the ground we automatically
467:33 - switch into running state great
467:36 - i adjust this minus velocity y value to
467:39 - change the height of the jump
467:41 - well done if you follow the code all the
467:43 - way here now you know how to apply state
467:45 - design pattern which is quite an
467:47 - advanced technique especially if you are
467:49 - a beginner we will add more states to it
467:51 - soon but before we do that let's
467:53 - properly animate the sprite sheet of our
467:55 - dock i want it to animate and move
467:58 - i delete this line of code
468:01 - we will handle sprite animation in this
468:03 - area inside update method on player
468:05 - class
468:06 - we have frame x property which holds the
468:09 - index of horizontal frame we have frame
468:11 - y which refers to the vertical position
468:13 - in the sprite sheet you can see that
468:15 - different rows have different number of
468:17 - frames i want to rotate between frame 0
468:20 - and max frame on that row depending on
468:22 - which row we currently are on sitting
468:25 - state and running state have different
468:26 - number of frames we will hold that value
468:29 - in this dot max frame property and we
468:31 - will adjust its value every time we swap
468:34 - states since we have our code nicely
468:36 - organized in state design pattern it's
468:38 - easy to do that and to keep track of
468:40 - each state separately let me show you so
468:43 - to animate each row we will always cycle
468:45 - between frame 0 and max frame on that
468:48 - row
468:49 - if frame x is less than max frame
468:51 - increase frame x by 1.
468:55 - else reset frame x back to 0.
468:58 - it's going too fast and it's blinking
469:00 - for sit in state because we are
469:02 - including empty frames it's animating so
469:04 - fast because this particular sprite
469:06 - sheet was designed for lower frame rates
469:08 - it really depends on which art assets
469:10 - you are using but it's also easy to
469:12 - control fps of sprite animation
469:14 - independently of the fps of the entire
469:17 - game i can for example have the docs
469:19 - spreadsheet animate at 10 frames per
469:21 - second while the entire game is still
469:23 - updating at 60fps you can do it by
469:26 - checking animation timestamps and
469:28 - calculating delta time it's easy let me
469:30 - show you i will explain it right now
469:33 - we will need a helper variable here last
469:35 - time we'll hold the value of the
469:37 - timestamp from the previous animation
469:39 - loop request animation frame method has
469:42 - two special features first it
469:44 - automatically adjusts the screen refresh
469:46 - rate so most of us will get 60 animation
469:48 - frames per second unless you have some
469:50 - game in high refresh screen request
469:52 - animation frame also auto generates a
469:55 - timestamp value and it automatically
469:57 - passes it as an argument to the function
469:59 - it calls in our case animate i can
470:02 - assign it a variable name here i will
470:04 - call it timestamp for example
470:06 - so this timestamp is also generated by
470:09 - request animation frame every time it
470:11 - serves a new animation frame every time
470:14 - it loops i will use it to calculate so
470:16 - called delta time
470:18 - delta time is the difference in
470:19 - milliseconds between the timestamp from
470:21 - this animation loop that was passed here
470:24 - and the timestamp from the previous loop
470:27 - it will give us the value of
470:28 - milliseconds for how long each frame
470:30 - stays on the screen before it gets
470:32 - redrawn
470:34 - last time we'll always hold the value of
470:36 - the timestamp from the previous loop so
470:38 - when we used it to calculate delta time
470:41 - we override the last time with the value
470:43 - of timestamp from this loop so that it
470:46 - can be used to calculate delta time in
470:48 - the next loop
470:49 - this might be a bit complicated to
470:51 - understand at first but don't worry it
470:53 - will make more sense as you use it more
470:54 - often for this to work timestamp gets
470:57 - auto-generated only when it's called by
470:59 - request animation frame so for the very
471:01 - first initial call of animate i have to
471:04 - pass it some value for timestamp i will
471:06 - pass it zero
471:09 - i console delta time and i can see that
471:12 - it's around 16.6 milliseconds which is
471:15 - around 1000 milliseconds divided by 60.
471:18 - my frame rate is 60 frames per second
471:20 - perfect yours should be similar the
471:23 - value of delta time calculated this way
471:25 - depends on the power of your computer
471:27 - and on the refresh rate of your screen
471:29 - so as the animation loop runs we are
471:31 - recalculating delta time over and over
471:34 - every time we calculate it we pass it
471:36 - the game update method
471:38 - up here on line 17 i make sure update
471:41 - method expects that argument
471:43 - i want the delta time value to be used
471:45 - inside player class so i pass it along
471:47 - to playerupdate method as the second
471:49 - argument here inside player.js we make
471:52 - sure that it's expected
471:55 - so now the player class has access to
471:57 - delta time value we know how many
472:00 - milliseconds it takes to serve the next
472:02 - frame we can use that value to adjust
472:04 - sprite animation speed for example we
472:07 - can say only serve the next horizontal
472:09 - frame in the sprite sheet every 50
472:10 - milliseconds or something like that we
472:12 - can get complete control over that frame
472:15 - rate it's simple let me show you how
472:17 - this particular dock sprite sheet works
472:19 - the best when it's been animated at 20
472:21 - frames per second i will need a number
472:23 - of milliseconds for how long each frame
472:25 - should stay on the screen if the frame
472:27 - rate is 20 frames per second one frame
472:30 - should stay for a thousand milliseconds
472:32 - divided by this dot fps divided by 20.
472:36 - frame timer will cycle between zero and
472:39 - frame interval increasing by delta time
472:41 - for each frame every time it reaches the
472:43 - interval it will trigger the next frame
472:46 - and it will reset we will handle that
472:48 - logic here
472:49 - if this frame timer which starts at 0 is
472:52 - more than frame interval
472:56 - set frame timer back to 0 so it can
472:58 - count again
473:00 - when that happens also serve the next
473:02 - frame x horizontal frame in the sprite
473:05 - sheet
473:06 - else keep increasing frame timer by
473:08 - delta time until we reach that frame
473:10 - interval value
473:12 - perfect now you know how to control fps
473:14 - in the game the sprite sheet of our dock
473:16 - is animating at 20 frames per second you
473:19 - can see it's blinking it's because we
473:21 - are animating this empty frame here for
473:23 - sitting animation max frame isn't 5 so i
473:26 - remove this value when we enter sit in
473:29 - state we set max frame on player class
473:31 - to 4 we count from 0.
473:34 - when max frame is 4 we are not seeing
473:37 - the whole running animation so i set max
473:39 - frame inside running state to 6.
473:42 - i will also swap max frame and frame y
473:45 - to prevent occasional blinking if we
473:47 - swap states too fast
473:49 - in jumping max frame is 6 and falling is
473:52 - also 6.
473:53 - now we are correctly animating each
473:55 - state do you see how it's easier to keep
473:57 - the code organized when we separated
473:59 - each state into its own class
474:01 - occasionally we can get a situation
474:02 - where we swap state and frame x is
474:04 - currently too high and that row doesn't
474:07 - have that many frames so we get a quick
474:09 - blink to prevent that from happening
474:12 - every time we enter a new state we set
474:14 - frame x back to 0 before we swap to a
474:16 - different vertical sprite row with frame
474:19 - y
474:19 - it's just a small thing
474:24 - we have complete control of fps how fast
474:26 - we serve frames in player sprite sheet
474:29 - i can come here and set it to 5. the
474:31 - great thing is that the player still
474:33 - moves at 60 frames per second but the
474:35 - sprites are animating at 5 frames per
474:38 - second
474:39 - we can control these two things
474:40 - separately
474:42 - it would be very bad if controls reacted
474:44 - so slowly but maybe you have a sprite
474:46 - sheet in your game that was designed for
474:47 - lower fps our sprite sheets were
474:49 - designed for speed around 20 fps
474:53 - depending on what art assets you are
474:54 - using for your game level you might not
474:56 - want the player to be standing all the
474:58 - way at the bottom of the game area
475:00 - sometimes you need to adjust this value
475:02 - today i will give you all art assets to
475:04 - use so i know we will need to create
475:06 - some margin on the bottom that margin
475:08 - will have to be considered in more than
475:10 - one place around the code base so let's
475:12 - put it in the main game class so it's
475:13 - easy to access i want the ground level
475:16 - to be 50 pixels from the bottom edge of
475:18 - canvas this dot ground margin is 50.
475:21 - inside player gs we have access to it
475:24 - through this dot game reference so the
475:25 - initial vertical coordinate will be
475:27 - height of the game minus the height of
475:29 - the player minus ground margin like this
475:33 - this will not work because here i am
475:35 - creating player before i declare that
475:37 - class property i need to put it up here
475:40 - so it's available at the point when the
475:42 - player is created that worked i also
475:45 - need to adjust this on ground check
475:48 - because being on ground now also
475:50 - involves this ground margin
475:52 - perfect you can adjust ground margin
475:54 - value to match the environment in which
475:57 - your character is currently moving in
475:59 - our environment will be an abandoned
476:01 - monochrome city you can download all art
476:04 - assets in the video description if you
476:06 - are a beginner i suggest you use my art
476:08 - assigns first and get the game to work
476:11 - before you start adjusting it to your
476:13 - own version it will save you a lot of
476:15 - headache if you encounter some
476:16 - unexpected challenges because you can
476:18 - just look at my code to fix it
476:20 - we will be animating a parallax
476:22 - multi-layered background i made a
476:24 - special episode about this if you want
476:26 - to go more in depth at a
476:27 - beginner-friendly pace we build a small
476:29 - standalone project in there showing all
476:31 - the concepts and alternative approaches
476:34 - let's use the quickest version here
476:36 - so we have a new file i called
476:38 - background.js i will need two classes
476:41 - here helper layer class that will handle
476:43 - logic for each state separately and main
476:46 - wrapper class i will call for example
476:49 - background that will be exported and
476:51 - animated from the main game class it's
476:54 - actually quite simple let me show you
476:56 - layer class will need access to the game
476:58 - object because we need to be constantly
477:00 - aware of width and height of the
477:02 - available game area we will also need
477:04 - the width and height of the actual
477:06 - background image
477:07 - we will need speed modifier argument
477:09 - because each layer will move at a
477:11 - different speed but relative to the
477:13 - current game speed the last argument
477:15 - will be an image each layer will have a
477:17 - different image all five images are
477:19 - available to download in the video
477:21 - description i might also include some
477:23 - alternative art assets in there for
477:25 - experiments later as usual we convert
477:28 - the arguments that are passed to layer
477:30 - class constructor into class properties
477:33 - each layer will also need x and y
477:35 - position update method to move it and
477:37 - draw method to draw it on canvas you
477:39 - know how it goes now i try to keep
477:42 - similar code structure across all
477:43 - classes for clarity i could also name
477:45 - these methods something else if i wanted
477:47 - to the background images we used today
477:50 - are seamless which means that when they
477:52 - are scrolling from left to right
477:53 - continuously we can't see where they end
477:56 - and where they begin there is a small
477:58 - simple trick to create an illusion of
478:00 - endless background in a side scroller
478:02 - game and we are about to learn it right
478:04 - now click like if you are getting any
478:06 - value today we will be updating
478:08 - horizontal x coordinate vertical y
478:10 - coordinate will always be zero
478:12 - if this dot x is less than minus its
478:15 - entire width which means it has scrolled
478:17 - all the way behind the left edge of the
478:19 - game area and now is hidden reset it
478:22 - back to 0 so it can scroll again
478:25 - else keep decreasing x by the current
478:27 - game speed times speed modifier because
478:30 - i want each layer to move at a slightly
478:33 - different speed for parallax effect
478:36 - gamespeed doesn't actually exist yet so
478:38 - i declare it here on line 15 inside main
478:40 - js let's set it to 3 pixels per frame
478:43 - for example draw method will need
478:45 - context as an argument to specify which
478:48 - canvas element we want to draw on
478:50 - we call built-in canvas a draw image
478:52 - method again this time we don't need the
478:54 - longest version with nine arguments for
478:56 - backgrounds we just need to pass it five
478:59 - arguments image we want to draw
479:01 - x and y where to draw it and width and
479:04 - height of that image
479:06 - so this is a helper class that will
479:08 - handle logic for each individual layer
479:10 - our parallax background will have five
479:12 - layers we create and combine them
479:15 - together in another class i call for
479:17 - example background
479:18 - and i will be exporting that class
479:21 - it will need access to the main game
479:22 - class because we need its width and
479:24 - height and gamespeed properties i'm
479:26 - providing new images of a specific size
479:28 - for this project
479:30 - the width of each layer image is
479:32 - 1667 pixels and height is set to 500
479:36 - pixels i made those images the exact
479:38 - size we will draw on canvas for
479:40 - performance optimization reasons you can
479:42 - also use larger images and you can scale
479:44 - them down with code but that will take
479:46 - more computing power and it can affect
479:49 - the fps of your game let's bring all 5
479:51 - images for our layers into the project
479:54 - this dot layer 5 image is equal to layer
479:57 - 5.
479:58 - if you downloaded the project images and
480:00 - place them inside your assets folder you
480:03 - can go ahead and inside index.html bring
480:06 - them into the project image element with
480:08 - an id of layer 5
480:10 - and source assets slash layer
480:13 - 5 dot png
480:15 - i also bring layer 1 2 3 4 5 like this
480:20 - in style css i give all of them display
480:23 - none we don't want to draw the actual
480:25 - image elements on the website we want to
480:27 - draw them on canvas as i said before
480:29 - javascript automatically creates
480:31 - references to all elements with an id in
480:34 - the global namespace so i can just pull
480:36 - the images in using its auto-generated
480:38 - variable name like this it would work
480:40 - like this but i noticed more people are
480:42 - comfortable using get element by id in
480:45 - here so i will do that we will also need
480:47 - an array that will hold all background
480:49 - layers so i created here
480:51 - and here inside background class
480:53 - constructor i will create an instance of
480:55 - layer class from line 1. i call it for
480:58 - example this dot layer 1 and it will be
481:01 - equal to new layer
481:03 - you can see it expects 5 arguments so i
481:05 - pass it this dot game this dot width
481:08 - distort height speed modifier will be 1
481:10 - for now and the image will be this.layer
481:14 - 5 image from line 25.
481:17 - now we have one instance of our layer
481:19 - class let's put it inside background
481:21 - layers array
481:22 - i give it update method and inside i
481:25 - take that background layers array and i
481:28 - call for each array method on it for
481:30 - each layer object in the array i call
481:33 - its associated update method
481:36 - i also do the same for draw method
481:41 - and i pass it context because we know it
481:43 - expects it up here on line 15.
481:46 - let's see if it works i import the new
481:48 - background class up here in main.js
481:55 - i instantiate it inside game class
481:57 - constructor and i pass it this keyword
481:59 - as a reference to the entire game object
482:02 - because i know it expects it
482:04 - here i have my background now so i can
482:07 - call its update method
482:10 - i get an error we will fix that in a
482:12 - second i will also call draw method on
482:14 - the background and i call it before i
482:16 - draw the player because i want the
482:18 - background to be behind the player and i
482:21 - pass it context
482:22 - so we have an error somewhere inside our
482:24 - background class
482:27 - the first typo i made here probably
482:29 - already noticed i need to use this dot
482:31 - here to correctly point to the instance
482:33 - of layer class
482:36 - now we get draw image error so i know
482:38 - something is wrong with the way i'm
482:40 - linking my image
482:42 - if i check here i can see i misspelled
482:43 - the name it's supposed to say this dot
482:46 - layer 5 image nice we are animating our
482:48 - background layer i can adjust ground
482:51 - margin to move the player a bit up to
482:53 - match the background artwork
482:55 - the trick to create seamlessly scrolling
482:57 - backgrounds is to draw the same image
482:59 - twice next to each other so one at the
483:02 - position x and the other at the position
483:05 - x plus this dot with like this
483:07 - i give it additional plus 20 so that we
483:09 - can see where the second one starts
483:12 - here
483:13 - so what is happening here we have two
483:15 - identical images scrolling side by side
483:19 - when the main image one scrolls all the
483:21 - way off screen we quickly reset it so
483:24 - that it can scroll again image 2 is
483:26 - never fully visible it's just there to
483:28 - fill the left gap before the first image
483:30 - has a chance to reset i hope this visual
483:32 - makes it clear what's happening
483:34 - and now you know the secret of endlessly
483:37 - scrolling seamless backgrounds it's easy
483:39 - let's make them parallax which means it
483:41 - has multiple layers that move in
483:43 - slightly different speeds to create an
483:45 - illusion of depth of distance
483:48 - i already brought those images into our
483:50 - project in index html so i just turned
483:52 - them into class properties here
483:55 - i instantiate each layer class with its
483:57 - associated image
484:02 - i put all those layer objects inside
484:04 - this dot background layers array so we
484:07 - can cycle through all of them
484:08 - at once using for each method inside
484:11 - update
484:12 - and draw now we are animating all layers
484:15 - at the same speed i can give them
484:17 - different modifiers layer 1 is just gray
484:19 - sky no need to move it at all so its
484:22 - speed will be 0. the speed of layer 2
484:24 - will be game speed times 0.2
484:28 - layer 3 is game speed x 0.4
484:31 - layer 4 will move at 80 percent of the
484:34 - current game speed and layer 1 will move
484:36 - at the same speed as the actual current
484:38 - game speed perfect
484:40 - you can see that if i change the
484:42 - modifier even higher it gives us faster
484:44 - scrolling
484:46 - since we connected everything to the
484:47 - current game speed i can change the
484:49 - scrolling speed of the game when the
484:51 - player switches to a different state
484:53 - maybe i want the game to stop scrolling
484:55 - when the player sits down and i want
484:57 - double scrolling speed when the player
484:59 - does a special attack or a role
485:01 - there are many ways how we can structure
485:03 - the code at this point i can either
485:05 - bring a reference to the main game
485:07 - object into player states so that we can
485:09 - manipulate game speed property from
485:11 - there or i can for example do it from
485:13 - within set state method on player class
485:16 - because from there we already have
485:18 - access to game speed
485:19 - i will give set state a second argument
485:22 - called speed inside i set speed property
485:25 - on game object to the speed value passed
485:28 - as an argument
485:29 - at first the speed of the game is 3
485:31 - pixels per frame since we start in the
485:34 - sitting state the initial game speed
485:35 - should be zero
485:37 - in player set state whenever i set state
485:40 - i will also set game speed i might
485:42 - refactor this later maybe it's not the
485:44 - best solution but it should work let's
485:46 - see when we are running game speed will
485:48 - be one
485:49 - in game speed 0
485:51 - jump in game speed is 1 falling also 1
485:56 - run in 1
485:58 - i save all unsaved changes in all my
486:01 - files now the game stops scrolling when
486:03 - we sit and it starts scrolling again
486:05 - when we start moving we can refactor
486:08 - this to make this code a bit better on
486:10 - the game class i create a new property
486:12 - called this.max speed and i set it to 3.
486:16 - i set this dot speed to 0 at first
486:19 - inside set state we set the current
486:21 - speed to max speed
486:24 - times the speed that was passed to set
486:26 - state that way i can adjust the actual
486:29 - game speed by adjusting just the max
486:31 - speed property on the main game class
486:33 - rather than adjusting the values we
486:35 - passed the set state in all those places
486:38 - in playerstate.js
486:40 - now we have quite a lot of logic going
486:41 - on if you are a beginner well done you
486:43 - should be really proud of yourself if
486:45 - you managed to follow along this was the
486:47 - most complicated episode in this entire
486:49 - project the rest will be relatively easy
486:51 - when you understand the tips and tricks
486:52 - i'm about to reveal it's important that
486:55 - player feels like they have control over
486:56 - the character quick responsive controls
486:59 - add a lot towards positive user
487:01 - experience
487:02 - we are building a fast-paced animated 2d
487:05 - game with plain vanilla javascript and
487:07 - html canvas element we applied state
487:09 - design pattern to animate our player we
487:12 - have endlessly scrolling parallax
487:13 - backgrounds where scrolling speed reacts
487:16 - to player movement today we will learn
487:18 - how to make our game more fun by adding
487:20 - three very different enemy types are you
487:22 - ready to take our dog for an adventure
487:24 - and help it find its way home while
487:26 - avoiding enemies and creatures of the
487:28 - dark let's go
487:30 - i create a new file called enemies.js
487:33 - and inside we declare a custom
487:34 - javascript class i call for example
487:37 - enemy
487:38 - i will have a constructor and inside i
487:40 - declare this dot frame x which will
487:42 - handle horizontal sprite sheet
487:44 - navigation and frame y will navigate in
487:46 - sprite sheet vertically the sprite
487:48 - sheets we will be using are optimized
487:50 - for 20 frames per second so we will
487:52 - control them with timestamps and delta
487:54 - time again so three helper variables fps
487:58 - frame interval and frame timer
488:01 - it will work exactly the same as it did
488:03 - in player class we will also need update
488:06 - method to move enemies around and draw
488:08 - method to actually draw their sprite
488:10 - sheets
488:11 - i want to create multiple different
488:12 - enemy types to keep our code organized
488:15 - and easy to navigate in we will use
488:17 - javascript sub glassine which means we
488:19 - will have a parent anime class that will
488:22 - define properties and methods shared
488:24 - between all enemy types and we will
488:26 - extend that parent class into multiple
488:29 - different subclasses each subclass will
488:31 - have properties and methods behaviors
488:33 - that are specific just for that enemy
488:35 - type
488:37 - so anime is so-called parent class also
488:40 - called a super class and we are using
488:42 - this special extends keyword to create
488:45 - three child classes also called
488:47 - subglasses javascript actually doesn't
488:49 - have classes this is just syntactical
488:51 - sugar modern cleaned and simplified
488:54 - javascript syntax behind the scenes this
488:56 - code is just setting up prototype chains
488:59 - using javascript inheritance it just
489:01 - looks cleaner and easier to navigate in
489:03 - if you write your code this way so we
489:05 - have a parent anime class and three
489:08 - child classes called flying enemy ground
489:10 - enemy and climbing enemy all three child
489:13 - classes are using extends keyword
489:16 - pointing towards their parent anime
489:17 - class this will automatically set up
489:20 - prototype chain behind the scenes and
489:22 - all these classes will have access to
489:24 - properties on their parent class and
489:26 - also to this update and draw method that
489:29 - way we can avoid code repetition and we
489:31 - don't have to re-declare methods and
489:32 - properties that are shared across all
489:34 - enemy types inside each subclass we will
489:37 - only define what's unique about them i
489:40 - will show you exactly how this works as
489:41 - we create three unique enemy types with
489:44 - very different behaviors and movement
489:46 - click the like if you are getting any
489:47 - value let's start by bringing images
489:50 - into our project in the video
489:51 - description i will give you sprite
489:53 - sheets for many different enemy types
489:55 - for now we will use just three of them
489:57 - if you are a beginner you should maybe
489:59 - use the same ones i'm using and when you
490:01 - have a fully working code base you can
490:02 - play with it and use your own custom
490:04 - sprite sheets
490:06 - we will use enemyfly enemyplant and this
490:09 - big spider i will hide images with css
490:12 - because we want to draw them with
490:14 - javascript on canvas
490:16 - there is one more thing we have to
490:17 - understand when extending javascript
490:19 - classes there is a special keyword
490:21 - called super it's used in two different
490:23 - ways because we can extend code from
490:25 - parent class constructor or we can
490:28 - extend a method from the parent class i
490:30 - will show you how to do both as we
490:31 - create different enemy types with
490:33 - different behaviors i have flying enemy
490:36 - subclass that extends this enemy super
490:38 - class when i create a new flying enemy i
490:41 - want to run all this code from parent
490:43 - class constructor and then i want to add
490:45 - some additional properties that are
490:47 - specific only to the flying enemy
490:50 - i do that by first calling super like
490:52 - this this will automatically run all the
490:54 - code from here
490:56 - while extending classes i can only use
490:58 - this keyword after i used super if i use
491:01 - this keyword before super i will get an
491:03 - error flying enemies will need access to
491:06 - the entire game object because they need
491:08 - to be aware of game area width and
491:09 - height so that they know when they are
491:11 - off screen i will pass game as an
491:13 - argument to the constructor here and i
491:16 - will convert it into a class property as
491:18 - usual
491:19 - each enemy type will also need width and
491:21 - height but because each enemy type has a
491:23 - different size i couldn't put these
491:25 - values on the parent class width and
491:27 - height will be declared here i look at
491:29 - my fly sprite sheet and i can see that
491:31 - the width of a single frame is 60 pixels
491:34 - and the height is 44 pixels
491:37 - each enemy will also need starting x and
491:39 - y coordinates flying anime will start at
491:42 - a different position than a ground nma
491:44 - so x and y properties will also have to
491:46 - be on the child class not on the parent
491:48 - class
491:49 - speed x will be horizontal speed and max
491:51 - frame on our fly sprite sheet is 5.
491:55 - by the way all my flying enemies will be
491:57 - flies for now but i could also have
491:59 - multiple flying enemy types i can have
492:01 - flying anime class that extends parent
492:03 - enemy class and i can have a bird fly
492:06 - and ghost classes that extend flying
492:08 - enemy class we can go down multiple
492:10 - levels if we want to in that scenario
492:13 - flying enemy class would only have
492:14 - properties and methods shared between
492:16 - all enemy flyers and things like width
492:19 - and height speed x or max frame would be
492:21 - declared separately on each subclass
492:23 - because each anime will have different
492:25 - sprite sheet we are keeping our code
492:27 - modular and well organized so that it's
492:29 - easy to make these changes later if we
492:31 - want to inside update method on the
492:33 - parent class we will handle movement for
492:35 - every animation frame i want the
492:37 - horizontal x-coordinate of the enemy to
492:40 - be increased by its speed x property
492:43 - i will do the same for vertical
492:44 - y-coordinate and speed y property
492:48 - we will also handle cycling through
492:50 - sprite frames here it will work exactly
492:52 - the same as it does for our player
492:54 - sprite sheet
492:55 - update method will have access to delta
492:57 - time difference in milliseconds between
492:59 - the previous and the current animation
493:01 - frame
493:02 - if frame timer from line 7 is more than
493:05 - frame interval from line 6 we reset
493:07 - frame timer back to 0 so it can count
493:10 - again for the next frame and we serve
493:12 - the next horizontal frame in the sprite
493:14 - sheet
493:16 - or if we are at the last horizontal
493:18 - frame we reset back to frame x 0. else
493:21 - meaning frame timer is not yet higher
493:23 - than frame interval we keep increasing
493:25 - frame timer by delta time until it gets
493:28 - there
493:29 - draw method will expect context as an
493:31 - argument inside we will draw an enemy
493:33 - spreadsheet using canvas drawimage
493:35 - method it will need 9 arguments the
493:38 - first argument is the image we want to
493:40 - draw i will hold the reference to that
493:42 - image in this.image property since each
493:45 - anime type will have a different sprite
493:46 - sheet it needs to be placed here on
493:49 - flying enemy class i use get element by
493:51 - id and i will point it towards this img
493:54 - element with an id of anime underscore
493:56 - fly from line 19 in index html so draw
494:00 - image expects nine arguments in this
494:02 - case the image we want to draw source x
494:05 - source y source width and source height
494:07 - of the rectangle we want to crop out
494:10 - from the source sprite sheet one frame
494:12 - and destination x destination y
494:15 - destination width and destination height
494:17 - to specify where to place that image on
494:19 - destination canvas it will work exactly
494:21 - the same as it does with player we
494:23 - already explained before how frame x
494:25 - multiplied by the width of a single
494:27 - frame travels spreadsheet horizontally
494:30 - source y argument will always be zero
494:32 - because enemy sprites will only have one
494:34 - row so we have image to draw these four
494:37 - values define what to crop out these
494:40 - four values define where to place that
494:42 - cropped out image on canvas as i said
494:44 - before we can extend parent class
494:46 - constructor using super keyword we can
494:49 - also extend a method from a parent class
494:51 - in this case i want to have update
494:53 - method on flying anime type i wanted to
494:56 - first run all the code from update
494:57 - method on the parent class and then i
495:00 - want to add a little bit of code that
495:01 - will be specific only for flying enemies
495:04 - update method will expect delta time as
495:06 - an argument i will call update method on
495:09 - the parent class from line 9 by saying
495:11 - super referring to its super class dot
495:14 - update and i pass this delta time along
495:17 - because it's expected here on line 9.
495:19 - doing that will first run all the code
495:21 - between lines 9 and 19 that code will be
495:24 - shared for all enemy types
495:26 - after i run that code i will add a
495:28 - little bit of code that will be specific
495:30 - only for flyers i can make them do so
495:33 - many different things here i made a
495:35 - special episode focusing only on enemy
495:37 - movement patterns before let's just pick
495:39 - one maybe i want vertical wavy movement
495:43 - before we do that let's actually add
495:45 - some enemies into the game to see how
495:46 - the movement changes
495:48 - let's make sure we are exporting all our
495:50 - child classes
495:54 - i imported them up here inside main.js
495:58 - i want to periodically run some code
496:00 - that will add enemies in a specific
496:02 - interval
496:03 - i will declare that code in a special
496:05 - method on game class i call it for
496:07 - example add enemy we will need some
496:09 - helper properties to build this
496:11 - functionality this dot enemies will be
496:13 - an array it will hold all currently
496:16 - active anime objects every time add
496:18 - enemy method runs it will take this
496:20 - array and it will use built-in
496:22 - javascript push method to push one new
496:24 - enemy in there push method adds one or
496:27 - more elements to the end of an array and
496:30 - returns the new length of the array we
496:32 - want to push one new flying enemy in
496:35 - there for now we are importing flying
496:37 - enemy class here from enemies.js and
496:40 - here i can see flying enemy class
496:42 - constructor expects game as an argument
496:45 - so
496:46 - down here in main.js i'm creating an
496:49 - instance of flying enemy class and i
496:51 - pass it this keyword as an argument
496:54 - referring to this main game object
496:57 - we will handle enemies here in sight
496:59 - update method on game class similar to
497:02 - how we use delta time to periodically
497:04 - serve the next frame in our sprite sheet
497:06 - we will have timer and interval helper
497:08 - variables to periodically add enemies
497:11 - into the game enemy timer will start at
497:13 - zero it will be increasing by delta time
497:16 - every time it reaches a value in enemy
497:18 - interval we will add one new enemy into
497:21 - the game and we will reset enemy timer
497:24 - back to zero let's say i want to add a
497:26 - new enemy every second so thousand
497:28 - milliseconds let's write that logic in
497:30 - code
497:31 - if enemy timer from line 23 is more than
497:34 - enemy interval from line 24 call this
497:37 - dot at nme custom method from line 38
497:43 - and also reset enemy timer back to zero
497:46 - so it can count again towards the next
497:48 - enemy time else keep increasing enemy
497:51 - timer by delta time until we reach enemy
497:53 - interval again
497:55 - let's put a console lock inside add
497:57 - anime to see if it's working
497:59 - i will console lock this.enemies array
498:01 - from line 22.
498:03 - nice you can see as the game runs every
498:06 - second one new flying enemy object is
498:09 - added into enemies array perfect so all
498:12 - our enemies are held inside this dot
498:14 - enemies array
498:16 - i will run through the array and i will
498:18 - trigger their update method to make sure
498:20 - they move around
498:21 - for each method execute a provided
498:23 - function once for each array element
498:26 - i will use fat arrow es6 syntax here in
498:29 - the callback function i just trigger
498:31 - update method on each enemy object and i
498:34 - pass it the delta time from here because
498:36 - i know it's expected there
498:40 - i will do the same thing inside the draw
498:42 - method i will cycle through all enemy
498:45 - objects and i will trigger their draw
498:46 - method i pass it context as an argument
498:50 - i don't see any enemies coming
498:52 - let's try to use minus equals here to
498:54 - make them move to the left
498:56 - still nothing i'm consoling enemies
498:59 - array so let's check the console i open
499:01 - up the array
499:03 - let's change the initial x and y
499:05 - coordinates to 50 50 now
499:07 - if i open the array again and i check
499:10 - one of my flying enemies i can see their
499:12 - vertical y coordinate is none not a
499:14 - number javascript doesn't know where to
499:16 - draw them vertically let's track the
499:18 - problem i define vertical y-coordinate
499:21 - correctly on line 33
499:23 - but as the game runs i'm increasing it
499:25 - by speed y property here on line 12.
499:28 - speed y doesn't exist so as a result we
499:30 - are breaking our code
499:32 - i will define vertical speed y property
499:34 - on my flying enemy class let's set it to
499:37 - zero
499:38 - nice we have enemy flies moving from
499:41 - right to left from the initial starting
499:43 - coordinates 50 50 as defined here
499:46 - i actually want them to start from the
499:48 - point just behind the right edge of
499:50 - available game area so the initial x
499:52 - coordinate will be this dot game from
499:55 - line 29 dot width
499:58 - nice
499:59 - i randomize vertical y coordinate to
500:01 - spread them around i want them to only
500:03 - move in the upper half of the game area
500:06 - so master random times
500:08 - this.game.height times 0.5
500:12 - in console you can see we have an
500:14 - endlessly increasing array as more and
500:16 - more enemies are being added i actually
500:18 - want them to be removed when they fly
500:20 - past the left edge of screen i will
500:22 - check if enemies are off screen in this
500:24 - area if horizontal coordinate of the
500:27 - enemy plus its width is less than zero
500:30 - meaning it's completely hidden behind
500:31 - the left edge set its marked for
500:33 - deletion property to true this property
500:36 - will be shared for all child classes so
500:38 - i can define it only once up here on the
500:41 - parent class
500:42 - initially i set it to false
500:45 - so we are adding new enemies
500:47 - they fly from right to left when they
500:49 - are hidden behind the left edge we are
500:51 - setting their marked for deletion
500:52 - property to true here inside update
500:55 - method on game class in the area where
500:57 - we handle enemies we are cycling through
501:00 - every object in enemies array triggering
501:02 - their update method
501:04 - at the same time i will also check if
501:06 - their marked for deletion is true and if
501:08 - it is we splice it out of the array
501:10 - removing it
501:12 - splice method needs two arguments in
501:14 - this case
501:15 - index of the element we want to remove
501:17 - from the array so index off this enemy
501:19 - with marked for deletion set to true and
501:22 - how many elements to remove at that
501:24 - index we want to remove only one element
501:28 - now i check in the console and i see
501:30 - that new enemies are being added and old
501:32 - enemies are being correctly removed
501:34 - perfect
501:36 - let's play with the movement a little
501:37 - bit i can do so many things here and
501:39 - there's a special episode about it i
501:41 - can't for example randomize their
501:43 - horizontal speed x value so that each
501:45 - enemy flies at a slightly different
501:47 - speed
501:49 - let's try a random value between 1 and 2
501:51 - pixels per frame
501:53 - i can also randomize their initial
501:55 - x-coordinate so that we get even more
501:57 - randomness in their spacing
502:02 - when the player starts running it
502:03 - becomes obvious we need to account for
502:05 - the current game speed when making
502:07 - enemies move
502:08 - up here on line 12 i just include game
502:11 - speed in horizontal position calculation
502:16 - i actually need to use plus here now
502:19 - when the player moves and when it stops
502:21 - moving the enemies are always positioned
502:23 - correctly in relation to our dynamically
502:25 - scrolling game world we made a lot of
502:27 - progress today if you are still
502:29 - following well done these are all
502:30 - fundamentals of 2d game development i
502:33 - hope you are getting some value out of
502:34 - this
502:35 - so the flies are moving in a straight
502:37 - line from right to left what if i want
502:40 - to give them a wavy up and down wobble
502:42 - as they move it's easy
502:44 - i will need two helper variables and
502:46 - these will be specific only for flying
502:48 - enemies so i declare them down here
502:50 - angle will start at 0 and we will be
502:52 - increasing it slowly and feeding it to
502:54 - mastered sine method which will map it
502:57 - along a sine wave
502:59 - it will be increasing by this custom va
503:01 - value velocity of angle and it will be a
503:04 - random value between 0.1 and 0.2
503:07 - inside update method on flying anime
503:10 - class i first trigger all the code from
503:12 - the parent anime class and i will add
503:14 - some extra custom code that will be
503:16 - specific only for flying enemies for
503:19 - every animation frame i will increase
503:21 - angle by va value
503:25 - and then i update vertical y coordinate
503:28 - by math.sine of this ever increasing
503:30 - angle value
503:31 - passing a slowly increasing angle to
503:33 - method sign will map positions of our
503:35 - enemies long sine wave we can also
503:38 - create a circular movement by using math
503:40 - cosine on horizontal x-coordinate for
503:43 - now let's leave it like this we have our
503:45 - flying enemy type perfect let's create a
503:47 - ground enemy it will be applied so it
503:49 - will have different behavior it will be
503:51 - much simpler to implement let me show
503:53 - you
503:54 - class ground anime extends enemy so
503:56 - again this class will automatically
503:58 - inherit everything from the parent anime
504:00 - class we declared up top the only
504:02 - properties we will declare here are the
504:04 - ones that are specific to ground enemies
504:07 - shared properties will be inherited
504:09 - automatically because of this extends
504:11 - keyword constructor will expect the game
504:14 - as an argument and we convert it to this
504:16 - dot game property
504:18 - the width of a single frame is 60 height
504:20 - is 87 pixels initial x is just behind
504:24 - the right edge of canvas so
504:26 - this.game.with we want the enemy to be
504:28 - sitting on the ground level of our game
504:30 - world so vertical y-coordinate will be
504:33 - game height minus height of this enemy
504:35 - minus ground margin
504:37 - image will point towards anime plant
504:39 - image from index html
504:44 - horizontal speed will be zero
504:47 - and vertical speed will be also zero
504:49 - this is a plant it won't move around
504:51 - sprite sheet is very simple it has only
504:53 - two frames max frame is one because we
504:55 - count from zero
504:57 - if i don't declare update and draw
504:58 - methods at all on ground enemy class
505:00 - javascript will automatically travel up
505:02 - the prototype chain and it will find
505:05 - update and draw method on the parent
505:06 - anime class
505:08 - in main.js inside add anime function we
505:10 - only want to be adding ground enemies
505:12 - when we are moving if we are sitting
505:14 - down we don't want the game to keep
505:16 - adding new ground enemies because they
505:18 - would just be accumulating off screen we
505:21 - only want to add a new enemy if game
505:23 - speed is more than zero when the game is
505:25 - scrolling
505:26 - and also i don't really want to add it
505:28 - every thousand milliseconds every time
505:30 - add anime method runs i only want there
505:32 - to be a 50 chance that we add one so
505:35 - math at random is less than 0.5
505:39 - master random code like this returns a
505:41 - random value between 0 and 1 so a value
505:44 - lower than 0.5 should occur on average
505:46 - 50 percent of the time so every time add
505:49 - enemy method runs we always add one
505:51 - flying enemy and if the game is
505:53 - scrolling and this 50 check is true we
505:56 - also add one new ground enemy
505:59 - i get an error which tells me i forgot
506:01 - to call super class constructor on my
506:03 - subclass easy to fix
506:06 - like this
506:13 - nice we have a ground enemy in our game
506:15 - i can see there is a small wobble
506:17 - between enemy planes and the ground
506:19 - texture i'm not really sure what's
506:20 - causing it now if you know let me know
506:22 - in the comments we will fix this later
506:24 - let's add a climbing enemy climbing
506:26 - anime will be a big spider suspended
506:28 - from a web i showed you how to extend
506:31 - update method to make our flies move in
506:33 - a different pattern i also showed you
506:35 - how it works when you don't need to
506:36 - declare any additional update and draw
506:38 - methods with the plant now i will show
506:41 - you how to extend the draw method and
506:42 - how to add some additional graphics in
506:45 - this case spiderwebs constructor will
506:47 - expect game as an argument we call super
506:50 - the trigger class constructor from the
506:52 - parent enemy class this.game is game as
506:54 - usual width of a single frame is 120
506:58 - height is 144 pixels the initial
507:01 - starting coordinate is behind the right
507:03 - edge of canvas so this.game.wav vertical
507:06 - y coordinate will be a random position
507:08 - in the top half of the available game
507:10 - area
507:11 - image will point to the big spider image
507:13 - we linked earlier in index html
507:15 - horizontal speed x will be zero our
507:18 - spiders will be moving up and down
507:20 - vertically vertical speed y will be
507:22 - either plus one or minus one depending
507:24 - on this math random check
507:28 - this is so called ternary operator we
507:30 - are using it as a simple one line if
507:32 - else statement if math at random is less
507:35 - than 0.5 which should be roughly in 50
507:38 - of cases set speed y to 1. else set it
507:42 - to -1 so if condition is true question
507:45 - mark return this else colon return this
507:49 - this will make sure some spiders are
507:50 - moving up some are moving down when they
507:52 - initially spawn in our game
507:55 - max frame of spider sprite sheet is 5.
508:01 - update method will take delta time as an
508:03 - argument it will first call update
508:05 - method on its parent anime class to run
508:08 - all the code from there
508:10 - we will also do the same thing for draw
508:12 - method like this
508:17 - here i'm checking if game speed is more
508:18 - than 0 and if random check is less than
508:21 - 0.5 and i'm adding a new ground enemy
508:25 - i'm going to add else if here and if
508:28 - this random check is false and at the
508:30 - same time if game speed is more than
508:32 - zero we will add one new climbing enemy
508:35 - into our game
508:37 - now every second we always get one fly
508:40 - and we get either one spider or one
508:43 - plant nice
508:45 - i'm extending update method on climbing
508:48 - enemy because i want to climb up and
508:50 - down when it's moving down and it
508:52 - reaches a bottom boundary we define here
508:54 - i want it to kinda bounce and start
508:56 - moving in the opposite direction upwards
508:59 - let's make it move upwards whenever it
509:01 - climbs all the way down and touches the
509:03 - ground level
509:05 - so if vertical y coordinate is more than
509:07 - game dot height minus height of this
509:09 - spider enemy minus ground margin set its
509:13 - vertical speed to its minus value so
509:15 - this.speed times -1
509:18 - also i want to set its marked for
509:19 - deletion to true if it climbs off screen
509:22 - vertically so
509:24 - if this dot y is less than minus height
509:27 - of the spider sprite sheet set it's
509:29 - marked for deletion to true
509:33 - this spider spawned moving up
509:35 - this one is moving down when it reaches
509:38 - ground it bounces and it starts moving
509:40 - back up perfect
509:42 - we are also extending a draw method so
509:44 - let's draw a spider web spiders don't
509:46 - fly they should be hanging from a spider
509:48 - web
509:49 - we are calling draw method on the parent
509:51 - anime class that will handle drawing of
509:53 - the actual spider sprite sheet and we
509:55 - will add some extra code here just to
509:57 - draw the spider web i want to create a
509:59 - line so i start by calling begin path
510:02 - move method will set the initial x and y
510:05 - coordinates of the line i give it
510:07 - coordinates 0 0 for now the top left
510:09 - corner of canvas
510:11 - line 2 will define the ending x and y
510:13 - coordinates so i pass it spider's
510:15 - current x position as x and 0 as
510:18 - vertical y now i can stroke my line
510:23 - i don't see any line right i need to use
510:25 - this dot y here to move it on screen
510:30 - and here's our spider web it works let's
510:33 - make it look better i wanted to start
510:35 - from this dot x and 0 so just above the
510:38 - spider
510:39 - nice so it goes from the top left corner
510:41 - of spider sprite sheet upwards i need to
510:44 - center it horizontally so plus the width
510:47 - of the spider divided by 2 and i
510:49 - increase y by 50 to actually touch the
510:52 - spider image
510:54 - almost there i just need to also offset
510:56 - the initial starting point of the line
510:58 - like this i'm happy with this if you are
511:01 - designing a game with multiple levels
511:03 - you can for example have a different
511:05 - flyer different ground enemy and
511:07 - different climbing enemy for each level
511:09 - so three enemy types like this could be
511:11 - enough depending on your game structure
511:13 - also it's possible to put many more
511:15 - enemy types into the game and mix them
511:17 - together it's up to you i gave you all
511:19 - the tools you need if you have any
511:21 - questions let me know we will learn how
511:23 - to handle collision detection next time
511:24 - we will also apply particle effects to
511:27 - give the player a fire trail and we will
511:29 - add two more states with unique
511:31 - animations for when the player is
511:33 - attacking and when it gets hit well done
511:35 - on completing the lesson see you in the
511:37 - next one
511:38 - we created a player we have our game
511:40 - world and we added dangerous creatures
511:43 - of the night it's time to add some
511:45 - interactions and special moves today we
511:47 - will learn an easy way how to handle
511:49 - collision detection and we will resolve
511:51 - collision between player and enemies in
511:53 - two different ways depending on the
511:55 - current player state if the player is
511:57 - rolling enemies are destroyed and we get
512:00 - score points in any other state it's the
512:02 - player who receives a hit we will also
512:04 - add dust particles and fire trail if you
512:06 - followed any of my other creative
512:08 - courses you can also use those animated
512:10 - trails and use them here like you see in
512:12 - this demo i like to combine game dev and
512:14 - creative coding with javascript and html
512:17 - canvas it's all the same set of
512:18 - techniques let's go
512:21 - we have player and enemies in our game
512:23 - we want them to be able to interact in
512:25 - different ways with each other let's
512:27 - apply collision detection first i want
512:29 - to draw a rectangle around the player
512:31 - and around each enemy to see their
512:33 - collision areas so called hitboxes i go
512:36 - to input js file and i delete these
512:38 - console logs i want our game to have a
512:41 - debug mode when i press letter d on my
512:43 - keyboard we enable debug mode and
512:45 - collision hitboxes will be drawn when we
512:47 - press the again we exit debug mode and
512:50 - hitboxes will be hidden it's very simple
512:52 - to implement in keydown event i create
512:54 - an else if statement if e.k is d set
512:58 - debug property on the main game object
513:00 - to its opposite value if it's currently
513:03 - true set it to false if it's false set
513:05 - it to
513:06 - true in main.js i created this.debug
513:10 - property on game class and initially i
513:13 - set it to true
513:15 - in draw method on playerclass before i
513:17 - draw the player's spritesheet i say if
513:19 - this.game.debug is true draw a rectangle
513:22 - around the player this rectangle will be
513:24 - exactly the size of player's hitbox so
513:27 - from this.xdist.y
513:29 - player's coordinates to player's width
513:31 - and height like this
513:33 - now i can go back to input js here we
513:36 - are toggling debug mode on and off by
513:38 - pressing letter d
513:40 - for this to work i need to bring a
513:41 - reference to the main game object here i
513:44 - pass gameobject as an argument to the
513:46 - class constructor and i convert it to a
513:48 - class property from here we can point to
513:51 - the game object and toggle debug mode on
513:53 - and off finally we know that input
513:56 - handler class expects game as an
513:58 - argument so here on the main game class
514:00 - i passed this as an argument now when i
514:04 - press letter d on my keyboard we are
514:06 - toggling debug mode on and off perfect i
514:09 - can also create hitboxes around enemies
514:11 - inside the draw method on anime class i
514:13 - say if this.game.debug is true stroke
514:16 - rectangle around the enemy
514:19 - like this
514:20 - this will work reference to the game
514:21 - object is not on the main parent enemy
514:23 - class but we have it down here on each
514:26 - enemy type separately
514:29 - our game now has a debug mode you can
514:31 - toggle it on and off by pressing d
514:33 - these hit boxes represent collision
514:35 - areas when the player hitbox touches any
514:37 - of the enemy hitboxes i want them to
514:40 - interact in some way we can have
514:42 - multiple different interactions today i
514:44 - will show you how to have two different
514:45 - interactions when the player collides
514:47 - with an enemy while in rolling state it
514:49 - will destroy that enemy and we get some
514:51 - score points if the player is not
514:53 - rolling it will get hit and it will stop
514:56 - its movement for a moment and play dizzy
514:58 - animation from our sprite sheet we will
515:00 - use a simple collision detection formula
515:02 - between two rectangles to check if
515:04 - player and enemies interact here inside
515:06 - the player class i create a new helper
515:08 - method i call for example check
515:11 - collisions inside we will cycle through
515:13 - enemies array that holds all currently
515:15 - active enemy objects and as we cycle
515:18 - through them one by one we will compare
515:20 - their x y width and height to the
515:22 - current x y width and height of the
515:24 - player object so this dot game dot
515:27 - enemies
515:28 - each and for each anime object i will
515:30 - run the following callback function
515:33 - we will have a simple if else statement
515:35 - if some conditions are met collision is
515:37 - detected else there is no collision
515:40 - to check if two rectangles collide which
515:42 - means they touch or they overlap we have
515:45 - to compare their x y width and height
515:48 - keep in mind that the way images our
515:50 - sprite sheets are drawn on canvas we go
515:52 - from their x and y coordinates from the
515:54 - top left corner of the image to their
515:55 - width and height like this
515:57 - so now player's current horizontal x
515:59 - position is here and vertical y position
516:02 - is here for example we need to check if
516:04 - x-coordinate of this enemy is less than
516:07 - x-coordinate of the player plus player
516:10 - with
516:11 - if this point is less or to the left on
516:14 - the horizontal x-axis from this point
516:17 - at the same time we check if
516:18 - x-coordinate of the enemy plus the width
516:21 - of the enemy is more than the current
516:23 - x-coordinate of the player if this point
516:26 - is to the right of this point
516:28 - if these two conditions are true we know
516:31 - that the player and enemy are colliding
516:33 - horizontally we still don't know if they
516:35 - collide because they could be far away
516:37 - from each other vertically we will need
516:39 - two more checks here we check if the
516:41 - enemy's current vertical y position is
516:43 - less than vertical position of the
516:44 - player plus player's height we check if
516:47 - this point is above this point and
516:50 - finally we check if enemy's y position
516:52 - plus its height is more than y position
516:55 - of the player if this point is below
516:57 - this point
516:59 - only if all four of these conditions are
517:01 - true player and enemy are colliding even
517:03 - if one of these is false this entire if
517:05 - statement will evaluate to false and we
517:08 - know there is no collision
517:10 - if we collide we will set marked for
517:12 - deletion property on that enemy object
517:14 - the true i will also add one more score
517:16 - point so this.game.score plus plus i
517:19 - save changes and in main js i need to
517:22 - create this dot score property and
517:24 - initially i set it to zero
517:28 - now i go back to player js i take our
517:31 - new check collisions method and i'll be
517:33 - constantly calling it over and over from
517:35 - up here inside the update method like
517:38 - this
517:41 - and we have interactions in our game
517:43 - whenever the player hitbox touches a
517:45 - hitbox of any enemy that enemy gets
517:47 - deleted perfect whenever we destroy an
517:50 - enemy we are also increasing our score
517:53 - but we can't see it yet let's create
517:55 - some ui elements i create a new file
517:57 - called uijs
517:59 - inside i create a custom class i call
518:01 - for example ui and i will be exporting
518:04 - it
518:05 - be careful about lowercase and uppercase
518:07 - letters with the word ui make sure you
518:09 - spell it the same across our code base
518:12 - constructor will need a reference to the
518:13 - main game object because that's where
518:15 - the current score value is stored i
518:17 - create a property called font size and i
518:20 - set it to 30 pixels for example font
518:23 - family will be helvetica you can also
518:25 - use any google fonts here just link them
518:27 - in index html and use their font family
518:29 - name here if you want to it will work
518:32 - this ui class will have just one method
518:34 - i call for example draw its job will be
518:36 - to draw all ui elements and game
518:38 - statuses that we need first i declare
518:41 - some basic settings context.font will be
518:43 - this dot font size plus pixels space
518:47 - plus this dot font family in this part
518:49 - we will declare code that's specific to
518:51 - drawing score up here some more global
518:54 - settings text align will be left
518:57 - and fill style for all fonts will be
519:00 - kept on the main game object in case we
519:02 - need to draw fonts from some other
519:03 - modules as well
519:05 - this.game.font color it doesn't exist
519:07 - yet so i declare it here online 27 in
519:10 - main.js file to draw score i call built
519:13 - in fill text method and i pass it some
519:16 - text we want to draw so score colon
519:18 - space plus this.game.score
519:21 - that's a variable from line 26 in
519:23 - main.js
519:25 - and i want it to be drawn at coordinates
519:27 - 2050.
519:29 - we are exporting our new ui class up
519:31 - here so we can import it to main.js like
519:34 - this
519:40 - i will instantiate ui class inside game
519:42 - class constructor as usual and i pass it
519:44 - the reference to the main game object so
519:46 - this keyword
519:49 - inside the draw method on game class i
519:51 - take this dot ui property that holds an
519:53 - instance of our new ui class be careful
519:56 - about capital letters here
519:58 - and i call it the draw method and i pass
520:00 - it context perfect we are drawing score
520:03 - and it's increasing as we collide with
520:05 - enemies so this is how i like to handle
520:07 - drawing game text and statuses if we
520:09 - want to display more information to the
520:11 - user we can just add more code inside
520:13 - the draw method on our new ui class we
520:16 - are keeping our code modular and
520:18 - organized today it's easy to expand it
520:20 - later
520:21 - i want to add more player states we will
520:23 - have two different attacks and a
520:25 - separate state that will play dizzy
520:26 - animation when the player gets hit by an
520:28 - enemy let's go ahead and add them up
520:31 - here inside player states jazz into our
520:34 - enum object that holds key value pairs
520:36 - and it assigns each state number a more
520:39 - human readable value
520:40 - we will have rolling state with index 4
520:43 - diving state with index 5 and hit state
520:46 - with index 6 for when the player gets
520:48 - hit
520:52 - i copy this entire code block and i
520:54 - rename it to rolling
520:56 - i will also put rolling in all caps here
520:59 - i check my sprite sheet and i can see
521:01 - that rolling animation is on the row 6
521:03 - counting from 0 so frame y is 6.
521:06 - i want player to start rolling when we
521:08 - press enter and i want it to keep
521:10 - rolling as long as enter key is pressed
521:13 - down inside handle input we deal with
521:15 - switching states we only want to switch
521:17 - player to a different state when enter
521:19 - is not pressed anymore so if input
521:22 - doesn't include enter and at the same
521:24 - time if player is currently on ground we
521:26 - can exit rolling state and switch the
521:28 - player into running state
521:32 - else if input doesn't include enter and
521:35 - player is not on ground if we stop
521:37 - drawing in the air switch into the
521:39 - falling state like this
521:41 - we have a rolling state now we can
521:44 - decide from which states we will allow
521:46 - the player to enter rolling in this case
521:48 - i will allow it from all states because
521:50 - player can start rolling anytime
521:52 - inside handle input method on sitting
521:54 - class i say else if input includes enter
521:58 - set state to rolling and pass it speed
522:01 - of 2. rolling will increase the
522:02 - scrolling speed of our game compared to
522:04 - the regular running speed
522:07 - i take this else statement and i paste
522:09 - it down here inside the running class we
522:12 - can also start rolling when we are
522:13 - running
522:16 - i do the same in jumping class we can
522:18 - also start rolling while we are in the
522:20 - middle of a jump for now i will not
522:22 - allow player to start rolling while it's
522:24 - falling let's see how that feels we can
522:26 - always add it later
522:28 - so now we have rolling with a value of 4
522:30 - up here inside our enum and we are
522:32 - exporting rolling class on line 94.
522:36 - on line 1 in player js i import rolling
522:39 - and i create an instance of it inside
522:42 - this.states array on line 21.
522:45 - i get an error it's because i didn't
522:47 - save changes i made to playerstate.js vs
522:50 - code editor indicates that you have
522:52 - unsaved changes in a file with this
522:53 - little icon here
522:55 - i go in i save it and now i can press
522:58 - enter and i can roll around nice work
523:01 - i can start rolling from running state
523:03 - from sitting state and from jumping
523:05 - state i'm testing my gameplay and i feel
523:07 - like i would like to start in while i'm
523:09 - rolling on the ground like this but the
523:11 - game won't allow me to do that
523:13 - i can't enter jump while rolling on the
523:15 - ground because we didn't write that
523:16 - behavior let's do it
523:18 - in handle input method on rolling class
523:20 - i say if input includes enter which
523:23 - means we are rolling and if input also
523:25 - includes arrow up at the same time
523:28 - remember that our input keys array can
523:30 - hold multiple keys at the same time if
523:32 - enter and arrow up are pressed at the
523:34 - same time and if we are rolling on the
523:36 - ground at that moment so this dot player
523:39 - on ground is true
523:41 - we will push player up in the negative
523:43 - direction on the vertical y axis this
523:46 - dot player velocity y minus equals 27
523:49 - now i can roll around and i can jump up
523:52 - and down like this this feels much
523:54 - better to play this is a superhero dog i
523:56 - want the controls and movement to feel
523:59 - good and quick this dog can roll and
524:01 - jump around freely and the controls are
524:03 - very
524:04 - precise time to add some particle
524:07 - effects we will have three different
524:08 - particle types in this game dust that
524:10 - comes from the ground at player's feet
524:12 - when it runs on solid ground blazing
524:14 - fire trail when the player is rolling
524:16 - and diving and a big splash of particles
524:19 - when we dive and stomp into the ground i
524:22 - create a new file i call for example
524:24 - particles.js inside we will have the
524:26 - main parent class called particle i will
524:28 - not be exporting it it will just contain
524:30 - properties and methods shared between
524:32 - all three particle types constructor
524:34 - will need a reference to the main game
524:36 - object marked for deletion will be false
524:39 - at first
524:40 - update method will also have some code
524:42 - shared between all particle types
524:44 - horizontal x-coordinate will decrease by
524:46 - the amount of speed x and the game speed
524:48 - like this
524:49 - vertical y coordinate will be affected
524:51 - by speed y property
524:54 - for every frame the size of each
524:56 - particle will decrease by 5
524:59 - when size is less than 0.5 pixels the
525:02 - particle is small enough and we will set
525:04 - its marked for deletion property to true
525:06 - values like speed x and size don't exist
525:09 - yet i didn't declare them on the main
525:11 - particle class because they will have
525:12 - different values for each particle type
525:14 - we need to make sure we define them on
525:16 - the child classes because if javascript
525:18 - can't find these properties when update
525:19 - method runs we will get an error
525:22 - so child class i call dust extends
525:24 - parent particle class we will be
525:26 - exporting it we will also have splash
525:29 - particles for when we hit the ground at
525:31 - high speed and fire particles for the
525:33 - attack animations i start with the dust
525:36 - class constructor will need a reference
525:38 - to the main game object and x and y
525:40 - coordinates because the location of the
525:42 - particle will depend on the player's
525:43 - current position we want them to appear
525:46 - under the player as it moves around i
525:48 - call super and pass this game along
525:50 - because it's expected up here this will
525:52 - trigger class constructor on the parent
525:54 - particle class activating all shared
525:56 - properties size of dust particles will
525:59 - be a random number between 10 and 20.
526:03 - x-coordinate will be x that is passed as
526:05 - an argument same goes for the
526:07 - y-coordinate horizontal speed x will be
526:10 - a random number between 0 and 1.
526:14 - vertical speed y is also a random number
526:16 - between 0 and 1.
526:20 - color will be black
526:22 - draw method will take context as an
526:24 - argument as usual i want to draw dust
526:26 - particles as circles so we start with
526:28 - begin path
526:32 - we create an arc add coordinates this
526:34 - dot x distort y
526:36 - with a radius of this dot size start
526:39 - angle will be zero and angle is mothered
526:41 - by times two so full circle
526:44 - we set fill style to this dot color and
526:47 - we fill the path with black color
526:49 - we are exporting dust so i will import
526:52 - it up here on line 1 in player states js
526:56 - since we are using state design pattern
526:58 - it makes sense we control particles from
527:00 - here as well because they will be
527:01 - closely tied to player states
527:03 - i have a problem now if i want to handle
527:05 - particles from here this way i need
527:08 - access to the main game object when i
527:10 - initially built this state management
527:12 - code i thought i would only need access
527:14 - to the player class but we need to go
527:15 - one level up and access the game object
527:18 - this is why it's good to plan your code
527:20 - bases well before you start writing the
527:22 - code i will have to do a little bit of
527:23 - refactoring here to make sure we have
527:25 - access to the main game class from
527:27 - within each individual player state
527:29 - class
527:30 - here on line 14 i pass the main state
527:32 - parent class a second argument called
527:35 - game and inside i convert it to class
527:38 - property this.game equals game
527:41 - i want to replace all references to the
527:43 - player object with references to the
527:45 - game object game object contains the
527:47 - player so i will still have access to
527:49 - the player object from there
527:52 - constructor on the sitting class will
527:53 - expect the game as an argument we delete
527:56 - this line with player
527:57 - i pass that game object reference along
528:00 - to the parent class constructor as a
528:01 - second argument because i know it's
528:03 - expected here on line 14. it will get
528:06 - converted to this.gameclass property
528:08 - now if i want to access player in these
528:10 - 5 places i need to say
528:12 - this.game.player in vs code you can
528:15 - highlight a portion of text and hold
528:17 - ctrl key down then whenever you tap
528:19 - letter d it will highlight another
528:21 - occurrence of that text using this you
528:23 - can select multiple lines at the same
528:25 - time i tab d four times to select all
528:28 - five occurrences of this text and that
528:30 - gives me multi-cursor selection i can
528:32 - use left and right arrows to move around
528:35 - and i just type game dot
528:40 - i do the same in the running class i
528:41 - pass it game
528:43 - i remove this player line and i pass
528:45 - game as the second argument to the
528:47 - superclass constructor then i select one
528:50 - two three four five six and i need
528:53 - this.game.player here in all these
528:55 - places
528:56 - i do the same in jumping class
528:58 - refactoring sorry i should have planned
529:00 - this part better we are almost done
529:03 - i replace all 9 occurrences of this dot
529:05 - player here with this dot the game dot
529:07 - player
529:11 - falling class doesn't have much code so
529:12 - this one is easy
529:22 - and rolling class is the last one we
529:23 - need to refactor
529:28 - one two three four five six seven eight
529:31 - nine
529:32 - and
529:33 - this.game.player
529:35 - if i save this it will break our code
529:37 - because our state classes are expecting
529:39 - game as an argument now so on line 21 in
529:43 - player.js we are currently passing this
529:45 - keyword which means player object i need
529:47 - to pass this.game from line 5 instead to
529:49 - all of them
529:58 - now we are getting some new errors and
530:00 - that's because i'm passing game object
530:01 - as an argument and immediately i'm
530:03 - triggering that state class and its
530:05 - enter method but at this point the game
530:07 - object is not yet completely loaded so
530:10 - the initial state is failing i need to
530:12 - cut these two lines of code and i only
530:14 - want to run them when the rest of the
530:16 - game object is ready so add the end here
530:20 - when everything is ready including game
530:21 - class player class and all state classes
530:24 - we take current state property on player
530:26 - class and we set it to states 0 sit in
530:30 - state and we trigger enter method on the
530:32 - sitting state
530:34 - we refactored our code and now
530:35 - everything is working again we are well
530:37 - positioned to start adding particles
530:39 - through our state classes
530:41 - we have a lot of console logs here i
530:43 - press ctrl f and i search for console
530:46 - i delete this one on line 61 in main.js
530:50 - and this one on line 65
530:54 - we also have a console lock on line 57
530:56 - in player js i delete it
530:58 - debugging is better with a clean console
531:01 - so we are exporting dust class here and
531:03 - we are importing it up here in player
531:05 - states js i will hold all currently
531:07 - active particles in an array on the main
531:10 - game object so i created here
531:12 - these two particles will be an empty
531:14 - array at first
531:16 - back to player stage gs i only want to
531:18 - add dust when the player is running so
531:20 - inside handle input method on running
531:22 - state that runs 60 times per second i
531:24 - will be pushing one new particle in
531:27 - every time it runs
531:30 - this.game.particles.push and i pass it
531:32 - new dust on line 14 in particles.js i
531:35 - can see that the dust class constructor
531:37 - expects game x and y as arguments so i
531:40 - pass it this dot game from line 16
531:44 - i will also be passing the current x and
531:46 - y coordinates of the player because i
531:48 - want the new particles to appear at
531:49 - player's current position
531:52 - i close some of these javascript files
531:54 - for now to keep our workplace clean
531:56 - inside update method on the game class
531:59 - after this block that handles enemies we
532:01 - write our code to handle particles on
532:03 - line 25 we have this dot particles array
532:06 - that holds all currently active particle
532:08 - objects we are pushing new dust
532:10 - particles in here from inside running
532:12 - state class
532:13 - i take that array and i call for each
532:16 - for each particle in the array i will
532:18 - call their update method
532:22 - if particle is small enough and its
532:24 - marked for deletion property has been
532:26 - set to true we call splice method to
532:28 - remove it splice method will need index
532:30 - of the particle we want to remove and
532:32 - how many elements to remove starting
532:34 - from that index for each method passes
532:36 - auto-generated index argument so i can
532:39 - just assign it to a variable name here i
532:41 - call it for example index and i pass it
532:43 - the splice to identify the particle to
532:45 - remove and i want to remove one element
532:48 - at this index so here we call update on
532:50 - all active particles and we delete old
532:53 - ones
532:54 - inside the draw method i will cycle
532:56 - through all the particles again and i
532:58 - will call draw method
532:59 - one optimization tip here would be not
533:01 - to cycle through the same array once in
533:03 - update and once in draw method i can for
533:05 - example have a utility handle particles
533:07 - function that does all of that there are
533:09 - many ways to refactor this code we might
533:11 - do it later for now this code will work
533:13 - well
533:14 - you can see we are drawing our dust
533:16 - particles from the top left corner of
533:18 - the player hitbox only when we are in a
533:20 - running state nice
533:22 - i will count lock this.particles array
533:24 - to check if old particles are being
533:26 - correctly removed we don't want to have
533:28 - an endlessly growing array in our
533:29 - project that would become a performance
533:31 - problem soon in console i can see that
533:34 - particles go up to 50 or 60 and when we
533:36 - stop running the array is getting
533:38 - smaller and smaller until it's empty
533:40 - again perfect i want the dust particles
533:42 - to come from a different point relative
533:44 - to the player
533:47 - i adjust horizontal x-coordinate by the
533:49 - half of player's width like this
533:56 - i will also adjust vertical y coordinate
533:58 - by player's height pushing the
533:59 - particle's initial coordinates down
534:01 - closer to the game level ground you can
534:03 - see how well this works in combination
534:05 - with state design pattern we are only
534:07 - adding new particles when in running
534:09 - state when players feet are moving and
534:11 - touching the ground
534:14 - i can go to my dust class and play with
534:16 - properties of the dust i can make the
534:18 - particles different shape or size here
534:20 - if i want to i can also give them a
534:22 - different color
534:23 - red blue
534:25 - it will all work
534:27 - i can also do a semi-transparent color
534:29 - using rgba color declaration like this
534:34 - i'm happy with this but feel free to
534:35 - play with the code and adjust these
534:37 - effects
534:38 - i came up with two different versions to
534:40 - animate fire for this game i showed you
534:42 - both versions this is the version with
534:44 - svg filters where we are blurring and
534:47 - sharpening particles to create this
534:48 - liquid smoke effect i use this a lot in
534:51 - my generative art videos you could
534:53 - actually look at any of my creative
534:54 - coding videos where we build trails and
534:56 - use that code to give your player a
534:58 - unique trail effect it will be
535:00 - compatible with everything today i will
535:02 - do something i haven't showed you how to
535:04 - do before i will use a particle image it
535:07 - will be this simple flame texture canvas
535:10 - is very good and efficient at drawing
535:12 - images drawing a rectangle or an image
535:14 - are often two most performance efficient
535:16 - options for an effect like this from my
535:18 - experience you can download the fire
535:21 - texture in the video description
535:23 - the texture is big i will probably make
535:25 - the image smaller before i give it to
535:27 - you for download you can also color
535:28 - shift the image in photoshop to create
535:30 - blue or red fire trail if it fits your
535:33 - level art assets i set its display to
535:36 - none with css we will use this image
535:38 - here for our fire class constructor will
535:41 - expect game x and y as arguments
535:45 - this.image will be this fire texture
535:47 - image i gave it an id of fire
535:51 - size will be a random value between 50
535:53 - and 150 pixels
535:56 - x will be passed as an argument and same
535:58 - goes for y
536:02 - horizontal speed will be 1 pixel per
536:04 - frame
536:05 - and vertical speed will also be 1 pixel
536:08 - we have update method on the parent
536:09 - particle class i will first call the
536:11 - code from here so update
536:16 - super update like this draw method will
536:19 - take context as an argument and it will
536:21 - call draw image
536:22 - i pass it this dot image from line 39
536:26 - this dot x this dot y this dot size as
536:29 - width and this dot size as a height
536:32 - nice so this is our fire class we are
536:34 - exporting it so i can import it on line
536:37 - 1 in player states js
536:40 - i can copy this line of code from
536:42 - running class that is adding a new dust
536:44 - particles i pasted inside handle input
536:47 - method on rolling class and instead of
536:49 - dust i instantiate the new fire class we
536:51 - just wrote
536:53 - now when i roll i'm getting a trail of
536:55 - fire i adjust these properties a bit
537:02 - before we fix the position of our fire
537:04 - trail let's make the individual fire
537:06 - texture images rotate i will need two
537:09 - helper variables called this.angle which
537:11 - will start at zero and this dot va
537:14 - velocity of angle it will be a random
537:16 - value between minus 0.1 and plus 0.1
537:22 - in a site update method i will increase
537:24 - angle by va for every animation frame
537:28 - we will be rotating so to make sure the
537:30 - rotations don't overflow to other
537:32 - elements and only affect this fire
537:34 - particle i will wrap this code between
537:36 - save and restore this will make sure all
537:39 - canvas settings i declare in between
537:41 - will only affect this one particle
537:43 - to rotate anything on canvas first we
537:45 - have to translate rotation center point
537:47 - from its default position at coordinate
537:49 - 0 0 in the top left corner of canvas
537:52 - over the center of the item we want to
537:54 - rotate so i will translate to this dot x
537:57 - and this dot y of this fire particle
537:59 - that particle is a rectangular image so
538:02 - i'm translating to its top left corner
538:04 - then i call build in rotate method that
538:06 - takes angle value in radians and it will
538:09 - rotate everything that's drawn after
538:11 - this call unless we restore canvas again
538:13 - to its original default state if i roll
538:16 - now we are getting a spiral of small
538:18 - fire particles in a big circle around
538:20 - the player it's because we are
538:21 - translating to this dot x this dot y and
538:23 - from that point we are drawing again to
538:25 - the distance of this dot x this dot y
538:28 - here i fixed that by setting this to 0 0
538:30 - because position of particle on canvas
538:32 - is already defined in translate method
538:35 - here
538:36 - translate method moves rotation center
538:38 - point and what is considered coordinate
538:41 - 0 0 on canvas to the coordinates we pass
538:43 - to it so because of this translate call
538:46 - for these particles coordinates 0 0 on
538:48 - canvas are here in this area i'm
538:51 - translating to the topless corner of
538:52 - each fire image of each particle
538:55 - rectangle i want to center it so i
538:57 - adjust this value by half of its width
539:00 - and this one by the half of its height
539:02 - canvas rotation can be difficult for
539:04 - beginners but we just covered all of it
539:06 - i have more detailed lessons on this
539:08 - topic but for now let's just move on
539:11 - i can increase the size of fire
539:13 - particles here on line 40.
539:16 - i can also give them some horizontal
539:18 - wobble using the same technique we used
539:20 - for flying enemies for each frame i
539:22 - increase x by a sine value of ever
539:24 - increasing angle and it will map
539:26 - horizontal x positions along an endless
539:29 - sine wave shape if you are a beginner
539:31 - all you have to understand about this is
539:32 - that if you pass math design and ever
539:35 - increase in angle value our angle is
539:37 - increasing here on line 50. it will mod
539:39 - positions along a wavy path if you look
539:42 - at the particles now there is some left
539:44 - right wavy movement
539:47 - i can also make the particles shrink
539:49 - slower by adjusting this value this will
539:51 - result in a longer fire trail as
539:53 - particles take longer to be small enough
539:55 - to be removed i can make the rotation
539:57 - faster or slower by adjusting this range
539:59 - of values
540:02 - i can increase particle size
540:04 - i can make them shrink faster
540:09 - in main.js i remove this console lock on
540:12 - line 53
540:14 - i want to make sure we don't get too
540:15 - many particles i want to have a property
540:17 - that will limit the maximum amount of
540:19 - particles we allow in our game so we can
540:21 - easily adjust that value if we need to
540:23 - so inside update method on the main game
540:25 - class
540:26 - in this section where we handle
540:28 - particles i say if the length of
540:29 - particles array is more than 50 i want
540:32 - to slice the array and remove everything
540:34 - from 50 upwards i do that by taking
540:36 - these particles and assigning it to the
540:39 - same array but sliced from index 0 to
540:42 - index 50. it will only allow the first
540:44 - 50 particles to be in this array
540:46 - anything over and it will get sliced
540:49 - away slice message returns a copy of an
540:51 - array with only a portion of elements
540:53 - from start index to end index we defined
540:56 - the original array will not be modified
540:58 - so that's why i'm overriding it like
541:00 - this because in this case i want to
541:02 - modify the original array
541:04 - so we have some hard-coded values
541:05 - repeated here and here let's replace
541:07 - them with a variable i call it for
541:10 - example this.max particles i declare it
541:13 - up here and i set it to 50.
541:17 - i can see it works because it slices
541:19 - particles from the array you see how
541:21 - they disappear and we are getting gaps
541:23 - in our particle trail i actually want to
541:25 - slice particles from the other side of
541:27 - the array i want to remove the old ones
541:29 - not the new ones i can change the
541:31 - arguments i pass the slice method or i
541:33 - can change how we push our dust and fire
541:36 - particles into particles array in player
541:38 - states js on line 104 instead of using
541:41 - push method which adds one more element
541:43 - to the end of the array i will use
541:45 - unshift built in array method instead
541:47 - unshift method adds one element to the
541:50 - beginning of an array so now when i'm
541:52 - slicing from index 0 to index 50 i keep
541:55 - those new particles and i'm removing old
541:57 - ones if their index exceeds the value
541:59 - stored in max particles variable i do
542:02 - the same thing on line 48 i will be
542:03 - unshifting dust particles adding them to
542:06 - the beginning of our particles array to
542:08 - check if everything works i will control
542:09 - lock distort particles from here it
542:12 - starts empty if we start rolling it
542:14 - fills with fire particles if we run it
542:17 - fills with dust particles it never
542:19 - exceeds 50 particle objects so our slice
542:21 - method is correctly limiting the length
542:23 - of the array nice
542:25 - i'm on a strong computer so i will set
542:26 - my maximum particle limit to 200 but you
542:29 - can keep it on a lower number if you
542:30 - want to it's up to you
542:32 - i will also delete this console look on
542:34 - line 57 to clean up congratulations on
542:36 - completing this lesson in the next part
542:38 - we will make our game look and feel
542:40 - better by adding more animation it will
542:42 - help the player to get more visual
542:43 - feedback to the events happening in the
542:45 - game i'll see you there
542:48 - hey creative coders in this episode we
542:50 - will finalize player abilities and
542:52 - particle effects we will animate
542:54 - collisions with a special sprite sheet
542:56 - and we will add win and loose condition
542:58 - based on game timer we will also clean
543:01 - up some loose ends in our code let's
543:02 - finish the base game and then we can
543:04 - talk about some optional bonus features
543:06 - havana
543:07 - i want to create a second attack this
543:10 - time it will be a crushing meteor attack
543:11 - from above player can only enter this
543:13 - state when it's in the air it's a
543:15 - perfect use case for state design
543:17 - pattern we have here in our code base
543:19 - when the player is running on the ground
543:21 - and we press down arrow key it sits down
543:23 - when the player is up in the air we
543:25 - press down arrow key it will do a
543:27 - crushing dive attack from above i copied
543:29 - the entire code block with the rolling
543:31 - state class and i call it dive in i also
543:34 - pass a string that says dive in in all
543:36 - caps to superclass constructor all the
543:39 - values inside entry method will stay the
543:41 - same because dive in uses the same
543:43 - sprite animation row as rolling we will
543:45 - also leave the same fire particles code
543:48 - because diving also leaves a fire trail
543:50 - while the player is in diving state it
543:53 - is just moving fast towards the ground
543:55 - when it hits the ground and this
543:57 - statement is true we switch player to
543:59 - the running state to keep the momentum
544:01 - going
544:02 - i can delete this entire else if
544:04 - statement
544:05 - and here i say else if input includes
544:08 - enter and player is on ground transition
544:10 - directly into rolling state it should
544:13 - make the transition animation connect
544:15 - better
544:16 - we have our diving state but there is
544:17 - currently no way to enter that state
544:19 - let's define rules for when it can
544:21 - happen we can enter dive in state while
544:24 - we are in a jumping state
544:27 - when we are jumping and we press arrow
544:29 - down we set state to dive in and game
544:32 - speed will be zero because we are moving
544:34 - directly down let's take full advantage
544:37 - of the fact that the scrolling speed of
544:38 - our game world is connected to player
544:40 - states we can also enter dive in state
544:43 - while falling so i just copied the same
544:45 - else if statement here and we can also
544:47 - dive while rolling
544:49 - let's test it and see i save my changes
544:52 - and the code breaks because we need to
544:54 - import and instantiate the new dive in
544:56 - class i import it on line 1 and i create
544:59 - an instance in this dot states array on
545:01 - line 21.
545:04 - it works
545:05 - i want to feel like we are slamming into
545:07 - the ground with a great power but right
545:08 - now the player hovers in the air for too
545:11 - long in enter method on diving state
545:13 - class i set velocity y to plus 15
545:16 - instantly giving the player a massive
545:17 - push towards the ground
545:20 - nice now it feels like there is some
545:22 - power behind that special move
545:24 - as i'm diving and hitting the ground
545:26 - player kinda gets stuck below the ground
545:28 - level let's fix that
545:30 - so here inside update method on player
545:32 - class we handle horizontal movement and
545:35 - horizontal boundaries here we handle
545:37 - vertical movement and vertical
545:39 - boundaries will be defined here let's
545:41 - keep ourselves organized i want to make
545:43 - sure that the player cannot get stuck
545:45 - below ground level like this so i will
545:48 - limit its vertical position
545:50 - if this dot y is more than the height of
545:52 - the game area minus the height of the
545:54 - player
545:56 - minus ground margin set player's
545:59 - vertical y position to game height minus
546:01 - player height minus ground margin like
546:04 - this
546:05 - now the player can never move to the
546:06 - space below this point below the level
546:09 - of ground texture in our game world
546:13 - we have one more particle class i called
546:15 - splash when the player does a meteor
546:17 - dive attack from above and it hits the
546:19 - ground i want it to do a flame explosion
546:21 - and i want the flames to splash in all
546:23 - directions to make that move look and
546:25 - feel very powerful
546:27 - constructor will need three arguments as
546:29 - usual game and x and y positions
546:32 - i trigger constructor on the parent
546:34 - super class and i pass the game along so
546:37 - this code will run
546:40 - size of the splash particle will be a
546:42 - random number between 10 and 200 pixels
546:46 - this dot x is x
546:48 - this dot y is y
546:50 - speed x will be a random number between
546:52 - -3 and plus 3 because i want them to
546:55 - splash in both directions horizontally
546:59 - speed y will be between 2 and 4 for
547:01 - example i want the particles to start
547:04 - moving up but as the gravity slowly
547:06 - grows stronger i want them to curve and
547:08 - start moving down similar principle we
547:10 - used for player jump in logic image will
547:13 - be the same one we are using for fire
547:14 - particle class
547:18 - update method will at first call update
547:20 - on the parent particle class as usual
547:23 - gravity from line 40 will be slowly
547:25 - increasing by 0.1 and this dot y will be
547:28 - increasing by the ever increasing
547:30 - gravity value to get that curved path
547:34 - draw method will just draw the fire
547:36 - image from line 41.
547:38 - we are exporting splash class so i
547:41 - import it online one in player states js
547:45 - i can't really create this particle
547:47 - explosion when we enter dive in state
547:49 - because at that point the player is
547:51 - still in the air i wanted to create it
547:53 - as we hit the ground so i could add exit
547:55 - state to all my states which would be an
547:57 - ideal location for this to happen given
548:00 - our code structure i can also create
548:02 - some small transitional state just for
548:03 - this or i can just do the simplest
548:06 - option and create the explosion in this
548:08 - else if statement on line 133 when
548:10 - player is in diving state and handle
548:13 - input method detects we touch the ground
548:15 - we set player state to run in and we
548:18 - create our splash particle i use unshift
548:20 - again to add one particle to the
548:22 - beginning of the array and i pass it
548:24 - game x and y position of the player
548:27 - one particle wouldn't be very impressive
548:29 - so i create a for loop here and i will
548:31 - run it 30 times we will create a splash
548:33 - of 30 particles
548:35 - i'm getting some errors
548:37 - it's here on line 1 in player stage js i
548:39 - misspelled my class name
548:43 - when i dive i get another error it just
548:45 - says that i forgot to pass context to
548:47 - draw method on splash class console
548:50 - errors are usually good at pointing us
548:51 - to the file and line of code where the
548:53 - problem is these two errors were easy to
548:55 - find and fixed thanks to my browser
548:57 - console now when we hit the ground we
548:59 - get a splash of particles i offset
549:01 - initial x coordinate maybe like this
549:06 - i also offset the y-coordinate
549:10 - i adjust the initial position values i
549:12 - pass to splash particle class
549:14 - constructor i'm kind of just playing
549:16 - with the values and offsetting them in
549:18 - random way because i want the particles
549:20 - to shrink in size which makes them move
549:22 - towards their top left corner i adjust
549:24 - this value
549:28 - there is a better way to deal with this
549:29 - but i think for the purposes of this
549:31 - class we can just do this quick hack it
549:33 - will look good enough
549:34 - and i just speed x like this
549:38 - this looks alright for now i think
549:40 - we get a nice impact animation when we
549:42 - hit the ground perfect
549:44 - i also want to have a player state that
549:46 - will play dizzy animation when we get
549:48 - hit by an enemy while we are not in a
549:50 - fireball state i call it hit
549:53 - i delete this line that adds fire
549:55 - particles i also deleted this
549:58 - i check my sprite sheet and i can see
549:59 - that max frame for this animation is 10.
550:02 - frame y is 4 and i delete this
550:06 - i will spell class name like this and
550:09 - i pass it hit here with this state class
550:11 - i will do something i haven't showed you
550:13 - before we can enter a state have it play
550:16 - its animation row once and when that
550:18 - animation has been played we
550:20 - automatically transfer to another state
550:22 - so the trigger for switching state will
550:24 - be animation frame this time
550:26 - so while we are in this hit state this
550:28 - animation row is playing
550:30 - i will wait until frame x is at position
550:33 - 10 and i check if player is on ground
550:35 - and i switch player back to running
550:40 - else if we are on the last frame on this
550:42 - animation row and if player is not on
550:45 - the ground we set state to fallen
550:48 - nice
550:49 - up here i can see that hit state has an
550:51 - index of six
550:54 - i import it into player.js module and i
550:56 - instantiate it as the item with an index
550:59 - of 6 inside this dot states array
551:02 - ideally i want to do all my state
551:04 - swapping from within player states js i
551:07 - could do it through a set of flags and
551:09 - flipping values around but since this
551:10 - class is beginner friendly i will do a
551:12 - simple thing and switch my state from
551:14 - here now
551:16 - i want to enter this new state when
551:18 - player collides with an enemy and it's
551:20 - currently not in rolling or diving state
551:23 - so if collision is detected we will
551:25 - always mark enemy for deletion
551:27 - regardless of what type of collision it
551:29 - is
551:30 - i delete this else block we won't be
551:32 - needing it we are going to run if else
551:34 - statement if collision is detected
551:37 - if we detect collision and player is
551:39 - currently in rolling or diving state so
551:42 - index 0 1 2 3 4 and 5 player is
551:46 - invulnerable in these states so it will
551:48 - destroy enemy and give us plus 1 score
551:50 - this.current state
551:52 - is this dot states 4 rolling or if
551:55 - this.current state is this dot states 5
551:58 - divin increased the score
552:01 - else meaning the player collided with an
552:03 - enemy while it wasn't in one of those
552:05 - two states it means player will get hit
552:07 - by enemy and it will play the hit
552:09 - animation we will of course get no score
552:11 - points for that
552:13 - i call this dot set state and i pass it
552:15 - 6 the index of hit state and i pass it
552:18 - speed 0 because i want the game to stop
552:20 - moving for the duration of this state to
552:23 - properly emphasize that we collided with
552:25 - something
552:26 - if i test it i can see the score is
552:28 - correctly increasing as we hit enemies
552:30 - in rolling or diving state and if we
552:32 - collide with an enemy while not in one
552:34 - of these states we enter hit state
552:36 - perfect great job if you are coding
552:37 - alone hope you are getting a lot of
552:39 - value when the player collides with an
552:41 - enemy i want to run this sprite
552:43 - animation let's handle that logic in a
552:45 - separate module i will call it for
552:47 - example collision animation js you know
552:49 - how we do this by now
552:51 - there will be a class called collision
552:52 - animation constructor will expect the
552:54 - game object reference and x and y
552:56 - positions we convert game into class
552:59 - property as usual
553:01 - you can download the image in the video
553:03 - description i place it in my assets
553:05 - folder and i link it here in index.html
553:08 - i give it an id of collision animation
553:11 - i hide the image with css
553:16 - sprite with the width of a single frame
553:18 - is 100 pixels sprite height is 90 pixels
553:21 - we will have size modifier to randomize
553:24 - the sizes a bit it will be a random
553:26 - value between 0.5 and 1.5 the width will
553:30 - be multiplied by this dot modifier value
553:32 - like this sprite width times size
553:35 - modifier height will be sprite height
553:37 - times size modifier it's a rectangular
553:40 - image and i want x position to be in the
553:42 - middle of the image that's why i waited
553:44 - until now to convert x and y into class
553:47 - properties we can only do it after we
553:49 - calculate the width and height of the
553:50 - animation i want to push x and y over
553:53 - the center of the animation so x will be
553:55 - x coordinate passed as an argument minus
553:58 - half of the width y will be y coordinate
554:01 - minus half of the height frame x will
554:03 - start at 0 max frame is 4.
554:07 - marked for deletion will be false at
554:09 - first
554:10 - we are animating a sprite sheet so as
554:12 - usual we use a draw image built in
554:14 - method and pass it nine arguments image
554:16 - we want to draw so this dot image from
554:18 - line four source x will be frame x times
554:22 - sprite width for horizontal navigation
554:24 - around the sprite sheet source y will be
554:26 - 0 because this sprite sheet has only one
554:28 - row source width is sprite width source
554:31 - height is sprite height so these 4
554:33 - values specify which area we want to
554:36 - crop out from the source sprite sheet
554:38 - now i pass it for more values
554:40 - destination x will be this dot x from
554:42 - line 10
554:43 - destination y is this dot y destination
554:46 - width and height will be the width and
554:47 - height we calculated on lines eight and
554:50 - nine these last four values determine
554:52 - where to draw that cropped out frame on
554:54 - destination canvas
554:56 - update method will make sure that
554:57 - collision animations move with the game
554:59 - world so this dot y minus equals
555:02 - this.game.speed we export the class up
555:05 - here on line 1. i import up on line 2 in
555:08 - player js because this is the module
555:10 - where we handle collisions
555:14 - i create an array that will hold all
555:16 - currently active collision animation
555:18 - objects i call it this dot collisions
555:21 - and it will be an empty array at first
555:23 - we have collision animation class
555:25 - available so i go down to check
555:27 - collision method and every time player
555:29 - collides with an enemy we set marked for
555:31 - deletion on that animator true and i
555:33 - will also push one new collision
555:35 - animation object into this.collisions
555:37 - array
555:38 - i can see it expects game x and y so i
555:41 - pass it this.game and i pass it x and y
555:44 - coordinates of that enemy since enemy is
555:47 - a rectangle i pass it in the middle of
555:49 - that rectangle horizontally and
555:50 - vertically like this i want the
555:52 - collision animation to be centered
555:54 - exactly over the enemy that just
555:55 - collided with the player
555:58 - inside update method on game class down
556:00 - here we will handle collision sprites
556:04 - for each object inside collision array
556:06 - we will call its update method
556:10 - and i will pass it delta time because we
556:12 - want to slow the animation down
556:15 - if that collision object is marked for
556:17 - deletion i splice it out of the array
556:19 - same as we did with particles inside the
556:22 - draw method i will cycle through all the
556:24 - collision objects again and i will
556:26 - trigger draw method on each one
556:32 - nice we are drawing collisions we are
556:34 - just drawing the first animation frame
556:35 - in the sprite sheet
556:42 - let's go here inside draw method on
556:44 - collision animation class and animate
556:46 - frame x
556:50 - if frame x is more than max frame set
556:53 - marked for deletion to true
556:58 - and console collisions array and i can
557:00 - see that collisions are correctly being
557:02 - added and removed
557:04 - i can delete this console log
557:06 - collision animations are running very
557:08 - fast we can control their fps frames per
557:10 - second using delta time delta time is
557:13 - the difference in milliseconds between
557:15 - the time stand from this animation frame
557:17 - and the timestamp from the previous
557:19 - frame it will be passed as an argument
557:21 - up here
557:22 - we will need three helper properties fps
557:25 - will define frames per second
557:27 - frame interval will be the amount of
557:29 - milliseconds that needs to pass before
557:31 - we serve the next animation frame it
557:33 - will be one second thousand milliseconds
557:35 - divided by fps
557:37 - frame timer will be counting from zero
557:40 - to frame interval over and over every
557:42 - time it reaches the value in our frame
557:44 - interval it will reset back to zero and
557:47 - it will serve the next animation frame
557:49 - in our collision animation sprite sheet
557:52 - so here i say if frame timer is more
557:54 - than frame interval only then serve the
557:56 - next horizontal frame and reset frame
557:59 - timer back to zero so that it can count
558:01 - again for the next loop
558:04 - else keep increasing frame timer by
558:06 - delta time
558:09 - now collision animations are animating
558:11 - at 15 frames per second i can also
558:14 - randomize that fps not sure what that
558:16 - will look like let's try a random number
558:18 - between 15 and 25 frames per second
558:22 - i can make that a larger number
558:24 - it will be capped at 60fps anyway
558:27 - i think smaller numbers will look better
558:29 - since this spreadsheet only has 5 frames
558:32 - this will make sure they don't disappear
558:34 - too fast
558:36 - i will set the initial value for debug
558:38 - to false so we don't see collision
558:40 - rectangles on the first page load
558:42 - you can still view them by entering our
558:44 - debug mode by pressing the letter d
558:47 - win condition for this game will be a
558:48 - time limit we need to get as many score
558:51 - points as possible within a specific
558:52 - game time window i want a fast paced fun
558:55 - game we will store game time in this dot
558:58 - time variable here on the main game
559:00 - object when time reaches max time value
559:03 - the game level is complete for testing
559:05 - purposes let's set that time to 2000
559:08 - milliseconds 2 seconds just for now
559:10 - inside update method we will be
559:12 - increasing game time by delta time
559:14 - that's passed as an argument up here
559:17 - milliseconds between animation frames
559:18 - will be accumulating in this dot time
559:20 - variable giving us the total amount of
559:22 - time that has passed since the game
559:24 - started
559:27 - if time from line 33 is more than max
559:30 - time from line 34 we set game over to
559:33 - true
559:36 - we need to declare this game over
559:37 - property up here when the game over is
559:40 - true i want to display a scoreboard a
559:42 - custom message and i want the game to
559:44 - stop animating down here in animation
559:46 - loop i say only request the next
559:48 - animation frame if game over is false
559:51 - this will make the game freeze and stop
559:52 - animating when game over happens i could
559:55 - also have just disabled controls and
559:57 - have the player running endlessly in the
559:59 - background you can customize your game
560:01 - over screen later based on your
560:02 - preferences
560:04 - i open uijs and here i want to display
560:07 - game time and game over messages let's
560:10 - start with the timer i want the font to
560:12 - be smaller let's say 80 percent of the
560:14 - font size we used to draw score
560:18 - i call fill text and i say time colon
560:21 - space plus this dot game time
560:25 - add coordinates 2080. nice we are
560:28 - drawing game time we will fix this but
560:30 - first let's also draw a game over
560:32 - message
560:35 - if game over is true set text align to
560:37 - left
560:42 - i want font size to be double of the
560:44 - base value
560:45 - i will have two messages one where the
560:47 - level is successfully completed and one
560:50 - for when the player fails to get enough
560:52 - score points in time this will be the
560:54 - winning message i will say booyah in
560:56 - large letters
560:58 - codiness will be the middle of canvas
561:01 - so game width times 0.5 and game height
561:04 - times 0.5 okay i set text align the
561:07 - center i need to fix this to actually
561:09 - set font size correctly i need to move
561:12 - this space from here to here
561:14 - and the same on line 14.
561:18 - nice
561:19 - winning message will have a second line
561:21 - of text with smaller font size that says
561:23 - what are creatures of the knight afraid
561:25 - of you exclamation mark exclamation mark
561:28 - this message will show up when we win
561:31 - i change font size to 70
561:34 - i move the first line up 20 pixels and
561:36 - the second line down 20 pixels nice so
561:39 - this is our winning message i want this
561:41 - message to display if score is more than
561:43 - 5 for example this is just for testing
561:45 - purposes when we have the whole game
561:47 - working you can tune it and you can set
561:49 - game time and the score required to win
561:52 - the game to different value depending on
561:54 - how difficult you want your game to be
561:56 - if game score is more than 5 we display
561:59 - this message
562:00 - else meaning game over is true and game
562:02 - score is less than 5 we display a
562:04 - different message i will say love at
562:07 - first bite i like to keep the halloween
562:09 - theme
562:10 - the second line will say nope better
562:12 - luck next time so this is when we fail
562:14 - the level the tested i give us more game
562:17 - time so we can get enough score points
562:19 - 10 seconds
562:22 - nice win condition works well and now
562:25 - lose condition let's wait
562:27 - perfect we can also lose if we don't get
562:29 - enough score points in time we need to
562:31 - fix game timer it's showing milliseconds
562:34 - i want it to show seconds so i multiply
562:36 - it by 0.001 to move the decimal point
562:39 - from milliseconds to seconds
562:41 - and i only want to see one decimal space
562:44 - so build in javascript to fixed method
562:47 - and i pass it one
562:49 - we can also highlight the text to make
562:51 - sure it doesn't blend in with the
562:52 - background i wrap all the code inside
562:54 - the draw method on ui class between save
562:57 - and restore that means all the settings
562:59 - here will only affect this text i want
563:02 - to apply canvas shadows and i don't want
563:04 - them to be applied to players and
563:06 - enemies canvas shadows are still not
563:08 - well optimized in firefox so if you
563:10 - notice lower frame rate i suggest you
563:12 - don't use them but if you want to know
563:14 - how to use them it's simple shadow
563:16 - offset x 2 pixels
563:18 - shadow offset y 2 pixels shadow color
563:21 - white
563:22 - and shadow blur 0.
563:24 - now our text gets a nice white highlight
563:27 - we could also achieve the same effect by
563:29 - drawing the same text twice and the
563:31 - second one would have 2 pixel horizontal
563:33 - and 2 pixel vertical offset that would
563:35 - be more code but it's more performance
563:37 - efficient than using built-in canvas
563:39 - shadows let's clean up the code and fix
563:41 - some small bugs we have here when the
563:43 - player gets hit i don't want it to be
563:45 - able to move left and right
563:48 - when the player is in state 6 left and
563:51 - right arrow inputs will be disabled
563:55 - on line 11 in collision animation gs we
563:57 - are calculating vertical y-coordinate so
564:00 - this value should be height
564:04 - in running state we are setting max
564:06 - frame to six we are missing two frames
564:08 - max frame should actually be eight
564:12 - when i'm rolling on the ground and i
564:14 - press down arrow key player starts
564:16 - diving and it's causing this weird
564:18 - movement pattern we are not supposed to
564:20 - be able to do a dive attack when we are
564:22 - on the ground we can only switch to
564:23 - diving state when the player is not on
564:26 - the ground like this that fixed it
564:30 - one last small thing is here on line 61
564:32 - in main.js we don't really need to call
564:34 - slice method we can just set length of
564:36 - particles array to max particles value
564:38 - like this
564:40 - in the next episode we will add more
564:42 - bonus features but from this point you
564:43 - can consider the game complete feel free
564:45 - to add your own features and run your
564:47 - own creative coding experiments i'll see
564:49 - you in the next one
564:53 - this is a final episode where we quickly
564:55 - implement some of the bonus features i
564:57 - showed in the previews we will improve
564:59 - visuals and clean up our code i will
565:01 - start by quickly changing background
565:03 - images just to keep things interesting
565:05 - you can download the forest background
565:07 - layers in the video description and i
565:09 - just replaced them in the assets folder
565:12 - overriding the city images i backed the
565:14 - old images up somewhere else on my
565:16 - computer you can also go to
565:18 - background.js and adjust speeds of
565:20 - individual layers sometimes a different
565:22 - background art looks better when speed
565:24 - modifiers on the background layers are
565:26 - adjusted i also changed ground margin on
565:28 - line 17 in main.js to better fit this
565:31 - new forest environment since we are
565:33 - changing visuals let's also change the
565:35 - font to something nicer you can go to
565:37 - google phones and choose any font from
565:39 - there it will all work and it's very
565:41 - easy to implement let me show you with
565:43 - creepster because this is a halloween
565:45 - themed game we are in a scary dark
565:47 - forest escaping from creatures of the
565:49 - dark
565:50 - when you choose your font click select
565:52 - this style
565:53 - now i click up here and it will give us
565:55 - everything we need to use this font on
565:57 - the web in our web browser game i copy
565:59 - this link tag you can also select
566:01 - multiple fonts and they will be
566:03 - automatically added to the same tag i
566:05 - will use just one font for now i copy
566:07 - the link tag and i paste it up here in
566:10 - index html notice i put it before my
566:12 - custom style css file because i want the
566:15 - font to be available when that file
566:16 - loads then i just take this css rule and
566:20 - i apply it to canvas element now i can
566:22 - use this font all over my project and
566:25 - canvas will draw it i will use it in
566:27 - uijs for score timer and game over
566:30 - messages by replacing helvetica with
566:32 - gripster here i think this looks much
566:34 - better and you can choose from so many
566:35 - different google phones to fit the art
566:38 - style of your game i have other
566:39 - favorites on here for example a font
566:41 - called bangers for a really cool comic
566:43 - book art style i want the player to have
566:45 - a limited number of lives and i want
566:47 - those lives to be displayed on screen
566:49 - each life will be represented by a small
566:51 - image of dog head you can also use heart
566:54 - image or something completely different
566:55 - it's up to you if you want to use the
566:57 - same image as me you can download it
566:59 - down below as usual i bring it into the
567:01 - project here in index.html first
567:06 - then i hide it with css
567:08 - i will be drawing the lives here in uijs
567:10 - so in the constructor i bring the image
567:12 - into the project like this
567:14 - i will call it for example this dot
567:16 - live's image
567:18 - down here under timer we will draw
567:20 - player lives i will call draw image and
567:23 - i pass it the image i want to draw i
567:25 - want to draw it at coordinates 20 95 and
567:28 - width and height will be 25 pixels nice
567:31 - we are drawing it here i created
567:33 - this.life's property on the main game
567:35 - object let's start with 5 lives back in
567:38 - uijs i create a for loop that will run
567:41 - once for each life and it will draw an
567:43 - image that represents it
567:47 - now i'm just drawing five images on top
567:49 - of each other i need to multiply
567:51 - horizontal x position times index from
567:53 - the for loop
567:55 - actually it will be the width of the
567:56 - image so 25 pixels times index plus left
568:00 - margin of 20 pixels perfect now when i
568:03 - change the value here it changes how
568:05 - many lives are drawn on screen maybe you
568:07 - want your game to be easy you can give
568:09 - the player 15 lives to start with i will
568:12 - go back to 5 lives in player.js in the
568:15 - area where we handle collisions when the
568:17 - player collides with an enemy while not
568:19 - rolling or diving this animation is
568:22 - played by setting stage to state 6. we
568:24 - call that state hit
568:26 - and at the same time i want to remove
568:28 - one life so this.game.lives minus minus
568:33 - after we removed one life we check if
568:35 - total lives are less or equal to zero
568:38 - and if they are we set game over to true
568:41 - i tested by colliding with enemies on
568:42 - purpose you can see that each time we
568:44 - collide we lose one life per anime and
568:47 - when we lose the last life we get game
568:49 - over screen perfect
568:51 - i want score numbers to fly from enemies
568:54 - as we defeat them this can also be used
568:56 - for other floating messages in our game
568:58 - i create a new file called floating
569:00 - messages js
569:02 - i create a custom class i call for
569:04 - example floating message and i export it
569:07 - constructor will expect value of the
569:08 - floating text starting x and y position
569:11 - and target x and y position text with
569:14 - this value will float from this position
569:17 - to this position and then it will
569:19 - disappear i convert these values to
569:21 - class properties as usual
569:25 - i also create a property i call timer
569:28 - just to set some simple time limit after
569:30 - which the messages disappear we will
569:32 - need update and draw methods as usual
569:36 - update method will push horizontal
569:37 - exposition by the difference between
569:39 - target position and the current position
569:41 - making it slowly move towards the target
569:44 - same for the vertical y position
569:46 - difference between vertical target and
569:49 - current vertical position
569:52 - for each loop timer will increase by 1.
569:55 - when timer is more than 100 we set
569:57 - marked for deletion to true
570:00 - draw method will take context as an
570:01 - argument we set font to 20 pixels
570:04 - creepster
570:05 - fill style will be white and fill text
570:08 - will draw value from line 3 at its
570:10 - current x and y coordinates now i show
570:12 - you an alternative to using canvas
570:14 - shadows for score and timer we are using
570:17 - canvas shadow properties here we will
570:19 - achieve the same effect by drawing the
570:20 - same text twice white first then black
570:24 - on top of it and we give it two pixels
570:26 - horizontal and two pixels vertical
570:28 - offset
570:30 - we are exporting our new floating
570:31 - message class
570:34 - i import it up here on line 3 in player
570:36 - js
570:42 - inside check collision method when we
570:44 - successfully hit an enemy and score
570:46 - increases i want those score points to
570:48 - fly from that enemy towards our
570:50 - scoreboard i say
570:51 - this.game.floatingmessages
570:53 - push and i want to use floating message
570:55 - class to create one new floating message
570:58 - object first i need to go to main.js and
571:01 - on the game class i create this floating
571:02 - messages array
571:04 - it will be an empty array at first
571:06 - now i'm pushing a new floating message
571:08 - into it like this
571:10 - i check here and i can see that class
571:12 - constructor expects text value starting
571:15 - x and y coordinates and target x and y
571:18 - coordinates value will be plus 1 because
571:20 - we get one score point we could also
571:23 - make this value dynamic if every enemy
571:25 - type gives different amount of score
571:26 - points starting coordinates will be x
571:28 - and y of the anime we just collided with
571:31 - and target x and y will be for example
571:33 - the top left corner of canvas so
571:35 - coordinate 0 0.
571:38 - inside update method on game class the
571:41 - same way we cycle through all anime
571:42 - object inside enemies array we will also
571:45 - cycle through all floating message
571:46 - objects inside floating messages array
571:49 - for each message we will trigger its
571:51 - update method
571:52 - i delete this splice to remove old
571:54 - messages because we will do it in a
571:56 - better way i'll get to it in a minute so
571:59 - for every floating message object i call
572:01 - their associated update method i copy
572:03 - this code block and inside draw i also
572:06 - call draw method on every message and i
572:08 - pass it context if i play the game
572:10 - messages will be moving too fast so
572:12 - there is no animation i just see the
572:14 - bottom of the letters here
572:16 - i need to go to update method and i need
572:18 - to multiply both of these by 0.03 so i'm
572:22 - saying here for each animation frame
572:24 - increase the current vertical and
572:26 - horizontal position by three percent of
572:28 - the difference between the target
572:30 - position and the current position this
572:33 - will make the text move towards its
572:35 - target position by three percent of the
572:37 - distance per animation frame meaning it
572:40 - will start moving fast and as the
572:42 - distance between current and target
572:44 - position gets shorter so it's a smaller
572:46 - number three percent of that value is
572:48 - less pixels so it will travel slower and
572:51 - slower giving us a nice ease out effect
572:53 - you can see that the movement is faster
572:55 - at first and it slows down as the
572:57 - letters float closer to target 0 0
573:00 - coordinates on canvas
573:02 - i adjusted the target coordinates i want
573:04 - them to flow somewhere to the end of
573:06 - score line maybe these coordinates
573:08 - yeah let's do 150 and 50.
573:12 - right now we are creating an ever
573:14 - increase in floating messages array
573:15 - because we are not removing the old ones
573:18 - i will use filter array method to do
573:19 - that it's better than using splice for a
573:22 - reason i will explain in a minute built
573:24 - in array filter method runs a provided
573:26 - callback function once per each element
573:28 - in the array array elements which do not
573:30 - pass the callback function test are
573:32 - skipped and are not included in the new
573:34 - array so when i say
573:36 - this.floatingmessages.filter
573:39 - and as a callback i say marked for
573:41 - deletion property on each object needs
573:43 - to be false the new array will contain
573:45 - only elements that have marked for
573:47 - deletion set to false elements that are
573:50 - set to true will be excluded at the same
573:52 - time i am assigning this new filtered
573:55 - array to the original floating messages
573:57 - array overriding it so this simple line
573:59 - of code filters out all elements that
574:02 - have marked for deletion set to true
574:05 - in the previous episode i mentioned a
574:06 - pack where i noticed that ground enemies
574:08 - jump and wiggle horizontally even when
574:10 - they are supposed to be static it's
574:12 - especially visible when comparing ground
574:14 - enemies against the ground texture but
574:16 - it is actually happening with all
574:17 - enemies it is because as i cycle through
574:20 - the array i am removing enemies that
574:21 - collided with player or moved off screen
574:24 - using splice problem is that when i
574:26 - splice out and remove enemy from the
574:28 - array while i'm in the middle of cycle
574:29 - and through that array it changes index
574:31 - of all the following elements in our
574:33 - case enemy objects because of that their
574:36 - position is not calculated correctly for
574:38 - that loop and they jump around instead
574:40 - of splice i will use filter method and i
574:42 - will only remove enemies that have
574:44 - marked for deletion properties set to
574:45 - true after we finished cycling through
574:48 - the entire array so there are no
574:49 - problems with indexes and skipping
574:51 - positions basically i will do the same
574:53 - thing for enemies i just did for
574:54 - floating messages
574:58 - i will also do the same thing for
575:00 - particles like this
575:05 - and finally i also do it for collision
575:07 - animation objects
575:13 - now that's better we fixed the bug and i
575:15 - think this syntax is a bit cleaner as
575:17 - well
575:18 - i just quickly can't lock all my object
575:20 - arrays
575:21 - i put it inside at enemies so it logs it
575:23 - only periodically not for every
575:25 - animation frame i play the game and i
575:27 - can see that all the arrays are being
575:29 - correctly filled with objects and those
575:31 - objects are also being removed perfect
575:35 - player class doesn't have this dot
575:36 - current state property because i had to
575:38 - define it from inside game object
575:41 - here that property belongs on player
575:43 - class so i can define it here and
575:45 - initially i set it to null this is just
575:47 - to clean up the code will still work the
575:49 - same
575:50 - let's tune the game difficulty to make
575:52 - it a bit more challenging max time will
575:54 - be 30 000 milliseconds or 30 seconds
575:58 - in this time the player needs to reach
576:00 - at least the minimum winning score of 40
576:03 - to see the winning message we can do
576:05 - other things for example every time
576:06 - player gets hit by an enemy and this
576:08 - animation is played we can remove 5
576:10 - points from the score as a penalty you
576:12 - can tune your game however you want you
576:14 - can make it easier or more difficult by
576:17 - adjusting these values when the game is
576:19 - over after 30 seconds i check if score
576:22 - is more than winning score and if it is
576:24 - we display winning message else we
576:26 - display the losing message let's test it
576:28 - i play it and i get hit over and over my
576:31 - score is in minus values i get game over
576:33 - and losing message from line 35 is
576:35 - displayed nice
576:37 - i increase game width to 900 pixels i
576:40 - will keep game height at 500 pixels
576:42 - because our background images are
576:44 - optimized for that size we're not gonna
576:46 - go into aspect ratio calculation in this
576:48 - class this time i will really try to
576:50 - play the game and let's see if our
576:52 - winning condition works i need score
576:54 - over 40 in 30 seconds
576:57 - it's actually pretty close
576:59 - yes i played well i got 55 score points
577:02 - and when a message is displayed awesome
577:04 - we are done let me know in the comments
577:06 - if you code it all the way through and
577:07 - if you learned something new i'll see
577:08 - you later
577:10 - [Music]

Cleaned transcript:

in this complete game development course you will learn how to develop a variety of games using javascript frank's courses are top notch and he has a really creative way of presenting things you are going to love this course hi coders in this class we will use html css and javascript to build nine separate game development projects i will write and explain all the code from scratch line by line using just plain vanilla javascript no frameworks and no libraries we will start by learning individual 2d game development techniques on smaller standalone projects and once we covered everything we apply all of them to build a simple mobile game simple point and shoot game and a more advanced fastpaced 3d side scroller with precise keyboard controls and special visual effects my name is frank and i'm a frontend web developer if you want to learn even more about game development and creative coding you can check out my youtube channel in this course we will learn everything you need to know about sprite animation we will write the javascript code that handles seamless endlessly scrolling parallax backgrounds we will learn how to extend javascript classes to create a variety of enemy types with different visuals and different behaviors i will show you how to implement state design pattern to manage player states and special abilities we will learn how to use collision detection by color collision between circles and between rectangles we will add different particle effects and many other things this class is made out of nine separate standalone projects and a couple of special lessons so if you already know some of these techniques you can skip around this class is not for complete beginners but if you are already comfortable with the basics of javascript and you understand functions for loops objects and arrays come join me and let's build some games in the first class we will explore two different javascript techniques you can use to animate sprite sheets and we will build this project where you can choose different player animations from the dropdown we are giving away a lot of free art assets you can download them in the video description and you can use them to follow along with this course for more beautiful game art assets visit this website now let's do a quick javascript setup i will show you how little code you need to animate something on canvas i create a custom variable called canvas that will hold a reference to my actual html canvas element i created in index.html i point javascript towards it using getelementbyid and i pass it id i gave it canvas1 constant variable i call for example ctx shortcut for context is equal to this canvas variable from line one dot get context and i pass it to d i could also pass it webgl here which would give us access to a completely different set of drawing methods but that's for another video now i have all canvas 2d drawing methods stored in my custom ctx variable and i can call them from here for example ctx fill rect will call a method to draw a rectangular canvas if i console.log ctx we can inspect this object it has some properties which basically are global canvas settings such as fill style that says color of shapes we draw or font which sets size and font family of text we draw on canvas this tutorial will be focused on sprite animation we want to learn how to create animated characters for games so we are most interested in building canvas draw image method which sits right here i will explain everything you need to know about draw image method and its three versions in a minute it's easy don't worry about it before we do that i will quickly finish canvas setup to make sure we have correct scaling i need to set canvas width and canvas height by default canvas will be set to 300 x 150 pixels and our drawings can come out distorted that's why i will manually set it to 600 x 600 the same values i gave it in style css i create a custom variable called canvas width i will use capital letters here to make it clear this is a global variable i set it equal to canvas from line 1 dot width and i set it all to 600 same width i gave it in style css i do the same for canvas height also 600 now that we made sure scaling is correct let's bring an image into the project in this tutorial i want to show you two different ways you can animate sprites very simple one for beginners and then more advanced more complex and flexible way where you can just run commands like run jump sit and it will play the correct animation for us when you know both you can decide which one to use when you are building your games i want everyone to get the same result that's why i will be giving away this animated sprite sheet for free today to bring image into javascript project i can just declare a custom variable i call for example player image and i set it equal to new image like this this is a builtin image class constructor it will create html image element same as you would create if you put image tag img tag in index html markup we can append it to our web page if you want but today we will just use it to store that spreadsheet image for us so that we can animate it with the javascript i need to give it source so player image variable from line 6 dot src and i set it to path to my sprite sheet your path might be different it depends on how you organized your project files let's animate something on canvas i create a custom function called for example draw frame actually let's call it animate because this is our animation loop let's make sure that's clear inside animation loop first i want to clear old paint from canvas between every animation frame so i take ctx variable from line 2 dot clear rectangle builtin method it expects four arguments to specify what area on canvas we want to clear i want to clear the entire canvas so from coordinates 0 0 to canvas with canvas height now we can draw i will just test if everything works by drawing a simple rectangle at position 50 50 and i give it width and height of 100 pixels now i can call a request animation frame builtin method which will simply run a function we pass to it it will call that function once if i pass it animate the name of its parent function from line 9 it will just run over and over create an animation loop so we declared animate i also have to call it like this and we have a black rectangle drawn on canvas if we don't specify fill style color of shapes on canvas always default to black it looks like a static image but it's actually animating the same rectangle over and over i can simply prove it by creating a global variable called x i set it to 0 and here on line 12 i replace hard coded value with this variable and every time animation loop runs i increase x by 1. i told you you don't need much code to animate something on canvas well done you are a programmer now see you later okay there's a bit more i can show you let's put it back and let's use builtin draw image method to draw our sprite sheet on canvas draw image method is a bit special you can pass it three or five or nine arguments depending on how much control do you want to have over the image you are drawing the first argument is always the image you want to draw so i pass it player image variable from line 6. then i pass it x and y coordinates where on canvas i want my image to be drawn if i pass it 0 for x and 0 for y it will be drawn from the top left corner of canvas coordinates 0 0 it will also keep the image at the original width and height the sprite sheet i'm using has 10 rows and 11 columns of animation frames it's many times larger than my canvas so now we can only see this small part 600 times 600 pixels in the top left corner of my sprite sheet it's 600 x 600 because that's the size i set my canvas to so this is the version of draw image with only three arguments it works and you can change x and y coordinates to move your image around but you would need to resize your images using some other programs such as microsoft paint or photoshop but you don't have to do that because draw image also accepts five arguments that's its second version if you pass it five arguments the fourth argument will be width and fifth argument will be height so we are now able to scale the image up and down and we can also stretch it vertically or horizontally if i pass it canvas width and canvas height it will stretch the image to match my canvas area 600 600 pixels and since the image is not the same ratio as my canvas you can see the image is stretched just a little bit let's remove the black rectangle by commenting out line 11. i can pass any values as width and height and javascript will just stretch my image based on these values you can also change x and y to move the entire image around the final third version of draw image method accepts nine arguments this gives us the most control over the image the first argument again is the image you want to draw the next four arguments determine rectangular area we want to cut out from the source image source x source y source width and source height and the last four arguments will tell javascript where on our destination canvas we want to draw just that cropped out part onto destination x destination y destination with and destination height these last four values basically work the same as these four values in the previous draw image call i showed you the only difference is they are not used to position and stretch the entire image but just the area we cut out using these arguments i comment outline 12 but i will leave it here for reference and on line 13 i will add source x source y source width and source height arguments and i will use them to cut out only one dock at a time one frame from my large sprite sheet so these four values determine area we cut out from the original sprite sheet and these four values determine where on canvas we want to place that cut out piece of image on two if i set source x to 0 source y to 0 source width to 200 source height to 200 we are cutting out square 200 x 200 pixels from the top left corner there is nothing in the area if i change it to square 400 times 400 pixels we can see part of our dog i can put any values here and cut out any chunk of the original sprite sheet i want i can also scale it stretch it i can do whatever i want here i create a global variable called sprite with let's have a look at our sprite sheet if i take width of the entire file and divide it by number of columns i get width of one frame my spreadsheet is 6876 pixels wide and it has 12 columns 6876 divided by 12 is 573 i will use 575 for now because i made the last frame a bit smaller when assembling my sprite sheet in photoshop and there's some margin that snuck in sometimes when you see that your animation is moving sideways when it shouldn't try to fix it by adjusting width and height by small pixel amounts and watch what happens i will show you a bit later what i mean it's simple you can just ignore it for now sprite height or height of a single frame will be height of my entire sprite sheet which is 5230 divided by the number of rows we have 10 animations 10 rows so 5 230 divided by 10 is 523 on line 15 i can replace source width and source height with sprite width and sprite height variables i just calculated and now we are cropping out exactly one frame from our sprite sheet and in destination width and destination height instead of stretching it to cover the entire canvas i can also use sprite width and sprite height variables here and we are drawing the frame at its original size if you are still not clear what each of these individual arguments passed to draw image method does feel free to play with it change the values and see what happens it's quite straightforward once you get used to it here i'm giving it an image i want to draw these four values specify a rectangle area to crop out from the original large sprite sheet and here i am telling it where i want that cropped out piece of my sprite sheet to be displayed on canvas if i set source x coordinate to 1 times sprite width i'm jumping one frame as this number increases i am moving to the right jumping by the amount of sprite width this way i can display my animation row frame by frame when this number gets too high there will be no frame there eventually so source x argument allows us to cycle through sprite sheet horizontally if i want to swap between different animations the way our spreadsheet is structured i have to travel through it vertically we have source y argument for that again starting from top would be 0 x sprite height variable from line 9 and that will give me the top row in this case we have idle animation there one times sprite height is row 2 jump animation then there is fall animation running and so on traveling through the sprite sheet vertically along the y axis switches between different animations and we do it by changing source y argument traveling horizontally cycles between individual frames of these animations and can be done by changing value we pass as source x argument instead of manually changing numbers like this let's output it to variables i create variables called frame x and frame y and i set them to 0 initially then i just replace hard coded zeros inside my draw image method with frame x and frame y and now i can swap between animation frames by assigning different values to these variables frame x cycles through frames of each animation horizontally frame y swaps between different animations it travels through my sprite sheet vertically now let's cover a very simple way you can animate your sprites and then i will show you proper advanced scalable technique that is suitable for both small and larger game projects the simple way is this we know that frame x variable cycles through our spreadsheet horizontally first row in our sprite sheet is idle animation it has 7 frames inside animation loop on line 18 i can say if frame x from line 10 is less than 7 increase frame x by 1 frame x plus plus else meaning when it's equal or larger than seven reset it back to zero you can notice two things our animation is blinking and it's going very fast let's deal with it first frame is zero so last frame is actually position six if i change this to six the empty frame is removed and blinking is gone on line 11 i can just change values of frame y and we are animating different rows in the sprite sheet problem comes when i get to frame y 4 which is row 5. we are starting from 0. this animation has 11 frames but i'm cycling only until frame 6 so we are not playing the entire animation when i get to this row we have a problem again sitting animation has 5 frames and we are cycling through more frames here so now it's blinking because we are including some empty frames to get this to work properly every time we want to swap between animations we have to change frame y value on line 11 but also this hard hardcoded number 6 on line 18. ideally it would have to be a variable that always changes to the correct value that reflects the number of frames for each animation row depending which one we are animating right now i would solve it by having variable called for example max frame i would slot it here and every time i change frame y variable i would change value of that max frame variable from 6 to whatever value we need here to display all frames so 10 for this row and 4 for this row since we are animating from frame 0. animation is going very fast to slow it down we can use this simple trick i will create a led variable called the game frame and i set it to 0. on line 22 inside animation loop i take this game frame variable and for every loop we increase it by 1. so now game frame is endlessly increasing as our animation loop runs over and over on line 19 i create an if statement let me just write it and i will explain it when we see the whole thing i say if game frame modulus percentage symbol something question marks for now is equal to 0 only then increase frame x on line 13 i create a custom constant variable called stagger frames whatever value i give it it will slow down animation by that amount let's try 5 on line 20 i say if game frame modulus stagger frame is 0 only then increase frame x modulus operator percentage symbol is also called remainder operator it returns remainder when we divide the first number by the second let's say game frame is 17 and stack of frames is 5 17 modulus 5 is 2 because 17 divided by 5 is 3 that gives us 15 and remainder to 17 is 2. remainder operator simply divides the first operand by the second one and returns the remainder here i am checking if the remainder is zero game frame is ever increase in the number and stagger frames is always 5. this statement will return remainder 0 and be true every 5 frames so because i set stagger frames to 5 this code block on line 20 will run every 5 frames slowing down our animation 5 times new frame in our sprite sheet will only be served every time the main animation loop runs 5 times i can also slow it just by 2. 0 here will stop animating the higher the number you use here as stagger frames the slower the animation will be let's leave it at 5 for now i think it looks good for most animations as i said when i change frame y to 4 if i want to display all frames in my animation i also have to change 6 here on line 21 to number 9. for shorter animation rows like this sitting animation it has only 5 frames so i have to change this number to 4. so now we have a way to swap between animations but we always have to change two values let's refactor this code and let me show you more advanced sprite animation method that allows us swooping between different animation states by changing just one value we are venturing into a bit more advanced territory if you are new to javascript don't worry if it takes you a bit longer to understand what i'm about to show you it becomes easier with practice we all started somewhere i delete code between lines 20 and 23 we used it to cycle between animation frames horizontally in this more advanced method we will do it differently i set frame y to zero that's my top row idle animation i also delete lines 17 and 18. they are commented out anyway let's clean this up inside animation loop on line 17 i create a let variable called for example position its job will be to cycle through horizontal sprite sheets but in a different way we will need this later i take a game frame variable from line 12. this variable is increasing over and over on line 20 as animation loop runs i divide it by stagger frames variable from line 13 and i wrap all of this in math.floor to get rid of potential decimal points i want this value to be only integers whole numbers without decimal points then i take this entire value and i do remainder operator and six six is here because i'm doing idle animation which has six frames counting from zero this line of code is not the easiest thing to wrap your head around i said this would be slightly more advanced don't worry if you're struggling to read this this is not beginner level javascript anymore what's happening here on line 17 game frame divided by stagger frames means we will have to increase game frame 5 times before we get to 1 because as game frame variable increases 1 divided by 5 is 0.2 2 divided by 5 is 0.4 3 divided by 5 is 0.6 game frame 4 divided by stagger frames 5 is 0.8 and only when we get to game frame 5 divided by stagger frame 5 we get value of 1 here so as game frame cycled from 1 2 3 4 5 by dividing game frame by stagger frames we go to 0 0.2 0.4 0.6 and 0.8 all of these values were turned into zeros because it's wrapped in mastered floor it took five animation loops five increases of game frame variable to get the number one here when this is 1 1 modulus 6 is 1 because 1 divided by 6 is a 0 and remainder from 0 to 1 is 1. basically this value increases by 1 every time game frame variable increases by 5 slowing or staggering our animation 5 times making it 5 times slower we are using math.floor removing decimal points from these divisions for the first five frames we get zero modulus six which is zero then this calculation increases to one for the next five frames one modulus six is one then two modulus six is a two 3 modulus 6 is 3 and so on position variable increases until it reaches 6. 6 modulus 6 is 0 7 modulus 6 is 1 8 modulus 6 is remainder 2 and so on this calculation makes sure position variable only cycles between a 0 and this number i appreciate that this calculation is quite complex this is not course in advanced mathematics and logic so for now just take this little formula here and believe me when i say it works don't worry about understanding it completely we are focusing on javascript today being able to understand this calculation has nothing to do with your ability to be good with javascript these are two unrelated skills on line 18 i take frame x variable from line 10 and i set it equal to sprite width from line 8 and i multiplied by this position variable we just calculated on line 17. as i said this position variable will cycle between 0 and number we put here first row in my sprite sheet has 7 frames starting from 0 frame x will be cycling through these values horizontally on line 19 inside the draw image i remove sprite width because width of our sprites is already accounted for inside my frame x variable on line 18. i misspelled stagger frames on line 17. when i fix this small typo we can see this is working and we are animating row 1 in our sprite sheet don't feel that you need to fully understand this calculation online 17 to be good at javascript i did not come up with this formula tricks like this are usually figured out by someone much smarter than me we can just use them and they will work for us i could have achieved the same result using a bit more code and simple more readable calculations this is more complex and hard to read for beginners because it's such a short calculation it's kind of a neat trick to use this but it's not a necessity i like it because it makes the code look clean and compact i can still change value of stagger frames variable on line 15 and it will slow down or speed up my animation this is really nice code base to animate any sprite sheet but it can be done even better to swap between animations i still have to change frame y variable on line 11 and i have to make sure that this value on line 17 sets the correct amount of frames per row to make sure we don't have any empty frames or that we are animating all available frames from that particular row depending on what animation we are currently drawing i would like to have code structure like this some kind of data array called for example sprite animations that contains objects each object's name in this array is the same as the name of that particular animation it holds data for so for example idle jump run and so on each of these objects can contain additional data for example for irregular sprites it can be pixel values for width and height that can be different for each frame and mainly it will contain locations array this location array will hold a set of javascript objects and each of these objects will have x and y property each of these objects represents one frame in that particular animation and its x and y properties will be coordinates we need if we want to use draw method to cut out this particular frame from the sprite sheet that way we can access any frame we want anytime by directly targeting positions in this array i can just cycle through this location array with a for loop and it will always play the entire animation for me without the need to set up number of frames each animation has each time it will know how many frames that animation has based on the number of objects in this location array each object will be one frame so how do we create a data structure like this with javascript and how do we map it correctly to match our sprite sheet let me show you on line 14 i create a custom constant variable i call for example sprite animations and i set it equal to an empty array this will serve as the main container to hold all data for all my animations i will create another variable i call animation states this will also be an array and i will use it as a place where i can create kind of a simple map that will match my docs sprite sheet i will go through my sprite sheet row by row from top to bottom for every animation row in my sprite sheet i will create an object like this with two properties name property will be whatever i want to call that animation row so for the first row let's call it idle and i will also need frames property i check my sprite sheet and i see that idle animation is made out of 7 frames the second row i will call jump animation and it has 7 frames i will create an object like this for every row in my sprite sheet going from top to bottom but before i do that let's check if it works on line 15 i have this animation states array which currently contains two objects one for idle and one for jump animation i could have also given it more properties but this sprite sheet is not irregular so name and frames properties is all i need to map coordinates for each animation frame i take animation states array and i call build in array for each method for each method execute provided function once for each array element i will do es6 syntax here this is so called arrow function it's a simplified syntax to write function expression in javascript i can skip function keyword here and i just create brackets where arguments i pass to this callback function go with for each the first argument we pass to it is just a variable that will represent each element in the array as we are cycling through it i will call it state as for each method runs state will first represent this object then this object and so on if we add more i'm simply saying inside this callback function i'm about to write refer to these objects as state so this name property can be accessed as state dot name for example i'll also pass it second argument i call index index is another builtin feature of for each array method it simply stores number of each element as we cycle through the array so this first object will have index 0 this will have index 1 and so on i expect you understand basic array manipulation with javascript and fundamental methods like for each but i still wanted to explain in case we have some beginners here so this callback function will run for each element in my animation states array now i want to run through animation states and create data structure like this that maps my sprite sheet and coordinates for each frame i create lead variable called frames and i set it equal to an object inside i will have property called loc location that will be an empty array for now i will create a for loop that will cycle through state dot frames property so for idle animation it will run seven times as i set it here on line 18. every time this for loop runs i want to calculate x and y coordinates of that animation frame from my sprite sheet and i want to place them inside location array on line 27 how do i calculate that i create a temporary variable called position x and it will be equal to j variable from the for loop times sprite width that i set to 575 pixels earlier as the for loop runs and j increases position x will be calculated for each frame i will also need position y which will be index from line 25 times sprite height we declared sprite height earlier and we set it equal to 523 pixels to match our sprite sheet position y will be the same for all seven frames of idle animation when for each method moves to the second animation object here index will increase and for that animation row different position y will be calculated this might be quite a lot going on if you are a beginner this is more advanced than the first sprite animation method don't feel discouraged if you are struggling to follow it takes time and practice it wasn't easy for any of us at first so this for loop calculates position x and position y for each frame as it cycles through my sprite sheet every time we calculate x and y i take frames dot location array from line 27 and i use push method i create another small object here on a fly it has x property set to position x from line 30 and y property set to position y from line 31 i push these values into my location array on line 27 so this for loop will run through all the frames in one row in this case seven times and once we create seven objects with x and y coordinates and push them into location array i take sprite animations array from line 14 and i create a new key in there i will create something called key value pair key is the name of the property value is the value of that property so i'm taking sprite animations array from line 14 and i'm passing it state dot name which will first refer to idle then to jump as for each method runs through animation states array i'm saying create a new key new property in sprite animations array call it idle and its value will be frames from line 27 frames object contains locations array which i just filled with seven objects that contain x and y properties for each frame in this animation that's it we created the data structure that maps locations in my sprite sheet i can console log it now i can see i made a typo here on line 29 you probably noticed it already this should be j not s so now i'm going to consoling animation states from line 15 that's fine but what i actually want to see is sprite animations array from line 14 which we just created and filled with data you can see that my sprite animations contains two properties called idle and jump if i look inside each contains a location array from line 27 and number of elements in that array corresponds to frames i declared for each animation each of these values was calculated here on lines 30 and 31 you can see that all y coordinates for idle are 0 and for jump animation vertical y coordinate is 523 as we moved on to the second row in our sprite sheet now i can replace hardcoded number six here on line 40 with length of this location's arrays i access this location array by targeting sprite animations dot lock actually no i skipped one level i need to specify if i want location array for idle or jump let's just hard code idle here for a moment and i want length of this array remember i am just replacing hard coded number six that was here so dot length and that's it now it's dynamic i can add animations with 4 or 15 frames per row or however many i want and it will still work with no blank or left out animation frames here i am accessing sprite animations from line 14 idle location dot length inside animation loop we are still calculating frames using frame x and frame y variables from lines 10 and 11. we don't need these anymore because now we have the exact coordinates stored in locations array i delete lines 10 and 11. on line 40 i add let keyword in front of frame x and i will declare frame y variable here frame y is just the value we can see here so i can access it by saying sprite animations idle dot location at index position from line 39 dot y i could do the same thing for frame x or i can just leave it as is both will work let's replace idle with a jump it breaks notice that row 1 with idle animation was working and row 2 doesn't which suggests something is wrong with how we draw vertical position inside the draw image on line 43 i remove sprite width value from source y argument we don't need it anymore as frame y contains complete already calculated coordinate now i can go back inside animation states array and i add data for all the remaining animations it's important to understand that you can't skip rows here you have to go row by row from top to bottom to match your sprite sheet because vertical y coordinate is tied to index in for each method i add full animation with 9 frames run animation has 9 frames dizzy 11 frames seat has only 5 frames roll seven frames and so on i also need to make sure there is comma between every object if i try fall i can blink in there must be an empty frame full animation is actually only 7 frames if i put less here we play only part of animation if i put more here we get blinking because some frames are empty run animation works dizzy works seat animation works as well you can see seed animation has 5 frames and this animation has 11 frames and i can swap between them easily without having to manually change number of frames like we did before roll animation works byte animation works let's go back to idle putting hardcoded text here like this is not ideal of course i go up to line 10 and i create a variable called player state i set it to run initially down on line 71 and 73 i replace idle with this new player state variable now i can swap between animations here on line 10. so it works jump works full works in index html i create a new div with a class of controls inside there will be a select element with an id of animations and name animations label for animations will say choose animation i give it some options that match names we gave to animations in script js file in style css i target controls and i give it position absolute set index 10 top 50 pixels and transform translate x minus 50 to center it horizontally i take controls select and option and i increase their font size to 25 pixels i can also remove the border around my canvas i want animations to change when i choose different value in this drop down in script js i take player state from line 10 and i put it up top on line 1. i create a constant variable called dropdown and i point it towards this new select element with id of animations i take drop down and call add event listener on it i will listen for change event every time its value changes we will take player state from line 1 and since we are inside callback function on event listener we have access to event object i'm referring to it as e event object has target property target is simply referring to an element that was clicked and it has value property because i have added values myself whenever any of these option elements in my drop down is clicked player state variable will be set to its value attribute now i can easily swap between different animations in my sprite sheet just by selecting different options in a drop down parallax scrolling is when background images move past the camera slower than the foreground creating an illusion of depth in a 2d space this is what my game looks without it and this is what it looks with parallax which one do you prefer today we are learning about vanilla javascript game development for beginners and by the end of this video you will have deep understanding about endlessly scrolling backgrounds and how to add parallax effect to your games and websites when we have full control of individual layers we can match scroll speed to different actions our game character takes for example my dog character can sit down and the game stops moving or it can do this rolling attack and the game speeds up art assets for this episode were created by this amazing artist check out their website for more if you want what is the easiest way to create endlessly scrolling backgrounds how to make different layers move at different speeds to create parallax effect how to make scroll speed dynamics so we can easily change it we will learn all of that and more let's bring our coding skills one step further today together and have some fun with plain vanilla javascript this tutorial is for beginners let's go click the like please i create a basic web page markup in document head i use link tag to include my style css file we will use it to position canvas at the bottom of document body i place my script dark script.js file will contain all functionality and logic for our project i also create html canvas element with an id of canvas 1. it will be our main project area and we will draw on it with javascript in style css i take bodytalk and i set its background to black canvas will be set to position absolute border 3 pixels solid white width of 800 pixels height 700 pixels i do transform translate minus 50 for x axis and minus fifty percent for y axis and then i offset the top by fifty percent and left by fifty percent this will center my canvas in the middle of the page both vertically and horizontally in script.js i create a custom variable called canvas and i point it towards my html canvas element by id canvas 1. ctx shortcut for context will take this canvas variable from line 1 and it will call get context builtin method on it getcontext can only be called on a variable that holds a reference to canvas element and when i pass it argument that says 2d it will create an instance of builtin canvas 2d api object that contains all properties and drawing methods we will need today i need to make sure we have the correct scaling because if you don't set canvas width and height it will default to 300 x 150 pixels i create a variable i call canvas underscore with all capitals to make it clear it's a global variable i set it equal to canvas from line 1 dot width which will access with attribute on html canvas element we created in index html and i set all to 800 pixels the same value we gave canvas with in style css i do the same thing for height canvas underscore height is equal to canvas dot height is equal to 700 pixels this is how you set up most canvas projects now we have our drawing board ready and we can focus on building parallax effect i want the scroll speed to be dynamic tied to a variable so that in our game we can speed up or slow down using special moves with our character to control scrolling speed i will declare a global variable called gamespeed and i will initially set it to for example 5. notice i didn't use const keyword here i used let that keyword in javascript is used to declare variables that can be reassigned to different values later i will need this to be able to dynamically change scrolling speed it's time to bring images to the project art for this episode was created by this artist i really like his art style you can download them in the video description you can use these images for learning purposes for commercial projects you will have to purchase a full license from his website this effect will also work with any other image but maybe you first want to use the same files i'm using so that you get the same result and don't have to worry about calculating different width and height or making sure your layers match once you fully understand the code from today's lesson it will be easy to switch the images and adjust values so that the code base works with your own files the images are very large if you experience any lagging or frame drops making images smaller will significantly improve performance i kept them large on purpose so that we get nice clean visuals but especially if you are creating a mobile game these images can be much smaller you can download the project files in the video description our background will have 5 layers it is perfect to demonstrate seamless parallax scrolling for games this is one of my favorite 2d game artists if you want you can go and check out his website i will leave a link in the video description he offers some free art assets you can play with and used in your games but if you want something a bit more special his prices are very affordable there aren't many 2d game artists out there so if you can help me out to support them and buy some of their assets for your projects it will help us to make our games unique and by purchasing from and supporting our artists they can make more beautiful game assets for us to bring image into our canvas project is very simple with javascript i create a constant variable called background layer 1 and i set it equal to new image this is built in image class constructor it simply creates an image element we can use append child built in javascript method and it would slot image tag img tag into our html file same as if we wrote that dark in index html ourselves we can also choose not to append it and it will stay hidden and it will just store the image for us image constructor has the same functionality as the document.createelement img we are simply creating html image element and saving it in this variable at first that image element is blank so i access its source property and i set it equal to layer 1.png for you the path might be different depending on how you structured your project files and folders i left my image files in the same folder with my script file for now we have 5 layers 5 different images so let's do the same thing for all of them to bring them into the project let's create animation loop i create a custom function called for example animate it will contain all the code i need to draw my backgrounds i will be calling it over and over to create animation let's start by calling image built in canvas method this method will take image and it will draw it on canvas the first argument i pass it is the image i want to draw so background layer 1 from line 7. i want to draw it at coordinates 0 0 so from the top left corner of canvas then i call build in the request animation frame function and i pass it animate the name of its parent function from line 18. this way animate will run over and over creating my animation loop on line 19 i need to call draw image from my ctx variable from line 2. background layer 1 image is not the best one to use as an example let's try layer two layer three four five let's do this at first with layer four to see exactly what's going on and then we can throw in all the other layers it looks like a static image but it's actually animating over and over let me show you on line 18 i create a variable called x and i set it to 0. on line 21 inside draw image method i replace hardcoded0 with this x variable and every time animation loop runs i decrease x by 1. this will make our image move to the left in a negative direction on horizontal xaxis the reason the image is being smudged like this is because we can see all previous frames we can see old paint if we want to see only the current animation frame we need to delete old paint i use built in clear rectangle method it expects four arguments to determine what part of canvas i want to delete i want to clear the entire canvas so from coordinates to 0 0 to canvas width canvas height now old paint is being deleted and we can only see the current animation frame image is moving to the left by 1 pixel per frame on line 5 we declare the gamespeed variable so down here on line 23 i can say x minus equals gamespeed and now scrolling of our game is attached to this gamespeed variable if i do 15 it moves much faster as you can see the background just moves endlessly to the left and eventually it leaves canvas empty these images were specifically crafted for endlessly scrolling games and they are seamless it means you can stack them next to each other and it will look like it's one repeating image i need to somehow detect when my image has moved off screen and i need to reset it so it can scroll again let's try it what if i say if x is less than minus 1000 pixels set it back to zero else x minus equals game speed i increase game speed to 15 here on line 5. you can see the image is reset in but we can clearly see the jump when the reset happens let's try 1600 on line 23 still it jumps i know that images we are using today are 2 400 pixels wide so what if i use 2400 pixels here and i also reset x to 2400 now we have this image that is 2400 pixels wide scrolling endlessly over the canvas and there is this black empty space that is also 2 400 pixels wide the trick people use is to simply draw the same image twice and always reset it the one that has moved off screen so that it's available to scroll again and canvas is never empty i will show you exactly what's going on using two separate x variables one for each image and then we will optimize it once we fully understand what's going on on line 18 i have x variable which will serve as horizontal position for one of my background images i will create variable i call for example x2 that's for the position of my second identical image x will start at position 0 and on lines 24 and 25 i have my reset checks to make sure it cycles around endlessly x2 will start where the first image ends since my images are 2400 pixels wide x2 will be 2400 images we are using today are very large you might experience frame drops and login if you do you can make them smaller but maybe if you can just follow along with me till the end and then refactor your code and image files for performance just to make sure we are looking at the same numbers at first it makes it easier for you to debug your code if it's the same as mine once you fully understand this technique you can use it for any image size and any scroll direction your game needs on line 24 i just call draw image again for the same identical image but instead of drawing it at position x from line 18 we will draw it at position x 2 from line 19 like this i also need to reset x2 the same way i'm resetting x this is so called spaghetti code we have some code repetition here and it doesn't look very clean yet i'm just doing it for complete clarity to show you what's going on we will refactor it later you will notice we have one problem when we do it this way but don't worry we will optimize it and fix everything i want even beginners to understand now i can see some frame drops because my images are large but i only see it on my screen recording software it still runs smooth in my browser don't worry about the frame drops at this stage it can be easily fixed by making our images smaller let's focus on the code first and make sure we understand it you might notice there is a gap between my images what's happening now i have image 1 drawn at position x from line 18 and i have image 2 drawn at position x2 from line 19. the problem with this technique is that my images ignore each other they reset based on two different variables x and x2 these variables are completely disconnected so if width of my image is not divisible by gamespeed variable it can actually happen that this gap between images will grow larger or smaller over time and we really don't want that we want endlessly scrolling seamless background let's deal with it step by step so what's this gap between my images why is it there and how do i offset my images to get rid of it part of the gap is my game speed because these if statements that reset x and x2 happen independently of each other we have situations where x resets and x2 will move 15 pixels to the left for that frame 15 pixels because that's what my gamespeed variable is set to on line 5 at the moment they never reset at the same time because one of them is always visible on canvas so when x resets image 1 resets on line 25 or when x2 image 2 resets on line 27 i need to offset the other one by the amount of game speed to account for the fact that for that frame the other image kept moving while the other one was reset in gap is smaller now but there is still a gap game speed is 15 pixels per frame and my images reset when their x position is less than minus 2 2400 so unless 2400 which is my image width is divisible by the current speed with no remainder there will always be some leftover pixels creating a gap this gap could even grow larger and larger as the scrolling and resetting continues some people deal with it by only allowing their game speed to be certain values so that image width is always divisible by game speed without any remainder but we don't want this limitation we want our game speed to be fully dynamic maybe you want your game to slowly go faster and faster as player progresses to more and more difficult levels or maybe you want to have special moves in your game and when player performs these moves you want them to affect speed of scrolling like i do with this role attack for example to do this we just need to make sure that our x and x2 reset statements check position of the other image before they reset and they offset its new position based on the current position of the other image that way even when gap is somehow created it auto corrects itself next time around during the next reset i do it by accounting for the current x2 position in my x reset check on line 25 and i account for current x position in my x2 reset check on line 27. keep in mind that when these reset checks happen x or x2 are small numbers somewhere around 0 at that point this might be a bit tricky to visualize and i know that some of you are already saying frank what are you doing there is much simpler way to reset endlessly scrolling backgrounds using just one variable there is no need for this x2 variable there is no need for all this offsetting by speed and position of the other image to synchronize them it can be done with much less code and it is so simple and if you already realize that well done you are good let me know in the comments if you are one of those people i went through all of this to show you my process and to actually show you how it works i didn't realize it can be done with one variable until i got to this stage when i was building the initial prototype also i think everything we have done so far is really good for beginners to see what's going on and how this trick is achieved we will clean this all up and optimize everything but before we do that let's animate all layers and make them move at different speeds parallax effect is when foreground layer moves faster than the background layer it creates kind of a 3d effect illusion of depth in a 2d space it can be used in games but it also looks really nice on websites in our project we will have 5 layers 5 images and i want each one to move at a different speed at the same time i want all the layers to be tied to the same gamespeed variable so that when player performs special move for example the speed of all five layers is affected proportionately how do we do that let me show you first let's check if all five layers are animated correctly everything is working perfect so how do i animate all of these layers at the same time i guess i could just copy draw image on lines 23 and 24 and duplicate it for all 5 layers then i would have to create a separate reset checks for their x and x 2 positions to make sure they scroll at the different speeds it's possible to do that but there will be a lot of code repetition let's do it in a clean way i delete x and x2 variable from line 18 and 19 i also delete all this code between lines 20 and 25. i will use javascript classes to create a blueprint for a layer object then i create five instances of that layer class one for each of my five layers i will put all of them inside an array and i will be cycling through that array to update and draw them it might sound complicated if you never used the javascript classes before but don't worry i will explain everything it's actually quite simple javascript classes are used when you want to create many similar objects in our case we will create five image layer objects javascript class is a blueprint i will define it and then whenever i call it it will create one instance of that object based on my custom blueprint when i say it creates similar objects i mean these layer objects will have shared properties and methods but some of the properties will have different values they will all have the same width of 2400 pixels each layer object will also have image and speed property but each layer will have different image assigned to it and different speed value that's what it means when i say similar same properties but maybe different values let me show you how simple it is step by step we define class by using class keyword followed by custom name of that class starting with a capital letter i will call my custom class layer for example each javascript class has one mandatory method called constructor in objectoriented programming when you say method all it means is function attached to an object method is just a function so this special mandatory constructor method has only one job whenever our class is called later constructor will trigger itself it will create one new blank object and it will assign values and properties to that new blank object based on blueprint inside the constructor constructor runs only once per object every time javascript class is called using the new keyword i will show you in a minute my constructor will expect two arguments image we want to assign to that layer and speed modifier because i want each layer to scroll at slightly different speed we will pass these arguments from the outside when we create our five layer objects i will show you in a minute for now let's finish our blueprint the syntax might be a bit strange for you if you are new to object oriented programming each layer object will have horizontal x coordinate that starts at position 0. i say this dot x because my layer class will create many similar objects so i'm saying here on line 20 set x property on this particular object you are creating right now to zero because we are inside blueprint that will trigger every time we call our class to create an object i will also have vertical y coordinate that will be set to zero all our layers will have the same width of 2400 pixels height will be 700 pixels for all my layers x2 coordinate will be where we draw the second image the second image needs to start where my first image ends so at the horizontal position 2400 pixels i know i said we could do this without x2 property using just one variable let me just recreate what we had before as a class and then we optimize it together i want to do this step by step for clarity this dot image equals image this declaration is a bit different what i'm doing here i'm telling my constructor create property called image on this new object you are creating right now and set it to image we pass as argument on line 19. i will show you how to pass arguments to constructor when the class is complete i will do the same now with this dot speed modifier it equals the speed modifier passed on line 19 as an argument to my class constructor this dot speed will be how fast is my image layer moving i will calculate it by taking my global game speed variable and i multiplied times this dot speed modifier from line 26 doing this will allow me to pass different speed modifier value for each of my five layers and that way each layer will move at a different speed but it will still be tied to my global game speed you will see in a minute my layer object will also have access to custom method i call for example update its job will be to move layers horizontally by changing their disk dot x and this dot x2 properties from lines 20 and 24 and it will reset them when the layers move off screen the same way we did it before we are doing the same thing we had before but this time we are wrapping it in a reusable class syntax so that we can do all of this at the same time for all 5 layers we will also have a method i call for example draw its job will be to take information about this layer object and to draw it on canvas every time update method runs to change horizontal x position draw will run again to redraw the image after the new position to make sure my game speed is dynamic and always reacting to the current value of my global gamespeed variable from line 10 i need to recalculate this dot speed like this if you want your game to have a constant never changing scrolling speed you don't need to do this line of code now i just say if this dot x from line 20 is less or equal to minus this dot width from line 22 so minus 2 400 pixels then set this.x to this dot width plus offset it by the current position of my x2 minus this.speed i'm just recreating the same thing we did before i explained why i'm offsetting it by x2 and speed it is to make sure there is no gap between my images i copy this entire code block and i do the same thing for this dot x2 property from line 24. so this.x needs to be offset by the current value of x2 and this.x2 needs to be offset by the current value of this dot x if they are not resetting i just want my x property to decrease by the amount of this dot speed from line 27 to make my background layer move to the left i will wrap it in method floor to make sure we have no decimal points in there not sure if this is a good idea let's see a bit later i do the same thing for this.x2 this can be optimized and simplified and we will do it in a minute now i can take this newly updated x and x2 coordinates and i draw two identical images next to each other like we did before so draw image built in canvas method i pass it distort image from line 25 this dot x and this dot y this dot width and distort height then i draw the same image but i will draw it at this.x2 horizontal coordinate like we did before and that's it layer class is complete we have a blueprint inside the constructor and my layer objects have access to custom update and draw methods now i can create a new constant variable i call for example layer 4 and i set it equal to new layer like this the new keyword is a special command in javascript it will look for class with that name in our code and it will trigger its constructor on line 19 i can see that my layer constructor expects two arguments image and speed modifier i need to pass them here when i'm creating an instance of my class so i will pass it background layer 4 variable as image and speed modifier will be maybe 0.5 i want this layer to be moving at half of my game speed so if my game speed is 10 pixels this layer will be moving at 5 pixels per frame let's test it so here on line 46 i call my layer class constructor from line 19. it created one new blank object for me and assigned it properties and values i defined in my blueprint between lines 20 and 27 then it saved that new layer object inside this layer 4 variable so this is how you create an instance of your custom javascript class as we know my layer class has access to update method from line 29 and to draw method from line 40. i can just go inside my animation loop i can take layer 4 variable from line 46 and i can call update and draw on it like this and here we go we refactored our image layers into javascript class and now it's very easy to work with it i can pass it different speed modifier on line 46 to make it move at a different speed that speed is still relative to my global game speed variable from line 5 because i keep track of that on line 30 inside update method i create variables for all my five layers i will pass different images to each one i could just call their update and draw methods by duplicating lines 54 and 55 like this now i'm drawing layer 4 and layer 5 but there would be a lot of code repetition if i did it for all 5 layers if i change speed modifier value i pass the layer class constructor on line 50 you can see their relative speed changes and we have parallax effect awesome it is because that speed modifier takes game speed and adjusts it by multiplying game speed from line 5 times this modifier value at first it happens on line 27 when the new object is created then it happens on line 30 whenever update method runs to make sure we can change global game speed dynamically which we will do in a minute then we are just using this dot speed property to recalculate horizontal x position of our background images here on lines 37 and 38 and this is how you make your layers scroll at different speeds but still tie them together by using global game speed variable inside my animation loop i can just call update and draw for all five layer objects but i don't want any code repetition i create a new variable i call for example game objects and i set it equal to an array i put layer one variable from line 46 in there layer two three four five now i have all five layers inside a single array so on line 56 i take this game objects array and i call built in for each array method for each method we'll simply run through all elements in the array and it will apply whatever callback function i give it to each of these elements each of the layers first i need to declare how i want to refer to individual objects in game objects array within my for each callback i will refer to them as object for example i'm doing es6 arrow function syntax here where you can omit function keyword so for each layer object in my game objects array i will call their associated update and draw methods like this here we go we are drawing all five layers now awesome let's pass each layer a different speed modifier to create proper parallax effect 0.2 0.4 0.6 0.8 and 1. now each layer moves at different speed but they are all still relative to our global game speed variable from line 5. if i change global game speed variable it will affect all 5 image layers proportionately because their speed is calculated by multiplying game speed times speed modifier if you get any frame drops at this point it is because we are using 5 images that are 2 400 x 700 pixels you will get much better performance if you make the images smaller in photoshop or some other graphics editor as you can see i can change my game speed to any value and parallax background will still scroll based on that i want to allow my users to easily change scroll speed in index html i create a div with an id of container inside i will have paragraph tag that will say gamespeed colon and span element with an id of show game speed this will show real time value of gamespeed variable i create html input element with type properties set to range min value will be 0 max value will be 20 starting value will be 5 class will be slider for example and id slider as well i put html canvas element inside the container in style css i take container i give it position absolute with 800 pixels i center it in the middle of the page using transform translate i set canvas to position relative so that it aligns with container i put border on the container so we see where it is input with an id of slider will have width of hundred percent text color white okay that doesn't work i take paragraph tag and i move text color there on container i set font size to 25 pixels and i remove border in script js i create a new constant variable i call for example slider and i point javascript towards my new slider element with getelementbyid on the first page load i will set slider value property which is here to gamespeed variable from line 5. then i take hold of this span element with id of showgamespeed and i save it in a variable i call showgamespeed as well on the first page load i set its inner html equal to the current value of gamespeed variable from line 5. if i change value of gamespeed and reload page you can see it works now i want to change scrolling speed of my layers when i click this slider to do that i need to connect it to gamespeed variable from line 5. on line 22 i take slider from line 18 and i call at event listener we will listen for change event and in callback function whenever change event occurs on the slider which means whenever user clicks on it to change its value i will run some code callback function on event listener has access to its builtin event object i will refer to it as e here i can refer to it however i want javascript knows that the first argument passed the callback function on event listener refers to this builtin event object if i console this e you can see it gets console locked every time change event occurs on slider and it contains a lot of useful information about that event right now i'm interested in its target property which references target of this change event which is html input element with an id of slider when it gives me that i can access its current value attribute which is exactly what i need if i console.log e.target.value it will give me the current value of this slider input element i set minimum value to 0 and maximum to 20 here all i have to do now is take gamespeed variable from line 5 and i set it equal to e dot target.value like this and i will also update innerhtml in showgamespeedspan so that it displays the correct current speed for us now i can change scroll speed of my layers by clicking on slider if i change it to max 50 we can get it to scroll really fast i hope your computer can handle that these images are too large let's set max value back to 20. you probably already realized earlier that we don't need to have this.x2 property here online 33 and we can calculate position of both images using just this dot x that way we don't need to have two separate reset checks here and since everything is coming from just one variable we don't need to do all this complicated offsetting we did earlier because we don't need to make sure x and x2 are synchronized if you want little challenge pause the video right now and try to refactor update method yourself by deleting all references to this.x2 and using only this.x to calculate positions of both images if you don't know how to do it don't worry i also didn't realize it at first until i started working on this tutorial i comment out line 33 on line 51 inside draw image method i replace this.x2 with this.x from 929 i comment out this if statement and also this line 48 i remove reference to this.x2 since i'm using this.x for both images on line 51 and 52 you can see our parallax has gap again this time a big gap lucky for us it's very simple fix on line 52 i set horizontal x coordinate to this dot x from line 29 plus this dot width from line 31. that doesn't quite fix it yet as you can see i also have to look at my if statement on line 40. if this dot x is less or equal to minus this dot with minus 2 400 pixels set this dot x back to zero if you don't understand what is happening right now look at this i have one image drawn at position x which starts at 0 and the second image is drawn at position x plus width these images sit next to each other and scroll to the left together like this when the first image moves past the left edge of canvas the second image is there to fill the gap and make it look seamless when the right edge of the first image hits the left edge of canvas at the same time digital x is minus 2400 pixels because my image is 2400 pixels wide we will trigger reset it will just jump back here and start scrolling again the first method was controlling xcoordinate for these two images separately by using this.x and this.x2 variables we had to make sure it synchronizes correctly both images were moving independently and i was offsetting them by their scroll speed and by the current horizontal position of the other image to make sure they stayed aligned this is just a visual representation of what was happening of course the transition itself where the image resets after leaving the screen was happening instantly more like this this second improved technique uses just one variable to move images horizontally this image is at position this dot x and the position of the second image is calculated from that by adding this dot x plus this dot width the second image is always 2 400 pixels to the right of the first image this way they will always be synchronized since the position of both images is coming from the same variable as you can see the movement is different now we never actually fully see the second image anymore we just see this small part that pops in place so that it looks like it's one long seamless image again the transition the reset where the images move to the right to start from their original position happens very fast it happens instantly so we jump from this to this and that makes it look like it's just one seamless movement we can also calculate position x differently i can create game frame variable and i set it to 0. then in my animation loop here on line 65 i increase game frame by 1 for every animation frame this way we have a number that is endlessly increasing now i can replace this if statement on line 40 with a different calculation when i remove this if statement completely the backgrounds no longer reset when they leave the screen i also comment outline 43 and i can replace all of this with just one line of code i say this.x from 930 is equal to game frame variable we just created and i use remainder operator and this dot width from line 32 this.width is currently 2400 pixels and game frame is endlessly increase in number this calculation will make sure this dot x cycles endlessly between 0 and the value of this.width between 0 and 2400 pixels which will have the same effect as we had before oh it will go to the right i need to do game frame minus minus or 966 that's better but now all our layers are moving at the same speed i need to factor in this dot speed for line 36 in this calculation on line 44. this dot x equals to game frame times this.speed modulus this.width now we have the same parallax effect this one line of javascript replaced all the code between lines 40 and 43. i don't think it's very clear and easy to see what's happening on line 44 just by looking at it i really have to use my brain and remind myself how modulus operator works to understand why it's cycling between 0 and this dot width i did a complete breakdown of this technique in my sprite animation video i will link it in the video description i'm not going to explain this calculation all over again i don't think we need to understand this line because it has one disadvantage when compared to the code i had previously on lines 4043 look when i change scrolling speed the position of background jumps somewhere else because we aren't gradually increasing this.x like we did before we are recalculating that value completely every time gamespeed changes clicking this input slider changes gamespeed global variable changing gamespeed affects this.speed because of line 39 and this.speed changes value of this.x on line 44. if you know how to use this technique to make it seamless without jumps in horizontal position when i change game speed let me know please i'm sure there is some smart way to do it i played with it for a while and i couldn't work it out do you see how the background jumps every time i change game speed let's comment out these lines so that we can compare it when using the original technique horizontal position transitions smoothly without jumps and that is exactly what i want i need to be able to change my scrolling speed dynamically because i want the scroll speed of my game to change when a character performs special moves like roll or set let's comment out line 66 since we decided not to use this technique and i also comment outline 6. our images are large it works well because i'm running my code locally if this code base was hosted somewhere online we need to make sure all images and html elements on my page are fully loaded before we start the game on line 19 i take browser window object and i call add event listener on it i listen for load event in callback function when the page is fully loaded only then i will run all this code that depends on images canvas and slider element to be properly loaded and available in this video we will build four small projects completely from scratch we will learn how to generate groups of animated computer controlled characters for our games and we will explore four different movement animation patterns i went to the forest and i caught some dangerous magical creatures for you today we will study them and learn how they move some of them have wings some of them spin around and some just float in the air it will be interesting to explore their movement patterns this is creative coating tutorial for beginners let's learn fundamental vanilla javascript principles and techniques by building fun projects together hope you get a lot of value today art for this episode was made by this amazing artist go check out his website if you want to see more we will cover 4 different movement animation techniques and by the end of this video you will have 4 complete projects and you will be able to introduce a variety of different enemies and movement patterns to your personal javascript games sometimes we tend to make our games too easy and predictable let's give our players some challenge by including different enemy types i create a simple web page markup i give it some title i link style css file in document head we will draw everything on canvas so i create it here and i give it id canvas 1 so that we can target it with css and javascript later i also link my script.js file which will contain all animation logic in the style css i take my canvas element i just created and i want to give it some border size and i want to center it in the middle of the page so border 3 pixels solid black position absolute top 50 percent left fifty percent transform translate minus fifty percent minus fifty percent now it's in the middle let's make it vertical so height thousand pixels width will be for example 500 pixels everything else will be drawn with code in script js file this is a beginner tutorial so don't worry i will take you through it step by step as with every canvas project i need to point javascript towards my canvas element we just created in index.html i do it by using getelementbyid and i pass it id i gave my canvas element canvas1 like this ctx shortcut for context is equal to canvas dot get context and i pass it 2d we will use a builtin set of 2d drawing methods today now i can call all these builtin methods from my ctx variable if i type ctx dot like this you can see that in vs code editor my autocomplete feature doesn't suggest any built in canvas methods if i want them to be suggested i can go up to line 1 and type add type html canvas element like this this way i tell vs code this is a canvas project and it will suggest builtin html canvas methods for me you can see arc method here to draw a circle clear rectangle to delete paint from canvas and so on we will use some of these in a minute when we start drawing and animating but first let's quickly finish canvas setup we need to set canvas width and height to make sure we get correct scaling of our drawings so i create a custom global variable called canvas underscore width i set it equal to canvas from line 2 dot with and i set it all equal to 500. canvas underscore height is canvas dot height is equal to thousand these values need to be the same i gave it in style css i want to create a factory function that will produce many similar objects for me each of these objects will be one animated enemy before we create many enemies let's just build one and make it absolutely clear for beginners what's going on when we have that it's easy to scale it up i will create a temporary enemy1 variable and i set it equal to javascript object i give it x and y properties and i set them to zero these will represent horizontal and vertical coordinate on canvas where we draw that enemy i will also give it width of 200 pixels and height of 200 pixels like this so now i have this simple javascript object that is storing position and size of one enemy let's animate it to create animation loop i like to write a custom function i call for example animate inside i call build in fill rectangle method this method expects x y width and height of the rectangle we want to draw so i will give it x y with a height of this anime object when i call animate like this we are drawing a black rectangle representing the enemy object i can change its values and when i refresh the page it will be reflected on canvas we are not animating yet what if i want the horizontal x position to be slowly increasing to make the enemy travel to the right i can say for each run of animation loop increase enemy1.x property from line 8 by 1. to create animation loop i call builtin request animation frame method i pass it animate now animate will run all its code and then it will call itself again this will create an endless animation loop i also need to delete old paint previous frames from canvas i do it by using built in clear rectangle method and i clear canvas from coordinates 0 0 to canvas with canvas height now we see only the current animation frame i can also increase vertical y position by 1 for every frame so we get movement towards bottom right like this i can change width and height of my enemy easily you get the idea i think let's comment out this temporary enemy object and make it into a javascript class so that we can generate a large number of enemies at once javascript class is kind of a template to create many similar object it's a factory and every time we ask it it will produce one new object for us based on a blueprint we give it classes are new syntax for older javascript prototypes under the hood is the same thing it's just socalled syntactical sugar simpler nicer way to do the same thing classes are very easy and intuitive let me show you we use class keyword and then we name our class starting with a capital letter my class will be called nme constructor is a mandatory method every class must have it will contain a blueprint based on which every enemy object will be created so here in constructor i just give it x y width and height same as we had in this simple enemy object on line 7. the syntax might be a bit strange at first here i'm telling my constructor on this new enemy object you are creating right now give it property called x and set it equal to 10 pixels starting vertical y coordinate will be 50 pixels width will be 100 pixels and height 100 as well so this is how you recreate single javascript object into a reusable class now we can call our enemy class as many times as we want and each time it will generate one new enemy for us based on a blueprint inside constructor method between lines 16 to 19. i can delete the old code and now these variables are undefined because anyone doesn't exist so i create a new constant variable called anime1 again and i set it equal to an instance of my new anime class to do that i use the new keyword followed by a class name the new keyword will simply look at that class name in my code it will enter its constructor it will create one new blank javascript object and it will assign it values and properties based on a blueprint inside the constructor now my fill rectangle method online 21 can use these values again to display a rectangle what if i want another enemy i can create another variable called enemy2 and i set it to new enemy again inside animation loop i take nma2 and i increase its x and y coordinates as well and on line 25 i need to draw another rectangle representing that enemy like this they're moving at the same speed in the same direction so we can't see the second one let's adjust its speed for example now we can see that there are two of them we can control them separately like this but this wouldn't be very efficient if we had let's say 50 or even 500 enemies so how do we make this code better and remove repetition first let's output this code between lines 21 and 24 that handles movement along x and y axis into a shared class method that way we can write this code only once and it will be available to all objects created by enemy class i will call that custom function for example update and as i said its job will be to update coordinates of my objects it will handle position calculation and movement so inside i say for every frame increase x by one and also increase y by one let's delete all this code and to run update method i just created all i have to do is call anyone dot update like this since anime1 object was created here on line 19 as an instance of my enemy class from line 7 it automatically has access to this new update class method from line 14. i also need to remove line 25 so now we put all movement calculation functionality into this update method i also want to put this drawing code into its separate method so that we can draw all enemies at the same time we can also give them animated sprites and so on i will show you in a minute on line 18 i create a custom draw method inside i call ctx fill rectangle the same way we did here on line 27 but instead of hardcoding enemy1 object here like this i will use this keyword that way this method will be reusable and can animate not only enemy 1 but also anime 2 enemy 10 and m800 it can animate all the enemies created by this class at once on line 27 i can replace these hardcoded values with anime1.draw it will look the same but now it's reusable and scalable inside constructor between lines 9 and 12 all enemies start at the same x and y coordinates so if i create 50 enemies they would all stuck on top of each other and wouldn't be visible let's randomize that every time i create a new enemy its horizontal x coordinate will be a random number between zero and canvas width and vertical y coordinate will be a random number between zero and canvas height now every time i refresh page my enemy appears at a different position i could also randomize width and height if i wanted to to make each enemy random size i think you get the idea so how do i create many enemies instead of just one i comment out line 22 and i create a for loop this for loop will run for example 100 times actually let's go up to line 6 and create a constant variable called the number of enemies and i set it to 100 and i replace hardcoded 100 on line 24 with this new variable that's better we shouldn't be hardcoding values if we can avoid it i want this for loop to run 100 times and create 100 enemies for me using my custom anime class but how do i store all these anime objects and their properties such as their x and y values i can for example go up here to line 7 and create a custom variable called enemies array and i set it equal to an empty array down here on line 26 i take that enemies array and i call build in array push method push method will just take whatever we pass to it and it will push it to the end of the array i pass it new enemy every time this for loop runs and it will run 100 times it will create one new anime using my enemy class constructor and it will push that new enemy into enemies array it's the same as we did with anime 1 on line 24 but here we are doing it 100 times let's delete line 24 i also have to comment outlines 31 and 32 because anime one variable doesn't exist anymore how do i access all these hundred objects i just pushed into my enemies array and how do i trigger their update and draw methods one by one so that they can be animated on canvas first let's console.log enemy's array to make sure that for loop on line 25 did its job and filled it with hundred objects in console i can see we have hundred enemies and each one has randomized x and y coordinate perfect so as i said the goal now is to cycle through all hundred enemy objects inside enemies array and to trigger their update and draw methods this will need to happen for every animation frame over and over because we need update method to constantly recalculate enemy position and a draw method to draw them at that new position on line 33 inside animation loop i take enemies array that contains my hundred objects and i call builtin array for each method for each simply calls providedcallback function for each element in the array i will use new es6 syntax with arrow function here inside my for each callback refer to each individual object as enemy as you cycle through enemies array and for each of these objects call their associated draw method and also their update method like this perfect you can see that each rectangle appears at randomized x position and they all move in the same direction because of lines 17 and 18. what if my enemy had randomized speed i create a new property called this.speed and i set it equal to a random number between minus two and plus two because i want some of them to go to the left and some of them to go to the right if you find it hard to read this line of code as a random number between 2 and plus 2. think of it this way this part of code generates a random number in this range so between 0 and 4 and this number sets the start of that range so we are generating a random number between 0 and 4 but we are pushing that range to start from 2 so result we get is a random number between minus 2 and plus 2. i remember i always found math at random very unintuitive until i found a better way to think of it anyway now i have this top speed property and i can replace it here on line 18 for horizontal position and also on line 19 for vertical position now you can see we have rectangles moving in many different directions i delete code on line 29 and also on lines 32 and 33. on line 21 inside draw method our enemies don't have to be represented by black rectangle we can write any drawing code here and it will be called and replicated for all enemies at once i can for example try stroke rectangle instead we can also draw circles stars you can put selfies from your holidays to represent each enemy object here we have complete flexibility what i want to do here is to create animated creatures because we want these to be enemies for our javascript games with this video we are giving away 4 different animated enemies drawn by this amazing artist go check out his website for more content he is very talented he allowed me to share this prize with you for educational purposes for free you can download them in the video description and you can also find link to his website there if you want to use these sprites for commercial purposes you would have to go to his website and buy a full license they are free only for purposes of this educational video show him some support if you can we don't have many good 2d artists like this if we support them they will be able to create more beautiful game art assets for us today we will create four different projects each one will have different enemy with a different movement pattern and on each one we will demonstrate different beginnerfriendly movement animation technique i want you to always have a nice complete project at the end of my videos so that you have something to show to your friends or on your coding portfolio it feels good to complete something don't you think you can use these as animated backgrounds or a screensaver or you can take this code and slot it into your personal games it will be compatible with my previous games if you follow these tutorials let's start with a very simple one the first project will have baths flying in random jumpy patterns perfect for halloween game or even a website for example i'll leave the creative applications of this on you first i need to bring new image into my javascript project to do it i create a custom variable called anime image and i set it equal to new image animeimage.src is equal to enemy1.png if you are using the same spritesheet i am using it might be a good idea to use the same files at first and follow along and once you understand the code it's easy to adjust it and to use your own custom images on line 26 inside the draw method i call built in draw image canvas method we will use it to animate our butt sprite sheet i will explain sprite animation quickly as i code but if you need more detailed explanation i made a special video where i focus on it in depth i will link it in the video description ctx dot draw image and i pass it image i want to draw and i pass it x and y coordinates and this is what we get we can also pass it optional with and height arguments which will scale the entire image into that specified size you can see it pushes the entire sprite sheet with all six frames inside the rectangle we don't really want that we only want to crop out one frame at a time and we want to be jumping by the amount of sprite width to the right to display the next sprite frame we want to go frame by frame from left to right until we reach the last frame then we want to jump back to the first one and start again we can do this with the draw image method because it offers additional four optional arguments we can pass to it let's go up inside anime constructor to create property called sprite width i check my sprite sheet divide its width by the number of frames and i can see that width of a single frame is 293 pixels sprite height of this particular sprite sheet is pixels now let's add additional four arguments to draw image method to tell it what area we want to crop out from this sprite sheet to display only one frame let's start by displaying just frame one so i want to crop out area from coordinates 0 0 to coordinates sprite with sprite height now we are drawing just frame 1. so in this version of draw image method we are passing it nine arguments in total the first is the image we want to draw the next four represent the area we want to crop out from the source sprite sheet and these last four arguments determine where on canvas we want to place that cropped out frame onto you can see my pads are slightly distorted because i am stretching them to fit this.width and this dot height here which are unrelated to the actual dimensions of my butt enemy character ideally i want to preserve the aspect ratio so i make width and height relative to the sprite size i take width and height and i move them to go after sprite width and sprite height so that they can see these values now i can make width one third of sprite width and height one third of sprite height now our bytes are the correct ratio maybe i want to make them a bit larger let's try 2.5 that's better right now we are displaying only frame 1 because of these hardcoded 00 coordinates let's cycle through all frames and animate our characters on enemy class i need a new property called this dot frame and i set it to 0. on line 30 instead of hard coding horizontal coordinate 0 which will give us this frame i will take this dot frame variable and i multiply it times this dot sprite width that way when frame is 0 we display this frame when it's 1 we display this frame 2 3 and so on so now all i have to do is that frame cycles between this and this frame between 0 and 5. i will use es6 ternary operator which is a simple one line if else statement basically i say if this dot frame is more than four question mark set this dot frame back to zero else colon increase frame by one this dot frame plus plus this should be colon our buds are flapping their wings and animating but they flap very fast and all of them flap at the same time let's fix that there's a proper way to time animation frames using request animation frame and delta time and i will show you how to do that in some other video today let's slow down our animation the simplest way possible on line 11 i create a variable called a game frame and i set it equal to zero inside animation loop on line 46 i increase game frame by 1 for every loop and up on line 28 inside update method i say if this ever increasing game frame variable is divisible by let's say 2 with a remainder of 0 only then serve a new animation frame this line simply means run this code only every 2 loops of main animation loop if you are getting a little unsure i made a special sprite animation video where i go in depth and slowly over all of this for now let's just move on and focus on movement patterns now bats animate slower but they all still move their wings at the same time in the same rhythm i want to randomize their animation frequency i create a custom property called for example flap speed and i set it equal to random number between 1 and 4. i replace hard coded 2 on line 29 with this randomized flap speed value this will make some of them animate very quickly some of them slower some will animate every one or two or three or four frames it will be randomized the reason it doesn't work is because math at random returns numbers with the decimal point so game frame is never divisible by that very specific number with a remainder of 0 and frames never increase to fix that i just need to wrap it in math.floor now some bats flap their wings slower and some do it very fast i will remove the stroke rectangle i can also take enemy image variable from line 9 and actually make it a property on javascript class like this this dot image equals new image this dot image src source is nma1png i delete that and inside draw image on line 34 i refer to this dot image in stat by changing value of number of enemies on line 6 we get a different number of bots in our project currently our buds just fly away from canvas and never come back we don't really want that let's create the first simplest movement pattern which will simply be just randomized jumpy chaotic movement i comment out this dot speed on line 17 and on line 26 i replace it with math at random times 3. i do the same with this.y on line 27 since we are adding positive numbers to x and y all bats are going to leave canvas like this how about we tried a random number between minus 1.5 and plus 1.5 now they kind of stay in place and just wiggle around we can increase their wiggle by giving this random number a larger range for example between plus 2.5 and minus 2.5 i can see that my initial enemy x and y coordinates are not 100 within canvas let's adjust line 15 like this and since i'm using this.width here i need to move it after this.weight has been declared now they initially spawn within canvas horizontally these brackets are important look what happens when i remove them they just start from minus distort width which is wrong these brackets need to be here let's do the same thing vertically for this dot y i reduce the number of enemies to 100 or 10. let's make the range much larger on line 26 between minus 7.5 and plus 7.5 i can just play with these values and get the random simple jumping movement this is the simplest way you can animate enemy characters or npcs for your javascript games we will do three more adding a little bit more complexity each time let's see what comes out of that i will be expanding deleting and adjusting the same code base so if you want maybe it's a good idea to create a copy of this project at this stage so you have this movement pattern saved in case you want to use it for your games later i will be using different enemies spreadsheet and different movement pattern for the next one i hope you're having fun for the second movement pattern we will do something a bit different first let's switch to a different sprite sheet here on line 14. i will use image i called enemy2 png it's different size so i have to change sprite width and sprite height sprite width is 266 pixels and sprite height is 188 pixels i uncomment this dot speed on line 15 and i give each game character a random speed between 1 and 5 pixels per frame for example on line 26 i set this.x to be equal to minus this dot speed if i comment out why we can see that bats just fly to the left in a straight horizontal line and they never come back let's first do a reset check if this dot x from line 20 plus this dot width from line 18 is less than zero meaning when the character moved behind the left edge of canvas and is completely hidden that's why i included this dot width here when that happens i want its horizontal x position to be reset back to canvas width moving it behind the right edge of canvas so that it can do another flyover now we have endless right to left movement awesome we already have something interesting here but what if i want them to sway up and down as they flap their wings making it a bit more dynamic and if these were enemies in my javascript game maybe it would make it a bit more difficult for player to avoid them how do i create wavy movement do you know what sine wave is let's do a little bit of a very simple beginner friendly trigonometry trigonometry is a branch of mathematics that studies relationships between side lengths and angles of triangles we use it to create wavy and circular movement in our javascript animations thanks to built in javascript math methods today we will have a look at math.sine and math.cosine built in javascript methods sine is a trigonometric function of an angle defined in a context of a right triangle all we need to know for now is that market sign returns the sign of a number we pass to it that number represents angle value in radians and it returns numeric value between 1 and plus 1. so this input angle value it takes if i put it inside animation loop and slowly start increasing it over time by very small amounts when i pass this angle value to math.sine it will return a series of values that endlessly cycles between 1 and plus 1 making it easy for us to convert these values into wavy movement so called sine wave what i just said might be a bit complicated for beginners and it might not make much sense yet let me show you i will need this angle property on my enemy class constructor and i initially set it to 0. this is the number that will be increasing and after being passed to my dot sign it will give us that series of values between 1 and plus 1 as i just mentioned let's do it so you can see on line 28 i set position y plus equals math.sine and i pass it this dot angle then i increase this.angle by 0.1 for every animation frame as the angle slowly increases do you see the waves i can change the value here on line 29 to change shape of my sine wave angle doesn't have to start from zero it can be a bit randomized let's try with math at random times two it will not be very visible it will become clear what it does a bit later i will point it out quickly said starting value of this.angle determines what position along the sine wave this particular character appears at first before it starts moving it's more obvious if we map movement to a circle and we'll do that in a minute i can also randomize the speed at which angle value increases on line 30. i do that by creating a new property called for example angle speed and i set it to a random number between 0 and 0.2 then i take this variable and i replace this hardcoded 0.05 with it now each anime has its own angle value that is being increased by a slightly different amount for each frame this will randomize the wave shape for each enemy let's set this.angle to 0 for now i reduce the number of enemies on line 6. as i said method sign returns values that cycle periodically between 1 and plus 1. what if i wanted to make the curve more prominent i can simply just multiply it times 3 here on line 29 and now we are getting values that cycle between 3 and plus 3. do you see how the sine wave of enemy movement is more prominent look what happens when i put the different numbers here i hope it's becoming more clear what i'm doing if i put times 10 we get a very prominent curve if these are enemies in your game good luck to all players trying to avoid them especially for certain sprite sheets this movement might be very suitable maybe you have some strange aliens in your space game and you want to move them in this weird wavy pattern instead of hardcoding number 10 here i can again put this value in a variable that will be randomized for each enemy that way we get even more variation in movement between enemies i will call it this.curve for example sorry about my variable names sometimes it's hard for me to come up with suitable names for all these custom properties i hope it's becoming at least a little bit clear what each of these properties does so far i want curve property to be a random number between 0 and 10 and i replace this hardcoded 10 with it here on line 30. maybe 10 is too much let's do times 7 here on line 26 do you see what we just did some of them move in a very prominent waves some have barely any vertical movement this would make our game more unpredictable i can add as many enemies as i want let's put 200 here on line 6. but infestation this will be a hard mode in my game so we did endless horizontal movement with vertical sine wave element to it what if we bring it a step further and also add some trigonometry for horizontal xcoordinate we can make the enemies move in all kinds of different shapes and patterns that way let me show you as usual i will first swap to a different image on line 14 i set image src to nma3 png i check my sprite sheet and i see that width of a single frame is 218 pixels and height is 177 pixels let's comment out lines 29 and 30 which will stop our character from moving around on line 29 i want horizontal movement to be cycling within a certain range i call math.sine and i pass it this.angle from line 24. this.angle value is increasing over and over on line 31 as update method is called from inside animation loop i will also multiply it times method pi divided by 180 let's just experiment here a bit if i multiply this whole thing by 10 nothing happens 50 we see some movement 100 yes they are moving now this angle speed on line 25 affects how fast angle value on line 31 is increasing if i set it to 0.9 they will move faster times 2 might be a good speed for now they kind of disappear behind canvas edge i can move them by adding some value to this dot x position like this plus 10 will move everything slightly to the right plus hundred how about plus canvas width divided by two i want to center them horizontally now they are too much to the right i need to offset them by the amount of their width i change this.curve on line 26 to be a random number between 0 and 200 and i replace hardcoded 100 on line 29 with this dot curve property now some of them move in a large range some only in a small area as we said before method sign when we feed it an angle it will return a value between plus 1 and 1 since this angle is ever increasing on line 31 we are getting a continuous series of values that endlessly bounce between minus 1 and plus 1 by multiplying all of this by this dot curve here for characters that have this dot curve 200 for example they are endlessly cycling between 200 and plus 200. put it in brackets actually this has to be this dot width divided by two yeah now they are centered horizontally on line 29 we are animating horizontal x position let's also do this with this dot y on line 30 and see what happens if i copy the same formula and replace width with height because we are dealing with vertical movement we get this pattern this is where cosine comes in i'm not going to explain trigonometry in detail in this video but the main idea is you have a circle and radius of that circle can represent hypotenuse the longest side of a right angle triangle if we connect lines like this to complete the triangle sine value represents relationship between opposite side of the triangle and hypotenuse cosine is the relationship between the adjacent side of that triangle and hypotenuse hypotenuse size never changes but sine and cosine is cycle periodically as the size of opposite and adjacent side of this imaginary triangle changes as a result sine and cosine complement each other to map a circle path and that's what we are taking advantage of here method sign is creating periodical horizontal movement for me online 29 and on line 30 math.cosine is doing that for vertical values together they complement each other in a way that results in a circle movement you can play with these values swap sine and cosine make both of them sine or cosine it should illustrate it better what's going on if you see how these changes affect our animation if i want to have some space in the middle we know that this dot curve determines radius of the circle my characters are moving in that value is randomized for each one i can give it a minimum value for example let's do a random number between 50 and 250. i can also change angle speed on line 25 this will affect how fast angle is increasing on line 31 and because that angle is being passed over and over to mattered sign and mattered cosine it will increase the speed at which our characters move along the circular path see here we already have some interesting movement pattern for our enemies i could use this in some parts of my game right now sine and cosine are even what i mean is they cycle between the same set of values over and over which results in even circular movement what if i make the horizontal position the cycle at half the speed compared to vertical position by saying math.pi divided by 360 here now vertical position does two cycles while horizontal position does only one because of the difference between 360 and 180 these two values here this will give us a different movement pattern if i give both of them the same number it will be a circle smaller numbers will result in a faster movement the resultant movement is always a relationship between these two values these values don't have to be directly divisible by one another but it might help to visualize it better for example here horizontal position will go over five cycles while vertical position will do one cycle it's because of the relationship between 90 and 500 it gives us interest in movement i can change their speed also by adjusting this.angle speed on line 25. so this technique can be customized to achieve movement pattern you are looking for maybe your game starts easy but later it becomes more difficult so you need faster enemies if i put 360 here 360 is divisible by 90. if you watch the animation we will get four horizontal cycles before we get one vertical cycle because 360 divided by 90 is 4. don't feel like you have to fully understand sine and cosine at this stage to take advantage of this technique i will make a special video where we deep dive into this functionality for now this is all we need to know to be able to use this for our games if i want the shape to be number 8 i can just make vertical value double of horizontal value here i can play with different numbers and see what happens can also have cosine for both like this it will cause them to backtrack to go back and forth following the same path rather than moving in circles swapping sine and cosine will make our characters follow circular path in the opposite direction i don't like how they fill the entire width but they don't fill the height of my canvas how do i make them use all available space we are using this.curve which is a random number between 50 and 250 and it makes them move within that range what if i replace it with canvas width on line 29 okay that's too much because this value is radius of their movement half circle if i want them to cover width of canvas i need to give them canvas width divided by two much better let's do the same for vertical position on line 30 canvas height divided by two awesome now our movement path is even more obvious i will increase number of enemies on line 6 just so that we fill the path with more objects and see it better now you can clearly see that our enemies are running along a set path shape of this particular path is determined by relationship between 90 and 270 here three horizontal cycles fit into one vertical cycle because 270 divided by 90 is 3. if i make the values the same we get circular path again it's an ellipse because i'm stretching the movement here and here 108 in x and 90 in y will mean two vertical cycles happen before we get one horizontal cycle what happens if i swap 180 and 90. interesting to get h shape i would have to swap sine and cosine here are you starting to understand how these values affect the shape of path our animated characters take you can play with this for a while experiment with different values and see what happens on canvas trial and error can sometimes be the best way to come up with unique interesting results trigonometry is a big topic and we will come back to it in some other course i'm sure some of you get other ideas for this technique it doesn't have to be used for patrolling enemies in games as we are doing here you can for example use it to create automatically moving particle effects and animations for website and many other things creative coding gives us a lot of opportunities to come up with unique beautiful stuff and that's why we are building these projects together to improve our vanilla javascript skills and at the same time to explore what's possible maybe it will spark new ideas in some of you i know that there are many creative people watching my videos i'm just here to give you the tools where you take it and how you decide to use it is up to you we can play with these values and create different paths this.angle property on line 24 determines where along our path our animated characters appear at first i can spread their starting position along the path by using math at random i could have also used something a bit more unusual like oscillators or pearly noise here but i want to keep this video beginner friendly we can do more advanced path following and random movement algorithms later another simple technique uses a completely different trick and it results in what i think is the best movement pattern if you want your enemies to appear like they have mind of their own at least when we stay in the world of simple beginner algorithms there are many advanced ai techniques you could use but this is javascript for beginners you might want to make a copy of this codebase because to achieve the next effect i will break this one little bit let's delete lines 24 25 and 26 i will also set this.x and this.wire to 0 inside my update method and i delete line 28. comment out lines 26 and 27 and now initial x coordinate is randomized on line 20 and vertical coordinate is randomized here on line 21. i will create a new property a call for example new x and i set it to random number between 0 and canvas with i do the same for vertical y coordinate with this dot new y property so i have initial horizontal position on line 20 and i have a new horizontal position on line 22. on line 9 i have game frame variable that is endlessly increasing inside my animation loop i will say every time game frame is divisible by 30 with a remainder of 0 which basically means every 30 frames of my main animation loop i want to reset this dot new x and this dot mu y to a different random position basically i just need to copy lines 22 and 23 here now i will calculate variable i call for example dx distance on horizontal xaxis it simply is the difference between this dot x from line 20 and this dot new x from line 22 dui distance on vertical y axis is this dot y from line 21 minus this dot nu y from line 23. now that we have distance between current position and the new position i can make characters move towards that new position by saying this dot x minus equals dx from line 32 and this dot y minus equals d y from line 33 it's resetting too fast let's change 30 to 60 here on line 28. now we get instant position change every 60 frames i can make them travel towards that position by saying dx divided by 20. i can also do that for vertical position by saying dy divided by 20 here now current position is always moving towards the new position by 20th of their distance for every animation frame i can increase these numbers to make them move slower i can also increase the interval on line 28. i like this but you can see that positions reset every 100 frames for all enemies at the same time that looks a bit weird i want each character to reset at its own randomized interval i create a property i call for example distort interval and it will be a random number between 50 and 250. then i replace hardcoded hundred with this.interval on line 29. it won't work yet because this.interval is a random number with decimal points so gameframe will never be divisible by that very specific number with a remainder of 0 so new positions will never be calculated to fix that i need to wrap this in math.floor which will round it down and make sure we get only integers whole numbers without decimal points also now you can see that each enemy is moving at their own rhythm i can add more enemies on line 6. it kind of looks like a swarm of mosquitoes i also need to swap enemy sprite sheet to keep up with tradition i will use anime 4 png here i look at my sprite sheet and width and height is 213 pixels this time there are many other calculations and algorithms that you can use to make enemies move in a certain way let's make that today's challenge can you alter some of the code we wrote today and create your own movement pattern you can also make enemies follow the mouse or maybe try to avoid it there are many ways to make this interactive let me know in the comments if you watched all the way here if you did well done today we added an important set of techniques to our vanilla javascript game development toolkit i'll see you soon if you want more game development check out my playlists links in the video description collision detection is important if you want to build the javascript games and you need to detect when two elements collide or when you are building particle systems where objects interact with each other or maybe you want your canvas animations to interact with regular website elements for most projects all we need is simple collision detection algorithm between two rectangles or between two circles for more complex shapes we also use collision detection technique called separating axis theorem it can be used to detect collision between convex polygons or rectangles that are rotated and aren't axis aligned you might also have more specific needs for your games or creative coding projects some of other common scenarios are collision detection between point and circle point and square between line and circle line and square between two lines and so on it becomes more complex when you need to detect collisions where shapes such as convex and concave polygons are involved there are some clever tricks people came up with to handle these more advanced scenarios such as detecting collision by color or projecting lines from a point and checking if the number of intersections between that line and polygon is odd or even a number with more complex shapes it's a good practice to wrap them in simple rectangles and only run advanced collision checks if these rectangles collide and we know that the shapes are close enough and collision is possible for many games all you need is to create a generic shape around our objects so called hitbox even though the collision is not pixel perfect we can adjust these hitboxes to roughly match collision areas of objects with different shapes main advantage is that the code is very simple and performant because it doesn't require complex calculations to determine whether two objects collide or not these hitboxes can have shape or rectangle circle or polygon the simplest collision detection algorithm is between two rectangles that are axis aligned it means that they are not rotated it simply compares x and y coordinates and width and height of these two rectangles if they overlap we get collision if there is a gap between them we know there is no collision let me show you two different simple algorithms you can use to detect collision between two rectangles two hitboxes in our games let's say we have rectangle one and rectangle two both of these objects have x and y coordinates and some width and height the first way i can check if they collide is this i create a simple if statement and i check if horizontal position x of rectangle 1 is less than horizontal position x of rectangle 2 plus width of rectangle 2. basically if this point is less than this point less means if it's to the left on horizontal xaxis at the same time we want to check if x of rectangle 1 plus width of rectangle 1 is more than x of rectangle 2. that means if this point is to the right from this point we also do this vertically so we check if vertical y coordinate of rectangle 1 is less than vertical y of rectangle 2 plus height of rectangle 2 if this point is above this point and lastly we check if vertical coordinate of rectangle 1 plus height of rectangle 1 is more than horizontal y position of rectangle 2. if this point is below this point if all of these 4 conditions are true we enter this code block in our if statement and collision is triggered else we know there is no collision we can also flip the logic completely this second algorithm does the same checks but it's a bit more efficient if i change the logic a little bit and use or operator it returns true if at least one of its operands are true let's go through the logic here if x of rectangle one is more than x of rectangle two plus width of rectangle two we know they cannot possibly collide so this will return true and we know straight away there is no collision also if x of rectangle 1 plus width of rectangle 1 is less than x of rectangle 2 again we know these rectangles can't possibly collide just one check and we know there is no collision if y of rectangle 1 is more than y of rectangle 2 plus height of rectangle 2 there is no way for collision to happen if y of rectangle 1 plus its height is less than y of rectangle 2 we also know they don't collide so if at least one of these four checks is true we know there is no collision if all four return false we know that the rectangles must collide else statement is entered and collision is detected i hope this was visual enough and you got some clarity on how these checks work if you have any questions let me know if you want to see how to implement these particular algorithms in an actual project and where exactly to place them in your code base i use them in many of my games such as in tower defense frogger flappy bird and many more i will link some in the video description if you want to learn more with me check out some videos on my vanilla javascript game development playlist i also do web animations generative art for beginners and more everything with vanilla javascript using no frameworks and no libraries hope you have fun and show me some of your creative coding projects please you can message me on twitter if you want let's be friends collision detection is important if you want to build particle systems where elements interact with each other or when you are building javascript games and you want to detect when two objects collide or maybe when you want your canvas animations to interact with regular website elements three of the most common techniques we use for games and creative coding are collision detection between circles rectangles and polygons there are also other potential scenarios and some clever people came up with interesting ways how to detect them with code some are easier than others one of the most useful ones is collision detection between two circles you can detect if two circles collide with javascript very easily the algorithm just takes two center points of our circles and checks if the distance between them is less than the radii of these two circles added together what does that look like in code let me quickly show you let's say we have two javascript objects circle one and circle two they have some coordinates so position on horizontal xaxis and position on vertical yaxis and some radius i connect their center points with a line this line represents distance between center points of these two circles i connect position of circle 2 to my current mouse position so we can move it around if the distance between these two center points is more than radius of circle 1 plus radius of circle two we know they can't collide if the distance is the same we know they touch and if the distance is smaller then some of these two radii added together we know the circles overlap they collide to be able to measure distance between two points of a javascript in this case center point of circle one and center point of circle two we will use simple and very powerful algorithm once you learn this and get comfortable with it you will unlock next level in your coding and animation projects to measure the distance between these two points and check if the circles collide we need to know length of this line we calculated by imagining there is a right angle triangle in between like this in this triangle our distance is actually hypotenuse the longest side of a right triangle opposite to the right angle this is the right angle 90 degrees we know x and y position of center point of circle one and we also know x and y position of center point of circle 2. with that we can calculate length of both arms of the right triangle this side is simply just the difference between horizontal x position of center point of circle 2 minus horizontal x position of center point of circle one we can do the same thing to calculate this side vertical position of this center point minus vertical position of this center point now we have this imaginary right triangle between our two points we know this side we know this side and we know this is the right angle 90 degrees now we want to know how long is this side hypotenuse of our triangle opposite to the right angle we can achieve that easily with pythagorean theorem it allows us to calculate relations among the three sides of a right triangle imagine we draw squares on top of each line like this pythagorean theorem tells us that the sum of the areas of the two squares around the right angle equals to the area of the square on the hypotenuse c squared is equal to a squared plus b squared that means c is square root of a squared plus b squared if you want to know why this is true check out radu's video i will link it in the video description so distance between center point of circle 1 and center point of circle 2 is dx times dx which is side a squared plus d y times d y side b squared this would give us a squared value and i want square root so i wrap it in math dot square root like this now we calculated the hypotenuse of the right angle triangle which is the distance between center points of circle one and circle two the distance is less than radius of circle 1 plus radius of circle 2 we have collision if the distance is exactly the same number as the sum of radius of circle 1 plus radius of circle 2 we know they touch if the distance is more we know there is some space between the circles and they don't collide visual and audio feedback that reacts to player actions and ingame events is really important if you want your javascript games to feel good you can for example attach sound and explosion animation whenever collision happens in your game you can also use this technique to make score points float from defeated enemies or from collected items today we will build an easy fun project together that combines javascript audio and sprite animation when we covered all these basics of triggered eventbased animations we will build a game that will look something like this to really put all these principles in action i create a regular web page markup in document head i link my css style sheet i create html5 canvas element with an id of canvas one we will draw on it with code i also link my javascript file down here at the bottom just before the closing body tag all i need to do install css is to position my canvas element so i target it with id i give it border 3 pixel solid black position absolute height 700 pixels with 500 pixels background black let's center it so top 50 percent left 50 and transform translate minus 50 minus 50 this trick will only center elements that have position set to absolute as we do here on line three everything else will be drawn with plain vanilla javascript here in script js file i need to point javascript towards my canvas element so custom variable called for example canvas is equal to document.getelementbyid canvas1 ctx shortcut for context is equal to canvas.getcontext2d this will instantiate object that holds all 2d drawing methods we will need today canvas width is 500 canvas height is 700 let's test if we set it up correctly by drawing a quick simple shape it's good to test your code as you go makes it easier to debug i set global canvas fill style to white this will apply to fill of all shapes now unless i redeclare it again and give it a different color i call build in fill rectangle method i pass it coordinates 5050 with 100 pixels and height 150 pixels perfect we set it up correctly and we are drawing on canvas now let's make it more fun i delete the rectangle and i create a variable called for example explosions i set it equal to an empty array its job will be to hold all active explosion objects i create i created them using javascript class i call it for example explosion with a capital e constructor will expect x and y coordinates coming from the outside this is important because we want the animation to be triggered at a specific location where the event happens for example we wanted to animate at coordinates where two elements collided or at coordinates of mouse click i will pass this x and y coordinates to the constructor whenever i want to trigger new animation and create new object using this class it's very simple i will show you in a minute so on this new explosion object give it this.x property and assign it to x that was passed as an argument on line 8 from the outside do the same for this.y vertical y coordinate this dot sprite width will be weight of a single frame in my sprite sheet i calculated by taking width of my sprite sheet and i divide it by the number of frames in this case my sprite sheet is 1000 pixels wide and has 5 frames 1 000 divided by 5 is 200. height of my sprite is 179 pixels sometimes you get sprite sheets that are too large or too small so you might want to scale it while still keeping the aspect ratio relationship between width and height to make sure the image is not stretched or squished i declare the slot width property and i set it equal to this dot sprite width from line 11 divided by 2. this load height will be this dot sprite height divided by 2. it's important to divide or multiply them by the same number to keep the same aspect ratio by the way for optimization it's always better to multiply than to divide division operation in javascript is more performance expensive so instead of dividing them by 2 i could have multiplied them times 0.5 i will bring my sprite sheet into the project you could declare it as a global variable but i think it's a bit cleaner to put it as a property on class like this this dot image equals new image this is just image class constructor and it will create new blank html image element this dot image src will give it source attribute and i set it to boom.png if you want to use the same file you can download it in the video description this image was kindly provided by one of my favorite game artists i will link his website in the video description as well he has a lot of cool game art there if you are interested to animate this sprite sheet i will crop out one frame and i will be jumping to the right by the amount of sprite width frame by frame to do that i will need this.frame variable i will set it to 0 at first we will also need to add some behavior to this class we do it by creating class methods i will need one to update and one to draw my explosions update method will only have one job for now to increase this dot frame from line 17 by one for every animation loop this dot frame plus plus draw method will take values from the constructor and it will draw current frame of animation on canvas we will use built in html canvas draw image method that takes image we pass to it and it draws it draw image method has three versions with three or five or nine arguments depending on how much control you want over the image you are drawing since we are animating a sprite sheet we will use the longest version with nine arguments the arguments we need to pass to it is image we want to draw source x source y source width and source height of area you want to crop out from the source sprite sheet and destination x destination y destination width and destination height these last four arguments will determine where on destination canvas you want to place that cropped out image on two it might sound complicated but it makes sense if you use it couple of times when you learn how to use draw image method and you get really comfortable with it you will have complete control over sprite sheets you want to animate it's really good and so useful so now i will replace these placeholder values with actual variables we prepared inside constructor image we want to draw is this dot image from line 15. source x is the only one from these nine arguments that might be a bit more complicated for beginners to calculate current horizontal position i need to take sprite width from line 11 and i multiplied times this dot frame from line 17 as the program runs this dot frame increases inside update method on line 20 we will get frame 0 1 2 3 4 because we are multiplying sprite with times frame source y is horizontal y coordinate we want to crop out from the source since this sprite sheet has only one row source y will always be zero source width is this dot sprite width and source height is this dot sprite height from line 12. so now we told javascript what sprite sheet we want to draw and what area we want to crop out from it to display just one frame now i just simply tell it where on canvas i want to draw it destination x is this dot x from line 9 destination y is this dot y from line 10 destination width and height is this dot width and distort height from lines 13 and 14. our class is complete this is all we need to trigger this dust cloud animation and attach it to any event we want to there are many events we can do here let's try one i call window.add event listener built in javascript method we will be listening for mouseclick event and in callback function that will run every time click event occurs i will at first just draw a simple rectangle to make sure everything works fill rectangle expects four arguments x y width and height i want this rectangle to be drawn at the current coordinates of my mouse click to do that is easy callback function on event listener has access to builtin event objects usually we name it e or event like this but you can name it anything you want javascript knows that this argument passed to callback function on event listener refers to event object you can put abc here and it will still work as long as you refer to it as abc later in the code as well basically here i am saying take event object with information about this click event and save it in a custom variable i call e if i console log this e i will get an error let's comment outline 29 for a second now whenever i click on canvas i get this console log that contains all information about current click event that just occurred if i open it i can see we have all kinds of details here all we want is where on canvas this event happened so we can draw a rectangle at the least coordinates i can see x and y coordinates are down here as properties called x and y now that i know the name of properties i'm looking for i can use these values inside fill rectangle method i want to draw it at x coordinate of current mouse click i know that value is stored on my event object in a property called x as we just saw so i put e dot x here and e dot y width and height could be anything i want i want my rectangle to be for example 50 x 50 pixels i can't see anything when i click that is because i used black background and default fill is also black i set fill style to white color when i click you can see that we draw a white rectangle on canvas but it's not being drawn under mouse why is that in this case event.x gives me value that doesn't account for this top and left margin between start of my webpage and start of canvas what i need to do is offset my coordinates to account for it good way to do that is to measure canvas position first you can do this with one line of code i create a custom variable called for example canvas position and i set it equal to canvas from line one and i call get bounding client rectangle builtin method on it get bound inclined rectangle is a very useful builtin javascript method it returns an object provided information about the size of an element and its position relative to the viewport i can console log my canvas position variable now and you can see the object here it contains bottom left right and top position on the graphics here you can see exactly what these values represent it also contains information about its width and height and its x and y position you can use this to measure any html element on your page if you are offsetting something it's really useful i delete console log on line 7. i like to clean up after myself as i go so if i want my white rectangle to be drawn under the current mouse position i need to offset e dot x and e dot y by top and left margin between viewport and canvas horizontal x coordinate is e dot x minus canvas position dot left now you can see that horizontal position is exactly under mouse i also fix vertical position by saying e dot y minus canvas position top perfect you can see that rectangle is being drawn towards the right bottom from my mouse cursor this is how rectangles work on canvas if i want my mouse to be exactly in the middle of the rectangle both vertically and horizontally i need to do one more small tweak here i offset my positions by half of width and height my width and height is 50 so i offset x and y by minus 25 now when i click mouse cursor is exactly in the middle of white rectangle when i place it on canvas i know this might be very basic for some of you but i want beginners to be able to follow along with us this course is for everyone now that we understand how to draw a simple rectangle on click let's take it to the next level and use our custom explosion class to create sprite animation every time we click somewhere on canvas first thing i want to do is to take this calculation that offsets and centers my horizontal and vertical positions and i put them here in separate variables this is just to keep my code clean and easy to read i call them position x and position y and i just copy this formula in there i can't really do 25 here if i want to keep my code base reusable i need to offset it inside my explosion class i will show you in a second i do this position y vertical formula i remove console log on line 31 and i also delete my white rectangle we will be drawing animated cartoon explosions now on line 5 i have this array that will hold all my current active explosion objects the goal is to use explosion class on line 8 and when we click we push new object into this array from line 5. we cycle through all its frames using update method on line 20 we draw each step to display the animation and then when we reach the last frame we remove the object from the array and we delete it line 31 inside click event listener i take this empty explosions array from line 5 and i call push on it push is a builtin array method it will take whatever we pass to it as an argument and it will push it at the end of the array i pass it new explosion the new keyword will find my class on line 8 and it will run its constructor to create a new object based on this class's blueprint on line 9 i can see my constructor expects two arguments for x and y coordinates this is important because we need to know where on canvas we want to create this triggered animation here on line 31 i just pass it position x and position y variables we calculated on lines 29 and 30. so now i have a way to add new explosion object into my array on mouse click i will need a function to cycle through all objects in the array to update and draw them let's create animation loop i will write a custom function called animate inside i create a for loop that will cycle through all elements in the array sometimes if we click really fast in sequence we will have many objects animated at the same time sometimes this array will be empty it will have 0 elements and this loop will be skipped for each object in the array we will call its update method and also it's a draw method to create animation loop i call built in request animation frame function and i pass it animate the name of its parent function from line 34. now i can call animate to kick off animation loop awesome this is working kinda we can see old frames because we are not clearing canvas and i also need to center my animation around the cursor better to only see the current frame i call built in clear rectangle method and i want to clear the entire canvas if you look closely you will notice we are skipping frame 0 because update method increases frame variable by 1 before we draw the first frame i want each triggered animation to have its own timer that way we can stagger the animation speed on line 19 i created this dot timer property and i set it to 0. on line 22 inside animation loop i increase this dot timer by 1 for each animation step now i can say if this dot timer is divisible by 10 with a remainder of 0 this simply means run this code every 10 frames only when timer is divisible by 10 increase frame by 1. this will slow down the animation timer has to increase 10 times before frame increases once now we can see the initial first frame as well and animation speed is 10 times slower than before let's make width and height slightly bigger on lines 14 and 15. you can see that my animation is drawn too much down from mouse cursor same as we did with white rectangle before i want mouse cursor to be in the center of the animation to do that i can simply offset x and y by half of width and height i can either do it here or i can also do it here inside draw image method it would give us the same result i can't offset x and y here in my event listener because at this point i don't know what width and height my animation is i could hard code some values here but that would not be reusable i think the cleanest way is to move this.x and this.y to go after width and height here so that they can see these properties and i offset them here this dot x is equal to x which was passed as an argument on line 9 minus this dot width from line 12 divided by 2. this centered my animation around the cursor horizontally and this dot y is y minus this dot height divided by two perfect right now i'm just adding more and more objects into my array they stay there even after they stopped animating you can see that if we console explosions array from line 5. we are just adding more and more objects into the array every time we click i need to find a way to remove the ones that have stopped animating we could do object pooling here to avoid instantiating and deleting objects over and over but i will show you how to do that in some more advanced tutorial today let's just do the simplest solution on line 45 inside the for loop that runs through all objects in my explosions array after i draw and update them i check if this particular object has frame property more than 5. frame property comes from line 18 and on line 24 we are increasing it to draw our animation frame by frame sprite sheet has 5 frames and we count from 0 so i know if frame property is more than 5 we played the entire animation on line 44 if this particular object has frame property more than 5 i will remove it using builtin array splice method splice method just wants index of object we want to remove so i for index and i want to remove one object at this index so i comma 1 to make sure the next object in the array is correctly updated and animated after we removed its neighbor we need to adjust index by 1 i minus minus because i'm controlling my array on line 36 in browser console i can see that we are correctly adding and removing objects from the array awesome we have a solid infrastructure for triggered animation and we can connect this code to collision coordinates for example and run this animation when two objects collide in our game we can also connect it to different events and user input it doesn't have to be a click event to avoid code repetition i will put this code into a separate custom function i call for example create animation i cut all this code and i paste it here i call create animation from inside my click event we need to pass down reference to event object to calculate coordinates like this look what happens if i connect it to mousemove event it gives us pretty cool effect experiments this looks like some deep sea creature when i move it like this you can see that the first frame of dust cloud animation is always rotated the same way maybe i want to rotate it a different angle every time we create new explosion to do that i use builtin save and restore html canvas methods let me just write this and then i will explain what's happening translate will set rotation center point in this case i want to rotate around its center so this dot x and this dot y i want each one to be rotated by a different random angle value i create a new property on line 20 called this dot angle circle is 360 degrees html canvas rotate method expects radians so 360 degrees is roughly 6.2 radians this dot angle will be a random number between 0 and 6.2 i pass this.angle to canvas rotate method on line 31 like this now it's rotating too much it's because i translated the drawing context to this.x and this.y on line 30. then i rotate it and then i go from that point further to another this dot x and this.y here x and y coordinates for our animation are already captured here on line 30. so on line 32 i replace this.x and this.y to zero think about it this way i use translate which would be point zero zero on canvas to this.x and this.y so between these save and restore calls 0 0 is actually this dot x and this.y that's better i also need to offset it by this.width divided by 2 and this dot height divided by 2 here inside draw method and remove it on lines 14 and 15. this is how you rotate anything on canvas you save the current state of canvas to make sure the following changes affect only one draw call i translate rotation center point on top of my current object i want to rotate i rotate the entire canvas context by random angle value we draw our image and we restore canvas context to the original save point to make sure this translate and rotate only affects one draw call of one object canvas rotation is one of the more difficult concepts for beginners to understand i spent the entire halloween episode explaining it so don't worry if this was too fast for you if you want more details on how to rotate things on canvas i will link that episode in the video description for now let's just move on you can see each dust cloud is now rotated randomly so the trail itself looks more chaotic as every dust trail should let's comment out mouse move event now we have this nice cartoon dust cloud animation whenever we click on canvas it's missing something let's give it some sound it's really easy to attach sound to event animations in javascript i go to opengameart.org and let's click browse and sound effects i remember there was one i really liked here on left i will type magic in title search oh yes it's this one magic special effect spark it contains four cool magic sounds i download it and i take the one called ice blast i rename it to boom.wav for you the path might be different if you chose different file or you placed it in a different folder i only want to play the sound file once per animation so in update method on line 25 i say if this dot frame is equal to 0 take this dot sound from line 21 and call build in play method on it like this choosing the right sound and animation speed is very important to how your game feels in the end if you do it well your game will be satisfying and your users will love to play it don't forget to click the like if you learned something new today for more vanilla javascript game development and animations check out my playlist i will link relevant videos in the description down below thanks for coding with me today hope you had fun do you want to build awesome games and master front and web development at the same time in this final javascript and html5 canvas game tutorial i want to show you 5 techniques i wish i used sooner today we will build a game completely from scratch step by step with no frameworks and no libraries we will learn how to achieve pixel perfect collision detection using colors how to use time stamps and delta time to make sure our game runs at the same speed on different machines we will learn about arrays and i will show you how to remove all the game objects using array filter method and how to use array sort method to create a correct draw order in a 2d game we will also talk about modern javascript syntax and we will learn how to make our animation code cleaner and less repetitive with spread operator i will also share many small tips and tricks as we go along students of today's course will get two premium spreadsheets completely for free kindly provided by this amazing artist check out his website for more click the like please if you are excited and ready to learn let's talk about javascript have fun i want you to build projects you can show off to someone and be proud about so as usual we will build a game and by the end of this tutorial you will have a complete project i learned some of these techniques from my friend raju he has a lot of other cool things to teach you if you want you can go and check out his courses i will link some in the video description some of you tell me that you only make games by animating divs and other html elements it's a great way to start and learn the basics html canvas can handle many more moving objects at the same time so if you want to try and build games that have a little bit more complexity maybe this is the time for you to give canvas a chance let me show you it is easier than you think to build interactive animated projects with it i will take you through it step by step and help you understand i have a introductory game development series and a beginner playlist where i go slower over all the important techniques if you find yourself struggling at some point or you think i'm going a bit too fast maybe try to watch that one first over there we also create really cool projects but i keep beginners in mind at all times it might be an easier starting point for you and then you will be ready to take on videos like this one and actually properly understand everything i will leave some links in the video description let's go let's create some ravens i will have an array that will hold all my raven objects it needs to be a led variable not const i will explain why in a minute i create a custom class called raven it will be a blueprint based on which all my animated ravens will be created by javascript constructor will create one blank new object every time it is called and it will assign it properties and values as we define them here it will have width property and its value will be for example 100 pixels height will be 50 pixels this dot x starting horizontal x coordinate will be just behind the right edge of canvas so they can fly across to the left so canvas width vertical y coordinate will be a random number between 0 and canvas height since rectangles on canvas are drawn from the top left corner going right and down i don't want any ravens to be partially hidden below the bottom edge of screen initial y position will be a random number between 0 and canvas height minus the height of a raven between here and somewhere around here it needs to be in brackets like this to give us the correct range of values direction x will be horizontal speed basically it will be a random number between a 3 and 8. i want ravens to bounce up and down as they fly so the initial vertical speed i call direction y for example will be a random number between minus 2.5 and plus 2.5 minus values will move upwards plus values will move the raven down along the vertical yaxis update method will move the raven around and adjust any values that needs to be adjusted before we draw the next frame at first i will just simply move it to the left so this dot x from line 11 minus equals this direction x from line 13. draw method will take these updated values and any drawing code we put here will represent single raven object visually first let's start with a simple rectangle i call built in fill rectangle method and i pass it x y width and height ravenclass is complete we have a way to create ravens let's create animation loop i create a custom function i call for example animate it will take argument i call timestamp this will be a numeric value in milliseconds so one second will be number 1000 i will show you exactly how it works any code inside this animate function will run over and over updating and drawing our game frame by frame the first thing we will do between every frame is clear old paint all the drawings from the previous frame so clear rectangle and i want to clear the entire canvas from coordinates 0 0 to coordinates canvas with canvas height we will run some code in between and then at the end we will use requestanimationframer method that we'll call animate again create an endless animation loop i will console.log test to make sure it works and i also need to call animate like this on the first page load to trigger the first loop in browser console i can see the loop is running perfect it's good to test your code as you go to make sure there are no typos it's safer than to write the entire project and then try to look for bugs there step by step approach will save you a lot of time i can also test if my raven class is working i will use it to create many ravens but i can also just create one i create a variable called raven and i assign it to new raven like this this will create one raven object for me which will have access to update class method from line 16 and draw method from line 19. i call it from inside my animation loop and here's my raven it just flies over once if i refresh the page it flies again this works so far we are doing great instead of having one raven i want to create a new raven periodically and i want to make sure that periodic event is triggered at the same interval on very slow old computers and on brand new gaming super pcs to make sure the timings in my game are consistent and based on time and milliseconds rather than on the power of my computer and its ability to serve frames at a certain speed i will use timestamps i will compare how many milliseconds elapsed since the last loop and only when we reach certain amount of time between frames only then we will draw the next frame it's actually very simple but it might take some time to get used to it if you are a beginner let's do it and see how it works what is happening here we are calling animate using request animation frame animate becomes a callback function on requestanimationframe method and default javascript behavior for callback here is to pass it automatic timestamp as an argument its value is in milliseconds just so you know where this timestamp will be coming from it's a default javascript behavior when using request animation frame it will pass its callback function in our case animate automatic timestamp argument we will see it better in a minute as the loop runs request animation frame calls animate over and over passing it timestamps my goal here is to take time from the current loop save that value run the loop again with a new timestamp value and compare them to see how many milliseconds it took in between frames i will need some helper variables here time to next raven will be a variable that will accumulate millisecond values between frames until it reaches my interval value and trigger next frame initially it will start at 0. raven interval will be a value in milliseconds every time time to next raven accumulates enough to reach 500 milliseconds it will trigger next raven and it will reset back to 0 to start counting again i will also need variable that will hold value of timestamp from the previous loop the initial value will be 0. inside my animation loop i will calculate delta time this will be a value in milliseconds between timestamp from this loop and saved timestamp value from the previous loop after i used last time value to calculate delta time i will assign last time variable from line 8 to the new timestamp passed here in this loop so that we have that value ready to compare in the next loop let's console timestamp i can see i misspelled last time here capitalization of letters is very important in javascript you can see in console i'm getting timestamps in milliseconds since the loop started the very first value is a second so it goes like this seven eight seconds and so on so this is the automatically passed timestamp value here it's generated by default by javascript because we made animate into a callback function on request animation frame method here on line 33 there is a way to do this without calculating delta time at all but i haven't tested that and i'm not sure what is the browser support for that technique so let's go with this tested safer solution today i will remove console.log leaving too many console logs in your projects especially the ones running so often like this can affect your performance so keep that in mind on line 6 i have time to next raven variable here in my animation loop i will increase its value by delta time for every animation frame i will console log delta time now again i need to be careful about spelling my variables correctly here i can see that on my computer time between frames is around 16 milliseconds my computer is powerful and it is able to serve a new frame every 16 milliseconds on your computer the number might be different i would actually be very interested to know if it's the same number or a different one for most of you if you are following and coding with me can you leave a quick comment with that number please you can just type 16 if it's the same number or whatever different number you are getting right now so time to next raven starts at 0 and is increasing by this value of around 16 milliseconds per each frame on line 7 i created a variable called raven interval and i set it to 500 milliseconds in my animation loop i will say when time to next raven reaches this raven interval when this number that starts at 0 and increases by the amount of milliseconds that happened between frames reaches 500 at that point we will take raven's array from line 10 and use builtin array push method i will pass it new raven which will trigger my raven class constructor create one new raven object and it will push it inside raven's array when that happens i set time to next raven back to zero so it can start counting again from the beginning i know i just said raven a lot time to next raven starts at zero it increases by the amount of a delta time by the amount of milliseconds between each frame which will be dependent on performance of your computer however since slower computers will take longer to serve the next frame their delta time will be a higher number and it will move towards our target raven interval in bigger steps as a result this code will be triggered at the exactly same time on slow and fast computers this is one way how you can properly trigger periodic events in your projects using time stamps this might be a bit too much to wrap your head around if you are a beginner it's one of the reasons i don't always use timestamps in my animation tutorials because i can't really explain all of this in every single video but try to learn it if you can if you still don't get it don't worry i will explain it in future projects again so eventually it will start making more sense repetition and practice is the best way to learn at least for me it is i console cravens and i see nothing is happening even though my animation loop is running it seems that this if statement never evaluates the true so the code inside is never triggered controlling is great for debugging i console time to next raven first oh i can see its value is a non not a number here's our problem why is it this value it must be because we are adding delta time to it here i consolidate delta time and i can see that the first initial value is also not a number delta time is calculated here on line 30 so now i console log timestamp and this is the root of our problem that cascaded all the way through my variables that use each other to calculate their values when the animate loop starts the very first time stamp is undefined because timestamp only gets created on the second loop here on line 39 when we call request animation frame to fix that is easy i just need to give timestamp a starting value on the first call of animate that starts my animation loop here i will pass it timestamp of 0 as an argument awesome that fixed it and since i'm consolidating raven's array on line 36 i can see it adds new raven object to the array every 500 milliseconds i remove the console log we have data for ravens inside the array we just need to cycle through that array through every single raven object and call their update and draw methods so that we can actually see movement on canvas i declared my ravens array here on line 10. inside animation loop i will use this syntax which might be a bit unusual for you here i'm creating so called array literal by just dropping square brackets like that i'm creating a quick new array on the fly and these three dots are so called spread operator now i'm spreading my ravens array inside this new quick array i just created spread operator allows us to spread iterable such as this ravens array to be expanded into another array let's finish writing this line of code and i will explain why i'm doing that since we are dealing with an array i can call builtin array for each method i need to assign it a variable name for each object in this array so we can use it as we iterate as we cycle through it i will call that variable for example object so this object variable now represents each individual raven object in raven's array and i can say for each raven object in ravens array call their associated update method we wrote on line 20. so this line of code will cycle through the entire ravens array and it will trigger update method on all of them since we are inside animation loop this will happen over and over for each animation frame i will do exactly the same thing for draw method from line 23 and we are updating and drawing our ravens awesome now you might ask why am i using this fancy syntax here where i created a new array and i use the spread operator to expand my ravens into that new array just so that i can call update and draw on them i could have just called it on the raven's array directly without expanding it like this the reason i did that is because when i create particle class in a minute i can just spread my particles into the same array along with the ravens as long as my particle class will have update and draw methods to call the code will work and i can call all my classes by just expanding more and more arrays in here i can for example also have an array of enemies obstacles power ups and other elements in my game i can spread all of them into a single array and call their update and draw methods all at once i will show you exactly what that looks like in a minute i think it makes the code look clean and easy to read what do you think online 34 i'm periodically adding new object into raven's array right now it's an endlessly growing array of objects and on lines 37 and 38 i'm iterating over all of them even the ones that have moved off screen and are not visible anymore eventually this would build up and cause performance issues so i need a way to remove the ones that have moved past the left edge of game area sometimes i use array splice method to do that i used splice in many other tutorials before but there might be a better way to do it using splice while cycling through the array removes objects from somewhere in the middle of the array so then we have to write code to adjust the index to make sure neighbors of that object don't get skipped easier way to discard objects we don't need might be using builtin array filter method we will just run through the array call update and draw for each raven and then we will filter out ravens that have moved past the left edge of screen what does that look like in javascript let me show you i create a new class property called marked for deletion and initially i set it to false in update method i say if horizontal x coordinate of this particular even object is less than 0 minus this dot width meaning it has moved all the way behind the left edge i set its marked for deletion property to true inside animation loop i take the variable that holds my raven's array from line 10 and i reassign it to a new array that's why the initial declaration of raven's array needs to be a led variable not const because const variable cannot be reassigned it will be the same array but objects that have marked for deletion property set to true will be filtered out filter method creates a new array with all elements that passed the test implemented by provided function so here i'm saying take raven's variable from line 10 and replace it with the same array but i wanted that array to be filled only with objects for which this condition is true here we have a little bit of double negative sorry the test in my callback function wants marked for deletion value to be false if marked for deletion is false then this condition evaluates as true and this particular even object will not be deleted again and said very simply take raven's array from line 10 delete everything in there and replace it with contents of the same ravens array but only with those objects that have marked for deletion property set to false exclamation mark here means false since we are going to look in raven's on line 42 i can check in browser console and i can see that number of objects in the array is between 3 and 6. it only contains ravens that are active and visible on screen perfect i remove the console log these ravens look a bit boring just black rectangles let's use animated sprite sheets instead on my class i create a new property called this dot image and i set it equal to new image i set source on that new image as raven png art for this episode was made by this amazing artist link to his website is in the video description he also allowed me to share this particular spreadsheet completely for free with my students so you can download it along with all other project files in the description for more game art check out his website and support him if you can there aren't many good 2d artists like this and he's one of my favorites i try to buy his game art assets whenever i can i will need a couple of helper properties here this dot sprite width is width of a single frame in my raven's sprite sheet in this case 271 pixels if you are using a different sprite sheet take its width and divide it by the number of horizontal frames maybe it would be easier if you follow along with me using the same sprite sheet and then when you understand the code and it's working for you you can replace it sprite height is 194 pixels on line 31 inside draw method i call built in draw image method it expects between 3 and 9 arguments depending on how much control you want over the image you are drawing minimum is 3 arguments image you want to draw so this dot image from line 20 and x and y coordinates where to draw it now it's just simply taking the entire sprite sheet and drawing the whole thing at its original size we can also give it optional width and height arguments which will scale it i need to make sure my brackets and commas are correct here so now it's scaling the entire sprite sheet to fit inside 100 times 50 pixels let's do stroke rectangle here so we can see it better we can also give it a total of 9 arguments these additional 4 arguments will allow us to only crop portion of the image source x source y source width and source height so the longest version of draw image method takes 9 arguments image we want to draw x y width and height of area to group out from the source image x y with an height of where to place that cropped out image on destination canvas let's just crop out the first frame now source x and source y is scored in at 0 0. source width is sprite width and source height is sprite height you can see our ravens are a bit stretched it's because these initial width and height values are completely disconnected from the actual dimensions and aspect ratio of our sprite sheet i move sprite width and sprite height up here so that we can use them to calculate values that come after with could be for example sprite width divided by 2 and height could be height divided by 2. this works but now all our ravens are the same size and as my friend marcus says multiplication is faster than division so let's create a new property called size modifier and it will be a random number between 0.4 and 1. now instead of dividing it by 2 i will multiply width and height by this random size modifier value which will make the ravens be different sizes while still preserving the aspect ratio so no stretching this dot frame is the number of frames in our sprite sheet counting from zero so the initial value will be zero this frame this dot max frame could be four or five depending on how you reset it back to frame zero let's go with four maybe i will adjust my frame reset check to this value in a minute if this dot frame from line 25 is more than this dot max frame from line 26 set this dot frame to zero else increase frame by one to actually reflect this value on canvas i replace source x argument on line 37 with this dot frame times this dot sprite width so it will go 0 1 2 3 4 5 and back to 0 as frame variable cycles on line 32 all the ravens are flopping wings very fast and at the same interval how do we speed up or slow down sprite animation the speed at which the next frame is served and how do we make sure it's consistent across all machines on old slow computers and new powerful ones as well we can do that by using delta time we calculated delta time on line 43 inside animation loop delta time is the difference in milliseconds between last frame and current frame and this value will differ based on power of your computer some computers can surf frames much faster than others since i already calculated this speed at which my machine can surf frames in my game i will just pass a delta time as an argument to my update method here on line 50. that way it will be available up here let's test it i console delta time it won't be available until i passed delta time as an argument here as well now the values are coming through i will need a couple of helper properties time since flap will be 0 at first it will be growing by the amount of delta time until it reaches value in flap interval then it will trigger next frame of sprite sheet and reset back to zero this time since flop plus equals a delta time remember that delta time is the amount of milliseconds between frames so faster computers will have smaller numbers here slower computers will have high delta time values as a result it will reach the target value at the same time on slow and fast computers unifying animation speed across different devices i say if this.time since flap from line 27 is more than flap interval from line 28 only then run this code that handles cycling through frames for this to work every time this condition is met and if statement is entered i also have to reset time since flap back to 0 so it can start counting again when to serve the next frame now i can change the value of flap interval and you can see it changes the speed at which we cycle through frames in our sprite sheet 500 milliseconds per frame is very slow five milliseconds per frame is fast faster than my computer can handle us since we know my computer can handle the serve next frame every 16 milliseconds as maximum i can also randomize flap interval so that each raven animates at a slightly different rhythm random number between 100 and 200 feels too slow how about a random number between 50 and 100 that feels better quick recap we are calculating delta time difference in milliseconds between last frame and current frame the value of delta time will be different on slow and fast computers to make sure we have consistent time in across different machines we have time since flap variable that increases by the value of delta time per each frame until it reaches target value in the flap interval then it serves the next frame resets back to 0 and starts counting again preparing to serve the next frame ravens are flying in straight lines from right to left i also created the direction y property on line 21. it's a random number between minus 2.5 and plus 2.5 so summary events will move up and some will move down in negative or positive direction along vertical y axis based on this value inside update method i say this dot y plus equals this dot direction y now you can see some vertical movement it's now a little bit harder to target them making our game more difficult for players one thing i don't like now is how they disappear behind the top and bottom edge i want them to move all the way across the screen and when they touch bottom or top edge of game area i want them to kind of bounce and reverse their vertical movement to the opposite direction i do that with an if statement i say if this dot y is less than 0 or if this dot y is more than canvas height minus distort height set their direction property from line 21 to its opposite value this to direction y times 1 now they just bounce when they reach edges of the game area let's draw score i create a led variable called score and i assign it to 0 initially i create a custom function called draw score inside i set fill style to white i want white numbers i call built in fill text method inside i will hard code string score colon space plus score variable we just declared and i wanted a drone on canvas at coordinates 50 75 for example now i just call draw score from inside my animation loop keep in mind since we are drawing everything on the same kind of a sequence in which you call this will affect how our game is layered i want score to be behind ravens so first i draw score then i draw ravens it's very small so let's set the global canvas font to 50 pixels impact now it's easier to read i will play with it a bit i can use canvas shadows here but i can also just draw the same text again at slightly different coordinates for example 55 and 80. the first layer will be black the second layer will be white in the game we will have to click ravens before they disappear behind the left edge of screen i create an event listener for click event callback function on event listener has the default access to this event object i assign it variable name for example e it contains information about the click event that happened for example its x and y coordinates in relation to viewport if i console e dot x and e dot y i get coordinates of my click whenever i click somewhere in the game area i promised we would do collision detection by color today to do that we first need to know what color is the pixel we are clicking on i create a custom variable i call for example detect pixel color it will be equal to built in get image data method get image data simply scans area of canvas and returns an array like object called uint8 clamped array it's a simple data structure full of unassigned 8bit integers it's clamped which means it can contain only integers whole numbers between a certain value range specifically between 0 and 255. let's scan canvas and inspect what it gives us get image data needs four arguments x y with and height of area we want to scan i want to scan just one pixel we click on with mouse so coordinates of this click event e dot x e dot y and width and height of scanned area will be just one pixel we want pixel perfect precision here okay let's just console log this variable to see in what format get image data gives us the pixel color to make sure we understand how it works if you are getting error at this point keep watching i will explain it and i will show you how to deal with it now whenever i click somewhere on canvas get image data scans area of one pixel directly under the mouse click and it gives us this image data object this autogenerated image data object contains three main properties data property which is an array currently it has four numbers inside and within height of scanned area in our case one pixel the way color data is structured here is that each four elements in this data array represent one pixel specifically it's red green blue and alpha value if you use css you know that any color can be created by combining a certain amount of red green and blue the only difference between css rgba declaration and this is that in css opacity is a value between 0 and 1. here opacity alpha is also a number between 0 and 255. 0 is transparent 255 is fully visible here for example you can see i clicked and it gave us 0 0 0 for red green and blue and 0 for alpha it means we click somewhere in the empty area keep in mind that canvas is just the ravens and score the rest is transparent rainbow colors you see are on the background and are applied to body element with css we are calling get image data on ctx variables so it is just scanning that particular canvas element it doesn't see anything else some of you might be getting error when you click on canvas and try to run get image data on it we are drawing sprite sheets our raven images on canvas in some browsers you won't be able to call get image data on the same canvas where you draw images it will give you an error that says something like canvas was tainted by crossorigin data if you are running your code locally most likely you see that error i'm using local server so i'm not getting that error right now it's a security measure related to crossorigin resource sharing apparently there could be viruses hidden in some images and by scanning that image with get image data you could expose yourself to that virus there are many ways to get around this problem and scan canvas without exposing yourself to any potential risks in our case it's simple let me show you but first i will assign a differently colored hitbox to each raven so i want one canvas that has only these hitboxes and no ravens because when i click it i want to get color of that particular hitbox not of the black raven if i create a secondary canvas and i use it just to draw these hitboxes and no images it won't give me tainted canvas error i will explain more as we write it in index.html i create an additional canvas with an id of collision canvas in style css i comment out rainbow background for a moment so that it's very clear what we are doing the same as i set up the first canvas i will also set up this new collision canvas be careful here i always make mistakes and typos when assigning multiple canvases like this for some reason i don't know why constant variable called collision canvas is document getelementbyid collisioncanvas collisionctx which is context is collisioncanvas.getcontext2d i also set collision canvas width and height just to check i give it red background yes it's covering the entire browser window perfect on my raven class i create a property called random colors at the point where each raven is created i want to roll the dice and randomly give it red green and blue color value we know that color values can be in a range between 0 and 255 so red will be math at random times 255 like this it will give us decimal points i need only integers here so i wrap it in math.floor i do the same thing for green and blue now we have three random values in this array assigned to each raven object i create one additional property called this dot color and here i concatenate rgba color declaration using these values red is random colors index zero green is index one blue is index 2 plus closing bracket like this to use this color i declare fill rectangle on line 54 and i set fill style to this dot color from line 37 now each raven has a random red green and blue color assigned when it's created by our class constructor and we use these three values to create rgb color for its hidden box hitbox means collision detection area and in our case it's the colored rectangle around each raven we can also do much more complex shapes and still get pixel perfect collision detection but for purposes of this tutorial rectangles are fine i don't want to complicate things too much this tutorial is to help you understand the technique so now each raven has an array of three random values between 0 and 255 and these values are used to draw its hitbox we will use these values scan as a unique password for each raven we click on canvas get rgb value of that pixel we clicked on using getimagedata method and we compare them with this random colors property if they all match we know we click on this particular raven this technique has one downside there is a very small chance that there will be two identical colors generated next to each other but since we do random number between 0 and 255 3 times and we only have between three and seven active ravens on the screen at any given time the chances of that happening are astronomically low if we have any math experts who can run the numbers let me know in the comments it will be one in millions possibly billions now i told you what i want to do what does that look like in javascript before we write collision code there is one small thing layers i want big ravens to be up in front and small ravens to be behind to create a sense of depth and correct the draw order in a 2d space right now sometimes you see smaller ravens up front because they are drawn here on line 83 based on the order at which they were pushed into the array on line 78 i don't have to sort them for every animation frame only every time i push new raven to the array i want to sort out all objects in the array by size i use built in array sort method sort method will simply reorganize order of elements in the array their indexes based on provided check in a callback function it will run through the array and compare every element against every other element and sort them in ascending or descending order ascending order is default it will run over my ravens array and use these a and b variables for each object i can choose many different properties to sort them by today i will choose width because i know ravens in the back will have smaller width than the ones up front i'm just gonna return it like this simple syntax and i'm comparing width of every element in the array against the width of every other element in the same array a minus b will sort my array in ascending order based on width which is exactly what i want i want small ones to be drawn first and larger ones to be drawn on top you can read more about built in javascript sort method online we can see that it works large ravens are up front and smaller ones are behind perfect as i said i want to avoid tainted canvas error so i need to make sure i have a separate canvas i can scan color from that doesn't have any images drawn on it i take collision context variable i declared on line 6 and i draw my colored rectangles on that canvas instead by adjusting code here on lines 54 and 55. nice that worked i can see we are not clearing the old paint on that canvas so on line 74 i call clear rectangle on collision context as well now we have two canvas elements one has colored collision rectangle and the other has ravens and score drawn on it on line 68 inside click event listener instead of scanning my main game canvas for pixel data i will scan just collision canvas instead now when i click it will ignore the black ravens and imagedata object will give me red green blue and alpha value of rectangle i clicked on i will compare it with red green blue value inside random colors property on each raven to know which one was clicked on and then i will set its marked for deletion property to true there are many techniques you can use to compare two arraylike objects against each other let's just keep it simple when i click on one of these rectangles i can see the values are inside this image data object on a property called data data is an array with red green blue and alpha value of pixel we clicked on i create a variable to get hold of this array detect pixelcolor.data which refers to this uint8 clamped array with four elements there is also a way to check for collision detection between two objects based on opacity alpha value like this but today we will do collision between point and shape between mouse and ravens i will ignore alpha value from now on and i will just focus on these three values red green blue so this pc pixel color variable holds this data array with four elements i take my ravens array and i call for each on it for each raven object in the array i will check if its random colors property from line 36 if the first element in the array index 0 is the same value as pixel we clicked on at the same time we also need the second and the third element to match if random colors array on my raven matches exactly red green and blue values on pixel we clicked on we know we have a collision index 0 is red index 1 is green index 2 is blue we are comparing the 2. if they match we have collision so i will take that raven object and set its marked for deletion property to true and i will increase score variable by 1. awesome it works i can click on ravens and they disappear and increase my score i can set opacity on collision canvas to zero and i can enable rainbow background on body element collision detection still works correctly well done if you followed this far you are doing great what should we do next how about we add explosion animation and sound effect whenever we click on a raven i will just repeat the same pattern we did for raven class i create an array called explosions it will hold all active animated explosion objects i will create a class to create a blueprint for these objects its constructor will expect three arguments x y and size because position and size will come from the outside and will depend on the raven we clicked on this dot image will be new image this dot image src will be boom png you can download the spreadsheet for free in the video description sprite width will be 200 pixels sprite height 179 pixels this dot size will be size we passed as an argument on line 61. same for this dot x and this dot y these values come from the outside this dot frame active frame will start from zero this dot sound will be new audio like this this dot sound src source and here as a source you can add any sound you like for example i will go to opengameart.org website i click browse sound effects and i will search for magic sfx special effects i will choose this pack of 4 sounds i download it and i will use the one called ice blast i will rename that file as a boom dot wav and i will add it to my project folder you can choose a different sound if you want you can also have multiple sounds and play a random one here it's up to you in update method same as we did before i will use delta time to time my animation we will have one variable to accumulate the delta time values called for example time since last frame it will start at zero then we need a second variable to define limit when the next frame triggers i call it for example frame interval and i set it to 200 milliseconds i pass delta time as argument to update method it will be coming directly from animation loop i will show you in a minute this.time since last frame will be slowly increasing by the amount of delta time if time since last frame is more than frame interval 200 milliseconds i increase this dot frame from line 69 by one i also want to play the sound when we are on frame zero when the explosion first appears there are better ways to do that but for today i will simply check if active frame of this explosion is a zero and i take this sound from line 70 and i call build in play method on it explosions will also need draw method which will draw the actual sprite sheet animation we will pass the draw image 9 arguments same as we did with ravens image we want to draw this dot image from line 62 four values for area to crop out single frame so source x is this dot frame times this dot sprite width source y will be zero because we only have one row of sprites source width will be sprite width from line 64 and the source height will be sprite height from 965. so now we told javascript what area we want to crop out now we need to give it x y width and height where to place it on destination canvas so this dot x this dot y and this dot size for width and distal size for height as this dot frame variable increases here on line 79 because of this source x property here we will show frames 0 1 2 3 and 4. now where do we trigger this code to create and animate new explosion the best place would be here i think this if statement detects collision by color so when collision is detected i take explosions array from line 59 and i push new explosion in there this will trigger explosion class constructor on line 61. i can see it expects value for x and y coordinates and size because i want explosion to depend on the size of the raven we clicked so here we are cycling through raven's array referring to individual ravens as object i want to pass x y and width of that raven as x y and size arguments here okay that should work i can test it by console again explosions array from line 59. i can see as i click and hit ravens explosions are being added perfect i made sure my explosion class has update and draw method same as my raven class that's why here on line 123 i can simply just use spread operator and expand the entire explosions array into this array i'm creating on a fly so that i can call update on all ravens and all explosions at the same time like this i do the same thing for draw method on line 124 i like this syntax it looks clean down here i will also remove all the explosion objects from the array using builtin array filter method i need to create a property called marked for deletion on my explosion class for this to work as you can see i'm repeating the same pattern we used for ravens i hope that using the same structure like this helps you to understand and navigate in the code a bit better initially i set it to false in update method i write an if statement if this.frame from line 69 is more than 5 which means after all the frames of sprite sheet have been displayed one by one and explosion animation is complete i set marked for deletion from line 74 to true when i click on ravens sound plays and explosion sprites are animated we are making great progress we just need to polish some details here if i change frame interval on line 73 to 500 you can see it only affects the first frame the rest of animation is playing really fast oh it is because i need to reset time since last frame back to 0 every time so it can count towards the next frame interval over and over to serve next frames 500 milliseconds is too slow let's try 200 i want to align explosion animation better over the raven sprites let's move it a bit upwards by adjusting destination y argument in draw image method i will make it relative to size this dot y minus this dot size this dot size divided by four yeah i think this is aligned well now let's create game over condition on line 11 i create a global variable called game over and i set it to false initially inside update method on ravenclaws i create an if statement if any raven manages to get all the way across the screen and behind the left edge of game area game will end if this dot x is less than 0 minus this dot with set game over from line 11 to true and inside animation loop on line 132 i only want to run request animation frame and serve the next frame of our game as long as game over is not true exclamation mark here when raven gets all the way across the screen game over will be set to true and game will stop like this i also want to display game over message same as we did at draw score i will create a function called draw game over first style will be black fill text will be for example game over your score is plus i concatenate score variable i want it in the middle of the screen so x coordinate will be canvas width divided by 2 and y coordinate will be canvas height divided by 2. now i need to call my draw game over function here in animate if game over is false keep serving the next frame else call draw game over method to display message and final score it's not centered it's because these coordinates on line 101 mark top left corner and the text goes towards right and bottom from that point same as when you are drawing rectangle or image on canvas with text it's easy to center by setting text align property to center like this yes that worked same as i did with score i want to give it shadow i will use this trick where i draw the same text twice with different fill color and i offset it by 5 pixels nice let's change direction of background gradient maybe 45 degrees 125 degrees let's do a little bit of experimenting now and also to solidify what we learned today i will use the same code pattern we used for ravens and explosions to add particle effects to our game i will go a bit faster now this part is just for fun feel free to run your own coding experiments i create an array that will hold all my particle objects i create particle class constructor will expect x y size and color this will be coming from outside the class and will depend on what raven is leaving this trail and creating these particles it will be shooting from their tails as usual we will create properties for this dot x and this dot y this dot radius since particles will be drawn as circles it will be random number tied to size of a raven let's try this formula and see what it looks like particles will be growing in size so we need max radius to know when to remove them and also at which point they reach maximum opacity it will be random number between 35 and 55 for example marked for deletion as usual will be false at first horizontal speed x will be a random number between 0.5 and 1.5 because i want the particles to slowly draft to the right this dot color will be passed from the outside update method will move particles to the right horizontally it will increase radius by 0.2 per frame and it will check if this dot radius is more than max radius if it is it will set marked for deletion to true draw method will just draw a simple circle begin path to start the drawing fill style will be this dot color from line 101 arc method to draw a circle i pass it x y radius start angle and ant angle like this and we fill circular path with color we have a class that will serve as a blueprint to create particles i want them to follow ravens as they fly to create trails behind them to do that i go up inside update method on raven class every time we serve next sprite sheet frame at the same interval we are going to take particles array we just created and we will push new particle inside my particle class constructor expects four values to come from the outside x y size and color so i pass it x and y of this raven width of the raven as a size argument and this dot color we use for collision detection rectangles will also be color of particle trail for that particular raven you can see here on line 95 constructor wants these four properties to come from the outside so that it knows where on canvas to draw the particles how large and what color i can see i forgot to declare this dot size here like this it will come from here and it will be used here to make radius of particle circles relative to the size of raven smaller ones should have smaller trails so we have particle class here on line 52 we are creating new particle object and pushing it into particles array inside animate i use spread operator again to expand contents of particles array here so that their update method gets called and i also expanded here for draw method i also need to make sure all particles with marked for deletion properties set to true get filtered out from particles array nice we are drawing particle trails you can see they come from the top left corner of raven hitbox i will adjust that position a bit here inside particle class constructor first i need to move this dot size up so that its value is available for all properties coming after it this dot x will be x passed as argument on line 95 plus this dot size from line 96 divided by 2 to center it horizontally yes this dot y will be y plus this dot size divided by two no that's too low this dot size divided by three much better i want particles to be drawn behind ravens we are drawing everything on a single canvas element so how things are layered depends on the order at which javascript cycles through these objects and calls their draw methods for every frame i will change the order here to draw particles first and then ravens and explosions will be drawn over them like this awesome we have a working code let's clean it up in update method on particle class i want radius to grow faster 0.5 0.8 0.5 is fine drawing trail on every single raven can be performance expensive i want a property that will allow me to randomize it and allow me to set what percentage of ravens will have particle trails on my raven class i create a property called this.hessa trail i want this property to be true for certain amount of ravens and falls for the rest as marcus pointed out in my generative art tutorial any conditional expression results in a boolean value so instead of doing if else statement here i can simply just roll dice with math at random master random code like this will return a random value between 0 and 1. so i call it and i check if that random value is more than 0.5 and that's it it should be true roughly for 50 of ravens this conditional expression results in a boolean value true or false depending on if math at random rolls a random number that's higher or lower than 0.5 i really like this syntax very simple and clean inside update method on ravenclass i will only create new particles if this dot has trail is true like this now only half of my ravens will have trails i also want particles to animate from fully visible to transparent inside draw method on particle class i set global alpha property on my canvas to be 1 which is maximum fully visible minus the current size of the particle divided by max size as the particle's radius grows eventually radius will be the same size as max radius so let's say max radius is 30 pixels at that point where the current radius is the same size as max radius we will have 30 divided by 30 here which is one and one minus one is zero particle is slowly growing more and more transparent and at the point when it reaches maximum radius it will be at zero global alpha this formula might be a bit difficult to completely understand if it's the first time you see it but it's very useful we will talk about it again in some other video as you can see global alpha is spilling over and affecting my ravens as well that's an easy fix if you want to change some global canvas properties such as fill style global alpha rotate translate and so on and you want those properties to affect only a single element you draw and not the others you can just wrap that drawing code between builtin save and restore methods save will create a snapshot of current canvas global settings and then we change global alpha here which will affect just this one particular particle and then i call restore to revert canvas settings back to what they were at this point save and restore are especially useful for rotating elements on canvas but you can also use them for other things like this my particles are blinking before they disappear it is because javascript first runs over the entire array before it filters the particles that are too large out and my global alpha formula works only in a specific range between 0 and max radius some particles get outside that range and are drawn fully opaque for a second before they get filtered out to fix it is simple i just trigger marked for deletion a little bit sooner for example by saying max radius minus 5 in my check online 111 let's make the trail nicer i will add five particles every time instead of adding just one on line 54 i create a for loop like this and i put this code inside if i make radius grow slower trail will be longer because it will take particles more time to reach max radius be a bit careful here not to have too many active particles on screen at once because at some point it will start affecting performance and frame rate i can also randomize the initial x and y coordinates a little for example i can add random number between minus 25 and plus 25 i think it looks a bit more interesting like this i can also add more enemy types for example i can add fast flying bats that will be worth extra score points maybe i want ravens with trails to be worth more score but also have more lives there are many things we can do here if you are still feeling creative check out some of my playlists i have creative coding for beginners game development playlists and advanced animation effects everything with just html css and plain vanilla javascript no frameworks and no libraries check out some recommended courses in the video description i'll see you there if you want to build games with javascript all you need is a small set of tools and techniques let's add a couple more of them to our toolkit today and make sure we really understand them in javascript the extends keyword is used to create socalled child class that way i can have my main parent class where i define properties and values share between all my enemy types and then i can have child subclasses that define specifics such as different visuals different movement patterns and so on for each enemy type then when i instantiate my ghost object and i call update on it if javascript can't find update method on the ghost class it will go look for it automatically on the parent anime class and it will run the code from there there is another special keyword called super today i will show you exactly when and how to use it let's build a project step by step completely from scratch and in the process let's learn everything we need to know about subclassing in javascript and how to use it to keep our code modular clean and easy to read this tutorial is for beginners i will take you through the code in a way to make sure you understand everything we will build a really fun animation project and i will show you many game development techniques today this video is independent and i will explain the code from scratch but it's part of a larger series where i teach you tools and techniques you will need if you want to be a game developer or if you just want to learn frontend web development and javascript on fun visual animation projects if you go along with me today you will get three free premium sprite sheets so that you can get exactly the same result check out this website for more beautiful game development art assets to start my project i create a basic webpage boilerplate markup a link style css file javascript file and i created html5 canvas element with an id of canvas one i bring my three images into the project by creating three img tags with ids worm ghost and spider you can find these images to download in the video description it might be a good idea to use the same images as me at first and then modify the code and use your own art assets once you get everything working it might save you a lot of time debugging if you follow exactly what i'm doing especially if you are a beginner i give my canvas a border width and height and i position it with css in the middle of the page i will also hide the project images we will draw them and animate them with javascript in a minute by including images as image tags i can make sure they are fully loaded before my javascript code runs by using load event listener it will prevent potential errors i will show you exactly what i mean as we go along i set up my canvas using these four lines of code as usual let's outline the entire project structure now so that you can see what functions and classes we need and how they are connected to each other when we have the complete project structure we will be expanding on individual parts to add more functionality the most important thing today will be my game class i will use it as the wrapper that contains and controls all movement and animation logic and basically everything else it's a javascript class so it will need a constructor which is a monitor method for all javascript classes it will also have update and draw methods in game class constructor i create a property i call this dot enemies my game object will hold an array that contains all enemies like this my game class will also have a private method called add new enemy this method will be called every time i need to create and set up a new enemy for my game if method's name starts with a hash symbol like this it will be a private class method it means it can only be called from within my game class to manage some kind of internal functionality in our case adding a new enemy into this.enemies array from line 8. if you try to call this private method from outside game class you will get an error notice that update and draw methods are public because i will need to call them from my animation loop from the outside a bit later my add new anime private method will need a way to create new enemies for the game so we will write another class i call anime and inside we declare a blueprint whenever i call this anime class from inside add new anime method it will create one new enemy object for me i will show you how to make animated ghosts worms and spiders they will all be created by this enemy class but they will have different animations and different behaviors to make our game more interesting and maybe more difficult for the players so again as you know every class needs a constructor to hold the blueprint and we will also have update and draw methods here update and draw method on gameobject here will be handling updating and drawing my entire game for example all enemies player obstacles backgrounds menus and so on update and draw method here on the anime class will be handling only each individual enemy such as their position movement pattern sprite animation and so on and finally to complete the skeleton of our project we will need a custom animate function that will call what needs to be called and a loop around to move and animate things in our game here in animation loop i declare what happens in our game frame by frame at first we will call built in clear rectangle method and we will clear old paint from the entire canvas so from coordinates 0 0 to coordinates canvas with canvas height if you are a complete beginner this is horizontal x axis and this is vertical y yaxis so point zero zero is here and point x two hundred y two hundred for example is here this is the basic thing you need to understand if you want to draw on canvas so we cleared old paint from canvas to make sure we can only see the current animation frame we write some code here depending on what we want to happen in our game and we call request animation frame built in javascript method which will simply take function we pass to it and it will call it once animate will run its code and call itself again run its code and call itself again over and over this is how you create animation loop i don't want any of this code to run until i'm sure my web page including canvas element and all project images have been loaded so i highlight all the code and i cut it for a second i want to put it inside load event listener document dot add event listener and we will listen for dom content loaded javascript event i actually made a mistake here because the dom content loaded event fires when the initial html document has been loaded and parsed but it doesn't wait for style sheets and images the correct event to listen for here is the load event which only fires when the whole page has been loaded including all dependent resources such as style sheets and images so please replace dom content loaded event with load event here you will not notice any difference if you are working locally because images will load instantly but if you are loading images from an online server somewhere load event is the one you need here so i paste all the code back here inside my load event listener we have canvas setup main game class enemy class and animate function if you want to animate something it's important that it runs at the same speed on slow old computers and on brand new gaming super pcs not every computer is able to surf frames at the same speed also some screens have different refresh rates and request animation frame adjusts when it serves the next frame based on screen refresh rate so what i want to do now is count how many milliseconds happened between frames and only when we reach certain threshold we will serve the next frame since we are passing animate as an argument to request animation frame here request animation frame has another secret feature it will pass an automatic timestamp argument to the function it calls so our animate has access to timestamp argument which was automatically generated by javascript because i called animate using request animation frame here i want to calculate the difference between previous and current animate call in milliseconds difference between frames and animation is also called delta time simply explained as request animation frame runs over and over it is passing animate this automatic timestamp argument i want to know what is the difference in milliseconds between previous timestamp and timestamp from the current loop so called deltatime i will calculate it by saying a timestamp that was passed in this loop minus timestamp that was passed in the previous loop i will call it for example last time after i used last time variable that was holding old timestamp from the previous loop to calculate delta time i can reassign last time to the new time stamp from this loop so that it can be used in the next loop again let's console delta time to see if it works here i declare animate i also need to call it the start the first animation loop oh yeah last time is not declared i declare it right here and i initially set it to 1. this value of 1 will only be used for the very first loop because on the second loop it will get reassigned to the current timestamp in console i can see my delta time is around 16 milliseconds this is very common refresh rate for most computer screens but if you have high refresh screen you can get a lower number here and if you have old computer you can get higher number here especially when you create a bigger project where you animate many moving parts at this point even very slow computers should handle 16 milliseconds delta time time between animation frames since our game doesn't have any graphics yet if i scroll in console all the way up to my first delta time console aux i can see the initial call was none not a number it's because animate only receives automatic timestamp argument here when it gets called by request animation frame on the very first initial call it doesn't have any timestamp argument so i will pass it 0 just for that first loop now we know how to calculate delta time number of milliseconds between frames faster computers will have lower number slower old computers might have higher delta time because it can take them more milliseconds to serve the next frame since we have this delta time value we can adjust animation speed with it to make sure our game runs at the same speed on slow and fast computers i will show you where and how to use it as we build our project and start animate and move game characters around on canvas console lock like this can cause performance issues so don't forget to remove your console logs when you don't need them anymore on line 22 i have my anime class it has a mandatory constructor method which will be used as a blueprint to create one new enemy object whenever i call this class with a new keyword from somewhere in my project let's write that blueprint and inside we declare properties and values of our enemies each anime will need x and y starting coordinates so that javascript knows where we want to draw them on canvas our first hard code coordinates 100 hundred we will change that in a minute i will also give each enemy width of 100 pixels and height of 100 pixels update method on enemy class will just move the enemy by 1 pixel to the left draw method on my custom enemy class we'll call build in a fill rectangle method and it will first draw a black rectangle representing my enemy i pass it this dot x from line 24 this.y this dot with and this load height great we have anime class now we can call it to create enemy object and add it to our game inside add new enemy private method i take this loot enemies from line 9 and i call build in push method push method can be called on arrays and it will take whatever we pass to it and it will push that at the end of the array so i pass it new enemy the new keyword is a special command in javascript it will make javascript look for a class with the name enemy and when it finds it it will take its constructor and use the blueprint inside to create one new blank javascript object and assign it values and properties based on instructions inside the blueprint that new anime object will also automatically have access to update and draw method on anime class when you instantiate object with the javascript it will run its blueprint inside constructor so i will do something which might look a bit strange to you any code put inside the constructor will be executed when you create a new instance of that object with the new keyword so here when i create new instance of my game object i will create enemies array and i will call its private add new enemy method automatically which will push new enemy inside enemies array to check if that really happened i will also console lock this dot enemies to execute all this code here all i need to do is to instantiate my game class so let's do it down here on line 39 i create a new constant variable i call for example game and i set it equal to new game like this doing that created one new blank game object and a train code inside constructor here on line 8 so this console log from line 11 is showing that this dot enemies from line 9 contains one new enemy object perfect you can see that enemy object has x and y width and height as we declared here on line 25. now inside update method on game class i will cycle through all enemy objects inside this dot enemies array and i will call their update method from line 31. i hope you know syntax of for each method i'm simply saying here take this.enemiesarray from line 9 and for each object in this array run their associated update method this is es6 syntax so called arrow function i will also take the same enemies array from line 9 and i will call draw method from line 34 on all these enemy objects currently there is only one inside but there could be many more down here inside my animation loop i take instance of my game class from line 39 i call update method we just wrote and i also call draw method and here we are animating one enemy in our game i hope you can see advantages of code structure like this let's say i also have array of obstacles background layers power ups players and so on i can call all of these from update and draw method on my game class to get everything moving with very little code from a single wrapper function keeping my code clean and organized this way it's a good practice not to use global variables inside our classes so i will take context with and hide and i will put them inside my game class these arguments will be passed here on line 39 when i create an instance of game class so i pass it ctx from line 3 to tell javascript which canvas i want to draw on i will define width of my game by passing it canvas width from line 4 and canvas height from line 5. these three variables just as my game class constructor expects here on line 8. then i take these arguments and convert them into class properties this dot ctx is ctx passed on line 8 this.width is width and this.height is height now i converted public variables into class properties and i can pass them around when i need them by passing game object as an argument i will show you let's say i need width and height of my game inside the enemy class because i want my enemies to appear behind the edges of game area on line 23 when i create new anime object i will pass it this keyword which here refers to the game object we are currently inside that game object will carry all references to its width height and other properties with it let me show you so i'm passing this keyword and inside my anime constructor i will call it game here i created this.game property and i set it to game that was passed as an argument now i have access to game object from inside my anime class i can console log it and you can see all its properties including width and height so now i have access to width of my game from inside enemy class by saying this.game.width the initial starting x horizontal coordinate for enemies will be just behind the right edge of canvas initial starting ycoordinate will be a random number between 0 and this dot game height so in this case between 0 and 800 pixels because height of my game is 800 now whenever i reload page new enemy is generated with random vertical coordinate i achieve that by passing reference to my game class to enemy class constructor online 23 which will take all these properties and values with it i call it game and convert it into class property on my enemy class making them available when i need to position newly created enemies this is one way how you can pass class variables around if you want to avoid using global variables in your projects i don't really want to add just one anime when i create instance of game class i want to create new enemies over and over in a certain interval if i just call this.add new anime from inside update method it will create new anime for every animation frame that is too many and it would freeze my game very quickly i commented out game class is responsible for adding new enemies to the game so i will give it two new properties this dot enemy interval will define number of milliseconds between adding each new enemy into the game let's try 400 milliseconds this dot enemy timer will count milliseconds from 0 to 400 over and over in update method i can say if this dot enemy timer is more than enemy interval call add new enemy private class method also at that point we want to reset enemy timer back to zero so it can start counting again else meaning if enemy timer is less than 400 milliseconds increase enemy timer by one every time we add a new enemy i will counterlog this.enemies array from line 12 just so we can check if it's adding objects or not i decrease enemy interval on line 13. awesome we are adding enemies but you know how we said that each computer could run at a different speed that could mean that enemies are being added faster or slower on some computers i want my game to run at the same speed on every computer and that's why down here on line 56 in animation loop we calculated the delta time time between frames and milliseconds i will use it now i pass delta time to game.update method on line 58. from my previous console log i know my delta time is 16 milliseconds my computer can serve a new frame every 16 milliseconds value of delta time is dependent by the power of your computer but also on your screen refresh rate because request animation frame method adjusts to maximum screen refresh rate if the computer can handle it now i have access to delta time value here in my update method so instead of adding hardcoded value plus 1 i will add value of delta time to my enemy timer on line 13 i set an m interval to 400 milliseconds or maybe 1000 milliseconds here i am increasing enemy timer by 16 milliseconds per frame when we accumulate enough to reach 1000 milliseconds one second we will add new enemy to the game if somebody has a faster computer their delta time will have smaller value on slow computers delta time will have higher value and will be getting near to the target 1000 less often but in larger steps so in the end my code will run at the same or very similar speed on slow and fast computers regardless of their power or monitor refresh rate and this is how you use the delta time to trigger periodic events in your games or animation projects i also need to make sure i'm passing the reference to my canvas properly and not using global variable let's follow the logic we declare ctx here on line 3. i pass that global variable to my game class when i instantiate it on line 52. on line 9 i take that argument and i convert it to class property then i pass ctx from line 9 to draw method on my enemies and on line 47 i need to make sure draw method on enemy class expects that argument and this way line 48 is using this.ctx that was passed around from gameobject rather than using globalctx variable i'm going to log in this.enemiesarray online20 and i can see it keeps growing i need a way to remove enemies that have left the screen we could potentially also use something called object pooling here but i will leave that for another episode first i will need a flag on my enemy objects that will mark them as ready to be deleted and then we will simply filter these objects out i will call that property this dot marked for deletion and i initially set it to false then inside update method on anime class i will check if this dot x is less than zero minus this dot with meaning the enemy has moved across the screen and behind the left edge of canvas if it has i will set its marked for deletion property to true now i can go inside update method on game class and here i will take this.enemiesarray from line 12 which currently has around 20 objects and it keeps growing and i will filter it filter is a built in javascript method that manipulates arrays it simply creates a new array with all elements that pass the test implemented by the provided function so here on line 17 i'm saying take this.enemies from line 17 and reassign it to the same array but only include elements that have this dot marked for deletion property set to false exclamation mark here means false let's run the code and see if it works yeah we stop at 10 enemies and it's not growing anymore because we are removing old ones as we are adding new ones might be one good performance idea here you don't have to check and filter enemies for every frame of animation we could for example do it in a certain interval i could even take this line of code and put it inside this if statement it would still filter old enemies but it would run only periodically whenever i add a new enemy to the game we are making nice progress we have already implemented so many features here between lines 35 and 53 i have my enemy class it's a blueprint with properties and methods that determine what my enemies look like how they move and how they behave let's expand on it and make them more interesting rather than simple black rectangles i will create a socalled sub class or child class by saying class worm extends enemy doing that will make anime a parent class of worm and for example if i call update or draw and javascript can't find that method on my worm class it will automatically go looking for it on the parent class so it will look for that method on anime class same goes for properties declared in constructor if there is no constructor on my worm class it will automatically use the constructor from anime when i do this i can have shared enemy class that declares all logic properties methods and features that all my enemies have in common for example their sprite animation logic collision checks with player and so on while at the same time i can declare child classes where i can override improve and change some of these properties and methods to create unique and very different behaviors for different enemy types and that's exactly what we will do now let me show you how much visual and behavior variety we can create without repeating the code all enemies have in common doing this will keep our code clean and modular and you can go crazy with different enemy types while still keeping your logic organized and easy to read on my worm class i don't have to declare constructor at all and javascript will automatically use constructor from line 36 on enemy class but in most cases you want each enemy to have different width height x and y position and so on so i kind of want to use both i want to take all properties from enemy constructor and i want to add some additional properties on top of it that will be specific only for my worm objects i declare constructor and i know worms will have unique value for image properties so this dot image equals worm this line of code is a weird syntax and i will explain what's going on and how comment works when i bring image to my project this way in a minute let's first finish constructor method on worm class same as on line 36 worm class constructor will expect the game as an argument now i want to say take all the code between lines 37 and 43 on enemy class constructor and use it here to do that we use special super keyword the super keyword is a special command in javascript and it's used to access and call function on an object's parent so here i call super and i pass it game to literally run the constructor on its parent class after that i can add more properties on my worm class constructor like this important thing to note here is that you have to first call super and run parent constructor like this before you declare any additional properties using this keyword otherwise you will get a reference error in derived classes like this super must be called before you can use this keyword so now my worm constructor contains all the code from between lines 37 and 43 and additional distort image property set to worm each enemy type will have different starting x and y coordinates and different width and height so i will actually take all these and put them on my worm i want enemy class constructor to have only properties and values that are shared for all my enemy types up here on line 31 inside private add new anime method rather than instantiating parent anime class i will instantiate child worm class again i'm passing it this as an argument and because we are inside game class this reference is the entire game object so all these properties we travel down to worm class and inside constructor we are taking that game and passing it to super instantiating constructor of its parent anime class which is here anime class also has update and draw methods and when i call update and draw on my worm and javascript can't find it it will automatically go looking for them on the parent anime class i hope it's becoming a little bit more clear how this works and how parent and child classes relate and work together if i run the code we have our worms coming again just to prove that draw method that is called from line 46 is taking properties from worm class constructor let's change this dot with on line 56 as you can see now my worms are 200 pixels wide so what is this weird syntax online 58 this is not how we usually bring images into a project usually i would use getelementbyid to target my image element with an id of worm that i created in index.html in the beginning i wasn't aware of this so all the credit goes to dany who says a little known fact is that any elements created in the dom with an id attribute are automatically added to the javascript execution environment as a global variable this means that you can access any html element with a javascript using its id no need for document.getelementbyid or queryselector i'm just doing this as an experiment and you will see in a minute that it actually works if you're having any issues you can still bring the image into the project the usual way and also ideally pass it to the worm class constructor as an argument so that we are not pulling global variables directly from the outside i'm just experimenting here a bit i really like tips like this thanks danny nowhere in my code have i declared this worm variable the only place you can find this reference is id on line 12 inside index html but this image will still work you can test it by console logging this.image i have too many console.logs let's comment outline 38. yes you can see that the javascript is actually finding the image with an id of worm automatically without us having to use getelementbyid like we usually do so let's use that image and make our worms look a bit better than black rectangles you can download these spreadsheets for free in the description and you can use them to follow along with this video for educational purposes to use them in any commercial project you would have to buy a full license from the artist's website i will link his site as well he has a lot of great game development art assets there check it out i feel like i explained built in canvas draw image method 100 times on this channel this method is so important at first i will just use the version with 5 arguments image we want to draw x y width and height where to draw it on canvas this way we will just squeeze the entire sprite sheet with all its six frames into the predefined area of 200 times 100 pixels notice that i'm calling draw method on my worm class it's using these properties but since javascript can't find draw method on worm it will look for it on parent enemy class and it will use that one let's remove this console.log and this fill rectangle as well i can change width and height but now i would actually like to draw just the first frame from the worm sprite sheet i removed all these lines i commented out earlier i create a new property on worm class called this.sprite width and it will be a width of a single frame in my sprite sheet if i take width of my sprite sheet and divide it by 6 the number of frames i will get 229 pixels height of a single frame is 171 pixels i take width and height and move them up here now i need to use draw method to cut out just single frame from that sprite sheet and place it on canvas for that i will need to give it nine arguments so additional four to tell javascript what area i want to crop out from the source image i need to give it source x source y source width and source height arguments source x and source y will be 0 0 since i'm just cropping out the first frame for now source width and source height will be distort sprite width from line 52 and this dot sprite height from line 53 so to crop out a single frame from an image with draw image method i need to give it nine arguments image i want to draw x y width and height of what area i want to crop out and x y with an height of where on canvas we want to place that cropped out piece of image onto now we are drawing just one frame perfect you probably noticed that it's a bit stretched that's because this width and height which is coming from here has no relation to the actual size of a single frame so the ratio is different let's make width and height the same aspect ratio as our sprite sheet i do that by making width half of sprite width and height will be half of sprite height i need it to do half because the original size would be too large as long as i use the same modifier on both width and height in this case i divide both of them by two it will preserve the aspect ratio of the original sprite frame all my worms are moving to the left by one pixel per frame what if i want each worm to have different speed for example a random value between 0.1 and 0.2 and up here inside update method on enemy class i say this dot x minus equals the slot speed that will be very very slow let's make it faster you might have realized that i'm not using delta time in this movement calculation so let's use it to make sure the worms move at the same speed on all machines i'm calling this update method here on line 25 so i pass it delta time which we made available here before now that i have access to delta time in update method on enemy class i will pass it here as an argument and to factor in time difference between animation frames when moving something around we have to multiply it that way faster refresh rate with lower delta time will move often but by smaller steps slower pcs will have higher delta time they will not draw frames so often but they will have higher delta time so they will make larger steps to compensate for the difference now the base speed is too much so i amend it on line 59 i will actually rename it vx velocity on horizontal xaxis because maybe some other enemies will have a vertical movement also i need to rename it on line 41. if i go up on line 13 and reduce enemy interval to 100 milliseconds we will get a lot of worms and something will become apparent they are layered randomly in order as they are added to the game for example this worm should be probably behind this one and this one behind this one if we pretend this is 3d game space and worms that are higher should be behind worms that are lower it would look better how do we achieve that that index or whether worm is in front or behind at worms depends on order at which they are added to the array on their index in that array because as i push them into enemies array one by one we cycle through them from index 0 to the maximum index in that array and we draw worm with index 0 then worm with index 1 on top of it if they are in the same area then worm with index 2 will be on top of them and so on i want to reorganize my array so that index in the array is tied to their vertical position so that we first draw worms in this area and then we draw the ones in this area on top of them as we go down on the page vertically in plus direction on vertical yaxis that will cause worms to look like they are properly behind each other and not messy like this look at this this is a mess this one is sliding over the other one's eye so every time i push new worm into the array i will just build javascript sort method you can simply just call sort on the array and it will sort them in ascending order by default if you want more control you can give it a callback function sort simply takes every element in the array and it performs a check comparing values between these two elements pushing them up and down in the array depending on the condition in the callback i want worms with lower vertical y coordinates to have lower index so that they are drawn first so my condition will be a dot y minus b dot y like this sort is a built in javascript method it abstracts away the actual algorithm that does the sorting work so let's not spend more time on it now all we need to know for now is how to use it when i run the code you can see that worms that are higher are drawn behind the worms that are lower making it look like they are moving in actual 3d or maybe in two and a half the cartoon space well it doesn't look messy anymore you can swap between ascending and descending order by swapping these values in our case we want a minus b also notice i'm not sorting the array for every animation frame only when i add new enemy into the array so this is our worm class it's a child of anime and it doesn't have update and draw methods because as we said if javascript doesn't find them on the worm class it will go looking for these methods on the parent class but what if i want to use the base code from draw method on enemy class and i want to add some extra code to it to create some additional visuals for example as boris suggested ghosts need to be semitransparent but i don't want reduced opacity on worms only on ghosts so how do we do something like that i'm sure you can come up with some clever if statement but let's keep it clean and use child classes for that i will copy my room class and rename it to ghost image online 74 will be ghost referencing the id here on line 13 in index html i look at my sprite sheet width divided by number of frames so sprite width of single frame is 261 pixels height is 209 pixels in this case horizontal speed modifier will be a little bit higher than worms let's say a random number between 0.1 and 0.3 so that's the base ghost child class how do i randomly push worms or ghosts into my game one way to do that is to create a property on my main game object called distort enemy types it will be an array with two elements for now worm and ghost inside add new anime private method i will randomly pick one of the options in the array i create a constant variable called random anime and i set it equal to this dot anime types and square brackets so if index here is 0 we get worm and if index here is 1 we get ghost how do i randomize this index and let it choose one of these randomly every time we run add new anime method i can just put math at random statement and it will be a random number between zero and length of distilled enemy types array that way i can keep adding more and more enemy types to the array and this code will still work maybe my game will have 20 different enemy types it doesn't matter it will still work the only problem is that math at random returns numbers with decimal points and there is no index 1.5 in this array it's easy to fix i will wrap it inside method floor which will round it down to the closest integer now i can check if random enemy variable is warm we will push new worm into this dot enemies array else if random anime is ghost we will push new ghost perfect so we have this.enemy types array on the main game class this can contain as many enemy types as you want inside add new enemy we randomly choose one of them every time we are about to create new enemy object and based on that random choice we create either worm or ghost so now both worm and ghost are child classes that extend my main enemy class let's switch to kind of flat 2d view i want worms to move only on the ground so i change their vertical y position to this.game.height minus distort height worms are sliding on the floor ghosts are flying in the air i want ghosts to take up only the top 80 percent of the game area not to be so close to the ground their vertical y position will be a random number between 0 and game height times 0.8 or maybe 0.6 yeah since we switched to this new view i don't really need to be sorting my enemies by their vertical position anymore so i comment out this code on line 35. with both worm and ghost we are only modifying properties on the constructor they both inherited the same identical update and draw method from the main enemy class with no modifications at the moment we said we wanted to make the ghost semitransparent so let's do it i declare draw method on ghost class and now two things can happen we can override the draw method with a completely different code here because when we create a new worm javascript will not find the draw method and we'll go looking for it on enemy parent class but with ghost it will find the draw method right here and it will ignore the original draw method on enemy class the second option is that i want the code from draw method on enemy class to run plus i want to write some additional code on top of it that will be unique only for ghosts i can do that by calling super the super keyword here simply represents parent class so imagine i'm saying enemy dot draw because i want to call it's draw method first super.draw means animate.draw basically super represents the super class the parent class so here inside the draw method on ghost class first i call draw method on enemy class and i know it expects ctx as an argument so that it knows what canvas we want to draw on that ctx property is coming from here on line 29 by the way where i'm calling draw on all objects inside this.enemies array i'm calling draw on all ghosts and all worms at the same time so first we call draw method on parent enemy class from 950. we will run all the code in here but we will also add some additional code that will be specific only for ghost objects in this case i will set global alpha property to 0.5 this will set opacity to 50 you can see that it affects all ghosts and all worms as well it's because global alpha canvas property works the same as fill style for example once you set it you are setting it for the entire canvas it will stay that value for everything drawn on the same canvas unless you redeclare it to something else since i want global alpha to only affect ghosts and nothing else on canvas i set it to 0.5 i draw my ghost and i set it back to 1. the alternative way to do this would be to call ctx save builtin method which will take a snapshot of all canvas settings at that point then we can change global alpha and anything else we need to change we draw the ghost and we call ctx restore which will automatically restore canvas properties including global alpha back to what they were at this point when we called safe for the first time this technique is especially useful if i was changing multiple canvas properties at the same time not just global alpha so this is how you extend a method from parent class with a help of super keyword now that we know how to do it we can also extend update method and make ghosts move in wavy patterns let's try i redeclare update method on ghost class and i pass it delta time i call super dot update and i pass the delta time this will run all the code in update method on enemy class from line 46 here i add a new property called this.angle and initially i set it to 0. then in update method i will say this dot y vertical position of my ghosts plus equals mastered sign built in javascript trigonometry function and i pass it this.angle as an argument i covered this in my enemy movement patterns episode as part of the series before so now just quickly moth.sine is a builtin javascript function that returns a sign of a number we pass to it it expects angle value in radians and it will return a value between 1 and plus 1. if you keep calling it and passing it every increase in angle value as we are about to do here it will endlessly cycle by small increments between minus one and plus one creating wavy movement pattern so called sine wave so every time update method runs i will increase this dot angle from line 79 by one that angle value is being passed to math.sine function here at the same time you can see it makes the ghost shake up and down we can also multiply it times a certain radius value this will make the curve larger like this we need to be increasing angle much slower let's try 0.1 per frame 0.05 0.02 you can see how that affects the movement curve i change radius value and angle value let's randomize the wave size for each ghost i create a property i call for example this dot curve it will be random number between 0 and 3. and i use it here now some ghosts move in smaller some in larger waves i reduce the number of enemies by increasing enemy interval on line 13. let's add a new enemy every 500 milliseconds for example so with ghost class we are extending draw method to make it semitransparent and update method to give it wavy vertical movement worm class is just using the base draw and update methods from its parent anime class let's create another child class and let me show you a completely different type of movement for the third enemy type i just copy worm class here so that i don't have to write all of that again i will call it spider i check my sprite sheet sprite width width of a single frame is 310 pixels sprite height is 175 i want spiders to start from just behind the top edge of game area so 0 minus distorted height their horizontal speed will be 0. i only want them to move up and down image will be spider referencing this id from line 14 in index html i give them v y velocity y property and set it to 1. now i create update method i pass it delta time first i call update method from parent anime class from line 46 and then i add some additional code at first let's just increase vertical speed by one on line 15 i add spider to my enemy types and here i say else if random enemy is spider push new spider object into enemies array my spiders are not showing and that's because yes they just move down and their horizontal coordinate is off canvas so we can't see them i set their horizontal coordinate to be a random number between zero and game with nice we have spiders here let's make them move up and down let's say if this dot y is more than 200 pixels from the top revert this v y to a negative number since we are adding this dot v y to vertical position here on line 110 if it becomes a negative number it will make the spider go up awesome we have spiders going up and down what about instead of hardcoding 200 here each spider will have a different maximum movement range this.max length is a random number between 100 and 300 for example actually between 0 and game height might be better now i just replace hardcoded 200 with this.max length here i also want each spider to move up and down at different speed so this dot v y is a random number between 0.1 and 0.2 i should also multiply it times delta time so we get consistency across different machines i want the spiders to swing up and down from a spider web so let's extend draw method as well and draw it first i will call draw method from parent class from line 51. here on line 88 i need to pass ctx as an argument i forgot to do that we don't want to use global variables inside our classes so on line 114 i pass draw method ctx i call draw from its super class from enemy parent online 51 to run all the code in there and also i will draw a spider web here so begin path to start a new shape build in canvas move to method to set starting coordinates of the line let's pass it coordinates 0 0 for now line 2 will be the ending coordinates of my line so this dot x this.y i want it to be where my spider is at the moment i stroke the lines and here they are we have spider webs coming from coordinates 0 0 2 coordinates of my spiders let's change the starting coordinates to be exactly on top of the spider horizontally so this dot x horizontal and 0 vertical this dot x position is top left corner of my enemy rectangle so if i want the web to come from the middle i need to take this dot x position and add half of enemy width to it i also do that for the starting coordinates i can see there is a small vertical gap between spiders and the ends of their webs so let's do this.y plus 10 pixels to make the lines a bit longer notice that i'm not actually animating the sprite sheets we are just showing the first frame for each anime type the best thing about our code structure now is that i can just write sprite animation logic once and it will automatically be applied to all spiders worms and ghosts i go up to line 46 inside constructor on enemy class where i declared properties and values that are shared between all enemy types in my game we will need frame x property which will cycle between 0 and 5 to specify which horizontal frame from the spreadsheet we want to show i also declare this.max frame which could be specific to each enemy but in this case all my enemy spritesheets have 6 frames we count from frame 0 so max frame is 5. i also need to account for delta time when animating frames to make sure it runs at the same speed on slow and fast computers we already done it once today i will have a frame interval variable so let's say 100 milliseconds and then i will have one accumulation variable that will be going from zero accumulating delta time until it reaches my frame interval value i will call it for example this.frame timer i set it to 0 initially i check if this dot frame timer from line 49 is more than frame interval from 948 if it is i do something else i increase frame time variable by delta time now i just realized we need access to delta time here so all this code actually needs to be inside update method here now i can say frame timer plus equals delta time remember that delta time is milliseconds between frames so fast computers will surf frames of our game animation very fast but will have smaller delta time on the other hand slow computers can't surf frames so often but their delta time is larger so as a result it evens out and both fast and slow computers will reach frame interval of 100 milliseconds at the same time this will ensure all the movement and animation in our games has the same timing regardless of speed of the machine we run the code on frame timer will start at zero it will be increasing by delta time and when it reaches frame interval we can move to the next frame in sprite sheet i have to check if current frame x from line 46 is less than max frame from line 47. if it is slice we increase frame x by 1. else we set frame x back to 0. at the same time i set frame timer back to 0 so it can start accumulating delta time again on line 46 i set frame x initially to 0. now i'm cycling between frame x 0 and frame x 5. to actually display that in game i have to replace hardcoded source x and source y properties in draw image method which i set to 0 0. i have to replace them with my new variables source y can actually stay hard coded to zero because our sprite sheet has only one row there will be no vertical navigation within this sprite sheet source x argument will be frame x from line 47 times sprite width from line 70. that way when frame x is 1 we cut out this frame frame x2 is this frame and so on i have entire episode on this uh as part of this series if you want more details about how to animate sprites properly and in that episode i also show alternative techniques how to do this i can also add more functionality here in update method on enemy class and it will be shared across all my enemy types it could be for example collagen checks with player some javascript generated sounds enemies can have particle effects and so on being able to write code here in one place and share it for all my enemy subclasses will save a lot of code repetition that would happen otherwise on line 53 i'm checking if enemies have moved behind the left edge of screen and i'm marking them for deletion this check works for both ghosts and worms as they move from right to left the problem is that spiders never move past that point they have no horizontal movement so as you can see in the console if i let my game run it will just keep accumulating more and more spiders i need a different check here to mark spiders as ready to be deleted i go inside update method on spider class and i say if this dot y is less than 0 minus this dot height times 2 then mark it as ready for deletion spiders start at 0 minus distant height as declared here on line 114 they will move down and then they will move back up when they reach point 0 minus this dot height times 2 we delete them i will be extending classes a lot in my games so i hope you learned something new today creating child classes is not only useful for animations and game development but it's a very important javascript technique with many different applications across all front and web development i think sometimes it's better to learn these concepts on fun projects like this to learn more fundamental javascript techniques on creative coding projects check out related videos in the video description great job on completing today's course say hi in the comments hey coders so i heard you like making games me too i think projects like this are great not only for aspiring game developers but also to learn and improve html css and javascript skills in this class we will build easy animated side squirrel game completely from scratch with plain vanilla javascript no frameworks and no libraries the main goal today is to learn about basic code structure how to split responsibilities between objects that make up our game how to make them communicate with each other effectively and how to put all of that together in an easy to understand way this class is a part of a longer series in each episode we built a small standalone project for beginners to learn about fundamental building blocks of game development with the javascript full series is linked in the description in this part we will build a simple version of the game to learn the fundamentals in the next part we will expand on each element using the things we learned across the series let's see how it all comes together games should be exciting full of secrets and special features i hope this series helps you to bring your creative ideas to life we will work with three files in index.html i link my css stylesheet and javascript file i create html5 canvas element with an id of canvas 1 and i put all my game assets here in this area so that we can use load event listener to wait for these assets to be fully loaded and available before we run the game art assets were provided by this talented artist you can find more on their website i will have player image background image and anime image here you can download project files in the video description install css i give my body black background i make canvas blue and i position it in the middle of my web page i also want to hide my image elements because we will draw them with javascript on canvas so player image display none same goes for background image and enemy image i want javascript to wait until all images are fully loaded so i will wrap my game inside an event listener we will listen for load event load event waits for all assets such as sprite sheets and images to be fully loaded before it executes code in its callback function i will place the entire code of our game inside this anonymous callback function in javascript anonymous function usually means a function without a name by placing all my code inside this anonymous callback function i separate scope of my game from a global scope to make sure my custom class and variable names don't clash with any other outside code when all the assets are fully loaded the code inside will be executed line by line i assign variable to my canvas element i create context instance of builtin canvas 2d api that holds all drawing methods and properties we will need to animate our game i set canvas width to 800 pixels and canvas height to 720 pixels i make canvas transparent in this class i want to make it very clear how we split responsibilities between objects and how these objects interact with each other to create a complete game so let's just write all the building blocks we will need today our game will need input handler class which will apply event listeners to keyboard events and it will hold an array of all currently active keys player class will react to these keys as they are being pressed drawing and updating the player i will have a simple separate class that will handle endlessly scrolling backgrounds we will also need a class that will generate enemies for us we will have multiple active enemies in our game so i will have a function called handle enemies that will be responsible for adding animating and removing enemies from the game i will have a utility function i call for example display status text which will handle things like displaying score or game over message and lastly we will have main animation loop this function will run 60 times per second updating and drawing our game over and over so that's it here we can see all the building blocks we need to create a complete game i could have wrapped everything in a main game class for example but i'm trying to keep it clean and simple today input handler class will apply event listeners to the game and it will keep track of all keys that are currently pressed down inside constructor i created this dot keys property and i set it equal to an empty array the way i want to handle controls today will be a bit different from my previous courses i want to have an array and i will be adding and removing keys from it as they are being pressed and released that way i can keep track of multiple key presses i will place event listener directly inside the constructor when we create an instance of a class all the code inside constructor is executed because of that just by simply creating an instance of input handler class later all event listeners will be automatically applied i will have event listener for key down event callback function on event listener has access to this built in event object i will assign it a variable name for example e and i console log it now i create an instance of input handler class which will run all the code inside constructor so at this point the event listener is applied let's test it when i click my canvas and i press key on keyboard i can see this event object here it contains all different details about keyboard event that just occurred what i care about today is this key property it contains a string that represents name of key that was pressed so to get that value directly i say e dot key now i'm getting those values as console logs i care only about arrow keys right now so i say if e dot key is arrow down take this dot keys array from line 9 and push that value inside i move this console log here and i will also console log this.keys we will get an error this dot keys is undefined javascript cannot find it it's because i'm instantiating input here and the event listener is called from window object by the time that event listener is called javascript forgot that this keyword refers to this input handler object and it's this.key's property to make sure this keyword points to the correct object i can use javascriptbind method or i can use es6ro function arrow functions don't bind their own disks but they inherit the one from their parent scope this is called lexical scoping doing that will make sure javascript doesn't forget which object this keyword stands for and it will work you can see pressing arrow down adds an entry into this dot keys array i don't want to have multiple entries for each key here we can see it added arrow down 4 times i only want to add it if that specific key is not in the array yet so i do second condition here and i say if this dot key's index of e dot key key that was pressed is equal to 1 with arrays if index off is equal to 1 it means that element is not present in the array so i'm saying if key that was pressed is arrow down and if that key is not yet inside this dot keys array only then push it into the array now you can see that when i press arrow down multiple times it adds it to the array only once perfect i copy this code block and i turn it into key up event if key that was released is arrow down i want to remove it from this dot keys array so i call splice that takes two arguments index of element we want to remove and how many elements starting from that index we want to remove so i find index of arrow down inside this dot keys array by using index of method again and second argument to splice i want to remove one element at this index so here i'm saying when we release a key if that key is arrowed down find index of that key inside this dot keys array and use splice to remove one element from that array now when i press down arrow key it's added to the array when i release it it's removed from the array nice let's also listen for other keys using or operator i start with arrow up then we also need to listen for key down on arrow left and arrow right i'm gonna break this down on individual lines for clarity and i use tab key to make them vertically aligned be careful here not to forget a bracket otherwise the code will break i will also listen for the same four keys inside key up event so we have this dot keys array here in key down if arrow down up left or right is pressed and that key is not yet present in this dot keys array we push it into the array in key up when any of these four arrows are released we find index of that key inside this dot keys array and we use splice method to remove it this dot keys array now holds information about which arrow keys are currently pressed down sometimes it could be multiple ones at the same time i remove these console logs by instantiating input handler class here on line 50 all the code inside constructor on line 8 will be executed we have this.keys property as an empty array and we use keydown and keyup event listeners to add and remove specific keyboard inputs from that array and now we know how to handle keyboard inputs in a game we will use them to move player around in the next part player class will define properties of player object it will draw it animate it and update its position based on user input player object needs to be aware of game boundaries we don't want it to run off screen so i pass it game with and game height as arguments and i convert them into class properties like this i'm using sprite sheet of specific size here we have frames of width and height of 200 pixels it's a good practice to size your sprite sheets to the actual size you will use in your game i can also resize them with code but it's cleaner to have art assets of the right size this.x will be 0 and this.y will be 0 at first player object will have public draw method it will expect context as an argument to specify which canvas we want to draw on in case we want multiple layers and multiple canvases in our game i will start by calling build in fill rectangle method to draw a rectangle to represent our player i pass it x y width and height since i have black background i set fill style to white so that we can see the rectangle on line 62 i create an instance of player class using the new keyword here on line 31 i can see player class constructor expects game width and game height as arguments so i pass it canvas width from line 4 and canvas height from line 5. i get an error game with is not defined it's because i made a typo here on line 32 now it works and i can display our player by calling its public draw method we just wrote it expects context as an argument so i pass it ctx from line three i can move player around by adjusting its x and y coordinates let's make it stand on the bottom of game area so this dot game height minus this dot height we will also need update method to move player around let's start by increasing player's horizontal xcoordinate by 1 for every call of update method if i call update method just like this there won't be any visible movement i put it inside animation loop and i use request animation frame built in method to make it loop i pass it animate the name of its parent function to create endless animation loop and i call animate like this to start it i also need to put draw inside i delete this we can see trail behind player rectangle i want to only see the current animation frame to delete old paint from canvas i use builtin clear rectangle method it will delete entire canvas between each animation loop perfect now we have player moving from left to right as we defined in its update method instead of drawing a white rectangle let's draw a player image i call build in draw image method i need to bring player sprite sheet into the project so this dot image property is a document dot get element by id and i give it id of player image i pass this.image from line 38 to draw method and i pass it x and y of 0 0 so top left corner of canvas it will just draw the entire sprite sheet at these coordinates i pass it this this.x and this.y instead you can see it just draws the entire large sprite sheet with all the frames draw image method can accept optional fourth and fifth arguments for width and height it will then stretch or shrink the image to fill all available area like this i actually just want to draw one frame so i pass it another four optional arguments source x source y source width and source height this defined rectangle we want to crop out from the source sprite sheet and the destination x destination y destination width and destination height define where on destination canvas we want to place that cropped out rectangle onto i pass it 0 0 as source x source y and we are cropping to this dot with this dot height so this area now we can see top left frame in the sprite sheet i can use source x and source y to jump around the sprite sheet by changing value of source y we can jump between different rows by changing the value we pass as source x we are navigating within the sprite sheet horizontally let's just turn these values into class properties called for example frame x and frame y i replace them here and now we can navigate around sprite sheet by changing values of these properties perfect i commented this line out the movement will work this way we will have this dot speed property initially i set it to zero we will be adding this dot speed to this dot x at all times when it's zero there will be no movement when this dot speed is a positive number player will move to the right when it's a negative number player will move to the left on the negative direction on horizontal xaxis now we can connect keyboard inputs to player movement update method will expect input as an argument i take input from line 69 and i pass it to playerupdate method here we are interested in this.key's property from line 9 which holds all currently active keys we can access that property from input argument we are receiving here so this section will deal with horizontal movement if input dot keys contains arrow up so if index of arrow up is more than 1 run the following code actually let's start with arrow right and set this dot speed from line 41 to 5. when arrow write is found in this array from line 9 set player speed to 5. it will make player 2 move to the right but there is nothing to set speed back to zero so it never stops moving i create an else statement here and inside i set player speed back to zero now player moves to the right only when i hold down right arrow key nice i do else if statement here be careful about the brackets it's easy to get it wrong and get an error here else if arrow left is pressed set player speed to 5 now i can move player left and right player can easily move off screen if we hold the arrow for too long let's introduce some horizontal boundaries if horizontal x coordinate is less than zero set it back to zero now we can't move past the left edge of game area else if player's horizontal coordinate is more than game with minus player's width meaning right edge of player rectangle is touching the right edge of canvas area also don't allow it to move past this point perfect jumping is a bit more complicated but it's not that hard i say if arrow up key was pressed set velocity y property to 30 i set velocity y property on player object and initially i set it to zero let's just move this around so that i have controls in one place horizontal movement separate and i create a section for vertical movement actually this line also belongs under horizontal movement here at all times i will be adding velocity y property from line 42 to player's vertical coordinate from line 37 initially velocity y is set to zero so we will get no vertical movement when i press up arrow key velocity y is set to 30 and player just flies off screen i need a force that will push in the opposite direction i can call it gravity or maybe weight i set it to 0 at first i need a check to see if player is in the air or standing on ground i will need that check in multiple places so i might as well make it into a utility method like this i call it for example on ground and it will return true or false based on how this statement evaluates if this.y is more or equal to game height minus player height we know player is standing on solid ground here in vertical movement section i say if on ground is false meaning if player is currently in the air take velocity y and start gradually increasing it by distort weight from line 43 i set this.weight to 1 we jump and eventually player falls back down size of the jump depends on how long you hold up arrow key we don't want it to work like that let's fix it when we press up arrow key i set velocity y to minus 10 so we can see it better i create an else statement here and inside we set velocity y back to zero so if player is in the air gradually add more and more weight to velocity y else if player is back on ground reset velocity y back to zero to stop vertical movement if i jump too high player partially falls through the floor before velocity y is reset back to 0. to prevent this from happening let's introduce a vertical boundary on the ground level if player's ycoordinate is more than game height minus player's height i set it the game height minus player's hide player can never be below this point that works the height of jump is still dependent on how long i hold up arrow key because each tick adds another 10 to velocity y also if i press up arrow over and over player will keep jumping higher and higher we only want player to be able to jump when it's standing on solid ground here on line 55 i say if up arrow is pressed and if player is on ground only then decrease velocity y by 10 now we can't double jump anymore let's do 30 for a bigger jump maybe minus 32 so jumping works like this velocity y is 0. when we press up arrow key velocity is immediately set to 32 this statement on line 66 becomes true and weight of 1 is being added over and over to velocity y that will make velocity y go from 32 to 0 and then back to positive numbers so player will go up it will gradually slow down stop and it will start falling back down again as the value of velocity y goes from negative into positive numbers when we hit the floor again line 69 will set velocity back to 0 and the jump is complete when we jump we want to animate a different row of sprite sheet i want this jumping animation so i set this dot frame y to 1. when we land back on ground i set frame y to zero endlessly scrolling backgrounds are very easy to implement i made a special episode about different techniques i like to use and how to split it into individual layers for parallax effect today we will just do a single endlessly scrolling layer constructor will expect the game width and game height and i convert these arguments into class properties this dot image will be my background image i gave it an id of background image spelled like this this dot x will be 0 this dot y will be 0 i check my image and i can see its width is 2 400 pixels height is 720 pixels draw method will take context as an argument to specify which canvas we want to draw on i call built in draw image method and i want to draw this dot image from line 84. i pass it x and y on line 109 i instantiate my background class by calling the new keyword i pass it game dimensions so canvas width and canvas height inside animation loop i call background dota draw draw method from line 90 and i pass it ctx as an argument we are drawing everything on a single canvas element so i need to draw background first before i draw the player so that the player is visible now i want to make the background animate to the left first i pass it width and height here even though i didn't have to do it since my art assets are already correct final sizes there is no need for resizing them with code custom update method i create a property i call speed and i set it to 20. horizontal coordinate of the background will be minus equals 20 pixels per frame this will make it scroll to the left inside animation loop i call background update and it just scrolls off screen in update method i create a reset check i say if this dot x is less than 0 minus this.width from line 87 meaning if background scrolled all the way off screen set its horizontal x position back to zero to create an illusion of endlessly scrolling background we need to use a trick here i will be drawing the same image twice i will position the second image to the right next to the first one by setting its horizontal x coordinate to this dot x plus this dot width now it looks like it's just one single and less seamless image if i put a gap of 50 pixels you will see where the first image ends and the second image starts i remove the gap we never actually see the full size of the second image they are both scrolling at the same speed and when we get to this point the image on the right just fills the gap before the first image can reset and start scrolling again this happens very fast so it creates an illusion of endlessly scrolling seamless image i go much deeper on this topic in a special episode for now this is all we need to know here sometimes you can still see a small gap where the first image ends and the second one begins you can easily fix it by accounting for scrolling speed when setting horizontal position of the second image i will comment out line 120 for now so the movement doesn't distract us you can do the same or keep it going it's up to you in our game player needs to avoid dangerous enemies by jumping over them enemy class will serve as a blueprint to create a single enemy object constructor will expect game width and game height as arguments because enemies need to be aware of game area boundaries i check my sprite sheet and width of single frame is pixels height is 119 pixels this dot image will point towards image element with an id of enemy image draw method will expect context as an argument we call built in draw image method i pass it this dot image from line 107. i will also need this.x and this.y properties on my enemy i pass them to draw method here i create an instance of anime class using the new keyword i pass it canvas width and canvas height i call enemy1 draw from inside animation loop and i pass it cdx now we can see what we are doing so back inside the draw image method on anime class i pass it width and height i also need to pass it source x source y source width and source height like we did with player because we want to crop out single frame from the sprite sheet source x will be number zero times this dot width source y could be zero times this.height but since this sprite sheet has only one row there will be no vertical navigation so source y value can stay hard coded to zero i create frame x for horizontal navigation in sprite sheet and i replace it here inside the draw image method vertical coordinate of the enemy will be game height minus height of the enemy and horizontal position is game width so that it's hidden just behind the right edge of canvas i create an update method and inside we will just decrease x by one per frame to make enemy move to the left i call enemy 1 update from inside animation loop and we are animating one enemy created with our enemy class i don't want to just have one enemy i want to have multiple active enemies on the screen at the same time up here on line 6 i create a led variable i call for example enemies and i set it to an empty array i delete these two lines of code from inside animation loop we will draw and update our enemies from inside handle enemies function on line 121 handle enemies function will also be periodically adding new enemies to the game so i take enemies array from line 6 and i call push on it we will push instance of enemy class so new enemy like this i know i have to pass it game with and game height so i pass it canvas width and canvas height here then i want to call draw method and update method from line 116 for each enemy object in the array so enemies for each i call individual object in that array for example anime and i use arrow function syntax here for each enemy object inside enemies array call their draw method i pass it ctx and also call their update method i will be calling handle enemies function for every animation frame so i can't just leave this line of code here like this i don't want to push 60 enemies per second into our game i take this line outside temporarily so it will just run once on the initial page load so it will add just one enemy to the array at first i call handle enemies from inside animation loop here on line 143 perfect everything still works let's say i want to add new anime into the array every two seconds how do i do that we can use timestamps and delta time i create a helper variable called last time which will hold the value of timestamp from the previous animation frame inside animation loop i create a constant called delta time delta time is the difference in milliseconds between timestamp from this loop and timestamp from the previous loop the value of delta time tells us how many milliseconds our computer needs to serve one animation frame usually if we are running at 60 frames per second delta time is around 16 milliseconds so delta time is timestamp from this loop minus timestamp from the previous loop this time stem value is autogenerated here request animation frame has a special feature it automatically generates a timestamp and passes it as an argument to the function it calls so because animate is being called over and over by request animation frame here it receives timestamp values as argument each time it's called the first initial call of animate here on line 149 doesn't have autogenerated timestamp because it's not being called by request animation frame so i have to pass it something here i pass it zero when i calculated delta time difference in milliseconds between timestamp from this loop and timestamp from the previous loop i set last time to timestamp so that it can be used in the next loop as the value for timestamp from the previous loop our animation loop is created by request animation frame it automatically adjusts the screen refresh rate so most screens will run at 60 frames per second which means if i control delta time i should get 1000 milliseconds divided by 60 frames per second my delta time should be around 16.6 milliseconds if you get a different number here let me know i wonder if we all get the same value now that we have delta time we can use it to time different things around our code base we will use it to trigger periodic events i pass delta time to handle enemies i comment this out i make sure handle enemies expects delta time value to time something periodically with delta time i need two helper variables enemy timer which will be counting milliseconds from 0 to a certain limit and every time it reaches that limit it will trigger something and reset itself back to zero we will need enemy interval which will be a value in milliseconds for that time limit i want to add new enemy in the game every thousand milliseconds every time timer reaches 1000 in handle enemies i say if enemy timer from line 140 is more than enemy interval from line 141 push new enemy into enemies array then reset enemy timer back to 0 so we can count again else just keep adding delta time to our enemy timer until the limit defined in enemy interval is reached using delta time like this will make sure our events are timed the same on slow and fast computers because faster computer will have lower delta time so it will take more loops to accumulate enough in its timer that way fast and slow computer will reach the limit at the same time i explain this in more detail in a special class i can also set enemy interval to 2000 milliseconds 2 seconds i create this dot speed property on enemy class i could give each enemy randomized speed here using math at random i will give all of them the same speed of 8 and here i say this.x minus equals this.speed you can see enemies come in a set interval of 2 seconds very predictable maybe i want to randomize that interval a little bit i can for example create a variable called a random enemy interval and i set it to a random number between 500 and 1500 milliseconds i change enemy interval to thousand whenever enemy timer reaches enemy interval plus random enemy interval i push new enemy and i set random enemy interval from line 147 to a different value i could have also randomly set some enemies further along xaxis to get the same result now enemies are coming in more random less predictable intervals inside the draw method on player class i can remove the white rectangle behind the player i pause the background again by commenting out line 154. we are displaying just the first frame in player and enemy sprite sheets let's actually animate those sprite frames the sprite sheets we are using are optimized for speed between 15 to 20 frames per second so i would like to be able to set fps frames per second for sprite frame animation while still allowing the rest of our game things like player position and background scrolling to update 60 times per second how do we do it with delta time i'm passing delta time to handle enemies here on line 157 i pass it along to enemy update method and i make sure update method on anime class expects that value update method is being called from inside animate 60 times per second inside update method here i will use the delta time to keep track of how many milliseconds passed between individual calls and only when the right threshold is reached i will swap frames in the sprite sheet to animate sprite sheets horizontally i will cycle between frame x of 0 and max frame which in case of enemy sprite sheet is 5. to time frame rate with delta time i will need 3 helper properties this dot fbs to set frames per second let's do 20. keep in mind this fps will affect horizontal navigation within enemy sprite sheet how fast we swap between individual animation frames nothing else will be affected i want the rest of the game to run at 60 frames per second i could use this technique to slow the entire game down to 20 frames per second but then player controls wouldn't feel very responsive we would get delays in collision detection displayed text and so on i want to slow down only animation of enemy sprite sheet nothing else i will also need frame timer which will count from 0 to frame interval over and over and frame interval will define that value we are counting towards it's a value of how many milliseconds each frame lasts so thousand milliseconds divided by 20 frames per second in this case first let's cycle between frames at full speed so if this dot frame x from line 111 is more than max frame set frame x back to zero else increase frame x by one i have to do more or equal here so we don't get empty frame because of this source x attribute we are pass into draw image method on line 119 cycling between 0 and 5 with the frame x variable will animate sprite sheet horizontally now you can see anime sprite sheet is animating but it's very fast these particular sprite sheets were designed for lower frame rate we defined fps of 20 on line 113 here i say if this.frame timer from line 114 is more than frame interval from line 115 only then run this code that manages frame x cycles at the same time reset frame timer back to zero so it can count again else just keep adding delta time to frame timer until the threshold of milliseconds defined in frame interval is reached now you can see enemy sprite sheet is swapping between frames slower at 20 frames per second while enemy movement is still at original 60 frames per second inside update method on player class i will do exactly the same thing first i say if frame x from line 40 is more than max frame which i need to define here we will start with this row and there we have eight horizontal frames counting from zero if frame x is more or equal to max frame set frame x back to zero else increase frame x by 1. run an animation on player is animated i go down here to anime class and i copy fps frame timer and frame interval properties and i paste them here on our player class inside update method here we are dealing with sprite animation here are controls yes so if frame timer from line 44 is more than frame interval run all this sprite animation code and reset frame timer back to zero else keep increasing frame timer by delta time update method doesn't have access to delta time so i make sure it takes it as an argument when we call it here on line 181 up here i make sure update method expects that argument now player sprite sheet is animating at 20 frames per second when i jump we get blink in because max frame is set to 8 on line 41 and jump row doesn't have that many frames so we are including empty frames we have only two player states basically jumping and running on ground so dealing with that is easy down here we deal with vertical movement when we are not on ground we set max frame to 5 for jumping animation else meaning we are on ground set max frame to 8 for running animation on line 151 we are adding new anime to our game in a randomized interval when i console look enemies array i can see it's endlessly growing and adding more and more enemies i actually want to remove enemies that moved offscreen from enemies array on enemy class i create a property i call marked for deletion and i initially set it to false in update method i say if horizontal xcoordinate on nma is less than 0 minus enemy width meaning if it has moved past the left edge of game area set marked for deletion to true inside handle enemies i say take enemies array which we defined earlier as a let variable and reassign it to the same array but filter that array first and only include elements that have marked for deletion property set to false filter is a built in array method which creates a new array with all elements that pass the test implemented by the provided function in our case all our elements are tested and checked if their marked for deletion property is false now you can see in console we have between one and two enemies in the array at any given time older enemies are being removed i want to display score on line 7 i define a led variable called score and i initially set it to 0. on line 168 we have display status text function i will use it to display current score i pass it context as an argument to specify which canvas we want to draw on i set fill style to black color i set canvas font to 40 pixels helvetica fill text built in canvas method will actually draw the text it expects text we want to draw and x and y were to draw it i want the text to say score colon space plus value of score variable from line 7 x coordinate 20 ycoordinate 50. i call this new function from inside animation loop and i pass it ctx inside update method on anime class i will count score every time enemy moves off screen assuming player successfully avoided colliding with that enemy and i increment score by one that works nice i want to highlight the font i can give it canvas shadow but for some reason in firefox built in canvas shadow property causes lock and frame rate drops so i will do a trick here i will draw the same message twice one black one white the top one will have two pixels offset so i kind of created my own shadow manually let's check for collisions between player and enemies first we need to decide on the right technique to use here the easiest ones are collision between rectangles and collision between circles where we give elements like player and anime hitboxes shaped as rectangles or circles we could also do more complex and more precise collision checks here such as collision check between polygons called separating axis theorem or we can base collisions on color or opacity our stroke rectangle around our enemies so we can see basic collision hitbox let's make it white i do the same for player you can see the rectangles now if i use collision detection between rectangles and i keep those hitboxes at their base sizes whenever these two rectangles touch or intersect we will get collision between player and enemy i tried to apply it before and i played with it and sometimes we get really unfortunate collisions like on this screenshot where my player is landing from a jump duck and worm images are clearly far away from each other but you can see that the corners intersect and we got game over i asked you in my community tab how you would approach this challenge we spoke about the different options we have here some of you suggested separating access theorem for collision between polygons some of you think that we could use a set of smaller rectangles that match shapes of player and enemy sprites more closely than one larger shape some of you think that simple collision detection between circles would be enough in this scenario let's try to draw circular hitboxes around our objects to see what it would look like it's also easy to offset these circles by a specific pixel value horizontally or vertically in relation to player and enemy object we can also make them smaller or larger if needed i agree with you and i think that using circular collision detection for jumping game like this will get rid of accidental collisions where two corners of rectangles collide now i need to decide where in our codebase we will run collision checks i know i need to check position of player against position of all active enemies for each animation frame so i might as well do it inside playerupdate method i pass it enemies array as an argument it contains all currently active enemy objects on line 59 inside update method on player class i make sure update method expects that argument we will calculate collision detection here we need to run it against every enemy object in enemies array so enemies we passed as an argument for each and then i do collision detection calculation between player circle hitbox and enemy circle hitbox to do that we need to calculate the distance between the center points of these two circles and we compare that distance with radius of circle 1 and radius of circle two if the distance is less than these two radii added together we know we have a collision to get distance between two points two center points we use pythagoras theorem formula we have a center point of player circle and center point of enemy circle we calculate distance on horizontal xaxis dx we calculate the distance on vertical yaxis d y it gives us imaginary right triangle and we know hypotenuse of this triangle is the distance between these two points we calculate it as square root of dx squared plus d y squared if distance between center point of player circle and center point of enemy circle is less than radius of enemy circle plus radius of player circle we have collision and we set game over to true upon line 8 i create a led variable called game over and i set it to false at first i want the game to pause when game over is true so inside animation loop i say only run request animation frame and continue animating our game if game over is false you can see that when collision is detected game stops perfect i also want to display game over message so inside the display status text function i say if game over is true set text align to center fill style to block fill text game over try again and coordinates canvas width divided by 2 and 50 200 make a copy again set fill style to white and offset the second line by 2 pixels i need to fix our collision detection we are using enemy x and enemy y coordinates as center points of collision circle which means collision area on each enemy is this blue circle and same with the player since player x and player y is at the top left corner of rectangle area from which player image is drawn i can't set it as center point of collision circle because i did do that we are not checking for collisions between white circles we are actually checking for collisions between the blue circles i just drew the fix is simple dx distance on the horizontal xaxis between two center points needs to be offset by half of enemy width and half of player width to move these center points from top left corner to the middle of rectangle area same goes for vertical dui check brackets are very important here now after this fix collisions are correctly being detected between white circle areas around player and enemies i can offset these circles by specific amount to move them around i can make them smaller or larger we will expand on this in the next episode in this class we will learn how to use native javascript full screen functionality how to add touch support to our games and how to measure length and direction of swipes so that we can attach specific events to them full series linked in the video description let's make a mobile game with html css and javascript let's go this is the game we built in the previous lesson i will be using google chrome browser as usual and if i right click to inspect the page we have this small mobile device icon here this tool is great for designing responsive websites keep in mind this is just an estimate there might be some differences when you run the same code on the actual device this simulator is not 100 accurate as you can see canvas doesn't even fit mobile screen on landscape currently this project is not mobile friendly at all it's actually very easy to fix this i can click this icon to toggle between landscape and portrait view i can choose different devices from this drop down so the first thing i want to do is to make sure we can see the entire canvas at all times on mobile i will do it with css i give canvas max width property of 100 we are missing left border here let's reset all default margins and paddings and set box size into borderbox to make sure elements border is included in its total width modern css makes life so much easier so now in portrait mode you can set canvas to any width and it will always scale up or down to make sure we can see all of it i switch to landscape and we have the same problem how do we solve this this is actually also very easy barely an inconvenience i give canvas max height 100 now canvas will scale until it hits edges of screen vertically or horizontally depending on aspect ratio whichever boundary it hits first look what happens when i make canvas wider it still works i can switch devices toggle between landscape and portrait we can see all of canvas at all times perfect there is also a way to make canvas fit the entire screen with no black edges but because of the scrolling background we are using here i would have to calculate aspect ratio i want to keep this class beginner friendly with no algorithms so i will get back to that in more advanced tutorial now you know a quick and easy way to make canvas fit on mobile screen without stretching and distortion the only way to restart game right now is to refresh browse window let's write an actual restart game function so that we can connect it to buttons or keypresses or touch events we have to think what needs to happen when game restarts well first we need to restart the player to its initial position i will actually do it as a method on player class i will call it restart and inside we set x and y to the original values let's move player 100 pixels to the right here and here that's better after we start i want player in running animation so max frame will be 8 and frame y is 0. down on line 200 inside our custom restart game function i take instance of player class from line 205 and i call restart method we just wrote i don't really have to restart background or maybe i will just restart its exposition back to 0 so that we get some more visual feedback that we are actually starting a new game again i take an instance of background class from line 210 and i call restart method we just wrote the last thing i need to do when game restarts is to take enemies array score and game over and send them back to their initial values notice i'm removing led keywords because i'm not declaring new variables i'm just assigning new values to existing variables where do we call this restart game function from here inside event listener inside key down event we listen for arrows and we push them into this dot keys array i will create an else statement and if key that was pressed is enter and at the same time game over from line 8 is true we call the new restart game function we just wrote it's still not working and it's because when game over is true i stop calling request animation frame here since we are setting game over back to its initial false value i can call animate again the start new animation loop like this so we are playing game is running i get game over i press enter and reset function resets our game awesome we are doing great so far i should tell the user to press enter otherwise how would they know you can see after game reset score is off screen it's because it's taking this text align center we used for game over message i need to set text align to left here and the message will be something like game over press enter to restart this works ok touch events this will be fun first i remove this console log from line 175 up here inside input handler class we will create a new event listener for touch start event it will run whenever user touches browser window when that happens i console lock something i will actually also need touch move and touch end events i'm gonna console start in touch start moving in touch move and end in touch end the way these work touch start fires once as we start interacting with screen then touch move fires over and over as long as we are moving finger over the screen and touch end just fires once when user releases the touch this is important to remember as we have to consider these when we are structuring our code code in touch start and touch end will run once and the code in touch move will run over and over as long as the event is firing this is actually very useful and we can use touch start to set something up touch move to make calculations such as direction and time of the event and in touch end we do some cleanup and discard or reset values we don't need anymore there is no swipe up and swipe down event so let me show you how you can easily use these three touch events combined to determine direction of swipe let's have a look at auto generated touch start event object by console login e when i touch screen this event fires and i can inspect it there are many useful values here for example it keeps track whether alt and control keys were pressed at the time of the event we have timestamp of the touch here very useful and the main thing we care about is x and y coordinates of the touch x and y coordinates of touch event are stored inside this readonly changed touches property it's a list that stores autogenerated touch objects that contributed to this touch event with touch start event we get just one object so we have to open index 0 and here we can see page x and page y properties perfect we know where on screen this touch event started if i console touch move and i swipe across my screen you can see that event fires many times let's go to one of the ones at the start if i check inside change touches list at index 0 i can see page y is 71 as i was swiping the event was firing so let's go to the last time it fired and here i see page y is 104. i know this particular swipe went vertically from coordinate 71 to coordinate 104. we have all these values we need to determine whether user swiped up or down i put this console lock into touch start event and i remove all other console logs to access vertical coordinate of touch event i say e dot changed touches index 0 because this is a list and i want this page y property okay let's put that inside touch move and touch end i create a new property on input handler class i call it for example touch y it will store the initial start in vertical coordinate maybe i also want the game to only react to longer swipes to make sure user actually swipes and the game doesn't accidentally react to the simple short tabs i will call this property touch threshold and i set it for example to 30. i wanted the starting touch point and the ending touch point to be at least 30 pixels apart to trigger the event i could also make the player jump higher here based on how long the swipe is this technique is easy and very powerful if you are designing mobile games i hope you are realizing the potential here in touch start event i just want to set starting coordinate so this dot touch y from line 13 is equal to page y value from this event let's delete all these inside touch move i will compare current coordinate and starting coordinate to determine direction so let's have a temporary helper variable called for example swipe distance and set it to page y value of this tick of touch move event minus the initial start in vertical coordinate so minus this dot touch y from line 13. keep in mind that touch move fires over and over again as long as user is swiping i need more space here if swipe distance is less than minus this dot touch threshold from 914 so minus 30 we are swiping up so this dot keys push swipe up this might be a little bit difficult to visualize for some of us so here's some animation if it helps at the same time i want to check if swipe up is not yet in the keys array so this is the distance between current vertical coordinate and start in y coordinate if this swipe distance is less than 30 and swipe up is not yet in keys array push swipe up into keys array else if swipe distance is more than this dot touch threshold so plus 30 push swipe down into this dot keys array also here i need to check that swipe down is not yet in the array before i push it in there i don't want duplicates of the same value in touch end i just can't lock this dot keys i can see we are getting many duplicates in the array so something must be wrong here i zoom out a bit so i can see the whole thing on a single line these brackets need to be here brackets are important it's easy to make a mistake and even a small thing can break the entire project that's programmer's life attention to detail and debugging perfect now it gets added only once per value as i said i will use touch and event for cleanup i will use splice method to find swipe up in keys array and remove it and i do the same thing for swipe down so in touch start i save initial vertical coordinate of touch event in touch move i compare starting vertical coordinate to the current vertical coordinate to determine whether user is swiping up or down and in touch end i clean up and remove all touch events from our custom keys array let's remove this console log i want to restart game when we swipe down i might as well put it in here why not so if we swipe down call our custom restart game function we wrote earlier but only do it if game over is true like this so i get game over i'm swiping up nothing happens i swipe down and game restarts great i can increase touch threshold if i want some functionality to work only with very long swipes i set it to 200 i swipe down but only short nothing happens longer swipe still nothing i have to swipe almost the entire screen from top to bottom to restart game now so let's put the threshold back to 30. i want player to jump when we swipe up so here inside update method on playerclass i put this part in brackets because i want it to evaluate first if keys array contains arrow up or if it contains swipe up and at the same time if player is on ground make player jump be careful about brackets it's easy to create a bug here if you forget one let's see reload game i run swipe up and player jumps i swipe again and again this works touch events work really well with simple games like this in the next episode i will create a game with more complex moves and special abilities game like that is a bit more complicated when it comes to touch events also in most cases to make a mobile game like this work you should resize your art assets my player's sprite sheet has frames 200 times 200 pixels that's massive for a mobile game and if i had many animated objects on screen at the same time it would start lagging very fast for a bigger game i would have to create two or more sets of art assets for different screen sizes let's change game over message so that user knows we can now swipe down to restart javascript also offers builtin native full screen api that's easy to use it's now well supported in all modern browsers as far as i know only internet explorer and mobile version of safari don't fully support it we are web developers here so i'm sure all of you use updated version of a modern secure browser on your machine full screen api gives us methods that allow us to present a specific element and its descendants in a full screen mode it will hide all browser user interface elements sidebars and other applications as long as full screen is active let's create a button to toggle full screen i give it id full screen button for example and it will say toggle full screen in css i give it position absolute font size 20 pixels but in 10 pixels top 10 pixels and transform translate x minus 50 to center it horizontally i bring it to my javascript project using get element by id i create a new function i call for example toggle full screen let's console.log document.fullscreenelement like this and call toggle full screen function we just wrote full screen element is a builtin readonly property on document object that returns the element that is currently being presented in full screen mode if it's null it means the full screen is not active we can use this property to check if we are currently in full screen mode i say if full screen mode is not active take canvas variable from line 2 and call built in request full screen this method is asynchronous it returns a promise which means i can chain then and catch methods to run some followup code when the promise is fulfilled or rejected i will just use cache today to display potential error notice that the request full screen is called on the element i want to make full screen but full screen element property sits on the document object today i won't put any followup code in then method so i can delete it in catch i will take the auto generated error object if error happens we will create alert and it will say some error message to concatenate message i can use backticks instead of quotes this is so called template literal syntax it's just a simple way to combine strings of text and expressions that need to be evaluated into a single final line of text i say for example error can't enable full screen mode and to insert variable or expression inside template string we use dollar sign and brackets like this here i just put this auto generated error object and its message property so we can read what went wrong so if full screen is currently not active present canvas in full screen mode else meaning full screen is active call built in exit full screen method to switch back to windowed mode notice that exit full screen is again called from document object if i save my project and refresh browse the window i get an error you can see catch method worked and created alert popup window with our message in console i can see more information it says full screen can only be initiated by user gesture here i declared my toggle full screen function and here i'm calling it on the first page load we can't do that full screen can only be triggered by user generated events such as click or touch that's what this error message is telling us we can't just make javascript to automatically trigger full screen it needs to be triggered by a usergenerated event so instead of running it on the first page load i create an event listener for click event on full screen button element we created earlier when user clicks button then run toggle full screen to exit full screen on a computer you can also just press escape key on mobile you can exit full screen by swiping to reveal main controls and press back or home key depending on which phone you are using sometimes we get unexpected collisions and game over when player and enemy images are not actually touching like this it's because we are checking for collision detection on circular hitboxes around player and enemy and these circles don't exactly match the sprite sheet image collisions between complex shape take a lot of performance and especially for mobile games performance is something we need to be more careful about phones don't have as much computing power as our desktop computers do it's usually not a problem when hitbox doesn't exactly match sprite sheet shape but it should be positioned in a way that it's predictable when collision can and cannot happen i drew a simple circle around player and now we can see its collision area let's copy this code to display collision area of enemies as well you can see when these two white circles touch we get collision and since the circles are larger than player and enemy image sometimes we get collision when player and enemy images are clearly not touching especially this one when we are about to land from what seems to be a successful jump how do we fix this since player and enemy images are not scalable in this game they are drawn at fixed width and height we can shrink and scale hitboxes by a value relative to image size and we can also move the hitbox left and right by specific pixel amounts to try and match images more closely and make collisions more predictable we don't want surprise game over like this i'm using a bit unconventional technique here because sprites are in a sense rectangular they have start in x and y position and width and height but i chose collision detection between circles to remove rectangular edges from sticking out outside player and enemy shapes what i'm about to do will work with rectangular collisions as well if you prefer that we are calculating collision detection between player and all active enemies here i explained it in the previous episode we are basically checking distance between center point of player circle and center point of enemy circle first horizontally and then vertically we are drawing imaginary right triangle and using pythagoras theorem to calculate the length of hypotenuse which is basically the distance between center point of player circle and center point of enemy circle then we are comparing radius of player circle plus radius of enemy circle to that distance if distance is more than sum of these two radii circles are far apart if it's the same circles are touching and if the distance is less than sum of radii circles are overlapping here i'm just drawing white collision area circle it's just a visual it doesn't actually detect collision collision is being detected here we are inside player class and this is the horizontal center point position of player circle this is being used for collision detection here this is vertical coordinate of that center point which is being used in collision detection formula here and this is the radius of collision area circle we are drawing and that same value is being used in collision detection formula here i can simply offset and resize that collision circle visual in this area and then replicate those changes inside the actual collision detection calculation area here let me show you what i mean what if i want player circle to be smaller maybe i don't mind that ears and tail overlap let's say they are soft and they don't count when it comes to collision also maybe i want to make my game a bit easier and forgiven this will allow a small overlap between player and enemy image what if i want to move the collision hitbox downwards relative to player image i change its vertical center point position here plus 20 pixels seems fine now i compare changes i made to the visualization and i make sure i update the actual collision detection formula to match these new values i didn't make any changes to horizontal center point so that value stays the same i added plus 20 pixels to vertical center point so i update it in collision calculation here i also made the circle smaller so i update player radius value in this area we successfully adjusted player hitbox let's also do something about enemies i can for example reduce the radius of enemy circle i also want to move it to the left to cover head of the worm better maybe 20 pixels for a horizontal center point i'm actually happy with this i want collision to only happen when these two adjusted smaller circles collide let's take the changed values we used to adjust enemy hitbox visual and transfer them into collision detection formula like we did with player i copy this line just so i can look at it for reference i put it here just temporarily collision detection is inside player class so this keyword here points to player object if i want to point towards anime object i can't use this keyword in this area we adjusted horizontal coordinate of enemy circle center point so i need to adjust it here minus 20. vertical center point of enemies stated the same so i will not be making any changes here we did change enemy radius so i will change enemy radius here and this is how you resize scale and reposition hitboxes in your game to make sure they match your art assets more closely i didn't plan to make this episode but so many of you asked how to add mobile support to our games so here we go we can take it much further but i think this was a good beginner friendly introduction check out full series in the video description if you want i'll see you there when your games and applications start getting bigger more exciting and full of extra features it will be more and more challenging to keep your code clean and organized over time people came up with the general reusable solutions to commonly occurring problems these well tested and widely used code structures are called design patterns design patterns are a tool kit of tried and tested solutions to common problems in software design you could split design patterns into three main categories in this class we will use state design pattern to control player character in a game it's a behavioral pattern that lets an object alter its behavior when its internal state changes why do we need to manage player state let's say we have a simple side scroller game our character is standing and when i press up arrow key i want it to jump this code has a bug if i keep pressing up arrow while jumping player character will fly off screen so i have to do a check here only run this code and jump if character is standing on a solid ground great that fixed it i also want to add sitting animation but player can't enter sitting state while it's in the middle of jump player can sit down only when it's standing or running on solid ground maybe i also want a dive attack when player tackles enemies from the air again this move can only be entered by pressing down arrow key while jumping because when we are standing down arrow key will make players sit down i'm sure you can imagine how adding more moves will create a very complicated ifelse statement and since all of that is contained in a single piece of logic adding one new move later on can break all your other existing conditions and you will have to review that single massive logic tree every time you need to fix a bug or add a new feature since this is a very common challenge game designers had to deal with for a long time there is a tried and tested way to do this right what if instead of this complicated spaghetti code if else statement we model our code structure based on finite state machine we want to have a limited set of states player object can be in such as standing jumping or sitting player object can only be in one of those states at a time and for each state it will only react to a limited set of inputs we define that way we have a class for each state and in rules of that class i can say that while player is jumping wait for a certain time before switching it to falling state or if you detect down arrow key input transition player into diving state other than that while in jumping state ignore all other inputs so pressing down arrow key while jumping will switch player into diving state pressing down arrow key while standing will transition player into a seating state in this class we will learn how to implement state design pattern in a side scroller game we will learn how to use the native javascript modules to split our code into multiple parts and many other important game development tricks and techniques as usual big like if you are ready to start building bigger games and learn how to make our code bases scalable easy to navigate in easy to manage and debug we are diving into more advanced territory today the challenge for beginners will mostly be to keep track of what each class and function is doing and how they interact with each other check out some beginnerfriendly game development tutorials in the video description if you just recently started with html css and javascript i created a simple web page this doc image will be our spreadsheet you can download it in the video description it was made by this amazing artist check out his site for more game development art assets i include my image as img tag this time that way i can wait for the image to get fully loaded before i run any javascript i include my javascript by using a script tag but this time i will set its type attribute to module like this this will cause the browser to process any contents of this particular script as javascript module which will allow us to split our code into multiple separate files and use import export keywords to connect the data inside you can see i'm importing only the main script.js file but we will also have player.js state.js input.js and utilities.js splitting files like this makes our project a bit cleaner and easier to navigate in javascript modules allow us to split our programs into separate parts that can be imported where they are needed node.js had this ability for a long time but now modern browsers support module functionality natively use of native javascript modules is dependent on the import export statements and we will cover how to use them today it's easy don't worry there is only one catch when using modules you need to run the code in some kind of dev environment you need to have a server if you just write index html file and click to open it in browser locally as you can do with all my other course projects import export keywords will not work you need to run this code through a server there are many ways to set up local server the easiest one is to install a small plugin to your code editor i'm using visual studio code and when i click here on the left side on the extensions icon and i search extensions for live server i find this plugin it's been downloaded over 17 million times so it's very popular mine is already installed but if you don't have it it will say install here after installation you might have to close or reopen your vs code when it's successfully installed you will see this go live icon right here if you never used it it can act a bit unexpectedly when you click go live it doesn't open the file you are looking at at the moment it will run code from the entire project folder your vs code is currently pointed at to make sure your live server goes live with the correct set of files you click file in the top left corner and then click open folder and you navigate to your project folder on your local computer when you find it click select folder and then when you go live the correct project will open if you can't see this new live server notification area close your vs code completely and reopen it and it will get loaded the best thing about live server extension is that when you save any of the project files it will reload browser window automatically you can always see the latest preview of your code without constantly manually reloading browser on my windows computer i use control plus s keyboard shortcut to save changes to my file i use it a lot while working in this environment so now we should have a project folder running through live server extension we have index html file style css main script js file we will have player js where we write all the logic to control and animate our player character state gs will be where we write state design pattern to swap between different player states input.js will handle keyboard input and utilities.js will have small useful functions that for example display status text or some other small tasks i will speed up css setup because that's very basic global reset to make sure the page looks the same across different browsers i will give canvas some background so we can see it and i will hide the sprite sheet image since we will be drawing and animating it with javascript i will also show you how to create a very simple loading screen i wrote this h1 tag with an id of loading so i grab it here i center it in the middle of the page and i adjust its font size script.js is my main module which will connect all other parts into a final piece of logic the spreadsheet we are using today is a big image file so it might take a second to fully load to make sure javascript waits for all the assets to be fully loaded before it runs i will create a simple event listener for load event load event will wait for the entire page to be fully loaded and available including page content such as style sheets images and so on in the meantime this text that says load in will be visible so if you add more art assets user will see this loading screen for however long it takes to load all assets when everything is fully loaded this event listener will run its code and inside i will target this loading text and i will hide it because the page is fully loaded at the point when this code runs i will also set up my canvas so document.getelementbyidcanvas1 i instantiate context object which contains all builtin 2d drawing properties and methods we will need today i set canvas width to window in width and canvas height to window inner height i can see canvas is now full screen so i make it transparent it's time to draw the player in player.js i create a class i call player player always needs to be aware of boundaries of game area since we will be running and jumping around and we need to know when we reach the edges of screen so i will pass it game with and game height from the outside as arguments and i will convert these arguments to class properties like this today we are learning about state management we will be swapping player between different states this dot states will be an array and each position in that array will be one possible player state such as running jumping sitting and so on then we will have this dot current state property because player can only ever be in one state at one time current state will be one of the options from this dot states array so for example this dot states index 0 will be standing state index 1 will be jumping state and so on this dot states is an empty array now but we will fill it with states very soon this dot image will be the docs spreadsheet i already loaded it into our project on line 12 in index html so here i just point this variable towards it using its dock image id i gave it the dock image is a sprite sheet with multiple frames when you divide width by number of frames in the longest row or you can think of these as columns you will get width of one frame in this case it's 200 pixels height divided by the number of rows will give us the height of a single frame in this case 181.83 pixels let's first draw it at x and ycoordinates 0 0 so from the top left corner of canvas area i create a public draw method that takes context as an argument to specify which canvas element we want to draw on i call built in canvas draw image method i pass it my doc image from line 7 and i draw it at coordinates x and y so this is our player class creating a selfcontained class that handles all player functionality is a good example of the first principle of objectoriented programming called encapsulation encapsulation means we rub variables or data and functions that operate on that data into objects encapsulation can be used to protect our data from unwanted outside access it simplifies maintenance of our code by keeping it organized and easier to understand since we are including our main script.js file as a module and we are running our code through a local server we can use export import statements native javascript modules are part of es6 standard and allow us to split our code into separate files so called modules members of these modules so classes functions and variables can be exported and imported around our program wherever they are needed i want to export my player class there are two types of exports named exports and default exports each module each file can have only one default export but there is no limit on the number of named exports namedexport looks the same just without this default keyword to make my player class available in main script.js file i go up top and i say import player from player.js this dot slash means that player.js file is in the same folder as script js since player is a default export i don't need brackets for named exports exports that don't have default keyword in front of them i would have to wrap them in brackets like this but since player class is a default export we don't need brackets here and i can also refer to player using default here but there is no need to go into that much detail about modules today i just want you to understand the main idea and get comfortable exporting and importing your variables classes and functions between modules so now player class is available here let's test if it works and instantiate it i create a constant variable called for example player and i set it to new player here on line 2 in player js i can see our player class expects game width and game height arguments so i pass it canvas width from line 8 and canvas height from line 9. if i consolidate player i can see my object here and i can inspect it to see all its properties and values congratulations now you understand how to use native javascript modules what else should we learn today click the like if you are getting any value we created a public draw method on our player class so let's call it here i have an error because draw method needs an argument for context otherwise it doesn't know what canvas to draw on i pass it ctx from line 7 because in this project we only have one canvas element nice we are drawing player image on canvas what you see on canvas right now is the entire sprite sheet on line 14 here we are telling draw method what image to draw and what coordinates to draw it at draw method will just take the entire image at its original size and it places it at these coordinates i can change the coordinates here built in canvas the draw image method can take 3 5 or 9 arguments depending on how much control we want to have over the image we are drawing if i give it optional fourth and fifth arguments these stand for width and height and the entire image will be stretched to fill the rectangle defined by these starting coordinates and these ending coordinates the last longest version of draw image method expects 9 arguments and it gives us full control over the image we pass it image we want to draw x y width and height of rectangle we want to crop out from the source image and x y width and height of rectangular area where we want to place that cropped out piece of image on destination canvas so right now i want to draw just a single frame from player sprite sheet so destination values will be this dot x this dot y this dot width and this dot height and source values will be let's start by cropping out this frame in the top left corner so from coordinates 0 0 two coordinates distort with this.height these two values determine start of cropping rectangle so i can navigate around the sprite sheet horizontally and vertically just by changing these two values now i'm traveling along the sprite sheet horizontally it's not very obvious on this simple standing animation if you watch doc's tale you will see we are swapping between frames source y argument here is for vertical navigation now i jumped to this frame i can swap between frames just by changing these values i might as well put them into separate variables i create frame x variable for horizontal navigation and i replace it here i also create frame y for vertical navigation and i replace it here now i can jump between frames in our sprite sheet by changing frame x and frame y variables wow we covered the main principles of javascript sprite animation so fast today i have a special glass about it if you want to go deeper to finalize sprite animation we just rotate between sprites on each row endlessly using frame x property and as we swap between different player states such as running and in we will be swapping between rows of sprite sheet vertically using frame y variable before we do that let's place player in the middle bottom of canvas to make it seem like it's standing on the ground this dot x is a game width divided by 2 minus player's width divided by 2 and middle bottom placement is game height minus height of the player like this there are many ways to handle keyboard inputs i want to keep our code clean and modular so i have this input.js file inside i create a default export again and this time it will be a class called input handler this class's job will be to setup listeners for specific keys and to keep track of the last key that was pressed or released and it will have only one class property called for example this dot last key this value will be updated every time one of our selected keys is pressed or released inside constructor i create an event listener for keydown event callback function on event listener in javascript has this autogenerated event object that is automatically passed as an argument here i will refer to it as e for example this e event object has all kinds of different information about key down event that just occurred you can console e to see it i used it many times before so i know this event object has a property called key that gives us the name of keyboard button that was pressed i could use ifelse statements here or i can use a javascript switch statement which is used to perform different actions based on different conditions we use it to select one of many blocks of code to be executed based on which key was pressed the syntax goes like this i open switch statement and i pass it expression to validate in this case i wanted to check for value of event.key which contains name of the key that was just pressed in this keydown event i say case arrow left and here some code to be executed if e dot key is arrow left in this case i will take this to the last key from line 3 and i give it value press left make sure you spell it the same as me it's case sensitive we can have multiple cases here so far i just have one but i will add more arrow keys in a minute switch expression on line 5 is evaluated once and it is compared with each case in this case it will check if e dot key is equal to arrow left if it is code on line 7 will be executed we can also give it default case with code to run if there is no match but i will not be doing that today let's copy this event listener and i change it to key up event when arrow left is released i will set this dot last key from line 3 to release left this way i can keep track of specific keys being pressed and released i can't lock e dot key inside key down event just to check if everything works so far so i have this custom input handler class and all this code is inside its class constructor which means all this code will get auto executed when i create an instance of this class using the new keyword instantiate an input handler class will automatically attach these two event listeners to our browser window object i'm exporting this class here and i will instantiate it from a main script js file by saying import input handler from input.js with input handler class available i create a constant variable called for example input and i set it to new input handler that's it now when i click my canvas and i start pressing keyboard it will console log names of those keys those names are values of key property on auto generated event object coming from e dot key here so creating an instance of input handle class automatically executed all the code inside its constructor which added event listeners to our project we care only about certain keys we will ignore others right now pressing and releasing left arrow key will update this dot last key property last key stores the last keyboard input that was pressed or released i will add more keys in key down i add case for arrow right and i set last key to press right and in key up event listener we set it to release right i will add break keyword after each case if we find a match we don't have to check the others so we are listening for presses and releases of left and right keys let's see if everything works i can't lock input from line 14 dot last key which is coming from line 3 and input js file it's not working because we have a problem with this keyword since i'm attaching event listener to window object from inside a class i need to bind that reference to this keyword so that when event listener runs this line later it still remembers that this keyword stands for this property on input handler object i can use built javascript bind method here or i can use es6 arrow function syntax which has a special builtin feature when compared to regular function arrow functions do not bind to their own in this but they inherit one from their parent scope this is so called lexical scoping because of this behavior arrow functions allow us to retain the scope of the caller inside the function so we don't need to use bind in other words use an arrow function here we'll make sure these lines of code will correctly remember we are pointing them to this class property i will also need animation loop so custom function i call for example animate inside i will console input.lastkey request animation frame and i pass it animate which will create an endless animation loop i start the loop by calling animate like this now when i click on canvas and i press left or right arrow keys we get the correct console logs for left i misspelled arrow right on lines 9 and 19. now everything works great utils.js is just a place where i can have my small utility functions i want the function that will display the last key that was pressed i want to draw that text on canvas so that i don't have to check console it will be very simple i call it draw status text it will take arguments for context to specify what canvas we want to draw on and input so that we have access to the last key value i set canvas font property to 10 pixels helvetica for example fill text method takes text we want to draw and x and y where on canvas we want to draw it so i pass it last input colon space plus input dot last key and i want to draw it at coordinates 10 20 i guess let's export it and import it in script js this time i'm not exporting it as a default so i have to wrap it in curly brackets like this i import draw status text in brackets from utils.js and i call it inside animation loop here on line 19. it expects context and input as arguments so i pass it ctx from line 9 and input from line 15. let's make it larger maybe 30 pixels and coordinates 2050 nice it works i need to make sure i clear my canvas between frames to delete old paint build in clear rectangle method and i want to clear the entire canvas from coordinates 0 0 to coordinates canvas with canvas height this will delete my player so i have to redraw it for every frame by placing player.draw inside animation loop nice so far we only care about left and right arrow keys when we press them canvas gets updated let's delete this console log state design pattern allows objects to change their behavior based on their current state in this case we will start very simple to demonstrate the main idea we will swap player between stand and left and stand and write state entering each state will draw a different row in sprite sheet and in each of these states player will only respond to a limited set of keyboard inputs when we are standing left we will ignore additional presses of left key and we will only react when user presses the right key which will swap us to standing right state in the stand and right we will ignore any additional presses of right key and only pressing left arrow key will swap us to standing left state in each state we can limit what keys player will react to and we can write logic that defines behavior for each key press separately i will keep all potential player states in this dot states array here and i will keep track of the current one in this dot current state here the way this is done is that each state in this dot states array will be its own object generated by a separate class don't worry let's go through it now and make sure we explain it properly so that it's easy to understand in state js i will define class for each state i will have an object that will contain a list of all possible states usually it's a good idea to use enum for this in this case we will use enum to define a set of named constants we define a name for each state and assign it a number the order of these states must match the order in which we add them to player states array and that way swapping between states will be more readable because instead of swapping to state 0 i will be able to swap to state standing left for example it will make our code easier to read that's why we're writing this enum statement i will have just two states at first to demonstrate the entire logic on a simple example standing left will be state 0 and stand and write will be state 1. i create a custom class called state its job will be just to hold this dot state property which will be passed to constructor as an argument it will take this argument and it will turn it into class property this is just to keep track of name of the currently active state so that we can write that state name on canvas in state design pattern each state is usually defined by a separate class so let's create a class called standing left and that class extends state class from line extends keyword is used to create a child class by extending a class i'm setting up a relationship between these two classes this is parent and this is child extending classes is a good example of one of four pillars of objectoriented programming called inheritance inheritance is a process where one class inherits attributes and methods from another class we use it to avoid code repetition i will create multiple child classes that all extend this state class if i want i can define a method on parent state class and it will be inherited by all child classes automatically so that i don't have to define them on each class separately all child classes will also have access to this.state property because if i reference a method or a property from inside a child class if javascript can't find it on this class it will go look for it automatically on the parent so this is our parent class also called super class and this is so called child class or sub class it will have its own constructor and that constructor will expect player object as an argument because i need access to player properties on here since i want to be changing things like player sprite sheet row or player speed as we swap between different states constructor is automatically executed when we create an instance of a class so the first thing i will do is use super keyword we can use super keyword in child classes to access and call methods on object's parent when super is used in a constructor like we are doing here it must be used before this keyword calling super here will execute all the code inside the parent constructor on line 7. in this case we need to pass it name of current state standing left and constructor will set it as a value for this dot state class property on this particular subclass we'll just use that to write currently active state on canvas a bit later now i take player object passed as an argument and i convert it to class property here my standing left child class will have enter method that will do everything that needs to be done when player enters this particular state for example it will change its speed or sprite sheet it will also have handle input method which will listen for a predefined set of inputs and swap to a different state when the correct key is pressed enter method will just run once when standing left state is entered handle input method will run over and over per each animation frame let's copy all this and make another child class called standing right i pass stand and write string to its super class constructor notice that we have two subclasses extending one superclass both of these child classes have methods that are named exactly the same this is very important placing methods with the same names on different objects is an example of one of the core concepts of objectoriented programming called polymorphism out of these four concepts it's the most complex one to fully understand since it has multiple types in this case polymorphism allows methods to display different behavior depending on which class calls it we will be calling enter and handle input methods from player class using the same line of code every time but as player swaps between different states different code will be executed because enter method and handle input methods will contain different behavior for each player's state for each class those differences will be defined here so for this code to work every player state class we define needs to have enter method that runs once every time we enter that state to set things up and it needs to have handle input class method that runs continuously waiting for specific inputs to be pressed to switch player object to a different state handle input method will take input as an argument player object has this dot frame y property which determines which row of player sprite sheet we are animating when we enter stand in left state i want to animate row 1. stand and write animation frames are on row with index 0. the main principle of state management pattern is that when in specific state object will only react to a limited set of inputs other inputs for which we don't define behavior here will be ignored so inside standing left class if input is pressed right we will set state to stand in right when player object is in stand and write state and input is pressed left we will switch player to stand in the left state and the final piece is the mechanism that will actually allow us to swap player to a different state that code will come here i create a custom public method on player class called for example set state and it will take the new state as an argument inside i set this dot current state from line 6 to distort states from line 5 and index will be this state number we passed as argument of course this will only work if this.states actually contains some states right now it's empty we will fill it in a minute we know that each of our states has enter method which will run once when player enters that particular state to set up our sprite sheet to make sure we are animating the correct row back in set state we switch player to a new state and we call that enter method if we pass it 1 here enter method will be called on standing left state if we pass it 0 here method will be called from and write state because in our enum we gave standing left state a value of 0 and standing right state is value 1. so now we have a public method that can swap player between different states if player is currently in standing left state and handle input method detects that we pressed right arrow key we call it this.player.setstate and on line 18 here i see it expects state as an argument that argument will be a number right now we only have two states so either zero for standing left or one for stand and write will come here you can see we say distant states and index in square brackets so we are referring to this dot states from line 5. again we will fill this array with state objects in a minute so i want to swap player to stand in right state here i can see stand right is 1 here so to pass it number 1 i pass it states from line 1 dot stand and write from line 3. this entire enum object is here just to give me more readable values to these numbers that represent states it would also work if i just passed it number one directly here but number one past the set state method will be passed here on line 18 as an argument and this dot current state will be assigned this dot states from line five index one this array will need to have two elements as we have two states element with an index of zero and element with an index of one these will not be just simple numbers like this these will be entire instances of standing left and standing right class but before i can use those classes here in player.js i need to import them to import multiple classes from the same file we need to wrap them in brackets in state.js i export standing left class from line 10 and standing right class from line 22. in player.js i import both of them from statejs like this i need to make sure i save changes to all files i made changes to i have an error because i didn't finish this other if statement if player is in stand and write state and handle input method detects we press left arrow key call set state on player class and pass it number 0 states that standing left this stands for 0 so 0 is being passed here to set state and this dot current state is set to this dot states from line 7 index 0 which is this now we can finally define our states here properly so index 0 in player states array will be an instance of standing left class so new standing left and index 1 will be new standing right we need to make sure that state objects in this array have the same indexes as numbers we defined for each of these states inside enum here now that we can swap between states i also need to be calling a handle input method over and over so that we can listen for new inputs and change states when needed i create update method on player class and it will take input as an argument inside this method i will be periodically calling handle input from this.currentstate property from line 8. this property represents currently active state because of logic we defined on line 24 so player will be either in standing left or in stand in write state it will call either handle input method from line 19 that reacts only to press right or handle input method from line 30 that reacts only to press left i call it like this and i pass it input that we passed here as an argument that input then comes through here so that handle input method can check what was pressed and if the right key is pressed it will swap player states we call playerupdate we just wrote from animation loop and i pass it input from mine17 dot last key from line 3 in input.js we are done we just wrote the entire logic for state management of player object let's quickly follow the logic one more time to make sure it's clear we are calling update method for every animation frame and passing it input.lastkey the last key from selected inputs that user interacted with that input last key is passed here this time i call it just input and i pass it to this.currentstate from line 8 dot handle input and i pass that same input value along this dot current state represents the entire state object at first i am setting it to distort states index 0 which is this standing left object so for this animation frame handle input will be called from standing left class so from here i can see constructor for standing left and standing right expects player as an argument so that we can then correctly set up our sprite sheets here and here inside player.js i need to pass it that player argument since we are inside player class right now i pass it this keyword which in this scope of this class represents the entire player object okay so current state is this dot states index 0 which means our standing left class and we are calling handle input on it so handle input from line 18 will be called if the initial current state is index 1 that would be stand and write state so this handle input method will be called from line 30 instead if handle input is called from standing left class it will only react if right arrow key is pressed and it will swap player to stand in write state if player is currently in stand in write state handle input will only react to left arrow key being pressed and it will swap player to stand in left state whenever we set a new state it will update which of these two states this dot current state is pointing towards and then from that new state it will call this enter method enter method was defined on lines 15 and 27 and depending on the current state it will set sprite sheet to animate a different row i save changes to all my files and when i click my canvas and press left and right arrow keys we are correctly swapping between standing left and standing right state let's display what state player is currently in on canvas as well here on line 24 every time set state is called we set this dot current state from line 8 to one of our available states so far we have standing left at index 0 and standing right at index 1. parent class of all our states has this.state property in its constructor we are given that property a different value from each child state by calling superclass constructor from each subclass basically all that this is we are declaring this.state property on parent class that property is being inherited by all child classes and it's set to standing left on this class on line 12 and to standing right on this class on line 24. i just wanted to draw this value on canvas so that we know currently active state i will use our existing draw status text function for that we are calling it from inside animation loop here and i need to pass it player object so that we can access current player state here i make sure my function expects that argument the same as we did with input last key i will call fill text and i say active state colon space plus player we passed as argument dot current state dot state when current state is set to standing left this dot state here will be set to standing left and that's what will get displayed for standing right it will display this line as i said before using super keyword inside child class constructor will call constructor of its super class its parent class and it will execute all its code in this case this code will assign value of stand and write to this inherited state property when using live server in vs code watch for these dots here it means you have unsaved changes in your file so just make sure you save all your code in each file if you're not getting the same result as me i save my changes i also have to give fill text some x and y coordinates how about 2100 maybe 90 and i reduce font size to 28 pixels when i save my changes and interact with canvas now when i press left and right keys we see status text that tells user the last input that was pressed or released and currently active player status that's it state pattern is complete now we just add more states by extending it before we add sitting and running state let's recap the logic because i realize this must be lot for beginners to follow if you are following so far well done you are doing great it all starts by calling playerupdate and passing it the last key that was pressed or released inside update method we take that input and we pass it along to handle input method the whole trick here is that we are calling handle input from this dot current state property which swaps between different states when we pass it 1 it points to state with index 1 inside this dot states array so in this case stand and write object if it's zero it points towards standing left state object both of these objects have their own version of handle input method so that as we point current state towards different state objects behavior of player will change even though we are always calling the same handle input method it's important that all our state objects have their own definition of enter method and handle input method i could also created a backup enter and handle input method on their parent class here in case child class doesn't have methods with these names but let's not over complicate things i like to think of this type of state management as we are locking player in different states while player is in a specific state it will ignore some inputs and it will only react to inputs we define in its handle input method here we can see that while in standing left state player will only react to pressing right arrow key and it will make it switch to stand and write state while in stand and write state player will ignore all inputs except for pressing of left arrow key which will make it swap to standing left state you might notice that state design pattern has some code repetition but the code is easy to navigate in and if we get a bug it will be limited to a specific state making larger projects much easier to manage and debug if we get some unexpected behavior we can see what state was our player object in when that unexpected thing happened and what was the last input key that was pressed or released and we check our code inside handle input method on that particular state to see what went wrong structuring your code like this comes very useful when you want to give your player multiple abilities weapons and special moves we are capturing the last key that was pressed here inside our input handler class i'm importing and instantiating that class here in script.js and passing it to playerupdate method we pass that input value along to handleinput method and value of that input gets checked against the set of specific values we define for each state and based on that we swap player to a different state using our custom set state method setstate method takes a single number as an argument as we defined them inside enum state that standing right is one state dot standard left is zero so right now i'm basically passing it number one here that number travels as an argument past the set state here it's passed along here and it represents index of that state inside this dot states array on player class so number assigned to each state inside enum object in state js have to correspond to index of each of these particular states inside this dot states array on player class that way when it receives number 1 here it swaps to stand in write state if it receives number 0 it will set state to stand in left after swap into a specific state enter method will run once to set up player object for entering that state in our case we just adjust spreadsheet row for now and then it continuously calls handle input method from that state class which listens to specific set of keyboard inputs that's why we have enter and handle input methods with the same names on each state so that we call them from the same place but we get different behaviors depending on which state object is player dot current state pointing to words at that particular moment let's add sitting state i copy this code block and case will be arrow down if you want to know what are the values of e dot key so that you can check for correct spelling of key names you can just console log it here i'm going to say if e dot key value is arrow down set this laplace key from line 3 to press down in keyup event we set it to release down in state.js i copy this code block i use it to create a new class called sit in left i pass it sitting left here i check my spreadsheet and i see that sitting left animation is on row nine we are counting from zero while in sit in left state if we detect that user pressed right key we will swap player to sit in right state which we will create in a minute else if we detect that user pressed up arrow key we will make it stand up again i need to create these new key value pairs in my enum object up here so sitting left will be 2 and sit and write will be 3. in input js i will check if pressed key is arrow up and i set last key to press up in key up event i set it to release up so now we are tracking presses and releases of all four arrow keys perfect in my new sitting left class when we press right we set state to sit and write and when we press up our dock will simply stand back up so here i need to do standing left because we are going from sit in left state i copy this code block and i turn it into sit and write class we set name of state to sit and write so that it displays correctly here while in sit and write state if we press left we set state to sit in the left if we press up we set state to stand and write in player.js i import these two new state classes i instantiate them inside this.states array while making sure i am adding them in the right order nice so we have two new state classes i hope you can see now how state pattern limits the number of inputs player reacts in each state we have logic that defines how player behaves while in these two new sitting states but we have no way to actually enter these sitting states i go inside standing right class and i say if input is pressed down we set state to sit in right if we press down while in standing left class we set state to sit in left i also need to make sure enter method on the seat and left class sets player sprite sheet to the correct row sitting left is row with index 8. actually sorry sitting left is row index 9 sitting right is row index 8. now it's correct i will also set the initial state to stand and write so distort states index 1 just for the first page load before we start pressing keys and swapping player states now when we press the down arrow key player will sit we can press left and right keys to make player turn left and right while sitting and pressing up arrow will make it stand up and face the correct direction this is going really well we can also change how the entire sitting state works by only making the player sit while arrow down key is being pressed and when it's released player will stand back up automatically so inside sitting left state if input is released down we set player to standing left and inside sit in right we set player to stand and write it well depends on what kind of game you are building and what player behavior you want i hope you can see that you get a lot of freedom and flexibility with this code structure you can easily control every detail of player behavior when you structure code like this the way i wrote this code we only react to the last key pressed i'm not keeping track of multiple key presses in memory since i want to keep this simple but i will cover how to handle pressing multiple keys at the same time in a special episode as well probably added running states will be similar but we will have to handle horizontal speed so let me show you how to do that again i start by adding new states inside my enum running left will be state number four running right will be number five i make a copy of this block and name it run and left i put running left here i check my sprite sheet and the row for this animation is 7. when we release left while in this state we will switch player into standing left state and when we press right we will switch into run and right i also copy this line of code from here and when we press down from running left state we will go into sit in left state duplicate this and turn it into run and write state if we press left arrow key while in run and write state we will switch into run and left if we release right key we will go into stand right and pressing down arrow key will make players sit to the right not every game needs to have left and right version of each state also there are other ways to write code when you have a set of states that each has left and right version or maybe each state has a version with weapon ready and weapon hidden for example again i'm doing it like this for simplicity and to demonstrate the main idea of my version of state management pattern so we defined behavior for player while in running states now we need a way to actually enter these states we can enter running from standing state for example while standing left if we press right we set state to run and right here inside run and write state we see that when we release right key it will switch back to stand and write state so we are only running as long as the key is being pressed down if we press left while in standing state we will start running to the left i get this error because i refreshed my project before i finished adding new state on player class don't worry about that while in standing right state if we press left we will start running left if we press right we will start running right so here we are exporting two new state classes we just wrote here we are assigning them values four and five these numbers need to correspond to indexes to order in which we add these states inside this dot states array here first i import them on line 1 as usual and then i add instance of running left class as index 4 in this array and running right will be the fifth item in this array counting from 0. i save changes to all my files run in right animation is row 6 in our sprite sheet perfect it works and swaps between running and standing states correctly we also want player to actually move when in running state so let's give it this dot speed property and set it to zero then i create max speed property and i set it to 10 pixels per frame for example when we enter running state we set player speed to player max speed and in running left we set player to minus player max speed because moving left is in the negative direction on horizontal xaxis inside update method on player class i will be adding player speed from line 16 to horizontal position from line 12. problem now is that player will just move off screen because even when we switch away from running state nothing is setting player speed back to zero so when we enter standing left state we set player speed back to zero we do the same thing inside enter method on stand and right sitting left and sit in right state perfect player now stops moving when we enter standing or sit in a state i will also introduce horizontal boundaries so users can't move player outside the canvas if horizontal position of player is less or equal to zero i set the position to zero else if the position is more or equal to game width minus player with meaning player's right edge is touching right edge of canvas i will also not allow it to move past that point this is going so well we applied state management to our player and we have granular control over its behavior separated for each state we can do so many things with this common thing you will see in games is jumping again there is a new small trick we have to use here if you never coded jumping in a 2d side scroller game we will learn how to do it properly right now and we will make it look really good by switching player to a separate falling animation after it reached peak height of its jump let me show you that swapping between states doesn't always have to happen on user input we can also tie state swapping to other game events in this case we will swap a player from jumping into falling state after it reached maximum height of its jump we are creating new states as usual i will first add them up here to our states object which we are using to pair readable state names with numbers that represent each state i copy already exist in state class and i turn it into jumping left class i check my spreadsheet to see which row has a jump in left animation frames i delete player speed i think because i want the speed to be inherited whether we enter jump from standing on running state we will see about that i delete all these inputs for now i copy this block and turn it into jumping right class frame y for jumping right is row with index of 2. i go up to standing left state and when input is pressed we switch player to jump in left inside stand and write state when we press up arrow key we set state to jump in right i'm exporting these new state classes so in player.js i can import them and i instantiate them inside player states array i'm getting an error it's because up here in my enum i skipped some values let's assign my new states to the correct values now we correctly enter jumping state when i'm in that state it doesn't matter what i press we are locked in that state because inside handle input method i didn't give it any way to switch off to a different state first when we enter jumping state let's push player upwards on minus direction on vertical y axis when we enter i say this.velocity y minus equals i do the same for jumping right state in player.js inside update method we will deal with vertical movement here i give player v y velocity y property and i give it property i call for example weight i could have also called it gravity or something i will use velocity y to pull player upwards and wait to pull player down as the ratio between these two values changes during the jump it will create a nice jumping curve for every frame we will add this.velocity y from line 14 to player's vertical y position from line 13. right now velocity y is zero so even when we are adding it there will be no vertical movement if player is not standing on the ground so if player y is less than this.game height minus player height gradually add value of player weight to velocity y else meaning player is standing on the ground set velocity y back to zero give me a second to figure this out to make sure i'm doing it correctly in state gs here i actually want to access the velocity y property on player object so this dot player v y minus equals 20. i get small jump and it stops moving again oh yeah this is a typo this needs to be game height now it's working we have multiple places in our code where we need to check if player is standing on the ground or if it's currently in the air this is a good time to create a small utility method on our player i will call it unground and its job is to check if player is standing on the ground i will just make it return true or false directly like this based on how this expression evaluates if player's y coordinate which is the top edge of player image rectangle if it's more or equal then game height so this point minus player height so if this point is more or equal than this point we know player is standing on the ground so this method will return true else it will return false now i can just call this method whenever i need to do this check and it will also make the checks more readable here on line 32 i'm checking if player is not on ground so i say if on ground is false actually if this dot on ground is false now it's working i want player to be able to switch sides while jumping so in jump in left state if we press right arrow key we set state the jump in right in jump and write state if we press left arrow key we set state the jumping left player is flying off screen really far let's change this to minus equals 10. that's a very small jump but you will notice a bug here if i swap between jumping left and jumping right quickly each time we enter these states we are running their enter method so each time we push player further and further up i want the player to only be able to propel itself further up if it's standing on the ground so in enter method on both jumping states i will first check if player.on ground is true before we push it upwards if it's already in the air this will be false and player will receive no vertical push i change these values to minus equals 40. i just make sure i spell on ground correctly perfect we are able to turn to sides while jumping i will actually give it some horizontal speed as well when we enter jumping left set player's horizontal speed to half of player's max speed and the same for jumping right in jumping left it actually has to be negative number since we want to move in minus direction on horizontal xaxis that works awesome i can switch between jumping left and jump and right states but otherwise i'm locked in jumping i didn't give it any way to get back to running or stand in state inside jumping left i check if player on ground is true and when player gets back on the ground we set its state to stand and left in jumping right again we check if player is back on ground and we set it to standing right we are running standing sitting and jumping well done if you followed this far let's polish this and make it look even better jumping works this way we are always adding velocity y to player's vertical position here on line 31. most of the time that velocity y is zero so there is no vertical movement when we enter jumping state we set velocity y to minus 40 which will push player upwards in minus direction on vertical y axis when that happens player is no longer standing on the ground so this if statement triggers and we start increasing velocity from line 14 by player weight from line 15. this happens for every frame step by step so actually velocity y goes from 40 to zero making player move up slower and slower when it's zero player will stop moving at that point we are still not on the ground so this line of code keeps increasing and it moves velocity y from negative to positive numbers which will make player reach peak of its jump and it will start falling back down when we touch the ground this else statement triggers velocity y is set back to 0 and vertical movement will stop understanding how velocity y goes from 40 to zero and then into positive numbers gives us ability to tie player state change to it i can tell that player is at its peak of its jump because its velocity y switched from negative to positive values i will just add a quick check here to make sure player doesn't fall through the floor it shouldn't happen but this is kind of my insurance if player y is more than game height minus player height set player y to gain height minus player height this line will make it impossible for a player to move below ground level under any circumstances i don't think this check is needed even when i increase player weight to 10 we still don't fall through the floor maybe you can just comment it out it's up to you it's just the check to be secure i created falling states falling left is 8 and fall in right is 9. i copy one of my state classes and i turn it into fall and left enter method we'll just set frame y to five inside handle input method while in fall in left if we press right arrow key we want to turn so we will switch to fall and right i also want to keep this check when we fall all the way to the ground we will switch player to standing left state i copy this and turn it into fall and write class frame y here will be 4 and when we press left we set state to fall in left i import these classes in player.js and i instantiate them inside player states array so how do we enter fall in state as we said when we enter jump velocity y is set to 40 and we start adding player weight to it so it goes all the way to 0 and into positive numbers i know at the point velocity y reached 0 we are at the peak of jump and as it goes into positive numbers player is falling back down bear with me a second here please so inside the jumping left state if velocity y on player object is more than zero we set player state to fall in left inside jump in right state if velocity y is more than 0 we set state the jumping right so this is one example of how you can switch states based on other conditions state changes don't always have to be triggered by user present keys on keyboard this works really well we created standing sitting running jumping and falling states we are just drawing the first frame in each sprite sheet row let's actually animate the frames horizontally we have frame x property for horizontal navigation within our sprite sheet for every animation frame i check if frame x is less than max frame and i increase frame x by 1. i set frame x back to 0. some rows have different maximum number of frames but that's easy to deal with initially i set max frame to 5 we are counting from 0 you can see that sit in animation has less frames so it's blinking since we are animating empty frames we will start with standing animation so the initial max frame is 6. every time we enter a new state we set max frame to a different value when we enter standing left we set max frame to 6. probably i should be set in max frame before i set frame 1 because in some cases if i switch row at first we can get blinking before the right max frame is applied or maybe i could also set frame x to zero every time we enter a new state i'm not gonna go deep into this today i made other episodes about sprite animation this is just a quick solution running left and running right we'll set max frame to 8. jumping and falling have max frame six awesome we are correctly animating all our rows if you want to make player move faster you can change max speed property here on line 20. this value affects horizontal movement the sprites are animated very fast maybe i want to slow them down a bit without changing fps of the entire game how do i set fps for how often we switch between horizontal frames in sprite sheet while still keeping everything else running at maximum 60fps as always we can use timestamps and delta time last time will be the value of timestamp from the previous loop animate takes this auto generated timestamp argument which was produced and automatically passed to it by request animation frame from line 23 delta time is the number of milliseconds that passed between the last animation loop and this animation loop it's the difference between timestamps from each loop so delta time equals the timestamp from this loop minus timestamp from the previous loop when we have that calculation i set last time to the current timestamp so that it can be used for the next loop i also have to pass animate the initial timestamp just for the first loop because request animation frame also generates it from the second loop onwards so now we have delta time we know how many milliseconds it takes for our computer to serve the next animation frame it depends on power of our machine how much animation and calculations our game is doing per each frame as well as on refresh rate of screen we are using this number can be different for every computer but we can use it to unify how our game runs across different machines today i will use it to control how often we serve the next horizontal frame in doc's sprite sheet i pass delta time to player draw method here and in player js i make sure draw method expects that argument damning things with delta time needs three helper variables one variable to set fps frames per second one timer variable that will accumulate delta time until it reaches a certain value and one variable that defines that value we want to reach i call that value frame interval and it will be thousand milliseconds divided by frames per second which will give me number of milliseconds i want each frame to be displayed on the screen before we switch to the next one so if frame timer from line 22 is more than frame interval from line 23 only then switch frame x variable at the same time set frame timer back to 0 so that it can count again else just increase frame timer by delta time and wait until it accumulates enough milliseconds it's not working i see here in animation loop i need to correctly assign last time to the new timestamp value after we used it to calculate delta time so that it can be used to calculate delta time in the next loop if i change fps it affects how fast we serve horizontal sprites while still allowing player to move around at maximum 60 frames per second or whatever your request animation frame can handle on your computer if i give it fps that's higher than my screen's refresh rate request animation frame will automatically copy it so it won't animate faster past a certain value that maximum value of frames per second is limited by your screen's refresh rate making games with javascript is one of my favorite ways to practice coding today we will build a 2d game and we will animate everything to bring it to life i want to show you how to make keyboard controls feel quick and responsive we will apply animated sprite sheets and parallax backgrounds we will learn how to give our game different skins we will explore a new technique to make particle effects and we will challenge our players by giving different enemy types different behaviors on my community page i asked you to choose between three super powers and you chose the fireball tackle so let me show you how to turn into a flaming ball of plasma and vaporize enemies to earn points come join me and learn how to create your own 2d adventures with html css and plain vanilla javascript no frameworks and no libraries click like if you want more games to keep the code organized and easy to navigate in i will split javascript into multiple files so called modules and i will export and import them around the code base as needed to enable this functionality we have to run our code in some kind of dev environment they need to be run through some kind of server you might already have a preferred way to run a local server you can go ahead and do that for the rest of us the easiest way to create a simple local server is to use vs code editor which has a builtin one when you open your vs code check if you have this notification area down here that says go live if you can't see it you can just come here to extensions and search for live server it's this one mine is already installed you can just click install here when you install it close your vs code and reopen it and you will see go live down here one last thing to do we have to point vs code to the correct folder with the files we want to run through this live server we do it by going to file open folder and in there you navigate to the folder you will work with today on your local computer and click open now when i create new files they will be automatically created in that folder so i create index html style css and main js in index html i create a basic blank web page markup in vs code you can just press exclamation mark and tab key and it will create it for you let's give it some title and link style css file like this i create a canvas element with an id of canvas one down here i link my javascript using a script doc i give it type attribute and set it to module to specify that this file will be a javascript module it will be my top level module and we will be importing other javascript modules inside i click this go live button and the live server plugin will automatically open my default browser and it will run our project in it it will also automatically reload the browser window whenever we save any of the project files you don't have to use vs code and live server plugin if you know how to create your own local server in a different way feel free to do that so now i can see my live server is running on port 5501 it will reload browser window whenever i save any project file i usually use control plus s keyboard shortcut to save sometimes you have to manually reload the browser page for the first time and then it will start doing it automatically in style css i reset margin and padding to 0 on all elements and i set a box size into border books this is so called a global reset and we do it to make sure our page looks the same across different browsers canvas 1 will have border 5 pixels solid black and i center it in the middle of the page so the usual four lines of css position absolute top fifty percent left fifty percent transform translate minus fifty percent minus fifty percent i will provide you with game art assets you can use to code along with me and at the end in the experiment sections i will show you how to apply different skins to your game so that you can make it unique based on your own creative preferences check out this website for more beautiful art assets that are already compatible with today's project today we will be using images for player backgrounds enemies and other things the easiest way to make sure our code runs only after all art assets are loaded is by placing the images inside index.html which we will do in a minute and we will put all javascript inside a callback function on event listener for window load event that way javascript waits for all dependent resources such as stylesheets and images to be fully loaded and available before it runs when the page is fully loaded we will point javascript towards our canvas element using its id i create an instance of builtin 2d drawing api using getcontext method and i save it as ctx shortcut for context canvas width will be for example 500 pixels and height 500 pixels as well you can make your project wider but keep the height at 500 pixels for now because i optimized the background images for that size we can make canvas scale up and down to make sure it's always fully visible if i set width to 1500 pixels we can only see the middle it's cut off on left and right i can give it max width 100 percent and it will make it scale down until it's fully visible whenever the width of the page is less than the width of the canvas element i can also give it max height 100 in case that the restricting factor is page height now we can always see the entire canvas regardless of its width and height i set it back to 500 500 for now the main brain of our project will be this game class all logic in our project will somehow go through it it will expect width and height as arguments and inside we convert these to class properties like this it will have update method that will run for every animation frame and trigger all calculations that need to happen and draw method will draw our images score and so on right now we don't have anything to update or draw yet i create a new javascript file called player.js if you are a beginner it will be easier for you if you follow my code exactly and use the sprites and images i provide you and only once you have a working project then you can modify it and add your own art assets and game features if that's what you want to do inside player.js i create a class called player its job will be to draw and update our superdog character constructor will take the entire game object as an argument through it we will have access to some things we will need such as width and height of the game area and so on javascript objects are so called reference data types which means when i pass the entire game object to other classes like this i'm not creating a copy of the game object i'm just pointing to it so now it's time to bring player image to the project it was provided by this talented artist and you can download it for free in the video description and use it for learning purposes to follow along with this class check out their website for more game art assets if you want to make your projects unique so we have some images and sometimes it can take a while maybe even a couple of seconds for the images and audio files to load in javascript if you try to use an image that hasn't yet been fully loaded you will get an error we need to make sure our images are loaded and available before we draw them one way to do that and the simplest way to do that is to actually include those images on our web page i simply create an image element and as a source i point it towards the image file i have a folder called assets in the same place where my index.html file is and in there the image i want is called playerpng i give it id player like this i will draw that image on canvas with javascript so i don't really want to display it on the web page like this install css i target it using its id and i set its display to none it's a good practice to make your images the exact size you will use in your projects we can scale it down with javascript but for maximum performance it's better to size your images in photoshop or some other graphics editor i already did that with the images i gave you today and i sized each frame to the same size we will display in game the width of each single frame in the sprite sheet will be 100 pixels and height will be 91.3 pixels if you are using your own sprite sheets you can get the width of a single frame by taking the width of the entire sprite sheet and dividing it by the number of horizontal frames and height is the height of the entire sprite sheet divided by the number of vertical frames the number of rows player will also need to be positioned somewhere on canvas so it will need x and y position it will have update method that will move it around based on user input and it will cycle through the sprite frames and the draw method will take those values and it will draw currently active frame and the current coordinates it will need context as an argument to specify which canvas element we want to draw on let's start by calling fill rectangle first and we draw it at coordinates this dot x this.y and we also specify its width and height if i want to use this javascript class in a different module in a different file i need to export it i can just say export like this each file can have unlimited amount of exports or i can say export default each file each module can have only one default export in main.js i import playerclass by going up top and saying import player in brackets like this from dot forward slash player.js in quotes class constructor on javascript class is a special type of method it gets automatically executed when we call this class using the new keyword it will create one new instance of this class and as a side effect all the code inside the constructor will run we can take advantage of that by putting in any code we want to run at that point when i create an instance of game class i also want to automatically create an instance of player class since i'm importing player class on line 1 i can instantiate it here this dot player property on game class will be new player like this inside player js on line 2 i can see that player class expects game as an argument so here since we are inside that game class i will pass it this inside game class this keyword means this game object now that we have access to the player object from within a game class here inside draw method i can take this dot player from line 13 and i call its draw method we declare that draw method here on line 12 inside player js and i can see it expects context as an argument my main public method will be this draw on game class it will get context pass from the outside in a minute and we will just pass that reference along to player draw like this our game class is complete let's create an instance of it i need to pass it width and height so i pass it canvas width from line 6 and canvas height from line 7. so now we created an instance of game class which triggered class constructor and that automatically triggers class constructor on imported player class and also creates our player make sure you save changes to both player js and main js file every time you make any change if you have any unsaved changes in player js at this point you will not get the same result as me i console log a game and i can see it has height width and it contains player object as we defined in the constructor perfect we will also need animation loop because i want the game to update and draw over and over 60 times per second i create a custom function i call for example animate inside i call game.draw from line 18 and as context i pass it ctx from line 5. then i call request animation frame and i pass it animate to create animation loop when i call it we are drawing this black rectangle representing player object nice this code inside draw method on player class will determine what the player looks like i can make it red for example i can move it around by changing its coordinates if i want to align the player on the bottom of the game area player object needs to be aware of game height i have width and height of the game area here as properties on game object and i'm passing a reference to the entire game object to the player here inside player js i convert that reference to a class property called this.game and i can extract width and height of the game from that so to position the player on the bottom of game area i set its vertical y coordinate to this.game.height minus distort height height of the player i don't really want the player to look as a red rectangle we have a special sprite sheet with our superdog to use here we are about to learn how to use builtin draw image method to animate a game character from a sprite sheet if you want to go deeper on sprite animation the very first episode in the series linked below will explain it in a beginnerfriendly way this is an advanced video if you feel it's too challenging for you at some point don't worry it will make more sense if you keep going and you can always watch a special episode describing each technique on a simpler project so draw image is a special html canvas method we can use to draw and even to animate an image it's simple i have my player sprite sheet here in html and i gave it an id of player i create a property on player class called this.image and i point it towards that image element using getelementbyid now i can draw that image draw image method needs at least three arguments image we want to draw and x and y where to draw it by the way i'm not sure if you know but i don't really have to use get element by id here i give my image id of player here and javascript automatically creates references to all elements with ids into the global namespace using its id as a variable name so i can simply just use that id as a variable name here and it will still work it's a bit strange and for some reason nobody uses this feature but it will work i will go back to getelementbyid here even though it's kinda redundant draw image method can also accept optional fourth and fifth argument for width and height and it will shrink or stretch the image to occupy these dimensions now it's just squeezing the entire sprite sheet into the small space the longest version of draw image method takes nine arguments and that's the version we need we pass it image we want to draw source x source y source width and source height of the rectangle we want to crop out from the source image in our case a single frame of the sprite sheet and destination x destination y destination width and destination height will define where on destination canvas we want to draw that cropped out rectangle onto at first i just want to crop out the top left frame in my sprite sheet so i crop from coordinates 0 0 and the area will have a width of 100 pixels and height of 91.3 pixels i'm cropping out exactly one frame i don't need the red rectangle anymore we are redrawing the same image over and over 60 times per second but it looks static let's check if we are actually animated by putting some code inside playerupdate method for every animation frame i want to increase player's horizontal x coordinate by 1 pixel to actually run the code i need to go to update method on game class and i take this.player from line 13 and i call update on it like this finally i call game.update from inside animation loop and we have some emotion congratulations you are javascript animation master okay we can do a bit more with this if you want the dog is leaving a black trail behind that's old paint we can just see all the previous frames if you want to see only the current animation frame we need to clear canvas each time we update and draw i call built in clear rectangle method and i want to clear the entire canvas from coordinates 0 0 to canvas with canvas height now we can just see the current animation frame i don't really want the player to move like this let's comment this out i want the player to move left and right jump and to use super powers based on keyboard inputs i create a new javascript file a new module i call it input js its job will be to capture and keep track of user input again i will create a javascript class here i will call it for example input handler inside its constructor i create a property called this dot keys and i set it to an empty array at first i will be adding keys that are pressed down into this array and removing the keys that are being released that way we can always check if a specific key is pressed by chicken if it's included in this array as we said before the code inside a class constructor is executed automatically whenever we create an instance of this class so i will take advantage of that and i will apply key down event listener from here event listeners return an autogenerated event object which contains all kinds of information about the event that just occurred the property that holds the name of the key that was pressed is called key so let's console.log e dot key i export input handler up here inside main.js i import my new input handler class same as i did with player i will create an instance of input handler class inside gamer class constructor i will call this property this dot input this way input handler class gets automatically instantiated when i create an instance of game class it will create this dot keys array from line 3 and it will also automatically apply this key down event listener now when i press keys on my keyboard i can see their values i don't want to react to every key we will ignore some and we will only respond to specific controls defined here we will also make sure each key can be added to this dot key's array only once so when the user holds down a specific key it will not be added 20 times it will just be added once let me show you i say if e.k meaning the key that was just press has key value of arrow down and at the same time this key that was pressed is not yet included in this dot keys array so this dot keys index of e.k is equal to 1 you can also say is more than 1 in javascript when element has index 1 it means it's not present in the array then i just do this.keys push e dot key so if the key that was pressed is arrow down and if arrow down is not yet inside this dot keys array push arrow down into this dot keys array i can console lock key that was pressed and this dot keys array you can see it will stay empty until i press arrow down if i press it it will be added to this.keys array once i will also create an eventlistener for keyup event if e dot key is arrowdown meaning if the key that was released is arrow down i will use splice method to remove it from this dot keys array splice method takes at least two arguments index of the element we want to remove and how many elements to remove at that index let's test it actually to test it properly i want the console log after the if statement now when i press arrow down it gets added to this dot keys array through the code inside keydown event when i release it keyup event removes it from the array perfect i also want to listen for arrow up key so i use or operator be careful about brackets here i have to wrap this block in brackets like this if key that was pressed is arrow down or arrow up in brackets and at the same time the key is not yet present in this dot keys array only then push it inside i also need to make sure i remove that arrow up key on keyup event again pay attention to how i use brackets here it's easy to make a mistake here and break your code we will also listen for arrow left so or operator e dot key is arrow left and another or operator and i check for arrow right i will check for one more key for now i will use it for a special move and attack and you can use alt ctrl but be careful mac and windows call alt and control keys differently they might have a different value console e.k and press them on your machine to check for that value in this case i will use enter key which should be more universal and compatible with both mac and windows systems let's add all these keys to key up event as well and i have to make sure my syntax is correct now it should work i click my canvas to select it and when i start pressing arrows and enter i can see they are correctly being added and removed from the array you can see we are also keeping track of multiple key presses at the same time great so now this dot key's property on input handler class always contains all currently active keys i have an instance of that class here saved as this dot input for every animation frame i want to pass the current list of active inputs to playerupdate method as an argument so that it can react to it i will pass it this.input.keys inside player.js i make sure the player expects that input value i will call it for example input it still refers to this.keys array we have on our input handler class inside update method on playerclass i want to check if it includes specific values i use builtin array includes method i could also use index off method here it would work the same if input includes arrow write increase horizontal xcoordinate of the player by 1. else if it includes arrow left decrease x by one making the player move left on the negative direction on horizontal xaxis i actually need to say this.x to correctly refer to the property from line six the error i'm getting now is because i didn't save my changes to input js or main.js files with file structure like this when we're using modules we always have to make sure we save every file whenever we make any changes to it now when i press right arrow player moves right when i press the left arrow key the player moves left let's refactor this i give player a speed property and initially i set it to 0. i also give it max speed property which will be its speed in pixels per frame when it's moving so this section of code will handle horizontal movement for every frame i will increase player's horizontal x position by its current speed so right now the speed is zero so the player is not moving down here i say if input includes arrow right set this dot speed to mark speed if it's arrow left set speed to minus max speed now i can move left and right again but i can't really stop there is no condition when the speed returns back to zero i can fix it by saying else this.speed is zero meaning if input array doesn't include arrow right or arrow left stop the horizontal movement i also don't want the player to be able to move outside of the game area so i need to introduce some boundaries i say if this dot x is less than zero set this dot x to zero now i can't move past the left edge i also say if this dot x is more than this that game width minus the width of the player set x to game with minus player with now i can't move past the right edge of game area as well perfect it's time to handle vertical movement which will include the jump in and also a special dive move where we crush enemies from above i create a new class property called this dot v y velocity y basically a vertical speed initially i set it to 0. for every animation frame we will add the current vertical velocity v y to player's vertical y position currently v y is set to zero so there will be no vertical movement at first i will have to check in multiple places in my code whether the player is standing on solid ground or if it's currently in the air to make our code more readable and to avoid code repetition i will put that check into a small utility method i will call it for example on the ground and i just want it to return true if the player is on ground or false if the player is in the air i do that simply by say in return this dot y is more or equal to height of the game minus the height of the player let's start by saying if input includes arrow up set this.velocity y from line 8 to 20 i press up arrow key and the player just flies up offscreen okay that worked i only want the player to be able to jump while it's standing on ground i don't want it to jump higher and higher in the air when we are pressing up arrow repeatedly i add one more check here to see if on ground from line 28 is true i set velocity y to 2 nice if you want a nice jumping curve in a 2d game we usually do it by making the power of the jump in our case vy property work against the gravity or weight of the object and while that object is in the air we keep increasing its weight until it eventually is higher than its jump power and it will make it slow down and start falling down let me show you exactly what i mean this used to be a bit confusing for me but it becomes easy when you use it a few times i create a new property called this.wait for example and i set it to one so we have velocity y property on line 8 and when we press up arrow key we set it to 10 this will be the power pulling the player upwards at the same time i want the weight of the player from line 9 to be pulling it down and i want that pull to be stronger the longer the player is in the air to get that smooth curve when we jump i do that by saying whenever this dot on ground is false whenever the player is not standing on the ground increase its velocity y by this.weight nice we kinda jumped i also need to make sure that when the player lands back on the ground velocity y is reset back to zero to stop all vertical movement i say else this dot velocity y is a zero for this to actually work as intended i need to first run this line of code and then this one and we are jumping velocity y is constantly being added to player's vertical y position at first it's zero so nothing is happening when i press up arrow key i give it a push in the negative direction on the vertical y axis so upwards at that point the player is currently not on the ground so this line of code will start running and velocity y which is currently set to 20 and which is moving the player 20 pixels up per animation frame will start decreasing by this dot weight from line 9 so minus twenty plus one is minus nineteen minus eighteen minus seventeen all the way to zero when we reach velocity y of zero player is at the peak of its jump but it's still not on the ground so this line is still adding weight to velocity y making the player fall down faster and faster when the player hits the ground this else statement will set velocity y back to zero and the jump is finished the ratio between weight and this minus value will determine the curve height and speed of the jump i will keep weight at 1 and i will adjust velocity y to make the player jump all the way to the top of the game area we have run in and jump in i would like to add more player states and properly animate them we need a fireball attack and when the player sits down i want the game to stop scrolling how do we organize and manage this functionality by structuring our javascript code in socalled state design pattern i will show you exactly how to do that in the next part we are building a fastpaced animated side scroll game with vanilla javascript and html canvas in the first episode we created the main game logic animation loop and the player let's continue building our game in this class we will apply state design pattern to our player to make it switch between the states properly we will learn how to control fps how to animate sprite sheets and how to implement multilayered seamless backgrounds with scrolling speed that reacts to player movement part 1 is linked in the video description let's go i like writing my code like this for small simple games as you can see there are quite a lot of if else statements in here already i want to add some special moves this single code block already does so many things and we have just run in and jumping if we keep adding more and more in here we can get to the stage where changing one line of code can break something else unexpectedly for small games it's fine to have all logic in one place like this but for this game we will go ahead and structure our code a little bit better i will manage player states separately in its own file i call it player states js at first i will create a simple enum object that will pair values and names of each state it will help with code readability rather than swap into state 2 i will swap the state.jumping which has a value of 2 behind it it will be easier to see what our code is doing this episode might be a bit challenging for beginners we will be passing values around between javascript modules and classes and i can imagine if you are a beginner it might take some effort to keep track of which values are coming from where i will guide you through all the steps and we will make our code easy to navigate in but this is the finale of my vanilla javascript 2d game development series so i expect you either already watched my beginnerfriendly episode on state management linked in the description or that you have already done some javascript coding before i will explain everything today no previous knowledge is needed but it will be easier if you watch the beginner class first it's up to you today's tutorial is mainly to show you how i put everything together to make a polished animated game that feels good to play check the video description for the full series i create a class i call for example state each state will have its own class so that i can give each state a different entry method to set the player up when it enters that particular state and handle method that will react to different user inputs depending on which state the player is in at that moment in time for example when the player is in the running state and i press arrow down i want to switch to sitting state but when the player is in jumping state and i press arrow down i don't want the player to sit in the air i wanted to do a crushing dive attack from above state design pattern is perfect for changing how the object behaves depending on its current state i will show you exactly what i mean as we write the code constructor will take a single argument called for example state it will be a simple line of text with the name of the state such as sit in runin jump jumping and so on inside i converted that argument to a class property i will use this value only so that i can console the name of the currently active state for debugging purposes it's not important for the logic of state swapping we will have one class for each state the first state will be sitting which will also be special because it will stop the game from scrolling as the player sits down we will export it so export class sitin constructor will take a reference to the player object as an argument so that it can access properties on the player class i am extending a class and i want the code from this constructor on the parent to run as well so i have to call super keyword here the trigger constructor of its parent class also known as a super class we can see that the parent class constructor expects a value for state this is simply for monitoring purposes i will pass it word sitting and it will get converted to this dot state property here only after we called super we can use this keyword here in a child class if we use this keyword before using super we will get an error super on child class always needs to be called before this keyword is used each class will have enter method that will run once when this state is entered and handle input method that will take input as an argument and it will keep checking if the correct key is pressed and it will switch player to a different state when that happens for example it will switch to jumping state when we press up arrow key in player js we will need three helper properties to apply state design pattern let's just write them and i will explain in a minute we will need a property called this dot this.states which is an array of values we will also need this.currentstate which will point to indexes in this array when the player object is initialized for the first time we will call its entry method to activate its initial default state i'm exporting my sitin class here let's import it up here in player.js i import the entire sitting class from playerstate.js quick overview of how we will apply steady design pattern into our code base today player object will have this dot states property which will be an array containing individual states such as sitting running and so on the player can only be in one state at a time so we will have another property here called this dot current state when this.current state is equal to this dot states index 0 player is sitting when it's this dot states index 1 the player is in the running state and so on the final piece of logic will be that each player's state is actually its own class we will have a class for sitin another class for runin there will be a separate class for every state the reason for that is that each state needs to have its own separate enter method that will set speed animation row and everything else that needs to be done whenever the player enters a new state each state class will also have handle update method which will listen for keyboard inputs and it will be ready to switch the player to a different state whenever the correct key is pressed because all state classes have their own enter and handle input method and because this dot current state points to different states as the player switches from one state to another we can just keep calling this.currentstate.handleinput and we will get different behaviors depending on the current state the player is in at that point in time and this is the entire logic behind state design pattern if it's still not clear don't worry i will go over it today step by step as we write the code it will make more sense if you practice and code with me inside this.states array i will instantiate each state class right now i'm creating an instance of sit in class here on line 14 in playerstates.js i can see that it expects a reference to the entire player object as an argument because here we are inside playerclass i pass it this keyword which references this entire player class when we enter sit in state i want to draw a different animation row in player sprite sheet let's set up sprite animation we will have frame x horizontal frame that will cycle from left to right animating the player and we will have frame y which will travel in the sprite sheet vertically whenever we switch to a different state you can see that frame y 0 is standing frame y 1 is jumping and so on changing the values of frame x and frame y will jump by the width and height of a single frame so that we can animate the sprite sheet in draw method i replace hardcoded coordinates 0 0 which are currently displaying this top left frame to dynamic values source x value will be this dot frame x times the width of the player frame source y will be dot frame y times the height of the player frame i'm getting a console error it's because i forgot a forward slash here on line one in player js now it's fixed so now frame x cycles horizontally frame y travels around the sprite sheet vertically i can see that the setting animation is frame y5 when we enter sitting state i take this dot player from line 16 which points towards the player object and i set its frame y property to 5. i could have defined getters and setters on the player object to do this by the book but i don't think it's necessary for our purposes today this code will work well back in player.js i set the initial frame y to 0 which is this standing animation now i need a method that will allow us to switch player between the states i define it down here on the player class i will call it for example set state it will take this new state we are about to switch to as an argument it will be a number corresponding to indexes in this dot states array from line 17. inside i set this.current state from line 19 to one of the states from line 17 depending on which index i passed to it right now we only have one element in the array the sitting state that's index 0. if we have more state classes in the array on line 17 i will be able to swap to index 1 2 and so on to switch player to those states keep in mind set state will take one argument called state which will be a number corresponding to the index in this dot states array then we call enter method on the currently active state to set up things like speed sprite animation and so on there's also handle input method we defined here enter method will run once every time we enter that state handle input method will be running 60 times per second waiting for keys to be pressed so it can switch the player into a different state when the user requests it by pressing the right set of keys in our case mostly arrows so far i will be calling it from inside update method on player class here so this dot current state dot handle input and pass an input value as an argument to the update method here the value of input is coming from update method on game class pointing to keys array on an instance of input handler class from line 15. this way playerupdate method can always see what keys are being pressed in our game by checking if they are present in this input keys array we defined it before here on line 3 in input js if you remember we pass it through game class to update method on player class and i will just pass that argument along to handle input method like this this code will be run in 60 times per second constantly checking what keys are present in input keys array handle input expects keys array here as an argument i called it input and we will be checking and waiting for specific keys to be pressed the main function of state design pattern is that we are basically locking player object in one state at a time and while the player is in a certain state it will only react to a limited number of keyboard inputs while the player is in the sitting state we will react to arrow left and arrow right keys and when they are pressed we will switch into running state so i say if this input value that was passed as an argument which points to this dot keys array on input handler class if that array includes arrow left key or if it includes arrow right key call set state method on player object here we can see that setstate method expects state as an argument and it will set the current state of the player to that index in this dot states array from line 17. right now that array has only one element so it will only work when i pass it index 0 as a value of this state argument here it will then call enter method on that new state we just switched to back to player states js so now we know that we have to pass this set state method a number that will be used as an index in player states array to correctly switch it into that state i can pass it number 0 here but we have this enum object here to convert numbers to words like sitting and running to make our code more readable the order of states in this enum must be exactly the same as the order of states in this dot states array on line 17 inside the player class index 0 is sitting state because it's the first element in the array this enum also needs to have the value of 0 paired with sitting which it does now i can call set state and instead of passing a number 1 which would also work but it would be less readable i pass it states from line 1 dot run in which has a value of 1 behind it as well i hope it's a bit more clear this is the most complicated part and we just covered it just keep coding with me and it will start making more sense right now there is no index one in this array yet we need to create running class to add it i copy this code block and i rename it to run in and i also put a run in here i check the sprite sheet and i can see the fourth row in the sprite sheet is run in so i set frame y to three because we count from zero in handle input on running class we will listen for arrow down and when it's pressed we switch player to the setting state we are exporting running class here i import it up here in player.js and i instantiate it as an element with an index of 1 inside this dot states array nice so now when we are in the sit in state and we press left or right key we switch into the running state when we are in running state we listen for arrow down key and when it's pressed we switch back to the seating state perfect we have all the logic for swapping states in place let's add a jumping state again i copy this code block i rename it to jump in and i put a jump in here i comment outline 31 inside player js that we used for jumping before let's refactor it when we enter jumping state we set frame y to 1. if the player is on ground that method comes from line 39 in player js we set velocity y on the player to 30 pushing it upwards as we discussed in part 1 during a jump velocity y goes from 30 to 0 moving the player upwards and then as it moves into positive numbers the player will start falling down we have a nice falling animation row in our sprite sheet so let's switch the player into falling state when it reaches the peak of its jump instead of listening for key presses we can also check for values of properties on the player when velocity y switches to the positive values and is more than player weight more than one we know the player is falling down at that point so we set state the states dot falling that will point up here so i add fallen in our enum and i give it a value of 3. we have our new jump in state but there is currently no way to enter jumping in our game we can enter it from running state for example when the player is in the running state we already listen for down arrow key we will also be checking for up arrow like this if input includes arrow up while the player is running set state to jump in so value two now i copy jump in state and i rename it to fall in i give it a text value of fallen in here while we are falling we won't be listening for any keys we will just wait for the player to be back on the ground and then we set state to run in we are exporting jumping class on line 46 and falling class on line 62. i import them up here inside player.js then i instantiate both of these classes inside this.states array the order in which you do that is important and it needs to be the same as states enum we have on line 1 inside player states js those indexes have to match you can see i'm importing jump in as index 2 in this dot states array falling is index 3 and here inside enum object jump in has also the value of 2 and falling has a value of 3. it needs the match while we are inside the sitting state we can press arrow left and arrow right and it will switch player into running state while we are inside run in state we can press arrow down to sit or arrow up to jump to keep things simple i can also check for arrow left and arrow right here inside update method because i want the player to be able to move left and right in basically all states when the arrows are pressed the controls feel better that way that means we can move left and right in the air even while we are jumping or falling or rolling when i'm in the running state if i press up arrow key we jump and when we reach the peak of the jump we get automatically swapped into a falling state when we hit the ground we automatically switch into running state great i adjust this minus velocity y value to change the height of the jump well done if you follow the code all the way here now you know how to apply state design pattern which is quite an advanced technique especially if you are a beginner we will add more states to it soon but before we do that let's properly animate the sprite sheet of our dock i want it to animate and move i delete this line of code we will handle sprite animation in this area inside update method on player class we have frame x property which holds the index of horizontal frame we have frame y which refers to the vertical position in the sprite sheet you can see that different rows have different number of frames i want to rotate between frame 0 and max frame on that row depending on which row we currently are on sitting state and running state have different number of frames we will hold that value in this dot max frame property and we will adjust its value every time we swap states since we have our code nicely organized in state design pattern it's easy to do that and to keep track of each state separately let me show you so to animate each row we will always cycle between frame 0 and max frame on that row if frame x is less than max frame increase frame x by 1. else reset frame x back to 0. it's going too fast and it's blinking for sit in state because we are including empty frames it's animating so fast because this particular sprite sheet was designed for lower frame rates it really depends on which art assets you are using but it's also easy to control fps of sprite animation independently of the fps of the entire game i can for example have the docs spreadsheet animate at 10 frames per second while the entire game is still updating at 60fps you can do it by checking animation timestamps and calculating delta time it's easy let me show you i will explain it right now we will need a helper variable here last time we'll hold the value of the timestamp from the previous animation loop request animation frame method has two special features first it automatically adjusts the screen refresh rate so most of us will get 60 animation frames per second unless you have some game in high refresh screen request animation frame also auto generates a timestamp value and it automatically passes it as an argument to the function it calls in our case animate i can assign it a variable name here i will call it timestamp for example so this timestamp is also generated by request animation frame every time it serves a new animation frame every time it loops i will use it to calculate so called delta time delta time is the difference in milliseconds between the timestamp from this animation loop that was passed here and the timestamp from the previous loop it will give us the value of milliseconds for how long each frame stays on the screen before it gets redrawn last time we'll always hold the value of the timestamp from the previous loop so when we used it to calculate delta time we override the last time with the value of timestamp from this loop so that it can be used to calculate delta time in the next loop this might be a bit complicated to understand at first but don't worry it will make more sense as you use it more often for this to work timestamp gets autogenerated only when it's called by request animation frame so for the very first initial call of animate i have to pass it some value for timestamp i will pass it zero i console delta time and i can see that it's around 16.6 milliseconds which is around 1000 milliseconds divided by 60. my frame rate is 60 frames per second perfect yours should be similar the value of delta time calculated this way depends on the power of your computer and on the refresh rate of your screen so as the animation loop runs we are recalculating delta time over and over every time we calculate it we pass it the game update method up here on line 17 i make sure update method expects that argument i want the delta time value to be used inside player class so i pass it along to playerupdate method as the second argument here inside player.js we make sure that it's expected so now the player class has access to delta time value we know how many milliseconds it takes to serve the next frame we can use that value to adjust sprite animation speed for example we can say only serve the next horizontal frame in the sprite sheet every 50 milliseconds or something like that we can get complete control over that frame rate it's simple let me show you how this particular dock sprite sheet works the best when it's been animated at 20 frames per second i will need a number of milliseconds for how long each frame should stay on the screen if the frame rate is 20 frames per second one frame should stay for a thousand milliseconds divided by this dot fps divided by 20. frame timer will cycle between zero and frame interval increasing by delta time for each frame every time it reaches the interval it will trigger the next frame and it will reset we will handle that logic here if this frame timer which starts at 0 is more than frame interval set frame timer back to 0 so it can count again when that happens also serve the next frame x horizontal frame in the sprite sheet else keep increasing frame timer by delta time until we reach that frame interval value perfect now you know how to control fps in the game the sprite sheet of our dock is animating at 20 frames per second you can see it's blinking it's because we are animating this empty frame here for sitting animation max frame isn't 5 so i remove this value when we enter sit in state we set max frame on player class to 4 we count from 0. when max frame is 4 we are not seeing the whole running animation so i set max frame inside running state to 6. i will also swap max frame and frame y to prevent occasional blinking if we swap states too fast in jumping max frame is 6 and falling is also 6. now we are correctly animating each state do you see how it's easier to keep the code organized when we separated each state into its own class occasionally we can get a situation where we swap state and frame x is currently too high and that row doesn't have that many frames so we get a quick blink to prevent that from happening every time we enter a new state we set frame x back to 0 before we swap to a different vertical sprite row with frame y it's just a small thing we have complete control of fps how fast we serve frames in player sprite sheet i can come here and set it to 5. the great thing is that the player still moves at 60 frames per second but the sprites are animating at 5 frames per second we can control these two things separately it would be very bad if controls reacted so slowly but maybe you have a sprite sheet in your game that was designed for lower fps our sprite sheets were designed for speed around 20 fps depending on what art assets you are using for your game level you might not want the player to be standing all the way at the bottom of the game area sometimes you need to adjust this value today i will give you all art assets to use so i know we will need to create some margin on the bottom that margin will have to be considered in more than one place around the code base so let's put it in the main game class so it's easy to access i want the ground level to be 50 pixels from the bottom edge of canvas this dot ground margin is 50. inside player gs we have access to it through this dot game reference so the initial vertical coordinate will be height of the game minus the height of the player minus ground margin like this this will not work because here i am creating player before i declare that class property i need to put it up here so it's available at the point when the player is created that worked i also need to adjust this on ground check because being on ground now also involves this ground margin perfect you can adjust ground margin value to match the environment in which your character is currently moving in our environment will be an abandoned monochrome city you can download all art assets in the video description if you are a beginner i suggest you use my art assigns first and get the game to work before you start adjusting it to your own version it will save you a lot of headache if you encounter some unexpected challenges because you can just look at my code to fix it we will be animating a parallax multilayered background i made a special episode about this if you want to go more in depth at a beginnerfriendly pace we build a small standalone project in there showing all the concepts and alternative approaches let's use the quickest version here so we have a new file i called background.js i will need two classes here helper layer class that will handle logic for each state separately and main wrapper class i will call for example background that will be exported and animated from the main game class it's actually quite simple let me show you layer class will need access to the game object because we need to be constantly aware of width and height of the available game area we will also need the width and height of the actual background image we will need speed modifier argument because each layer will move at a different speed but relative to the current game speed the last argument will be an image each layer will have a different image all five images are available to download in the video description i might also include some alternative art assets in there for experiments later as usual we convert the arguments that are passed to layer class constructor into class properties each layer will also need x and y position update method to move it and draw method to draw it on canvas you know how it goes now i try to keep similar code structure across all classes for clarity i could also name these methods something else if i wanted to the background images we used today are seamless which means that when they are scrolling from left to right continuously we can't see where they end and where they begin there is a small simple trick to create an illusion of endless background in a side scroller game and we are about to learn it right now click like if you are getting any value today we will be updating horizontal x coordinate vertical y coordinate will always be zero if this dot x is less than minus its entire width which means it has scrolled all the way behind the left edge of the game area and now is hidden reset it back to 0 so it can scroll again else keep decreasing x by the current game speed times speed modifier because i want each layer to move at a slightly different speed for parallax effect gamespeed doesn't actually exist yet so i declare it here on line 15 inside main js let's set it to 3 pixels per frame for example draw method will need context as an argument to specify which canvas element we want to draw on we call builtin canvas a draw image method again this time we don't need the longest version with nine arguments for backgrounds we just need to pass it five arguments image we want to draw x and y where to draw it and width and height of that image so this is a helper class that will handle logic for each individual layer our parallax background will have five layers we create and combine them together in another class i call for example background and i will be exporting that class it will need access to the main game class because we need its width and height and gamespeed properties i'm providing new images of a specific size for this project the width of each layer image is 1667 pixels and height is set to 500 pixels i made those images the exact size we will draw on canvas for performance optimization reasons you can also use larger images and you can scale them down with code but that will take more computing power and it can affect the fps of your game let's bring all 5 images for our layers into the project this dot layer 5 image is equal to layer 5. if you downloaded the project images and place them inside your assets folder you can go ahead and inside index.html bring them into the project image element with an id of layer 5 and source assets slash layer 5 dot png i also bring layer 1 2 3 4 5 like this in style css i give all of them display none we don't want to draw the actual image elements on the website we want to draw them on canvas as i said before javascript automatically creates references to all elements with an id in the global namespace so i can just pull the images in using its autogenerated variable name like this it would work like this but i noticed more people are comfortable using get element by id in here so i will do that we will also need an array that will hold all background layers so i created here and here inside background class constructor i will create an instance of layer class from line 1. i call it for example this dot layer 1 and it will be equal to new layer you can see it expects 5 arguments so i pass it this dot game this dot width distort height speed modifier will be 1 for now and the image will be this.layer 5 image from line 25. now we have one instance of our layer class let's put it inside background layers array i give it update method and inside i take that background layers array and i call for each array method on it for each layer object in the array i call its associated update method i also do the same for draw method and i pass it context because we know it expects it up here on line 15. let's see if it works i import the new background class up here in main.js i instantiate it inside game class constructor and i pass it this keyword as a reference to the entire game object because i know it expects it here i have my background now so i can call its update method i get an error we will fix that in a second i will also call draw method on the background and i call it before i draw the player because i want the background to be behind the player and i pass it context so we have an error somewhere inside our background class the first typo i made here probably already noticed i need to use this dot here to correctly point to the instance of layer class now we get draw image error so i know something is wrong with the way i'm linking my image if i check here i can see i misspelled the name it's supposed to say this dot layer 5 image nice we are animating our background layer i can adjust ground margin to move the player a bit up to match the background artwork the trick to create seamlessly scrolling backgrounds is to draw the same image twice next to each other so one at the position x and the other at the position x plus this dot with like this i give it additional plus 20 so that we can see where the second one starts here so what is happening here we have two identical images scrolling side by side when the main image one scrolls all the way off screen we quickly reset it so that it can scroll again image 2 is never fully visible it's just there to fill the left gap before the first image has a chance to reset i hope this visual makes it clear what's happening and now you know the secret of endlessly scrolling seamless backgrounds it's easy let's make them parallax which means it has multiple layers that move in slightly different speeds to create an illusion of depth of distance i already brought those images into our project in index html so i just turned them into class properties here i instantiate each layer class with its associated image i put all those layer objects inside this dot background layers array so we can cycle through all of them at once using for each method inside update and draw now we are animating all layers at the same speed i can give them different modifiers layer 1 is just gray sky no need to move it at all so its speed will be 0. the speed of layer 2 will be game speed times 0.2 layer 3 is game speed x 0.4 layer 4 will move at 80 percent of the current game speed and layer 1 will move at the same speed as the actual current game speed perfect you can see that if i change the modifier even higher it gives us faster scrolling since we connected everything to the current game speed i can change the scrolling speed of the game when the player switches to a different state maybe i want the game to stop scrolling when the player sits down and i want double scrolling speed when the player does a special attack or a role there are many ways how we can structure the code at this point i can either bring a reference to the main game object into player states so that we can manipulate game speed property from there or i can for example do it from within set state method on player class because from there we already have access to game speed i will give set state a second argument called speed inside i set speed property on game object to the speed value passed as an argument at first the speed of the game is 3 pixels per frame since we start in the sitting state the initial game speed should be zero in player set state whenever i set state i will also set game speed i might refactor this later maybe it's not the best solution but it should work let's see when we are running game speed will be one in game speed 0 jump in game speed is 1 falling also 1 run in 1 i save all unsaved changes in all my files now the game stops scrolling when we sit and it starts scrolling again when we start moving we can refactor this to make this code a bit better on the game class i create a new property called this.max speed and i set it to 3. i set this dot speed to 0 at first inside set state we set the current speed to max speed times the speed that was passed to set state that way i can adjust the actual game speed by adjusting just the max speed property on the main game class rather than adjusting the values we passed the set state in all those places in playerstate.js now we have quite a lot of logic going on if you are a beginner well done you should be really proud of yourself if you managed to follow along this was the most complicated episode in this entire project the rest will be relatively easy when you understand the tips and tricks i'm about to reveal it's important that player feels like they have control over the character quick responsive controls add a lot towards positive user experience we are building a fastpaced animated 2d game with plain vanilla javascript and html canvas element we applied state design pattern to animate our player we have endlessly scrolling parallax backgrounds where scrolling speed reacts to player movement today we will learn how to make our game more fun by adding three very different enemy types are you ready to take our dog for an adventure and help it find its way home while avoiding enemies and creatures of the dark let's go i create a new file called enemies.js and inside we declare a custom javascript class i call for example enemy i will have a constructor and inside i declare this dot frame x which will handle horizontal sprite sheet navigation and frame y will navigate in sprite sheet vertically the sprite sheets we will be using are optimized for 20 frames per second so we will control them with timestamps and delta time again so three helper variables fps frame interval and frame timer it will work exactly the same as it did in player class we will also need update method to move enemies around and draw method to actually draw their sprite sheets i want to create multiple different enemy types to keep our code organized and easy to navigate in we will use javascript sub glassine which means we will have a parent anime class that will define properties and methods shared between all enemy types and we will extend that parent class into multiple different subclasses each subclass will have properties and methods behaviors that are specific just for that enemy type so anime is socalled parent class also called a super class and we are using this special extends keyword to create three child classes also called subglasses javascript actually doesn't have classes this is just syntactical sugar modern cleaned and simplified javascript syntax behind the scenes this code is just setting up prototype chains using javascript inheritance it just looks cleaner and easier to navigate in if you write your code this way so we have a parent anime class and three child classes called flying enemy ground enemy and climbing enemy all three child classes are using extends keyword pointing towards their parent anime class this will automatically set up prototype chain behind the scenes and all these classes will have access to properties on their parent class and also to this update and draw method that way we can avoid code repetition and we don't have to redeclare methods and properties that are shared across all enemy types inside each subclass we will only define what's unique about them i will show you exactly how this works as we create three unique enemy types with very different behaviors and movement click the like if you are getting any value let's start by bringing images into our project in the video description i will give you sprite sheets for many different enemy types for now we will use just three of them if you are a beginner you should maybe use the same ones i'm using and when you have a fully working code base you can play with it and use your own custom sprite sheets we will use enemyfly enemyplant and this big spider i will hide images with css because we want to draw them with javascript on canvas there is one more thing we have to understand when extending javascript classes there is a special keyword called super it's used in two different ways because we can extend code from parent class constructor or we can extend a method from the parent class i will show you how to do both as we create different enemy types with different behaviors i have flying enemy subclass that extends this enemy super class when i create a new flying enemy i want to run all this code from parent class constructor and then i want to add some additional properties that are specific only to the flying enemy i do that by first calling super like this this will automatically run all the code from here while extending classes i can only use this keyword after i used super if i use this keyword before super i will get an error flying enemies will need access to the entire game object because they need to be aware of game area width and height so that they know when they are off screen i will pass game as an argument to the constructor here and i will convert it into a class property as usual each enemy type will also need width and height but because each enemy type has a different size i couldn't put these values on the parent class width and height will be declared here i look at my fly sprite sheet and i can see that the width of a single frame is 60 pixels and the height is 44 pixels each enemy will also need starting x and y coordinates flying anime will start at a different position than a ground nma so x and y properties will also have to be on the child class not on the parent class speed x will be horizontal speed and max frame on our fly sprite sheet is 5. by the way all my flying enemies will be flies for now but i could also have multiple flying enemy types i can have flying anime class that extends parent enemy class and i can have a bird fly and ghost classes that extend flying enemy class we can go down multiple levels if we want to in that scenario flying enemy class would only have properties and methods shared between all enemy flyers and things like width and height speed x or max frame would be declared separately on each subclass because each anime will have different sprite sheet we are keeping our code modular and well organized so that it's easy to make these changes later if we want to inside update method on the parent class we will handle movement for every animation frame i want the horizontal xcoordinate of the enemy to be increased by its speed x property i will do the same for vertical ycoordinate and speed y property we will also handle cycling through sprite frames here it will work exactly the same as it does for our player sprite sheet update method will have access to delta time difference in milliseconds between the previous and the current animation frame if frame timer from line 7 is more than frame interval from line 6 we reset frame timer back to 0 so it can count again for the next frame and we serve the next horizontal frame in the sprite sheet or if we are at the last horizontal frame we reset back to frame x 0. else meaning frame timer is not yet higher than frame interval we keep increasing frame timer by delta time until it gets there draw method will expect context as an argument inside we will draw an enemy spreadsheet using canvas drawimage method it will need 9 arguments the first argument is the image we want to draw i will hold the reference to that image in this.image property since each anime type will have a different sprite sheet it needs to be placed here on flying enemy class i use get element by id and i will point it towards this img element with an id of anime underscore fly from line 19 in index html so draw image expects nine arguments in this case the image we want to draw source x source y source width and source height of the rectangle we want to crop out from the source sprite sheet one frame and destination x destination y destination width and destination height to specify where to place that image on destination canvas it will work exactly the same as it does with player we already explained before how frame x multiplied by the width of a single frame travels spreadsheet horizontally source y argument will always be zero because enemy sprites will only have one row so we have image to draw these four values define what to crop out these four values define where to place that cropped out image on canvas as i said before we can extend parent class constructor using super keyword we can also extend a method from a parent class in this case i want to have update method on flying anime type i wanted to first run all the code from update method on the parent class and then i want to add a little bit of code that will be specific only for flying enemies update method will expect delta time as an argument i will call update method on the parent class from line 9 by saying super referring to its super class dot update and i pass this delta time along because it's expected here on line 9. doing that will first run all the code between lines 9 and 19 that code will be shared for all enemy types after i run that code i will add a little bit of code that will be specific only for flyers i can make them do so many different things here i made a special episode focusing only on enemy movement patterns before let's just pick one maybe i want vertical wavy movement before we do that let's actually add some enemies into the game to see how the movement changes let's make sure we are exporting all our child classes i imported them up here inside main.js i want to periodically run some code that will add enemies in a specific interval i will declare that code in a special method on game class i call it for example add enemy we will need some helper properties to build this functionality this dot enemies will be an array it will hold all currently active anime objects every time add enemy method runs it will take this array and it will use builtin javascript push method to push one new enemy in there push method adds one or more elements to the end of an array and returns the new length of the array we want to push one new flying enemy in there for now we are importing flying enemy class here from enemies.js and here i can see flying enemy class constructor expects game as an argument so down here in main.js i'm creating an instance of flying enemy class and i pass it this keyword as an argument referring to this main game object we will handle enemies here in sight update method on game class similar to how we use delta time to periodically serve the next frame in our sprite sheet we will have timer and interval helper variables to periodically add enemies into the game enemy timer will start at zero it will be increasing by delta time every time it reaches a value in enemy interval we will add one new enemy into the game and we will reset enemy timer back to zero let's say i want to add a new enemy every second so thousand milliseconds let's write that logic in code if enemy timer from line 23 is more than enemy interval from line 24 call this dot at nme custom method from line 38 and also reset enemy timer back to zero so it can count again towards the next enemy time else keep increasing enemy timer by delta time until we reach enemy interval again let's put a console lock inside add anime to see if it's working i will console lock this.enemies array from line 22. nice you can see as the game runs every second one new flying enemy object is added into enemies array perfect so all our enemies are held inside this dot enemies array i will run through the array and i will trigger their update method to make sure they move around for each method execute a provided function once for each array element i will use fat arrow es6 syntax here in the callback function i just trigger update method on each enemy object and i pass it the delta time from here because i know it's expected there i will do the same thing inside the draw method i will cycle through all enemy objects and i will trigger their draw method i pass it context as an argument i don't see any enemies coming let's try to use minus equals here to make them move to the left still nothing i'm consoling enemies array so let's check the console i open up the array let's change the initial x and y coordinates to 50 50 now if i open the array again and i check one of my flying enemies i can see their vertical y coordinate is none not a number javascript doesn't know where to draw them vertically let's track the problem i define vertical ycoordinate correctly on line 33 but as the game runs i'm increasing it by speed y property here on line 12. speed y doesn't exist so as a result we are breaking our code i will define vertical speed y property on my flying enemy class let's set it to zero nice we have enemy flies moving from right to left from the initial starting coordinates 50 50 as defined here i actually want them to start from the point just behind the right edge of available game area so the initial x coordinate will be this dot game from line 29 dot width nice i randomize vertical y coordinate to spread them around i want them to only move in the upper half of the game area so master random times this.game.height times 0.5 in console you can see we have an endlessly increasing array as more and more enemies are being added i actually want them to be removed when they fly past the left edge of screen i will check if enemies are off screen in this area if horizontal coordinate of the enemy plus its width is less than zero meaning it's completely hidden behind the left edge set its marked for deletion property to true this property will be shared for all child classes so i can define it only once up here on the parent class initially i set it to false so we are adding new enemies they fly from right to left when they are hidden behind the left edge we are setting their marked for deletion property to true here inside update method on game class in the area where we handle enemies we are cycling through every object in enemies array triggering their update method at the same time i will also check if their marked for deletion is true and if it is we splice it out of the array removing it splice method needs two arguments in this case index of the element we want to remove from the array so index off this enemy with marked for deletion set to true and how many elements to remove at that index we want to remove only one element now i check in the console and i see that new enemies are being added and old enemies are being correctly removed perfect let's play with the movement a little bit i can do so many things here and there's a special episode about it i can't for example randomize their horizontal speed x value so that each enemy flies at a slightly different speed let's try a random value between 1 and 2 pixels per frame i can also randomize their initial xcoordinate so that we get even more randomness in their spacing when the player starts running it becomes obvious we need to account for the current game speed when making enemies move up here on line 12 i just include game speed in horizontal position calculation i actually need to use plus here now when the player moves and when it stops moving the enemies are always positioned correctly in relation to our dynamically scrolling game world we made a lot of progress today if you are still following well done these are all fundamentals of 2d game development i hope you are getting some value out of this so the flies are moving in a straight line from right to left what if i want to give them a wavy up and down wobble as they move it's easy i will need two helper variables and these will be specific only for flying enemies so i declare them down here angle will start at 0 and we will be increasing it slowly and feeding it to mastered sine method which will map it along a sine wave it will be increasing by this custom va value velocity of angle and it will be a random value between 0.1 and 0.2 inside update method on flying anime class i first trigger all the code from the parent anime class and i will add some extra custom code that will be specific only for flying enemies for every animation frame i will increase angle by va value and then i update vertical y coordinate by math.sine of this ever increasing angle value passing a slowly increasing angle to method sign will map positions of our enemies long sine wave we can also create a circular movement by using math cosine on horizontal xcoordinate for now let's leave it like this we have our flying enemy type perfect let's create a ground enemy it will be applied so it will have different behavior it will be much simpler to implement let me show you class ground anime extends enemy so again this class will automatically inherit everything from the parent anime class we declared up top the only properties we will declare here are the ones that are specific to ground enemies shared properties will be inherited automatically because of this extends keyword constructor will expect the game as an argument and we convert it to this dot game property the width of a single frame is 60 height is 87 pixels initial x is just behind the right edge of canvas so this.game.with we want the enemy to be sitting on the ground level of our game world so vertical ycoordinate will be game height minus height of this enemy minus ground margin image will point towards anime plant image from index html horizontal speed will be zero and vertical speed will be also zero this is a plant it won't move around sprite sheet is very simple it has only two frames max frame is one because we count from zero if i don't declare update and draw methods at all on ground enemy class javascript will automatically travel up the prototype chain and it will find update and draw method on the parent anime class in main.js inside add anime function we only want to be adding ground enemies when we are moving if we are sitting down we don't want the game to keep adding new ground enemies because they would just be accumulating off screen we only want to add a new enemy if game speed is more than zero when the game is scrolling and also i don't really want to add it every thousand milliseconds every time add anime method runs i only want there to be a 50 chance that we add one so math at random is less than 0.5 master random code like this returns a random value between 0 and 1 so a value lower than 0.5 should occur on average 50 percent of the time so every time add enemy method runs we always add one flying enemy and if the game is scrolling and this 50 check is true we also add one new ground enemy i get an error which tells me i forgot to call super class constructor on my subclass easy to fix like this nice we have a ground enemy in our game i can see there is a small wobble between enemy planes and the ground texture i'm not really sure what's causing it now if you know let me know in the comments we will fix this later let's add a climbing enemy climbing anime will be a big spider suspended from a web i showed you how to extend update method to make our flies move in a different pattern i also showed you how it works when you don't need to declare any additional update and draw methods with the plant now i will show you how to extend the draw method and how to add some additional graphics in this case spiderwebs constructor will expect game as an argument we call super the trigger class constructor from the parent enemy class this.game is game as usual width of a single frame is 120 height is 144 pixels the initial starting coordinate is behind the right edge of canvas so this.game.wav vertical y coordinate will be a random position in the top half of the available game area image will point to the big spider image we linked earlier in index html horizontal speed x will be zero our spiders will be moving up and down vertically vertical speed y will be either plus one or minus one depending on this math random check this is so called ternary operator we are using it as a simple one line if else statement if math at random is less than 0.5 which should be roughly in 50 of cases set speed y to 1. else set it to 1 so if condition is true question mark return this else colon return this this will make sure some spiders are moving up some are moving down when they initially spawn in our game max frame of spider sprite sheet is 5. update method will take delta time as an argument it will first call update method on its parent anime class to run all the code from there we will also do the same thing for draw method like this here i'm checking if game speed is more than 0 and if random check is less than 0.5 and i'm adding a new ground enemy i'm going to add else if here and if this random check is false and at the same time if game speed is more than zero we will add one new climbing enemy into our game now every second we always get one fly and we get either one spider or one plant nice i'm extending update method on climbing enemy because i want to climb up and down when it's moving down and it reaches a bottom boundary we define here i want it to kinda bounce and start moving in the opposite direction upwards let's make it move upwards whenever it climbs all the way down and touches the ground level so if vertical y coordinate is more than game dot height minus height of this spider enemy minus ground margin set its vertical speed to its minus value so this.speed times 1 also i want to set its marked for deletion to true if it climbs off screen vertically so if this dot y is less than minus height of the spider sprite sheet set it's marked for deletion to true this spider spawned moving up this one is moving down when it reaches ground it bounces and it starts moving back up perfect we are also extending a draw method so let's draw a spider web spiders don't fly they should be hanging from a spider web we are calling draw method on the parent anime class that will handle drawing of the actual spider sprite sheet and we will add some extra code here just to draw the spider web i want to create a line so i start by calling begin path move method will set the initial x and y coordinates of the line i give it coordinates 0 0 for now the top left corner of canvas line 2 will define the ending x and y coordinates so i pass it spider's current x position as x and 0 as vertical y now i can stroke my line i don't see any line right i need to use this dot y here to move it on screen and here's our spider web it works let's make it look better i wanted to start from this dot x and 0 so just above the spider nice so it goes from the top left corner of spider sprite sheet upwards i need to center it horizontally so plus the width of the spider divided by 2 and i increase y by 50 to actually touch the spider image almost there i just need to also offset the initial starting point of the line like this i'm happy with this if you are designing a game with multiple levels you can for example have a different flyer different ground enemy and different climbing enemy for each level so three enemy types like this could be enough depending on your game structure also it's possible to put many more enemy types into the game and mix them together it's up to you i gave you all the tools you need if you have any questions let me know we will learn how to handle collision detection next time we will also apply particle effects to give the player a fire trail and we will add two more states with unique animations for when the player is attacking and when it gets hit well done on completing the lesson see you in the next one we created a player we have our game world and we added dangerous creatures of the night it's time to add some interactions and special moves today we will learn an easy way how to handle collision detection and we will resolve collision between player and enemies in two different ways depending on the current player state if the player is rolling enemies are destroyed and we get score points in any other state it's the player who receives a hit we will also add dust particles and fire trail if you followed any of my other creative courses you can also use those animated trails and use them here like you see in this demo i like to combine game dev and creative coding with javascript and html canvas it's all the same set of techniques let's go we have player and enemies in our game we want them to be able to interact in different ways with each other let's apply collision detection first i want to draw a rectangle around the player and around each enemy to see their collision areas so called hitboxes i go to input js file and i delete these console logs i want our game to have a debug mode when i press letter d on my keyboard we enable debug mode and collision hitboxes will be drawn when we press the again we exit debug mode and hitboxes will be hidden it's very simple to implement in keydown event i create an else if statement if e.k is d set debug property on the main game object to its opposite value if it's currently true set it to false if it's false set it to true in main.js i created this.debug property on game class and initially i set it to true in draw method on playerclass before i draw the player's spritesheet i say if this.game.debug is true draw a rectangle around the player this rectangle will be exactly the size of player's hitbox so from this.xdist.y player's coordinates to player's width and height like this now i can go back to input js here we are toggling debug mode on and off by pressing letter d for this to work i need to bring a reference to the main game object here i pass gameobject as an argument to the class constructor and i convert it to a class property from here we can point to the game object and toggle debug mode on and off finally we know that input handler class expects game as an argument so here on the main game class i passed this as an argument now when i press letter d on my keyboard we are toggling debug mode on and off perfect i can also create hitboxes around enemies inside the draw method on anime class i say if this.game.debug is true stroke rectangle around the enemy like this this will work reference to the game object is not on the main parent enemy class but we have it down here on each enemy type separately our game now has a debug mode you can toggle it on and off by pressing d these hit boxes represent collision areas when the player hitbox touches any of the enemy hitboxes i want them to interact in some way we can have multiple different interactions today i will show you how to have two different interactions when the player collides with an enemy while in rolling state it will destroy that enemy and we get some score points if the player is not rolling it will get hit and it will stop its movement for a moment and play dizzy animation from our sprite sheet we will use a simple collision detection formula between two rectangles to check if player and enemies interact here inside the player class i create a new helper method i call for example check collisions inside we will cycle through enemies array that holds all currently active enemy objects and as we cycle through them one by one we will compare their x y width and height to the current x y width and height of the player object so this dot game dot enemies each and for each anime object i will run the following callback function we will have a simple if else statement if some conditions are met collision is detected else there is no collision to check if two rectangles collide which means they touch or they overlap we have to compare their x y width and height keep in mind that the way images our sprite sheets are drawn on canvas we go from their x and y coordinates from the top left corner of the image to their width and height like this so now player's current horizontal x position is here and vertical y position is here for example we need to check if xcoordinate of this enemy is less than xcoordinate of the player plus player with if this point is less or to the left on the horizontal xaxis from this point at the same time we check if xcoordinate of the enemy plus the width of the enemy is more than the current xcoordinate of the player if this point is to the right of this point if these two conditions are true we know that the player and enemy are colliding horizontally we still don't know if they collide because they could be far away from each other vertically we will need two more checks here we check if the enemy's current vertical y position is less than vertical position of the player plus player's height we check if this point is above this point and finally we check if enemy's y position plus its height is more than y position of the player if this point is below this point only if all four of these conditions are true player and enemy are colliding even if one of these is false this entire if statement will evaluate to false and we know there is no collision if we collide we will set marked for deletion property on that enemy object the true i will also add one more score point so this.game.score plus plus i save changes and in main js i need to create this dot score property and initially i set it to zero now i go back to player js i take our new check collisions method and i'll be constantly calling it over and over from up here inside the update method like this and we have interactions in our game whenever the player hitbox touches a hitbox of any enemy that enemy gets deleted perfect whenever we destroy an enemy we are also increasing our score but we can't see it yet let's create some ui elements i create a new file called uijs inside i create a custom class i call for example ui and i will be exporting it be careful about lowercase and uppercase letters with the word ui make sure you spell it the same across our code base constructor will need a reference to the main game object because that's where the current score value is stored i create a property called font size and i set it to 30 pixels for example font family will be helvetica you can also use any google fonts here just link them in index html and use their font family name here if you want to it will work this ui class will have just one method i call for example draw its job will be to draw all ui elements and game statuses that we need first i declare some basic settings context.font will be this dot font size plus pixels space plus this dot font family in this part we will declare code that's specific to drawing score up here some more global settings text align will be left and fill style for all fonts will be kept on the main game object in case we need to draw fonts from some other modules as well this.game.font color it doesn't exist yet so i declare it here online 27 in main.js file to draw score i call built in fill text method and i pass it some text we want to draw so score colon space plus this.game.score that's a variable from line 26 in main.js and i want it to be drawn at coordinates 2050. we are exporting our new ui class up here so we can import it to main.js like this i will instantiate ui class inside game class constructor as usual and i pass it the reference to the main game object so this keyword inside the draw method on game class i take this dot ui property that holds an instance of our new ui class be careful about capital letters here and i call it the draw method and i pass it context perfect we are drawing score and it's increasing as we collide with enemies so this is how i like to handle drawing game text and statuses if we want to display more information to the user we can just add more code inside the draw method on our new ui class we are keeping our code modular and organized today it's easy to expand it later i want to add more player states we will have two different attacks and a separate state that will play dizzy animation when the player gets hit by an enemy let's go ahead and add them up here inside player states jazz into our enum object that holds key value pairs and it assigns each state number a more human readable value we will have rolling state with index 4 diving state with index 5 and hit state with index 6 for when the player gets hit i copy this entire code block and i rename it to rolling i will also put rolling in all caps here i check my sprite sheet and i can see that rolling animation is on the row 6 counting from 0 so frame y is 6. i want player to start rolling when we press enter and i want it to keep rolling as long as enter key is pressed down inside handle input we deal with switching states we only want to switch player to a different state when enter is not pressed anymore so if input doesn't include enter and at the same time if player is currently on ground we can exit rolling state and switch the player into running state else if input doesn't include enter and player is not on ground if we stop drawing in the air switch into the falling state like this we have a rolling state now we can decide from which states we will allow the player to enter rolling in this case i will allow it from all states because player can start rolling anytime inside handle input method on sitting class i say else if input includes enter set state to rolling and pass it speed of 2. rolling will increase the scrolling speed of our game compared to the regular running speed i take this else statement and i paste it down here inside the running class we can also start rolling when we are running i do the same in jumping class we can also start rolling while we are in the middle of a jump for now i will not allow player to start rolling while it's falling let's see how that feels we can always add it later so now we have rolling with a value of 4 up here inside our enum and we are exporting rolling class on line 94. on line 1 in player js i import rolling and i create an instance of it inside this.states array on line 21. i get an error it's because i didn't save changes i made to playerstate.js vs code editor indicates that you have unsaved changes in a file with this little icon here i go in i save it and now i can press enter and i can roll around nice work i can start rolling from running state from sitting state and from jumping state i'm testing my gameplay and i feel like i would like to start in while i'm rolling on the ground like this but the game won't allow me to do that i can't enter jump while rolling on the ground because we didn't write that behavior let's do it in handle input method on rolling class i say if input includes enter which means we are rolling and if input also includes arrow up at the same time remember that our input keys array can hold multiple keys at the same time if enter and arrow up are pressed at the same time and if we are rolling on the ground at that moment so this dot player on ground is true we will push player up in the negative direction on the vertical y axis this dot player velocity y minus equals 27 now i can roll around and i can jump up and down like this this feels much better to play this is a superhero dog i want the controls and movement to feel good and quick this dog can roll and jump around freely and the controls are very precise time to add some particle effects we will have three different particle types in this game dust that comes from the ground at player's feet when it runs on solid ground blazing fire trail when the player is rolling and diving and a big splash of particles when we dive and stomp into the ground i create a new file i call for example particles.js inside we will have the main parent class called particle i will not be exporting it it will just contain properties and methods shared between all three particle types constructor will need a reference to the main game object marked for deletion will be false at first update method will also have some code shared between all particle types horizontal xcoordinate will decrease by the amount of speed x and the game speed like this vertical y coordinate will be affected by speed y property for every frame the size of each particle will decrease by 5 when size is less than 0.5 pixels the particle is small enough and we will set its marked for deletion property to true values like speed x and size don't exist yet i didn't declare them on the main particle class because they will have different values for each particle type we need to make sure we define them on the child classes because if javascript can't find these properties when update method runs we will get an error so child class i call dust extends parent particle class we will be exporting it we will also have splash particles for when we hit the ground at high speed and fire particles for the attack animations i start with the dust class constructor will need a reference to the main game object and x and y coordinates because the location of the particle will depend on the player's current position we want them to appear under the player as it moves around i call super and pass this game along because it's expected up here this will trigger class constructor on the parent particle class activating all shared properties size of dust particles will be a random number between 10 and 20. xcoordinate will be x that is passed as an argument same goes for the ycoordinate horizontal speed x will be a random number between 0 and 1. vertical speed y is also a random number between 0 and 1. color will be black draw method will take context as an argument as usual i want to draw dust particles as circles so we start with begin path we create an arc add coordinates this dot x distort y with a radius of this dot size start angle will be zero and angle is mothered by times two so full circle we set fill style to this dot color and we fill the path with black color we are exporting dust so i will import it up here on line 1 in player states js since we are using state design pattern it makes sense we control particles from here as well because they will be closely tied to player states i have a problem now if i want to handle particles from here this way i need access to the main game object when i initially built this state management code i thought i would only need access to the player class but we need to go one level up and access the game object this is why it's good to plan your code bases well before you start writing the code i will have to do a little bit of refactoring here to make sure we have access to the main game class from within each individual player state class here on line 14 i pass the main state parent class a second argument called game and inside i convert it to class property this.game equals game i want to replace all references to the player object with references to the game object game object contains the player so i will still have access to the player object from there constructor on the sitting class will expect the game as an argument we delete this line with player i pass that game object reference along to the parent class constructor as a second argument because i know it's expected here on line 14. it will get converted to this.gameclass property now if i want to access player in these 5 places i need to say this.game.player in vs code you can highlight a portion of text and hold ctrl key down then whenever you tap letter d it will highlight another occurrence of that text using this you can select multiple lines at the same time i tab d four times to select all five occurrences of this text and that gives me multicursor selection i can use left and right arrows to move around and i just type game dot i do the same in the running class i pass it game i remove this player line and i pass game as the second argument to the superclass constructor then i select one two three four five six and i need this.game.player here in all these places i do the same in jumping class refactoring sorry i should have planned this part better we are almost done i replace all 9 occurrences of this dot player here with this dot the game dot player falling class doesn't have much code so this one is easy and rolling class is the last one we need to refactor one two three four five six seven eight nine and this.game.player if i save this it will break our code because our state classes are expecting game as an argument now so on line 21 in player.js we are currently passing this keyword which means player object i need to pass this.game from line 5 instead to all of them now we are getting some new errors and that's because i'm passing game object as an argument and immediately i'm triggering that state class and its enter method but at this point the game object is not yet completely loaded so the initial state is failing i need to cut these two lines of code and i only want to run them when the rest of the game object is ready so add the end here when everything is ready including game class player class and all state classes we take current state property on player class and we set it to states 0 sit in state and we trigger enter method on the sitting state we refactored our code and now everything is working again we are well positioned to start adding particles through our state classes we have a lot of console logs here i press ctrl f and i search for console i delete this one on line 61 in main.js and this one on line 65 we also have a console lock on line 57 in player js i delete it debugging is better with a clean console so we are exporting dust class here and we are importing it up here in player states js i will hold all currently active particles in an array on the main game object so i created here these two particles will be an empty array at first back to player stage gs i only want to add dust when the player is running so inside handle input method on running state that runs 60 times per second i will be pushing one new particle in every time it runs this.game.particles.push and i pass it new dust on line 14 in particles.js i can see that the dust class constructor expects game x and y as arguments so i pass it this dot game from line 16 i will also be passing the current x and y coordinates of the player because i want the new particles to appear at player's current position i close some of these javascript files for now to keep our workplace clean inside update method on the game class after this block that handles enemies we write our code to handle particles on line 25 we have this dot particles array that holds all currently active particle objects we are pushing new dust particles in here from inside running state class i take that array and i call for each for each particle in the array i will call their update method if particle is small enough and its marked for deletion property has been set to true we call splice method to remove it splice method will need index of the particle we want to remove and how many elements to remove starting from that index for each method passes autogenerated index argument so i can just assign it to a variable name here i call it for example index and i pass it the splice to identify the particle to remove and i want to remove one element at this index so here we call update on all active particles and we delete old ones inside the draw method i will cycle through all the particles again and i will call draw method one optimization tip here would be not to cycle through the same array once in update and once in draw method i can for example have a utility handle particles function that does all of that there are many ways to refactor this code we might do it later for now this code will work well you can see we are drawing our dust particles from the top left corner of the player hitbox only when we are in a running state nice i will count lock this.particles array to check if old particles are being correctly removed we don't want to have an endlessly growing array in our project that would become a performance problem soon in console i can see that particles go up to 50 or 60 and when we stop running the array is getting smaller and smaller until it's empty again perfect i want the dust particles to come from a different point relative to the player i adjust horizontal xcoordinate by the half of player's width like this i will also adjust vertical y coordinate by player's height pushing the particle's initial coordinates down closer to the game level ground you can see how well this works in combination with state design pattern we are only adding new particles when in running state when players feet are moving and touching the ground i can go to my dust class and play with properties of the dust i can make the particles different shape or size here if i want to i can also give them a different color red blue it will all work i can also do a semitransparent color using rgba color declaration like this i'm happy with this but feel free to play with the code and adjust these effects i came up with two different versions to animate fire for this game i showed you both versions this is the version with svg filters where we are blurring and sharpening particles to create this liquid smoke effect i use this a lot in my generative art videos you could actually look at any of my creative coding videos where we build trails and use that code to give your player a unique trail effect it will be compatible with everything today i will do something i haven't showed you how to do before i will use a particle image it will be this simple flame texture canvas is very good and efficient at drawing images drawing a rectangle or an image are often two most performance efficient options for an effect like this from my experience you can download the fire texture in the video description the texture is big i will probably make the image smaller before i give it to you for download you can also color shift the image in photoshop to create blue or red fire trail if it fits your level art assets i set its display to none with css we will use this image here for our fire class constructor will expect game x and y as arguments this.image will be this fire texture image i gave it an id of fire size will be a random value between 50 and 150 pixels x will be passed as an argument and same goes for y horizontal speed will be 1 pixel per frame and vertical speed will also be 1 pixel we have update method on the parent particle class i will first call the code from here so update super update like this draw method will take context as an argument and it will call draw image i pass it this dot image from line 39 this dot x this dot y this dot size as width and this dot size as a height nice so this is our fire class we are exporting it so i can import it on line 1 in player states js i can copy this line of code from running class that is adding a new dust particles i pasted inside handle input method on rolling class and instead of dust i instantiate the new fire class we just wrote now when i roll i'm getting a trail of fire i adjust these properties a bit before we fix the position of our fire trail let's make the individual fire texture images rotate i will need two helper variables called this.angle which will start at zero and this dot va velocity of angle it will be a random value between minus 0.1 and plus 0.1 in a site update method i will increase angle by va for every animation frame we will be rotating so to make sure the rotations don't overflow to other elements and only affect this fire particle i will wrap this code between save and restore this will make sure all canvas settings i declare in between will only affect this one particle to rotate anything on canvas first we have to translate rotation center point from its default position at coordinate 0 0 in the top left corner of canvas over the center of the item we want to rotate so i will translate to this dot x and this dot y of this fire particle that particle is a rectangular image so i'm translating to its top left corner then i call build in rotate method that takes angle value in radians and it will rotate everything that's drawn after this call unless we restore canvas again to its original default state if i roll now we are getting a spiral of small fire particles in a big circle around the player it's because we are translating to this dot x this dot y and from that point we are drawing again to the distance of this dot x this dot y here i fixed that by setting this to 0 0 because position of particle on canvas is already defined in translate method here translate method moves rotation center point and what is considered coordinate 0 0 on canvas to the coordinates we pass to it so because of this translate call for these particles coordinates 0 0 on canvas are here in this area i'm translating to the topless corner of each fire image of each particle rectangle i want to center it so i adjust this value by half of its width and this one by the half of its height canvas rotation can be difficult for beginners but we just covered all of it i have more detailed lessons on this topic but for now let's just move on i can increase the size of fire particles here on line 40. i can also give them some horizontal wobble using the same technique we used for flying enemies for each frame i increase x by a sine value of ever increasing angle and it will map horizontal x positions along an endless sine wave shape if you are a beginner all you have to understand about this is that if you pass math design and ever increase in angle value our angle is increasing here on line 50. it will mod positions along a wavy path if you look at the particles now there is some left right wavy movement i can also make the particles shrink slower by adjusting this value this will result in a longer fire trail as particles take longer to be small enough to be removed i can make the rotation faster or slower by adjusting this range of values i can increase particle size i can make them shrink faster in main.js i remove this console lock on line 53 i want to make sure we don't get too many particles i want to have a property that will limit the maximum amount of particles we allow in our game so we can easily adjust that value if we need to so inside update method on the main game class in this section where we handle particles i say if the length of particles array is more than 50 i want to slice the array and remove everything from 50 upwards i do that by taking these particles and assigning it to the same array but sliced from index 0 to index 50. it will only allow the first 50 particles to be in this array anything over and it will get sliced away slice message returns a copy of an array with only a portion of elements from start index to end index we defined the original array will not be modified so that's why i'm overriding it like this because in this case i want to modify the original array so we have some hardcoded values repeated here and here let's replace them with a variable i call it for example this.max particles i declare it up here and i set it to 50. i can see it works because it slices particles from the array you see how they disappear and we are getting gaps in our particle trail i actually want to slice particles from the other side of the array i want to remove the old ones not the new ones i can change the arguments i pass the slice method or i can change how we push our dust and fire particles into particles array in player states js on line 104 instead of using push method which adds one more element to the end of the array i will use unshift built in array method instead unshift method adds one element to the beginning of an array so now when i'm slicing from index 0 to index 50 i keep those new particles and i'm removing old ones if their index exceeds the value stored in max particles variable i do the same thing on line 48 i will be unshifting dust particles adding them to the beginning of our particles array to check if everything works i will control lock distort particles from here it starts empty if we start rolling it fills with fire particles if we run it fills with dust particles it never exceeds 50 particle objects so our slice method is correctly limiting the length of the array nice i'm on a strong computer so i will set my maximum particle limit to 200 but you can keep it on a lower number if you want to it's up to you i will also delete this console look on line 57 to clean up congratulations on completing this lesson in the next part we will make our game look and feel better by adding more animation it will help the player to get more visual feedback to the events happening in the game i'll see you there hey creative coders in this episode we will finalize player abilities and particle effects we will animate collisions with a special sprite sheet and we will add win and loose condition based on game timer we will also clean up some loose ends in our code let's finish the base game and then we can talk about some optional bonus features havana i want to create a second attack this time it will be a crushing meteor attack from above player can only enter this state when it's in the air it's a perfect use case for state design pattern we have here in our code base when the player is running on the ground and we press down arrow key it sits down when the player is up in the air we press down arrow key it will do a crushing dive attack from above i copied the entire code block with the rolling state class and i call it dive in i also pass a string that says dive in in all caps to superclass constructor all the values inside entry method will stay the same because dive in uses the same sprite animation row as rolling we will also leave the same fire particles code because diving also leaves a fire trail while the player is in diving state it is just moving fast towards the ground when it hits the ground and this statement is true we switch player to the running state to keep the momentum going i can delete this entire else if statement and here i say else if input includes enter and player is on ground transition directly into rolling state it should make the transition animation connect better we have our diving state but there is currently no way to enter that state let's define rules for when it can happen we can enter dive in state while we are in a jumping state when we are jumping and we press arrow down we set state to dive in and game speed will be zero because we are moving directly down let's take full advantage of the fact that the scrolling speed of our game world is connected to player states we can also enter dive in state while falling so i just copied the same else if statement here and we can also dive while rolling let's test it and see i save my changes and the code breaks because we need to import and instantiate the new dive in class i import it on line 1 and i create an instance in this dot states array on line 21. it works i want to feel like we are slamming into the ground with a great power but right now the player hovers in the air for too long in enter method on diving state class i set velocity y to plus 15 instantly giving the player a massive push towards the ground nice now it feels like there is some power behind that special move as i'm diving and hitting the ground player kinda gets stuck below the ground level let's fix that so here inside update method on player class we handle horizontal movement and horizontal boundaries here we handle vertical movement and vertical boundaries will be defined here let's keep ourselves organized i want to make sure that the player cannot get stuck below ground level like this so i will limit its vertical position if this dot y is more than the height of the game area minus the height of the player minus ground margin set player's vertical y position to game height minus player height minus ground margin like this now the player can never move to the space below this point below the level of ground texture in our game world we have one more particle class i called splash when the player does a meteor dive attack from above and it hits the ground i want it to do a flame explosion and i want the flames to splash in all directions to make that move look and feel very powerful constructor will need three arguments as usual game and x and y positions i trigger constructor on the parent super class and i pass the game along so this code will run size of the splash particle will be a random number between 10 and 200 pixels this dot x is x this dot y is y speed x will be a random number between 3 and plus 3 because i want them to splash in both directions horizontally speed y will be between 2 and 4 for example i want the particles to start moving up but as the gravity slowly grows stronger i want them to curve and start moving down similar principle we used for player jump in logic image will be the same one we are using for fire particle class update method will at first call update on the parent particle class as usual gravity from line 40 will be slowly increasing by 0.1 and this dot y will be increasing by the ever increasing gravity value to get that curved path draw method will just draw the fire image from line 41. we are exporting splash class so i import it online one in player states js i can't really create this particle explosion when we enter dive in state because at that point the player is still in the air i wanted to create it as we hit the ground so i could add exit state to all my states which would be an ideal location for this to happen given our code structure i can also create some small transitional state just for this or i can just do the simplest option and create the explosion in this else if statement on line 133 when player is in diving state and handle input method detects we touch the ground we set player state to run in and we create our splash particle i use unshift again to add one particle to the beginning of the array and i pass it game x and y position of the player one particle wouldn't be very impressive so i create a for loop here and i will run it 30 times we will create a splash of 30 particles i'm getting some errors it's here on line 1 in player stage js i misspelled my class name when i dive i get another error it just says that i forgot to pass context to draw method on splash class console errors are usually good at pointing us to the file and line of code where the problem is these two errors were easy to find and fixed thanks to my browser console now when we hit the ground we get a splash of particles i offset initial x coordinate maybe like this i also offset the ycoordinate i adjust the initial position values i pass to splash particle class constructor i'm kind of just playing with the values and offsetting them in random way because i want the particles to shrink in size which makes them move towards their top left corner i adjust this value there is a better way to deal with this but i think for the purposes of this class we can just do this quick hack it will look good enough and i just speed x like this this looks alright for now i think we get a nice impact animation when we hit the ground perfect i also want to have a player state that will play dizzy animation when we get hit by an enemy while we are not in a fireball state i call it hit i delete this line that adds fire particles i also deleted this i check my sprite sheet and i can see that max frame for this animation is 10. frame y is 4 and i delete this i will spell class name like this and i pass it hit here with this state class i will do something i haven't showed you before we can enter a state have it play its animation row once and when that animation has been played we automatically transfer to another state so the trigger for switching state will be animation frame this time so while we are in this hit state this animation row is playing i will wait until frame x is at position 10 and i check if player is on ground and i switch player back to running else if we are on the last frame on this animation row and if player is not on the ground we set state to fallen nice up here i can see that hit state has an index of six i import it into player.js module and i instantiate it as the item with an index of 6 inside this dot states array ideally i want to do all my state swapping from within player states js i could do it through a set of flags and flipping values around but since this class is beginner friendly i will do a simple thing and switch my state from here now i want to enter this new state when player collides with an enemy and it's currently not in rolling or diving state so if collision is detected we will always mark enemy for deletion regardless of what type of collision it is i delete this else block we won't be needing it we are going to run if else statement if collision is detected if we detect collision and player is currently in rolling or diving state so index 0 1 2 3 4 and 5 player is invulnerable in these states so it will destroy enemy and give us plus 1 score this.current state is this dot states 4 rolling or if this.current state is this dot states 5 divin increased the score else meaning the player collided with an enemy while it wasn't in one of those two states it means player will get hit by enemy and it will play the hit animation we will of course get no score points for that i call this dot set state and i pass it 6 the index of hit state and i pass it speed 0 because i want the game to stop moving for the duration of this state to properly emphasize that we collided with something if i test it i can see the score is correctly increasing as we hit enemies in rolling or diving state and if we collide with an enemy while not in one of these states we enter hit state perfect great job if you are coding alone hope you are getting a lot of value when the player collides with an enemy i want to run this sprite animation let's handle that logic in a separate module i will call it for example collision animation js you know how we do this by now there will be a class called collision animation constructor will expect the game object reference and x and y positions we convert game into class property as usual you can download the image in the video description i place it in my assets folder and i link it here in index.html i give it an id of collision animation i hide the image with css sprite with the width of a single frame is 100 pixels sprite height is 90 pixels we will have size modifier to randomize the sizes a bit it will be a random value between 0.5 and 1.5 the width will be multiplied by this dot modifier value like this sprite width times size modifier height will be sprite height times size modifier it's a rectangular image and i want x position to be in the middle of the image that's why i waited until now to convert x and y into class properties we can only do it after we calculate the width and height of the animation i want to push x and y over the center of the animation so x will be x coordinate passed as an argument minus half of the width y will be y coordinate minus half of the height frame x will start at 0 max frame is 4. marked for deletion will be false at first we are animating a sprite sheet so as usual we use a draw image built in method and pass it nine arguments image we want to draw so this dot image from line four source x will be frame x times sprite width for horizontal navigation around the sprite sheet source y will be 0 because this sprite sheet has only one row source width is sprite width source height is sprite height so these 4 values specify which area we want to crop out from the source sprite sheet now i pass it for more values destination x will be this dot x from line 10 destination y is this dot y destination width and height will be the width and height we calculated on lines eight and nine these last four values determine where to draw that cropped out frame on destination canvas update method will make sure that collision animations move with the game world so this dot y minus equals this.game.speed we export the class up here on line 1. i import up on line 2 in player js because this is the module where we handle collisions i create an array that will hold all currently active collision animation objects i call it this dot collisions and it will be an empty array at first we have collision animation class available so i go down to check collision method and every time player collides with an enemy we set marked for deletion on that animator true and i will also push one new collision animation object into this.collisions array i can see it expects game x and y so i pass it this.game and i pass it x and y coordinates of that enemy since enemy is a rectangle i pass it in the middle of that rectangle horizontally and vertically like this i want the collision animation to be centered exactly over the enemy that just collided with the player inside update method on game class down here we will handle collision sprites for each object inside collision array we will call its update method and i will pass it delta time because we want to slow the animation down if that collision object is marked for deletion i splice it out of the array same as we did with particles inside the draw method i will cycle through all the collision objects again and i will trigger draw method on each one nice we are drawing collisions we are just drawing the first animation frame in the sprite sheet let's go here inside draw method on collision animation class and animate frame x if frame x is more than max frame set marked for deletion to true and console collisions array and i can see that collisions are correctly being added and removed i can delete this console log collision animations are running very fast we can control their fps frames per second using delta time delta time is the difference in milliseconds between the time stand from this animation frame and the timestamp from the previous frame it will be passed as an argument up here we will need three helper properties fps will define frames per second frame interval will be the amount of milliseconds that needs to pass before we serve the next animation frame it will be one second thousand milliseconds divided by fps frame timer will be counting from zero to frame interval over and over every time it reaches the value in our frame interval it will reset back to zero and it will serve the next animation frame in our collision animation sprite sheet so here i say if frame timer is more than frame interval only then serve the next horizontal frame and reset frame timer back to zero so that it can count again for the next loop else keep increasing frame timer by delta time now collision animations are animating at 15 frames per second i can also randomize that fps not sure what that will look like let's try a random number between 15 and 25 frames per second i can make that a larger number it will be capped at 60fps anyway i think smaller numbers will look better since this spreadsheet only has 5 frames this will make sure they don't disappear too fast i will set the initial value for debug to false so we don't see collision rectangles on the first page load you can still view them by entering our debug mode by pressing the letter d win condition for this game will be a time limit we need to get as many score points as possible within a specific game time window i want a fast paced fun game we will store game time in this dot time variable here on the main game object when time reaches max time value the game level is complete for testing purposes let's set that time to 2000 milliseconds 2 seconds just for now inside update method we will be increasing game time by delta time that's passed as an argument up here milliseconds between animation frames will be accumulating in this dot time variable giving us the total amount of time that has passed since the game started if time from line 33 is more than max time from line 34 we set game over to true we need to declare this game over property up here when the game over is true i want to display a scoreboard a custom message and i want the game to stop animating down here in animation loop i say only request the next animation frame if game over is false this will make the game freeze and stop animating when game over happens i could also have just disabled controls and have the player running endlessly in the background you can customize your game over screen later based on your preferences i open uijs and here i want to display game time and game over messages let's start with the timer i want the font to be smaller let's say 80 percent of the font size we used to draw score i call fill text and i say time colon space plus this dot game time add coordinates 2080. nice we are drawing game time we will fix this but first let's also draw a game over message if game over is true set text align to left i want font size to be double of the base value i will have two messages one where the level is successfully completed and one for when the player fails to get enough score points in time this will be the winning message i will say booyah in large letters codiness will be the middle of canvas so game width times 0.5 and game height times 0.5 okay i set text align the center i need to fix this to actually set font size correctly i need to move this space from here to here and the same on line 14. nice winning message will have a second line of text with smaller font size that says what are creatures of the knight afraid of you exclamation mark exclamation mark this message will show up when we win i change font size to 70 i move the first line up 20 pixels and the second line down 20 pixels nice so this is our winning message i want this message to display if score is more than 5 for example this is just for testing purposes when we have the whole game working you can tune it and you can set game time and the score required to win the game to different value depending on how difficult you want your game to be if game score is more than 5 we display this message else meaning game over is true and game score is less than 5 we display a different message i will say love at first bite i like to keep the halloween theme the second line will say nope better luck next time so this is when we fail the level the tested i give us more game time so we can get enough score points 10 seconds nice win condition works well and now lose condition let's wait perfect we can also lose if we don't get enough score points in time we need to fix game timer it's showing milliseconds i want it to show seconds so i multiply it by 0.001 to move the decimal point from milliseconds to seconds and i only want to see one decimal space so build in javascript to fixed method and i pass it one we can also highlight the text to make sure it doesn't blend in with the background i wrap all the code inside the draw method on ui class between save and restore that means all the settings here will only affect this text i want to apply canvas shadows and i don't want them to be applied to players and enemies canvas shadows are still not well optimized in firefox so if you notice lower frame rate i suggest you don't use them but if you want to know how to use them it's simple shadow offset x 2 pixels shadow offset y 2 pixels shadow color white and shadow blur 0. now our text gets a nice white highlight we could also achieve the same effect by drawing the same text twice and the second one would have 2 pixel horizontal and 2 pixel vertical offset that would be more code but it's more performance efficient than using builtin canvas shadows let's clean up the code and fix some small bugs we have here when the player gets hit i don't want it to be able to move left and right when the player is in state 6 left and right arrow inputs will be disabled on line 11 in collision animation gs we are calculating vertical ycoordinate so this value should be height in running state we are setting max frame to six we are missing two frames max frame should actually be eight when i'm rolling on the ground and i press down arrow key player starts diving and it's causing this weird movement pattern we are not supposed to be able to do a dive attack when we are on the ground we can only switch to diving state when the player is not on the ground like this that fixed it one last small thing is here on line 61 in main.js we don't really need to call slice method we can just set length of particles array to max particles value like this in the next episode we will add more bonus features but from this point you can consider the game complete feel free to add your own features and run your own creative coding experiments i'll see you in the next one this is a final episode where we quickly implement some of the bonus features i showed in the previews we will improve visuals and clean up our code i will start by quickly changing background images just to keep things interesting you can download the forest background layers in the video description and i just replaced them in the assets folder overriding the city images i backed the old images up somewhere else on my computer you can also go to background.js and adjust speeds of individual layers sometimes a different background art looks better when speed modifiers on the background layers are adjusted i also changed ground margin on line 17 in main.js to better fit this new forest environment since we are changing visuals let's also change the font to something nicer you can go to google phones and choose any font from there it will all work and it's very easy to implement let me show you with creepster because this is a halloween themed game we are in a scary dark forest escaping from creatures of the dark when you choose your font click select this style now i click up here and it will give us everything we need to use this font on the web in our web browser game i copy this link tag you can also select multiple fonts and they will be automatically added to the same tag i will use just one font for now i copy the link tag and i paste it up here in index html notice i put it before my custom style css file because i want the font to be available when that file loads then i just take this css rule and i apply it to canvas element now i can use this font all over my project and canvas will draw it i will use it in uijs for score timer and game over messages by replacing helvetica with gripster here i think this looks much better and you can choose from so many different google phones to fit the art style of your game i have other favorites on here for example a font called bangers for a really cool comic book art style i want the player to have a limited number of lives and i want those lives to be displayed on screen each life will be represented by a small image of dog head you can also use heart image or something completely different it's up to you if you want to use the same image as me you can download it down below as usual i bring it into the project here in index.html first then i hide it with css i will be drawing the lives here in uijs so in the constructor i bring the image into the project like this i will call it for example this dot live's image down here under timer we will draw player lives i will call draw image and i pass it the image i want to draw i want to draw it at coordinates 20 95 and width and height will be 25 pixels nice we are drawing it here i created this.life's property on the main game object let's start with 5 lives back in uijs i create a for loop that will run once for each life and it will draw an image that represents it now i'm just drawing five images on top of each other i need to multiply horizontal x position times index from the for loop actually it will be the width of the image so 25 pixels times index plus left margin of 20 pixels perfect now when i change the value here it changes how many lives are drawn on screen maybe you want your game to be easy you can give the player 15 lives to start with i will go back to 5 lives in player.js in the area where we handle collisions when the player collides with an enemy while not rolling or diving this animation is played by setting stage to state 6. we call that state hit and at the same time i want to remove one life so this.game.lives minus minus after we removed one life we check if total lives are less or equal to zero and if they are we set game over to true i tested by colliding with enemies on purpose you can see that each time we collide we lose one life per anime and when we lose the last life we get game over screen perfect i want score numbers to fly from enemies as we defeat them this can also be used for other floating messages in our game i create a new file called floating messages js i create a custom class i call for example floating message and i export it constructor will expect value of the floating text starting x and y position and target x and y position text with this value will float from this position to this position and then it will disappear i convert these values to class properties as usual i also create a property i call timer just to set some simple time limit after which the messages disappear we will need update and draw methods as usual update method will push horizontal exposition by the difference between target position and the current position making it slowly move towards the target same for the vertical y position difference between vertical target and current vertical position for each loop timer will increase by 1. when timer is more than 100 we set marked for deletion to true draw method will take context as an argument we set font to 20 pixels creepster fill style will be white and fill text will draw value from line 3 at its current x and y coordinates now i show you an alternative to using canvas shadows for score and timer we are using canvas shadow properties here we will achieve the same effect by drawing the same text twice white first then black on top of it and we give it two pixels horizontal and two pixels vertical offset we are exporting our new floating message class i import it up here on line 3 in player js inside check collision method when we successfully hit an enemy and score increases i want those score points to fly from that enemy towards our scoreboard i say this.game.floatingmessages push and i want to use floating message class to create one new floating message object first i need to go to main.js and on the game class i create this floating messages array it will be an empty array at first now i'm pushing a new floating message into it like this i check here and i can see that class constructor expects text value starting x and y coordinates and target x and y coordinates value will be plus 1 because we get one score point we could also make this value dynamic if every enemy type gives different amount of score points starting coordinates will be x and y of the anime we just collided with and target x and y will be for example the top left corner of canvas so coordinate 0 0. inside update method on game class the same way we cycle through all anime object inside enemies array we will also cycle through all floating message objects inside floating messages array for each message we will trigger its update method i delete this splice to remove old messages because we will do it in a better way i'll get to it in a minute so for every floating message object i call their associated update method i copy this code block and inside draw i also call draw method on every message and i pass it context if i play the game messages will be moving too fast so there is no animation i just see the bottom of the letters here i need to go to update method and i need to multiply both of these by 0.03 so i'm saying here for each animation frame increase the current vertical and horizontal position by three percent of the difference between the target position and the current position this will make the text move towards its target position by three percent of the distance per animation frame meaning it will start moving fast and as the distance between current and target position gets shorter so it's a smaller number three percent of that value is less pixels so it will travel slower and slower giving us a nice ease out effect you can see that the movement is faster at first and it slows down as the letters float closer to target 0 0 coordinates on canvas i adjusted the target coordinates i want them to flow somewhere to the end of score line maybe these coordinates yeah let's do 150 and 50. right now we are creating an ever increase in floating messages array because we are not removing the old ones i will use filter array method to do that it's better than using splice for a reason i will explain in a minute built in array filter method runs a provided callback function once per each element in the array array elements which do not pass the callback function test are skipped and are not included in the new array so when i say this.floatingmessages.filter and as a callback i say marked for deletion property on each object needs to be false the new array will contain only elements that have marked for deletion set to false elements that are set to true will be excluded at the same time i am assigning this new filtered array to the original floating messages array overriding it so this simple line of code filters out all elements that have marked for deletion set to true in the previous episode i mentioned a pack where i noticed that ground enemies jump and wiggle horizontally even when they are supposed to be static it's especially visible when comparing ground enemies against the ground texture but it is actually happening with all enemies it is because as i cycle through the array i am removing enemies that collided with player or moved off screen using splice problem is that when i splice out and remove enemy from the array while i'm in the middle of cycle and through that array it changes index of all the following elements in our case enemy objects because of that their position is not calculated correctly for that loop and they jump around instead of splice i will use filter method and i will only remove enemies that have marked for deletion properties set to true after we finished cycling through the entire array so there are no problems with indexes and skipping positions basically i will do the same thing for enemies i just did for floating messages i will also do the same thing for particles like this and finally i also do it for collision animation objects now that's better we fixed the bug and i think this syntax is a bit cleaner as well i just quickly can't lock all my object arrays i put it inside at enemies so it logs it only periodically not for every animation frame i play the game and i can see that all the arrays are being correctly filled with objects and those objects are also being removed perfect player class doesn't have this dot current state property because i had to define it from inside game object here that property belongs on player class so i can define it here and initially i set it to null this is just to clean up the code will still work the same let's tune the game difficulty to make it a bit more challenging max time will be 30 000 milliseconds or 30 seconds in this time the player needs to reach at least the minimum winning score of 40 to see the winning message we can do other things for example every time player gets hit by an enemy and this animation is played we can remove 5 points from the score as a penalty you can tune your game however you want you can make it easier or more difficult by adjusting these values when the game is over after 30 seconds i check if score is more than winning score and if it is we display winning message else we display the losing message let's test it i play it and i get hit over and over my score is in minus values i get game over and losing message from line 35 is displayed nice i increase game width to 900 pixels i will keep game height at 500 pixels because our background images are optimized for that size we're not gonna go into aspect ratio calculation in this class this time i will really try to play the game and let's see if our winning condition works i need score over 40 in 30 seconds it's actually pretty close yes i played well i got 55 score points and when a message is displayed awesome we are done let me know in the comments if you code it all the way through and if you learned something new i'll see you later
