With timestamps:

00:04 - hi everyone and welcome to this
00:06 - javascript tutorial to create the 1979
00:09 - atari game asteroids or our version of
00:13 - it at least in this first part of the
00:15 - tutorial we're going to create the ship
00:17 - and make it move around the screen and
00:18 - everything so you can go around go ahead
00:20 - and download this template if you'd like
00:23 - update the title to whatever you like
00:24 - asteroids
00:26 - we're going to use html canvas to
00:28 - achieve our graphical display
00:31 - so give it an id game canvas or similar
00:34 - give it a width
00:37 - width will equal say 700
00:40 - height you can change this to whatever
00:42 - you like height will equal 500
00:46 - first of all we need to grab that canvas
00:49 - uh
00:50 - just from experience i know that we need
00:51 - to give this
00:53 - a jar a js dock so at type just so that
00:57 - it recognizes it as a canvas element so
00:59 - at type curly braces html
01:03 - canvas
01:04 - element
01:06 - close the js dock
01:09 - and
01:11 - move to
01:13 - then we can create the variable ken
01:16 - and that will equal the
01:18 - document
01:19 - get element by id
01:21 - and just type in the string that we had
01:23 - up there the id came canvas
01:26 - great
01:28 - get rid of this
01:31 - uh we need to get the context from the
01:33 - canvas so the con text will equal
01:38 - the canvas dot get context
01:42 - and it's going to be of type 2d
01:44 - [Music]
01:46 - good
01:47 - we also need to set up the game loop
01:50 - to achieve our animation
01:53 - we can just use the inbuilt function set
01:55 - interval for that it requires a handler
01:57 - so that's just the function name update
02:00 - and a timeout in milliseconds so 1000
02:03 - divided by our frame rate so we'll set
02:05 - up a constant called fps
02:10 - const
02:11 - fps equals 30 frames per second say so
02:14 - that'll be
02:15 - well let's leave a note frames per
02:18 - second
02:21 - so that means it'll call this update
02:22 - function
02:24 - once every thirtieth one thirtieth of a
02:26 - second so let's go ahead and create that
02:28 - function update
02:32 - function update um
02:34 - [Music]
02:35 - what will we do first in this well we
02:37 - need to draw
02:38 - let's plot out what we're going to do in
02:39 - this tutorial so we'll draw the
02:41 - background or draw space
02:44 - we will draw our ship
02:48 - we will what else
02:51 - um we will move the ship
02:56 - move or rotate the ship first doesn't
02:59 - really matter the order here
03:01 - we'll move the ship
03:02 - move the ship
03:06 - draw ship draw space good
03:09 - okay so first of all we need to draw
03:12 - space how do we do that well we can just
03:14 - set up the fill style
03:17 - basically we'll just paint the
03:18 - background in black
03:20 - so fill style will equal black and we'll
03:22 - draw a rectangle
03:25 - draw so fill rectangle is to draw a
03:27 - filled rectangle obviously
03:30 - it requires the origin which is going to
03:32 - be 0 0 and the width will which will be
03:35 - the canvas width canvas.width
03:38 - and the height is the canvas.height
03:43 - let's just run that make sure that it's
03:45 - working okay
03:47 - there we go that's the background great
03:51 - next we want to draw a ship
03:53 - now how are we going to represent our
03:55 - ship
03:56 - probably the best way is just by using a
04:00 - we can just create a variable ship using
04:02 - an object javascript object all that is
04:04 - is a fancy array really
04:07 - so ship will equal curly braces now we
04:09 - can put all our properties in here so
04:10 - what do we need to know about our ship
04:12 - we need to know the x coordinate
04:15 - so let's start it in the center of the
04:16 - page center of the ship center of the
04:18 - ship center of the screen so that'll be
04:21 - canvas
04:23 - width
04:24 - divide by two
04:27 - the y component will be the canvas
04:30 - height divide by two
04:33 - what else do we need to know um the
04:34 - ship's size so have a radius r that
04:37 - represents radius
04:39 - uh it'll be based on how about we set up
04:41 - a constant here
04:42 - constant
04:44 - chip
04:45 - size
04:46 - which will equal let's put it in pixels
04:48 - say 30
04:52 - ship
04:53 - size or ship height maybe ship height in
04:56 - pixels
04:57 - you could make this a percentage of
04:58 - screen width if you wanted to or screen
05:00 - height but we'll just keep it as a fixed
05:02 - number
05:03 - so the radius will be half of that
05:04 - minute ship size divided by two
05:08 - we also need to know the direction of
05:10 - the ship the heading as such we'll call
05:11 - that a for angle
05:13 - um
05:15 - now if you know your trigonometry and
05:16 - the unit circle 0 degrees is facing
05:19 - right
05:20 - facing upwards is 90 degrees so we'll
05:22 - put it 90 degrees
05:24 - but all the math functions don't work in
05:26 - degrees they work in radians so we have
05:28 - to convert this to
05:30 - convert this to radians by doing divide
05:32 - by 180 and multiplying by math pi
05:37 - divided by any times i say
05:39 - don't need that
05:41 - convert
05:42 - to radians
05:45 - okay
05:46 - so we have an angle
05:48 - to draw that ship
05:50 - well we need to set up our context first
05:52 - set up the colors and so on
05:54 - so we'll have it as a stroke a stroke
05:57 - style
05:59 - we'll just make it white
06:02 - we will
06:04 - um
06:06 - maybe set the line width we'll set the
06:08 - line width
06:09 - how about we put that as a percentage of
06:11 - the ship size so that will be say ship
06:14 - size
06:15 - say divide by 20.
06:18 - good um now the actual ship to draw a
06:23 - triangle so this is going to be draw
06:26 - triangular
06:28 - triangular ship draw a triangular ship
06:31 - so to draw a triangle we need to use the
06:34 - path so we can do a begin path
06:37 - just call that function begin path
06:40 - and we need to move the cursor to where
06:42 - we want to start so we use we use the
06:45 - function move to
06:47 - it just takes an x and y component
06:49 - x and y coordinate
06:52 - so the x coordinate will be the x of the
06:55 - ship won't it well that'll the x of the
06:57 - ship represents the center of the ship
06:59 - so we want to add something to that
07:01 - now what do we add again some
07:03 - trigonometry we just need to add the
07:05 - radius sorry the ship radius
07:07 - ship radius multiplied by the cosine
07:11 - because cosine represents the horizontal
07:14 - of the ship's angle
07:17 - whatever that angle might be
07:20 - right
07:21 - similarly
07:23 - we
07:25 - the y component
07:26 - will be the radius times the sine so
07:29 - that's the vertical of the ship's angle
07:32 - we can test this out oh actually we'll
07:34 - have to draw a line first so that's the
07:37 - tip of the ship so that's the tip the
07:39 - nose i guess and then
07:41 - nose
07:42 - of the ship
07:47 - now we'd like to move to the
07:50 - the rear
07:51 - left of the ship so remember it's a
07:53 - triangle so context will do a line too
07:56 - so it'll draw a line from the original
07:58 - point from the
08:00 - two
08:02 - where
08:04 - well the rear of the ship we could use
08:06 - that to represent the rear of the ship
08:08 - just with one minor change
08:10 - instead of oh sorry i just made a
08:12 - mistake here ship y
08:14 - should be minus the ship
08:15 - [Music]
08:16 - minus the root that because
08:19 - um negative represents upwards
08:21 - on the screen
08:23 - right
08:24 - now to get this um
08:26 - to get the rear of the ship we would
08:29 - change the sign so change the plus to a
08:31 - minus and the minus to a plus
08:34 - so this will be the rear left
08:37 - of the ship
08:39 - now that's the rear center that we
08:40 - currently have so we need to modify this
08:42 - i just grabbed out a scrap piece of
08:44 - paper before and worked all this out
08:45 - using trigonometry so you can either do
08:47 - it yourself or just trust me we need to
08:51 - add the
08:53 - sine of the ship's angle here
08:58 - right
09:00 - and here we just need to
09:02 - subtract the cosine
09:05 - of the ship's angle
09:07 - i'm not going to explain the maths here
09:08 - i don't really want to do a math lesson
09:11 - um
09:13 - all right
09:14 - so that should draw the real left now to
09:16 - test this we can
09:18 - just
09:19 - use context stroke that means it'll draw
09:21 - the path
09:23 - let's have a look what that looks like
09:28 - that's looking good
09:32 - do something similar so copy and paste
09:34 - this this is going to be the
09:37 - rear right so we're going to draw a line
09:39 - to the rear right now in order to do
09:42 - that it's the same thing except all we
09:44 - have to do is change the sign in here
09:47 - pretty simple
09:49 - let's have a look at that yep it's drawn
09:51 - the rear of the triangle
09:55 - and finally we want to finish off
09:58 - we want to close this so there is an
09:59 - inbuilt command
10:01 - i think it's called
10:02 - close
10:04 - close path there we go and that should
10:06 - complete the triangle for us
10:09 - great
10:10 - we need to test the angle so don't we so
10:12 - go back up to
10:13 - the ship's angle change instead of 90
10:15 - change it to say 55 so it should be
10:18 - facing right on an angle
10:20 - cool how about 155 that should be facing
10:24 - the other direction
10:26 - looking good
10:28 - and we'll go back to our original
10:30 - looks like it's working well
10:33 - great
10:34 - i'm just thinking we should probably put
10:35 - the center of the triangle in just for
10:38 - our testing purposes so we're down here
10:40 - center
10:42 - dot
10:44 - we can do that just by setting up a
10:47 - context fill style
10:49 - which will be
10:51 - say red doesn't matter what color
10:55 - and we'll draw a rectangle so fill
10:57 - rectangle
10:59 - the origin will be the center of the
11:01 - ship so ship
11:02 - dot
11:04 - x minus one say let's make it say two
11:06 - pixels wide
11:08 - the ship dot y
11:11 - minus one
11:12 - and the size will be two to two pixels
11:15 - by two pixels
11:17 - let's just see if that's there okay
11:20 - yeah so that's exactly how we've
11:22 - programmed but the center will be
11:23 - exactly one radius from the peak and one
11:26 - radius from the bottom
11:28 - but that's not really the center of a
11:30 - triangle when we rotate this ship it
11:32 - might not look very nice so we could the
11:35 - actual centroid of a triangle is a bit
11:37 - below that it's two thirds from its peak
11:39 - i think so we can fix that up pretty
11:42 - simply uh
11:43 - so two thirds we just need that the nose
11:45 - of the ship would be one third ahead so
11:47 - we'll go four
11:50 - time four divide by three
11:56 - times that so four thirds times that and
11:59 - this will be four thirds times that i
12:01 - think
12:02 - yeah
12:03 - remembering this is all in the right
12:05 - this is the radius of the ship so
12:08 - that's why we're using four thirds here
12:10 - uh the rear um we just need to
12:15 - multiply the first component by
12:18 - two thirds to get this working i think
12:22 - two thirds yep so this first component
12:24 - of each of these just multiplied by two
12:26 - this it'll shift it upwards basically
12:28 - let's try it
12:32 - there we go and that's actually the
12:33 - centroid of uh so if you draw a line
12:35 - from this vertex to the center of that
12:39 - side that's how you work out anyway
12:42 - you don't need to know the math
12:43 - that's where the center of the triangle
12:45 - would be a much nicer experience
12:47 - good
12:48 - so how do we go about rotating this ship
12:51 - well
12:53 - we've got an angle we need to update the
12:54 - angle when they push a button say push
12:57 - the left arrow key so we'll need to set
12:59 - up some
13:00 - uh what do they call them
13:03 - event handlers set up event handlers
13:07 - so we can do that just by going document
13:09 - dot add is it add event listener add
13:13 - event listener it requires a type so the
13:16 - type is one of these here it's actually
13:18 - the one we're looking for is key down so
13:20 - when that means it'll detect when one of
13:22 - the keyboard keys are pressed
13:24 - and the listener well that'll be the
13:26 - function we call so we'll just call that
13:28 - key down
13:30 - the same thing really
13:32 - when we push the left key we want to
13:33 - rotate left when we un-push the key that
13:36 - means when we release the key i guess
13:38 - we also need to capture that event so we
13:40 - can just
13:41 - duplicate that and use the
13:45 - key
13:47 - up okay up so it detects when the key
13:49 - has come up and we'll make a function
13:51 - called key up
13:54 - right so let's do that
13:58 - function
13:59 - key
14:00 - down
14:02 - it will take an event as a parameter so
14:06 - we can just use our
14:08 - js dock again
14:09 - just to make sure it's very clear that
14:11 - it's an event um at
14:14 - type i think it's of
14:16 - keyboard yeah keyboard event it is there
14:19 - keyboard event
14:20 - keyboard
14:23 - event
14:24 - oops we need that in
14:27 - braces and then we just can
14:30 - look at that again they just call it ev
14:32 - so we can do the same thing ev
14:37 - right now we don't want any key to do
14:39 - something do we don't want them to push
14:41 - the six or the question mark and
14:43 - something happens unless you want to
14:44 - program it that way but we just want to
14:46 - detect arrow keys so to do that we can
14:48 - make a switch statement switch
14:53 - oops i didn't close this
14:56 - there we go
14:57 - switch event dot key code so that'll
15:00 - detect the key code the actual
15:02 - code of the key that's pressed
15:05 - the arrow keys are what we're interested
15:06 - in so they're actually they start at
15:09 - number 37 i believe so it's 37 for left
15:11 - 38 for up 39 for right that's all we
15:15 - need to know i think
15:16 - so we can go case
15:18 - 37
15:23 - i don't want to add event
15:24 - listener we'll break that
15:30 - and repeat this for each of the key
15:32 - codes that we'll be using so we'll be
15:33 - using 38
15:36 - we'll be using 39
15:39 - and just probably the right note here so
15:41 - this is the left
15:43 - arrow
15:44 - and in brackets what do we want it to do
15:45 - we want it to rotate
15:48 - ship left
15:51 - okay
15:52 - similarly we want 39
15:55 - 37 38 29 is it the right numbers i think
15:57 - so
15:58 - rotate ship right we'll soon work out
16:01 - whether it's right or not
16:02 - this will be the right arrow
16:06 - 38 that's the app the up arrow
16:10 - and what will that do that will
16:12 - what's the term for shooting at thrust
16:15 - thrust
16:17 - the ship
16:18 - forward
16:20 - okay let's we'll do that later
16:22 - so first of all how are we going to
16:24 - handle this so we push the left arrow
16:26 - something happens
16:27 - how about we set the rotation of the
16:29 - ship so in order to do that we'll have
16:31 - to
16:34 - give another property we can just call
16:36 - it rot for rotation
16:40 - it's currently equal to zero
16:42 - we don't want any rotation
16:44 - we should probably set up a rotation
16:46 - speed here for return speed whatever you
16:48 - want to call it constant turn
16:51 - speed
16:52 - and we'll set it in say degrees per
16:54 - second so i'll set it to say 360.
16:59 - and this is turn speed in
17:02 - degrees per second
17:06 - okay
17:08 - so when the left hour is pushed we want
17:10 - to update the ship's rotation
17:14 - it will equal
17:16 - the turn speed
17:18 - now that's in degrees so we have to
17:19 - divide to get radians we have to divide
17:22 - by 180
17:23 - times by math
17:25 - pi
17:27 - and
17:28 - this will be
17:29 - [Music]
17:30 - we want to get the per frame speed don't
17:33 - we so what to divide by the frame rate
17:35 - otherwise it'll be rotating way too fast
17:40 - similarly just copy and paste that put
17:41 - that in the right
17:43 - there we go
17:45 - this will just be the negative of that
17:47 - won't it so we can set the rotation when
17:49 - the right arrow is pushed we'll set the
17:50 - rotation to the negative of that
17:52 - um now that won't do anything yet
17:55 - because we need to do something with
17:56 - this rotation so down where we've marked
17:58 - rotate ship all we have to do
18:01 - is ship
18:03 - dot angle
18:05 - um
18:06 - plus
18:07 - equals
18:10 - should this be okay it should be ship
18:12 - angle plus equals the
18:15 - row
18:16 - the ship's rotation ship dot rotation
18:21 - i think that should do it let's give it
18:23 - a go
18:26 - something's gone wrong ships the road
18:29 - plus equals the ship's rotation
18:32 - probably we can open up a
18:36 - a console here to see the error
18:39 - what does it say uh reference key up is
18:41 - not defined ah okay so we it wants to
18:45 - see all these um
18:47 - functions written first so function
18:51 - key
18:52 - up
18:53 - it doesn't do anything yet although
18:56 - actually let's try we may as well put
18:57 - this in now
18:59 - just copy and paste the same thing
19:01 - um
19:03 - so 37 left arrow we want to
19:07 - stop rotating so when the key is
19:10 - released we want to stop rotating left
19:14 - and this will be stop thrust
19:18 - we'll stop thrusting
19:20 - and this will be
19:21 - row
19:22 - stop
19:24 - stop rotating right
19:28 - okay now all we have to do here is
19:30 - instead of setting a speed we just set
19:32 - it to zero so there will be no rotation
19:36 - right now let's try that again just put
19:38 - that down reload there we go now if i
19:41 - push the left arrow
19:43 - yeah it
19:45 - okay something's not it's rotating the
19:48 - correct direction so when i push left
19:49 - it's rotating i might push right it's
19:51 - rotating
19:52 - that's fine but it's not stopping so
19:54 - something's going wrong here
19:57 - i see we in our key up we haven't uh put
19:59 - the
20:02 - event
20:04 - silly isn't it there we go
20:06 - so the key up will detect an event now
20:10 - let's try that so left release the key
20:13 - right release the key yep our rotation
20:16 - is working well
20:18 - but nothing else is happening we can't
20:19 - thrust at this point so how about we
20:21 - work on that can you see the uh the
20:23 - center of the triangle is more accurate
20:26 - if you put it at the front of the ship
20:27 - how we had it would look a bit funny
20:30 - so we've used the centroid
20:32 - so thrusting how are we going to handle
20:34 - that
20:35 - well we'll have to give you some more
20:36 - parameters some more properties to our
20:38 - ship
20:39 - so how about we say
20:41 - we'll just
20:42 - put a flag in here called thrusting
20:44 - so that's just a true false a boolean
20:49 - and we'll say it's not thrusting to
20:50 - begin with
20:51 - and then we'll also have the thrust
20:53 - magnitude so it can be
20:55 - simply
20:57 - it can have its own component the x
20:58 - component which will be zero to begin
21:00 - with and the y component which will also
21:02 - be 0.
21:03 - so we can set the thrust magnitude
21:06 - this allows us to
21:08 - when we thrust in one direction and we
21:10 - release the key the
21:12 - ship will continue in that direction
21:14 - even if we rotate it will continue in
21:15 - that direction
21:18 - okay so up arrow thrust the ship
21:22 - thrust the ship forward so first all we
21:24 - want to do in this actually when they
21:25 - push the up arrow all it will do is
21:28 - set that thrusting
21:29 - to true
21:31 - that's all it will do
21:33 - similarly when they release the arrow
21:38 - it will
21:41 - set the thrusting to false
21:45 - great
21:46 - but we're going to thrust this ship
21:48 - well fix it we'll put the thrust here
21:50 - before drawing it because we'll probably
21:52 - want to put a little graphical display
21:53 - as well that'll be behind the ship not
21:56 - trust the ship we want to thrust the
21:58 - ship
22:00 - okay
22:01 - so to do that we just need to set up a
22:04 - if
22:06 - um
22:07 - ship
22:08 - thrusting so if the ship is thrusting
22:11 - we want to do something don't we we want
22:13 - to increase the thrust
22:16 - so to do that we can just go ship
22:18 - dot
22:19 - thrust
22:20 - now the x component
22:22 - we want to add to it as long as we're
22:24 - thrusting we're going to add the thrust
22:26 - so we'll probably need
22:30 - a base thrust up here so how about the
22:33 - [Music]
22:35 - let's call it
22:36 - ship
22:38 - thrust um we'll set it to something say
22:41 - five we'll make this an acceleration so
22:43 - this is uh
22:45 - acceleration
22:48 - of the ship
22:50 - in
22:51 - pixels per second per second a little
22:55 - bit of physics for you
22:57 - so the ship thrust equals five
23:00 - so that means in the first second it'll
23:01 - go five pixels in the second second
23:03 - it'll go 10 pixels the third second 15
23:06 - pixels and so on so it'll get faster and
23:07 - faster as long as you're holding that
23:08 - key
23:10 - so the ship thrust will equal the ship
23:12 - sorry the ship thrust x component will
23:14 - equal the ship thrust
23:17 - right
23:20 - multiplied by
23:22 - the
23:23 - cosine because it's going to be
23:25 - the x component the cosine of the ship's
23:27 - angle
23:30 - similarly
23:31 - the y will just be the sine component
23:38 - let's see if that works oh hang on we
23:40 - haven't moved the ship yet so it's
23:41 - updating the thrust component but we
23:43 - have to use that thrust in order to move
23:45 - the ship so what we need to do is the
23:47 - ship dot
23:48 - x will
23:51 - plus equals
23:53 - the ship's
23:54 - thrust
23:57 - x
23:59 - and the y component will plus equal the
24:02 - ship's thrust wire component so this
24:04 - will means it'll keep moving as long as
24:06 - we're thrusting that way or as even if
24:08 - when we release the key it should keep
24:09 - moving
24:11 - let's try it
24:13 - i'm pushing the up key
24:16 - i know what i've done wrong first of all
24:18 - we got the wrong direction
24:20 - right so in this shift thrust that'll be
24:23 - minus equals
24:25 - minus equals the x
24:28 - no the y component sorry
24:31 - because it's going
24:33 - the y component should be minus equals
24:35 - and we haven't accounted for the frame
24:36 - rate so just divide all this by the
24:38 - frame rate frames per second
24:41 - frames per second
24:44 - okay let's try that
24:46 - pushing up
24:48 - yep so i've pushed up now i can't pull
24:50 - back i don't want you have to turn the
24:51 - ship in order to thrust it backwards
24:54 - so turn the ship that way to stop going
24:56 - that way after thrust that way
24:58 - thrust that way
25:01 - probably will want some sort of
25:02 - frictional component i know depending
25:05 - where you are in space there's not much
25:07 - friction but let's for this game i think
25:09 - we should have some friction otherwise
25:10 - you'll forever zoom that way and never
25:12 - slow down so
25:15 - um to do that what do we need to do
25:18 - let's add a friction constant
25:21 - constant friction
25:24 - friction now usually friction
25:27 - coefficients in physics or whatever a
25:29 - value between zero and one
25:31 - so we'll set it up to say be point
25:33 - seven
25:35 - and we'll define that as friction
25:38 - coefficient
25:41 - of space
25:43 - where
25:44 - zero
25:45 - equals no friction
25:48 - one equals lots of friction you can have
25:52 - technically you can have a frictional a
25:54 - friction coefficient above one
25:56 - but we'll just stick to this
25:59 - uh so 0.7
26:01 - now how do we apply that so somewhere in
26:03 - our thrust
26:05 - so thrusters ship
26:07 - somewhere in here we need to apply the
26:09 - friction
26:10 - node so when it's thrusting
26:12 - we want it to go forward
26:14 - otherwise that means that if they're not
26:16 - pushing the thrust key they're not
26:18 - pushing upwards when it's
26:20 - when it's not thrusting the friction
26:22 - will take hold so to do that we can just
26:25 - ship dot thrust
26:28 - x
26:29 - now we just want to reduce this
26:31 - by a factor of itself so we can just do
26:34 - friction
26:36 - times remember it's a value between zero
26:38 - and one so it'll get smaller
26:39 - times the ship's thrust so by itself the
26:43 - x component of the thrust
26:45 - and we need to divide that by the frame
26:48 - rate
26:51 - right
26:52 - um do the same thing for the y component
26:56 - except change that to a y
26:58 - i think that should do it so it should
27:00 - apply this frictional component every
27:02 - frame
27:02 - and slowly slow down the ship let's try
27:05 - it so i'll push forward a little bit let
27:07 - go
27:08 - and it's slowing down go that way
27:11 - let go
27:12 - yeah that seems about right so i can
27:14 - turn around i'm holding the arrow key
27:16 - while i'm turning here then i'll release
27:19 - it when i'm going on an angle say
27:22 - and it's slowing down
27:24 - great
27:25 - the friction is working well
27:28 - now in the actual game i think you can
27:30 - fly off the screen so if i fly off the
27:32 - top of the stream i'll pop back on to
27:33 - the bottom so how are we going to do
27:35 - that
27:36 - so we can handle the edge of the screen
27:38 - just after it's handle edge of screen
27:43 - so we need to detect when that happens
27:45 - first so if
27:46 - the ship's
27:49 - x component if the ship x
27:52 - is less than zero
27:54 - minus the ship's radius
27:57 - either way
27:59 - we want to
28:01 - set the ship's x
28:04 - to
28:05 - where
28:07 - we want to set it to the right of screen
28:09 - don't we so it'll be the
28:11 - canvas
28:12 - width
28:15 - plus the ship's radius
28:19 - right
28:21 - else
28:22 - if
28:24 - the
28:24 - ship's
28:27 - x is greater than
28:29 - basically greater than this here
28:32 - so it's greater than the width of the
28:33 - screen plus the radius of the ship
28:37 - we want to set it
28:40 - to
28:41 - this part 0 minus the
28:44 - radius
28:46 - right
28:48 - that's for the x component
28:50 - for the y component
28:53 - just need to change all of this to y
28:56 - y
28:58 - y
29:00 - y and use height instead
29:07 - height instead
29:10 - let's give it a go
29:13 - so thrusting thrusting upwards turning a
29:16 - little bit yeah pop back into the screen
29:18 - there will it go this way yes going back
29:20 - the reverse direction
29:22 - zooming that way
29:24 - yep well i'm going a bit fast
29:26 - slow down a bit
29:29 - seems to be working well
29:32 - great
29:34 - okay that's our i was just thinking when
29:36 - we're thrusting the ship maybe we want
29:38 - to add a bit of a graphic like a bit of
29:39 - a thruster like a bit of flame or
29:41 - something so to do that
29:44 - uh where we're thrusting the ship we'll
29:45 - just need to draw something here so draw
29:48 - the thruster
29:52 - right so the thruster will be a triangle
29:56 - um
29:57 - so we'll just copy and paste this one
30:04 - just get that indenting indentation
30:07 - there we go
30:08 - what stroke style are we going to have
30:11 - well i'm thinking yellow
30:14 - and we'll probably have a fill style as
30:15 - well
30:19 - i've got a comma there that's not right
30:21 - let's change that it's amazing it's
30:22 - working okay though
30:26 - we'll have a fill style as well so
30:29 - that'll be the interior the flame as
30:31 - such uh fill
30:33 - style will equal red
30:36 - you can customize these colors how you
30:38 - like
30:39 - the line width
30:41 - probably a bit thicker so we'll make it
30:42 - one tenth so the ship size divided by
30:44 - ten
30:46 - be in path um the nose of the ship it's
30:49 - not we we don't want to we want to
30:51 - thrust behind the ship so to do that we
30:53 - need to change this
30:54 - to a negative change this to a positive
30:57 - now that'll be the center
30:59 - of the ship
31:02 - actually copy and paste this second pass
31:04 - we'll start at the rear left first so
31:06 - we'll start at the rear left paste that
31:08 - in there
31:10 - so move to
31:11 - so this will be the
31:13 - rear
31:16 - left we want a line to the rear center
31:21 - which is behind the ship so this will be
31:23 - behind the ship
31:26 - behind the ship
31:31 - okay so that's all correct except that
31:33 - we want to do it behind so to do it
31:35 - behind we just need to multiply
31:37 - we'll times that by two we'll make it
31:39 - four thirds
31:41 - we don't need this here because it's the
31:43 - center so we need to get rid of that
31:47 - so lots of confusing maths i know
31:53 - so it'll just be the cos and the sign
31:55 - and four thirds of it to be behind the
31:57 - ship
31:58 - so maybe times two we'll make it eight
32:00 - thirds there you go that'll be twice as
32:02 - the length of the ship behind
32:04 - so near center behind the ship rear
32:07 - center behind the ship now the rear left
32:10 - that's correct except that we want we'll
32:12 - see what that looks like first now we
32:14 - need to also draw the fill here so the
32:16 - context fill
32:20 - let's try it
32:22 - now when i thrust
32:24 - whoa it's huge isn't it
32:27 - maybe it's a bit too huge
32:30 - let's bring the triangle in a little bit
32:32 - so to do that we can
32:36 - okay first of all it's too far behind it
32:37 - so we'll change it to six thirds say
32:40 - now to get it a bit thinner we could
32:42 - just put a multiply in here say 0.5
32:45 - multiplier in each of these
32:48 - the left component the rear left and the
32:50 - rear right
32:55 - so hopefully that'll bring in the
32:58 - let's try
33:00 - yeah that's looking pretty good
33:05 - you can make your own sound effects we
33:06 - probably will add sound effects later
33:08 - that looks pretty cool you can adjust
33:09 - the size of it however you wish
33:12 - maybe you could just go with
33:15 - four thirds here
33:18 - what will that look like
33:22 - a bit too small isn't it depends what
33:24 - you like
33:26 - i'll put it back to six thirds sounds
33:28 - good
33:29 - great that's the thruster is there
33:30 - anything else we need to do here i think
33:32 - we're pretty much now reload that
33:35 - i think we're done for this tutorial
33:38 - you can turn off the center dot
33:40 - just need to
33:43 - where's the center dot here we go just
33:44 - stop drawing this
33:50 - and we have our asteroids ship that can
33:52 - go around and around thrusting along
34:00 - we're going to create the asteroids
34:01 - themselves that float around the ship in
34:04 - space so currently this is what our game
34:06 - does we have a little ship that flies
34:08 - around the screen
34:10 - wouldn't it be nice to have some
34:11 - asteroids floating around it
34:15 - so here's our code you can go ahead and
34:16 - download this from the link below so the
34:19 - first step would be to set up our
34:20 - asteroids uh variable
34:23 - so just underneath where we set up our
34:24 - ship we can create oh how about we set
34:28 - up
34:29 - asteroids
34:31 - so that'll just be a variable we'll call
34:33 - it roids just to keep it short roids
34:35 - equals a blank array
34:38 - and how about we create a function
34:40 - called create
34:41 - asteroid
34:43 - belt
34:45 - because during the game we'll probably
34:46 - have to call this a couple of times as
34:48 - we reset the screen and so on create
34:50 - asteroid belt that'll do
34:53 - so go down and create set that up
34:55 - somewhere here we go function
34:58 - create asteroid belt
35:01 - now what does it do probably the first
35:02 - step is to clear our
35:04 - uh clear hour of roy's array roids will
35:07 - equal
35:08 - that
35:10 - so i'm just clearing it because it may
35:12 - be populated during game
35:14 - secondly uh we want to loop over the
35:17 - number of asteroids that we'll be
35:18 - creating don't we so we could use a loop
35:20 - for that for so for
35:22 - i equals zero
35:26 - i is less than
35:28 - less than what how about we create a
35:30 - constant
35:32 - so up the top just create a constant
35:35 - we'll prefix all these by roids
35:38 - yeah roids
35:40 - num
35:41 - and we'll say there's three of them so
35:43 - this is the starting
35:46 - number of asteroids
35:50 - i say starting because as the difficulty
35:52 - increases we'll probably be increasing
35:53 - this as the level goes up
35:56 - roid's numb
35:57 - so i is less than
35:59 - roid's num
36:01 - i plus plus so that'll loop over all the
36:04 - asteroids now we want to add
36:07 - roids
36:09 - push
36:11 - that'll add something to our array
36:13 - how about we create a function called
36:15 - new asteroid
36:17 - again we'll probably need this for later
36:19 - on new asteroid
36:24 - um
36:25 - yeah we'll try that
36:27 - so we'll go make that down here
36:30 - function
36:32 - new asteroid
36:34 - we can create a variable called roid
36:36 - it's going to be an object
36:40 - and we'll return
36:42 - that object
36:43 - return roid now what do we need to know
36:46 - for each asteroid well we need to know
36:48 - an x y coordinate
36:50 - i think we should pass the x and y
36:53 - components because later on in the game
36:55 - we'll need to know the exact location so
36:58 - x will equal x y will equal y
37:01 - we'll need to know an x velocity which
37:03 - is going to be some random
37:07 - random velocity
37:08 - uh how about we set up a constant soon
37:11 - called roid's speed
37:14 - and we'll have to divide that by the
37:15 - frame rate
37:17 - we also want a random direction not only
37:19 - do we want a random magnitude we want a
37:21 - random direction so to achieve that we
37:23 - can go math
37:25 - random
37:26 - if math random is less than 0.5
37:30 - then multiply by 1 so it'll go in a
37:32 - positive direction else multiply by -1
37:35 - it'll go in a negative direction
37:37 - we can just copy and paste that for the
37:40 - y component as well
37:42 - we'll also want to know the radius of
37:45 - each asteroid it will change as we shoot
37:47 - them
37:48 - later on and that'll just be based on
37:50 - some
37:52 - roids
37:53 - size
37:54 - divided by two
37:57 - and we'll also want to know in a random
37:59 - angle
38:00 - so this has to be in this has to be in
38:02 - radians so math random times
38:06 - math pi times 2 which is the same as 360
38:09 - degrees
38:10 - so this will be
38:11 - in radians
38:15 - so let's go ahead and create these
38:17 - size and speed
38:19 - roid size and speed up here
38:25 - so
38:26 - roid's size will be
38:29 - let's say 100 so this will be the start
38:32 - maximum starting size now we'll say the
38:34 - starting
38:36 - size
38:38 - of asteroids
38:41 - in
38:41 - pixels
38:45 - okay android speed
38:48 - i'm just taking some guesses here about
38:50 - what sort of speed we want
38:52 - put in pixels per second so this will be
38:54 - the max
38:55 - [Music]
38:56 - starting speed
39:01 - not paid speed of asteroids in pixels
39:05 - per second okay
39:08 - so the starting size of asteroids in
39:09 - pixels is 100 and the star the max
39:12 - starting speed of asteroids in pixels
39:13 - per second
39:14 - which is 50 pixels per second
39:17 - that looks good
39:20 - because we're passing x and y we'll have
39:22 - to go and modify our call up here so
39:24 - there'll be some x and y value that
39:26 - we'll put through there now what's that
39:29 - going to be
39:30 - we can just create two variables here
39:32 - var x and y
39:36 - how about we just create two random
39:38 - positions on the on the screen so
39:41 - that'll just be math
39:42 - random
39:44 - times by canvas width
39:47 - canvas.width
39:50 - we'll probably want to round that down
39:52 - math
39:54 - floor
39:59 - and do a similar thing for the y
40:01 - direction except that we'll be using
40:03 - height
40:05 - i can think of one problem here we're
40:07 - potentially going to have asteroids
40:08 - landing on the ship we'll handle that
40:10 - soon
40:12 - right now let's go down to
40:14 - the update function
40:16 - so where we draw our ship let's after
40:19 - that we'll draw
40:21 - the asteroids
40:24 - so we'll have to loop through each of
40:26 - the asteroids in order to achieve this
40:28 - so va i equals zero
40:33 - i is less than the roids
40:41 - length is just a property i think
40:43 - and i plus plus
40:46 - first of all let's set up the color
40:49 - of the
40:51 - asteroids stroke style equal i looked
40:53 - this color up before slate gray just to
40:56 - get them a
40:57 - bit of a different color from the ship
40:58 - and we also need to set the line width
41:01 - line width will equal
41:03 - we can base it off ship size i think
41:05 - ship size divided by 20.
41:08 - now let's plot out what we're going to
41:09 - do here
41:10 - how are we going to draw these things
41:12 - well i think we need to draw a path
41:15 - through a path
41:17 - what shape are they going to be probably
41:19 - a polygon would be suited so draw the
41:22 - polygon we'll work out these details
41:24 - soon
41:25 - and we also want to move the asteroid
41:30 - move the asteroid
41:32 - and handle uh handle
41:35 - edge of screen so we don't want them
41:37 - floating off into space do we edge of
41:39 - screen
41:42 - good
41:43 - now let's go back up to our where we
41:45 - create our asteroids
41:49 - so we want to create a random number of
41:50 - sides so we can achieve that by
41:53 - we'll make a property called uh
41:56 - vert
41:57 - short for vertex or vertices
41:59 - so it'll be math
42:00 - random
42:02 - times
42:04 - we'll make a constant called say math
42:06 - roidsvert
42:08 - now in order to achieve what we want we
42:10 - want a random number of sides but we
42:12 - don't want sides equal to zero or
42:14 - something do we so let's first of all
42:16 - add one to this to increase our maximum
42:18 - to what we expect
42:20 - so that will be just have roid's
42:21 - verticals 10 so that'll give us a number
42:23 - between 0 and 10.
42:25 - as i said 0's
42:27 - zero sided polygon is no good so we have
42:29 - to add something to this how about we
42:30 - add half
42:32 - the roid's vert
42:34 - so that'll be five for example
42:36 - we'll need to
42:38 - find the floor of the list to make it an
42:40 - integer
42:42 - floor we don't want 3.5 sides for
42:45 - example
42:47 - so that'll if roid's vertical's 10
42:49 - that'll give us a random number between
42:51 - 0 and 10 plus half of 10 which is 5. so
42:54 - a random number between 5 and 15
42:56 - centered around this number
42:59 - sounds good
43:00 - don't need the semicolon again
43:03 - so let's go recruit go ahead and create
43:04 - that roids
43:08 - vert
43:09 - will equal 10 and this will be the
43:13 - average number
43:15 - of vertices
43:18 - vertices on each asteroid
43:23 - okay so head down to our update function
43:26 - so each asteroid will have a random
43:28 - number of vertices
43:30 - all the way down here
43:32 - right there we go draw a path
43:36 - right so to draw the path we need to
43:38 - context
43:39 - begin path
43:42 - and then we want to move to the first
43:44 - point so move to
43:47 - move to
43:48 - the first x y location
43:51 - i'm thinking to save us a little bit of
43:53 - time we should probably
43:54 - get the properties grab all the
43:56 - properties and put them into a
43:57 - variables here so get the asteroid
44:01 - properties just to save us a little bit
44:03 - of typing i think
44:05 - so we'll set up some variables here x y
44:09 - the radius the angle and the number of
44:12 - vertices
44:14 - so x will equal roids
44:17 - i
44:18 - dot
44:19 - x
44:20 - and then we can go ahead and do the same
44:22 - for all our other things so y
44:24 - will be the roid's eye right roids y i
44:27 - should say
44:28 - the radius will be dot r
44:32 - the angle will be dot a
44:34 - and the number of vertices will be dot
44:38 - vert
44:39 - okay so our initial point will be the x
44:42 - location the center of the asteroid plus
44:44 - the radius multiplied by the cosine
44:48 - the cosine of the angle
44:52 - similarly the y
44:54 - component will be the sine
44:57 - radius times the sine of the
44:59 - angle
45:01 - now to draw the polygon we'll have to
45:03 - loop over the number of vertices so we
45:05 - can set up a new variable to say j
45:07 - will equal zero
45:09 - j is less than the number of vertices
45:13 - j plus plus
45:16 - and we want to draw a line to each
45:18 - corner of the polygon so context line
45:21 - two
45:22 - line two
45:28 - so in a similar way to what we've done
45:30 - above so x plus the radius times the
45:34 - cosine of the angle
45:36 - but we'll have to modify it based on
45:38 - which vertices which vertex we're
45:40 - currently at
45:41 - so
45:42 - we could do that by modifying this by j
45:45 - times 360 degrees
45:47 - math pi times 2
45:50 - but we'll have to divide that by the
45:52 - number of vertices
45:55 - right so that'll for example if there
45:57 - was 10 vertices then this will modify
46:00 - the angle by 36 degrees each time which
46:02 - is what we want
46:04 - do the same thing for y except that we
46:06 - need to change it to sine
46:11 - after that we'll have to close the path
46:15 - and draw it by just going context dot
46:18 - stroke
46:19 - stroke
46:22 - right uh just quick review of our code
46:24 - just make sure there's no glaring
46:26 - mistakes um so we're going to create the
46:28 - asteroid belt
46:30 - and that should be a zero not an o
46:33 - divide by that math for random times
46:36 - can that should probably be canv
46:38 - not canvas
46:40 - right and they'll push some new
46:42 - asteroids
46:44 - set up some properties
46:45 - i think that's pretty good and then
46:47 - we'll draw them down in the
46:52 - uh
46:52 - update function down here
46:55 - let's try it
46:58 - there we go so we've got some randomly
47:00 - positioned
47:03 - randomly positioned polygons from size
47:05 - five so five sides to 15 sides i guess
47:08 - let's even get a five-sided one there's
47:10 - a seven
47:13 - just to make there we go there's a
47:14 - pentagon
47:15 - [Music]
47:16 - awesome but as i said mentioned earlier
47:19 - probably is that
47:22 - we don't want the asteroids to appear on
47:25 - the player like that
47:27 - so let's go ahead and fix that up now
47:30 - we can do that up in our create
47:32 - asteroids
47:34 - method create asteroid belt
47:36 - here we'll have to do something here
47:39 - we can handle this using a do while loop
47:42 - so do all of that
47:45 - while
47:48 - some condition
47:53 - now what is the condition we want a
47:54 - buffer don't we between the asteroid and
47:56 - the ship so how about we create a
47:58 - function called distance or dist between
48:02 - points distance between points and we're
48:04 - going to pass
48:05 - each of the coordinates so the ships
48:07 - location ship x ship y
48:10 - and the potential asteroid location x y
48:14 - now as long as that is less than some
48:16 - buffer so we'll just say the roids base
48:18 - it on the void size
48:20 - say times two
48:22 - plus the
48:24 - radius of the ship
48:25 - as long as it's less than that if it's
48:27 - less than that we'll keep creating new
48:28 - random points until it's not less than
48:30 - that
48:31 - so let's go ahead and create this
48:32 - function
48:35 - distance between points now what are we
48:36 - passing we're passing the points so x1
48:40 - y1
48:41 - x2
48:43 - y2
48:46 - alright so we're going to return now if
48:48 - you know your cartesian coordinate
48:49 - system
48:50 - it's the square root
48:52 - of the
48:54 - square
48:56 - so math power
48:58 - the square of x2 minus x1 x2 minus x1
49:02 - squared
49:05 - plus
49:07 - similar thing with the y component
49:09 - y
49:10 - power
49:11 - y2 minus
49:14 - y1 squared
49:17 - that should be okay
49:20 - let's try it
49:24 - it's hard to tell because there's only
49:25 - three
49:26 - there's only three
49:28 - roids how about we bump this up to say
49:30 - 300.
49:34 - ah there we go see that buffer zone so
49:36 - they've been randomly placed but they're
49:37 - not being randomly placed within our
49:39 - buffer zone you could adjust that to
49:41 - suit your
49:42 - taste how pretty
49:45 - put that back to three
49:49 - great that's that handled
49:51 - okay so what about the shape of these
49:54 - asteroids so just have a look at them
49:56 - they're perfect polygons aren't they
49:59 - not exactly very asteroid looking so
50:01 - let's add some jaggedness to this so how
50:03 - about we go up and create a
50:06 - constant called roid's jag
50:11 - and let's define that to be a number
50:13 - between 0 and 0.1 so let's pick a number
50:16 - 0.4
50:17 - this is the
50:19 - jaggedness
50:20 - of the asteroids
50:23 - and let's define that as
50:25 - zero equals none
50:27 - one equals lots
50:30 - okay
50:31 - now where we create our asteroids so in
50:34 - new asteroid let's create
50:37 - some
50:38 - variable some property which
50:41 - modifies the vertex location so each
50:44 - vertices will be one radius away from
50:46 - the center how about we create say
50:49 - an offset so offs that'll do offsets is
50:52 - just going to be an array
50:54 - and let's set up the array here
50:56 - so
50:58 - create the
51:00 - create the vertex
51:02 - offsets
51:04 - array
51:05 - okay so it'll be based on the size of
51:08 - the the number of vertices so var i
51:10 - will equal zero
51:13 - i is less than
51:15 - the
51:16 - roid dot
51:18 - vert
51:20 - i plus plus so we'll loop through for
51:23 - each vertex and create a random sort of
51:26 - multiplier to the radius
51:29 - okay so
51:30 - the maximum we'd want is the
51:33 - is so the minimum we want is zero and
51:35 - the maximum maybe say two two times the
51:37 - radius so that would be in the worst the
51:39 - most extreme situation
51:41 - so
51:42 - let's go roid dot offsets
51:46 - push
51:49 - we're going to push um a random number
51:54 - random number based off the jag so the
51:57 - roid's jaggedness
51:59 - and how we're going to handle it if it's
52:01 - so if it's zero we want nothing we just
52:03 - want it to be all of this to equal one
52:06 - if it's one it could potentially equal
52:08 - zero to two so how do we times this by
52:10 - two
52:11 - and add one minus the droid's jaggedness
52:16 - now does that work
52:18 - let's have a think about this so if it
52:20 - was zero
52:21 - zero times two is zero so it'll be zero
52:23 - plus one minus zero one okay that works
52:25 - fine so there'd be no jaggedness
52:28 - if it was maximum so if this equaled one
52:31 - we'd have 1 times 2 is 2 so 0 to 2 plus
52:34 - 1 minus 1 is 0. so b a random multiplier
52:37 - between 0 and 2. that sounds good how
52:40 - about in the middle 0.5 0.5 times 2 is 1
52:43 - so 0 to 1
52:45 - plus 1 minus 0.5 that would be a random
52:47 - number between 0.5 and 1.5 sounds good
52:51 - so we're populating this offset
52:55 - here great now how do we handle that
52:58 - let's go down to the
53:03 - asteroids here all we have to do is
53:05 - multiply this radius here by that offset
53:08 - so how about we create
53:10 - up here
53:14 - that should be vert doesn't really
53:16 - matter it's obviously declaring it
53:17 - anyway
53:19 - offs
53:22 - offs
53:24 - will equal roids
53:27 - i
53:29 - offs
53:31 - okay
53:34 - now the first point is going to be
53:37 - so this will be the radius times the off
53:42 - it'll be the first position won't it the
53:44 - office zero
53:46 - so whatever that random multiplier is
53:48 - it's going to multiply the radius by it
53:50 - and we're going to do a similar thing
53:56 - to here
53:58 - now how about here
54:00 - well it's not going to be zero it's
54:02 - going to be j isn't it
54:03 - it's going to be j in here
54:08 - but we've already done j equals zero up
54:10 - here
54:12 - so we don't how about we start one here
54:13 - so
54:14 - we'll start j at one
54:17 - yep that should work
54:19 - now let's have a look at see what that
54:20 - looks like
54:23 - hmm looking promising
54:25 - actually it's looking pretty good
54:29 - looking very good
54:31 - okay i think we solved it so
54:33 - let's go test different very different
54:35 - values of jaggedness
54:38 - say
54:39 - point let's do the extreme so one
54:42 - what will that look like
54:44 - yes you can see here they're very jagged
54:50 - okay now if it's zero there should be no
54:52 - jaggedness it should be a perfect
54:54 - polygon
54:56 - yep
54:57 - and then as you add more
54:59 - jaggedness so point one should be a
55:01 - little bit jagged
55:03 - yeah just a little bit depends what
55:05 - shapes you want in your uh i'm gonna go
55:07 - stick with point four that looks pretty
55:08 - good to me
55:12 - awesome
55:13 - now all we have to do now is move these
55:15 - things get them moving go down to where
55:17 - we had
55:19 - uh where are we draw the polygon close
55:22 - move the asteroid so that will just be
55:25 - roids
55:26 - i
55:28 - dot x
55:30 - plus equals
55:32 - roids i
55:34 - dot x v that's the velocity in the x
55:38 - direction
55:40 - similar for the y direction let's just
55:43 - oops
55:44 - this is probably one of the easier parts
55:45 - let's just check to make sure they're
55:46 - moving yeah
55:49 - so they're going at random speeds we
55:50 - could probably bump up the number of um
55:53 - bump up the number of roids to begin
55:56 - with just to see if say 10.
56:00 - yeah they're definitely going at
56:01 - different speeds different directions
56:05 - cool
56:06 - and the color is quite nice isn't it
56:10 - awesome
56:12 - let's put that back to three
56:15 - we also want to handle what happens when
56:16 - they go off the edge of the screen so
56:18 - currently if you look at these asteroids
56:20 - they go off the screen and then they
56:22 - disappear forever
56:23 - let's uh
56:25 - bring them back onto the other side of
56:26 - the screen
56:29 - handle the edge of the screen so if
56:31 - if
56:33 - roid's
56:34 - i
56:36 - dot x if that's less than zero
56:39 - minus
56:40 - roid's
56:42 - i
56:43 - dot radius
56:45 - if it's less than zero then it's gone
56:47 - off the left of the screen so we want to
56:49 - set
56:50 - roids
56:51 - i
56:52 - x to equal
56:55 - the canvas width
56:58 - plus
56:58 - the
56:59 - roid's
57:01 - i
57:02 - radius
57:03 - yeah
57:05 - um else
57:08 - it's not really an else it's probably
57:10 - more of an else if else if
57:14 - this situation
57:16 - roids
57:22 - roid's x is greater than the canvas of
57:25 - its plus plus its radius
57:27 - then we want to
57:29 - set
57:32 - to this
57:35 - roid's x will equal
57:37 - that
57:38 - that's for the x direction
57:41 - do a similar thing for the y direction
57:44 - so y
57:45 - y
57:47 - y
57:49 - y
57:50 - except it'll be based on height won't it
57:54 - height
57:56 - let's give that a go
58:00 - okay going off screen this right one
58:02 - here will it pop back on
58:04 - yep there it is over there
58:06 - there's one going off the bottom of the
58:07 - screen
58:09 - is it coming back on yep there it is
58:12 - so they're coming back on we can bump up
58:14 - the number of asteroids just to
58:16 - get a good feeling for it
58:18 - roids number
58:20 - ten
58:23 - there we go so one went off the top up
58:25 - there one's getting off the side here
58:30 - good
58:31 - i think that's looking good so that's
58:32 - the end of today's tutorial next time
58:34 - we'll focus on collision detection and
58:36 - making this
58:38 - making the ship blow up when it hits a
58:41 - when it hits an asteroid
58:46 - so in this tutorial we're going to
58:49 - allow the ship to crash into the
58:52 - asteroids by using collision detection
58:55 - so you can go ahead and download this
58:56 - code
58:57 - i'll have it in the link below
59:00 - so let's go ahead and create a flag
59:03 - called show bounding
59:06 - now this is just this show center dot i
59:08 - created off camera it's just a way for
59:11 - us to not delete code or not comment our
59:14 - code so we can always allow our
59:16 - development settings to stay there so
59:18 - for example show center dot
59:20 - if shows in a dot draw the center dot
59:22 - but we don't want that normally during
59:24 - game play so it's a nice convenient way
59:26 - to turn that off and we can do the same
59:28 - thing with our bounding boxes or our
59:30 - bounding circles to set that to true to
59:32 - begin with
59:33 - show or hide
59:36 - collision
59:38 - bounding
59:41 - so how are we going to represent our
59:43 - collision detection what shapes are we
59:45 - going to use for our bounding boxes well
59:47 - take a look at the game
59:48 - i'm thinking the simplest way is
59:50 - probably to
59:51 - just use a circle for everything so our
59:53 - ship would be represented with a circle
59:55 - and each asteroid would be represented
59:57 - with a circle it's not exact but it's a
60:00 - close approximation and i think it will
60:02 - do for such a high speed
60:04 - simple game
60:05 - so let's go ahead and use circles
60:09 - so let's draw our circle down in the
60:10 - update function where we draw our shear
60:13 - so draw the triangular ship just after
60:15 - we do that
60:16 - we will
60:18 - say if show bounding
60:20 - so if our bounding flag is on
60:22 - we want to set the color so the stroke
60:25 - style
60:26 - will equal say lime pick a color that u
60:30 - stands out
60:31 - uh we want to begin a path because
60:34 - that's how we do a circle
60:36 - and context dot arc
60:39 - now we need a center point which is
60:40 - going to be the center of the ship so
60:42 - ship dot x ship dot y
60:45 - and then we're going to use the ship's
60:47 - radius
60:50 - the
60:50 - start angle is zero the end angle is 360
60:54 - degrees which is just math pi times 2 in
60:56 - radians
60:58 - and false for that final flag
61:01 - finally we just need to draw the stroke
61:03 - itself
61:05 - let's test that out
61:09 - yeah so we've got a bounding circle
61:11 - around our ship
61:15 - similarly we want to do the same thing
61:17 - for each asteroid so go down to where we
61:20 - draw the asteroids just after we draw it
61:22 - before we move it
61:25 - paste that in there but instead of ship
61:27 - dot x we just want
61:28 - x because we've already declared x to be
61:31 - the ship sec sorry the asteroids x
61:34 - y and r
61:36 - let's test that out
61:38 - yep so each asteroid's got a circle
61:40 - around it the only problem is that the
61:41 - color of the circle has gone through to
61:43 - the asteroid we can fix that up by just
61:45 - changing where we set the color of the
61:47 - asteroid so currently we're setting it
61:49 - before the for
61:50 - loop just paste that into the start at
61:54 - the start of the for loop so it'll do it
61:56 - every iteration
61:58 - give that a go
62:00 - great so what's our goal our goal is
62:03 - when the circle of the
62:05 - ship touches the circle of any of the
62:07 - asteroids the ship will blow up
62:12 - so first things first i think we'll need
62:14 - to take out the moving of the asteroid
62:17 - so how about we just stick to our
62:19 - drawing so in our update function we're
62:21 - drawing the
62:22 - ship and we're drawing the asteroids
62:25 - let's take out the movement and put it
62:28 - elsewhere
62:33 - so here we're rotating the ship and
62:34 - moving the ship so we'll place the
62:36 - asteroid stuff after that
62:38 - so move the asteroids
62:42 - we'll have to do another for loop here
62:43 - four
62:45 - bar i equals zero
62:48 - i is less than roid's dot length
62:53 - i plus plus
62:57 - and just encapsulate that
63:01 - and test it to make sure that we haven't
63:02 - broken anything
63:04 - yep it's still working so the
63:06 - asteroids are still moving
63:10 - next we want to check for collisions
63:12 - for asteroid collisions so just copy
63:14 - this first line of the for loop now
63:16 - before we start moving everything so
63:17 - before we start rotating the ship
63:20 - let's check for asteroid collisions
63:26 - right so we're going to cycle through
63:27 - every asteroid and check whether the
63:30 - distance between so this is a function
63:32 - we made before distance between points
63:35 - uh so the ship's x value
63:38 - the ship's y value
63:40 - and the asteroid so roids i dot
63:44 - x and the roids
63:48 - i dot
63:49 - y so if the distance between the
63:52 - individual asteroid and the ship
63:54 - is greater sorry is less than the ship's
63:59 - radius
64:00 - plus the
64:02 - roid's radius so the asteroid's radius
64:06 - that means the circles have overlapped
64:09 - what will we do there how about we just
64:11 - call a function called explode ship
64:13 - which we haven't made at the moment so
64:15 - if we if we run this now it should try
64:18 - to call this function and break it
64:19 - should stop working so let's try it
64:24 - right so we've got the ship let's try to
64:25 - crash into an asteroid
64:27 - yeah it's broken so as soon as those two
64:28 - circles met
64:30 - the it's tried to call that function and
64:33 - broken good that means it's working
64:36 - okay let's create that function explode
64:38 - ship
64:39 - first of all just copy this text sorry
64:41 - this code here to create a circle
64:45 - so up in this function so function
64:49 - explode ship
64:51 - let's just create a circle let's create
64:53 - a filled circle so it's an obvious sort
64:56 - of graphical
64:57 - indication that the collision detection
64:59 - is working so create a fill style
65:02 - the same color lime the x and y
65:04 - coordinate will be the x and y of the
65:06 - ship
65:07 - as well as the radius of the ship
65:11 - and we'll also call the fill method so
65:14 - we'll call it be calling a fill and a
65:15 - stroke
65:17 - let's test that
65:19 - so when we collide into a asteroid come
65:22 - on asteroids where are you there's one
65:24 - down there
65:25 - we should change
65:27 - to a field circle awesome and when we
65:30 - leave we're no longer filled
65:32 - good that means our detection our
65:34 - collision detection is working very well
65:37 - great
65:39 - okay what do we ultimately want to do
65:40 - here i'm thinking we should set
65:42 - so i'll just cut this i'm thinking we
65:44 - should set some property of the ship
65:46 - let's call it say explode time
65:49 - explode time and that will equal
65:52 - we'll say it's equivalent to the number
65:53 - of frames left in the explosion so
65:56 - that'll equal some constant say ship
65:59 - explode
66:01 - say duration
66:03 - multiplied by so that'll be in seconds
66:05 - multiplied by the frame rate
66:06 - to get the number of frames
66:08 - uh because we want an integer we should
66:10 - probably
66:11 - find the so let's say seal we'll find
66:13 - the we'll round up in effect
66:17 - okay
66:18 - so let's create this ship explode
66:20 - duration constant
66:24 - ship
66:25 - explode duration and it'll be in seconds
66:29 - so just choose a number 0.3
66:32 - so this will be the duration
66:35 - of the
66:36 - ship's explosion
66:40 - right where we set up the ship initially
66:43 - we'll have to give that an explode
66:46 - what do we call it explode time
66:50 - and initially it'll be zero won't it
66:52 - that means there'll be zero frames left
66:55 - of exploding
66:56 - and that's how we're going to detect
66:58 - whether the ship is exploding or not
66:59 - when explode time equals zero it's
67:01 - exploding
67:03 - so go down to the update function
67:06 - how about the first thing we do just
67:07 - create a variable
67:09 - so it's going to be a boolean
67:11 - called exploding
67:14 - and that'll equal
67:15 - ship
67:16 - dot
67:17 - explode time
67:20 - equals
67:21 - zero
67:23 - no
67:24 - greater than zero so if the
67:27 - ship's explode time is greater than zero
67:29 - that means the ship is exploding
67:32 - okay
67:34 - so where will we draw this explosion
67:36 - i'm thinking instead of drawing the ship
67:40 - we'll draw the explosion in its place so
67:42 - if not exploding
67:46 - so if not exploding we'll draw the ship
67:53 - else
67:54 - we'll
67:55 - draw
67:57 - the explosion
68:00 - what will the explosion look like well
68:02 - i'm thinking just some circles to keep
68:03 - it simple so here we'll copy and paste
68:05 - this code here
68:07 - but we'll use filled circles so fill
68:10 - style will equal
68:12 - red
68:15 - the ship's radius how about we try
68:18 - times by 1.5 say
68:22 - and we need to call the fill method
68:25 - and how about we work inwards so we'll
68:27 - start with the outer circle which is red
68:29 - and then we'll make say three more
68:34 - red
68:36 - orange
68:38 - yellow
68:40 - and say white for the middle
68:43 - we'll change these radius percentages
68:46 - how about we'll decrement it by 0.3 each
68:48 - time so 0.9 here and 0.6
68:53 - for the inner circle
68:54 - let's take a look at that
68:58 - crash into a asteroid
69:01 - um it's looking okay maybe a bit bigger
69:03 - in the middle and maybe we need another
69:05 - ring on the outside i think
69:07 - and we'll get rid of that
69:09 - uh
69:10 - bounding so i'll turn that to false show
69:12 - bounding
69:15 - explosion
69:16 - where are you here we are
69:18 - so what did i say maybe make it a little
69:20 - bit
69:21 - less in the middle so reduce that by 0.1
69:25 - so that'll be 1.1 that'll be 1.4
69:28 - and we'll also do one more ring on the
69:30 - outside a bit of a darker red
69:33 - i assume dark red is a html color
69:37 - and change that to 1.7
69:39 - let's see what that looks like
69:43 - so there's no bounding circles now let's
69:46 - crash yeah that's pretty good i reckon
69:49 - we'll stick with that one
69:52 - if you go back to our game
69:53 - just restart that
69:55 - you'll notice that when we crash into
69:58 - an asteroid we can continue moving and
70:00 - our thruster is still working
70:02 - that's not what we want we kind of want
70:04 - to stop in place and just explode
70:06 - okay so let's fix that now
70:09 - so let's go up to our thruster
70:12 - so just up here draw the thruster we
70:14 - don't want to do that when we're
70:15 - exploding so if
70:17 - exploding
70:22 - that should be if not exploding
70:24 - if we're not exploding then we're happy
70:26 - to draw the thruster
70:33 - okay let's try that out quickly
70:38 - yep so there's no thruster coming out
70:40 - the side or the rear of the explosion
70:42 - that's good also we don't want to be
70:45 - moving the ship so go down to where we
70:47 - move our ship here we go rotate the ship
70:49 - move the ship
70:50 - we also don't want to be checking for
70:52 - asteroid collisions so we can include
70:54 - that in here so if not
70:56 - exploding
71:00 - we don't want to rotate we don't want to
71:02 - move and we don't want to check for
71:03 - collisions
71:07 - let's test that
71:11 - so i'm pushing forward
71:13 - bang i'm still pushing forward trying to
71:15 - turn nothing's happening great
71:18 - so what happens when the ship is
71:20 - exploding well we can handle that here
71:23 - in and else so else the ship is
71:25 - exploding
71:26 - we want to take the duration of the
71:28 - explosion into consideration so we can
71:30 - do that by ship dot explode time minus
71:33 - minus so we'll reduce the amount of time
71:36 - left on the explosion now what happens
71:38 - when that reaches zero so if
71:40 - ship dot explode time equals zero
71:45 - that means we should end the explosion
71:47 - so how about we create a new ship so
71:49 - ship will equal
71:51 - new ship now new ship is just a method
71:53 - i'm just creating
71:54 - well we'll go create that now so new
71:56 - ship
71:59 - now all it will do is basically this so
72:01 - where we set up the initial space
72:03 - ship we'll just cut that we can change
72:06 - that to new ship
72:10 - go
72:11 - go down
72:12 - to where we just after new asteroid will
72:14 - create new ship
72:16 - function
72:18 - new
72:20 - ship
72:21 - and what does it do it just returns
72:25 - that thing that we had
72:27 - copied
72:30 - okay
72:32 - let's test that
72:37 - okay so we'll fly our ship into an
72:39 - asteroid
72:40 - bang
72:43 - and we're resetting
72:44 - now there is one issue with this
72:46 - what if the asteroid is coming towards
72:48 - our initial restart position like this
72:52 - bang bang bang bang bang that's no good
72:54 - is it how the original game handles this
72:56 - is by allowing the player to blink for a
72:59 - few seconds before they start the game
73:01 - and this prevents any explosions from
73:03 - occurring so like an invulnerability or
73:05 - an invincibility or something similar so
73:07 - let's implement something like that
73:10 - we'll need to go up the top and
73:12 - set some parameters here
73:16 - so how about we have an invisibility
73:18 - duration or invulnerability duration
73:20 - we'll set that to say three seconds
73:23 - duration of the ship's invisibility
73:28 - in seconds
73:30 - and we'll also want to know how long is
73:31 - each individual blink during that
73:33 - invisibility so we'll call that say ship
73:36 - blink duration
73:39 - and it can equal say 0.1 second so 0.1
73:42 - second it will stay off 0.1 second will
73:44 - turn back on
73:45 - duration of the ships
73:47 - blink
73:49 - during invisibility
73:52 - in seconds
73:55 - okay
73:56 - go down to where we create our share
73:59 - well i need to set up a couple of
74:00 - properties here so we'll have one called
74:02 - say blink time
74:04 - that'll be the we'll round up so math
74:06 - seal
74:08 - it'll be equal to the ship
74:10 - blink duration
74:11 - times the frame rate
74:14 - so the frame rate's 30 right blink
74:16 - duration is 0.1 so there'll be three
74:19 - frames every third frame it'll blink on
74:21 - and off
74:22 - and we'll also want to
74:24 - have the blink number keep track of the
74:27 - blink number
74:30 - so that will be equal to the ship
74:35 - uh invisibility direction so that's
74:37 - three seconds
74:38 - divided by the ship's blink duration so
74:41 - that'll be a total of 3 divided by 0.1
74:43 - so 30
74:44 - blinks so there'll be 15 off and 15 on
74:49 - that sounds good
74:50 - so just down below in our update
74:52 - function let's create another variable
74:54 - called blink on say
74:57 - blink on and that will be equal to well
75:00 - let's say that when the blink number is
75:02 - even then we'll be blinking on when it's
75:04 - odd we'll be blinking off so we can
75:06 - handle that by using so ship dot blink
75:11 - num
75:12 - mod two
75:14 - when that equals zero so when the
75:15 - remainder of dividing that by two equals
75:17 - zero that means it's an even number else
75:20 - it's an odd number
75:22 - right so where we draw our ship
75:24 - so if not exploding
75:26 - inside there so if
75:28 - blink is on
75:29 - if blink on we want to draw the ship
75:39 - how about underneath that we handle the
75:40 - situation we'll just say handle blink
75:43 - handle blinking
75:46 - so we need to so if the ship
75:50 - blink
75:51 - number is greater than zero that means
75:52 - we have to do something here
75:55 - how about we reduce the blink time so
75:58 - that's what's keeping track of the blink
76:01 - duration
76:03 - so blink ship
76:05 - dot
76:06 - blink
76:07 - time
76:10 - minus minus
76:12 - and we also want to reduce the blink num
76:16 - blink
76:17 - num
76:18 - reduce the blink num ah so that's if
76:21 - ship
76:22 - dot
76:23 - blink time
76:27 - equals zero
76:28 - if that equals zero then we want to well
76:30 - we have to reset that don't we so reship
76:32 - dot blink
76:35 - time
76:36 - will equal
76:38 - math dot seal
76:40 - rounding up
76:42 - uh the ship's
76:44 - blink duration times the frame rate
76:49 - and we'll also decrement the
76:51 - blink num so ship
76:54 - dot
76:54 - blink
76:56 - num
76:56 - minus minus
76:58 - hopefully that should work
77:04 - okay it's a blink and it lasted a number
77:06 - of seconds let's see if that works after
77:08 - we smash
77:09 - one
77:10 - two
77:11 - three
77:12 - yep
77:13 - good it seems to be working the only
77:15 - thing we haven't done is that we haven't
77:17 - incorporated invulnerability yet have we
77:19 - we haven't changed the collision
77:22 - we haven't included blinking the
77:24 - collision control so let's deal with
77:26 - that now
77:28 - so let's go down to where we handle
77:29 - collision control
77:32 - move the asteroids here we go so check
77:35 - for asteroid collisions
77:37 - so
77:38 - we only want to do that if the ship's
77:41 - blink num
77:43 - equals zero so that means we're not
77:45 - currently blinking if the ship's blink
77:47 - num equals zero
77:48 - we'll handle collisions
77:51 - so if it doesn't equal zero it'll ignore
77:53 - collisions it'll make us invulnerable
77:56 - let's test that we'll probably need to
77:58 - uh
78:00 - bump up the number of asteroids a bit so
78:03 - as roid num let's make 30.
78:08 - okay so we're in
78:10 - invulnerable bang
78:13 - yep
78:15 - bang so invulnerable while we're
78:16 - blinking
78:18 - oops let's see if i can not hit one
78:21 - good so i'm not just blinking all the
78:23 - time bang now i'm invulnerable
78:27 - one thing i noticed is that our thruster
78:29 - is still
78:30 - not blinking we should probably make
78:31 - that
78:32 - blink let's go back and fix that
78:36 - so just reduce that back down to three
78:39 - head down to where we draw our thruster
78:41 - so draw the thruster if not exploding
78:44 - and
78:45 - blink on
78:47 - then we'll draw the thruster let's test
78:49 - it
78:50 - yep so our thruster is blinking as well
78:53 - let's crash into an asteroid bang are we
78:55 - still invulnerable yes
78:59 - just smashing it on yep everything looks
79:01 - to be good so that's the end of today's
79:03 - tutorial so we've looked at collision
79:05 - control and blowing up the ship next
79:07 - we'll focus on shooting so using the
79:09 - laser of the ship by pressing the space
79:11 - bar and blowing up asteroids
79:16 - currently our code allows us to fly ship
79:18 - around and smash into asteroids but
79:21 - apart from that we can't do anything
79:22 - else so in this tutorial we're going to
79:24 - create a laser effect so we'll be able
79:26 - to press the space bar and shoot these
79:29 - pesky asteroids
79:31 - so you can go ahead and download this
79:32 - code if you don't already have it
79:34 - first of all let's create some constants
79:36 - how about we create
79:38 - one called
79:40 - laser
79:41 - max so that'll be the maximum number of
79:43 - lasers on screen at once
79:45 - we'll set that to say 10 to begin with
79:48 - so that'll be maximum
79:51 - number
79:52 - of
79:54 - lasers on screen
79:56 - at once
79:59 - and we'll also have say the laser speed
80:02 - because we'll need to know how fast
80:03 - these little things travel
80:05 - we'll put that in say pixels per second
80:08 - uh
80:10 - speed of lasers
80:13 - in
80:14 - pixels per second so how will we detect
80:19 - when the space bar is pressed well we
80:22 - can go down to where we detect our other
80:24 - key presses so in the key down method
80:26 - just copy and paste one of those cases
80:28 - there
80:30 - the key code for spacebar is 32
80:34 - so let's label that space
80:36 - bar and what will it do
80:38 - it will shoot the laser
80:40 - so let's just create a function name
80:43 - here shoot
80:45 - laser
80:46 - there we go we'll implement that after
80:50 - now in
80:51 - the key up method so when the spacebar
80:54 - is released what should we do
80:56 - well i'm thinking when we
80:58 - press the spacebar we should lock the
81:00 - shooting so you can only shoot once per
81:02 - press
81:03 - so here we should allow
81:06 - shooting
81:07 - again
81:08 - so when when we release the spacebar
81:10 - let's allow shooting so we could
81:12 - probably handle that with a property on
81:14 - the ship
81:15 - called say can
81:16 - shoot
81:18 - and we'll set it to true here can shoot
81:20 - equals true
81:22 - let's go down and add that to the ship
81:24 - now so in the new ship method
81:28 - can shoot
81:29 - it should start off as true shouldn't it
81:31 - we want to allow shooting to begin with
81:34 - we'll also need to keep track of our
81:35 - lasers so they can be kept kept track of
81:39 - here
81:40 - in the ship
81:41 - and it's just an empty array to begin
81:43 - with
81:44 - so just below let's create our shoot
81:46 - laser function so function
81:50 - shoot
81:51 - laser
81:54 - in that we want to create the laser
81:58 - object
81:59 - [Music]
82:00 - and we also want to prevent further
82:02 - shooting
82:05 - that's fairly simple to manage just go
82:07 - ship dot can shoot equals false
82:12 - now before we add a new laser object we
82:14 - want to check a couple of things so if
82:17 - one the ship can shoot so if the ship
82:19 - can shoot
82:21 - and
82:22 - the ship dot lasers array
82:26 - the length of that
82:28 - is less than our laser max
82:34 - right
82:35 - if both of those conditions are true we
82:37 - can add we can safely add a new laser
82:40 - so to add a new laser we just go ship
82:42 - dot
82:43 - lasers
82:44 - push
82:47 - we'll want to put this in curly braces
82:49 - because it's an object that we'll be
82:50 - creating here we'll need to know the x
82:53 - coordinate and the y coordinate
82:55 - where we'll be shooting from i think
82:57 - we'll be shooting from the nose of the
82:58 - ship so from the nose
83:02 - of the ship
83:03 - and we have used that code before just
83:05 - need to go down to where we draw our
83:07 - ship
83:08 - uh where is it here it is nose of the
83:10 - ship so just copy both of those there
83:13 - the x and y coordinates
83:18 - paste them in there
83:21 - that'll be the y
83:25 - just need a comma there we'll also need
83:27 - to know the x velocity
83:30 - which will be based on the laser
83:32 - speed
83:34 - times by the cosine of the ship's angle
83:38 - lots of trigonometry in this
83:41 - divided by the frame rate to get
83:44 - pixels per frame
83:46 - and similarly for the y velocity
83:50 - except that it'll be the sine of the
83:52 - ship's angle
83:54 - so let's go down and draw our lasers we
83:57 - can do that after we've drawn our ship
84:00 - so just after the collision
84:03 - circles there in the center dot so draw
84:06 - the
84:07 - lasers so we'll have to use a for loop
84:11 - var i equals zero
84:14 - i is less than the ship dot lasers
84:19 - dot length
84:21 - i plus plus
84:25 - uh we'll have to set the context fill a
84:28 - fill style i'm thinking we'll draw small
84:30 - circles to represent the lasers now
84:33 - check some of these colors out before so
84:34 - i'm just going to use salmon for the
84:36 - laser color it's quite nice
84:39 - we'll need to begin the path to draw a
84:41 - small circle
84:43 - and we'll need to use the arc method
84:46 - arc
84:47 - and we need to know the x that'll be the
84:48 - ship dot lasers
84:51 - i
84:51 - dot x
84:54 - the ship dot lasers
84:58 - dot y
85:00 - the radius we'll base that off the size
85:02 - of the ship so we've got a ship size
85:05 - say divided by 15.
85:09 - the start angle is just zero
85:12 - the end angle is math pi
85:15 - times two which is effectively 360
85:17 - degrees
85:20 - the final flag doesn't matter
85:24 - and we'll need to draw we'll need to
85:26 - call the context fill method to draw
85:29 - this
85:30 - let's just test that now they shouldn't
85:32 - move at this stage
85:35 - cool so they're appearing at the nose of
85:38 - the ship that's promising and we can
85:39 - only should only be able to do 10 of
85:41 - them yep
85:43 - great
85:45 - so let's go down and move the lasers so
85:47 - just after we move the ship
85:50 - move the lasers
85:52 - again we'll need to use a for loop so
85:54 - for i equals
85:56 - zero
85:57 - i is less than the ship
86:00 - lasers dot length
86:03 - i plus plus
86:07 - so what we'll need to do here is just go
86:08 - ship
86:09 - dot lasers
86:11 - i the x position plus equals
86:15 - ship
86:17 - dot lasers
86:20 - i xv which is the velocity in the
86:25 - x direction similarly for the y
86:29 - we just need to modify it by yv
86:31 - let's test that
86:34 - so shooting lasers oh not quite going in
86:37 - the direction we want
86:38 - i see the problem
86:40 - one of the i guess the y so back up
86:42 - where we shoot our lasers
86:44 - shoot shoot shoot lasers
86:47 - i see the yv needs to have a negative
86:49 - there because negative is upwards on the
86:51 - screen let's give that a go
86:56 - great
86:57 - now the only issue is that once we run
86:59 - out of those 10 shots there's no more
87:02 - they're forever flying off into space
87:04 - so let's fix that up now
87:06 - the first thing we can do is handle the
87:08 - edge of screen so just go down to where
87:10 - we move our laser
87:12 - draw the lasers
87:15 - move the lasers
87:17 - handle edge of screen
87:21 - so we've done this affair a few times
87:22 - with other objects so all we need to do
87:24 - is say if let's copy
87:27 - this make it easier for me
87:30 - if the ship sorry the laser's x position
87:33 - is less than zero
87:35 - then we just want to set it
87:38 - to equal
87:40 - the canvas width
87:45 - else if
87:46 - the laser's x position
87:49 - is greater than the canvas width
87:53 - [Music]
87:55 - then we want to set it to zero
88:00 - copy all that we'll do the same sort of
88:02 - thing for the y position
88:07 - the y position
88:08 - the y
88:10 - y
88:12 - y
88:14 - and instead of the width we'll use the
88:16 - height
88:19 - okay let's give that a go
88:23 - shooting some lasers
88:26 - yep i can only shoot 10 and as you can
88:28 - see they forever fly around and around
88:30 - the screen
88:31 - so what we'll probably need to do is set
88:33 - some maximum distance they can travel
88:35 - and then they kind of fizzle out or just
88:37 - dissipate or whatever
88:39 - so let's do that
88:40 - now firstly let's go all the way up the
88:43 - top
88:45 - and create a constant
88:48 - called say laser distance or just laser
88:51 - dist and let's make it a fraction of
88:53 - screen width so choosing a fraction i'm
88:55 - going to say 0.6
88:57 - and we'll call we'll define this as max
89:00 - distance
89:02 - laser
89:03 - can travel
89:05 - as
89:06 - fraction
89:07 - of screen
89:09 - width
89:11 - we'll also need to set up a property on
89:13 - the laser so go down to shoot laser
89:16 - and just here we'll add a property
89:18 - called dist
89:20 - distance traveled
89:22 - and we'll set it started at zero
89:25 - so let's head on down to where we move
89:27 - our laser
89:29 - uh move the laser just after where we
89:31 - update its position let's calculate
89:35 - calculate the distance
89:38 - traveled
89:41 - so ship dot lasers i dot distance plus
89:47 - equals
89:48 - and we'll have to use a pythagoras
89:50 - theorem here so a squared plus b squared
89:53 - equals c squared so the square root
89:57 - of
89:58 - the square so math
90:01 - power
90:04 - of uh
90:06 - this here
90:07 - the x velocity component that's what
90:09 - we're adding each time
90:11 - so the power of that
90:14 - sorry the square of that
90:15 - plus
90:17 - math
90:18 - power
90:21 - the square of the y velocity
90:25 - all square rooted should give us the
90:28 - distance
90:29 - and what do we need to do with that
90:30 - distance
90:31 - well before we move
90:34 - our ship so this will be
90:36 - move the it's not the ship is it move
90:39 - the laser
90:41 - we'll want to
90:44 - check
90:45 - distance
90:46 - traveled
90:48 - and we want to delete the laser if this
90:51 - happens don't we so if
90:54 - ship
90:55 - dot laser dot distance
90:58 - is greater than
91:01 - the
91:03 - laser distance now that's as a
91:04 - percentage of as a fraction so times the
91:07 - canvas width
91:09 - [Music]
91:11 - if it's greater than that
91:15 - then that means it's gone far enough and
91:17 - we want to delete it
91:19 - there's a couple of ways we can delete
91:21 - from an array i'll be using the splice
91:23 - command so ship
91:25 - lasers
91:27 - splice
91:29 - and splice takes the start number which
91:31 - is going to be i
91:33 - and the delete count which is just one
91:35 - we just want to delete one thing now the
91:37 - issue with splice is that it permanently
91:40 - changes the size of this array meaning
91:42 - our for loop will have some problems so
91:45 - we can get around this but instead of
91:48 - going forwards in the loop we'll go
91:50 - backwards so var i will equal
91:53 - the length of the array minus one
91:57 - and we'll go until i is greater than or
92:00 - equal to zero and instead of
92:03 - incrementing we'll decrement so i minus
92:05 - minus
92:07 - uh
92:08 - so that'll be removed so we won't want
92:10 - to continue in this we won't want to try
92:13 - to move the laser because it won't be
92:15 - there so we'll hit we'll hit will write
92:18 - the continue command now all that does
92:21 - it skips over the rest of this and goes
92:23 - to the next iteration of the for loop so
92:25 - that should be okay
92:28 - let's give it a go
92:31 - shooting lasers
92:33 - yep they are not going on forever how
92:35 - about we change it to something a bit
92:37 - smaller so the laser distance
92:40 - will change to something a bit smaller
92:42 - say 0.2 just so we can get a real good
92:44 - feel for it
92:47 - shoot some lasers
92:50 - awesome so we can un unlimitedly shoot
92:53 - these lasers
92:54 - because they're
92:55 - destroying themselves after they reach
92:57 - point two
92:58 - of screen width
93:01 - let's just change that back to point six
93:04 - now we need to detect when the lasers
93:06 - actually strike the asteroids so head
93:09 - down to our update function just under
93:11 - where we draw our lasers
93:13 - draw the lasers
93:16 - so we'd like to detect
93:18 - [Music]
93:20 - laser hits
93:22 - on asteroids
93:25 - right i'm thinking we'll probably need
93:27 - to use some variables here just to make
93:28 - it a bit cleaner so we'll have the
93:30 - asteroid x the asteroid y
93:32 - the asteroid r the laser x and the laser
93:36 - y
93:38 - so we'll need to do a for loop backwards
93:40 - again because we'll be removing
93:42 - asteroids so we'll have
93:44 - i
93:45 - will equal roids dot length
93:48 - minus one
93:51 - i is
93:53 - greater than or equal to zero
93:56 - i minus minus
93:59 - right so we can grab the properties of
94:01 - the
94:02 - grab the asteroid
94:06 - properties
94:07 - [Music]
94:08 - so ax will equal roids
94:13 - roids i
94:15 - dot x
94:18 - similarly for the other one so a y the
94:21 - asteroids y will be that
94:24 - and the asteroid's radius will be that
94:29 - okay now we can loop
94:31 - over loop over the
94:34 - lasers
94:37 - yeah so we'll have to work go backwards
94:39 - with this one as well because we'll be
94:41 - removing the laser after it strikes
94:43 - the
94:44 - asteroid
94:46 - let's use a different variable j so j
94:48 - will equal the ship dot
94:51 - lasers
94:53 - dot length
94:55 - -1
94:57 - j is greater than or equal to zero
95:00 - j minus minus
95:05 - let's grab the
95:07 - laser properties
95:09 - [Music]
95:10 - so l x will equal ship dot lasers
95:15 - j
95:17 - dot
95:18 - x
95:21 - and the l y the laser y will be just the
95:24 - dot y one so we've got all the
95:26 - properties now
95:27 - now we need to detect
95:29 - when
95:30 - detect hits or to say detect hits
95:33 - so what happens how can we determine
95:36 - that well let's use a condition so if
95:38 - the distance between points that's one
95:40 - of the
95:41 - functions we made earlier on
95:44 - so the
95:44 - x1 y1 is the asteroid x the asteroid y
95:49 - x2 is the laser x and the laser y now if
95:53 - the distance between the asteroid and
95:55 - the laser
95:56 - is less than the asteroid's radius
96:00 - then we've got ourselves a hit we don't
96:02 - need to worry about the radius of the
96:05 - laser it's too insignificant it's only
96:07 - small
96:08 - so that's a hit now what do we want to
96:10 - do here well we want to remove
96:13 - the laser
96:15 - so that will be done with a splice
96:16 - command so we can go ship dot
96:20 - lasers
96:22 - j
96:24 - sorry lasers dot splice
96:28 - and in brackets we can go j
96:30 - comma one
96:32 - and we also want to remove the asteroid
96:35 - well there's more we want to do but this
96:37 - is just a temporary placeholder so we'll
96:40 - go roid
96:42 - roids
96:43 - dot splice
96:46 - i
96:48 - comma
96:49 - 1 so that should remove the laser remove
96:52 - the asteroid and we don't need to
96:53 - continue cycling through
96:56 - this for loop once the laser one once
96:58 - we've detected a laser striking the
97:00 - asteroid and it's destroyed we can break
97:02 - this
97:04 - break let's give that a go
97:10 - right so there's some asteroids let's
97:12 - shoot one
97:13 - good it's disappearing
97:16 - there's another one
97:18 - bang bang
97:20 - now in the
97:22 - original game when you shoot one of
97:24 - these big asteroids it actually breaks
97:26 - into two medium-sized asteroids and then
97:28 - when you shoot a medium-sized asteroid
97:30 - it breaks into two smaller asteroids and
97:33 - then finally when you shoot a smaller
97:34 - asteroid it's dead it's completely dead
97:37 - so we'll do the same sort of
97:38 - functionality
97:41 - i'm thinking we should
97:42 - have a method call here say destroy
97:45 - asteroid
97:47 - now the reason being we'll pass its
97:49 - index the reason being is that there's
97:51 - also another situation that we can
97:52 - destroy an asteroid that's if we ram our
97:55 - ship into an asteroid it also gets
97:57 - destroyed like kamikaze pilot or
97:59 - something
98:01 - now if we go up to our new where we
98:03 - create the asteroid so new asteroid
98:06 - because we're going to have various
98:07 - sizes i'm thinking that we'll need to
98:11 - pass the radius in here
98:14 - right so we have to find out where we're
98:16 - calling this so far and update it it's a
98:18 - new asteroid
98:21 - we'll pass that instead
98:23 - i'd like to keep these as integers
98:25 - because we'll be using them as to
98:27 - compare what's to figure out what size
98:29 - the uh asteroids are so we'll just do a
98:32 - math seal there
98:34 - because this roid size is we don't know
98:36 - what that could be somebody could set it
98:38 - to 77 right so there could be a fraction
98:40 - there
98:42 - good now let's create the
98:45 - destroy
98:47 - asteroid function
98:49 - now it will take the index won't it
98:52 - that's what we passed earlier
98:53 - destroy asteroid let's grab some of the
98:56 - properties first so the x value will
98:58 - equal the roids
99:01 - index that's the index being passed
99:06 - dot x
99:07 - and we'll grab the y component
99:11 - and we'll also grab the what else do we
99:13 - need to know
99:15 - the radius
99:18 - i think so
99:22 - of course we need to know the radius
99:23 - because we need to
99:25 - split
99:26 - the
99:27 - asteroid
99:30 - into
99:31 - if necessary
99:33 - remembering only the bigger ones need to
99:34 - be split necessary
99:37 - so if
99:38 - the radius
99:41 - equals
99:42 - so if the radius of the asteroid being
99:44 - hit is equal to the
99:47 - basically this
99:49 - that means it's the original size the
99:51 - biggest size if it equals that we need
99:54 - to split it into two
99:55 - so what how we can do that is just go
99:57 - rides
99:58 - push
100:00 - new asteroid
100:03 - new asteroid and it requires
100:06 - x y and r so the x will be
100:09 - equal to the same we'll just set it to
100:11 - the same point so x
100:13 - the y will be the same the radius will
100:15 - be half the size
100:17 - so we'll
100:18 - divide by four instead of dividing by
100:20 - two
100:22 - okay and we want to do that twice
100:24 - because they split into two
100:26 - now naturally because we're calling this
100:28 - new asteroid method they'll also have
100:30 - random velocities and so on so that'll
100:32 - be fine
100:35 - else if
100:38 - r
100:39 - equals
100:41 - now if it equals this here
100:44 - that means it's a medium one that's been
100:46 - that's been hit
100:48 - if it equals that
100:50 - we want to do a similar sort of thing so
100:52 - we'll just copy all that
100:55 - but we want to break it into even
100:57 - smaller pieces so divide by eight
100:59 - at the same location
101:02 - and finally destroy the asteroid so the
101:05 - original asteroid that's been split
101:08 - that's just where we can go uh
101:10 - roids
101:13 - split uh splice
101:16 - roids splice now the start number is the
101:20 - index
101:21 - and we just want to remove one
101:24 - destroy index
101:26 - we also want to call this don't we
101:27 - elsewhere let's call that where our ship
101:30 - smashes into
101:32 - something
101:34 - uh draw the lasers hits on the asteroids
101:37 - check for asteroid collisions when not
101:39 - exploding yep so when we explode the
101:41 - ship we also want to
101:44 - destroy the asteroid now which number
101:47 - asteroid it'll be equal to i here
101:51 - i
101:53 - let's give it a go hopefully it'll work
101:57 - so first of all there's a asteroid
101:59 - there's one un shoot it
102:02 - great it's splitting into two
102:04 - the medium one's splitting into
102:07 - smaller ones now how about the smaller
102:09 - ones yep they're getting destroyed
102:12 - awesome amazing we got that right first
102:14 - time around
102:16 - so it seems to be working really well
102:18 - except we just need to test whether
102:20 - ramming one of them will destroy it
102:23 - bang it did now will this split the two
102:25 - if i ram it
102:26 - awesome
102:29 - try it with a bigger one
102:33 - cool
102:36 - that's just one issue that i've found is
102:38 - that sometimes when you smash into it
102:39 - you destroy more than one asteroid
102:41 - especially when you're invincible
102:44 - like that
102:46 - see that the reason for it is that it's
102:47 - because it's it's cycling through
102:50 - all of the asteroids so that's not right
102:53 - all we need to do to fix that though is
102:55 - break there so once our ship has
102:57 - exploded it no longer continues
103:00 - destroying asteroids
103:02 - try that one more time so when you're
103:04 - invincible in inside something
103:07 - yeah that's better
103:08 - that should only break that should break
103:10 - into two yep awesome
103:12 - great
103:15 - there's just one last thing i'd like to
103:17 - do in this tutorial and that's to create
103:19 - some graphical effect when the laser
103:21 - strikes an asteroid so go right at the
103:23 - top we'll set a duration for the laser
103:25 - explosion
103:27 - so
103:27 - probably similar to this here ship
103:30 - explode duration will have a laser
103:34 - explode duration
103:38 - and let's let's just say a bit smaller
103:40 - say 0.1 a second so duration of the
103:45 - lasers
103:48 - explosion in seconds
103:51 - right so we'll have to give our laser a
103:54 - property some called explode time so go
103:57 - down to where we shoot the laser
103:59 - we'll add a property called explode time
104:03 - and it'll start off at zero so that
104:04 - means it's not exploding there is no
104:06 - more explosion remaining
104:09 - now go down to where we draw the laser
104:13 - draw the lasers
104:14 - right
104:15 - so here we want to say if
104:19 - ship lasers
104:22 - i
104:24 - dot explode time if that equals
104:28 - zero that means we're not exploding and
104:30 - we'll just draw
104:32 - the normal laser beam
104:35 - laser ball
104:38 - else
104:39 - this is will draw the explosion draw the
104:42 - explosion
104:46 - so it's just going to be some concentric
104:48 - circles similar to what we did with our
104:50 - uh ship when it collides with an
104:52 - asteroid
104:54 - um
104:55 - how about
104:56 - well let's see what we can do here
104:59 - how about we based off the ship's radius
105:03 - times by say 0.75
105:07 - we'll do this a few more times
105:14 - 0.5 and say 0.25 we'll just have two
105:18 - because it's going to be a smaller
105:19 - circle we'll just have three concentric
105:21 - circles
105:22 - and the colors well they'll be based off
105:23 - this one how about i look some of these
105:25 - up before orange red
105:28 - salmon and i think pink was a nice one
105:31 - then we'll have to go down and set the
105:32 - explosion time so where we're detecting
105:35 - the hits
105:36 - we don't want to remove the laser at
105:38 - this point so we can go ahead and delete
105:40 - that we want to destroy the asteroid and
105:45 - activate
105:47 - the laser explosion
105:50 - we can do that just by setting the
105:52 - property so ship lasers
105:56 - j isn't it yes
105:58 - j
106:00 - dot
106:01 - uh explode time
106:04 - that will equal the
106:06 - the ceiling so the rounding rounding up
106:09 - of
106:11 - the laser duration the explode duration
106:13 - times by the frame rate
106:16 - we also only want to run this if
106:20 - all of this
106:24 - if all of that equals zero that means
106:26 - we're not exploding
106:29 - and the distance meets that requirement
106:31 - then we'll destroy the asteroid and
106:33 - activate the laser explosion
106:36 - finally we need to decrement the explode
106:38 - time so go down to where we move the
106:40 - lasers
106:41 - we also don't want the laser to be
106:43 - moving when it's exploding so here we
106:45 - can handle the
106:48 - explosion
106:50 - so if ship dot lasers
106:53 - i
106:55 - if the explode time is greater than zero
106:58 - that means we're presently exploding
107:01 - doesn't it
107:02 - else
107:03 - we want to move the sh move the laser
107:06 - and calculate the distance
107:09 - we don't need to do these things when
107:10 - we're exploding
107:13 - so we'll decrement
107:15 - the explode time here
107:18 - so just minus minus exploded time minus
107:20 - minus
107:21 - and then we want to destroy
107:23 - the laser
107:26 - after
107:28 - the duration
107:30 - is up
107:31 - so if
107:34 - explode time equals zero
107:36 - then we will ship dot lasers
107:41 - dot splice
107:44 - i
107:45 - comma one so we'll just remove the i f
107:48 - laser
107:49 - and we'll just hit we'll just use the
107:50 - command continue here to prevent it from
107:52 - continuing sorry to prevent it from
107:54 - going over the remaining code it'll just
107:56 - jump back to the full the next iteration
107:58 - of the for loop
108:00 - hopefully that should work let's take a
108:01 - look
108:06 - cool so we've got ourselves a little
108:07 - blast radius it looks pretty nice
108:10 - it's working let's see if we can crash
108:12 - into an asteroid great
108:15 - bang bang bang
108:17 - looking pretty good
108:23 - so in this tutorial we're going to
108:24 - implement new levels
108:26 - a live system might give the player
108:28 - three lives and a game over screen right
108:33 - you can go ahead and download this code
108:35 - if you like from the link below
108:38 - first of all let's go down and create
108:39 - the skeleton of what we want to do today
108:41 - so just where we set up our ship and
108:43 - roids and so on how about we
108:45 - make it more generic set up the game
108:49 - parameters
108:51 - right so we'll declare our variables
108:53 - we'll need a level
108:55 - current game level we'll put our roids
108:57 - here as well as our ship
109:00 - and we'll create a method called say new
109:03 - game
109:04 - because we'll have to call that after
109:06 - our game over
109:07 - so all this stuff we'll put
109:09 - in another
109:12 - method so go down create the new game
109:15 - method
109:17 - new ship
109:18 - that'll do function
109:21 - new
109:22 - game
109:24 - and it will create
109:27 - our ship
109:29 - we don't need to set up the asteroids
109:30 - because there's
109:31 - they're created inside this create
109:33 - asteroids method
109:36 - we'll probably need a new level method
109:38 - because after each level we'll call that
109:41 - and inside the new level method
109:43 - we will call that create asteroid belt
109:46 - so it can just go straight after here
109:49 - function new
109:51 - level
109:52 - and all we want to do currently is
109:54 - create the asteroid belt
109:56 - just make sure we haven't broken
109:58 - anything
110:02 - yep that's looking fine
110:06 - so inside the new game method we want to
110:08 - set up our level our initial level so i
110:10 - can start at zero
110:12 - now what does level do
110:13 - well i'm thinking probably inside our
110:16 - new asteroid method we want to speed up
110:18 - we want to make it make the asteroids go
110:20 - incrementally faster so how about we
110:22 - create a variable called level
110:24 - multiplier
110:26 - and that will be equal to 1 initially
110:29 - plus say 0.1 times the level
110:32 - so as the level increases this will
110:34 - slowly go up this level multiplier and
110:36 - we just want to multiply our base roid
110:39 - speed by that level
110:41 - multiplier we will do that in both the x
110:44 - and y direction
110:47 - good
110:48 - and also where we create our asteroid
110:50 - belt up the top here
110:53 - we want to increase the number of
110:54 - asteroids so we can just go
110:57 - where it says i is less than roid num
110:59 - which is currently three we want to add
111:01 - the level each time so at level zero it
111:03 - won't affect it but at the next level
111:06 - it'll add one and so on
111:09 - currently it won't do anything it will
111:11 - not obvious so we can
111:12 - test it by changing that initial level
111:16 - back down in the new game
111:18 - set to say level 10.
111:23 - yeah you can see that there's more
111:25 - asteroids and they're faster so if we
111:28 - set that to level 20
111:32 - there's lots and lots of asteroids going
111:34 - very fast
111:36 - good
111:38 - uh let's set that back to zero
111:42 - now we need to increment our level so
111:44 - when do we do that well it's when the
111:46 - final asteroid is destroyed
111:48 - isn't it so go up to our destroy
111:50 - asteroid method can you see that the
111:52 - final line is
111:54 - to remove it from the array so all we
111:56 - have to do is do a simple check there so
111:58 - new level when
112:00 - no when no more asteroids
112:05 - so we can just use if
112:07 - roids dot length
112:09 - equals zero
112:11 - then we want to increment our level
112:14 - level plus plus we also want to call a
112:17 - new level
112:21 - simple enough let's give it a go
112:25 - i'll just change the initial number of
112:27 - asteroids so i don't have to shoot so
112:28 - many uh roid numb
112:32 - we'll change it to one
112:36 - right so when we destroy this asteroid
112:38 - we'd expect it to go to a new level with
112:40 - two asteroids
112:42 - where's that asteroid so i'm not very
112:44 - good at this game
112:47 - there we go and there's two new
112:49 - asteroids
112:50 - awesome and we've destroyed both these
112:53 - asteroids there should be three on the
112:55 - next level
112:57 - and they'll be going slowly faster
112:58 - that'll be hard to notice but that's
113:00 - okay it's an incremental thing
113:04 - come on
113:07 - there we go and there's three asteroids
113:10 - awesome
113:13 - i'm thinking wouldn't it be nice if we
113:14 - had some text between levels showing the
113:17 - current level number just to give the
113:18 - player some indication
113:20 - and we probably want to make it fade out
113:22 - as the as time progresses so how about
113:25 - we create two variables down where we're
113:26 - setting up our game variables one called
113:28 - text and one called text alpha so alpha
113:32 - will be the transparency component of
113:34 - our text
113:36 - and we'll also need two
113:38 - constants
113:39 - how about we call the first one text
113:42 - fade time
113:45 - set that to something a couple of
113:47 - seconds 2.5 seconds say
113:49 - and that will be the text
113:51 - fade time in seconds
113:54 - and we'll also want one called say text
113:58 - size
114:01 - uh we'll put it in pixels choose a
114:03 - number say 40 pixels this will be the
114:06 - text
114:07 - font
114:09 - size
114:10 - in
114:11 - font size font
114:13 - height
114:14 - in pixels
114:17 - right now where are we going to set
114:19 - these up well probably at the start of
114:21 - the level so we'll go down to new level
114:25 - new game new level
114:27 - so text will equal what we want to show
114:30 - level plus the current level so it'll be
114:33 - level
114:36 - plus now remembering we're starting at
114:38 - level equals zero we don't want to
114:40 - display level zero so we'll add one to
114:42 - this so that'll be level
114:46 - plus one
114:48 - and the text alpha we want to start at
114:51 - full
114:52 - opacity
114:53 - so that'll equal 1.0 text alpha takes a
114:56 - number between zero transparent and one
114:59 - op opaque
115:01 - so to draw the text we want to go down
115:04 - to our update function
115:06 - how about we draw the text last so that
115:08 - it appears on top of everything
115:10 - so after we draw our lasers i believe
115:12 - draw the lasers
115:14 - just after that we'll say draw
115:17 - the game
115:18 - text
115:20 - now we only want to draw this when the
115:21 - text alpha is greater than zero so
115:24 - text it probably wouldn't matter if you
115:26 - didn't check for this but we will so if
115:28 - text alpha is greater or equal
115:31 - than 0
115:32 - then we want to draw our text so
115:35 - how about we give it a color first so
115:36 - fill style
115:38 - sorry context
115:40 - dot
115:41 - fill
115:42 - style
115:43 - will be a color now we want whites but
115:46 - we also want to set the alpha component
115:48 - so to do that we can go rgba
115:51 - bracket now white's just two five five
115:54 - two five five two five five
115:56 - and after that we need that alpha
115:58 - component so we can just add to the
116:00 - string our text alpha
116:04 - and then we'll also have to close
116:06 - that
116:07 - the bracket
116:08 - the parenthesis
116:11 - okay we'll also want the font
116:15 - so the font will equal
116:18 - well here we can add a whole bunch of uh
116:20 - strings but you put the style how about
116:23 - we put just as an example put small caps
116:26 - uh we'll need the size of the font so
116:28 - we've already decided that so text
116:31 - size
116:32 - now that's in pixels so we'll have to
116:34 - put px after it
116:36 - and we need the
116:38 - the the type of font so deja we'll put
116:41 - deja vu
116:43 - sans mono i mean you can put ariel there
116:46 - or century new whatever your favorite
116:48 - font is
116:51 - right now we'll need to draw the text
116:54 - now so that'll be fill text the fill
116:56 - text command
116:58 - it requires a text string which is just
117:00 - text
117:01 - the x will say it's halfway across the
117:03 - screen so canvas canvas width divide by
117:07 - two
117:08 - and the y component
117:10 - we could put it in the middle of the
117:11 - screen but then that'll be over our
117:14 - space ship so that's probably not good
117:16 - how about we put it say three quarters
117:17 - of the way down the screen so canvas dot
117:20 - height
117:22 - times 0.75
117:26 - and finally we need to decrement our
117:28 - alpha we want to slowly fade out so
117:31 - that'll textile for minus equals now it
117:34 - starts at 1.0
117:36 - but we'll have to divide that by our
117:39 - duration so text fade time
117:42 - and we'll have to take into account the
117:44 - frame rate
117:45 - so divide by fps
117:47 - and we'll probably have to bracket all
117:49 - that so that it treats it as a single
117:51 - thing
117:52 - [Music]
117:53 - let's give that a go
117:55 - oops
117:59 - level one well it's appearing and it's
118:01 - disappearing just the location of it's
118:03 - not very good we just need to center it
118:06 - so we can do that by going
118:08 - context
118:11 - text is it text text align
118:14 - the align will be in the center
118:17 - and we can also
118:19 - align it vertically by saying text
118:23 - base to line
118:24 - equals
118:26 - middle i believe you can look all these
118:28 - up
118:29 - let's give that a go
118:32 - level one great so if we destroy this
118:35 - asteroid will we get to level two and
118:36 - will it show the text
118:39 - my shooting skills need improvement
118:42 - there we go level two
118:44 - good i think that's enough of a
118:46 - transition between levels
118:49 - next we'd like to deal with the game
118:51 - lives so we'll start with probably three
118:54 - lives so let's create a constant to
118:56 - represent that
118:57 - constant
118:59 - game
119:00 - lives will equal 3
119:03 - that's the classic number but you could
119:05 - set it to 5 or 7 or whatever so starting
119:09 - number of lives
119:11 - and we'll also need a variable to keep
119:14 - track of current lives so l just call it
119:16 - lives
119:17 - inside our new game method we can
119:20 - initiate that so lives will equal
119:23 - game lives
119:27 - and we also want to draw some some
119:29 - graphical representation of these lives
119:31 - which is usually just the ship itself in
119:33 - the top left corner so go down to where
119:36 - we draw
119:37 - probably just after we draw the game
119:40 - text
119:42 - we'll draw the lives so we'll have to
119:45 - use a for loop here so
119:47 - var i
119:49 - equals zero
119:50 - i is less than current lives
119:53 - i plus plus
119:57 - and we'll need to
119:59 - we'll have to make a method here say
120:01 - draw ship because we already have drawn
120:03 - our ship we don't want to repeat the
120:04 - code here
120:06 - so we'll go ahead and make that method
120:08 - find out where we draw our ship
120:10 - first we draw it here we go so draw the
120:13 - triangular shape just this code here
120:15 - [Music]
120:16 - we'll cut that
120:18 - now we'll need to know
120:19 - separate x and y location because the
120:22 - ship moving around the screen isn't
120:23 - going to be the same x and y location as
120:25 - the lives
120:26 - and probably the angle is important too
120:28 - so we can go draw
120:30 - ship
120:32 - we haven't made this method so i'm just
120:34 - preparing it draw ship say ship dot x
120:38 - ship dot y
120:40 - and its angle
120:42 - so x y and the angle
120:45 - let's go ahead and create that method
120:46 - now
120:50 - so just after disk between points
120:52 - function
120:54 - draw
120:55 - ship
120:56 - now we need an x component a y component
120:59 - and an angle
121:01 - and inside there just paste what we had
121:03 - in
121:04 - on the clipboard
121:08 - i'll just have to update this to match
121:09 - the parameters there
121:11 - so the line width the style that's all
121:13 - good the
121:15 - x and y will just be the x and y we
121:17 - don't need ship
121:18 - prefixing it so just go ahead and delete
121:21 - all that
121:22 - x y
121:24 - x y
121:26 - and also our angle so it's just going to
121:29 - be a so we'll have to delete all the
121:33 - ships before the a's
121:36 - a little bit of a tedious process but
121:38 - well worth it it'll save us time in the
121:40 - end
121:45 - there we go and all we have to do now is
121:47 - update that new inside the lives we just
121:50 - need to update what x y and a are
121:53 - so that should be okay where we draw the
121:55 - actual ship
121:57 - now inside lives we need an x component
122:00 - well i'm thinking it's going to be
122:02 - it's going to start at the
122:04 - ship size so it'll it means we'll have
122:07 - some sort of margin
122:09 - but as we draw
122:11 - contin as we draw across the screen
122:13 - we'll have to multiply
122:15 - so we'll say i times we'll add i times
122:18 - the ship size
122:21 - and we want some space between each ship
122:23 - so probably just say times by 1.2
122:28 - that's the x component now the y
122:30 - component will be i think just the ship
122:33 - size it doesn't have to be very much i
122:35 - don't think
122:37 - and the alpha well it's going to be 90
122:40 - degrees now in radians 90 degrees is 0.5
122:43 - times math pi
122:47 - hopefully that should work let's give it
122:49 - a go
122:52 - yeah that's looking pretty good so we
122:53 - can see our lives up there
122:55 - any issues that nothing happens if we
122:57 - crash
123:00 - if we crash oh
123:02 - [Music]
123:03 - i just want to crash
123:07 - nothing happens because we haven't
123:09 - implemented any code to decrement the
123:11 - lives
123:13 - how about we reduce our lives after the
123:16 - ship has exploded so just go down a
123:18 - little bit
123:19 - where we reset the ship after the
123:22 - explosion has finished and here we can
123:25 - decrement our lives so lives minus minus
123:28 - and we may as well
123:30 - handle the situation where lives equal
123:32 - zero
123:33 - so if lives
123:35 - equals zero so that means we'll be
123:38 - finished the game
123:39 - we can just call a function called game
123:41 - over
123:43 - game over man
123:45 - else
123:46 - we'll just
123:47 - do what was already there the ship
123:49 - equals new ship
123:52 - so let's go ahead and create an empty
123:54 - game over function
123:59 - so just after explode ship function game
124:02 - over
124:04 - and believe ourselves that to do here to
124:06 - do game over
124:08 - let's give that a go
124:12 - so if we crash into this asteroid we
124:14 - expect the ship to disappear yep after
124:16 - the explosion
124:18 - awesome
124:20 - to make that look really nice how about
124:22 - we change the color of the ship
124:24 - the life ship that is
124:27 - as we strike the asteroid just to give
124:29 - it a little bit of a graphical
124:31 - indication
124:33 - so to do that we can go down to where we
124:35 - draw our lives
124:40 - okay draw the lives how about we create
124:42 - a variable called say life color
124:48 - and we'll set that dependent on the
124:50 - situation so life color
124:54 - now
124:55 - when the ship is exploding that means
124:56 - we've struck an asteroid we want it to
124:58 - be a different color
125:00 - but only the last life the final life of
125:03 - this series so
125:04 - exploding and
125:06 - i
125:07 - will equal lives
125:09 - minus one that's that'll be the last one
125:13 - okay
125:15 - if all of that is true then let's set it
125:18 - to say red
125:20 - else we'll set it to our normal color
125:22 - white
125:24 - now how we're going to pass this we've
125:26 - already got this method drawship how
125:28 - about we give a fourth parameter called
125:32 - color so we'll just pass life color here
125:35 - now
125:36 - we're already calling this elsewhere we
125:38 - could go ahead and update
125:40 - you know the color for each
125:42 - single call
125:44 - or we can just set a default make it
125:46 - optional so go to our draw ship
125:49 - function declaration
125:51 - we can say the fourth
125:53 - parameter is a color and we can just go
125:55 - equals white
125:57 - and what that does if they don't provide
126:00 - a color it'll automatically assign it as
126:03 - white it'll be a default color and just
126:05 - down here we can go
126:07 - color
126:08 - so let's give that a go
126:10 - so hopefully we should
126:12 - get that first life turning red when we
126:14 - strike this asteroid great so it turns
126:17 - red and then disappears a few moments
126:18 - later
126:21 - awesome
126:25 - the last thing that we'd like to do in
126:26 - this tutorial is implement the game over
126:29 - function
126:30 - so how about we set a property on the
126:32 - ship something to indicate that it's no
126:34 - longer with us so how about ship dot
126:36 - dead equals true
126:39 - we'll also want to set some text to let
126:41 - the player know that the game is over so
126:43 - game over text equals game over
126:45 - to make that work we'll have to set the
126:47 - text alpha
126:50 - text alpha will equal 1.0 full opacity
126:55 - so we'll go down to the new ship method
126:57 - and
126:58 - put in that dead property so dead it'll
127:02 - start the game
127:03 - as false we don't want them to be dead
127:04 - to begin with
127:06 - let's give that a go
127:10 - so if we crash our ship three times
127:12 - hopefully it'll show a game over a game
127:14 - over message
127:19 - come on this is
127:21 - there we go
127:25 - okay i'm over the only thing is that we
127:27 - can
127:28 - still move our ship around so that's no
127:30 - good is it
127:32 - so to handle that we can go up to our
127:34 - event listeners so key down in the key
127:36 - down method
127:38 - we want to say if ship
127:41 - dead
127:44 - just return so that means it won't
127:46 - access any of the code below it won't
127:48 - allow the user to do
127:50 - anything with the keys and similarly in
127:53 - the key up method
127:55 - just paste that in there
127:58 - right
127:59 - also we don't really want to draw the
128:01 - ship do we it should be dead so it
128:03 - shouldn't be there anymore so down in
128:04 - our update function where we draw so the
128:06 - asteroids are okay thrust the ship we
128:08 - don't want to do that so if ship
128:10 - thrusting and
128:12 - not
128:13 - ship dead so the ship is alive we'll
128:15 - thrust
128:17 - and draw the thruster
128:19 - draw the triangular ship so if blink on
128:23 - and
128:24 - not
128:25 - ship
128:25 - dead
128:27 - we'll draw the ship
128:31 - now the lasers are okay the game text
128:34 - and all that's okay draw the lives
128:38 - probably we don't want to detect uh
128:40 - asteroid collisions anymore
128:42 - so if ship link number equals zero
128:46 - and
128:47 - not
128:48 - ship dead will detect
128:50 - asteroid hits
128:53 - right let's give that a go
128:56 - so crash your ship three times
129:00 - bang
129:03 - bang
129:05 - and final one
129:08 - game over
129:09 - and i can't control the ship
129:11 - there is no ship
129:13 - good
129:15 - finally we'd like to reset the game
129:17 - after some period of time
129:19 - how about
129:21 - where we
129:23 - we're checking for text alpha so that
129:24 - game over
129:26 - that game over message will appear how
129:27 - about when that finishes so we'll say
129:29 - else
129:31 - if
129:32 - uh ship is dead so that means only when
129:34 - the text disappears
129:36 - and the ship is dead so they'll be at
129:38 - the end of game definitely
129:40 - we will say new game
129:42 - new game
129:45 - let's give that a go
129:48 - so smash into the asteroid
129:51 - bang
129:54 - smash into the asteroid again
129:58 - bang and one last time let's see what
130:00 - happens
130:02 - game over
130:04 - the text disappears and we start again
130:06 - at level one
130:07 - i think that's pretty good
130:09 - and that'll do us for today's tutorial
130:10 - so today we implemented lives and
130:14 - resetting the game and level up and so
130:15 - on increasing the difficulty
130:21 - so wouldn't it be nice if we had a
130:22 - scoring system
130:24 - so first of all let's create some
130:26 - constants to represent how many points
130:28 - each of our asteroids are worth so roid
130:31 - points large
130:33 - now in the original game the large
130:34 - asteroids were worth 20 points so we'll
130:36 - do the same thing so this is the points
130:39 - scored
130:41 - for a large
130:43 - asteroid
130:45 - so go ahead and copy that a couple of
130:46 - times we also have medium asteroids
130:50 - worth 50 points
130:52 - medium
130:54 - and we also have small asteroids
130:58 - worth 100 points because they're the
131:00 - hardest to hit
131:02 - we'll also need a variable so go down to
131:05 - where we declare our variables called
131:08 - score that'll be our current score
131:10 - and in this new game method we'll want
131:12 - to reset that to zero so put that in
131:16 - there score equals zero
131:19 - now where will we increment our score
131:21 - well that occurs when we destroy an
131:23 - asteroid doesn't it so go up to our
131:24 - destroy asteroid method here we go
131:28 - and in where we deal with our large
131:30 - asteroids we can simply go score
131:33 - plus equals roid
131:36 - roid points large
131:39 - we'll do a similar thing inside the
131:41 - medium part of this statement
131:44 - there we go score plus equal roids
131:46 - points
131:46 - medium
131:48 - and to handle small we can just simply
131:50 - put an else in here else if it's not
131:52 - medium or not large we'll add the small
131:57 - points
131:58 - now let's go down and draw the score
132:01 - how about we put the score in the top
132:03 - right hand corner of the screen so just
132:06 - after we draw the lives we can draw the
132:10 - score
132:12 - and let's copy and paste some of this
132:14 - code up here to draw text
132:19 - okay
132:22 - so the text to line
132:24 - because we're on the top right hand
132:25 - corner we'll change that to right the
132:28 - baseline can be middle that's fine the
132:29 - fill style we just need plain white
132:32 - we don't need to change the transparency
132:35 - the font we don't really need small caps
132:38 - because it's only going to be numbers
132:40 - uh the text size pixels deja vus mono is
132:43 - fine fill text will be filling
132:46 - the score
132:48 - the position will be the canvas width
132:50 - but we do want a slight margin so let's
132:53 - base it off our lives margin so this
132:57 - is ship size so we'll have ship size
132:59 - divided by two
133:00 - because the ship is the center of the
133:03 - chip chip size divided by two
133:06 - and the y position will be the same
133:08 - exactly the same as our ship so ship
133:10 - size
133:13 - let's test that
133:17 - great we have a zero in the top right
133:19 - hand corner that's promising let's shoot
133:20 - one of these big ones
133:23 - we get 20 points that's good now a
133:24 - medium one
133:26 - oops i shot another big one
133:28 - mini one was worth 50 and a small one
133:30 - should be worth that should bring us to
133:32 - 190
133:34 - uh 340 yep that's working well
133:38 - now how about in the middle the top
133:40 - middle of the screen we put a high score
133:42 - so let's go ahead and create a high
133:44 - score variable
133:46 - so head back up the top and declare that
133:48 - variable
133:49 - so just next to where we declare the
133:51 - score
133:53 - we can also say score
133:55 - high
133:57 - and inside our new game function how
133:59 - about we
134:00 - initialize that score high
134:03 - now ultimately we'd like to grab this
134:05 - from somewhere like a saved location or
134:07 - something but just to begin with let's
134:08 - just set that to say 100 just to make
134:10 - sure that it works
134:12 - uh where do we where will we handle the
134:15 - high score
134:17 - well up in our destroy asteroid method
134:19 - where we're incrementing the score just
134:21 - after we do that how about we do a check
134:24 - check
134:25 - high
134:26 - score
134:27 - and that's simply going to be condition
134:29 - so if the score
134:31 - is greater than the high score
134:36 - then
134:37 - we want to set the high score to equal
134:39 - the score so score high
134:41 - will equal score
134:44 - of course we'll need to draw that so
134:45 - head back down to where we draw our
134:47 - score
134:49 - draw the score we're going to do a very
134:51 - similar thing with the highest score
134:57 - draw the high score the text line is
135:00 - going to be the center because we want
135:02 - it in the top middle of the screen text
135:04 - baseline is fine the field style is
135:06 - white the font is how about we set this
135:09 - to a bit of a smaller font
135:12 - so it doesn't take away from the current
135:14 - score so we'll say times by 0.75
135:17 - just put that in brackets
135:20 - otherwise the font is the same the fill
135:22 - text will be the score
135:24 - high
135:26 - the position will be the middle of the
135:28 - screen so it'll be the canvas width
135:30 - divide by two
135:32 - and it'll be the same y
135:34 - the same y component
135:36 - let's test that
135:40 - okay the 100 it's not exactly in the
135:43 - center of the screen is it
135:45 - ah that's a spelling i've got the
135:47 - australian spelling not the american
135:49 - spelling so center with an er
135:52 - let's just double check that
135:53 - good i'm thinking we'll probably need
135:55 - some sort of text before that so maybe
135:57 - say
135:59 - i'm going to use the word best but you
136:01 - could use hi or top or whatever
136:03 - best
136:04 - plus the score high
136:07 - let's see if that looks okay yeah that
136:09 - looks okay now let's test to see if it
136:11 - works so we'll be trying to get more
136:13 - than 100
136:16 - there we go so it's updating to match
136:18 - the highest score
136:20 - obviously the biggest issue is that when
136:22 - we reset this it goes back to 100
136:25 - we'll want it to persist between browser
136:27 - sessions and indefinitely basically so
136:30 - how can we do that
136:32 - in the past we would have used cookies
136:34 - but with html5 we can use local storage
136:37 - local web storage
136:39 - so zoom back up to our new game
136:42 - method where we set the high score
136:44 - we can just write local storage dot get
136:48 - item
136:49 - now this get item function requires a
136:51 - key which is a string like this is like
136:53 - a save key
136:55 - now this only has to be unique within
136:57 - our code it doesn't have to be unique
136:58 - across all our software or whatever i
137:01 - believe it's based on the url so let's
137:03 - create a constant
137:06 - prefix it with uh save key save
137:10 - key
137:12 - score
137:15 - so it's just a string we can
137:17 - call it for example high score
137:21 - and this will be the
137:23 - save key for local storage
137:28 - of score
137:30 - of high score
137:34 - good go back down to new game
137:41 - put that in there save key score
137:44 - let's see what that does
137:48 - right so when we haven't set it we
137:50 - haven't set it yet it comes back null so
137:52 - we'll have to check for that
137:56 - how about we pull that down just
137:57 - underneath we do where we do all this
138:01 - ship equals new ship
138:04 - get the high score
138:07 - from local storage
138:12 - so how about we create a storage string
138:15 - so score
138:16 - string
138:18 - will
138:19 - equal
138:20 - all of that
138:22 - so that's our string now if that string
138:25 - if score
138:27 - string
138:28 - equals null
138:31 - then we want to set the score
138:35 - to so set the high score to equal zero
138:40 - that means they haven't set a high score
138:42 - yet else
138:44 - we want to set this high score
138:47 - to equal
138:48 - the score string but because it's a
138:50 - string we'll have to pass in so
138:53 - pass
138:55 - int
138:56 - uh requires a string which is just the
138:59 - score string
139:02 - hopefully that will work let's give it a
139:04 - go
139:07 - best is zero
139:09 - now although the score is going up if we
139:11 - reset this it's not storing it is it so
139:14 - we'll have to store it somewhere
139:17 - so up where we increment our score and
139:19 - test for the highest score inside our
139:21 - destroy asteroids method so check high
139:24 - score
139:25 - here
139:26 - we can just set it here so we can go
139:28 - local storage
139:29 - set item
139:33 - we need the key so the save key
139:36 - save key score and the value will be the
139:39 - highest score
139:40 - score
139:41 - high
139:43 - and hopefully that should be everything
139:47 - all right so we've currently got the
139:48 - best score of zero
139:50 - now we put the best of 20. that's reset
139:53 - yep it's persisting
139:55 - so that should persist between browser
139:57 - sessions between
139:59 - games between everything so let's try
140:02 - again 190 reset
140:05 - good
140:06 - and let's just to make sure it's really
140:08 - working how about we destroy our ship so
140:10 - we should have a high score let's get a
140:12 - high score first
140:13 - to 310 410 let's smash the ship a few
140:16 - times 460
140:20 - 560 and one more life left
140:24 - 610 so this should reset
140:27 - yep the score's reset but our best score
140:29 - is still 610
140:31 - great
140:35 - so in this tutorial we're going to learn
140:37 - how to add sound effects to our game and
140:40 - music to some extent
140:43 - first of all go ahead and download the
140:44 - sound files from the link below i'll
140:46 - link to a zip file it's important that
140:49 - you extract the sounds directory to the
140:52 - same location as the html file so i've
140:56 - just created a folder called asteroids
140:58 - here put in both the code and the sounds
141:01 - folder that's important because we'll be
141:02 - referencing this this directory inside
141:05 - our code so inside the sounds directory
141:08 - there'll be six sounds explode hit
141:11 - laser
141:12 - music high music low and thrust i just
141:15 - used the program audacity to create
141:17 - those but i won't show you that here we
141:19 - can save that for another tutorial
141:22 - so go ahead and open our code
141:25 - so head down to where we set up our
141:26 - variables so just before
141:29 - we just after we set up the canvas let's
141:31 - set up sound effects
141:35 - so it's a pretty simple process we just
141:37 - need to create a variable let's prefix
141:39 - all our variables with fx just to make
141:41 - it clear so fx laser will equal
141:44 - new
141:45 - audio
141:46 - and just inside there we'll need a
141:48 - string for the source so that that'll be
141:50 - the directory name sounds forward slash
141:54 - the name of our file so laser.m4a
142:00 - now where do we want to call that where
142:02 - do you want to play that sound
142:04 - well in the laser method don't we so
142:06 - just head down to where we
142:08 - press the space bar there should be a
142:10 - shoot laser method
142:13 - now within that if condition all we have
142:16 - to do is go fx laser
142:20 - dot
142:21 - play
142:23 - and because it's a function call we'll
142:24 - need the parenthesis
142:26 - let's give that a go
142:32 - okay couple of problems first of all
142:34 - it's quite loud so we can fix that up in
142:36 - code and secondly when i push the
142:39 - spacebar continuously it's not playing
142:42 - every shot so watch again
142:46 - so although i fired about 10 shots it
142:48 - only played it about three or four times
142:50 - that's because when the sound is playing
142:53 - and i call another play method it won't
142:56 - play it until it's finished
142:58 - so that's a problem we can fix that up
143:00 - though
143:03 - so head back up to where we create our
143:05 - audio
143:09 - currently we're using this inbuilt
143:11 - object or inbuilt class called audio how
143:14 - about we create our own custom object
143:17 - called
143:18 - sound
143:19 - it will behave exactly the same way
143:21 - we'll make sure that it does
143:24 - go down and create that
143:27 - let's create it just before our update
143:29 - function
143:30 - so function
143:32 - sound
143:33 - the first parameter will be the source
143:37 - now the second parameter how about we
143:39 - create a parameter that handles multiple
143:42 - concurrent plays of our of our file so
143:47 - let's call that max streams
143:50 - and set its default to one that's
143:51 - currently the behavior we're
143:52 - experiencing now so when we push the
143:54 - space bar multiple times it will only
143:57 - play one sound at a time
144:00 - and we'll also want to set the volume
144:01 - here now volume takes a value between
144:03 - zero and one so how about we give it the
144:07 - default value of one which is maximum
144:09 - volume or normal volume
144:12 - so we'll have to create we'll have to
144:13 - keep track of which stream we're
144:14 - currently playing so we can go this dot
144:17 - stream
144:19 - num
144:20 - equals zero
144:22 - and we'll also need to keep track of
144:23 - each stream so that could be handled by
144:26 - an array for example so this dot
144:29 - streams will equal an empty array
144:33 - now to populate that array we can just
144:35 - use a for loop so for
144:38 - var i
144:39 - equals zero
144:41 - i is less than max streams
144:44 - i plus plus
144:48 - so we can push to that array so this dot
144:51 - streams
144:53 - we'll have to use we'll have to prefix
144:55 - all our variables here with this so that
144:57 - it's referring to the objects variable
144:59 - so this dot streams dot
145:02 - push
145:03 - now all we have to push is a new audio
145:05 - object so new audio
145:08 - and it takes the source as an argument
145:13 - and we might as well set the volume here
145:15 - so this
145:16 - dot streams
145:18 - i
145:21 - dot
145:22 - volume volume will equal
145:25 - vol that's what we're passing up here
145:28 - that should set that up okay
145:31 - next we need to implement the play
145:33 - function so we can handle that by going
145:35 - this dot play will equal function
145:40 - now we'll need to increment the stream
145:42 - number so that we cycle through each of
145:44 - the streams so we can do that by going
145:46 - this dot stream
145:48 - num
145:50 - will equal
145:51 - put this in brackets this dot stream
145:55 - num plus one
145:57 - incrementing it and find the modulus
146:00 - of the max streams
146:03 - i'll explain that soon so then we'll
146:05 - call the
146:06 - [Music]
146:08 - so we'll find that uh element so this
146:10 - dot streams
146:12 - the element number will be this dot
146:15 - stream num
146:16 - this dot stream
146:20 - num
146:21 - dot
146:22 - play so that's just the inbuilt play
146:24 - function so for example if max streams
146:27 - equals two
146:28 - right so this stream number zero plus
146:31 - one is one one modulus two is one
146:35 - so that will play the second element of
146:37 - our streams array
146:39 - when this function is called again
146:41 - so stream number is currently one plus
146:43 - one is two two modulus two is zero
146:47 - it'll play the first element of that
146:49 - array so in essence it will cycle
146:52 - through
146:53 - it will cycle through playing each of
146:56 - those
146:57 - elements each of the arrays elements as
146:59 - the play function is called which is
147:01 - what we want
147:02 - so let's test that so currently it's max
147:04 - streams equals one
147:11 - it behaves exactly the same way so let's
147:13 - head back up to where we call our
147:15 - initial
147:17 - laser sound here we go
147:19 - and give it some arguments so the number
147:22 - of streams let's try two
147:25 - and the volume let's turn it down a bit
147:27 - to say 0.5
147:32 - right so the volume is okay now if i
147:34 - play if i push the space bar as fast as
147:36 - i can
147:39 - [Applause]
147:41 - can you hear that it's only playing two
147:43 - of them that's because our max streams
147:45 - is two so what's a realistic number we
147:47 - could set here how about five
147:50 - that's probably fast enough so
147:52 - the player wouldn't notice let's try it
148:02 - i think that's pretty good it looks
148:04 - pretty realistic to me
148:06 - awesome
148:07 - next it's just a matter of implementing
148:09 - our other sounds so let's copy that
148:12 - and implement fx explode so that's where
148:16 - our ship crashes into an asteroid just
148:19 - update the source to sound slash explode
148:23 - dot m4a we'll delete we won't use any
148:26 - arguments here we'll just use the
148:28 - default ones
148:30 - now where will we call fx explode well
148:33 - explode ship comes to mind
148:35 - where are we draw explode ship so just
148:38 - after that fx explode dot play
148:44 - let's give that a go
148:47 - so if we crash
148:51 - yeah that sounds pretty good it's not
148:53 - too loud i don't think
148:57 - great
149:00 - head back up to our audio
149:02 - let's create another one called uh
149:06 - fx hit so this is where our laser
149:09 - strikes a
149:10 - asteroid an asteroid i should say
149:13 - sounds
149:14 - hit
149:16 - again we'll just leave the default sound
149:18 - make sure that actually we'll probably
149:19 - need to increase the
149:22 - max streams the reason being
149:25 - is that
149:26 - we could in theory hit
149:28 - a lot of asteroids at the same time
149:30 - because we're firing out lasers in quick
149:32 - succession so how about we give that the
149:34 - same number of max streams as the fx
149:37 - laser
149:38 - and where will we call that
149:40 - well probably when we destroy our
149:42 - asteroid that's probably the right time
149:44 - to do it so how about destroy the
149:46 - asteroid
149:47 - fx
149:49 - hit
149:51 - dot play
149:53 - sorry that was just the background uh
149:55 - astro uh the ship blowing up let's give
149:58 - that a go
150:00 - so when we shoot an asteroid
150:05 - yeah that sounds alright so we're
150:07 - shooting out a lot of lasers
150:09 - and we can hear some simultaneous
150:12 - hit sounds
150:15 - cool that sounds alright
150:17 - i'm just thinking to stop us hearing
150:19 - background explosions all the time let's
150:21 - create a global uh flag called for
150:25 - example sound on and we'll only allow
150:28 - sound when that flag is set through
150:30 - so there's an explosion for example so
150:32 - if
150:33 - sound
150:34 - on
150:36 - then we will play the sound
150:39 - if sound on then we will play this sound
150:44 - let's go and create that flag now
150:50 - so just under where we show for example
150:53 - sentence so create a constant
150:56 - sound
150:57 - on
150:58 - and that will be equal to false
151:02 - so let's just run that make sure it's
151:04 - working
151:06 - yeah so no sounds will be heard
151:08 - while we're programming
151:10 - next let's implement the thruster sound
151:13 - so just where we're creating the other
151:15 - sounds here let's go fx
151:17 - thrust will equal sound slash
151:20 - thrust
151:21 - we probably don't need any uh parameters
151:24 - here
151:25 - now where will we call that where will
151:26 - we play that probably down in the update
151:29 - method
151:30 - in the update method we thrust here we
151:32 - go thrust the ship so just up near the
151:34 - top there fx thrust dot play
151:40 - and
151:41 - when we release the thruster key when we
151:43 - release the forward arrow we'll probably
151:45 - need to stop that thrust sound as well
151:48 - we don't want it to continue onwards so
151:49 - how about we in the else uh part of the
151:52 - condition we go fx
151:54 - thrust dot stop
151:56 - so we'll have to implement this method
151:58 - so
151:59 - fxthrust.stop so go to our sound
152:01 - function
152:03 - and create a new method called this dot
152:05 - stop
152:06 - will equal function
152:11 - and all we'll do there is call
152:14 - is call the inbuilt pause function
152:17 - so this streams this stream dot pause
152:21 - and we'll want to reset back to the
152:23 - start of that stream so we can do that
152:25 - by going this streams this dot stream
152:28 - num dot current time
152:32 - equals zero so that'll set the cursor or
152:36 - whatever it is called back to the start
152:37 - of that stream
152:39 - let's give that a go oh we'll have to
152:41 - turn on our sound first to test this
152:44 - so
152:45 - sound on will equal true
152:50 - see that's working
152:53 - and
152:54 - our thruster is working
152:56 - [Music]
152:58 - cool
153:02 - good that's all our sound effects done
153:05 - next let's create some music
153:08 - just set the sound on back to false so
153:10 - that we don't have to listen to
153:11 - explosions in the background
153:17 - okay
153:19 - uh now music i use the word music very
153:21 - loosely
153:23 - uh so just under where we set up the
153:25 - sound effects
153:26 - set
153:27 - up
153:29 - the music
153:31 - now the music in asteroids the original
153:32 - game was very pretty much just two tones
153:34 - it was going
153:38 - something like that it's just kind of
153:39 - two different tones so why don't we
153:41 - create a variable called music
153:44 - and that will equal we'll have to create
153:46 - a new object it's called music for
153:49 - example and it will take the two sounds
153:51 - so we'll have
153:54 - sounds
153:55 - music
153:56 - low
153:59 - and the second parameter will be similar
154:02 - sounds
154:03 - music
154:06 - hi
154:07 - so just the two sound files that we have
154:09 - one's a low sort of tone and one's a
154:11 - high tone
154:12 - let's go down and create that object
154:15 - just near where we create our sound uh
154:18 - objects
154:20 - new shoot laser so just here
154:23 - function
154:25 - music
154:27 - so we'll have
154:28 - source
154:30 - low
154:31 - and source
154:33 - high
154:36 - so first of all let's declare our
154:37 - variables so we'll have two sounds so
154:40 - this dot sound low
154:43 - which will equal new
154:45 - audio
154:47 - source
154:48 - low
154:50 - right
154:51 - similarly we'll have this sound
154:54 - high
154:55 - which will equal new audio source high
155:00 - and we'll also need to keep track of
155:01 - which sound are we currently playing so
155:03 - we can just use a boolean for that so
155:05 - this dot low will equal true that means
155:07 - we'll set we'll start with the low sound
155:10 - and we'll also need the speed of the
155:12 - music the reason being is that as the
155:14 - game progresses the speed of the music
155:17 - increases
155:18 - so this dot say tempo
155:21 - will equal 1.0 say and we'll define that
155:25 - as uh seconds per
155:28 - beat
155:30 - we'll also need to somehow count down
155:33 - that tempo so we can have a create a
155:35 - variable called this
155:37 - dot beat time
155:39 - we'll set it to zero to begin with
155:41 - and that's basically defined as the
155:44 - frames left
155:46 - until next beat
155:49 - right we'll have to create our play
155:51 - function so this dot play equals
155:55 - function
155:58 - and what will it do well if
156:01 - this
156:02 - if this dot low
156:04 - we want to play the low sound so sound
156:07 - sorry this
156:09 - dot sound
156:12 - this dot sound low
156:15 - dot play
156:18 - right and otherwise so else we want to
156:21 - play the high sound this dot sound
156:24 - high
156:25 - dot play
156:27 - okay
156:29 - and we also want to switch between those
156:31 - two so we can handle that by going this
156:32 - dot low will equal not this dot low so
156:36 - we're just switching true to false and
156:38 - false to true
156:40 - okay good
156:41 - we'll also need some way to count down
156:44 - this uh tempo as such the beat time so
156:47 - how about we create a function called
156:49 - this dot tick
156:51 - this dot tick equals function
156:55 - and this will be called every frame
156:58 - so knowing that we can say if
157:02 - the so if this dot beat time
157:07 - equals zero that means it's counted down
157:09 - which it will have immediately we want
157:11 - to play the current sound so this dot
157:14 - play
157:16 - we also want to reset the beat the beat
157:18 - time so this dot
157:20 - beat time
157:22 - will equal
157:23 - the ceiling so we want to keep it as a
157:26 - integer math.seal
157:28 - of the
157:30 - tempo so this dot tempo
157:34 - multiplied by the frame rate
157:37 - so for example if the so the current
157:39 - tempo is 1
157:40 - the frame rate is 30 so we'll have 30
157:43 - ticks until the sound is played so
157:46 - that's one second that sounds good
157:49 - now else
157:50 - so it doesn't equal
157:52 - zero we want to decrement it so this dot
157:55 - beat time
157:57 - minus minus
157:59 - now where do we call this tick well we
158:01 - need to call it in the update function
158:03 - so just go down to the update function
158:06 - up near the top
158:07 - tick the
158:09 - music
158:11 - so we can just go music dot tick
158:15 - now hopefully that will play our music
158:18 - let's try
158:23 - okay it's not playing
158:25 - let's see what's
158:27 - let's head up to the top and see if
158:29 - everything's okay where we
158:31 - uh create our music musicals new music
158:34 - sound music low okay i forgot to add the
158:38 - extension to each of these music files
158:40 - which is important but luckily the game
158:43 - didn't break so i'd say our code is all
158:45 - correct let's give it a go
158:48 - [Music]
158:54 - great that seems to be working
158:56 - oh
158:57 - that reminds me we should probably put
158:59 - in a global variable
159:01 - a global constant
159:02 - [Music]
159:04 - music on
159:05 - [Music]
159:08 - and we can just go down to our music
159:11 - uh method
159:14 - and in our play we can just say if
159:17 - music
159:18 - on
159:19 - then we'll do all of that
159:32 - good
159:33 - so we've turned our music off
159:35 - now how will we make the music go
159:36 - incrementally faster as the game
159:38 - progresses
159:40 - well let's head up to where we declare
159:42 - our music variable
159:45 - and create a couple more
159:47 - variables one called roids
159:50 - left
159:51 - and one called roids total
159:55 - and we'll find a ratio of how many there
159:57 - are left to the total and use that as a
160:00 - guide
160:02 - so just in our create asteroid belt how
160:04 - about we set up
160:06 - the roids total roid's total will equal
160:10 - the roid num
160:13 - but remember each of those big asteroids
160:16 - can be broken down into two mediums and
160:18 - each of those mediums can be broken down
160:20 - into two smalls so we'll have four
160:23 - smalls
160:24 - plus two mediums is six plus the
160:26 - original big one is seven
160:28 - so
160:29 - roid num times seven will be the total
160:32 - and we'll want to make roids left equal
160:35 - to that roid's left will equal the
160:37 - roid's
160:38 - total
160:40 - actually that should be the roid num
160:42 - plus the level shouldn't it because you
160:44 - see down here the number of asteroids is
160:46 - dependent on the level
160:48 - so all of that
160:50 - times seven
160:52 - right that should be okay
160:54 - so head down to our destroy asteroid
160:56 - method
160:58 - and just after we play the sound let's
161:01 - calculate
161:03 - the ratio of remaining
161:07 - asteroids to determine
161:10 - uh music tempo
161:13 - so first thing we'll need to do is
161:14 - roid's left
161:17 - minus minus we'll decrement that
161:20 - and then we'll we want to call a
161:22 - function on music for example called set
161:27 - asteroid
161:29 - ratio
161:32 - and then in there we can calculate the
161:33 - ratio
161:35 - the only thing i can think of is if the
161:36 - roy's left equals zero
161:38 - then
161:39 - so roid's
161:41 - left equals zero
161:44 - if that's true well the ratio is going
161:46 - to be one we want to reset the ratio to
161:48 - just one
161:50 - else
161:51 - we will uh find the actual ratio so
161:54 - roid's
161:55 - left
162:02 - so head down to our music object
162:06 - music and we want to create that method
162:09 - this dot set asteroid ratio equals
162:13 - function
162:14 - we'll need to have an argument have a
162:16 - parameter here called ratio
162:20 - and this will modify our tempo so this
162:23 - dot tempo
162:24 - will equal the starting tempo
162:27 - minus
162:30 - one
162:31 - point zero minus the ratio
162:34 - because when the ratio is for example
162:35 - point nine
162:36 - one minus point nine is point one 1
162:39 - minus 0.1 is 0.9 yes that's fine
162:42 - the only thing i can see the only
162:44 - problem i can see here is that this is
162:45 - going to get very small so it'll become
162:48 - too small where we'll be playing
162:49 - hundreds of beats per minute we don't
162:51 - want that
162:52 - per second i should say so let's
162:54 - multiply by that by some factor
162:56 - 0.75 times that
163:00 - right so that means when the ratio is
163:03 - zero
163:05 - one minus zero is one point seven times
163:07 - 0.75 times 1 is 0.75 1 minus 0.75 is
163:11 - 0.25
163:13 - the fastest rate that we can go is 0.25
163:15 - that's 4
163:17 - beats per second
163:19 - okay we'll just need to go turn on this
163:21 - music on function sorry music on flag
163:24 - set that to true and let's give it a go
163:29 - okay so that's one beat per second let's
163:32 - destroy some of these asteroids
163:37 - yeah it's getting faster
163:50 - [Music]
163:53 - let's just play until we get to the next
163:55 - level
163:57 - [Music]
164:02 - great it's reset
164:03 - perfect
164:08 - let's just turn on the sound to have one
164:10 - final play
164:27 - great that's working well
164:30 - and that's the end of this tutorial
164:32 - series i hope you've enjoyed it just as
164:34 - much as i've enjoyed making it so we've
164:36 - created a little triangle that can fly
164:38 - around space using the arrow keys we can
164:40 - press the space bar to shoot a laser
164:42 - we've created randomly generated
164:45 - asteroids that float through space we've
164:47 - added a scoring system with a high score
164:49 - that saves to the local storage
164:52 - and we've added sound in this tutorial
164:56 - i'll post a link to the final code in
164:58 - the description below feel free to
165:00 - download it and have a play with it
165:01 - yourself you can for example change some
165:03 - of these parameters or maybe you can add
165:05 - some new functionality like power-ups
165:07 - that float across the screen that your
165:08 - ship can collect
165:10 - things like invincibility or an extra
165:12 - life maybe a split laser that shoots out
165:15 - multiple laser blasts at once
165:17 - the only limit is your imagination and
165:20 - that's what programming is for me
165:22 - to learn something new to create
165:24 - something wonderful and to have a lot of
165:26 - fun along the way until next time talk
165:29 - to you then
165:30 - cheers

Cleaned transcript:

hi everyone and welcome to this javascript tutorial to create the 1979 atari game asteroids or our version of it at least in this first part of the tutorial we're going to create the ship and make it move around the screen and everything so you can go around go ahead and download this template if you'd like update the title to whatever you like asteroids we're going to use html canvas to achieve our graphical display so give it an id game canvas or similar give it a width width will equal say 700 height you can change this to whatever you like height will equal 500 first of all we need to grab that canvas uh just from experience i know that we need to give this a jar a js dock so at type just so that it recognizes it as a canvas element so at type curly braces html canvas element close the js dock and move to then we can create the variable ken and that will equal the document get element by id and just type in the string that we had up there the id came canvas great get rid of this uh we need to get the context from the canvas so the con text will equal the canvas dot get context and it's going to be of type 2d good we also need to set up the game loop to achieve our animation we can just use the inbuilt function set interval for that it requires a handler so that's just the function name update and a timeout in milliseconds so 1000 divided by our frame rate so we'll set up a constant called fps const fps equals 30 frames per second say so that'll be well let's leave a note frames per second so that means it'll call this update function once every thirtieth one thirtieth of a second so let's go ahead and create that function update function update um what will we do first in this well we need to draw let's plot out what we're going to do in this tutorial so we'll draw the background or draw space we will draw our ship we will what else um we will move the ship move or rotate the ship first doesn't really matter the order here we'll move the ship move the ship draw ship draw space good okay so first of all we need to draw space how do we do that well we can just set up the fill style basically we'll just paint the background in black so fill style will equal black and we'll draw a rectangle draw so fill rectangle is to draw a filled rectangle obviously it requires the origin which is going to be 0 0 and the width will which will be the canvas width canvas.width and the height is the canvas.height let's just run that make sure that it's working okay there we go that's the background great next we want to draw a ship now how are we going to represent our ship probably the best way is just by using a we can just create a variable ship using an object javascript object all that is is a fancy array really so ship will equal curly braces now we can put all our properties in here so what do we need to know about our ship we need to know the x coordinate so let's start it in the center of the page center of the ship center of the ship center of the screen so that'll be canvas width divide by two the y component will be the canvas height divide by two what else do we need to know um the ship's size so have a radius r that represents radius uh it'll be based on how about we set up a constant here constant chip size which will equal let's put it in pixels say 30 ship size or ship height maybe ship height in pixels you could make this a percentage of screen width if you wanted to or screen height but we'll just keep it as a fixed number so the radius will be half of that minute ship size divided by two we also need to know the direction of the ship the heading as such we'll call that a for angle um now if you know your trigonometry and the unit circle 0 degrees is facing right facing upwards is 90 degrees so we'll put it 90 degrees but all the math functions don't work in degrees they work in radians so we have to convert this to convert this to radians by doing divide by 180 and multiplying by math pi divided by any times i say don't need that convert to radians okay so we have an angle to draw that ship well we need to set up our context first set up the colors and so on so we'll have it as a stroke a stroke style we'll just make it white we will um maybe set the line width we'll set the line width how about we put that as a percentage of the ship size so that will be say ship size say divide by 20. good um now the actual ship to draw a triangle so this is going to be draw triangular triangular ship draw a triangular ship so to draw a triangle we need to use the path so we can do a begin path just call that function begin path and we need to move the cursor to where we want to start so we use we use the function move to it just takes an x and y component x and y coordinate so the x coordinate will be the x of the ship won't it well that'll the x of the ship represents the center of the ship so we want to add something to that now what do we add again some trigonometry we just need to add the radius sorry the ship radius ship radius multiplied by the cosine because cosine represents the horizontal of the ship's angle whatever that angle might be right similarly we the y component will be the radius times the sine so that's the vertical of the ship's angle we can test this out oh actually we'll have to draw a line first so that's the tip of the ship so that's the tip the nose i guess and then nose of the ship now we'd like to move to the the rear left of the ship so remember it's a triangle so context will do a line too so it'll draw a line from the original point from the two where well the rear of the ship we could use that to represent the rear of the ship just with one minor change instead of oh sorry i just made a mistake here ship y should be minus the ship minus the root that because um negative represents upwards on the screen right now to get this um to get the rear of the ship we would change the sign so change the plus to a minus and the minus to a plus so this will be the rear left of the ship now that's the rear center that we currently have so we need to modify this i just grabbed out a scrap piece of paper before and worked all this out using trigonometry so you can either do it yourself or just trust me we need to add the sine of the ship's angle here right and here we just need to subtract the cosine of the ship's angle i'm not going to explain the maths here i don't really want to do a math lesson um all right so that should draw the real left now to test this we can just use context stroke that means it'll draw the path let's have a look what that looks like that's looking good do something similar so copy and paste this this is going to be the rear right so we're going to draw a line to the rear right now in order to do that it's the same thing except all we have to do is change the sign in here pretty simple let's have a look at that yep it's drawn the rear of the triangle and finally we want to finish off we want to close this so there is an inbuilt command i think it's called close close path there we go and that should complete the triangle for us great we need to test the angle so don't we so go back up to the ship's angle change instead of 90 change it to say 55 so it should be facing right on an angle cool how about 155 that should be facing the other direction looking good and we'll go back to our original looks like it's working well great i'm just thinking we should probably put the center of the triangle in just for our testing purposes so we're down here center dot we can do that just by setting up a context fill style which will be say red doesn't matter what color and we'll draw a rectangle so fill rectangle the origin will be the center of the ship so ship dot x minus one say let's make it say two pixels wide the ship dot y minus one and the size will be two to two pixels by two pixels let's just see if that's there okay yeah so that's exactly how we've programmed but the center will be exactly one radius from the peak and one radius from the bottom but that's not really the center of a triangle when we rotate this ship it might not look very nice so we could the actual centroid of a triangle is a bit below that it's two thirds from its peak i think so we can fix that up pretty simply uh so two thirds we just need that the nose of the ship would be one third ahead so we'll go four time four divide by three times that so four thirds times that and this will be four thirds times that i think yeah remembering this is all in the right this is the radius of the ship so that's why we're using four thirds here uh the rear um we just need to multiply the first component by two thirds to get this working i think two thirds yep so this first component of each of these just multiplied by two this it'll shift it upwards basically let's try it there we go and that's actually the centroid of uh so if you draw a line from this vertex to the center of that side that's how you work out anyway you don't need to know the math that's where the center of the triangle would be a much nicer experience good so how do we go about rotating this ship well we've got an angle we need to update the angle when they push a button say push the left arrow key so we'll need to set up some uh what do they call them event handlers set up event handlers so we can do that just by going document dot add is it add event listener add event listener it requires a type so the type is one of these here it's actually the one we're looking for is key down so when that means it'll detect when one of the keyboard keys are pressed and the listener well that'll be the function we call so we'll just call that key down the same thing really when we push the left key we want to rotate left when we unpush the key that means when we release the key i guess we also need to capture that event so we can just duplicate that and use the key up okay up so it detects when the key has come up and we'll make a function called key up right so let's do that function key down it will take an event as a parameter so we can just use our js dock again just to make sure it's very clear that it's an event um at type i think it's of keyboard yeah keyboard event it is there keyboard event keyboard event oops we need that in braces and then we just can look at that again they just call it ev so we can do the same thing ev right now we don't want any key to do something do we don't want them to push the six or the question mark and something happens unless you want to program it that way but we just want to detect arrow keys so to do that we can make a switch statement switch oops i didn't close this there we go switch event dot key code so that'll detect the key code the actual code of the key that's pressed the arrow keys are what we're interested in so they're actually they start at number 37 i believe so it's 37 for left 38 for up 39 for right that's all we need to know i think so we can go case 37 i don't want to add event listener we'll break that and repeat this for each of the key codes that we'll be using so we'll be using 38 we'll be using 39 and just probably the right note here so this is the left arrow and in brackets what do we want it to do we want it to rotate ship left okay similarly we want 39 37 38 29 is it the right numbers i think so rotate ship right we'll soon work out whether it's right or not this will be the right arrow 38 that's the app the up arrow and what will that do that will what's the term for shooting at thrust thrust the ship forward okay let's we'll do that later so first of all how are we going to handle this so we push the left arrow something happens how about we set the rotation of the ship so in order to do that we'll have to give another property we can just call it rot for rotation it's currently equal to zero we don't want any rotation we should probably set up a rotation speed here for return speed whatever you want to call it constant turn speed and we'll set it in say degrees per second so i'll set it to say 360. and this is turn speed in degrees per second okay so when the left hour is pushed we want to update the ship's rotation it will equal the turn speed now that's in degrees so we have to divide to get radians we have to divide by 180 times by math pi and this will be we want to get the per frame speed don't we so what to divide by the frame rate otherwise it'll be rotating way too fast similarly just copy and paste that put that in the right there we go this will just be the negative of that won't it so we can set the rotation when the right arrow is pushed we'll set the rotation to the negative of that um now that won't do anything yet because we need to do something with this rotation so down where we've marked rotate ship all we have to do is ship dot angle um plus equals should this be okay it should be ship angle plus equals the row the ship's rotation ship dot rotation i think that should do it let's give it a go something's gone wrong ships the road plus equals the ship's rotation probably we can open up a a console here to see the error what does it say uh reference key up is not defined ah okay so we it wants to see all these um functions written first so function key up it doesn't do anything yet although actually let's try we may as well put this in now just copy and paste the same thing um so 37 left arrow we want to stop rotating so when the key is released we want to stop rotating left and this will be stop thrust we'll stop thrusting and this will be row stop stop rotating right okay now all we have to do here is instead of setting a speed we just set it to zero so there will be no rotation right now let's try that again just put that down reload there we go now if i push the left arrow yeah it okay something's not it's rotating the correct direction so when i push left it's rotating i might push right it's rotating that's fine but it's not stopping so something's going wrong here i see we in our key up we haven't uh put the event silly isn't it there we go so the key up will detect an event now let's try that so left release the key right release the key yep our rotation is working well but nothing else is happening we can't thrust at this point so how about we work on that can you see the uh the center of the triangle is more accurate if you put it at the front of the ship how we had it would look a bit funny so we've used the centroid so thrusting how are we going to handle that well we'll have to give you some more parameters some more properties to our ship so how about we say we'll just put a flag in here called thrusting so that's just a true false a boolean and we'll say it's not thrusting to begin with and then we'll also have the thrust magnitude so it can be simply it can have its own component the x component which will be zero to begin with and the y component which will also be 0. so we can set the thrust magnitude this allows us to when we thrust in one direction and we release the key the ship will continue in that direction even if we rotate it will continue in that direction okay so up arrow thrust the ship thrust the ship forward so first all we want to do in this actually when they push the up arrow all it will do is set that thrusting to true that's all it will do similarly when they release the arrow it will set the thrusting to false great but we're going to thrust this ship well fix it we'll put the thrust here before drawing it because we'll probably want to put a little graphical display as well that'll be behind the ship not trust the ship we want to thrust the ship okay so to do that we just need to set up a if um ship thrusting so if the ship is thrusting we want to do something don't we we want to increase the thrust so to do that we can just go ship dot thrust now the x component we want to add to it as long as we're thrusting we're going to add the thrust so we'll probably need a base thrust up here so how about the let's call it ship thrust um we'll set it to something say five we'll make this an acceleration so this is uh acceleration of the ship in pixels per second per second a little bit of physics for you so the ship thrust equals five so that means in the first second it'll go five pixels in the second second it'll go 10 pixels the third second 15 pixels and so on so it'll get faster and faster as long as you're holding that key so the ship thrust will equal the ship sorry the ship thrust x component will equal the ship thrust right multiplied by the cosine because it's going to be the x component the cosine of the ship's angle similarly the y will just be the sine component let's see if that works oh hang on we haven't moved the ship yet so it's updating the thrust component but we have to use that thrust in order to move the ship so what we need to do is the ship dot x will plus equals the ship's thrust x and the y component will plus equal the ship's thrust wire component so this will means it'll keep moving as long as we're thrusting that way or as even if when we release the key it should keep moving let's try it i'm pushing the up key i know what i've done wrong first of all we got the wrong direction right so in this shift thrust that'll be minus equals minus equals the x no the y component sorry because it's going the y component should be minus equals and we haven't accounted for the frame rate so just divide all this by the frame rate frames per second frames per second okay let's try that pushing up yep so i've pushed up now i can't pull back i don't want you have to turn the ship in order to thrust it backwards so turn the ship that way to stop going that way after thrust that way thrust that way probably will want some sort of frictional component i know depending where you are in space there's not much friction but let's for this game i think we should have some friction otherwise you'll forever zoom that way and never slow down so um to do that what do we need to do let's add a friction constant constant friction friction now usually friction coefficients in physics or whatever a value between zero and one so we'll set it up to say be point seven and we'll define that as friction coefficient of space where zero equals no friction one equals lots of friction you can have technically you can have a frictional a friction coefficient above one but we'll just stick to this uh so 0.7 now how do we apply that so somewhere in our thrust so thrusters ship somewhere in here we need to apply the friction node so when it's thrusting we want it to go forward otherwise that means that if they're not pushing the thrust key they're not pushing upwards when it's when it's not thrusting the friction will take hold so to do that we can just ship dot thrust x now we just want to reduce this by a factor of itself so we can just do friction times remember it's a value between zero and one so it'll get smaller times the ship's thrust so by itself the x component of the thrust and we need to divide that by the frame rate right um do the same thing for the y component except change that to a y i think that should do it so it should apply this frictional component every frame and slowly slow down the ship let's try it so i'll push forward a little bit let go and it's slowing down go that way let go yeah that seems about right so i can turn around i'm holding the arrow key while i'm turning here then i'll release it when i'm going on an angle say and it's slowing down great the friction is working well now in the actual game i think you can fly off the screen so if i fly off the top of the stream i'll pop back on to the bottom so how are we going to do that so we can handle the edge of the screen just after it's handle edge of screen so we need to detect when that happens first so if the ship's x component if the ship x is less than zero minus the ship's radius either way we want to set the ship's x to where we want to set it to the right of screen don't we so it'll be the canvas width plus the ship's radius right else if the ship's x is greater than basically greater than this here so it's greater than the width of the screen plus the radius of the ship we want to set it to this part 0 minus the radius right that's for the x component for the y component just need to change all of this to y y y y and use height instead height instead let's give it a go so thrusting thrusting upwards turning a little bit yeah pop back into the screen there will it go this way yes going back the reverse direction zooming that way yep well i'm going a bit fast slow down a bit seems to be working well great okay that's our i was just thinking when we're thrusting the ship maybe we want to add a bit of a graphic like a bit of a thruster like a bit of flame or something so to do that uh where we're thrusting the ship we'll just need to draw something here so draw the thruster right so the thruster will be a triangle um so we'll just copy and paste this one just get that indenting indentation there we go what stroke style are we going to have well i'm thinking yellow and we'll probably have a fill style as well i've got a comma there that's not right let's change that it's amazing it's working okay though we'll have a fill style as well so that'll be the interior the flame as such uh fill style will equal red you can customize these colors how you like the line width probably a bit thicker so we'll make it one tenth so the ship size divided by ten be in path um the nose of the ship it's not we we don't want to we want to thrust behind the ship so to do that we need to change this to a negative change this to a positive now that'll be the center of the ship actually copy and paste this second pass we'll start at the rear left first so we'll start at the rear left paste that in there so move to so this will be the rear left we want a line to the rear center which is behind the ship so this will be behind the ship behind the ship okay so that's all correct except that we want to do it behind so to do it behind we just need to multiply we'll times that by two we'll make it four thirds we don't need this here because it's the center so we need to get rid of that so lots of confusing maths i know so it'll just be the cos and the sign and four thirds of it to be behind the ship so maybe times two we'll make it eight thirds there you go that'll be twice as the length of the ship behind so near center behind the ship rear center behind the ship now the rear left that's correct except that we want we'll see what that looks like first now we need to also draw the fill here so the context fill let's try it now when i thrust whoa it's huge isn't it maybe it's a bit too huge let's bring the triangle in a little bit so to do that we can okay first of all it's too far behind it so we'll change it to six thirds say now to get it a bit thinner we could just put a multiply in here say 0.5 multiplier in each of these the left component the rear left and the rear right so hopefully that'll bring in the let's try yeah that's looking pretty good you can make your own sound effects we probably will add sound effects later that looks pretty cool you can adjust the size of it however you wish maybe you could just go with four thirds here what will that look like a bit too small isn't it depends what you like i'll put it back to six thirds sounds good great that's the thruster is there anything else we need to do here i think we're pretty much now reload that i think we're done for this tutorial you can turn off the center dot just need to where's the center dot here we go just stop drawing this and we have our asteroids ship that can go around and around thrusting along we're going to create the asteroids themselves that float around the ship in space so currently this is what our game does we have a little ship that flies around the screen wouldn't it be nice to have some asteroids floating around it so here's our code you can go ahead and download this from the link below so the first step would be to set up our asteroids uh variable so just underneath where we set up our ship we can create oh how about we set up asteroids so that'll just be a variable we'll call it roids just to keep it short roids equals a blank array and how about we create a function called create asteroid belt because during the game we'll probably have to call this a couple of times as we reset the screen and so on create asteroid belt that'll do so go down and create set that up somewhere here we go function create asteroid belt now what does it do probably the first step is to clear our uh clear hour of roy's array roids will equal that so i'm just clearing it because it may be populated during game secondly uh we want to loop over the number of asteroids that we'll be creating don't we so we could use a loop for that for so for i equals zero i is less than less than what how about we create a constant so up the top just create a constant we'll prefix all these by roids yeah roids num and we'll say there's three of them so this is the starting number of asteroids i say starting because as the difficulty increases we'll probably be increasing this as the level goes up roid's numb so i is less than roid's num i plus plus so that'll loop over all the asteroids now we want to add roids push that'll add something to our array how about we create a function called new asteroid again we'll probably need this for later on new asteroid um yeah we'll try that so we'll go make that down here function new asteroid we can create a variable called roid it's going to be an object and we'll return that object return roid now what do we need to know for each asteroid well we need to know an x y coordinate i think we should pass the x and y components because later on in the game we'll need to know the exact location so x will equal x y will equal y we'll need to know an x velocity which is going to be some random random velocity uh how about we set up a constant soon called roid's speed and we'll have to divide that by the frame rate we also want a random direction not only do we want a random magnitude we want a random direction so to achieve that we can go math random if math random is less than 0.5 then multiply by 1 so it'll go in a positive direction else multiply by 1 it'll go in a negative direction we can just copy and paste that for the y component as well we'll also want to know the radius of each asteroid it will change as we shoot them later on and that'll just be based on some roids size divided by two and we'll also want to know in a random angle so this has to be in this has to be in radians so math random times math pi times 2 which is the same as 360 degrees so this will be in radians so let's go ahead and create these size and speed roid size and speed up here so roid's size will be let's say 100 so this will be the start maximum starting size now we'll say the starting size of asteroids in pixels okay android speed i'm just taking some guesses here about what sort of speed we want put in pixels per second so this will be the max starting speed not paid speed of asteroids in pixels per second okay so the starting size of asteroids in pixels is 100 and the star the max starting speed of asteroids in pixels per second which is 50 pixels per second that looks good because we're passing x and y we'll have to go and modify our call up here so there'll be some x and y value that we'll put through there now what's that going to be we can just create two variables here var x and y how about we just create two random positions on the on the screen so that'll just be math random times by canvas width canvas.width we'll probably want to round that down math floor and do a similar thing for the y direction except that we'll be using height i can think of one problem here we're potentially going to have asteroids landing on the ship we'll handle that soon right now let's go down to the update function so where we draw our ship let's after that we'll draw the asteroids so we'll have to loop through each of the asteroids in order to achieve this so va i equals zero i is less than the roids length is just a property i think and i plus plus first of all let's set up the color of the asteroids stroke style equal i looked this color up before slate gray just to get them a bit of a different color from the ship and we also need to set the line width line width will equal we can base it off ship size i think ship size divided by 20. now let's plot out what we're going to do here how are we going to draw these things well i think we need to draw a path through a path what shape are they going to be probably a polygon would be suited so draw the polygon we'll work out these details soon and we also want to move the asteroid move the asteroid and handle uh handle edge of screen so we don't want them floating off into space do we edge of screen good now let's go back up to our where we create our asteroids so we want to create a random number of sides so we can achieve that by we'll make a property called uh vert short for vertex or vertices so it'll be math random times we'll make a constant called say math roidsvert now in order to achieve what we want we want a random number of sides but we don't want sides equal to zero or something do we so let's first of all add one to this to increase our maximum to what we expect so that will be just have roid's verticals 10 so that'll give us a number between 0 and 10. as i said 0's zero sided polygon is no good so we have to add something to this how about we add half the roid's vert so that'll be five for example we'll need to find the floor of the list to make it an integer floor we don't want 3.5 sides for example so that'll if roid's vertical's 10 that'll give us a random number between 0 and 10 plus half of 10 which is 5. so a random number between 5 and 15 centered around this number sounds good don't need the semicolon again so let's go recruit go ahead and create that roids vert will equal 10 and this will be the average number of vertices vertices on each asteroid okay so head down to our update function so each asteroid will have a random number of vertices all the way down here right there we go draw a path right so to draw the path we need to context begin path and then we want to move to the first point so move to move to the first x y location i'm thinking to save us a little bit of time we should probably get the properties grab all the properties and put them into a variables here so get the asteroid properties just to save us a little bit of typing i think so we'll set up some variables here x y the radius the angle and the number of vertices so x will equal roids i dot x and then we can go ahead and do the same for all our other things so y will be the roid's eye right roids y i should say the radius will be dot r the angle will be dot a and the number of vertices will be dot vert okay so our initial point will be the x location the center of the asteroid plus the radius multiplied by the cosine the cosine of the angle similarly the y component will be the sine radius times the sine of the angle now to draw the polygon we'll have to loop over the number of vertices so we can set up a new variable to say j will equal zero j is less than the number of vertices j plus plus and we want to draw a line to each corner of the polygon so context line two line two so in a similar way to what we've done above so x plus the radius times the cosine of the angle but we'll have to modify it based on which vertices which vertex we're currently at so we could do that by modifying this by j times 360 degrees math pi times 2 but we'll have to divide that by the number of vertices right so that'll for example if there was 10 vertices then this will modify the angle by 36 degrees each time which is what we want do the same thing for y except that we need to change it to sine after that we'll have to close the path and draw it by just going context dot stroke stroke right uh just quick review of our code just make sure there's no glaring mistakes um so we're going to create the asteroid belt and that should be a zero not an o divide by that math for random times can that should probably be canv not canvas right and they'll push some new asteroids set up some properties i think that's pretty good and then we'll draw them down in the uh update function down here let's try it there we go so we've got some randomly positioned randomly positioned polygons from size five so five sides to 15 sides i guess let's even get a fivesided one there's a seven just to make there we go there's a pentagon awesome but as i said mentioned earlier probably is that we don't want the asteroids to appear on the player like that so let's go ahead and fix that up now we can do that up in our create asteroids method create asteroid belt here we'll have to do something here we can handle this using a do while loop so do all of that while some condition now what is the condition we want a buffer don't we between the asteroid and the ship so how about we create a function called distance or dist between points distance between points and we're going to pass each of the coordinates so the ships location ship x ship y and the potential asteroid location x y now as long as that is less than some buffer so we'll just say the roids base it on the void size say times two plus the radius of the ship as long as it's less than that if it's less than that we'll keep creating new random points until it's not less than that so let's go ahead and create this function distance between points now what are we passing we're passing the points so x1 y1 x2 y2 alright so we're going to return now if you know your cartesian coordinate system it's the square root of the square so math power the square of x2 minus x1 x2 minus x1 squared plus similar thing with the y component y power y2 minus y1 squared that should be okay let's try it it's hard to tell because there's only three there's only three roids how about we bump this up to say 300. ah there we go see that buffer zone so they've been randomly placed but they're not being randomly placed within our buffer zone you could adjust that to suit your taste how pretty put that back to three great that's that handled okay so what about the shape of these asteroids so just have a look at them they're perfect polygons aren't they not exactly very asteroid looking so let's add some jaggedness to this so how about we go up and create a constant called roid's jag and let's define that to be a number between 0 and 0.1 so let's pick a number 0.4 this is the jaggedness of the asteroids and let's define that as zero equals none one equals lots okay now where we create our asteroids so in new asteroid let's create some variable some property which modifies the vertex location so each vertices will be one radius away from the center how about we create say an offset so offs that'll do offsets is just going to be an array and let's set up the array here so create the create the vertex offsets array okay so it'll be based on the size of the the number of vertices so var i will equal zero i is less than the roid dot vert i plus plus so we'll loop through for each vertex and create a random sort of multiplier to the radius okay so the maximum we'd want is the is so the minimum we want is zero and the maximum maybe say two two times the radius so that would be in the worst the most extreme situation so let's go roid dot offsets push we're going to push um a random number random number based off the jag so the roid's jaggedness and how we're going to handle it if it's so if it's zero we want nothing we just want it to be all of this to equal one if it's one it could potentially equal zero to two so how do we times this by two and add one minus the droid's jaggedness now does that work let's have a think about this so if it was zero zero times two is zero so it'll be zero plus one minus zero one okay that works fine so there'd be no jaggedness if it was maximum so if this equaled one we'd have 1 times 2 is 2 so 0 to 2 plus 1 minus 1 is 0. so b a random multiplier between 0 and 2. that sounds good how about in the middle 0.5 0.5 times 2 is 1 so 0 to 1 plus 1 minus 0.5 that would be a random number between 0.5 and 1.5 sounds good so we're populating this offset here great now how do we handle that let's go down to the asteroids here all we have to do is multiply this radius here by that offset so how about we create up here that should be vert doesn't really matter it's obviously declaring it anyway offs offs will equal roids i offs okay now the first point is going to be so this will be the radius times the off it'll be the first position won't it the office zero so whatever that random multiplier is it's going to multiply the radius by it and we're going to do a similar thing to here now how about here well it's not going to be zero it's going to be j isn't it it's going to be j in here but we've already done j equals zero up here so we don't how about we start one here so we'll start j at one yep that should work now let's have a look at see what that looks like hmm looking promising actually it's looking pretty good looking very good okay i think we solved it so let's go test different very different values of jaggedness say point let's do the extreme so one what will that look like yes you can see here they're very jagged okay now if it's zero there should be no jaggedness it should be a perfect polygon yep and then as you add more jaggedness so point one should be a little bit jagged yeah just a little bit depends what shapes you want in your uh i'm gonna go stick with point four that looks pretty good to me awesome now all we have to do now is move these things get them moving go down to where we had uh where are we draw the polygon close move the asteroid so that will just be roids i dot x plus equals roids i dot x v that's the velocity in the x direction similar for the y direction let's just oops this is probably one of the easier parts let's just check to make sure they're moving yeah so they're going at random speeds we could probably bump up the number of um bump up the number of roids to begin with just to see if say 10. yeah they're definitely going at different speeds different directions cool and the color is quite nice isn't it awesome let's put that back to three we also want to handle what happens when they go off the edge of the screen so currently if you look at these asteroids they go off the screen and then they disappear forever let's uh bring them back onto the other side of the screen handle the edge of the screen so if if roid's i dot x if that's less than zero minus roid's i dot radius if it's less than zero then it's gone off the left of the screen so we want to set roids i x to equal the canvas width plus the roid's i radius yeah um else it's not really an else it's probably more of an else if else if this situation roids roid's x is greater than the canvas of its plus plus its radius then we want to set to this roid's x will equal that that's for the x direction do a similar thing for the y direction so y y y y except it'll be based on height won't it height let's give that a go okay going off screen this right one here will it pop back on yep there it is over there there's one going off the bottom of the screen is it coming back on yep there it is so they're coming back on we can bump up the number of asteroids just to get a good feeling for it roids number ten there we go so one went off the top up there one's getting off the side here good i think that's looking good so that's the end of today's tutorial next time we'll focus on collision detection and making this making the ship blow up when it hits a when it hits an asteroid so in this tutorial we're going to allow the ship to crash into the asteroids by using collision detection so you can go ahead and download this code i'll have it in the link below so let's go ahead and create a flag called show bounding now this is just this show center dot i created off camera it's just a way for us to not delete code or not comment our code so we can always allow our development settings to stay there so for example show center dot if shows in a dot draw the center dot but we don't want that normally during game play so it's a nice convenient way to turn that off and we can do the same thing with our bounding boxes or our bounding circles to set that to true to begin with show or hide collision bounding so how are we going to represent our collision detection what shapes are we going to use for our bounding boxes well take a look at the game i'm thinking the simplest way is probably to just use a circle for everything so our ship would be represented with a circle and each asteroid would be represented with a circle it's not exact but it's a close approximation and i think it will do for such a high speed simple game so let's go ahead and use circles so let's draw our circle down in the update function where we draw our shear so draw the triangular ship just after we do that we will say if show bounding so if our bounding flag is on we want to set the color so the stroke style will equal say lime pick a color that u stands out uh we want to begin a path because that's how we do a circle and context dot arc now we need a center point which is going to be the center of the ship so ship dot x ship dot y and then we're going to use the ship's radius the start angle is zero the end angle is 360 degrees which is just math pi times 2 in radians and false for that final flag finally we just need to draw the stroke itself let's test that out yeah so we've got a bounding circle around our ship similarly we want to do the same thing for each asteroid so go down to where we draw the asteroids just after we draw it before we move it paste that in there but instead of ship dot x we just want x because we've already declared x to be the ship sec sorry the asteroids x y and r let's test that out yep so each asteroid's got a circle around it the only problem is that the color of the circle has gone through to the asteroid we can fix that up by just changing where we set the color of the asteroid so currently we're setting it before the for loop just paste that into the start at the start of the for loop so it'll do it every iteration give that a go great so what's our goal our goal is when the circle of the ship touches the circle of any of the asteroids the ship will blow up so first things first i think we'll need to take out the moving of the asteroid so how about we just stick to our drawing so in our update function we're drawing the ship and we're drawing the asteroids let's take out the movement and put it elsewhere so here we're rotating the ship and moving the ship so we'll place the asteroid stuff after that so move the asteroids we'll have to do another for loop here four bar i equals zero i is less than roid's dot length i plus plus and just encapsulate that and test it to make sure that we haven't broken anything yep it's still working so the asteroids are still moving next we want to check for collisions for asteroid collisions so just copy this first line of the for loop now before we start moving everything so before we start rotating the ship let's check for asteroid collisions right so we're going to cycle through every asteroid and check whether the distance between so this is a function we made before distance between points uh so the ship's x value the ship's y value and the asteroid so roids i dot x and the roids i dot y so if the distance between the individual asteroid and the ship is greater sorry is less than the ship's radius plus the roid's radius so the asteroid's radius that means the circles have overlapped what will we do there how about we just call a function called explode ship which we haven't made at the moment so if we if we run this now it should try to call this function and break it should stop working so let's try it right so we've got the ship let's try to crash into an asteroid yeah it's broken so as soon as those two circles met the it's tried to call that function and broken good that means it's working okay let's create that function explode ship first of all just copy this text sorry this code here to create a circle so up in this function so function explode ship let's just create a circle let's create a filled circle so it's an obvious sort of graphical indication that the collision detection is working so create a fill style the same color lime the x and y coordinate will be the x and y of the ship as well as the radius of the ship and we'll also call the fill method so we'll call it be calling a fill and a stroke let's test that so when we collide into a asteroid come on asteroids where are you there's one down there we should change to a field circle awesome and when we leave we're no longer filled good that means our detection our collision detection is working very well great okay what do we ultimately want to do here i'm thinking we should set so i'll just cut this i'm thinking we should set some property of the ship let's call it say explode time explode time and that will equal we'll say it's equivalent to the number of frames left in the explosion so that'll equal some constant say ship explode say duration multiplied by so that'll be in seconds multiplied by the frame rate to get the number of frames uh because we want an integer we should probably find the so let's say seal we'll find the we'll round up in effect okay so let's create this ship explode duration constant ship explode duration and it'll be in seconds so just choose a number 0.3 so this will be the duration of the ship's explosion right where we set up the ship initially we'll have to give that an explode what do we call it explode time and initially it'll be zero won't it that means there'll be zero frames left of exploding and that's how we're going to detect whether the ship is exploding or not when explode time equals zero it's exploding so go down to the update function how about the first thing we do just create a variable so it's going to be a boolean called exploding and that'll equal ship dot explode time equals zero no greater than zero so if the ship's explode time is greater than zero that means the ship is exploding okay so where will we draw this explosion i'm thinking instead of drawing the ship we'll draw the explosion in its place so if not exploding so if not exploding we'll draw the ship else we'll draw the explosion what will the explosion look like well i'm thinking just some circles to keep it simple so here we'll copy and paste this code here but we'll use filled circles so fill style will equal red the ship's radius how about we try times by 1.5 say and we need to call the fill method and how about we work inwards so we'll start with the outer circle which is red and then we'll make say three more red orange yellow and say white for the middle we'll change these radius percentages how about we'll decrement it by 0.3 each time so 0.9 here and 0.6 for the inner circle let's take a look at that crash into a asteroid um it's looking okay maybe a bit bigger in the middle and maybe we need another ring on the outside i think and we'll get rid of that uh bounding so i'll turn that to false show bounding explosion where are you here we are so what did i say maybe make it a little bit less in the middle so reduce that by 0.1 so that'll be 1.1 that'll be 1.4 and we'll also do one more ring on the outside a bit of a darker red i assume dark red is a html color and change that to 1.7 let's see what that looks like so there's no bounding circles now let's crash yeah that's pretty good i reckon we'll stick with that one if you go back to our game just restart that you'll notice that when we crash into an asteroid we can continue moving and our thruster is still working that's not what we want we kind of want to stop in place and just explode okay so let's fix that now so let's go up to our thruster so just up here draw the thruster we don't want to do that when we're exploding so if exploding that should be if not exploding if we're not exploding then we're happy to draw the thruster okay let's try that out quickly yep so there's no thruster coming out the side or the rear of the explosion that's good also we don't want to be moving the ship so go down to where we move our ship here we go rotate the ship move the ship we also don't want to be checking for asteroid collisions so we can include that in here so if not exploding we don't want to rotate we don't want to move and we don't want to check for collisions let's test that so i'm pushing forward bang i'm still pushing forward trying to turn nothing's happening great so what happens when the ship is exploding well we can handle that here in and else so else the ship is exploding we want to take the duration of the explosion into consideration so we can do that by ship dot explode time minus minus so we'll reduce the amount of time left on the explosion now what happens when that reaches zero so if ship dot explode time equals zero that means we should end the explosion so how about we create a new ship so ship will equal new ship now new ship is just a method i'm just creating well we'll go create that now so new ship now all it will do is basically this so where we set up the initial space ship we'll just cut that we can change that to new ship go go down to where we just after new asteroid will create new ship function new ship and what does it do it just returns that thing that we had copied okay let's test that okay so we'll fly our ship into an asteroid bang and we're resetting now there is one issue with this what if the asteroid is coming towards our initial restart position like this bang bang bang bang bang that's no good is it how the original game handles this is by allowing the player to blink for a few seconds before they start the game and this prevents any explosions from occurring so like an invulnerability or an invincibility or something similar so let's implement something like that we'll need to go up the top and set some parameters here so how about we have an invisibility duration or invulnerability duration we'll set that to say three seconds duration of the ship's invisibility in seconds and we'll also want to know how long is each individual blink during that invisibility so we'll call that say ship blink duration and it can equal say 0.1 second so 0.1 second it will stay off 0.1 second will turn back on duration of the ships blink during invisibility in seconds okay go down to where we create our share well i need to set up a couple of properties here so we'll have one called say blink time that'll be the we'll round up so math seal it'll be equal to the ship blink duration times the frame rate so the frame rate's 30 right blink duration is 0.1 so there'll be three frames every third frame it'll blink on and off and we'll also want to have the blink number keep track of the blink number so that will be equal to the ship uh invisibility direction so that's three seconds divided by the ship's blink duration so that'll be a total of 3 divided by 0.1 so 30 blinks so there'll be 15 off and 15 on that sounds good so just down below in our update function let's create another variable called blink on say blink on and that will be equal to well let's say that when the blink number is even then we'll be blinking on when it's odd we'll be blinking off so we can handle that by using so ship dot blink num mod two when that equals zero so when the remainder of dividing that by two equals zero that means it's an even number else it's an odd number right so where we draw our ship so if not exploding inside there so if blink is on if blink on we want to draw the ship how about underneath that we handle the situation we'll just say handle blink handle blinking so we need to so if the ship blink number is greater than zero that means we have to do something here how about we reduce the blink time so that's what's keeping track of the blink duration so blink ship dot blink time minus minus and we also want to reduce the blink num blink num reduce the blink num ah so that's if ship dot blink time equals zero if that equals zero then we want to well we have to reset that don't we so reship dot blink time will equal math dot seal rounding up uh the ship's blink duration times the frame rate and we'll also decrement the blink num so ship dot blink num minus minus hopefully that should work okay it's a blink and it lasted a number of seconds let's see if that works after we smash one two three yep good it seems to be working the only thing we haven't done is that we haven't incorporated invulnerability yet have we we haven't changed the collision we haven't included blinking the collision control so let's deal with that now so let's go down to where we handle collision control move the asteroids here we go so check for asteroid collisions so we only want to do that if the ship's blink num equals zero so that means we're not currently blinking if the ship's blink num equals zero we'll handle collisions so if it doesn't equal zero it'll ignore collisions it'll make us invulnerable let's test that we'll probably need to uh bump up the number of asteroids a bit so as roid num let's make 30. okay so we're in invulnerable bang yep bang so invulnerable while we're blinking oops let's see if i can not hit one good so i'm not just blinking all the time bang now i'm invulnerable one thing i noticed is that our thruster is still not blinking we should probably make that blink let's go back and fix that so just reduce that back down to three head down to where we draw our thruster so draw the thruster if not exploding and blink on then we'll draw the thruster let's test it yep so our thruster is blinking as well let's crash into an asteroid bang are we still invulnerable yes just smashing it on yep everything looks to be good so that's the end of today's tutorial so we've looked at collision control and blowing up the ship next we'll focus on shooting so using the laser of the ship by pressing the space bar and blowing up asteroids currently our code allows us to fly ship around and smash into asteroids but apart from that we can't do anything else so in this tutorial we're going to create a laser effect so we'll be able to press the space bar and shoot these pesky asteroids so you can go ahead and download this code if you don't already have it first of all let's create some constants how about we create one called laser max so that'll be the maximum number of lasers on screen at once we'll set that to say 10 to begin with so that'll be maximum number of lasers on screen at once and we'll also have say the laser speed because we'll need to know how fast these little things travel we'll put that in say pixels per second uh speed of lasers in pixels per second so how will we detect when the space bar is pressed well we can go down to where we detect our other key presses so in the key down method just copy and paste one of those cases there the key code for spacebar is 32 so let's label that space bar and what will it do it will shoot the laser so let's just create a function name here shoot laser there we go we'll implement that after now in the key up method so when the spacebar is released what should we do well i'm thinking when we press the spacebar we should lock the shooting so you can only shoot once per press so here we should allow shooting again so when when we release the spacebar let's allow shooting so we could probably handle that with a property on the ship called say can shoot and we'll set it to true here can shoot equals true let's go down and add that to the ship now so in the new ship method can shoot it should start off as true shouldn't it we want to allow shooting to begin with we'll also need to keep track of our lasers so they can be kept kept track of here in the ship and it's just an empty array to begin with so just below let's create our shoot laser function so function shoot laser in that we want to create the laser object and we also want to prevent further shooting that's fairly simple to manage just go ship dot can shoot equals false now before we add a new laser object we want to check a couple of things so if one the ship can shoot so if the ship can shoot and the ship dot lasers array the length of that is less than our laser max right if both of those conditions are true we can add we can safely add a new laser so to add a new laser we just go ship dot lasers push we'll want to put this in curly braces because it's an object that we'll be creating here we'll need to know the x coordinate and the y coordinate where we'll be shooting from i think we'll be shooting from the nose of the ship so from the nose of the ship and we have used that code before just need to go down to where we draw our ship uh where is it here it is nose of the ship so just copy both of those there the x and y coordinates paste them in there that'll be the y just need a comma there we'll also need to know the x velocity which will be based on the laser speed times by the cosine of the ship's angle lots of trigonometry in this divided by the frame rate to get pixels per frame and similarly for the y velocity except that it'll be the sine of the ship's angle so let's go down and draw our lasers we can do that after we've drawn our ship so just after the collision circles there in the center dot so draw the lasers so we'll have to use a for loop var i equals zero i is less than the ship dot lasers dot length i plus plus uh we'll have to set the context fill a fill style i'm thinking we'll draw small circles to represent the lasers now check some of these colors out before so i'm just going to use salmon for the laser color it's quite nice we'll need to begin the path to draw a small circle and we'll need to use the arc method arc and we need to know the x that'll be the ship dot lasers i dot x the ship dot lasers dot y the radius we'll base that off the size of the ship so we've got a ship size say divided by 15. the start angle is just zero the end angle is math pi times two which is effectively 360 degrees the final flag doesn't matter and we'll need to draw we'll need to call the context fill method to draw this let's just test that now they shouldn't move at this stage cool so they're appearing at the nose of the ship that's promising and we can only should only be able to do 10 of them yep great so let's go down and move the lasers so just after we move the ship move the lasers again we'll need to use a for loop so for i equals zero i is less than the ship lasers dot length i plus plus so what we'll need to do here is just go ship dot lasers i the x position plus equals ship dot lasers i xv which is the velocity in the x direction similarly for the y we just need to modify it by yv let's test that so shooting lasers oh not quite going in the direction we want i see the problem one of the i guess the y so back up where we shoot our lasers shoot shoot shoot lasers i see the yv needs to have a negative there because negative is upwards on the screen let's give that a go great now the only issue is that once we run out of those 10 shots there's no more they're forever flying off into space so let's fix that up now the first thing we can do is handle the edge of screen so just go down to where we move our laser draw the lasers move the lasers handle edge of screen so we've done this affair a few times with other objects so all we need to do is say if let's copy this make it easier for me if the ship sorry the laser's x position is less than zero then we just want to set it to equal the canvas width else if the laser's x position is greater than the canvas width then we want to set it to zero copy all that we'll do the same sort of thing for the y position the y position the y y y and instead of the width we'll use the height okay let's give that a go shooting some lasers yep i can only shoot 10 and as you can see they forever fly around and around the screen so what we'll probably need to do is set some maximum distance they can travel and then they kind of fizzle out or just dissipate or whatever so let's do that now firstly let's go all the way up the top and create a constant called say laser distance or just laser dist and let's make it a fraction of screen width so choosing a fraction i'm going to say 0.6 and we'll call we'll define this as max distance laser can travel as fraction of screen width we'll also need to set up a property on the laser so go down to shoot laser and just here we'll add a property called dist distance traveled and we'll set it started at zero so let's head on down to where we move our laser uh move the laser just after where we update its position let's calculate calculate the distance traveled so ship dot lasers i dot distance plus equals and we'll have to use a pythagoras theorem here so a squared plus b squared equals c squared so the square root of the square so math power of uh this here the x velocity component that's what we're adding each time so the power of that sorry the square of that plus math power the square of the y velocity all square rooted should give us the distance and what do we need to do with that distance well before we move our ship so this will be move the it's not the ship is it move the laser we'll want to check distance traveled and we want to delete the laser if this happens don't we so if ship dot laser dot distance is greater than the laser distance now that's as a percentage of as a fraction so times the canvas width if it's greater than that then that means it's gone far enough and we want to delete it there's a couple of ways we can delete from an array i'll be using the splice command so ship lasers splice and splice takes the start number which is going to be i and the delete count which is just one we just want to delete one thing now the issue with splice is that it permanently changes the size of this array meaning our for loop will have some problems so we can get around this but instead of going forwards in the loop we'll go backwards so var i will equal the length of the array minus one and we'll go until i is greater than or equal to zero and instead of incrementing we'll decrement so i minus minus uh so that'll be removed so we won't want to continue in this we won't want to try to move the laser because it won't be there so we'll hit we'll hit will write the continue command now all that does it skips over the rest of this and goes to the next iteration of the for loop so that should be okay let's give it a go shooting lasers yep they are not going on forever how about we change it to something a bit smaller so the laser distance will change to something a bit smaller say 0.2 just so we can get a real good feel for it shoot some lasers awesome so we can un unlimitedly shoot these lasers because they're destroying themselves after they reach point two of screen width let's just change that back to point six now we need to detect when the lasers actually strike the asteroids so head down to our update function just under where we draw our lasers draw the lasers so we'd like to detect laser hits on asteroids right i'm thinking we'll probably need to use some variables here just to make it a bit cleaner so we'll have the asteroid x the asteroid y the asteroid r the laser x and the laser y so we'll need to do a for loop backwards again because we'll be removing asteroids so we'll have i will equal roids dot length minus one i is greater than or equal to zero i minus minus right so we can grab the properties of the grab the asteroid properties so ax will equal roids roids i dot x similarly for the other one so a y the asteroids y will be that and the asteroid's radius will be that okay now we can loop over loop over the lasers yeah so we'll have to work go backwards with this one as well because we'll be removing the laser after it strikes the asteroid let's use a different variable j so j will equal the ship dot lasers dot length 1 j is greater than or equal to zero j minus minus let's grab the laser properties so l x will equal ship dot lasers j dot x and the l y the laser y will be just the dot y one so we've got all the properties now now we need to detect when detect hits or to say detect hits so what happens how can we determine that well let's use a condition so if the distance between points that's one of the functions we made earlier on so the x1 y1 is the asteroid x the asteroid y x2 is the laser x and the laser y now if the distance between the asteroid and the laser is less than the asteroid's radius then we've got ourselves a hit we don't need to worry about the radius of the laser it's too insignificant it's only small so that's a hit now what do we want to do here well we want to remove the laser so that will be done with a splice command so we can go ship dot lasers j sorry lasers dot splice and in brackets we can go j comma one and we also want to remove the asteroid well there's more we want to do but this is just a temporary placeholder so we'll go roid roids dot splice i comma 1 so that should remove the laser remove the asteroid and we don't need to continue cycling through this for loop once the laser one once we've detected a laser striking the asteroid and it's destroyed we can break this break let's give that a go right so there's some asteroids let's shoot one good it's disappearing there's another one bang bang now in the original game when you shoot one of these big asteroids it actually breaks into two mediumsized asteroids and then when you shoot a mediumsized asteroid it breaks into two smaller asteroids and then finally when you shoot a smaller asteroid it's dead it's completely dead so we'll do the same sort of functionality i'm thinking we should have a method call here say destroy asteroid now the reason being we'll pass its index the reason being is that there's also another situation that we can destroy an asteroid that's if we ram our ship into an asteroid it also gets destroyed like kamikaze pilot or something now if we go up to our new where we create the asteroid so new asteroid because we're going to have various sizes i'm thinking that we'll need to pass the radius in here right so we have to find out where we're calling this so far and update it it's a new asteroid we'll pass that instead i'd like to keep these as integers because we'll be using them as to compare what's to figure out what size the uh asteroids are so we'll just do a math seal there because this roid size is we don't know what that could be somebody could set it to 77 right so there could be a fraction there good now let's create the destroy asteroid function now it will take the index won't it that's what we passed earlier destroy asteroid let's grab some of the properties first so the x value will equal the roids index that's the index being passed dot x and we'll grab the y component and we'll also grab the what else do we need to know the radius i think so of course we need to know the radius because we need to split the asteroid into if necessary remembering only the bigger ones need to be split necessary so if the radius equals so if the radius of the asteroid being hit is equal to the basically this that means it's the original size the biggest size if it equals that we need to split it into two so what how we can do that is just go rides push new asteroid new asteroid and it requires x y and r so the x will be equal to the same we'll just set it to the same point so x the y will be the same the radius will be half the size so we'll divide by four instead of dividing by two okay and we want to do that twice because they split into two now naturally because we're calling this new asteroid method they'll also have random velocities and so on so that'll be fine else if r equals now if it equals this here that means it's a medium one that's been that's been hit if it equals that we want to do a similar sort of thing so we'll just copy all that but we want to break it into even smaller pieces so divide by eight at the same location and finally destroy the asteroid so the original asteroid that's been split that's just where we can go uh roids split uh splice roids splice now the start number is the index and we just want to remove one destroy index we also want to call this don't we elsewhere let's call that where our ship smashes into something uh draw the lasers hits on the asteroids check for asteroid collisions when not exploding yep so when we explode the ship we also want to destroy the asteroid now which number asteroid it'll be equal to i here i let's give it a go hopefully it'll work so first of all there's a asteroid there's one un shoot it great it's splitting into two the medium one's splitting into smaller ones now how about the smaller ones yep they're getting destroyed awesome amazing we got that right first time around so it seems to be working really well except we just need to test whether ramming one of them will destroy it bang it did now will this split the two if i ram it awesome try it with a bigger one cool that's just one issue that i've found is that sometimes when you smash into it you destroy more than one asteroid especially when you're invincible like that see that the reason for it is that it's because it's it's cycling through all of the asteroids so that's not right all we need to do to fix that though is break there so once our ship has exploded it no longer continues destroying asteroids try that one more time so when you're invincible in inside something yeah that's better that should only break that should break into two yep awesome great there's just one last thing i'd like to do in this tutorial and that's to create some graphical effect when the laser strikes an asteroid so go right at the top we'll set a duration for the laser explosion so probably similar to this here ship explode duration will have a laser explode duration and let's let's just say a bit smaller say 0.1 a second so duration of the lasers explosion in seconds right so we'll have to give our laser a property some called explode time so go down to where we shoot the laser we'll add a property called explode time and it'll start off at zero so that means it's not exploding there is no more explosion remaining now go down to where we draw the laser draw the lasers right so here we want to say if ship lasers i dot explode time if that equals zero that means we're not exploding and we'll just draw the normal laser beam laser ball else this is will draw the explosion draw the explosion so it's just going to be some concentric circles similar to what we did with our uh ship when it collides with an asteroid um how about well let's see what we can do here how about we based off the ship's radius times by say 0.75 we'll do this a few more times 0.5 and say 0.25 we'll just have two because it's going to be a smaller circle we'll just have three concentric circles and the colors well they'll be based off this one how about i look some of these up before orange red salmon and i think pink was a nice one then we'll have to go down and set the explosion time so where we're detecting the hits we don't want to remove the laser at this point so we can go ahead and delete that we want to destroy the asteroid and activate the laser explosion we can do that just by setting the property so ship lasers j isn't it yes j dot uh explode time that will equal the the ceiling so the rounding rounding up of the laser duration the explode duration times by the frame rate we also only want to run this if all of this if all of that equals zero that means we're not exploding and the distance meets that requirement then we'll destroy the asteroid and activate the laser explosion finally we need to decrement the explode time so go down to where we move the lasers we also don't want the laser to be moving when it's exploding so here we can handle the explosion so if ship dot lasers i if the explode time is greater than zero that means we're presently exploding doesn't it else we want to move the sh move the laser and calculate the distance we don't need to do these things when we're exploding so we'll decrement the explode time here so just minus minus exploded time minus minus and then we want to destroy the laser after the duration is up so if explode time equals zero then we will ship dot lasers dot splice i comma one so we'll just remove the i f laser and we'll just hit we'll just use the command continue here to prevent it from continuing sorry to prevent it from going over the remaining code it'll just jump back to the full the next iteration of the for loop hopefully that should work let's take a look cool so we've got ourselves a little blast radius it looks pretty nice it's working let's see if we can crash into an asteroid great bang bang bang looking pretty good so in this tutorial we're going to implement new levels a live system might give the player three lives and a game over screen right you can go ahead and download this code if you like from the link below first of all let's go down and create the skeleton of what we want to do today so just where we set up our ship and roids and so on how about we make it more generic set up the game parameters right so we'll declare our variables we'll need a level current game level we'll put our roids here as well as our ship and we'll create a method called say new game because we'll have to call that after our game over so all this stuff we'll put in another method so go down create the new game method new ship that'll do function new game and it will create our ship we don't need to set up the asteroids because there's they're created inside this create asteroids method we'll probably need a new level method because after each level we'll call that and inside the new level method we will call that create asteroid belt so it can just go straight after here function new level and all we want to do currently is create the asteroid belt just make sure we haven't broken anything yep that's looking fine so inside the new game method we want to set up our level our initial level so i can start at zero now what does level do well i'm thinking probably inside our new asteroid method we want to speed up we want to make it make the asteroids go incrementally faster so how about we create a variable called level multiplier and that will be equal to 1 initially plus say 0.1 times the level so as the level increases this will slowly go up this level multiplier and we just want to multiply our base roid speed by that level multiplier we will do that in both the x and y direction good and also where we create our asteroid belt up the top here we want to increase the number of asteroids so we can just go where it says i is less than roid num which is currently three we want to add the level each time so at level zero it won't affect it but at the next level it'll add one and so on currently it won't do anything it will not obvious so we can test it by changing that initial level back down in the new game set to say level 10. yeah you can see that there's more asteroids and they're faster so if we set that to level 20 there's lots and lots of asteroids going very fast good uh let's set that back to zero now we need to increment our level so when do we do that well it's when the final asteroid is destroyed isn't it so go up to our destroy asteroid method can you see that the final line is to remove it from the array so all we have to do is do a simple check there so new level when no when no more asteroids so we can just use if roids dot length equals zero then we want to increment our level level plus plus we also want to call a new level simple enough let's give it a go i'll just change the initial number of asteroids so i don't have to shoot so many uh roid numb we'll change it to one right so when we destroy this asteroid we'd expect it to go to a new level with two asteroids where's that asteroid so i'm not very good at this game there we go and there's two new asteroids awesome and we've destroyed both these asteroids there should be three on the next level and they'll be going slowly faster that'll be hard to notice but that's okay it's an incremental thing come on there we go and there's three asteroids awesome i'm thinking wouldn't it be nice if we had some text between levels showing the current level number just to give the player some indication and we probably want to make it fade out as the as time progresses so how about we create two variables down where we're setting up our game variables one called text and one called text alpha so alpha will be the transparency component of our text and we'll also need two constants how about we call the first one text fade time set that to something a couple of seconds 2.5 seconds say and that will be the text fade time in seconds and we'll also want one called say text size uh we'll put it in pixels choose a number say 40 pixels this will be the text font size in font size font height in pixels right now where are we going to set these up well probably at the start of the level so we'll go down to new level new game new level so text will equal what we want to show level plus the current level so it'll be level plus now remembering we're starting at level equals zero we don't want to display level zero so we'll add one to this so that'll be level plus one and the text alpha we want to start at full opacity so that'll equal 1.0 text alpha takes a number between zero transparent and one op opaque so to draw the text we want to go down to our update function how about we draw the text last so that it appears on top of everything so after we draw our lasers i believe draw the lasers just after that we'll say draw the game text now we only want to draw this when the text alpha is greater than zero so text it probably wouldn't matter if you didn't check for this but we will so if text alpha is greater or equal than 0 then we want to draw our text so how about we give it a color first so fill style sorry context dot fill style will be a color now we want whites but we also want to set the alpha component so to do that we can go rgba bracket now white's just two five five two five five two five five and after that we need that alpha component so we can just add to the string our text alpha and then we'll also have to close that the bracket the parenthesis okay we'll also want the font so the font will equal well here we can add a whole bunch of uh strings but you put the style how about we put just as an example put small caps uh we'll need the size of the font so we've already decided that so text size now that's in pixels so we'll have to put px after it and we need the the the type of font so deja we'll put deja vu sans mono i mean you can put ariel there or century new whatever your favorite font is right now we'll need to draw the text now so that'll be fill text the fill text command it requires a text string which is just text the x will say it's halfway across the screen so canvas canvas width divide by two and the y component we could put it in the middle of the screen but then that'll be over our space ship so that's probably not good how about we put it say three quarters of the way down the screen so canvas dot height times 0.75 and finally we need to decrement our alpha we want to slowly fade out so that'll textile for minus equals now it starts at 1.0 but we'll have to divide that by our duration so text fade time and we'll have to take into account the frame rate so divide by fps and we'll probably have to bracket all that so that it treats it as a single thing let's give that a go oops level one well it's appearing and it's disappearing just the location of it's not very good we just need to center it so we can do that by going context text is it text text align the align will be in the center and we can also align it vertically by saying text base to line equals middle i believe you can look all these up let's give that a go level one great so if we destroy this asteroid will we get to level two and will it show the text my shooting skills need improvement there we go level two good i think that's enough of a transition between levels next we'd like to deal with the game lives so we'll start with probably three lives so let's create a constant to represent that constant game lives will equal 3 that's the classic number but you could set it to 5 or 7 or whatever so starting number of lives and we'll also need a variable to keep track of current lives so l just call it lives inside our new game method we can initiate that so lives will equal game lives and we also want to draw some some graphical representation of these lives which is usually just the ship itself in the top left corner so go down to where we draw probably just after we draw the game text we'll draw the lives so we'll have to use a for loop here so var i equals zero i is less than current lives i plus plus and we'll need to we'll have to make a method here say draw ship because we already have drawn our ship we don't want to repeat the code here so we'll go ahead and make that method find out where we draw our ship first we draw it here we go so draw the triangular shape just this code here we'll cut that now we'll need to know separate x and y location because the ship moving around the screen isn't going to be the same x and y location as the lives and probably the angle is important too so we can go draw ship we haven't made this method so i'm just preparing it draw ship say ship dot x ship dot y and its angle so x y and the angle let's go ahead and create that method now so just after disk between points function draw ship now we need an x component a y component and an angle and inside there just paste what we had in on the clipboard i'll just have to update this to match the parameters there so the line width the style that's all good the x and y will just be the x and y we don't need ship prefixing it so just go ahead and delete all that x y x y and also our angle so it's just going to be a so we'll have to delete all the ships before the a's a little bit of a tedious process but well worth it it'll save us time in the end there we go and all we have to do now is update that new inside the lives we just need to update what x y and a are so that should be okay where we draw the actual ship now inside lives we need an x component well i'm thinking it's going to be it's going to start at the ship size so it'll it means we'll have some sort of margin but as we draw contin as we draw across the screen we'll have to multiply so we'll say i times we'll add i times the ship size and we want some space between each ship so probably just say times by 1.2 that's the x component now the y component will be i think just the ship size it doesn't have to be very much i don't think and the alpha well it's going to be 90 degrees now in radians 90 degrees is 0.5 times math pi hopefully that should work let's give it a go yeah that's looking pretty good so we can see our lives up there any issues that nothing happens if we crash if we crash oh i just want to crash nothing happens because we haven't implemented any code to decrement the lives how about we reduce our lives after the ship has exploded so just go down a little bit where we reset the ship after the explosion has finished and here we can decrement our lives so lives minus minus and we may as well handle the situation where lives equal zero so if lives equals zero so that means we'll be finished the game we can just call a function called game over game over man else we'll just do what was already there the ship equals new ship so let's go ahead and create an empty game over function so just after explode ship function game over and believe ourselves that to do here to do game over let's give that a go so if we crash into this asteroid we expect the ship to disappear yep after the explosion awesome to make that look really nice how about we change the color of the ship the life ship that is as we strike the asteroid just to give it a little bit of a graphical indication so to do that we can go down to where we draw our lives okay draw the lives how about we create a variable called say life color and we'll set that dependent on the situation so life color now when the ship is exploding that means we've struck an asteroid we want it to be a different color but only the last life the final life of this series so exploding and i will equal lives minus one that's that'll be the last one okay if all of that is true then let's set it to say red else we'll set it to our normal color white now how we're going to pass this we've already got this method drawship how about we give a fourth parameter called color so we'll just pass life color here now we're already calling this elsewhere we could go ahead and update you know the color for each single call or we can just set a default make it optional so go to our draw ship function declaration we can say the fourth parameter is a color and we can just go equals white and what that does if they don't provide a color it'll automatically assign it as white it'll be a default color and just down here we can go color so let's give that a go so hopefully we should get that first life turning red when we strike this asteroid great so it turns red and then disappears a few moments later awesome the last thing that we'd like to do in this tutorial is implement the game over function so how about we set a property on the ship something to indicate that it's no longer with us so how about ship dot dead equals true we'll also want to set some text to let the player know that the game is over so game over text equals game over to make that work we'll have to set the text alpha text alpha will equal 1.0 full opacity so we'll go down to the new ship method and put in that dead property so dead it'll start the game as false we don't want them to be dead to begin with let's give that a go so if we crash our ship three times hopefully it'll show a game over a game over message come on this is there we go okay i'm over the only thing is that we can still move our ship around so that's no good is it so to handle that we can go up to our event listeners so key down in the key down method we want to say if ship dead just return so that means it won't access any of the code below it won't allow the user to do anything with the keys and similarly in the key up method just paste that in there right also we don't really want to draw the ship do we it should be dead so it shouldn't be there anymore so down in our update function where we draw so the asteroids are okay thrust the ship we don't want to do that so if ship thrusting and not ship dead so the ship is alive we'll thrust and draw the thruster draw the triangular ship so if blink on and not ship dead we'll draw the ship now the lasers are okay the game text and all that's okay draw the lives probably we don't want to detect uh asteroid collisions anymore so if ship link number equals zero and not ship dead will detect asteroid hits right let's give that a go so crash your ship three times bang bang and final one game over and i can't control the ship there is no ship good finally we'd like to reset the game after some period of time how about where we we're checking for text alpha so that game over that game over message will appear how about when that finishes so we'll say else if uh ship is dead so that means only when the text disappears and the ship is dead so they'll be at the end of game definitely we will say new game new game let's give that a go so smash into the asteroid bang smash into the asteroid again bang and one last time let's see what happens game over the text disappears and we start again at level one i think that's pretty good and that'll do us for today's tutorial so today we implemented lives and resetting the game and level up and so on increasing the difficulty so wouldn't it be nice if we had a scoring system so first of all let's create some constants to represent how many points each of our asteroids are worth so roid points large now in the original game the large asteroids were worth 20 points so we'll do the same thing so this is the points scored for a large asteroid so go ahead and copy that a couple of times we also have medium asteroids worth 50 points medium and we also have small asteroids worth 100 points because they're the hardest to hit we'll also need a variable so go down to where we declare our variables called score that'll be our current score and in this new game method we'll want to reset that to zero so put that in there score equals zero now where will we increment our score well that occurs when we destroy an asteroid doesn't it so go up to our destroy asteroid method here we go and in where we deal with our large asteroids we can simply go score plus equals roid roid points large we'll do a similar thing inside the medium part of this statement there we go score plus equal roids points medium and to handle small we can just simply put an else in here else if it's not medium or not large we'll add the small points now let's go down and draw the score how about we put the score in the top right hand corner of the screen so just after we draw the lives we can draw the score and let's copy and paste some of this code up here to draw text okay so the text to line because we're on the top right hand corner we'll change that to right the baseline can be middle that's fine the fill style we just need plain white we don't need to change the transparency the font we don't really need small caps because it's only going to be numbers uh the text size pixels deja vus mono is fine fill text will be filling the score the position will be the canvas width but we do want a slight margin so let's base it off our lives margin so this is ship size so we'll have ship size divided by two because the ship is the center of the chip chip size divided by two and the y position will be the same exactly the same as our ship so ship size let's test that great we have a zero in the top right hand corner that's promising let's shoot one of these big ones we get 20 points that's good now a medium one oops i shot another big one mini one was worth 50 and a small one should be worth that should bring us to 190 uh 340 yep that's working well now how about in the middle the top middle of the screen we put a high score so let's go ahead and create a high score variable so head back up the top and declare that variable so just next to where we declare the score we can also say score high and inside our new game function how about we initialize that score high now ultimately we'd like to grab this from somewhere like a saved location or something but just to begin with let's just set that to say 100 just to make sure that it works uh where do we where will we handle the high score well up in our destroy asteroid method where we're incrementing the score just after we do that how about we do a check check high score and that's simply going to be condition so if the score is greater than the high score then we want to set the high score to equal the score so score high will equal score of course we'll need to draw that so head back down to where we draw our score draw the score we're going to do a very similar thing with the highest score draw the high score the text line is going to be the center because we want it in the top middle of the screen text baseline is fine the field style is white the font is how about we set this to a bit of a smaller font so it doesn't take away from the current score so we'll say times by 0.75 just put that in brackets otherwise the font is the same the fill text will be the score high the position will be the middle of the screen so it'll be the canvas width divide by two and it'll be the same y the same y component let's test that okay the 100 it's not exactly in the center of the screen is it ah that's a spelling i've got the australian spelling not the american spelling so center with an er let's just double check that good i'm thinking we'll probably need some sort of text before that so maybe say i'm going to use the word best but you could use hi or top or whatever best plus the score high let's see if that looks okay yeah that looks okay now let's test to see if it works so we'll be trying to get more than 100 there we go so it's updating to match the highest score obviously the biggest issue is that when we reset this it goes back to 100 we'll want it to persist between browser sessions and indefinitely basically so how can we do that in the past we would have used cookies but with html5 we can use local storage local web storage so zoom back up to our new game method where we set the high score we can just write local storage dot get item now this get item function requires a key which is a string like this is like a save key now this only has to be unique within our code it doesn't have to be unique across all our software or whatever i believe it's based on the url so let's create a constant prefix it with uh save key save key score so it's just a string we can call it for example high score and this will be the save key for local storage of score of high score good go back down to new game put that in there save key score let's see what that does right so when we haven't set it we haven't set it yet it comes back null so we'll have to check for that how about we pull that down just underneath we do where we do all this ship equals new ship get the high score from local storage so how about we create a storage string so score string will equal all of that so that's our string now if that string if score string equals null then we want to set the score to so set the high score to equal zero that means they haven't set a high score yet else we want to set this high score to equal the score string but because it's a string we'll have to pass in so pass int uh requires a string which is just the score string hopefully that will work let's give it a go best is zero now although the score is going up if we reset this it's not storing it is it so we'll have to store it somewhere so up where we increment our score and test for the highest score inside our destroy asteroids method so check high score here we can just set it here so we can go local storage set item we need the key so the save key save key score and the value will be the highest score score high and hopefully that should be everything all right so we've currently got the best score of zero now we put the best of 20. that's reset yep it's persisting so that should persist between browser sessions between games between everything so let's try again 190 reset good and let's just to make sure it's really working how about we destroy our ship so we should have a high score let's get a high score first to 310 410 let's smash the ship a few times 460 560 and one more life left 610 so this should reset yep the score's reset but our best score is still 610 great so in this tutorial we're going to learn how to add sound effects to our game and music to some extent first of all go ahead and download the sound files from the link below i'll link to a zip file it's important that you extract the sounds directory to the same location as the html file so i've just created a folder called asteroids here put in both the code and the sounds folder that's important because we'll be referencing this this directory inside our code so inside the sounds directory there'll be six sounds explode hit laser music high music low and thrust i just used the program audacity to create those but i won't show you that here we can save that for another tutorial so go ahead and open our code so head down to where we set up our variables so just before we just after we set up the canvas let's set up sound effects so it's a pretty simple process we just need to create a variable let's prefix all our variables with fx just to make it clear so fx laser will equal new audio and just inside there we'll need a string for the source so that that'll be the directory name sounds forward slash the name of our file so laser.m4a now where do we want to call that where do you want to play that sound well in the laser method don't we so just head down to where we press the space bar there should be a shoot laser method now within that if condition all we have to do is go fx laser dot play and because it's a function call we'll need the parenthesis let's give that a go okay couple of problems first of all it's quite loud so we can fix that up in code and secondly when i push the spacebar continuously it's not playing every shot so watch again so although i fired about 10 shots it only played it about three or four times that's because when the sound is playing and i call another play method it won't play it until it's finished so that's a problem we can fix that up though so head back up to where we create our audio currently we're using this inbuilt object or inbuilt class called audio how about we create our own custom object called sound it will behave exactly the same way we'll make sure that it does go down and create that let's create it just before our update function so function sound the first parameter will be the source now the second parameter how about we create a parameter that handles multiple concurrent plays of our of our file so let's call that max streams and set its default to one that's currently the behavior we're experiencing now so when we push the space bar multiple times it will only play one sound at a time and we'll also want to set the volume here now volume takes a value between zero and one so how about we give it the default value of one which is maximum volume or normal volume so we'll have to create we'll have to keep track of which stream we're currently playing so we can go this dot stream num equals zero and we'll also need to keep track of each stream so that could be handled by an array for example so this dot streams will equal an empty array now to populate that array we can just use a for loop so for var i equals zero i is less than max streams i plus plus so we can push to that array so this dot streams we'll have to use we'll have to prefix all our variables here with this so that it's referring to the objects variable so this dot streams dot push now all we have to push is a new audio object so new audio and it takes the source as an argument and we might as well set the volume here so this dot streams i dot volume volume will equal vol that's what we're passing up here that should set that up okay next we need to implement the play function so we can handle that by going this dot play will equal function now we'll need to increment the stream number so that we cycle through each of the streams so we can do that by going this dot stream num will equal put this in brackets this dot stream num plus one incrementing it and find the modulus of the max streams i'll explain that soon so then we'll call the so we'll find that uh element so this dot streams the element number will be this dot stream num this dot stream num dot play so that's just the inbuilt play function so for example if max streams equals two right so this stream number zero plus one is one one modulus two is one so that will play the second element of our streams array when this function is called again so stream number is currently one plus one is two two modulus two is zero it'll play the first element of that array so in essence it will cycle through it will cycle through playing each of those elements each of the arrays elements as the play function is called which is what we want so let's test that so currently it's max streams equals one it behaves exactly the same way so let's head back up to where we call our initial laser sound here we go and give it some arguments so the number of streams let's try two and the volume let's turn it down a bit to say 0.5 right so the volume is okay now if i play if i push the space bar as fast as i can can you hear that it's only playing two of them that's because our max streams is two so what's a realistic number we could set here how about five that's probably fast enough so the player wouldn't notice let's try it i think that's pretty good it looks pretty realistic to me awesome next it's just a matter of implementing our other sounds so let's copy that and implement fx explode so that's where our ship crashes into an asteroid just update the source to sound slash explode dot m4a we'll delete we won't use any arguments here we'll just use the default ones now where will we call fx explode well explode ship comes to mind where are we draw explode ship so just after that fx explode dot play let's give that a go so if we crash yeah that sounds pretty good it's not too loud i don't think great head back up to our audio let's create another one called uh fx hit so this is where our laser strikes a asteroid an asteroid i should say sounds hit again we'll just leave the default sound make sure that actually we'll probably need to increase the max streams the reason being is that we could in theory hit a lot of asteroids at the same time because we're firing out lasers in quick succession so how about we give that the same number of max streams as the fx laser and where will we call that well probably when we destroy our asteroid that's probably the right time to do it so how about destroy the asteroid fx hit dot play sorry that was just the background uh astro uh the ship blowing up let's give that a go so when we shoot an asteroid yeah that sounds alright so we're shooting out a lot of lasers and we can hear some simultaneous hit sounds cool that sounds alright i'm just thinking to stop us hearing background explosions all the time let's create a global uh flag called for example sound on and we'll only allow sound when that flag is set through so there's an explosion for example so if sound on then we will play the sound if sound on then we will play this sound let's go and create that flag now so just under where we show for example sentence so create a constant sound on and that will be equal to false so let's just run that make sure it's working yeah so no sounds will be heard while we're programming next let's implement the thruster sound so just where we're creating the other sounds here let's go fx thrust will equal sound slash thrust we probably don't need any uh parameters here now where will we call that where will we play that probably down in the update method in the update method we thrust here we go thrust the ship so just up near the top there fx thrust dot play and when we release the thruster key when we release the forward arrow we'll probably need to stop that thrust sound as well we don't want it to continue onwards so how about we in the else uh part of the condition we go fx thrust dot stop so we'll have to implement this method so fxthrust.stop so go to our sound function and create a new method called this dot stop will equal function and all we'll do there is call is call the inbuilt pause function so this streams this stream dot pause and we'll want to reset back to the start of that stream so we can do that by going this streams this dot stream num dot current time equals zero so that'll set the cursor or whatever it is called back to the start of that stream let's give that a go oh we'll have to turn on our sound first to test this so sound on will equal true see that's working and our thruster is working cool good that's all our sound effects done next let's create some music just set the sound on back to false so that we don't have to listen to explosions in the background okay uh now music i use the word music very loosely uh so just under where we set up the sound effects set up the music now the music in asteroids the original game was very pretty much just two tones it was going something like that it's just kind of two different tones so why don't we create a variable called music and that will equal we'll have to create a new object it's called music for example and it will take the two sounds so we'll have sounds music low and the second parameter will be similar sounds music hi so just the two sound files that we have one's a low sort of tone and one's a high tone let's go down and create that object just near where we create our sound uh objects new shoot laser so just here function music so we'll have source low and source high so first of all let's declare our variables so we'll have two sounds so this dot sound low which will equal new audio source low right similarly we'll have this sound high which will equal new audio source high and we'll also need to keep track of which sound are we currently playing so we can just use a boolean for that so this dot low will equal true that means we'll set we'll start with the low sound and we'll also need the speed of the music the reason being is that as the game progresses the speed of the music increases so this dot say tempo will equal 1.0 say and we'll define that as uh seconds per beat we'll also need to somehow count down that tempo so we can have a create a variable called this dot beat time we'll set it to zero to begin with and that's basically defined as the frames left until next beat right we'll have to create our play function so this dot play equals function and what will it do well if this if this dot low we want to play the low sound so sound sorry this dot sound this dot sound low dot play right and otherwise so else we want to play the high sound this dot sound high dot play okay and we also want to switch between those two so we can handle that by going this dot low will equal not this dot low so we're just switching true to false and false to true okay good we'll also need some way to count down this uh tempo as such the beat time so how about we create a function called this dot tick this dot tick equals function and this will be called every frame so knowing that we can say if the so if this dot beat time equals zero that means it's counted down which it will have immediately we want to play the current sound so this dot play we also want to reset the beat the beat time so this dot beat time will equal the ceiling so we want to keep it as a integer math.seal of the tempo so this dot tempo multiplied by the frame rate so for example if the so the current tempo is 1 the frame rate is 30 so we'll have 30 ticks until the sound is played so that's one second that sounds good now else so it doesn't equal zero we want to decrement it so this dot beat time minus minus now where do we call this tick well we need to call it in the update function so just go down to the update function up near the top tick the music so we can just go music dot tick now hopefully that will play our music let's try okay it's not playing let's see what's let's head up to the top and see if everything's okay where we uh create our music musicals new music sound music low okay i forgot to add the extension to each of these music files which is important but luckily the game didn't break so i'd say our code is all correct let's give it a go great that seems to be working oh that reminds me we should probably put in a global variable a global constant music on and we can just go down to our music uh method and in our play we can just say if music on then we'll do all of that good so we've turned our music off now how will we make the music go incrementally faster as the game progresses well let's head up to where we declare our music variable and create a couple more variables one called roids left and one called roids total and we'll find a ratio of how many there are left to the total and use that as a guide so just in our create asteroid belt how about we set up the roids total roid's total will equal the roid num but remember each of those big asteroids can be broken down into two mediums and each of those mediums can be broken down into two smalls so we'll have four smalls plus two mediums is six plus the original big one is seven so roid num times seven will be the total and we'll want to make roids left equal to that roid's left will equal the roid's total actually that should be the roid num plus the level shouldn't it because you see down here the number of asteroids is dependent on the level so all of that times seven right that should be okay so head down to our destroy asteroid method and just after we play the sound let's calculate the ratio of remaining asteroids to determine uh music tempo so first thing we'll need to do is roid's left minus minus we'll decrement that and then we'll we want to call a function on music for example called set asteroid ratio and then in there we can calculate the ratio the only thing i can think of is if the roy's left equals zero then so roid's left equals zero if that's true well the ratio is going to be one we want to reset the ratio to just one else we will uh find the actual ratio so roid's left so head down to our music object music and we want to create that method this dot set asteroid ratio equals function we'll need to have an argument have a parameter here called ratio and this will modify our tempo so this dot tempo will equal the starting tempo minus one point zero minus the ratio because when the ratio is for example point nine one minus point nine is point one 1 minus 0.1 is 0.9 yes that's fine the only thing i can see the only problem i can see here is that this is going to get very small so it'll become too small where we'll be playing hundreds of beats per minute we don't want that per second i should say so let's multiply by that by some factor 0.75 times that right so that means when the ratio is zero one minus zero is one point seven times 0.75 times 1 is 0.75 1 minus 0.75 is 0.25 the fastest rate that we can go is 0.25 that's 4 beats per second okay we'll just need to go turn on this music on function sorry music on flag set that to true and let's give it a go okay so that's one beat per second let's destroy some of these asteroids yeah it's getting faster let's just play until we get to the next level great it's reset perfect let's just turn on the sound to have one final play great that's working well and that's the end of this tutorial series i hope you've enjoyed it just as much as i've enjoyed making it so we've created a little triangle that can fly around space using the arrow keys we can press the space bar to shoot a laser we've created randomly generated asteroids that float through space we've added a scoring system with a high score that saves to the local storage and we've added sound in this tutorial i'll post a link to the final code in the description below feel free to download it and have a play with it yourself you can for example change some of these parameters or maybe you can add some new functionality like powerups that float across the screen that your ship can collect things like invincibility or an extra life maybe a split laser that shoots out multiple laser blasts at once the only limit is your imagination and that's what programming is for me to learn something new to create something wonderful and to have a lot of fun along the way until next time talk to you then cheers
