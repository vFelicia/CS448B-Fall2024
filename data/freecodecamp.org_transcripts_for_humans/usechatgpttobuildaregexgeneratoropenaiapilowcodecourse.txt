With timestamps:

00:00 - Hello everyone here on freeCodeCamp. My name is Ania Kubow. I'm a software developer,
00:04 - as well as course creator here on freeCodeCamp, as well as on my own channel.
00:08 - Today, I will be your guide into building a Chat GPT clone the easy way, thanks to a
00:13 - low-code solution called Retool, as well as an API from the actual company that made Chat GPT.
00:18 - So in other words, we're going to be using Microsoft's OpenAI API.
00:23 - What we're going to do is build a dashboard, which will use Chat GPT to generate regex for you.
00:28 - So essentially a dashboard that will generate the regex we need when writing code.
00:32 - Regex, or in other words, a regular expression, is a string of text that lets you create patterns
00:37 - that help match, locate, and manage text. We have different characters that will do different things.
00:42 - So for example, these characters, when applied to a string of text, will take the string,
00:47 - remove all the numbers from it, and return the string without any numbers present.
00:51 - When mastered properly, we can use it to match email addresses,
00:54 - search and replace characters in large texts, and it's even used in scraping data.
00:59 - However, mastering writing regex is a skill in itself.
01:02 - Wouldn't it be useful if we could just tell an app what regex to create?
01:05 - Well, that's what we're going to do, thanks to our app that we're going to build using the chat
01:10 - GPT API and Retool. So I can write, remove all numbers from a sentence,
01:15 - and it will generate the regex for me. So this, as well as the code for transforming a string.
01:21 - We can even add a test string so I can go ahead and write, I have two cats,
01:24 - then run the code and receive the result. Tada! What is a great touch in this app is that we can
01:30 - also see the history here of all regex we've generated in the past, and actually click on
01:34 - them to bring them back to the UI of the app. So that's what we're going to build. I hope you're
01:40 - excited. Let's do it. This video is brought to you by Retool, the software builder for any internal
01:45 - apps or custom software. Okay, so this is the platform that we are going to be creating.
01:52 - This platform is built thanks to Retool. Retool is free to sign up to and will help us create
01:57 - all these UI components. So for example, the button, the text inputs, the containers,
02:03 - as well as a whole bunch more and allow us to use APIs, such as the Open AI API that we are going to
02:10 - be using in order to generate our regex. Okay, so that's what we're going to be using. We're
02:16 - literally going to be relying on the knowledge of Open AI, whether it's good or not, we're going to
02:21 - find out, but essentially, we're just going to be feeding the commands into here and waiting for it
02:26 - to generate something. So this is what I have previously built. As you will see, there is some
02:34 - text already present, or we can write our own. So I can put remove all letter a from a string,
02:44 - and then we can test it out on a string. So if I put abacus, and then I generate the code,
02:49 - that regex to help me get rid of any a's from the string will be generated. And now I can run the
02:56 - code in order to get the results. So as you can see here, we have an array of all the characters
03:03 - from this string without the letter a, we can of course, then you know, manipulate this array,
03:08 - join up to make a string, you name it, just use some JavaScript on this array to do what you
03:14 - want with it. What is also cool is that we have the prompt history right here. So let's change this,
03:20 - I'm going to say remove letter C generate code. And then that will generate the regex. And if I
03:27 - run the code, you will see the C has been removed from that string. And all the characters are now
03:33 - in an array. So the prompt history is pretty cool. If I now click back on here, that will replace
03:40 - the results we had from that request. Okay, so a we've got the regex, and then we can run it to
03:47 - get the result. So this is what we are going to be building. As mentioned, we need to sign up to
03:54 - retool. So please just go ahead and try retool for free. I already am using retool. So I'm just
04:01 - going to log in using my free code camp account. So here we are. This is what you should see when
04:08 - you sign up. Okay, and now also please go over to the Open AI platform. So this is the URL that
04:16 - you should be at this platform dot Open AI dot com forward slash playground after you have signed
04:21 - up. Okay, great. So let's carry on. The first thing I'm going to do is just create a new app.
04:28 - And let's go ahead and call this regex Open AI and create the app. So we have just created an app.
04:40 - Retool has given us a table. I'm just going to go ahead and delete that table just so we can start
04:44 - fresh. Once here, I'm just going to start dragging and dropping items. So we can do that from the
04:49 - right panel here, the bottom panel. So if you click on here, we'll show you the panel that we're
04:55 - going to use to write queries such as communicating with the Open AI API. And here you will be able
05:01 - to see the results. So the state of what comes back from these queries if we wish. So I'm just
05:06 - going to minimize these two as we're going to work on the UI fast. So all I'm going to do is just
05:13 - drag in first of all, some text. And I'm going to change this to say AI regex developer. Okay,
05:21 - and we can use HTML if we want. If we want to make this an h1 element like so, then we can.
05:29 - So there we go. That's something that I have chosen to do. And we can also add emojis if we want.
05:36 - So for example, I can just put a robot emoji like so. And there we go. That is looking cool.
05:44 - The next thing we're going to do is just use a divider so we can divide
05:47 - the space visibly between the title and what we're going to be doing below. So actually,
05:57 - maybe let's make this a tiny bit smaller. Instead of using the
06:04 - HTML elements, we can also use markdowns such like this in order to differentiate between
06:10 - if something is a header or not. What is also useful is that you can rename these components.
06:16 - So I could put a header element just like so in case we need to pick it out later.
06:20 - And then that will be changed in a much more readable way for us to work with.
06:24 - So there we go. That is looking good. The other thing I want to do is just put a link.
06:32 - So we can search for a link. So that's all I've done. And I've dragged it into here.
06:38 - This link text, I'm going to change it to say Open AI playground in case we need to
06:43 - open up later on. So playground just like so. We can also use icons. So if I want to add an
06:53 - end icon, I can use suffix icon. And then I can just search for something that I would like to use.
07:00 - So I think we should search for something that resembles us clicking out and opening a new tab.
07:07 - So for example, this icon right here, amazing. So we have now just created a link and that will
07:13 - open up to a specific URL. And that URL is going to be this one right here. So I'm going to copy it.
07:21 - And then I'm going to add an event handler. And this is going to essentially open URL.
07:28 - So I'm going to select go to URL and the URL I'm just going to place in here.
07:33 - So now if we click on this, it will take us to the Open AI API playground. Wonderful.
07:40 - This is looking good so far. Next, I'm just going to put in some text. So this is going to tell us
07:46 - what's going to happen. So again, I'm just going to make sure that it's in bold using markdown
07:51 - language. So these two stars, and I'm going to put write me a JavaScript regular expression
08:00 - that dot dot dot. And then I'm just going to put in those two stars again. So wonderful. This is
08:09 - looking great. I'm happy with that. I'm just going to drag that out. Okay. Next, I'm just going to
08:17 - put a text area. So a bit bigger than an input. And I'm just going to drag that over like so.
08:22 - And we can choose to either make it bigger or smaller. And we can also choose to have a label
08:28 - or not. So I'm just going to hide that label in here. Once again, we can choose to rename it.
08:33 - So I'm going to put regex prompt, just like so. And there we go. Now if I want to have some default
08:41 - text, I can do. So let's go ahead and change our default value. Let's go ahead and put remove
08:48 - all letters a from a string. Okay. So that is going to be our default text. And we can also add a
08:59 - placeholder if we wish. So if you didn't want to have some default text, you can just put a
09:04 - placeholder in instead. So enter a prompt eg remove all letters a from a string. So it's up to you,
09:16 - whichever one you want. So a placeholder will look like this. Great. I'm just going to move
09:22 - that up a little bit. Next, I'm going to search for a text input. And I'm just going to drag that over
09:28 - like so. This text input, we're actually going to disable it as we just wanted to show the
09:34 - generated regex. So let's rename this to generated regex just like so. Let's label this
09:42 - generated regex so it's visible to the user. And if there's nothing in here, let's just have a
09:48 - placeholder of create a regex from a prompt above. Okay, so that creates a regex from the
09:59 - prompt above. Let's put disabled as true as we don't want to interact with it. We just want to
10:06 - read what it says. So let's also put read only true. And then we will come back to this when
10:14 - the time is right, so that we can actually put in that expression. I'm just going to create another
10:20 - text input. So let's search for text input, because we're going to have to now have a test
10:28 - string too. So this one we do want to be able to interact with. I'm just going to move these all
10:32 - up a little bit. Let's rename this as regex test string just like so. Let's change the label to
10:45 - be test string. So it's obvious to the user. And we can have a default value sure. Let's go ahead
10:52 - and put abacus. So just like so. Let's also have a placeholder just in case we need one. So enter a
10:59 - test string dot dot dot. And I think that looks good. I'm just going to add a button here that
11:05 - won't do much for now. But I'm also going to rename it. So let's name this button generate
11:13 - regex button. As the text, I'm going to put generate code. And as a suffix icon, I'm just
11:23 - going to have a little arrow. So once again, I'm just going to find the one that best represents
11:29 - what we needed to do. And it's probably this one. Great. So there we go. We have a button. It won't
11:34 - do much anymore. But that is fine. We are just working on the UI for now. Now I'm going to show
11:40 - you how to create a custom component. So I'm just going to drag that here and drop it in. And we're
11:46 - going to create a custom code editor. So that is what we're going to do here. So what I'm going to
11:53 - do is just delete this iframe code and delete the model here, because we're going to start from
11:59 - scratch. And now for the iframe code, I'm just going to provide you with some code and talk you
12:05 - through it. Okay, so what is happening here is that we are opening up a script that will talk to
12:12 - code mirror. This is code mirror right here essentially allows us to create different code
12:19 - editors in an iframe. And we can start them up, you can essentially provide a theme. So
12:25 - this is something that we will also do. So the first two script are essentially to get code
12:30 - mirror along with its version. And then in these style tags, we're going to import the CSS needed
12:37 - to style the code editor, thanks to one of the CSS files that code mirror provides as well as a
12:43 - theme. So that's what the two imports are doing. And then we're going to start up a little bit in
12:48 - our own way by providing a border, a gray border with a four pixel radius. So that is what it looks
12:54 - like at the moment. In the next script is where all the JavaScript comes in. And we're essentially
13:00 - writing our own JavaScript in order to display the text that we need for when we start feeding in
13:08 - test strings and prompts and so on. So at the moment, we don't have that which is why initializing
13:14 - is showing. Okay, so that is showing up because of the code that we have written here. So please
13:21 - go ahead and take this code. Okay, it's yours just put it in the iframe just like I have done,
13:28 - because all we're going to do is have to feed in data into it through the model input. So to do
13:35 - this, well, first off, I'm actually just going to create an app state. So let's get rid of this
13:40 - query. I'm just going to delete that. And I'm just going to create a temporary state. Let's go
13:46 - ahead and put it in a folder. And I have just renamed it app state. And now I'm just going to add
13:51 - into the app state. So making sure that you're in here, a temporary state. So I'm just going to
13:56 - drag that in like so. And let's call this current regex text. Okay, so just like that. Now my current
14:06 - regex text is going to be that and that is the regex that we need in order to remove all letters a
14:11 - from a string. So that is going to be my initial value. Next, I'm also going to create a temporary
14:17 - state called current test string. It's going to move that in here. And the current test string
14:26 - is going to be abacus. So just like so. I'm also going to create a temporary state called
14:33 - last run index. And again, move it in here. And I'm just going to put zero as a value for this
14:41 - for now. So these are all things that we're going to use in our model and feed into the code.
14:45 - I'm also going to have prompt history. So prompt history, which will allow us to save the prompt
14:52 - history on the left hand side, which at the moment is going to be an empty array.
14:59 - And then we're also going to have reset index. And I'm just going to drag it in like that
15:06 - and have the value as zero for now. Okay, so now that we have all those, it's time to write our
15:11 - model. So I'm going to open up some curly braces, I'm going to put the string regex here. And I'm
15:17 - going to now go into the current regex text and get its value. So we're essentially going into
15:23 - here and getting this value. So that's what we're going to feed into here. So there you go, that's
15:29 - been fed in, okay, into my code. Next, let's do the test string. So we've got the regex in here
15:39 - already. Now we're going to do the test string. And that's going to be where we're going to get
15:48 - the current test string value. So just like that, and you will see that update. Next, we also need
15:56 - to get the last run index. And once again, we're going to get the last run index from our temporary
16:04 - storage and get its value. And you will also see that update. Then we need the run results,
16:13 - which was going to be an empty array, because we're going to populate that. And then we get the reset
16:20 - index, which is just going to be our reset index value. And that's it. That is our model that
16:29 - we're feeding into the code. Great. So this is what it looks like at the moment. Now I'm just
16:37 - going to create a button. So I'm just going to drag in any other button here. Let's change the button
16:43 - of this to run. This time, I'm going to prefix an icon, and it's going to be the play icon.
16:48 - So we can even search for it like so. I'm just going to prefix it like that. And we can change
16:53 - the color of this if we wish. Let's go ahead and choose the success color. So that's all I've done.
16:59 - I'm also going to create another button that allows to reset. So there it is. Let's change the button
17:05 - name of this to reset. Let's also have a prefix icon, maybe one that resembles resetting. So maybe
17:12 - this one like so. And then let's change the color of this. So I'm going to change the color of this
17:16 - to be this highlight color right here. Great. And finally, let's have one more text input. So I'm
17:23 - just going to drag that here. We can change the positioning of the label so we can make it at
17:28 - the top. And then I'm just going to change this to be regex matches. We can also rename this to
17:36 - regex matches display. And as the default value, I'm just going to put in this code. So we're going
17:45 - to essentially get the code editor model run result. And if it's a string, we simply show the
17:51 - result. Otherwise, we pass it through Jason stringify. Okay, so that's what we're going to do.
17:57 - And let's also rename this to code editor. Okay, as essentially, we are looking for the
18:07 - component of code editor and getting the model from it. Great. As a placeholder for this, I'm just
18:15 - going to put an empty array. And wonderful. Let's just stretch that out. And one last thing before
18:21 - we start using the Open AI API is I'm just going to use one more link right here. So I'm just going
18:27 - to drag that in. And I think we should have some regex help. So I'm just going to use regex help
18:34 - as the text. And let's add a prefix for this, or actually maybe a suffix icon, which again,
18:40 - will just take us to a new page. So let's find the icon that will help us do this. And it's this
18:45 - one right here. And wonderful. So now we have some regex help as well. We would also align it to the
18:51 - right if we wish. And if we click on this, so let's get an event handler, I want to go to URL,
18:59 - and then just paste in the URL like so. So this will take us to the regular expressions help on
19:06 - MDN docs. Great. So this is all looking good. I'm liking how the UI is looking. It's time to now
19:16 - get the history prompts up and start working with the Open AI API. So to create a sidebar,
19:22 - I'm just going to select the left panel here. And let's create a sidebar. So there we go. That's
19:28 - all I have done. And now I'm just going to delete this. So delete that. And let's go ahead and
19:34 - delete this image as well. And now we can drag and drop items in here. So I'm just going to drag in
19:41 - some text. And this is going to say prompt history, just like so. So prompt history. Let's just add
19:53 - a few more hashes in here to symbolize a lesser important title. I'm just going to rename this
20:01 - to sidebar header while we are at it. Great. Next, I'm just going to search for navigation.
20:08 - So what I'm going to do is just drag a navigation like so. And let's call this prompt history nav.
20:16 - So just like that. Now, instead of having this manual, I'm going to map out things onto here.
20:23 - So that's all we're going to do. Just make sure that this is turned on.
20:28 - So prompt history value. And at the moment, that array is empty. But when it's not,
20:34 - that should be filled up. Okay. And the label for this is going to be the item itself.
20:40 - So there we go. And we don't really want an image. So let's get rid of the logo. We just want some
20:47 - text. Wonderful. So now let's get to hooking up the Open AI API. So all I'm going to do is click
20:56 - resources here. And let's create a new resource. We're going to configure a rest API to do this.
21:04 - Next, we're going to go to this URL right here, the platform Open AI dot com account API key.
21:10 - And we're going to select a new key and copy it like so. Okay, so that is my one right there.
21:17 - Let's go back to configuring our rest API. And I'm just going to call this Open AI API. Now,
21:23 - we're going to have to put in a base URL. And that's going to be HTTP forward slash API dot
21:32 - Open AI dot com v one forward slash. Don't forget to put an s there for HTTPS. Now let's go to the
21:41 - headers. And we're just going to add content type right here. And we're going to set the value as
21:49 - application, Jason. And now we're going to choose authentication, we're going to go with basic.
21:57 - And as the username, we're going to put Barrow. And we're going to put the Open AI API key as the
22:03 - password. This will configure HTTP bear authentication for the Open AI API. And now we're
22:09 - just going to create the resource. So now let's test it out. I'm just going to go back to here,
22:15 - we can shut all these down and refresh the retail app. And let's write a test query. So all I'm going
22:21 - to do is choose a resource query. I'm going to search for Open AI API. Let's make this a little
22:29 - bit bigger so we can see. Let's rename this to something else. I'm just going to say this and
22:36 - run and do generate regex. This is going to be a post request to completions from the API.
22:51 - And then here, the body is going to be Jason, the model, we're going to put as text Da Vinci
22:59 - 003. Then as the prompt. So let's put a prompt in here as well. Let's put write me a JavaScript
23:09 - regular expression that removes the character a from a string as a literal without a variable
23:22 - declaration. So essentially what we're going to be replacing is this from the prompt that
23:32 - we have on our UI, and all of it will get sent over to the Open AI API. So that is our prompt.
23:39 - Let's also add a temperature. Okay, so how accurate we want it temperature. I'm going to put 0.7.
23:48 - Let's have max tokens 256, top P1. Then we're just going to add a few more things in here,
24:00 - frequency, penalty, zero, presence, penalty, zero as well. And I think that should be it. So I'm just
24:12 - going to save that and let's run it. And there we go. So there's our response. That is what comes
24:21 - back to us. So the regex has been generated. This is looking good, which means we now can replace
24:28 - that text with whatever we put in here. So what's this called? This is regex prompt,
24:33 - we need to get the value of that. So let's go ahead and write me a regular expression that removes
24:40 - character A from a string. So let's remove that and use our curly braces. So let's remove that
24:47 - and get a curly braces so we can pick out the regex prompt component and get its value. So
24:53 - now whatever you write in here will be essentially replaced here. And then when we save this and
24:59 - run it, it will essentially create some regex for us thanks to the Open AI API. So now let's
25:07 - actually link this up, right? So let's do it. So on this button, as soon as we click this button,
25:14 - we want to trigger something. We want to add an event handler. And it's going to be to trigger
25:20 - generate regex. That is correct. And as loading, we could just have generate regex
25:27 - is fetching. And we disable it when generate regex is fetching. Okay, so that will be able to get us
25:43 - the code that we need. And let's link up this button as well. So maybe let's rename this to
25:49 - run button. And when we click on this, we want to just run the script, we want to get the last
25:58 - run index and reset its value. Same for the reset button, let's name this reset button. And then
26:07 - also I'm going to choose to run a custom script. So run script. And here it is, this time we're
26:13 - going to get the reset index and essentially reset its value. Okay, great. So now I'm just
26:20 - going to actually, let's maybe not have a placeholder, let's have the default value. And it's also
26:25 - have a default value here. So remove all letters a from a script, just so that it's picked up from
26:39 - the get go. So everything is now hooked up, we just need to write what happens when this is a
26:45 - success. So let's get up this query again, here's the generate regex query. And on success this
26:52 - time, so let's add a success event, I'm going to run a separate script. So here is the code,
26:59 - we're getting the prompt history. And if the history does not include the value, we then
27:04 - essentially add it to the history. Okay, we added to the history. So it will show up here. And then
27:10 - we update the text fields above. So this is the code that you're going to need, please pause here
27:15 - and take all of it. That is what it should look like. So let's save that and try it out. So I'm
27:22 - just going to minimize that and generate code. And great, that has updated to a C after changing
27:29 - it here. It's updated here. And let's run it. And the C's have been taken out, we get an array of
27:36 - all the characters without the C included. So that's all I'm going to do. So that should be fine now.
27:44 - And now I'm just going to add three SS and generate code. And that has changed, I can go a lot more
27:49 - and generate code and that has changed. Let's remove all letters D from a script and generate
27:55 - the code. And that has changed. And you will see all the prompts of the history showing up as well.
28:01 - So now if we run this amazing, well, there is no D. So that comes back, we get all the characters
28:08 - in an array. Let's try removing the letter, let's try to move the SS generate code. So that has
28:14 - been generated and let's run it. And that indeed works. This is great. We have now figured out
28:21 - how to use OpenAI to build our own regex tool. The last thing I want to do is just go back to the
28:27 - prompt whenever we click on it. So let's do it. To do this, I'm just going to get up my right
28:34 - panel. And on each of the items, I'm going to essentially add an event handler. So let's go
28:44 - down to interaction and add an event handler. And I'm going to run some custom script. And
28:52 - here it is. So all we're going to do is get the prompt history value and trigger the generate
28:59 - regex again. So we're essentially regenerating that regex. So that's all I'm going to do.
29:05 - So that should be fine now. So if I click on this one, that should update. This is looking great.
29:13 - And of course, we can go to whichever one we want. Wonderful. So this is really it. And of course,
29:20 - I can share it. I can share with whoever I want. We can invite new users, or I could just go to
29:25 - the app like so, and it will show up on this URL right here for anyone to use who I share this
29:31 - URL with. Amazing. This is looking wonderful. So that's it. Thank you so much for coding along
29:40 - with me. All the necessary docs and helper docs will be in the description below. So please do
29:46 - check it out if you need. Thanks so much again, and I'll see you again soon.

Cleaned transcript:

Hello everyone here on freeCodeCamp. My name is Ania Kubow. I'm a software developer, as well as course creator here on freeCodeCamp, as well as on my own channel. Today, I will be your guide into building a Chat GPT clone the easy way, thanks to a lowcode solution called Retool, as well as an API from the actual company that made Chat GPT. So in other words, we're going to be using Microsoft's OpenAI API. What we're going to do is build a dashboard, which will use Chat GPT to generate regex for you. So essentially a dashboard that will generate the regex we need when writing code. Regex, or in other words, a regular expression, is a string of text that lets you create patterns that help match, locate, and manage text. We have different characters that will do different things. So for example, these characters, when applied to a string of text, will take the string, remove all the numbers from it, and return the string without any numbers present. When mastered properly, we can use it to match email addresses, search and replace characters in large texts, and it's even used in scraping data. However, mastering writing regex is a skill in itself. Wouldn't it be useful if we could just tell an app what regex to create? Well, that's what we're going to do, thanks to our app that we're going to build using the chat GPT API and Retool. So I can write, remove all numbers from a sentence, and it will generate the regex for me. So this, as well as the code for transforming a string. We can even add a test string so I can go ahead and write, I have two cats, then run the code and receive the result. Tada! What is a great touch in this app is that we can also see the history here of all regex we've generated in the past, and actually click on them to bring them back to the UI of the app. So that's what we're going to build. I hope you're excited. Let's do it. This video is brought to you by Retool, the software builder for any internal apps or custom software. Okay, so this is the platform that we are going to be creating. This platform is built thanks to Retool. Retool is free to sign up to and will help us create all these UI components. So for example, the button, the text inputs, the containers, as well as a whole bunch more and allow us to use APIs, such as the Open AI API that we are going to be using in order to generate our regex. Okay, so that's what we're going to be using. We're literally going to be relying on the knowledge of Open AI, whether it's good or not, we're going to find out, but essentially, we're just going to be feeding the commands into here and waiting for it to generate something. So this is what I have previously built. As you will see, there is some text already present, or we can write our own. So I can put remove all letter a from a string, and then we can test it out on a string. So if I put abacus, and then I generate the code, that regex to help me get rid of any a's from the string will be generated. And now I can run the code in order to get the results. So as you can see here, we have an array of all the characters from this string without the letter a, we can of course, then you know, manipulate this array, join up to make a string, you name it, just use some JavaScript on this array to do what you want with it. What is also cool is that we have the prompt history right here. So let's change this, I'm going to say remove letter C generate code. And then that will generate the regex. And if I run the code, you will see the C has been removed from that string. And all the characters are now in an array. So the prompt history is pretty cool. If I now click back on here, that will replace the results we had from that request. Okay, so a we've got the regex, and then we can run it to get the result. So this is what we are going to be building. As mentioned, we need to sign up to retool. So please just go ahead and try retool for free. I already am using retool. So I'm just going to log in using my free code camp account. So here we are. This is what you should see when you sign up. Okay, and now also please go over to the Open AI platform. So this is the URL that you should be at this platform dot Open AI dot com forward slash playground after you have signed up. Okay, great. So let's carry on. The first thing I'm going to do is just create a new app. And let's go ahead and call this regex Open AI and create the app. So we have just created an app. Retool has given us a table. I'm just going to go ahead and delete that table just so we can start fresh. Once here, I'm just going to start dragging and dropping items. So we can do that from the right panel here, the bottom panel. So if you click on here, we'll show you the panel that we're going to use to write queries such as communicating with the Open AI API. And here you will be able to see the results. So the state of what comes back from these queries if we wish. So I'm just going to minimize these two as we're going to work on the UI fast. So all I'm going to do is just drag in first of all, some text. And I'm going to change this to say AI regex developer. Okay, and we can use HTML if we want. If we want to make this an h1 element like so, then we can. So there we go. That's something that I have chosen to do. And we can also add emojis if we want. So for example, I can just put a robot emoji like so. And there we go. That is looking cool. The next thing we're going to do is just use a divider so we can divide the space visibly between the title and what we're going to be doing below. So actually, maybe let's make this a tiny bit smaller. Instead of using the HTML elements, we can also use markdowns such like this in order to differentiate between if something is a header or not. What is also useful is that you can rename these components. So I could put a header element just like so in case we need to pick it out later. And then that will be changed in a much more readable way for us to work with. So there we go. That is looking good. The other thing I want to do is just put a link. So we can search for a link. So that's all I've done. And I've dragged it into here. This link text, I'm going to change it to say Open AI playground in case we need to open up later on. So playground just like so. We can also use icons. So if I want to add an end icon, I can use suffix icon. And then I can just search for something that I would like to use. So I think we should search for something that resembles us clicking out and opening a new tab. So for example, this icon right here, amazing. So we have now just created a link and that will open up to a specific URL. And that URL is going to be this one right here. So I'm going to copy it. And then I'm going to add an event handler. And this is going to essentially open URL. So I'm going to select go to URL and the URL I'm just going to place in here. So now if we click on this, it will take us to the Open AI API playground. Wonderful. This is looking good so far. Next, I'm just going to put in some text. So this is going to tell us what's going to happen. So again, I'm just going to make sure that it's in bold using markdown language. So these two stars, and I'm going to put write me a JavaScript regular expression that dot dot dot. And then I'm just going to put in those two stars again. So wonderful. This is looking great. I'm happy with that. I'm just going to drag that out. Okay. Next, I'm just going to put a text area. So a bit bigger than an input. And I'm just going to drag that over like so. And we can choose to either make it bigger or smaller. And we can also choose to have a label or not. So I'm just going to hide that label in here. Once again, we can choose to rename it. So I'm going to put regex prompt, just like so. And there we go. Now if I want to have some default text, I can do. So let's go ahead and change our default value. Let's go ahead and put remove all letters a from a string. Okay. So that is going to be our default text. And we can also add a placeholder if we wish. So if you didn't want to have some default text, you can just put a placeholder in instead. So enter a prompt eg remove all letters a from a string. So it's up to you, whichever one you want. So a placeholder will look like this. Great. I'm just going to move that up a little bit. Next, I'm going to search for a text input. And I'm just going to drag that over like so. This text input, we're actually going to disable it as we just wanted to show the generated regex. So let's rename this to generated regex just like so. Let's label this generated regex so it's visible to the user. And if there's nothing in here, let's just have a placeholder of create a regex from a prompt above. Okay, so that creates a regex from the prompt above. Let's put disabled as true as we don't want to interact with it. We just want to read what it says. So let's also put read only true. And then we will come back to this when the time is right, so that we can actually put in that expression. I'm just going to create another text input. So let's search for text input, because we're going to have to now have a test string too. So this one we do want to be able to interact with. I'm just going to move these all up a little bit. Let's rename this as regex test string just like so. Let's change the label to be test string. So it's obvious to the user. And we can have a default value sure. Let's go ahead and put abacus. So just like so. Let's also have a placeholder just in case we need one. So enter a test string dot dot dot. And I think that looks good. I'm just going to add a button here that won't do much for now. But I'm also going to rename it. So let's name this button generate regex button. As the text, I'm going to put generate code. And as a suffix icon, I'm just going to have a little arrow. So once again, I'm just going to find the one that best represents what we needed to do. And it's probably this one. Great. So there we go. We have a button. It won't do much anymore. But that is fine. We are just working on the UI for now. Now I'm going to show you how to create a custom component. So I'm just going to drag that here and drop it in. And we're going to create a custom code editor. So that is what we're going to do here. So what I'm going to do is just delete this iframe code and delete the model here, because we're going to start from scratch. And now for the iframe code, I'm just going to provide you with some code and talk you through it. Okay, so what is happening here is that we are opening up a script that will talk to code mirror. This is code mirror right here essentially allows us to create different code editors in an iframe. And we can start them up, you can essentially provide a theme. So this is something that we will also do. So the first two script are essentially to get code mirror along with its version. And then in these style tags, we're going to import the CSS needed to style the code editor, thanks to one of the CSS files that code mirror provides as well as a theme. So that's what the two imports are doing. And then we're going to start up a little bit in our own way by providing a border, a gray border with a four pixel radius. So that is what it looks like at the moment. In the next script is where all the JavaScript comes in. And we're essentially writing our own JavaScript in order to display the text that we need for when we start feeding in test strings and prompts and so on. So at the moment, we don't have that which is why initializing is showing. Okay, so that is showing up because of the code that we have written here. So please go ahead and take this code. Okay, it's yours just put it in the iframe just like I have done, because all we're going to do is have to feed in data into it through the model input. So to do this, well, first off, I'm actually just going to create an app state. So let's get rid of this query. I'm just going to delete that. And I'm just going to create a temporary state. Let's go ahead and put it in a folder. And I have just renamed it app state. And now I'm just going to add into the app state. So making sure that you're in here, a temporary state. So I'm just going to drag that in like so. And let's call this current regex text. Okay, so just like that. Now my current regex text is going to be that and that is the regex that we need in order to remove all letters a from a string. So that is going to be my initial value. Next, I'm also going to create a temporary state called current test string. It's going to move that in here. And the current test string is going to be abacus. So just like so. I'm also going to create a temporary state called last run index. And again, move it in here. And I'm just going to put zero as a value for this for now. So these are all things that we're going to use in our model and feed into the code. I'm also going to have prompt history. So prompt history, which will allow us to save the prompt history on the left hand side, which at the moment is going to be an empty array. And then we're also going to have reset index. And I'm just going to drag it in like that and have the value as zero for now. Okay, so now that we have all those, it's time to write our model. So I'm going to open up some curly braces, I'm going to put the string regex here. And I'm going to now go into the current regex text and get its value. So we're essentially going into here and getting this value. So that's what we're going to feed into here. So there you go, that's been fed in, okay, into my code. Next, let's do the test string. So we've got the regex in here already. Now we're going to do the test string. And that's going to be where we're going to get the current test string value. So just like that, and you will see that update. Next, we also need to get the last run index. And once again, we're going to get the last run index from our temporary storage and get its value. And you will also see that update. Then we need the run results, which was going to be an empty array, because we're going to populate that. And then we get the reset index, which is just going to be our reset index value. And that's it. That is our model that we're feeding into the code. Great. So this is what it looks like at the moment. Now I'm just going to create a button. So I'm just going to drag in any other button here. Let's change the button of this to run. This time, I'm going to prefix an icon, and it's going to be the play icon. So we can even search for it like so. I'm just going to prefix it like that. And we can change the color of this if we wish. Let's go ahead and choose the success color. So that's all I've done. I'm also going to create another button that allows to reset. So there it is. Let's change the button name of this to reset. Let's also have a prefix icon, maybe one that resembles resetting. So maybe this one like so. And then let's change the color of this. So I'm going to change the color of this to be this highlight color right here. Great. And finally, let's have one more text input. So I'm just going to drag that here. We can change the positioning of the label so we can make it at the top. And then I'm just going to change this to be regex matches. We can also rename this to regex matches display. And as the default value, I'm just going to put in this code. So we're going to essentially get the code editor model run result. And if it's a string, we simply show the result. Otherwise, we pass it through Jason stringify. Okay, so that's what we're going to do. And let's also rename this to code editor. Okay, as essentially, we are looking for the component of code editor and getting the model from it. Great. As a placeholder for this, I'm just going to put an empty array. And wonderful. Let's just stretch that out. And one last thing before we start using the Open AI API is I'm just going to use one more link right here. So I'm just going to drag that in. And I think we should have some regex help. So I'm just going to use regex help as the text. And let's add a prefix for this, or actually maybe a suffix icon, which again, will just take us to a new page. So let's find the icon that will help us do this. And it's this one right here. And wonderful. So now we have some regex help as well. We would also align it to the right if we wish. And if we click on this, so let's get an event handler, I want to go to URL, and then just paste in the URL like so. So this will take us to the regular expressions help on MDN docs. Great. So this is all looking good. I'm liking how the UI is looking. It's time to now get the history prompts up and start working with the Open AI API. So to create a sidebar, I'm just going to select the left panel here. And let's create a sidebar. So there we go. That's all I have done. And now I'm just going to delete this. So delete that. And let's go ahead and delete this image as well. And now we can drag and drop items in here. So I'm just going to drag in some text. And this is going to say prompt history, just like so. So prompt history. Let's just add a few more hashes in here to symbolize a lesser important title. I'm just going to rename this to sidebar header while we are at it. Great. Next, I'm just going to search for navigation. So what I'm going to do is just drag a navigation like so. And let's call this prompt history nav. So just like that. Now, instead of having this manual, I'm going to map out things onto here. So that's all we're going to do. Just make sure that this is turned on. So prompt history value. And at the moment, that array is empty. But when it's not, that should be filled up. Okay. And the label for this is going to be the item itself. So there we go. And we don't really want an image. So let's get rid of the logo. We just want some text. Wonderful. So now let's get to hooking up the Open AI API. So all I'm going to do is click resources here. And let's create a new resource. We're going to configure a rest API to do this. Next, we're going to go to this URL right here, the platform Open AI dot com account API key. And we're going to select a new key and copy it like so. Okay, so that is my one right there. Let's go back to configuring our rest API. And I'm just going to call this Open AI API. Now, we're going to have to put in a base URL. And that's going to be HTTP forward slash API dot Open AI dot com v one forward slash. Don't forget to put an s there for HTTPS. Now let's go to the headers. And we're just going to add content type right here. And we're going to set the value as application, Jason. And now we're going to choose authentication, we're going to go with basic. And as the username, we're going to put Barrow. And we're going to put the Open AI API key as the password. This will configure HTTP bear authentication for the Open AI API. And now we're just going to create the resource. So now let's test it out. I'm just going to go back to here, we can shut all these down and refresh the retail app. And let's write a test query. So all I'm going to do is choose a resource query. I'm going to search for Open AI API. Let's make this a little bit bigger so we can see. Let's rename this to something else. I'm just going to say this and run and do generate regex. This is going to be a post request to completions from the API. And then here, the body is going to be Jason, the model, we're going to put as text Da Vinci 003. Then as the prompt. So let's put a prompt in here as well. Let's put write me a JavaScript regular expression that removes the character a from a string as a literal without a variable declaration. So essentially what we're going to be replacing is this from the prompt that we have on our UI, and all of it will get sent over to the Open AI API. So that is our prompt. Let's also add a temperature. Okay, so how accurate we want it temperature. I'm going to put 0.7. Let's have max tokens 256, top P1. Then we're just going to add a few more things in here, frequency, penalty, zero, presence, penalty, zero as well. And I think that should be it. So I'm just going to save that and let's run it. And there we go. So there's our response. That is what comes back to us. So the regex has been generated. This is looking good, which means we now can replace that text with whatever we put in here. So what's this called? This is regex prompt, we need to get the value of that. So let's go ahead and write me a regular expression that removes character A from a string. So let's remove that and use our curly braces. So let's remove that and get a curly braces so we can pick out the regex prompt component and get its value. So now whatever you write in here will be essentially replaced here. And then when we save this and run it, it will essentially create some regex for us thanks to the Open AI API. So now let's actually link this up, right? So let's do it. So on this button, as soon as we click this button, we want to trigger something. We want to add an event handler. And it's going to be to trigger generate regex. That is correct. And as loading, we could just have generate regex is fetching. And we disable it when generate regex is fetching. Okay, so that will be able to get us the code that we need. And let's link up this button as well. So maybe let's rename this to run button. And when we click on this, we want to just run the script, we want to get the last run index and reset its value. Same for the reset button, let's name this reset button. And then also I'm going to choose to run a custom script. So run script. And here it is, this time we're going to get the reset index and essentially reset its value. Okay, great. So now I'm just going to actually, let's maybe not have a placeholder, let's have the default value. And it's also have a default value here. So remove all letters a from a script, just so that it's picked up from the get go. So everything is now hooked up, we just need to write what happens when this is a success. So let's get up this query again, here's the generate regex query. And on success this time, so let's add a success event, I'm going to run a separate script. So here is the code, we're getting the prompt history. And if the history does not include the value, we then essentially add it to the history. Okay, we added to the history. So it will show up here. And then we update the text fields above. So this is the code that you're going to need, please pause here and take all of it. That is what it should look like. So let's save that and try it out. So I'm just going to minimize that and generate code. And great, that has updated to a C after changing it here. It's updated here. And let's run it. And the C's have been taken out, we get an array of all the characters without the C included. So that's all I'm going to do. So that should be fine now. And now I'm just going to add three SS and generate code. And that has changed, I can go a lot more and generate code and that has changed. Let's remove all letters D from a script and generate the code. And that has changed. And you will see all the prompts of the history showing up as well. So now if we run this amazing, well, there is no D. So that comes back, we get all the characters in an array. Let's try removing the letter, let's try to move the SS generate code. So that has been generated and let's run it. And that indeed works. This is great. We have now figured out how to use OpenAI to build our own regex tool. The last thing I want to do is just go back to the prompt whenever we click on it. So let's do it. To do this, I'm just going to get up my right panel. And on each of the items, I'm going to essentially add an event handler. So let's go down to interaction and add an event handler. And I'm going to run some custom script. And here it is. So all we're going to do is get the prompt history value and trigger the generate regex again. So we're essentially regenerating that regex. So that's all I'm going to do. So that should be fine now. So if I click on this one, that should update. This is looking great. And of course, we can go to whichever one we want. Wonderful. So this is really it. And of course, I can share it. I can share with whoever I want. We can invite new users, or I could just go to the app like so, and it will show up on this URL right here for anyone to use who I share this URL with. Amazing. This is looking wonderful. So that's it. Thank you so much for coding along with me. All the necessary docs and helper docs will be in the description below. So please do check it out if you need. Thanks so much again, and I'll see you again soon.
