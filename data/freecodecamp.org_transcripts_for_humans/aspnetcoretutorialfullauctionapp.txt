With timestamps:

00:00 - learn how to build a complete fullstack
00:02 - project in asp.net core asp.net core is
00:06 - a high performance open- Source
00:07 - framework for building modern
00:09 - cloud-based Internet connected
00:11 - applications such as web apps iot apps
00:14 - and Mobile backends using.net in this
00:17 - course Alan omary will teach you how to
00:19 - build an auction web application hi
00:22 - there everyone welcome back to another
00:24 - YouTube series in this series we are
00:26 - going to create a complete application
00:28 - in asp.net core we're are going to build
00:31 - an auctions application where every user
00:33 - can create a listing and the user who
00:36 - bits the highest amount will win in the
00:38 - moment that the listings owner decides
00:40 - to close the bidding each user will have
00:43 - the option to see its own listings and
00:45 - the listings he has bid it for by simply
00:48 - going to the corresponding Link in the
00:50 - navigation menu many different features
00:53 - will be implemented in this project such
00:55 - as adding comments in the listings
00:57 - Details page pagination uploading image
01:01 - files in a project making changes to the
01:03 - pages depending on the user currently
01:06 - logged in and many
01:10 - more in this first section we're going
01:12 - to create the project and we're going to
01:14 - add the models needed for our
01:16 - application we will then connect our
01:18 - project to the database and this way we
01:21 - will have the fundamental set up to
01:23 - continue to build our
01:25 - project so firstly we need to create a
01:28 - new project
01:31 - and we need to find here a template for
01:33 - an MVC
01:37 - application just type your
01:42 - MVC and just click on this
01:47 - one go next uh we can name our project
01:52 - here I name it just
01:55 - options go to the next
01:58 - page and here we need to make the
02:01 - authentication type to individual
02:02 - accounts so that we have these users
02:06 - already enabled in our uh project when
02:08 - it loads this way we have the users
02:11 - functionality already uh being taken
02:14 - care
02:15 - of okay so the first thing we want to do
02:18 - is go to models and start adding classes
02:21 - or
02:22 - models to uh for our models needed for
02:25 - the project let me just name the first
02:28 - model
02:30 - first model is going to be the main one
02:32 - which is the listing so for each listing
02:35 - that our application will
02:37 - have and I'm going to give it an public
02:41 - in ID
02:48 - property and then for each listing we're
02:51 - going to need a
02:54 - title to be a
02:58 - string
03:04 - and of course uh we need the description
03:06 - for each
03:10 - listing uh we're going to need a double
03:13 - property for the price of the listing
03:16 - that we will put there here we need a
03:19 - string property for image path so
03:22 - basically when an image will be uploaded
03:24 - for a listing it will be stored inside
03:27 - the folder in our project and for for us
03:30 - to call the image of a specific listing
03:32 - we will use then the path where the
03:35 - image is stored but you will see it
03:37 - later on how this all
03:39 - works then we're going to need the E Sal
03:43 - of bull property
03:46 - because this way we will specify if
03:49 - listing is already sold or not and we
03:52 - will not display the sold listings in
03:55 - the first page and also some other
03:58 - functionalities will depend end of if a
04:01 - listing is solved or
04:10 - not then we're going to connect we need
04:12 - to connect each listing to the uh
04:15 - user and we'll need an identity user ID
04:19 - which is the property of types
04:21 - chain firstly and we need here to
04:25 - specify the object we will connect the
04:27 - leaks thing to the model which is
04:29 - identity user and we'll name it
04:32 - user so we'll make them
04:36 - nullable and we need to specify here the
04:38 - foreign key for the user which will be
04:41 - this identity user ID so this identity
04:44 - user we're already installed when we
04:46 - made the individual
04:48 - accounts to uh when we created a
04:53 - project basically each listing will be
04:55 - created by specific user so that's why
04:58 - uh we need this
05:00 - two properties
05:07 - here and on top we're going to make this
05:10 - as required so basically what this does
05:14 - is whenever a user is deleted for
05:18 - example uh we won't be able to see the
05:21 - listing anymore because that's uh how it
05:25 - would make sense so if a user is not
05:28 - anymore in my application
05:30 - we won't see the listings as well the
05:32 - listings will be deleted from
05:34 - database and in the end we're going to
05:36 - need to connect the listings so one
05:40 - listing will have multiple bits made to
05:43 - it and we will create this uh this model
05:48 - now a bit later and also each uh each
05:53 - listing will help multiple comments to
05:56 - it and we'll create the comments model
05:59 - also uh
06:00 - next and this is the way we store them
06:04 - when we uh write this type of models
06:07 - when they are one to many relationship
06:10 - models so let me create the next model
06:14 - that we
06:21 - need the b. CS
06:27 - model first I'm going need an in ID
06:34 - property and then a double property for
06:37 - the
06:48 - price let just copy this because each
06:51 - bid has also need to be connected to a
06:54 - user who made the bid and if the user is
06:57 - no longer there the bid will be created
06:59 - deled so if the user is deleted the bid
07:01 - will be
07:03 - deleted and we will also need to connect
07:06 - each bit to a
07:13 - listing so first we need a listing ID
07:16 - property and then a listing
07:23 - property just calling it
07:28 - listing and
07:32 - I would need to make both of them as
07:40 - notable and here we specify the forign
07:43 - key which is listing
07:56 - ID let me just create the
07:59 - next model that we need which is going
08:02 - to be the comment. Cs the comment
08:14 - model okay so as usual we need an in ID
08:23 - property I in string property for the
08:26 - content of the
08:28 - comment
08:33 - and I'm just going to copy this again
08:36 - this identity user ID and the user the
08:39 - identity user property so just like by
08:43 - on the bits I'm actually going to copy
08:46 - this from the bid model because just
08:49 - like with bids we connect the comment
08:52 - with the user and with the listing so
08:55 - they have to be connected to to user and
08:58 - the listing
09:00 - and just copy that down and that now
09:03 - what we're going to need to do is go to
09:04 - the context which was already created by
09:07 - default when we created a project and we
09:09 - need to specify the DB set inst
09:12 - instances for each model that we created
09:15 - so dbet listing which I name
09:21 - listings and we're going to do the same
09:23 - thing for all the three models that we
09:28 - created
09:31 - so D set
09:33 - bid nameing it
09:38 - bids and the Deb
09:43 - set for the
09:47 - comment and I name it
09:51 - comments so now uh when we go to app
09:54 - settings. Json we have a a default
09:57 - database connection there but we're
09:58 - going to need need to create a new
10:01 - database actually and go here and create
10:04 - new database let me just open SQL Server
10:07 - management Studio to get this uh server
10:14 - name okay let me just copy
10:24 - this I'm just going to paste it here and
10:26 - give a name to the database like
10:29 - auctions data or
10:37 - something and if we click here on Prop
10:42 - properties here we have a connection
10:44 - string in this properties window which
10:47 - I'm just going to
10:51 - copy and put it here in the app
10:53 - settings. Json
10:55 - file just pasting it there I'm just
10:58 - going to add another another thing here
11:00 - so I set the encryption to false because
11:03 - we don't have a password set to access
11:06 - the database
11:08 - basically and here we have created our
11:13 - database and we have stored the address
11:16 - in app settings. Json now if we go to
11:19 - program.cs here we see that the service
11:22 - is already
11:23 - add uh is already added here so the
11:26 - service for the uh for the context and
11:30 - which also connects it the context to
11:32 - the connection string as you can see
11:35 - this
11:36 - here and yes what we need to do is just
11:39 - go to package manager console and add
11:41 - the
11:42 - migrations for the models that we
11:46 - created okay so just add
11:52 - migration and here I'm just giving a
11:55 - name to the
11:57 - migration
12:06 - okay I think we've done a mistake in app
12:09 - settings. Json so in app settings. Json
12:13 - I think we have we're missing a comma or
12:17 - something
12:27 - there okay so uh we didn't close this
12:30 - bracket here this was the problem so I'm
12:33 - just going to need to add the migration
12:38 - again and it is successful and just
12:41 - going to update the database
12:55 - now in the section we will create our
12:58 - index next page we will firstly create a
13:00 - controller and then we'll create a
13:02 - service to get the data from the
13:04 - database lastly we will also handle the
13:07 - front end part by designing the index
13:10 - view
13:11 - page so uh firstly let's just go to the
13:14 - controllers folder and add a controller
13:17 - with views here so that we will have
13:21 - some base methods uh let me just select
13:25 - here the model of listing the context
13:29 - and we'll just create it so that we have
13:32 - some uh
13:34 - boilerplate methods for the crowd
13:36 - operations we won't use them exactly uh
13:39 - actually we will create a service to get
13:41 - the data from the database but just so
13:44 - that we have some code in the beginning
13:47 - that's why we're doing it
13:50 - so okay so here we have our controller
13:53 - with the
13:54 - methods and in this video we will handle
13:56 - the index method so for first let me
13:59 - just go to the data folder and add a
14:00 - folder for the
14:03 - services just name it services and
14:06 - inside here first we need a we'll create
14:09 - a service an interface here so I'm going
14:11 - to add the new item an
14:14 - interface and I'm naming it I listings
14:17 - service because we will get data for the
14:23 - listings and here first we will just
14:26 - create first select a signature method
14:30 - that we will then Implement in the
14:32 - services
14:33 - class so uh the return timee will be of
14:37 - I quable of
14:39 - listing and I'm naming the method get
14:44 - all so this will Implement then in the
14:47 - new file that we'll create that I'm
14:49 - going to be okay so I need to import
14:51 - here the modeles
14:54 - directory then I'm just going to add a
14:57 - class and then we name a listing service
15:00 - where we will implement this method
15:03 - signature that we wrote
15:07 - there so I'm just naming it listings
15:13 - service click add and here we'll
15:16 - implement the interface that we created
15:18 - the IL listing service and if we click
15:21 - here uh to show the areas we can click
15:24 - here on Implement interface so that this
15:27 - method is implemented
15:34 - somehow
15:37 - so so firstly let me just uh modify the
15:41 - get all method let let's just try the
15:43 - get all method and I copied it from the
15:47 - controller what we had there and just
15:50 - it's just as simple as this we're just
15:52 - taking listings from the
15:54 - context and we will include there the
15:56 - users so that we will see the user
15:59 - and for the context we will come here
16:01 - and copy this what this what is here in
16:04 - the controller and just paste it down on
16:08 - top we just need to rename the
16:10 - Constructor here to listing
16:13 - service so we'll get the information
16:17 - from database in this
16:20 - service and the method is okay and now
16:24 - here where we
16:26 - had taken the context here we will
16:30 - Import in the controller the service
16:33 - that we just created so I listing
16:35 - service and then we'll name this like
16:38 - underline listing
16:40 - service and then modify it here in the
16:43 - con in the Constructor as
16:57 - well okay and what we can do now in the
17:00 - index method here we will take the
17:02 - method that we created in the service so
17:06 - here just write underline listings
17:10 - service. get all which is the name of
17:13 - the method that we have in this
17:15 - service and that is basically how we'll
17:18 - get the data for the listings in our
17:20 - index
17:25 - page I'm going to need to uh comment all
17:28 - these other methods below because they
17:31 - are using the context
17:33 - and uh we now we are just using the
17:37 - service in this controller so it would
17:40 - have a lot of Errors if we let them as
17:42 - they are so I'm just commenting out
17:45 - everything except for the index method
17:47 - which so that we can test it how it
17:50 - looks like now when we go to program
17:52 - that CS we need to add the service that
17:54 - we created here so in the services
18:00 - here the stri Builder that
18:06 - services that add scope to as a scope
18:11 - service and here we'll have to write the
18:14 - name of the interface that we
18:19 - created and the name of the service
18:27 - itself
18:33 - okay let just go to the listings folder
18:35 - in the views folder and here at the
18:38 - index. CSH
18:40 - HTML I will just basically just change
18:44 - the header here to an H2 header and
18:48 - right here active listings to see all
18:50 - the listings that are active in our
18:53 - application and I guess I'm just going
18:55 - to remove this table presentation here
19:01 - here okay so I'm just going to delete
19:03 - all of
19:11 - this and I'm making a
19:13 - forge Loop here to Loop through all of
19:16 - the listings that we
19:19 - have so for each V listing in the model
19:22 - that is the listings
19:27 - model
19:29 - okay I guess I need to make it as an I
19:32 - quable here because that's how the data
19:36 - was when we wrote the method
19:38 - before and here I'm going to have a div
19:44 - container div of class container to
19:47 - represent all of the objects all of the
19:50 - things in this page I'm just giving it
19:54 - styling as well the background color I
19:57 - just saw it before for so I'm just
20:00 - typing here the rgba code so I was just
20:06 - testing it a little bit before and I
20:07 - found the color and this is the code for
20:09 - the
20:27 - color
20:28 - so I'm setting the margin on top to be
20:31 - 50
20:36 - pixels and the margin on the bottom to
20:39 - be also 50
20:44 - pixels I'm giving it a
20:47 - padding of like 20
20:57 - pixels
20:59 - and I'm giving it to the Border a radius
21:02 - so it's like a corner
21:06 - shaped and giving it the Border it is to
21:10 - 10
21:15 - pixels okay so inside we need other div
21:19 - I'm giving it the class for all which is
21:22 - a bootstrap class and inside of it
21:25 - will'll uh have another d with a class
21:28 - of column so that we specify this way we
21:32 - specify how many objects are in a row so
21:35 - we make the class of column and then if
21:39 - the screen is small the div will take
21:41 - six out of 12 imaginary boxes of space
21:44 - and if the screen is large the div will
21:46 - take a bit less space it will take five
21:49 - out of 12 imaginary boxes of space this
21:53 - is just to make the page responsive
21:54 - across different
21:57 - devices
22:05 - and here in
22:08 - the we write for the images of the
22:11 - listings here I'm just making this sign
22:15 - here we will store the images in a
22:18 - folder that we will create later that
22:20 - will be in the root W ww root folder
22:25 - you'll create the images folder there
22:27 - and then we will
22:29 - take the listing that image path which
22:32 - will be the the address of the image
22:36 - where the image is stored and for each
22:39 - image we'll handle styling
22:43 - here so the maximum width I'm setting it
22:46 - to be something like 400
22:52 - pixels and the maximum
22:56 - height just is basically the same 400
23:03 - pixels okay so I'm copying this to
23:09 - have have another div
23:19 - here this D will be a bit larger that's
23:24 - how we specify the seven there and here
23:26 - we have a H5 head inside of it we'll
23:29 - have an anchor
23:31 - tag which will redirect us to The
23:34 - Details
23:35 - page specify the route ID to be equal to
23:40 - the models
23:53 - ID okay I'm setting the color here
24:02 - the color making it to be
24:09 - black and inside the anchor here will I
24:12 - put the listing the title so the title
24:15 - of the
24:19 - listing and just below we're going to
24:22 - need another
24:25 - div inside of it we just store the
24:28 - description of the
24:43 - listing uh okay so firstly here we need
24:45 - to specify the listing
24:47 - price which is how much is bided or
24:51 - needs to be bided for the listing and
24:54 - I'm making this two string uh method
24:56 - here of n two so there there are two
24:59 - numbers behind the after the comma so
25:03 - when the number is 50 it will be
25:05 - displayed like 50
25:09 - comma and just below
25:14 - there we'll just write here who listed
25:18 - the listing so the owner so to say so
25:21 - listing.
25:24 - user do email but it's the same just
25:28 - like the username I
25:30 - think in our
25:32 - case because the user's name we store
25:35 - this an email actually so
25:37 - yeah okay so here I'm going to make an
25:41 - if
25:43 - clause and in case there are there's
25:46 - nothing in the model so the model is
25:48 - empty there are no listings in our
25:51 - database I'm just going to display it
25:53 - here so that there are no active
25:54 - listings so that's what basically we
25:57 - have to to see first we want to load
25:59 - that application now because we haven't
26:01 - stored anything in the
26:15 - database okay I think everything is okay
26:17 - we have stored the service and
26:20 - program.cs here we can just specify the
26:22 - default controller to be the listings
26:26 - controller so the around the application
26:29 - it will appear the index of the lising
26:32 - controller would be the first method to
26:34 - be called the first link do we
26:38 - call and we're just running the project
26:47 - now okay we are um I think in the if we
26:51 - go to the controller to the listens
26:54 - controller here we uh return the view as
26:57 - list the application context that to
26:59 - list is seeing that's why we can't write
27:02 - here I quable what I did but we just
27:05 - leave it as it like list
27:08 - iable so I don't know why I changed that
27:15 - actually now uh yeah when on the
27:18 - application this is what appears the uh
27:21 - we see here that we have no active
27:23 - listings so this is our index page but
27:25 - when we store objects there will see
27:28 - we'll see the listings when we'll start
27:31 - listings there we'll see the
27:34 - listings in this section we will handle
27:37 - our create page we will see how we can
27:39 - create the listings and during this we
27:42 - will see how we can upload and store
27:44 - files in our project such as image
27:47 - files okay so let me just go to the
27:50 - listings controller and uncomment here
27:53 - this get create
27:56 - method
28:01 - I'm just going to remove this part here
28:03 - because we don't need
28:08 - it and I'm also going to need to
28:11 - uncomment this post create method as
28:14 - well but we'll modify it a lot there so
28:20 - when we create the listings we're going
28:22 - to need to get an image file from the
28:24 - user and we will store it inside the
28:26 - folder that we will create inside the
28:28 - project for this reason we're going to
28:31 - need a helper model that is similar to
28:33 - the listings model but it does store the
28:36 - images inside an iform file
28:39 - property then we'll take the data from
28:42 - this model and create a listing model
28:44 - with it but instead of the iform file we
28:47 - will store in the database the address
28:49 - of the file in the image file string
28:52 - property that the listings model
28:56 - has so let us just create this model
29:01 - firstly I'm just naming it listing view
29:06 - model just as a
29:13 - practice and then me go to the listing
29:24 - model from here I'm going to copy almost
29:26 - everything
29:28 - I want to change the image Path property
29:30 - later and I'm not going to use this bits
29:33 - and Commons because I don't need them
29:36 - when the user inputs the
29:41 - data and here I'm changing this property
29:44 - to I form file which accepts files
29:47 - including images now name it uh like
29:51 - image just image we need to import the
29:54 - data annotations here for the require re
29:57 - ired uh data
30:03 - annotation okay so I'm going to go to
30:05 - this www root folder and here inside I'm
30:09 - going to add an images file which will
30:12 - be the address where the images will be
30:15 - stored when user stores it when a user
30:18 - creates a
30:22 - listing so if we go to the create uh. CS
30:29 - HTML here we're going to need to modify
30:31 - a few things to create the listing
30:34 - so I'm just changing the header to
30:38 - create
30:38 - [Music]
30:40 - listing I'm making it an H2 header and
30:44 - on top I'm going to import a few things
30:46 - so that we can get the uh user that is
30:50 - currently loged in in the
30:53 - application so firstly just add using
30:56 - Microsoft
31:00 - asp.net
31:07 - identity I'm also going to need to
31:09 - inject here the user
31:12 - manager in the view
31:25 - page so it takes an identity user and
31:28 - I'll name it like user manager with a
31:31 - small
31:34 - U okay so
31:39 - here uh we're going to need to write
31:41 - encryption type in the
31:44 - form and here we select multiart form
31:47 - data which will be able to accept the
31:50 - file the image that we will uh input
31:54 - there here in the price when we take the
31:57 - price in the label we can just write as
32:01 - starting
32:03 - bit here in the image path we're going
32:07 - to rename it to image because now it
32:10 - is it is a listing view model not a
32:14 - listing model which had uh which has an
32:16 - image
32:22 - property changing it here as well but we
32:24 - need to on top we need to make it say
32:27 - listing view model not listing
32:31 - model here in the input for the image I
32:34 - need to specify also that it accepts
32:41 - image so this line here we needed to
32:44 - write
32:45 - there and about the styling of
32:49 - it can do
32:56 - something so I'm just setting the width
32:59 - of
33:01 - 30% of normal
33:04 - form changing the image here
33:07 - also right now for the eold property we
33:10 - don't need to input anything here but we
33:12 - need to make it that the
33:14 - default value for the is sold property
33:17 - to be false so uh listing is not solved
33:21 - and this we can modify if we go to the
33:24 - listing
33:25 - model
33:28 - and to listing view model as
33:34 - well so here we need to make it equal to
33:37 - false so when it is a listing is
33:40 - created it is by default is not solved
33:44 - so we'll need to modify it in the
33:47 - listing view model as
33:55 - well so here we need to don't need to
33:58 - take any input for
34:02 - that okay so here now we need to take
34:05 - the currently logged in
34:08 - user uh
34:14 - so just put here an input tag it will be
34:19 - of type hidden so yeah it's not shown in
34:23 - the view page here in the sp4 tag we
34:27 - need to specify identity user ID and we
34:30 - need to select the value to it so it
34:32 - will have the value of the currently
34:34 - logged in
34:36 - user so how we get the currently logged
34:39 - in user we use user manager
34:42 - do get user
34:46 - ID of the user that is logged
34:50 - in so that's the syntax how you write it
34:53 - here in the view
34:55 - pages
35:01 - let me just around this here around the
35:04 - project here to see specifically the
35:06 - create view page how it looks
35:10 - like there seems to be an error let me
35:13 - just find
35:24 - it okay so I would suggest the problem
35:27 - is the create post
35:31 - method because we haven't fixed it and
35:33 - it has a context in
35:36 - it but we take the information from the
35:38 - controller we take the information from
35:40 - the service so I think that's a
35:43 - [Music]
35:46 - problem then just go to the
35:49 - controller yes so here I the area so I'm
35:51 - just going to comment this out for a
35:54 - minute and try to around the pro project
36:03 - again and just go and to see the create
36:06 - view
36:11 - page see how this
36:22 - looks okay I'm just going uncomment this
36:25 - now so that we can handled what so we
36:29 - saw how the form looked how the create
36:31 - page looked but we'll see we'll handle
36:34 - here how the input will be
36:38 - handled so here we'll take a listing
36:42 - view
36:46 - model just name it
36:55 - listing
36:58 - so we're just making an if close here to
37:01 - check if the listing that image is not
37:07 - null so here we'll see we'll store it in
37:11 - this images
37:17 - folder so firstly to we need the
37:20 - variable to specify the upload directory
37:23 - which is going to
37:25 - be
37:28 - can get it by writing path.
37:31 - combine you'll need to access
37:34 - this address of the www root
37:38 - directory which can be done using uh web
37:44 - hosting
37:46 - environment service which will will have
37:49 - to include
37:52 - actually in the Constructor of this
37:55 - controller
37:57 - so we'll combine this path with the
38:01 - images folder so for this to work we
38:04 - need to import it here in the
38:06 - Constructor firstly we need
38:08 - the we need the private trade only
38:11 - variable for
38:13 - it it's going to be I web host
38:18 - environment I'll name it just like web
38:21 - host
38:23 - environment and this will get us the
38:26 - address of this directory that we want
38:30 - where the images are
38:31 - stored just need to specifi it here
38:33 - inside the Constructor as
38:38 - well and back to the create method here
38:41 - we need to specify here the we need the
38:45 - variable for the file file
38:50 - name how we can get this is by writing
38:54 - listing that image that that
38:57 - name that file name sorry this will get
39:01 - the name of the file when we upload
39:08 - it and the file path will be path.
39:13 - combine this upload
39:15 - directory together with the file
39:24 - name so now we need to right here using
39:27 - v file
39:33 - stream right new file stream we will
39:36 - create the new file stream class
39:42 - here and inside we will specify file
39:48 - path and file mode.
39:54 - create which will basically basically
39:56 - create a file for
40:02 - us so this file stream initializes a
40:06 - file stream class here is the path of
40:09 - the image where the file stream file
40:11 - will be created and here we specify that
40:13 - we want to create a file in this file
40:16 - mode that creat as we can read it
40:21 - here so what is left for us do is here
40:24 - right listing that image that copy
40:31 - to file
40:41 - stream and after we have created and
40:45 - stored the file inside a project we will
40:48 - create a listing object which will be
40:51 - what will be stored inside our database
40:53 - so we'll have this uh we'll create a the
40:56 - new
40:59 - listing the title of it will be the
41:02 - title which was the listing view model
41:04 - the
41:07 - title so we'll take it from The View
41:10 - model the same thing we we do for the
41:12 - description as
41:20 - well price equals listing the
41:25 - price so so this listing was actually
41:27 - the listing view model that we took from
41:30 - the
41:31 - [Music]
41:33 - form the identity user ID will be
41:36 - listing that identity user
41:41 - ID and the image path will be this file
41:45 - path that we have here
41:50 - above so this is how the object is
41:53 - created until this point
41:57 - and here what left has to do is to
42:00 - [Music]
42:05 - return to return a direct to action to
42:08 - index page so we'll return the user to
42:11 - the index page until the form when the
42:13 - form is
42:15 - submitted
42:19 - afterwards but right now we need to add
42:22 - to have uh to create a function in our
42:25 - service so that we can add this listing
42:28 - to our database so we need a a method
42:32 - that doesn't return anything which is an
42:35 - a single we method and I will name it
42:40 - add and it takes a
42:43 - listing
42:45 - object let me just go now to the listing
42:50 - service and here it would appear an
42:53 - error above and we need to click cck
42:57 - Implement one moment yes here going
43:01 - implement the
43:03 - interface yeah I'm going to need to
43:05 - write a
43:13 - sync and we need to add this listing in
43:17 - context that in the database by I think
43:21 - contacts. listings. add listing and we
43:25 - just need to save the changes to the
43:27 - database so underline context. save
43:30 - changes async and the method doesn't
43:33 - return anything here we need to call
43:37 - this method from the service that we
43:40 - just wrote so wait underlines listing
43:48 - service do add and we'll add there this
43:51 - listing
43:55 - object
43:57 - and we have an error up there because we
43:59 - haven't specified what happens when the
44:02 - listing that image is
44:05 - null so let me just return the user to
44:09 - the same page where the user is so to
44:12 - the create page together with the
44:15 - listing a listing object okay let me
44:18 - just turn the application now so we can
44:20 - test
44:22 - it we actually go to go to program. CS
44:24 - firstly because when we need to register
44:27 - user uh here the service right here we
44:32 - need to specify require confirmed
44:34 - account to
44:35 - false so that when we register a
44:39 - user uh it won doesn't need to uh verify
44:45 - the account so it will be just created
44:51 - instantly let we usually do it for our
44:54 - purpose
44:59 - okay let me just uh register a user
45:03 - here I've run out of
45:06 - names for
45:12 - users just Jeff
45:16 - gmail.com we need the password for
45:24 - it
45:31 - let's go the listings that
45:34 - create I think I have a
45:37 - watch in my
45:40 - files starting we to I don't know 35 and
45:44 - choose the file
45:46 - here
45:54 - okay choose this here here this
45:57 - is think man's shirt was there so I'm
46:02 - just changing this description
46:09 - here okay so here here you see the
46:11 - listing was created we see how the
46:14 - design will be when we create a listing
46:16 - in the index page so we see the title
46:18 - the description the bit and the person
46:21 - who made the
46:23 - listing so what I also need to show you
46:26 - is if we go to our images folder here
46:30 - here we can see that when we created the
46:32 - listing the image was uploaded in our
46:35 - folder
46:36 - here so basically yeah when a user
46:40 - inputed the file there we created and
46:43 - store the file inside this images
46:47 - directory and then of course a new
46:50 - listing was created with the image
46:53 - path uh property so with the address
46:57 - where the property where the F the image
46:59 - file is saved and here in the index view
47:03 - page we see that we take in the image
47:06 - the source is
47:08 - images uh at listing. image path so this
47:11 - is how it is written from the database
47:14 - the address of the
47:18 - image this section will be about the
47:20 - details page for each listing which is
47:23 - the place where most of the
47:24 - functionalities of the application are
47:26 - actually written so we will specify how
47:29 - a listing is displayed when we click on
47:32 - it and we will also write some pieces of
47:35 - logic about the display when specific
47:37 - users see the
47:39 - listing so firstly we need to uncomment
47:43 - the
47:44 - details method here in our in our
47:49 - controller let me comment the text
47:53 - here and I'm going to actually remove a
47:56 - few pieces that we don't
47:59 - need okay so all we need to do here is
48:02 - to make this uh method here that
48:05 - accesses the database we'll need to make
48:09 - a method in the service
48:13 - so here we we'll write the signature
48:17 - firstly which will be an a synchronous
48:22 - method it will return a listing and we
48:26 - usually name it uh get by
48:30 - ID and it will take an in ID as a
48:40 - parameter so let me just go now to the
48:42 - listing service and implement
48:47 - this what we wrote in the
48:50 - interface I'm just going need to write
48:52 - the async
48:54 - keyword
48:58 - basically the logic here will be the
49:00 - same as what we have
49:03 - here so I'm just copying this
49:10 - firstly and I'm just spacing it
49:21 - here here I'm going also
49:24 - add
49:28 - here we I will also include the
49:31 - comments and after
49:35 - that I will also include the bits when
49:38 - we take a listing from the context and
49:42 - after including bids I'm actually going
49:44 - to need for later use to then
49:47 - include the users of that bit which I
49:51 - make with this then
49:53 - include method here
49:57 - and of course after this I'm just going
49:59 - to need to return this listing variable
50:04 - here that's all we need to do in our
50:09 - case here we just now need to remove
50:12 - this here and use the method that we
50:14 - just
50:19 - created just so listing service. get by
50:23 - ID and it takes the ID
50:27 - above so just as a reminder we use we do
50:30 - this methods in the service so that we
50:33 - don't access the database from our
50:36 - directly from our controller that's the
50:38 - reason why we write these services and
50:41 - then we import them in the
50:43 - controllers we've talked about it uh
50:46 - even before but just as a quick
50:50 - reminder now let me just go to The
50:53 - Details page where I'm basically just
50:55 - going to remove all of
50:59 - this and here's a part where you play
51:02 - with the display of
51:06 - stuff so here we'll just import the
51:09 - Microsoft
51:11 - identity to be able to access the
51:17 - users here I'm going to inject to the
51:20 - view page the user
51:23 - manager which takes an identity
51:36 - user I'll name it just user
51:43 - manager I'm just going to remove that
51:46 - here in the beginning we need I'm going
51:48 - to make an
51:50 - if close here so if the user that
51:55 - identity that is authenticated so this
52:00 - basically just says that if the
52:03 - user is authenticated is logged in we'll
52:08 - make some uh specifications in the
52:11 - display and here what I'm basically
52:14 - doing is just okay if the model is sold
52:17 - so if model that sold is true we will uh
52:21 - display a title in the listing so uh
52:25 - depending from the status of the listing
52:28 - so who is the winner or if the winner if
52:32 - the user is the winner will displate as
52:34 - you are the winner so first we need to
52:36 - Loop through each bid in model.
52:54 - bits so here basically if the bid. price
52:59 - is equal to the model.
53:08 - price so for the user who if the bid
53:11 - that price is equal to model that price
53:13 - then the user has had the highest bid
53:18 - and here we specify if the bid. user ID
53:22 - is equal to the logged in user the
53:24 - current log user which we get with this
53:27 - user manager. get user
53:31 - ID basically what this is what this does
53:36 - we will have a header here that says
53:39 - congratulations you are the
53:41 - winner so for this to be displayed the
53:45 - user has to be logged in the the listing
53:48 - has to be uh sold and
53:53 - also the users bid has to have the
53:56 - highest price from all the
54:00 - bits and if not else if here we will
54:04 - specify we will see if the logged in
54:07 - user is actually the
54:10 - person who made the
54:16 - listing so if user man so if the
54:19 - currently logged in
54:21 - user is the model that I
54:26 - user. ID so if the user has created the
54:30 - listing itself it will tell the user who
54:35 - the name of the person who won the
54:44 - biding and if none of this
54:49 - is uh is correct or
54:52 - is for the case then we will just
54:55 - display to a random user who opens the
54:58 - the listing and if the listing is closed
55:01 - he he will see just that the bidding is
55:04 - closed so he won't see who won
55:06 - it or if he is not the winner he won't
55:09 - see uh any additional information so we
55:12 - won't see who want it or of course he
55:15 - won't see that he wanton it so um until
55:18 - now we just made this functionality to
55:19 - display a title in the listing on top of
55:24 - the listing depending on who want it or
55:26 - if the building is closed now we just
55:29 - going to need to uh play around with the
55:32 - display of the page of the listing so
55:36 - I'm having a header here and I'm putting
55:38 - the text Line to Center to center
55:41 - it and here we have the title of the
55:44 - model of the
55:53 - listing yeah I would to need the
55:55 - container div div class
55:59 - container I'm giving the styling I'm
56:02 - giving a background color which is just
56:05 - a color I
56:07 - was I saw before I was I just Mark the
56:13 - values I'm just writing it here for the
56:16 - color that I
56:23 - wanted
56:32 - so I'll give this div a bit of margins
56:35 - on
56:39 - top like 50
56:47 - pixels and basically the same margin on
56:51 - the bottom as
56:53 - well
56:56 - just some
57:05 - paddings and I will make I'll in put
57:09 - some border radius there to be so the
57:13 - borders will have like corners on the
57:21 - edges so
57:23 - inside this div class container we're
57:26 - going to need to copy some things from
57:28 - the index
57:30 - page CU some parts here uh will be like
57:34 - the same have some same
57:37 - structure so I copied that part from the
57:40 - index view page and I'm pasing it here
57:43 - but I need to adjust it a
57:49 - bit so here I'll make the width to
57:55 - 100% of the width of the
58:00 - image and the height to 60 view height
58:03 - which is
58:04 - the yeah 60% of the screen
58:09 - basically and here we don't take it from
58:11 - listing. image path but from model.
58:15 - image
58:21 - path okay that listing title we don't
58:24 - need there because we have it on the
58:26 - top here I'm just going to write that
58:29 - model the
58:33 - description and this I will actually
58:39 - delete and here I will will specify some
58:43 - conditions to how the foll the following
58:48 - will be display so if the user is
58:53 - authenticated
58:56 - will make it possible for him to put a
58:59 - bid there to bid something but if not
59:03 - then
59:05 - not so here I will make a
59:08 - [Music]
59:09 - form ASP action
59:13 - which we haven't created this method yet
59:17 - in the controller but I will just write
59:19 - it here we'll create
59:23 - later the method will be a post
59:38 - method and here where the bid will be
59:42 - displayed we'll make an input
59:51 - there so the type of it will be number
59:54 - so it takes only
59:57 - numbers the minimum the minimum value of
60:00 - it will be the model. price so you
60:04 - cannot bid on lower than the model.
60:11 - price and this step equals one just
60:14 - means that there's like an option there
60:16 - too so with the errors to increase it
60:20 - with one or to decrease it with one the
60:23 - price and the name equals price we need
60:27 - this so we can so when the for when the
60:31 - form will be
60:33 - submitted and in the placeholder we
60:35 - actually just store the model.
60:40 - price that two
60:43 - string and here specify n to which just
60:47 - basically
60:47 - will write the number with two numbers
60:51 - after the comma so with two places after
60:54 - the the
60:59 - comma okay we just needed one single
61:02 - input tag
61:09 - there so together with the first input
61:13 - when a bid will be submitted it should
61:16 - take because the bid objects take a user
61:20 - takes a listing so that's why we we
61:23 - right here this input of type hidden
61:26 - with the name of identity user
61:34 - ID and the class of form
61:37 - control so this will take the currently
61:40 - logged in user that submits the bid and
61:44 - the value that it takes will
61:47 - be H will be will take it from the user
61:50 - manager. get user ID of the currently
61:55 - logged in
62:13 - user so yeah I forgot this slash there
62:18 - and just it's basically the same thing
62:21 - for to get the listing ID as well so it
62:23 - will be hidden
62:25 - for the name here will specify actually
62:27 - the name of the property which is
62:30 - listing ID so that we need when we when
62:34 - the form will be
62:35 - submitted and here the value of it will
62:38 - be just like at model.
62:50 - ID here in the end we just need an inut
62:55 - of
62:56 - type
63:01 - submit just class of form
63:05 - control uh no sorry class of button and
63:08 - button uh primary to be like a a blue
63:13 - button we only needed an one single
63:16 - input tag there as
63:20 - well and this was it for the ad bit
63:26 - form and Below there we can submit we
63:30 - can display the number of bits
63:33 - submitted in a paragraph and how we'll
63:36 - take it is we will
63:41 - take we'll write here model that
63:45 - bits that count which is the method that
63:48 - takes the number of bits that our module
63:53 - has
63:58 - I'm just Mak here this just like a line
64:01 - to separate it from the next
64:11 - thing and here we will specify so if the
64:15 - from we'll take the currently logged in
64:18 - user and if the user is actually the
64:20 - person who the person who created the
64:23 - bid
64:24 - he will be only he will be able to see
64:27 - the name of the people who have
64:29 - submitted bids so if user manager. get
64:33 - user ID equals to the model. user. ID he
64:37 - will be able to see will list here all
64:41 - of the names of the people who submitted
64:43 - a bit and how much they
64:46 - submitted so only the owner or the
64:50 - creator of the listing will be able to
64:52 - see this
64:54 - for each so we'll take for each bit in
64:57 - modular
65:04 - bits so we write here an unordered
65:09 - list of just specify The Styling here to
65:15 - list style Type To
65:17 - None not to have all of this default
65:20 - list
65:23 - stylings
65:26 - here we'll take bit.
65:31 - user that username so the username of
65:33 - the user who have submit has submitted a
65:36 - bid and we right here bid
65:40 - it and the price the amount of the bid
65:44 - so at
65:46 - bid.
65:50 - price that two
65:52 - string PR this is and to so it will be
65:56 - formatted a with the
66:01 - Press yeah so that was it firstly for
66:04 - this part so if the user is actually not
66:08 - logged in now he won't be able to submit
66:20 - anything so here I just need a div and
66:23 - here I will just make an
66:26 - import which will set it to disabled so
66:29 - you cannot import anything there and
66:32 - yeah won't do it inside the fors
66:35 - because uh it won't take anything the
66:40 - input I'm just copying this
66:53 - here
66:54 - so here in the input of type submit we
66:58 - make it disabled so you cannot click on
67:01 - the button on this submit
67:05 - button so also right here if the user is
67:09 - not plugged in he will be able to see
67:11 - also the number of bits submitted for
67:15 - that
67:22 - listing
67:25 - and here down below for to be able to
67:28 - see by all we'll just write the name of
67:31 - the
67:31 - person who sub who listed the thisis
67:36 - thing so mod model. user.
67:47 - username then just copy this
67:50 - here we need to use it again
68:06 - so I just sced that part of code from
68:09 - above so I will
68:12 - just uh so this functionality will be
68:15 - just for the owner of the listing the
68:17 - person who listed it it will have an
68:21 - will make it so the person who listed
68:23 - the listing would be able to have this
68:25 - anchor link here to be able to close the
68:29 - bidding which is the method that will
68:31 - create later this close speeding
68:34 - method and it will take from in the aspr
68:37 - out ID the model.
68:40 - ID just naming it close
68:44 - beding and we actually want to make it
68:47 - so this person can only close the
68:50 - building once the model that is
68:54 - sold equals to false so if a person
68:59 - actually closes the bidding the model
69:01 - will be is that is sold will be true so
69:05 - he cannot the idea is that he cannot
69:08 - close the biding even after the mod the
69:10 - biding was already closed and that after
69:14 - the model was sold so after the listing
69:17 - was sold he cannot close the bidding
69:19 - then because it doesn't make
69:22 - sense
69:27 - here I'm just going to write
69:29 - another of these lines to separate the
69:37 - sections and here we're going to handle
69:39 - the comments
69:42 - actually
69:44 - so if the user is authenticated so if a
69:48 - user is logged
69:50 - in uh he will be able to add a comment
69:54 - to the
69:56 - listing so just making it just we need
70:00 - the container D
70:06 - here and the form which will direct us
70:10 - to an method that we'll also create
70:12 - later to add comments and name get add
70:22 - comment method will be
70:31 - post and I'm going to have an uh
70:36 - H6
70:38 - header you can add a
70:44 - commment actually we can we will store
70:47 - the commment so the input will be a text
70:50 - area actually so it's a bit bigger
70:55 - and giving it a class of form control
70:57 - for The
70:58 - [Music]
71:03 - Styling and this area
71:08 - label with
71:11 - text with text
71:17 - area and the name of this text area will
71:20 - be put it to Contex content so that we
71:24 - can connect it to the when we'll create
71:27 - later the comment as an
71:30 - object and in a styling we'll put the
71:33 - width to
71:41 - 40% and the vertical align to top so it
71:44 - will be placed on
71:47 - top on the upper
71:52 - part
71:58 - here we also need some input of type
72:01 - hidden to have
72:03 - the user that made the comment and also
72:07 - to have the listing which we can copy
72:09 - from here because so that we can create
72:13 - a comment as an object we need these
72:16 - two inut these two properties so to
72:21 - say because a comment is also always
72:24 - Associated to user to
72:27 - listing and that's how we can add a
72:31 - comment just making the styling of this
72:34 - button
72:35 - to so the display of
72:39 - it just making it an inline
72:50 - block and there's some margins to it
72:54 - so in this else condition here else
72:57 - close will just specify how it would
73:00 - look like when the user is not
73:02 - authenticated that and the user cannot
73:04 - add the comment so I'm just copying this
73:10 - here just REM moving the
73:15 - form and this hidden inputs we won't
73:17 - need
73:22 - actually
73:29 - and just will make the input here to
73:33 - disabled so we cannot click it just the
73:36 - same as we did when we added the
73:41 - bid the only thing left now is here just
73:44 - to display a way to
73:47 - display a list of all the comments so
73:50 - this was the form above how to add a
73:52 - when we add the comment now we just need
73:54 - to display the comments just a line
73:57 - there to separate
73:59 - this
74:11 - and I'm just having another container
74:14 - div Just For The
74:16 - Styling or a bit of margins by
74:20 - default and here
74:24 - I just need a header to that say
74:30 - comments and we need the forge Loop to
74:33 - Loop all of the comments for that are
74:36 - made in a listing so V comment in
74:41 - model.
74:52 - comments
74:53 - and here in a
74:56 - div which yeah we can make some styling
74:59 - to it as well just will give it a
75:02 - border will make the Border visible so
75:05 - it will be one pixel
75:08 - thick solid and light gray as a
75:19 - color we'll set the margins to 10 pixels
75:25 - and some padding as
75:27 - well 10 pixel should be
75:34 - enough and we'll just make the Border
75:38 - radius we'll give it a border radius so
75:41 - on the edges it will be like
75:46 - rounded give a width of
75:49 - 40% and yes you can play around with the
75:52 - CSS styling actually yeah just what I
75:56 - was thinking how to do
76:00 - it and inside here in a paragraph inside
76:04 - paragraph tags we can input the comment.
76:09 - content and we can just make it so that
76:12 - we also see who post the comment like
76:14 - the username
76:17 - so add
76:21 - comment. user not usern
76:28 - name and I guess this was it this was
76:32 - this should be
76:33 - it if we don't have any
76:44 - errors so now if we click on the title
76:48 - here it should link us to The Details
76:51 - page and this is how how it looks like
76:54 - so yeah we can submit something there
76:56 - but it won't work because we haven't
76:58 - made the
76:59 - add uh bit or add comment method yet but
77:04 - this is how they would look like which
77:06 - looks good to me that's how they are
77:09 - displayed so here's the comment
77:12 - section and here are the main
77:14 - information about the
77:17 - listing just now no bits are
77:22 - submitted
77:25 - if we going try to log out to see
77:28 - how uh someone who is not logged in sees
77:34 - this just go to listing
77:40 - Index this details one and this is how
77:44 - so this submit button is now not
77:46 - clickable and this comment button is not
77:48 - clickable but the other things the
77:51 - persons that are not Lo the people that
77:53 - are not logged in can see uh clearly can
77:56 - see
77:58 - okay in this section we will handle the
78:01 - CSS of our application and the structure
78:03 - of it we will handle the navigation menu
78:06 - and the way it will be displayed and we
78:09 - are also going to be adding some
78:10 - complimentary features such as
78:12 - pagination and the search bar after all
78:15 - these modifications our auctions
78:17 - application will look much cooler
78:19 - visually and more user friendly so let's
78:22 - just start working so firstly we need to
78:26 - go to site. CSS file to make some
78:31 - modification to the CSS of the
78:34 - application so here we have some already
78:37 - some styling to it by default and I'm
78:41 - just going to be adding some extra some
78:43 - padding in the body uh of the padding
78:46 - will be of 10
78:50 - pixels and I'm also going to specify
78:53 - here the background
78:55 - color which the one I'm choosing has uh
78:59 - the following
79:09 - codes now I'm just I'm also going to add
79:13 - some stylings to the
79:17 - navigation to the item with the
79:20 - navigation class the background color of
79:23 - it I'm just choosing it to be something
79:27 - similar to the background color but Al
79:30 - but of course to be a
79:33 - bit
79:42 - different and I'm also going to give
79:45 - some border to the
79:48 - navigation and it will be a one pixel
79:51 - solid and and the color of it will be
80:00 - black and now to the items that have the
80:04 - nav link class I'm just making it I'm
80:08 - giving them a color of
80:12 - black and I'm also going to make some
80:14 - styling here so that when we hover over
80:17 - them they will turn the text of these
80:21 - items will turn to
80:24 - white just something to make them
80:26 - visually a bit
80:29 - better so color to
80:33 - white just going around the application
80:35 - to see how many of the changes are
80:42 - saved okay so we see that the background
80:44 - has changed the
80:49 - color we see actually this this items in
80:52 - the navigation are not
81:01 - changing okay so let me just go to the
81:03 - layout. Cs CSH HTML
81:07 - file and here I'm going to we're going
81:09 - to change the items that are in our
81:14 - navigation so first we need to uh remove
81:17 - these classes that are in this
81:19 - navigation
81:21 - class
81:23 - so the color that there already was
81:28 - would conflict with the color that we
81:30 - inputed
81:36 - ourselves okay so now we see that the
81:38 - color of for the navigation is
81:41 - [Music]
81:47 - changed okay I'm going to remove
81:51 - this button that that was
81:55 - there we don't need something like that
81:59 - so this icon thing that is by
82:03 - default now I'm also going to change
82:06 - this
82:08 - items in the navigation so for the first
82:11 - one I'll change the controller and the
82:13 - name will be active listings because
82:17 - this will redirect us to the listings
82:20 - controller and to the index method
82:23 - I'm going to also remove this uh class
82:26 - here that specifies the color of this
82:29 - navigation
82:32 - items because that would conflict with
82:35 - our own CSS for
82:40 - it okay so we removed that icon what was
82:43 - there in the
82:44 - [Music]
82:48 - beginning okay so what we're going to do
82:50 - now is that some item in a navigation
82:53 - will make them to be visible only when
82:56 - the user is logged in so here I'm
82:59 - writing at if user that identity does uh
83:03 - is
83:04 - authenticated then this menus that will
83:08 - be here will only be displayed when the
83:11 - user will be logged
83:17 - in so let me just copy that first
83:21 - one and
83:23 - here I'm just going to change the method
83:30 - here to make them to to redirect them to
83:34 - the create method and here I'm going to
83:37 - make the title to create listings so
83:40 - only a user that is logged in can access
83:43 - this
83:44 - method this menu
83:46 - item I'm just copying it
83:51 - again
83:53 - I'm putting like three menus three
83:55 - navigation items here and the second one
83:58 - here will redirect us to the m
84:01 - listings uh method and the third one to
84:04 - the my bits method which we will make in
84:07 - the upcoming tutorials but basically
84:10 - this will redirect us to a list of the
84:13 - users
84:15 - listings and the my bids uh method will
84:19 - redirect them to a list of
84:22 - uh to the listings which they have ped
84:25 - for we'll specify how this methods work
84:29 - later but just to have them there uh
84:32 - visually that's why we are doing them
84:44 - now in this navigation item we will
84:47 - actually input the search bar which will
84:50 - make it to be right in the middle of our
84:52 - navigation
84:58 - menu and for it actually I'm going to
85:02 - need the library from the font aom this
85:06 - a page that allows us to have some
85:09 - pretty cool
85:11 - icons inside our
85:13 - projects so this was the page but we
85:16 - need to go to the
85:18 - library and we need to copy the link tag
85:21 - here and input it in the
85:26 - header so that now we can use the cool
85:30 - icons that this Library
85:32 - offers and for it firstly here we're
85:35 - going to use it here because we're going
85:36 - to input a search icon and this will
85:40 - also of course the search input we're
85:44 - going to need to have a form here so
85:48 - that whatever is inputed in the in this
85:53 - sech and this sech input will be
85:56 - redirected to the listings controller
86:00 - and to the index
86:07 - method specifying the method here to get
86:10 - because that's how we do it in a when we
86:14 - make the search
86:17 - functionality when we search for items
86:21 - when filter items
86:24 - here I need an input
86:31 - tag so I'm giving some styling to
86:35 - it just making the width of it
86:39 - to
86:41 - 80% the remaining 20% will be covered by
86:45 - the surge button slash
86:48 - icon I'm going to float this to the left
86:57 - and here I'm giving it a radius to the
87:00 - Border top
87:04 - left on the top left
87:08 - border and in
87:12 - the bottom left border I'm giving it a
87:16 - radius as well so it will be like around
87:21 - it
87:31 - began color I'm setting it to white
87:37 - smoke okay I've mispelled it the float
87:42 - there I've actually made a specific
87:44 - video on how to make this
87:47 - exactly this exact search bar which I'm
87:50 - going to be linking down in the
87:53 - description and here I'm going to
87:55 - specify the type that it accepts will be
87:57 - on the
87:58 - text and the name I'm giving it the name
88:02 - like search
88:09 - string and the class I leave it as form
88:19 - control so down below we're going to
88:23 - need we need a
88:26 - button to submit
88:30 - what to be able to submit the
88:33 - data and I'm giving it a styling of the
88:37 - width I'm saying it to 20% the float I'm
88:41 - going to float it to the
88:43 - left and
88:48 - the Border will be set to none we won't
88:52 - have any
88:56 - borders I'm making the background to
89:05 - transparent and the height of the button
89:09 - will be 40
89:14 - pixels and of course we need to specify
89:17 - here the type of the button to be submit
89:20 - here we're going to write what will be
89:23 - displayed in the button and here comes
89:28 - our icons from f, library I'm giving it
89:32 - a class of fa and Fa search which is
89:35 - basically just a search
89:40 - icon we're actually going to input icons
89:43 - in each of these navigation
89:45 - items because they will look very much
89:49 - very much better visually so to to the
89:52 - active
89:53 - listings I'm going to give it an icon of
89:56 - fa fa solid
89:59 - and
90:01 - Fa
90:03 - house you can see this on the font aome
90:07 - uh website the codes for many different
90:12 - icons but I've so them before and I'm
90:15 - just imp putting them here now to save
90:17 - some
90:19 - time so to the create list thing
90:22 - navigation
90:24 - item I'm giving it the class of fa fa
90:29 - solid and Fa plus so it's going to be
90:33 - this plus
90:35 - sign the my
90:39 - listings I'm going to change it the
90:44 - class to fa newspaper
90:47 - here and in the last one in the my bits
90:50 - navigation item
90:52 - the class will be fa fa solid and Fa Sac
91:00 - dollar so we're just turning the
91:02 - application to see how it looks until
91:05 - now
91:11 - visually of course need to be loged in
91:13 - to see more things but we can see this
91:15 - search bar here which looks pretty cool
91:17 - in my
91:18 - opinion and the active listings with the
91:21 - sideon
91:22 - when we hover over the navigation items
91:24 - they should be white as we specified in
91:27 - side. CSS but okay we had to write do
91:32 - Nev link to specify that this is a
91:37 - class and if we refresh now we can see
91:39 - that if we hover over this navigation
91:41 - item it will turn to White if we can log
91:45 - in we would be able to see the other
91:49 - navigation
91:50 - items
91:52 - so let how they seem that's how they
91:56 - look when we hover over
91:58 - them and until now we only have active
92:01 - only the first two navigation items and
92:04 - we have to implement the functionality
92:05 - for the search bar as well which we
92:07 - haven't
92:10 - down I'm actually going to open up a
92:13 - project as I said I will link down below
92:16 - how we can add the search functionality
92:18 - in our project but I will just take the
92:21 - code from my for project
92:25 - here and I'll will explain you what I'm
92:27 - going to do be
92:29 - doing so this was my for
92:34 - application firstly I will actually copy
92:37 - the code for the pagination
92:39 - functionality because we are going to
92:41 - implement them both and for both of them
92:43 - we need to modify the index method and
92:46 - I'm going to link down in the
92:48 - description below the video where I
92:50 - explain ping ation more in
92:53 - detail basically we need to add a class
92:56 - paginated list class in our
92:59 - root
93:04 - directory okay I'm naming a class here
93:08 - generated list. Cs and I'll input there
93:12 - everything that I copied from my Forum
93:15 - project this is okay I'm just going to
93:18 - change the name space here to the name
93:21 - of the project and this you could find
93:23 - in the Microsoft documentation as well
93:26 - this exact paginated list class but let
93:30 - me just go back to the
93:32 - controller here and we're going to need
93:35 - to modify the index method as
93:40 - well let me see here in our previous
93:48 - project okay so this is the structure we
93:51 - take a number we take a number for the
93:56 - paginated
93:58 - list and this is how the view will be
94:02 - returned and we need a page size there a
94:06 - page size variable there let me just
94:08 - copy the first two
94:16 - firstly so basically yeah we have a page
94:19 - size how many items we want to be in a
94:21 - page
94:24 - and then we return this pated list class
94:27 - with the items from our
94:30 - context in the parameter we need
94:34 - an page number in parameter to know in
94:39 - which uh in which page we are and we
94:43 - also need this search
94:46 - string parameter if in case the user
94:50 - inputs something in the search
94:54 - bar so we'll take the items from this
94:57 - application DB context variable in this
95:00 - application DB context variable we are
95:03 - setting the page size to
95:05 - three of course we're taking the page
95:07 - number and the search string form the
95:10 - parameter and here we actually make an
95:13 - if close in case
95:16 - the search string is not
95:20 - null so if an user has inputed something
95:23 - in the search
95:32 - string so here in the application DB
95:36 - context variable we are searching with
95:39 - thisare
95:46 - function we're searching for the items
95:49 - where the title contains
95:53 - this search
95:55 - string basically that's what it does and
95:57 - here we need to return a view
96:00 - here and here below we need to make the
96:04 - change it to listing
96:07 - there and in application. DB context
96:10 - here we need
96:13 - to
96:14 - specify that we want
96:19 - listings that are not sold
96:23 - we could do this later St listings where
96:27 - do is sold is equal to false so in the
96:31 - first page will only appear those
96:32 - listings that
96:34 - aren't where the bidding is not
96:36 - closed and we could do it later but I'm
96:39 - doing it right now since we are handling
96:41 - the index method one more
96:43 - time and I'm just covering what we have
96:46 - here and the exact same thing will be
96:50 - returned in case the user inputs
96:52 - something in the search bar but the
96:55 - difference will be
96:57 - that uh the listings will contain the
97:00 - title that was uted in the search
97:04 - bar if we seen in our previous project
97:08 - we also need
97:09 - this on top of the page we need to use
97:14 - paginated list and here we need this
97:16 - variables and this HTML Elements which
97:21 - which basically are just this buttons on
97:23 - on the bottom of the page that we can go
97:26 - from one page to another so from the
97:28 - first page to the second page and so on
97:32 - and I'm just in putting them here in our
97:34 - index. CSH HTML file and on top of it
97:38 - I'm making the model so we are importing
97:42 - a page list
97:45 - model we are using a pated list
97:49 - model and if we're on the application
97:51 - now we should see all of our
97:57 - changes okay we can see
98:01 - here let it just load we can see here
98:05 - this uh pagination implemented but we
98:08 - only have one page and we can see that
98:11 - the search bar is
98:15 - functional if we type their shirt our
98:18 - listing will appear but we only have one
98:20 - listing so we can do
98:22 - much uh experiments with
98:25 - that in this section we will Implement
98:28 - how to add bids and how to close the
98:30 - bidding in our application we will write
98:33 - the methods in the controller for both
98:35 - of these functionalities and we will
98:37 - also going to need to create a bits
98:40 - service so let me just firstly go to our
98:43 - Details page to see where we have added
98:47 - the form to add the
98:49 - bidding and let me just find it so here
98:52 - we have this form where uh the user can
98:55 - input a bit but this add bit method we
98:59 - haven't written anywhere yet so we need
99:02 - to implement that in our uh in our
99:06 - listings
99:07 - controller so I'm just writing it right
99:13 - here
99:16 - somewhere so this will be an http post
99:26 - method so as usual public async it will
99:30 - be an asynchronous weight
99:33 - method public async
99:39 - task it takes it returns an action
99:44 - result and I'm naming it we'll name it
99:47 - ad bid and what will write here inside
99:51 - side we will bind here the what we will
99:56 - take from our form so we write here the
100:00 - ID that we take from the form the
100:03 - price of the bid the listing
100:08 - ID and the identity user
100:14 - ID and in
100:19 - the and we here need to specify also
100:22 - that we are we are taking a bit
100:26 - object from the
100:33 - form so firstly we need to check if the
100:36 - model state is
100:40 - valid and if that is the
100:46 - case here will will basically store that
100:49 - bit in our data
100:51 - based but to do that we will actually we
100:54 - don't we we'll actually need to create a
100:57 - service to get the bids so a service
101:02 - like service bits. add and then we'll
101:05 - add the bit but now we need to actually
101:07 - create this service because it doesn't
101:10 - exist and let me just go to this
101:12 - Services folder here and firstly add a
101:15 - new item to add an ibits service
101:19 - interface
101:27 - press enter and here we need to write
101:30 - the method signature uh this will be an
101:33 - a sing weight method it's doesn't return
101:37 - anything the name is ADD and it takes a
101:40 - bit in the
101:42 - parameters now we need to go to the
101:45 - services folder and add the bits
101:49 - service
101:51 - so like new
101:55 - class bids
102:02 - service and this will
102:06 - implement the ibit
102:08 - service
102:12 - interface here we implement the
102:15 - interface there and we'll need
102:19 - to access the cont context which I'm
102:22 - copying it from the I list from the
102:24 - listing service so just this Constructor
102:27 - and this variable that where we store
102:30 - the
102:31 - context just going to need to rename the
102:33 - Constructor
102:35 - here so this way we will we just take
102:39 - the cont the a variable with the context
102:44 - and this here in the in our ad method we
102:48 - just need to write underline context
102:51 - bits. add we will add the bid to our
102:55 - context and we just need here to await
102:58 - to write away then then to save the
103:01 - changes to our database with this save
103:04 - changes async method so this method
103:08 - doesn't return anything so it's good now
103:12 - and in our listings controller we need
103:14 - to have a variable here for the bits
103:18 - service just like that a PR
103:22 - only I bit service and I'll give a name
103:25 - for the
103:27 - variable just like I've done there above
103:30 - bits
103:39 - service and we also are going to need to
103:42 - write this to write this service in the
103:48 - Constructor as well
103:51 - there and
103:56 - here so now we have access to the
103:58 - service that we created in the
104:01 - controller let me just go to the program
104:03 - that says here and add the
104:07 - service that we just created We'll add
104:10 - it as a scop service and here we specify
104:13 - the name of the
104:15 - interface we always need to do this each
104:19 - time we create a service to go to
104:21 - program.
104:26 - Cs and now back to the add bid method in
104:30 - our
104:31 - controller here the name of our service
104:34 - actually we made it to be bits
104:42 - service and now here we
104:45 - are going to need
104:48 - to take the list
104:54 - thing and here now we are going to need
104:56 - to have a variable where we will store
104:59 - the
105:01 - listing where the bid was made
105:04 - so underline listing service. get by
105:10 - ID
105:12 - bit. listing ID so we'll
105:16 - just we just need the listing where this
105:19 - beding was
105:24 - made so now we can take the listing that
105:28 - price and set it to the bid. price so to
105:31 - the
105:32 - new bid that was made to that listing
105:36 - that's why we needed the listing
105:41 - variable and we need to save this
105:44 - changes to the database and we actually
105:47 - need this to do this by this context.
105:51 - save changes say sync but since we
105:54 - manipulate data in the context we just
105:56 - need to create another method there just
106:00 - like a save changes method it doesn't
106:03 - take anything it doesn't return
106:06 - anything let me implement this in the I
106:10 - listings in the listing
106:14 - service I'm just making it
106:18 - async and here we just just need to
106:20 - write wait save underl
106:26 - context that save changes
106:37 - ASN so now we
106:40 - can use this method in the
106:43 - controller so that the change of the
106:47 - price of the listing will be changed in
106:50 - the dat database as well so here we just
106:53 - write await listing service. save
107:03 - changes and now we can just
107:08 - turn
107:11 - View and return the user to The Details
107:15 - page and we can input here the listing
107:19 - so it takes
107:20 - The Details page will be for that
107:23 - listing the details method takes a
107:25 - listing
107:28 - so yeah we need an listing object there
107:34 - when we return the
107:35 - view and that was it for the ad bid
107:40 - method we now can also write the close
107:45 - bidding
107:46 - method so public Asing task
107:51 - the3 action
107:58 - result the name of it will let it as it
108:01 - was close
108:04 - bidding and it takes an in ID
108:09 - parameter if we go to The Details page
108:12 - let me see where we have it here so yeah
108:15 - we have a anchor tank here to be able to
108:20 - close close the bidding which can only
108:22 - be done by the person who posted the
108:34 - listing and here we need to take the
108:37 - listing where
108:41 - the that has the ID that we take here in
108:44 - the parameter and we will set that
108:48 - listings uh so the isol property of that
108:53 - listing we are going to need to set to
108:55 - true so that means that the listing is
109:03 - sold now we can just use this save
109:07 - changes method to save the changes to
109:10 - the
109:11 - database and we can
109:13 - return the users to The Details
109:18 - page of that
109:29 - listing okay so let me just refresh it
109:41 - here okay there seems to be an
109:45 - error okay I was having an error because
109:48 - here when I declared this service in the
109:51 - program. Cs I declared the interface
109:56 - twice so if I run the application
110:02 - now we can go now and try these
110:05 - functionalities that we implemented we
110:08 - actually is good to uh register another
110:11 - users so that one makes the Bings and
110:15 - the other one can close
110:19 - them
110:23 - just a name and a password
110:31 - there if we click on this listing here
110:34 - they can just try to add the bid and
110:37 - submit it and as you can see now the new
110:40 - price for the bid uh for the bid the new
110:45 - price that can be bided is $37 now so
110:49 - the add bid method meod worked fine
110:51 - worked very well if we log in with the
110:53 - other user
110:55 - now we see here that the owner can see
110:58 - who made the bidding and how much he
111:00 - made so we see there and if we we close
111:04 - the biding
111:07 - now so if the owner tries to close the
111:11 - buildings the winner will appear on top
111:18 - there as we can see here what we WR on
111:22 - top of the details page the name of the
111:26 - winner will appear on the owner's page
111:29 - but if the user has won the bidding it
111:33 - will appear the line of congratulations
111:35 - you are the winner so this should appear
111:38 - on the other accounts
111:41 - page so on Sean's account he if he opens
111:45 - the bidding if he opens the listing he
111:48 - should see only that he should see that
111:50 - he is the winner so if we try to log in
111:54 - with the
111:56 - Shan
112:01 - account okay we won't see anything here
112:03 - because we changed the index page so
112:06 - that it shows only the active listing so
112:11 - the listing is not active anymore
112:13 - because now it is sold so let me just
112:16 - comment this out here that shows in our
112:20 - index
112:22 - page
112:24 - only active
112:31 - listings I uncommented the wrong line
112:35 - there we should uncomment the line where
112:38 - the user hasn't inputed something in the
112:41 - search bar so this here and actually
112:45 - when we'll Implement later on the my
112:48 - listings and my bits method
112:50 - the user will be able to see his own
112:53 - bits and his own listings in a separate
112:57 - tab so we don't have to change it
113:01 - here so this procedure that we're doing
113:03 - here won't be necessary
113:06 - then okay the so now if the user opens
113:11 - it he sees that he won you are the
113:13 - winner so Shan on the
113:18 - bidding
113:20 - in this section we will handle the
113:22 - functionality of adding comments to the
113:24 - listings we will firstly create the add
113:27 - comment method in our controller and we
113:29 - will create the comment service in order
113:31 - to interact with a
113:33 - database so let me just firstly go to
113:36 - our project and I'm going to open up the
113:39 - details
113:40 - page uh here I'm going to I'm trying
113:43 - just find the form where we add the
113:47 - comments so here's our form where the
113:51 - users can input the comments and we have
113:55 - to create this add comment method in our
114:00 - controller so if we go to the listings
114:04 - controller just somewhere here I'm going
114:07 - to write here the method as an HTTP post
114:13 - method and here the usual public
114:18 - async t
114:21 - TK it returns an action
114:26 - result and the name of it is ADD comment
114:30 - of
114:34 - course here then we are going to bind
114:39 - what we take from the form to this
114:42 - method so I'm going to write inside here
114:45 - the
114:46 - ID that we take for from the form the
114:50 - content of the
114:52 - comment the listing
114:56 - ID and the identity user
115:00 - ID and here we specify that we are
115:02 - taking a comment object from the
115:11 - form here we then make the check if the
115:14 - model state is
115:16 - valid and if that's correct we will need
115:20 - to store the comment in the database for
115:22 - that we need to await to write the await
115:26 - keyword and here we need a
115:29 - method to be able to add the commment to
115:32 - our database but for this reason we're
115:34 - going to need to create a comment
115:37 - service because we haven't created any
115:40 - yet so here in the services folder
115:44 - firstly I'm going to need to add an
115:46 - interface which I'm going to name I
115:48 - comments
115:53 - service here we going to have to specify
115:56 - the signature method for our add method
116:00 - so task
116:02 - add and it takes a
116:05 - comment in the
116:07 - parameter doesn't return
116:13 - anything now to the services folder we
116:16 - add a class which we are going to name
116:19 - comment
116:23 - service here on top we first need to
116:26 - implement our interface that we just
116:29 - wrote and here on the errors we need we
116:32 - can click on Implement
116:35 - interface but on top of the page let me
116:38 - just go to the listing service and copy
116:40 - just what we do usually here we need to
116:44 - uh get this variable and the Constructor
116:47 - in order to get access to the context
116:51 - and I'm just going to modify here the
116:52 - name of the Constructor to have the name
116:55 - of our
116:56 - service and in the add method I'm
116:59 - writing there
117:01 - async
117:03 - keyword and here we can just write
117:06 - underline
117:07 - context.
117:09 - comments. add the comment and then we
117:12 - just need to save these changes to the
117:15 - database and this method doesn't have
117:18 - the need to
117:19 - return
117:21 - anything let me just go back to the
117:23 - controller
117:27 - now and we need to write here a variable
117:30 - that takes this
117:35 - service so I commment service and I'm
117:38 - naming it underline commments
117:44 - service we need to store the service to
117:47 - declare it also here in the
117:50 - Constructor just like we've done with
117:53 - the previous services that we've
118:05 - created so in program.cs as usual we
118:08 - need to declare the service we're making
118:12 - it as ADD as scoped
118:15 - service and inside here we write the
118:18 - name of the interface SP and the name of
118:21 - the service now we just need to go back
118:25 - to the
118:27 - controller and continue with our add
118:30 - comments
118:40 - method so here we' added the
118:47 - comment and we here need a variable to
118:50 - store the listing from where we are
118:53 - taking the
118:55 - comment so wait listing
118:58 - service. get by
119:01 - ID and this takes the
119:04 - comment. listing
119:09 - ID so we're taking from the
119:12 - database the listing where the comment
119:15 - was
119:18 - made
119:21 - this is comments. listing
119:24 - ID comment listing
119:30 - ID and now we can return The View with
119:33 - this ex of we can return the view of the
119:36 - details page for this exact
119:44 - listing so what's left for us to do is
119:47 - we can run the application and and check
119:49 - this
119:53 - functionality if I click on this
119:58 - listing can try and edit the comment and
120:02 - add the comment here like did I win I
120:06 - don't know we could ask about the
120:09 - listing actually and here we see the
120:11 - comment and the user who posted the
120:15 - comment and actually try here with the
120:19 - owner's account of that
120:22 - listing which was
120:29 - Jeff and I can return a comment to the
120:32 - user who
120:33 - asked and see how it appears so yes you
120:37 - did submit and we see that
120:41 - Jeff replied to that
120:47 - comment in the section we will see how
120:49 - we can display the specific listings
120:52 - that the user has made we will only need
120:54 - to create the method in our controller
120:57 - and this can be accessed by the user
120:59 - from the navigation
121:01 - menu so let me just open up our
121:05 - controller and we can make this method
121:08 - just below the index method because they
121:11 - have a similar structure and I'm copying
121:14 - this
121:16 - firstly and pasting it just right below
121:21 - that I will change the name to my
121:25 - listings and I'm actually not going to
121:28 - make the search functional I'm not going
121:30 - to need the search functionality for
121:32 - this method so I'm going to delete this
121:36 - part and this lines here as well but
121:40 - we're going to have we're going to use
121:43 - the
121:47 - pagination here uh the only difference
121:50 - that's going to be is that when we
121:51 - return the view we will return the index
121:55 - View and
121:57 - also let me just uncommon this part here
122:01 - because we in the index method we need
122:05 - to show only the method only the
122:08 - listings that are not
122:10 - sold and in our listings method we will
122:14 - show every listing that the using that
122:16 - the user has made
122:19 - including the sold
122:23 - ones so here we can write this dotware
122:28 - method where we will specify that we
122:30 - want to display only
122:33 - listings where the user ID where or
122:38 - where the user is equal to the currently
122:40 - logged in user so l. identity user ID
122:45 - equals user
122:47 - do find first
122:52 - value and
122:54 - inside the brackets where I claim
123:01 - types do name identifier with this line
123:06 - here only what it does is just takes the
123:09 - ID of the currently logged in user this
123:13 - is how we get the idea of the currently
123:14 - logged in user in the
123:16 - controller and this is all we're going
123:19 - to need for this method now if we run
123:22 - the
123:24 - application and we click on the my
123:27 - listings from okay firstly when we run
123:30 - the application we won't see this
123:32 - listing anymore because it is
123:34 - sold the listing is sold as we did in
123:37 - the previous video when we close the
123:43 - bidding okay I'm just running it one
123:45 - more
123:47 - time
123:51 - so we won't be able to see any listings
123:53 - in the first page but when we go to my
123:55 - listings we will see all of the listings
123:58 - that this user has made
124:03 - before in this section we will see how
124:06 - we can display the specific listings
124:08 - that the user has bided for we will need
124:11 - to create a method in the controller as
124:13 - well as a service to get the bits from
124:15 - the database then we will create a New
124:19 - View page which the user can access from
124:21 - the navigation menu so let me just go
124:25 - back to the
124:27 - project and here under my
124:31 - listings method I'm going to copy them
124:33 - and I'm going to right here my bits
124:37 - method this they have a similar
124:41 - structure but also they are different
124:44 - which we will see
124:46 - here so the first thing that I'm going
124:49 - to do
124:51 - here we will get the data from the bit
124:56 - service and not from the listing service
125:00 - because we'll get a list of bids and we
125:04 - haven't created this method yet so if I
125:08 - go here to the ibit service interface
125:12 - I'm going to need to create this get all
125:14 - method which will return an i variable
125:19 - of bits and it will have the name of get
125:23 - all and if I go to the then to the bits
125:28 - service let me just Implement that
125:30 - method here that the
125:35 - interface and let me just remove it
125:42 - here and inside this variable I'm going
125:46 - to get the data from the context
125:49 - so we'll use this link query to get the
125:53 - data from the context so from a in
125:56 - underline Contex context.
125:59 - bits we will include in the
126:03 - context a few things so firstly for the
126:07 - bits we will need to
126:09 - include the
126:14 - listing because we will then Show the
126:17 - listings and if we add then include we
126:22 - can take the
126:24 - users of that
126:30 - listing and there we select it select a
126:33 - and we will just need to
126:35 - return this
126:40 - variable that's just how
126:43 - we let just all for the get all method
126:47 - and here as we we have written it here
126:49 - we have taken the data here in the
126:52 - method from the
126:54 - service the difference here is that when
126:57 - we will return a page unated list of
127:02 - bits and we'll take the
127:06 - bits that a user has
127:09 - created and here in the when we return
127:12 - the view we will return the view for the
127:14 - my
127:16 - bits which we will create now The View
127:19 - page for my
127:22 - BDS so we are just adding a view
127:28 - here just an empty
127:31 - view which I'm going to need to have to
127:34 - name the same as the name of the
127:38 - method so my
127:43 - bits and for this I'm actually going to
127:46 - copy the index page but but I'm going to
127:49 - make a few modifications to
127:52 - it so I'm just going to copy the whole
127:55 - index page and I'm pasting it
127:59 - here we have here a list of
128:03 - bids and here in the for Loop I'm
128:07 - changing it to bit we'll take the bits
128:11 - and we'll get the same information that
128:13 - we get in the index page but we will
128:15 - access them by writing here at bid
128:18 - listing. image path for example and for
128:21 - all of the others so here we will take
128:23 - the listing ID by writing at bid.
128:26 - listing. ID and this way we'll take the
128:30 - title of the listing that the user has
128:33 - bided for so at bid. listing.
128:38 - Title Here we right at bid. listing the
128:42 - description so by using the bid we will
128:45 - access the
128:46 - listings that the user has bid it
128:50 - for here as well we'll access the
128:55 - user the listings user by the
129:00 - bids I'm I'm just changing this
129:03 - paragraph here
129:04 - to no bits made or just no
129:09 - bits Rel leave the HTML for the
129:11 - pagination as it
129:13 - is and if I run the application
129:17 - now
129:25 - okay if I go to my
129:28 - bits as I remember it's correct we can
129:31 - see we actually bid it for this so and
129:34 - we are actually the winnner so we can
129:36 - see this listing by accessing the
129:41 - bits you can just go to the my bits view
129:45 - page here I'm just going to change the
129:48 - the title here to just my
129:56 - bits and this way we can see that we
129:59 - access our bits by in this
130:02 - page so we have come to the end of the
130:05 - section and this was also the last
130:08 - functionality that we needed to add to
130:10 - complete our auctions
130:14 - application we have come to the end of
130:16 - this YouTube series we created a
130:19 - complete application in asp.net core and
130:21 - learned how to build the useful auctions
130:24 - application we did play around with
130:26 - different functionalities like adding
130:28 - bits adding comments closing the bidding
130:31 - creating listings Etc we also tried
130:34 - different things in the front end in
130:36 - order to display specific data depending
130:38 - on the user that was logged in and we
130:41 - worked on implementing various features
130:43 - to the same project or to the same page
130:46 - in case you have a based knowledge and
130:47 - know how things pretty much work in any
130:50 - language or framework it is important to
130:52 - try and build projects with a degree of
130:55 - complexity you will learn a lot just by
130:57 - putting all that you know together and
130:59 - by solving new things that come up
131:01 - during the way that's why I would
131:03 - recommend you to try and add new
131:05 - features to this auctions application or
131:07 - change the way things are displayed in
131:09 - certain places then you would actually
131:12 - realize how much you really known and
131:14 - how much you understand how the entire
131:16 - application works I was thank you very
131:18 - much for watching and I would really
131:20 - appreciate it if you subscribe to the
131:22 - channel and like the video in case you
131:25 - enjoyed the whole series thank you and I
131:28 - will see you in the next
131:30 - one

Cleaned transcript:

learn how to build a complete fullstack project in asp.net core asp.net core is a high performance open Source framework for building modern cloudbased Internet connected applications such as web apps iot apps and Mobile backends using.net in this course Alan omary will teach you how to build an auction web application hi there everyone welcome back to another YouTube series in this series we are going to create a complete application in asp.net core we're are going to build an auctions application where every user can create a listing and the user who bits the highest amount will win in the moment that the listings owner decides to close the bidding each user will have the option to see its own listings and the listings he has bid it for by simply going to the corresponding Link in the navigation menu many different features will be implemented in this project such as adding comments in the listings Details page pagination uploading image files in a project making changes to the pages depending on the user currently logged in and many more in this first section we're going to create the project and we're going to add the models needed for our application we will then connect our project to the database and this way we will have the fundamental set up to continue to build our project so firstly we need to create a new project and we need to find here a template for an MVC application just type your MVC and just click on this one go next uh we can name our project here I name it just options go to the next page and here we need to make the authentication type to individual accounts so that we have these users already enabled in our uh project when it loads this way we have the users functionality already uh being taken care of okay so the first thing we want to do is go to models and start adding classes or models to uh for our models needed for the project let me just name the first model first model is going to be the main one which is the listing so for each listing that our application will have and I'm going to give it an public in ID property and then for each listing we're going to need a title to be a string and of course uh we need the description for each listing uh we're going to need a double property for the price of the listing that we will put there here we need a string property for image path so basically when an image will be uploaded for a listing it will be stored inside the folder in our project and for for us to call the image of a specific listing we will use then the path where the image is stored but you will see it later on how this all works then we're going to need the E Sal of bull property because this way we will specify if listing is already sold or not and we will not display the sold listings in the first page and also some other functionalities will depend end of if a listing is solved or not then we're going to connect we need to connect each listing to the uh user and we'll need an identity user ID which is the property of types chain firstly and we need here to specify the object we will connect the leaks thing to the model which is identity user and we'll name it user so we'll make them nullable and we need to specify here the foreign key for the user which will be this identity user ID so this identity user we're already installed when we made the individual accounts to uh when we created a project basically each listing will be created by specific user so that's why uh we need this two properties here and on top we're going to make this as required so basically what this does is whenever a user is deleted for example uh we won't be able to see the listing anymore because that's uh how it would make sense so if a user is not anymore in my application we won't see the listings as well the listings will be deleted from database and in the end we're going to need to connect the listings so one listing will have multiple bits made to it and we will create this uh this model now a bit later and also each uh each listing will help multiple comments to it and we'll create the comments model also uh next and this is the way we store them when we uh write this type of models when they are one to many relationship models so let me create the next model that we need the b. CS model first I'm going need an in ID property and then a double property for the price let just copy this because each bid has also need to be connected to a user who made the bid and if the user is no longer there the bid will be created deled so if the user is deleted the bid will be deleted and we will also need to connect each bit to a listing so first we need a listing ID property and then a listing property just calling it listing and I would need to make both of them as notable and here we specify the forign key which is listing ID let me just create the next model that we need which is going to be the comment. Cs the comment model okay so as usual we need an in ID property I in string property for the content of the comment and I'm just going to copy this again this identity user ID and the user the identity user property so just like by on the bits I'm actually going to copy this from the bid model because just like with bids we connect the comment with the user and with the listing so they have to be connected to to user and the listing and just copy that down and that now what we're going to need to do is go to the context which was already created by default when we created a project and we need to specify the DB set inst instances for each model that we created so dbet listing which I name listings and we're going to do the same thing for all the three models that we created so D set bid nameing it bids and the Deb set for the comment and I name it comments so now uh when we go to app settings. Json we have a a default database connection there but we're going to need need to create a new database actually and go here and create new database let me just open SQL Server management Studio to get this uh server name okay let me just copy this I'm just going to paste it here and give a name to the database like auctions data or something and if we click here on Prop properties here we have a connection string in this properties window which I'm just going to copy and put it here in the app settings. Json file just pasting it there I'm just going to add another another thing here so I set the encryption to false because we don't have a password set to access the database basically and here we have created our database and we have stored the address in app settings. Json now if we go to program.cs here we see that the service is already add uh is already added here so the service for the uh for the context and which also connects it the context to the connection string as you can see this here and yes what we need to do is just go to package manager console and add the migrations for the models that we created okay so just add migration and here I'm just giving a name to the migration okay I think we've done a mistake in app settings. Json so in app settings. Json I think we have we're missing a comma or something there okay so uh we didn't close this bracket here this was the problem so I'm just going to need to add the migration again and it is successful and just going to update the database now in the section we will create our index next page we will firstly create a controller and then we'll create a service to get the data from the database lastly we will also handle the front end part by designing the index view page so uh firstly let's just go to the controllers folder and add a controller with views here so that we will have some base methods uh let me just select here the model of listing the context and we'll just create it so that we have some uh boilerplate methods for the crowd operations we won't use them exactly uh actually we will create a service to get the data from the database but just so that we have some code in the beginning that's why we're doing it so okay so here we have our controller with the methods and in this video we will handle the index method so for first let me just go to the data folder and add a folder for the services just name it services and inside here first we need a we'll create a service an interface here so I'm going to add the new item an interface and I'm naming it I listings service because we will get data for the listings and here first we will just create first select a signature method that we will then Implement in the services class so uh the return timee will be of I quable of listing and I'm naming the method get all so this will Implement then in the new file that we'll create that I'm going to be okay so I need to import here the modeles directory then I'm just going to add a class and then we name a listing service where we will implement this method signature that we wrote there so I'm just naming it listings service click add and here we'll implement the interface that we created the IL listing service and if we click here uh to show the areas we can click here on Implement interface so that this method is implemented somehow so so firstly let me just uh modify the get all method let let's just try the get all method and I copied it from the controller what we had there and just it's just as simple as this we're just taking listings from the context and we will include there the users so that we will see the user and for the context we will come here and copy this what this what is here in the controller and just paste it down on top we just need to rename the Constructor here to listing service so we'll get the information from database in this service and the method is okay and now here where we had taken the context here we will Import in the controller the service that we just created so I listing service and then we'll name this like underline listing service and then modify it here in the con in the Constructor as well okay and what we can do now in the index method here we will take the method that we created in the service so here just write underline listings service. get all which is the name of the method that we have in this service and that is basically how we'll get the data for the listings in our index page I'm going to need to uh comment all these other methods below because they are using the context and uh we now we are just using the service in this controller so it would have a lot of Errors if we let them as they are so I'm just commenting out everything except for the index method which so that we can test it how it looks like now when we go to program that CS we need to add the service that we created here so in the services here the stri Builder that services that add scope to as a scope service and here we'll have to write the name of the interface that we created and the name of the service itself okay let just go to the listings folder in the views folder and here at the index. CSH HTML I will just basically just change the header here to an H2 header and right here active listings to see all the listings that are active in our application and I guess I'm just going to remove this table presentation here here okay so I'm just going to delete all of this and I'm making a forge Loop here to Loop through all of the listings that we have so for each V listing in the model that is the listings model okay I guess I need to make it as an I quable here because that's how the data was when we wrote the method before and here I'm going to have a div container div of class container to represent all of the objects all of the things in this page I'm just giving it styling as well the background color I just saw it before for so I'm just typing here the rgba code so I was just testing it a little bit before and I found the color and this is the code for the color so I'm setting the margin on top to be 50 pixels and the margin on the bottom to be also 50 pixels I'm giving it a padding of like 20 pixels and I'm giving it to the Border a radius so it's like a corner shaped and giving it the Border it is to 10 pixels okay so inside we need other div I'm giving it the class for all which is a bootstrap class and inside of it will'll uh have another d with a class of column so that we specify this way we specify how many objects are in a row so we make the class of column and then if the screen is small the div will take six out of 12 imaginary boxes of space and if the screen is large the div will take a bit less space it will take five out of 12 imaginary boxes of space this is just to make the page responsive across different devices and here in the we write for the images of the listings here I'm just making this sign here we will store the images in a folder that we will create later that will be in the root W ww root folder you'll create the images folder there and then we will take the listing that image path which will be the the address of the image where the image is stored and for each image we'll handle styling here so the maximum width I'm setting it to be something like 400 pixels and the maximum height just is basically the same 400 pixels okay so I'm copying this to have have another div here this D will be a bit larger that's how we specify the seven there and here we have a H5 head inside of it we'll have an anchor tag which will redirect us to The Details page specify the route ID to be equal to the models ID okay I'm setting the color here the color making it to be black and inside the anchor here will I put the listing the title so the title of the listing and just below we're going to need another div inside of it we just store the description of the listing uh okay so firstly here we need to specify the listing price which is how much is bided or needs to be bided for the listing and I'm making this two string uh method here of n two so there there are two numbers behind the after the comma so when the number is 50 it will be displayed like 50 comma and just below there we'll just write here who listed the listing so the owner so to say so listing. user do email but it's the same just like the username I think in our case because the user's name we store this an email actually so yeah okay so here I'm going to make an if clause and in case there are there's nothing in the model so the model is empty there are no listings in our database I'm just going to display it here so that there are no active listings so that's what basically we have to to see first we want to load that application now because we haven't stored anything in the database okay I think everything is okay we have stored the service and program.cs here we can just specify the default controller to be the listings controller so the around the application it will appear the index of the lising controller would be the first method to be called the first link do we call and we're just running the project now okay we are um I think in the if we go to the controller to the listens controller here we uh return the view as list the application context that to list is seeing that's why we can't write here I quable what I did but we just leave it as it like list iable so I don't know why I changed that actually now uh yeah when on the application this is what appears the uh we see here that we have no active listings so this is our index page but when we store objects there will see we'll see the listings when we'll start listings there we'll see the listings in this section we will handle our create page we will see how we can create the listings and during this we will see how we can upload and store files in our project such as image files okay so let me just go to the listings controller and uncomment here this get create method I'm just going to remove this part here because we don't need it and I'm also going to need to uncomment this post create method as well but we'll modify it a lot there so when we create the listings we're going to need to get an image file from the user and we will store it inside the folder that we will create inside the project for this reason we're going to need a helper model that is similar to the listings model but it does store the images inside an iform file property then we'll take the data from this model and create a listing model with it but instead of the iform file we will store in the database the address of the file in the image file string property that the listings model has so let us just create this model firstly I'm just naming it listing view model just as a practice and then me go to the listing model from here I'm going to copy almost everything I want to change the image Path property later and I'm not going to use this bits and Commons because I don't need them when the user inputs the data and here I'm changing this property to I form file which accepts files including images now name it uh like image just image we need to import the data annotations here for the require re ired uh data annotation okay so I'm going to go to this www root folder and here inside I'm going to add an images file which will be the address where the images will be stored when user stores it when a user creates a listing so if we go to the create uh. CS HTML here we're going to need to modify a few things to create the listing so I'm just changing the header to create listing I'm making it an H2 header and on top I'm going to import a few things so that we can get the uh user that is currently loged in in the application so firstly just add using Microsoft asp.net identity I'm also going to need to inject here the user manager in the view page so it takes an identity user and I'll name it like user manager with a small U okay so here uh we're going to need to write encryption type in the form and here we select multiart form data which will be able to accept the file the image that we will uh input there here in the price when we take the price in the label we can just write as starting bit here in the image path we're going to rename it to image because now it is it is a listing view model not a listing model which had uh which has an image property changing it here as well but we need to on top we need to make it say listing view model not listing model here in the input for the image I need to specify also that it accepts image so this line here we needed to write there and about the styling of it can do something so I'm just setting the width of 30% of normal form changing the image here also right now for the eold property we don't need to input anything here but we need to make it that the default value for the is sold property to be false so uh listing is not solved and this we can modify if we go to the listing model and to listing view model as well so here we need to make it equal to false so when it is a listing is created it is by default is not solved so we'll need to modify it in the listing view model as well so here we need to don't need to take any input for that okay so here now we need to take the currently logged in user uh so just put here an input tag it will be of type hidden so yeah it's not shown in the view page here in the sp4 tag we need to specify identity user ID and we need to select the value to it so it will have the value of the currently logged in user so how we get the currently logged in user we use user manager do get user ID of the user that is logged in so that's the syntax how you write it here in the view pages let me just around this here around the project here to see specifically the create view page how it looks like there seems to be an error let me just find it okay so I would suggest the problem is the create post method because we haven't fixed it and it has a context in it but we take the information from the controller we take the information from the service so I think that's a problem then just go to the controller yes so here I the area so I'm just going to comment this out for a minute and try to around the pro project again and just go and to see the create view page see how this looks okay I'm just going uncomment this now so that we can handled what so we saw how the form looked how the create page looked but we'll see we'll handle here how the input will be handled so here we'll take a listing view model just name it listing so we're just making an if close here to check if the listing that image is not null so here we'll see we'll store it in this images folder so firstly to we need the variable to specify the upload directory which is going to be can get it by writing path. combine you'll need to access this address of the www root directory which can be done using uh web hosting environment service which will will have to include actually in the Constructor of this controller so we'll combine this path with the images folder so for this to work we need to import it here in the Constructor firstly we need the we need the private trade only variable for it it's going to be I web host environment I'll name it just like web host environment and this will get us the address of this directory that we want where the images are stored just need to specifi it here inside the Constructor as well and back to the create method here we need to specify here the we need the variable for the file file name how we can get this is by writing listing that image that that name that file name sorry this will get the name of the file when we upload it and the file path will be path. combine this upload directory together with the file name so now we need to right here using v file stream right new file stream we will create the new file stream class here and inside we will specify file path and file mode. create which will basically basically create a file for us so this file stream initializes a file stream class here is the path of the image where the file stream file will be created and here we specify that we want to create a file in this file mode that creat as we can read it here so what is left for us do is here right listing that image that copy to file stream and after we have created and stored the file inside a project we will create a listing object which will be what will be stored inside our database so we'll have this uh we'll create a the new listing the title of it will be the title which was the listing view model the title so we'll take it from The View model the same thing we we do for the description as well price equals listing the price so so this listing was actually the listing view model that we took from the form the identity user ID will be listing that identity user ID and the image path will be this file path that we have here above so this is how the object is created until this point and here what left has to do is to return to return a direct to action to index page so we'll return the user to the index page until the form when the form is submitted afterwards but right now we need to add to have uh to create a function in our service so that we can add this listing to our database so we need a a method that doesn't return anything which is an a single we method and I will name it add and it takes a listing object let me just go now to the listing service and here it would appear an error above and we need to click cck Implement one moment yes here going implement the interface yeah I'm going to need to write a sync and we need to add this listing in context that in the database by I think contacts. listings. add listing and we just need to save the changes to the database so underline context. save changes async and the method doesn't return anything here we need to call this method from the service that we just wrote so wait underlines listing service do add and we'll add there this listing object and we have an error up there because we haven't specified what happens when the listing that image is null so let me just return the user to the same page where the user is so to the create page together with the listing a listing object okay let me just turn the application now so we can test it we actually go to go to program. CS firstly because when we need to register user uh here the service right here we need to specify require confirmed account to false so that when we register a user uh it won doesn't need to uh verify the account so it will be just created instantly let we usually do it for our purpose okay let me just uh register a user here I've run out of names for users just Jeff gmail.com we need the password for it let's go the listings that create I think I have a watch in my files starting we to I don't know 35 and choose the file here okay choose this here here this is think man's shirt was there so I'm just changing this description here okay so here here you see the listing was created we see how the design will be when we create a listing in the index page so we see the title the description the bit and the person who made the listing so what I also need to show you is if we go to our images folder here here we can see that when we created the listing the image was uploaded in our folder here so basically yeah when a user inputed the file there we created and store the file inside this images directory and then of course a new listing was created with the image path uh property so with the address where the property where the F the image file is saved and here in the index view page we see that we take in the image the source is images uh at listing. image path so this is how it is written from the database the address of the image this section will be about the details page for each listing which is the place where most of the functionalities of the application are actually written so we will specify how a listing is displayed when we click on it and we will also write some pieces of logic about the display when specific users see the listing so firstly we need to uncomment the details method here in our in our controller let me comment the text here and I'm going to actually remove a few pieces that we don't need okay so all we need to do here is to make this uh method here that accesses the database we'll need to make a method in the service so here we we'll write the signature firstly which will be an a synchronous method it will return a listing and we usually name it uh get by ID and it will take an in ID as a parameter so let me just go now to the listing service and implement this what we wrote in the interface I'm just going need to write the async keyword basically the logic here will be the same as what we have here so I'm just copying this firstly and I'm just spacing it here here I'm going also add here we I will also include the comments and after that I will also include the bits when we take a listing from the context and after including bids I'm actually going to need for later use to then include the users of that bit which I make with this then include method here and of course after this I'm just going to need to return this listing variable here that's all we need to do in our case here we just now need to remove this here and use the method that we just created just so listing service. get by ID and it takes the ID above so just as a reminder we use we do this methods in the service so that we don't access the database from our directly from our controller that's the reason why we write these services and then we import them in the controllers we've talked about it uh even before but just as a quick reminder now let me just go to The Details page where I'm basically just going to remove all of this and here's a part where you play with the display of stuff so here we'll just import the Microsoft identity to be able to access the users here I'm going to inject to the view page the user manager which takes an identity user I'll name it just user manager I'm just going to remove that here in the beginning we need I'm going to make an if close here so if the user that identity that is authenticated so this basically just says that if the user is authenticated is logged in we'll make some uh specifications in the display and here what I'm basically doing is just okay if the model is sold so if model that sold is true we will uh display a title in the listing so uh depending from the status of the listing so who is the winner or if the winner if the user is the winner will displate as you are the winner so first we need to Loop through each bid in model. bits so here basically if the bid. price is equal to the model. price so for the user who if the bid that price is equal to model that price then the user has had the highest bid and here we specify if the bid. user ID is equal to the logged in user the current log user which we get with this user manager. get user ID basically what this is what this does we will have a header here that says congratulations you are the winner so for this to be displayed the user has to be logged in the the listing has to be uh sold and also the users bid has to have the highest price from all the bits and if not else if here we will specify we will see if the logged in user is actually the person who made the listing so if user man so if the currently logged in user is the model that I user. ID so if the user has created the listing itself it will tell the user who the name of the person who won the biding and if none of this is uh is correct or is for the case then we will just display to a random user who opens the the listing and if the listing is closed he he will see just that the bidding is closed so he won't see who won it or if he is not the winner he won't see uh any additional information so we won't see who want it or of course he won't see that he wanton it so um until now we just made this functionality to display a title in the listing on top of the listing depending on who want it or if the building is closed now we just going to need to uh play around with the display of the page of the listing so I'm having a header here and I'm putting the text Line to Center to center it and here we have the title of the model of the listing yeah I would to need the container div div class container I'm giving the styling I'm giving a background color which is just a color I was I saw before I was I just Mark the values I'm just writing it here for the color that I wanted so I'll give this div a bit of margins on top like 50 pixels and basically the same margin on the bottom as well just some paddings and I will make I'll in put some border radius there to be so the borders will have like corners on the edges so inside this div class container we're going to need to copy some things from the index page CU some parts here uh will be like the same have some same structure so I copied that part from the index view page and I'm pasing it here but I need to adjust it a bit so here I'll make the width to 100% of the width of the image and the height to 60 view height which is the yeah 60% of the screen basically and here we don't take it from listing. image path but from model. image path okay that listing title we don't need there because we have it on the top here I'm just going to write that model the description and this I will actually delete and here I will will specify some conditions to how the foll the following will be display so if the user is authenticated will make it possible for him to put a bid there to bid something but if not then not so here I will make a form ASP action which we haven't created this method yet in the controller but I will just write it here we'll create later the method will be a post method and here where the bid will be displayed we'll make an input there so the type of it will be number so it takes only numbers the minimum the minimum value of it will be the model. price so you cannot bid on lower than the model. price and this step equals one just means that there's like an option there too so with the errors to increase it with one or to decrease it with one the price and the name equals price we need this so we can so when the for when the form will be submitted and in the placeholder we actually just store the model. price that two string and here specify n to which just basically will write the number with two numbers after the comma so with two places after the the comma okay we just needed one single input tag there so together with the first input when a bid will be submitted it should take because the bid objects take a user takes a listing so that's why we we right here this input of type hidden with the name of identity user ID and the class of form control so this will take the currently logged in user that submits the bid and the value that it takes will be H will be will take it from the user manager. get user ID of the currently logged in user so yeah I forgot this slash there and just it's basically the same thing for to get the listing ID as well so it will be hidden for the name here will specify actually the name of the property which is listing ID so that we need when we when the form will be submitted and here the value of it will be just like at model. ID here in the end we just need an inut of type submit just class of form control uh no sorry class of button and button uh primary to be like a a blue button we only needed an one single input tag there as well and this was it for the ad bit form and Below there we can submit we can display the number of bits submitted in a paragraph and how we'll take it is we will take we'll write here model that bits that count which is the method that takes the number of bits that our module has I'm just Mak here this just like a line to separate it from the next thing and here we will specify so if the from we'll take the currently logged in user and if the user is actually the person who the person who created the bid he will be only he will be able to see the name of the people who have submitted bids so if user manager. get user ID equals to the model. user. ID he will be able to see will list here all of the names of the people who submitted a bit and how much they submitted so only the owner or the creator of the listing will be able to see this for each so we'll take for each bit in modular bits so we write here an unordered list of just specify The Styling here to list style Type To None not to have all of this default list stylings here we'll take bit. user that username so the username of the user who have submit has submitted a bid and we right here bid it and the price the amount of the bid so at bid. price that two string PR this is and to so it will be formatted a with the Press yeah so that was it firstly for this part so if the user is actually not logged in now he won't be able to submit anything so here I just need a div and here I will just make an import which will set it to disabled so you cannot import anything there and yeah won't do it inside the fors because uh it won't take anything the input I'm just copying this here so here in the input of type submit we make it disabled so you cannot click on the button on this submit button so also right here if the user is not plugged in he will be able to see also the number of bits submitted for that listing and here down below for to be able to see by all we'll just write the name of the person who sub who listed the thisis thing so mod model. user. username then just copy this here we need to use it again so I just sced that part of code from above so I will just uh so this functionality will be just for the owner of the listing the person who listed it it will have an will make it so the person who listed the listing would be able to have this anchor link here to be able to close the bidding which is the method that will create later this close speeding method and it will take from in the aspr out ID the model. ID just naming it close beding and we actually want to make it so this person can only close the building once the model that is sold equals to false so if a person actually closes the bidding the model will be is that is sold will be true so he cannot the idea is that he cannot close the biding even after the mod the biding was already closed and that after the model was sold so after the listing was sold he cannot close the bidding then because it doesn't make sense here I'm just going to write another of these lines to separate the sections and here we're going to handle the comments actually so if the user is authenticated so if a user is logged in uh he will be able to add a comment to the listing so just making it just we need the container D here and the form which will direct us to an method that we'll also create later to add comments and name get add comment method will be post and I'm going to have an uh H6 header you can add a commment actually we can we will store the commment so the input will be a text area actually so it's a bit bigger and giving it a class of form control for The Styling and this area label with text with text area and the name of this text area will be put it to Contex content so that we can connect it to the when we'll create later the comment as an object and in a styling we'll put the width to 40% and the vertical align to top so it will be placed on top on the upper part here we also need some input of type hidden to have the user that made the comment and also to have the listing which we can copy from here because so that we can create a comment as an object we need these two inut these two properties so to say because a comment is also always Associated to user to listing and that's how we can add a comment just making the styling of this button to so the display of it just making it an inline block and there's some margins to it so in this else condition here else close will just specify how it would look like when the user is not authenticated that and the user cannot add the comment so I'm just copying this here just REM moving the form and this hidden inputs we won't need actually and just will make the input here to disabled so we cannot click it just the same as we did when we added the bid the only thing left now is here just to display a way to display a list of all the comments so this was the form above how to add a when we add the comment now we just need to display the comments just a line there to separate this and I'm just having another container div Just For The Styling or a bit of margins by default and here I just need a header to that say comments and we need the forge Loop to Loop all of the comments for that are made in a listing so V comment in model. comments and here in a div which yeah we can make some styling to it as well just will give it a border will make the Border visible so it will be one pixel thick solid and light gray as a color we'll set the margins to 10 pixels and some padding as well 10 pixel should be enough and we'll just make the Border radius we'll give it a border radius so on the edges it will be like rounded give a width of 40% and yes you can play around with the CSS styling actually yeah just what I was thinking how to do it and inside here in a paragraph inside paragraph tags we can input the comment. content and we can just make it so that we also see who post the comment like the username so add comment. user not usern name and I guess this was it this was this should be it if we don't have any errors so now if we click on the title here it should link us to The Details page and this is how how it looks like so yeah we can submit something there but it won't work because we haven't made the add uh bit or add comment method yet but this is how they would look like which looks good to me that's how they are displayed so here's the comment section and here are the main information about the listing just now no bits are submitted if we going try to log out to see how uh someone who is not logged in sees this just go to listing Index this details one and this is how so this submit button is now not clickable and this comment button is not clickable but the other things the persons that are not Lo the people that are not logged in can see uh clearly can see okay in this section we will handle the CSS of our application and the structure of it we will handle the navigation menu and the way it will be displayed and we are also going to be adding some complimentary features such as pagination and the search bar after all these modifications our auctions application will look much cooler visually and more user friendly so let's just start working so firstly we need to go to site. CSS file to make some modification to the CSS of the application so here we have some already some styling to it by default and I'm just going to be adding some extra some padding in the body uh of the padding will be of 10 pixels and I'm also going to specify here the background color which the one I'm choosing has uh the following codes now I'm just I'm also going to add some stylings to the navigation to the item with the navigation class the background color of it I'm just choosing it to be something similar to the background color but Al but of course to be a bit different and I'm also going to give some border to the navigation and it will be a one pixel solid and and the color of it will be black and now to the items that have the nav link class I'm just making it I'm giving them a color of black and I'm also going to make some styling here so that when we hover over them they will turn the text of these items will turn to white just something to make them visually a bit better so color to white just going around the application to see how many of the changes are saved okay so we see that the background has changed the color we see actually this this items in the navigation are not changing okay so let me just go to the layout. Cs CSH HTML file and here I'm going to we're going to change the items that are in our navigation so first we need to uh remove these classes that are in this navigation class so the color that there already was would conflict with the color that we inputed ourselves okay so now we see that the color of for the navigation is changed okay I'm going to remove this button that that was there we don't need something like that so this icon thing that is by default now I'm also going to change this items in the navigation so for the first one I'll change the controller and the name will be active listings because this will redirect us to the listings controller and to the index method I'm going to also remove this uh class here that specifies the color of this navigation items because that would conflict with our own CSS for it okay so we removed that icon what was there in the beginning okay so what we're going to do now is that some item in a navigation will make them to be visible only when the user is logged in so here I'm writing at if user that identity does uh is authenticated then this menus that will be here will only be displayed when the user will be logged in so let me just copy that first one and here I'm just going to change the method here to make them to to redirect them to the create method and here I'm going to make the title to create listings so only a user that is logged in can access this method this menu item I'm just copying it again I'm putting like three menus three navigation items here and the second one here will redirect us to the m listings uh method and the third one to the my bits method which we will make in the upcoming tutorials but basically this will redirect us to a list of the users listings and the my bids uh method will redirect them to a list of uh to the listings which they have ped for we'll specify how this methods work later but just to have them there uh visually that's why we are doing them now in this navigation item we will actually input the search bar which will make it to be right in the middle of our navigation menu and for it actually I'm going to need the library from the font aom this a page that allows us to have some pretty cool icons inside our projects so this was the page but we need to go to the library and we need to copy the link tag here and input it in the header so that now we can use the cool icons that this Library offers and for it firstly here we're going to use it here because we're going to input a search icon and this will also of course the search input we're going to need to have a form here so that whatever is inputed in the in this sech and this sech input will be redirected to the listings controller and to the index method specifying the method here to get because that's how we do it in a when we make the search functionality when we search for items when filter items here I need an input tag so I'm giving some styling to it just making the width of it to 80% the remaining 20% will be covered by the surge button slash icon I'm going to float this to the left and here I'm giving it a radius to the Border top left on the top left border and in the bottom left border I'm giving it a radius as well so it will be like around it began color I'm setting it to white smoke okay I've mispelled it the float there I've actually made a specific video on how to make this exactly this exact search bar which I'm going to be linking down in the description and here I'm going to specify the type that it accepts will be on the text and the name I'm giving it the name like search string and the class I leave it as form control so down below we're going to need we need a button to submit what to be able to submit the data and I'm giving it a styling of the width I'm saying it to 20% the float I'm going to float it to the left and the Border will be set to none we won't have any borders I'm making the background to transparent and the height of the button will be 40 pixels and of course we need to specify here the type of the button to be submit here we're going to write what will be displayed in the button and here comes our icons from f, library I'm giving it a class of fa and Fa search which is basically just a search icon we're actually going to input icons in each of these navigation items because they will look very much very much better visually so to to the active listings I'm going to give it an icon of fa fa solid and Fa house you can see this on the font aome uh website the codes for many different icons but I've so them before and I'm just imp putting them here now to save some time so to the create list thing navigation item I'm giving it the class of fa fa solid and Fa plus so it's going to be this plus sign the my listings I'm going to change it the class to fa newspaper here and in the last one in the my bits navigation item the class will be fa fa solid and Fa Sac dollar so we're just turning the application to see how it looks until now visually of course need to be loged in to see more things but we can see this search bar here which looks pretty cool in my opinion and the active listings with the sideon when we hover over the navigation items they should be white as we specified in side. CSS but okay we had to write do Nev link to specify that this is a class and if we refresh now we can see that if we hover over this navigation item it will turn to White if we can log in we would be able to see the other navigation items so let how they seem that's how they look when we hover over them and until now we only have active only the first two navigation items and we have to implement the functionality for the search bar as well which we haven't down I'm actually going to open up a project as I said I will link down below how we can add the search functionality in our project but I will just take the code from my for project here and I'll will explain you what I'm going to do be doing so this was my for application firstly I will actually copy the code for the pagination functionality because we are going to implement them both and for both of them we need to modify the index method and I'm going to link down in the description below the video where I explain ping ation more in detail basically we need to add a class paginated list class in our root directory okay I'm naming a class here generated list. Cs and I'll input there everything that I copied from my Forum project this is okay I'm just going to change the name space here to the name of the project and this you could find in the Microsoft documentation as well this exact paginated list class but let me just go back to the controller here and we're going to need to modify the index method as well let me see here in our previous project okay so this is the structure we take a number we take a number for the paginated list and this is how the view will be returned and we need a page size there a page size variable there let me just copy the first two firstly so basically yeah we have a page size how many items we want to be in a page and then we return this pated list class with the items from our context in the parameter we need an page number in parameter to know in which uh in which page we are and we also need this search string parameter if in case the user inputs something in the search bar so we'll take the items from this application DB context variable in this application DB context variable we are setting the page size to three of course we're taking the page number and the search string form the parameter and here we actually make an if close in case the search string is not null so if an user has inputed something in the search string so here in the application DB context variable we are searching with thisare function we're searching for the items where the title contains this search string basically that's what it does and here we need to return a view here and here below we need to make the change it to listing there and in application. DB context here we need to specify that we want listings that are not sold we could do this later St listings where do is sold is equal to false so in the first page will only appear those listings that aren't where the bidding is not closed and we could do it later but I'm doing it right now since we are handling the index method one more time and I'm just covering what we have here and the exact same thing will be returned in case the user inputs something in the search bar but the difference will be that uh the listings will contain the title that was uted in the search bar if we seen in our previous project we also need this on top of the page we need to use paginated list and here we need this variables and this HTML Elements which which basically are just this buttons on on the bottom of the page that we can go from one page to another so from the first page to the second page and so on and I'm just in putting them here in our index. CSH HTML file and on top of it I'm making the model so we are importing a page list model we are using a pated list model and if we're on the application now we should see all of our changes okay we can see here let it just load we can see here this uh pagination implemented but we only have one page and we can see that the search bar is functional if we type their shirt our listing will appear but we only have one listing so we can do much uh experiments with that in this section we will Implement how to add bids and how to close the bidding in our application we will write the methods in the controller for both of these functionalities and we will also going to need to create a bits service so let me just firstly go to our Details page to see where we have added the form to add the bidding and let me just find it so here we have this form where uh the user can input a bit but this add bit method we haven't written anywhere yet so we need to implement that in our uh in our listings controller so I'm just writing it right here somewhere so this will be an http post method so as usual public async it will be an asynchronous weight method public async task it takes it returns an action result and I'm naming it we'll name it ad bid and what will write here inside side we will bind here the what we will take from our form so we write here the ID that we take from the form the price of the bid the listing ID and the identity user ID and in the and we here need to specify also that we are we are taking a bit object from the form so firstly we need to check if the model state is valid and if that is the case here will will basically store that bit in our data based but to do that we will actually we don't we we'll actually need to create a service to get the bids so a service like service bits. add and then we'll add the bit but now we need to actually create this service because it doesn't exist and let me just go to this Services folder here and firstly add a new item to add an ibits service interface press enter and here we need to write the method signature uh this will be an a sing weight method it's doesn't return anything the name is ADD and it takes a bit in the parameters now we need to go to the services folder and add the bits service so like new class bids service and this will implement the ibit service interface here we implement the interface there and we'll need to access the cont context which I'm copying it from the I list from the listing service so just this Constructor and this variable that where we store the context just going to need to rename the Constructor here so this way we will we just take the cont the a variable with the context and this here in the in our ad method we just need to write underline context bits. add we will add the bid to our context and we just need here to await to write away then then to save the changes to our database with this save changes async method so this method doesn't return anything so it's good now and in our listings controller we need to have a variable here for the bits service just like that a PR only I bit service and I'll give a name for the variable just like I've done there above bits service and we also are going to need to write this to write this service in the Constructor as well there and here so now we have access to the service that we created in the controller let me just go to the program that says here and add the service that we just created We'll add it as a scop service and here we specify the name of the interface we always need to do this each time we create a service to go to program. Cs and now back to the add bid method in our controller here the name of our service actually we made it to be bits service and now here we are going to need to take the list thing and here now we are going to need to have a variable where we will store the listing where the bid was made so underline listing service. get by ID bit. listing ID so we'll just we just need the listing where this beding was made so now we can take the listing that price and set it to the bid. price so to the new bid that was made to that listing that's why we needed the listing variable and we need to save this changes to the database and we actually need this to do this by this context. save changes say sync but since we manipulate data in the context we just need to create another method there just like a save changes method it doesn't take anything it doesn't return anything let me implement this in the I listings in the listing service I'm just making it async and here we just just need to write wait save underl context that save changes ASN so now we can use this method in the controller so that the change of the price of the listing will be changed in the dat database as well so here we just write await listing service. save changes and now we can just turn View and return the user to The Details page and we can input here the listing so it takes The Details page will be for that listing the details method takes a listing so yeah we need an listing object there when we return the view and that was it for the ad bid method we now can also write the close bidding method so public Asing task the3 action result the name of it will let it as it was close bidding and it takes an in ID parameter if we go to The Details page let me see where we have it here so yeah we have a anchor tank here to be able to close close the bidding which can only be done by the person who posted the listing and here we need to take the listing where the that has the ID that we take here in the parameter and we will set that listings uh so the isol property of that listing we are going to need to set to true so that means that the listing is sold now we can just use this save changes method to save the changes to the database and we can return the users to The Details page of that listing okay so let me just refresh it here okay there seems to be an error okay I was having an error because here when I declared this service in the program. Cs I declared the interface twice so if I run the application now we can go now and try these functionalities that we implemented we actually is good to uh register another users so that one makes the Bings and the other one can close them just a name and a password there if we click on this listing here they can just try to add the bid and submit it and as you can see now the new price for the bid uh for the bid the new price that can be bided is $37 now so the add bid method meod worked fine worked very well if we log in with the other user now we see here that the owner can see who made the bidding and how much he made so we see there and if we we close the biding now so if the owner tries to close the buildings the winner will appear on top there as we can see here what we WR on top of the details page the name of the winner will appear on the owner's page but if the user has won the bidding it will appear the line of congratulations you are the winner so this should appear on the other accounts page so on Sean's account he if he opens the bidding if he opens the listing he should see only that he should see that he is the winner so if we try to log in with the Shan account okay we won't see anything here because we changed the index page so that it shows only the active listing so the listing is not active anymore because now it is sold so let me just comment this out here that shows in our index page only active listings I uncommented the wrong line there we should uncomment the line where the user hasn't inputed something in the search bar so this here and actually when we'll Implement later on the my listings and my bits method the user will be able to see his own bits and his own listings in a separate tab so we don't have to change it here so this procedure that we're doing here won't be necessary then okay the so now if the user opens it he sees that he won you are the winner so Shan on the bidding in this section we will handle the functionality of adding comments to the listings we will firstly create the add comment method in our controller and we will create the comment service in order to interact with a database so let me just firstly go to our project and I'm going to open up the details page uh here I'm going to I'm trying just find the form where we add the comments so here's our form where the users can input the comments and we have to create this add comment method in our controller so if we go to the listings controller just somewhere here I'm going to write here the method as an HTTP post method and here the usual public async t TK it returns an action result and the name of it is ADD comment of course here then we are going to bind what we take from the form to this method so I'm going to write inside here the ID that we take for from the form the content of the comment the listing ID and the identity user ID and here we specify that we are taking a comment object from the form here we then make the check if the model state is valid and if that's correct we will need to store the comment in the database for that we need to await to write the await keyword and here we need a method to be able to add the commment to our database but for this reason we're going to need to create a comment service because we haven't created any yet so here in the services folder firstly I'm going to need to add an interface which I'm going to name I comments service here we going to have to specify the signature method for our add method so task add and it takes a comment in the parameter doesn't return anything now to the services folder we add a class which we are going to name comment service here on top we first need to implement our interface that we just wrote and here on the errors we need we can click on Implement interface but on top of the page let me just go to the listing service and copy just what we do usually here we need to uh get this variable and the Constructor in order to get access to the context and I'm just going to modify here the name of the Constructor to have the name of our service and in the add method I'm writing there async keyword and here we can just write underline context. comments. add the comment and then we just need to save these changes to the database and this method doesn't have the need to return anything let me just go back to the controller now and we need to write here a variable that takes this service so I commment service and I'm naming it underline commments service we need to store the service to declare it also here in the Constructor just like we've done with the previous services that we've created so in program.cs as usual we need to declare the service we're making it as ADD as scoped service and inside here we write the name of the interface SP and the name of the service now we just need to go back to the controller and continue with our add comments method so here we' added the comment and we here need a variable to store the listing from where we are taking the comment so wait listing service. get by ID and this takes the comment. listing ID so we're taking from the database the listing where the comment was made this is comments. listing ID comment listing ID and now we can return The View with this ex of we can return the view of the details page for this exact listing so what's left for us to do is we can run the application and and check this functionality if I click on this listing can try and edit the comment and add the comment here like did I win I don't know we could ask about the listing actually and here we see the comment and the user who posted the comment and actually try here with the owner's account of that listing which was Jeff and I can return a comment to the user who asked and see how it appears so yes you did submit and we see that Jeff replied to that comment in the section we will see how we can display the specific listings that the user has made we will only need to create the method in our controller and this can be accessed by the user from the navigation menu so let me just open up our controller and we can make this method just below the index method because they have a similar structure and I'm copying this firstly and pasting it just right below that I will change the name to my listings and I'm actually not going to make the search functional I'm not going to need the search functionality for this method so I'm going to delete this part and this lines here as well but we're going to have we're going to use the pagination here uh the only difference that's going to be is that when we return the view we will return the index View and also let me just uncommon this part here because we in the index method we need to show only the method only the listings that are not sold and in our listings method we will show every listing that the using that the user has made including the sold ones so here we can write this dotware method where we will specify that we want to display only listings where the user ID where or where the user is equal to the currently logged in user so l. identity user ID equals user do find first value and inside the brackets where I claim types do name identifier with this line here only what it does is just takes the ID of the currently logged in user this is how we get the idea of the currently logged in user in the controller and this is all we're going to need for this method now if we run the application and we click on the my listings from okay firstly when we run the application we won't see this listing anymore because it is sold the listing is sold as we did in the previous video when we close the bidding okay I'm just running it one more time so we won't be able to see any listings in the first page but when we go to my listings we will see all of the listings that this user has made before in this section we will see how we can display the specific listings that the user has bided for we will need to create a method in the controller as well as a service to get the bits from the database then we will create a New View page which the user can access from the navigation menu so let me just go back to the project and here under my listings method I'm going to copy them and I'm going to right here my bits method this they have a similar structure but also they are different which we will see here so the first thing that I'm going to do here we will get the data from the bit service and not from the listing service because we'll get a list of bids and we haven't created this method yet so if I go here to the ibit service interface I'm going to need to create this get all method which will return an i variable of bits and it will have the name of get all and if I go to the then to the bits service let me just Implement that method here that the interface and let me just remove it here and inside this variable I'm going to get the data from the context so we'll use this link query to get the data from the context so from a in underline Contex context. bits we will include in the context a few things so firstly for the bits we will need to include the listing because we will then Show the listings and if we add then include we can take the users of that listing and there we select it select a and we will just need to return this variable that's just how we let just all for the get all method and here as we we have written it here we have taken the data here in the method from the service the difference here is that when we will return a page unated list of bits and we'll take the bits that a user has created and here in the when we return the view we will return the view for the my bits which we will create now The View page for my BDS so we are just adding a view here just an empty view which I'm going to need to have to name the same as the name of the method so my bits and for this I'm actually going to copy the index page but but I'm going to make a few modifications to it so I'm just going to copy the whole index page and I'm pasting it here we have here a list of bids and here in the for Loop I'm changing it to bit we'll take the bits and we'll get the same information that we get in the index page but we will access them by writing here at bid listing. image path for example and for all of the others so here we will take the listing ID by writing at bid. listing. ID and this way we'll take the title of the listing that the user has bided for so at bid. listing. Title Here we right at bid. listing the description so by using the bid we will access the listings that the user has bid it for here as well we'll access the user the listings user by the bids I'm I'm just changing this paragraph here to no bits made or just no bits Rel leave the HTML for the pagination as it is and if I run the application now okay if I go to my bits as I remember it's correct we can see we actually bid it for this so and we are actually the winnner so we can see this listing by accessing the bits you can just go to the my bits view page here I'm just going to change the the title here to just my bits and this way we can see that we access our bits by in this page so we have come to the end of the section and this was also the last functionality that we needed to add to complete our auctions application we have come to the end of this YouTube series we created a complete application in asp.net core and learned how to build the useful auctions application we did play around with different functionalities like adding bits adding comments closing the bidding creating listings Etc we also tried different things in the front end in order to display specific data depending on the user that was logged in and we worked on implementing various features to the same project or to the same page in case you have a based knowledge and know how things pretty much work in any language or framework it is important to try and build projects with a degree of complexity you will learn a lot just by putting all that you know together and by solving new things that come up during the way that's why I would recommend you to try and add new features to this auctions application or change the way things are displayed in certain places then you would actually realize how much you really known and how much you understand how the entire application works I was thank you very much for watching and I would really appreciate it if you subscribe to the channel and like the video in case you enjoyed the whole series thank you and I will see you in the next one
