With timestamps:

00:00 - i gave an introduction about graphs in a
00:02 - previous video in this video i'm going
00:04 - to talk about how to find the distances
00:06 - between two nodes in a graph
00:09 - this is one of the main uses of graphs
00:11 - and is called graph traversal
00:13 - traversal algorithms are algorithms used
00:15 - to traverse or visit nodes in a graph
00:19 - the main types of traversal algorithms
00:21 - are breadth first search and depth first
00:23 - search
00:24 - in this video i will be showing how to
00:26 - implement breadth first search
00:29 - in javascript
00:31 - as you can see the algorithm starts at
00:32 - one node first visits all its neighbors
00:35 - that are one edge away then goes on to
00:37 - visiting each of their neighbors
00:39 - the point is to determine how close
00:42 - nodes are to a root node
00:44 - there are different ways to implement
00:46 - breadth first search
00:48 - in this version you pass in an adjacency
00:51 - matrix graph and the index of the root
00:54 - node
00:55 - remember in an adjacency matrix each
00:57 - nested array in the matrix shows which
01:00 - nodes in the graph are connected to the
01:02 - node at that index
01:04 - for example
01:06 - this array is at index 0 so it shows
01:08 - which nodes that node 0 is connected to
01:12 - if it is connected to a node there is a
01:14 - 1 at that index but if it is not
01:16 - connected there is a 0 at that index
01:19 - before i go through the code let's see
01:21 - it in action
01:23 - so here is a graphical representation of
01:26 - this
01:27 - adjacency graph
01:29 - check out my previous graph video to see
01:31 - how this adjacency graph goes into this
01:34 - graph
01:36 - so we ran the breadth first search
01:38 - function we passed in this graph up here
01:42 - and then we passed in the number one
01:45 - so that means we're trying to find out
01:48 - how far away every node is from the
01:51 - first node so you can see this graphical
01:54 - representation of the exact same graph
01:57 - and if you see the first node right here
01:59 - that's the node we passed in to the the
02:01 - breadth first search function we're
02:03 - going to see how far away each node is
02:06 - so you can see right here it shows how
02:07 - far away is so node zero is two nodes
02:10 - away see because of the direction of the
02:13 - graph we can't just go straight across a
02:15 - zero first from one we go to two then we
02:18 - go to zero so that's two nodes away
02:21 - one the
02:22 - the node itself is always zero nodes
02:24 - away
02:25 - and then the second node is one node
02:28 - away just one third node is three nodes
02:31 - away see first you have to start at one
02:33 - then you go to two then zero then three
02:35 - so that's three hops
02:36 - and four is infinity because when you're
02:40 - on from the first node it's impossible
02:42 - to get to the fourth node because the
02:44 - fourth node only points back to the
02:47 - first node
02:49 - this function will output an object of
02:52 - key value pairs where key is the node
02:55 - and the value is its distance from the
02:58 - root
02:59 - this object will be used to store the
03:02 - distances to the root node
03:05 - we will start all the distances at
03:08 - infinity which in this version of
03:10 - breadth first search indicates that a
03:13 - node is not reachable from the start
03:15 - node
03:17 - here the distance to the root node from
03:19 - the root node is set to zero instead of
03:21 - infinity
03:23 - we are going to create a simple queue to
03:25 - keep track of nodes to visit
03:28 - and the purpose of this variable is to
03:31 - keep track of the current node that we
03:33 - are traversing
03:36 - now we will start a while loop to keep
03:39 - traversing nodes until there are no more
03:41 - nodes in the queue to traverse
03:44 - we'll start the loop by popping off a
03:47 - node from the queue to traverse
03:50 - which at the beginning is the root node
03:54 - here we get all the nodes connected to
03:56 - the current node
03:58 - remember each index of the graph is an
04:01 - array that shows what nodes are
04:03 - connected to the root node associated
04:06 - with that index so in this example we
04:10 - are first looking at node one
04:12 - at node 1 the array shows that it is
04:15 - connected to nodes 0 and 2.
04:18 - now we set the neighbor index variable
04:22 - to an empty array
04:23 - this will keep track of a list of nodes
04:26 - that are connected to the current node
04:29 - this line gets the first node connected
04:32 - to the current node when it says index
04:35 - of 1 this finds the first connected node
04:39 - because the number 1 in our array means
04:41 - that the node is connected to another
04:44 - node at that index
04:46 - if there is no node with an index of one
04:49 - the index variable will be set to
04:51 - negative one so while index does not
04:54 - equal negative one push the index onto
04:57 - our list of neighbors
04:59 - this line searches for the next
05:01 - connected node
05:02 - we look for the next one in the array
05:04 - starting after the previous one we found
05:07 - that's what this plus one means now that
05:10 - we know all the nodes connected to the
05:12 - current node we loop through these
05:15 - connected nodes and get the distance
05:19 - if the value in the node's lin array at
05:22 - the index of the neighbor from the
05:24 - neighbor index array equals infinity
05:27 - that means we haven't set the distance
05:30 - of that node yet so we will set it now
05:32 - we are going to set it to the value of
05:35 - the the node's length array for the
05:37 - current node plus one
05:40 - then we'll push that neighbor to the
05:42 - queue so the next time we go through the
05:44 - while loop we'll check the neighbors of
05:47 - that node too
05:48 - this for loop is the most complicated
05:51 - part of this
05:52 - and you may have to read through it a
05:53 - couple times to completely understand it
05:57 - at the end we return the node's length
05:59 - array
06:01 - and that's breadth first search of a
06:03 - graph thanks for watching my name is
06:05 - beau carnes don't forget to subscribe
06:07 - and remember use your code for good

Cleaned transcript:

i gave an introduction about graphs in a previous video in this video i'm going to talk about how to find the distances between two nodes in a graph this is one of the main uses of graphs and is called graph traversal traversal algorithms are algorithms used to traverse or visit nodes in a graph the main types of traversal algorithms are breadth first search and depth first search in this video i will be showing how to implement breadth first search in javascript as you can see the algorithm starts at one node first visits all its neighbors that are one edge away then goes on to visiting each of their neighbors the point is to determine how close nodes are to a root node there are different ways to implement breadth first search in this version you pass in an adjacency matrix graph and the index of the root node remember in an adjacency matrix each nested array in the matrix shows which nodes in the graph are connected to the node at that index for example this array is at index 0 so it shows which nodes that node 0 is connected to if it is connected to a node there is a 1 at that index but if it is not connected there is a 0 at that index before i go through the code let's see it in action so here is a graphical representation of this adjacency graph check out my previous graph video to see how this adjacency graph goes into this graph so we ran the breadth first search function we passed in this graph up here and then we passed in the number one so that means we're trying to find out how far away every node is from the first node so you can see this graphical representation of the exact same graph and if you see the first node right here that's the node we passed in to the the breadth first search function we're going to see how far away each node is so you can see right here it shows how far away is so node zero is two nodes away see because of the direction of the graph we can't just go straight across a zero first from one we go to two then we go to zero so that's two nodes away one the the node itself is always zero nodes away and then the second node is one node away just one third node is three nodes away see first you have to start at one then you go to two then zero then three so that's three hops and four is infinity because when you're on from the first node it's impossible to get to the fourth node because the fourth node only points back to the first node this function will output an object of key value pairs where key is the node and the value is its distance from the root this object will be used to store the distances to the root node we will start all the distances at infinity which in this version of breadth first search indicates that a node is not reachable from the start node here the distance to the root node from the root node is set to zero instead of infinity we are going to create a simple queue to keep track of nodes to visit and the purpose of this variable is to keep track of the current node that we are traversing now we will start a while loop to keep traversing nodes until there are no more nodes in the queue to traverse we'll start the loop by popping off a node from the queue to traverse which at the beginning is the root node here we get all the nodes connected to the current node remember each index of the graph is an array that shows what nodes are connected to the root node associated with that index so in this example we are first looking at node one at node 1 the array shows that it is connected to nodes 0 and 2. now we set the neighbor index variable to an empty array this will keep track of a list of nodes that are connected to the current node this line gets the first node connected to the current node when it says index of 1 this finds the first connected node because the number 1 in our array means that the node is connected to another node at that index if there is no node with an index of one the index variable will be set to negative one so while index does not equal negative one push the index onto our list of neighbors this line searches for the next connected node we look for the next one in the array starting after the previous one we found that's what this plus one means now that we know all the nodes connected to the current node we loop through these connected nodes and get the distance if the value in the node's lin array at the index of the neighbor from the neighbor index array equals infinity that means we haven't set the distance of that node yet so we will set it now we are going to set it to the value of the the node's length array for the current node plus one then we'll push that neighbor to the queue so the next time we go through the while loop we'll check the neighbors of that node too this for loop is the most complicated part of this and you may have to read through it a couple times to completely understand it at the end we return the node's length array and that's breadth first search of a graph thanks for watching my name is beau carnes don't forget to subscribe and remember use your code for good
