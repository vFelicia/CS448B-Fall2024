With timestamps:

00:00 - let's see what you're going to cover in
00:01 - this course
00:03 - so there are five sections in which this
00:05 - course has been divided in
00:07 - the fundamentals the basics attack
00:09 - techniques
00:10 - the industry tools and defending sqli
00:13 - in fundamentals i'll cover the what when
00:17 - where why and how of sql injections
00:20 - and i'll show you the lab setup that you
00:22 - will need for this course
00:24 - the basics will cover the basics of sql
00:27 - again it's not basic sql injection it's
00:29 - basic of sql
00:31 - and then types of sql injection after
00:34 - that we'll move on to the attack
00:36 - techniques where i'll show you various
00:38 - adapt techniques that you can implement
00:40 - in this world and it's completely
00:41 - hands-on
00:43 - finally i'll show you how to use
00:44 - industry specific tools
00:46 - to use sql injections and to leverage
00:48 - them efficiently and effectively
00:51 - and we'll wrap up this with the lecture
00:53 - on defending sql injections where i'll
00:55 - show you the best practices
00:57 - that you should be following and again
00:59 - i'm not a programmer so don't worry
01:01 - i'll not show you the coding practices
01:03 - i'll show you what the real stuff is
01:05 - let me go ahead and quickly introduce
01:07 - myself experience wise i worked with
01:10 - multiple fortune 500 companies
01:12 - and government bodies on highly complex
01:14 - and confidential projects
01:16 - saving them over 25 million dollars
01:18 - every year
01:19 - last year we saved over 72 million
01:22 - dollars if we combine everything
01:24 - i have authored multiple international
01:26 - best-selling programs
01:28 - as well as i am the author of the book
01:30 - called penta secrets which is an
01:32 - amazon's global bestseller
01:34 - i have trained over 35 000 cso's who are
01:38 - today
01:38 - leading the world's infosec economy i
01:41 - hold the ccso
01:42 - lpt master ecsa ceh chfi
01:46 - cei as some of my ec council credentials
01:50 - i have been a former board member for
01:52 - ces governance board
01:54 - for india middle east and africa region
01:56 - and kvm board members of ec council
01:59 - in asia pacific region my core expertise
02:02 - is in managing
02:03 - double-blind penetration tests which are
02:05 - budgeted at least hundred thousand
02:06 - dollars or above
02:09 - here's the disclaimer sagar bunsel sagar
02:11 - pencil group of companies our partners
02:13 - ad affiliates
02:14 - youtube its partners and affiliates are
02:17 - not responsible for any of the actions
02:19 - you take
02:20 - after completing this course or watching
02:22 - this video
02:23 - any numbers claimed within this video
02:24 - are for reference purposes only any
02:26 - trademarks used in this video are the
02:28 - intellectual property of their
02:29 - respective owners
02:30 - and the video contains professional
02:32 - penetration testing knowledge and
02:34 - everything has been done in a controlled
02:36 - simulated environment
02:38 - what are sql injections and why do they
02:40 - occur
02:41 - it's an interesting question because sql
02:43 - injection is one of the top 10
02:44 - vulnerabilities as per or wasp
02:46 - and it's been there for years and still
02:49 - we see it
02:50 - let me tell you a story before i get
02:52 - started so this year in february we
02:55 - bought this car
02:56 - on my birthday now it's a mercedes-benz
02:59 - c-class and there is no bench showroom
03:02 - in my city
03:03 - so we had to take the delivery from
03:04 - another city however when we were taking
03:07 - it out of showroom
03:08 - there was a checkpoint on the checkpoint
03:11 - there was a camera which scans the
03:13 - number plate of the car
03:15 - on the number plate it scans that number
03:18 - and compares that number in the database
03:20 - and if the car is involved in some kind
03:22 - of fraud
03:23 - or if there is some ticket pending or if
03:25 - there is some criminal charges
03:27 - it will not open however we just bought
03:30 - this card five minutes ago
03:32 - it doesn't even has a number plate that
03:34 - was completely blank
03:36 - now here i have two options i could even
03:38 - wait there for a whole day
03:40 - get a number plate maybe a temporary one
03:43 - and then pass through the checkpoint
03:45 - or what i did is i wrote the special
03:48 - characters which is
03:49 - s-a-g-a-r single quote or
03:52 - one equals one now this is a special
03:55 - query
03:55 - when you put this in any database it
03:58 - will always return true and
04:00 - the checkpoint compared this thing in
04:02 - the database and checkpoint said
04:03 - yeah allow this color and it just opened
04:06 - and i took my curve
04:07 - and that's how i passed that checkpoint
04:09 - by putting in a scale injection
04:12 - now let me explain how the statement
04:14 - bypasses any checkpoint
04:17 - you see think about a login page how
04:20 - does a login page looks like
04:21 - there is a username there is a password
04:24 - and there is a login button
04:26 - right at the front end but think about
04:28 - the back end
04:29 - in the back end there is a lot of code
04:32 - as you can see on your screen right now
04:34 - you don't need to learn coding but try
04:36 - to focus on that red
04:38 - part of the code that is the code which
04:40 - is responsible
04:42 - to check if your password and username
04:44 - is true or not
04:45 - let me make it more easier so this is
04:48 - the simplified version of the core
04:51 - in this code it's asking select start
04:53 - from login where username equals
04:55 - something password equals something
04:57 - so there is the field username there is
04:59 - the field password
05:01 - in a login form you fill these fields
05:03 - and it goes to the database and it
05:05 - checks
05:06 - hey is there any user in the login table
05:08 - which has the username of sagar
05:10 - and password as pencil if there is it
05:12 - will return a result if there is not it
05:14 - will not return result
05:16 - so the parameter here we can choose any
05:19 - of these let's say password
05:21 - this is the expected input password
05:24 - equals x y z
05:25 - but a hacker like me will not give x y z
05:30 - i will give x single chord y z
05:33 - now do you see what just happened here
05:36 - that x
05:36 - was supposed to be closing with xyz
05:40 - and then that single quote however i
05:43 - just added a single quote and now i have
05:45 - two statements
05:46 - password equals x and then there is
05:49 - another statement which is y
05:51 - z and single court now once i am able to
05:54 - do that
05:55 - i can write an exploit like select star
05:57 - from login where username equals sagar
06:00 - and password equal x or
06:03 - one equals one so the system will check
06:06 - okay is there any user which is sagger
06:09 - and is the password x
06:11 - or just check if 1 is equal to 1 which
06:13 - is always true that is a tautology
06:15 - 1 is always equal to 1 which means that
06:18 - the result will be true and
06:20 - it will return a true statement and i
06:21 - will be able to log in
06:23 - this is the reason sql injection occurs
06:25 - when you are able
06:27 - to control the database put some data
06:30 - and manipulate it according to your wish
06:32 - that's a skill injection becomes so
06:34 - deadly
06:34 - of course we'll be talking about how to
06:36 - make these queries how to write this
06:38 - code in later lectures
06:40 - but this is the concept that is how sql
06:42 - injection works
06:43 - this is the reason of sql injections to
06:45 - exist when user is able to give
06:48 - certain data and control the database
06:50 - with that data
06:52 - that is where sql injection comes into
06:54 - the picture
06:57 - in this lecture we will go ahead and
06:58 - configure our lab
07:00 - which will be using for this course for
07:02 - that i want to download
07:04 - xampp for windows if you're using linux
07:07 - then download them for linux
07:09 - or if you're using os x then use xampp
07:11 - for osx
07:12 - the php version which i would recommend
07:14 - should be 7.2.33
07:17 - just go ahead download this and install
07:20 - it's a simple next next next install so
07:22 - i'll not show that right now
07:24 - once you have installed this just go
07:26 - ahead and search for xampp control panel
07:29 - that is the software which you will use
07:30 - to control this
07:32 - now here you have apache which is your
07:34 - web server
07:35 - in mysql which will be using as a
07:37 - database
07:38 - so go ahead and start both of these
07:40 - processes
07:42 - once you're done with that you can close
07:43 - this window you don't need it
07:45 - and now go to your installation folder
07:48 - of sam
07:49 - in my case that's installed in c drive
07:54 - here you'll find mysql
07:58 - in mysql you have something called bin
08:01 - and here you have all the files for
08:02 - mysql
08:04 - open the command prompt or a terminal
08:06 - window in this location
08:10 - and type mysql
08:14 - dash u space root we want to log in as
08:17 - root
08:18 - and there is no password by default once
08:21 - you do that you will be able to log into
08:23 - the database
08:24 - now here you have to create a database
08:27 - so say create
08:29 - database and give it a name
08:32 - the name should be spva once you do that
08:35 - it should say
08:36 - ok query one row affected
08:41 - you can show databases query to see if
08:44 - the database exists
08:45 - or not once this is done you can close
08:48 - the terminal
08:49 - and now you need the web application you
08:52 - can download this web application
08:54 - from my website sagrobinso.com
09:01 - here you can go to sbva which is sagar
09:03 - princess vulnerable application
09:07 - and you can click on download now to
09:08 - download this application
09:19 - this is the spva folder let's open it
09:22 - copy everything again go to your xampp
09:25 - installation folder
09:30 - this time find a folder called httpdocs
09:33 - this one
09:34 - by default if there are some files in
09:37 - this folder delete everything
09:39 - that's all good if this folder is empty
09:41 - just go ahead and paste this
09:44 - it's the same thing you delete it make
09:46 - it empty and paste
09:47 - all the files which you downloaded from
09:49 - my website
09:50 - now once this is done you just need to
09:52 - go ahead and open in your browser
09:55 - localhost slash setup.php
10:02 - once you do that the application will be
10:04 - ready to install
10:05 - you don't have to do any other
10:06 - configuration you can go ahead click on
10:08 - this login page
10:09 - and try to exploit this login page that
10:12 - is how
10:13 - you set up this environment however
10:16 - in this course i will also be using an
10:18 - online application
10:19 - called test php once you search test php
10:24 - on google
10:24 - it'll say home of acunetix r
10:28 - this website is owned by a kinetics
10:29 - company and it's a testing website as
10:31 - you can see
10:34 - testphp.worldweb.com on this website
10:36 - there is browse categories in that there
10:40 - is paintings
10:42 - this sometimes gives you an error
10:44 - because someone else in some other
10:45 - country is trying to hack this website
10:48 - as this is made for hacking that's all
10:50 - good just refresh the website
10:52 - it will load eventually and this is the
10:55 - page which we will be exploiting in the
10:56 - course
10:57 - so this page and sbba application
11:01 - both of the things that makes up our lab
11:05 - the basics of mysql it's really
11:08 - important for you to understand
11:09 - basics of writing sql queries
11:12 - of course i will not be teaching you all
11:15 - the sql language in one shot
11:17 - and of course it's not an advanced sql
11:19 - class but you need to know
11:21 - very basic language so that you can use
11:23 - them to understand the sql injection
11:26 - queries
11:27 - for that i need you to log into your
11:29 - mysql console
11:31 - now the first command is show databases
11:36 - which will give you all the databases
11:38 - that you have
11:40 - next event is create databases
11:47 - and you can create any database in this
11:49 - case i'm creating a database called
11:51 - x and you see query one row effector
11:55 - if you run the show database again you
11:57 - will see you got a new database
11:59 - next command is to select the database
12:03 - so you say use and the database name
12:05 - which is use x
12:08 - now we are in the x which is determined
12:10 - by this
12:11 - column here now let's see if there is
12:15 - any table in this
12:19 - show tables for that however it's an
12:21 - empty set
12:22 - because there is no table let's create
12:24 - and table them
12:35 - so i'm going to create a table called
12:37 - users now the reason i have these braces
12:39 - here
12:40 - is because i will be putting what kind
12:43 - of data will be stored in this users
12:45 - the data will be first of all name now
12:48 - the name is the name of the column
12:50 - okay that's the name of the column where
12:52 - the data will be stored
12:53 - but what type of data there are certain
12:56 - types in sql
12:57 - and it depends on the product that
12:58 - you're using in my case i'm using mario
13:01 - db implementation of sql
13:03 - so the type which i have to use is
13:05 - wirecare
13:08 - and in wirecare i have to tell it how
13:10 - many characters the name can be
13:12 - let's go 100 characters so someone can
13:15 - type a name
13:16 - which will be stored in the name which
13:18 - will be of varchar
13:19 - type which is characters and that'll be
13:21 - 100 characters
13:23 - let's press enter and you see query okay
13:26 - zero rows affected
13:28 - let me show you the tables now you can
13:30 - see we got a table called users
13:32 - if i select everything from users by
13:34 - using the select query
13:41 - where star means everything so select
13:43 - everything
13:44 - that's there in the user show me
13:45 - everything that's there in the users
13:48 - you will see it says empty set however
13:52 - i can go ahead and add something here by
13:54 - putting
13:55 - insert into values
14:02 - so i can use insert into table name
14:04 - which is users
14:05 - i can insert into this users table
14:08 - values and i need to give the values
14:11 - since i only have one column which is
14:12 - name i'll give the values here if i'm
14:16 - using name i have to use double cards
14:18 - and i can give a name like sagger
14:22 - i can press enter and you see one row
14:24 - affected
14:25 - if i do select star you will see there
14:28 - is a column name
14:29 - and there is a value which is in server
14:32 - similarly i can add more users by using
14:34 - the same query
14:35 - and saying second user as alice
14:42 - and third user as bob and if we try to
14:45 - see the users
14:46 - and you can see there are three records
14:48 - which are these which are in the column
14:50 - of name
14:50 - which are in the table of users which
14:52 - are in the database called x
14:55 - i can delete some stuff let's say the
14:57 - whole database by saying
14:58 - drop database x you can do the same for
15:02 - tables as well
15:03 - drop table and the table name as soon as
15:06 - i do
15:06 - drop database x you can see it says none
15:09 - here
15:10 - and there is no database now so if i
15:12 - just show you the databases
15:16 - you can see we don't have x anymore
15:19 - that's how you delete the database
15:22 - now there are three functions that i
15:24 - want to explain the function of user
15:26 - so i can say select user
15:30 - you can see it gives us the output of
15:33 - user
15:33 - running on the server so we are running
15:35 - this as root
15:37 - there is another function called version
15:42 - which is going to give us the version
15:44 - number of the database
15:46 - and there is another function called
15:47 - database
15:51 - which will throw us null because we are
15:53 - not using any database
15:54 - however if an application is using a
15:56 - database like
16:00 - uses pva now my application is using
16:03 - sbba database
16:04 - if i do select database you will see
16:07 - that it gives the database as the result
16:10 - so these three functions can be really
16:11 - helpful while gathering data
16:13 - in sql injections this is the core basic
16:16 - that you need to understand
16:18 - there are many things like ore and where
16:22 - order by group by but this is not an sql
16:24 - class
16:25 - though i will be explaining all of these
16:27 - things in the course whenever i can
16:29 - but you can always use google as your
16:31 - friend
16:33 - the classic injection bypass well the
16:35 - classic injection bypass can occur at
16:38 - any place for this example i will be
16:40 - using an application that i developed
16:42 - it's called
16:43 - spva sagger benzel's one rebel
16:46 - application so you can go to this login
16:50 - page and this is the place where i'll
16:52 - show you how to do a classic injection
16:54 - bypass
16:55 - because this is the easiest to
16:57 - understand
16:59 - now it's a simple login page if i do
17:01 - anything like admin admin which is a
17:04 - wrong
17:04 - username and password it will not throw
17:08 - any error and not even say that the
17:09 - username is wrong or the password is
17:11 - wrong
17:12 - it's completely disabled with the errors
17:15 - however
17:16 - if i use a correct username which is
17:18 - sagger
17:19 - and if i use a correct password which is
17:21 - bunsel
17:23 - i'll go ahead and log me in and you can
17:25 - see
17:28 - now i can log out and this is the place
17:32 - where i'll try
17:33 - to do a classic ejection bypass first of
17:36 - all we need to understand how the code
17:38 - of this application is working to make
17:41 - it easy for you let me show you the
17:43 - command line
17:44 - and i'm going to show you the tables
17:45 - here
17:48 - there are two tables we will use login
17:51 - table
17:58 - i can see in the login table there are
18:00 - just three entries id
18:02 - username password id is one username is
18:05 - sagar password is pencil
18:07 - now what do you think the backend of
18:09 - that website is using
18:11 - as php the query might be
18:14 - select start from login where username
18:17 - equals
18:17 - sagar and password equals pencil
18:21 - let me show you how
18:43 - so this might be the query that the
18:45 - website is using select start from login
18:47 - your username equals sagar
18:48 - now you control this sagger
18:52 - by putting it in the website over here
18:55 - in username field
18:57 - and you also control this bundle by
19:00 - putting it
19:00 - again in this field which is password
19:03 - field
19:04 - the ability to be able to control these
19:07 - fields
19:08 - which are being directly used as an
19:10 - input in an sql query
19:13 - is very dangerous and that is where you
19:15 - can do a classic injection bypass
19:21 - let's look at it carefully since i am
19:24 - the one who controls what i will put in
19:26 - the sagar
19:28 - can i not go ahead and put s
19:31 - a g in a double cards space
19:35 - now do you see what just happened i just
19:38 - created
19:39 - sag as the variable and i have got the
19:43 - ability to write some code here and this
19:46 - all is an additional thing it was not
19:48 - supposed to exist
19:50 - right this was never supposed to exist
19:52 - it was supposed to be
19:53 - and here well i just break this
19:56 - double quotes by putting a double quotes
20:00 - and that's where the classic injection
20:01 - bypass works
20:03 - so instead of this thing i may put
20:06 - sagger
20:06 - and a double quotes to break and then or
20:10 - one equals one which is basically
20:13 - that check if username is sagar
20:17 - or one equals one that is a classic
20:20 - injection bypass
20:21 - however there is a small problem in this
20:24 - this cork is never supposed to be here
20:27 - and this code is never supposed to be
20:29 - here
20:30 - in such a case we may go ahead and
20:32 - utilize this court
20:33 - by putting one code here one here
20:37 - and one here and similarly we may use it
20:41 - by putting it one here one here
20:44 - and one here now this is a perfect
20:48 - sql statement select start from login
20:50 - where username equals sagger or
20:52 - one equals one and password equals
20:54 - bunsel or
20:55 - one equals one so basically i can go
20:59 - ahead and press enter
21:00 - and this will work however even if i
21:03 - give it a wrong username and password
21:05 - like admin this time
21:13 - this will still work because the
21:15 - statement of
21:16 - where clause is being nullified by the
21:19 - statement of or clause in both of the
21:21 - cases
21:22 - this password and this username doesn't
21:24 - matters until
21:26 - 1 is equal to 1 and this will always be
21:28 - equal to 1 because this is a tautology
21:31 - so that is how you do an sql injection
21:33 - bypass
21:35 - there are many other ways to do that
21:37 - maybe you cannot put these
21:39 - double quotes in certain situations
21:42 - then how do you do that so for an
21:44 - example if you're breaking it from here
21:47 - and you're typing or one equals one then
21:50 - you may want to go ahead and remove the
21:53 - whole part from here
21:55 - by commenting it out comments in sql
21:58 - depends on the product
22:00 - in mysql you can use a hash sign
22:04 - or a minus minus sign or minus minus
22:07 - space minus sign
22:09 - or a slash asterisk sign
22:13 - there are many ways to comments and some
22:15 - will work some will not work
22:17 - so you have to try all of them let's try
22:19 - with hash
22:20 - as soon as i press hash all of the
22:23 - preceding code will be marked as a
22:25 - comment
22:26 - so my query is select start from login
22:28 - where username equals sagar
22:30 - or one equals one that's it everything
22:33 - else is being ignored
22:35 - now let me try to press enter and let's
22:36 - see this works
22:41 - and here you go it's asking you for a
22:44 - semicolon because
22:46 - the semicolon is getting ignored so
22:48 - there should be a semicolon
22:50 - before this comment sign i'm going to
22:53 - press this
22:54 - i'll work however a good query will be
22:57 - putting a semicolon over here before
23:01 - this sql sign and i see
23:04 - it works perfectly so i can go ahead and
23:08 - try
23:08 - another type of comment like minus minus
23:13 - that works as well i may try minus minus
23:16 - space minus in certain cases minus minus
23:19 - doesn't works
23:20 - so minus minus space minus may work
23:23 - however here you may say that you know
23:25 - what
23:25 - this is just getting commented out so it
23:27 - doesn't matter whatever i press here
23:30 - and you know i can even write this thing
23:32 - it will all get commented out
23:34 - however as i said in certain cases minus
23:37 - minus doesn't works
23:38 - minus minus space minus vertex so
23:41 - you may want to keep that in mind it
23:44 - works
23:45 - i may want to try with a with a slash
23:49 - asterisk this also works
23:52 - and here you can see suddenly something
23:56 - has
23:56 - changed in my database and it doesn't
23:59 - looks correct
24:01 - so it is asking me for a star
24:05 - slash you know to close the comment it's
24:07 - a multi-line comment
24:09 - you can comment multiple lines by
24:12 - writing slash asterisk
24:13 - and then asterisk slash to close the
24:16 - comment
24:17 - and it'll keep asking me for it until i
24:19 - close it now i am back in my database
24:21 - console
24:22 - so we will not close it because if we
24:25 - close it then
24:26 - this statement will not get commented
24:28 - out hence in certain cases we just keep
24:30 - it open and the system automatically
24:33 - ignores this part sometimes
24:34 - this one is risky but works now that you
24:38 - know how it's working
24:39 - let's go ahead and try to bypass the
24:41 - website itself
24:43 - so i will put a username it double
24:46 - quotes
24:47 - or one equals one and then a hash
24:51 - sign i will copy the same thing and put
24:53 - it in password
24:54 - though it doesn't matter so we're just
24:56 - commenting out the rest of the thing
24:58 - oh we just forgot a semicolon here
25:02 - now let's try the login well that didn't
25:06 - work
25:07 - what just happened let me tell you one
25:10 - thing
25:11 - in certain cases this double quotes can
25:14 - be replaced by
25:15 - single quotes it completely depends on
25:18 - what the developer has decided to use
25:21 - so in this case
25:24 - the website is not using a double quote
25:27 - the website is using a single code
25:30 - which is a common practice so the
25:32 - website is using the single quotes
25:34 - instead of double
25:36 - hence to break out from it i need to put
25:38 - a single quote
25:39 - here not a double quote and then i can
25:41 - press or one equals one
25:44 - so in the website i will put a single
25:46 - code here
25:48 - not a double and now i can press login
25:52 - and you can see i was able to log in
25:54 - without putting any password
25:57 - that is how a classic injection bypass
25:59 - works
26:01 - types of sql injection there are
26:03 - multiple types of sql injections which
26:05 - you should be aware of
26:06 - because depending upon the target and
26:08 - the situation you may have to switch
26:10 - between one type and another
26:12 - there are two major categories of
26:14 - vascular injections first one is in-band
26:16 - sql injection
26:17 - and second is inferential scale
26:19 - injection
26:20 - imbalance conjunction occurs when you
26:22 - are able to get
26:24 - the response from the website it can be
26:27 - some data
26:28 - or it can be some error so think about a
26:31 - database
26:32 - a database containing a lot of paintings
26:35 - you are able to get those paintings
26:37 - depending upon your searches
26:39 - you're searching for painting which has
26:41 - an id of one
26:42 - which has an id of two which has an id
26:44 - of three or you're searching that on the
26:46 - basis of price
26:48 - any painting which is costing less than
26:50 - five thousand dollars
26:51 - any painting which is worth more than
26:53 - twenty thousand dollars
26:54 - depending upon this you'll be getting
26:56 - some data from the database
26:59 - those are data based sql injections
27:01 - there you can use a technique
27:03 - called union based sql injection
27:05 - technique where you will use the union
27:07 - command
27:08 - of sql i know it's being a little
27:10 - confusing don't worry
27:12 - i'll be explaining what is union and how
27:14 - to do that
27:15 - in a whole separate lecture but just
27:17 - understand when you are able to get data
27:19 - from the application
27:21 - you will most probably go with the union
27:23 - based technique
27:24 - the second one is error-based injection
27:26 - in certain website you might have seen
27:28 - that when you do a search or you click
27:29 - on a button
27:30 - it sometimes throws an error that error
27:33 - is coming because there is some problem
27:34 - in the database
27:35 - and when we are able to take advantage
27:37 - of the errors to inject our sql
27:40 - that is where we use the error based
27:42 - injection techniques
27:43 - again i'll have a separate lecture on
27:45 - this so till now you understood that
27:48 - there are two categories
27:49 - in-band sql injections and inferential
27:52 - skill injections
27:53 - in in-band you have the database
27:55 - technique called union based injection
27:57 - and the error-based technique called
27:59 - error-based injection
28:00 - now coming on the inferential injection
28:03 - in certain cases you will not get the
28:06 - error
28:06 - neither the data there you have to
28:09 - analyze the behavior of the application
28:12 - either you are logging in or you are not
28:15 - logging in
28:16 - it's not throwing any error that
28:18 - password is wrong username is wrong it's
28:20 - not giving you an error
28:21 - it's just letting you log in or you're
28:23 - not able to log in
28:25 - that's where you analyze the behavior am
28:27 - i able to log in
28:28 - that is a true statement is it not
28:30 - allowing me to log in that is a false
28:33 - statement
28:34 - this true and false is called as boolean
28:36 - injection technique
28:38 - similarly you can observe the time taken
28:41 - by the server
28:42 - when you request a page it may take five
28:45 - seconds
28:45 - to open that whole page in certain cases
28:48 - it may take 20 seconds to open the same
28:50 - page
28:52 - that is where you can analyze the time
28:54 - taken by the server
28:55 - to process some requests and that is
28:58 - known as the time
28:59 - based injection techniques so as a recap
29:02 - in inferential we do not rely on data or
29:04 - errors
29:05 - rather than the behavior of the
29:06 - application either we will get
29:08 - true or false behavior which will lead
29:10 - to the boolean injection technique
29:12 - or we'll get some time differentiations
29:14 - which will lead to time-based injection
29:16 - techniques
29:17 - well there even exists a third type of
29:19 - technique
29:20 - which is called as out-of-band
29:22 - injections
29:23 - the reason i'm not discussing this and
29:25 - we will not even be covering this in the
29:27 - course
29:28 - is that out of band is a very rare
29:30 - situation
29:31 - it is not even applicable in every sql
29:33 - product for an example
29:35 - this normally is found on databases
29:38 - which are from a brand called oracle
29:40 - there is a special package in that
29:42 - called utl underscore http
29:44 - with which we can get the response in
29:47 - our
29:47 - netcat listener so you can set up a
29:50 - netcat listener and you can get response
29:52 - of your queries in your listener
29:54 - it's highly rare situation and will not
29:56 - fit the scope of this course
29:58 - that's the reason we will ignore out of
30:00 - the ban but in a nutshell
30:02 - out of bad skill injections are the
30:04 - injections which do not occur on the
30:06 - application
30:07 - rather in the background they occur
30:09 - somewhere else
30:10 - like a netcat listener being hosted by
30:13 - you
30:14 - so these are the three categories of sql
30:15 - injections and we will be covering the
30:17 - first two
30:18 - in the following lectures in detail
30:22 - union based sql injection well a union
30:25 - based sql injection occurs
30:27 - when we are able to use the union
30:28 - operator to combine the output of two
30:31 - select statements
30:33 - as you can see in the following screen
30:35 - this first
30:36 - image which has some lot of some text
30:40 - and has an author name with a link and
30:43 - actually an image is the result of the
30:46 - website's default code
30:48 - however i was able to create a virtual
30:50 - image
30:51 - which you can see right here which
30:52 - doesn't exist which has
30:54 - a name as the database user
30:58 - instead of the description it has the
31:01 - database
31:02 - itself and instead of the painter name
31:05 - it has
31:05 - the version information of the database
31:08 - so i was able to create a virtual row
31:11 - and extract data to that seems
31:14 - complicated right
31:15 - let me make it easy for you
31:21 - i have two tables in this database first
31:23 - one is
31:24 - login
31:31 - if we see the login table there are
31:33 - three columns id
31:34 - username password ids one username is
31:38 - sagar
31:38 - password is sponsor just wondercore
31:42 - now if i use union operator and i try to
31:44 - combine
31:45 - one two three i will be able to combine
31:48 - another
31:48 - row which has the value one two three
31:51 - let me show you how that works
31:58 - as you can see i just typed select star
32:01 - from login
32:02 - union select one two three and there is
32:05 - certainly
32:06 - another row which has the value one two
32:08 - three
32:09 - this will only work when you are giving
32:11 - the exact number of
32:13 - columns if i try to give only one and
32:16 - two
32:16 - it'll throw an error because the third
32:18 - column will not have
32:20 - a value to put in
32:26 - as you can see when i try to give only
32:28 - select 1 and 2
32:29 - it says the select statement have a
32:32 - different number of columns
32:34 - so it should always be the same number
32:36 - of columns which are putting here
32:40 - now i can go ahead and extract data
32:42 - instead of three i can put
32:43 - version and i'll throw up the version
32:48 - number
32:49 - instead of one i can put username i'll
32:56 - throw
32:56 - the user instead of one i can put the
32:59 - database
33:05 - i'll throw the database name seems easy
33:08 - right
33:09 - so i can just copy this thing
33:14 - and take it to this website and run it
33:17 - and it will work
33:21 - will it well no it won't it'll throw an
33:24 - error let me show you what
33:28 - you can see it says the select statement
33:30 - has different number of columns
33:32 - you cannot expect them using three
33:34 - number of columns right
33:35 - so they might be using four columns or
33:38 - five columns or six columns
33:40 - there are two ways to find columns first
33:43 - is brute forcing
33:46 - where you can try select one
33:52 - that doesn't works then you can try
33:54 - select one and two
33:57 - that also doesn't work and you can then
33:59 - try select one two three
34:02 - that will also not work but this method
34:04 - may take a lot of time hence we can use
34:06 - an efficient method
34:08 - which is order by clause
34:13 - instead of putting select statement i
34:16 - can put order by
34:21 - and i can say order by 20
34:26 - and it says unknown column 20 in order
34:29 - clause
34:30 - this means that the number of column is
34:32 - less than 20.
34:34 - if i try 10 now
34:42 - it works which means the number of
34:44 - columns is either 10 or more than 10.
34:47 - so now i know they are in the range of
34:48 - 10 to 20. i can use a middle range which
34:51 - is 15
34:56 - and that throws an error so unknown
34:58 - column 15 it means
34:59 - our columns are in between the range of
35:02 - 10 and 15.
35:05 - now i can put 13. it still throws an
35:09 - error which means our number of columns
35:11 - is either 10
35:12 - 11 or 12. i can put 11
35:18 - that works so either 11 or 12.
35:23 - well 12 throws another which means the
35:25 - number of columns in this application
35:27 - are 11 which gives us the output
35:30 - so i can say now select 1 2 3 4
35:34 - 5 6 7 8 9 10 11.
35:48 - now you can see it creates a virtual
35:50 - table
35:51 - but point to understand here is not
35:54 - every column
35:55 - is accessible i can see 7 here
35:59 - i can see 2 here i can see 9 here
36:03 - so i can extract information through
36:05 - column number 7
36:07 - through column number 2 and through
36:08 - column number 9.
36:10 - these are three columns where i'm
36:12 - getting the information
36:14 - hence i can put my database
36:17 - let's say in column number two
36:24 - in column number seven i can put the
36:27 - user
36:31 - and in column number nine i can put
36:38 - diversion
36:40 - and you can see we were successfully
36:42 - able to find the username
36:44 - the database name and the version can we
36:47 - take it forward
36:48 - of course you can find any information
36:50 - that you like
36:51 - can you find other database yes it
36:54 - depends on
36:55 - how deep you understand sql language
37:02 - so in order to find all the databases
37:05 - there is a special table
37:07 - called information schemas kimata
37:10 - you can find that using this
37:25 - there is a column called schema name in
37:28 - a table
37:29 - called schemata in a database called
37:32 - information schema
37:33 - as you can see here the first database
37:35 - is always information schema
37:37 - which contains this table schemata which
37:39 - has a table
37:40 - column called schema name which has all
37:43 - of these entries
37:45 - so if you query schema name from
37:47 - information schema dot
37:49 - it'll show you all the databases can i
37:52 - take this thing
37:54 - from here and can i put it
37:57 - on the website
38:18 - and now you can see we got first
38:19 - database information schema
38:21 - second database acquired and there are
38:24 - no other entries which means
38:26 - this specific website only has two
38:28 - databases
38:29 - information schema and acquired
38:32 - i can go on and on with multiple
38:34 - examples just to give you one more
38:36 - example
38:36 - on how to find the table names
38:41 - so the query for that will be
39:13 - select table name from information
39:16 - schema.tables
39:17 - where table schema equals x where x is
39:19 - the database
39:20 - which you want to find in this case i
39:23 - found the x
39:24 - where there is just one table called
39:26 - users
39:28 - can i take the same thing and put it on
39:29 - the website of course
40:01 - as you can see i just found the table
40:03 - names the query i used was
40:06 - table name from information schema.table
40:10 - where table schema equals acquired
40:15 - because i wanted to find the tables in
40:16 - the database
40:17 - called acquired and the table names are
40:21 - artists cards k tech
40:25 - feature guest book and so on
40:28 - there is an interesting function that
40:30 - you can use here which is
40:32 - group concat
40:42 - now when you use this function called
40:45 - group can cad
40:46 - and in that i am asking for table name
40:48 - you can see it doesn't gives me a lot of
40:50 - results
40:51 - it just groups all of them together over
40:54 - here
40:54 - painted by artists cats catac feature
40:58 - guest book pictures
40:59 - products users so everything in one line
41:02 - super clean stuff and that's how you do
41:05 - union-based sql injections
41:08 - error-based sql injection well an
41:11 - error-based sql injection occurs when
41:13 - you are able to trigger
41:14 - certain bug in the product which leads
41:17 - to some errors
41:18 - and you have the ability to control
41:20 - those errors to extract data
41:23 - in the following screen you can see that
41:25 - i was able to create an error
41:27 - which is about a duplicate entry in the
41:30 - group
41:30 - key but in this error you can see i was
41:34 - also able to extract
41:36 - the version number of the database
41:39 - the database name and the user of the
41:42 - database
41:44 - this is what an error based skill
41:45 - injection is all about
41:47 - now as i just said this depends on the
41:49 - product and a bug
41:51 - in that product you can see that this
41:53 - version is
41:55 - 5.1.7
41:57 - let me show you a page here you can see
42:00 - 5.7
42:03 - so i'm using a much older version on
42:05 - that website however
42:07 - this bug id 82544
42:10 - this bug is valid in all the latest
42:12 - versions in 2020 as well
42:15 - it was published in 2016 but even after
42:18 - four years this has not been patched
42:21 - and looking at the history i don't think
42:23 - so it's going to be patched soon
42:25 - so the bug is about a duplicate entry in
42:28 - the group
42:28 - key while doing a group by clause
42:32 - if you go ahead and scroll down you will
42:34 - see that you can create this error
42:37 - by selecting something counting it
42:40 - concatenating the stuff
42:41 - with rand function concatenating with
42:44 - floor function
42:45 - from certain table and grouping it by
42:48 - some value
42:49 - sounds complicated right don't worry
42:51 - i'll break all of this for you
42:53 - so i'm going to show you all of this in
42:56 - my test environment
43:01 - i do have the following databases i will
43:03 - use x for this specific test
43:11 - there is just one table in this database
43:13 - called users
43:26 - in this specific table there is one
43:28 - column called name
43:29 - and there are three rows sagar alice
43:32 - paul
43:34 - now this error occurs when we are able
43:36 - to associate
43:37 - a random pattern for that the first step
43:40 - is to associate a random value for each
43:43 - of the results
43:44 - to do that we use the rand function
43:54 - as you can see when i select this column
43:56 - which is name
43:57 - it returns three rows but i also
44:00 - selected a random function
44:01 - which is creating three random values in
44:04 - front of these
44:05 - since it is a random function anytime i
44:08 - create this again and again
44:09 - it will create all new values you can
44:12 - see
44:12 - when i type this again all the values
44:15 - have changed
44:16 - if i type it once more all the values
44:19 - have changed again
44:21 - these values are completely generated
44:22 - random and they will range
44:24 - from 0 to 1. the next step to trigger
44:28 - this bug is to control the output of the
44:30 - random function
44:31 - but i just told you it's completely
44:33 - random you can use a seed value
44:37 - here i will put a seed value like zero
44:41 - now once i put a seed value the result
44:45 - will always be same
44:48 - this is what comes when i run it once
44:51 - this is what comes when i run it twice
44:54 - this is what comes when i write thrice
44:56 - you can see all the times it's
44:59 - generating
45:00 - the same three values now the next step
45:03 - is to
45:04 - create a duplicate entry but my question
45:07 - is
45:08 - do you think this number has any
45:11 - probability
45:12 - to come on this place or on this place
45:17 - these are billions of combinations so
45:19 - the probability of this
45:21 - is almost impossible for that
45:24 - we will use a rounding function let me
45:27 - tell you how that works
45:42 - so in the following example i just added
45:44 - a round function
45:46 - on top of our rand function hence it is
45:49 - rounding the values
45:50 - to the closest zero or one and now there
45:54 - is a hundred percent probability
45:56 - that our value will repeat and there
45:59 - will be a duplicate
46:00 - entry since it will always be 0 1 1.
46:03 - it doesn't matter how many times i try
46:05 - this it will always
46:06 - be 0 1 1.
46:11 - you can see it never changes now that we
46:14 - are able to generate
46:15 - random values which are still controlled
46:18 - by us
46:18 - and we know that is going to create 0 1
46:20 - 1 and this one is a duplicate entry of
46:23 - the above one
46:24 - we can use the group by clause
46:47 - now you can see when i use group by and
46:49 - around rand
46:51 - the results are not three but rather two
46:54 - because this bob is also having the
46:57 - value of 1
46:58 - and alice is also having the value of 1
47:01 - hence they have been grouped together
47:04 - finally to trigger the bug we just need
47:06 - to put
47:07 - having min 0
47:11 - and you can see duplicate entry 1 for
47:14 - the key group key
47:15 - that's the bug another approach which
47:18 - the official guide says instead of
47:20 - putting having min
47:21 - you can put count so the count will come
47:24 - here
47:33 - and if i remove the having thing
47:36 - i will still trigger the bug because bug
47:39 - is coming from count
47:41 - now this may sounds interesting that
47:43 - this count is able to create the bug
47:45 - but it's almost useless when using
47:47 - error-based injections
47:49 - the reason is that most of the times
47:52 - this select
47:53 - something from something statement is
47:55 - locked
47:56 - and we can only modify this part
47:59 - just to give you an example it may be
48:01 - select name
48:02 - from users where name equals sagger
48:06 - and then we can modify the group by
48:08 - round function
48:20 - you can see this is a standard database
48:23 - query
48:24 - select name from users where name equals
48:27 - and we put this name in some search box
48:30 - the problem of this is it is always
48:32 - going to give you one result
48:34 - however we need at least three results
48:36 - for this bug to trigger
48:38 - hence we can put or one equal one
48:42 - to nullify this where statement so
48:45 - think about it select name from users
48:47 - where name equals sagar
48:48 - or one equal one which is always true
48:51 - hence it will select
48:52 - all the names giving the whole table
48:55 - as you can see it dumps the whole table
48:59 - so now we can put our group by rand
49:01 - having min equals zero
49:14 - and this triggers the bug and this is
49:17 - the final
49:18 - output which we want as our payload
49:21 - so i can copy this
49:24 - i can go on this website
49:28 - and you can see it normally takes a
49:30 - parameter called cat
49:36 - when it gives a parameter called cad it
49:39 - comes up with all these images
49:41 - if i give a parameter of cat equals 2
49:45 - you can see it comes up with only one
49:46 - result
49:48 - so let me try to bypass this one cat
49:51 - equals 2
49:52 - since we already have or 1 equal 1 this
49:55 - will bypass the situation of cat and
49:58 - it'll give us all the rows in the table
50:00 - and we'll group them by rand function
50:02 - having min equal zero
50:04 - i'll put a comment here to ignore the
50:06 - other stuff
50:10 - and you can see we get the error
50:12 - duplicate entry one
50:14 - key group key this one
50:17 - is the result of our duplicate entry and
50:19 - it's the result of our rand function
50:22 - which is over here so can we use it to
50:26 - extract data
50:27 - of course let me show you that how we
50:30 - can do it
51:08 - now you can see what i just did is i did
51:10 - a select name
51:12 - round rand and then i did a concat
51:15 - version
51:16 - round ran so the output of round round
51:19 - is 0 1 1
51:21 - which you can see over here 0 1 1
51:24 - and i concatenated this with the version
51:27 - of the
51:27 - application hence you can see since the
51:30 - origin is constant
51:32 - and round rand is changing we still have
51:36 - a perfect duplicate copy of two and
51:38 - three
51:39 - these are perfect duplicates because
51:43 - the version is constant and this part is
51:45 - changing
51:46 - hence in the same way we can concatenate
51:48 - whatever we want and we can extract data
51:51 - a good example here will be
52:09 - you can see we got the database version
52:13 - then we got x which is the database name
52:16 - as you can see over here
52:18 - then we got a root at the left local
52:20 - host which is the user
52:22 - we can even put spaces in between
52:41 - and this will just make it easier for us
52:42 - to identify that this is one thing
52:45 - this is second and this is third and
52:47 - this is finally the rand
52:49 - so i can just take this whole
52:50 - concatenation string here
52:56 - and put it instead of this round run
52:58 - function
53:08 - and we got the version number
53:13 - the database name
53:17 - and the user at direct localhost
53:20 - that is how error based sql injection
53:22 - works and this is how we exfiltrate data
53:24 - through error-based sql injections
53:27 - boolean
53:28 - based sql injection well a boolean
53:31 - is a situation of zero or one which is
53:34 - false or true there will be many cases
53:38 - where you will find these kind of
53:39 - situations it can be a simple
53:42 - login page if your password is correct
53:45 - you will log in
53:46 - if it's wrong you will not so it's 1
53:49 - or 0 or 0 or 1.
53:52 - in this specific example you can see
53:56 - if i try this specific command which is
53:59 - cat equals to and
54:03 - database equals acquired
54:06 - so i am putting a condition here this
54:09 - application
54:10 - may be taking select star from something
54:13 - where cath equals 2
54:15 - which should give me this image what i'm
54:17 - saying
54:18 - and database is equal to acquired
54:21 - so i'm giving it a database name if my
54:24 - database name is correct
54:25 - this application will show me the result
54:28 - as you can see over here
54:30 - however if i change this aqua to account
54:32 - 1
54:33 - which is not the database name it will
54:36 - not show me the result
54:38 - as you can see this is where the boolean
54:41 - injection
54:42 - can be used to get data now
54:45 - how do you get data out of it you can
54:48 - put a lot of conditions here
54:50 - and you can use patterns like like
54:53 - pattern
54:54 - length pattern substring
54:57 - let me show you with examples here
55:02 - i have this table called login
55:10 - this table has an entry which is id1
55:13 - username sagar
55:14 - and password bunsel now a standard query
55:18 - will be
55:19 - select start from login where
55:22 - id equals 1 and this will throw
55:26 - the table if we say id equals 2
55:29 - which doesn't exist in the database
55:32 - it'll say empty set
55:33 - which means it will not show me anything
55:36 - so
55:37 - instead of putting id 2 i can say id1
55:40 - and i know that the statement is true
55:42 - and i can say
55:43 - and database
55:48 - equal sbba which is the name of this
55:51 - specific database
55:52 - and since the statement is true you can
55:54 - see we get the result
55:57 - i can get the result even if the
55:58 - statement of first
56:00 - parameter is wrong
56:03 - if it is where id equals 2 i can use the
56:06 - command
56:07 - or instead of putting and so select star
56:11 - from login where id equals to
56:13 - or database equals spva now
56:16 - database is equal to spva for every
56:18 - single of them
56:20 - hence it shows us the same table so if
56:24 - the statement is false you can use
56:26 - or to get the data if the statement is
56:28 - true you can use and to get the data
56:31 - but the question is how do you get the
56:33 - data how do you know that the database
56:35 - name is sbva it's pretty simple
56:38 - you can use the length function to find
56:40 - the length first of all
56:54 - so i can say select star from login
56:56 - where id equals to or
56:58 - length of the database is equal to one
57:00 - and it says empty set
57:02 - i can try two it again says empty set
57:06 - i can try three it against his empty set
57:08 - but when i try four
57:09 - it gives me the result this tells me
57:12 - that the length of the database is 4.
57:15 - now we have to see what is the first
57:17 - character
57:18 - in this length for that we can use
57:24 - substring
57:35 - we can say select star from login with
57:37 - id equals to
57:38 - or substring of the database function
57:42 - check the first character and only check
57:45 - one character
57:47 - and see if it is a however if we are
57:50 - checking one character and if you are
57:51 - checking the first character
57:53 - it is not a it is s because the database
57:56 - name is sbba
57:58 - if i check s here you can see
58:02 - we get the result so you can brute force
58:04 - from a to z
58:06 - by putting this kind of pattern
58:09 - also you can check for the second
58:11 - character by replacing the first one
58:16 - this will not give me any result but if
58:19 - i change this s to b
58:20 - this time it gives me the result so the
58:23 - first character
58:24 - is s and the second character is p
58:27 - similarly i can try for the third
58:30 - character
58:34 - which is v and i can try for the fourth
58:36 - character
58:39 - which will give me a result on a i can
58:42 - even try combinations so instead of just
58:44 - one character i can try two characters
58:46 - at the same time
58:52 - i'm going to try two characters starting
58:55 - from first which is
58:56 - s and b you can see it gives me the
58:59 - result
59:00 - i can try from second character two
59:04 - characters which should be b
59:05 - and a in sbva so b
59:08 - and a if i try s b it won't give me the
59:12 - result but if i try b and a
59:15 - i'll give me the result well that
59:17 - doesn't works
59:19 - because it is not ba it is bv
59:22 - and you can see sbva
59:26 - i can try the whole database itself
59:29 - by putting one and four which means
59:32 - start from first character and
59:34 - select four characters in the string
59:37 - which is sbva
59:41 - and that gives me the output i can even
59:44 - use the like function here
59:46 - to speed up the process
60:14 - you can see in this command i'm using
60:17 - select stuff on login where id equals 2
60:19 - or
60:20 - database like percent a percent
60:23 - now what this percent means it's a wild
60:26 - card
60:27 - it means check if there is a
60:30 - in the database name it can be at any
60:32 - place
60:33 - so any places before it any places after
60:36 - it
60:37 - you're just checking that i can say
60:40 - check a b
60:43 - that certainly isn't works but if i
60:45 - check
60:47 - v a that gives me the output
60:50 - because s b v a are the last terms
60:54 - i can remove the first percentage if i
60:56 - need to
61:05 - we will make it va but we will not get
61:07 - any result
61:08 - because we are saying see if the
61:11 - database is like
61:12 - va and then something which is wrong
61:15 - because
61:16 - the database is like sbva not va
61:19 - something it's not v a n v a b
61:23 - it's sbba instead i can do is i can
61:26 - replace the last percentage and i can
61:29 - say
61:30 - check if database is like something
61:33 - which ends with va
61:36 - and this gives me the result
61:39 - and that is how you can use the like
61:41 - function to find stuff
61:43 - i can even say s underscore
61:46 - va which means i don't know what will be
61:50 - there in between this
61:51 - but there is just one character which
61:54 - should give me
61:55 - the result or i can just put a
61:57 - percentage when i don't know the number
61:59 - of characters which should again give me
62:00 - the result
62:02 - it's all about pattern matching let's
62:04 - try to do the same thing on the website
62:14 - so cath equals 2 and because we know
62:17 - that cat
62:18 - statement is true
62:31 - the length of the database as 1 which is
62:33 - not true and we don't get any
62:35 - output length of database has two
62:38 - doesn't works length has four
62:42 - doesn't work length has six
62:46 - certainly works because the database
62:48 - name is acquired
62:50 - a c u a r t which is six characters
62:54 - and in this way you can go ahead and try
62:56 - a lot of combinations
62:58 - and try to extract data bit by bit using
63:01 - boolean based sql injections
63:04 - time-based sql injections well there
63:07 - will be certain cases
63:09 - where you will not be able to see any
63:11 - output on the screen
63:13 - it will be the screen which is same in
63:15 - case of a valid statement
63:17 - or an invalid statement in certain cases
63:20 - instead of looking at the output
63:22 - we can look at the time which the server
63:24 - takes to process the request
63:26 - or to send the response in the following
63:30 - case i am trying to ask the server
63:32 - that check if the database name is
63:34 - acquired
63:35 - if it is then sleep for 10 seconds
63:39 - so if i press enter i don't get anything
63:42 - on my screen but you can see the server
63:44 - is taking 10 seconds
63:46 - to give me the response it's sleeping
63:49 - right now
63:50 - and after 10 seconds it'll send some
63:52 - response to me
63:53 - which is again the same page so on my
63:56 - response
63:57 - nothing changes but it took complete 10
63:59 - seconds
64:00 - to show me the page instead if i just
64:03 - put some random name here
64:06 - it'll not take more than two seconds to
64:08 - give me the response
64:09 - that is where i can justify if the
64:12 - statement is true or false
64:14 - just by looking at how much time the
64:16 - server is taking to give me the result
64:19 - just to make it simpler for you i'm
64:22 - going to show you a few examples
64:27 - there is a table called users
64:37 - and you can see in this table there are
64:39 - three users sagar
64:41 - alice and bob however let us assume that
64:45 - we do not have the ability to play with
64:47 - these users
64:48 - every time the output is just these
64:51 - three users
64:53 - what can we do in such case we can use
64:56 - sleep statement
64:57 - by combining it with and select start
65:00 - from users
65:01 - and if and here you will put your sleep
65:05 - statements
65:07 - however please note this depends on
65:10 - product to product
65:11 - in case of this database which is a
65:14 - mariadb implementation of mysql
65:18 - the function works in condition
65:21 - comma true comma false
65:25 - which means you put your condition if
65:28 - the condition is true
65:29 - then this will happen if the condition
65:31 - is false that this will happen
65:34 - so if the condition is false sleep for
65:39 - five seconds if the condition is true
65:45 - sleep for two seconds and the condition
65:49 - is
65:51 - database equals a
65:54 - if i try to run this it throws an error
65:58 - and the error occurs because there is no
66:00 - logical condition in this
66:02 - you see to use time based injections you
66:05 - need a logical condition
66:06 - like where which you cannot control
66:10 - so if the application instead of this is
66:12 - using
66:13 - where name
66:16 - equals sagger
66:21 - now the application is checking for a
66:23 - logic select star from users very name
66:26 - equals sagar
66:27 - this is something which the application
66:29 - is checking it's a logic condition
66:31 - and then we are putting and also check
66:34 - if database equals a
66:36 - then sleep for 2 seconds or 5 seconds
66:39 - this will work and you can see the
66:42 - database is sleeping
66:44 - but how much 2 or 5. you can see
66:47 - it slept for 5 seconds which means
66:49 - database name is not
66:51 - a because it is x
66:54 - so can i show you with the x of course
66:58 - when i do it with the correct database
67:00 - name it sleeps only for 2.002 seconds
67:04 - two seconds because of the sleep
67:06 - function zero zero two seconds to
67:08 - process the request
67:10 - again five seconds because of the sleep
67:12 - function 0.009 seconds
67:15 - to process the request similarly we can
67:18 - use different patterns
67:19 - like length
67:32 - and now we are comparing if the length
67:34 - of the database is
67:36 - 1 or not and in this case the length is
67:39 - 1.
67:39 - if we see if the length is true or not
67:42 - it'll say
67:43 - no because it'll sleep for five seconds
67:46 - giving me
67:48 - the confirmation that the length is not
67:50 - equal to two
67:51 - i can even use a greater than sign here
67:56 - so if length is greater than two then
67:59 - sleep for two seconds
68:00 - if not then slip for five seconds as you
68:03 - can see
68:04 - length is not greater than two it is
68:06 - less than two
68:07 - so i can say length is less than 2
68:11 - and this will sleep only for 2 seconds
68:13 - as you can see
68:15 - so by such techniques you can analyze
68:17 - the time of the database
68:20 - and conclude if a situation is true or
68:22 - false
68:23 - i can even do length calculation here
68:50 - so in this following example i am
68:52 - checking if the length of the database
68:54 - equals 5 then sleep for 5 seconds
68:56 - otherwise sleep for 10 seconds
68:59 - 1 2 and it throws an error
69:02 - let's see what the error is length okay
69:06 - did we did some mistake
69:10 - yes we forgot to close the lens function
69:13 - so let's close it and let's try now 1
69:16 - 2 3 4 5
69:19 - 6 7 8 9
69:22 - 10 11 12 13
69:26 - 14 and maybe i'm counting too fast and
69:29 - it just comes up with the result
69:31 - and you know i can conclude that that
69:33 - was definitely not five seconds
69:35 - however if i try it with a number of six
69:38 - which is actually the length a c
69:40 - u a r t one
69:43 - two three four
69:46 - five so do we get the output yes we get
69:49 - the output right
69:50 - that is kind of how it works let me go
69:52 - ahead and start a stopwatch instead
69:58 - this should be easy
70:01 - so i'm going to say
70:11 - and do we get the result here
70:14 - here we go we got the result in almost
70:16 - four seconds but still
70:18 - because i started it and it took one
70:20 - second to you know come from browser to
70:22 - stopwatch
70:23 - it took one second over there if i do a
70:26 - wrong statement
70:27 - like five
70:31 - and if i reset that
70:35 - and if i press enter
70:38 - then let's see
70:48 - we got the output in 11.51 seconds
70:52 - and assume it was taking somewhere 12
70:55 - seconds because
70:56 - i came from the browser to here this was
70:58 - one more second
70:59 - so roughly 12 seconds instead of 10 so
71:02 - that is the processing time it is taking
71:04 - but it is definitely clear that if the
71:06 - request is true
71:08 - it comes somewhere around five if the
71:10 - request is wrong it comes somewhere
71:12 - around 10
71:13 - because i am giving that in my
71:15 - assumptions
71:16 - right that is how you get to know if it
71:19 - is true or if it is false
71:22 - and just like you use the length
71:23 - function you can use the substring
71:25 - function to calculate
71:26 - the name of the database or to get any
71:29 - kind of information from this database
71:31 - it all depends on how well you
71:33 - understand sql
71:35 - but that is how the time-based sql
71:37 - injections work
71:39 - using semi-automated tools for sql
71:41 - injection
71:42 - well there will be certain situations
71:44 - which will be humanly impossible for you
71:47 - to test thousands and thousands of
71:49 - payloads with
71:51 - think about a login page if you're
71:53 - bypassing a login page
71:55 - and they have used certain filters it
71:58 - will not be easy for you to try
71:59 - all the possible combinations that is
72:02 - where
72:02 - semi-automated tools come into the
72:04 - picture again
72:06 - remember these are just semi-automated
72:09 - they are not fully automated
72:11 - you still need to understand why a skill
72:13 - injection occurs
72:14 - where do they occur how do they occur
72:16 - and what is the reasoning behind
72:18 - everything
72:19 - and accordingly you can use them to
72:21 - automate the heavy lifting
72:24 - one of the tools which i personally like
72:26 - is called burp suite
72:28 - there are alternatives like os zap
72:31 - however
72:31 - burp swede is a good and reputed tool
72:35 - you can download it from portswigger.net
72:38 - just download the community edition and
72:40 - install it it's available for all the
72:42 - operating systems
72:44 - it's a simple next next next install so
72:46 - i will not cover that part
72:48 - in community edition you cannot save the
72:50 - data so you always have to start a
72:52 - temporary project
72:54 - that's fine with us
72:57 - you can start with the default of verbs
72:59 - that's also okay
73:01 - just started and now verb has started
73:05 - now there are many ways to use it
73:07 - everyone has a preference
73:09 - however in these new versions they have
73:12 - started to make a built-in browser
73:14 - if you go to this proxy you will see
73:17 - there's a browser
73:18 - here open browser
73:21 - this is a chromanium browser and it's a
73:23 - specially configured one
73:25 - because it works with burp suite out of
73:27 - the box
73:28 - now here just make sure you do turn off
73:31 - this intercept
73:32 - because you can see it automatically
73:34 - starts capturing a lot of requests
73:36 - and we don't really need this just turn
73:39 - this off
73:40 - now go to your browser and open whatever
73:44 - you want to open
73:45 - so i'll open my target which is
73:47 - localhost
73:49 - and here i'll go to login
73:52 - and here i'll put certain username and
73:55 - password like
73:57 - sagar as username and mypass as
74:00 - password nicely it doesn't really works
74:04 - of course the password was wrong so we
74:06 - were not able to log in
74:08 - that is fine we can go to burp and if
74:11 - you go to http history
74:13 - you will see all the requests that have
74:15 - passed through burp
74:16 - using this specific browser it may be
74:19 - hard to find that request in these much
74:22 - requests
74:23 - so you can go to the target tab and it's
74:25 - the graphical tree view
74:27 - we are using a localhost and we are
74:30 - using
74:30 - login.php it is interesting
74:34 - that this is not the right request
74:36 - however there is one more login.php
74:39 - which has certain percent 20 in that
74:43 - but this is the right request you can
74:45 - see username equals sagar password equal
74:47 - mypass
74:47 - this is what i typed so this is our
74:50 - request
74:51 - again there are two requests login.php
74:53 - login.php
74:55 - 20 something that is fine with us
74:58 - we can send this request to repeater
75:02 - now you can see the repeater highlights
75:06 - and now you can do whatever you want
75:08 - with this request and
75:09 - send it from here and the response will
75:11 - come over in this window
75:14 - so first of all let me try instead of my
75:17 - pass
75:17 - let me try the right password
75:23 - which is bunzo let's try to send it
75:30 - now let's click on render to see how it
75:32 - works in the browser
75:35 - and we were able to log in as you can
75:37 - see login
75:39 - if i use a wrong password
75:45 - we're still able to log in which is
75:47 - interesting the reason behind that is
75:50 - because this website uses cookies once
75:52 - you're logged in
75:53 - the next request which you send doesn't
75:56 - matter is because you have never pressed
75:57 - this logout button
75:59 - so instead of pressing the logout button
76:02 - which is practically not possible
76:04 - since it's just the response i can go
76:06 - ahead and remove this cookie at all
76:09 - once there is no cookie the website
76:11 - doesn't recognize me that i am logged in
76:13 - or not
76:14 - it just processes the request let's try
76:17 - again
76:19 - now i can see i'm not logged in if i
76:22 - type the right password
76:24 - if i press send i am logged in
76:28 - if i again type the wrong password
76:33 - i am not logged in though the request is
76:36 - working fine
76:37 - however i would suggest that you remove
76:40 - these additional characters from it
76:42 - it doesn't really matters and it won't
76:44 - affect your testing
76:46 - but the file name is login.php not
76:49 - login.php and these characters
76:52 - so due to some processing it certainly
76:55 - picks up these characters in the request
76:57 - that is fine you can safely remove them
77:00 - and now this is a perfect post request
77:02 - going to login.php using http 1.1
77:06 - again if you didn't know this if you
77:08 - didn't remove that
77:09 - still the request is working fine and
77:11 - you can use it but i like to be a
77:13 - professional
77:15 - now we know that this request is working
77:17 - so instead of using the right password
77:20 - and username i'm just going to give a
77:22 - invalid username
77:23 - and a invalid password again let's send
77:26 - it once more to confirm
77:28 - it's working fine now we can send this
77:31 - thing to intruder
77:32 - so send to intruder you see the intruder
77:36 - tab highlights
77:37 - i'll go here and it tells me what are
77:40 - you attacking i am attacking localhost
77:42 - that's correct on port 80 that's correct
77:45 - because i'm not using https if i'm using
77:47 - https
77:48 - then i have to put port 443 here or some
77:51 - other port depending on the
77:52 - configurations
77:53 - but since i'm using http so i'll make
77:56 - sure this is untick here
77:58 - now let's go to positions and the great
78:01 - thing about burp is
78:02 - it automatically positions everything
78:05 - you see
78:06 - these things are marked in green and
78:08 - they have been positioned automatically
78:10 - that's the auto mode of burp suite you
78:12 - see the auto here
78:14 - however in certain cases you may want to
78:16 - add something
78:17 - like if i want to add a position myself
78:20 - where i want to do a sql injection
78:22 - i may want to go ahead and select this
78:25 - and i'll say add here and now this is
78:27 - also marked as a position
78:29 - i can clear all of these by pressing the
78:31 - clear button
78:32 - and i can again just say auto to
78:35 - automatically select the right positions
78:38 - which perhaps we does very well there
78:40 - are four modes
78:41 - sniper battery ram pitch fork and
78:44 - cluster bomb
78:45 - all of them have different purposes
78:48 - sniper for instead
78:49 - will try two payloads right it's trying
78:53 - payload number one here which will be my
78:55 - sql injection code here
78:57 - and then my code over here but
79:00 - sniper will do that one by one so for
79:03 - example
79:04 - it will try mysql injection here and
79:07 - keep
79:07 - the password as bansa whatever we have
79:11 - given
79:12 - in the input in the request so it will
79:14 - only change
79:15 - one payload at a time then once that
79:18 - works it will keep this as it is
79:20 - and it will change the password which is
79:22 - the payload two
79:24 - so it will change payload one keep the
79:27 - second as it is
79:28 - then it will keep the first as it is and
79:29 - change the payload to so it's one by one
79:32 - that is what sniper is
79:34 - again all of these four have different
79:36 - purposes battery ram uses both of them
79:38 - together so if i use battery ram
79:40 - it will change both of the payloads at
79:43 - the same time
79:44 - you can study more about this on ports
79:46 - bigger website
79:47 - is irrelevant for this lesson i'll just
79:49 - go with sniper
79:51 - in payloads you can select the position
79:54 - since sniper uses just one position
79:56 - you can use one and there are single
79:59 - list
79:59 - and other stuff here one of them is
80:02 - brute forcer
80:04 - where you can specify a brute forcing
80:06 - combination
80:07 - we can specify a character list minimum
80:09 - length and maximum length
80:11 - but we are not brute forcing a password
80:13 - right
80:14 - technically we are but not through a
80:17 - brute forcer we are doing it through sql
80:19 - injections
80:20 - so instead let's go with a simple list
80:23 - and you can load a list of test cases
80:25 - or you can add a list here now i already
80:29 - have a list so i'll click on load
80:34 - and then load my payloads and you see we
80:36 - have certain payloads in this list
80:39 - you can create your own list that's just
80:41 - a txt file or you can just go ahead and
80:43 - add something
80:44 - like here i can just click on add and
80:46 - that will add it to the list
80:48 - but i'll just stick with my list which i
80:50 - just loaded
80:52 - now there are 10 payloads in my list and
80:54 - since
80:55 - sniper uses one payload at a time for
80:58 - both of the positions there will be 20
81:00 - requests
81:01 - and 21 to be precise because it will
81:04 - even generate a baseline request which
81:06 - will be using both of the parameters
81:09 - that we provided
81:10 - so it will just go ahead and send this
81:12 - request as it is
81:13 - that will be the baseline request you
81:15 - can go ahead and click on start attack
81:19 - and it gives you the warning it's the
81:21 - free version the community one
81:23 - it will be slow that's fine we just have
81:25 - 21 requests
81:27 - now you can see the first one is always
81:28 - the baseline request there is no
81:30 - position used it's like the blank
81:32 - request
81:36 - you see the one which we give
81:39 - and then there are all the payloads that
81:41 - it has tried for the position one it has
81:43 - tried this
81:44 - then for the position to let us try this
81:46 - over here
81:48 - but how do you define which one worked
81:49 - and which one didn't
81:51 - well you may go ahead and see what is
81:53 - the difference in these
81:54 - requests all of them are having the same
81:57 - response code
81:58 - i don't see any error or timeouts but
82:01 - here in length you see all of the
82:03 - lengths are different
82:04 - you can go ahead and click on response
82:07 - and render
82:08 - and you can see what was the response of
82:10 - the request
82:11 - none of these worked
82:16 - however if we see these four thousands
82:19 - you see it has worked so now these four
82:22 - thousand requests are all working
82:25 - but there is much cleaner way to do that
82:28 - i'll just close this
82:30 - and instead there is fourth tab here
82:32 - which is options
82:33 - i'll click on this and options there are
82:36 - many but you can set this
82:38 - grep match option just clear all of
82:41 - these
82:44 - make sure this flag is ticked
82:48 - and add something like welcome
82:52 - press add and now it is set
82:55 - the reason i have added welcome is i
82:58 - want to flag all those requests
83:00 - which have the word welcome
83:03 - so basically when i start this attack
83:06 - now
83:09 - you will see it'll start flagging the
83:11 - requests which have the word welcome
83:13 - just like this one and this one and this
83:16 - one
83:18 - now once the attack is finished which
83:20 - just happened
83:21 - i can go ahead and filter it with the
83:23 - flags
83:24 - so all of these four requests are the
83:27 - one which are resulting in a successful
83:29 - sql injection
83:30 - i can see if i give it a response and
83:33 - render
83:36 - and render this is the word which i just
83:40 - filtered for
83:41 - when there is successful login it says
83:43 - welcome back so i just
83:45 - flagged any response which has welcome
83:48 - word in it
83:48 - that is why we are getting these flags
83:50 - and now you know
83:52 - that these four payloads will work for
83:54 - your sql injections
83:55 - that is how you use semi-automated tools
83:57 - to uplift the hard work
83:59 - and do sql injections
84:03 - using fully automated tools for sql
84:05 - injections
84:06 - well there are certain cases when you
84:09 - have to test an application which has
84:11 - thousands and thousands of pages even
84:13 - semi-automated tools cannot work for you
84:16 - in those cases you may want to run some
84:18 - fully automated tools just like
84:20 - sql map you can go to sqlmap.org
84:23 - and download the zip file once you have
84:26 - the file extract it to any location you
84:28 - want
84:29 - in my case i have extracted this file on
84:32 - my c
84:33 - drive directly
84:38 - here you can see a folder sql map
84:41 - and there are all the files which you
84:43 - get in this
84:45 - zip which you just downloaded now
84:48 - just go ahead open the command prompt or
84:50 - a terminal in case of unix
84:53 - in the same folder
84:56 - and now you can just type python
84:59 - sqlmap dot py
85:03 - since i am using python command make
85:06 - sure
85:06 - python is already installed in your
85:08 - system if not
85:10 - go on google download python and install
85:12 - that you can even do that from microsoft
85:14 - store
85:15 - in case of windows so i assume you can
85:18 - do that
85:19 - let's press enter
85:22 - and you will see it loads sql map and
85:25 - then gives me an error
85:26 - missing mandatory options d-u-l-m-r-g-c
85:31 - and all the other stuff that's all fine
85:34 - just click enter and now
85:37 - instead of sql map just give it an
85:38 - option called dash hh
85:41 - which is extended help
85:44 - as soon as you press that you will see a
85:46 - lot a lot of options which you can use
85:49 - in a skill map to do fully automated sql
85:52 - injections
85:54 - the first one which you need to
85:56 - understand is of course
85:58 - the url there are a lot of options right
86:02 - there you go dash u dash url
86:06 - to give a specific target
86:09 - then the second which you need to
86:11 - understand
86:13 - a minimum one is the risk level
86:16 - where you see the level level of
86:19 - tests to perform one to five and default
86:22 - is one
86:23 - when you want to do complete testing you
86:26 - would use the level five
86:27 - not level one the reason of having these
86:30 - levels is
86:31 - that maybe we just want to test
86:34 - something
86:35 - in a low level and we have a low
86:37 - bandwidth on our database
86:39 - so if we use all the tests we may crash
86:42 - the database
86:43 - same thing applies to risk when you want
86:46 - to keep the risk of crashing the
86:48 - database corrupting the tables
86:50 - and and even getting caught while doing
86:52 - a pen test
86:53 - you don't want to do all of that keep it
86:55 - on one however you can increase it on
86:57 - three
86:58 - if it is a crystal ball test just like
87:00 - we are doing right now
87:02 - there are many other options you can
87:04 - even choose the technique
87:05 - which is dash test technique and you can
87:08 - choose between all the techniques
87:10 - like a boolean based injection error
87:12 - based injection
87:13 - union based injection etc etc
87:19 - other options are also here you can
87:21 - extract data
87:22 - if you want using database
87:26 - table column user to select the things
87:30 - and dash does dbs dash dash tables
87:33 - dash dash columns and dump to extract
87:37 - the data
87:39 - let me show you an example here in
87:41 - practice
87:45 - so i'll go ahead and use dash u
87:48 - http localhost slash
87:52 - login dot php
87:56 - and i'll give it a risk rating of three
88:01 - and level as 5.
88:07 - let's press enter now you can see you
88:10 - have not declared cookies
88:12 - while server wants to set it on cookie
88:15 - this one
88:16 - so do you want to continue yes that's
88:18 - fine we can take this cookie
88:24 - nice testing sql injection ore based you
88:27 - see
88:27 - boolean based actions are being tested
88:29 - first
88:30 - then once it is done with boolean it
88:32 - will start with some other
88:34 - tests like from union based so it's
88:36 - going to do all the testing for us
88:38 - automatically
88:41 - as testing is the mysql is less than
88:43 - this more than this
88:45 - using boolean and postgresql says
88:47 - testing the version of the database
88:49 - right now
88:50 - it's going to take some time let's leave
88:51 - it till then and you can see it is
88:53 - asking us
88:54 - it is recommended to perform only basic
88:57 - union tests if there is not at least one
89:00 - parameter one potential other technique
89:03 - found
89:04 - do you want to reduce the number of
89:05 - requests well this is going to reduce
89:07 - the number of tests which we are doing
89:10 - by reducing the number of level and in
89:12 - this case i'm going to allow this
89:14 - because i don't want to wait for such a
89:16 - long time when i know there is any skill
89:18 - injection
89:19 - in a real life situation you may not
89:21 - want to allow this and reduce the number
89:23 - of your tests
89:25 - now you can see a skill map ends up with
89:28 - an error
89:29 - saying nothing is injectable it was not
89:32 - able to find any skill injections
89:34 - with our current setup that is fine it
89:37 - happens
89:38 - there are many things which you can do
89:40 - to fix it you can provide
89:42 - it with the fields to inject so if i
89:45 - show you the help again
89:47 - you will see there are certain fields
89:49 - which you can inject by putting
89:51 - dash dash data
89:54 - so let me see where they are here you go
89:58 - dash data you can tell it that go ahead
90:01 - and inject it in this
90:02 - specific field by selecting dash data
90:05 - this can be complicated for some people
90:07 - who do not know html css javascript
90:11 - because you will have to find which
90:12 - field are we injecting the data in
90:15 - in our case we are injecting the data
90:18 - in these fields username and password
90:21 - but you need to know the name of these
90:22 - fields so you may have to inspect the
90:24 - element
90:25 - and you may have to find that in this
90:27 - html or
90:29 - you may want to intercept the request
90:30 - and find it there
90:32 - an easy version will be just use burp
90:34 - suite
90:36 - go ahead and start a temporary project
90:42 - open your proxy start your browser
90:48 - go to localhost
90:52 - go to login and here
90:56 - go ahead and give it something like
90:58 - sagar sagar1
91:03 - i don't need the browser now i will go
91:06 - to http history
91:07 - or in the target and i'll take this
91:11 - request
91:12 - send it to repeater
91:17 - and i'll just clean this request a
91:18 - little bit because these characters may
91:20 - cause problems
91:23 - so this is login.php request which is
91:26 - taking two parameters
91:28 - this one and this one instead of these
91:30 - parameters press a
91:31 - asterisk sign
91:35 - now once you add this ester is sign this
91:37 - is called sql map payload marking
91:40 - now i can just save this to a file
91:49 - i'll save it in my c drive in my sql map
91:53 - the same directory where i'm running it
91:55 - i'll save it for example any name like
91:57 - request
91:58 - dot txt and this is save
92:03 - i'll close the burp suite i don't need
92:05 - it now
92:08 - and if you go ahead and run this
92:11 - this time
92:15 - instead of giving it a url you can
92:18 - specify the request file you created by
92:20 - dash
92:20 - r request.txt
92:30 - and you can go ahead and give it the
92:31 - levels and risk let's go with the
92:33 - default this time
92:34 - because that will be faster
92:38 - and it'll say custom injection marker
92:41 - found
92:42 - do you want to process it of course
92:44 - that's why we created it
92:47 - and it says redirecting to this do you
92:49 - want to do that
92:50 - yes we want to use http localhost bird
92:53 - at login.php yes that's what we are
92:56 - testing
92:59 - the result is a post request do you want
93:01 - to resend the original post data in the
93:02 - new location
93:04 - yes we want to send the original data in
93:06 - this new location
93:07 - which is login.php
93:11 - okay it looks like the backend database
93:13 - is mysql
93:15 - wow it just found that right do you want
93:17 - to skip testing payloads for specific
93:19 - other databases
93:20 - of course we don't want to test others
93:22 - because if it is mysql
93:23 - then yes let's just test for mysql
93:28 - for the remaining test do you want to
93:29 - include all the tests for mysql
93:31 - extending the level one and the risk one
93:34 - well you can do that in this case i'm
93:36 - skipping it to make sure
93:38 - we complete this lecture on time
93:42 - let's see if it gets us the result this
93:44 - time
93:47 - now you can see over here custom post
93:49 - parameter number one
93:51 - so the number one marker which we put in
93:53 - the user name
93:54 - it is testing that right now and it says
93:57 - post parameter number one is vulnerable
94:00 - you want to keep testing others
94:02 - you know in the life situation you can
94:04 - test it and the second parameter is also
94:06 - vulnerable in our case
94:07 - but i'm going to skip it right now
94:09 - because i found a one parameter so
94:11 - that's all good
94:13 - now these were the payloads that it has
94:15 - used for
94:16 - number one you can see user name and
94:19 - then a single quotes
94:21 - and then select something something
94:23 - something we are something
94:24 - sub select something from sub select
94:26 - count it's a long payload
94:28 - i don't think i would be ever able to
94:30 - write this kind of complex payload from
94:32 - my hand
94:33 - and that's where the automated s
94:35 - conjections really stands out
94:38 - you can copy this as it is and take it
94:41 - and find whatever data you want
94:43 - in the real website or you can use a
94:45 - skill map to do that work for you as
94:47 - well
94:47 - so this time i'll say you know what find
94:49 - me the databases
94:51 - dbs it'll find me the databases this
94:54 - time
94:54 - and say do you want to use the marker
94:56 - yes i want to use the marker
94:59 - and we gotta redirect that's fine yes
95:01 - use the data
95:03 - and now it'll just give me the databases
95:05 - because
95:06 - it knows that the first parameter is
95:09 - vulnerable
95:09 - it has already saved all the data and
95:12 - here are all the databases
95:14 - i can find let's see i can select the
95:15 - database sbba
95:17 - and i can find the tables
95:26 - again yes yes yes
95:29 - and you see we got the tables and these
95:31 - are the payloads that it is using
95:33 - starting from here ending here again
95:36 - super complex stuff
95:37 - i cannot write that now let's select the
95:40 - table
95:42 - let's say login
95:45 - and let's say you can find the columns
95:47 - but i'll just dump it as it is
95:52 - so yes yes yes
95:56 - and here we go we just dumped the whole
95:57 - table as it does instead of finding one
96:00 - column at a time
96:01 - item the whole table if you want to find
96:03 - the columns also you could have done
96:04 - that
96:05 - by pushing dash dash
96:08 - columns
96:12 - and then it'll just you know go ahead
96:13 - and find each column for you
96:15 - okay invalid character c-o-l-u-m-n-s
96:26 - there you go now it finds the columns
96:28 - and you can select a column and dump
96:30 - that so you know really depends like
96:33 - dash
96:33 - c and you know like id and dash dash
96:36 - dump
96:37 - so in this case it'll only dump the
96:39 - column or you can just dump the whole
96:41 - table by just
96:42 - ignoring this column thing and just say
96:44 - dump over here itself
96:45 - so it really depends you know if the
96:47 - table is too big you may want to do
96:49 - column wise
96:53 - and here this will only dump the first
96:55 - column as i said
96:57 - but again you can always dump the whole
96:58 - table no need to dump
97:00 - column wise if you know that the table
97:03 - is
97:04 - small so that is how you use
97:07 - sql map to do automated sql injections
97:11 - defending sql injections is not an easy
97:13 - task that is the reason this old
97:15 - technique
97:16 - is still prevalent in the market there
97:19 - are so many websites
97:20 - which daily get attacked due to a skill
97:22 - injection
97:23 - there are many methods to do that most
97:26 - of the security practitioners will go
97:27 - with code sanitization
97:29 - which will include things like input
97:31 - validation parameterized queries
97:34 - stored procedures escaping avoiding
97:36 - administrative privileges
97:37 - those kind of secure coding practices
97:40 - since this is not a coding course i will
97:43 - not cover
97:44 - how all of these actually works i can
97:47 - give you a reference
97:48 - to ptsecurity.com and they have a really
97:50 - good guide explaining
97:52 - how to securely code all of these things
97:54 - which i just mentioned
97:56 - you can see input validation they talk
97:59 - about it
97:59 - and the code which you have to put and
98:01 - how do you have to put that
98:02 - parameterized queries the code and how
98:05 - you have to put that
98:06 - however i will tell you my specific
98:09 - approach
98:10 - which is also one of the best industry
98:12 - practices
98:13 - instead of just focusing on the code and
98:16 - focusing on the development side
98:18 - you should focus on a multi-layer
98:20 - defense
98:21 - now the multi-layer defense works in
98:24 - minimum of three different layers
98:26 - the first layer of course is the one
98:28 - which you see right now which is the
98:29 - code
98:30 - all of these techniques you put that you
98:32 - do secure recording
98:33 - that is your multi-layer defense layer
98:35 - one secure coding practices
98:38 - layer two is including a web application
98:41 - firewall this is a vaf which runs on
98:44 - wordpress cms
98:46 - you can scroll down and i'll show you
98:48 - all the available attacks which you are
98:49 - defending against
98:51 - in my case sql injection is set on
98:54 - enable mode
98:55 - so this valve is going to stop any sql
98:57 - injection attack
98:58 - that occurs on my website let me show
99:01 - you my logs
99:02 - which will reveal a lot of ips who have
99:04 - been attacking my site
99:05 - every single second you can see there
99:09 - are
99:09 - number of ips and this is the current
99:12 - date
99:12 - and i believe it's like eight minutes
99:14 - ago someone got blocked
99:16 - 10 minutes ago someone got blocked 10
99:18 - minutes ago 12 minutes ago
99:20 - 14 minutes ago this happens when you
99:22 - have a huge website
99:24 - and actually a network of websites just
99:26 - like mine
99:27 - so all of these are being blocked due to
99:29 - certain reasons
99:30 - and the vaf is protecting that well
99:33 - that's your second layer of defense
99:35 - the third layer of defense is having a
99:37 - vaf placed on the edge
99:39 - which is normally the dns in this case i
99:42 - use
99:42 - cloudflare on cloudflare you can add a
99:45 - new site by clicking on this button
99:47 - and configuring the dns and in this
99:51 - i will open my site
99:54 - here i can go on firewall
99:57 - and i can go and manage rules now again
100:00 - this web application firewall is a paid
100:03 - product
100:04 - it's not available in the free version
100:06 - but i'm still showing you because that's
100:08 - how you have to do it in the real
100:09 - industry
100:10 - i can go ahead and see these rule sets
100:12 - and you can see i have selected some of
100:14 - them which applies on me
100:17 - so because my website runs on php i have
100:20 - applied this rule
100:22 - and you can see over here all of these
100:23 - rules are being protected against
100:26 - then i have applied wordpress specific
100:30 - configurations
100:31 - which are all of these rules being
100:33 - applied on my website similarly there
100:36 - are flash rules
100:37 - and there are other stuffs as well you
100:40 - can see it goes on and on and on
100:43 - this is how you protect a device in a
100:44 - multi-layer defense
100:46 - there are many more layers you can add
100:48 - you can add an intrusion detection
100:50 - system intrusion prevention system an
100:52 - application delivery controller
100:54 - a security orchestration automation
100:56 - response system a managed monitor
100:58 - automation response system
100:59 - and much more depending upon how much
101:01 - your organization is ready to spend
101:03 - and what level of security you are
101:05 - looking for let me show you an example
101:08 - i'm going to go on my website
101:14 - and go to the search and i will search
101:17 - sagar
101:18 - quotes or one equals one and comment
101:21 - and let's see what happens here you go i
101:23 - just got blocked by cloudflare which is
101:25 - sitting on the edge side of my server
101:27 - it doesn't even crosses this layer let's
101:30 - say someone was able to bypass this
101:32 - they will have to face word fence and if
101:34 - they were able to bypass that
101:35 - then my secure coding will stop the
101:38 - attacks
101:39 - so i may even survive an attack where my
101:41 - code is vulnerable
101:43 - but if i have the right security devices
101:45 - placed then also majority of hackers
101:47 - won't be able to exploit anything
101:49 - and that is how you protect against sql
101:52 - injection attacks
102:00 - you

Cleaned transcript:

let's see what you're going to cover in this course so there are five sections in which this course has been divided in the fundamentals the basics attack techniques the industry tools and defending sqli in fundamentals i'll cover the what when where why and how of sql injections and i'll show you the lab setup that you will need for this course the basics will cover the basics of sql again it's not basic sql injection it's basic of sql and then types of sql injection after that we'll move on to the attack techniques where i'll show you various adapt techniques that you can implement in this world and it's completely handson finally i'll show you how to use industry specific tools to use sql injections and to leverage them efficiently and effectively and we'll wrap up this with the lecture on defending sql injections where i'll show you the best practices that you should be following and again i'm not a programmer so don't worry i'll not show you the coding practices i'll show you what the real stuff is let me go ahead and quickly introduce myself experience wise i worked with multiple fortune 500 companies and government bodies on highly complex and confidential projects saving them over 25 million dollars every year last year we saved over 72 million dollars if we combine everything i have authored multiple international bestselling programs as well as i am the author of the book called penta secrets which is an amazon's global bestseller i have trained over 35 000 cso's who are today leading the world's infosec economy i hold the ccso lpt master ecsa ceh chfi cei as some of my ec council credentials i have been a former board member for ces governance board for india middle east and africa region and kvm board members of ec council in asia pacific region my core expertise is in managing doubleblind penetration tests which are budgeted at least hundred thousand dollars or above here's the disclaimer sagar bunsel sagar pencil group of companies our partners ad affiliates youtube its partners and affiliates are not responsible for any of the actions you take after completing this course or watching this video any numbers claimed within this video are for reference purposes only any trademarks used in this video are the intellectual property of their respective owners and the video contains professional penetration testing knowledge and everything has been done in a controlled simulated environment what are sql injections and why do they occur it's an interesting question because sql injection is one of the top 10 vulnerabilities as per or wasp and it's been there for years and still we see it let me tell you a story before i get started so this year in february we bought this car on my birthday now it's a mercedesbenz cclass and there is no bench showroom in my city so we had to take the delivery from another city however when we were taking it out of showroom there was a checkpoint on the checkpoint there was a camera which scans the number plate of the car on the number plate it scans that number and compares that number in the database and if the car is involved in some kind of fraud or if there is some ticket pending or if there is some criminal charges it will not open however we just bought this card five minutes ago it doesn't even has a number plate that was completely blank now here i have two options i could even wait there for a whole day get a number plate maybe a temporary one and then pass through the checkpoint or what i did is i wrote the special characters which is sagar single quote or one equals one now this is a special query when you put this in any database it will always return true and the checkpoint compared this thing in the database and checkpoint said yeah allow this color and it just opened and i took my curve and that's how i passed that checkpoint by putting in a scale injection now let me explain how the statement bypasses any checkpoint you see think about a login page how does a login page looks like there is a username there is a password and there is a login button right at the front end but think about the back end in the back end there is a lot of code as you can see on your screen right now you don't need to learn coding but try to focus on that red part of the code that is the code which is responsible to check if your password and username is true or not let me make it more easier so this is the simplified version of the core in this code it's asking select start from login where username equals something password equals something so there is the field username there is the field password in a login form you fill these fields and it goes to the database and it checks hey is there any user in the login table which has the username of sagar and password as pencil if there is it will return a result if there is not it will not return result so the parameter here we can choose any of these let's say password this is the expected input password equals x y z but a hacker like me will not give x y z i will give x single chord y z now do you see what just happened here that x was supposed to be closing with xyz and then that single quote however i just added a single quote and now i have two statements password equals x and then there is another statement which is y z and single court now once i am able to do that i can write an exploit like select star from login where username equals sagar and password equal x or one equals one so the system will check okay is there any user which is sagger and is the password x or just check if 1 is equal to 1 which is always true that is a tautology 1 is always equal to 1 which means that the result will be true and it will return a true statement and i will be able to log in this is the reason sql injection occurs when you are able to control the database put some data and manipulate it according to your wish that's a skill injection becomes so deadly of course we'll be talking about how to make these queries how to write this code in later lectures but this is the concept that is how sql injection works this is the reason of sql injections to exist when user is able to give certain data and control the database with that data that is where sql injection comes into the picture in this lecture we will go ahead and configure our lab which will be using for this course for that i want to download xampp for windows if you're using linux then download them for linux or if you're using os x then use xampp for osx the php version which i would recommend should be 7.2.33 just go ahead download this and install it's a simple next next next install so i'll not show that right now once you have installed this just go ahead and search for xampp control panel that is the software which you will use to control this now here you have apache which is your web server in mysql which will be using as a database so go ahead and start both of these processes once you're done with that you can close this window you don't need it and now go to your installation folder of sam in my case that's installed in c drive here you'll find mysql in mysql you have something called bin and here you have all the files for mysql open the command prompt or a terminal window in this location and type mysql dash u space root we want to log in as root and there is no password by default once you do that you will be able to log into the database now here you have to create a database so say create database and give it a name the name should be spva once you do that it should say ok query one row affected you can show databases query to see if the database exists or not once this is done you can close the terminal and now you need the web application you can download this web application from my website sagrobinso.com here you can go to sbva which is sagar princess vulnerable application and you can click on download now to download this application this is the spva folder let's open it copy everything again go to your xampp installation folder this time find a folder called httpdocs this one by default if there are some files in this folder delete everything that's all good if this folder is empty just go ahead and paste this it's the same thing you delete it make it empty and paste all the files which you downloaded from my website now once this is done you just need to go ahead and open in your browser localhost slash setup.php once you do that the application will be ready to install you don't have to do any other configuration you can go ahead click on this login page and try to exploit this login page that is how you set up this environment however in this course i will also be using an online application called test php once you search test php on google it'll say home of acunetix r this website is owned by a kinetics company and it's a testing website as you can see testphp.worldweb.com on this website there is browse categories in that there is paintings this sometimes gives you an error because someone else in some other country is trying to hack this website as this is made for hacking that's all good just refresh the website it will load eventually and this is the page which we will be exploiting in the course so this page and sbba application both of the things that makes up our lab the basics of mysql it's really important for you to understand basics of writing sql queries of course i will not be teaching you all the sql language in one shot and of course it's not an advanced sql class but you need to know very basic language so that you can use them to understand the sql injection queries for that i need you to log into your mysql console now the first command is show databases which will give you all the databases that you have next event is create databases and you can create any database in this case i'm creating a database called x and you see query one row effector if you run the show database again you will see you got a new database next command is to select the database so you say use and the database name which is use x now we are in the x which is determined by this column here now let's see if there is any table in this show tables for that however it's an empty set because there is no table let's create and table them so i'm going to create a table called users now the reason i have these braces here is because i will be putting what kind of data will be stored in this users the data will be first of all name now the name is the name of the column okay that's the name of the column where the data will be stored but what type of data there are certain types in sql and it depends on the product that you're using in my case i'm using mario db implementation of sql so the type which i have to use is wirecare and in wirecare i have to tell it how many characters the name can be let's go 100 characters so someone can type a name which will be stored in the name which will be of varchar type which is characters and that'll be 100 characters let's press enter and you see query okay zero rows affected let me show you the tables now you can see we got a table called users if i select everything from users by using the select query where star means everything so select everything that's there in the user show me everything that's there in the users you will see it says empty set however i can go ahead and add something here by putting insert into values so i can use insert into table name which is users i can insert into this users table values and i need to give the values since i only have one column which is name i'll give the values here if i'm using name i have to use double cards and i can give a name like sagger i can press enter and you see one row affected if i do select star you will see there is a column name and there is a value which is in server similarly i can add more users by using the same query and saying second user as alice and third user as bob and if we try to see the users and you can see there are three records which are these which are in the column of name which are in the table of users which are in the database called x i can delete some stuff let's say the whole database by saying drop database x you can do the same for tables as well drop table and the table name as soon as i do drop database x you can see it says none here and there is no database now so if i just show you the databases you can see we don't have x anymore that's how you delete the database now there are three functions that i want to explain the function of user so i can say select user you can see it gives us the output of user running on the server so we are running this as root there is another function called version which is going to give us the version number of the database and there is another function called database which will throw us null because we are not using any database however if an application is using a database like uses pva now my application is using sbba database if i do select database you will see that it gives the database as the result so these three functions can be really helpful while gathering data in sql injections this is the core basic that you need to understand there are many things like ore and where order by group by but this is not an sql class though i will be explaining all of these things in the course whenever i can but you can always use google as your friend the classic injection bypass well the classic injection bypass can occur at any place for this example i will be using an application that i developed it's called spva sagger benzel's one rebel application so you can go to this login page and this is the place where i'll show you how to do a classic injection bypass because this is the easiest to understand now it's a simple login page if i do anything like admin admin which is a wrong username and password it will not throw any error and not even say that the username is wrong or the password is wrong it's completely disabled with the errors however if i use a correct username which is sagger and if i use a correct password which is bunsel i'll go ahead and log me in and you can see now i can log out and this is the place where i'll try to do a classic ejection bypass first of all we need to understand how the code of this application is working to make it easy for you let me show you the command line and i'm going to show you the tables here there are two tables we will use login table i can see in the login table there are just three entries id username password id is one username is sagar password is pencil now what do you think the backend of that website is using as php the query might be select start from login where username equals sagar and password equals pencil let me show you how so this might be the query that the website is using select start from login your username equals sagar now you control this sagger by putting it in the website over here in username field and you also control this bundle by putting it again in this field which is password field the ability to be able to control these fields which are being directly used as an input in an sql query is very dangerous and that is where you can do a classic injection bypass let's look at it carefully since i am the one who controls what i will put in the sagar can i not go ahead and put s a g in a double cards space now do you see what just happened i just created sag as the variable and i have got the ability to write some code here and this all is an additional thing it was not supposed to exist right this was never supposed to exist it was supposed to be and here well i just break this double quotes by putting a double quotes and that's where the classic injection bypass works so instead of this thing i may put sagger and a double quotes to break and then or one equals one which is basically that check if username is sagar or one equals one that is a classic injection bypass however there is a small problem in this this cork is never supposed to be here and this code is never supposed to be here in such a case we may go ahead and utilize this court by putting one code here one here and one here and similarly we may use it by putting it one here one here and one here now this is a perfect sql statement select start from login where username equals sagger or one equals one and password equals bunsel or one equals one so basically i can go ahead and press enter and this will work however even if i give it a wrong username and password like admin this time this will still work because the statement of where clause is being nullified by the statement of or clause in both of the cases this password and this username doesn't matters until 1 is equal to 1 and this will always be equal to 1 because this is a tautology so that is how you do an sql injection bypass there are many other ways to do that maybe you cannot put these double quotes in certain situations then how do you do that so for an example if you're breaking it from here and you're typing or one equals one then you may want to go ahead and remove the whole part from here by commenting it out comments in sql depends on the product in mysql you can use a hash sign or a minus minus sign or minus minus space minus sign or a slash asterisk sign there are many ways to comments and some will work some will not work so you have to try all of them let's try with hash as soon as i press hash all of the preceding code will be marked as a comment so my query is select start from login where username equals sagar or one equals one that's it everything else is being ignored now let me try to press enter and let's see this works and here you go it's asking you for a semicolon because the semicolon is getting ignored so there should be a semicolon before this comment sign i'm going to press this i'll work however a good query will be putting a semicolon over here before this sql sign and i see it works perfectly so i can go ahead and try another type of comment like minus minus that works as well i may try minus minus space minus in certain cases minus minus doesn't works so minus minus space minus may work however here you may say that you know what this is just getting commented out so it doesn't matter whatever i press here and you know i can even write this thing it will all get commented out however as i said in certain cases minus minus doesn't works minus minus space minus vertex so you may want to keep that in mind it works i may want to try with a with a slash asterisk this also works and here you can see suddenly something has changed in my database and it doesn't looks correct so it is asking me for a star slash you know to close the comment it's a multiline comment you can comment multiple lines by writing slash asterisk and then asterisk slash to close the comment and it'll keep asking me for it until i close it now i am back in my database console so we will not close it because if we close it then this statement will not get commented out hence in certain cases we just keep it open and the system automatically ignores this part sometimes this one is risky but works now that you know how it's working let's go ahead and try to bypass the website itself so i will put a username it double quotes or one equals one and then a hash sign i will copy the same thing and put it in password though it doesn't matter so we're just commenting out the rest of the thing oh we just forgot a semicolon here now let's try the login well that didn't work what just happened let me tell you one thing in certain cases this double quotes can be replaced by single quotes it completely depends on what the developer has decided to use so in this case the website is not using a double quote the website is using a single code which is a common practice so the website is using the single quotes instead of double hence to break out from it i need to put a single quote here not a double quote and then i can press or one equals one so in the website i will put a single code here not a double and now i can press login and you can see i was able to log in without putting any password that is how a classic injection bypass works types of sql injection there are multiple types of sql injections which you should be aware of because depending upon the target and the situation you may have to switch between one type and another there are two major categories of vascular injections first one is inband sql injection and second is inferential scale injection imbalance conjunction occurs when you are able to get the response from the website it can be some data or it can be some error so think about a database a database containing a lot of paintings you are able to get those paintings depending upon your searches you're searching for painting which has an id of one which has an id of two which has an id of three or you're searching that on the basis of price any painting which is costing less than five thousand dollars any painting which is worth more than twenty thousand dollars depending upon this you'll be getting some data from the database those are data based sql injections there you can use a technique called union based sql injection technique where you will use the union command of sql i know it's being a little confusing don't worry i'll be explaining what is union and how to do that in a whole separate lecture but just understand when you are able to get data from the application you will most probably go with the union based technique the second one is errorbased injection in certain website you might have seen that when you do a search or you click on a button it sometimes throws an error that error is coming because there is some problem in the database and when we are able to take advantage of the errors to inject our sql that is where we use the error based injection techniques again i'll have a separate lecture on this so till now you understood that there are two categories inband sql injections and inferential skill injections in inband you have the database technique called union based injection and the errorbased technique called errorbased injection now coming on the inferential injection in certain cases you will not get the error neither the data there you have to analyze the behavior of the application either you are logging in or you are not logging in it's not throwing any error that password is wrong username is wrong it's not giving you an error it's just letting you log in or you're not able to log in that's where you analyze the behavior am i able to log in that is a true statement is it not allowing me to log in that is a false statement this true and false is called as boolean injection technique similarly you can observe the time taken by the server when you request a page it may take five seconds to open that whole page in certain cases it may take 20 seconds to open the same page that is where you can analyze the time taken by the server to process some requests and that is known as the time based injection techniques so as a recap in inferential we do not rely on data or errors rather than the behavior of the application either we will get true or false behavior which will lead to the boolean injection technique or we'll get some time differentiations which will lead to timebased injection techniques well there even exists a third type of technique which is called as outofband injections the reason i'm not discussing this and we will not even be covering this in the course is that out of band is a very rare situation it is not even applicable in every sql product for an example this normally is found on databases which are from a brand called oracle there is a special package in that called utl underscore http with which we can get the response in our netcat listener so you can set up a netcat listener and you can get response of your queries in your listener it's highly rare situation and will not fit the scope of this course that's the reason we will ignore out of the ban but in a nutshell out of bad skill injections are the injections which do not occur on the application rather in the background they occur somewhere else like a netcat listener being hosted by you so these are the three categories of sql injections and we will be covering the first two in the following lectures in detail union based sql injection well a union based sql injection occurs when we are able to use the union operator to combine the output of two select statements as you can see in the following screen this first image which has some lot of some text and has an author name with a link and actually an image is the result of the website's default code however i was able to create a virtual image which you can see right here which doesn't exist which has a name as the database user instead of the description it has the database itself and instead of the painter name it has the version information of the database so i was able to create a virtual row and extract data to that seems complicated right let me make it easy for you i have two tables in this database first one is login if we see the login table there are three columns id username password ids one username is sagar password is sponsor just wondercore now if i use union operator and i try to combine one two three i will be able to combine another row which has the value one two three let me show you how that works as you can see i just typed select star from login union select one two three and there is certainly another row which has the value one two three this will only work when you are giving the exact number of columns if i try to give only one and two it'll throw an error because the third column will not have a value to put in as you can see when i try to give only select 1 and 2 it says the select statement have a different number of columns so it should always be the same number of columns which are putting here now i can go ahead and extract data instead of three i can put version and i'll throw up the version number instead of one i can put username i'll throw the user instead of one i can put the database i'll throw the database name seems easy right so i can just copy this thing and take it to this website and run it and it will work will it well no it won't it'll throw an error let me show you what you can see it says the select statement has different number of columns you cannot expect them using three number of columns right so they might be using four columns or five columns or six columns there are two ways to find columns first is brute forcing where you can try select one that doesn't works then you can try select one and two that also doesn't work and you can then try select one two three that will also not work but this method may take a lot of time hence we can use an efficient method which is order by clause instead of putting select statement i can put order by and i can say order by 20 and it says unknown column 20 in order clause this means that the number of column is less than 20. if i try 10 now it works which means the number of columns is either 10 or more than 10. so now i know they are in the range of 10 to 20. i can use a middle range which is 15 and that throws an error so unknown column 15 it means our columns are in between the range of 10 and 15. now i can put 13. it still throws an error which means our number of columns is either 10 11 or 12. i can put 11 that works so either 11 or 12. well 12 throws another which means the number of columns in this application are 11 which gives us the output so i can say now select 1 2 3 4 5 6 7 8 9 10 11. now you can see it creates a virtual table but point to understand here is not every column is accessible i can see 7 here i can see 2 here i can see 9 here so i can extract information through column number 7 through column number 2 and through column number 9. these are three columns where i'm getting the information hence i can put my database let's say in column number two in column number seven i can put the user and in column number nine i can put diversion and you can see we were successfully able to find the username the database name and the version can we take it forward of course you can find any information that you like can you find other database yes it depends on how deep you understand sql language so in order to find all the databases there is a special table called information schemas kimata you can find that using this there is a column called schema name in a table called schemata in a database called information schema as you can see here the first database is always information schema which contains this table schemata which has a table column called schema name which has all of these entries so if you query schema name from information schema dot it'll show you all the databases can i take this thing from here and can i put it on the website and now you can see we got first database information schema second database acquired and there are no other entries which means this specific website only has two databases information schema and acquired i can go on and on with multiple examples just to give you one more example on how to find the table names so the query for that will be select table name from information schema.tables where table schema equals x where x is the database which you want to find in this case i found the x where there is just one table called users can i take the same thing and put it on the website of course as you can see i just found the table names the query i used was table name from information schema.table where table schema equals acquired because i wanted to find the tables in the database called acquired and the table names are artists cards k tech feature guest book and so on there is an interesting function that you can use here which is group concat now when you use this function called group can cad and in that i am asking for table name you can see it doesn't gives me a lot of results it just groups all of them together over here painted by artists cats catac feature guest book pictures products users so everything in one line super clean stuff and that's how you do unionbased sql injections errorbased sql injection well an errorbased sql injection occurs when you are able to trigger certain bug in the product which leads to some errors and you have the ability to control those errors to extract data in the following screen you can see that i was able to create an error which is about a duplicate entry in the group key but in this error you can see i was also able to extract the version number of the database the database name and the user of the database this is what an error based skill injection is all about now as i just said this depends on the product and a bug in that product you can see that this version is 5.1.7 let me show you a page here you can see 5.7 so i'm using a much older version on that website however this bug id 82544 this bug is valid in all the latest versions in 2020 as well it was published in 2016 but even after four years this has not been patched and looking at the history i don't think so it's going to be patched soon so the bug is about a duplicate entry in the group key while doing a group by clause if you go ahead and scroll down you will see that you can create this error by selecting something counting it concatenating the stuff with rand function concatenating with floor function from certain table and grouping it by some value sounds complicated right don't worry i'll break all of this for you so i'm going to show you all of this in my test environment i do have the following databases i will use x for this specific test there is just one table in this database called users in this specific table there is one column called name and there are three rows sagar alice paul now this error occurs when we are able to associate a random pattern for that the first step is to associate a random value for each of the results to do that we use the rand function as you can see when i select this column which is name it returns three rows but i also selected a random function which is creating three random values in front of these since it is a random function anytime i create this again and again it will create all new values you can see when i type this again all the values have changed if i type it once more all the values have changed again these values are completely generated random and they will range from 0 to 1. the next step to trigger this bug is to control the output of the random function but i just told you it's completely random you can use a seed value here i will put a seed value like zero now once i put a seed value the result will always be same this is what comes when i run it once this is what comes when i run it twice this is what comes when i write thrice you can see all the times it's generating the same three values now the next step is to create a duplicate entry but my question is do you think this number has any probability to come on this place or on this place these are billions of combinations so the probability of this is almost impossible for that we will use a rounding function let me tell you how that works so in the following example i just added a round function on top of our rand function hence it is rounding the values to the closest zero or one and now there is a hundred percent probability that our value will repeat and there will be a duplicate entry since it will always be 0 1 1. it doesn't matter how many times i try this it will always be 0 1 1. you can see it never changes now that we are able to generate random values which are still controlled by us and we know that is going to create 0 1 1 and this one is a duplicate entry of the above one we can use the group by clause now you can see when i use group by and around rand the results are not three but rather two because this bob is also having the value of 1 and alice is also having the value of 1 hence they have been grouped together finally to trigger the bug we just need to put having min 0 and you can see duplicate entry 1 for the key group key that's the bug another approach which the official guide says instead of putting having min you can put count so the count will come here and if i remove the having thing i will still trigger the bug because bug is coming from count now this may sounds interesting that this count is able to create the bug but it's almost useless when using errorbased injections the reason is that most of the times this select something from something statement is locked and we can only modify this part just to give you an example it may be select name from users where name equals sagger and then we can modify the group by round function you can see this is a standard database query select name from users where name equals and we put this name in some search box the problem of this is it is always going to give you one result however we need at least three results for this bug to trigger hence we can put or one equal one to nullify this where statement so think about it select name from users where name equals sagar or one equal one which is always true hence it will select all the names giving the whole table as you can see it dumps the whole table so now we can put our group by rand having min equals zero and this triggers the bug and this is the final output which we want as our payload so i can copy this i can go on this website and you can see it normally takes a parameter called cat when it gives a parameter called cad it comes up with all these images if i give a parameter of cat equals 2 you can see it comes up with only one result so let me try to bypass this one cat equals 2 since we already have or 1 equal 1 this will bypass the situation of cat and it'll give us all the rows in the table and we'll group them by rand function having min equal zero i'll put a comment here to ignore the other stuff and you can see we get the error duplicate entry one key group key this one is the result of our duplicate entry and it's the result of our rand function which is over here so can we use it to extract data of course let me show you that how we can do it now you can see what i just did is i did a select name round rand and then i did a concat version round ran so the output of round round is 0 1 1 which you can see over here 0 1 1 and i concatenated this with the version of the application hence you can see since the origin is constant and round rand is changing we still have a perfect duplicate copy of two and three these are perfect duplicates because the version is constant and this part is changing hence in the same way we can concatenate whatever we want and we can extract data a good example here will be you can see we got the database version then we got x which is the database name as you can see over here then we got a root at the left local host which is the user we can even put spaces in between and this will just make it easier for us to identify that this is one thing this is second and this is third and this is finally the rand so i can just take this whole concatenation string here and put it instead of this round run function and we got the version number the database name and the user at direct localhost that is how error based sql injection works and this is how we exfiltrate data through errorbased sql injections boolean based sql injection well a boolean is a situation of zero or one which is false or true there will be many cases where you will find these kind of situations it can be a simple login page if your password is correct you will log in if it's wrong you will not so it's 1 or 0 or 0 or 1. in this specific example you can see if i try this specific command which is cat equals to and database equals acquired so i am putting a condition here this application may be taking select star from something where cath equals 2 which should give me this image what i'm saying and database is equal to acquired so i'm giving it a database name if my database name is correct this application will show me the result as you can see over here however if i change this aqua to account 1 which is not the database name it will not show me the result as you can see this is where the boolean injection can be used to get data now how do you get data out of it you can put a lot of conditions here and you can use patterns like like pattern length pattern substring let me show you with examples here i have this table called login this table has an entry which is id1 username sagar and password bunsel now a standard query will be select start from login where id equals 1 and this will throw the table if we say id equals 2 which doesn't exist in the database it'll say empty set which means it will not show me anything so instead of putting id 2 i can say id1 and i know that the statement is true and i can say and database equal sbba which is the name of this specific database and since the statement is true you can see we get the result i can get the result even if the statement of first parameter is wrong if it is where id equals 2 i can use the command or instead of putting and so select star from login where id equals to or database equals spva now database is equal to spva for every single of them hence it shows us the same table so if the statement is false you can use or to get the data if the statement is true you can use and to get the data but the question is how do you get the data how do you know that the database name is sbva it's pretty simple you can use the length function to find the length first of all so i can say select star from login where id equals to or length of the database is equal to one and it says empty set i can try two it again says empty set i can try three it against his empty set but when i try four it gives me the result this tells me that the length of the database is 4. now we have to see what is the first character in this length for that we can use substring we can say select star from login with id equals to or substring of the database function check the first character and only check one character and see if it is a however if we are checking one character and if you are checking the first character it is not a it is s because the database name is sbba if i check s here you can see we get the result so you can brute force from a to z by putting this kind of pattern also you can check for the second character by replacing the first one this will not give me any result but if i change this s to b this time it gives me the result so the first character is s and the second character is p similarly i can try for the third character which is v and i can try for the fourth character which will give me a result on a i can even try combinations so instead of just one character i can try two characters at the same time i'm going to try two characters starting from first which is s and b you can see it gives me the result i can try from second character two characters which should be b and a in sbva so b and a if i try s b it won't give me the result but if i try b and a i'll give me the result well that doesn't works because it is not ba it is bv and you can see sbva i can try the whole database itself by putting one and four which means start from first character and select four characters in the string which is sbva and that gives me the output i can even use the like function here to speed up the process you can see in this command i'm using select stuff on login where id equals 2 or database like percent a percent now what this percent means it's a wild card it means check if there is a in the database name it can be at any place so any places before it any places after it you're just checking that i can say check a b that certainly isn't works but if i check v a that gives me the output because s b v a are the last terms i can remove the first percentage if i need to we will make it va but we will not get any result because we are saying see if the database is like va and then something which is wrong because the database is like sbva not va something it's not v a n v a b it's sbba instead i can do is i can replace the last percentage and i can say check if database is like something which ends with va and this gives me the result and that is how you can use the like function to find stuff i can even say s underscore va which means i don't know what will be there in between this but there is just one character which should give me the result or i can just put a percentage when i don't know the number of characters which should again give me the result it's all about pattern matching let's try to do the same thing on the website so cath equals 2 and because we know that cat statement is true the length of the database as 1 which is not true and we don't get any output length of database has two doesn't works length has four doesn't work length has six certainly works because the database name is acquired a c u a r t which is six characters and in this way you can go ahead and try a lot of combinations and try to extract data bit by bit using boolean based sql injections timebased sql injections well there will be certain cases where you will not be able to see any output on the screen it will be the screen which is same in case of a valid statement or an invalid statement in certain cases instead of looking at the output we can look at the time which the server takes to process the request or to send the response in the following case i am trying to ask the server that check if the database name is acquired if it is then sleep for 10 seconds so if i press enter i don't get anything on my screen but you can see the server is taking 10 seconds to give me the response it's sleeping right now and after 10 seconds it'll send some response to me which is again the same page so on my response nothing changes but it took complete 10 seconds to show me the page instead if i just put some random name here it'll not take more than two seconds to give me the response that is where i can justify if the statement is true or false just by looking at how much time the server is taking to give me the result just to make it simpler for you i'm going to show you a few examples there is a table called users and you can see in this table there are three users sagar alice and bob however let us assume that we do not have the ability to play with these users every time the output is just these three users what can we do in such case we can use sleep statement by combining it with and select start from users and if and here you will put your sleep statements however please note this depends on product to product in case of this database which is a mariadb implementation of mysql the function works in condition comma true comma false which means you put your condition if the condition is true then this will happen if the condition is false that this will happen so if the condition is false sleep for five seconds if the condition is true sleep for two seconds and the condition is database equals a if i try to run this it throws an error and the error occurs because there is no logical condition in this you see to use time based injections you need a logical condition like where which you cannot control so if the application instead of this is using where name equals sagger now the application is checking for a logic select star from users very name equals sagar this is something which the application is checking it's a logic condition and then we are putting and also check if database equals a then sleep for 2 seconds or 5 seconds this will work and you can see the database is sleeping but how much 2 or 5. you can see it slept for 5 seconds which means database name is not a because it is x so can i show you with the x of course when i do it with the correct database name it sleeps only for 2.002 seconds two seconds because of the sleep function zero zero two seconds to process the request again five seconds because of the sleep function 0.009 seconds to process the request similarly we can use different patterns like length and now we are comparing if the length of the database is 1 or not and in this case the length is 1. if we see if the length is true or not it'll say no because it'll sleep for five seconds giving me the confirmation that the length is not equal to two i can even use a greater than sign here so if length is greater than two then sleep for two seconds if not then slip for five seconds as you can see length is not greater than two it is less than two so i can say length is less than 2 and this will sleep only for 2 seconds as you can see so by such techniques you can analyze the time of the database and conclude if a situation is true or false i can even do length calculation here so in this following example i am checking if the length of the database equals 5 then sleep for 5 seconds otherwise sleep for 10 seconds 1 2 and it throws an error let's see what the error is length okay did we did some mistake yes we forgot to close the lens function so let's close it and let's try now 1 2 3 4 5 6 7 8 9 10 11 12 13 14 and maybe i'm counting too fast and it just comes up with the result and you know i can conclude that that was definitely not five seconds however if i try it with a number of six which is actually the length a c u a r t one two three four five so do we get the output yes we get the output right that is kind of how it works let me go ahead and start a stopwatch instead this should be easy so i'm going to say and do we get the result here here we go we got the result in almost four seconds but still because i started it and it took one second to you know come from browser to stopwatch it took one second over there if i do a wrong statement like five and if i reset that and if i press enter then let's see we got the output in 11.51 seconds and assume it was taking somewhere 12 seconds because i came from the browser to here this was one more second so roughly 12 seconds instead of 10 so that is the processing time it is taking but it is definitely clear that if the request is true it comes somewhere around five if the request is wrong it comes somewhere around 10 because i am giving that in my assumptions right that is how you get to know if it is true or if it is false and just like you use the length function you can use the substring function to calculate the name of the database or to get any kind of information from this database it all depends on how well you understand sql but that is how the timebased sql injections work using semiautomated tools for sql injection well there will be certain situations which will be humanly impossible for you to test thousands and thousands of payloads with think about a login page if you're bypassing a login page and they have used certain filters it will not be easy for you to try all the possible combinations that is where semiautomated tools come into the picture again remember these are just semiautomated they are not fully automated you still need to understand why a skill injection occurs where do they occur how do they occur and what is the reasoning behind everything and accordingly you can use them to automate the heavy lifting one of the tools which i personally like is called burp suite there are alternatives like os zap however burp swede is a good and reputed tool you can download it from portswigger.net just download the community edition and install it it's available for all the operating systems it's a simple next next next install so i will not cover that part in community edition you cannot save the data so you always have to start a temporary project that's fine with us you can start with the default of verbs that's also okay just started and now verb has started now there are many ways to use it everyone has a preference however in these new versions they have started to make a builtin browser if you go to this proxy you will see there's a browser here open browser this is a chromanium browser and it's a specially configured one because it works with burp suite out of the box now here just make sure you do turn off this intercept because you can see it automatically starts capturing a lot of requests and we don't really need this just turn this off now go to your browser and open whatever you want to open so i'll open my target which is localhost and here i'll go to login and here i'll put certain username and password like sagar as username and mypass as password nicely it doesn't really works of course the password was wrong so we were not able to log in that is fine we can go to burp and if you go to http history you will see all the requests that have passed through burp using this specific browser it may be hard to find that request in these much requests so you can go to the target tab and it's the graphical tree view we are using a localhost and we are using login.php it is interesting that this is not the right request however there is one more login.php which has certain percent 20 in that but this is the right request you can see username equals sagar password equal mypass this is what i typed so this is our request again there are two requests login.php login.php 20 something that is fine with us we can send this request to repeater now you can see the repeater highlights and now you can do whatever you want with this request and send it from here and the response will come over in this window so first of all let me try instead of my pass let me try the right password which is bunzo let's try to send it now let's click on render to see how it works in the browser and we were able to log in as you can see login if i use a wrong password we're still able to log in which is interesting the reason behind that is because this website uses cookies once you're logged in the next request which you send doesn't matter is because you have never pressed this logout button so instead of pressing the logout button which is practically not possible since it's just the response i can go ahead and remove this cookie at all once there is no cookie the website doesn't recognize me that i am logged in or not it just processes the request let's try again now i can see i'm not logged in if i type the right password if i press send i am logged in if i again type the wrong password i am not logged in though the request is working fine however i would suggest that you remove these additional characters from it it doesn't really matters and it won't affect your testing but the file name is login.php not login.php and these characters so due to some processing it certainly picks up these characters in the request that is fine you can safely remove them and now this is a perfect post request going to login.php using http 1.1 again if you didn't know this if you didn't remove that still the request is working fine and you can use it but i like to be a professional now we know that this request is working so instead of using the right password and username i'm just going to give a invalid username and a invalid password again let's send it once more to confirm it's working fine now we can send this thing to intruder so send to intruder you see the intruder tab highlights i'll go here and it tells me what are you attacking i am attacking localhost that's correct on port 80 that's correct because i'm not using https if i'm using https then i have to put port 443 here or some other port depending on the configurations but since i'm using http so i'll make sure this is untick here now let's go to positions and the great thing about burp is it automatically positions everything you see these things are marked in green and they have been positioned automatically that's the auto mode of burp suite you see the auto here however in certain cases you may want to add something like if i want to add a position myself where i want to do a sql injection i may want to go ahead and select this and i'll say add here and now this is also marked as a position i can clear all of these by pressing the clear button and i can again just say auto to automatically select the right positions which perhaps we does very well there are four modes sniper battery ram pitch fork and cluster bomb all of them have different purposes sniper for instead will try two payloads right it's trying payload number one here which will be my sql injection code here and then my code over here but sniper will do that one by one so for example it will try mysql injection here and keep the password as bansa whatever we have given in the input in the request so it will only change one payload at a time then once that works it will keep this as it is and it will change the password which is the payload two so it will change payload one keep the second as it is then it will keep the first as it is and change the payload to so it's one by one that is what sniper is again all of these four have different purposes battery ram uses both of them together so if i use battery ram it will change both of the payloads at the same time you can study more about this on ports bigger website is irrelevant for this lesson i'll just go with sniper in payloads you can select the position since sniper uses just one position you can use one and there are single list and other stuff here one of them is brute forcer where you can specify a brute forcing combination we can specify a character list minimum length and maximum length but we are not brute forcing a password right technically we are but not through a brute forcer we are doing it through sql injections so instead let's go with a simple list and you can load a list of test cases or you can add a list here now i already have a list so i'll click on load and then load my payloads and you see we have certain payloads in this list you can create your own list that's just a txt file or you can just go ahead and add something like here i can just click on add and that will add it to the list but i'll just stick with my list which i just loaded now there are 10 payloads in my list and since sniper uses one payload at a time for both of the positions there will be 20 requests and 21 to be precise because it will even generate a baseline request which will be using both of the parameters that we provided so it will just go ahead and send this request as it is that will be the baseline request you can go ahead and click on start attack and it gives you the warning it's the free version the community one it will be slow that's fine we just have 21 requests now you can see the first one is always the baseline request there is no position used it's like the blank request you see the one which we give and then there are all the payloads that it has tried for the position one it has tried this then for the position to let us try this over here but how do you define which one worked and which one didn't well you may go ahead and see what is the difference in these requests all of them are having the same response code i don't see any error or timeouts but here in length you see all of the lengths are different you can go ahead and click on response and render and you can see what was the response of the request none of these worked however if we see these four thousands you see it has worked so now these four thousand requests are all working but there is much cleaner way to do that i'll just close this and instead there is fourth tab here which is options i'll click on this and options there are many but you can set this grep match option just clear all of these make sure this flag is ticked and add something like welcome press add and now it is set the reason i have added welcome is i want to flag all those requests which have the word welcome so basically when i start this attack now you will see it'll start flagging the requests which have the word welcome just like this one and this one and this one now once the attack is finished which just happened i can go ahead and filter it with the flags so all of these four requests are the one which are resulting in a successful sql injection i can see if i give it a response and render and render this is the word which i just filtered for when there is successful login it says welcome back so i just flagged any response which has welcome word in it that is why we are getting these flags and now you know that these four payloads will work for your sql injections that is how you use semiautomated tools to uplift the hard work and do sql injections using fully automated tools for sql injections well there are certain cases when you have to test an application which has thousands and thousands of pages even semiautomated tools cannot work for you in those cases you may want to run some fully automated tools just like sql map you can go to sqlmap.org and download the zip file once you have the file extract it to any location you want in my case i have extracted this file on my c drive directly here you can see a folder sql map and there are all the files which you get in this zip which you just downloaded now just go ahead open the command prompt or a terminal in case of unix in the same folder and now you can just type python sqlmap dot py since i am using python command make sure python is already installed in your system if not go on google download python and install that you can even do that from microsoft store in case of windows so i assume you can do that let's press enter and you will see it loads sql map and then gives me an error missing mandatory options dulmrgc and all the other stuff that's all fine just click enter and now instead of sql map just give it an option called dash hh which is extended help as soon as you press that you will see a lot a lot of options which you can use in a skill map to do fully automated sql injections the first one which you need to understand is of course the url there are a lot of options right there you go dash u dash url to give a specific target then the second which you need to understand a minimum one is the risk level where you see the level level of tests to perform one to five and default is one when you want to do complete testing you would use the level five not level one the reason of having these levels is that maybe we just want to test something in a low level and we have a low bandwidth on our database so if we use all the tests we may crash the database same thing applies to risk when you want to keep the risk of crashing the database corrupting the tables and and even getting caught while doing a pen test you don't want to do all of that keep it on one however you can increase it on three if it is a crystal ball test just like we are doing right now there are many other options you can even choose the technique which is dash test technique and you can choose between all the techniques like a boolean based injection error based injection union based injection etc etc other options are also here you can extract data if you want using database table column user to select the things and dash does dbs dash dash tables dash dash columns and dump to extract the data let me show you an example here in practice so i'll go ahead and use dash u http localhost slash login dot php and i'll give it a risk rating of three and level as 5. let's press enter now you can see you have not declared cookies while server wants to set it on cookie this one so do you want to continue yes that's fine we can take this cookie nice testing sql injection ore based you see boolean based actions are being tested first then once it is done with boolean it will start with some other tests like from union based so it's going to do all the testing for us automatically as testing is the mysql is less than this more than this using boolean and postgresql says testing the version of the database right now it's going to take some time let's leave it till then and you can see it is asking us it is recommended to perform only basic union tests if there is not at least one parameter one potential other technique found do you want to reduce the number of requests well this is going to reduce the number of tests which we are doing by reducing the number of level and in this case i'm going to allow this because i don't want to wait for such a long time when i know there is any skill injection in a real life situation you may not want to allow this and reduce the number of your tests now you can see a skill map ends up with an error saying nothing is injectable it was not able to find any skill injections with our current setup that is fine it happens there are many things which you can do to fix it you can provide it with the fields to inject so if i show you the help again you will see there are certain fields which you can inject by putting dash dash data so let me see where they are here you go dash data you can tell it that go ahead and inject it in this specific field by selecting dash data this can be complicated for some people who do not know html css javascript because you will have to find which field are we injecting the data in in our case we are injecting the data in these fields username and password but you need to know the name of these fields so you may have to inspect the element and you may have to find that in this html or you may want to intercept the request and find it there an easy version will be just use burp suite go ahead and start a temporary project open your proxy start your browser go to localhost go to login and here go ahead and give it something like sagar sagar1 i don't need the browser now i will go to http history or in the target and i'll take this request send it to repeater and i'll just clean this request a little bit because these characters may cause problems so this is login.php request which is taking two parameters this one and this one instead of these parameters press a asterisk sign now once you add this ester is sign this is called sql map payload marking now i can just save this to a file i'll save it in my c drive in my sql map the same directory where i'm running it i'll save it for example any name like request dot txt and this is save i'll close the burp suite i don't need it now and if you go ahead and run this this time instead of giving it a url you can specify the request file you created by dash r request.txt and you can go ahead and give it the levels and risk let's go with the default this time because that will be faster and it'll say custom injection marker found do you want to process it of course that's why we created it and it says redirecting to this do you want to do that yes we want to use http localhost bird at login.php yes that's what we are testing the result is a post request do you want to resend the original post data in the new location yes we want to send the original data in this new location which is login.php okay it looks like the backend database is mysql wow it just found that right do you want to skip testing payloads for specific other databases of course we don't want to test others because if it is mysql then yes let's just test for mysql for the remaining test do you want to include all the tests for mysql extending the level one and the risk one well you can do that in this case i'm skipping it to make sure we complete this lecture on time let's see if it gets us the result this time now you can see over here custom post parameter number one so the number one marker which we put in the user name it is testing that right now and it says post parameter number one is vulnerable you want to keep testing others you know in the life situation you can test it and the second parameter is also vulnerable in our case but i'm going to skip it right now because i found a one parameter so that's all good now these were the payloads that it has used for number one you can see user name and then a single quotes and then select something something something we are something sub select something from sub select count it's a long payload i don't think i would be ever able to write this kind of complex payload from my hand and that's where the automated s conjections really stands out you can copy this as it is and take it and find whatever data you want in the real website or you can use a skill map to do that work for you as well so this time i'll say you know what find me the databases dbs it'll find me the databases this time and say do you want to use the marker yes i want to use the marker and we gotta redirect that's fine yes use the data and now it'll just give me the databases because it knows that the first parameter is vulnerable it has already saved all the data and here are all the databases i can find let's see i can select the database sbba and i can find the tables again yes yes yes and you see we got the tables and these are the payloads that it is using starting from here ending here again super complex stuff i cannot write that now let's select the table let's say login and let's say you can find the columns but i'll just dump it as it is so yes yes yes and here we go we just dumped the whole table as it does instead of finding one column at a time item the whole table if you want to find the columns also you could have done that by pushing dash dash columns and then it'll just you know go ahead and find each column for you okay invalid character columns there you go now it finds the columns and you can select a column and dump that so you know really depends like dash c and you know like id and dash dash dump so in this case it'll only dump the column or you can just dump the whole table by just ignoring this column thing and just say dump over here itself so it really depends you know if the table is too big you may want to do column wise and here this will only dump the first column as i said but again you can always dump the whole table no need to dump column wise if you know that the table is small so that is how you use sql map to do automated sql injections defending sql injections is not an easy task that is the reason this old technique is still prevalent in the market there are so many websites which daily get attacked due to a skill injection there are many methods to do that most of the security practitioners will go with code sanitization which will include things like input validation parameterized queries stored procedures escaping avoiding administrative privileges those kind of secure coding practices since this is not a coding course i will not cover how all of these actually works i can give you a reference to ptsecurity.com and they have a really good guide explaining how to securely code all of these things which i just mentioned you can see input validation they talk about it and the code which you have to put and how do you have to put that parameterized queries the code and how you have to put that however i will tell you my specific approach which is also one of the best industry practices instead of just focusing on the code and focusing on the development side you should focus on a multilayer defense now the multilayer defense works in minimum of three different layers the first layer of course is the one which you see right now which is the code all of these techniques you put that you do secure recording that is your multilayer defense layer one secure coding practices layer two is including a web application firewall this is a vaf which runs on wordpress cms you can scroll down and i'll show you all the available attacks which you are defending against in my case sql injection is set on enable mode so this valve is going to stop any sql injection attack that occurs on my website let me show you my logs which will reveal a lot of ips who have been attacking my site every single second you can see there are number of ips and this is the current date and i believe it's like eight minutes ago someone got blocked 10 minutes ago someone got blocked 10 minutes ago 12 minutes ago 14 minutes ago this happens when you have a huge website and actually a network of websites just like mine so all of these are being blocked due to certain reasons and the vaf is protecting that well that's your second layer of defense the third layer of defense is having a vaf placed on the edge which is normally the dns in this case i use cloudflare on cloudflare you can add a new site by clicking on this button and configuring the dns and in this i will open my site here i can go on firewall and i can go and manage rules now again this web application firewall is a paid product it's not available in the free version but i'm still showing you because that's how you have to do it in the real industry i can go ahead and see these rule sets and you can see i have selected some of them which applies on me so because my website runs on php i have applied this rule and you can see over here all of these rules are being protected against then i have applied wordpress specific configurations which are all of these rules being applied on my website similarly there are flash rules and there are other stuffs as well you can see it goes on and on and on this is how you protect a device in a multilayer defense there are many more layers you can add you can add an intrusion detection system intrusion prevention system an application delivery controller a security orchestration automation response system a managed monitor automation response system and much more depending upon how much your organization is ready to spend and what level of security you are looking for let me show you an example i'm going to go on my website and go to the search and i will search sagar quotes or one equals one and comment and let's see what happens here you go i just got blocked by cloudflare which is sitting on the edge side of my server it doesn't even crosses this layer let's say someone was able to bypass this they will have to face word fence and if they were able to bypass that then my secure coding will stop the attacks so i may even survive an attack where my code is vulnerable but if i have the right security devices placed then also majority of hackers won't be able to exploit anything and that is how you protect against sql injection attacks you
