With timestamps:

00:00 - bob's role is one of the most viewed
00:02 - react instructors in the world
00:04 - and now he's back with a brand new
00:07 - complete react course that will teach
00:10 - you modern react using patterns like
00:12 - functional components and hooks
00:15 - if you want to learn the react
00:16 - javascript library this is the video
00:20 - hey free code campers welcome to my
00:22 - newest course on learning react
00:25 - in this course you're going to solve
00:26 - over 140 different coding challenges and
00:29 - work on eight different projects all of
00:32 - which have an associated figma design
00:34 - file to guide your work
00:36 - and you actually have two options for
00:38 - following along either by using your
00:40 - local machine i actually have a few
00:42 - lessons that will show you how to do
00:43 - that starting pretty early in this
00:45 - course
00:46 - or you can head over to scrimba.com
00:48 - where there's an interactive version of
00:50 - this course so that you can solve the
00:52 - challenges directly in your browser
00:54 - it's totally up to you what you want to
00:56 - do the link to the course on
00:57 - scrimmage.com is provided below
01:00 - and actually this course is part of a
01:02 - larger front-end career path which we
01:04 - have at scrimba which takes people from
01:06 - zero to hirable as a front-end developer
01:10 - this course is module 11 in that career
01:12 - path and my more advanced react course
01:14 - immediately follows this free react
01:16 - course as module 12 where i go even more
01:19 - in depth into react react router using
01:22 - the context api and so much more if
01:25 - those topics sound confusing to you
01:27 - don't worry at all you don't need to
01:28 - take them to understand this course
01:31 - now i always appreciate any feedback you
01:34 - have for me about the course so you're
01:36 - welcome to reach out to me on twitter at
01:38 - bobsarole or if you have any questions
01:40 - about your specific code the best place
01:42 - for those is to either reach out to the
01:44 - free codecamp forums or discord server
01:47 - or you can check out scrimba's own
01:49 - discord server which is becoming a more
01:51 - and more deeply integrated part of the
01:53 - whole scrimba.com experience
01:55 - and with that good luck and have a ton
01:58 - of fun learning react
02:02 - hey there and welcome to the learn react
02:05 - module i'm super excited you're joining
02:07 - me for this course because by the end
02:09 - you'll have built not one not two but at
02:12 - least eight projects using react there's
02:16 - so many of them i don't even have time
02:17 - to go over each one of them in detail
02:19 - right now i could barely even fit them
02:21 - on this slide so why are we doing so
02:24 - many projects well it's because i
02:25 - designed the curriculum for this course
02:27 - to be project driven in each of the
02:30 - sections we will start with a goal
02:32 - project that we are working toward and
02:34 - then we'll learn everything we need in
02:36 - order to build that project now in order
02:39 - for that approach to actually work i'm
02:41 - going to be asking a lot from you so
02:44 - let's talk for just a bit on how you can
02:46 - get the most from this course
02:48 - just like everything in life what you
02:50 - put into this course is what you will
02:51 - get out of it or as i like to say my
02:54 - philosophy about learning is that the
02:56 - easiest way to learn something is to do
02:59 - it the hard way in this course i'm going
03:01 - to be asking you to do a lot of the work
03:05 - for much of it you'll have me there
03:06 - after each challenge to walk you through
03:08 - a solution but for some of it you won't
03:11 - either way what i'm asking of you now is
03:13 - to avoid the trap of tutorial hell where
03:16 - you end up passively watching me do all
03:19 - the work remember this is not school
03:22 - you're presumably here because you
03:23 - actually want to finish the course with
03:26 - the ability to write react code by
03:28 - yourself
03:29 - school has taught a lot of us that the
03:31 - goal of learning is to get a good grade
03:34 - in fact i heard something really
03:35 - interesting that said that education is
03:37 - the only thing that humans try to get
03:40 - less out of than what they paid for so
03:43 - don't let that be you in this course if
03:45 - you really give it everything you've got
03:47 - meaning you do all the challenges and
03:49 - projects you're involved with the
03:51 - community and you are an active
03:52 - participant in your own learning i can
03:55 - promise that you'll probably finish off
03:57 - in a better spot than many students
03:59 - getting their degree in computer science
04:01 - and i really don't say that lightly
04:04 - along those lines remember that space
04:06 - learning and repetition are your best
04:08 - friends binging the course from
04:09 - beginning to end even if you are doing
04:11 - all the assignments is kind of like
04:13 - trying to run an ultra marathon without
04:16 - training your brain actually needs rest
04:18 - so take breaks often by taking this
04:21 - course the goal isn't just to get to the
04:23 - end it's to get to the end with some
04:25 - honest-to-goodness react skills then
04:28 - after you come back to this course on
04:30 - maybe the next day don't be afraid to
04:32 - re-watch some of the past lessons and
04:34 - even redo some of the past challenges
04:37 - because repetition really is your best
04:39 - friend whenever you're trying to learn
04:40 - something new
04:41 - so what should you already know coming
04:43 - into this course before jumping into
04:45 - react you should have a solid grasp of
04:47 - the fundamentals of web development
04:49 - namely html css javascript and
04:52 - preferably a pretty solid understanding
04:54 - of the new syntax that was introduced
04:56 - back in ecmascript 6 es6 and above
04:59 - if you're feeling at all rusty on any of
05:01 - these topics you can click the logo for
05:04 - each one of these which will send you to
05:05 - another free course here on scrimba
05:07 - where you can brush up on those skills
05:09 - my name is bob zaroll i'm going to be
05:11 - your instructor throughout this whole
05:13 - course my username pretty much
05:14 - everywhere online is bob zaroll but
05:16 - these days i'm really most active on
05:18 - twitter you can click the twitter icon
05:20 - to go to my profile if you want to
05:21 - follow me that would be great and so
05:23 - without any further delay let's jump
05:25 - right in and start learning react
05:30 - in the first section of this course
05:31 - we're going to be learning everything we
05:34 - need in order to build a basic static
05:36 - page using react and i know what you
05:39 - might be thinking but i already know how
05:41 - to make static web pages i know you're
05:44 - probably super excited to really dive in
05:47 - and learn dynamic web applications with
05:49 - react and we are going to get there in
05:51 - this course but in order to start off
05:53 - this section is all about learning the
05:55 - basic syntax and you could say the
05:57 - vocabulary of react because i found that
06:00 - the best approach to learning react is
06:03 - to first start learning how to think in
06:05 - react
06:06 - the reason for this is because react
06:09 - really does kind of change the game in
06:11 - terms of how you build applications
06:14 - later in this section we are going to
06:16 - start learning the differences between
06:18 - declarative and imperative programming
06:20 - and you're going to find that react
06:22 - approaches web development in a
06:23 - completely different way so the point is
06:25 - we're first going to be dialing in our
06:27 - brains to start thinking in terms of
06:30 - using react to build websites by first
06:33 - building some static web pages not
06:35 - unlike the ones that you normally would
06:37 - just use html and css for so this might
06:40 - not seem terribly exciting right now but
06:42 - i think you'll soon see that writing
06:44 - composable reusable components in react
06:47 - can actually be a bit addicting and
06:49 - pretty fun
06:50 - so i know that you'll find a lot of
06:52 - benefit in starting off with the milk
06:53 - before we get to the meat or of course
06:56 - we have a vegetarian option as well
06:58 - the content in this section will be
07:00 - driven forward by the goal of creating
07:02 - our first static web page in react and
07:04 - that's the page you see here in the
07:06 - screenshot that has a list of fun facts
07:08 - about react now this screenshot is
07:10 - actually also a link to the figma file
07:13 - for the design of this page so if you
07:15 - click this screenshot it will open up in
07:18 - figma you'll have to make sure that you
07:19 - log into your figma account if you don't
07:22 - have one yet it's free to create and
07:24 - clicking the screenshot will lead you to
07:26 - a sort of shared file that everyone will
07:28 - have access to
07:29 - in that shared file you'll see something
07:31 - near the top that looks kind of like
07:32 - this where it's got react facts and then
07:35 - this little drop down arrow your best
07:36 - bet is going to be to click that drop
07:38 - down arrow go over to duplicate to your
07:41 - drafts and click that
07:43 - duplicating this design to your own
07:45 - drafts is going to make it possible for
07:47 - you not only to edit the design if you
07:49 - want to change it a little bit but also
07:51 - to help you avoid any distraction you
07:53 - might see on the design page of anybody
07:55 - else's cursors or maybe some comments
07:57 - that they may have left
07:59 - so i'll go back to this design here make
08:01 - sure to click on it now so at least the
08:03 - url gets saved up in your tabs in your
08:05 - browser
08:06 - and lastly we're going to look at the
08:08 - different topics that we'll be covering
08:09 - in this section
08:10 - so what are we going to learn about well
08:12 - first we're going to learn why we even
08:14 - care about react in the first place i
08:16 - think knowing why react is so exciting
08:19 - and so popular will help make your
08:21 - learning journey of react a much simpler
08:23 - one because you'll be so excited about
08:25 - what you'll be able to create in the end
08:28 - by using react
08:29 - we'll also be talking about a
08:31 - proprietary react syntax called jsx and
08:34 - we'll get to see how that sort of
08:36 - changed the game for react and made
08:38 - writing react a much more familiar
08:40 - experience
08:41 - then we'll dive into creating custom
08:43 - components and you'll learn all about
08:45 - what that means and how to actually do
08:47 - that yourself in react
08:49 - and of course in order to build our
08:50 - project we're going to need to know how
08:52 - to apply css styling
08:54 - again the goal is for us to be able to
08:57 - build this simple static page in react
08:59 - i'm really excited for us to get started
09:01 - so without any further ado let's jump
09:03 - right into the deep end and start
09:05 - writing our first react code
09:10 - before we just jump right into theory
09:12 - and why we care about react and how all
09:14 - the little pieces of react work i want
09:16 - to get your hands on the keyboard typing
09:18 - some react code as soon as possible
09:20 - mostly just to show you that react is
09:22 - not a scary library to be working with
09:24 - so let's see how we can set up react now
09:26 - i like to think of there as being an
09:28 - easy way to set up react in your project
09:31 - and a correct way of setting react up in
09:33 - your project for our sake in learning
09:35 - we're going to start with the easy way
09:37 - which will also make it so that you can
09:39 - actually just do this in your local
09:40 - environment hopefully you're following
09:42 - along here on scrimba.com but if you're
09:44 - curious and you're interested you can
09:46 - always do this on your local environment
09:47 - as well now you can see i have a very
09:49 - basic html page set up i have nothing in
09:52 - my javascript at all my css is minimal
09:55 - and we're going to walk through this
09:56 - together now i have some slides here and
09:59 - you can actually click on this
10:00 - screenshot and that will send you to
10:02 - this exact page in the react
10:04 - documentation it tells you how you can
10:05 - include react into your project and we
10:07 - can actually pull in these libraries
10:09 - that we need straight from a cdn in
10:12 - other words we can just copy these two
10:14 - script tags here and start writing react
10:16 - code there's a little more to it but
10:18 - what i'm going to do is click here and
10:20 - that's going to open me up to the react
10:22 - page i'm just going to copy the two
10:24 - script tags that you can see
10:25 - and over in my index html i'm going to
10:28 - put it in the head here
10:31 - let me fix the indentation and i've
10:33 - pulled in the react library and another
10:36 - library called react dom theoretically
10:39 - this is all i need in order to start
10:41 - writing some react code now i'm going to
10:44 - take it one step further and that's
10:45 - because just pulling and reacting react
10:47 - dom is going to be pretty extremely
10:49 - limiting in terms of using the power of
10:51 - react unless we also pull in something
10:54 - called babble i'm not gonna jump in too
10:56 - deep into why we need to pull in babel
10:58 - for now all i'm going to do is click on
11:00 - this screenshot here which will take me
11:02 - again to a page where i can copy the
11:05 - script tag that you see
11:07 - and i will paste that in underneath this
11:11 - script tag and if we look really closely
11:14 - below here it says you can use any jsx
11:16 - we'll cover what jsx is later in any
11:18 - script tag by adding type equals text
11:21 - slash babble so i'm going to do that
11:23 - here in my script tag down here type
11:25 - equals text slash babble
11:28 - and that's all the setup we really need
11:31 - by pulling in the react
11:33 - dom library in this script tag i now
11:36 - have access to a global variable called
11:39 - react dom i'm going to use that to
11:42 - render something to the screen once
11:44 - again i'm going to be covering
11:45 - everything that we're talking about here
11:46 - it's totally okay if this is moving
11:48 - pretty quickly reactdom.render allows me
11:51 - to render something that looks very much
11:54 - like html now this might be blowing your
11:56 - mind a little bit because it probably
11:58 - looks a little strange writing some html
12:01 - inside of my javascript we're going to
12:02 - see how this is kind of one of the
12:04 - beautiful things that react has added so
12:06 - that we can write really declarative
12:09 - code now let's put something inside this
12:11 - h1 that's meaningful we had hello react
12:13 - over here maybe i'll say hello
12:16 - everyone okay in my index.html i'm going
12:20 - to get rid of this h1 so we're not
12:22 - confusing this h1 with what i'm seeing
12:24 - over here now reactdom.render the first
12:26 - thing is what do i want to render to the
12:28 - screen the second thing is where do i
12:30 - want to render it well let's go to our
12:32 - html and i'm going to create a div here
12:35 - just a completely empty div and i'm
12:37 - going to give it an id so that i can
12:39 - select it we'll call it root because
12:41 - this is going to be like the root of our
12:43 - entire application i like to think of
12:45 - this div as a container for the entire
12:47 - website that we're going to build in
12:49 - react and now that i have a place where
12:51 - i can put my h1 here i'm going to select
12:55 - it with a regular dom api
12:59 - document.getelementbyid root
13:01 - and surprise we've written some react
13:03 - code i'm going to hit save
13:05 - we'll see that it tells me hello
13:07 - everyone in a single line of code i was
13:09 - able to use react to insert something
13:11 - that looks very much like an h1
13:13 - obviously this is a little different
13:14 - because we're still inside javascript
13:16 - and i was able to put it right inside of
13:18 - this real dom element in our index.html
13:22 - now i have an entire lesson that's
13:24 - dedicated to understanding exactly
13:25 - what's going on here but in an effort to
13:28 - get your hands on the code get a quick
13:30 - win for you to see that you can write
13:32 - react and it's not too scary i'm going
13:34 - to give you a few seconds of silence
13:36 - where you can pause the screencast and
13:38 - study this line of code and then i'll be
13:40 - erasing it and letting you type it again
13:42 - from scratch in fact let me write that
13:44 - down as a little challenge here
13:47 - okay pause the screencast here spend
13:49 - just a minute memorizing this line of
13:51 - code do that now
13:58 - and then i will add a little comment
14:00 - with the next part
14:02 - okay your time to shine rewrite the line
14:04 - of code as best you can from memory you
14:07 - don't have to put hello everyone or
14:09 - hello react or whatever you even don't
14:11 - have to use an h1 like i did you can put
14:13 - whatever html you want in there so pause
14:15 - the screencast now and work on that
14:24 - because i pulled in that reacts dom
14:26 - library in my cdn i have a global
14:29 - variable called react dom and it has a
14:32 - render method which allows us to render
14:34 - something to the screen or kind of in
14:36 - other words place something on the
14:38 - screen and i don't know let's let's do a
14:39 - paragraph this time just to switch it up
14:41 - a tiny bit
14:42 - say hi my name is bob
14:45 - okay so that's the element that i want
14:48 - to place inside of this div again this
14:52 - div is a container for the actual
14:54 - elements that i plan on putting on the
14:56 - screen and the second parameter that i
14:59 - need to include with reactdom.render is
15:02 - you could think of it as a dom node that
15:04 - i have to go select with
15:05 - document.getelementbyid
15:08 - or because i can also get dom nodes with
15:10 - something like query selector that would
15:13 - work just as well in this case i'd have
15:15 - to put hash mark root because that's how
15:17 - query selector works it's the id of root
15:20 - just so this isn't confusing we'll just
15:22 - keep it as get element by id for now but
15:24 - just so you know either one should work
15:25 - just fine so the first parameter is what
15:27 - do i want to place on the screen and the
15:29 - second one is where should i be placing
15:32 - this i imagine under the hood what
15:34 - render is doing is it's taking this dom
15:36 - element that we are grabbing with
15:39 - by id and it's running something similar
15:41 - to dot append or dot append child to it
15:44 - and what is it appending it's appending
15:46 - this paragraph we're going to see that
15:48 - it's a little more complicated than that
15:50 - but that's a good way to kind of build a
15:52 - mental model for yourself as to how this
15:54 - is actually working so i haven't
15:56 - refreshed the page yet which is why this
15:58 - still says hello everyone i'm going to
15:59 - hit save which will refresh my browser
16:01 - and there we go hi my name is bob this
16:03 - time it's a paragraph instead of a
16:05 - header element and that's awesome we
16:07 - have written react in a single line of
16:09 - code you might have noticed that our
16:11 - console is popping up with this error
16:13 - you're using the in-browser babel
16:14 - transformer be sure to pre-compile your
16:17 - scripts for production a bunch of jargon
16:19 - here that may not totally make sense to
16:20 - you and that's fine that's a symptom of
16:22 - us setting up react the easy way instead
16:24 - of the correct way soon down the road
16:26 - we'll be kind of shifting our setup here
16:29 - and that warning will go away and
16:31 - awesome okay because this is scrimba you
16:33 - can always delete this if maybe you
16:35 - weren't able to memorize that you can
16:36 - try deleting it rewriting it again from
16:38 - scratch practice with it i'm going to
16:40 - ask you to do that a million times
16:42 - throughout this course because the only
16:43 - way to learn react is to write react as
16:45 - much as you can now i have found it
16:47 - really helpful for my own learning to
16:50 - understand why the heck i even care
16:52 - about react in the first place so in the
16:54 - next couple screencasts we're going to
16:56 - be talking about some of those really
16:57 - awesome benefits that come with using
16:59 - react as our library for building web
17:02 - applications but as always if you want
17:04 - to spend more time with this go ahead
17:05 - and do that pause click into the editor
17:08 - start typing what you want to type
17:09 - practice it and when you're ready i will
17:11 - see you in the next lesson
17:15 - surprise if you know my teaching style i
17:18 - wanted to include a practice in here
17:20 - essentially you're just going to be
17:21 - rewriting that same line of code that we
17:23 - just wrote in the last lesson however
17:25 - this time we'll extend it just a little
17:27 - bit i want you to see if you can figure
17:29 - out how to render an unordered list with
17:31 - two or more list items inside last time
17:35 - we just rendered a paragraph you can see
17:37 - it's still kind of left over here if i
17:38 - refresh that that'll disappear i've left
17:41 - the entire setup here for you we're
17:43 - still pulling in the script tags for
17:45 - react react dom and babel so essentially
17:48 - your main focus is just to rewrite that
17:50 - same one liner of code but see if you
17:52 - can figure out how to add a couple more
17:54 - elements inside like having an unordered
17:56 - list with some nested list items pause
17:59 - here and try to work on that challenge
18:05 - okay pulling in the react dom library
18:09 - that gives us access to a render method
18:12 - before we did a simple paragraph like
18:14 - this and put some code inside however i
18:16 - can put this as an unordered list
18:20 - and then just actually stick some list
18:21 - items inside of here
18:23 - so it's going to look a little confusing
18:25 - at first i'll clean it up in just a
18:27 - minute we have
18:28 - list item we'll just say thing one
18:31 - and i'll do another list item
18:35 - here
18:37 - thing two
18:38 - okay now i'm going to move this onto its
18:41 - own line here this whole html thing
18:44 - right there and the second parameter i
18:45 - need to separate with a comma is where
18:48 - to put this so i'm going to use
18:51 - document.getelementbyid root and let's
18:54 - cross our fingers see how this goes cool
18:56 - okay hopefully that was some good
18:58 - practice now let's keep moving forward
19:00 - and learn a little bit more about why we
19:02 - care about react
19:06 - one more thing that was highly requested
19:08 - from the first time i recorded this
19:10 - react course was how can i set this up
19:12 - on my local environment everything that
19:14 - i'm doing will be done on scrimba.com so
19:17 - that you can interact with the same code
19:20 - that you see me writing however it's
19:22 - also a good experience to run it locally
19:24 - on your own computer and get a feel for
19:26 - what it would be like to actually
19:27 - develop react on your own computer again
19:30 - our setup here is more of the easy way
19:32 - than the right way but for now what you
19:33 - can do is you can click the little gear
19:35 - icon in the lower right of your scrimba
19:38 - editor which will pop up a little menu
19:41 - here and there's an option that says
19:42 - download as zip that will download a zip
19:45 - file containing the files that we're
19:47 - working on here you can uncompress that
19:49 - like you normally would any zip file and
19:51 - open that up in any editor that you'd
19:54 - like for example visual studio code on
19:55 - your own machine now in order for that
19:57 - to run i'm going to show you what that
19:59 - looks like on visual studio code
20:02 - inside a visual studio code which is
20:04 - what you see in this screenshot there's
20:06 - a menu icon for some extensions
20:09 - and you'll need to search for an
20:11 - extension called live server it's
20:13 - created by ritwik day and you'll need
20:16 - this installed to your vs code in order
20:18 - to run the code that we have written in
20:20 - react so you'll click the little install
20:23 - button that's going to put an icon down
20:25 - at the very bottom menu bar in visual
20:28 - studio code that says go live
20:31 - and all you need to do is click that go
20:33 - live button which will open a web page
20:36 - on a local server i think it's maybe
20:38 - port 5000 that it runs and that should
20:40 - launch your own react project on your
20:42 - local machine as soon as you see me move
20:44 - toward a different setup for react that
20:46 - includes webpack and downloaded
20:48 - dependencies from npm and so forth this
20:51 - is no longer going to work in quite the
20:53 - same way but for now for those that are
20:55 - curious i thought i might just explain
20:57 - how you can get this set up on your own
20:59 - machine okay that's enough delaying
21:01 - let's keep moving forward with the
21:02 - course
21:05 - let's spend a little bit of time
21:06 - understanding why we even care to learn
21:09 - react one of the main reasons that
21:11 - people will talk about is how react
21:13 - allows us to write composable code so
21:16 - what exactly do i mean by composable
21:18 - well an analogy that i came up with has
21:20 - to do with sculpting if you think of the
21:23 - statue of david for example this statue
21:26 - was created originally from a single
21:28 - giant block of marble that was then
21:30 - sculpted down to the sculpture that we
21:32 - know today so in the end what results is
21:34 - one giant single piece that makes up
21:37 - this piece of art now what if instead of
21:39 - starting with one giant piece we instead
21:42 - used a bunch of small pieces to put
21:44 - together something that is greater these
21:47 - are lego bricks that obviously are small
21:49 - each in their own right that were put
21:51 - together to create something large in
21:53 - this example they all kind of work
21:55 - together to accomplish a goal so to
21:57 - speak the goal of looking like the
21:59 - statue of david now this example is not
22:01 - perfect because the original statue of
22:04 - david obviously is more beautiful than
22:06 - this replica made of lego bricks but
22:08 - hopefully the concept makes sense let's
22:10 - look at an example in actual web
22:12 - development what i have here is copy and
22:14 - pasted from the bootstrap website if
22:17 - you're not familiar with bootstrap
22:18 - that's really not important right now
22:20 - but it's enough to know that these 30 or
22:22 - 40 lines of code copy and pasted from
22:24 - the bootstrap website represent a
22:26 - navigation bar that is pre-styled now in
22:29 - the old days of web development a single
22:31 - page on a website was usually a single
22:33 - html page so if this is just the navbar
22:37 - a lot of times those web pages would end
22:39 - up being thousands and thousands of
22:41 - lines of html code essentially making it
22:44 - one giant sculpture well with modern
22:47 - frameworks like react we can take code
22:49 - like this and we can put it into our own
22:51 - custom components and we can put those
22:54 - components together to make something
22:56 - that is larger but in our case our code
22:58 - becomes a lot more maintainable and a
23:01 - lot more flexible you can see i've given
23:03 - these kind of silly names to show you
23:05 - that these are not regular html elements
23:08 - i can combine elements together that are
23:10 - real html elements like you see here
23:13 - into my own custom component called for
23:15 - example my awesome navbar or my awesome
23:17 - footer we're not quite ready to dive
23:19 - into the syntax of react quite yet but
23:22 - i'm going to give you a taste of it and
23:23 - a chance to play with it before we move
23:25 - on so let's see this in practice
23:28 - over here you can see i have my react
23:30 - dom.render and i'm rendering a custom
23:32 - component called navbar and if i scroll
23:35 - up you'll get a chance to see how i
23:37 - created that navbar as a quick aside one
23:40 - thing you might notice is that i'm using
23:41 - class name everywhere instead of class
23:44 - that's not a mistake that's just how you
23:46 - have to assign classes in react we're
23:48 - going to cover that later but for now
23:50 - i'd like to give you a challenge that's
23:52 - going to require you to deduce what i've
23:55 - done here and try to replicate it for
23:57 - yourself
23:58 - so let me put that here
24:00 - okay your challenge is to see the navbar
24:03 - component that i have created and see if
24:06 - you can deduce how to create your own
24:08 - component called main content it can
24:10 - return something really simple like a
24:12 - single h1 element and afterwards i want
24:15 - you to render it below the navbar you'll
24:17 - have to figure out how to render it
24:19 - below the navbar now i've changed this a
24:21 - little bit for reasons that we'll talk
24:23 - about soon but this line here 51 this is
24:26 - where you're going to figure out how to
24:28 - render your own custom component main
24:30 - content so first build your custom
24:32 - component looking at my example above to
24:35 - try and figure out how to do that
24:37 - and secondly render that component down
24:39 - here in reactdom.render pause the
24:41 - screencast and work on this challenge
24:50 - well following the example above we see
24:52 - that i created this component by
24:54 - creating a function
24:55 - and the name of the function is the name
24:58 - of my component
24:59 - so i will open up that function
25:01 - and return the content that i want to
25:04 - show up on my page above i created a
25:07 - set of parentheses because i have many
25:09 - elements that i'm trying to return i'll
25:11 - just do that just to keep things
25:13 - consistent for now
25:16 - we'll create our h1 that says i'm
25:19 - learning react and secondly i can take
25:22 - my main content and i can render it by
25:24 - making it look kind of like an html
25:27 - element in this case it's a self-closing
25:29 - one so i have main content as a single
25:32 - tag here and if i hit save we'll see
25:35 - that my h1 actually showed up on my page
25:38 - and that's the concept of composability
25:40 - it goes quite a bit deeper than this
25:41 - we're going to see how we can make our
25:43 - components much more composable and
25:45 - reusable but for now let's move on to
25:48 - another reason why people really love
25:50 - react and we'll cover that in the next
25:52 - lesson
25:55 - another major reason people love react
25:57 - is because it's something that we call
25:59 - declarative so let's talk about
26:02 - declarative to understand declarative
26:04 - it's helpful to know that it's opposite
26:06 - is something called imperative when a
26:08 - program is declarative we can simply
26:10 - tell it what should be done more
26:12 - specifically it's like the computer
26:14 - saying just tell me what to do and i'll
26:16 - worry about all the nitty gritty details
26:18 - on how to get it done it's opposite
26:20 - imperative is when we need to tell the
26:22 - program how it should be done like the
26:25 - computer saying i need you to describe
26:27 - to me every step along the way how to do
26:30 - something and then i'll do it up until
26:32 - now if you've mostly been just using
26:34 - vanilla javascript anytime you needed to
26:37 - create elements on the page you've been
26:39 - doing it in an imperative way in fact
26:41 - let's go look at what that has been like
26:43 - i've commented out my react dom dot
26:45 - render and i'm going to put a challenge
26:47 - here for you
26:49 - okay your challenge is to recreate this
26:51 - above line of code where we are
26:53 - rendering something to the screen using
26:55 - vanilla javascript by creating and
26:57 - appending an h1 to our div with the id
27:01 - of root we have our div id of root
27:04 - you'll need to select it and then append
27:07 - a new element and i give you the
27:09 - step-by-step instructions right here
27:11 - one little caveat is i don't want you
27:13 - using inner html because that kind of
27:15 - breaks the analogy down a little bit
27:16 - generally speaking this is actually just
27:18 - a good way to practice the vanilla
27:20 - javascript that you have been learning
27:22 - so far so it's always good to give it
27:24 - some practice i'll give you a couple
27:26 - lines here pause the screencast and work
27:28 - on this challenge
27:36 - okay let's work on this so i'm going to
27:39 - create an h1 and i'll use
27:41 - document.createelement
27:44 - and i'll make an h1 and then if i'm
27:46 - giving it some text content i need to
27:48 - use the text content property of this
27:51 - dom node and set it equal to
27:54 - i don't know maybe
27:55 - this is an imperative way to program
28:00 - then i need to give it a class name so
28:02 - i'll use the class name property here
28:05 - and set it equal to i think we said
28:07 - header and finally i need to append it
28:10 - to my div with the id of root so first i
28:12 - need to say document get element by id
28:15 - root and then use the append
28:18 - property or method to append my h1
28:21 - to the dom so when i hit save it should
28:24 - show up this is an imperative way to
28:25 - program perfect now this example is a
28:28 - little bit on the nose because if you
28:30 - were really just putting something
28:32 - static that had nothing to do with user
28:34 - interaction you probably would just go
28:36 - to your html page and stick it right
28:38 - inside the div here right but with react
28:40 - we're building our entire page in
28:42 - javascript and so doing something
28:45 - imperatively this way where i have to
28:47 - tell it step by step how to create the
28:50 - element and then to add some text
28:52 - content and then add a class name and
28:54 - then append it to the dom that's going
28:56 - to get old pretty fast especially even
28:58 - with something mildly more complicated
29:01 - than a single h1 like a very simple web
29:04 - page like this as soon as we have more
29:06 - than one element suddenly our four lines
29:09 - of code will become probably dozens or
29:11 - maybe even hundreds of lines of
29:13 - javascript code just to create and
29:15 - append all of these elements in the
29:17 - correct order and in the correct way
29:19 - and so that brings us back to the idea
29:21 - of writing our code declaratively and
29:24 - react allows us to do that in a really
29:26 - simple way as we see back up top let me
29:29 - comment this out and uncomment this we
29:31 - essentially get to write our javascript
29:33 - as if it were html we are relying on
29:36 - react to figure out how to turn what we
29:40 - have declaratively written as an h1 into
29:43 - the javascript code that's needed to
29:44 - append it to the dom in fact if i were
29:47 - being strict and wanted to make this
29:49 - more equivalent in order to add a class
29:51 - name i can just add a class name as if
29:53 - this were an html element again this is
29:56 - class name instead of class for a good
29:58 - reason which we'll talk about but that's
30:00 - a pretty minor difference to be able to
30:02 - do all of these lines of code in one
30:05 - single section right here and that
30:07 - difference is going to compound as we
30:09 - get into more and more complicated uis
30:12 - like we see here so at this point i
30:14 - could probably continue talking about
30:16 - different reasons that we're choosing to
30:17 - use react and that it will be really
30:19 - beneficial for you to learn react as you
30:21 - see on my little list here it's a very
30:23 - hierable skill and it's actively
30:25 - maintained by really skilled people at
30:27 - facebook however at this point i think
30:29 - we're overdue to just jump into the
30:31 - syntax get your hands on the keyboard
30:33 - and start learning and practicing react
30:35 - so when you're ready let's keep moving
30:37 - forward
30:40 - okay let's finally address this elephant
30:42 - in the room what we're looking at here
30:44 - why we have what looks like html stuffed
30:47 - right inside our javascript well fairly
30:49 - early on in the days of react the react
30:52 - team created a syntax that's called jsx
30:56 - jsx stands for javascript xml but that's
31:00 - not terribly important for you to
31:02 - memorize what's most important is to
31:03 - think of it as sort of a flavor of
31:06 - javascript that looks a lot like html
31:09 - and with the introduction of jsx into
31:12 - react it really made it so that react
31:14 - was very declarative instead of
31:17 - imperative
31:18 - we can see up above what it took for us
31:20 - to create an h1 give it some text
31:22 - content and give it a class name in
31:24 - regular vanilla javascript but with jsx
31:27 - the benefit is that we can just write
31:30 - what we're already used to writing with
31:31 - html now there's a couple of small
31:34 - differences for example instead of using
31:36 - class i need to use class name so i
31:39 - might say class name equals header for
31:42 - example and there's a few other of these
31:44 - but for the most part with jsx we can
31:46 - just write the html that we're used to
31:49 - writing at first it might be a little
31:51 - bit confusing to write your html inside
31:54 - of your javascript but i promise as you
31:56 - start doing react it's really going to
31:58 - start making sense you're going to learn
31:59 - to love jsx now one thing that was
32:02 - really helpful for me to understand as i
32:04 - was learning was to see the difference
32:06 - between what jsx is and what our regular
32:09 - dom elements are so i'm going to do a
32:12 - few things i'm going to uncomment these
32:14 - lines of code here
32:16 - and i'm also going to take this piece of
32:18 - jsx
32:20 - and
32:21 - set it to a variable we'll call it
32:23 - element then i can fix my
32:25 - reactdom.render by just putting element
32:27 - down here and this will work exactly the
32:29 - same
32:30 - but this allows us to console.log it so
32:33 - let's console.log element and i'll hit
32:35 - save so that this code will run i'll
32:37 - open the console and we'll see the
32:39 - differences here first of all on line
32:41 - four we are console logging the dom
32:43 - element that we created with
32:45 - document.createelement
32:47 - and that's what shows up in our console
32:50 - as what looks like an html
32:54 - element here so that's this line right
32:56 - here however when we console.log our
32:59 - element that we created with jsx what
33:02 - actually got returned to us was this let
33:05 - me copy this out
33:09 - and we can see that this is just a
33:10 - regular javascript object let me clean
33:13 - it up just a little bit to make it even
33:15 - more clear
33:16 - so in the end what we get from jsx or
33:19 - rather what react is creating with jsx
33:23 - is actually just plain old javascript
33:26 - objects and those objects describe the
33:29 - dom element that we want react to put
33:32 - onto the page for us and if we look
33:34 - closely we can see some interesting
33:36 - information here first of all we see
33:39 - that
33:40 - it has very similar properties like we
33:43 - have class name where we're setting that
33:45 - to header and down here we have props or
33:48 - short for properties and we have class
33:50 - name we also have something called
33:52 - children and we can see that's actually
33:54 - the text that we put inside of our h1
33:57 - that's about all i care to touch on with
34:00 - the
34:01 - object nature of react elements but i
34:03 - thought it would be helpful to kind of
34:05 - kick us off understanding that jsx is
34:09 - kind of like a function
34:10 - that when it's run
34:12 - returns us objects that react can
34:15 - interpret and use to create actual
34:18 - elements that get put on the screen for
34:20 - us
34:21 - i'm going to comment this out so we can
34:23 - talk about one more thing clean up this
34:25 - a little bit
34:27 - and i'll go ahead and put this directly
34:29 - back in line to my react dom.render move
34:32 - these onto their own lines the last
34:35 - thing that i wanted to touch on was that
34:37 - with jsx we need to make sure that we
34:40 - are only returning a single parent
34:42 - element in other words i can't take this
34:45 - one h1 and place say a paragraph
34:49 - directly next to it
34:51 - because in this case we're rendering or
34:53 - attempting to render two sibling
34:55 - elements that sit side by side in fact
34:58 - if i try to run this you can see react
35:00 - complains and i guess in this case it
35:02 - says unknown error sometimes it will say
35:04 - that you have to wrap the elements that
35:06 - you're trying to render in some kind of
35:08 - parent element now this doesn't mean
35:10 - that i can't put two elements on my page
35:12 - at any given time it just means that i
35:14 - need to wrap them
35:16 - in something like a div for example
35:20 - so if i say a div that has an h1 and a
35:24 - paragraph inside
35:25 - now i am rendering just one parent
35:28 - element and it doesn't really matter how
35:30 - many children elements are included as
35:33 - long as i have one parent element that
35:34 - i'm rendering so i can hit save we'll
35:37 - see that this is working just fine
35:40 - now remember how i was able to save my
35:43 - h1 as a variable well i can actually
35:46 - save a whole collection of jsx for
35:48 - example this div with the h1 and the
35:51 - paragraph
35:52 - as a variable
35:54 - so let's say const page equals and then
35:57 - i can paste in my elements here now to
35:59 - me this looks a little bit crazy so
36:02 - normally what i like to do is move my
36:05 - elements my jsx onto their own lines as
36:07 - if this were html but in that case i
36:10 - need to go ahead and wrap everything in
36:12 - parentheses
36:14 - now take a second and think how is it
36:16 - that i can then fix what i have down
36:18 - here we can see we have a syntax error
36:20 - how can i fix this so that when i
36:22 - refresh the page this is still working
36:25 - pause here and see if you can figure out
36:27 - how to make this work again
36:36 - well all of my jsx is being saved under
36:39 - the variable of page so i should just be
36:41 - able to put page here and hit refresh
36:44 - and sure enough that's working just fine
36:46 - hopefully some of you were kind of
36:47 - curious to see what this looks like as a
36:49 - javascript object if we console.log page
36:53 - we can see that essentially we got what
36:55 - we had last time but this time it's a
36:57 - little more involved specifically in the
37:00 - children property of our div we see that
37:03 - there's other react elements in there
37:06 - i'm not going to dive too deep into that
37:08 - feel free to copy and paste what you see
37:10 - in the console maybe clean it up a
37:12 - little bit and analyze it but the point
37:14 - is i can save a whole bunch of jsx into
37:18 - a single variable and then use that
37:20 - variable kind of like any other variable
37:22 - and the key is that's because what i'm
37:25 - getting back when i write my jsx is just
37:28 - a javascript object okay i'm going to
37:30 - clean this page up a little bit
37:33 - and i'm going to comment out our page
37:35 - because i'm going to give you a
37:37 - challenge
37:38 - okay i left our example of const page up
37:42 - here just for reference but i did delete
37:45 - our code that we had at the bottom which
37:47 - actually enabled us to put something on
37:49 - the screen and that's because i want you
37:50 - to practice it again so your challenge
37:52 - is to create a navigation bar using jsx
37:56 - i've given you some instructions here on
37:57 - what the content should actually be and
37:59 - as i mentioned at the very end don't
38:01 - worry about styling yet we're going to
38:02 - cover styling soon but for now what
38:04 - you're going to have is just going to
38:05 - look like plain html that's unstyled so
38:09 - pause the screencast here and see if you
38:11 - can complete this challenge
38:19 - okay before i worry about the react dom
38:22 - dot render bit i'm going to create a new
38:24 - variable we'll call it p actually let's
38:26 - call it nav bar
38:28 - and i'm going to use my parentheses so
38:30 - that i can start my element on the next
38:32 - line and like i mentioned we want to use
38:35 - the
38:36 - semantic nav element
38:39 - and inside of there i'm going to have an
38:41 - h1
38:43 - let's call it
38:45 - bob's bistro
38:46 - maybe this is a restaurant okay and then
38:49 - we have an unordered list
38:52 - and hopefully while you were playing
38:53 - with this you came to realize that it
38:54 - doesn't matter how nested i get just
38:56 - like in html i can nest this as deep as
38:59 - i want
39:00 - we'll create
39:01 - three
39:02 - list items
39:05 - and it said pricing
39:07 - about
39:09 - and contact and i don't know maybe if
39:11 - this is a restaurant i'll say menu
39:13 - instead of pricing okay i've got my jsx
39:15 - for my navbar setup and then the last
39:18 - bit which was just meant to be something
39:20 - repetitive that allows you to get some
39:23 - muscle memory for this is to use
39:25 - reactdom.render and the first parameter
39:28 - is what do i want to render and that's
39:30 - my navbar jsx
39:32 - and the second thing is where do i want
39:34 - to render it i'm going to do that by
39:36 - selecting with get element by id
39:39 - my div with the id of root that is over
39:41 - in my index.html right there
39:45 - okay i should hit save and sure enough
39:48 - it's pretty ugly obviously we want to
39:50 - style this we're going to get to that
39:52 - soon i hope that challenge went well for
39:54 - you if you struggled please don't keep
39:56 - pushing forward go back re-watch this
39:58 - lesson see if you can do this again from
40:01 - scratch or maybe just try typing it 10
40:03 - or 15 times if you need to also if you
40:06 - get totally stuck don't forget that this
40:08 - is a community you can reach out on
40:10 - discord ask your question and you are
40:12 - more than likely to get a really
40:14 - friendly helpful response back when
40:16 - you're feeling pretty good about this
40:18 - let's keep moving forward
40:22 - okay at this point it's probably time
40:23 - for us to switch away from the easy way
40:26 - of getting react set up in our project
40:28 - to the more correct way now inside of
40:31 - scrimba that means something different
40:33 - than it means inside of your own local
40:35 - environment scrimba has kind of some
40:38 - magic that's happening under the hood
40:39 - that's helping react just kind of work
40:42 - in our project so i'm going to show you
40:44 - a couple steps for how i do this in
40:47 - scrimba you won't really have to worry
40:49 - too much about that because even when
40:50 - you're creating your own new scrim in
40:52 - scrimba it'll just ask you what type of
40:55 - scrim you want and you'll just tell it
40:57 - that it's a react scrim and it'll set
40:59 - everything up for you so what i need to
41:00 - do is in my index.html i'm actually
41:03 - going to remove all of my unpackaged.com
41:07 - cdn's here
41:09 - so i can get rid of these three lines
41:12 - and i don't need this type text babel
41:14 - anymore because i'm not pulling in babel
41:17 - and instead over here on the left i'm
41:20 - going to add the dependencies that i
41:22 - need and i need react
41:25 - and i need react dash dom
41:28 - if you're a little bit more familiar
41:29 - with developing in javascript you might
41:32 - recognize that these dependencies are
41:34 - similar to having a package.json where
41:36 - you install these packages through npm
41:39 - if pretty much everything i just said
41:41 - doesn't make sense don't worry about it
41:42 - at all i am going to talk about
41:44 - different options for local setup later
41:47 - if you absolutely need to follow along
41:50 - in your local environment instead of
41:52 - here on scrimba.com you can continue to
41:54 - use the cdn way that we were just using
41:56 - like this but otherwise i just recommend
41:59 - doing things here inside of scrimba our
42:01 - main focus is not going to be how to set
42:04 - up react but rather how to write react
42:08 - so i will take those back out and now
42:10 - that i have taken those cdns out it
42:13 - means that i no longer have global
42:15 - variables added to my window like react
42:18 - dom so if i try to save this we're going
42:21 - to see i have an unexpected token angle
42:23 - bracket
42:24 - and that's because well it doesn't know
42:27 - what react is at all what i need to do
42:29 - now is actually import react
42:33 - from react
42:35 - this might not seem like it's doing
42:36 - anything because i'm actually not
42:38 - referencing react anywhere here i've got
42:41 - react dom but that's something different
42:43 - however react is where the jsx syntax is
42:46 - defined and so i need to import react in
42:49 - order for this to work at all now the
42:51 - astute among you might be familiar with
42:53 - the fact that with react version 17 i
42:56 - technically don't need to import react
42:58 - however currently at the time of this
43:00 - recording scrimba is not yet set up to
43:03 - support the fact that react version 17
43:06 - and above no longer requires you to
43:08 - import react in order for jsx to work so
43:11 - anyway throughout the duration of this
43:13 - course i will be using import react from
43:15 - react and that's because well i need to
43:18 - in this environment currently let's hit
43:19 - save again and see what we run into next
43:22 - and this says cannot use import
43:23 - statement outside of a module and oh you
43:26 - know what i think that has to do with
43:28 - another sort of magic piece that is
43:30 - happening under the hood with scrimba so
43:32 - i'm going to add this.pack that's not
43:34 - something you'll need to do in the real
43:35 - world so this should be yep react dom is
43:39 - not defined that's the error i expected
43:41 - to see and that's because whenever we're
43:43 - using react dom i will also need to
43:46 - import
43:47 - react dom from react
43:49 - dom
43:50 - and now fingers crossed i should get
43:53 - something that works again okay there we
43:55 - go we're back on the screen and
43:57 - everything is set up a little more
43:59 - similar to how you normally would see a
44:01 - react project setup don't be overly
44:04 - concerned with all of these
44:05 - implementation details however this is
44:07 - how i'm going to be setting up my
44:09 - projects from here on
44:11 - and at this point we actually have
44:12 - enough knowledge for us to start working
44:14 - on this section's project which is a
44:17 - static html page in react however before
44:20 - we jump into that i want to exercise
44:22 - your brain with a little thought
44:23 - experiment and we are going to do that
44:25 - in the next screencast
44:29 - i'd like to do a quick thought
44:30 - experiment with you and that is to
44:32 - figure out why we're using react dot
44:35 - render instead of just using the dom
44:38 - append method that you've probably used
44:40 - before in javascript i've written the
44:42 - first line for you and that's to import
44:44 - react from react that will just allow
44:46 - you to write some jsx your challenge as
44:50 - you can see in this little four step
44:51 - process here is to create just a really
44:54 - simple sample page in jsx it has to be
44:57 - greater than or equal to four elements
44:59 - just to get your fingers working a
45:01 - little bit and i want you to save that
45:03 - jsx to a variable remember that that
45:06 - variable needs to be one parent element
45:09 - with some children elements nested
45:11 - inside of it in other words we can't
45:13 - just have two sibling elements saved in
45:15 - a variable in jsx then i want you to
45:18 - select the div with the id of root using
45:21 - whatever selector you want to use and
45:23 - then use dot append to append your jsx
45:26 - if you need to do a quick google search
45:29 - for how to use dota pen that's totally
45:31 - fine and then before you run your code i
45:33 - want you to see if you can guess what's
45:34 - going to show up in the browser before
45:36 - you run the code and then run your code
45:39 - and see if you can explain what does
45:41 - show up in the browser pause here and
45:43 - play around with this a bit
45:51 - okay well let's create our jsx we'll say
45:53 - const page equals and i'll open my
45:56 - parentheses so i can write my jsx on its
45:59 - own line
46:00 - and we'll start with a div
46:03 - just to surround everything
46:06 - and i don't know let's say i'm making a
46:08 - page about
46:10 - why i
46:11 - love react we'll say this is my awesome
46:14 - website in react
46:16 - and then maybe in h3 that says
46:20 - here are the reasons i love react
46:24 - and we'll use an ordered list
46:30 - it's not terribly important what you
46:32 - actually put in here
46:33 - i'll just use some of the reasons that
46:35 - i've been talking about it's composable
46:38 - it's declarative
46:42 - it's a very hirable skill to have
46:45 - let's see i need to get rid of this
46:49 - and
46:51 - it's very actively maintained by some
46:54 - very skilled people
46:57 - again the jsx you chose to put in here
46:59 - is not terribly important so we'll use
47:02 - document.getelementbyid
47:04 - root and then
47:05 - use the dom
47:07 - nodes append method
47:10 - to append our page
47:12 - and we'll see what shows up here now of
47:14 - course i know what's going to show up so
47:15 - i'm just going to run the code and we
47:17 - see that we get object object this
47:20 - object object is sort of a string
47:22 - representation of a regular javascript
47:25 - object something i can do to actually
47:28 - make that object appear is to stringify
47:30 - it using json so i can actually say
47:32 - json.stringify
47:36 - and we will stringify that object so
47:38 - that it puts json on the page i'll hit
47:40 - save
47:41 - and look at that we get a javascript
47:43 - object
47:44 - now
47:45 - step four see if you can explain why
47:48 - this actually shows up in the browser
47:50 - well kind of the whole purpose of this
47:52 - thought experiment was to remind you
47:54 - that jsx returns plain javascript
47:57 - objects at this point in time it has
47:59 - nothing to do with the dom it's not
48:02 - recognized by the browser as anything
48:05 - important dealing with the dom it's only
48:07 - when we try to render it using react
48:10 - dom.render that react can take these
48:13 - javascript objects and actually turn
48:15 - them into real dom elements that the
48:17 - browser can interpret as things like
48:20 - first level headers or ordered lists
48:23 - so let's go ahead for the sake of
48:25 - practice and fix this i'm going to
48:27 - update our challenge here
48:32 - okay simply put your challenges to fix
48:34 - our code and don't forget we're not
48:36 - using those cdns in our html anymore
48:38 - which is what used to give us a global
48:40 - variable called react dom so you'll have
48:43 - to see if you can remember how we get
48:45 - access to react dom pause the screencast
48:47 - here and try to fix our code
48:56 - in order to use react's dom i will need
48:59 - to import it and we'll import it from
49:02 - the react dom package
49:04 - then instead of selecting my div with
49:06 - the id of root actually i'm going to
49:09 - need that anyway so i will leave that
49:11 - code there i'll say react dom
49:13 - dot
49:14 - render the thing i want to render is my
49:18 - page so we'll put page and the where i
49:21 - want to render it is
49:23 - inside of that div with the id of root
49:26 - i'm going to comment this out so it
49:27 - doesn't break it we'll hit save and
49:30 - there we go awesome so simply put react
49:33 - dom's job or the react dom.render
49:36 - methods job is to take react elements
49:40 - and interpret them in a way that turns
49:42 - them into real dom elements that the
49:45 - browser can understand
49:47 - okay with that understanding it's only a
49:49 - small jump to work on our section
49:51 - project which is to build a static page
49:53 - in react we're going to start the first
49:55 - steps of that in the next screencast
49:59 - okay we're finally at our first
50:01 - challenge i'm really excited to start
50:03 - working on this i've included a google
50:06 - slide of what you're aiming for with
50:08 - this challenge notice there's really no
50:10 - styling being applied here at all it's
50:12 - just bare html so if we go look at the
50:16 - challenge essentially you are starting
50:18 - completely from scratch and your job is
50:20 - to build the html for our section
50:23 - project as you see it here we'll be
50:25 - adding just a little bit of styling to
50:27 - it later after we learn how to do that
50:29 - and i've included a couple hints here
50:31 - for simplicity i've imported the react
50:34 - logo file directly into our file
50:37 - explorer here which means that you can
50:39 - reference it in your image element that
50:42 - you create with source equals and then
50:44 - using a dot slash react dash logo dot
50:47 - png i also have a hint here about how to
50:50 - set the width attribute just remember
50:52 - that jsx is almost identical to html and
50:56 - in fact for what you're working on here
50:59 - you really shouldn't see any difference
51:01 - between the jsx that you'll write and
51:03 - what you would normally write in html
51:05 - don't forget that we are no longer using
51:08 - our cdns so you'll have to remember how
51:10 - to bring in react react dom and so forth
51:14 - that's all the hints i'm going to give
51:15 - you so pause the screencast here and
51:17 - work on this challenge
51:25 - well first things first let's import
51:28 - react from react and import react
51:32 - dom from react-dom
51:35 - we can't really do anything until we've
51:37 - done that
51:38 - then i'm going to save a variable called
51:40 - page and as a heads up
51:42 - this isn't actually going to be a very
51:44 - common way for us to deal with jsx we're
51:47 - going to see very soon how we can do
51:49 - this in a more conventional way for the
51:51 - sake of learning though i think this is
51:52 - a good way for us to start just to do a
51:55 - bit of a sanity check i'm going to just
51:57 - throw an h1 in here
52:00 - it says testing and then do my last step
52:04 - which is reactdom.render
52:07 - and we want to render our page
52:10 - and we want to put it at the
52:13 - div with the id of root
52:15 - let's see if that's working okay cool we
52:17 - have testing showing up that means that
52:19 - everything else is set up correctly
52:21 - okay so let's start building our page
52:23 - here i'm going to surround everything in
52:26 - a div
52:27 - just because i can only have one element
52:30 - here rather one parent element here
52:32 - instead of any sibling elements and the
52:35 - first thing i'll put in is an image and
52:38 - just like in html i can provide an image
52:40 - source and like i mentioned up in the
52:43 - hints i'm going to have
52:45 - react dash
52:47 - logo.png
52:48 - the dot slash just means look in the
52:51 - same folder for a file called
52:53 - reactlogo.png
52:55 - now if i refresh this i'm going to get a
52:58 - pretty large image here so just like in
53:01 - html i can set the width to be something
53:04 - specific like 40 pixels
53:07 - and that looks a little more manageable
53:09 - a little less crazy not taking up my
53:10 - whole screen next i've got something
53:13 - that looks kind of like an h1 that says
53:15 - fun facts about react so we will add
53:19 - that in there
53:22 - and awesome now because my h1 is a block
53:25 - element it has floated below my image
53:28 - even though my image is technically an
53:30 - inline element
53:32 - and that's kind of to be expected or
53:33 - rather that's what we're aiming for and
53:35 - then it looks like the last thing is an
53:38 - unordered list with these five list
53:40 - items so i'll go ahead and add that
53:43 - unordered list
53:46 - do some list items
53:48 - i'm going to hold shift option down to
53:50 - copy these lines
53:53 - and then just start typing in some of
53:55 - these facts
54:02 - okay and yeah these are some pretty
54:04 - interesting facts about react i'll hit
54:06 - save and awesome it looks like we
54:08 - essentially got to where we wanted to
54:10 - get to with our goal here i'll go ahead
54:12 - and clean up some of my comments up here
54:15 - from the challenge and great work
54:18 - hopefully you were able to follow along
54:19 - with that now like i mentioned saving
54:22 - all of our jsx to a single variable like
54:25 - this actually isn't really that common
54:27 - nor is it convenient at all so what
54:30 - we're going to start covering is a much
54:31 - more common way and that is by creating
54:34 - custom components before we jump into
54:36 - that i want to give you a quick quiz
54:38 - over the topics that we've talked about
54:40 - so far and we will do that in the next
54:42 - screencast
54:46 - before jumping right into the next topic
54:48 - i thought it would be smart to have a
54:50 - quick little pop quiz on some of the
54:53 - topics that we've covered up to this
54:54 - point because this is scrimba you can
54:57 - just click into this quiz.md file and
54:59 - answer the questions here so pause the
55:02 - screencast and work on this quiz
55:11 - why do we need to import react from
55:12 - react in our files well it's because the
55:15 - jsx syntax is defined in react and if we
55:19 - were to remove react we would see that
55:22 - it's telling us react is not defined
55:24 - even though we're not using react in our
55:26 - code the jsx here sort of demands that
55:30 - react be a part of our code base so i
55:33 - will go type that over here
55:36 - react is what defines jsx so in order to
55:39 - use jsx we need to import react if i
55:42 - were to console log the page in our
55:45 - index.js file what would show up
55:47 - hopefully you actually attempted to
55:48 - answer this question before just going
55:50 - ahead and console logging it before i
55:52 - hit save i know that page is a bunch of
55:55 - jsx which in reality just returns some
55:58 - javascript objects so when i console.log
56:01 - page i should just see a javascript
56:03 - object here and sure enough there it is
56:06 - if you look closely at that object
56:07 - you'll see a children property and that
56:09 - children property has more react
56:11 - elements nested inside well that's
56:14 - because we have our react element here
56:16 - with children that are more
56:19 - react elements
56:20 - so over here we can say
56:24 - a javascript
56:25 - object
56:27 - these are react elements
56:30 - that describe
56:32 - what react
56:34 - should eventually add to the real dom
56:38 - for us
56:39 - okay number three what is wrong with
56:40 - this code hopefully you noticed that our
56:43 - jsx here is two sibling elements and
56:47 - remembered
56:48 - that we actually need
56:51 - all of our jsx to be nested under a
56:53 - single parent element
56:56 - as a quick sneak peek in the future you
56:58 - may learn that you can use something
57:00 - that looks like an empty tag like this
57:03 - in order to wrap your jsx in something
57:06 - that doesn't actually create another
57:08 - parent element these are called
57:10 - fragments but that's more a little piece
57:13 - of trivia we're not going to concern
57:14 - ourselves too much with that in this
57:16 - course
57:17 - next is number four what does it mean
57:19 - for something to be declarative instead
57:21 - of imperative
57:23 - the way we described it before was to
57:25 - say that declarative programming meant i
57:27 - could tell the program what to
57:29 - accomplish and it would know how to
57:31 - accomplish the specific step-by-step
57:33 - details whereas imperative meant i still
57:36 - needed to tell the computer step by step
57:39 - how to do everything an example i like
57:41 - to think of this is to imagine myself
57:44 - asking a friend to make a peanut butter
57:46 - and jelly sandwich for me if i were
57:48 - doing that declaratively i could simply
57:50 - say could you make me a peanut butter
57:52 - and jelly sandwich and i would assume
57:54 - that they knew how to take care of the
57:55 - individual steps to do so if i were
57:58 - being imperative on the other hand i
58:00 - would have to tell them to grab a slice
58:02 - of bread with their fingers and place
58:04 - that slice of bread gently on a plate
58:06 - then to grab a knife from the drawer and
58:09 - to put the knife into a jar of peanut
58:11 - butter and so forth there certainly are
58:13 - times when something imperative is
58:15 - warranted however generally speaking
58:18 - writing code declaratively is a much
58:20 - better developer experience and honestly
58:23 - usually leads to fewer bugs in the end
58:25 - so declarative
58:27 - means i can tell the computer
58:31 - what to do
58:33 - and expect it to handle the details
58:38 - imperative
58:39 - means i
58:41 - need to tell it how
58:44 - to do each step
58:46 - and lastly what does it mean for
58:48 - something to be composable well that
58:50 - just means that i can create small
58:52 - pieces that i put together to make a
58:55 - greater whole in terms of web
58:57 - development it means i can take pieces
58:59 - of my ui my user interface and put them
59:02 - into their own components and then piece
59:05 - those components together to build my
59:07 - page so what does it mean for something
59:09 - to be composable means that
59:12 - we
59:14 - have small pieces that we can put
59:17 - together
59:18 - to make something
59:20 - larger
59:21 - and i'll even say greater
59:24 - than the individual pieces
59:26 - this is a pretty broad definition of
59:28 - composable because the idea and concept
59:31 - of composability extends throughout all
59:33 - of computer programming not just web
59:35 - development and especially not just
59:37 - react but i think we've gotten the point
59:39 - across i'm really excited to keep moving
59:41 - forward we are now going to jump into
59:44 - sort of the baseline level of react and
59:46 - start learning how to create our own
59:48 - components and it's just going to get
59:50 - more and more exciting from there so
59:52 - strap yourselves in and let's keep
59:53 - moving forward
59:57 - when we talked about composability being
59:59 - one of the major benefits of react we
60:02 - talked about the possibility in react to
60:04 - create our own custom components
60:06 - what we currently have going on is we're
60:09 - saving our jsx elements here or react
60:12 - elements in a variable and then
60:14 - rendering that variable directly with
60:16 - reactdom.render
60:18 - and although this has been working for
60:19 - us so far it doesn't allow us a lot of
60:22 - flexibility when it comes to creating
60:24 - our own components in react and even
60:26 - further it's also pretty obvious we
60:28 - wouldn't want to take all of our markup
60:30 - and stuff it directly into
60:32 - reactdom.render
60:33 - even though i think technically this
60:35 - might work just fine actually i'm
60:37 - curious let's give this a shot i'll
60:39 - comment this out
60:41 - okay so everything is technically still
60:43 - working but we run into the same issue
60:45 - as we used to in kind of the old days of
60:48 - creating html code where if we're trying
60:50 - to stuff everything into one place
60:53 - not only do the elements not become
60:54 - reusable but it becomes really difficult
60:56 - to maintain as a developer so creating
60:59 - our variable up here got us one step
61:01 - closer but it's still not quite good
61:03 - enough instead what we are going to
61:05 - start learning about is creating our own
61:06 - custom components now i give you a taste
61:09 - of this early on in the course but we're
61:10 - going to actually learn it the real way
61:12 - now
61:13 - in programming the concept of a function
61:15 - is one that allows us to write some code
61:18 - that we can then execute over and over
61:20 - and over again just by calling that
61:23 - function and react adopts the same
61:25 - concept of having a function that allows
61:28 - us to create user interface or create
61:31 - elements over and over and over again if
61:33 - we wanted to
61:34 - knowing how functions work it's really
61:36 - tempting to say okay well i'm going to
61:38 - create a function and let's give it a
61:40 - temporary name for just a second
61:42 - and we might say well i have a function
61:45 - and i want it to return my ui my
61:48 - elements here anytime that function gets
61:51 - called
61:52 - so i might try something like this let
61:55 - me get rid of page here and then instead
61:58 - of page
61:59 - we might say well let's call our
62:01 - temporary name function and that is
62:04 - going to return the react elements that
62:06 - we asked it to and therefore we have a
62:08 - function that we can reuse well let's
62:10 - see what happens
62:12 - look at that it actually worked and what
62:15 - we have here is basically 90 of the way
62:18 - into creating our own custom components
62:21 - a function like this that returns react
62:24 - elements is considered in react a
62:26 - component however there's a couple of
62:27 - conventions that we need to follow for
62:29 - everything to work correctly all the
62:31 - time the first one is we need to use
62:33 - pascal case instead of camelcase for our
62:36 - component names all that means is i need
62:38 - to capitalize the first letter of my
62:40 - component and secondly instead of
62:43 - calling this function with parentheses
62:45 - like we might be used to we actually
62:47 - need to wrap it in angle brackets
62:49 - similar to an html element and i still
62:52 - need to change this to a capital letter
62:54 - there and that's the only changes we
62:57 - need to make from a regular javascript
62:59 - function that you have probably written
63:00 - hundreds of by now and a react component
63:03 - that uses the same concept of functions
63:06 - to create reusable user interface pieces
63:08 - you'll see if i hit save everything is
63:11 - still working as we would expect
63:13 - okay maybe you can feel it it's time for
63:16 - a practice i'm actually going to erase
63:18 - everything because you are going to
63:20 - write everything again from scratch
63:22 - first i'll write out the challenge for
63:23 - you
63:24 - okay i've erased our code and saved it
63:27 - so that our page went away this
63:28 - challenge is going to be given to you in
63:30 - two parts the first part is to create an
63:32 - ordered list that enumerates the reasons
63:35 - why you're excited to be learning react
63:37 - don't spend too much time trying to come
63:39 - up with a huge list just put a few
63:41 - things in an ordered list and then i
63:43 - want you to render your list to the page
63:46 - this is going to require you to remember
63:48 - all of the steps that we've learned so
63:49 - far on the basics of setting up a react
63:51 - app so pause the screencast and work on
63:53 - part one of this challenge
64:00 - to get started we need to import react
64:02 - from react i need to spell react
64:06 - correctly there and we'll import react
64:08 - dom from react-dom
64:11 - we'll go ahead and use react dom to
64:14 - render
64:16 - let's start with just some inline
64:18 - jsx here we'll say
64:21 - it's working
64:22 - and i need to select my
64:25 - root element
64:27 - as the place to put this h1
64:30 - hit save as a sanity check and we know
64:32 - it's working awesome now the meet we are
64:35 - going to create our own custom page
64:37 - component by using a function called
64:40 - page using a capital letter to begin and
64:42 - this function is simply going to return
64:45 - some ui or in other words some jsx that
64:48 - we can put in the page
64:50 - just as another little sanity check i'm
64:52 - just going to remove the h1 here and put
64:55 - it inside my page component
64:57 - and then render
64:59 - my page component as we've learned
65:02 - and i refresh and everything is still
65:04 - working and just to make sure i'll just
65:06 - make a change i'll say it's still
65:08 - working
65:10 - okay so now the next part we are going
65:12 - to turn this into an unordered no an
65:15 - ordered list
65:17 - and we'll just put a few
65:19 - list items in here and let's see these
65:22 - are reasons that we're excited to be
65:24 - learning react maybe for one it's a
65:27 - popular library
65:30 - so
65:31 - i'll be able to fit in with
65:34 - the cool kids
65:37 - this probably has a pretty loose
65:39 - definition for what the cool kids are
65:41 - but that's okay
65:43 - okay we'll
65:44 - put a second item here
65:48 - and just so you can see everything i'm
65:49 - gonna move this onto its own line there
65:51 - we'll say i'm
65:53 - more likely to get a job as a developer
65:57 - if i know react
65:59 - and hopefully you have some other good
66:01 - reasons i'm gonna leave it at that for
66:03 - now just for the sake of learning i'll
66:05 - go ahead and refresh and there we go
66:06 - we've got our two pretty ugly unstyled
66:09 - elements that we have on the page but it
66:11 - seems to be working okay nice work on
66:14 - part one of the challenge in part two of
66:15 - the challenge which will be in the next
66:17 - screencast we're going to add a little
66:19 - bit more to our simple page here however
66:21 - before moving on if any part of this was
66:23 - still confusing for you i really
66:25 - encourage you to go back try to re-watch
66:27 - some of these videos you could even
66:29 - start from the beginning maybe you'll
66:30 - have some additional context that will
66:32 - help in your understanding and as always
66:35 - reach out to the scrimba community on
66:37 - discord if you have any questions people
66:39 - are always happy to answer but don't
66:41 - just plow forward if you're still
66:42 - feeling confused do some research
66:45 - re-watch some of the videos make sure
66:47 - you're doing all of the challenges and
66:49 - then when you're ready let's go forward
66:50 - and we'll work on part two
66:55 - the next part of our challenge is to add
66:56 - some more elements to our page here
66:59 - first i want you to add a header element
67:01 - with a nested nav element inside and
67:04 - then inside the nav you'll have a nested
67:07 - image element with the source that i've
67:09 - mentioned here and some other notes that
67:11 - you should read through i also want you
67:12 - to add an h1 element that will go below
67:16 - the header element but above the ordered
67:18 - list and at the very bottom underneath
67:21 - the ordered list i want you to add a
67:22 - footer element with some text that i
67:25 - have here make sure to read through the
67:27 - whole challenge there so you get a
67:29 - better idea of what you need to be
67:30 - working on and as always pause the
67:32 - screencast here and work on this
67:33 - challenge
67:39 - one of the biggest tricks in this
67:41 - challenge is to make sure that you don't
67:42 - just try to add a header hopefully that
67:45 - didn't cause too many headaches for
67:47 - anyone but the biggest problem with this
67:49 - is that again i'm trying to create two
67:52 - sibling jsx elements here
67:55 - one with the header and one with the
67:56 - ordered list inside of a component i
67:59 - just can't do that i have to have one
68:01 - parent component so i could either use
68:03 - those fragment tags that i briefly
68:06 - mentioned earlier like this
68:08 - or a lot of times you'll see people just
68:10 - wrap it in a div like this
68:15 - now that i've done that everything is
68:17 - working again the way i'd expect inside
68:20 - of my header
68:21 - i'm going to include a nav element
68:25 - nav is just basically an html5 semantic
68:29 - element that is basically the same thing
68:31 - as a div except it's better for screen
68:34 - readers and assistive technologies
68:36 - inside of my nav i'm going to have an
68:38 - image element
68:40 - and that one needs to have a source that
68:42 - i included up here so i'll just copy
68:44 - this
68:45 - and make sure i get that quotation mark
68:47 - there
68:49 - get rid of that extra space
68:51 - and let's just save this and see how
68:53 - things are looking okay and my react
68:55 - logo is huge so i'm going to give it a
68:57 - width of 40 pixels like i've done before
69:02 - okay that's more manageable next we need
69:05 - to add an h1 with some text describing
69:08 - the page like reasons why i'm excited to
69:10 - learn react we'll just copy that
69:13 - let's see that'll go underneath the
69:15 - header
69:16 - and we'll put an h1 there
69:18 - and i'll just paste that text in right
69:20 - there
69:22 - refresh it and okay that's starting to
69:24 - look good
69:25 - then at the very bottom so this is
69:28 - above this ending div because i still
69:30 - need it to be a part of my page
69:31 - component but below my ordered list i'm
69:33 - going to add a footer element
69:36 - and inside the footer we need to have
69:39 - this text here
69:42 - but we'll customize it to be relevant
69:44 - for me so currently it's 2021
69:48 - this is got semantic problems because i
69:51 - have those elements there and i'm going
69:53 - to call this zarol development because
69:55 - zero is my last name all rights reserved
69:58 - real official this is not going to be
69:59 - stolen by anyone for sure now that i
70:02 - have this footer here and let's go ahead
70:04 - and refresh this sometimes people will
70:07 - put this inside of a small tag i'm kind
70:09 - of just curious to see what that looks
70:11 - like
70:12 - i need to end this correctly and yeah i
70:14 - guess that looks a little better we'll
70:15 - leave it like that okay nice work now
70:18 - some of you may have been wondering well
70:20 - why am i just building everything as
70:22 - this monolithic page component i thought
70:25 - the whole reason that we were creating
70:26 - our own custom components is because
70:29 - then i can compose them together instead
70:31 - of just shoving everything into this one
70:33 - component and you would be right so in
70:36 - the next lesson we are going to learn
70:38 - how to compose these elements together
70:40 - learning the concept of parent and child
70:43 - components and so forth before we do
70:44 - that though i want to make sure that
70:46 - you've been awake and that you're
70:48 - following along we're gonna have a quick
70:49 - quiz so that is coming up next
70:54 - okay it's quiz time again read through
70:57 - the questions in the quiz actually click
70:59 - into the editor type down your answers
71:02 - and if you find yourself not knowing the
71:04 - answer to one of these don't just kind
71:06 - of plow ahead but instead actually do
71:08 - some research see if you can figure out
71:10 - on your own with google and whatever
71:12 - other resources you have available to
71:14 - you what the answer to the quiz question
71:16 - is before just moving on so pause now
71:18 - answer the questions to the quiz and
71:20 - then we'll go through them together
71:28 - all right number one what is a react
71:31 - component well basically put a react
71:33 - component is simply a function that
71:35 - returns
71:37 - react elements well what exactly are
71:40 - react elements react elements are the
71:42 - objects that get created when we return
71:45 - jsx so although this looks very much
71:47 - like html remember this is jsx which is
71:50 - a special syntax of react and under the
71:53 - hood it's returning a regular javascript
71:55 - object those objects are eventually
71:57 - turned into real dom elements that
71:59 - people can see on the screen so
72:01 - sometimes you'll hear people refer to
72:03 - this as ui or user interface and that
72:06 - just means that it's what the user can
72:08 - actually see on the screen and just like
72:11 - any other javascript function a
72:12 - component can be reused over and over
72:15 - here i'm creating a page component but i
72:18 - can run my page function so to speak or
72:21 - in other words create an instance of my
72:23 - page component by just rendering page
72:25 - again
72:26 - okay let's go to number two what is
72:28 - wrong with the following code it's a
72:31 - really small difference but it's an
72:32 - important one any components that you
72:34 - create need to begin with a capital
72:37 - letter this is called pascal case where
72:40 - it's essentially camel case but where
72:42 - the first letter is also capitalized
72:45 - basically anytime you might want to have
72:47 - i guess you could say different words in
72:50 - your component name like my component
72:52 - all you do is capitalize the first
72:54 - letter of the next word this would of
72:56 - course be instead of putting some kind
72:58 - of space in between there like in a
73:00 - regular sentence and then finally what's
73:02 - wrong with the code in number three
73:05 - hopefully this one wasn't too difficult
73:07 - to find but if you look way down here
73:09 - instead of calling our function like you
73:12 - might normally be used to by adding
73:13 - parentheses at the end with function
73:16 - components in react you instead surround
73:18 - these with the angle brackets as if it
73:20 - were a regular html tag and in react
73:24 - this is the correct way to i guess you
73:26 - could say call your component or create
73:29 - an instance of your component
73:31 - okay short and sweet nice job on that
73:33 - quiz hopefully you were able to follow
73:35 - along next we're going to move forward
73:38 - and see how we can do a better job of
73:40 - composing our components together
73:44 - as we've mentioned it's not ideal to be
73:47 - taking our entire markup and stuffing it
73:49 - into one component like we're doing here
73:52 - so let's learn through practice the
73:53 - concept of creating a parent and child
73:56 - component
73:57 - we're going to start this off by having
73:58 - you do a mini challenge so let me type
74:01 - out that challenge here
74:02 - okay your little mini challenge is to
74:04 - take the header element from our page
74:07 - and to put it into its own component
74:09 - that's called header technically
74:11 - speaking i'm not necessarily asking you
74:13 - to then render the header inside the
74:15 - page but if you want a little extra
74:17 - credit challenge you can render that
74:18 - header component that you just made
74:20 - inside of the page here pause now and
74:22 - work on this mini challenge
74:28 - okay just like it says we are going to
74:31 - create a separate header
74:33 - component here and we're doing this
74:35 - outside of page because they're
74:37 - different components
74:38 - and basically i can just cut out this
74:40 - whole header section
74:42 - and return it from my header component
74:47 - and that's really all the mini challenge
74:48 - was asking you to do now if you didn't
74:51 - try to do the little extra credit i gave
74:54 - you and render the header inside here i
74:56 - want you to think for a second what
74:57 - might that look like
75:00 - well just like we are creating our page
75:02 - component down here or rather we're
75:04 - creating an instance of our page
75:06 - component down here
75:07 - i can create an instance of my header
75:10 - component by just typing it out like
75:12 - this
75:13 - as if it were an html element amongst my
75:16 - other code
75:17 - and here we see the concept of
75:19 - composability in practice i've set aside
75:22 - some of my ui to be managed by a single
75:25 - header component and then anytime i want
75:28 - to essentially insert these elements
75:31 - into my page i can create an instance of
75:33 - my header component just like this
75:36 - now in a web page that's this small it's
75:39 - really not that necessary to do this but
75:42 - i'm sure you can imagine if this were a
75:44 - much larger application
75:46 - especially one that had pieces that had
75:49 - a lot of user interaction and so forth
75:51 - it becomes really really beneficial to
75:53 - move these things into their own
75:55 - separate components
75:57 - okay so that leads us to the next part
75:59 - of this challenge which i will type out
76:00 - now
76:02 - essentially i want you to do the same
76:04 - thing but now with the footer as its own
76:08 - component and the rest of the content as
76:10 - its own component pause now and work on
76:12 - this challenge
76:18 - okay just like before we'll create a new
76:22 - footer
76:24 - function or component here
76:26 - and it's going to return
76:30 - the footer content i'll just cut that
76:32 - out of there
76:34 - put it right here
76:36 - and down here in its place we will
76:38 - render the footer component
76:41 - okay and then we'll do the same thing
76:43 - for the
76:44 - main
76:46 - content component
76:49 - i'll take everything here including the
76:52 - h1
76:54 - and there's a little trick here because
76:56 - if you tried to just paste that in
76:58 - you'll notice that this is two sibling
77:00 - elements which again we can't just
77:02 - render side by side we need a parent
77:05 - element to surround them
77:08 - so i will put this div down there
77:11 - indent there
77:13 - and we will render an instance of our
77:17 - main content component
77:19 - now i should be able to refresh the page
77:21 - and essentially have the exact same
77:23 - thing
77:24 - of course now that i've wrapped this in
77:25 - a div very technically speaking these
77:28 - elements are now children of the div and
77:31 - the div exists right here on this level
77:34 - for my purposes now this div is not
77:36 - harming anything it's not changing my
77:38 - styling or anything
77:40 - so i'm not terribly worried about it
77:42 - so hopefully you can understand now the
77:44 - idea or the naming of parent child
77:47 - components we have a parent component
77:49 - which is our page component
77:51 - and just by virtue of it rendering other
77:54 - components these other components become
77:57 - by name children components
78:00 - and just like html this can go deeper
78:02 - and deeper down the rabbit hole i could
78:05 - have main content rendering another
78:07 - component that we have also made
78:10 - and then relative to main content that
78:12 - other component would be a child
78:14 - component and main content would be the
78:16 - parent component this really is no
78:18 - different than in our html how you can
78:20 - have different levels of parent child
78:22 - and even grandchild or whatever you want
78:25 - to call it nice work on this challenge
78:27 - you can see that we are now composing
78:29 - our page together of other components
78:32 - now we're pretty overdue in learning the
78:34 - ability to add some styling to our page
78:36 - so that's what we're going to work on
78:37 - next
78:40 - we're going to start off this lesson
78:41 - with a sort of mini challenge our goal
78:44 - is to add a navigation bar to our little
78:47 - site here and navigation items like this
78:50 - are usually handled with something like
78:51 - an unordered list with list items so
78:54 - that's your challenge underneath our
78:56 - image here your challenge is to add an
78:58 - unordered list with three list items for
79:00 - pricing about and contact in the end
79:03 - this will essentially be like adding
79:05 - some html to your page so this should be
79:07 - pretty quick pause the screencast and
79:08 - work on this challenge
79:17 - simply enough we can add an unordered
79:20 - list
79:22 - with our three list items
79:25 - for
79:26 - pricing
79:28 - about
79:29 - and contact
79:31 - let's hit save and see where we are okay
79:34 - pretty ugly but we're going to style
79:35 - this now fortunately styling something
79:37 - in react is as simple as adding classes
79:40 - just like you would in regular html the
79:42 - only difference you need to know about
79:44 - is that instead of using class equals
79:46 - we're going to use class name equals and
79:50 - that's because under the hood if you
79:51 - remember react is taking these jsx
79:54 - elements and turning them into native
79:56 - dom elements and just like when we were
79:58 - creating things in vanilla javascript we
80:01 - would say something like const unordered
80:02 - list equals document dot create element
80:06 - with unordered list as the type
80:09 - and then we would say ul dot class name
80:12 - equals something if we wanted to set the
80:15 - class name
80:16 - so in the end that's why we're using
80:17 - class name instead of class in react
80:20 - and so i will set the class name here to
80:22 - maybe nav dash items
80:25 - hit save and then in our style.css i can
80:28 - add
80:29 - nav items and maybe first let's take the
80:32 - list style off so we'll say list style
80:35 - of none and sure enough our bullets go
80:36 - away and that brings us to the next part
80:39 - of this challenge
80:41 - using flexbox i want you to line up the
80:43 - nav items horizontally so that they sit
80:46 - next to each other like this and then
80:48 - also using flexbox i want you to line up
80:50 - the unordered list with your newly
80:52 - horizontal list items to be in line with
80:55 - our logo so that everything is nice and
80:57 - aligned just like we have in this image
81:00 - in doing so i want you only to use css
81:02 - classes i don't want you to select any
81:04 - bare elements like the whole nav or
81:06 - anything like that mostly just so we can
81:08 - get some practice typing out class name
81:10 - pause the screencast and work on this
81:12 - part of the challenge
81:20 - well let's piggyback off our nav items
81:23 - class which we already have i should
81:25 - just be able to change the display to
81:27 - flex and sure enough that gives me all
81:30 - of my items in a row now let's put our
81:32 - list item in line with our logo image
81:35 - here and then we'll worry about some
81:37 - spacing between these items
81:39 - back in my code i'm going to
81:41 - probably give my nav a class name of nav
81:46 - of course i could have just selected the
81:47 - whole nav element but like i mentioned
81:50 - we're here to practice class names so
81:52 - i'll make a class name of nav
81:54 - and we'll select our nav let me hit
81:56 - refresh over here so that the styles
81:58 - will apply immediately
81:59 - and i'll give this a display of flex
82:02 - awesome our elements are in a line now
82:04 - because my nav only has two elements the
82:07 - image as the first element and the
82:09 - unordered list as the second element i
82:11 - guess i should say to direct children i
82:14 - can just use
82:15 - justify content
82:17 - space between to push that pricing about
82:21 - and contact items to the far right
82:23 - it also looks like our logo got a bit
82:25 - stretched that just kind of happens in
82:27 - flex containers so i'll say align item
82:30 - center and that should fix my aspect
82:32 - ratios of the image
82:33 - and then i'll go ahead and add a little
82:35 - bit of space between my list items there
82:37 - i know i mentioned using classes but in
82:40 - the case of list items i usually prefer
82:42 - to
82:43 - select the unordered list by its class
82:46 - and then just select all the list items
82:48 - that way i don't have to go in and add a
82:50 - class name to every single one of my
82:52 - list items
82:53 - let's just give those a padding of maybe
82:55 - 10 pixels okay that's looking pretty
82:57 - good now my image is looking a little
83:00 - bit small to me i want to make it bigger
83:01 - but oh yeah we added this width
83:03 - attribute but now that we know how to
83:05 - style with classes let's have sort of an
83:08 - impromptu third part of this challenge
83:11 - okay your task is to change the image
83:13 - styling to happen in the css instead of
83:16 - right here in line and of course for
83:18 - practice let's add a new class to the
83:20 - image just so you can style it that way
83:22 - pause the screencast and work on this
83:24 - part of the challenge
83:32 - simply enough we can take our width out
83:35 - which is going to make our image pretty
83:36 - huge if i refresh but we'll give it a
83:39 - class name let's call it nav dash logo
83:43 - and then we will select our nav logo and
83:46 - let's give it our width of 40 pixels
83:48 - again
83:49 - i have to hit refresh over here
83:51 - okay we're back where we were actually
83:53 - this logo is looking a little small let
83:54 - me try 60 pixels yeah i think i like
83:56 - that size better at this point i think
83:58 - it's a perfect opportunity for you to
84:00 - continue practicing styling this page
84:03 - obviously this page is really small in
84:05 - its scope and so before we just push
84:07 - forward i would like you to spend at
84:09 - least a few minutes styling up this page
84:12 - making it look a little bit nicer add
84:14 - your own flair to it in fact i actually
84:16 - did that and put maybe five minutes of
84:18 - styling into it which obviously shows
84:20 - it's not going to win any design awards
84:22 - but i did change the font to use a
84:24 - google font i added this little box
84:26 - shadow under our nav bar i moved the
84:29 - footer down to the actual footer section
84:31 - of our page the bottom of our page and
84:33 - added some really basic styles to it so
84:35 - this is a great opportunity not only for
84:37 - you to flex your css skills and get your
84:40 - hands on the keyboard and do some
84:41 - practice but also to interact with the
84:43 - scrimba community especially on discord
84:46 - once you've styled something up that
84:48 - looks well pretty much anything's going
84:49 - to look better than this once you have
84:51 - some kind of style added take a
84:53 - screenshot and share it in discord as
84:55 - you make changes to your code here in
84:57 - scrimba it will create a note that you
84:58 - can save and you can even share that on
85:01 - twitter you can share the link to that
85:02 - and discord whatever it takes for you to
85:04 - get involved with the scrimma community
85:07 - once you've had a chance to apply some
85:09 - of your own creativity to this little
85:11 - page the next thing we're going to do is
85:13 - clean up our code here where right now
85:15 - we have everything kind of stuffed into
85:17 - our index.js file and we're going to
85:18 - learn how we can move these components
85:20 - into their own folders and clean up our
85:22 - code a bit
85:26 - there are practically innumerable ways
85:28 - to organize your projects and so i'm
85:30 - hoping to in this screencast just teach
85:33 - you some of the principles and as we go
85:35 - through the course you may see different
85:37 - methods that i use and of course as you
85:40 - look at other people's code you'll see
85:41 - the ways that they use as well for
85:43 - organizing their code now what we have
85:45 - here is a very small site for react
85:47 - there's hardly anything here i barely
85:50 - have 50 lines of code to make this page
85:52 - however anything substantial that you
85:54 - have will end up being hundreds more
85:56 - likely thousands or even tens of
85:58 - thousands of lines of code in total so
86:01 - it's really important to have an
86:03 - organization system that makes sense to
86:05 - you to your group and something that you
86:07 - agree upon in the beginning and stick to
86:10 - as you continue to develop so i'm going
86:13 - to show you with separating one of these
86:15 - components into its own file and then
86:17 - i'm going to give you a challenge to do
86:19 - the same for the others so what i'll do
86:21 - is work on the header and we're going to
86:23 - move header into its own file so i'm
86:26 - going to create a new file in my
86:28 - explorer up here called header js
86:31 - a convention that i personally like to
86:33 - stick to is that any file i create that
86:36 - will essentially house a react component
86:39 - will start with a capital letter the
86:41 - same as the component's name itself now
86:44 - i'm going to copy or actually cut this
86:47 - entire component out
86:49 - and over in header js i'm going to paste
86:52 - it
86:52 - now there's a couple things i need to
86:54 - change here i want you to pause the
86:56 - screencast and see if you can think of
86:58 - two things that i need to change in this
87:00 - file in order for me to then be able to
87:03 - import it into this file so that it's
87:06 - working the way that it was before
87:08 - so take a good look at this pause the
87:10 - screencast see if you can figure that
87:11 - out
87:16 - well remember in order for the program
87:19 - to make any sense of jsx i always need
87:22 - to import
87:24 - react from react
87:27 - even though we're not explicitly using
87:29 - capital r e a c t anywhere here in my
87:32 - code for jsx to work i will need to
87:35 - import react from react again this is
87:37 - something that has recently changed if
87:39 - you're working in an environment that is
87:41 - actively using the updated react 17 then
87:44 - you may not have to do this
87:46 - the other thing is currently this
87:48 - component is completely stuck inside of
87:50 - this file i'm not sending it outside of
87:52 - this file anywhere
87:54 - and so i need to
87:55 - export it
87:57 - and oftentimes if this is the only
87:59 - component that i'll have i choose to
88:01 - export default the component so i'll say
88:03 - export default header alternatively i
88:06 - could save myself a little bit of
88:08 - lines of code here and just put export
88:10 - default function header right up at the
88:12 - top and then i don't have to create a
88:14 - separate line down here that does it
88:16 - separately personally i kind of
88:18 - oscillate between these two so you can
88:20 - just choose whichever one you think you
88:22 - prefer the most and stick with that
88:24 - convention
88:25 - if you're feeling a little bit rusty on
88:28 - export import export default and so
88:31 - forth you may want to spend some time
88:33 - researching import and export in es6
88:36 - because we will be using it quite a bit
88:37 - in this react course
88:39 - now that i have exported my header
88:42 - component it means that over in my index
88:44 - js i can import it
88:47 - and i'll say import header from
88:50 - and then i have to use dot slash capital
88:52 - h header
88:54 - and i could say js but that's the
88:56 - default extension for imports so i don't
88:59 - need to specify.js
89:01 - in this case dot slash is a way to
89:04 - indicate that i'm talking about a file
89:06 - in my own project here not a package
89:09 - that's in my dependencies like react and
89:12 - react dom
89:13 - and i have to make sure that i spell
89:15 - this the exact same as my file name not
89:18 - necessarily the name of the component i
89:21 - could have chosen to call this head
89:24 - like that and i still would have to say
89:26 - import header from dot slash header or
89:30 - in this case i could say import whatever
89:32 - because i'm doing an export default
89:35 - if that's confusing don't worry too much
89:37 - about it i prefer to keep the names all
89:39 - the same so that i don't run into any
89:42 - confusion there
89:43 - okay i'll put an extra line here what's
89:46 - nice about this is now my code is sort
89:49 - of sequestered into the header.js file
89:52 - which means that if i want to change the
89:54 - header
89:55 - i can logically come to my header.js
89:58 - file to make changes to my header
90:01 - and i don't need to change how it's
90:03 - rendered down here because when i import
90:05 - it i'm importing everything that i have
90:08 - in my header.js file just like it was
90:10 - when it was declared here in the
90:12 - index.js file okay let's get some
90:14 - practice let me type out your challenge
90:17 - simple enough just move the footer
90:19 - component and the main content component
90:22 - into their own files and then of course
90:24 - do what you need to do to make it so
90:26 - that our site doesn't break down pause
90:28 - the screencast and work on this
90:30 - challenge
90:35 - okay let's do this i'm just going to cut
90:37 - my footer out
90:39 - create a new file called capitalf
90:42 - footer.js
90:45 - paste my code
90:46 - in and we'll import
90:49 - react from react so that our jsx works
90:53 - and then i'll export default
90:55 - my footer function my footer component
90:58 - and make sure that i
91:01 - import it here
91:03 - say import footer from footer and just
91:05 - by importing it now my footer should
91:07 - just be working the same way as it was
91:10 - hit refresh and everything is working
91:12 - awesome
91:13 - we'll do the same thing for main content
91:16 - and i can clean up some of these extra
91:18 - lines
91:19 - create a new component or file called
91:22 - main content.js
91:25 - paste it in
91:28 - export default
91:30 - import react from react
91:34 - and
91:35 - of course we haven't yet imported it so
91:38 - we will import it
91:40 - main content
91:43 - hit save and we're back up and running
91:46 - we can remove this challenge and all of
91:48 - a sudden we're down to 17 lines of code
91:51 - we're importing these components from
91:53 - other files and that way we have a much
91:56 - better organization on our app here
91:58 - again like i said there's a million
92:00 - different ways to organize your code
92:02 - it's also not uncommon for people to
92:04 - even take this component that's sort of
92:07 - organizing our other components and put
92:09 - it in its own file a lot of times
92:11 - instead of calling it page they'll call
92:13 - it app that's actually the convention i
92:15 - tend to use so maybe i'll go ahead and
92:17 - just change this to app while i'm at it
92:19 - but because of the limited size of this
92:21 - project i'm not terribly concerned about
92:23 - moving this component into its own file
92:26 - and then also importing all of those
92:28 - other components into that separate file
92:29 - it just feels like
92:31 - maybe over engineering it for such a
92:33 - small project okay awesome work
92:35 - hopefully this has been helpful we're
92:36 - going to be using organization like this
92:38 - throughout the rest of this course so
92:40 - again if you're feeling confused about
92:42 - how we're exporting things or importing
92:45 - them then you may want to spend some
92:46 - time researching export and import in
92:49 - es6 just to become a little more
92:51 - familiar with it or another great way to
92:53 - do that would be to just play with this
92:55 - code see if you can delete these lines
92:57 - delete the export default line and just
93:00 - try to recreate it see if you can get it
93:01 - to work again when you feel comfortable
93:03 - with everything we've covered so far
93:05 - let's keep moving forward
93:09 - earlier in the course we saw sort of the
93:11 - quick and easy way to get a local
93:13 - version of react up and running using
93:15 - some cdn links and an in browser babel
93:18 - transpiler to get everything working you
93:21 - see since react uses a syntax that isn't
93:24 - normally understood by the browser there
93:27 - needs to be some kind of tool to
93:29 - translate this weird-looking javascript
93:31 - like jsx into something that the browser
93:34 - can actually make sense of like regular
93:36 - old javascript however that in browser
93:39 - babel transpiler that we were using is
93:42 - not really a good long-term solution
93:44 - which is why we saw that warning that
93:46 - says well basically you should do this
93:48 - in a different way if you're going to be
93:50 - pushing it up to production so instead
93:52 - what you normally need to do is set up a
93:54 - whole bundler system using something
93:56 - like webpack i've linked to the webpack
93:58 - homepage if you want to go visit it
94:00 - there and you would teach your webpack
94:02 - configuration how to use babel the
94:05 - transpiler or compiler so that
94:07 - essentially it would take your react
94:09 - code and transpile it or compile it down
94:12 - to something that is readable by
94:14 - browsers with regular javascript
94:17 - just to be totally clear babel and
94:19 - webpack are not specific to react but in
94:22 - order for react to work on most web
94:25 - browsers you would normally have to use
94:27 - babel and webpack to translate it into
94:29 - something that a browser would make
94:30 - sense of and the truth is unless you've
94:33 - already dealt with webpack a bunch
94:35 - before it's honestly a bit of a high bar
94:37 - for beginners to clear when they're just
94:39 - learning web development so to help
94:42 - significantly reduce that overhead in
94:44 - getting started with react the react
94:46 - team created a package called create
94:48 - react app which does all of the heavy
94:51 - lifting for you and it even hides a
94:53 - bunch of that implementation detail of
94:55 - webpack from you in the code
94:58 - so in the end it really just makes
95:00 - setting up a new react app on your local
95:02 - machine really simple so let's take a
95:04 - look at the process of using create
95:06 - react app to create a new react app on
95:09 - your local machine before you can jump
95:11 - into create react app you have to make
95:13 - sure that you have nodejs and npm
95:15 - installed on your machine to see if you
95:18 - have these installed you can open up
95:19 - your terminal and type node space dash v
95:23 - that's a flag to check the version of
95:25 - node if it spits out any number that
95:27 - means that you do have node installed
95:30 - and if you do have node installed then
95:31 - you also more than likely have npm
95:33 - installed as well but for good measure
95:35 - you might as well run npm space dash v
95:38 - and again if it displays a version
95:40 - number that means you do have npm
95:42 - installed
95:43 - now the next few slides are going to
95:44 - give a very high level overview of how
95:46 - to install node in npm so if you already
95:49 - have node and npm you can sort of tune
95:51 - out the next couple minutes or skip
95:53 - ahead and honestly there's a lot of help
95:55 - already out there on how to install
95:57 - node.js i would just recommend going to
95:59 - youtube and searching install node.js
96:01 - but specifically install nodejs with
96:04 - something called nvm
96:07 - so i would recommend using nvm which is
96:09 - the node version manager its purpose is
96:12 - just to make switching and installing
96:14 - different node versions extraordinarily
96:16 - easy but it does mean that you have to
96:18 - install another package if you're on a
96:21 - mac or linux machine you can use nvm
96:24 - i've included a link to their github
96:26 - repository here or if you're on windows
96:28 - you can click here to go to a package
96:30 - called nvm-windows but again i would
96:33 - just default to following some kind of
96:35 - install node.js with nvm tutorial that
96:38 - you find on youtube
96:39 - okay so now you have nvm installed the
96:42 - next step is to open your terminal again
96:44 - and this time type nvm space install
96:48 - space dash dash lts now this command is
96:52 - specific to the nvm for the mac or linux
96:55 - i think it might be slightly different
96:56 - for nvm-windows i think that might just
96:58 - be nvm install lts with no dash dash but
97:02 - you'll have to check the documentation
97:04 - and follow the instructions in that
97:06 - youtube video to be sure
97:07 - then once that finishes installing we
97:09 - come full circle and you should be able
97:11 - to double check your node version and
97:12 - your npm version the same way we saw
97:14 - before and again by the time you're
97:16 - watching this it very well may not be
97:18 - these versions it might be a newer
97:19 - version than this
97:21 - now with node and npm installed we're
97:23 - ready to actually use create react app
97:26 - on the create react app website you can
97:27 - see this getting started section the
97:30 - main thing we care about are these
97:31 - commands down here just to make things
97:33 - even more confusing there's another
97:35 - thing called npx we won't really get
97:38 - into what npx is but for now it's enough
97:40 - to know that you can just type this top
97:42 - command npx create react app space and
97:45 - then the name of whatever you want the
97:46 - folder that holds your app to be
97:49 - after typing that first line you can hit
97:51 - return and you'll see an output in your
97:53 - terminal that's more or less similar to
97:55 - this you can see at the very bottom it
97:57 - says we suggest that you begin by
97:59 - changing into your directory that you
98:01 - just created if you didn't choose my
98:03 - dash app as your folder name then
98:05 - obviously choose whatever your folder
98:06 - name is and once you're in that
98:08 - directory you can run npm start
98:10 - so you can see on my machine i did that
98:13 - i went cd into my app and then i ran npm
98:15 - start sometimes this command can take a
98:18 - little bit of time to get everything up
98:19 - and running but once you do you should
98:21 - see something that looks like this in
98:22 - your terminal if you remember back when
98:24 - i showed you how to run react locally
98:27 - just using those cdns and the vs code
98:29 - extension called live server well now
98:31 - we're essentially replacing that you
98:33 - won't need to click anything in your vs
98:35 - code using live server but instead
98:37 - you're running your development
98:38 - environment through the terminal in fact
98:40 - after you run this command and it says
98:42 - compiled successfully it will probably
98:44 - open a browser window for you and direct
98:46 - you to localhost colon 3000
98:49 - automatically and when that opens you'll
98:51 - probably see the default create react
98:53 - app screen which looks something like
98:54 - this
98:55 - so where exactly does this screen come
98:57 - from with the react logo well this is a
98:59 - boilerplate version of the create react
99:02 - app code that is automatically built in
99:04 - this new react app that has been spun up
99:06 - for you if you really just want to start
99:08 - from scratch what i recommend doing is
99:10 - just taking all of the files in the
99:12 - source folder you can see i've
99:14 - highlighted them all here in my vs code
99:16 - and just deleting them and then you can
99:18 - just start from scratch the same way we
99:20 - have been so far by creating an index.js
99:22 - file and writing the code that we're
99:24 - used to writing one thing to note here
99:27 - is that you don't need to create your
99:28 - own index.html that is being handled
99:31 - inside of this public folder and of
99:33 - course i recommend poking around the
99:34 - code just to better understand exactly
99:36 - what's going on but you'll see that
99:38 - inside that public folder there's an
99:40 - index.html file that has a div with the
99:43 - id of root in it so inside the new
99:45 - index.js file that you create you can
99:47 - already select that element by the idea
99:50 - of root when you're using
99:51 - reactdom.render
99:53 - and it's a bit small in this screenshot
99:54 - but you can see that it's rendering an
99:56 - h1 that just says hello create react app
99:59 - and in the browser that popped up
100:01 - automatically on localhost 3000 it
100:03 - updated automatically for me now usually
100:06 - any changes that you make to your code
100:07 - when you hit save it will automatically
100:10 - refresh your browser every now and then
100:12 - i found that that becomes a little
100:13 - disconnected and you just have to go to
100:15 - your browser and hit refresh but either
100:17 - way it should update your browser to
100:18 - reflect what you have written in the
100:20 - code
100:21 - and that's it you're all set now as we
100:23 - continue to go through this course here
100:25 - on scrimba i still highly recommend that
100:27 - you do the challenges i give you right
100:29 - here inside of the scrimba environment
100:31 - one of the huge benefits of scrimba is
100:33 - that the environment is already
100:34 - interactive and it's already set up for
100:36 - you and so the barrier to getting your
100:39 - hands on the keyboard typing the code
100:41 - practicing react is very low so although
100:44 - you now know how to set up a local
100:46 - environment please don't feel like you
100:47 - need to do that every time you're going
100:49 - to do one of the challenges that i give
100:51 - you because honestly in this course
100:53 - we're not practicing how to set up react
100:55 - apps we're practicing how to write react
100:58 - and build cool applications with react
101:00 - but now you have the knowledge you need
101:02 - if you feel like jumping away from what
101:04 - we're doing in the course and just
101:06 - practicing your own thing and being
101:08 - creative being curious and building
101:10 - whatever you want to build without
101:12 - necessarily having to deal with the
101:13 - scrimba environment and then of course
101:15 - when the time comes to deploy your
101:17 - projects to a real website well you're
101:19 - gonna have to have something local on
101:21 - your machine that you can push up to
101:23 - github and to whatever host you're
101:24 - pushing it to okay sorry that was such a
101:26 - long aside let's jump right back into
101:28 - the course and continue to learn
101:32 - i am coming to you from the future
101:34 - because you can see in the background we
101:36 - have our react facts static site almost
101:39 - completely built out but there's an
101:41 - issue for anyone who is going to be
101:43 - using create react app to follow along
101:46 - with some of the projects that we will
101:47 - work on and namely those issues are when
101:50 - we need to load css styles and when we
101:52 - need to load images in create react app
101:55 - in scrimba this will just kind of work
101:57 - out of the box but if you're using
101:59 - create react app to follow along you
102:01 - might notice that well your site's going
102:03 - to look something like this
102:04 - not only are the styles missing but also
102:07 - our image link is broken fortunately
102:09 - these are relatively easy fixes you can
102:11 - go to the react docs to check out this
102:14 - adding images fonts and files it also
102:16 - has a link to dealing with css in there
102:18 - as well you can actually click on the
102:20 - screenshot to go straight there but i'm
102:22 - going to show you what this looks like
102:23 - in vs code so if you are using create
102:25 - react app it's generally recommended
102:27 - that you put your styles inside of your
102:29 - source folder there's much more in-depth
102:31 - ways to also organize your styles on a
102:33 - per component basis but for now we're
102:36 - just going to assume you have one
102:37 - globalstyle.css
102:38 - and that's going to live again inside
102:40 - the source directory and the webpack
102:42 - instance that's running create react app
102:44 - behind the scenes is using something
102:46 - called style loader that allows you to
102:48 - just import these styles directly into
102:51 - your index js this might seem a little
102:54 - weird to just be importing a string that
102:56 - represents a css file but webpack is set
102:58 - up behind the scenes to make this work
103:00 - fine the main issue is that when you
103:02 - build your project it's going to build
103:05 - in a way that doesn't have a ton of
103:07 - different files and folders inside your
103:09 - source directory instead webpack is
103:12 - going to bundle everything up into
103:14 - essentially into one giant javascript
103:16 - file and that javascript file is going
103:19 - to live near index.html
103:21 - and essentially in the end you'll have
103:23 - an index.html and index.css and an
103:27 - index.js files that's nothing that you
103:29 - have to do manually it's just going to
103:31 - happen behind the scenes for you i think
103:33 - that will make more sense when we look
103:35 - at fixing our image issues but right now
103:37 - by simply importing our style.css we get
103:41 - our react fax site back to an almost
103:43 - perfect condition you can still see that
103:45 - our logo icon in the upper left is
103:47 - broken so loading images we do something
103:50 - relatively similar in the code behind me
103:53 - here you'll see that we have a navbar
103:56 - component and in that we are able to set
103:58 - the source directly equal to a string
104:01 - that has a path to the image that we
104:03 - need to exist in the navbar however
104:05 - because this path is relative to where
104:08 - the navbar.js file currently lives this
104:10 - is going to break when things get
104:12 - bundled up into that one giant index.js
104:16 - file like i mentioned so anytime you
104:18 - have an image that you want to include
104:20 - on your site you will likely want to put
104:22 - your images inside the source directory
104:25 - and then instead of hard coding the path
104:27 - directly into our image source we're
104:29 - first going to import our image from
104:32 - that path that's relative to where the
104:34 - navbar.js file lives and we import it
104:37 - with some kind of name we can call it
104:39 - whatever we want i've chosen react logo
104:41 - in this case and then once we've done
104:43 - that we simply replace our source with
104:45 - react logo that way when create react
104:48 - app is bundling up this project it
104:50 - essentially has a reference to where
104:52 - that image file exists relative to the
104:55 - current file and it can create a better
104:58 - absolute path when everything gets
105:00 - bundled up so that there isn't a broken
105:02 - link between your component and the
105:04 - image that you're trying to use and once
105:06 - we do that we have our logo back and
105:08 - running and everything else about this
105:10 - page is looking good now there is
105:11 - another way to solve this problem and
105:13 - that is to put your styles and your
105:15 - images inside of the public folder
105:17 - instead of inside of the source folder
105:20 - however this is sort of gently advised
105:22 - against if you go to the documentation
105:24 - there's a whole page dedicated to using
105:26 - the public folder but if you read
105:28 - carefully it says there's a lot of
105:30 - benefits to not using the public folder
105:32 - but if you really need to you can and
105:34 - here's how you can click the screenshot
105:36 - here to go read more about that if you'd
105:38 - like okay hopefully that answers some of
105:40 - your questions if you've been trying to
105:42 - follow along with create react app on
105:43 - your local machine if not and you're
105:45 - just working here in scrumba you
105:47 - essentially don't need to know any of
105:48 - this until it comes time to start using
105:50 - create react app on your own machine but
105:52 - either way it's good information to know
105:54 - because eventually you won't be just
105:56 - working here in the scrimba environment
105:58 - with that said let's go back in time and
106:00 - we'll jump right into this project
106:05 - one thing that i really like to do when
106:07 - i'm starting a new project especially if
106:09 - i have the design right in front of me
106:11 - like we do here is to make a sort of
106:13 - mental outline of the elements on the
106:16 - page and how i'm going to lay this
106:17 - project out all that really helps me do
106:20 - is to make a sort of mental model of how
106:22 - i'm going to create everything on the
106:25 - page this can be especially helpful when
106:27 - you're thinking about layout and how
106:29 - you're going to place certain elements
106:31 - in the right spot on the page especially
106:33 - when you start thinking in terms of
106:35 - using flexbox or grid to do that kind of
106:37 - layout
106:38 - so as a first sort of mini challenge
106:40 - what i want you to do is pause the
106:42 - screencast and look at this page try to
106:45 - determine what kind of elements you
106:46 - would use what kinds of css layouts you
106:49 - might use fortunately this project has a
106:51 - fairly simple layout but i still think
106:54 - that it's something that will be helpful
106:55 - for you to practice so pause the
106:57 - screencast and try to imagine what
106:58 - elements you would use and how you would
107:00 - lay them out for this project
107:09 - there's certainly more than one way to
107:10 - lay out any given page but the way that
107:12 - i see this is having two primary
107:14 - sections the top section which is sort
107:16 - of a nav bar and the bottom section
107:19 - which is sort of the main content inside
107:21 - that nav bar we have a little react logo
107:24 - the react facts logo text up here and
107:27 - then a little blurb about what project
107:29 - this is in this course
107:30 - already i can start to see that i'm
107:32 - probably going to choose to lay this out
107:34 - with flexbox because that's a really
107:36 - easy way to make sure everything's in a
107:38 - nice neat line and with flexbox all i
107:40 - need to do to push this text all the way
107:42 - to the right is to give an auto margin
107:45 - to my react fax text here or rather a
107:47 - margin right of auto so that it pushes
107:50 - this react course project 1 text all the
107:52 - way to the right side of my navigation
107:54 - bar then down below it looks like i just
107:56 - have an h1 and an unordered list with
107:58 - some list items so with this kind of
108:00 - mental outline i can start putting
108:02 - together what the actual elements will
108:04 - look like on the page i usually end up
108:06 - creating some kind of container div so
108:08 - we'll call it a div with the class of
108:10 - container and this will just surround my
108:12 - whole page and then we have our main two
108:15 - sections that nav bar which we saw at
108:17 - the top and the main section inside the
108:19 - navbar we had a couple elements like the
108:21 - image and then maybe let's call the
108:23 - react facts text and h3 and this react
108:26 - course project one and h4 and then in
108:29 - the main section there was our h1 and an
108:31 - unordered list with some list items
108:33 - inside
108:34 - now in terms of react this can be a
108:37 - really helpful exercise because i can
108:39 - start to see that i will probably have
108:41 - two main components first a custom nav
108:44 - component which will house my nav
108:46 - element with its children elements and
108:49 - second a main custom component which
108:51 - will house my h1 and my unordered list
108:54 - with the list items in terms of those
108:56 - nested items like the image and h3 those
108:58 - are going to be simple enough that they
109:00 - won't need their own custom react
109:02 - component and then i would take my
109:04 - custom nav component and my custom main
109:07 - component and probably collect them
109:09 - together in one more custom component
109:11 - which i usually end up calling app and
109:13 - that will be what renders my div with
109:15 - the class of container and then that app
109:18 - component since it contains all the
109:20 - elements on my project will then be
109:22 - rendered with reactdom.render
109:24 - so i hope this has been a helpful
109:26 - exercise for you at least to see the way
109:28 - that i usually like to break down my
109:30 - projects if it's a layout that's fairly
109:32 - basic like this i usually will just kind
109:34 - of think about it ahead of time without
109:36 - actually writing it down or putting a
109:38 - bunch of dotted squares around the
109:40 - elements or anything like that but once
109:41 - you've practiced this enough times a
109:43 - simple layout like this might take you a
109:45 - total of maybe 10 seconds to think
109:47 - through but in the end could end up
109:49 - saving you a lot of time
109:50 - so now it's time for us to get your
109:52 - hands on the keyboard we're going to
109:54 - have a series of challenges which will
109:56 - help you be the one that actually builds
109:58 - out this project
110:02 - hey there i'm jumping in at this point
110:04 - to let you know that i've created a very
110:06 - quick figma tutorial throughout this
110:09 - course and many others here on scrumba
110:11 - we're going to be providing you with a
110:13 - figma design file and i do think you'll
110:15 - find figma fairly intuitive but i
110:17 - thought it would be a good idea to just
110:19 - record a quick tutorial to help you
110:20 - along the first thing you'll have to do
110:22 - is go over to figma.com and create a new
110:25 - account and as i was signing up for a
110:28 - second account just to kind of test this
110:30 - process i realized that there's actually
110:32 - a lot of steps so i figured i would walk
110:33 - you through it first you're going to
110:34 - click sign up you'll obviously either
110:37 - sign up with google or you can provide
110:39 - an email and password i believe if you
110:41 - provide an email and password it will
110:43 - have you go verify your email so it'll
110:45 - send you an email to verify once you've
110:47 - done that and you come back it will have
110:48 - you choose which kind of plan you want
110:51 - figma has a really generous free tier so
110:53 - i would just start for free you'll click
110:56 - that button down there when it asks you
110:58 - to tell you about your team you can at
111:00 - this point honestly just say skip this
111:02 - step and then when it says what would
111:04 - you like to do first i just think it's
111:06 - easiest to say i'll explore by myself
111:08 - and when you do that it's going to drop
111:10 - you into the figma interface now from
111:12 - that point on i've actually recorded a
111:14 - whole tutorial using the figma program
111:16 - that is now over on the scrimba youtube
111:19 - channel so at this point you're going to
111:20 - continue on to youtube by clicking on
111:22 - the screenshot here which will take you
111:24 - to the video that i recorded and
111:26 - hopefully that quick introduction to
111:28 - figma will really help make things
111:29 - easier for you as you use figma as a
111:32 - part of your scrimba coursework so click
111:34 - on the screenshot you see here head over
111:36 - to youtube when you've watched that
111:37 - video and you're done you can close that
111:39 - window come back here to scrumba and
111:41 - continue on in this course
111:45 - let's start by getting some of the
111:47 - projects set up out of the way i've
111:49 - written some step-by-step instructions
111:51 - here in the challenge it is going to be
111:53 - a little bit more involved because we're
111:54 - creating everything completely from
111:56 - scratch or almost completely from
111:58 - scratch so your challenge is to create a
112:00 - components folder and this components
112:03 - folder is going to have two files in it
112:05 - the navbar.js file and the main.js file
112:08 - for now they should just render an h1
112:10 - that says something like navbar goes
112:12 - here in main section here then i want
112:14 - you to create an app component which
112:16 - will be outside of the components folder
112:18 - and have the app component render the
112:20 - navbar and main components that you just
112:22 - created then inside of this file the
112:24 - index.js you will import the app
112:26 - component and then use reactdom.render
112:29 - to render that the last step is to go
112:31 - and get the enter google font
112:33 - specifically with the weights of 400 600
112:36 - and 700. once you've selected those font
112:39 - weights you should see a series of link
112:41 - tags that you can use to put inside of
112:43 - our index.html
112:45 - make sure to put them above style.css so
112:48 - that we can reference them in style.css
112:50 - and if you haven't used google fonts
112:52 - before this one might take a little bit
112:54 - of extra research outside of scrimba
112:56 - here to learn more about but i know that
112:58 - you can do it fortunately google fonts
113:00 - makes it relatively easy just know that
113:02 - you can ignore the at import or any npm
113:05 - options it talks about for installing
113:07 - this font remember we're not dealing
113:09 - with any kind of styling right now so by
113:11 - the end of this challenge you'll just
113:12 - have a basic white page that just shows
113:14 - nav bar here and main section here or
113:16 - something like that
113:18 - so pause now and work on this challenge
113:26 - okay let's just go one step at a time
113:29 - we'll first create a new folder called
113:31 - components
113:32 - and inside components we can create a
113:34 - new file for main.js
113:36 - and
113:37 - navbar.js
113:39 - as always we will import react from
113:42 - react
113:44 - and we will export default our navbar
113:47 - function our navbar component
113:49 - and for now this is just going to return
113:52 - an h1 that let's have it say navbar
113:56 - component
113:58 - then our main.js is going to be almost
114:00 - identical we'll just copy this paste it
114:02 - in instead of navbar component
114:05 - we'll say main component and we'll call
114:07 - this element the main element okay i'll
114:10 - hit save this is just going to bring up
114:12 - my preview window but that's still empty
114:14 - so i need to create a new file called
114:17 - app.js
114:18 - and inside of app.js again we'll import
114:21 - react from react we'll also import our
114:25 - navbar component from
114:27 - dot slash components slash navbar
114:31 - and we'll do the same thing for main so
114:32 - i'll just duplicate that line and change
114:34 - navbar to main
114:36 - then this app component we will export
114:38 - directly here with export default
114:41 - function app
114:43 - and we will just have this return
114:46 - well we want our nav bar to be in here
114:48 - so we'll say
114:49 - navbar and we want our main component to
114:52 - be in here but i want you to think for a
114:54 - second what's wrong with the way that
114:55 - i've done this we can see there's a
114:57 - syntax error so what's wrong with the
114:58 - way that i've set this up
115:05 - inside of components we can only return
115:07 - a single element that element can have
115:10 - children elements but right now we're
115:12 - trying to have two sort of side-by-side
115:14 - components so what we need to do is wrap
115:17 - those in some kind of container like a
115:19 - div
115:20 - so i'll move this div around and indent
115:23 - those if you remember from the last
115:25 - screencast we talked about how this
115:27 - would probably just be set up as a
115:30 - container so we'll give it a class name
115:32 - of container we're not going to deal
115:34 - with any styling now but i might as well
115:35 - add that class name since i know i'm
115:37 - going to need it
115:38 - okay let's go check out our challenge
115:40 - and see where we are so far so i created
115:42 - a components folder i created the navbar
115:45 - and main components already i created my
115:48 - app component which is rendering the
115:50 - navbar and main components
115:52 - so here we are let's import and render
115:54 - the app component here i will import app
115:58 - from dot slash app
116:00 - oh and i am going to be using some jsx
116:03 - syntax so i also need to import react
116:05 - from react
116:06 - and in our index.js i will also be using
116:09 - react dom so i need to import react dom
116:12 - from react dom and then i'll use react
116:15 - dom dot render to render my app
116:18 - component which i just imported and
116:20 - we're going to put it inside of the
116:23 - element with the id of root so we'll use
116:25 - document.getelementbyid
116:27 - root and let's hit save and see if we
116:29 - get our elements showing up on the page
116:32 - awesome navbar component main component
116:34 - just like we expected
116:36 - okay so that completes this part of the
116:38 - challenge and then the last thing was to
116:40 - go to google fonts to get the interfont
116:42 - hopefully this wasn't too terribly
116:44 - tricky going to google fonts will give
116:45 - you a couple link elements so i'm just
116:47 - going into my index.html
116:50 - and above my style.css i will just paste
116:53 - in those link elements you can see that
116:54 - we have this pre-connect to google fonts
116:57 - this one to g static but then this one
116:59 - is for our actual fonts here you can see
117:01 - the font family is enter and it shows
117:03 - our weights of 400 600 and 700 there
117:07 - again i'm putting this above my
117:08 - style.css so that inside of my style.css
117:12 - i can reference the font family of enter
117:14 - and my browser will have already read
117:16 - these other link tags to know exactly
117:18 - what the inter font is
117:21 - okay let's go back here and we have
117:24 - finished everything from this challenge
117:25 - i'll just do a little bit of cleanup now
117:27 - we did just cover a lot of ground
117:29 - however every step that we did here was
117:31 - something that you should have already
117:32 - been able to do maybe with exception to
117:35 - the google fonts if you've never dealt
117:36 - with google fonts before so if you did
117:39 - find yourself struggling to get some of
117:40 - this basic setup done that might be a
117:42 - good signal to you that it's time to go
117:44 - back and restudy and especially
117:46 - re-practice some of the past challenges
117:48 - that we've done instead of just kind of
117:50 - plowing ahead in this course the reason
117:52 - for that is because i'm essentially
117:54 - going to assume that you understood how
117:56 - this works from here on and the last
117:58 - thing that i would want for you as
118:00 - you're learning react is to just
118:02 - continue on without actually having
118:03 - learned some of these basic setup
118:05 - principles
118:06 - okay let's jump into maybe something a
118:08 - little more fun and that is adding some
118:10 - actual styling and elements to our
118:12 - project but before we move on i wanted
118:14 - to give you one more opportunity to
118:16 - access the figma design file we talked
118:19 - about this much earlier in this section
118:21 - but since it's been a while i figured
118:22 - this would be a good reminder if you
118:24 - click on the screenshot here it will
118:26 - take you to the figma file where you can
118:27 - get access to the design elements for
118:30 - this like the colors the spacing the
118:32 - fonts and everything like that when you
118:34 - click on this link it will take you to a
118:36 - shared version of this however if you'd
118:38 - like you can avoid seeing everyone
118:40 - else's cursors and selections by
118:42 - clicking on the little arrow at the top
118:44 - and choosing to duplicate this to your
118:47 - drafts that'll make it so that you
118:49 - aren't seeing everyone else's cursors
118:50 - and selections but also so that you can
118:52 - make changes to it if you'd like okay
118:55 - let's do it let's jump right in and
118:56 - start working on the navbar portion of
118:58 - our project
119:02 - okay this is the fun part we're actually
119:04 - going to make our navigation bar look
119:06 - the way that it looks in the design
119:09 - a couple pieces of advice i highly
119:10 - recommend you reference the figma file
119:13 - that contains all of the fonts colors
119:15 - spacing and everything instead of just
119:17 - looking at this quick reference that
119:19 - i've put here but this is meant to be
119:21 - just a quick reference for you if you
119:22 - need it another thing is i have added a
119:25 - couple of base styles to our styles.css
119:28 - i ran into some problems trying to
119:30 - record this without putting my box
119:31 - sizing and just because it helps a lot
119:34 - i'm going to remove the margin on the
119:36 - body especially to make our
119:38 - navigation bar go all the way to the
119:40 - edges also notice that i have included
119:42 - the react icon small image
119:45 - here inside of the images folder you can
119:48 - see that's part of the design up here in
119:50 - the upper left
119:51 - so without further ado pause the
119:53 - screencast and make the navigation bar
119:55 - look as close to our design as you can
120:02 - alright let's do this instead of
120:04 - rendering an h1 i'm going to open this
120:06 - up and render a nav element because this
120:09 - is a navigation bar
120:12 - and inside of there we know we have an
120:14 - image
120:16 - we'll give it its source while we're
120:18 - here
120:19 - i have to use dot dot slash images
120:21 - because i'm inside of the components
120:23 - folder when i'm here in the nav bar and
120:26 - it's react icon small
120:29 - dot png
120:31 - let's just refresh and see if that's
120:33 - working okay cool
120:35 - and let's call this maybe an h3 i guess
120:38 - and maybe this in h4 it really doesn't
120:40 - matter because well you could just give
120:43 - it a class name and call it a paragraph
120:44 - but i'll just call it an h3
120:47 - and
120:48 - h4
120:49 - this one says react fact
120:52 - and this one says react course dash
120:55 - project one
120:58 - okay refresh that and we've got our
121:00 - elements on the screen now we
121:02 - talked about earlier how the navbar will
121:04 - probably be a flexbox
121:06 - container so i think because i'm only
121:09 - going to have one nav element on my
121:12 - screen i'm just going to style the
121:14 - element nav
121:16 - if you want you could always give it a
121:18 - class name as well i'm going to put
121:20 - display flex we'll say align items in
121:23 - the center
121:25 - from the design we can find that the
121:27 - background color
121:29 - is this color here it also looks like it
121:32 - has about 30 pixels of padding on the
121:35 - top and bottom and 25 pixels of padding
121:38 - on the left and right
121:40 - and we can also see from the design that
121:42 - it has a height of about 90 pixels
121:45 - okay so it doesn't look like our top and
121:47 - bottom margin is applying and i suspect
121:50 - that's either because our image is a
121:52 - little bit too large or
121:54 - i think maybe more likely because our
121:57 - h3 and h4 here have some top and bottom
122:00 - margin by default
122:02 - so i think i might just
122:05 - select the h3 directly inside of the nav
122:08 - let's say margin is
122:11 - zero and then let's see if that also
122:13 - works for the
122:15 - h4
122:17 - okay it might be that the image is just
122:19 - a little too large let's take a look at
122:21 - the image and it looks like from the
122:23 - design it's got a height of about 30
122:25 - pixels
122:27 - okay so maybe our padding is doing fine
122:30 - and it was just that the image was a
122:32 - little bit large
122:33 - while we're here dealing with the image
122:34 - i'm going to give it a margin right
122:38 - just to bump it away from the text there
122:41 - a little bit we'll say
122:42 - i think the design shows it's about 7
122:45 - pixels
122:46 - that looks pretty good
122:48 - and let's go ahead and use the margin
122:50 - right of auto on our h3
122:53 - just to bump that
122:55 - h4 all the way to the right side
122:58 - cool alright well while we're working on
123:00 - that we can go ahead and give the color
123:03 - to our react facts so we'll say the
123:05 - color is
123:06 - this color from the design
123:09 - okay that does it for the color let's
123:11 - get the fonts right and actually i think
123:12 - all of the fonts on this page are enter
123:14 - so i'm just going to change that in the
123:16 - body we'll say enter and then i think a
123:19 - backup of
123:20 - sans serif makes sense
123:22 - let me just comment this out yeah okay
123:24 - so that's making a difference so awesome
123:26 - our google fonts are coming through just
123:27 - fine
123:28 - i can also see from the design that the
123:30 - react facts logo words there have a font
123:35 - weight of 700 so we'll bold those up a
123:38 - little bit
123:39 - or maybe that's the default doesn't look
123:41 - like it's making much of a difference
123:43 - and then let's do the same thing for our
123:45 - h4
123:48 - it has this color from the design
123:51 - and it looks like it has a font weight
123:53 - of 600 okay that's making a slight
123:56 - difference so that's good
123:57 - and it kind of looks to me like react
124:00 - facts maybe needs to be a little bit
124:01 - bigger and yeah i can see from the
124:04 - design that it has a font size
124:07 - of something around 22 pixels okay
124:10 - that's looking awesome now when i can
124:12 - avoid it i usually don't love to style
124:15 - things with their native components if i
124:17 - don't have to maybe just for practice
124:20 - sake i'm going to go into my nav bar and
124:22 - i'll start providing some class names
124:24 - here so let's give a class name to
124:26 - everything
124:27 - on the page let's go
124:30 - class name equals and then up here maybe
124:33 - i'll use something kind of like bem
124:35 - syntax i'll say this is part of the nav
124:37 - block and the element is the icon and
124:40 - then we'll say this is the nav block and
124:42 - the element is the
124:44 - it's kind of like the logo text
124:46 - and this one is part of the nav and
124:50 - let's call it the maybe like the title
124:52 - of our project here and what's nice
124:54 - about that is i don't have to do these
124:56 - kind of nested selectors anymore my h3
124:59 - was
125:00 - nav logo text and i can also select my
125:04 - nav title
125:06 - and change these other selectors as well
125:11 - and oh one thing i've learned about
125:13 - scrimba is i have to make sure i save
125:15 - this when i change my class names before
125:17 - i come to the css otherwise the css
125:20 - updates live but the markup does not so
125:22 - once i hit refresh there that kind of
125:24 - put everything back the way it was
125:26 - awesome this is a really excellent start
125:28 - frankly most of what we did here was
125:30 - just css instead of actually doing react
125:34 - but my goal with this course is not just
125:36 - to focus entirely on react i want to
125:38 - synthesize some of the information you
125:40 - have been learning so far including
125:42 - revisiting the css and markup and stuff
125:45 - like that as much as we can frankly in
125:47 - this first section of the course we
125:49 - aren't doing much of the detailed side
125:51 - of react we mostly have just learned
125:53 - some of the very basic syntax but i
125:55 - think it's important for us to kind of
125:57 - remind ourselves of the past information
126:00 - we've learned by practicing it here
126:02 - so the next thing we're going to do is
126:04 - fill out the body section here or the
126:07 - main section here there's a couple of
126:09 - gotchas with this that we're going to
126:10 - actually address later but whenever you
126:13 - feel good about everything we've done
126:14 - here in this challenge then let's move
126:17 - on to the next one
126:20 - okay let's work on this main section
126:22 - here i do want you to skip two aspects
126:25 - of the design right now we're not going
126:27 - to worry about changing the colors of
126:29 - these bullets and we're not going to
126:30 - worry yet about adding this logo over
126:33 - here to the right
126:34 - everything else though is fair game for
126:36 - this exercise so pause the screencast
126:38 - and work on this task
126:47 - all right let's go ahead and
126:49 - make this into a main element this is
126:53 - another semantic html element
126:56 - and it represents the main section of
126:58 - our app here so we will
127:01 - call it that and it looks like it really
127:04 - only has two elements in it it's got
127:06 - this h1 and an unordered list with five
127:08 - list items
127:10 - so that should be relatively
127:11 - straightforward
127:14 - and it says fun
127:17 - facts about react
127:19 - we have our unordered list
127:23 - and i'm going to hit option shift down
127:26 - to create copies of those so i don't
127:27 - have to type them out manually every
127:29 - time
127:30 - and then i will actually go ahead and
127:31 - just copy and paste the text from the
127:34 - figma file so you don't need to sit and
127:36 - watch me do that
127:39 - all right let me move this over just a
127:40 - tiny bit
127:43 - and let's hit refresh
127:45 - okay that's a good start let's get some
127:47 - of the design aspects going here
127:49 - i've got my main element and i think i
127:52 - feel okay styling that as the main
127:54 - element because i will probably only
127:56 - have one well i know that i'll only have
127:58 - one
127:59 - and we will give it a background color
128:02 - which we can go ahead and grab from the
128:05 - figma file
128:06 - okay and well this highlights some
128:08 - issues here now i haven't set up my
128:11 - body or my main element to be a full
128:13 - height and it looks like maybe the
128:16 - collapsing margin i'm guessing this h1
128:18 - has a margin on top which is causing
128:20 - this whole section to collapse down
128:22 - below so let's give first of all the
128:25 - main section a height of let's try a
128:28 - hundred percent yeah sometimes that
128:30 - doesn't work maybe if i give my body
128:33 - a height
128:34 - of
128:35 - 100 view height
128:38 - and let me refresh this
128:40 - well okay you know what i think this is
128:42 - highlighting another problem that i was
128:44 - planning on addressing later so for now
128:47 - what i'm going to do is actually move
128:49 - this background color to the body so
128:51 - that it does cover everything okay and
128:53 - that'll be a good enough start we'll fix
128:55 - this a little bit later but it did
128:56 - highlight the fact that what we had here
129:00 - is our main section is not taking up the
129:03 - entire body here in a couple of
129:05 - screencasts from now we'll see why
129:06 - that's a problem but for now i'm just
129:08 - going to put my background color on the
129:10 - body
129:11 - okay and i probably actually don't need
129:13 - this height of 100 right now we'll come
129:16 - back to that later
129:17 - oh however i do want to give it some
129:20 - padding and it looks like from the
129:22 - design i have about
129:26 - 55 pixels it says 57 we'll just go ahead
129:29 - with 57
129:30 - on the top and bottom and then about 27
129:33 - pixels on the left and right and well
129:36 - you know what i think that margin this
129:37 - looks a little too much i'm gonna guess
129:39 - that the margin of my h1 here is a
129:42 - little bit high let me just check that
129:43 - if i set this to margin zero yeah that
129:46 - normalizes it a little bit more
129:48 - so instead of selecting all h1s let's go
129:51 - here and give this
129:53 - a class name
129:56 - and similar to the last one i'll say
129:58 - this is the main block and it's the
130:00 - title
130:02 - element
130:05 - and that way i can be a little more
130:06 - specific about which h1 i want and again
130:08 - i need to refresh this in order for that
130:10 - class name to apply and awesome okay the
130:13 - sizing is looking good let's get our
130:15 - color correct now our
130:18 - h1 here also has a font size of about 39
130:23 - pixels
130:24 - and everything else needs to be white
130:28 - maybe i'll just color the entire section
130:30 - here yeah that'll work okay awesome well
130:33 - now that i have removed the margin from
130:35 - my title it looks like my unordered list
130:37 - is bumping a little bit close to my
130:39 - title rather than giving my title a
130:41 - margin bottom to push it down i
130:44 - personally prefer to have elements push
130:46 - themselves away from other elements if
130:48 - that makes any sense and when i see this
130:51 - i think of the unordered list as being
130:53 - too close to the h1 as opposed to the
130:55 - other way around that might not make any
130:57 - sense that's just how my mind is working
130:59 - i'm going to give my
131:02 - unordered list a class name
131:05 - let's say this is main dash dash we'll
131:08 - say facts
131:11 - and we will select our main facts and
131:14 - i'll give it a margin top of it looks
131:17 - like the design says 46 pixels
131:20 - okay now actually i just looked at the
131:23 - figma file and noticed that our title
131:26 - actually has
131:27 - a slight change to the letter spacing
131:31 - so i'm just going to copy and paste that
131:33 - here and
131:34 - yeah that compresses our
131:36 - h1 a little bit actually quite a bit
131:39 - so we will go ahead and leave that there
131:41 - sometimes these rules like this are
131:43 - really easy to overlook if you aren't
131:45 - looking closely in the figma design
131:47 - something that's really nice is i can
131:49 - actually just copy all of the rules if i
131:51 - need to
131:52 - and paste them here and then i can
131:54 - decide which ones are actually making a
131:56 - difference or are necessary now i
131:58 - already have that one i can just comment
132:00 - these out
132:01 - this one's technically making a slight
132:02 - difference i'm not terribly worried
132:04 - about it
132:05 - the font size we already specified
132:09 - font weight of bold is already the
132:11 - default font style of normal and so
132:13 - forth i can get rid of some of these as
132:15 - well
132:16 - but we can see this one actually did
132:17 - make quite a bit of a difference so it's
132:19 - good that we put it in there okay now
132:21 - these are really close together so i'm
132:23 - going to select all of the list items
132:26 - under main facts i'm doing this just so
132:28 - i don't have to give a class name to
132:30 - every single li or give the same class
132:32 - name to every single list item there
132:34 - and actually let's go ahead and do the
132:36 - same thing i did before i'm just going
132:37 - to copy some of these font styles that
132:40 - we have inside of figma
132:42 - and see if
132:44 - any of them made a difference i don't
132:45 - need that
132:47 - that's not making a difference
132:49 - that's already the default
132:51 - that's already the default
132:54 - uh that makes a tiny difference maybe
132:55 - i'll leave it in there it did separate
132:57 - them a little bit i'm guessing however
132:59 - i'm going to have to apply some padding
133:01 - to these so let's give a little bit of
133:03 - padding there's a relatively new css
133:06 - property called padding block that
133:08 - allows me to only specify the padding on
133:10 - the top and bottom in one go
133:12 - let's start with 10 pixels and see how
133:14 - that looks and
133:17 - yeah that looks fairly accurate
133:20 - another thing i'm noticing is that the
133:22 - text is actually wrapping around here
133:24 - and mine is not it's going all the way
133:26 - to the right this probably isn't much of
133:28 - a problem if i did want to fix that i
133:31 - could probably just apply a max width on
133:34 - my list items that way it's not taking
133:36 - up the entire left to right maybe
133:39 - something like 400 pixels
133:41 - and yeah that seems to wrap it a little
133:43 - bit and awesome this is a great start
133:45 - we're only missing two minor things
133:47 - we're going to change these colors of
133:48 - these bullets to be the same color as
133:51 - our logo up here and we're also going to
133:52 - add this little react logo over here to
133:54 - the right however both of these have a
133:57 - little bit of a gotcha to them so i
133:58 - thought it would be good to do them each
134:00 - as a separate assignment and that is
134:02 - what we're going to cover next
134:06 - originally my plan was to give you a
134:08 - challenge to color the bullets and make
134:10 - them just a little bit larger like we
134:12 - have in the design however as i was
134:14 - researching this i came across a
134:16 - relatively new css property or rather
134:18 - pseudo selector that makes this
134:20 - challenge extremely easy so just this
134:23 - once you can sit back and relax i'm
134:25 - going to show you just how easy this is
134:27 - there's a little bit of a gotcha with it
134:29 - but i included a slide here that shows
134:31 - you the mdn docs for the marker pseudo
134:34 - element
134:35 - and believe it or not this very
134:37 - specifically selects the bullets on list
134:40 - items
134:42 - and even look at this example it's
134:43 - changing the color and it's making it a
134:45 - little bit larger with its font size
134:47 - that's exactly what we want to do you
134:49 - can click this slide to go check out the
134:51 - docs poke around these allowable
134:53 - properties and of course you should
134:54 - probably play with this a little bit but
134:56 - fortunately this is a really easy thing
134:58 - for us to implement i'm just going to
135:01 - copy this
135:03 - and add my pseudo element selector for
135:06 - marker
135:07 - one thing to keep in mind is that this
135:09 - is not accepted by all browsers however
135:12 - safari firefox and newer versions of
135:15 - chrome have all adopted the marker
135:17 - pseudo element selector and i'm certain
135:19 - as time passes this is going to become
135:21 - even more widely accepted and therefore
135:23 - i feel pretty confident using this
135:25 - method for accomplishing this task
135:27 - so simply enough i can change the font
135:30 - size to let's say something like 1.4 rem
135:33 - and sure enough that made our bullets a
135:35 - little bit larger now as i was playing
135:37 - with this i noticed that if we get too
135:39 - large let's say three rem things become
135:41 - pretty misaligned and at least at this
135:43 - time when i was researching i could not
135:45 - find a good way to realign these bullets
135:48 - with the text so in my playing around i
135:50 - found that 1.4 made the bullets larger
135:53 - without getting them misaligned with the
135:55 - text
135:56 - so for now we have that limitation i'm
135:58 - just going to work within that and say
135:59 - the font size is 1.4 rim it's not quite
136:02 - as large as what we have here but that's
136:04 - okay
136:05 - and then again simply enough i'm just
136:06 - gonna go take the color of our text here
136:10 - this is the blue color that we want and
136:12 - stick it right here as our color and
136:14 - sure enough we have the blue color on
136:15 - the bullets easy peasy well i hope you
136:18 - didn't become too comfortable letting me
136:20 - do all the work because in the next
136:22 - screencast we are going to add this logo
136:24 - and by we i of course mean you in a
136:26 - challenge so that's what we'll do in the
136:28 - next screencast
136:32 - i actually debated a little bit whether
136:34 - or not i should include this as a real
136:36 - challenge for this section only because
136:39 - it touches on some css that you may not
136:41 - be super familiar with but in the end i
136:43 - settled on remembering that you guys are
136:45 - capable and you can use google to your
136:47 - advantage just like a real developer so
136:50 - here it is i decided to add it in your
136:52 - challenge is to place that gray react
136:54 - logo in the background we have that logo
136:57 - here under images as react icon
137:00 - large.png something important to know
137:02 - about this icon is that it is actually
137:05 - half of the react logo it looks from the
137:08 - design like maybe it's a full react logo
137:11 - that's just bleeding off the page but if
137:13 - you look closely once you put this react
137:15 - icon large on your actual page you'll
137:17 - notice that it's only half of a logo at
137:20 - first that threw me off that just had to
137:22 - do with the way that i exported it from
137:23 - figma honestly i think it makes our job
137:26 - a lot easier as we're placing it on the
137:27 - page
137:28 - so just keep that in mind as you move
137:30 - forward one last little piece of advice
137:32 - i'll give you is to add this background
137:34 - image to the main element it probably
137:37 - would work just fine to add it to the
137:38 - entire body element but i'm going to be
137:40 - doing it to maine so you might as well
137:42 - do it to the main element as well
137:44 - again google is a developer's best
137:46 - friend so don't be afraid to use google
137:48 - while you're trying to solve this
137:50 - challenge pause now and work on adding
137:52 - this background image
138:00 - okay hopefully you found this wasn't
138:02 - actually that big of a deal so i'm going
138:04 - to add
138:05 - first the background image to my main
138:07 - element here i'm going to use the url
138:10 - function so i can specify the location
138:13 - for these images this is relative to my
138:16 - style.css file so i'm going to say dot
138:18 - slash images slash
138:21 - react icon large.png
138:25 - okay and we see that it automatically is
138:27 - repeating around the entire page so
138:31 - that's where the background
138:33 - repeat comes in and we want to say no
138:36 - repeat
138:37 - of course here by default it puts it in
138:39 - the upper left of our page or rather the
138:42 - main element and this is where
138:44 - background position comes in now
138:47 - background position is actually a
138:49 - combination of background position x and
138:51 - background position y
138:53 - in fact let's start out there we can say
138:55 - background position x that's my position
138:57 - to the left and right i want to push it
139:00 - all the way to the right this is where
139:02 - having half of a logo becomes pretty
139:04 - handy for us because it automatically
139:06 - looks like it's bleeding off the side of
139:08 - the page and then with background
139:10 - position
139:12 - y
139:13 - we can specify something like top which
139:15 - is where it is now or bottom
139:18 - bottom i think is a touch too low
139:20 - although center is maybe a touch too
139:22 - high i can also use percentages so we
139:25 - can split the difference and say
139:26 - something like 75
139:28 - and now that we've seen these as two
139:30 - separate properties i actually can just
139:32 - combine these and say background
139:34 - position which is background position x
139:36 - and then i'll use a space and then y of
139:39 - 75 percent and that simplifies it a bit
139:42 - if i really wanted to i could use the
139:44 - shorthand background property which
139:45 - would be background and then i would
139:47 - just copy and paste this one first space
139:49 - this one space this one honestly i
139:52 - always forget what the background
139:54 - property is short for so i'm actually
139:56 - going to leave these as three separate
139:58 - properties so that in the future it's
140:00 - really easy for me to remember what each
140:02 - of those pieces means
140:04 - and awesome this represents a
140:06 - combination of everything that we've
140:08 - learned so far about react let me go
140:10 - ahead and clean up this challenge
140:13 - now of course we've been spending a bit
140:14 - of time in css land here and as i've
140:17 - mentioned i still think that's a really
140:19 - important thing to do even though our
140:21 - main focus in this course is to learn
140:23 - react it's really important to
140:24 - synthesize some of that other
140:26 - information that you have learned in the
140:27 - past so that it doesn't become stale to
140:30 - you and you just forget it that being
140:32 - said in the next screencast let's spend
140:34 - some time looking back at everything
140:36 - that we did learn about react because
140:38 - that's actually what we're here to learn
140:40 - and at the same time we'll take that
140:41 - opportunity to have a quick quiz and to
140:44 - look at a self-assessment project that
140:46 - you can do on your own
140:47 - so that's what we'll be doing next
140:52 - you've done a great job so far in this
140:54 - course before you just plow ahead to the
140:57 - next section it's time for a solo
141:00 - project this is meant to be a chance for
141:02 - you to flex your new react skills that
141:04 - you've been learning about so far in
141:06 - this section but this time without the
141:08 - training wheels and there's going to be
141:10 - a few of these throughout this react
141:12 - course and these projects serve a really
141:15 - important purpose they're meant to be a
141:17 - tool for you to gauge whether you are
141:19 - actually ready to keep moving forward in
141:21 - the curriculum or not unlike the
141:23 - challenges that i usually give you i
141:26 - won't be walking you through a solution
141:28 - to this one instead i'm going to be
141:30 - asking you to sort of go out on your own
141:32 - to build this project that said you're
141:35 - not actually completely on your own
141:37 - we've got a thriving community here on
141:39 - scrimba that's very willing to give
141:41 - feedback on your code we'll talk more
141:43 - about that in just a minute but first i
141:45 - want you to keep in mind that no one
141:47 - here is giving you a grade for these
141:49 - projects like they would if you were in
141:51 - school one of my personal objectives is
141:54 - to shift people's understanding of how
141:56 - learning occurs in school we're trained
141:59 - to complete the project for the grade
142:01 - but here you're completing the project
142:03 - to test yourself and to practice so
142:06 - skipping one of these solo projects will
142:08 - really only deprive you of the best
142:10 - chance you have to test out your skills
142:13 - and to really help you decide if you
142:15 - grasp the concepts that we've been
142:17 - learning so far okay with that guilt
142:19 - trip behind us let's actually take a
142:21 - look at what we're building for this
142:23 - project you're going to be building a
142:24 - digital business card everything here is
142:27 - static and you can see there's actually
142:29 - two different designs that you can
142:30 - choose from in fact if you click the
142:32 - screenshot it will send you to the figma
142:34 - design file you'll see that there's
142:36 - actually more designs including a light
142:38 - mode version of these designs and what
142:41 - you can do is just choose the one you
142:42 - like the best and build that one when
142:44 - you get to that design file make sure to
142:46 - click the little arrow at the top and
142:48 - choose to duplicate to your drafts and
142:51 - as far as actually coding the project
142:52 - goes i recommend that you just build
142:54 - your project here in scrimba on this
142:56 - screencast if you look in the very lower
142:59 - right you'll see a menu with three dots
143:01 - if you click that there's an option to
143:03 - fork this screencast to a new scrim
143:06 - doing that will make a duplicate of this
143:08 - project that you will have in your own
143:10 - account so that you don't have to worry
143:12 - about losing your work
143:13 - you can see i really didn't give you a
143:15 - whole lot to work with here we have a
143:17 - very basic html file that has our div
143:19 - with the id of root an empty index.js
143:22 - file some very basic styles and the two
143:26 - dependencies that you'll need to get
143:27 - react setup
143:30 - okay let's come back to the requirements
143:32 - of this project first of all i want you
143:34 - to be building this project from scratch
143:36 - which is why i'm not giving you any
143:38 - starter code at all next and probably
143:40 - pretty obvious i want you to fill in
143:42 - your own information for the digital
143:44 - business card here and while you're
143:46 - building it i want you to make separate
143:48 - components for the info section which is
143:50 - what i'm calling this whole top half up
143:53 - here the about section which is really
143:55 - just this header and a paragraph the
143:57 - interest section which is another header
143:59 - and paragraph and a footer section which
144:02 - has the social icons
144:04 - while you're working on this solo
144:06 - project make sure to share your work in
144:08 - fact you don't even need to wait until
144:10 - you're completely finished with the
144:11 - project you can be asking for code
144:13 - reviews and help all along the way if
144:16 - you click the discord icon here it will
144:18 - open the scrimba discord server
144:20 - specifically to a channel called i built
144:22 - this but in reality you can share your
144:24 - project in any of the channels that make
144:27 - sense to do so in and then for anyone
144:29 - who is learning in public and likes to
144:31 - use twitter you can click this twitter
144:33 - icon which will open twitter and
144:35 - pre-populate a new tweet where you can
144:37 - include a link to your project so that
144:38 - you can share it to the world
144:40 - okay i wish you the best of luck and i'm
144:42 - looking forward to seeing everyone's
144:44 - projects
144:47 - awesome job building some of your first
144:50 - react projects i know that these are
144:53 - just static sites and so far you're
144:55 - really not seeing the benefits of using
144:57 - react to build these kinds of projects
145:00 - but now that we have some of the basic
145:02 - react syntax under our belts we're ready
145:04 - to start dipping our toes into a few of
145:07 - the really neat features that react has
145:09 - to offer as a framework but first let's
145:11 - take just a minute to recap what we've
145:13 - worked on so far in this section
145:15 - in the beginning it can be really
145:17 - helpful to know why we even care about
145:19 - react in the first place we learned
145:21 - about how it is composable and
145:23 - declarative what those terms mean and
145:26 - how that's beneficial to us as web
145:27 - developers
145:28 - then we learned about the jsx syntax and
145:31 - how that allows us to write code that's
145:33 - much more familiar to us because it
145:36 - looks like we're writing html code
145:38 - inside of our javascript then we saw how
145:40 - we could actually apply the composable
145:43 - nature of react by creating our own
145:45 - custom components
145:47 - for example in our react fax site we
145:49 - created our own components for the main
145:52 - content of our page but also for our
145:55 - navigation bar
145:56 - obviously in this case our navigation
145:58 - bar and our main sections are pretty
146:00 - simple but hopefully you can imagine as
146:02 - your sites get more and more complex how
146:05 - the ability to segment each of the
146:07 - pieces of your page into its own
146:09 - components can be a really beneficial
146:11 - thing and soon we'll be really tapping
146:13 - into the power that comes with that as
146:15 - we learn more about react
146:18 - then we started learning about how we
146:19 - can style our projects because well
146:21 - obviously adding css is one of the key
146:24 - things that we need to make it look
146:26 - polished truthfully there are a ton of
146:28 - ways to add styling to react for now
146:31 - we'll just be sticking with css classes
146:32 - because they're familiar and all of
146:34 - these things combined have enabled us to
146:36 - create our own static pages in react
146:39 - like i mentioned because we've only been
146:41 - working on static things so far you
146:43 - might not yet be understanding why we're
146:45 - using react in the first place but i
146:47 - promise we're gonna get there and i
146:49 - promise it will be worth it before just
146:51 - moving on you should celebrate your wins
146:53 - over in discord there is a today i did
146:56 - channel if you click on the screenshot
146:58 - here it will take you there and you
146:59 - should let everyone know that you have
147:01 - just completed the first section of the
147:03 - introduction to react also this might be
147:05 - a good time to realize if you've been
147:07 - sitting down for too long or watching
147:09 - too much of this in one sitting make
147:10 - sure you take a break your brain needs
147:12 - to rejuvenate itself especially with all
147:14 - the new information you've been learning
147:16 - so once again congratulations on
147:18 - completing this section you really
147:20 - should be proud of yourself when you're
147:22 - ready to jump deeper into react i will
147:24 - see you in the next section
147:28 - now that we've covered the basic syntax
147:30 - and concepts of building a static page
147:33 - in react we're now ready to jump into
147:35 - the next phase which is learning how to
147:37 - use data to create our web pages
147:41 - in regular html and in the react code
147:43 - that we've done so far all of the
147:45 - content that we're displaying on the
147:47 - page has been hard coded directly into
147:50 - the react components and it turns out
147:52 - this has some major limitations which
147:54 - we'll be discussing in this section
147:57 - first let's look at the project that we
147:58 - just made this little react facts page
148:01 - all of the data on this page was
148:03 - actually hard-coded directly into the
148:05 - components themselves but now let's look
148:07 - at this section's project which is a
148:10 - clone of the airbnb experiences page up
148:13 - near the top we have some elements that
148:15 - are likely just hard-coded pieces of
148:17 - data however when you get toward the
148:19 - bottom and you have a list of different
148:21 - experiences you can probably imagine
148:23 - that there isn't a developer sitting
148:25 - around waiting for a new experience to
148:28 - become available on the airbnb website
148:31 - and then immediately going into the code
148:32 - and updating this list to include that
148:34 - new experience
148:36 - instead the data that's living in
148:38 - airbnb's database is what will be
148:40 - driving the list that we see here and
148:43 - once you start thinking in terms of
148:45 - components on a page that are actually
148:47 - being driven or displayed based on the
148:50 - data that underlies the page you'll
148:52 - start to see the same architecture
148:54 - existing all over the web
148:56 - basically any e-commerce site or page
148:59 - that has any kind of list on it is
149:01 - probably not using anything hard-coded
149:04 - into the code of the page but instead is
149:07 - using the data that lives behind it to
149:10 - drive the content that exists on the
149:12 - page
149:12 - if that's confusing at all don't worry
149:14 - we're going to dive into the specifics
149:16 - and see exactly what i'm talking about
149:19 - just like before you can click on the
149:21 - screenshot you see here to go to the
149:22 - figma design file for this sections
149:25 - project and also just like before when
149:27 - you get there you'll see a screen that
149:29 - looks similar to this i'd highly
149:30 - recommend that you click on the drop
149:32 - down arrow near the top go down to
149:35 - duplicate to your drafts and choose this
149:37 - option to create an editable copy that
149:39 - will live in your own drafts instead of
149:41 - trying to use the one that is shared
149:43 - amongst everyone coming to this page
149:46 - once you click duplicate to your drafts
149:48 - you should see a little modal at the
149:50 - bottom that pops up that says that the
149:51 - file was duplicated to your drafts which
149:54 - also includes a quick button that you
149:55 - can click to go directly there and by
149:58 - the way you can click any of these
149:59 - little screenshots to go to this design
150:01 - file as well
150:03 - so let's see what we're going to be
150:04 - learning the first thing that we'll be
150:06 - diving into is a concept called props in
150:08 - react props is one of the major topics
150:11 - in react that will help you create
150:13 - reusable and composable react components
150:16 - and so we'll be spending a pretty good
150:17 - amount of time covering the concept and
150:20 - the syntax of props
150:22 - and the other major topic we'll be
150:23 - covering in this section is how to
150:25 - create react components from an array of
150:28 - data
150:29 - this is what will allow us to create
150:31 - those designs like in our airbnb design
150:34 - here where we have a list of items that
150:37 - we won't need to manually update anytime
150:40 - the data behind it changes
150:42 - now before we jump into some of those
150:44 - more crucial topics in react the first
150:46 - thing we're going to do is spend a bit
150:48 - of time creating the top half of our
150:50 - project here and i'm going to say
150:52 - something that might shock a few of you
150:54 - and that is that if you already feel
150:56 - very confident in doing styling in react
150:58 - like we did in the last few screencasts
151:00 - of the last section i'm going to give
151:02 - you permission to skip the next few
151:04 - screencasts where we talk about
151:06 - designing the nav bar at the top and
151:09 - designing this hero section up here now
151:12 - this isn't a free pass to just skip
151:14 - those sections if you feel at all like
151:16 - you need additional practice using
151:18 - styling and react i highly recommend you
151:20 - do not skip those practices however i
151:22 - did just want to warn you ahead of time
151:24 - that we will be spending a bit of time
151:26 - working on some of those design aspects
151:28 - before we jump into the main topics for
151:31 - this section so again click on the
151:33 - screenshot here to open it in figma
151:35 - create a copy in your own drafts and
151:38 - then let's jump right in
151:42 - we're going to start off this section as
151:44 - mostly a review of what we learned in
151:46 - the last section which was how to create
151:48 - our own custom components the way that
151:50 - we'll be reviewing that is by first
151:52 - building the top section of this project
151:54 - which is really just static elements you
151:57 - can see up at the top we have a little
151:59 - navigation bar well it's not even a
152:01 - navigation bar it doesn't lead anywhere
152:03 - but we'll call it a nav bar and that's
152:05 - what we'll be working on in this first
152:07 - challenge after this we'll build this
152:09 - little photo grid and the text down here
152:11 - and those will be two separate
152:13 - components a navbar component and what
152:15 - we'll call a hero component
152:18 - you can click on the screenshot you see
152:20 - here at any time to be sent to the figma
152:22 - file in order to look for the design
152:24 - specifics and because we already
152:26 - hammered it in in the first section i'm
152:28 - not going to have you build this
152:29 - completely from scratch so let me walk
152:31 - you through what we have so far in
152:33 - index.js we're simply importing app and
152:36 - rendering app our app component is well
152:40 - basically as simple of a component as it
152:42 - could possibly be at this time
152:44 - and this is also where your challenge is
152:45 - to build the navbar component
152:48 - i've also included the airbnb logo image
152:50 - as well as the photo grid image which
152:53 - we'll get to in the next challenge but
152:55 - in this challenge the airbnb logo is
152:57 - this little airbnb logo in the
152:59 - navigation bar that you'll be working on
153:01 - now
153:02 - the last couple things you'll notice is
153:03 - that i have the styling about as basic
153:06 - as it can be at this time and i've also
153:09 - already imported the poppins google font
153:11 - that you'll notice is used in the design
153:14 - file as such when you're setting the
153:15 - font family you can just say pop-ins but
153:18 - in this screencast i don't think you
153:20 - need that yeah this nav bar doesn't have
153:21 - any text it just has the image
153:23 - okay let's go pause the screencast and
153:26 - build out our navbar component
153:35 - i think what i'll do even though this
153:36 - isn't going to be a particularly large
153:38 - application i'm going to add a new
153:40 - folder called components
153:43 - and that is where i will put my new
153:45 - navbar js component
153:47 - in navbar i'm going to import react from
153:50 - react
153:51 - and export default my navbar function
153:56 - i'm going to use the semantic nav
153:59 - element
154:00 - here
154:01 - and the only thing we really have in
154:03 - here is an image so i'll use the image
154:06 - element
154:07 - and i'll provide the source which will
154:09 - be dot dot slash images since i'm now
154:12 - inside of a components folder
154:15 - slash airbnb dash logo.png
154:19 - okay we have our component built
154:20 - obviously this image is not sized
154:23 - correctly so as soon as we get it
154:24 - displaying it's going to look a little
154:26 - bit funny but in our app.js let's go
154:28 - ahead and import our nav bar
154:32 - from dot slash nav bar or actually it's
154:35 - dot slash components slash nav bar
154:38 - and then for our app component let's
154:41 - instead of rendering this h1 we'll put a
154:43 - div as our wrapper for the elements we
154:46 - put here
154:47 - and we will render our navbar
154:50 - okay again i bet our logo is pretty huge
154:53 - yeah that's much larger than we expect
154:56 - but that's okay because now we can turn
154:57 - to the css in order to style this
155:01 - because this app will be pretty limited
155:03 - in size and i'm only going to have one
155:05 - nav element i'm just going to directly
155:08 - style the nav element i can see from the
155:11 - design that it has a height of 70 pixels
155:14 - and of course that's not going to stop
155:16 - our image necessarily from expanding
155:18 - beyond the borders of that nav however
155:21 - in order to center that logo and get it
155:24 - over there on the left and everything i
155:26 - think i would like to just make this a
155:28 - display flex
155:30 - i think that's also going to
155:32 - yep our logo will be confined within the
155:35 - flexbox because now it's a flex item and
155:37 - it's automatically resized to fit within
155:39 - its boundaries
155:41 - if i add a little bit of background
155:43 - let's just do something temporary we'll
155:44 - say background color is blue that lets
155:47 - me see exactly what i'm working within
155:49 - and i bet if we just add some padding we
155:52 - will get to resize that airbnb logo a
155:54 - little bit smaller let's give it about
155:57 - 20 pixels on the top and bottom oh
155:59 - that's already looking a lot better and
156:01 - we'll say maybe 36 pixels on the left
156:03 - and right that'll just bump it a little
156:05 - further to the right then if we look on
156:07 - the design we can see that there's
156:09 - actually a box shadow on the bottom of
156:11 - this nav bar it kind of helps separate
156:13 - it from the rest of the body this isn't
156:15 - always a perfect way to go but you can
156:17 - actually just copy that css directly
156:19 - from figma and paste it you can see when
156:21 - it was designed it might not have been
156:23 - perfect we have some weird decimal
156:24 - values here but for now i'm not going to
156:26 - be too concerned about that
156:28 - it's a little difficult to see with our
156:30 - blue background so let's get rid of our
156:31 - blue background and awesome we can see
156:34 - that's looking pretty good one kind of
156:36 - strange bug i noticed when i was
156:37 - practicing this earlier is that on a
156:40 - safari browser this airbnb logo will
156:42 - sometimes stretch the entire width for
156:44 - some reason of this navbar so before i
156:47 - move on i'm going to go to my nav bar
156:49 - and give a class name to my image here
156:53 - let's call it nav dash dash logo
156:57 - and i'll hit save so that we can style
156:59 - that in our css we will select nav dash
157:02 - dash logo and if i give it something
157:04 - like a max width of 100 pixels that
157:06 - fixes the problem in safari
157:09 - awesome this is a great start to our app
157:11 - in the next screencast we'll pick up
157:13 - with another challenge and complete the
157:15 - hero section which is right below and
157:17 - that will conclude the review at which
157:19 - point we can move on to the topics for
157:21 - this section
157:24 - the next part of this review is for us
157:25 - to now build our hero component that
157:28 - includes the photo grid this h1 and this
157:31 - paragraph
157:32 - to make things easy for the photo grid i
157:34 - exported all of these photos as a single
157:36 - png so you don't have to worry about
157:39 - laying out these images in a really cool
157:41 - way like this
157:42 - just as before you can click this
157:43 - screenshot to go to the figma design
157:45 - file for the specifics the font being
157:48 - used is that poppins font that we're
157:50 - pulling in through google fonts so you
157:51 - can set the font family to poppins from
157:54 - a design perspective you might also
157:56 - notice that this image grid is centered
157:58 - in its container whereas the text is
158:00 - left aligned although obviously there's
158:02 - this padding here
158:04 - so your challenge is to build the hero
158:06 - component pause the screencast and work
158:08 - on this challenge
158:16 - i'll work backwards this time i'm going
158:18 - to duplicate my navbar line that i'm
158:20 - importing and change this to hero even
158:23 - though this component doesn't exist yet
158:25 - we'll do the same down here and render a
158:27 - hero
158:28 - i'm not going to hit save because that's
158:30 - going to cause this to crash instead
158:32 - let's go ahead and create our hero js
158:34 - file
158:35 - we will import react from react
158:38 - and export default
158:41 - a hero component
158:43 - and first let's get our bear element set
158:46 - up i'm going to return maybe we'll call
158:48 - this a section element since it's a
158:50 - section of our page
158:52 - and we can see we have an image element
158:55 - an h1 element and a paragraph element so
158:58 - i'll include those now
159:02 - i'll go ahead and just paste in the text
159:04 - of these from the design file
159:07 - let's add our image source
159:09 - and that'll be from dot dot slash images
159:12 - slash photo dash grid png
159:15 - and just like our logo this is probably
159:16 - going to be a little too big for us yep
159:19 - if i scroll down though i can see some
159:20 - of this stuff popping up here that's
159:22 - good it's a good start i'm going to set
159:25 - us up for some success with the css just
159:27 - by giving us some class names
159:30 - let's give the image a class name of
159:33 - maybe hero
159:34 - photo
159:35 - we'll do the h1 is a class name of
159:40 - let's say hero
159:42 - dash dash header
159:44 - and we'll do the same for the paragraph
159:47 - let's call it hero dash dash text
159:51 - i'll hit save and then we'll go over to
159:53 - our styles so we can style some of these
159:56 - up one thing that i've liked doing in
159:58 - the past is if i'm going to have a
160:00 - section that represents an entire
160:02 - section of my page i just will style the
160:05 - entire section element or the section
160:07 - element directly and give it something
160:09 - like a padding of 20 pixels
160:12 - that way if in the future i want to use
160:14 - sections as well sections of my web page
160:17 - it will automatically have the padding
160:18 - applied similar to what we did with our
160:21 - nav bar i think i want to make this
160:23 - section a display flex but i'll have it
160:26 - be in a column direction that'll make it
160:28 - really easy for me to center this photo
160:30 - grid but keep these left aligned
160:33 - i don't want to do that on all of my
160:34 - sections however so i think i'll go back
160:37 - to my hero and i'll give this section a
160:39 - class name
160:41 - of hero
160:42 - and that way it's acting kind of like
160:44 - the hero container
160:46 - and
160:47 - let's style our hero to be display flex
160:52 - with a flex direction of column
160:55 - i have to hit save over here so that
160:58 - applies okay that's already looking a
161:00 - lot better
161:01 - i'm going to make this just a little bit
161:03 - bigger so we can see how it compares
161:06 - one thing i noticed when i resize that
161:08 - is my image is growing probably
161:10 - infinitely to fit this container because
161:13 - i'm working in a fairly small space i'm
161:15 - really only designing for mobile right
161:16 - now but i think what i want to do is
161:19 - give my hero photo
161:22 - something like a max width of it looks
161:24 - like in the design it's around 400
161:26 - pixels and we can see doing that is
161:28 - making it align to the
161:31 - left side there
161:32 - so let's give this the flex item
161:35 - property of align self
161:38 - to the center
161:40 - okay well the only other thing i notice
161:42 - when i'm looking at the design is that
161:44 - my h1 and my paragraph are spread a
161:47 - little ways apart oh and they're not the
161:49 - correct font family quite yet so let's
161:52 - actually give the entire body
161:54 - a font family of
161:58 - poppins
161:59 - and we'll give it a backup of sans serif
162:02 - and let's see
162:03 - oh whoops not popping poppins
162:06 - okay and yeah that's making a difference
162:08 - awesome and then i'll come back down and
162:10 - i'm going to simply style my hero header
162:15 - and let's specify a bottom margin
162:18 - so margin bottom of it looks like it's
162:21 - about 16 pixels in the design and i
162:23 - think my paragraph might have some
162:26 - margin that's automatically applied i'm
162:27 - just going to style my hero text
162:30 - to have a margin top of zero
162:33 - okay those are sitting a little closer
162:35 - together a lot like the design
162:37 - okay i know that was a little bit
162:38 - lengthy to work on mostly css here but
162:41 - like i said i really think it's
162:42 - important to be synthesizing some of the
162:44 - past things that you've learned before
162:46 - they you could say atrophy or get stale
162:49 - and you just forget them especially as a
162:52 - friend and developer there's almost no
162:54 - way to completely escape css if you hate
162:56 - it and hopefully if you love it then you
162:58 - really enjoy these reviews so with this
163:01 - top half out of the way now for the rest
163:03 - of this section we'll be learning what
163:04 - we need to know in order to handle the
163:06 - bottom part of this app so that's what
163:08 - we'll start doing in the next lesson
163:13 - let's jump right in and start building
163:15 - an instance of our card component the
163:17 - main purpose of this exercise is to
163:20 - really illustrate how we're not quite
163:22 - yet prepared to build a series of
163:24 - components like we have down here so for
163:26 - now you're just going to build out one
163:28 - instance of our card there's a few
163:29 - things that i've done for you i've
163:31 - created first of all this card component
163:33 - so you won't have to build this from
163:35 - scratch and right now we're just
163:37 - rendering one instance of our card
163:38 - component you'll notice too that i moved
163:41 - our hero out and commented it out this
163:42 - just so we didn't have to keep scrolling
163:44 - down in our app in order to see the
163:46 - progress that we're making and let's go
163:48 - to card.js and look at our challenge
163:50 - your challenge is to build out the card
163:52 - component and for now just hard code in
163:54 - the data for this first one with katie
163:56 - zafirus
163:58 - for some of the notes only render one
164:00 - instance i already did this for you also
164:02 - the little star icon and the photo of
164:05 - katie zafirus are here in our images we
164:07 - have katy zafirus.png and star.png i
164:11 - just talk here about making sure to
164:13 - include all of the pieces of data that
164:15 - we have and again that the main purpose
164:17 - is to show that we have some limitations
164:19 - currently in our understanding of react
164:21 - so don't worry about the fact that
164:22 - you're just hard coding all of this data
164:24 - into the card component for now
164:26 - all right it's time pause the screencast
164:28 - and work on this challenge
164:36 - okay so when i look at the card
164:38 - component that we have in the design i
164:40 - think what i'll do is make one div that
164:42 - will surround everything in the card
164:44 - both the image and all of the data below
164:47 - i'll probably put all three of these
164:49 - pieces of data and this little star
164:51 - image into its own div so that i can use
164:54 - flexbox to make sure that they're all
164:56 - center aligned and then i'll probably
164:59 - just put this life lessons with katie
165:01 - zafirus in a paragraph and these prices
165:04 - here in a paragraph i may end up putting
165:06 - this bolded section in a little span
165:08 - inside of that paragraph just to make it
165:10 - bold
165:11 - if you were feeling adventurous you
165:12 - might have put this little badge here
165:14 - i'm going to ignore that badge for now
165:15 - we're going to cover that a bit later so
165:17 - let's get some of the elements on the
165:19 - screen here we're not going to have an
165:21 - h1 instead we'll surround everything
165:23 - with the div
165:25 - i think i'll go ahead and just give this
165:27 - a class name now of card because i
165:30 - already know i'm going to be styling
165:31 - this the very first thing i have is an
165:34 - image
165:35 - and we'll hard code in our source that's
165:37 - going to be in dot dot slash images
165:40 - slash katy
165:42 - zafirus.png
165:44 - i'm sure this is going to be a bit large
165:46 - as well so i'll go ahead and give this a
165:48 - class name we'll say car dash dash image
165:52 - and then like i mentioned i think these
165:54 - elements here we've got the star the
165:57 - rating the rating count and the location
166:01 - all here in a line so let's create a div
166:06 - maybe we'll call this a class name of
166:09 - card stats
166:11 - and we'll put in our image
166:14 - which will have the
166:16 - star.png as its source
166:19 - then i think just to get these other
166:21 - things in line i'll use an inline
166:24 - element like span so let's go ahead and
166:26 - create
166:27 - i'm going to have three spans here
166:31 - and remember i'm just hard coding in
166:33 - some data so we'll put 5.0 we had a
166:36 - parenthesis with a six
166:38 - and i might actually just put my little
166:40 - bullet here as well
166:43 - and then the location was usa
166:45 - i guess let's hit refresh and see where
166:47 - we are okay obviously some styling to
166:50 - handle but at least things are showing
166:52 - up
166:52 - after those stats i think we just had
166:54 - two more paragraphs so let's go ahead
166:56 - and create a couple paragraphs we have
166:59 - life lessons with katie zafirus
167:03 - and here we had from 100 was it 136 i
167:07 - guess it doesn't really matter per
167:09 - person
167:10 - all right let's see where we are
167:12 - okay well we have the elements on the
167:14 - screen let's start doing some styling
167:16 - here i'll go over to styles
167:18 - first i'll start off with my card and it
167:20 - looks like from the design that it has a
167:22 - width of about
167:24 - 175 pixels and while i'm here i'm
167:27 - noticing that the text of this card is a
167:29 - little large i think i'll just style all
167:31 - of that right here we're going to say
167:33 - font size of it looks like it's about 12
167:35 - pixels okay that's starting to look
167:38 - better
167:38 - i had my card image which is looking a
167:42 - little large and in fact the image is
167:45 - spanning outside of the boundaries of
167:47 - the card so if i add a width of a
167:50 - hundred percent yeah that's much better
167:52 - and from the design it looks like we
167:54 - also have a bit of a border radius looks
167:56 - like maybe nine pixels
167:58 - awesome the image is looking good then
168:00 - we have this div that contained our
168:02 - image and our three spans i think we
168:04 - called that card stats
168:07 - and like i mentioned we're gonna make
168:08 - that display flex
168:11 - and use align items to the center
168:14 - okay and my star is looking pretty huge
168:17 - compared to the other things i can't
168:18 - remember if we added a class name to the
168:21 - star not yet let's go ahead and add a
168:23 - class name
168:25 - and maybe we'll call it card dash dash
168:27 - star
168:29 - then
168:30 - i'll hit
168:31 - refresh somewhere so we can see those
168:33 - styles right away
168:35 - card star
168:36 - looks like the height is about 14 pixels
168:40 - okay that's looking a lot more
168:41 - manageable
168:42 - in the design the
168:44 - review count of six here and the
168:47 - location are both in gray i think what
168:50 - i'll do is actually just create a bare
168:52 - gray clasp that isn't specific only to
168:54 - this card just because it seems like
168:56 - something i might want to do with a few
168:58 - other elements so i will give both of
169:01 - these spans a class name of gray
169:04 - and then
169:05 - since that's a little bit more of a
169:07 - generic style i think i might move it up
169:10 - maybe just right here below the nav
169:12 - we'll create a gray class and
169:14 - we'll just say that the color is the
169:18 - kind of grayish color from the design
169:20 - so i just copied and pasted that
169:22 - straight from figma i need to go and
169:24 - refresh here okay we have a bit of a
169:27 - light gray tint there the only other
169:29 - thing i think i might do is change this
169:32 - to bold right now that seems like
169:33 - another thing i might want to do
169:35 - elsewhere if i just want to bold this
169:38 - text i suppose i could surround it in a
169:40 - b tag or a strong tag i think i'm going
169:43 - to actually surround it with a span
169:46 - so that i can style that span and just
169:48 - do that in line we'll surround the from
169:51 - 136 dollars we'll give that a class name
169:54 - i think again i'll make this generic
169:56 - we'll just say bold and in my styles.css
169:59 - we'll add a bold class
170:02 - that sets the font weight to bold
170:04 - and let me hit save over here
170:07 - awesome let's give ourselves a little
170:09 - more room okay this is certainly looking
170:11 - good enough for now hopefully as you
170:13 - were building this you could start to
170:15 - see some of the limitations that we have
170:17 - with the way that we built it especially
170:19 - by hard-coding all of this data directly
170:21 - into the card component so in the next
170:23 - screencast let's start talking about
170:25 - what the problem is with the way we
170:27 - currently have this and that will set us
170:28 - up perfectly to learn the solution to
170:30 - this problem
170:34 - i assume many of you watching the last
170:36 - screencast were thinking to yourselves
170:38 - okay i'm creating this card component
170:40 - but because i'm hard coding the data in
170:42 - it's not going to be reusable i've
170:44 - updated the google slide to show you
170:46 - maybe a more realistic version of the
170:48 - design that we're looking for because
170:50 - we're not just going to have the same
170:51 - experience with all of the same data
170:53 - inside
170:54 - these kinds of repeated components are
170:56 - found everywhere online and if you just
170:58 - start looking for them you will see them
171:00 - everywhere i pulled up screenshots from
171:02 - some of the first designs i could think
171:04 - of in amazon every component or every
171:07 - product is going to have a repeated
171:08 - element
171:09 - here's imdb that has something that
171:11 - looks relatively similar to what we're
171:13 - doing and here's apple which has
171:15 - different product components which
171:17 - really just have an image and a title
171:18 - image title image title
171:20 - and you can imagine that when a new
171:22 - movie comes out to put on imdb there
171:24 - isn't a developer out there that is
171:26 - actually typing in new html or copy and
171:30 - pasting the html that they already
171:32 - created and then just changing out some
171:34 - of the data but instead these components
171:36 - are actually data driven on imdb for
171:39 - example all they need to do is add a new
171:42 - movie to their database which includes
171:44 - things like the cover image the rating
171:46 - the title and so forth and then the
171:48 - website will automatically update to
171:50 - include a new movie in its list here
171:53 - we're going to cover the data aspect
171:55 - later but for now the main problem we
171:57 - have is that our component is so
171:59 - hard-coded that we can't really reuse it
172:02 - in any meaningful way and in react this
172:04 - is where the concept of props comes into
172:07 - play now in my years of teaching react i
172:10 - have found that props can be one of the
172:11 - more difficult subjects for students to
172:14 - grasp and so what i plan on doing is
172:16 - taking the topic and just spreading it a
172:18 - little bit thin over a few different
172:19 - screencasts and you'll get your hands on
172:21 - the keyboard and get to really practice
172:23 - with it so that you can understand the
172:25 - concept of props
172:26 - so let's jump right in and get started
172:32 - let's start by understanding the basic
172:34 - concept of props and react
172:36 - what you see here is just a plain
172:39 - index.html file we haven't introduced
172:41 - anything dealing with react in this i
172:43 - want you to take a close look at the
172:45 - elements that you see here and see if
172:47 - you can figure out what's wrong with
172:48 - them
172:52 - let's start with the anchor tag an a tag
172:55 - an anchor tag is intended to link you to
172:57 - another place but currently we don't
172:59 - have
173:00 - an attribute like the href specified
173:03 - without an href this link is essentially
173:06 - useless we need the href property in
173:08 - order for us to send someone to another
173:10 - page maybe like google.com
173:13 - similarly the image element is basically
173:15 - useless without any kind of source
173:17 - property we need to add this source
173:20 - attribute or property in order to
173:21 - specify exactly what image will be here
173:24 - we could put the path to a local file or
173:26 - we could put the address of a file
173:28 - that's hosted somewhere on the internet
173:30 - input is interesting because i think on
173:33 - its own it actually will
173:36 - yeah it actually will put an input box
173:38 - that we could type into if we wanted to
173:41 - however there are attributes or
173:43 - properties that we can add to the input
173:45 - that will make it a lot more
173:47 - let's say beefed up or capable for
173:50 - example i can add a placeholder that
173:52 - says something like first name and that
173:54 - suddenly makes the first name text
173:56 - appear inside of my element on the page
173:59 - or there's ones that have even more
174:01 - consequence to them like the type
174:03 - property if i change the type of this
174:05 - input to something totally different
174:07 - like submit
174:08 - now it changes from an input text box to
174:11 - a button similarly i could change it to
174:14 - radio and it completely changes the
174:16 - visual look of this input these are
174:18 - concepts that i'm sure you're already
174:20 - very familiar with let's look at a
174:22 - similar parallel example in javascript
174:26 - here i've written a function that's
174:27 - called add two numbers together and it
174:29 - just hard returns one and two think for
174:32 - a second what is wrong with this
174:34 - function it's syntactically correct but
174:36 - what's wrong with the function like this
174:41 - well it's very very limited in its
174:43 - capabilities right now if i call add two
174:46 - numbers together it will always return
174:48 - three essentially it's a useless
174:50 - function now you might already see where
174:52 - i'm going with this if i add some
174:54 - parameters like let's say a and b to
174:57 - this function now i can dynamically add
175:00 - and return the result or rather the sum
175:03 - of the two numbers that i pass in
175:05 - and with the small addition of these two
175:08 - parameters that i've added i now have
175:10 - sort of beefed up this function in a way
175:12 - that it's capable of adding whatever two
175:14 - numbers i want not just the hard-coded
175:17 - one and two that used to be there again
175:19 - these concepts should be familiar to you
175:20 - by now but this is just a primer for us
175:23 - to understand the concept of props in
175:25 - react
175:26 - in both of these instances in javascript
175:28 - and html we can see that passing
175:31 - additional information to our
175:34 - maybe elements or in this case functions
175:37 - allows us to reuse these elements or
175:40 - functions in multiple different ways so
175:43 - with that primer under our belts let's
175:45 - look at another conceptual parallel that
175:47 - is a little more visual
175:51 - let's try to understand props with a
175:53 - little bit more of a visual example this
175:56 - is a screenshot taken from youtube and
175:58 - as you spend more and more time with a
176:00 - framework like react you will begin to
176:02 - see these patterns of elements on the
176:04 - page that are repeated pretty much
176:06 - everywhere on the internet for example
176:08 - if you look here you'll see that there
176:10 - are multiple components being displayed
176:12 - here but all of them have essentially
176:14 - the exact same structure
176:16 - they each have an image toward the top
176:18 - that takes up about half of the height
176:19 - of the component
176:21 - each of them has bolded text that
176:22 - represents the title
176:24 - there's the view count showing the
176:26 - number of days ago that it was published
176:28 - there's even little time stamps embedded
176:31 - inside of the image in the lower right
176:33 - and as i've mentioned before there
176:35 - certainly isn't a developer at youtube
176:37 - that every single time a video is posted
176:39 - to youtube they go in copy the code from
176:41 - an old tile and paste it in again so
176:43 - that it can exist on the site instead a
176:45 - developer has created a single component
176:48 - maybe let's call it a video tile
176:50 - component and has made that component
176:52 - flexible enough to take in as a property
176:55 - the image and the title the view count
176:57 - the number of days ago it was posted who
176:59 - posted it the time stamp and so forth
177:02 - and as you become more experienced and
177:04 - react and you start to see these
177:05 - patterns for yourself you'll begin to
177:07 - realize that they can be nested inside
177:10 - of each other
177:11 - for example not only do we have repeated
177:13 - video tile elements here but we have
177:16 - something that let's suppose is called a
177:18 - video list each one of these is made up
177:20 - as a parent-child relationship of video
177:23 - tiles even small things like on the left
177:25 - side of the page you can see that these
177:27 - are probably individual components that
177:29 - are taking in properties to help them
177:31 - display something slightly different in
177:33 - this case it's probably just two
177:35 - elements there's an image and there's
177:37 - some text
177:38 - so that's probably enough of the
177:39 - conceptual i think you're starting to
177:41 - understand the concept now let's go back
177:43 - to react and we'll start looking at how
177:45 - this is actually applied in code
177:50 - before we can continue on with props we
177:52 - need to take a quick aside to talk about
177:54 - something
177:55 - we've learned how our components will be
177:57 - returning jsx which is a special syntax
178:00 - of javascript or rather it's something
178:03 - that's created by react and allows us to
178:06 - write our react code in a very
178:08 - declarative way however one of the most
178:10 - common things that you'll find yourself
178:12 - doing is trying to insert values from
178:15 - javascript inside of your jsx
178:18 - right now we just have some text inside
178:20 - of our h1 but let's assume we had a
178:23 - value like first name
178:25 - maybe this is
178:26 - joe
178:28 - and a last name
178:30 - let's say shmo
178:32 - think for a second how would you change
178:34 - our h1 to no longer say hello world but
178:37 - instead to say hello joe shmoe
178:43 - well we can probably see ahead of time
178:45 - that just trying to input first name
178:48 - last name
178:49 - or maybe even adding a space in there as
178:51 - if this were regular javascript
178:54 - isn't really going to work if i do this
178:56 - i'm going to get the literal text of
178:58 - first name plus last name
179:00 - interpreted as the text content of my h1
179:04 - fortunately react has made it really
179:06 - simple to interpret something as
179:08 - javascript instead of text when it's
179:10 - inside of a jsx element and that is by
179:13 - simply surrounding it with a single set
179:15 - of curly braces almost like it were an
179:17 - object
179:18 - so at this point before i even hit save
179:21 - i'm going to give you a quick challenge
179:24 - simply enough i want you to finish off
179:26 - the h1 that we have here so that it says
179:28 - hello joe schmo and actually let's put
179:30 - an exclamation point in there for a good
179:31 - measure
179:32 - pause the screencast and do this
179:34 - challenge
179:39 - well if i hit save we'll see that it
179:42 - interprets the joe correctly instead of
179:44 - saying first name it's now taking the
179:46 - value of our first name javascript
179:48 - variable and inserting it here and then
179:50 - of course the rest of this text is still
179:52 - there if i were just to surround last
179:55 - name then i would get a little bit
179:57 - closer but i still have my plus and my
179:58 - quotation marks
180:00 - so at this point i can just get rid of
180:02 - those put a space in between my two
180:05 - values
180:06 - hit save and there we go hello joe
180:08 - schmoe the way i like to think of this
180:11 - is that as soon as i start seeing jsx
180:14 - the interpreter sort of goes into jsx
180:16 - mode
180:17 - anything after this greater than symbol
180:19 - is going to start being
180:21 - considered the text content or in the
180:24 - case of having nested elements other jsx
180:26 - elements and we're currently in what you
180:28 - could call jsx land however as soon as
180:31 - we see this opening curly brace we
180:34 - switch back into our javascript mode or
180:37 - javascript land and then anything inside
180:39 - of my set of curly braces will be
180:41 - considered javascript once i get to this
180:44 - closing curly brace i'm now back into
180:46 - jsx which is why i have an actual space
180:49 - in the text between my first name and my
180:51 - last name
180:53 - then it sees my curly brace again so i'm
180:54 - back in javascript land the closing
180:57 - curly brace tells me i'm done with
180:58 - javascript i get the exclamation point
181:01 - as part of my actual text
181:03 - and then i close off my jsx tag
181:06 - now once i enter javascript land i can
181:09 - actually do more than just take in
181:11 - values from my javascript up above in
181:14 - fact anything that i put inside of my
181:15 - curly braces can be run as javascript
181:18 - code let me clean up this challenge
181:20 - really quick
181:23 - something that's important to note is
181:25 - that anything i put inside of my curly
181:27 - braces will be run as regular javascript
181:29 - code
181:30 - so i'm not limited to just pulling in
181:32 - values like this for example i could do
181:34 - something like say i have a new date
181:37 - which is a new date object
181:39 - and then change this to something like
181:42 - it is currently about
181:44 - and then run some javascript code inside
181:47 - of my curly braces
181:49 - saying date dot
181:51 - get hours
181:53 - and then let's say we want to do a
181:55 - modulo 12 so that we get the am pm hours
181:58 - or rather like on a 12 hour clock
182:00 - i hit save and there we go it's
182:02 - currently about three maybe i say
182:05 - o'clock
182:06 - and that's because for me when i'm
182:08 - recording this it's currently 3 21 pm
182:11 - and in fact i wouldn't even necessarily
182:13 - need to create my date outside of here i
182:15 - could say new date
182:18 - dot get hours and i'm going to get the
182:20 - same result even without doing it out
182:22 - here because anything that i put inside
182:24 - these curly braces will be run as
182:25 - regular javascript now personally i
182:28 - think it's a lot more readable to do the
182:30 - actual javascript outside of my
182:33 - return value in my jsx so if i were
182:36 - doing this in the real world i'd
182:37 - probably say something like const hours
182:40 - equals date dot
182:42 - get hours modulo 12 and then inside of
182:46 - my render down here all i'm doing is
182:48 - putting hours
182:51 - and of course we get the same result
182:52 - that way one thing that's nice about
182:54 - doing it this way is you can sort of
182:56 - separate the logic that your component
182:59 - is running with the display that your
183:01 - component needs to show on the screen so
183:03 - for example let's say i wanted to say
183:05 - depending on the time of day good
183:06 - morning good afternoon or good night
183:09 - well i could do all of my logic up here
183:11 - to determine what should display after
183:13 - the word good for example
183:16 - i want it to say good afternoon because
183:18 - for me right now it's afternoon
183:21 - i could do something like this and i'll
183:23 - probably speed this up so it doesn't
183:24 - take up too much time
183:30 - all i've done really is created a
183:32 - changeable variable let time of day and
183:35 - then said if the current hours is less
183:37 - than 12 it's morning if it's between 12
183:40 - and 17 then it's afternoon and otherwise
183:43 - it's considered night i probably should
183:44 - make something for evening because 5
183:47 - o'clock p.m seems a little bit early to
183:48 - say goodnight to someone but whatever so
183:51 - here's another mini challenge for you
183:54 - okay your challenge is simply to fix the
183:56 - h1 below to use the time of day string
183:59 - that we determined in the code above
184:01 - pause the screencast and work on this
184:02 - challenge
184:08 - simply enough all we really need to do
184:09 - is remove the hard-coded afternoon put a
184:12 - set of curly braces and then say time of
184:15 - day now of course because it is
184:17 - afternoon for me this will still say
184:18 - afternoon i suppose i could just trick
184:21 - this maybe a change just to say if it's
184:22 - between 12 and 1 then we consider it
184:24 - afternoon but otherwise it's good night
184:26 - i should be able to hit refresh and sure
184:28 - enough it says goodnight i'm going to
184:29 - change that back so that's not so weird
184:33 - okay with that concept we are primed to
184:35 - now jump back into props and to see what
184:38 - the syntax of props actually looks like
184:42 - to help guide us through learning the
184:44 - syntax of using props and react we're
184:46 - going to look at this little contact
184:48 - book that i created here as you can see
184:51 - in our app component everything is hard
184:53 - coded each one of these divs which i
184:55 - separated with a little space in between
184:57 - each one represents one of the contact
185:00 - cards but of course all of the data is
185:02 - hard coded inside which means if i ever
185:05 - needed to make a change especially to
185:07 - something like the styling i'm going to
185:09 - have to make that change to every
185:11 - instance of this contact card that we
185:14 - see here
185:16 - before we can really talk about props
185:17 - though we have a challenge for you and
185:19 - that challenge is to create a separate
185:21 - component called contact which as the
185:23 - challenge shows will be in a different
185:25 - file and then i just want you to choose
185:27 - one of the contacts that we have here to
185:30 - move into that file essentially you can
185:33 - just copy and paste one of these
185:34 - contacts over into your contact
185:36 - component
185:37 - then once you've moved one of these
185:39 - contacts over to the contact component i
185:41 - want you to import the contact component
185:44 - and render four instances of it here
185:46 - inside our app component while you're
185:48 - working on that part of the challenge i
185:49 - want you to think ahead what's going to
185:51 - be the problem with doing it this way
185:53 - okay pause the screencast and work on
185:55 - this challenge
186:03 - okay so i'll create a new file called
186:05 - contact.js
186:07 - and in contact.js we'll import react
186:10 - from react
186:12 - we'll export default
186:14 - our function contact
186:17 - and for now we're just going to copy and
186:19 - paste one of the contacts let's choose
186:22 - mr wiskerson here
186:25 - okay that should have been easy enough
186:27 - inside of app we will then import
186:29 - contact from our contact file
186:34 - and then instead of completely deleting
186:36 - all of these because i think i want
186:38 - access to this data i'm going to
186:40 - actually move them
186:42 - down
186:43 - outside of my component and then just
186:46 - comment them out that way i still have
186:48 - access to them but they're out of the
186:49 - way
186:50 - and now i'm going to render four
186:52 - instances of my contact component if you
186:55 - didn't make it this far or you didn't
186:57 - take the chance to think ahead what's
186:59 - going to be wrong with doing it this way
187:00 - i want you to think now what's going to
187:02 - be wrong when i create four instances of
187:05 - this contact component
187:10 - well if i hit save we get
187:12 - for mr whiskerson's
187:14 - and as much as we left mr whiskerson we
187:17 - still need the data from our other
187:19 - contacts here in our contact book why
187:21 - exactly is this happening well when we
187:23 - copied one of the contacts and pasted it
187:26 - over we pasted the data with it just
187:28 - like a function
187:30 - let's say add two numbers
187:33 - that takes no parameters and simply
187:35 - returns a hard-coded amount in this case
187:37 - one plus two every time we call this
187:40 - function it will always give us the same
187:42 - result in the same way our contact card
187:44 - has that data embedded inside of it or
187:47 - hard coded in it and therefore it's
187:49 - going to show up every time we make an
187:51 - instance of that component now similar
187:53 - to how we instead will usually pass some
187:56 - parameters to a function which make it
187:58 - more flexible and reusable i can say
188:00 - return a plus b and now suddenly i have
188:03 - an infinite number of possibilities with
188:05 - this function because all i need to do
188:07 - when i'm calling it is pass in the real
188:09 - values that i want this function to use
188:12 - we can do essentially the exact same
188:14 - thing in react
188:16 - the remainder of this screencast is
188:18 - going to be focused on how we pass data
188:21 - into our contact component and in the
188:23 - next screencast we're going to look at
188:25 - how we can consume that data from our
188:27 - contact component so that we get back to
188:29 - a working state where we have four
188:31 - different contacts in our contact book
188:33 - let me delete this function we'll go
188:36 - back to app.js and focus here on our
188:38 - instances of the contact component just
188:41 - like we talked about how html allows us
188:43 - to pass attributes which can alter the
188:46 - behavior of the element react chose to
188:48 - do things in a very similar way however
188:51 - in html where we are limited to using
188:54 - only the attributes that are allowed for
188:56 - any given element for example i couldn't
188:59 - pass a whatever i want attribute to a
189:02 - link tag because that's not defined in
189:04 - the html spec with react because this is
189:08 - a custom component i can pass in any
189:10 - property or attribute that i want we
189:13 - have four pieces of data in each one of
189:15 - our contact cards that we need to pass
189:17 - down to our instances of the contact
189:19 - component so to do that i can add an
189:22 - image prop or let's call it img
189:24 - this image prop can be the value of the
189:28 - path to the image so i'll go ahead and
189:30 - copy that from mr wiskerson here again
189:33 - in the next lesson we'll be learning how
189:35 - to actually consume these properties
189:37 - that we're passing in but for now we're
189:39 - just going to be dedicated to adding
189:41 - these properties to the context
189:42 - component on our instances now the
189:45 - upcoming challenge might be something
189:46 - that you decide you really hate me for
189:48 - giving to you i'm going to do one more
189:50 - of these props and then i will update
189:52 - our challenge to give you a chance to
189:54 - practice typing out your own props to
189:56 - each one of these contact cards i'm
189:57 - going to put this on its own line
189:59 - because i already know i'm going to be
190:00 - adding a bunch of these
190:02 - the next piece of data that i'll need in
190:04 - each one of my components is a name so
190:07 - let's choose to call it name
190:09 - i'll come down here and just copy mr
190:11 - whiskerson's name
190:13 - and pass it in and this is the point at
190:15 - which i'll update this challenge for you
190:18 - okay once again i promise i'm not doing
190:20 - this to be mean but i do want you to do
190:22 - a little bit of busy work mostly just to
190:24 - get your hands on the keyboard and start
190:26 - practicing what it's like to add your
190:28 - own props to this contact component
190:30 - remember we get to decide what we call
190:32 - these props we could call this whatever
190:35 - we want but of course that's going to be
190:37 - more confusing so i'll stick with name
190:39 - the other two pieces of data we still
190:40 - need to pass down are the phone number
190:43 - and the email so finish up the first
190:45 - contact first by adding a phone and
190:48 - email prop and then i want you to fill
190:50 - out all the data for the remaining three
190:52 - contacts with the image name phone and
190:54 - email props
190:56 - all of the data of course can still be
190:57 - found here so you'll have a bit of
190:59 - copying and pasting to do pause the
191:01 - screencast and add the rest of our props
191:03 - to our contacts
191:11 - okay hopefully that wasn't too painful
191:13 - for you and hopefully you got a good
191:15 - sense of what it's like to add props to
191:17 - react components i'll finish up this
191:19 - first contact together and then i'll
191:21 - probably skip over the rest so let's add
191:24 - a phone prop here
191:26 - i can just come down and copy mr
191:29 - wiskerson's phone number
191:30 - and we'll add an email prop as well
191:33 - and we'll copy this as well
191:36 - now i'm going to go ahead and finish up
191:38 - these contacts but i'll skip over that
191:40 - so you don't have to watch me
191:41 - monotonously copying and pasting the
191:43 - data from below
191:45 - okay that wasn't so bad was it at this
191:47 - point i can come down and get rid of
191:49 - this old version that we have here just
191:52 - to clean things up a little bit i'll
191:53 - also clean up our challenge
191:55 - and at this point you probably can see
191:57 - that things are a lot more organized
191:59 - sure we still have a good number of
192:01 - lines of code here but the data is the
192:04 - primary focus
192:05 - we can see exactly what data we're
192:07 - passing into our contact component and
192:09 - then our contact component contains the
192:12 - specific display logic on how the data
192:15 - should be used
192:16 - of course at this point we haven't made
192:18 - any changes to the contact component so
192:20 - if i hit refresh what do you think will
192:22 - happen
192:27 - well hitting refresh won't change
192:28 - anything we're still going to have four
192:30 - instances of mr wiskerson because
192:32 - essentially what we have now is a
192:34 - function like our add
192:36 - to numbers that takes parameters a and b
192:41 - but still is returning hard-coded data
192:43 - so even if we call add two numbers or
192:46 - let's say yeah let's call this numbers
192:49 - and we pass in 5 and 10. it doesn't
192:53 - really matter at this point that we're
192:54 - passing in 5 and 10 because the body of
192:56 - the function is still returning hard
192:58 - coded numbers
192:59 - so in the next screencast let's see how
193:01 - we can make use of the properties that
193:04 - will be passed into this component so we
193:06 - can get back to a place where we have
193:08 - our four different instances of our
193:10 - contact card
193:13 - in the last lesson we learned about how
193:15 - to pass values into our components using
193:19 - a very similar syntax that we're already
193:21 - used to with attributes in html
193:24 - in react we don't call these attributes
193:26 - we actually call them properties or
193:28 - usually for short just props
193:30 - unfortunately it's very easy to get the
193:33 - data that we're passing into our
193:34 - components inside of our component
193:36 - itself
193:38 - right here just like a function that
193:39 - takes parameters i'm going to put the
193:41 - word props
193:43 - in truth i could call this whatever i
193:45 - want in fact i'll show you exactly what
193:47 - happens
193:48 - i'm going to console.log
193:50 - what we called whatever
193:52 - and let me make a little room here open
193:54 - the console and hit save
193:57 - now four things got logged to the
193:58 - console i want you to think for a second
194:00 - why did it console log four times
194:08 - a console logged four times because i
194:11 - have four contact instances
194:13 - every time react rendered one of my
194:16 - contacts it ran the console log line
194:20 - inside of the code of that component and
194:23 - if you look closely you'll see that we
194:25 - have four properties in that console let
194:28 - me copy one of them out here so i can
194:30 - actually reference it
194:33 - we got four properties here if i clean
194:35 - these up each onto their own line
194:38 - you can see that what we received what
194:40 - we're calling whatever is an object that
194:43 - has properties that match exactly with
194:47 - what we put here as our prop inside of
194:50 - the component here let's see what
194:52 - happens if i maybe change img to
194:55 - something like the whole word of image
194:57 - again i can change these to whatever i
195:00 - want them to be
195:01 - so now when i hit save if you look down
195:03 - below
195:04 - the first item is receiving an object
195:09 - that now has an image property all
195:11 - spelled out whereas all the other ones
195:13 - are still receiving an img property
195:16 - anyway i don't want to go down that
195:17 - rabbit hole too much so let's come up
195:19 - here and change whatever to props
195:22 - because props is what you'll usually be
195:24 - calling this and at this point i want
195:26 - you to pause the screencast and see if
195:28 - you can figure out how to use this
195:31 - object that has all of the properties we
195:33 - want
195:34 - to update our component this one's going
195:37 - to take some critical thinking but i
195:38 - want you to really think through it see
195:40 - if you can figure out how to essentially
195:42 - make it so that our components are not
195:45 - for instances of mr wiskerson but rather
195:48 - have the correct data and images
195:50 - displaying here let me type that out as
195:52 - a real challenge
195:54 - okay there's your challenge pause the
195:56 - screencast and see if you can make it so
195:58 - that essentially we finish this little
196:00 - contact book where each one is its own
196:02 - separate contact
196:04 - pause now and work on this challenge
196:12 - well if props is an object and i can
196:15 - access the values of that object by
196:18 - using props dot for example name
196:21 - props dot image then all i really should
196:23 - have to do is update this hard coded
196:26 - data for example the name here
196:29 - to curly braces props dot name
196:33 - of course if i didn't put the curly
196:34 - braces in there it would literally
196:36 - interpret the text props.name and then
196:39 - all of the names would say props.name
196:41 - when i surround it with curly braces
196:44 - awesome my names are changing obviously
196:46 - nothing else has changed so let's go
196:49 - ahead and do the rest i'll start with
196:50 - these easy ones we'll get
196:53 - props dot phone
196:56 - and
196:57 - props dot email
197:00 - okay the phone and email are coming
197:02 - through correctly now the image
197:05 - this one may have been a little bit
197:07 - trickier for you but simply all i'd have
197:09 - to do is erase the entire source
197:12 - including the quotation marks and put my
197:15 - javascript here
197:17 - because the value that's coming in
197:19 - through props.image or img
197:21 - is already a string
197:23 - it's going to fill in the string value
197:25 - for my source i hit save and there's all
197:28 - of my values
197:30 - ah but here's a bug i introduced this
197:32 - when i was teaching the concept
197:34 - hopefully this is a good chance for you
197:36 - to do some debugging
197:37 - if you didn't i want you to see if you
197:39 - can figure out why the picture for mr
197:41 - wiskerson is not coming in pause the
197:43 - screencast and try to fix this bug
197:52 - well right here for our image source
197:54 - we're assuming that we're receiving a
197:56 - prop called img
197:58 - back in app.js however i did change this
198:01 - to image so i'll change this back to img
198:04 - hit save and now the photo for mr
198:06 - wiskerson is coming in just fine now i
198:09 - hope i'm not belaboring the point
198:11 - understanding props is one of the most
198:13 - crucial things that you can do in react
198:15 - when you're learning so yes we've spent
198:17 - a lot of time covering props however you
198:19 - will use props every single day of your
198:21 - rehacked life so this is a really big
198:24 - milestone if you feel like you've
198:25 - understood everything in react that
198:27 - we've talked about so far you should
198:28 - really congratulate yourself pat
198:30 - yourself on the back and probably at
198:32 - this point take a little break don't try
198:34 - to bite off too much more than you can
198:36 - chew and i do want to show you a little
198:38 - cool trick that we can do with our props
198:40 - here in the next screencast
198:44 - okay it's time to give you a prop quiz
198:46 - sorry i couldn't help myself
198:48 - like before your task is to read through
198:50 - each of these questions to actually
198:52 - click into the editor and type down your
198:54 - answers don't forget in scrimba if you
198:57 - have any changes that you make to the
198:59 - code you can always save it as a note so
199:01 - that you have access to it later you can
199:03 - even record your own voice talking over
199:05 - the top of the note if you wanted to
199:07 - keep an audio note and all of those are
199:09 - saved here in your account on scrimba so
199:12 - pause now answer the questions through
199:14 - this quiz and then you can hit play and
199:16 - we'll go through the quiz together
199:24 - number one what do props help us
199:26 - accomplish
199:28 - well just like parameters being passed
199:30 - into a function props being passed into
199:33 - a component help us make that component
199:35 - more reusable
199:38 - as you become more and more experienced
199:40 - in react you'll realize that there are
199:41 - times when it makes a lot of sense to
199:44 - pass props into a component so that it's
199:46 - reusable and other times when it might
199:48 - be possible to pass props into a
199:50 - component but it's just not always
199:52 - necessary i can't tell you how much time
199:54 - i have spent trying to create a
199:56 - component that's very reusable and then
199:59 - ended up only using it one maybe two
200:01 - times that's just one of those things
200:03 - that will come with experience as you
200:05 - write more and more react code
200:07 - remember when we pass props into a
200:09 - component it could be data that actually
200:12 - gets displayed as a part of that
200:13 - component or it could sort of be like
200:16 - metadata that you're passing into the
200:18 - component that in a way configures it to
200:20 - act a certain way
200:21 - either way it helps us make any
200:24 - component that we create more reusable
200:26 - so that we can keep our code as dry as
200:28 - possible
200:29 - okay so number two how do you pass a
200:31 - prop into a component in the same way
200:33 - that you pass attributes to html
200:36 - elements like a source attribute for an
200:39 - image you essentially do the same thing
200:41 - when you're passing props to a component
200:43 - so if i have my own component like let's
200:46 - say my awesome header i'm using a
200:49 - strange name just to make it very clear
200:51 - that this is a custom one you can pass a
200:54 - prop of your own choosing like maybe
200:56 - title
200:57 - into that component
200:59 - that brings us to number three can i
201:01 - pass a custom prop like for example blah
201:03 - blah blah to a native dom element so for
201:07 - example a div with the lowercase d
201:09 - well the answer is no so we come to the
201:12 - next part why not
201:13 - and that's because under the hood when
201:15 - react sees a regular html element that
201:18 - we're trying to render we express that
201:20 - element through the jsx syntax and that
201:23 - jsx syntax actually returns an object
201:26 - and the object describes the actual dom
201:29 - node that should be created when we add
201:32 - an attribute to a regular dom element
201:34 - like a lowercase d div the object that
201:37 - this jsx creates is expecting to be able
201:40 - to add this property to the dom element
201:43 - and since dom elements don't have an
201:45 - attribute called blah blah blah i can't
201:47 - just choose the props that i want to add
201:50 - to native dom elements like this div
201:53 - so let me try typing out a summary of
201:55 - that
201:57 - so the answer is no because the jsx that
201:59 - we use to describe those native dom
202:02 - elements we want react to create will
202:04 - eventually be turned into real dom
202:06 - elements and real dom elements don't
202:09 - have whatever properties let's say
202:12 - properties or attributes specified in
202:14 - the html specification which as we all
202:17 - know doesn't include properties like
202:19 - blah blah blah
202:21 - okay i think we understand that concept
202:23 - how do i receive props in a component
202:26 - simply enough
202:27 - the parameters to that component
202:29 - function will receive a value called
202:31 - props which of course we could name
202:33 - whatever we want but by very strong
202:36 - convention will be props
202:38 - and that leads us to the last question
202:40 - which is what data type is props in the
202:42 - component when i receive it this
202:43 - parameter which we're calling props is
202:45 - an object which means if i want to
202:48 - access the properties of that object i
202:50 - use dot syntax so
202:53 - props dot
202:54 - whatever the prop was that i passed in
202:56 - let's use blah blah blah because that's
202:58 - what we said before okay awesome job on
203:00 - that quiz if you struggled with any of
203:02 - these questions of course don't hesitate
203:04 - to go back and review the things that
203:06 - we've recently learned and when you're
203:08 - ready let's move on
203:12 - at this point in the course you should
203:13 - be somewhat familiar with the concept of
203:16 - object destructuring however just in
203:18 - case we'll do a quick recap
203:20 - say i have an object called person
203:23 - in es6 and later i can destructure the
203:26 - properties of that object in order to
203:28 - get simpler to use variable names for
203:31 - example if i wanted to log person.phone
203:34 - i obviously could just use console.log
203:37 - person.phone and everything would work
203:39 - just fine however in certain
203:41 - circumstances it can be nice to
203:43 - destructure this object and pull out the
203:46 - property names for your own use that
203:48 - looks kind of like this i might say
203:50 - const and then i'll use an object syntax
203:53 - say image comma name and then set that
203:56 - equal to person my object
203:59 - what that does is it declares two new
204:01 - variables img and name which i can then
204:04 - use in order to
204:06 - say console.log the name
204:10 - if i open the console you can see i'm
204:12 - getting mr wiskerson here
204:14 - so that's the concept of object
204:15 - destructuring the reason i bring that up
204:17 - is that it's a fairly common thing to do
204:20 - this in react with the incoming props
204:22 - that you receive the parameter that you
204:24 - put inside of your component will be an
204:26 - object that represents all of the props
204:29 - that your component received so what i
204:31 - could decide to do is just destructure
204:33 - that object immediately as i receive it
204:36 - inside of my function here which means
204:38 - that i could say curly braces image
204:41 - name
204:43 - phone and email it's important to note
204:45 - that i can't rename this to something
204:47 - else like image unless i do a little bit
204:50 - of trickery using colons like image
204:53 - colon image but we're not going to be
204:55 - too concerned about that for now
204:57 - the point being i don't get to change
204:59 - the name of the prop while i'm bringing
205:01 - it in i need to make sure that it's
205:03 - exactly as the prop was being passed in
205:05 - at the time that the component was being
205:07 - rendered
205:08 - if i decide to destructure my object
205:10 - like this then i will need to change
205:12 - some of my code here you can see if i
205:14 - refresh suddenly i get an error that
205:17 - says props is not defined so let me give
205:19 - you a challenge to fix it
205:22 - okay your challenge is to fix our bug
205:23 - now that we've destructured the props
205:25 - object
205:26 - pause the screencast and work on this
205:27 - challenge
205:35 - well by destructuring our props we're
205:37 - essentially declaring four new variables
205:39 - up here image name phone and email so
205:42 - instead of props dot image i can just
205:44 - reference image and name
205:47 - and
205:48 - phone and email i hit save and
205:51 - everything should be back to normal yep
205:52 - there we go the main reason i wanted to
205:54 - show this is just because you will
205:56 - certainly run into react code that
205:58 - either has the full object of props
206:01 - written here or very commonly the
206:03 - destructured object which pulls out each
206:06 - of the individual components or rather
206:08 - properties of the props object frankly
206:10 - you can write it either way in my own
206:12 - personal experience i've experimented
206:14 - with both ways and in the end i found it
206:17 - a little bit easier in my opinion to put
206:19 - the props object here and then reference
206:22 - props dot image and name and so forth
206:25 - the only reason being if i decide to
206:27 - declare other variables inside of my
206:31 - component let's say right here it
206:33 - becomes less apparent which variables
206:36 - came in as props and which ones were
206:38 - declared inside of my component
206:41 - so that's my reasoning for usually
206:42 - sticking to putting the whole props
206:44 - object it does cause a little bit more
206:47 - of the clutter here by having props dot
206:49 - everywhere but honestly that's okay with
206:51 - me
206:52 - whichever way you choose just try to be
206:54 - consistent with it there certainly are
206:56 - other things that we will learn about
206:58 - props as we go forward but now it's time
207:00 - for you to get your hands on the
207:01 - keyboard and start practicing the things
207:03 - that we've learned about props
207:07 - well it's been a minute since we've
207:09 - started a new react app totally from
207:11 - scratch so one last time i promise the
207:14 - last time i'm gonna make you do this i
207:16 - want you to set up a react app
207:17 - completely from scratch i guess as a
207:20 - reminder scrimba is doing a little bit
207:22 - of magic for us when we pull in these
207:24 - dependencies it's setting up our react
207:27 - app basically for us but i just mean in
207:29 - the coding part
207:30 - i want you to get a little more practice
207:33 - on doing that from scratch you can read
207:35 - through the challenge for the specifics
207:37 - on what you're supposed to do there's
207:38 - also some extra credit down here that
207:40 - would be worth looking into if you're
207:42 - interested and if you were able to do
207:44 - this top part all by yourself and
207:46 - although i would like you to include
207:48 - your own favorite jokes and maybe share
207:49 - it on twitter or in discord i did
207:52 - include some jokes for you to use just
207:54 - in case you didn't have any jokes on
207:55 - hand that you knew of so pause the
207:58 - screencast and work on this challenge
208:07 - since we've done this a number of times
208:08 - i am going to move through this fairly
208:10 - quickly so i'm going to import react
208:13 - from react
208:14 - and import react dom from react dom
208:18 - we're going to use react dom to render
208:21 - an app component which i haven't yet
208:24 - created but will in just a second
208:26 - and we'll render it to that div with the
208:28 - id of root
208:30 - i'll also import an app component which
208:33 - isn't yet created so i will create a new
208:36 - file called app.js
208:38 - inside of app.js again i'll import react
208:41 - from react anytime we need jsx in our
208:45 - code then i'm going to import react
208:47 - and i will export my component
208:52 - for now i'll just do a quick sanity
208:55 - check we'll do an h1
208:59 - that says hi
209:00 - okay good we're showing up on the screen
209:02 - you might notice too i included some
209:05 - basic styling i changed the font just to
209:07 - switch things up a little bit
209:09 - okay and then it says to have the app
209:12 - component render four or five joke
209:15 - components
209:16 - so i will kind of work backwards we'll
209:19 - have this return a div
209:22 - that surrounds our five
209:24 - joke components
209:26 - and those don't exist so first i need to
209:28 - import them from a file called joke
209:32 - and then i need to actually create that
209:33 - file
209:34 - so in joke js
209:36 - again import react from
209:39 - react
209:40 - export default
209:42 - our joke component
209:44 - okay we'll have this return a little
209:47 - sanity check h1 for us
209:50 - joke here
209:52 - hit save okay our five joke components
209:55 - are being rendered correctly and showing
209:57 - up on the screen now if you did struggle
209:59 - at any point in just this part of the
210:01 - setup i really recommend that you just
210:04 - go back spend the additional time you
210:06 - need to revisit what we've talked about
210:08 - so far everything here should not be
210:10 - confusing at this point in the course
210:12 - and if it is it's okay you just probably
210:14 - should go back and revisit some of the
210:16 - stuff that we've learned already
210:18 - okay now comes the practice for actually
210:20 - using our props
210:22 - we know that we need
210:24 - a setup prop
210:26 - and i actually copied these already so
210:28 - i'm just going to paste in the setups
210:31 - for these jokes
210:32 - and then we have a punch line now i can
210:35 - tell that my punch line is going to make
210:37 - each of these a little bit too long so
210:40 - while i'm here i'm going to put these on
210:42 - their own lines
210:45 - okay and then i have all the punch lines
210:47 - copied as well
210:48 - now think for a second i haven't hit
210:50 - save yet think for a second what is
210:52 - going to change if anything on my screen
210:54 - here
210:58 - you said nothing's going to change then
210:59 - you're right and that's because i am
211:01 - passing props in but my component is not
211:04 - making use of them at all so let's do
211:06 - that i'm going to receive the props
211:09 - just for giggles let's take a look at
211:12 - what console logs when i console log
211:14 - these props
211:15 - we see we get five instances of the
211:17 - props object
211:18 - so really quick question if i typed
211:20 - console.log one time how come i'm
211:22 - getting five console logs
211:25 - well just like any function whenever i
211:27 - run it it will run this console log and
211:30 - in our case because we have five
211:32 - instances of a joke component it's
211:34 - running this joke function five times
211:37 - now because props is an object i can
211:39 - access the setup and the punch line
211:41 - through dot syntax i can say props dot
211:43 - setup and prop stop punch line let's
211:45 - make this not an h1 but a div
211:50 - and i don't know let's make these h3s
211:52 - maybe
211:53 - and i'll separate each one with a little
211:55 - horizontal rule
211:57 - now here's another check for you if you
211:59 - weren't able to get to this point i want
212:01 - you to think now how am i going to
212:03 - actually make my setup and my punch line
212:06 - display on the screen in fact you can
212:08 - pause here and actually make that happen
212:18 - well i can't just say props dot setup
212:21 - because of course that will make it
212:23 - literally put the text props dot set up
212:25 - on the screen to insert our javascript
212:28 - value inside of my jsx i just need to
212:30 - wrap it in curly braces i'll do the same
212:33 - thing here we'll say props dot punch
212:35 - line
212:36 - and i need to make sure i spell that
212:38 - right
212:39 - and let's hit save and awesome we get
212:42 - everything showing up now one thing i
212:44 - just thought of i might want to change
212:45 - this to something
212:47 - like a paragraph just to change the
212:48 - boldness between these two or give it a
212:50 - little bit of contrast between the setup
212:53 - and the punch line and i think that that
212:55 - hits all of the points from our original
212:58 - challenge here
212:59 - go ahead and delete this
213:01 - now we come to the extra credit and if
213:04 - you were able to complete this extra
213:06 - credit then you're pretty far ahead
213:07 - because we haven't yet taught things
213:09 - like conditional rendering but i did
213:12 - think that i would just give you a
213:13 - little sneak peek on it so here's an
213:15 - example of one of my favorite jokes
213:17 - that's just a one-liner here over in
213:19 - app.js i'm going to create another
213:21 - instance of a joke
213:23 - and i'll put it at the top so we can see
213:25 - it more readily now in this case there
213:27 - really isn't a setup for this one it's
213:29 - just a punch line so what's going to
213:31 - happen if i just include a punch line
213:35 - well we can see that i really don't have
213:38 - anything being rendered up above here
213:41 - however if we did go into the dev tools
213:43 - we would see that up above this
213:45 - paragraph there's actually an empty h3
213:47 - sitting up here honestly it's not that
213:49 - big of a deal the way we currently have
213:51 - things set up but what if i went to my
213:53 - joke and instead of just putting the
213:56 - setup and the punch line i said
213:58 - something like setup colon and
214:01 - punchline colon now when i hit refresh
214:03 - we can see that well it's a little bit
214:05 - broken here
214:07 - again this isn't something that we've
214:08 - taught so i didn't necessarily expect
214:10 - you to fully grasp this concept quite
214:13 - yet but as an advanced sneak peek into
214:15 - conditional rendering something that i
214:17 - can do is actually only render this h3
214:21 - if props dot setup exists
214:24 - one really concise way that we're going
214:26 - to learn about is to surround my jsx in
214:30 - curly braces which means that i'm
214:32 - putting it inside of a javascript
214:34 - interpretation and then i can say props
214:36 - dot setup and this h3 we're going to
214:40 - learn about how a lot of the
214:42 - neat little tricks that we can do with
214:44 - react are just using vanilla javascript
214:46 - principles and this is a good example of
214:48 - that this is saying that if props dot
214:51 - setup is a truthy value then render the
214:54 - thing on the right side of my and
214:57 - operator here if it's a falsie value
214:59 - however it won't render anything at all
215:02 - so i can hit save and it will look very
215:04 - similar to the way that it looked before
215:06 - again we're going to talk more in depth
215:07 - about that it doesn't need to make
215:09 - perfect sense quite yet and one of the
215:11 - cool things about this is we could
215:13 - decide to do it in another way for
215:15 - example what if instead of conditionally
215:17 - rendering it this way i decided to say
215:19 - well the style of this h3 is that it has
215:23 - a display of
215:25 - none
215:26 - when props dot setup does not exist well
215:30 - i could do that with something like a
215:32 - ternary i could say the display if props
215:34 - dot setup does exist then i want it to
215:37 - be block
215:39 - but otherwise i want it to be none
215:41 - obviously this is a much more convoluted
215:43 - way than what we just saw but it
215:45 - essentially accomplishes the same thing
215:47 - the point is we can use those props and
215:49 - vanilla javascript principles like a
215:52 - ternary operator or this more concise
215:55 - and operator to accomplish our goals
215:58 - i'm hoping this was a helpful practice
216:00 - i'm really looking forward to seeing
216:01 - people's best jokes and when you're
216:03 - ready there's still one more little
216:05 - thing we're gonna learn about props
216:06 - before we can finally take all of this
216:08 - and apply it to our section project
216:14 - okay i'm sorry that we're still here on
216:16 - the jokes but i realize there's one more
216:18 - thing we need to cover before we jump
216:20 - back into our section project and that
216:22 - is how can we pass a prop that is not
216:24 - just a string the concept of props like
216:26 - we talked about is very similar to the
216:28 - concept of attributes in html and with
216:31 - html we always pass in a string as our
216:34 - data type here however we are not
216:37 - limited by that in react so far we've
216:39 - only done strings however because this
216:42 - is javascript it's react which is
216:44 - javascript we can pass in any javascript
216:46 - data type to our components as props so
216:49 - i want you to think critically here how
216:52 - might you pass in a prop that wasn't a
216:54 - string data type let's say for example
216:56 - you want a number passed to each one of
216:59 - these jokes that eventually will
217:01 - represent the number of upvotes and down
217:03 - votes for this joke or maybe you want to
217:05 - pass in an array of comment objects
217:08 - and then you might say i want to allow
217:10 - people to filter out the puns or only
217:12 - show the puns in my jokes in which case
217:15 - i might pass a prop called is pun which
217:17 - is the value true or false not the
217:19 - string true or false but the actual
217:21 - boolean value true or false
217:23 - accomplishing this uses something that
217:25 - you've already learned at this point and
217:27 - so i want you to try and think
217:29 - critically see if you can figure out how
217:31 - you would pass in a non-string value as
217:33 - the prop to your component and be
217:36 - curious with it play with it actually
217:38 - give it a try don't just think about it
217:40 - pause here and see if you can figure
217:41 - that out
217:49 - we learned previously that we can jump
217:51 - back and forth between javascript and
217:53 - jsx by using curly braces and the same
217:56 - thing works with our props for example
217:59 - these three jokes here are all puns so
218:02 - if i wanted to indicate that i could say
218:04 - is pun equals and then jump into
218:07 - javascript and send in a boolean value
218:10 - like true and then i can do the same
218:13 - thing for these others and then of
218:14 - course for the ones that are not puns i
218:16 - can change this to the javascript value
218:18 - boolean value of false
218:20 - and then do the same thing for my jokes
218:23 - up here up top
218:26 - actually i'm struggling now to think if
218:27 - this joke is a pun or not this might be
218:29 - a pun because it's talking about puns
218:32 - anyway you get the point by introducing
218:34 - these curly brackets i can put any
218:36 - javascript value in here so again if i
218:39 - wanted to pass in a number i could say
218:41 - upvotes
218:43 - is
218:44 - 10
218:45 - down votes
218:48 - is two
218:49 - and if i had an array of comments i
218:51 - could say comments equals and then this
218:53 - can get as complicated as i want i can
218:55 - say an array of objects and maybe those
218:57 - objects have an author property and it's
219:00 - got some author id and then the body of
219:03 - the comment itself and then maybe
219:05 - there's even a title to the comment and
219:07 - whatnot of course it's an array so it
219:09 - could be multiples of those and so forth
219:11 - i can even put javascript expressions in
219:14 - here to determine what the value being
219:16 - passed into the props should be that's
219:18 - getting a little bit more advanced than
219:20 - i want to jump into now but the point is
219:22 - these curly braces essentially give us
219:24 - free reign to throw any javascript we
219:26 - want inside of the curly braces and
219:28 - whatever that javascript expression
219:30 - resolves to is the value that the prop
219:33 - will pass down to our component
219:35 - so let me fix my syntax error here and
219:38 - go over to my joke component and let's
219:41 - just console.log
219:43 - props dot is pun
219:45 - and you'll see we get a bunch of boolean
219:47 - values i could even do props
219:48 - props.comments.title
219:51 - and actually that's going to cause an
219:53 - error because i didn't pass a comments
219:54 - prop to all of them but let's do
219:55 - props.comments
219:57 - and we'll see we get a bunch of
219:58 - undefineds but one of them has an array
220:01 - of objects
220:03 - so i think you get the point that's
220:04 - going to help us as we go back to our
220:06 - airbnb experiences clone so that's what
220:09 - we're finally going to jump back into
220:11 - now
220:13 - okay we're finally back to our airbnb
220:16 - experiences clone your challenge is to
220:19 - pass these props that i've outlined here
220:21 - into our card component and then inside
220:24 - of our card component receive those
220:25 - props and make use of them
220:28 - as a little bit of a hint and a heads up
220:30 - there's a couple instances that we're
220:32 - not passing in strings or strings that
220:34 - we are passing in that we need to
220:36 - slightly modify in order for them to
220:38 - work i guess so that's not too cryptic
220:41 - the image that we're passing in here
220:43 - you'll notice is only the title of the
220:46 - image file it doesn't include any path
220:50 - to the image itself the astute of you
220:52 - might know that what we're doing here
220:54 - still is requiring us to hard code data
220:57 - into our component and in the real world
220:59 - that's not what we're going to do
221:00 - however we haven't quite gotten there
221:02 - yet in an upcoming lesson very soon
221:05 - we're going to see a way that this would
221:07 - actually be structured a little more
221:08 - realistically
221:09 - but i want to get your hands on the
221:11 - keyboard practicing like i always say so
221:13 - work on this challenge until you can
221:15 - show our card component looking
221:17 - essentially exactly the way it is now
221:19 - but without the hard-coded data inside
221:21 - of the card itself pause here and start
221:23 - on that
221:31 - okay i already know that i'm going to
221:33 - have too many props to put on one line
221:35 - so i'm just going to start them on the
221:36 - next line
221:38 - and we'll set the image equal to
221:41 - this string i'm going to copy and paste
221:43 - these just so i don't make a fool of
221:45 - myself making a typing error
221:47 - the rating is going to be 5.0
221:51 - now this is a string right now i suppose
221:54 - if we were ever planning on doing math
221:56 - on this rating then it might be
221:58 - sensible to change it into a floating
222:01 - point number here by surrounding it with
222:02 - curly braces like that i'm not going to
222:04 - be too concerned about it at this point
222:07 - the review count
222:09 - maybe just for good measure and because
222:10 - i didn't put quotes around the six up
222:13 - here i'll send in a number
222:16 - the country will say
222:18 - usa mostly because katie zafirus is from
222:21 - the usa
222:23 - for the title
222:26 - we'll once again copy this
222:29 - and the price i'm going to send in as a
222:31 - number we'll say 136.
222:34 - in this case i don't think it makes a
222:35 - huge difference because i'm not going to
222:37 - be doing any math on this number
222:39 - probably but what the heck just for good
222:41 - practice
222:42 - okay i can clean up this challenge but i
222:44 - do need to now go to my card component
222:47 - and the very first thing i should do is
222:49 - actually receive props here and maybe
222:52 - just so i'm not flipping back and forth
222:54 - between the files to see which props i
222:57 - sent in i'm going to console log the
222:59 - props
223:00 - so that i can see them down in my
223:02 - console
223:03 - and that will give me a chance to
223:05 - actually look at the properties that i
223:07 - sent in
223:08 - now right away we run into a little bit
223:10 - of a challenge like i mentioned we're
223:12 - only passing in the file name and
223:14 - extension we're not passing in the whole
223:16 - path but i can't just do string
223:19 - concatenation like saying dot dot slash
223:21 - images slash and then plus my props dot
223:26 - image because this plus is not going to
223:29 - make sense
223:30 - now i could do that by surrounding this
223:33 - entire thing here
223:35 - in curly braces but i'm going to make
223:38 - use of the es6 templating string syntax
223:41 - with these back ticks
223:42 - and that way i can put
223:44 - my
223:45 - dollar sign curly braces now this is
223:47 - probably starting to get confusing
223:49 - inside of a template string i can insert
223:51 - values by using dollar sign curly braces
223:54 - and that's where my props dot
223:56 - image will go
223:57 - however i can't just put back ticks
224:00 - surrounding everything here because that
224:02 - doesn't make sense in jsx now this is
224:04 - the tricky part if i surround the
224:06 - backticks because they are a javascript
224:08 - expression
224:10 - in curly braces then suddenly this
224:12 - expression makes sense i think this is
224:14 - probably the trickiest part of this
224:16 - challenge i'm hoping it didn't frustrate
224:18 - anyone too much but i totally understand
224:20 - if it did because it's a confusing back
224:22 - and forth
224:23 - remember up here we're in javascript
224:26 - then we jump into jsx
224:28 - then with the curly braces we jump back
224:30 - into javascript and that's why i can use
224:33 - my backticks
224:34 - inside of javascript and inside template
224:37 - strings i can use the dollar sign curly
224:39 - braces to insert javascript values into
224:42 - this string i think it's called
224:43 - interpolation i end my backtick and then
224:46 - i get out of javascript and i jump back
224:49 - into jsx
224:50 - hopefully you could follow all that i
224:52 - understand if that's confusing
224:54 - the rest of this should be really pretty
224:56 - straightforward my rating is right here
224:59 - instead of putting a hard-coded 5.0 i
225:02 - can put my curly braces props.rating
225:05 - instead of my six and i'm actually going
225:08 - to just put in my curly braces inside of
225:11 - my parentheses here i'm going to put
225:14 - props dot review count
225:16 - again the parentheses is still part of
225:19 - jsx and therefore will be interpreted as
225:22 - text the curly brace gets me into
225:24 - javascript which is why i can then put
225:26 - my javascript value
225:28 - and then i get out of javascript and i
225:30 - have my second parentheses to surround
225:32 - it
225:33 - my country i can put props.country
225:38 - in this paragraph we'll put
225:40 - props dot title
225:43 - and
225:44 - right here for the number i'm going to
225:45 - leave the dollar sign because i still
225:47 - want that to exist however the price
225:49 - that i'm passing in is just the number
225:52 - 136 so i will put props dot price
225:56 - okay moment of truth let me get us a
225:59 - little extra working room here i'll hit
226:01 - refresh and awesome everything looks
226:03 - like it is still working the same now it
226:06 - does kind of look like we don't have
226:07 - this space showing up after our dot but
226:10 - we won't be too concerned about that
226:12 - right now okay last thing i'm going to
226:14 - clean up my console log up here
226:16 - and excellent we now have a reusable
226:18 - component as long as every time i create
226:21 - an instance of my card i pass in these
226:24 - props i should be able to get different
226:26 - cards showing up in my list
226:29 - really great work if you were able to
226:30 - follow along with this entire lesson i
226:33 - really hope that this has been helpful
226:35 - and hopefully you are just as excited as
226:37 - i am to learn this because this is
226:39 - giving us more tools in our tool belt
226:41 - more power for us to create really
226:43 - awesome web applications in react we
226:46 - obviously have a lot more to learn but
226:47 - really at this point you should be
226:49 - really excited for everything that
226:51 - you've learned especially if you're
226:52 - understanding it if you are feeling lost
226:54 - of course as always go back revisit
226:56 - these and ask lots of questions in
226:58 - discord coming up we're going to be
227:00 - addressing that issue where currently we
227:02 - are still hard coding this data into our
227:05 - code here and so that's the next topic
227:07 - we're going to tackle
227:10 - this is a total spoiler alert into what
227:13 - we're about to learn with react and that
227:15 - is how to use the dot map method to take
227:18 - regular javascript data and turn it into
227:20 - jsx elements that react can render so i
227:23 - figured at this point it would be a
227:25 - great opportunity to revisit the map
227:27 - method just in case it's been a while
227:29 - since you've used it or especially if
227:31 - you've never really understood it in the
227:33 - first place
227:34 - if you fall into that ladder group then
227:36 - i highly recommend you go check out the
227:39 - mdn docs on map
227:41 - look through the examples play with the
227:43 - code and work with it until you at least
227:46 - grasp a basic understanding of the
227:47 - syntax for it because you should already
227:50 - know map by now i'm going to assume that
227:52 - that's the case and we're going to work
227:54 - through these challenges
227:56 - instead of having you do all of the
227:58 - challenges right away at once i'm going
228:00 - to let you do challenge number one and
228:02 - then we'll go over it together and then
228:05 - i'll have you do challenge two we'll go
228:07 - over it together and then challenge
228:08 - three we'll go over it together so of
228:10 - course we'll start at the beginning with
228:11 - challenge one pause the screencast and
228:13 - work on this challenge
228:21 - so as a refresher map is a method on
228:24 - every array because i've declared nums
228:27 - to be an array nums has a method called
228:31 - dot map dot map is a higher order method
228:34 - which means that it takes a function as
228:37 - its main parameter this is a great
228:39 - example of a method that is declarative
228:42 - because under the hood dot map is going
228:44 - to handle the regular for loop for us
228:47 - and all we need to do is provide a
228:49 - function that the map method can use to
228:52 - run on every single item inside of the
228:54 - array whatever we return from this
228:57 - function as part of our return here is
229:00 - what will get placed in the same index
229:02 - in a brand new array
229:04 - and in the end nums.map is going to
229:07 - return a new array so i need to save
229:09 - that array in a variable we'll say const
229:12 - squared
229:13 - equals the array that gets returned from
229:16 - numstopmap an important part of this is
229:18 - that the function i provide to dot map
229:21 - is going to receive
229:23 - each of the items in the array one at a
229:25 - time as dot map loops over the array for
229:28 - us and runs this function
229:30 - so if i were to for example console.log
229:33 - item
229:34 - i would see
229:36 - that i get each of the original items in
229:39 - the array and they each show up on their
229:41 - own line because this console log is
229:43 - running five separate times
229:46 - so all we have to do is simply return
229:48 - item
229:49 - squared i could use the math library or
229:52 - i could just say item times item
229:54 - and now if i console log squared
229:58 - i should get this array which was my
230:01 - original goal
230:04 - and sure enough there it is okay that
230:06 - was just to get our feet wet this next
230:08 - one has a little bit extra challenge
230:10 - includes potentially some string methods
230:13 - but again it's just a regular javascript
230:15 - challenge pause the screencast and work
230:17 - on challenge number two
230:27 - okay just like before we'll create a
230:29 - variable to hold our
230:31 - destination array or our returned array
230:35 - let's call it uppercase and we'll get
230:37 - that by using names.map now above i used
230:40 - a function declaration like this but
230:42 - this time i'm going to use an arrow
230:44 - function just to simplify my code a
230:46 - little bit it's essentially the same
230:49 - i can open it up and use return i'll fix
230:53 - this later for anybody that's yelling at
230:54 - me that i can simplify this even more
230:56 - and inside my function i'm going to be
230:59 - receiving an item now i could call it
231:01 - item or i think a little more
231:03 - intuitively i'll call it a name in fact
231:06 - usually i would call this item
231:08 - probably num or number let's call it num
231:11 - just to kind of clean that up make it
231:13 - obvious what we're working with now with
231:15 - the name what i want to return is the
231:17 - first letter capitalized in that string
231:20 - now i'll be totally honest string
231:21 - methods are not something i usually just
231:23 - have memorized i usually end up looking
231:25 - them up i'm going to wing this and see
231:27 - how it works essentially what i'm trying
231:29 - to return is the first index so i'll say
231:33 - name at the index of zero dot to
231:36 - uppercase that should be a string of the
231:39 - first letter that's now capitalized and
231:41 - then i'm going to add
231:43 - name dot i think slice will do it and
231:45 - i'll start at the index of one which i
231:47 - think will give me the rest of the name
231:50 - starting at index one inclusive again
231:52 - this is kind of a shot in the dark so
231:54 - we'll see how this goes console log
231:57 - uppercase
232:00 - and oh i was so close i think i just
232:02 - need to add my parentheses here
232:04 - awesome i probably could have done
232:06 - something like name.slice 0 comma 1
232:09 - maybe and then change that to uppercase
232:12 - i also could have done something a
232:14 - little more complex like surrounding
232:15 - these in template strings and then using
232:18 - interpolation to figure that out
232:21 - and that might help me get rid of my
232:24 - plus
232:26 - now i'm just kind of playing around
232:30 - nope there's my space i don't need a
232:31 - space
232:33 - okay that to me is a lot less readable
232:35 - than what i had before so i'm gonna keep
232:37 - it this way
232:38 - i guess that's one of the fun things
232:39 - about these challenges you can try to
232:41 - solve it in multiple different ways okay
232:43 - let's clean this up i'm going to comment
232:45 - this out and i'll send you now to
232:47 - challenge number three just to clarify
232:50 - because we're just working in regular
232:51 - javascript here i'm not expecting this
232:54 - to work in react or jsx or anything
232:56 - essentially all we're doing is taking
232:58 - this string and then adding what looks
233:01 - like paragraph tags the opening and
233:03 - closing tags
233:04 - on the beginning and the end of that
233:06 - string of course this is leading to a
233:08 - point that will then take us to react
233:10 - pause the lesson here and start working
233:12 - on challenge number three
233:20 - okay let's say maybe const elements even
233:24 - though these aren't real elements and
233:26 - that's going to be pokemon.map i'll use
233:28 - my arrow function again and this time
233:30 - because i'm only going to be using a
233:33 - single parameter let's see i think
233:35 - pokemon is both singular and plural
233:37 - right maybe i'll say mon for monster
233:39 - because i only have a single parameter i
233:41 - can get rid of those parentheses and
233:42 - just put my arrow here and well before i
233:45 - simplify the rest let me actually open
233:47 - this up and we'll do it the way we did
233:48 - it before and then we'll clean it up now
233:50 - this time around i think it probably
233:52 - will be easier to use a template string
233:54 - so i'm going to
233:56 - put my
233:57 - paragraph text here and then inside of
234:00 - my paragraph text i will put my
234:02 - monster's name let's console.log
234:04 - elements
234:06 - make sure that this is going to look the
234:08 - way we expect and awesome that looks
234:11 - great now regarding cleaning things up
234:13 - because an arrow function has the
234:15 - ability to have an implicit return if i
234:17 - start that return on the same line as
234:20 - the arrow
234:21 - i can clean this up that way i can also
234:23 - do the same up here get rid of my
234:26 - explicit return
234:27 - make it implicit and because i only have
234:30 - one parameter i can get rid of those
234:32 - parentheses if you're still feeling hazy
234:34 - with arrow functions don't worry i'm
234:36 - kind of with you there but once you do
234:38 - get used to them they can really provide
234:40 - a nice simple syntax for you to perform
234:44 - operations that otherwise might take a
234:45 - number of lines of code that's another
234:48 - one of the benefits like i mentioned of
234:49 - having declarative methods like dot map
234:52 - it's handling the for loop for us we
234:54 - simply have to follow the rules and we
234:57 - get back exactly what we expect now
234:59 - again what we're ending with here looks
235:02 - like an array of html elements in fact
235:05 - if we were to be doing regular dom
235:07 - manipulation we probably could use these
235:09 - using the inner html method to have the
235:12 - browser actually turn these element
235:15 - strings or dom strings into real html
235:18 - elements on the screen but since we're
235:20 - not doing that and we're doing react
235:22 - we're going to see how we can basically
235:24 - use this exact same principle to take
235:27 - data from an array and turn it into jsx
235:30 - elements that get displayed on our
235:32 - screen there's one more really small
235:34 - step that i want to cover before we get
235:36 - there so let's cover that next
235:40 - i think now is probably a good time to
235:43 - remember that jsx just returns a regular
235:47 - javascript object we can see that if i
235:50 - were to set let's say a new variable
235:52 - called element equal to some jsx and
235:55 - we'll say
235:56 - just an h1
235:59 - and then if i console.log element what
236:02 - we actually get back is just a plain old
236:04 - javascript object
236:06 - the properties and the shape of this
236:08 - object get determined by react in order
236:10 - to describe the element that react
236:13 - eventually will be turning into a real
236:15 - dom node that shows up on our screen
236:18 - but the reason that i mention this is
236:20 - because when you get deeper and deeper
236:22 - into web development and actually
236:23 - programming in general you'll discover
236:25 - that most arrays don't end up being an
236:27 - array of simple strings like we
236:30 - sometimes use for examples like this
236:32 - instead it's probably most common to
236:35 - find arrays end up being an array of
236:37 - objects
236:38 - let's keep this example simple we'll say
236:40 - it's a first name
236:42 - and a last name in this object
236:45 - that's because data is usually a lot
236:47 - more complicated than just what can be
236:49 - represented by a simple string and so we
236:51 - use objects to represent pieces of data
236:53 - in a lot more detail well there's a
236:56 - little special feature of react and that
236:58 - is that if we provide an array into what
237:01 - we're rendering from our component
237:03 - react will know how to essentially map
237:06 - over that array and turn it into
237:08 - elements let me clean some of this up
237:10 - and show you a little bit more what i
237:11 - mean let's say we create this array of
237:14 - colors and i'm just going to put in the
237:17 - colors of the rainbow
237:18 - of course i just got done mentioning
237:20 - that usually we don't have an array of
237:21 - strings but this is just to illustrate a
237:23 - point inside of my return when i'm
237:26 - returning the elements that i actually
237:28 - want to put on the page i can give react
237:30 - this array and let it render it to the
237:32 - page now i can't just say colors because
237:35 - then it's going to put the actual word
237:37 - colors on there so i'll surround it in
237:38 - curly braces and now essentially what
237:40 - it's going to do is
237:42 - copy this
237:44 - basically i could have just done this in
237:46 - its place
237:47 - so we'll take this one step at a time
237:48 - let's look at it this way now obviously
237:50 - this is not beautiful and we can tell
237:53 - already that it's essentially just
237:55 - putting these together as blank text i
237:58 - haven't taught react that i want these
237:59 - to be paragraphs or headers or ordered
238:02 - lists or anything like that now of
238:04 - course if i do want to use my variable
238:06 - colors up here i can essentially just
238:08 - put colors here and i still of course
238:10 - need my curly braces here when i hit
238:12 - save i get the same result but now i
238:15 - want you to do a little challenge to
238:18 - experiment with what will happen if you
238:20 - change these from strings into jsx
238:22 - elements
238:24 - okay simple enough i just want you to
238:26 - essentially change these strings into
238:28 - jsx elements and i said h3 you can do
238:31 - whatever element you want then i want to
238:33 - make sure that you hit save or refresh
238:35 - and see exactly how what we have
238:37 - currently changes when you do that pause
238:40 - the screencast and work on this
238:41 - challenge
238:48 - okay maybe this is getting into the
238:50 - realm of busy work but let me do this
238:52 - really quick
238:56 - okay let's see what happens when i hit
238:57 - save
238:58 - awesome now i actually got a list of jsx
239:01 - elements that are being displayed as h3s
239:05 - in some ways it's kind of like react
239:07 - took the elements here
239:10 - and just copied and pasted them onto the
239:12 - screen of course i would need to get rid
239:14 - of all these commas for that to work
239:16 - correctly but i get the same result this
239:17 - way but let's put it back to colors so
239:20 - that it works the way it's supposed to
239:21 - work okay now we are poised to take what
239:24 - we just talked about and reviewed with
239:26 - dot map and what we just learned about
239:28 - where react can render an array of jsx
239:31 - elements and put those concepts together
239:34 - which will allow us to instead of hard
239:37 - coding our data directly into our
239:39 - components like we're doing here instead
239:41 - we can get data from outside of our
239:44 - little system map over it and render a
239:47 - new component for every piece of data
239:50 - in other words in the next screencast
239:51 - we're going to see a jokes.js file which
239:54 - has essentially the same thing but in a
239:56 - javascript array of objects then we'll
239:59 - get to pull those in and map over them
240:02 - create an array of jsx elements and then
240:05 - render those to the screen so when
240:07 - you're feeling ready let's go forward
240:12 - let me walk you through a couple of
240:14 - changes i've made to the code that we
240:15 - were just looking at of course you
240:17 - probably noticed i moved all of our
240:19 - hard-coded joke components outside of
240:21 - our component here
240:23 - and just commented them out so we can
240:25 - still reference them i've also changed
240:27 - our jokes.markdown file into a
240:30 - jokesdata.javascript file now we're not
240:32 - quite ready to make api calls and then
240:35 - make use of the data that comes back so
240:37 - i'm going to be kind of mimicking that
240:39 - with this jokes.js file that's exporting
240:43 - an array of these joke objects over in
240:46 - our app.js i'm going to import the jokes
240:49 - i'll say jokes data
240:52 - from that file dot slash
240:55 - jokes data
240:56 - and we can see that if i console.log
240:59 - joke's data i should get the array of
241:02 - jokes okay great
241:05 - now combining what we just learned with
241:07 - dot map and with creating an array of
241:09 - jsx elements i can put those two
241:11 - concepts together what i'm going to do
241:13 - is create a variable let's call it joke
241:17 - elements and this is going to be not an
241:20 - array that i'm defining right now but
241:22 - instead the array that gets returned
241:24 - when i call jokesdata.map
241:27 - inside of my.map i'm going to take a
241:29 - look at each one of my joke objects
241:32 - and what i can return i'll do this on
241:35 - its own line just so we can see a little
241:37 - more clearly what's happening i'm going
241:39 - to return a joke
241:42 - component
241:43 - however i can pass the data from this
241:46 - individual joke object to my joke
241:49 - component
241:50 - so maybe this is a good opportunity for
241:53 - you to put on your thinking cap and do a
241:55 - quick little challenge
241:57 - your challenge is to see if you can pass
241:59 - the props to our joke component in the
242:01 - correct way and then of course render
242:03 - our joke elements array so that when
242:06 - you're all done all of our jokes show up
242:08 - on the page again pause the screencast
242:10 - and see if you can complete this
242:11 - challenge
242:19 - each of the joke objects that i am
242:21 - looking at inside of my dot map
242:23 - is each of these objects that we see
242:26 - here so they have a setup property and a
242:29 - punchline property
242:30 - which means over here i can say my joke
242:33 - has a setup prop and this has to be
242:36 - spelled exactly this way because our
242:38 - joke component is expecting props.setup
242:43 - this setup prop will be equal to and
242:46 - then i need to use my curly braces
242:47 - because i'm leaving jsx and going into
242:50 - javascript we'll say joke dot setup now
242:53 - it just so happens that i'm using the
242:55 - same name for the prop that i'm passing
242:57 - to my joke component props dot setup
243:00 - and the object property that i chose in
243:04 - my actual data set up here however it's
243:06 - not always going to be the case that
243:08 - these are the same if for example these
243:11 - were question instead then over in
243:14 - app.js i would still say setup because
243:16 - i'm the one that gets to choose what the
243:18 - prop name for my component is but then
243:21 - my actual data would need to change to
243:23 - joke dot question now a question doesn't
243:26 - always make sense in this case because
243:27 - they're not all questions but hopefully
243:30 - that illustrated a point
243:31 - and next i will need my punch line and
243:34 - this is going to be joke dot
243:37 - punch line again because the actual data
243:40 - has a punch line property in each of
243:42 - these stroke objects
243:44 - now i'm not quite done i can hit save
243:46 - nothing's going to show up on the screen
243:48 - and that's because i'm still returning
243:50 - an empty div in my app component the
243:52 - last thing i need is just to render my
243:55 - joke elements
243:56 - hit save and there we go we've got all
243:58 - of our jokes back on the page
244:01 - now if i clean some of this up you can
244:03 - see just how much simpler this makes our
244:07 - lives as react developers and then if i
244:10 - were being really stingy i could use the
244:12 - implicit return to just return my joke
244:14 - element i'm not going to worry too much
244:16 - about that especially because it makes
244:17 - it a little too wide horizontally there
244:20 - awesome okay we have taken a number of
244:22 - asides once again i'm going to bring us
244:24 - back to our airbnb experiences clone and
244:26 - we're going to take this concept and
244:28 - actually build these separate
244:30 - experiences in their own cards this time
244:33 - using data that we get from a file
244:35 - instead of hard coding things into our
244:37 - code
244:38 - make sure you have studied this and
244:39 - understand it before you move on and
244:41 - when you're ready let's jump back into
244:43 - our section project
244:48 - all right it's time for another quiz
244:49 - we're going to look at the dot map array
244:51 - method read through these questions
244:53 - click into the editor type down your
244:55 - answers and when you're ready click play
244:57 - and we'll go through the quiz together
245:05 - number one what does the map array
245:07 - method do and i'm referring here to
245:10 - javascript in general not specifically
245:12 - react well the arraymap method takes a
245:15 - function as its parameter and whatever
245:18 - gets returned from that function will be
245:20 - placed in the same index of a brand new
245:23 - array so maybe let's say it
245:26 - returns a new array
245:29 - and whatever gets returned from the
245:32 - callback function
245:35 - provided
245:36 - is placed at the same index in the new
245:40 - array and well yeah that's good enough
245:43 - theoretically speaking our callback
245:44 - function we could just hard code
245:46 - something like return the string hello
245:48 - and then we would have an array filled
245:50 - with hellos but usually what we're
245:52 - trying to do is take items from the
245:54 - original array and modify them in some
245:57 - way in fact maybe i'll type that down
246:00 - with that in mind number two asks what
246:02 - do we usually use dot map for in react
246:05 - well in web applications it's really
246:07 - common for us to have an array of raw
246:10 - data usually an array of objects and to
246:13 - want to turn that array of data into
246:16 - something that's visible on the screen
246:18 - so in react we'll take an array of data
246:20 - we'll map over it and turn each of those
246:23 - items into
246:25 - some kind of jsx element that gets put
246:27 - on the page
246:29 - so more concisely it allows us to
246:32 - convert an array of raw data into an
246:35 - array of jsx elements that can be
246:37 - displayed on the page
246:38 - and number three why is using dot map
246:41 - better than just creating the components
246:44 - manually by typing them out and putting
246:46 - the props in that we want
246:47 - using dot map in this way is a lot more
246:50 - dry
246:51 - obviously if you think in terms of
246:52 - something like amazon every time a new
246:55 - product is uploaded to amazon and amazon
246:58 - sells that product there isn't a
247:00 - developer out there who's going to go
247:02 - copy and paste the elements from a
247:05 - product and then put in different props
247:07 - let's say
247:08 - no instead the data will change and
247:12 - using something like dot map will
247:14 - automatically convert that raw data into
247:17 - something that gets displayed on the
247:18 - page
247:20 - one way you could put it like i wrote
247:22 - here is that it makes our code more
247:23 - self-sustaining in a way meaning that it
247:26 - doesn't require additional changes
247:28 - whenever the data also changes it makes
247:31 - me think of when we're typing out a c
247:33 - style for loop and we say something like
247:35 - 4
247:36 - let i equal 0 and then we use i is less
247:40 - than some array dot length
247:44 - this makes it so that if the length of
247:46 - the array ever were to change our for
247:49 - loop would not require intervention
247:51 - instead it would automatically check the
247:54 - length of the array and that's what it
247:56 - uses in this parameter in the for loop
247:58 - alternatively if i just said something
248:00 - like i is less than 5 but i'm looking
248:03 - through the elements of an array that
248:05 - maybe now has let's say 10 elements in
248:07 - it my for loop is broken and it requires
248:09 - intervention from a programmer i think
248:12 - you probably understand so i'm just
248:14 - going to erase this for loop and leave
248:16 - it where it is awesome work on this quiz
248:18 - hopefully you were able to answer all of
248:20 - these questions when you're ready let's
248:22 - move on and start applying what we just
248:23 - learned to our section project
248:28 - i am coming to you from the future again
248:30 - because in the next challenge for
248:32 - anybody who is following along using
248:34 - create react app on their local machine
248:36 - instead of following along here in
248:38 - scrimba the upcoming challenge might
248:40 - throw you for a bit of a loop
248:42 - technically speaking what we're about to
248:44 - do is go back to the airbnb project and
248:47 - use a data file that includes links to
248:50 - the local images so that you can map
248:52 - over it and display those images as well
248:54 - as the other pieces of data and you'll
248:56 - see that just kind of works out of the
248:58 - box here in scrimba but if you're
249:00 - following along with create react app
249:01 - you'll get something that looks more or
249:03 - less like this obviously this is not
249:05 - ideal the last time that i spoke to
249:07 - using create react app i mentioned how
249:10 - it's gently advised against putting any
249:12 - assets inside of the public directory
249:14 - however this is an instance where i'm
249:16 - just gonna recommend that you put your
249:18 - images inside of your public directory
249:20 - i'm gonna go to the next slide this has
249:22 - an animated gif that might take a minute
249:24 - for some people to load
249:26 - but you can see that what it's doing is
249:29 - it's taking the images directory from
249:31 - the source folder and moving it up into
249:33 - the public folder the reason i'm
249:35 - recommending doing this is well first of
249:37 - all normally you're not going to have a
249:39 - data file that includes all of the data
249:41 - you need instead you would actually be
249:42 - getting that data from some online
249:44 - resource and second of all because it
249:47 - just magically works when you move the
249:48 - images to the public folder things just
249:51 - kind of start working again so that was
249:53 - just a quick heads up for anybody using
249:55 - create react app if you're following
249:56 - along here in scrimba you really don't
249:58 - have to worry about any of that for now
250:00 - okay with that said let's jump in
250:04 - okay it all comes down to this we are
250:06 - going to put all the things that we just
250:08 - learned together to progress our section
250:11 - project here with the airbnb experiences
250:13 - clone i've written out your task here
250:15 - and let me walk you through just a
250:17 - couple things first of all there's now a
250:19 - data.js file and this contains an array
250:22 - of the objects that represent the data
250:25 - that we're going to be displaying on the
250:26 - screen part of your task is to import
250:29 - that data as it mentions map over it to
250:31 - create our card components kind of like
250:33 - we have hard-coded here and then render
250:36 - that array in place of this card
250:37 - component one little change that i did
250:40 - make is i changed the country prop to
250:43 - location and i also made that change in
250:45 - the data here so in case you were
250:47 - curious about why that's changed i just
250:50 - decided it made more sense since we
250:51 - might have some online experiences
250:53 - and another thing is you'll notice there
250:55 - are some properties here that we won't
250:57 - yet be using like open spots or
250:59 - description that's okay for now just
251:02 - ignore those we'll decide later if we
251:03 - want to make use of them also as i
251:05 - mentioned in the note here because we
251:07 - haven't done styling to our group of
251:09 - components or anything like that yet
251:11 - they're going to stack on top of each
251:12 - other because they're block element dibs
251:15 - for now that's okay don't worry about
251:17 - them being stacked vertically we'll fix
251:18 - that later
251:19 - okay now is the time i know that you can
251:21 - do it you've worked hard up until this
251:23 - point hopefully you have studied and
251:25 - re-watched everything you needed to in
251:26 - order to understand what we're doing so
251:28 - let's jump right in pause the screencast
251:30 - and work on the challenge
251:38 - all right let's do this first i need to
251:41 - import my data
251:42 - and i probably will just stick with the
251:45 - word data as my variable name here so
251:47 - we'll say import data from
251:49 - dot slash data
251:51 - and maybe just before i get too far down
251:54 - the road i'll console log this just to
251:55 - make sure that
251:57 - i'm getting the data i think i'm getting
251:59 - okay yeah that looks right
252:01 - again as a quick reminder usually you
252:03 - won't be importing a hard-coded data
252:05 - file we'll be covering api calls and how
252:08 - to get data from an online source later
252:11 - but until we learn a couple more things
252:12 - we're not going to be able to do
252:14 - anything really except for importing our
252:16 - data
252:17 - then down in our component i don't want
252:19 - to erase this comment because that's my
252:21 - whole hero section that we commented out
252:23 - for space sake before
252:26 - let's take our data and
252:28 - i don't know maybe call them cards we'll
252:30 - say cards is equal to data.map
252:33 - and we'll let map look over each of
252:35 - those experiences maybe i'll just call
252:38 - it item for now and then for each item
252:40 - in that array i want to return
252:44 - well let me just copy this here because
252:46 - it's got all the properties that i want
252:49 - and then instead of having these
252:50 - hard-coded values i will just replace
252:52 - them
252:53 - with the values from our object so let
252:57 - me just make sure that i get all these
252:58 - properties right we have
253:01 - this is called cover image not image so
253:03 - i guess some of these might change
253:06 - so that's cover image again this is
253:08 - another instance where the data had a
253:10 - different property than what we chose to
253:12 - call our prop that we're passing into
253:14 - our component that's entirely okay and
253:17 - actually ends up being pretty common
253:18 - especially if you're not thrilled with
253:20 - the way that the data was designed
253:22 - oftentimes you're consuming data that
253:24 - someone else has put in their database
253:26 - and you don't get to choose these
253:27 - property names okay our rating let's
253:29 - look at our data now we have this stats
253:31 - property and that's where our rating is
253:33 - so we're going to have item dot stats
253:36 - dot rating
253:37 - and similarly with review count
253:39 - item.stats.reviewcount
253:42 - so
253:43 - here
253:44 - item.stats.rating
253:47 - and
253:48 - item.stats.reviewcount
253:51 - [Music]
253:53 - okay in the data we have location that's
253:56 - going to stay the same so location will
253:58 - just be location item dot location
254:01 - title i believe was
254:03 - item dot title and this i believe was
254:06 - item.price let's just double check those
254:09 - i like to double check them because
254:10 - otherwise i might see missing data and
254:12 - then get really confused about why it's
254:14 - not working
254:15 - title price
254:17 - title and price okay now that we have
254:19 - created our array of card components we
254:22 - need to render it
254:24 - so let's get rid of our hard-coded card
254:26 - i'll put curly braces because i need to
254:28 - enter into javascript here my array of
254:31 - jsx elements is still considered
254:33 - javascript so i'm going to put that in
254:35 - curly brackets say cards hit save
254:38 - and look at that we're getting all of
254:40 - our experiences showing up of course
254:42 - again they're vertically stacked each
254:44 - one has its own unique data being
254:47 - displayed and awesome at this point we
254:50 - have covered a bulk of the material from
254:53 - this section that i wanted to cover and
254:55 - don't get me wrong we've covered a lot
254:56 - of things so far there's a lot here to
254:58 - practice with and as always if you're
255:00 - not feeling comfortable yet with some of
255:02 - this material it's important to stick
255:04 - with it practice it over and over until
255:06 - you understand it that being said we do
255:09 - have a couple more things that i want to
255:10 - cover before we finish off this section
255:12 - first of all we need to style this so
255:14 - we'll do that in the next screencast and
255:16 - then i want to give you a sneak peek
255:18 - into some of the topics we'll be talking
255:20 - about in the next section so when you're
255:21 - ready let's polish off our project here
255:23 - with some css
255:27 - okay i've got to be honest with you i
255:29 - was going to have you style the list of
255:32 - cards here so that they would horizontal
255:34 - scroll inside of a container but we've
255:36 - already spent a pretty fair amount of
255:38 - time doing css inside of react and so
255:40 - for all the hard work and effort that
255:42 - you have put in so far i've got a little
255:44 - present for you bam we've got the
255:47 - styling done of course if you're
255:48 - interested to see how i did this
255:50 - basically i made a flex container made
255:53 - it so that none of the items would grow
255:55 - or shrink as the container got bigger or
255:57 - smaller and then just set the overflow
256:00 - to scroll essentially you can check the
256:02 - css for the details on it i've also
256:05 - included little tags that will tell you
256:07 - exactly what i added so that you could
256:09 - easily see what actually changed
256:12 - also notice that i used a section
256:14 - element here to surround our cards that
256:17 - allowed me both to give this a class
256:18 - name and give it specific styling but it
256:21 - also allowed me to make use of our
256:23 - styles that we put way back in the
256:25 - beginning on sections so that it had
256:27 - some padding on the left and right now
256:29 - there are two things that i want to talk
256:31 - about here
256:32 - one is how awesome it is that we are now
256:34 - mapping over our data because it means
256:37 - that if the data ever changes our page
256:40 - will automatically update so if i were
256:42 - to for example paste in three more items
256:45 - here i just copied the one and pasted it
256:47 - again
256:48 - and then updated our page is going to
256:50 - automatically update with all of the new
256:52 - activities that are included in our data
256:54 - clearly this is a much better way to
256:56 - work as a developer where the data will
256:58 - change and your page doesn't need to
257:01 - your code actually stays exactly the
257:02 - same and all that really updates is how
257:05 - that data is being used to display your
257:08 - elements on the screen the second thing
257:09 - that i want to cover is this error that
257:12 - we have been seeing or rather a warning
257:14 - that we've been seeing that says each
257:15 - child in a list should have a unique key
257:17 - prop it's a little bit beyond the scope
257:20 - of this course to dive deep into why
257:22 - this key prop is necessary but you will
257:25 - see this warning anytime you are using
257:28 - map on data to create jsx elements or
257:31 - rather an array of jsx elements
257:34 - first let me go to data js and get rid
257:37 - of those three extra items we had
257:40 - now over on our card the way we can get
257:42 - rid of this warning is by simply adding
257:44 - a prop called key and it very
257:46 - specifically needs to be key k ey and i
257:48 - need to set key equal to something
257:51 - unique about this individual item in
257:54 - this case pretty much everything about
257:55 - these different experiences is unique
257:57 - the image is different the title the
258:00 - price however for example the rating is
258:03 - not different between this first one and
258:04 - the second one so that's not something i
258:06 - could use as my key because it's not
258:08 - unique fortunately when we're pulling
258:11 - data from a database almost always will
258:13 - receive some kind of id property that we
258:16 - can guarantee will be unique because the
258:18 - database is creating that as a unique
258:20 - property in the database now obviously i
258:22 - typed all of this in manually but i gave
258:24 - it an id so that we could mimic this
258:26 - concept over in app.js i'm going to
258:29 - assign the key to be item.id
258:32 - again i probably could have used the
258:34 - title or the price for this warning to
258:37 - go away but when i hit save we'll see
258:39 - that warning disappears so those were
258:41 - just a couple of miscellaneous items
258:43 - that i wanted to cover i'm not going to
258:45 - put our hero back in quite yet because
258:48 - there is one more thing that i want us
258:49 - to talk about and that touches again on
258:52 - a sneak peek of conditional rendering
258:54 - and we'll talk about that in the next
258:56 - cast
258:59 - a phrase you might hear from the react
259:01 - community is that people love react
259:03 - because it's just javascript now of
259:06 - course under the hood there's things
259:07 - like jsx which is a little bit of magic
259:10 - being performed by react but i wanted to
259:12 - show you what that means by giving you
259:14 - another sneak peek at conditional
259:16 - rendering now i've updated the little
259:18 - screenshot that i have here to show you
259:21 - this little badge down here that says
259:23 - sold out and you might have noticed that
259:25 - in the data we actually have a property
259:27 - called open spots now i intentionally
259:30 - set this first one to open spots of zero
259:33 - so that we could conditionally render
259:35 - this little badge if the open spots is
259:38 - ever zero you might remember from the
259:40 - first time i did a little sneak peek on
259:42 - conditional rendering the term is
259:44 - referring to when we only will sometimes
259:47 - render a part of our page
259:50 - right now everything on here will render
259:52 - every time this component gets called
259:54 - however what we can do is take a look at
259:57 - props and if props dot open spots let's
260:01 - say is equal to zero then we can display
260:03 - the little sold out badge otherwise we
260:06 - just won't display it at all
260:08 - now there's two parts that we need to
260:09 - make this work first of all over in
260:11 - app.js we aren't currently passing in
260:14 - the data from open spots into our card
260:17 - component so the first thing we need to
260:19 - do is create a new prop called open
260:22 - spots
260:23 - set that equal to item dot open spots
260:26 - another thing you may have noticed is
260:28 - that we sure are passing a lot of props
260:30 - into this component we're going to cover
260:32 - a truncated way to essentially do this
260:35 - same thing without having to add a new
260:37 - prop to our card component every time we
260:39 - want some data from our item but for now
260:42 - we'll stick with what we know so we now
260:44 - have a prop called open spots we're
260:47 - passing in that number value from our
260:49 - data
260:51 - right here
260:52 - now in our card js let's just make sure
260:55 - that this is working i'll go ahead and
260:56 - console log props dot open spots
261:01 - and check our console and sure enough we
261:02 - get 0 27 and 3 because that's how many
261:05 - open spots there are for each of our
261:07 - experiences
261:08 - so let me get back to what i meant by
261:10 - it's just javascript first let's go
261:12 - ahead and actually create a little badge
261:14 - that will float in the upper left of
261:16 - this image the way i'm going to do that
261:18 - is by setting my card to be position
261:20 - relative and have a div here that's
261:23 - position absolute of course for now this
261:26 - div will always show up we'll fix it so
261:29 - that it conditionally renders as soon as
261:31 - we have something that looks good let's
261:33 - go ahead and just hard code in sold out
261:36 - and i will give it a class name
261:39 - let's call it card
261:40 - probably badge
261:43 - and honestly just to save time i'm going
261:44 - to paste some styles in here
261:47 - so that you don't get too bored then on
261:50 - my card i need to make it position
261:54 - relative and i need to refresh this
261:57 - okay now obviously it's hard coded so
261:59 - every one of these has a sold out badge
262:02 - and you might remember that the way we
262:03 - handled conditional rendering before was
262:06 - we surrounded our div that we only
262:08 - sometimes want to display in curly
262:10 - braces and then essentially included a
262:13 - condition beforehand
262:15 - now we used a very short version of that
262:16 - condition which we'll use again i can
262:19 - say props dot open spots
262:22 - equals zero
262:23 - and
262:24 - the div that i want to render
262:26 - this is kind of a clever example of how
262:28 - in react we typically use just plain
262:31 - javascript to handle things like the
262:34 - display logic that our component needs
262:36 - to know about
262:37 - if this first statement is truthy then
262:41 - this second statement or this jsx
262:43 - element will run and therefore get
262:45 - displayed however if this first
262:48 - statement is falsy then the second one
262:50 - will actually never even get called or
262:52 - run and therefore this div will never
262:55 - display on the screen so if i hit save
262:58 - we'll see that now i only have a sold
263:00 - out badge on the element that had
263:02 - exactly zero spots in it
263:04 - technically because zero is a falsie
263:07 - value i could say that if not
263:10 - props dot open spots
263:12 - but that's a little less easy for me to
263:15 - read and if another developer were to
263:16 - come see this they might expect open
263:18 - spots to be a boolean
263:20 - and so i'm going to keep it as triple
263:22 - equals zero to be very explicit
263:26 - now if you actually go look at the
263:28 - airbnb experiences website you'll notice
263:30 - that even in our design here we talk
263:32 - about online experiences
263:34 - and some of our locations are online the
263:37 - actual website itself has a little badge
263:40 - that says online in order to help people
263:42 - understand that it's going to be well
263:44 - probably through a zoom meeting instead
263:46 - of in person live meeting so i thought
263:48 - i'd show you yet another example of how
263:50 - we can use just plain javascript to help
263:53 - determine the display logic of our
263:56 - components here right now i have this
263:58 - badge that says sold out now i could
264:01 - come up with something kind of
264:02 - complicated by putting my display logic
264:05 - in here that says if open spots is zero
264:08 - then display this div otherwise if the
264:10 - location is online then display another
264:13 - div otherwise display nothing but as i
264:15 - was preparing this i came up with
264:17 - another way that i figured was a little
264:18 - more concise and so i thought i'd show
264:20 - that here if you've ever done a code
264:22 - challenge on well any number of the
264:24 - websites that exist out there that allow
264:26 - you to practice code challenges this
264:28 - might feel kind of familiar
264:30 - my goal is to dynamically render not
264:32 - just this entire div but also the text
264:35 - inside of it so i'm going to set a
264:37 - variable using let and i'll say this is
264:40 - badge text then i can just use regular
264:43 - javascript and say if props.open spots
264:47 - is equal to zero then i want badge text
264:50 - to read
264:52 - sold out or let's put it all in caps to
264:55 - stay consistent
264:56 - however if it's not sold out i also want
264:59 - it to check if props dot location
265:03 - is equal to online
265:05 - and if it is then we'll have badge text
265:08 - say
265:09 - online
265:10 - now there's two things that i need to
265:12 - change with this line of code in order
265:14 - to make it so that primarily if it's
265:16 - sold out it has a badge that says sold
265:18 - out secondarily if the location is
265:20 - online it displays a badge that says
265:22 - online but otherwise it displays no
265:25 - badge at all
265:26 - in fact let's make this a challenge for
265:28 - you
265:29 - okay your challenge is to display the
265:31 - correct badge text instead of this hard
265:34 - code sold out
265:35 - and secondly to only display the badge
265:37 - when it's either sold out or an online
265:40 - experience i've given you some hints
265:42 - basically in the language that i used
265:44 - for this challenge number two pause the
265:46 - screencast and work on these challenges
265:55 - okay for the first challenge to display
265:57 - the correct text
265:58 - all we have to do is erase sold out and
266:01 - instead render whatever the value of
266:04 - badge text is now of course currently
266:07 - this will only get rendered if open
266:09 - spots is exactly equal to zero so we
266:11 - also need to change our condition upon
266:14 - which this gets rendered kind of a
266:16 - clever way that i thought of was well
266:18 - when we initiate badge text up here its
266:21 - value is going to be undefined and then
266:23 - if props dot open spots is zero or props
266:26 - that location is online then badge text
266:29 - will have a real value i can use the
266:31 - truthiness of a real value or the
266:34 - falsiness of undefined to just say
266:37 - if badge text exists or rather if badge
266:41 - text has a real value then i want you to
266:44 - display the badge
266:46 - now maybe this is contrary to what i
266:47 - said before about assuming truthy and
266:49 - falsey values this one seems a little
266:52 - more logical to me however so if i hit
266:54 - save
266:55 - awesome now we have sold out on anything
266:57 - that's sold out notice even if it's an
267:00 - online experience it will prefer sold
267:02 - out first because that's our first
267:04 - condition up here
267:05 - and then if it does have open spots but
267:08 - it's online it has an online badge
267:10 - and if it's neither then there's just no
267:12 - badge at all
267:14 - now we will be covering conditional
267:15 - rendering in more detail later however
267:17 - the point that i'm trying to get across
267:19 - is that in react we very often use plain
267:22 - javascript like this kind of regular
267:24 - algorithmic javascript to determine how
267:27 - things will get displayed on the page
267:30 - that might not seem unique or strange to
267:32 - you until you've worked in another
267:34 - framework like angular or i think view
267:36 - as well where there are actually
267:38 - properties built into the markup that
267:40 - you see that provide logic for using for
267:43 - loops or conditional statements and so
267:45 - forth i'm not necessarily vying for one
267:48 - over the other but hopefully this sheds
267:50 - some light into why a lot of proponents
267:53 - of react will say they like it because
267:55 - it's just javascript
267:57 - and along those lines the next thing
267:59 - we're going to do is go clean up this
268:00 - card component that is getting pretty
268:02 - lengthy we'll do that in the next lesson
268:08 - when we have a component that's in
268:09 - charge of maybe displaying one or two
268:11 - pieces of data it's not that big of a
268:14 - deal to pass each of those pieces of
268:16 - data down individually as separate props
268:19 - however we can see our card component is
268:21 - starting to get a bit lengthy and
268:23 - honestly we haven't even included things
268:24 - like maybe there's a description or a
268:27 - set of tags that can categorize these
268:29 - experiences
268:30 - whatever the case might be along the
268:32 - theme of react being just javascript
268:34 - what we can opt to do instead of passing
268:37 - each of these properties of our data
268:39 - down individually is we can just say i'm
268:42 - just going to give this component the
268:43 - entire item object notice i kept key
268:46 - here that's because it's something
268:48 - unique that we need to include anytime
268:50 - we're using map but for all the other
268:52 - properties of data that i need my card
268:54 - to know about i'm just going to pass the
268:56 - entire item object down
268:58 - of course because i'm changing the
269:00 - structure of my card over here when i
269:03 - hit save well everything is broken now
269:05 - but if at this point you truly have an
269:07 - understanding of how props works and how
269:09 - the things that we passed down to our
269:11 - components can get received by the
269:13 - component you should be able to complete
269:16 - the following challenge
269:18 - fix our component
269:20 - i'm intentionally being a bit vague here
269:22 - because i want you to challenge yourself
269:24 - if you have felt a little bit confused
269:26 - about props and what exactly this object
269:29 - is that we're receiving and so forth
269:31 - this might be a good indicator that it's
269:33 - time to go back and just review the
269:35 - stuff practice the stuff that we've
269:37 - already learned
269:38 - but if you have felt pretty confident
269:40 - here then i want you to pause the
269:41 - screencast and work on this challenge
269:50 - well one major hint that we can get is
269:52 - if we console log our props
269:55 - and it might be a little bit confusing
269:56 - to read through here but you'll notice
269:58 - in the console below that there is an
270:00 - item property in our prop so props dot
270:03 - item
270:04 - and that item is the object with all of
270:07 - the properties from my data it might
270:10 - clean it up a little bit if i just log
270:12 - props.item
270:14 - so with that it means that all i really
270:16 - need to do is change anywhere i was
270:19 - referring to individual props as a part
270:21 - of the props object like props.image i
270:24 - just need to change it to
270:27 - dot props.item.image however we are
270:28 - going to run into one little problem and
270:31 - what i'll do first is just change
270:33 - everywhere i see props dot to say props
270:36 - dot item dot and then the property there
270:39 - let me hit save we'll see where we run
270:41 - into a problem so it looks like some of
270:43 - it is coming through we have our title
270:45 - our price and our location but it looks
270:47 - like our review count
270:49 - our rating and our image are not working
270:52 - so if you haven't already figured out
270:54 - why this is broken i want you to pause
270:56 - the screencast poke around the code see
270:57 - if you can figure out how to fix the
270:59 - rest of this component
271:07 - because we are passing in the entire
271:10 - item we now are beholden to exactly the
271:14 - structure and the property names of our
271:16 - data itself so for example in our
271:19 - component we were saying props.img
271:22 - but in the data it's the object dot
271:26 - cover img so if i replace in my card
271:30 - component img with cover img
271:32 - now my images should come back similarly
271:35 - with review count and rating these were
271:38 - both part of a sub object called stats
271:41 - so if i add stats as a part of my card
271:44 - now props dot item
271:47 - dot stats dot rating and
271:51 - review count the rest of that should
271:53 - come back the way we wanted it now we
271:55 - can see that our badges are still
271:57 - missing and that's because way up here
271:59 - when we're doing this logic we also need
272:00 - to add props dot item so that we're
272:04 - correctly looking at item.location and
272:07 - item.openspots
272:08 - let's see if that fixes it awesome we're
272:11 - back to the way we were but now our
272:14 - component as we use it is a lot simpler
272:17 - awesome work we are so close to done
272:20 - there is one more little tweak to
272:22 - exactly what we've done here that you
272:24 - might see pretty commonly in react and
272:26 - so i wanted to make sure that i covered
272:27 - that before it became really confusing
272:30 - when you saw it in the wild so that's
272:32 - what we will cover next
272:36 - there is one more little trick to
272:38 - passing properties into a component that
272:40 - i wanted to teach you about so that when
272:43 - you see it in the wild it's not terribly
272:44 - confusing because if you don't know
272:46 - about it it looks rather confusing this
272:48 - trick has to do with the object spread
272:51 - syntax and if you are either not
272:53 - familiar with it or it's been a minute
272:55 - since you've done it it's an es6 feature
272:57 - and i've linked here the mdn docs on
273:00 - using the spread syntax with object
273:02 - literals but the idea is that instead of
273:04 - creating my own prop called item that i
273:07 - pass the entire object down through what
273:09 - i can actually do is just
273:11 - put a set of curly braces and spread the
273:14 - item into my components props
273:17 - essentially what this does is it takes
273:20 - the properties of the data like id title
273:24 - description price cover image stats
273:26 - location and open spots and creates a
273:29 - separate prop for each one of them kind
273:31 - of like we had before we were passing in
273:33 - the item individually so it would look
273:35 - like id equals item.id
273:39 - title equals item.title
273:42 - description equals
273:45 - item
273:46 - dot description
273:48 - and so forth and so on until it has
273:50 - covered every property in our data here
273:53 - or rather every property in the item
273:55 - that we are passing into our component
273:58 - now doing this does fundamentally change
274:00 - exactly what props the card is getting
274:03 - because well we just changed props so
274:05 - that it said props.item because it was
274:07 - receiving an item object prop doing it
274:10 - this way means we would basically go
274:12 - back to the way that we had it before so
274:14 - if i were to go back to that i do curly
274:16 - braces dot dot dot item which spreads
274:20 - all of the properties of this item as
274:22 - separate props into my card component
274:25 - back in my card component i need to go
274:27 - back and get rid of all of my dot items
274:30 - here okay just like that oh i missed a
274:33 - couple here
274:35 - and actually you know what let me leave
274:36 - those in and we'll see that this is
274:38 - breaking
274:40 - and well it looks like it's breaking a
274:42 - little deeper than it was before so then
274:43 - when i make those changes in the correct
274:45 - way hit refresh everything's back to the
274:47 - way that it should be working
274:49 - on a personal note i do tend to struggle
274:51 - with this method of passing data down to
274:54 - a component only because it obscures
274:57 - exactly what we're passing to our
274:58 - component i personally would rather pass
275:01 - the item down as a very explicit
275:05 - specific prop that says item is item and
275:08 - although it does clutter my component a
275:11 - little bit where i have
275:13 - props.item.stats.reviewcount and whatnot
275:15 - i tend to find that at least for myself
275:18 - when i go back i don't need to first go
275:20 - to the data understand what properties
275:22 - are there then go to app and see that
275:24 - i'm spreading that in then go to the
275:26 - card and look at what those properties
275:28 - are i don't know maybe it's just a
275:30 - personal preference i have tended toward
275:32 - passing objects down like the way that
275:34 - i've shown you here for your own sake of
275:37 - review i'm going to put this back to the
275:39 - spread syntax just so you can see what
275:41 - it looks like as the spread syntax hit
275:44 - save so we see that it's still working
275:46 - i'm sure as you write more and more
275:47 - react you'll settle on which one you
275:49 - like the most or maybe just stick to a
275:51 - standard in whatever code base you're
275:53 - working in i'm going to take a second to
275:55 - clean some of this up so that we buy
275:57 - some more horizontal space
276:00 - and last but not least let's go back to
276:03 - our app.js component let's bring our
276:06 - hero back in
276:08 - and let's see how things are looking
276:10 - awesome
276:12 - and that folks marks everything that we
276:15 - had planned to learn in this section so
276:17 - before we keep pushing forward in react
276:20 - let's take just a minute in the next
276:21 - screencast to look back on everything
276:24 - that we've learned in this section and
276:26 - give you a chance to complete another
276:28 - self-assessment project
276:32 - before moving on to the next section we
276:35 - have another solo project for you to
276:37 - work on like we talked about before it's
276:39 - a great opportunity for you to flex
276:41 - these new skills that you've been
276:42 - working on so far in this section but
276:44 - this time without the security blanket
276:46 - of me being there to help you
276:48 - now the next section we're about to jump
276:50 - into is the heaviest section of this
276:52 - whole course so it's especially
276:54 - important at this time that you work on
276:56 - this solo project to help gauge your own
276:58 - skills and then decide if you understand
277:01 - these topics well enough to move on
277:03 - again it's projects like these where the
277:05 - real internalization of everything
277:07 - you've been learning actually happens
277:10 - so what's the project this time around
277:12 - you're going to be building a personal
277:14 - travel journal it's a page where you can
277:16 - list all the fun places that you've
277:18 - traveled along with some of the details
277:20 - and a photo from your trip clicking on
277:22 - the image of this design will take you
277:24 - to the figma design file once you're
277:26 - there make sure to click on the arrow at
277:29 - the top choose duplicate to your drafts
277:31 - so that your view of the design file
277:33 - won't be cluttered by anybody else's
277:35 - cursors or selections and also so you
277:38 - can make any edits to this that you want
277:39 - to make
277:40 - the quickest way to get started will be
277:42 - to code your project here in scrimba if
277:45 - you click away from the google slides
277:47 - you'll see a little menu with three dots
277:49 - when you click that there will be an
277:50 - option to fork this screencast to a new
277:53 - scrim which will start you off with the
277:55 - starter code that we have here once
277:57 - again i haven't given you a whole lot i
277:59 - did put this boilerplate code in here
278:01 - for you but that's about all that i've
278:03 - done for you
278:04 - so let's take a look at the project
278:06 - requirements we haven't yet learned how
278:08 - to pull data from an api but i do want
278:10 - this page to be data driven so you'll be
278:13 - creating an array of this data in a
278:15 - separate javascript file and that array
278:17 - should contain objects which have
278:19 - properties for the title location the
278:22 - link for google maps a start date to
278:24 - your trip and date to your trip the
278:26 - description and an image url
278:28 - if you're using your own photos you can
278:30 - actually just drag and drop them into
278:32 - the explorer in the upper left of this
278:34 - scrimba environment and then you can
278:36 - just reference the file name of the
278:38 - image instead of an image url or if you
278:40 - want you could just use an image url of
278:42 - an image out there on the internet just
278:44 - so this was perfectly clear i gave you a
278:47 - little start here i just took the data
278:49 - from the design file here on mount fuji
278:52 - and created an array with a single
278:54 - object in it this way you at least know
278:56 - the shape of this object so you can make
278:59 - a copy of it and put in your own data
279:01 - once you've pulled in that array i want
279:03 - you to use the map method and props on
279:05 - some custom components to pass that data
279:08 - down to the custom components and have
279:10 - react display the array that has been
279:12 - mapped and as is always true in these
279:15 - solo projects you should make sure that
279:16 - it's styled and really polished you want
279:18 - this to be something that you would be
279:20 - proud to show to someone else
279:22 - and of course speaking of which make
279:23 - sure that you share your work again you
279:25 - don't have to wait until you're
279:26 - completely done with the project you can
279:28 - always share your current progress in
279:30 - discord and ask for some code feedback
279:33 - you can click the discord icon here that
279:35 - will take you to the i built this
279:36 - channel where you can share your work or
279:38 - if you're doing something like learning
279:40 - in public on twitter you can click this
279:42 - twitter icon which will open a
279:43 - pre-populated tweet where you can share
279:45 - a link to your project good luck
279:47 - building your travel journal and i
279:49 - really look forward to seeing
279:50 - everybody's finished projects
279:54 - we find ourselves here at the end of
279:56 - another section and all i can think to
279:58 - say is nice work
280:00 - in this section you have taken a big
280:02 - stride forward in your understanding of
280:04 - react let's look at a quick recap of
280:07 - what we've learned first and probably
280:09 - most importantly we have talked about
280:11 - props in react props are one of the most
280:13 - fundamental topics in react and they
280:15 - really make it so you can write more
280:17 - composable code you can see in both of
280:19 - our projects we have elements on our
280:21 - page that are essentially reused both in
280:24 - the airbnb experiences cards here and
280:26 - the travel journal cards here now that
280:28 - you know the concept of props and
280:30 - reusing components with different data i
280:33 - guarantee as you start paying attention
280:35 - to the websites and web apps that you
280:37 - use online you're going to see this
280:38 - concept everywhere then what props
280:41 - really enables us to do is use data to
280:44 - drive the code and map over it in order
280:46 - to create the website that we're trying
280:48 - to create
280:49 - now although there's only two topics
280:51 - here in this recap those topics are
280:53 - extraordinarily important as we move
280:55 - forward as always you should be
280:57 - extremely proud of what you have worked
280:59 - on so far so i highly recommend that you
281:01 - go over to the discord server if you
281:03 - click on the screenshot it will take you
281:04 - to the today i did channel and even if
281:07 - you don't feel like sharing your code or
281:08 - a screenshot at least post a message in
281:10 - there that tells people that you have
281:12 - now completed section two of the
281:14 - introduction to react course also this
281:16 - is a very natural time to take a break
281:18 - from your computer if you've been
281:20 - working on this for quite a while make
281:21 - sure that you stand up and move around a
281:24 - bit get something to eat or drink your
281:26 - brain does need some time to digest all
281:28 - of this new information that you've been
281:29 - learning so even if you need to come
281:31 - back tomorrow that's completely okay and
281:33 - then whenever you're ready i will see
281:35 - you in the next section
281:39 - you have done an amazing job so far and
281:42 - now we have arrived at probably the most
281:44 - exciting section in this whole course
281:46 - and that is how we can create
281:48 - interactive web apps in react until now
281:51 - we have basically just been recreating
281:53 - static websites in react and of course
281:56 - along the way we've also learned how we
281:58 - can use props to create reusable
282:00 - components in react but really so far
282:02 - that's only allowed us to create
282:04 - reusable parts of what is still
282:06 - considered a static website
282:08 - if you think of the airbnb experiences
282:10 - clone that we just finished building we
282:12 - left it off in a state that really still
282:14 - didn't allow for any kind of
282:16 - interactivity with the user on the real
282:19 - airbnb website a user can click into
282:21 - those experiences they can save them to
282:23 - their favorites and then of course they
282:25 - can actually book that experience and
282:26 - pay for it so that lets us know that
282:29 - there is so much more that we get to do
282:31 - with react and that's where you've
282:33 - arrived in this section to help us
282:35 - better understand what i'm talking about
282:37 - let's take a look at the difference
282:38 - between static websites and dynamic web
282:41 - apps
282:42 - the static web pages that we've been
282:44 - doing so far they're really read only
282:46 - they don't allow for any kind of changes
282:48 - to the data and that's probably the
282:50 - defining attribute of a static web page
282:53 - especially in the early days of the web
282:55 - but still pretty common today you'll
282:57 - find static web pages like a blog a new
283:00 - site recipe sites and a bunch of others
283:02 - that really don't allow you to change
283:04 - any data but rather just to read or
283:07 - consume the content that exists on the
283:09 - page
283:10 - in this section we are going to be
283:11 - learning how we can use react to also
283:14 - create dynamic web applications and the
283:17 - defining attributes of these web
283:18 - applications is that they are both read
283:21 - and write in other words the user has
283:23 - the ability to change the data that
283:25 - drives the app
283:27 - as such they tend to be highly
283:29 - interactive and instead of displaying
283:31 - the same content for every user they
283:33 - will display your specific data and
283:36 - these kinds of web apps drive entire
283:38 - businesses if you think of for example
283:40 - your bank website or the real version of
283:43 - airbnb and this list goes on and on if
283:46 - you think of social media websites or
283:48 - online games or anything that is highly
283:50 - interactive and displays data that's
283:52 - specific to you as the user you could
283:54 - say they all exist on a tier sort of
283:57 - above a static website because of the
283:59 - amount of interactivity they have of
284:02 - course we're not quite ready to recreate
284:04 - an entire site like airbnb so we'll be
284:06 - using this meme generator project to
284:09 - drive forward the curriculum in this
284:10 - section
284:11 - in this project when the app first loads
284:14 - it's going to reach out to an api and
284:15 - get 100 of the most popular meme images
284:18 - at that time and give the user the
284:20 - ability to enter the text that shows up
284:22 - on top the text that shows up on bottom
284:25 - and also to click a button to randomly
284:27 - choose a new meme image just like before
284:30 - you can click the screenshot here to go
284:32 - to the figma design file and again i
284:34 - recommend you copy it to your draft so
284:36 - if you click the arrow at the top
284:38 - duplicate to your drafts and choose this
284:41 - option it will put an editable copy in
284:43 - your own figma drafts that you can use
284:45 - as reference
284:46 - in order to build this project we're
284:48 - going to be learning about event
284:49 - listeners and how we can add that
284:51 - dynamic interactive aspect to our web
284:54 - application we're going to spend a lot
284:55 - of time learning about something called
284:57 - state we'll officially cover conditional
285:00 - rendering which you've already had a few
285:02 - sneak peeks at so far we'll talk about
285:04 - forms and how we can gather data from
285:06 - the user and we'll learn about side
285:09 - effects and how we can manage side
285:11 - effects in react
285:12 - once again we'll be starting off by
285:14 - building some of the static components
285:16 - of our page here so if you already feel
285:18 - like you're a hundred percent good on
285:21 - css in react you can skip the first
285:23 - couple lessons where we're mostly just
285:25 - doing some setup and styling for this
285:27 - app however i do encourage you once
285:29 - again if you haven't been practicing
285:30 - your css inside of your react or
285:33 - honestly even if you're feeling a little
285:34 - bit hesitant on css in general not
285:37 - specific to react then don't skip those
285:39 - screencasts go through those lessons do
285:41 - the challenges and that will be a great
285:43 - way to get some additional practice on
285:44 - those topics and set you up for success
285:46 - with the rest of this project
285:48 - so click the screenshot to open it in
285:50 - figma copy it to your drafts and when
285:52 - you're ready let's get started on this
285:54 - section which i'm the most excited about
285:56 - in this whole course
286:00 - sometimes if i'm feeling overwhelmed by
286:02 - a project like the meme generator here
286:04 - where we haven't learned some of the
286:05 - things we need to know in order to
286:07 - complete it i will break the app down as
286:09 - much as i can into pieces and then see
286:11 - which of those pieces i actually can
286:13 - create for example we've spent this
286:15 - entire course so far learning how to
286:17 - build static react sites and the truth
286:20 - is there are static parts of this site
286:22 - so the first one we're going to start
286:23 - with is the header remember you can
286:25 - click this screenshot in order to go to
286:28 - the figma design which you can use to
286:30 - determine the font sizes the spacing
286:32 - this cool purple gradient here and so
286:35 - forth so let's start out with that pause
286:37 - the screencast and work on building the
286:39 - header component
286:48 - first i'll get the pieces into place i'm
286:50 - going to create a separate components
286:52 - folder although this app is probably
286:54 - small enough that it's not really
286:55 - necessary i'll just do it for practice
286:58 - sake
286:58 - i'll create a header.js file inside of
287:01 - my components folder and i'll just spin
287:03 - up a basic react component here
287:08 - i'll do that little sanity check that i
287:10 - like to do just to see that it's working
287:13 - on the page
287:14 - in my app.js i will import
287:18 - my header
287:20 - let's put everything here in a div since
287:22 - i know that i'll have multiple things
287:24 - here
287:28 - okay my header component is showing up
287:30 - next let's get the content on the screen
287:32 - i know it's not just an h1 so i think
287:35 - i'll surround this whole thing with a
287:37 - header element
287:40 - and i probably wouldn't call this an h1
287:42 - because it's not really the main
287:44 - headline of the page it's sort of in the
287:47 - header itself
287:48 - so let's maybe call it an h2 before that
287:51 - i'm going to have an image
287:53 - and i already know the source is going
287:55 - to be my images troll face
287:59 - and let's see it needs to be relative
288:00 - like this
288:02 - that's probably going to be bigger than
288:04 - we want it to be but we'll fix that in
288:05 - just a minute
288:07 - and last of all we have this react
288:09 - course project 3.
288:11 - i can't really decide what it should be
288:13 - let's just call it
288:14 - maybe an h4 or something
288:20 - i know that i'm going to style my header
288:23 - so i'll go ahead and give it a class
288:25 - name
288:26 - we'll just say it's header
288:29 - i'll hit save and go to my styles
288:33 - usually with two dimensional layouts
288:35 - like this in a single line i will revert
288:37 - to flexbox so we'll say this is display
288:40 - flex
288:41 - we'll align everything to the center
288:44 - from the design it looks like the height
288:46 - is maybe about 65 pixels
288:49 - that's making my image overflow a bit
288:51 - we'll fix the image in just a minute but
288:53 - i'm going to grab my background which is
288:55 - from the design so i'm just going to
288:57 - paste it directly from the design there
289:00 - the color of the fonts and the text
289:03 - should be white
289:05 - and there probably should be a bit of
289:06 - padding i think we have something like
289:08 - 15 on the top and bottom and 20 on the
289:10 - left and right although it might just be
289:12 - 20 all around
289:14 - we'll just call it 20 all around
289:16 - then i will give some class names to the
289:19 - other elements here
289:23 - we have header image header title and
289:26 - header project so we'll start with the
289:28 - image
289:31 - and we'll make sure that this fits
289:32 - within the
289:34 - boundaries of its parent by saying you
289:36 - have a max height of one hundred percent
289:39 - in the design it looks like there's also
289:41 - some space about six pixels so i'll give
289:43 - this margin right of six pixels
289:47 - the header
289:49 - title
289:52 - it has a font size of about 20 pixels
289:55 - and i can push my react course project 3
289:58 - all the way to the right by giving my
290:00 - title a margin right of auto
290:03 - we can see that a little more readily if
290:05 - i make this wider
290:07 - oh and this still says header component
290:09 - let's update that
290:11 - to say meme generator
290:16 - and let's lastly style our
290:19 - project text
290:21 - that has a fairly small font size we'll
290:23 - say that's about 12 pixels
290:25 - and i think the weight is maybe
290:27 - different let's give it a font weight
290:29 - 500
290:31 - and yeah that does change it so we'll
290:33 - leave that on there
290:34 - and you know what one thing i'm trying
290:36 - to get better at is using rams for my
290:39 - font size instead
290:40 - 20 pixels over 16 pixels equates to
290:43 - about 1.25 rim and 12 pixels
290:48 - over 16 is about 0.75 rim well it's
290:52 - exactly 0.75 rim
290:55 - awesome work this is a great start the
290:57 - next thing we can do is attack this form
290:59 - here we've got two inputs and a button
291:02 - we're not quite ready to make them
291:03 - functional but we can at least get them
291:05 - on the page so let's do that in the next
291:07 - challenge
291:11 - the next piece of our project that we
291:12 - can bite off is the form that we have
291:15 - right here with the two inputs and the
291:17 - button so that's your challenge for this
291:19 - screencast don't worry at all about
291:21 - creating any functionality for it i've
291:24 - outlined exactly the steps that i want
291:25 - you to do here we're going to create a
291:27 - component called meme inside that meme
291:30 - component we'll render a styled form
291:32 - which will have our two inputs and our
291:33 - button pause the screencast and work on
291:35 - this challenge
291:44 - let's actually work backwards this time
291:46 - i'm going to pretend that i already have
291:48 - a meme component created so i'll just
291:51 - import it
291:52 - and render it
291:55 - since i'm already here in this file
291:57 - and then i'll actually create it so
291:58 - inside of components i'll create meme.js
292:04 - and set up my component
292:08 - now i didn't talk about this
292:09 - specifically but i happen to know ahead
292:11 - of time that i'm going to put both my
292:13 - form and the actual meme image and this
292:15 - text all into this same component the
292:18 - reason i want to do that has to do with
292:19 - when we start talking about state and
292:21 - where state needs to live so in an
292:24 - effort to reduce complexity i'm just
292:26 - going to put everything in the one
292:27 - component the reason i mention that is
292:30 - because i already know ahead of time
292:31 - that i'm going to use a main element to
292:33 - surround everything else on my app if
292:36 - you didn't do that it's completely okay
292:38 - but this inside of here is where i'm
292:40 - gonna put my form
292:43 - i already know that my form has two
292:46 - inputs
292:47 - and a button
292:49 - i've already got my button text copied
292:51 - and i'll paste it here since it's got
292:53 - the little emoji there
292:55 - i also know that i want these to be a
292:58 - type of text so i'll add the type text
293:00 - there let's hit save see what we're
293:02 - working with okay pretty generic styling
293:05 - let's give this some love in the css
293:08 - i think the way that i would like to lay
293:09 - this out is using grid i could probably
293:12 - use flexbox as well but what i'll do is
293:14 - make a two column and two row grid and
293:17 - lay the elements out there inside
293:20 - the grid will be the form so i'll make
293:22 - that the grid container i'll give this a
293:24 - class name
293:26 - of form
293:27 - and while i'm here i think i'll give
293:29 - these their own class names as well i'm
293:31 - going to put these on their own lines
293:34 - we'll say these are form inputs
293:37 - and i'll give my button a class name
293:42 - form button
293:45 - i guess i can also give my inputs some
293:48 - placeholder text so we'll add
293:52 - top text and bottom text
293:58 - it's a little more helpful now in our
294:00 - css let's select our form
294:03 - we'll change it to display grid
294:06 - and then set up a grid template that has
294:09 - two 40 pixel rows
294:12 - and then evenly divide the columns with
294:16 - fraction units we'll have two columns
294:18 - one fr each
294:20 - since i have three items it's putting
294:22 - the first item filling up one column the
294:24 - next item filling up the next column and
294:26 - then the third item only filling up one
294:28 - column the inputs look essentially the
294:30 - way that i want them to but i want the
294:33 - button to span the whole thing so i'll
294:34 - select my form button
294:37 - and tell it that its grid column
294:40 - will go from the very beginning to the
294:42 - very end awesome it looks like in the
294:45 - design there's a little bit of a gap i
294:46 - can use the gap property to spread
294:48 - things out a little bit then of course
294:50 - everything is butting up against the
294:52 - edges of my page here i only am going to
294:55 - have one main element so i'm just going
294:57 - to select the main element directly
295:00 - and let's give it a padding i think of
295:02 - about 36 pixels is what the design shows
295:05 - one thing you might notice is that the
295:07 - placeholder text and the button text are
295:10 - not taking on our carla font family for
295:13 - whatever reason inputs and buttons
295:15 - inside of forms tend not to do that so
295:18 - i will specifically
295:20 - add that in my form button
295:23 - and i will also select my form inputs
295:27 - and i think i'll put this above my form
295:28 - button since my inputs are above
295:31 - my button in the markup
295:34 - and i'll give that the font family as
295:35 - well
295:36 - let's also get some border radiuses here
295:39 - i've got
295:41 - both of these as having a border radius
295:43 - of 5 pixels
295:45 - my inputs have a border of
295:48 - 1 pixel
295:50 - solid and then this color that i'm
295:52 - copying from the design
296:00 - and oh we need our hash mark there
296:02 - there's a fun property called text
296:04 - indent that i learned about here i can
296:06 - make it so that my placeholder text and
296:08 - my
296:09 - actual input text will bump in a little
296:12 - bit or have a little bit of an indent
296:13 - we'll just give it a 5 pixel indent and
296:16 - i just noticed that these styles are not
296:18 - applying uh that's oh that's because i
296:20 - need this to say form input not form
296:23 - inputs
296:24 - okay that's working now let me comment
296:26 - this out yeah you can see what the text
296:27 - invent is doing
296:29 - okay my button needs a lot of help i'm
296:31 - going to take the background from the
296:34 - design in the figma file that also gives
296:36 - us that gradient of purple i need to
296:38 - change the color to white
296:41 - i'm going to remove the border i always
296:44 - like my buttons to have a cursor of
296:47 - pointer
296:48 - and awesome that's looking great it
296:50 - looks very much like our design now at
296:52 - this point i probably could separately
296:54 - create this image with the text sitting
296:56 - on top but i think it's high time that
296:58 - we jump into actually understanding what
297:01 - it is we need to learn in order to do
297:03 - the functional parts of this application
297:06 - including clicking the button and typing
297:08 - in our text
297:09 - so in the next cast we'll talk about
297:11 - what that will actually take
297:15 - the primary thing that sets apart a
297:17 - static website like we've been building
297:18 - so far with web applications is the
297:21 - ability for the user to actually
297:23 - interact with our page and in order for
297:25 - a user to interact with our page we have
297:27 - to be listening for different events on
297:29 - that page and then reacting when those
297:31 - events happen let's get a quick overview
297:34 - as to how this app will work as soon as
297:36 - the app loads for the very first time
297:38 - it's immediately going to make a call to
297:40 - an api called imageflip which will
297:43 - return to us an array of 100 meme images
297:45 - that are the most popular at that time
297:48 - then clicking the get a new meme image
297:50 - button will simply randomly choose one
297:53 - of those 100 images in the array that
297:55 - got returned to us and as you've
297:57 - probably figured out typing into the
297:59 - left input box will give us our top text
298:01 - and typing into the right input box will
298:03 - give us our bottom text now there's a
298:05 - lot in there that we need to break down
298:07 - before it becomes overwhelming so let's
298:09 - start off really easy the first thing
298:10 - we'll do is learn how to add an event
298:13 - listener to our button so that we can
298:15 - run some kind of logic when the button's
298:17 - clicked and we'll start that in the next
298:19 - lesson
298:22 - the primary thing that separates a
298:24 - static website from a web application is
298:27 - the ability for the user to interact
298:29 - with what they see on the screen by now
298:31 - you should have built plenty of
298:33 - javascript applications that used events
298:35 - and event listeners to allow the user to
298:38 - interact with your application so this
298:40 - topic shouldn't really be new to you you
298:42 - should already be familiar probably with
298:44 - two different ways that in a vanilla
298:45 - javascript application you can add
298:47 - events to your program first of all
298:49 - there's the dot add event listener which
298:53 - you probably are already familiar with
298:55 - if you were adding a click event you
298:57 - would then
298:58 - provide a function and inside this
299:00 - function you put the code of whatever
299:02 - should happen when the element that
299:04 - you're listening for an event on gets
299:06 - clicked alternatively there's a way in
299:09 - html where you would essentially put on
299:12 - click and set that equal to the name of
299:15 - a function
299:16 - followed by parentheses this second way
299:18 - is going to be much more similar to how
299:20 - we actually accomplish adding event
299:22 - listeners to items in react for example
299:25 - let's start with our button here we're
299:26 - going to make it so that when we click
299:28 - the button something will log to the
299:29 - console in react all i need to do is on
299:32 - my button add an on click and you'll
299:35 - notice that i used a capital c and
299:37 - that's because we are accessing the dom
299:40 - properties of the object that's being
299:42 - created here as a reminder what react is
299:45 - doing is it's taking this jsx element
299:47 - that it sees which in the end returns a
299:50 - plain javascript object describing the
299:52 - dom element that should be created by
299:54 - react and whatever properties or
299:56 - attributes we add here inside the jsx
299:59 - are directly accessing the equivalent
300:01 - properties in javascript if i were to
300:04 - select this button in javascript using
300:07 - document.getelementbyid or something
300:09 - like that i would have a dom element
300:11 - that has a property called on click with
300:14 - a capital c and this camel casing is the
300:16 - standard throughout all of our
300:17 - javascript elements so all that means is
300:20 - that instead of using the lowercase c
300:22 - like you might be used to doing in html
300:25 - we're going to have camel cased
300:27 - properties everywhere so on click maybe
300:30 - on mouse over
300:33 - or on mouse enter and so forth let me
300:36 - put this back to on click and we'll see
300:38 - the other difference here
300:40 - now instead of setting this equal to a
300:42 - string which has a function name because
300:45 - i'm here in javascript i can actually
300:47 - just use a set of curly braces and then
300:50 - put a function directly here inside of
300:53 - my on click now personally i'm not a big
300:55 - fan of stuffing my functions inside of
300:58 - my markup here if i can avoid it so what
301:00 - i usually do is above my return but
301:03 - still inside my component i'll define
301:05 - another function up here and say
301:08 - handle click maybe because this is the
301:10 - click event handler
301:12 - then i can say console.log
301:15 - i was clicked
301:17 - let me get rid of this and i'm gonna
301:19 - give you a mini challenge
301:21 - okay pause the screencast and make it so
301:23 - that clicking the button will run our
301:25 - handle click function
301:34 - a few of you may have been tricked into
301:36 - thinking that you can put handle click
301:39 - with a set of parentheses and well let
301:41 - me refresh and see what happens
301:43 - notice that as soon as i ran this code
301:46 - it ran my handleclick function i don't
301:48 - want this set of parentheses here
301:50 - because that will run this function as
301:52 - soon as the program reads this line of
301:54 - code instead i'm passing the function as
301:57 - a value
301:58 - so that react can add that function as
302:01 - the event handler in case a click ever
302:03 - happens on this button so without the
302:05 - parentheses there i can hit refresh
302:08 - clean this up i can hit click me and
302:11 - then that's when our click event handler
302:13 - runs the react documentation has a full
302:15 - list of all of the events that it
302:17 - supports i've included here a screenshot
302:20 - that you can click from the react
302:22 - documentation this will take you
302:23 - specifically to the mouse events i've
302:25 - personally found that mouse events
302:27 - probably make up a good 95 percent of
302:30 - the events that i listen for in any
302:32 - program i write and you'll probably need
302:34 - to use this as a guide for the challenge
302:36 - that we will do right now
302:38 - your challenge is to log something to
302:40 - the console whenever the mouse hovers
302:42 - over the image i added some css to
302:44 - darken the image just so it was a little
302:46 - more obvious when the mouse was actually
302:47 - hovering over the image again feel free
302:50 - to use this as your reference pause the
302:52 - screencast and work on this challenge
303:01 - there's a couple different events that
303:02 - should work just fine for this challenge
303:04 - we have on mouse enter which will run
303:07 - anytime the mouse enters an item that
303:09 - we're listening for an event on and
303:10 - there's also on mouse over which
303:13 - essentially does the same thing it just
303:15 - has a slight difference dealing with
303:17 - children elements right now we don't
303:19 - have any children elements of our image
303:20 - so it really wouldn't matter which one
303:22 - we use first let me create a function
303:24 - that will run when we are hovering over
303:27 - the image maybe i'll say handle on mouse
303:30 - over
303:32 - and we'll console log
303:34 - mouse over
303:35 - and then i can simply add to my image
303:38 - let's put it after the source will say
303:40 - on
303:41 - mouse over
303:43 - equals and then curly braces because i'm
303:45 - going to put the name of our handle
303:47 - mouse over function pull these onto
303:50 - separate lines to make sure that we can
303:52 - see them well hit save
303:55 - and now when i hover over the image or
303:57 - rather when there's a mouse over event
303:59 - on the image it runs our javascript code
304:02 - and we get that console log displaying
304:04 - down there feel free to poke around the
304:06 - documentation event listeners can be
304:08 - kind of fun especially when there's a
304:10 - bunch that you may not have heard of
304:11 - just seeing how they work can be a fun
304:13 - thing to play with understanding this is
304:15 - going to be assumed from here on because
304:18 - you already should be a little bit
304:19 - familiar with events and event listeners
304:21 - at this point fortunately doing it in
304:22 - react is actually fairly straightforward
304:25 - and now this sets us up for one of the
304:27 - coolest parts of react and we're going
304:28 - to jump into that next
304:32 - let's apply what we just learned about
304:34 - event listeners to our meme generator
304:37 - project ultimately what we'll be doing
304:39 - is making an api call as soon as our
304:41 - component loads and getting data from an
304:44 - api that includes 100 of the most
304:46 - popular meme images right now but we
304:49 - haven't quite yet learned everything we
304:50 - need in order to make that work so for
304:53 - now what i've done is i made the api
304:55 - requests and i just saved the data that
304:57 - came back here in memesdata.js
305:00 - you can see we have the object it's got
305:03 - a data property that has a memes
305:05 - property and that is an array of 100
305:07 - items each one of those items is an
305:10 - object that has a url property so you're
305:12 - going to have to do a little bit of
305:14 - digging into this memes data object but
305:16 - your challenge is to make it so that
305:18 - when we click the button it will
305:20 - randomly choose one of those urls and
305:23 - just log it to the console for now don't
305:25 - worry about displaying the image yet one
305:27 - modification i made to our markup here
305:28 - is i changed our form element into a div
305:31 - element long story short when you have a
305:34 - button inside of a form it actually
305:36 - submits that form and tends to refresh
305:38 - the page unless you stop it but i
305:40 - realized that there's actually no reason
305:42 - for this to be collected together in a
305:44 - form because ultimately this button does
305:47 - its own thing by getting a new image it
305:49 - does not take these inputs and submit
305:51 - them somewhere so in this case i feel
305:54 - like it's okay to have our inputs
305:55 - floating outside of a form and that way
305:58 - it means that when we click our button
305:59 - it doesn't refresh our page because it's
306:02 - not trying to submit a form okay so the
306:04 - challenge is to get a random image from
306:06 - the memes data array which i've already
306:08 - imported for you you'll get that anytime
306:10 - this new meme image button is clicked
306:12 - for now just log the url of that new
306:15 - image to the console if you're feeling
306:17 - hazy on how to get a random item from an
306:19 - array you'll probably want to turn to
306:21 - google but i know that you'll be able to
306:23 - do it pause the screencast work on this
306:24 - challenge
306:32 - let's start by hooking up our button i'm
306:34 - going to add an on click event listener
306:38 - and when the button is clicked i will
306:40 - run a function that says get meme image
306:42 - i haven't yet created that so let's
306:44 - create that function get meme image for
306:47 - now i'll just have it console.log
306:48 - clicked to make sure that everything is
306:51 - hooked up correctly
306:52 - hit save click the button clicked okay
306:55 - good now if we look closely at memes
306:57 - data
306:58 - it's an object
307:00 - there's the object it has a data
307:02 - property which has a memes property so i
307:04 - need memes data dot
307:07 - and that's my array i think i'll
307:09 - simplify that by simply saying
307:12 - const memes
307:14 - array
307:16 - equals
307:18 - means data dot theta dot memes
307:21 - and then i will generate a random number
307:24 - so i'll say
307:25 - random number
307:26 - and
307:27 - i can use math.floor math.random times
307:31 - the length of my array so that's memes
307:33 - array dot length
307:36 - this random number should get me a
307:38 - random index of my memes array and that
307:41 - indexed item will be an object with a
307:43 - url property
307:45 - so
307:46 - let's actually just console.log random
307:48 - number and see how we're doing so far
307:52 - 16 50 92. okay i wanted to see a high
307:56 - number to make sure that it was going up
307:58 - to a hundred i probably don't need to
308:00 - click this until i see 100 or actually i
308:02 - think it would be 99 so i can get my
308:06 - image object or actually i can just do
308:08 - it all in one i'll say const url
308:10 - equals and then i'll index into memes
308:12 - array at the index of random number
308:15 - this is my object with a url property
308:19 - so i'll just save that as url so it's
308:21 - nice and short or if we wanted to do
308:24 - some object destructuring i could just
308:25 - say get me the url property from this
308:29 - memes array i don't want to conflate a
308:31 - few things here so i'll just keep it
308:32 - straightforward like this
308:34 - and then we'll just console.log the url
308:36 - of course i could do probably most of
308:38 - this in a single line but i find that
308:40 - sometimes separating it out makes it a
308:42 - lot easier for other people to read
308:44 - we'll hit save and i guess i have no way
308:47 - to ensure that these are in the correct
308:49 - index but i can't see why they wouldn't
308:51 - be so this is awesome we're getting
308:52 - random images every time we click our
308:55 - button at this point we are a little bit
308:57 - blocked and i'll show you why if i
308:59 - create let's say a paragraph
309:02 - down here
309:04 - and i try to stick my url in there well
309:07 - first of all i have a problem because my
309:08 - url is only declared inside of this
309:11 - function and so this is not going to
309:13 - know what i'm talking about if i hit
309:15 - refresh it's going to say it doesn't
309:17 - know what url is essentially
309:20 - so you might think well let's declare
309:22 - url outside of the function
309:24 - you could say let url
309:26 - and then just set url equal to this and
309:29 - console.log url let me hit save and now
309:32 - at least url is well of course my
309:35 - styling is all messed up because my
309:37 - paragraph is let's put this let's put
309:38 - this outside here so we have that above
309:41 - click new meme image okay well we set
309:43 - url equal to the new meme image right
309:46 - here however my ui did not update this
309:49 - has everything to do with the way that
309:51 - react looks at variables and decides
309:53 - when it should update the ui or the user
309:56 - interface and spoiler alert it doesn't
309:58 - do that by just looking at every
310:00 - variable that we declare inside of our
310:01 - component in the next cast we're going
310:03 - to dive a little deeper into this
310:05 - conundrum that we have and start
310:06 - figuring out how we can make it so that
310:08 - we can update a variable that will then
310:11 - replace what we have on the screen with
310:13 - the new value of that variable
310:17 - at this point in our journey we have
310:19 - mostly been dealing with static websites
310:22 - in the previous section we showed how we
310:24 - can take data that we pull from for
310:27 - example an api we were just using a
310:29 - little javascript local data file to
310:32 - mimic pulling from an api and then we
310:34 - mapped over that array of data to
310:36 - display items on the screen however in
310:39 - order to interact with those items on
310:41 - the screen we are still missing
310:43 - something i want to demonstrate what i
310:45 - mean but before we do that just in case
310:47 - it's been a little while let's get our
310:49 - hands in the keyboard with a quick
310:50 - challenge
310:51 - i have here just a locally defined array
310:54 - with two strings in a thing one and
310:56 - thing two i want you to map over the
310:58 - things array generate a paragraph
311:01 - element for every item in the array and
311:03 - then render those items below the button
311:06 - right here this challenge harkens back
311:08 - to the last section where we learned
311:10 - about dot map and how to take an array
311:13 - of data and turn it into elements on the
311:15 - page so pause the screencast and work on
311:17 - this challenge
311:25 - okay what i'll do is create a new
311:28 - variable called maybe things elements
311:32 - and i will set that equal to the array
311:34 - that comes back when i run dot map on my
311:37 - original things array
311:39 - we'll look at each thing in this array
311:41 - which is just a string
311:43 - and we'll return a jsx wrapped
311:47 - version of that string so really just a
311:49 - paragraph element in jsx
311:51 - where what we insert on the inside is
311:53 - the text of that thing thing is just a
311:55 - string so it's fine if i just put it
311:57 - inside of my paragraph like that
311:59 - then things elements is an array of
312:01 - paragraph elements and i can just put
312:03 - that
312:04 - inside my curly braces here
312:06 - hit refresh and now i have thing one and
312:08 - thing two i did get that warning about
312:11 - key
312:12 - so i should probably just add a key prop
312:14 - here and
312:15 - every one of these strings will be
312:16 - unique we'll see why in just a second so
312:18 - i'm just going to say that thing is the
312:20 - key and that should set them apart and
312:22 - get rid of my warning there cool
312:25 - well this is great but we've got this
312:27 - button that doesn't currently do
312:28 - anything let me set up another quick
312:30 - challenge for you the concept is going
312:32 - to be that you click the add item button
312:34 - and it adds another thing to our things
312:37 - array
312:38 - namely thing three and then you click it
312:40 - again it'll be thing four and so forth
312:42 - i'll type up this challenge now
312:44 - okay your challenge is to add an event
312:46 - listener to our button so that when it
312:48 - gets clicked it adds another thing to
312:51 - our things array in your event listener
312:53 - you can use
312:54 - thingsarray.length plus one to determine
312:56 - what number should get added to the next
312:58 - item in this array and it also will be a
313:01 - good idea to make sure that at the very
313:03 - end of that event listener that runs
313:05 - when you click the button that you
313:07 - console log your things array and the
313:09 - reason is because
313:10 - spoiler the page is not going to update
313:12 - when you add new things to the array i
313:15 - decided it would be important to let you
313:16 - know this little fact ahead of time so
313:18 - that you weren't pulling your hair out
313:19 - trying to figure out why the heck things
313:21 - weren't changing on the page
313:23 - so pause the screencast and work on this
313:25 - challenge
313:33 - well let's create a function called
313:36 - we could call it handleclick or i could
313:37 - say add item maybe
313:39 - and add item is going to well first
313:42 - let's just console.log things array
313:45 - and set up our on click
313:50 - add item
313:51 - so that we can see that it's working
313:54 - okay so it's logging thing one and thing
313:56 - two the static array that we have there
313:59 - so i probably could add the whole thing
314:02 - in one step just using things read out
314:04 - push i'm going to determine what the
314:05 - text of the new thing is first so let's
314:08 - say
314:09 - new thing text
314:11 - and that's going to be i'm going to use
314:14 - a template literal so i can say thing
314:16 - space
314:17 - and then insert some javascript where i
314:20 - say things
314:21 - array dot length plus one
314:24 - and then i can say things array dot push
314:27 - new thing text
314:29 - and then of course i'm going to log the
314:31 - things array after i push the new item
314:33 - let me open the console so we can see
314:35 - that a little more clearly i'll hit save
314:38 - add item okay oh not a number of course
314:41 - because i spelled length run let's try
314:43 - that again add item thing three thing
314:46 - four thing five great well our array is
314:49 - changing but of course what we see on
314:50 - the screen is not and this brings us to
314:53 - our conundrum at this point react is not
314:56 - looking at local arrays that are just
314:59 - saved within a component to determine
315:01 - whether or not something should get
315:03 - re-rendered or rather if the return here
315:06 - should run again with an updated value
315:08 - for things elements actually maybe more
315:10 - specifically i'm determining my things
315:13 - elements way up here at the top back
315:15 - when things array is just two items long
315:18 - and then it's sort of cementing this
315:20 - thing's elements into its memory and no
315:23 - matter what i do to change things array
315:25 - it's not going to automatically change
315:27 - things elements in my early days i
315:29 - thought maybe if i put this below add
315:31 - item or something like that it might
315:33 - make a difference but that's not going
315:35 - to change the fact that this line of
315:36 - code will only run one time and that's
315:39 - the very first time the app component
315:41 - gets rendered right here let me clean
315:44 - this up real quick now one thing that
315:46 - might be tempting to do is inside of our
315:48 - add item function to say well let's not
315:51 - just update our array let's actually
315:53 - select the elements on the screen using
315:56 - document.getelementbyid
315:58 - and finding out where the container for
316:01 - these items is and then pushing a new
316:03 - paragraph element to that list and the
316:06 - truth is when you're just using plain
316:07 - javascript that's essentially what you
316:09 - have to do but if you think back to one
316:11 - of our earlier sections we talked about
316:13 - how react is declarative and this is one
316:16 - of the major benefits of having a
316:18 - declarative library like react it makes
316:21 - it so that all we really need to do is
316:24 - update our data and react will
316:26 - automatically well react to that change
316:29 - and update our ui to display what has
316:32 - changed in the data all we need to be in
316:35 - charge of is making sure that the data
316:37 - updates correctly and react will handle
316:39 - the rest
316:40 - however for that to work we need to
316:43 - access something called react state and
316:45 - state will allow us to sort of hook into
316:48 - the component and make it so that
316:50 - whenever we update our state which is
316:53 - really just values that we're saving
316:55 - inside of this component it makes it so
316:57 - react will update the user interface
316:59 - based on any changes that happen to
317:01 - those values that are being saved in
317:03 - state and truthfully if you think of
317:06 - pretty much any website that you
317:08 - interact with if it were made in react
317:10 - any kind of interaction you had would
317:12 - change the state the first thing that
317:14 - comes to mind is maybe i don't know a
317:16 - playlist or a recipe where you hit the
317:18 - little heart icon or maybe a bookmark
317:20 - icon and it fills it in and likely sends
317:23 - a message out to a database that updates
317:25 - the fact that you have liked a recipe or
317:28 - a song or maybe it's an accordion or a
317:30 - carousel where you click something and
317:32 - an image shifts over or a portion of the
317:35 - page expand so you can read more
317:37 - information any of those interactions in
317:39 - react are going to be updating state
317:42 - which then makes it so that react can
317:44 - update the user interface to respond to
317:47 - however you interact with the page
317:49 - so now let me update this using state
317:51 - and you can see how it will actually
317:53 - start to work again the way we
317:55 - originally expected obviously at this
317:57 - point some of this will look a little
317:58 - bit foreign and that's totally okay
318:00 - we're going to dive deep into
318:01 - understanding how to actually write this
318:03 - ourselves but you can see that not that
318:05 - much changed in my actual code but
318:07 - suddenly i have an app that's working
318:09 - the way that i expected the example is a
318:12 - little bit contrived obviously but
318:14 - hopefully you can see the exciting world
318:16 - of state and react that we're
318:17 - approaching and start to imagine some of
318:20 - the cool things that it's going to allow
318:22 - us to do so buckle up and get ready to
318:24 - jump into react state
318:28 - one thing i've learned over my years of
318:30 - teaching react is that one of the major
318:32 - points of confusion for students when
318:34 - they're first learning react is
318:36 - understanding the difference between
318:37 - props which you have already learned and
318:40 - state which we are about to learn so
318:42 - let's take some time and clarify the
318:44 - differences between the two and when you
318:46 - would want to use one over the other and
318:48 - the first thing we'll do is look at
318:50 - props we've seen how we can implement
318:52 - props in practice but let's take a
318:54 - second to actually talk about them when
318:56 - we refer to props we are referring to
318:59 - the properties that we are passing into
319:02 - a component in order for that component
319:04 - to work correctly this is similar to how
319:07 - a function can receive parameters
319:09 - quote-unquote from above
319:11 - just like a function that receives
319:13 - parameters a component that receives
319:15 - props is not allowed to modify those
319:17 - props or in other words those props are
319:20 - called immutable let's first take a look
319:22 - at a regular function
319:24 - let's say i define a function that says
319:26 - add to numbers
319:28 - and i pass in my parameters of a and b
319:32 - as i'm writing the logic of this
319:34 - function i'm going to assume that this
319:37 - function will be past a and b
319:39 - of course i could always do some kind of
319:41 - check that says if there's no such thing
319:43 - as a or if a is equal to undefined then
319:47 - throw some kind of error that says you
319:48 - need to provide both a and b but other
319:51 - than that inside of the body of the
319:52 - function i can just assume that i have a
319:55 - variable a which is a parameter that has
319:57 - been passed to this function and i can
319:59 - assume that i have a parameter b another
320:01 - parameter passed to this function and
320:03 - that's what i mean by being passed from
320:05 - above when we actually use this function
320:08 - we'll say add two numbers i'll provide
320:10 - my actual values that i want to
320:12 - represent the parameters a and b
320:14 - and my function can then do its job
320:17 - the main point that i want to come
320:19 - across here however is that inside the
320:21 - body of this function it wouldn't make a
320:23 - whole lot of sense for me to modify or
320:26 - mutate these parameters for example i
320:29 - wouldn't want to say forget what you
320:31 - just gave me for a i'm going to set it
320:33 - equal to 42. naturally this should feel
320:36 - wrong to you because essentially we're
320:38 - ignoring anything that is passed in as
320:40 - the first parameter here and just
320:42 - setting it equal to 42. technically this
320:44 - probably works if i were to console.log
320:47 - the result from add two numbers
320:49 - one and two of course i would expect it
320:51 - to be 3 but
320:53 - we'll see that it's actually 44 and
320:55 - that's because we've overwritten a to be
320:58 - something different similarly in react i
321:01 - would never want to have a component
321:03 - let's say a nav bar that takes props but
321:06 - then automatically sets props dot i
321:09 - don't know let's say cover
321:11 - image
321:12 - equal to
321:13 - something else
321:14 - this is a huge red flag you would never
321:17 - want to set props dot anything or props
321:20 - itself equal to anything different
321:22 - because incoming props should be
321:24 - immutable and they should never change
321:25 - manually or maybe more specifically
321:28 - those props should never change from
321:30 - within the body of our component itself
321:34 - now that's not to say that when i have
321:36 - an instance of my navbar that i can't
321:39 - provide a cover image that changes let's
321:42 - say it starts out as some image one and
321:44 - then i don't know maybe there's a button
321:46 - on the screen when the user clicks that
321:48 - button i want my navbar's cover image to
321:51 - update to some other image maybe this is
321:53 - a little convoluted because i'm not
321:55 - really using images here but the point
321:57 - is i can change the values that i pass
322:00 - to my component that's fine that's
322:03 - something i'm allowed to do and as we
322:04 - jump into state we're going to see why
322:06 - that's even useful but from within the
322:08 - body of the function i should never ever
322:11 - change my props in the same way that i
322:13 - would never want to change the
322:14 - parameters being passed to my function
322:16 - another way to think about props here we
322:19 - read that they are the properties being
322:21 - passed into a component in order for it
322:23 - to work correctly if it helps you could
322:26 - think of it as the properties being
322:28 - passed to a component in order to
322:29 - configure it as we saw in our last
322:32 - section project we passed props to our
322:35 - card component in order for that card to
322:38 - be reusable and configure it to display
322:41 - the correct image the correct price the
322:44 - correct stats like the review count and
322:46 - so forth and oftentimes you'll find
322:49 - components that do more than just take
322:51 - in the data that should just be
322:52 - displayed as a part of the component
322:54 - sometimes they will receive
322:56 - configuration objects or properties
322:58 - let's say for example off the top of my
323:00 - head if we had a component that we
323:03 - wanted to display either in light mode
323:05 - or dark mode well then maybe i would
323:08 - have a
323:09 - dark mode property that i could set to
323:12 - true in this case i'm not necessarily
323:14 - displaying the literal text true for
323:17 - dark mode or the text dark mode is
323:20 - activated or anything like that but
323:22 - instead this is a property that is
323:24 - configuring my navbar in order for it to
323:27 - act and display correctly okay i might
323:29 - be beating a dead horse here so let's
323:31 - move on and we're going to see how the
323:33 - use of state will differ from our usage
323:36 - of
323:38 - props if props are data that a component
323:42 - is receiving from above and shouldn't be
323:44 - changing state on the other hand are
323:46 - values that are defined within a
323:49 - component and essentially should be
323:50 - changing so as we see here state refers
323:53 - to any values that are managed by the
323:55 - component itself kind of like a function
323:58 - that declares its own variables from
324:00 - within that function long story short
324:02 - anytime your component has changing
324:04 - values that should be saved and
324:06 - displayed you're most likely going to be
324:08 - using state we'll jump into what this
324:10 - looks like in react in a second but i
324:12 - think it might be helpful to see how
324:14 - this compares in a vanilla javascript
324:16 - example kind of like we did with our add
324:18 - two numbers and having what we can
324:20 - equate to props being passed in as these
324:23 - parameters and how we shouldn't be
324:24 - changing them from within the definition
324:27 - of this function itself
324:29 - in order to create an equivalent in
324:31 - vanilla javascript of our concept of
324:33 - state let me write out a challenge for
324:35 - you
324:36 - let's say we have a function called
324:38 - greeting it takes a name as a parameter
324:40 - and what it should return is a string
324:42 - like good afternoon and then followed by
324:44 - the name of course afternoon will change
324:47 - depending on the current time of day as
324:49 - you can read from the challenge
324:50 - description up there at this point this
324:52 - is more of a vanilla javascript
324:54 - algorithm challenge for you but i think
324:56 - it's good to incorporate those into our
324:58 - react course here and maybe just so that
325:01 - i'm not making you chase google a whole
325:03 - bunch right now i'm going to give you a
325:04 - couple hints here
325:06 - so you can get the current time of day
325:08 - by following these two lines of code
325:10 - essentially first you create a new date
325:12 - object in javascript and then you use
325:14 - that date to get the current number of
325:16 - hours these hours are zero index so 12
325:19 - am is zero 11 pm is 23 and just to be
325:23 - clear i have included the 11 59 459 and
325:27 - everything up here just to be clear what
325:29 - hours should be included in morning this
325:32 - one's kind of funny because i don't know
325:33 - that i would ever say good night to
325:34 - someone at 3 59 a.m but whatever my
325:38 - point is you won't need to get the
325:39 - minutes here you can just use the hours
325:41 - like i've shown you here pause the
325:43 - screencast see if you can complete this
325:44 - challenge then we're going to bring the
325:46 - concepts back into understanding state
325:48 - and react
325:56 - now i won't spend a bunch of time
325:58 - talking about the logic of this we'll
326:00 - just put in a solution here and then
326:02 - talk about how this equates to state and
326:04 - react i have the number of hours now if
326:06 - i console log those hours
326:09 - it's 12 pm my time so my answer should
326:12 - say 12 there yep
326:14 - so i will type out some logic that i
326:17 - think will just kind of intuitively make
326:18 - sense
326:19 - the first thing i'll do is just declare
326:21 - a changeable value here time of day and
326:24 - then depending on the current number of
326:27 - hours i will change the string time of
326:29 - day to be either morning afternoon
326:31 - evening or night just like i talked
326:32 - about in the challenge and now that i
326:34 - have a time of day value i can simply
326:37 - return the string and i'll use some
326:39 - interpolation here we'll say good and
326:42 - then we'll stick in the time of day
326:44 - comma and then i'll use the value for
326:46 - name that i'm receiving as the parameter
326:49 - to greeting exclamation point and let's
326:52 - go ahead and see if this works
326:54 - again it's about 12 o'clock my time
326:56 - so i should when i oh i'll need to
326:59 - console log this
327:00 - the value that gets returned
327:02 - good afternoon bob okay now the point
327:05 - here is my function is receiving a
327:07 - parameter this parameter is not
327:09 - something that i will want to change in
327:11 - the way of saying name equals something
327:13 - different
327:15 - because that would just be a well a kind
327:17 - of a strange thing to do when you are
327:19 - expecting the outside user of this
327:21 - function to provide you the name
327:23 - similarly in react we are not going to
327:26 - take any props and then just change them
327:28 - which is what we talked about in the
327:30 - last screencast however there are
327:32 - definitely reasons for us to within our
327:34 - own function create values that we can
327:37 - either use or even change like our let
327:40 - time of day here in react values that
327:43 - are created by the function or the
327:45 - component itself are usually handled
327:47 - with state okay i think that's more than
327:49 - enough of the conceptual difference
327:51 - between props and state at this point
327:53 - it's probably best for us to just get
327:55 - our hands dirty and start actually
327:57 - seeing how we can implement state and
327:59 - react and then as we build our section
328:01 - project we will get much better exposure
328:03 - into how state and props will work
328:05 - together and how they are different from
328:07 - each other as well
328:10 - it's time for another quiz this one's
328:13 - going to specifically be looking at the
328:15 - difference between props and state so as
328:18 - always read through these questions
328:19 - click into the editor type down your
328:22 - answers and when you're satisfied with
328:24 - your answers click play and we'll go
328:25 - through the quiz together
328:34 - on a higher level the concept of state
328:36 - is sort of like saying the way things
328:39 - currently are here in the united states
328:41 - the president gives a yearly address
328:44 - called the state of the union growing up
328:46 - that always confused me because the
328:48 - united states is made up of 50 states
328:50 - and i thought it had something to do
328:51 - with that but no it means the way that
328:54 - things currently are
328:55 - in react state refers to values that a
328:59 - component can maintain between render
329:02 - cycles
329:03 - this will make more sense when we get
329:05 - into the syntax of it but let me type
329:07 - down a more concise answer to this
329:09 - question
329:10 - the concept of state is essentially a
329:13 - way for react to remember some saved
329:16 - values from inside of a component this
329:19 - is similar to declaring variables within
329:21 - a component but there are a few added
329:23 - bonuses to it which we're going to get
329:25 - to later
329:26 - so when would you use props instead of
329:28 - state in react
329:30 - i think the easiest way to think about
329:32 - this is to compare it to regular
329:34 - javascript functions
329:35 - props are like passing parameters into a
329:38 - function that the function then uses to
329:40 - help it determine the output what gets
329:43 - returned so in react you would want to
329:45 - use props anytime you need to pass data
329:48 - into a component so that that component
329:51 - can use that data to determine what
329:53 - should get displayed on the screen
329:56 - in some cases the data that we pass in
329:59 - will directly be data that is displayed
330:01 - like in the instance of text but
330:03 - sometimes it will be data that's really
330:05 - just meant to so to speak configure the
330:07 - component so that the component can use
330:09 - it to determine how something gets
330:11 - displayed
330:13 - okay so when would you want to use state
330:15 - instead of props
330:17 - continuing with our function analogy
330:19 - state is kind of like when inside of the
330:22 - body of a function you declare new
330:24 - variables
330:25 - and you use those new variables to help
330:28 - you accomplish some task inside of the
330:30 - function
330:31 - in react you would use state anytime you
330:34 - needed a component to maintain its own
330:36 - values as we mentioned earlier it's
330:38 - slightly different than just declaring a
330:41 - regular variable we're going to see the
330:42 - syntax of it later and how it differs
330:45 - but for now that should be a sufficient
330:47 - answer to this question
330:49 - so you would use state anytime you want
330:51 - a component to maintain some values from
330:53 - within that component and by the way
330:55 - also remember those values even when
330:57 - react needs to re-render the component
331:00 - again we're going to see that much more
331:02 - in detail a little bit later and a
331:04 - little bit out of left field what does
331:05 - the term immutable mean and then our
331:08 - props immutable and is state immutable
331:11 - immutable technically means unchanging
331:14 - the reason i bring this up is because we
331:16 - learned that props are immutable we
331:19 - should not ever change props from within
331:21 - the component that's receiving props
331:23 - doing so essentially defeats the entire
331:26 - purpose of props think of it like a
331:28 - function that receives a parameter but
331:30 - then just decides to change the value of
331:32 - those parameters to something different
331:34 - it pretty much invalidates the whole
331:35 - purpose of passing parameters into a
331:37 - function so props are
331:40 - immutable
331:41 - in this case i don't think props are
331:43 - literally immutable you can try to set
331:46 - them equal to something else and i don't
331:48 - believe it will crash your program
331:50 - although it may throw a warning but
331:52 - maybe a better way to describe it is
331:53 - saying that you should not change props
331:55 - and therefore they are immutable
331:58 - state on the other hand is not immutable
332:00 - or in other words state is mutable the
332:04 - purpose of declaring state in a
332:05 - component is because you do plan on
332:08 - changing state
332:09 - okay we're done with the quiz nice work
332:11 - when you're ready let's keep moving
332:12 - forward
332:15 - we saw in an earlier lesson how it's not
332:18 - going to work for us at least in react
332:20 - to just declare regular variables like
332:23 - let's say state is equal to yes and
332:26 - expect react to re-render our component
332:28 - if for some reason that state ever
332:30 - changed if you recall we had an array of
332:33 - items and we had a button that allowed
332:36 - us to push new elements to that array
332:38 - but whenever we did that it didn't
332:40 - actually update our page and that's
332:42 - because react doesn't watch for local
332:45 - variable changes so the first thing
332:47 - we'll do is learn how to actually
332:49 - declare state inside of our component
332:51 - and in the next cast we'll talk more
332:53 - about how to actually change that state
332:55 - as a part of the react library there is
332:58 - a method called use state and use state
333:02 - is one of many what are called hooks in
333:04 - react there's a little bit of history as
333:06 - to why it's called hooks we're probably
333:09 - just not going to worry too much about
333:10 - it right now but the point is i can
333:12 - declare some state by simply calling
333:14 - react dot use state now another way you
333:18 - might oftentimes see this is people will
333:20 - destructure it directly in the import
333:22 - statement they'll grab the use state
333:24 - method from react as well and then they
333:26 - can just use use state in fact i would
333:29 - suppose this is the more common way you
333:31 - will usually see it happen however just
333:34 - for perfect clarity and for it to be
333:36 - very clear that use date is part of the
333:38 - react library i'm actually going to use
333:41 - react dot use state because i do find
333:43 - that it makes it a lot more clear where
333:46 - this use state method is coming from
333:48 - let's go ahead and see what comes back
333:50 - we'll say const result equals
333:52 - react.ustate and then we'll console.log
333:54 - result just to see what actually comes
333:57 - back by calling react.usestate
334:00 - i'll open the console hit save
334:02 - and look at that okay so that's
334:04 - interesting we get an arrayback and the
334:06 - array has its first value as undefined
334:09 - and its second value well in scrim but
334:10 - it says f parentheses that just means
334:12 - that it's a function now let's see what
334:14 - happens when i put something inside the
334:16 - parentheses let's say the string hello
334:18 - i'll hit save
334:19 - and now the first value of my array is
334:22 - the string hello so whatever i put
334:24 - inside of my parentheses when i'm
334:26 - calling use state is going to be the
334:28 - default value for the state variable
334:30 - that i want to save
334:32 - okay so now that leads me to a little
334:34 - mini challenge that will require you to
334:36 - think a little bit critically i'm going
334:38 - to type the challenge out now
334:40 - okay your job is to replace this yes
334:43 - with a string yes that isn't just hard
334:46 - coded inside but rather is created by
334:49 - using react.usestate remember what we
334:52 - get back by calling react.usestate is
334:54 - not just the string hello it's actually
334:56 - an array so let that guide you as you
334:58 - work this challenge pause the screencast
335:00 - and work on this now
335:08 - the first thing i can do is change hello
335:10 - to yes
335:12 - and then my result is an array and the
335:15 - index of zero should be let me just log
335:18 - this should be my string yes
335:20 - so i could replace this yes with a set
335:23 - of curly braces because i need to jump
335:25 - into javascript and then i can say
335:27 - result at the index of zero i'll hit
335:29 - save and we get yes the exact same way
335:32 - we had it before but now if i were to
335:34 - change this to no which is not true
335:37 - state is important to know awesome our
335:39 - page actually updates with the state
335:42 - that we had created with react.ustate
335:44 - change this back to yes because it
335:46 - certainly is important to know okay well
335:48 - there's a couple of problems we have
335:49 - first of all this is kind of clunky to
335:51 - say result at the index of zero in the
335:53 - next screencast we're going to learn a
335:55 - little bit more about what we can do
335:57 - with this array and then we will bring
335:59 - out the real power of using state by
336:01 - allowing the user to interact with our
336:03 - page and change state themselves so when
336:06 - you're ready let's jump into those
336:07 - topics
336:10 - as we saw what we get back by calling
336:12 - react.usestate is an array where the
336:15 - first item is the value of the state
336:18 - that we are hoping to save kind of like
336:20 - initializing a variable inside of our
336:22 - component and the second item of that
336:23 - array is a function so we saw how we
336:26 - could use result at the index of zero to
336:28 - get our value however there's actually a
336:30 - much smoother way to deal with this and
336:32 - this requires us to use array
336:34 - destructuring since react.ustate returns
336:38 - an array what we can do is actually
336:40 - destructure that array immediately upon
336:43 - receiving it as a variable and then we
336:46 - can provide two values and let me just
336:48 - put funk because we know the second
336:50 - value is a function
336:51 - now in this case if i rerun console.log
336:54 - result what we see is that we have
336:56 - pulled out the first item in the
336:58 - resulting array of react.ustate and
337:02 - destructured it into its own variable
337:04 - called result what's nice about using
337:06 - array destructuring is that we get to
337:09 - call this whatever we
337:11 - want
337:13 - if this were object destructuring we
337:15 - would have to use the property name of
337:17 - the object that comes back by calling
337:18 - react.usedate but because they return an
337:21 - array we can call it whatever we want so
337:24 - if i console.log whatever we want we get
337:26 - the same thing yes
337:28 - oh and now my result down here is broken
337:31 - so if i change that to whatever we want
337:33 - we get back to the way we were now don't
337:35 - use silly names like whatever we want
337:37 - instead let's say maybe is important
337:41 - we'll choose a variable name that makes
337:42 - a lot of sense for what the value is
337:44 - that we're trying to keep track of
337:46 - and that's the concept of using array d
337:48 - structuring in order to more smoothly
337:51 - get values from react.ustate in the next
337:54 - screencast let's talk more about this
337:56 - function here
338:00 - let's take a look now at the function
338:01 - that we receive here when we destructure
338:04 - the array that comes back from
338:05 - react.usestate
338:07 - normally if we had a variable where we
338:09 - were saving this if we just said
338:11 - something like let is important
338:14 - equal
338:15 - yes
338:16 - then we already know we could simply say
338:18 - is important equals something different
338:20 - like no however when we're working with
338:23 - state we can't simply say is important
338:26 - equals something different
338:28 - instead we are given a function that
338:30 - allows us to make these changes so that
338:33 - react can handle those changes
338:36 - accordingly
338:37 - let me delete these lines here and let's
338:39 - take a look at this function now
338:41 - normally we wouldn't just call this func
338:43 - so let's give this a more meaningful
338:45 - name the convention that you'll often
338:47 - times see is set and then the rest of
338:51 - the variable that we called our state so
338:53 - set is important in this case i need a
338:56 - capital i to make my camel casing
338:58 - correct and this set is important is a
339:02 - function that i can run and whatever
339:04 - value i provide to it is going to be the
339:07 - new version of state now of course
339:09 - running this function immediately after
339:11 - generating state is kind of silly in
339:13 - fact i'm not even certain that it would
339:15 - work instead we would normally want to
339:18 - set or change the state whenever
339:20 - something specific happens on the page
339:23 - so let me type up a challenge so we can
339:25 - do something like that
339:27 - okay just to avoid confusion i created
339:29 - the actual function body for you but
339:31 - your challenge is to have this function
339:34 - run this line of code and then to set up
339:36 - an event listener on this div so that it
339:39 - runs handleclick whenever anywhere
339:41 - inside this circle gets clicked
339:44 - pause the screencast and work on this
339:45 - challenge
339:53 - well simply enough i can copy this line
339:55 - of code put it in there and then i need
339:58 - to set up an event listener here so i'll
340:00 - say on click again capital c
340:03 - we will run our handle click function
340:08 - hit refresh
340:10 - and when i click my button here awesome
340:12 - okay notice that as soon as i clicked it
340:14 - changed from yes to no what happened is
340:16 - we took the function that we were given
340:18 - when we called react.ustate this
340:20 - function's job is to give us the ability
340:23 - to change state if we wanted to
340:25 - and we used it in the most simple way
340:27 - possible which is to simply provide a
340:30 - new version of state as soon as this
340:32 - line gets called which of course happens
340:34 - as soon as we click our div here then
340:37 - set is important gets called and the
340:39 - state changes to no and well at this
340:42 - point we've kind of hit a dead end
340:44 - because obviously this is incorrect
340:46 - state is very important to know but
340:49 - notice that if i click this again and
340:50 - again well nothing is changing and
340:52 - that's because every time i click it it
340:55 - immediately sets it to no
340:57 - in the next screencast let's work on a
340:59 - challenge that will help get your hands
341:00 - on the keyboard practicing using state
341:05 - all right here we have something that's
341:06 - a little more dynamic the idea is we
341:08 - will create a little counter when i hit
341:10 - plus this number should go up when i hit
341:12 - minus this number should go down to
341:14 - start us off and to get your hands on
341:16 - the keyboard i'm going to have you
341:18 - complete this challenge where you're
341:19 - going to set up state to track our
341:22 - current count and our initial value is
341:24 - going to be zero pause the screencast
341:26 - and see if you can complete this
341:28 - challenge
341:35 - to create new state we simply use react
341:37 - dot use state
341:40 - and we can provide the initial value of
341:42 - zero
341:43 - and then we need to essentially catch
341:45 - what this returns in some variables
341:47 - it's an array and because what we get is
341:50 - an array and i can destructure it that
341:52 - means i can call it whatever i want
341:55 - in the first index i receive the value
341:57 - which i'll call the count and by
341:59 - convention i will call my setter
342:01 - function setcount this is the function
342:04 - that when i call it will allow me to
342:06 - update the state here one last thing
342:08 - that i didn't specifically say to do and
342:10 - wouldn't be very obvious unless i did is
342:13 - to use this count value to replace our
342:16 - zero here
342:17 - now at this point nothing is going to
342:18 - look like it has changed i still don't
342:20 - have the ability to
342:22 - raise or lower this number
342:24 - now let me build up to the next section
342:25 - by updating our challenge
342:27 - okay your challenge is to create a
342:29 - function that's called add that runs
342:31 - whenever the plus button is clicked this
342:33 - is just practice on event listeners in
342:35 - general for now you can just have it
342:37 - console log the string add or something
342:39 - along those lines a good rule of thumb
342:41 - to use is to declare these functions
342:43 - inside of your component so instead of
342:46 - going up here outside of your component
342:48 - and creating your function called add
342:50 - it's better to declare that function
342:52 - right here inside of your component
342:55 - pause the screencast and work on this
342:56 - part of the challenge
343:05 - okay let's declare a new function called
343:07 - add
343:09 - and for now we'll just console.log add
343:12 - and let's see here is my plus button so
343:15 - i will add an on click
343:19 - of add
343:21 - and now i should click this button and
343:23 - get my console logging ad awesome
343:26 - okay at this point we're running into an
343:28 - issue and that is how we can update our
343:31 - count what we most recently saw is that
343:33 - i could say set count and then provide
343:36 - some kind of immediate hard-coded value
343:38 - here however that doesn't really help us
343:40 - because even if i provide a 1
343:43 - if i run this code it will work notice
343:45 - that when i click the add button it sets
343:48 - the count to one therefore it re-renders
343:50 - our app and changes the zero to one
343:54 - however of course if i hit plus again
343:55 - and again and again it's just constantly
343:58 - setting it to one and it doesn't really
344:00 - accomplish what we want so i want you to
344:02 - think critically i'm going to update our
344:04 - challenge
344:05 - i want you to see if you can think of a
344:07 - way so that clicking the plus button
344:09 - will increase our number by one every
344:11 - time and display it correctly on the
344:13 - screen obviously hard coding one here is
344:15 - not going to work pause the screencast
344:17 - and see if you can figure out this
344:18 - challenge
344:26 - hopefully you were able to figure out
344:27 - that we do have access to our current
344:30 - count and so i can just say i want you
344:32 - to set the count equal to
344:34 - whatever the current count is plus one
344:37 - let me hit save we'll see that this is
344:39 - working okay that's awesome but i wanted
344:41 - to use this as a chance to show you a
344:43 - common misconception or fallacy that
344:46 - beginners in react tend to fall into and
344:48 - that is trying to do something like
344:49 - count plus plus or even plus plus count
344:53 - if you're familiar with the differences
344:54 - between those two let's look at count
344:56 - plus plus for example
344:58 - in the philosophy of react something
345:00 - like count plus plus is strictly
345:03 - forbidden and that's because we never
345:05 - want to modify state directly what i
345:08 - mean by that is this count plus plus is
345:10 - a shorthand for count equals count plus
345:14 - one and in this case using count equals
345:17 - is just a big no-no you will never ever
345:19 - do that when you're modifying state the
345:22 - entire reason that we have this set
345:24 - count function is so that we can simply
345:26 - provide a new updated value but we will
345:29 - never ever want to run an equal sign
345:32 - after our state value
345:34 - so let me put this back to count plus
345:36 - one
345:37 - we'll see that this is working and now i
345:40 - want to update our challenge to finish
345:42 - off the basic portion of this app
345:45 - okay your task is to add functionality
345:47 - to the minus button now of course
345:49 - clicking the minus button should
345:50 - decrease our number by one pause the
345:52 - lesson and see if you can figure this
345:54 - one out
346:02 - all we need to do is to create a
346:04 - subtract function instead so i'll create
346:07 - a new function called subtract
346:09 - of course this one should take count and
346:11 - subtract one
346:13 - and then we need to add our on click
346:15 - handler for the minus button so that
346:18 - will go right here
346:20 - subtract
346:23 - and once i hit save we should be able to
346:25 - go backwards as well
346:27 - awesome great work however i do have a
346:30 - little bit of bad news although we were
346:32 - able to use our count state value here
346:35 - in order to help us determine the new
346:37 - count it turns out we're not actually
346:39 - following best practices when it comes
346:41 - to using this state value here so in the
346:43 - next screencast we're going to see
346:45 - another way that we can use the
346:47 - setcountsetter function to update our
346:49 - state value
346:53 - although currently it's technically
346:54 - working for us to use our current state
346:56 - value in order to determine the new
346:59 - state value when we're setting our count
347:01 - it turns out there's actually a better
347:03 - way to use set count in this case
347:05 - whenever we need to use our old version
347:08 - of state to determine our new version of
347:10 - state
347:11 - we've seen how we can simply provide a
347:13 - new value to our setter function however
347:16 - there's another way that we can use this
347:18 - setter function and that is to provide a
347:21 - callback function inside
347:23 - when we provide a callback function as
347:26 - the parameter to our setter function
347:29 - this function needs to return the new
347:31 - value that we want state to be if we
347:34 - essentially wanted to recreate what we
347:36 - did by passing a simple value to our
347:39 - setcount function we could just have our
347:41 - callback function here return count plus
347:44 - one however this is where the best
347:46 - practices comes in
347:48 - anytime we need to use our old state
347:50 - value to determine a new state value if
347:53 - we provide this function react will pass
347:56 - this function the old value as the
347:59 - parameter here what we can do is then
348:01 - take this old value and use that as our
348:04 - reference to what count was at the time
348:07 - that this function was called this might
348:09 - be really confusing at this point it
348:11 - would require us to jump a little bit
348:14 - deeper into how react handles state
348:16 - changes and re-renders to truly
348:18 - understand why this is best practice for
348:21 - now i think it's going to be enough to
348:23 - simply say if you ever need to use the
348:25 - old value of state in order to determine
348:28 - the new value of state you should just
348:31 - always plan to pass a function to set
348:34 - count
348:35 - this might be a little disheartening
348:37 - because this already looks way more
348:38 - complicated than what we had here
348:40 - fortunately if we use arrow functions we
348:43 - can simplify this quite a bit i can just
348:45 - say given the old value
348:48 - return old value plus one usually what
348:52 - i'll do is use the prefix of prev and
348:55 - then use my state value so i'll say
348:58 - preview count as in previous count so
349:00 - this is the convention you'll usually
349:02 - see me using whenever i'm using a
349:05 - callback function as my parameter to set
349:07 - count because that was a little bit
349:09 - confusing i'm going to type this out as
349:11 - a note so that maybe those of you who
349:13 - are more visual learners will be able to
349:14 - comprehend it a little better
349:16 - so again if you ever need the old value
349:19 - of state to help you determine the new
349:20 - value of state or in other words if the
349:22 - new value of state depends on knowing
349:25 - what the old value of state was you
349:27 - should always pass a callback function
349:29 - to your state setter function instead of
349:31 - using the state directly like we're
349:33 - doing down here
349:34 - then this callback function will receive
349:36 - a previous version or the old version of
349:38 - the state value which you can then use
349:41 - to determine the new state value with
349:43 - that said let's do a quick challenge
349:46 - okay your challenge is to update our
349:48 - subtract function to use this callback
349:50 - function as the state setter instead of
349:53 - what we currently have pause the
349:55 - screencast and update our subtract
349:56 - function
350:04 - fortunately with arrow functions this is
350:06 - still very concise i can say pre-count
350:10 - arrow
350:11 - pre-count -1 and just for demonstration
350:15 - when i refresh this you can see
350:16 - everything is working exactly the way as
350:18 - it was you're obviously more than
350:20 - welcome if you're really curious to deep
350:21 - dive into this do a bunch of google and
350:23 - youtube searches to truly understand why
350:26 - this is better frankly i would say
350:28 - probably 90 of the time you would never
350:30 - notice the difference between what we
350:32 - used to have and what we currently have
350:34 - however it is generally accepted as best
350:36 - practice to do it this way and all of
350:38 - this is not to say that there's no
350:40 - instance in which you would want to just
350:41 - provide a bear value for your setter
350:44 - that certainly does happen still but in
350:46 - the spirit of teaching you best
350:48 - practices in react it's probably good
350:50 - enough just to understand what i'm
350:52 - talking about here in this note and to
350:54 - move on a good practice at this time
350:56 - might be to delete everything that we're
350:58 - doing dealing with state here and to try
351:00 - and recreate it from scratch maybe as a
351:02 - way to test your own skills to see if
351:05 - you are truly comprehending what we've
351:07 - done so far when you feel like you've
351:09 - got a good grasp on this let's keep
351:10 - moving forward
351:14 - let's pause now and do another quick
351:16 - quiz like you've done before pause the
351:18 - screencast click into the editor here
351:20 - actually type down your answers to the
351:22 - questions that you see here and then we
351:24 - will go through the quiz together pause
351:26 - now and work on the quiz
351:34 - okay number one you have two options for
351:36 - what you can pass into a state setter
351:38 - function like set count what are those
351:40 - options well option a is to pass in
351:44 - simply the new value of state
351:47 - so if you call set count and you provide
351:50 - a new value like 42 whenever this
351:53 - function gets called state will
351:55 - automatically be updated to the number
351:57 - 42 and option b is to pass a callback
352:01 - function
352:02 - and then whatever the callback function
352:04 - returns we'll say whatever the callback
352:07 - function returns will be
352:10 - the new value of state
352:13 - and then numbers two and three both
352:14 - refer back to the answer to number one
352:17 - so when would you want to use the first
352:19 - option in our case the new value of
352:21 - state this is any time you want to
352:23 - update your state and you do not care
352:25 - what the previous value of state was or
352:28 - rather you don't need the previous value
352:30 - of state to help you determine what the
352:32 - new value of state should be
352:35 - and then the answer to number three is
352:37 - basically the opposite of number two
352:39 - it's whenever you do need the previous
352:41 - value of state to help you determine the
352:43 - new value of state
352:45 - under the hood react is doing some
352:47 - relatively complex things to make sure
352:49 - that it can maintain state for you one
352:51 - of those things has to do with batching
352:54 - a bunch of different state changes
352:55 - together so if you were to run two state
352:58 - setter functions back to back the way
353:00 - that react handles it may or may not run
353:03 - one of them before the other that's a
353:04 - very high level overview of why we need
353:07 - to do this but when we pass a callback
353:09 - function to our state setter function we
353:11 - can be guaranteed that the value that
353:14 - callback function receives which in the
353:16 - previous lesson we were calling
353:17 - pre-count we can be guaranteed that it
353:19 - will receive the most updated correct
353:22 - version of that so that it can update
353:24 - state correctly if that didn't make any
353:26 - sense that's completely okay that's
353:28 - really why i didn't want to dive too
353:29 - deep into it because at this point it
353:31 - truly is enough to know that if you need
353:33 - the old value of state to help you
353:34 - determine the new value of state you
353:36 - should pass a callback function
353:37 - otherwise you don't need to pass a
353:39 - callback function okay i'm probably
353:41 - beating a dead horse at this point when
353:42 - you're ready let's keep moving forward
353:47 - now that we've learned how to create and
353:50 - update our state let's revisit our meme
353:52 - generator
353:54 - we figured out earlier how to get a
353:56 - random url for a meme image however the
353:59 - conundrum we ran into was that we
354:01 - couldn't update our user interface with
354:03 - that image because react wasn't
354:05 - listening to our local variables now
354:08 - that we know about state we should be
354:09 - able to add an image to our meme
354:10 - generator
354:11 - so your challenge is to first create a
354:14 - new piece of state called meme image
354:16 - that will just start with an empty
354:17 - string as a default and when the get
354:19 - meme image function is called you'll
354:22 - save the random url which we still have
354:24 - access to right here in the state for
354:27 - meme image
354:28 - once you've done that you should be able
354:30 - to add an image element below our div
354:32 - here with the form that has its source
354:35 - set to the new meme image state that you
354:38 - created as a bonus you may want to add
354:40 - some styling so that the image stays
354:42 - confined within the space that we're
354:44 - working with here pause the screencast
354:46 - and work on adding an image to our meme
354:48 - generator
354:56 - right near the top here i'm going to
354:58 - create name image and set
355:02 - meme image
355:04 - which will come back from react.use
355:06 - state
355:07 - the initial value is an empty string
355:10 - down in my get meme image function we
355:13 - can call set name image
355:16 - and now think for a second do i need
355:18 - access to the old state the old string
355:21 - here in order to determine what my new
355:23 - string should be
355:25 - and the answer is no i don't care what
355:27 - it used to be i'm completely replacing
355:29 - it with the new url which i can get
355:32 - through memes array at the index of
355:33 - randomnumber.url
355:36 - and that should complete these first two
355:37 - tasks
355:39 - lastly i'm going to use my new meme
355:41 - image to
355:43 - create an image element
355:45 - and give it the proper source
355:48 - name image
355:49 - let's hit save and well it says we have
355:53 - an error let's go ahead and just see
355:55 - what happens i'll click get a new image
355:57 - and look at that we've got an image now
355:59 - obviously it's pretty large
356:01 - let's see if we can just add maybe a
356:04 - class name
356:06 - and for now let's call it maybe meme
356:08 - dash dash image
356:10 - in my styles i'll add
356:13 - name image and let's say it's got a max
356:16 - width of a hundred percent
356:19 - hit refresh
356:21 - click get a new meme image and look at
356:23 - that
356:24 - now i don't know immediately what this
356:26 - error is coming from i think for now i'm
356:28 - going to ignore it and we'll see if we
356:30 - can figure it out later down the road
356:32 - awesome work now this is just the
356:34 - beginning we have a lot left to learn
356:36 - about state but don't let that be
356:38 - daunting it's going to be really fun so
356:40 - when you're ready let's keep pushing
356:42 - forward
356:45 - at this point it will be helpful for us
356:47 - to practice the ternary operator whether
356:49 - you've learned it before or not i've
356:51 - written some very basic javascript here
356:54 - we just have a variable called is going
356:56 - out that is set to the boolean true and
356:58 - then we are using that value to
357:00 - determine what the answer should be that
357:02 - we display in our h1 over on the page
357:06 - obviously if is going out is true then
357:08 - we'll say yes and otherwise we'll say no
357:11 - if it's been a while since you've worked
357:12 - with the ternary or you never really
357:14 - fully grasped it i've included a link
357:16 - here to the mdn docs on how to use the
357:19 - ternary operator so once you feel
357:21 - prepared pause the screencast and see if
357:23 - you can clean up our code using a
357:25 - ternary
357:33 - a ternary allows us to put an if else
357:36 - statement onto a single line technically
357:39 - you can also manage if else if else
357:42 - statements and get as nested as you want
357:44 - by using nested ternaries but at that
357:47 - point i really don't see a reason in
357:48 - using a ternary it becomes much more
357:50 - difficult to read than a simple if-else
357:52 - statement so here what we're going to do
357:55 - is set our answer equal to and then
357:58 - we'll use a ternary to determine if we
358:00 - are going out so i could say is going
358:02 - out
358:03 - is true and then i use a question mark
358:05 - that says if this is true then i want
358:09 - you to use this expression in other
358:11 - words i want let answer equal to yes the
358:14 - string yes otherwise this is my else
358:18 - i'll say i want answer to equal no
358:21 - i can get rid of all this down here
358:24 - and i've been able to clean up my code
358:26 - from before to a single line and if
358:28 - you're not terribly familiar with
358:30 - ternaries the more you see this the more
358:32 - natural it's going to seem this is
358:33 - actually a really easy thing for me to
358:35 - read now because i've seen it so many
358:37 - times so i can hit save
358:39 - and everything is working here we can
358:41 - see if i flip this to false
358:44 - hit save then we get the answer no
358:47 - i can simplify this ternary even further
358:49 - because is going out is already a
358:51 - boolean i don't necessarily need to
358:53 - equate it equal to true so i can simply
358:56 - say if
358:57 - is going out in other words if this is
359:00 - true or a truthy value
359:02 - then set answer equal to yes otherwise
359:05 - set it equal to no
359:07 - and of course we get the same values
359:09 - switch this to true no will change to
359:11 - yes awesome okay let me tweak this
359:13 - challenge just a little bit
359:15 - there's one more way that you will
359:16 - oftentimes see a ternary used in react
359:19 - and that is when the ternary actually
359:21 - exists inside of our markup if you
359:23 - remember our curly braces allow us to
359:26 - put javascript not just variables but
359:28 - entire expressions directly inside of
359:31 - our jsx so your challenge is to move the
359:34 - ternary inside of the h1 in the jsx and
359:37 - as a hint you will no longer need the
359:39 - answer variable at all
359:41 - pause the screencast and see if you can
359:43 - figure out a solution to this challenge
359:52 - all i need to do is take this part of my
359:54 - ternary here and replace answer with it
359:58 - and then i can get rid of my answer
360:00 - completely now what will happen is every
360:03 - time my component renders it will check
360:06 - the value of is going out and it will
360:09 - determine whether the string yes should
360:11 - be used as the text of this h1 or if the
360:14 - string no should be used as the text of
360:16 - this h1 so just like we had before i can
360:18 - hit save we get yes because our value is
360:21 - true and if we switch it to false we get
360:23 - our answer of no
360:25 - awesome this sets us up perfectly to
360:27 - work on the next challenge where we will
360:29 - actually save this value in state and
360:31 - then flip it back and forth between true
360:33 - and false and that's what we'll work on
360:34 - next
360:37 - similar to last time we have the
360:39 - question do i feel like going out
360:41 - tonight i've hard coded this time the
360:43 - answer yes but you will want to change
360:45 - that in the challenge so your challenge
360:47 - is to initialize some state for a
360:49 - variable called is going out and you
360:51 - will just begin it as a boolean you can
360:53 - choose true or false as the default and
360:55 - then make it so that clicking anywhere
360:57 - in this div
360:58 - will flip that boolean value from true
361:01 - to false or false to true
361:03 - and then instead of a hard-coded yes you
361:05 - should display yes if is going out as
361:07 - true otherwise it should display no this
361:10 - rolls together the topics of the past
361:12 - few screencasts so if you need to look
361:14 - back and remind yourself how everything
361:16 - works that's completely okay pause the
361:19 - screencast and work on this challenge
361:28 - to initialize some state i will simply
361:30 - use react.use
361:32 - state
361:33 - as a reminder you could also decide to
361:36 - pull in use state as a separate method
361:38 - from the react library by destructuring
361:40 - it up here
361:42 - i'll set the initial value to true and i
361:44 - will save it in a variable that i will
361:48 - use destructuring on because i receive
361:50 - an array back and we'll use is going out
361:53 - and i will by convention use set
361:56 - is going out
361:58 - as my function name next i need to make
362:00 - it so that this div when it's clicked
362:02 - will flip that value there's a few
362:04 - different ways i could do this in fact i
362:06 - think i'll show you them i'll set an on
362:08 - click here and one way that you may see
362:11 - from time to time is somebody providing
362:13 - an arrow function directly inside of
362:16 - your on click one benefit of this is
362:18 - that you can just declare it right here
362:20 - and it is nice and concise short and
362:23 - sweet in fact i'll start going down this
362:25 - path and then i'll probably change to
362:27 - move this function into its own defined
362:29 - function outside of my return but let's
362:31 - go down this road for a second when a
362:33 - click on this div happens i want to run
362:35 - this whole function and the main thing i
362:38 - want this to do is to use
362:40 - set is going out and now i need to think
362:42 - do i need the old value of state to
362:45 - determine the new value and yes in this
362:48 - case i do i need to know
362:49 - if it used to be true then i want it to
362:51 - be false if it used to be false i want
362:53 - it to be true now think to yourself when
362:55 - i need to use the old state what do i
362:58 - need to provide as my parameter to my
363:00 - setter function here
363:07 - if you said i need to provide another
363:09 - callback function then you were right
363:11 - and that's because this callback
363:12 - function will give me the previous
363:14 - version of state that will help me
363:16 - determine the new version of state
363:18 - and now that i've typed that out i can
363:20 - see that this is already a little bit
363:22 - crazy i have an arrow function calling
363:24 - this function which takes a function as
363:26 - a parameter and it becomes one too many
363:29 - levels of inception for me so i'm going
363:32 - to move this to a function out here
363:34 - let's call it change mind
363:37 - and it's going to run set is going out
363:40 - and then i can replace this all with
363:42 - just change mind which looks a lot more
363:45 - concise and to me at least is a little
363:47 - simpler to read
363:49 - with set is going out i'll take my
363:51 - previous version of state you can call
363:54 - this whatever you want
363:55 - and we will return the opposite of
363:58 - whatever previous state used to be now
364:01 - this is a little shorthand trick that
364:02 - i've learned over the years if you did
364:04 - something more like
364:06 - an if statement that says if grieve
364:08 - state was true then set it to false and
364:10 - if it was false then set it to true
364:12 - that's completely okay this is another
364:14 - instance where a ternary might be useful
364:16 - we could say
364:18 - if
364:18 - state is true then return false but
364:22 - otherwise return true but all of that is
364:25 - a little bit unnecessary because i can
364:27 - simply say just return the opposite of
364:29 - what it currently is
364:30 - now last but not least i need to change
364:32 - what is actually displaying on my page
364:34 - now if you struggled to get to this
364:36 - point first of all i'd recommend going
364:38 - back and reviewing what we've learned
364:40 - keep practicing until this first portion
364:42 - of what we just did makes sense but
364:44 - before you do that i'd also like to
364:46 - encourage you to pause the screencast
364:48 - and see if you can apply what we learned
364:49 - about ternaries and what our current
364:52 - value of is going out is to determine
364:55 - what we should replace our yes with here
364:57 - so if you weren't able to complete this
364:59 - far then pause the screencast and try to
365:01 - figure out what we should put here in
365:03 - our h1
365:11 - well we can just put a ternary directly
365:13 - in line by putting a set of curly braces
365:15 - to
365:16 - tell us that we're going into javascript
365:18 - and i can use a ternary that says is
365:20 - going out is true then i want you to
365:23 - display yes
365:24 - but otherwise i want you to display no
365:27 - and at this point we should have
365:28 - everything completed let's open this app
365:31 - we'll refresh it and when i click it
365:33 - changes us from yes to no
365:35 - one thing i like about using a boolean
365:37 - for our state here is that it's a lot
365:39 - more realistic to a real scenario i
365:41 - could have possibly made things a little
365:43 - bit simpler by just having this be the
365:46 - string yes or no i would obviously need
365:49 - to change this down here and say if
365:51 - previous state was yes then change it to
365:53 - no and if it was no then change it to
365:54 - yes but personally i like the separation
365:57 - especially if i'm going to use variable
365:58 - names that start with is or has that
366:00 - indicate a boolean to just use a boolean
366:03 - like true or false and then translate
366:05 - that true or false boolean value into
366:07 - something that makes a lot more sense
366:09 - for a user to actually see on the page
366:12 - again if any part of this was
366:14 - overwhelming or too confusing or you
366:16 - weren't able to do this from memory then
366:17 - i highly recommend going back reviewing
366:20 - this trying to do this challenge again
366:22 - don't just push forward but all in all
366:24 - you are doing a great job whether you
366:26 - understood this or not you've gotten
366:28 - very far also don't forget to take
366:30 - breaks stand up if you need to go get a
366:32 - drink of water and when you feel
366:34 - refreshed and ready let's keep moving on
366:39 - hey this looks familiar this is the
366:41 - little app that we used when we were
366:43 - learning about how saving local
366:45 - variables does not update our ui and now
366:48 - that we've learned about state to start
366:50 - us off your challenge is to convert the
366:52 - code below to use an array that's held
366:55 - in state instead of what we currently
366:57 - have with our local variable here you
366:59 - can just initialize the state as an
367:01 - array with these same two items
367:03 - and if i were you i would call the piece
367:05 - of state that you create things array
367:07 - just like we had before so we don't have
367:09 - to change anything else in our code here
367:12 - pause now and work on this challenge
367:21 - let's go ahead and create in fact i'm
367:24 - just going to reuse what i have here i'm
367:26 - going to put this into an array and
367:30 - have a setter function that says set
367:32 - things array
367:34 - and that will equal
367:35 - react.use state
367:38 - which i will initialize with this array
367:41 - and well let's hit refresh i think this
367:43 - should work just fine okay well this is
367:45 - showing up at least that tells me that
367:47 - things array still contains my two items
367:50 - the last piece we need to fix is making
367:52 - it so that our add item button will add
367:54 - something to our things array however
367:57 - the reason that i'm making this video is
367:58 - because there is a small gotcha in here
368:02 - and that is that it's tempting to want
368:05 - to do something like things array dot
368:08 - push
368:09 - however i want you to think for a second
368:11 - what is wrong with saying things
368:12 - array.push
368:21 - if you remember back we should never
368:22 - ever directly modify our state in this
368:25 - case our state is things array and here
368:28 - i'm directly modifying it dot push is a
368:31 - destructive action it modifies the
368:34 - original array and therefore we would be
368:36 - changing things array ourselves and this
368:39 - just isn't a good idea in fact not only
368:42 - is it not a good idea but if i try to do
368:44 - it let me put a test in here hit save
368:47 - and add item you can see that nothing is
368:49 - going to happen here okay so we know we
368:51 - need to use set things array in order to
368:53 - modify our state which will actually
368:56 - update the user interface on our screen
368:58 - so let's use set things array and if you
369:01 - remember back with settings array or
369:03 - whatever setter function i have i can
369:05 - provide one of two options here pause
369:08 - and think for a second what are the two
369:09 - different options that i could put into
369:11 - the settings array
369:19 - well i can either provide it with and
369:21 - i'm going to put these inside of angle
369:23 - brackets to show you this is not real
369:25 - syntax i could either put in a bare new
369:29 - value completely replacing the old value
369:32 - of state with this new value or i can
369:35 - provide it with a callback function and
369:37 - that callback function would receive as
369:39 - its parameter the old version of state
369:42 - which i can use to determine the new
369:44 - version of state so now i want you to
369:47 - pause for a second and think which of
369:48 - these options should i use should i use
369:51 - the new value option
369:53 - or should i use the callback function
369:55 - option
370:03 - well if i just provided a new value then
370:06 - i wouldn't really be able to add
370:08 - anything to my existing array i would be
370:10 - simply replacing my existing array
370:13 - because what i want to do is add an item
370:15 - to the array that means that i do depend
370:18 - on what the old version of state or the
370:20 - old array is in order to determine my
370:23 - new array
370:24 - so i need to provide a callback function
370:27 - here i'll do this as an arrow function
370:30 - and
370:31 - i can put in my
370:33 - let's say prev things array
370:36 - or i could simply say preview state if i
370:39 - wanted to i'll keep it as things array
370:41 - so it's contextual and now that i have
370:44 - gotten this this far i want you to pause
370:46 - and see if you can figure out what i
370:48 - need to add or what i need to return in
370:50 - this callback function to correctly
370:53 - update my array with the new thing that
370:56 - i want to add and if you remember every
370:59 - time we click add item we want to
371:01 - determine the length of the array and
371:03 - just add thing
371:05 - space and then the new length of the
371:07 - array so it should automatically put
371:09 - thing three when i click add item
371:11 - this one can be a little bit tricky if
371:13 - you spend more than maybe five minutes
371:15 - or so without figuring it out you can
371:17 - just hit play again and i'm gonna show
371:19 - us how to do this but i do want you to
371:21 - pause and see if you can figure this one
371:22 - out
371:30 - another really tempting thing to do at
371:32 - this point is to say
371:34 - grieve things array dot push
371:37 - however again this is not correct
371:40 - this pre things array is still a
371:42 - reference to my existing state and using
371:45 - dot push on it is not a good idea
371:48 - because that would be modifying state
371:49 - directly not only that but dot push
371:52 - actually doesn't return the array that
371:55 - is modified it returns the new length of
371:57 - the array so this would be like
372:00 - replacing all of our state with a number
372:03 - which would just be three so i guess in
372:06 - two ways this really isn't going to work
372:08 - for us
372:08 - remember i need to return a new version
372:11 - of state and my state starts out as an
372:14 - array in fact my program expects things
372:17 - array to be an array because i'm using
372:19 - dot map on it so i need to make sure
372:21 - that when i'm setting a new array that i
372:24 - return
372:25 - a new array this is a new version of
372:28 - state
372:29 - fortunately with es6 there's a really
372:31 - easy way for me to spread in my existing
372:34 - array which i have access to with
372:36 - pre-things array which by itself would
372:40 - get me an array of everything that used
372:42 - to be in there so this is not yet
372:44 - updating it however i can very simply
372:46 - add a new item to the end of my array
372:49 - these are strings but i'm going to be
372:51 - using some javascript to determine the
372:53 - array length so i'll use some template
372:56 - strings here and i'll say thing space
372:59 - and then interpret some javascript by
373:02 - saying
373:03 - preview things array
373:04 - dot length and because that's the
373:07 - previous array and it's not zero indexed
373:10 - and i want this to say three i'm going
373:11 - to add one to it in other words my
373:13 - previous array was two items long and i
373:16 - want it to say thing space three so i'm
373:18 - adding a one at the end this is getting
373:20 - a little long so i'm going to put this
373:22 - on to the next line which means i then
373:25 - have to use a return
373:28 - and well let's just see if this works
373:29 - i'll hit save
373:31 - add item awesome look at that we've got
373:33 - things adding to our list with the
373:34 - correct numbers and everything if you're
373:36 - feeling hazy or forgetting the array
373:39 - spread operator and how this works
373:41 - that's totally okay although i would
373:43 - recommend that you go study up on the
373:45 - array spread operator because it's so
373:47 - useful you're going to find yourself
373:48 - using it all the time especially in
373:50 - react however this isn't the only way to
373:53 - do this there certainly are other ways
373:55 - to make a copy of our original array or
373:58 - to return a new array we could even use
374:00 - a for loop that loops over this array
374:03 - and pushes those items to a brand new
374:05 - array then we add our string here at the
374:08 - very end before we return that whole new
374:10 - thing obviously this is why i'm saying
374:12 - you should just go focus on learning the
374:14 - array spread operator because it's
374:16 - extremely useful okay i do have one big
374:19 - challenge for you
374:20 - okay it's time to put all the knowledge
374:22 - that you've learned lately together into
374:24 - this challenge in fact if you want an
374:27 - extra challenge you can delete this line
374:29 - where we set up things elements where
374:31 - we're mapping i figured because it's
374:33 - been a minute since we've looked at this
374:35 - i wouldn't necessarily make you do this
374:37 - but if you really want to challenge
374:38 - yourself you can delete line 13 here and
374:41 - try to do everything completely from
374:43 - scratch like i said i'll leave this here
374:45 - just in case that's a little too much to
374:46 - bite off at this time so see if you can
374:48 - build this all again from scratch let me
374:50 - refresh this so we start from a new spot
374:53 - of course this is broken because some of
374:54 - the values are missing pause the
374:56 - screencast and see if you can bring this
374:58 - back to a working state
375:07 - okay let's do this i'll use
375:10 - things array and set things array
375:14 - as the values i get back from
375:16 - react.ustate
375:18 - i'll initialize my values with thing one
375:21 - and thing two and i need to spell things
375:24 - right then we will use set things array
375:28 - using the previous array i could say
375:31 - previous things array or previous array
375:33 - maybe this time i'll be a little more
375:35 - generic and just say grieve state and
375:37 - this will return a new array that has
375:39 - all the items from preview state as well
375:42 - as a new item
375:44 - which says thing space
375:47 - and then the number of brief
375:49 - state.length plus one of course if i
375:51 - leave this on the same line i don't need
375:53 - to open curly braces and use the return
375:56 - keyword just in case this is bleeding a
375:58 - little bit long for anybody i am going
376:00 - to put it back that way and hopefully
376:03 - this didn't drive too many of you crazy
376:05 - you can see i refresh and everything
376:06 - comes back i also had taken this on
376:09 - click out
376:10 - sorry if that threw anybody for a loop
376:13 - i'm going to add it back in and say when
376:15 - the button is clicked i want you to run
376:16 - add item which will run the set things
376:19 - array function and do all the stuff that
376:22 - we just typed in there i'll hit save
376:25 - awesome we're working again i really
376:27 - hope that you attempted that challenge i
376:28 - know that might have been difficult but
376:30 - truthfully that's where the learning
376:32 - happens you won't be able to truly
376:34 - internalize these things that we're
376:35 - learning unless you put your hands on
376:37 - the keyboard and really challenge
376:39 - yourself in fact i would say that as you
376:41 - come to challenges in this course and
376:43 - really any course on scrimba if you
376:45 - don't immediately know the answer don't
376:47 - just hit play go to google ask the
376:49 - community go back to previous lessons in
376:52 - that course do whatever you can to try
376:54 - and figure it out on your own and then
376:56 - of course if you are completely stuck
376:58 - you can always hit play in the next cast
377:00 - we're going to see something similar but
377:02 - working with objects in state instead of
377:05 - arrays in state
377:09 - now let's see what it looks like to use
377:10 - an object in state here we have a simple
377:13 - contact card it's got a first name last
377:15 - name phone email and a property called
377:17 - is favorite to kick us off i want you to
377:20 - see if you can figure out how you might
377:22 - fill in some of these values below
377:24 - instead of using the hard-coded values
377:27 - using the properties from state of
377:29 - course they will look exactly the same
377:31 - because i just copied and pasted these
377:33 - values from the state up above but you
377:35 - can always test it by changing one of
377:37 - these values in state and seeing if it
377:38 - reflects on your card there pause the
377:41 - screencast and work on this challenge
377:49 - let's start with the name we have the
377:51 - first name and last name together inside
377:54 - the same h2 but they're separated in the
377:57 - state up here
377:58 - the simplest way to do that is simply to
378:00 - put the first name in its own set of
378:02 - curly braces put a space and then the
378:04 - last name in its own set of curly braces
378:07 - now because my state is an object
378:10 - i need to reference the entire contact
378:13 - and then use the dot syntax to access
378:15 - its properties
378:17 - so i will say contact dot first name
378:21 - and then the space which will be
378:23 - interpreted as an actual space in the
378:25 - markup followed by contact.lastname
378:29 - hit save nothing looks like it changes
378:31 - that's good if i change this to jane
378:34 - our contact changes great
378:37 - and then i can simply do the same thing
378:39 - for these other properties this is
378:42 - contact.phone and contact that email
378:48 - now i mentioned that we're going to
378:50 - ignore the is favorite property for now
378:52 - i have another challenge that i'm going
378:54 - to type out now
378:55 - you might notice in the images that we
378:57 - have two separate pngs one called star
379:00 - empty png and one called star filled png
379:04 - right now we're just using the star
379:05 - empty png but if this were filled
379:08 - and let me comment this out so it
379:10 - doesn't break our code you'll see that
379:12 - it fills in the star nicely as if this
379:14 - contact were a favorite of yours however
379:17 - following the declarative nature of
379:18 - react we want the is favorite property
379:21 - to be the determining factor as to which
379:24 - of those two images gets used so your
379:27 - challenge is to use a ternary right here
379:30 - in this line i'll uncomment this now to
379:32 - look at the contact.is favorite property
379:35 - and determine which of the following
379:37 - file names should be used based on the
379:40 - value of the is favorite property then
379:42 - you'll want to use that star icon value
379:45 - which will just be a string here to
379:47 - figure out what the source should be for
379:50 - the star image in fact i'll add that to
379:52 - our challenge
379:54 - okay best of luck pause the screencast
379:56 - work on this part of the challenge
380:05 - on line 21 i'll replace this comment and
380:07 - we'll simply look at contact dot is
380:10 - favorite i technically could equate this
380:12 - to true or false but because it's
380:14 - already a boolean i just need to say
380:16 - contact that is favorite if so
380:19 - i want to use the star filled png
380:23 - and otherwise i want to use the star
380:26 - empty png
380:27 - and now that i have a value for star
380:30 - icon i can simply replace whatever is
380:33 - here
380:34 - with
380:35 - star icon you'll notice i had put
380:37 - backticks here to begin with just to
380:39 - make things a little easier that's
380:41 - because i knew you were going to be
380:42 - putting in an interpolated value like
380:44 - that i'll go ahead and hit save
380:46 - everything looks the same but now if i
380:49 - change my is favorite from false to true
380:51 - in the hard-coded initial value
380:55 - we get a little filled star now that
380:57 - we've learned how to apply state that's
381:00 - in the form of an object to our actual
381:02 - markup in the next screencast let's
381:04 - learn about how we can update state when
381:06 - state is an object
381:11 - our goal is to be able to click the star
381:13 - icon and have it flip our is favorite
381:16 - value from true to false or false to
381:18 - true however currently our is favorite
381:21 - property is nested inside of this object
381:24 - when i call set contact i need to
381:26 - provide a new version of state to
381:28 - replace the old version however in our
381:31 - case i don't want to replace any of this
381:33 - other information i only want to change
381:35 - the is favorite value many people's
381:38 - first thought is to use set contact and
381:41 - here you'll see i already have set up a
381:43 - toggle favorite function which is called
381:45 - anytime the little star icon image is
381:48 - clicked
381:50 - right now it's just console logging
381:51 - toggle favorite a temptation is to use
381:54 - set contact look at the previous contact
381:57 - information
381:58 - and return and i guess for simplicity
382:01 - i'll put this on its own line we'll say
382:02 - return an object where the is favorite
382:06 - property is the opposite
382:09 - of the previous contacts is favorite
382:11 - property however there is a major
382:14 - problem with doing it this way i'm not
382:15 - going to hit refresh yet but i do want
382:17 - you to pause the screencast and see if
382:19 - you can figure out what mistake i have
382:22 - right here
382:29 - remember that in this callback function
382:31 - whatever i return
382:33 - from that function will become the new
382:36 - replacement for our contact state
382:38 - currently i have an object with five
382:41 - properties first name last name phone
382:42 - email and is favorite but what i'm
382:44 - replacing it with is an object that only
382:46 - has one property is favorite so if i hit
382:49 - save
382:51 - and then click our toggle favorite
382:53 - you'll see that all of our other
382:54 - information just disappears however it
382:56 - does look like our star is working i can
382:58 - click our star and it is correctly
383:00 - flipping back and forth but obviously
383:02 - this is a bug if you do happen to be
383:04 - coming to this course having had
383:06 - experience in class base react this
383:09 - might seem confusing to you if you've
383:11 - never worked with class base react you
383:13 - can ignore the next thing i'm about to
383:15 - say but in class base react when you use
383:18 - this dot set state it would
383:20 - automatically figure out how to combine
383:22 - your old object with the new property
383:25 - that you're trying to replace it with
383:27 - however using hooks with react.ustate
383:31 - no longer does this okay everybody can
383:33 - tune back in now the main point is that
383:35 - i need to make sure that i bring in all
383:38 - of the properties of my old object and
383:41 - then replace the one or two or however
383:43 - many properties you need to replace in
383:46 - what you're trying to accomplish a very
383:48 - simple way for me to do that is to
383:50 - spread in all of the properties of my
383:53 - old contact and in this case i have
383:56 - access to the old contact using preve
383:58 - contact so i'll bring in all of the
384:00 - properties and this by the way does
384:02 - include the is favorite property but
384:05 - then i will overwrite the is favorite
384:07 - property with a new value in effect it's
384:10 - like taking this whole thing copying it
384:14 - pasting it in
384:15 - just like this where we have our old
384:18 - first name old last name old phone old
384:20 - email the old is favorite and then we're
384:22 - saying actually i want a different is
384:24 - favorite believe it or not this is not a
384:27 - syntax error instead it just takes the
384:29 - second one that's declared or rather the
384:31 - last one that's declared and uses that
384:33 - as the actual value for our new object
384:36 - this is much more verbose than it needs
384:38 - to be so i will use my spread operator
384:40 - instead like i had before
384:42 - i'll hit save
384:43 - notice this is filled in because my
384:45 - value is true by default i should
384:47 - probably set that to false by default
384:49 - and then when i click it all of the
384:51 - other information stays the same except
384:53 - for the value of is favorite which is
384:56 - then redetermining which icon is going
385:00 - to be used based on that contact is
385:02 - favorite property
385:03 - i totally understand that this can be
385:05 - complex this was one of the more
385:07 - difficult things that i had to grasp
385:09 - when i was first learning how to do
385:11 - state and react so to see if you were
385:13 - paying attention this is your time to
385:15 - shine
385:16 - your challenge is to simply rebuild what
385:18 - we just had again if you get stuck and
385:21 - you don't remember the syntax don't just
385:23 - hit play and watch me do it open a new
385:25 - tab do a quick query on google see if
385:28 - you can find a resource that will help
385:29 - you figure this out or even go back
385:31 - earlier in the screencast and see how i
385:34 - did it so that you can then come back to
385:36 - this point and type it out yourself so
385:38 - pause the screencast and see if you can
385:40 - rebuild our toggle favorite function
385:49 - okay let's do it we're calling set
385:52 - contact
385:53 - we do care about the previous value of
385:55 - our state in order to help us determine
385:57 - the new one not only because we need to
386:00 - know what the value of is favorite was
386:02 - but also because we want to make sure we
386:04 - maintain all of the other properties
386:07 - so in that case i'll use my callback
386:09 - function
386:10 - i'll let it pass preve contact to it and
386:13 - i will use that to
386:15 - return
386:16 - a new object and here's actually a quick
386:19 - aside it might be tempting to say well i
386:22 - just want to use the implicit return and
386:24 - say take this function return an object
386:27 - however these curly braces are being
386:29 - interpreted as the opening part of the
386:31 - function body if i do want to literally
386:34 - return an object i need to surround my
386:37 - object with another set of parentheses
386:40 - this looks a little bit crazy maybe just
386:42 - to show you that it works i will leave
386:44 - it here and for brevity i suppose so
386:46 - given our previous contact i want to
386:48 - return an object that has all of the
386:51 - values of our previous contact
386:54 - but changes the is favorite value to the
386:58 - opposite of whatever it currently is
387:00 - i'll hit save
387:02 - it's empty by default because is
387:04 - favorite is false
387:06 - and i can toggle that on and off
387:09 - i hope that challenge went well if you
387:10 - felt like it was a struggle then of
387:12 - course as always you can go back and try
387:15 - it again as i've always said the easiest
387:17 - way to learn something new is to do it
387:20 - the hard way and i imagine some of you
387:22 - out there when you saw me delete all of
387:24 - the code inside of here maybe had a
387:26 - little panic moment and he thought oh no
387:28 - he's going to make me do this by myself
387:30 - but your growth in understanding of
387:32 - react will only happen as you type this
387:34 - stuff out yourself watching me do it
387:37 - alone is not going to help you learn it
387:39 - so as always once you feel comfortable
387:41 - enough that you could write this out
387:42 - again all by yourself that means that
387:44 - we're ready to move forward
387:48 - when we last left the meme generator we
387:50 - were getting a weird unknown error being
387:52 - thrown from react i looked into it and i
387:55 - realized that it was because we were
387:56 - initializing state as an empty string
387:58 - and react was not taking too kindly to
388:00 - having our image source set as an empty
388:03 - string so i just went and grabbed a
388:05 - placeholder image for now and that seems
388:08 - to have gotten rid of the error
388:10 - just thought i'd give you a quick update
388:11 - on that error our challenge in this
388:13 - screencast is to update our state so
388:15 - that we can be well prepared as we learn
388:18 - more to save that state and ultimately
388:21 - finish our meme generator so your
388:23 - challenge is to create an object in
388:24 - state we'll call it meme and it should
388:27 - have a property for the top text bottom
388:30 - text and the random image that we choose
388:32 - you can default the top text and bottom
388:34 - text as empty strings and i would
388:37 - default the random image to the string
388:39 - that i have below so that we don't get
388:40 - that same error we had before
388:42 - next i want you to create a separate
388:45 - state variable called all meme images
388:47 - this all meme images variable is going
388:49 - to hold an array of all of our memes
388:52 - data which for now you can default to
388:54 - the memes data array that we imported up
388:57 - here
388:58 - then lastly you'll want to update the
389:00 - rest of our code to use these new state
389:03 - variables so that in the end we have a
389:05 - working app the way that it's currently
389:07 - working
389:08 - so pause the screencast and work on this
389:10 - challenge
389:18 - let's comment out our old state here
389:20 - just so we don't get confused and we'll
389:22 - create some new state with meme and set
389:24 - meme
389:25 - equal to react.use state
389:28 - and this one's going to be an object so
389:30 - i'll put my curly braces and we'll put
389:32 - in our three properties we have top text
389:36 - which is an empty string
389:38 - bottom text also an empty string
389:41 - and random image which will be
389:44 - the same as what we had before in our
389:47 - old meme image state variable
389:50 - then we need another state variable so
389:52 - we'll create a new one we'll say this is
389:54 - all meme images and we can say set all
389:57 - meme images as our function here
390:00 - react.use state
390:02 - and the initial value is going to be our
390:04 - memes data array that we imported above
390:07 - with those set up we really just need to
390:09 - update the rest of our code
390:11 - so anywhere i was directly accessing
390:13 - memes data i'm now going to
390:16 - use all meme images
390:18 - and then we have a bit of a gotcha here
390:20 - before when we were just saving the meme
390:22 - image as a string we were able to just
390:24 - completely overwrite whatever the old
390:26 - string was and replace it with the new
390:28 - url however now the random image which
390:31 - represents our new version of meme image
390:34 - is nested inside of an object so first
390:37 - of all we need to use set meme instead
390:39 - of set meme image
390:41 - and instead of what we had before we do
390:44 - need to look at what the previous meme
390:46 - was in order to determine the new one
390:48 - because we have properties like top text
390:50 - and bottom text that we don't want to
390:52 - lose i think i'm going to save this as
390:55 - its own variable so i'll say url equals
390:59 - the memes array at the index of
391:01 - randomnumber.url just to make my life a
391:03 - little bit easier and now i'm going to
391:06 - access the previous meme and return an
391:08 - object i'll surround it in parentheses
391:10 - so i can use my implicit return we'll
391:13 - pull in all of the properties of the
391:15 - previous meme and then we will alter the
391:18 - random image property
391:20 - to
391:21 - be our url let's scroll down and see
391:25 - down here we have on click get meme
391:27 - image that's still going to be the same
391:29 - because that's our self-defined function
391:32 - however here instead of meme image
391:34 - we want to say meme dot random image
391:38 - and let's cross our fingers we'll hit
391:40 - refresh
391:42 - i can click get a new meme image and
391:44 - awesome we're working just the way we
391:45 - were before obviously our top text and
391:47 - our bottom text is not yet doing
391:49 - anything but we're first going to have
391:51 - to learn about forms and inputs and how
391:52 - to save state which will be happening
391:54 - later down the road
391:56 - all right awesome work let's keep moving
391:58 - forward
392:01 - at this point we've learned to use a
392:03 - number of really cool tools and react
392:05 - like state and props now we get to start
392:08 - using those tools in creative ways and
392:09 - putting them together
392:11 - your challenge here is honestly pretty
392:13 - contrived i can't think of a reason why
392:15 - you would actually want to do this but
392:17 - for the sake of practice i want you to
392:20 - create a new component named count which
392:22 - will essentially replace these three
392:24 - lines of code in other words you'll
392:26 - create a new component name count it
392:28 - will render this div with this h1 and in
392:32 - an effort to practice props we're going
392:33 - to pass that new count component a prop
392:36 - that we'll just generically call number
392:39 - the value of that prop number should be
392:41 - the value of our current count i promise
392:44 - this isn't just busy work we are
392:45 - building toward a point pause the
392:47 - screencast and work on this challenge
392:56 - okay i'm gonna do this working backwards
392:58 - so my div here i'm going to cut this but
393:00 - keep it in my clipboard so i can paste
393:03 - it later and i'll render a component
393:06 - called count which i obviously haven't
393:08 - yet created
393:09 - we said we're going to pass to it a
393:11 - number prop
393:12 - and i'm going to set that equal to the
393:14 - current value of my count up there
393:18 - now i need to import it if i'm going to
393:20 - use it here obviously it still doesn't
393:22 - exist but we'll just pretend it does so
393:23 - i'm going to import count
393:25 - from a file called count
393:28 - and then i need to create that file and
393:30 - work over there so i'm going to create
393:31 - count.js
393:35 - import react from
393:37 - react
393:38 - and i'll just spin up my basic component
393:41 - here
393:42 - called count and i need to make sure
393:44 - that this is receiving props because i'm
393:46 - going to use that number prop
393:48 - i'll have it return and i'm just going
393:50 - to paste that div that i had before
393:53 - okay and now it doesn't have a count
393:55 - variable anywhere in here remember
393:57 - before this was referencing the state
394:00 - value of count
394:01 - but now i'm receiving it through prop so
394:03 - i can say props dot and it's not
394:05 - props.count because the prop we passed
394:07 - to it was called number props that
394:09 - number
394:10 - i'll hit refresh and you can see
394:12 - everything is working exactly the way it
394:14 - was before now as i mentioned this is
394:16 - pretty contrived i can't imagine why you
394:18 - would care to put a count component in
394:21 - its own component that just displays a
394:23 - number especially when it's only three
394:25 - lines of code unless for some reason you
394:27 - are going to be reusing this component
394:29 - in different contexts around your
394:32 - application
394:33 - let me clean up this challenge and then
394:35 - we'll talk about why i had you do this
394:37 - as i've mentioned we've learned how to
394:39 - use props for a component to be able to
394:41 - receive values like we've done here
394:44 - and we've learned state and how to have
394:47 - a component declare its own values that
394:50 - are intended to change and update the
394:53 - user interface when those changes happen
394:55 - and now all we're doing is we're
394:56 - combining those two concepts we are
394:59 - still initiating state inside of our app
395:02 - component but then we're passing that
395:04 - state value down to a separate component
395:08 - called count and it's receiving that
395:10 - value as props
395:12 - now we're going to see something cool
395:13 - that react does
395:15 - let me inside of my app component
395:18 - console log
395:19 - app component
395:21 - rendered
395:22 - anytime react creates an instance of our
395:24 - app component which is happening here in
395:26 - index.js
395:28 - it will run this function and part of
395:30 - that function will console.log app
395:32 - component rendered then we'll go ahead
395:35 - and do the exact same thing in the count
395:38 - component
395:39 - and we'll change this to
395:41 - count component rendered
395:43 - now before i hit refresh as a reminder
395:45 - the word rendered simply means that it
395:48 - placed the elements that react knew it
395:51 - needed to place on the screen so when i
395:54 - say app component rendered it means that
395:56 - it took the markup of our app component
395:58 - and it painted it to the screen or it
396:01 - placed it on the screen it created the
396:02 - dom elements and the styles that it
396:04 - needed for it to display correctly on
396:06 - the screen and you can see there's a
396:08 - sort of cascading effect here
396:10 - over in index.js we render an app
396:13 - component
396:14 - when we go to app we see that it renders
396:17 - a count component and it's doing that
396:19 - down the line so it will first say app
396:21 - component rendered i'll open the console
396:23 - and hit refresh
396:25 - we see app component rendered and count
396:27 - component rendered now there's a really
396:29 - cool thing that react does for us and
396:31 - that is whenever state changes it will
396:34 - re-render the component where the state
396:37 - exists and any child components that may
396:40 - rely on state to be working correctly
396:43 - and if you think about it that makes
396:44 - sense if i'm going to change my state
396:47 - from 0 to 1 i'm going to need my
396:50 - component here to re-render which will
396:53 - then cause this count component to
396:55 - re-render and it will pass the new value
396:58 - of count and that way it can very
397:00 - quickly and seamlessly update what i see
397:02 - on the page just by re-rendering those
397:05 - components
397:06 - we're not going to dive deep at this
397:08 - point into understanding exactly how
397:11 - react is re-rendering which components
397:14 - it's re-rendering and optimizing which
397:16 - components it's re-rendering that's a
397:18 - topic for a more advanced course but for
397:21 - now it's a good experiment to have these
397:24 - console logs here and see that every
397:26 - single time we change our state it's
397:28 - re-rendering the component in which the
397:30 - state is declared and any children
397:33 - components like our count component here
397:35 - that may or may not depend on the state
397:37 - value for count
397:40 - awesome now we've seen an example of a
397:43 - child component receiving a state value
397:46 - via props now we'll look at how a child
397:48 - component might be given access to make
397:51 - changes to its parents state
397:56 - okay here we are back at our little
397:57 - contact card with the favorite icon your
398:00 - challenge to start us off is to move the
398:03 - little star image just this one little
398:05 - image element into its own component and
398:09 - maybe we'll just call it star that'll be
398:11 - the name of the component
398:13 - and it should receive a prop called is
398:15 - filled that the star component will use
398:18 - to determine whether the icon should
398:20 - display
398:21 - the filled png or the empty png
398:25 - then inside of this component here
398:27 - you'll need to import and render the new
398:30 - star component
398:32 - and make sure to pass the correct value
398:34 - of is favorite our contact dot is
398:37 - favorite to that is filled prop
398:40 - at this point it's not going to work the
398:42 - way it was before where we could click
398:44 - it and flip it on and off for now in
398:46 - order to test it you can simply change
398:48 - this value from false to true and it
398:50 - should if it's working correctly display
398:53 - the filled in star when you change that
398:55 - to true
398:56 - there's a few different moving pieces
398:57 - here so this is a slightly more
398:58 - difficult challenge than the ones we've
399:00 - done up until now but i know you'll be
399:01 - able to do it pause the screencast now
399:03 - and start working on this challenge
399:12 - once again i think i'll work backwards
399:14 - i'm going to
399:15 - cut this image out
399:18 - and i will render a star component which
399:21 - i have not yet created i'll give it this
399:23 - is filled prop
399:25 - and it will be the value of contact dot
399:28 - is favorite let's import this and then
399:31 - we'll go and create it so i'll import
399:33 - star from
399:35 - dot slash star
399:38 - and then i'll create that file star.js
399:44 - okay and in this case i need to make
399:45 - sure that i'm receiving props because i
399:47 - will need them i'm going to return and
399:50 - then this image element
399:52 - i'm going to get to this on click in
399:54 - just a second but for now let's figure
399:56 - out our star icon i'm going to just set
399:59 - star icon equal to and then actually i'm
400:02 - just going to go take
400:04 - exactly what i had here and then make a
400:06 - slight change
400:09 - okay now we don't have access to our
400:11 - contact state because we're not passing
400:13 - it down however we do have a replacement
400:16 - is filled
400:18 - and that's part of props so it's props
400:20 - that is filled
400:21 - and then this will determine which
400:24 - image should be used let me remove my on
400:27 - click so i don't get an error we'll hit
400:29 - refresh and see if we missed anything
400:31 - okay awesome now my star is empty and
400:34 - that's because this value is false let's
400:36 - test this by changing it to true
400:39 - and the stars failed awesome and at this
400:41 - point i can remove this line because i'm
400:44 - not needing that anymore and at this
400:46 - point that leads us to the topic of this
400:48 - screencast and that is how do i make it
400:50 - so that i can change this value clicking
400:52 - it is not doing anything
400:54 - the conundrum that we have is that we
400:56 - have a child component that's receiving
400:59 - the value of his favorite through props
401:01 - but it is not receiving the ability to
401:03 - change that state so think for a second
401:06 - how can i give my child component the
401:09 - ability to make changes to the state
401:12 - that lives inside the parent component
401:15 - which is app
401:17 - in fact i want you to pause and try to
401:18 - think through a solution to this you
401:20 - don't actually have to type it and try
401:22 - it out but just try to think how could i
401:24 - give my child component the ability to
401:27 - make changes to the state that lives in
401:29 - the parent
401:37 - one thing that can be tricky when you're
401:38 - first learning react is the thought that
401:40 - you can just add a click event listener
401:42 - on your star component so what if i just
401:45 - said on click equals toggle favorite let
401:48 - me hit refresh and click this and you'll
401:51 - see well it's not quite working why do
401:53 - you think that this isn't enough for
401:55 - this to work
402:01 - remember when we have a component that
402:04 - we created a custom component that we
402:06 - created all of the properties that we
402:08 - pass it are custom properties so simply
402:11 - putting on click here doesn't magically
402:14 - register it as an event listener the on
402:17 - click attribute needs to exist on native
402:20 - dom elements like these ones that begin
402:22 - with lowercase letters that's because
402:24 - these are what will actually get created
402:26 - into real dom elements by react however
402:30 - star with a capital s is not a real dom
402:32 - element instead what's happening is
402:35 - react is looking at the star component
402:38 - and it's rendering this image
402:40 - this image has the ability to receive
402:43 - an on click event listener so what i
402:46 - could do is still pass on click here but
402:50 - realize that on click is just a custom
402:52 - prop that happens to be called the same
402:54 - name as the event listener in fact
402:57 - oftentimes this will be changed to
402:59 - handle click just to make it very
403:01 - obvious that it's not a native event
403:03 - listener and then over in our star
403:06 - component i can add a real on click
403:09 - event listener and say the value of this
403:11 - on click will be the function that comes
403:13 - from props dot handle click in this case
403:17 - my app component is passing this toggle
403:20 - favorite function to a child component
403:23 - and allowing that child component to run
403:25 - it whenever a certain event like the
403:28 - click event happens however it's
403:30 - important to note that the context in
403:32 - which the toggle favorite function
403:34 - exists is still here in the parent which
403:36 - means that it can change the state that
403:40 - lives inside the parent let's hit
403:42 - refresh we'll click our star and we see
403:44 - that we're back to working the way we
403:46 - thought
403:47 - so as a recap we created our toggle
403:49 - favorite function
403:50 - we passed it to our custom component in
403:53 - a custom prop called handleclick and
403:55 - then over in the star component it's
403:57 - receiving props and it's registering a
404:00 - real event listener on click whose
404:03 - functional value is the function that we
404:05 - received through props dot handle click
404:08 - the ability to pass state setter
404:11 - functions like this one down to children
404:13 - components is especially crucial in
404:15 - react and that's due to the fact that
404:17 - the way that reacts hierarchy is set up
404:20 - when it passes data and this is what
404:22 - we're going to talk about in the next
404:24 - lesson
404:27 - at this point i think it's worth taking
404:28 - a high level look at how data is passed
404:31 - from one component to another in react
404:33 - let's imagine we have a fairly simple
404:35 - app which has the following components
404:37 - just represented by rectangles for now
404:39 - in this tree this top component
404:41 - represents a top level component for
404:44 - example our app component in a system
404:46 - set up like this
404:48 - and the lines indicate that this top
404:50 - component is rendering these other
404:52 - components
404:54 - in some cases that component may just
404:56 - render regular dom elements like divs
404:58 - and h1s or it may render additional
405:02 - custom components like we see in this
405:04 - box where it's rendering two other
405:05 - components i didn't put any names on
405:08 - here because that's not that terribly
405:10 - important the point is that there is a
405:12 - parent child relationship between these
405:15 - components let's imagine on one of these
405:17 - bottom level components we initialize
405:19 - some state
405:20 - and then we find that a sibling
405:22 - component in other words a component
405:24 - that is also rendered by the same parent
405:27 - is in need of some of the data that
405:29 - lives in the other components state well
405:32 - what exactly can we do then think for a
405:34 - second is there a way for us to pass
405:36 - that state to a sibling component
405:42 - it turns out that no this is not
405:44 - possible and that's because if you look
405:46 - in the file of a component that has a
405:49 - sibling component it has no reference or
405:51 - knowledge about a sibling component on
405:54 - its own if we look in our code here we
405:56 - have an app component that is rendering
405:58 - a header component and a body component
406:01 - but if we were to go into let's say the
406:03 - header component we see that i've
406:05 - initialized some state here i can open
406:08 - up this preview so you see what we're
406:09 - working with
406:10 - and it's using that state but then if a
406:13 - sibling component like the body needs
406:15 - access to that state well the header has
406:18 - no idea that body even exists only its
406:21 - immediate parent app is the component
406:24 - that knows that both of these components
406:26 - exist
406:28 - so think for a second what is it that we
406:29 - need to do if we're facing a situation
406:32 - like this
406:39 - well what if we took our state in this
406:42 - child component and we raised it up into
406:44 - the parent component now that it's up in
406:46 - the parent component do we have a way in
406:49 - react to pass data from this parent
406:51 - component to the child components
406:56 - yes we do that happens through props
406:59 - so now the parent component is in charge
407:01 - of the state it passes the necessary
407:04 - state down to the child components that
407:06 - require it and they can simply consume
407:08 - the state
407:09 - if that state were ever to change react
407:12 - will update this component where the
407:14 - state changed and it will also update
407:16 - any children components as well and so
407:18 - therefore if that state changes that's
407:20 - being passed through props the child
407:22 - component can update as well
407:24 - as your application gets more and more
407:26 - complex you will find yourself having
407:29 - another component that sometimes needs
407:31 - access to that state as well and just
407:33 - like before there's no way for us to
407:35 - pass the state or any kind of data from
407:38 - one sibling component to another
407:40 - component but it's also important to
407:42 - note that there also is no way to pass
407:44 - data upwards in react
407:46 - this child component has no idea that
407:49 - this other i guess you could say uncle
407:51 - or ant component exists and therefore
407:54 - there's no way to pass data that way
407:55 - either so this brings us back to the
407:58 - same solution we had before we simply
408:00 - raise state up a level and we pass more
408:02 - props downward now over time this can
408:05 - get pretty tedious especially if your
408:07 - state ends up raising up multiple levels
408:10 - above the component that needs it in
408:12 - which case react does offer a solution
408:14 - to this called context there's also
408:17 - third-party state management systems
408:18 - like redux that can help solve this
408:20 - problem however both of those are beyond
408:23 - the scope of this course and we are just
408:25 - going to be sticking with regular state
408:27 - and props for now so that leads me to a
408:30 - challenge i want you to take the state
408:32 - that currently exists only within the
408:34 - header and raise it up a level
408:37 - into the app component and then pass it
408:40 - back down through props to both the
408:42 - header and the body then in the body now
408:45 - that it's receiving the state from above
408:47 - replace this underline with the state
408:50 - which is the name of the user
408:52 - pause the screencast now and work on
408:54 - this challenge
409:02 - to raise the state up we'll simply take
409:05 - this line where we're initializing our
409:07 - state
409:08 - and we'll move it into our app component
409:11 - and then i will pass those props down in
409:14 - this case it's a very simple state of
409:16 - just the string joe so we will create a
409:19 - prop
409:20 - maybe let's just call it user
409:22 - and we'll set that equal to our user
409:25 - state variable here
409:27 - then in both the body and the header
409:30 - we'll need to accept props
409:32 - and we'll display props dot user
409:35 - and in the header
409:37 - props
409:40 - props dot user
409:43 - clean up this challenge
409:45 - hit refresh
409:46 - and there we go now if i go to my app
409:49 - and i initialize my state differently
409:51 - say bob
409:52 - and good it updates in both places
409:55 - understanding that this is the way data
409:57 - flows in react can be really crucial in
410:00 - helping you architect your application
410:02 - in a way that you can share state
410:04 - amongst only the components that need it
410:07 - and in fact that's an important
410:08 - distinction to make at this point it
410:10 - wouldn't be a great idea to initialize
410:12 - state way up near the top of your
410:14 - component if you don't have components
410:17 - along the entire tree that need it now
410:20 - i'm not saying that every component
410:21 - needs to have access to that state for
410:23 - it to work but if this component down
410:25 - here is the only one that needs state
410:27 - there's no reason for me to put state in
410:29 - its parent or its grandparent and then
410:31 - pass stuff down through props as a rule
410:34 - of thumb keep state as local as you can
410:37 - or in other words keep it as closely
410:38 - tied to the component or components that
410:41 - need it as you possibly can with this
410:43 - under our belts i think it's about time
410:45 - for us to jump in and do a round of
410:47 - challenges to really exercise what
410:48 - you've learned up until this point and
410:50 - we will start that in the next
410:51 - screencast
410:55 - this is the beginning of a series of
410:56 - small challenges to really reinforce
410:58 - some of the past topics that we've been
411:00 - learning about the first thing i want
411:02 - you to do is to take a look at boxes.js
411:05 - you'll see i created an array of objects
411:07 - which have two properties id and on
411:11 - and your first challenge is to
411:13 - initialize some state inside of our app
411:15 - component with the default value being
411:18 - this boxes array and then i want you to
411:20 - map over that state array and display
411:22 - each one as just an empty square on the
411:25 - screen with a black border and a
411:27 - transparent background color i don't
411:29 - think you necessarily have to set it as
411:31 - transparent i think it'll just be
411:33 - transparent by default for now don't
411:35 - worry about using the on property at all
411:37 - although you probably will want to use
411:39 - the id property and i'll let you figure
411:42 - out why
411:43 - if you're using something like a div
411:44 - don't forget to set a height and a width
411:47 - in the style on it ultimately the goal
411:49 - is to make it so that if the box is set
411:52 - to on or on as true then the box will be
411:55 - filled in with a color and in the end
411:57 - we'll make it so that clicking the box
411:59 - will flip its on value from true to
412:01 - false or false to true
412:03 - but for now let's just get some boxes
412:05 - displaying on the page pause the
412:07 - screencast and work on this first part
412:09 - of the challenge
412:17 - we'll start by initializing some state
412:19 - so i'll say
412:21 - i don't know maybe for now we'll just
412:22 - call them squares and by convention
412:25 - we'll say set squares
412:27 - that's going to be from react.usestate
412:30 - and we'll pull in the boxes as the
412:33 - initial value
412:35 - then we need to map over the boxes i'll
412:37 - save my array of elements i'll maybe
412:41 - call it square elements
412:43 - and that's going to be squares.map for
412:46 - each square that we're looking at i want
412:49 - to return a div
412:52 - and notice here that i'm using
412:53 - parentheses instead of curly braces
412:56 - that's simply allowing me to use the
412:58 - implicit return to return the element
413:01 - and i'm just moving it onto its own line
413:03 - so it doesn't go too far to the left and
413:05 - right
413:06 - we'll give this div a class name
413:09 - let's call it box
413:11 - and actually this is a class name so it
413:12 - can just be the string box i also know
413:15 - because i'm mapping that i'm going to
413:16 - run into that issue where i need to
413:18 - provide a key
413:20 - in this case i can use the id property
413:22 - that's coming from each of these objects
413:25 - let's display our square elements and
413:27 - then we'll go into the style so that it
413:29 - will actually show up or rather i should
413:31 - say let's render our square elements i
413:33 - don't think they are going to look like
413:35 - anything on the screen yet it's just
413:36 - empty over in our style we'll set a
413:39 - style for box
413:41 - and we'll give it a height maybe we'll
413:43 - do 100 pixels and a width of 100 pixels
413:47 - we'll give it a border
413:49 - that's black and then maybe just so we
413:51 - can see everything i'll put these into a
413:53 - really simple grid just so that i can
413:56 - put them side by side a little better
413:58 - actually i might not even bother with
413:59 - that let me give these a display of
414:02 - inline block
414:04 - and i'll just put a little bit of margin
414:06 - right on them
414:08 - honestly this is going to be good enough
414:09 - for right now
414:11 - and awesome okay
414:13 - the main things that i wanted you to
414:14 - take away were to practice setting state
414:17 - or initializing some state and also
414:20 - practicing the dot map method to create
414:23 - an array of elements that we can display
414:25 - on the page
414:26 - as well as reminding you about this key
414:28 - property if i take this out i'm going to
414:30 - get that warning that react always gives
414:32 - if you use a dot map to create elements
414:35 - but forget to add a key prop
414:37 - so i will put that back in awesome work
414:41 - on the next cast let's do the next part
414:43 - of this challenge
414:46 - before we can do the next challenge we
414:48 - need to learn about the style prop you
414:50 - might be familiar with the concept that
414:52 - in html i can add an attribute called
414:55 - style and in here i can insert css code
415:00 - for example i could give my div with the
415:02 - id of root or actually you know what
415:03 - let's do this on the body i could add a
415:05 - style and say the background
415:09 - color is black
415:11 - hit refresh and sure enough my entire
415:13 - background color becomes black just like
415:16 - i can do this in html i can do the exact
415:18 - same thing in react
415:20 - however because it's react and it's
415:23 - javascript i can change the style
415:25 - dynamically depending on for example the
415:28 - value of our state or the value of
415:31 - incoming props on a component let me
415:33 - refresh this so we get our boxes back
415:36 - and actually i think i might just add a
415:38 - tiny bit of border radius to those boxes
415:41 - okay to add dynamic style i can add a
415:44 - style prop to my div and in react i'm
415:48 - not going to put a string the same way
415:50 - we did in html
415:52 - instead i'm going to provide an object
415:55 - now here's something that really
415:56 - confused me the first few times i saw it
415:59 - this set of curly braces does not
416:00 - represent an object it simply represents
416:03 - me entering into javascript
416:07 - outside of jsx or rather it allows me to
416:10 - put javascript inside of my jsx as we've
416:13 - learned before since i need to represent
416:16 - my style as an object i'm going to put a
416:18 - second set of curly braces this inner
416:21 - set of curly braces represents an object
416:23 - a javascript object and this first set
416:26 - of curly braces or the outside set of
416:28 - curly braces represents me going into
416:30 - javascript from jsx
416:33 - oftentimes to avoid any confusion what
416:35 - i'll do is i will not define that object
416:37 - directly inside of my markup but instead
416:40 - i will create a separate variable maybe
416:42 - called styles and set that equal to an
416:45 - object this makes it a lot more clear
416:47 - and i can just put styles directly
416:50 - inside of my markup here one thing to
416:52 - know about these styles is that they
416:54 - need to be camel cased so if i'm
416:57 - changing the background color i can't
416:59 - say background dash color because this
417:02 - is not a valid key name in a javascript
417:04 - object not only that but when i'm
417:07 - modifying the properties of a dom
417:09 - element you might remember that i could
417:11 - do something like document.getelement
417:14 - we'll say some kind of id
417:17 - and i can say dot style
417:19 - dot
417:19 - background color with a camelcase
417:22 - property name and set that equal to
417:24 - something essentially that's exactly
417:26 - what we're doing here we are setting the
417:28 - style attribute of our dom element to be
417:32 - an object hence i can use the dot syntax
417:35 - here
417:36 - and then i'm using the background color
417:38 - css property but of course in the camel
417:41 - version for javascript then because this
417:44 - is an object i'm not going to use the
417:45 - equal sign i'm going to use the colon to
417:47 - give my key a value and i don't know
417:50 - let's set it to black for now let me get
417:53 - rid of this equals so that actually let
417:55 - me get rid of that whole line since i
417:56 - don't want to be doing manual dom
417:58 - javascript here oh cool look i refreshed
418:01 - my styles which include a background
418:03 - color of black are now being applied as
418:06 - the style of every square that i'm
418:09 - rendering or every div that i'm
418:11 - rendering
418:12 - so why is this beneficial over just
418:14 - using css well because i'm using
418:16 - javascript i don't necessarily have to
418:19 - have a hard-coded black value here let's
418:21 - suppose for a second that my app
418:23 - component is going to receive a prop
418:26 - that's called dark mode
418:28 - in fact let's go over to index.js and we
418:31 - will say that the app component is
418:33 - receiving a prop called dark mode and
418:36 - let's set it to true for now over in my
418:39 - app i'm accepting props here and i will
418:43 - have a prop called props.dark mode and
418:46 - let's say that if my props dark mode is
418:49 - true i want it to be black and if it's
418:52 - false i want it to be i don't know
418:55 - something light well this is something i
418:57 - can use a ternary for and maybe i should
418:59 - be more specific this is something that
419:02 - you can use a ternary for
419:04 - using your knowledge of ternaries make
419:06 - it so that if props.dark mode is true it
419:10 - will set the background color to this
419:12 - hex value here
419:14 - and if it's false it will set it to this
419:16 - hex value here
419:18 - one important thing to note is that
419:19 - these values need to be strings because
419:22 - we're in javascript we're not in css
419:25 - pause now and work on this challenge
419:34 - let's take props.dark mode
419:37 - and we will put it here and i'll say if
419:40 - that's true then i'm going to use this
419:43 - string
419:44 - and if it's false i'm going to use this
419:47 - string
419:49 - and it looks like i might have deleted
419:51 - my curly brace there okay awesome now we
419:53 - can test this by simply changing my
419:57 - dark mode value from true to false
420:00 - and awesome look at that it worked great
420:03 - this can be a really fun one to play
420:04 - around with if you'd like you can pause
420:07 - and just play around with some of the
420:08 - other properties that we can change in
420:10 - the styles or you could try a little
420:12 - challenge of your own to see if the
420:15 - number of squares in this array is even
420:17 - then make them all one color or if it's
420:20 - odd make them all another color really
420:22 - your imagination is the limit here when
420:24 - you're ready we will move on to part two
420:27 - of our original challenge
420:31 - it's time for part two of this challenge
420:33 - i want you to move our div here into a
420:37 - separate component called box and then
420:39 - when you're mapping over our squares you
420:41 - will render that box component that box
420:44 - component should receive a prop called
420:47 - on
420:47 - and it will be the value of this square
420:51 - dot on from our original boxes.js each
420:54 - one of them has an on property and that
420:57 - value is what you're going to pass to
420:59 - your new box component then inside of
421:02 - that box component i want you to create
421:04 - a dynamic style like we did in the last
421:06 - screencast to determine the background
421:08 - color of the box if the box is on then
421:11 - you should set the background color to
421:13 - this hex value and if it's off you can
421:16 - just set it to the string none pause the
421:18 - screencast and work on this challenge
421:28 - let me create a new file called box js
421:32 - i'll set this up like normal
421:35 - i know that this component will be
421:37 - receiving
421:38 - props and i'm just going to copy this
421:42 - div
421:44 - and
421:44 - have that get returned
421:46 - now my key is going to be broken and
421:49 - actually i'm going to pass this key into
421:52 - the box component so let's go ahead
421:55 - and render our box component
421:58 - which will be self closing
422:01 - this class name is already handled on
422:03 - the div that box is rendering
422:06 - however i will keep the key right here
422:09 - the next part says to pass it a prop
422:11 - called on so i'll say on equals and then
422:14 - the value will be square dot on again
422:16 - each square here represents one of the
422:20 - objects in my array and that has a
422:22 - property called on
422:24 - let's just make sure that everything is
422:26 - working so far in my box component i
422:29 - will console.log props dot on
422:33 - and because i have six instances i
422:35 - should get six
422:37 - values here oh and of course i did not
422:41 - import my box component so i need to
422:44 - import box from box
422:47 - okay let's try that again awesome okay
422:49 - so i get my six values true false true
422:51 - true false false and that's matching
422:53 - perfectly with what i see in my data
422:55 - here
422:57 - then the last part of this challenge is
422:59 - simply to make use of props.on to
423:01 - determine what the hex value or the
423:04 - background color should actually be
423:06 - so using dynamic styles i will create a
423:09 - variable called styles
423:12 - and that's going to be an object where
423:13 - the background color
423:16 - is going to look at props dot on and if
423:18 - it's true it will be this dark color
423:22 - and if it's false it will be none
423:26 - then i can simply add a style prop
423:28 - notice that my variable is called styles
423:31 - you really can call this whatever you
423:33 - want however this attribute or this
423:36 - property needs to be style exactly that
423:38 - way
423:39 - so i'll set that equal to the object
423:41 - that i created above and i think i
423:43 - should see this one is dark it was true
423:46 - false true true false false so this one
423:48 - should be dark this one and this one
423:50 - should be dark and the rest should be
423:51 - clear
423:53 - and that's exactly what we get next
423:55 - we're approaching probably the most
423:56 - challenging part and that is where
423:58 - clicking the box will actually flip the
424:00 - on value from true to false or false to
424:02 - true i'll give you some hand holding in
424:04 - that challenge but honestly it's going
424:06 - to be a pretty fun one so that's what we
424:07 - will work on in the next lesson
424:11 - in the next two challenges we are
424:13 - actually going to be starting to dip our
424:15 - toes into some intermediate react topics
424:17 - here the concept of changing state is
424:19 - what we have been practicing this whole
424:21 - time however we're going to see two
424:23 - different ways that we could structure
424:25 - this project and talk about which one is
424:27 - going to be the better of the two i put
424:30 - together a little diagram to make this a
424:31 - little simpler to understand right now
424:33 - we have an app component and this app
424:36 - component is keeping track of an array
424:38 - of data
424:39 - we're then using that array to create
424:41 - box components for every item in that
424:43 - array and passing to those box
424:46 - components a prop called on which will
424:48 - have the value either true or false
424:50 - currently those box components are then
424:52 - taking this incoming prop and
424:54 - determining what the background color
424:56 - should be however at this point in time
424:58 - they have no way to modify that incoming
425:01 - prop
425:02 - keep in mind that in reality a component
425:04 - should never modify props
425:06 - in other words my box component should
425:08 - never say props dot on equals something
425:11 - different
425:12 - however we do have some ways that we can
425:14 - still make changes to the background
425:16 - color of our box and that's what we're
425:18 - going to be talking about the first way
425:20 - we're going to see is to initialize new
425:23 - state in each one of these box
425:24 - components and set its initial value to
425:28 - the incoming props.on value one benefit
425:31 - in doing it this way is the simplicity
425:33 - in allowing each box to then update its
425:36 - own state of course by doing so
425:38 - automatically every instance of our box
425:40 - component will also have the ability to
425:43 - update its own state when i first
425:45 - started learning react this was the most
425:47 - obvious way to allow each of these boxes
425:50 - the ability to flip its own value
425:52 - and so that's what your challenge is
425:53 - this time i want you to create some
425:55 - state inside of our box component you'll
425:58 - determine its initial value based on the
426:00 - props dot on value you'll also create an
426:04 - event listener so that when the div of
426:06 - the box gets clicked it can flip the
426:08 - value from true to false or false to
426:10 - true while you're at it don't forget to
426:12 - update your styles here in this ternary
426:15 - currently it's looking at props.on
426:17 - you'll want to make sure that you're
426:19 - looking at the local state instead of
426:21 - the incoming value of props.on and the
426:24 - last thing is a quick change i made in
426:26 - the previous screencast i had set this
426:28 - to none but it turns out this should
426:30 - actually be transparent if i want this
426:32 - to empty out the color so don't let that
426:35 - be confusing okay this is your time
426:37 - pause the screencast and work on this
426:39 - challenge
426:46 - in truth this is very similar to what we
426:48 - have already done so far i'll initialize
426:51 - some new state we'll call it on
426:53 - and it will also receive our setter
426:56 - function which i'll call set on
426:58 - by calling react dot use state the
427:01 - initial value should be determined by
427:03 - looking at props dot on i'm going to
427:07 - update this to not look at props dot on
427:09 - anymore but to look at my new state
427:11 - value of on and that way when i make a
427:15 - function let's call it toggle
427:17 - and it calls set on looking at the
427:20 - previous version of on and simply giving
427:22 - me the opposite of whatever that
427:25 - previous version of on was
427:27 - i can then
427:28 - set this up as a click event listener
427:32 - to run toggle
427:34 - should be able to clean this challenge
427:36 - up
427:38 - hit refresh and sure enough i'm able to
427:41 - flip the value
427:42 - now it's not readily apparent but keep
427:45 - in mind that what we've done is we've
427:46 - given each one of these boxes its own
427:49 - value of state
427:51 - so basically we've given it the ability
427:53 - to control itself we've given it the
427:55 - control over its on value now i
427:58 - understand the boxes seems a little bit
428:00 - contrived however this same concept
428:02 - would apply to something like a to-do
428:04 - list for example our app would be like
428:07 - the to-do list and each of these boxes
428:09 - would be like a to-do item the value of
428:12 - on might be replaced with a value called
428:15 - maybe completed as to whether or not
428:17 - that to do item has been completed
428:19 - structuring it the way that we just did
428:21 - here every item in our to-do list would
428:24 - be in charge of knowing if it by itself
428:26 - has already been completed or not when i
428:29 - first started writing react this seemed
428:31 - like the most obvious thing to do
428:33 - however i've since learned that there
428:35 - actually is a better way to structure
428:37 - our application so that state is only
428:40 - held in the app component in our example
428:42 - here there certainly might be situations
428:45 - where creating state in each one of the
428:47 - child components and initializing that
428:49 - state based on the incoming props might
428:52 - make sense however general consensus is
428:55 - that if you find yourself initializing
428:57 - state by using the incoming value of
429:00 - some prop there's probably a better way
429:02 - to do this and that's what we'll be
429:04 - diving into in the next lesson
429:08 - previously what we did is we created new
429:11 - state inside each of our box components
429:13 - and initialized that state based on the
429:16 - incoming prop of on and it turns out
429:19 - there's actually a name for when you
429:21 - create state that is initialized by
429:24 - incoming props and it's called derived
429:27 - state
429:28 - and i'm sorry to break this to you but
429:29 - it turns out that you probably don't
429:31 - need derived state this is an article
429:34 - that was written in 2018 you can click
429:36 - on the link it's in the react
429:38 - documentation it will probably get a
429:40 - little bit heavy if you're still a
429:42 - beginner in react but it turns out that
429:43 - there can be some weirdness that happens
429:46 - if you pass a prop to a component and
429:48 - then just take that prop and set state
429:51 - based on that prop if you think about it
429:53 - in app.js we actually created some state
429:56 - in app.js to maintain all of the squares
429:58 - already so when we set state in each one
430:02 - of our boxes we had state both in the
430:04 - app and in every one of our boxes which
430:07 - in the end means that there are two
430:09 - sources of truth when the box had the
430:12 - ability to update its own state it was
430:14 - not updating the state on the app
430:16 - component it was only updating its local
430:18 - state that it had derived based on the
430:21 - incoming props and because of that there
430:23 - were multiple sources of truth now
430:26 - certainly there are circumstances where
430:28 - derived state makes sense this article
430:30 - does talk about some examples of that
430:32 - however it's far less common than i
430:34 - think most people end up using when
430:36 - they're writing react applications and
430:39 - the whole reason i decided to talk about
430:41 - this in this course is to help you
430:42 - navigate a scenario that at least for me
430:45 - was really tricky when i was learning so
430:48 - we're going to approach this in a
430:49 - different way instead of putting state
430:52 - and a setter inside of each one of our
430:54 - boxes we're going to make use of the
430:56 - state that already exists in our app and
430:59 - instead we're going to create a function
431:01 - called toggle inside of our app
431:02 - component and then pass that toggle
431:05 - function down to each one of our box
431:07 - instances anytime one of the box
431:10 - components gets clicked it will run this
431:12 - toggle function and essentially tell the
431:15 - app component hey
431:17 - the state that you're maintaining needs
431:19 - to change then when that state changes
431:22 - let's say this first object gets clicked
431:24 - and it changes from true to false react
431:27 - will re-render the app component because
431:29 - its state has changed and therefore will
431:32 - re-render the box components but now
431:34 - with the first one having an on value of
431:37 - false you certainly are going to notice
431:39 - that this way of doing things is more
431:41 - complex
431:42 - however in the end it is a better
431:44 - practice than using derived state to
431:46 - manage our state
431:48 - because of the additional complexity i'm
431:50 - going to give you a challenge that has
431:51 - you doing part of this and then we're
431:53 - going to walk through completing it
431:55 - together
431:56 - so let's go ahead and get started
431:59 - the challenge is for you to create that
432:01 - toggle function that for now is just
432:03 - going to log clicked to the console then
432:05 - i want you to pass that function down to
432:07 - each of the box components and set it up
432:09 - so that when they get clicked it simply
432:11 - runs the function which means it will
432:13 - console.log clicked i've already removed
432:15 - the state from our box component so that
432:17 - isn't something you have to worry about
432:19 - pause the screencast and work on this
432:20 - challenge
432:28 - okay let's create a function called
432:31 - toggle
432:32 - simply enough it's going to
432:34 - console.clicked
432:36 - then we're going to pass that function
432:38 - to each one of our boxes we can choose
432:41 - the prop name we want sometimes i'll use
432:43 - what looks like the on click event
432:45 - handler but keep in mind that because
432:48 - this is a custom component it won't
432:50 - automatically register this as an event
432:52 - listener i think more often i'll choose
432:54 - something like handle click that makes
432:57 - it very clear that i'm talking about
432:59 - handling an event however i also could
433:01 - just give it the name of the function
433:03 - really we can do whatever we want here
433:05 - let's stick with toggle for now and
433:07 - we'll pass down the toggle function and
433:09 - now inside of box js i'm receiving a
433:12 - prop called toggle and this is where it
433:14 - does need to be on click with the
433:16 - capital c
433:18 - we'll use props dot toggle
433:20 - i'll hit save
433:21 - and clicking it awesome runs the
433:24 - function that we defined this is the
433:26 - point where some additional complexity
433:28 - needs to be added in in order for this
433:30 - to work correctly when each box was
433:33 - initializing its own state it was really
433:36 - simple to know which box was flipping
433:38 - its value because well each box was
433:40 - maintaining its own state however now
433:42 - with our toggle function the toggle
433:45 - function has no idea which box just ran
433:48 - its code
433:49 - so in my app component if i wanted to
433:51 - use set squares because squares is an
433:54 - array i need to figure out which of the
433:56 - items in the array triggered set squares
433:59 - so that i can update the correct one and
434:02 - leave all the other ones exactly how
434:03 - they were and this is where we are
434:06 - essentially forced to do something a bit
434:07 - clever and i figured at this point it'd
434:09 - be better for me to walk you through
434:11 - some examples of how we might solve this
434:13 - problem let me clean up our challenge
434:17 - our goal is to give the toggle function
434:19 - the ability to know which box was
434:21 - clicked so that we can correctly update
434:24 - the state array
434:26 - one way we could do that is to make it
434:28 - so that the toggle function takes the id
434:30 - of the box as a parameter however as
434:34 - it's currently set up this is not going
434:36 - to work and that's because in our on
434:39 - click here we really don't get to decide
434:42 - what parameter gets passed to our
434:44 - function every browser will pass an
434:46 - event handler function the event itself
434:49 - it's an event object that describes a
434:51 - bunch of information about the event in
434:53 - fact i can see that really quick here i
434:55 - will instead of console logging clicked
434:57 - let's console.log id which we're going
435:00 - to be disappointed in what actually
435:02 - happens i'll hit save
435:05 - click a box and you'll see i get a
435:07 - synthetic base event clearly not the id
435:10 - of the box that was clicked however we
435:12 - can work around this by instead of just
435:15 - blindly running props.toggle we can run
435:18 - our own function which then runs
435:21 - props.toggle
435:23 - this is the function that is going to
435:25 - receive the event however we're not
435:27 - going to make use of that so i'll just
435:28 - delete event and then this function can
435:31 - run props.toggle and now we have the
435:33 - ability to pass whatever we want here in
435:35 - this case what we should pass is the id
435:37 - of this box however currently we're not
435:40 - receiving that id sure i have this key
435:43 - prop however the key prop really is
435:46 - intended for something completely
435:47 - different and i'm fairly certain that if
435:50 - i even tried to access that key prop
435:52 - let's console log props dot key
435:54 - yeah i'm going to get a bunch of
435:55 - undefineds i don't have access to
435:57 - props.key inside of this component but
436:00 - that doesn't stop me from passing
436:02 - another prop
436:03 - let's call it ib
436:05 - and it essentially is the exact same
436:07 - thing now i do have access inside of box
436:10 - to props.id so if i console.log props.id
436:14 - i get the ids of each of the boxes and
436:17 - now i can use props.id to pass that
436:20 - information past the id to my toggle
436:23 - function
436:24 - now over in app.js if i console log the
436:27 - id that's coming in of course this will
436:30 - only run when i click it let me click
436:32 - the very first box and that is my id of
436:34 - 1 this one should be two three four five
436:37 - and six
436:39 - awesome this is great news because now i
436:40 - can use that id to update the correct
436:43 - square in my set squares function
436:46 - at this point i think this is something
436:48 - that you'll be able to do as a challenge
436:50 - this lesson is getting a bit long so
436:51 - that's what we'll do in the next lesson
436:55 - i'll admit right now this challenge is
436:57 - going to be a little bit tricky your
436:59 - goal is to use our set squares function
437:01 - to update the correct square in the
437:04 - array remember we're receiving the id
437:07 - and we just want to flip its on value
437:09 - from true to false or false to true
437:12 - however the trick is to not change state
437:15 - directly as a hint you could go back to
437:17 - the lesson on how we updated a raise and
437:19 - state if you need a reminder on how to
437:21 - do this however in that lesson we mostly
437:24 - just touched on adding new items to that
437:26 - array in this case we're not adding new
437:28 - items we are updating one of the
437:30 - existing items at this point it might be
437:33 - tempting to use an array method like
437:34 - splice however that is going to directly
437:37 - modify your state because splice alters
437:40 - the array that it's run on
437:42 - so don't let any of that scare you i
437:44 - really want you to try your very best to
437:46 - do this if after maybe 20 minutes you're
437:48 - still struggling on figuring this out
437:50 - you can always just hit play and we will
437:52 - walk through this together so let's have
437:55 - at it pause the screencast and work on
437:56 - this challenge
438:05 - okay we'll use our set squares function
438:08 - as usual we do need access to our old
438:11 - version of squares in order to determine
438:13 - the new value of our squares so i'm
438:15 - going to say previous squares and
438:18 - instead of getting really clever and
438:19 - figuring out a way to do this on a
438:21 - single line i'm just going to open up
438:22 - this function so we have some breathing
438:24 - room to create variables and do whatever
438:26 - we need in fact let me solve this in
438:28 - maybe the least clever way i can think
438:30 - of i'm going to create a new array we'll
438:33 - say new squares i'll set that equal to
438:36 - an empty array and i'll do a very simple
438:38 - c style for loop we'll say
438:40 - let i equals 0 i is less than
438:44 - previous squares dot length
438:47 - i plus plus
438:49 - and my goal here is to look at each
438:52 - square in the array of squares
438:54 - and if its id is equal to the id that
438:57 - our toggle function got then we will
439:00 - simply flip the on value to the opposite
439:03 - of whatever it currently is
439:05 - if we are looking at a square that is
439:07 - not the one with this id then we'll
439:09 - simply push that to our new squares
439:11 - array
439:12 - so let's say our current
439:15 - square
439:16 - is the array of previous squares at the
439:19 - index of i
439:20 - and now i'll say if our current square
439:23 - that we're looking at has an id that's
439:25 - equal to the id given to our function
439:29 - then i'll say
439:31 - maybe updated
439:32 - square
439:34 - is equal to an object that has all the
439:36 - properties of my current square except
439:39 - the on property is going to be the
439:42 - opposite
439:43 - of my current square dot on
439:45 - and then i have this new object and i
439:47 - will push that to my new squares array
439:51 - so i'll say new squares.push
439:53 - updated square
439:55 - however if the id is not the same so
439:57 - i'll say else we're just going to simply
440:00 - push
440:02 - the current square
440:04 - to our new squares array
440:06 - at the end of this for loop we should
440:08 - end up with an array that looks almost
440:10 - identical to the original array proved
440:13 - squares however one of the items should
440:16 - have a flipped value for its on property
440:20 - and so we can see this is getting a
440:21 - little bit long but there's my for loop
440:23 - at the end we'll simply return because
440:26 - that's what we need to do from our set
440:28 - squares function is return the new value
440:30 - of state we'll return our new squares
440:34 - array to be totally honest i haven't
440:36 - tested this out let's hit refresh see if
440:39 - this works oh look at that awesome
440:41 - let's walk through exactly what this is
440:43 - doing let me clean up my challenge to
440:45 - buy us some room here every time i click
440:48 - on one of these squares it's running the
440:50 - click event handler that we defined here
440:53 - that click event handler is running the
440:55 - toggle function that it received through
440:57 - props and passing in the id that it also
441:00 - received through props that toggle
441:02 - function is taking that id
441:04 - running set squares
441:06 - and running this function to determine
441:08 - what the new square should be
441:10 - we look at the previous array of squares
441:14 - and simply generate a new array loop
441:17 - over the previous array and when we run
441:20 - into the square in our loop where the id
441:23 - matches the id passed into toggle
441:26 - we create a new object that will replace
441:28 - the old object and push that to our
441:31 - array
441:32 - if the ids do not match we just push the
441:35 - current square in its current form
441:37 - without any changes made to our new
441:39 - array
441:40 - and we return that
441:42 - by returning this new array react will
441:44 - update our square's state array which
441:47 - means that it will then re-render this
441:49 - component
441:50 - remap over all of our squares and create
441:54 - six new box components
441:56 - pass the on value which was the same in
441:59 - five of the squares but different in one
442:01 - of them and then in our box component it
442:03 - will simply take that prop and determine
442:05 - what the background color should be
442:07 - all of that seems really complex i
442:09 - totally understand that but you can see
442:11 - it's quick and there really is no lag in
442:14 - doing this at all
442:15 - at this point we could just move on from
442:17 - this let's say it's a feature we're
442:18 - adding to some app we're creating
442:20 - however as we've learned react really
442:23 - adheres to the principle of writing
442:25 - declarative code
442:26 - what we have here is very imperative
442:29 - doing a c style for loop this way works
442:31 - perfectly without any problem so if
442:33 - you're happy with this you can just move
442:35 - on but i think it might be worth our
442:37 - time to take a look at how we might
442:38 - write this slightly differently using
442:41 - something a little more declarative
442:42 - instead of imperative so that's what
442:44 - we'll do in the next lesson
442:48 - i'm not going to bother making this a
442:50 - challenge this time i think i'll just
442:51 - walk you through how i often times will
442:54 - update an item in an array using a more
442:57 - declarative method instead of using a c
442:59 - style for loop like we have here so let
443:02 - me go ahead and just delete everything
443:04 - inside and i think what i'll do is use
443:06 - the dot map method to help me create a
443:09 - new array and return that array all in
443:11 - one go so i can say return
443:14 - the previous squares dot map and
443:18 - whatever i put into my map function here
443:21 - is going to help determine my new
443:24 - version of the array which then gets
443:26 - returned from my dot map and returned
443:28 - from set squares this is a lot of
443:31 - returns happening all in one but let's
443:33 - just see how i would do this i need to
443:35 - look at each square inside of my map
443:39 - and whatever i return from this callback
443:42 - function inside of my dot map is what
443:44 - will get placed at the same index in my
443:46 - original array in the new array that i
443:49 - return so what if i were to use a
443:51 - ternary that said
443:53 - does square.id
443:55 - match the id passed into my toggle
443:58 - function
444:00 - if so i want you to return a new object
444:03 - that has all of the properties of square
444:06 - except for the on property which is the
444:08 - opposite
444:10 - of square
444:12 - dot on
444:14 - however if the id does not match that's
444:16 - my else here then i can simply return
444:19 - the square the only thing i'm missing
444:21 - now is the return keyword i tried to
444:24 - leave it out in the beginning because
444:26 - these two returns can be a little
444:27 - confusing at first
444:29 - so fingers crossed let's hit save and
444:32 - look at that everything is updating
444:33 - beautifully obviously what we have here
444:36 - is a lot more concise in terms of lines
444:39 - of code but it does require a bit more
444:41 - of an advanced understanding of
444:43 - javascript to fully comprehend in my
444:45 - experience what i have here is not so
444:48 - clever that other software engineers
444:50 - would not understand it and therefore i
444:52 - personally would prefer a solution that
444:54 - looks more like this i would definitely
444:56 - spend some additional time understanding
444:58 - this if this is confusing but i will
445:00 - walk us through it one more time
445:02 - every time box gets clicked it runs this
445:05 - function not just props.toggle but this
445:08 - function that we've defined inline here
445:11 - that function will run props.toggle
445:14 - remember we did that so we could pass a
445:16 - parameter a custom parameter to
445:18 - props.toggle which we decided to be the
445:20 - id of the box itself then if we go over
445:24 - to the toggle function
445:26 - it will call set squares our state
445:28 - setter function
445:30 - and we need to use the callback function
445:32 - version of set squares because we do
445:34 - care what the previous array looked like
445:37 - so we look at the previous squares and
445:39 - we're going to map over those squares
445:42 - as a reminder.map returns a new array
445:45 - without modifying the original array
445:48 - that will have the same length as the
445:50 - original array
445:51 - and whatever we return from the callback
445:54 - function of dot map is what will get
445:56 - placed in the same index in the new
445:57 - array as what was in the original array
446:00 - what we're doing every time we loop over
446:02 - an item in this array is we're checking
446:04 - if its id matches the id this id here is
446:08 - the id that we passed into our toggle
446:10 - function
446:11 - if those ids match then that means it is
446:13 - the square that was clicked if that's
446:15 - true then i want to replace the old
446:18 - object with a brand new object which is
446:21 - why i have these curly braces here and
446:22 - this is crucial so that i'm not updating
446:25 - state directly this object is going to
446:27 - pull in all of the values of squared
446:30 - exactly as it was but then it's going to
446:32 - overwrite the on value with its opposite
446:36 - however if this is not the box that was
446:38 - clicked then just give me the old square
446:41 - in this case because i'm not making any
446:43 - modifications to it i don't need to
446:46 - create a new object and spread in the
446:48 - old square or anything like that i can
446:50 - just hand the old square object directly
446:52 - to my new array awesome work i really
446:55 - hope you were able to follow along with
446:56 - that logic this truly is something that
446:59 - just takes a lot of practice
447:01 - at this point one of the very best
447:03 - things you could do is just delete our
447:05 - toggle function completely and try to
447:07 - recreate it from scratch
447:09 - in the end this toggle function is the
447:11 - most complex part of what we have here
447:13 - so that would be a great place to start
447:15 - if you really want to challenge yourself
447:17 - i did want to show you one other rather
447:19 - clever solution that we could use
447:21 - instead of passing an id down to the box
447:24 - and that is that we could just say our
447:26 - toggle function that we're passing down
447:28 - just like we did inside of our box
447:30 - is going to be an individualized toggle
447:33 - function this entire function here
447:36 - however
447:37 - we can pass the square
447:39 - dot id
447:41 - immediately as we're passing this toggle
447:43 - function down in essence this creates
447:46 - something called a closure where each
447:48 - instance of our box will have its own
447:50 - toggle and it will remember its own id
447:54 - which means i can get rid of this id
447:56 - prop and over in box i can change this
447:59 - back to just toggle or rather props dot
448:02 - toggle if i hit refresh
448:04 - we can see that it's working exactly
448:06 - like it was before
448:09 - again awesome work i really hope that as
448:11 - you have followed me in this mini series
448:14 - on setting state and creating this
448:16 - rather silly little app that you have
448:19 - worked on the challenges that i've given
448:20 - you if you haven't it's not too late
448:22 - don't just push forward go back and work
448:25 - on these challenges make sure that you
448:26 - really understand everything that we've
448:28 - done so far pushing forward without
448:30 - understanding this is not going to help
448:32 - you it's only going to make it harder
448:34 - going forward spend the time now to
448:37 - really clarify these things ask
448:39 - questions in the scrimba discord and
448:41 - then when you really understand it you
448:42 - can be happy knowing that you are ready
448:44 - to move forward
448:48 - okay well this might look familiar this
448:50 - is our joke component from the previous
448:52 - section and we're going to use this to
448:54 - kick off a sort of mini series on
448:57 - learning about conditional rendering in
448:59 - react
449:00 - using and understanding conditional
449:02 - rendering is very important in react
449:04 - because you will see it everywhere in
449:06 - react code to start us off i have a
449:08 - challenge for you you're going to create
449:10 - some state called is shown its value
449:12 - will be a boolean and you'll just
449:14 - default it to false the idea is for it
449:17 - to be a piece of state that will decide
449:19 - whether or not the punch line should be
449:21 - shown in each of these jokes and then i
449:23 - want you to add a button probably just
449:25 - right here below the paragraph that will
449:28 - toggle that is shown value back and
449:30 - forth pause the screencast and work on
449:32 - this challenge
449:40 - at the top of my component i'll
449:42 - have my state called is shown
449:45 - and set is shown
449:48 - that'll equal react dot use state the
449:51 - default value will be false
449:53 - and then we'll add a button
449:56 - let's have this say show punchline
450:00 - then let's create a function that will
450:02 - help us toggle our
450:04 - value back and forth we'll just call it
450:06 - toggle shown and all it's going to do is
450:09 - run set is shown
450:11 - we do need to know what the previous
450:13 - value of is shown was so i'll say prev
450:17 - shown and that way we can return the
450:20 - opposite of preview shown that'll just
450:22 - flip it from true to false or false to
450:24 - true and let's add our on click event
450:27 - listener here to run toggle shown
450:31 - while we're at it i'll go ahead and
450:32 - console.log the current value of is
450:35 - shown
450:37 - and when i click show punchline okay now
450:39 - you'll notice that it said false even
450:41 - though i'm flipping it that's because it
450:44 - first console logged is shown which
450:46 - initialized as false and then i called
450:49 - set is shown if i click it again i'll
450:51 - see the old value right before it got
450:53 - changed this console log's not terribly
450:55 - important anyway so we'll take it out
450:57 - one of the reasons i use this joke
450:59 - component to help us learn conditional
451:01 - rendering is well i used it already as a
451:03 - way to give you a sneak peek into
451:06 - conditional rendering since we have a
451:07 - template here already even though this
451:09 - might seem a little backwards i want you
451:12 - to make it so that our paragraph here
451:15 - only shows up if is shown is true again
451:19 - you have a template to help you
451:20 - understand how that works and then once
451:22 - you have that working we'll talk through
451:24 - the logic and really fully understand
451:26 - exactly what's going on let me update
451:28 - our challenge text here
451:30 - okay make it so that this paragraph only
451:33 - displays if the is shown boolean is true
451:36 - pause the screencast and work on this
451:38 - challenge
451:46 - well as we see here what we did is we
451:48 - surrounded everything in curly braces
451:50 - and that allows us to put a javascript
451:52 - expression in here
451:54 - in our case we're going to say if is
451:57 - shown is true
451:58 - and this paragraph
452:01 - first let's see if this is working
452:03 - okay all of our paragraphs our punch
452:06 - lines are gone
452:07 - and if i click show punch line awesome
452:10 - our paragraph displays now why on earth
452:13 - does this work when you first learn
452:15 - javascript we usually learn about how
452:17 - this and logical operator the double
452:20 - ampersand is used to make sure
452:23 - that both sides are true or truthy so
452:27 - let's say you have a couple variables
452:28 - we'll say condition one we'll call it
452:31 - true and condition two let's say that's
452:34 - also true
452:35 - if you have an if statement that says if
452:38 - condition one and condition two meaning
452:41 - if both of those are true or truthy then
452:44 - the code inside
452:47 - this code will run
452:49 - we also learned that if either one of
452:51 - these are falsy or false so if i change
452:53 - either one to false
452:55 - this code will not run
452:57 - however if we look deeper into how the
452:59 - computer is actually running this code
453:02 - it can be very enlightening for example
453:04 - let me change condition 2 to a console
453:07 - log statement this is kind of a strange
453:09 - thing you're not really going to see
453:11 - this in the real world but it's just to
453:13 - prove a point
453:15 - say hello there let me open the console
453:18 - and i'm going to click save and we'll
453:21 - see that we immediately get the console
453:23 - log running of hello there
453:25 - now let's see what happens if i change
453:27 - condition 1 to false
453:29 - i'll hit save and nothing gets console
453:32 - logged that's because what the computer
453:34 - does is it first checks the truthiness
453:36 - of this first statement and if it is not
453:39 - truthy if it's false or falsy it
453:42 - actually completely skips whatever it
453:44 - sees after the double ampersands
453:46 - since it already knows that this
453:48 - condition will not satisfy what the and
453:52 - is expecting in other words for both
453:54 - sides to be truthy it knows already that
453:56 - it can completely skip whatever it sees
453:58 - here
454:00 - so we can take advantage of this in
454:02 - react anytime we have an element on the
454:05 - screen that we want to display if
454:07 - something is true or completely hide or
454:11 - not even render to the page if that
454:13 - thing is false
454:14 - here with the setup we realized that
454:17 - some jokes were just one-liners they
454:19 - didn't have a setup and a punch line
454:21 - they just were the punch line and in
454:23 - that case we looked at our incoming
454:25 - props.setup and said if that's falsey
454:28 - then don't display this h3 at all
454:30 - similarly with our local state of is
454:33 - shown we can say i only want to display
454:36 - or render this paragraph if is shown is
454:39 - true
454:40 - by doing that we can have a toggle
454:42 - button that when it's clicked will
454:44 - change is shown of this individual joke
454:47 - component to true and therefore it will
454:50 - display
454:51 - our paragraph more specifically when i
454:53 - click this button react will re-render
454:56 - this component because its state has
454:58 - changed and therefore when it's running
455:01 - the return value again and determining
455:03 - what should actually be placed on the
455:05 - screen is shown is now true and
455:07 - therefore this expression gets run and
455:10 - put onto the page for us so as a recap
455:13 - in react when you have an element that
455:15 - you either want to display or not
455:17 - display at all using the and logical
455:20 - operator is a really concise and great
455:22 - way to do that
455:26 - this challenge is a pretty
455:27 - straightforward one based on what you
455:29 - just learned using the and logical
455:31 - operator make it so that this h1 will
455:34 - only display if our array of messages is
455:38 - not empty
455:40 - if this array is empty then this h1
455:43 - should not display at all and we should
455:45 - end up with a blank page
455:47 - while you're at it go ahead and fix our
455:48 - little underline for the number of
455:50 - unread messages we have in our array
455:53 - pause the screencast and work on this
455:54 - challenge
456:02 - well first let's replace this underline
456:04 - we can put in a set of curly braces and
456:06 - simply say messages dot length
456:10 - okay that's a good start now if we're
456:12 - deciding whether we want to display this
456:14 - at all or not then we can use the
456:17 - logical and operator to say messages
456:20 - that length
456:21 - is greater than zero
456:23 - and
456:24 - display this h1 that way if
456:27 - messages.length is greater than zero is
456:29 - a false statement in other words if
456:31 - messages.length is equal to zero then
456:34 - this h1 will simply not render at all a
456:37 - more concise way might be to just say
456:39 - messages dot length and this h1 and
456:42 - that's because the number zero is
456:44 - considered a falsy statement however i
456:47 - think it reads a little better to be
456:49 - explicit and say the greater than zero
456:51 - there sometimes if this line gets a
456:53 - little bit long you can break it out
456:55 - onto its own line something like this
456:59 - and we can test this by emptying our
457:02 - initial state array and there we go we
457:04 - have nothing on the screen
457:06 - awesome work next we're going to see
457:08 - another method for doing conditional
457:10 - rendering in react
457:14 - we have a funny ui bug right now when we
457:16 - click show punch line it shows the punch
457:19 - line but the button still says show
457:21 - punchline knowing what you know so far
457:23 - using the and operator to conditionally
457:26 - render something i want you to think for
457:28 - a second how much you change it so that
457:30 - it says hide punchline instead of show
457:32 - punchline when the punch line is shown
457:41 - one thing we could do is make a copy of
457:44 - this button and display them at
457:46 - different times so i'll do my similar
457:49 - conditional rendering and say if if
457:52 - shown is true
457:53 - then i want this to say hide punchline
457:56 - and if is shown as false or if not is
457:59 - shown
458:00 - then i want this to say show punch line
458:03 - technically this will work so it says
458:06 - show punchline and then it changes to
458:08 - hide punchline however we can do better
458:10 - than this and we can do so by using the
458:12 - ternary operator returnery is really
458:15 - helpful when you want to display one
458:18 - thing based on a condition
458:20 - or another thing if that condition is
458:22 - falsy
458:23 - so instead of duplicating our button i
458:25 - can keep my button here and simply
458:28 - change the word from show to hide using
458:31 - a ternary let me show you what that
458:33 - looks like i'm going to delete the word
458:34 - show put in a set of curly braces
458:37 - because i want to use javascript now and
458:39 - we're going to use a ternary looking at
458:41 - the boolean value is shown and i'll say
458:44 - is shown question mark now if is shown
458:46 - is true then i want the string hide to
458:50 - be displayed at this point in the button
458:54 - otherwise i want it to say show
458:57 - i hit save
458:59 - it's showing show punch line and when i
459:01 - click it it changes it to hide punch
459:03 - line
459:04 - as far as conditional rendering goes
459:06 - probably 95 of the time you will see
459:10 - conditional rendering handled with
459:11 - either the double ampersand or a ternary
459:15 - again the double ampersand is great if
459:17 - you either want something to display or
459:19 - not display and the ternary is great if
459:22 - you want to choose between one of two
459:24 - things to display
459:25 - if your conditions are more complex than
459:28 - just having one of two options to
459:30 - display usually it'll be best just to
459:33 - turn to a regular old if statement as we
459:36 - have seen in the past you can save a
459:38 - variable for your text and do either a
459:41 - switch statement or a series of if else
459:44 - if else if else statements to determine
459:46 - what that variable should be and then
459:48 - just display it in your return down here
459:50 - below since we've already seen what that
459:52 - looks like in the past i'm not going to
459:54 - cover it now i mostly just wanted to
459:56 - look at these two methods for
459:58 - conditionally rendering something in
459:59 - react now that we've learned that let's
460:01 - get a quick practice in
460:05 - let's do some conditional rendering
460:07 - practice one thing i've done with our
460:09 - messages app is i changed this to just
460:11 - say messages instead of num messages
460:13 - because well that just makes more sense
460:15 - because this is an array of messages not
460:17 - a number of messages anyway your
460:20 - challenge is to display the correct
460:22 - thing on the page if there are no unread
460:25 - messages it should display you're all
460:27 - caught up and if there are any messages
460:29 - in the array it should display you have
460:32 - n unread messages where n represents the
460:35 - length of the array or the number of
460:37 - messages in that array as a caveat
460:39 - though notice i put this parenthesis s
460:41 - here that's not literally the text
460:42 - parentheses s instead i want you to if
460:45 - there is exactly one unread message put
460:48 - the word message there instead of
460:50 - messages
460:51 - so pause the screencast and work on this
460:53 - challenge
461:01 - there certainly is more than one way to
461:03 - accomplish this for example i could
461:05 - always render an h1
461:07 - and then use a ternary inside for the
461:09 - text of that h1 for some reason that
461:12 - doesn't sit quite right with me i'm
461:14 - honestly not sure why but i think the
461:15 - way that i would choose to do this is
461:17 - just to open my curly braces look at the
461:20 - messages dot length and say if that is
461:23 - exactly equal to zero and here i'm going
461:26 - to use a ternary so i'll start a
461:28 - question mark on the next line this will
461:30 - be what should display in case there is
461:32 - exactly zero messages so i'll do an h1
461:35 - here
461:36 - and say
461:37 - you're all caught up
461:39 - otherwise
461:40 - i'll put a different h1
461:43 - that says
461:45 - you have
461:46 - and let me just put the number
461:48 - hard-coded here for a second
461:50 - unread
461:51 - messages
461:52 - okay i'll replace this two with
461:55 - messages dot length
461:57 - and well let's see where we are right
461:59 - now i'll hit save
462:00 - you have two unread messages if i remove
462:03 - the items from the array
462:06 - you're all caught up awesome
462:08 - at this point it might be tempting to do
462:10 - some kind of nested ternary here that
462:12 - says if messages.length
462:15 - is exactly equal to one and put another
462:17 - ternary as the else of this first
462:20 - ternary personally i think this is
462:22 - nearly impossible to reason about and so
462:24 - i never do nested ternaries myself i
462:27 - suppose one thing i could do is just
462:29 - render this s if messages.length is
462:33 - greater than one i think that would look
462:35 - something like this i would put message
462:37 - and then a set of curly braces and put
462:39 - in my
462:40 - javascript here that says messages
462:43 - that length is greater than one
462:46 - and
462:48 - the string s
462:49 - let's just see if that works personally
462:51 - i don't love this solution i'll add in a
462:54 - couple items here
462:56 - okay we have two unread messages and if
462:59 - there's only one item
463:01 - okay you have one unread message however
463:03 - when i look at this it's not quite as
463:06 - clear as what i think i would prefer to
463:08 - do and that is to type out the whole
463:10 - word message or messages and use a
463:12 - ternary let me show you what that would
463:14 - look like you have
463:16 - blank unread and then i will open up
463:19 - some javascript here
463:21 - and say
463:22 - is messages.length
463:26 - greater than one
463:28 - if so i want it to say messages but
463:31 - otherwise i just want it to say message
463:34 - i'm going to put this onto its own line
463:37 - just so we have some extra space and
463:39 - although this does take up more
463:41 - characters i think than what i had
463:42 - before to me this is a lot easier if i
463:45 - have a fellow developer who's going to
463:47 - be coming onto this project and needs to
463:50 - understand what i'm doing here i think
463:52 - this is easier to reason about and
463:53 - understand as you can see there are
463:55 - multiple ways to use conditional
463:57 - rendering and this is the kind of thing
463:59 - that i'm talking about when we say that
464:01 - react is just javascript just like in
464:03 - javascript where there's multiple ways
464:05 - to solve a single problem it's the exact
464:07 - same in react because you're just using
464:09 - javascript like ternaries and the
464:12 - logical and operator and so forth you
464:14 - truly could solve this in probably
464:16 - dozens of different ways
464:17 - most people will tell you to find a way
464:19 - that is easy to think about in the
464:21 - future and then to stay consistent
464:23 - throughout your entire code base
464:25 - let's go ahead and test this before we
464:28 - call it a good solution
464:29 - and yeah see i need a space there so
464:31 - we'll put
464:32 - an extra space in there
464:34 - oh and i guess breaking this onto its
464:36 - own line might not have worked so let's
464:39 - just leave it like that okay one unread
464:41 - message
464:42 - and
464:44 - two unread messages
464:47 - awesome work when you're ready let's
464:49 - keep moving forward
464:52 - it's that time again for another quiz
464:55 - pause the screencast click into the
464:56 - editor type your answers down and when
464:59 - you are satisfied with your answers
465:00 - click play and we'll go through the quiz
465:02 - together
465:10 - number one what is conditional rendering
465:13 - conditional rendering is just a way to
465:15 - determine whether or not something
465:17 - should get displayed or as we're going
465:19 - to see what among many choices should
465:21 - get displayed
465:23 - unlike a regular html page which will
465:25 - always display whatever you hard coded
465:28 - into the html with react we can use
465:30 - conditional rendering to sometimes not
465:33 - display that thing or to sometimes
465:35 - display one thing instead of another
465:39 - so conditional rendering is when we want
465:41 - to only sometimes display something on
465:44 - the page usually based on some sort of
465:46 - condition or maybe i should say always
465:48 - based on some sort of condition
465:50 - so far we've learned a few different
465:52 - ways to handle conditional rendering
465:54 - when would you want to use the double
465:56 - ampersand or the and operator the and
465:58 - operator is great to use if you want to
466:00 - decide whether or not to display
466:02 - something at all
466:04 - so in other words when you would want to
466:06 - either display something or just not
466:09 - display it at all in that case what you
466:11 - put before the and operator is the
466:13 - condition
466:14 - and if that condition is true or truthy
466:17 - then the jsx element that you put on the
466:19 - right side of the and operator is what
466:22 - will either get displayed or not get
466:23 - displayed based on the condition of the
466:26 - thing on the left of the and operator
466:28 - number three when would you choose to
466:30 - use a ternary where the and operator is
466:33 - great for deciding to display or not to
466:36 - display something a ternary is great for
466:39 - deciding which among two things you want
466:41 - to display
466:43 - technically speaking you can nest
466:45 - ternary operations inside of other
466:47 - ternary operations but personally i
466:49 - highly recommend not doing that if you
466:52 - find yourself needing to choose between
466:54 - more than two options you probably
466:56 - should just be using regular
466:58 - conditionals with if else if and else or
467:01 - possibly a switch statement and well i
467:03 - guess i just answered number four so if
467:06 - you do need to decide between more than
467:08 - two options you should use a regular
467:09 - conditional statement using if else if
467:12 - and else or a switch statement
467:15 - there's one slight difference between
467:17 - the and in ternary and what you can use
467:20 - with an if else if else block and that
467:22 - is that the and and the ternary can
467:25 - happen directly in line inside of the
467:28 - returned elements of your function
467:30 - whereas with the if or else if or the
467:32 - switch statement those will have to
467:34 - happen outside of the return of your
467:36 - function so if i have a functional
467:39 - component let's say it's app
467:41 - and i'm returning some kind of ui
467:45 - the and and the ternaries can happen
467:47 - right here in line so i can have
467:50 - something
467:51 - and some jsx
467:55 - or i could use a ternary that has the
467:58 - condition
467:59 - and the ternary and then an else
468:02 - inside the ternary which is some other
468:05 - element but if i need to use an if else
468:08 - if and else or a switch statement i
468:10 - can't do my if inside of the jsx
468:13 - directly like this instead i need to go
468:16 - up above i can set a
468:18 - variable and then use my if
468:22 - and else if
468:24 - and else block to set some variable to
468:28 - some kind of jsx
468:31 - i won't type out the whole thing but
468:33 - that allows me to then just inside of
468:35 - here display some variable because
468:38 - previously in my if statement it was
468:40 - determined which jsx element it should
468:43 - be
468:44 - great work on this quiz we still have a
468:46 - lot left to learn in this section so
468:47 - let's keep moving forward
468:51 - we're going to spend a fair amount of
468:53 - time talking about how to manage and
468:55 - deal with forms in react from the
468:58 - outside this might seem like a kind of
469:00 - strange segue for us to be taking
469:02 - however i have found that forms are one
469:04 - of the most difficult things to
469:06 - understand and truthfully one of the
469:09 - most difficult things to use in react if
469:12 - someone were to ask me what i think is
469:14 - one of react's greatest weaknesses i
469:16 - would probably say forms fortunately
469:18 - there is a plethora of really awesome
469:21 - form libraries out there that in my
469:23 - experience many people end up turning to
469:26 - in order to manage forms and not have to
469:28 - build everything that we're about to see
469:30 - and learn about from scratch however
469:32 - that being said it is really important
469:34 - to know how to do this because
469:36 - especially when you're dealing with a
469:37 - really small form like what we're about
469:39 - to see in the meme generator it's not
469:42 - that difficult and once you get enough
469:44 - practice under your belt it's pretty
469:45 - straightforward so why are we talking
469:47 - about forms in the first place well in
469:49 - the old days you would create a form in
469:51 - your html and you would give it an
469:54 - action which had the url usually of some
469:57 - kind of php file that would process your
470:00 - form you would give it a method usually
470:02 - of posts and then when your form was
470:05 - submitted through some sort of submit
470:07 - button your php would pick everything up
470:09 - from there and process the data from the
470:11 - form fast forward a little bit to
470:13 - slightly more advanced javascript but
470:15 - still vanilla javascript and you would
470:17 - likely see something that looked kind of
470:19 - like this
470:20 - this selector goes and gets the form it
470:22 - adds a submit event listener
470:25 - and the function that runs whenever the
470:27 - form is submitted would simply gather
470:29 - all the values together and then submit
470:31 - it to an api somehow of course my
470:34 - function is just console logging stuff
470:36 - if i were to type in a first name and
470:38 - last name here let's put joe
470:41 - schmo
470:42 - and it's just console logging our data
470:44 - the main takeaway here though is to know
470:46 - that when you're submitting the form it
470:48 - would gather all the data immediately at
470:51 - the very end of the process and then
470:53 - submit it immediately after gathering it
470:56 - so how is this different from react the
470:58 - main difference in react is that instead
471:01 - of waiting until the very end of the
471:04 - process and filling out the form when
471:05 - the form is submitted and then gathering
471:07 - the data instead what we do is we create
471:10 - state and every keystroke change or
471:13 - checkbox change a radio button change or
471:16 - whatever it might be we update state and
471:19 - therefore we are watching these inputs
471:21 - every keystroke or every change that's
471:23 - made to our form then when the time to
471:26 - submit comes there's no more work really
471:28 - to be done we already have gathered the
471:30 - data and we simply submit that to our
471:33 - api and pass in the state that we have
471:36 - been tracking all along
471:38 - coming up we are going to jump into the
471:40 - specific syntax of how to do this
471:42 - however i really think it would be a
471:44 - good idea to sort of pregame for these
471:46 - lessons by reading through the react
471:48 - documentation on forms i know forms can
471:51 - seem like a rather mundane topic but i
471:54 - promise this documentation from react is
471:57 - really excellent they've done a great
471:58 - job explaining it think of this like
472:01 - reading the textbook before coming to
472:02 - class once you've had a chance to at
472:04 - least skim through the documentation and
472:06 - gain some level of understanding on
472:09 - forms and react you'll be ready to move
472:11 - on to these next lessons where we start
472:13 - learning about how to deal with forms in
472:16 - react
472:19 - let's see how we can manage these forms
472:21 - in react and we're going to start very
472:23 - simple with a single input i'm keeping
472:25 - this as simple as possible so not to
472:27 - distract us from anything but learning
472:29 - forms as a reminder in vanilla
472:31 - javascript we would have a submit button
472:33 - and when we clicked that submit button
472:35 - it would run a function gather all the
472:37 - data at that time and then submit it to
472:39 - an api or wherever what we'll be doing
472:42 - in react instead is maintaining
472:45 - up-to-date state for every change that
472:47 - happens in any input in our form to
472:50 - accomplish this there's a few things we
472:52 - need to do first of all we need some
472:54 - state to hold the current data that's
472:57 - typed into our input just like we've
472:59 - been learning i can say
473:01 - let's say first name and set first name
473:04 - is equal to react.use state
473:07 - i will set an empty string as the
473:09 - default because i would expect my input
473:11 - to be an empty input box in the
473:13 - beginning and now what i need to do is
473:15 - listen for any changes that happen to
473:17 - this input can you think what event
473:20 - listener i might need to add to my input
473:22 - to accomplish this
473:28 - most or all form elements have an event
473:31 - called onchange and i can set that equal
473:34 - to a function let's call it handle
473:37 - change which i obviously haven't
473:39 - declared yet so let's declare that
473:41 - function
473:42 - and for now let's just console.log
473:44 - changed
473:47 - i hit refresh and now we can see every
473:49 - keystroke that i make is running our
473:51 - function now one thing we haven't spent
473:53 - much time talking about is this
473:55 - parameter that i can actually receive as
473:58 - a part of my event listener function in
474:01 - this case i don't get to decide what
474:03 - actually gets passed to my handle change
474:06 - event listener function instead what
474:08 - will get passed to it by the browser is
474:10 - an event object
474:13 - this event object is really large it has
474:15 - a lot of information in it and if i
474:18 - console.log event in scrimba it's simply
474:21 - going to put synthetic base event so at
474:24 - this point i'd recommend you actually
474:25 - open your developer tools in the browser
474:27 - and see exactly what got logged to the
474:29 - console you'll be able to dig into all
474:31 - of the properties of this event object
474:34 - however there's one property in this
474:36 - event object that i care the most about
474:37 - and that is one called target if i log
474:40 - event dot target we'll see that it gives
474:43 - me what scrimba shows is the html
474:46 - element that triggered this event now it
474:48 - looks like html in the console down here
474:51 - but in reality it's just the dom object
474:53 - that triggered this event that dom
474:56 - object has properties that we care a lot
474:58 - about for example the value property let
475:01 - me hit refresh and i'll just start
475:03 - typing letters and you can see in the
475:05 - console we're logging the current value
475:08 - on every keystroke of that specific
475:10 - input box
475:12 - so let me set up a quick challenge for
475:14 - you
475:15 - your challenge is to update the first
475:17 - name state on every keystroke i've set
475:20 - everything else up for you you should be
475:22 - able to complete this challenge fairly
475:24 - quickly i've added this console log here
475:26 - what this will do is every time the
475:28 - first name state changes it will
475:31 - re-render your component and therefore
475:33 - it will rerun this console log this is a
475:36 - really simple way for you to see that
475:38 - everything is working assuming you hook
475:40 - everything up correctly in our handle
475:41 - change function this console.log line
475:44 - should fire every time you type into the
475:46 - input box pause now and work on this
475:48 - challenge
475:56 - simply enough we should be able to use
475:59 - the set first name state setter and in
476:02 - this case i don't really care what the
476:05 - state used to be or rather i don't need
476:07 - to know what the state used to be in
476:09 - order to determine what the state is
476:11 - about to be because i have quick and
476:13 - easy access to the information that's
476:16 - currently typed into the input box by
476:18 - accessing event.target.value
476:22 - so i should be able to get rid of these
476:24 - lines
476:25 - i'll hit refresh
476:27 - and i'll start typing in my input box
476:29 - and sure enough our state is updating
476:31 - with every keystroke
476:33 - and there we have it as you can see at
476:35 - least starting out this isn't that
476:37 - terribly complicated however i am about
476:39 - to throw some wrenches in here we're
476:41 - going to see that the complexity level
476:43 - will rise a little bit however before i
476:45 - do that i want to get your hands on the
476:46 - keyboard and we'll do that as part of a
476:48 - challenge
476:51 - in this challenge we want to add a last
476:53 - name input to our form as i've done
476:56 - before i'm being a bit intentionally
476:58 - vague here and that's so that i can get
477:00 - you to think of all the steps that you
477:02 - would need to run through in order to
477:04 - get this to work so do your very best in
477:06 - this challenge and when you feel like
477:07 - you've got a good solution you can hit
477:09 - play and i will show you how i would do
477:11 - it pause now and work on the challenge
477:21 - as you worked on this challenge you
477:22 - might have started to see places where
477:24 - we were not being dry in our code in
477:27 - other words we were repeating ourselves
477:29 - quite a bit for example i could
477:31 - duplicate this line and i will change
477:34 - first name to last name
477:37 - we'll say set
477:39 - last name
477:40 - i then could duplicate my input
477:44 - and we'll change this to last name now
477:46 - of course there's a problem with using
477:49 - the handle change function on change and
477:51 - that is because well handle change is
477:53 - only changing the first name so maybe we
477:56 - make a change that says handle
477:58 - first
477:59 - name change
478:01 - we'll update our on change there
478:03 - and then we'll duplicate this function
478:05 - and handle last name change you can
478:08 - probably see where i'm going with this
478:10 - and how this is not going to be the
478:12 - ideal solution
478:13 - and then last of all we need to change
478:15 - this to set last name
478:18 - i'll add a console log here just so we
478:21 - can see if things are working the way we
478:23 - expect we'll look at both the first name
478:25 - and last name
478:26 - we'll hit save start typing we're
478:29 - looking at joe
478:31 - schmo
478:32 - okay
478:33 - of course this seems to be working but
478:35 - we can clearly see this is not ideal
478:38 - especially when you think of some of
478:40 - maybe the crazy forms that you filled
478:41 - out before that have let's say 20 or
478:44 - maybe even upwards of 50 input boxes
478:47 - it's not going to work great for me to
478:49 - have a separate change function for each
478:51 - one of those and a separate piece of
478:53 - state for each one of those so next what
478:55 - we'll do is we'll learn how to combine
478:57 - our state into an object and how to use
479:00 - the event parameter that we're receiving
479:03 - in our event handlers to determine which
479:05 - property of that state object we should
479:08 - be updating so when you feel confident
479:10 - with everything that we've worked on
479:11 - here let's jump into that next
479:16 - let's see how we can improve our form
479:18 - and how we're managing state so that
479:20 - when the time comes to add let's say 20
479:23 - or 30 more inputs we don't end up
479:25 - drowning in duplicated code now if you
479:28 - do just have two or three maybe even
479:31 - four pieces of data in your form that
479:33 - you care about doing something like this
479:35 - might be okay or at least manageable
479:38 - once you get to four or beyond however
479:41 - it starts to make a lot more sense to
479:43 - save your state in an object instead of
479:46 - in separate variables a benefit of doing
479:49 - that is we'll receive one setter
479:51 - function which we're going to learn how
479:53 - to use to update the correct piece of
479:55 - state in the object let's just dive into
479:58 - the syntax to make more sense of this
480:00 - i'm going to remove this extra function
480:02 - here let's change this back to handle
480:05 - change so we can figure out a way to
480:07 - make it more universal and i'll set my
480:10 - on change to work for both of those
480:12 - let's also get rid of our extra piece of
480:14 - state here and instead we're going to
480:17 - choose to save an object as our default
480:20 - and that object will have a first name
480:22 - property as an empty string and a last
480:25 - name property as an empty string
480:27 - let's move this onto its own line
480:31 - then i'll change first name to something
480:33 - more generic like form data and set form
480:36 - data
480:38 - lastly let's get rid of this so that we
480:40 - don't have broken code
480:42 - and awesome this is a good starting
480:44 - place
480:44 - if you remember back when we talked
480:46 - about the event that we're receiving in
480:48 - our handle change event listener
480:50 - function if you did spend some time in
480:53 - your developer tools poking around that
480:54 - object and looking at its properties you
480:56 - probably saw event.target which we
480:59 - talked about in that previous lesson
481:01 - now in scrimba if i console.log this
481:03 - event.target it gets a bit truncated to
481:06 - look like an html element however under
481:08 - the hood it's really a dom object that
481:11 - we can access properties on
481:13 - in fact we saw how i can look at the
481:15 - value property to get the specific value
481:18 - that was typed into the input box
481:21 - however at this point because an object
481:23 - is what we're saving in state i can't
481:25 - simply say set form data to
481:27 - event.target.value because that would
481:30 - erase my object and replace it with just
481:32 - a simple string and because i'm using
481:34 - the same handle change function on both
481:37 - of my inputs i need a way for the handle
481:40 - change event to distinguish between
481:42 - which input it was that triggered that
481:45 - event well it turns out that a good
481:48 - practice that we're neglecting to do
481:49 - right now is to give each of our inputs
481:52 - a name property this is true of regular
481:54 - html forms in any case but in react it's
481:57 - going to play a special role for us what
482:00 - i can do is make the name property match
482:02 - exactly the property name in the state
482:05 - that we're saving in fact a good idea is
482:08 - to just copy and paste it so that you
482:10 - don't misspell it
482:12 - and now i have access to
482:14 - event.target.name
482:17 - let's hit save i'll trigger the event to
482:20 - happen in the first name property and
482:22 - you can see it logged the first name
482:24 - property there if i do it in the last
482:26 - name it logs last name
482:28 - well this is a great start we have
482:30 - access to the property of state that we
482:32 - want to change and we still have access
482:35 - to
482:36 - event.target.value which is the value
482:38 - that we want to change it to so now we
482:40 - have everything we need to call set form
482:42 - data and update our object correctly
482:45 - let's go ahead and call set form data
482:48 - before when we were simply updating a
482:51 - string we didn't care about what the
482:53 - previous version of that string was
482:55 - because we were just going to overwrite
482:57 - it with whatever was in the input box
482:59 - this time around however we do need to
483:01 - know what the old version of state was
483:03 - because we have a lot of other
483:04 - properties well in this case we only
483:06 - have one other property but imagining a
483:08 - larger form we have many other
483:10 - properties that we need to maintain
483:12 - instead of just overwrite so i'll do a
483:15 - callback function in here i'll use an
483:17 - arrow function and call my previous
483:18 - state let's say prev form data
483:22 - i'll use an arrow function and open up
483:24 - the body of that function my goal is to
483:26 - return a new object and i want to make
483:29 - sure i keep all of the old object intact
483:32 - so i'm going to spread out the previous
483:35 - form data but then i'm going to
483:36 - overwrite the specific property that we
483:38 - are trying to overwrite or that we're
483:40 - trying to update in this handle change
483:42 - event listener well on your first
483:44 - attempt the inclination might be to try
483:47 - something like let's use
483:50 - event.target.name as the key
483:53 - and event.target.value
483:56 - as the value of course as we can see in
483:58 - the editor this is a syntax error
484:00 - however with es6 there is a feature
484:03 - introduced called computed properties
484:05 - and what this allows me to do is to
484:08 - surround my key here in square brackets
484:11 - long story short it makes it so i can
484:13 - turn a dynamic string like something
484:16 - saved in a variable and use it as the
484:19 - property name for my object if that
484:22 - doesn't make a whole lot of sense don't
484:23 - worry too much just know that you can
484:25 - fix the syntax problem by having dots
484:27 - here by surrounding it in square
484:29 - brackets
484:30 - that's an overly simplified way to
484:32 - describe it but don't worry too much
484:34 - about that that's not the important part
484:36 - to take away from this lesson let me add
484:38 - back my console log
484:40 - so we can look at our state every time
484:42 - it changes
484:44 - hit save we can see in the console that
484:47 - it's empty to start with and as i change
484:50 - the first name my object is updating
484:53 - correctly my last name is also still a
484:55 - part of my state as i update the last
484:58 - name awesome this is great news that my
485:01 - entire state is staying intact honestly
485:03 - what we just learned in this lesson
485:05 - might be one of the most difficult parts
485:07 - of understanding forms in react so for
485:10 - those of you that were able to follow
485:12 - along awesome good job for those that
485:15 - were struggling still that's completely
485:17 - okay and completely normal don't be
485:19 - afraid to go back re-watch this a few
485:21 - times and because of that in the next
485:22 - screencast we're going to practice this
485:24 - a little bit more
485:28 - hopefully in this challenge you'll get a
485:30 - chance to see why it's beneficial to
485:32 - structure things the way that we just
485:34 - learned how to do your challenge is to
485:36 - add an email field and associated state
485:39 - to our form pause the screencast and
485:41 - work on this challenge
485:49 - previously when we were saving all of
485:51 - our state as strings anytime we wanted
485:54 - to add new state we needed to create new
485:56 - variables and new event handler
485:59 - functions
486:00 - now however we simply need to add a
486:03 - field to our state object here we'll add
486:06 - an email property that starts as an
486:08 - empty string and as long as with my
486:10 - input i give it the correct name i
486:13 - really don't need to change anything
486:15 - about my handle change function so let
486:17 - me add another input here i'll just
486:20 - duplicate this one
486:22 - for good measure i'll change the type to
486:23 - email
486:24 - of course we'll change the placeholder i
486:27 - don't need to change my onchange
486:29 - we'll make sure that this name exactly
486:32 - matches the name that we chose in state
486:34 - on our property here
486:36 - and well i believe that should do the
486:37 - trick i'll hit save
486:40 - type in a first name we'll say it's joe
486:42 - last name schmoe
486:45 - joe at schmo.com and sure enough our
486:48 - state is updating exactly as we would
486:50 - expect now maintaining all three of
486:52 - these properties
486:54 - now for those of you that followed my
486:55 - directions a few screencasts ago and
486:58 - actually read through the react forms
486:59 - documentation you would have come across
487:02 - a section that talked about controlled
487:04 - inputs as of right now our inputs are
487:06 - not controlled and so in the next
487:08 - screencast we're going to see one simple
487:10 - addition we can make to turn them into
487:13 - controlled inputs and we'll talk briefly
487:15 - about what a controlled input is in the
487:17 - first place
487:20 - a term you might hear floated around as
487:22 - you're learning about react is something
487:24 - called controlled components again if
487:27 - you read through the react forms
487:29 - documentation you'll have come across
487:31 - the section called controlled components
487:33 - if it's been a minute or you didn't have
487:35 - a chance to read through that you can
487:36 - click this slide in order to go directly
487:38 - to that documentation but when we're
487:40 - talking about maintaining state inside
487:43 - of a component there's a common concept
487:45 - called the single source of truth the
487:47 - idea is that the state that you're
487:49 - maintaining in your component should be
487:51 - the single source of truth if you think
487:54 - back to when we were learning about
487:56 - changing state and we had our boxes or
487:58 - squares example one solution we came up
488:01 - with was allowing each box to take the
488:04 - incoming on prop and then set its own
488:07 - internal state based on that incoming
488:10 - prop
488:11 - and then the box itself could change its
488:13 - own internal state and therefore display
488:16 - either being filled in or not filled in
488:19 - if it's been a minute since you've seen
488:20 - that lesson of course you can always go
488:22 - back and watch that too refresh on what
488:23 - i'm talking about here the problem as we
488:26 - learned then is that we have two
488:28 - instances of that state that exist and
488:30 - they don't necessarily match up in other
488:32 - words there isn't a single source of
488:34 - truth the array of these objects was
488:37 - being held in state in the app component
488:40 - however each box was then changing that
488:42 - state essentially without telling the
488:45 - app component that it was changing and
488:47 - therefore there was state that
488:49 - oftentimes would not match with one
488:51 - another we have a similar concept
488:53 - happening here where in the markup
488:56 - inside of our inputs each of these
488:58 - inputs in effect is holding its own
489:00 - state think how in a regular html form
489:04 - no react involved at all when a user
489:06 - types into an input box essentially that
489:09 - input box is maintaining its own state
489:12 - well in this case we have two pieces of
489:14 - state one is being held by the input box
489:17 - just in regular html and the other is
489:20 - updating on every keystroke held in our
489:23 - react code
489:24 - of course we have set it up so that the
489:26 - state of our input box then perfectly
489:29 - gets mirrored by our state in react
489:32 - however a good practice in react is to
489:34 - make it so that your react state is what
489:37 - drives the state that's visible inside
489:39 - the input box
489:40 - i totally understand this might seem
489:42 - like i'm splitting hairs here but if it
489:44 - helps all this really boils down to is
489:47 - simply adding a value property to each
489:49 - one of our inputs so here at the bottom
489:52 - of each one i'll add value equals and
489:55 - then a set of curly braces and then all
489:58 - we need to do is add the piece of state
490:00 - in other words form data dot and then
490:03 - the name of that specific input into
490:06 - that value so we'll add form data dot
490:10 - and then in the first one i'm going to
490:11 - have
490:12 - first name
490:15 - last name
490:16 - and email
490:19 - visually we're not going to see any
490:21 - difference here conceptually however
490:23 - when i type into the first name bob the
490:27 - value of this input box is no longer
490:29 - being controlled by the input but rather
490:32 - by react every change that i make runs
490:35 - my handle change function which then
490:37 - updates the correct piece of state which
490:39 - re-renders my form and it sets the value
490:42 - of my form input to be whatever state is
490:46 - so now state is in the driver seat
490:48 - telling the input box what to display
490:51 - rather than the input box telling the
490:53 - state what to be
490:55 - the main reason to learn this about
490:57 - controlled components is because
490:58 - sometimes if you don't set this up
491:00 - correctly react might sometimes complain
491:02 - about having uncontrolled components
491:05 - fortunately the concept itself is more
491:07 - difficult to understand than actually
491:09 - implementing it so if you don't feel
491:11 - like diving deep into understanding
491:13 - controlled components honestly that's
491:15 - going to be completely okay at this
491:16 - point just remember that you need to set
491:18 - the value of your inputs to be equal to
491:21 - your state that represents that input
491:24 - value there are a few more small things
491:27 - that we need to learn regarding forms so
491:29 - at this point we're going to speed
491:30 - through some of those so that we can get
491:32 - to a challenge that will help you
491:33 - practice all of this together
491:37 - if only all form elements were as simple
491:40 - and designed the same way as the inputs
491:42 - that we've been working through these
491:44 - text based inputs then our life would be
491:46 - so much easier however forms have more
491:48 - variety in the types of inputs you can
491:51 - have for example radio buttons and check
491:53 - boxes text areas and so forth each one
491:55 - of these has some special considerations
491:57 - we need to keep in mind when we're using
491:59 - them in react to start us off let's look
492:02 - at the text area element
492:04 - in regular html text area is a little
492:07 - different than an input because it is
492:10 - not self-closing it has its own separate
492:12 - closing tag and in html whatever
492:16 - you put inside the opening and closing
492:19 - tags is the value of that text area
492:22 - you'll see i'll hit refresh and we get a
492:25 - text area that's a little bit larger we
492:27 - can also set the size with rows and
492:29 - columns the user can make this bigger or
492:32 - smaller if they need to
492:33 - however what the react team has done is
492:35 - they've chosen to make the text area
492:37 - much more similar to a text-based input
492:40 - and so they've taken the closing tag
492:41 - away they've made it a self-closing
492:43 - element and just like our inputs we will
492:47 - now add a value property to it and
492:49 - that's going to be the value that's
492:51 - inside of the text area
492:53 - once you understand that they've changed
492:55 - the text area to be a self-closing
492:57 - element essentially everything else
492:59 - we've learned about text-based inputs
493:01 - remains the same
493:03 - i suppose in the text area case we're
493:05 - probably not going to include a type
493:07 - because the text area is sort of its own
493:09 - type already but everything else should
493:12 - essentially be the same as our inputs
493:13 - which means that it's time for a
493:15 - challenge
493:17 - okay your challenge is to add a text
493:19 - area for comments to the form we do want
493:22 - to include these comments in our state
493:24 - as the user is typing into the text area
493:27 - itself so make sure to update our state
493:30 - as well
493:31 - pause the screencast work on this
493:32 - challenge
493:40 - while we're up here with our state i'm
493:42 - going to add a comments property to my
493:44 - state object and initialize it as an
493:46 - empty string then at the bottom of my
493:49 - form i'll render a text area element
493:52 - again it's self-closing
493:54 - and just like the other ones we will put
493:56 - a value in here that will be
493:58 - data dot comments that way it can be a
494:01 - controlled component
494:03 - we'll add a placeholder
494:05 - that just says let's just say comments
494:08 - we'll use the same on change handler so
494:11 - we'll have handle change
494:13 - and in order for handle change to work
494:15 - we need to make sure we assign the same
494:17 - name that we have in state so comments
494:21 - and comments
494:22 - now i've added some styling i did that
494:24 - directly to input so my text area isn't
494:28 - going to be styled that way maybe i can
494:30 - get lucky and just
494:31 - add text area directly to my styles here
494:34 - let's hit refresh
494:36 - and okay well my height's a little funny
494:38 - but that's something i could always
494:39 - change later let me add a console log
494:42 - here so i can make sure that it's hooked
494:44 - up correctly to state we'll just log
494:47 - maybe we'll just log form data dot
494:48 - comments to make sure that just that one
494:51 - piece is coming in
494:53 - okay
494:55 - awesome
494:56 - oh i guess those styles aren't really
494:58 - going to work out because it's doing
494:59 - that text indent thing that's kind of
495:01 - silly let's just put this in its own
495:02 - thing
495:05 - okay that's a little better
495:07 - awesome job the next form element we'll
495:09 - talk about is check boxes
495:13 - let's take a look at the checkbox
495:15 - element now checkboxes aren't just an
495:17 - html element on their own called
495:19 - checkbox although to be completely
495:20 - honest i kind of wish they were because
495:22 - that would just be a lot easier but no
495:25 - they are an input with a type of
495:28 - checkbox
495:30 - checkboxes are fundamentally different
495:31 - than what we have been working with so
495:33 - far with our text inputs because they
495:35 - just hold boolean values in other words
495:38 - there's not going to be some kind of
495:39 - string text of my checkbox instead there
495:42 - is a checked property that will either
495:44 - be true or false based on whether the
495:47 - user has checked the box or not
495:49 - before we jump into check let me clean
495:51 - up my input for just a second because
495:53 - right now i just have a bare box sitting
495:55 - here
495:56 - while i was cleaning up this check box i
495:58 - was reminded of something that we
495:59 - haven't yet talked about and that is
496:01 - this html4 property when we have
496:04 - something like a label that is supposed
496:06 - to be tied to another input you have a
496:08 - couple options you could nest the input
496:11 - directly inside of the children of the
496:14 - label what that does is if the label
496:15 - gets clicked it will automatically
496:18 - propagate that click down to the input
496:20 - however my personal preference is to
496:22 - keep the label as its own separate
496:24 - element and then point that label using
496:26 - html4 to the id of an input so that they
496:30 - can be associated with one another in
496:32 - plain html you're probably used to using
496:35 - just four but if you were to look under
496:37 - the hood at the underlying dom element
496:39 - it's really called html4 that's the
496:41 - javascript property for that element
496:44 - anyway that's a digression so now we
496:46 - have a checkbox that asks the person if
496:48 - they're friendly or not
496:50 - and we want to maintain this in state
496:52 - well because it's a checkbox we're not
496:54 - maintaining a string so up in state i'm
496:57 - going to add another piece of state and
496:58 - actually start separating these onto
497:00 - their own lines to save some space here
497:04 - and we'll call it is friendly and just
497:06 - to give them a benefit of the doubt
497:08 - we'll call it true as the default as i
497:11 - briefly mentioned to associate our state
497:13 - is friendly with our checkbox we're not
497:15 - going to use something like a value
497:17 - property
497:19 - but instead we're going to use a checked
497:21 - property
497:22 - now because a checkbox is either checked
497:24 - or unchecked the value that we put in
497:27 - here for checked needs to be a boolean
497:29 - or at least whatever you put in will be
497:31 - interpreted as a boolean so if i put
497:34 - something truthy in like the string hi
497:36 - it's going to check the box if i put in
497:38 - something falsey like an empty string
497:40 - it's going to not check the box but in
497:43 - the end that doesn't really matter
497:44 - because this should be a boolean value
497:46 - so i'm going to say form data dot is
497:48 - friendly now when i hit refresh do you
497:50 - think that this checkbox will be checked
497:52 - or unchecked
497:58 - it should be checked because our default
498:00 - value is true
498:02 - right there
498:04 - so when we say this box has checked we
498:06 - are having react dictate to the box that
498:09 - it is checked in fact because that's
498:11 - what state is of course now we've
498:13 - introduced a bit of a bug i can't
498:15 - uncheck the box
498:17 - maybe that's a good thing for this
498:18 - specific form we don't want people to be
498:20 - unfriendly but for the sake of argument
498:22 - let's say we want this to act like a
498:23 - normal form if we look closely at our
498:26 - handle change function we have only been
498:28 - looking at event.target.value
498:31 - however with a checkbox we are not
498:33 - looking at the value property anymore we
498:35 - are looking at a checked property so of
498:37 - course i could go out of my way to
498:39 - create a completely separate handle
498:41 - checkbox change function but we can do
498:43 - better than that let's assume for now
498:46 - that we can reuse our same onchange
498:49 - function we'll put in handle change as
498:51 - our unchanged and then let's go up to
498:54 - our candle change and we're going to
498:55 - make some modifications here the first
498:57 - thing i want to talk about is a best
498:59 - practice that we should be following and
499:01 - that is not to put the entire
499:03 - event.target.value and event.target.name
499:06 - down here inside of our set form data at
499:09 - this point in the course it's not that
499:10 - important that you understand why we're
499:12 - going to do this but a much better way
499:14 - to handle this is to restructure
499:16 - event.target and pull out the values
499:19 - that we need
499:20 - so we need name and value from
499:23 - event.target
499:24 - and then i can switch this to name and
499:27 - switch this to value
499:30 - and then as i mentioned when we're
499:31 - handling a checkbox there's a few more
499:33 - things we need to pass in one property
499:35 - that will come in is this type property
499:38 - on all of our inputs we have a type text
499:41 - email and down here our type of checkbox
499:44 - so let's bring in that type so we can
499:46 - check whether or not the input that's
499:48 - making this handle change function run
499:50 - is a type of checkbox and if it is we're
499:53 - also going to need the checked property
499:56 - and this is either going to be true or
499:57 - false depending on how the user has
499:59 - interacted with the checkbox now comes a
500:02 - bit of a trick when i'm setting my form
500:04 - data i want everything else essentially
500:06 - to be the same however the piece of
500:09 - state that i want to update if it's a
500:11 - checkbox in our case the is friendly
500:13 - property should not take on value but
500:15 - rather should take on the value of
500:17 - checked so i can use a ternary here that
500:20 - says is the type
500:22 - equal to checkbox
500:24 - if so i want you to use the checked
500:27 - property
500:28 - but if not i want you to use the value
500:31 - property let me get rid of this console
500:33 - log because that's from a previous
500:35 - screencast let's refresh we'll hit the
500:38 - checkbox and oh no there's a bug so i'd
500:41 - like you to look at the input that we've
500:44 - created perhaps compare it to some of
500:46 - the past inputs that we've created and
500:47 - see if you can figure out what we're
500:49 - missing
500:57 - all of our other inputs have a name
500:59 - property and that's something that i
501:00 - simply forgot to add in so i'm going to
501:02 - add a name this needs to match exactly
501:05 - what is in state say is friendly and
501:07 - that way when i hit refresh i should be
501:10 - able to now check the box awesome this
501:12 - is probably a good time to mention that
501:14 - everything we're learning here with
501:15 - forms can be really confusing and
501:17 - especially hard to try to memorize
501:19 - honestly as i've been preparing this
501:21 - lesson i've had to go back to some of my
501:23 - old notes and some of my own recordings
501:25 - to remember what the syntax for this
501:27 - actually looks like so just think of
501:29 - this as a pep talk now if as i'm
501:31 - teaching it you're still feeling totally
501:33 - lost and it's not making any sense at
501:35 - all that's a cause for alarm you should
501:37 - be able to generally follow along but in
501:39 - this case i'm not necessarily going to
501:41 - quiz you on the exact syntax for
501:43 - everything because well it's just as
501:45 - easy to look it up if you really need to
501:47 - okay so let's get back on that horse and
501:49 - we're going to next look at radio
501:51 - buttons
501:55 - in react radio buttons are kind of an
501:57 - interesting combination of check boxes
501:59 - and text inputs i'll talk about what i
502:02 - mean in just a second but in the
502:04 - meantime i've put together this field
502:05 - set that asks about our current
502:07 - employment status to skip some of the
502:10 - mundane stuff i've already added the
502:11 - type of radio and some ids in order to
502:14 - associate the labels using html4 with
502:17 - the correct inputs so now let's talk
502:20 - about how we can hook these radio
502:21 - buttons into our form and connect it
502:23 - with our state
502:24 - first we need a place in state to hold
502:27 - all of this information i'll add another
502:29 - property to our state called
502:31 - employment
502:33 - and where check boxes are either true or
502:35 - false radio buttons similar to inputs
502:37 - will have some kind of text value to
502:39 - them in this case i want employment to
502:42 - be some kind of string either unemployed
502:45 - part-time or full-time so on a high
502:47 - level overview what will happen is when
502:49 - the user clicks one of these options we
502:52 - will be watching for changes in these
502:54 - inputs and when a change happens it will
502:57 - take the value of that specific radio
502:59 - button that was clicked and set our
503:01 - state to that value in order to
503:04 - associate my inputs with the correct
503:07 - piece of state and also to make it so
503:09 - that i can't click all of my inputs the
503:12 - way i can now i need to add a name
503:14 - property to each one of these inputs
503:16 - like we've done before i'll set the name
503:18 - equal to employment which exactly
503:20 - matches the property that we are saving
503:23 - in state the reason we're giving the
503:24 - same name to all three of these radio
503:26 - buttons is first of all in html that's
503:29 - the way that we make it so only one of
503:31 - these radio buttons can be selected at
503:32 - any given time but it also intuitively
503:35 - makes sense because we're only updating
503:37 - one property of employment based on
503:39 - which one is selected each one of these
503:42 - inputs will have its own unique value
503:44 - and this value is what will actually get
503:47 - saved as the value in state when this
503:49 - specific input is selected
503:52 - so for the unemployment or the
503:54 - unemployed one i'll put unemployed
503:57 - for part time we'll use part time
504:00 - and for full time we'll use full time
504:02 - next i need to make sure that i'm
504:04 - listening for change events so i'll add
504:07 - my on change of handle change believe it
504:10 - or not we'll also be able to use the
504:12 - same handle change function and we'll
504:14 - see why in just a minute and technically
504:16 - speaking this should now be hooked up
504:18 - correctly to state i can test that by
504:21 - coming up here and console logging my
504:23 - state will just console log the
504:25 - employment part of it so we'll say
504:27 - console.log form data dot employment
504:30 - i hit refresh we get an empty string and
504:32 - then when i choose unemployed it
504:34 - switches to unemployed
504:36 - part time and full time there's one more
504:39 - small thing that we need to change and
504:40 - it's essentially mirroring what we did
504:42 - when we were setting our value equal to
504:45 - the state radio buttons are a little
504:47 - different because we need to specify
504:49 - what value the state should take on if
504:52 - the radio button is selected or checked
504:54 - however that means that we can't do
504:56 - controlled components in the same way
504:58 - that we did with our inputs by setting
505:00 - the value equal to whatever the current
505:02 - value of state is but that doesn't mean
505:05 - we can't control these components it's
505:07 - just that radio buttons are controlled
505:09 - in the same way that checkboxes are
505:10 - controlled here we were able to say
505:13 - checked equals form data dot is friendly
505:15 - however if we try to do the exact same
505:17 - thing with our radio buttons we're going
505:20 - to run into a little bug we'll see that
505:22 - here i'll say check equals form data dot
505:25 - employment
505:27 - and when i click one of them well some
505:29 - weird stuff is happening
505:32 - this is where radio buttons differ from
505:34 - check boxes in that when we are
505:36 - controlling the checked property we
505:38 - don't simply say checked equals form
505:40 - data.employment because unlike a
505:42 - checkbox this is not a boolean value but
505:45 - we can make it a boolean value by
505:47 - checking if the form data.employment is
505:49 - equal to the value of this specific
505:52 - checkbox so i'll do the exact same thing
505:55 - over here
505:58 - and now react is in charge of
506:00 - controlling this input rather than the
506:02 - input having its own html state let me
506:05 - walk through that one more time let me
506:07 - hit refresh
506:08 - initially the value of
506:11 - formdata.employment is an empty string
506:13 - when i click unemployed it runs the on
506:16 - change for handle change which we have
506:18 - defined here
506:19 - we're pulling the name value type and
506:21 - checked out we're setting the form data
506:24 - we're bringing in all the old form data
506:27 - now we're using name which we had set to
506:30 - employment as the key for our state that
506:32 - we're updating and it looks here says is
506:35 - the type checkbox
506:36 - in reality no this is not a checkbox
506:38 - it's a radio and so it skips the checked
506:41 - value and instead uses this value this
506:44 - value is the value that we defined here
506:47 - where we said it's either unemployed
506:49 - part-time or full-time
506:52 - then when we change state react
506:53 - re-renders our form it checks to see if
506:56 - the current form data.employment is
506:58 - equal to unemployed in our case since
507:01 - that's the one we chose then that
507:03 - becomes a true statement and therefore
507:05 - checked is true and all of these other
507:07 - checks are false
507:09 - that makes it so that only one of these
507:11 - can be checked at any given time
507:13 - in my opinion radio buttons are probably
507:15 - the most confusing element to deal with
507:17 - in react so if you have understood
507:19 - everything we just walked through then
507:21 - kudos to you truly this is a big
507:23 - accomplishment so you really should be
507:25 - proud of yourself again you don't need
507:27 - to have memorized this necessarily you
507:29 - can always come back to this lesson or
507:31 - find something on google to help you
507:33 - through the syntax of this if you need
507:35 - it again in the future but if you were
507:36 - able to follow along with the logic that
507:38 - we just talked through then that really
507:40 - is a good signal that you understand
507:42 - state you understand event handlers and
507:45 - some of these little quirks about forms
507:47 - in general there's one more form element
507:49 - i want to talk about before we move on
507:51 - and that is select boxes and we'll do
507:53 - that in the next screencast
507:57 - the last form element we're going to
507:59 - talk about in react is the select box
508:01 - with its options
508:03 - in regular html it's usually set up
508:05 - something like this where you have the
508:07 - select box i've added an id just so we
508:09 - can associate our label with it and it
508:12 - has a number of options inside with a
508:15 - value for each option
508:17 - in regular html in order to grab the
508:20 - value of whichever one is selected you
508:23 - will look for a property called selected
508:26 - although that would happen in the
508:27 - javascript but all of this is a bit
508:29 - beside the point because react has
508:31 - decided to make it a lot more similar to
508:33 - some of the other input elements that we
508:36 - have seen so far so just like we've done
508:38 - with some of the other elements we are
508:40 - going to add a value property here on
508:43 - the select itself and this value similar
508:46 - to our text inputs we'll just mirror
508:48 - what we have in state now currently
508:51 - we're not saving a favorite color in
508:53 - state so let's go ahead and add fave
508:55 - color we'll start it off as an empty
508:58 - string
508:59 - and then down here in our select we will
509:01 - say form data dot fave color
509:05 - we can reuse the same on change handler
509:08 - that we've been using with handle change
509:11 - and in order for handle change to work
509:13 - correctly we need to make sure that we
509:15 - mirror our name to exactly equal the
509:18 - property that we're saving in state
509:20 - so at this point i should be able to
509:22 - click my drop down and you won't see
509:24 - this drop down in the recording but if
509:26 - you click onto this app and hit the
509:28 - refresh icon you can test this out for
509:30 - yourself i'll click the drop down and i
509:32 - see the different colors red orange
509:34 - yellow green blue indigo and violet i
509:35 - can choose green and that will change
509:37 - our drop down to green and actually
509:40 - let's go up here and change form data
509:42 - employment to
509:43 - console log our favorite color instead
509:46 - so that way whenever i make a choice
509:49 - like green
509:50 - our state is updating according to the
509:52 - value of the option that was chosen in
509:54 - this drop-down box
509:56 - now we do have one little issue here if
509:58 - i hit refresh we see that i'm
510:00 - initializing state as an empty string
510:02 - for the favorite color but currently i
510:04 - don't have an option that represents the
510:07 - empty string value one way i can change
510:10 - this is by providing a new option where
510:12 - the value is an empty string and then
510:14 - maybe i put in something like choose
510:17 - that makes it so that the user will see
510:20 - choose here on the first option
510:22 - i'll hit refresh
510:24 - we see choose as our option but i can
510:27 - still drop this down and change it to
510:29 - any of these other colors just like we
510:31 - would expect
510:33 - and that pretty much does it for any of
510:34 - the form elements that we're going to be
510:36 - talking about in this course there's one
510:39 - last small thing we need to cover about
510:41 - forms which is how to submit a form and
510:44 - so that's what we'll cover in the next
510:46 - lesson
510:49 - now that we have a way to gather all of
510:51 - this information from our user we need
510:54 - to be able to submit the form
510:57 - in html you might be familiar with an
510:59 - input of type submit
511:03 - an input type submit is well basically
511:05 - just a button and of course the default
511:08 - option there is submit we can change the
511:10 - value to something different like
511:13 - i don't know send it in or something
511:16 - okay and that changes the text of the
511:17 - button let me put a couple breaks here
511:19 - just to move that down a bit
511:22 - however in html5 they made it so that
511:24 - the actual button element
511:27 - if it's found inside of a form acts like
511:30 - a submit button
511:32 - what's nice about the button element
511:34 - inside the form is that you're not doing
511:35 - this weird value thing because it's not
511:38 - really a value it's just the text of the
511:39 - button so i could just put submit here
511:42 - and because this button is found inside
511:45 - of a form element its type is actually
511:48 - automatically submit by default in fact
511:51 - if you didn't want it to act like a
511:52 - submit button you'd have to actually
511:54 - change the type to button which looks
511:56 - kind of funny button type button so
511:58 - let's just make use of that default
512:00 - we'll get rid of our type completely and
512:01 - therefore the default is type submit and
512:04 - clicking this button because the button
512:06 - is found inside of a form will actually
512:08 - trigger the forms on submit event
512:12 - handler
512:13 - now back in the day instead of having a
512:15 - javascript on submit handler you might
512:17 - have something like a method that tells
512:19 - you this is going to be a post request
512:22 - and you'd have an action that probably
512:24 - led to some php file.php
512:28 - and then php would take the data and
512:31 - process it do whatever you needed to do
512:33 - however we're going to essentially
512:35 - bypass that entire system we're going to
512:37 - set up the on submit event handler and
512:41 - let's create a function called handle
512:43 - submit
512:44 - and up here i'll actually create that
512:46 - function
512:48 - and what's nice about the way we have
512:50 - set up our form in react is now instead
512:52 - of having to go through every one of our
512:55 - inputs and gather the values right at
512:58 - the last second before we submit this to
513:01 - maybe an api we've been doing all that
513:04 - work all along as we've been updating
513:07 - state on every change of the inputs and
513:10 - elements in our form
513:11 - so if we pretended that we had some kind
513:14 - of submit to api
513:16 - function
513:17 - we would really just be able to probably
513:19 - pass our form data object into that
513:22 - function because it's already updated
513:25 - it's been updated after every change of
513:27 - the form
513:28 - now just like in vanilla javascript if
513:30 - you have built a form and gathered the
513:33 - data in javascript you know that
513:35 - clicking this submit button will
513:36 - actually refresh this page and it'll put
513:38 - all of the form values as part of a
513:40 - query string in the url that all harkens
513:43 - back to the original way that forms were
513:45 - submitted with an action property so the
513:48 - first thing we will always want to do in
513:50 - react when we're handling a form submit
513:53 - is to take that event object that will
513:55 - get passed to this event handler and run
513:58 - event dot prevent default
514:01 - preventing the default means that it
514:03 - won't refresh our page and essentially
514:05 - re-render our app with all of these
514:07 - default values and state preventdefault
514:10 - just stops all of that from happening
514:11 - and makes it so that we can then run
514:13 - code the way that we actually want to
514:16 - just to see this working i don't
514:18 - actually have a function called submit
514:19 - to api so let's just console log
514:22 - our form data so before we test this out
514:25 - let me remove some of these console logs
514:27 - so we can actually see what we're
514:29 - working with i'll hit refresh type in
514:32 - some generic values here
514:36 - okay and we'll hit submit and we can see
514:39 - we got our state object everything has
514:42 - been automatically updating as we've
514:43 - been typing things into our form and
514:46 - maybe just to drive the point home let
514:47 - me comment out this prevent default
514:50 - and i'll type in some stuff here
514:52 - and hit submit
514:54 - you can see my form refreshed and then
514:56 - my url actually updated i'm not sure if
515:00 - that comes through in the recording but
515:01 - this is the url and it took all of my
515:03 - values based on the name properties
515:06 - stuck it as query strings in the url and
515:08 - it's just not what we want to do
515:10 - okay with all of that behind us i do
515:12 - want to get your hands on the keyboard
515:14 - practicing some of the things we've
515:16 - learned with forms so that will be what
515:18 - we do in our upcoming challenge
515:22 - okay we've covered a lot of ground so
515:24 - before we move on i want to test your
515:27 - skills and your knowledge make sure you
515:28 - were paying attention so with this quiz
515:31 - pause the screencast click into the
515:33 - editor type down your answers and when
515:35 - you've answered all the questions click
515:37 - play and we'll go over the quiz together
515:46 - number one in a vanilla javascript app
515:49 - at what point in the form submission
515:51 - process do you gather all of the data
515:53 - from the filled out form
515:55 - all of that data gathering happens right
515:57 - when the form is submitted
515:59 - i should say right before the form is
516:02 - submitted usually you listen for the
516:04 - form submit event and then you'll go to
516:07 - each one of the elements in the form and
516:09 - gather the data
516:10 - so in number two it asks basically how
516:12 - is that different in a react app well in
516:15 - a react app we're basically not allowing
516:18 - the form elements to maintain their own
516:20 - internal state but instead the component
516:23 - that houses the entire form has some
516:26 - react state and that state is updated on
516:30 - every change of the elements in our form
516:33 - so for a text form it's every keystroke
516:36 - that the user types into their keyboard
516:38 - for a checkbox that's every time the
516:39 - checkbox changes or the radio buttons
516:41 - change and so forth so in short we
516:45 - gather all the data as the form is being
516:48 - filled out
516:50 - and of course all that data is held in
516:51 - local state
516:53 - number three which attribute in the form
516:55 - elements for example the value name on
516:58 - change etc should match the property
517:00 - name being held in state for that input
517:02 - well it's the name property
517:05 - essentially we use that name property to
517:07 - help us in our on change so that we know
517:10 - which property in state to update
517:13 - whenever a change happens
517:16 - number four oh that a should not be
517:18 - there what's different about saving the
517:20 - data from a checkbox element versus
517:22 - other form elements
517:24 - in all the other form elements we're
517:26 - using the value property to know how we
517:28 - should update our state but with a check
517:31 - box we're looking specifically for the
517:33 - checked property
517:35 - okay and number five how do you watch
517:38 - for a form submit and how can you
517:40 - trigger a form submit
517:42 - simply enough we can add an on submit
517:45 - handler
517:46 - on the form element
517:49 - that's how we can watch for a form
517:51 - submit and we will pass a function to
517:53 - the on submit handler that will run
517:55 - whenever the form is submitted so then
517:57 - how do you trigger a form submit usually
518:00 - that will happen with some sort of
518:01 - button click
518:04 - as a quick reminder in the markup if you
518:07 - have a button element that's inside of a
518:10 - form
518:11 - it will automatically act as a submit
518:14 - button for that form alternatively and
518:16 - what kind of seems like the older way to
518:18 - me is to use an input
518:21 - type submit
518:23 - but to me there's not really a benefit
518:25 - to doing that
518:26 - okay awesome job on this quiz hopefully
518:29 - you were able to answer all these
518:30 - questions
518:31 - next we're going to put what we've
518:33 - learned about forms into practice
518:37 - in this challenge your job is to connect
518:39 - our existing form to some local state
518:42 - and update that state whenever the user
518:44 - interacts with the form as we've been
518:47 - doing i want you to make sure that you
518:48 - only create a single handle change
518:50 - function that can manage the state of
518:52 - all four of these inputs the email
518:55 - address password password confirmation
518:57 - and the newsletter check box then when
519:00 - the user clicks sign up you'll run
519:02 - through some logic that makes sure that
519:04 - the password and password confirmation
519:06 - match each other and if they do you
519:08 - should log successfully signed up to the
519:10 - console and if they don't you should say
519:12 - passwords do not match in the console
519:15 - additionally when the form submission
519:16 - happens i want you to check if the check
519:18 - box for the newsletter was checked and
519:21 - if so log thanks for signing up to our
519:23 - newsletter to the console if not don't
519:26 - console.log anything there was a lot of
519:28 - syntax that we learned when we were
519:29 - going through the different pieces of
519:31 - the form so don't be afraid to open up
519:33 - in another tab some of the previous
519:35 - lessons that we've gone through as a
519:36 - reference so pause the screencast and
519:38 - work on this challenge
519:46 - all right let's do this i'm going to
519:48 - start with some state
519:50 - i'll create
519:52 - state called form data and set form data
519:55 - using react.use state
519:58 - that will begin as an object and i can
520:00 - provide this object some default values
520:03 - let's have an email property that's
520:05 - empty
520:06 - a password property that is empty
520:09 - we'll call this password confirm
520:12 - and let's say
520:14 - we be joined newsletter
520:16 - this one will be a boolean because
520:18 - that's what checkboxes deal in is
520:20 - booleans and so we'll default it as
520:22 - false or maybe if we're good marketers
520:24 - will defaulted as true
520:27 - and then what we can do is
520:29 - add these properties as a name field in
520:32 - each one of our inputs
520:36 - so we'll add name equals and then we'll
520:39 - put exactly what those properties were
520:41 - from up above
520:43 - while i have all of these selected i'm
520:45 - going to add an on change for every one
520:48 - of them
520:49 - that will point to a function that i'll
520:51 - create called handle change
520:53 - and then we'll also give a value
520:55 - property
520:56 - and i'm going to change this on our
520:59 - check box because that should be checked
521:01 - not value this way they can be
521:03 - controlled elements or controlled inputs
521:05 - and i will make sure that we're pointing
521:07 - form data
521:08 - dot and then we'll paste in the values
521:11 - that we copied above let's fix our check
521:14 - box so this should say it's checked if
521:17 - form data dot joined newsletter is true
521:20 - or not checked if it's false
521:23 - and now let's go create our handle
521:25 - change function
521:28 - from the event i'm going to pull out the
521:31 - name property value property type so
521:34 - that we can check if it's a check box
521:36 - that made the change and the checked
521:39 - property we'll get all of those from
521:42 - events.target
521:43 - target represents the element that was
521:46 - modified in the event
521:48 - then i can run my set form data function
521:52 - and i need to
521:53 - access my previous form data so we'll
521:55 - say preform data and this will be the
521:58 - parameter to my callback function
522:00 - and i'm going to use that little trick
522:02 - where i can return an object by
522:04 - surrounding it in parentheses that way i
522:06 - can make use of the implicit return
522:08 - without having to open the body of this
522:11 - function and then use the return keyword
522:13 - and so forth and so i'm returning an
522:16 - object and that object should have all
522:18 - of the properties of the
522:21 - previous form data but then i want to
522:23 - update the property based on the name
522:26 - value that we pulled from the input that
522:29 - is making this change
522:31 - that's using this computed property
522:32 - syntax and the value would normally just
522:35 - be value if i didn't have this checkbox
522:37 - here because all of my other inputs are
522:39 - updating a value property on the input
522:42 - itself however because i do have the
522:44 - checkbox i'm going to check if the type
522:47 - is
522:48 - checkbox and if it is then i want to
522:52 - set the checked property of that
522:54 - checkbox that's what's going to either
522:56 - be true or false based on whether the
522:58 - user has checked the box or not if the
523:00 - type is not a checkbox then we can just
523:02 - use the value property to update our
523:04 - state
523:05 - let's do a quick check before we get to
523:07 - the handle submit part of the challenge
523:09 - i'm just going to console log my form
523:11 - data
523:14 - and
523:14 - let's see if
523:16 - updates happen well it's good to see
523:18 - that my checkbox is automatically
523:19 - checked because that means that it's
523:21 - connected correctly to state
523:23 - and our default was set to true
523:26 - so if i uncheck it we get false that's
523:28 - good email address
523:31 - password
523:33 - and confirm password
523:35 - cool everything seems to be connected
523:37 - the way i would expect
523:39 - so we can get rid of this console log to
523:41 - clean up our logs down there
523:44 - at this point all that's really left is
523:46 - some vanilla javascript logic that we
523:48 - need to write inside of our handle
523:50 - submit and hopefully when you are doing
523:52 - this challenge you notice that i already
523:54 - set up our on submit to run the handle
523:56 - submit function and because our button
523:59 - is inside of the form element it acts as
524:01 - a submit button automatically so
524:03 - clicking the sign up button will trigger
524:05 - the submit event on the form and
524:08 - therefore will run the handle submit
524:10 - function and well i accidentally deleted
524:12 - the event dot prevent default i don't
524:14 - want to delete that i need that
524:16 - otherwise submitting the form will
524:18 - submit it as if it were submitting to an
524:20 - old php or backend which would then take
524:24 - all of these values and submit them as
524:25 - query strings in the url and refresh the
524:27 - page and everything essentially i just
524:29 - don't want to do any of that so
524:31 - event.preventdefault is always going to
524:33 - be the first thing that you'll do at the
524:35 - top of your handle submit function
524:37 - and yeah like i mentioned we just have
524:39 - some vanilla javascript logic to work
524:41 - through so if the password and the
524:42 - confirmation match each other we need to
524:45 - log successfully signed up so i can just
524:48 - say if
524:50 - form data dot
524:51 - password
524:53 - is the exact same as form data dot
524:56 - password confirm
524:58 - then console.log
525:01 - successfully signed up and in any other
525:03 - instance we will console log
525:08 - passwords oh this says to not match that
525:10 - should say do not match passwords
525:12 - do not match
525:14 - and then separately we can process the
525:16 - data for the
525:18 - newsletter and if form data dot let's
525:21 - see what was it called
525:23 - joined newsletter
525:25 - if that's a true value then we will
525:28 - console log
525:30 - thanks for signing up for our newsletter
525:35 - okay let's give this a test i'll open my
525:37 - console
525:38 - put in an email address
525:41 - password
525:42 - confirmation that is matching
525:44 - and we'll have the checkbox checked i'll
525:46 - hit sign up
525:48 - successfully signed up and thanks for
525:49 - signing up for a newsletter let's say i
525:51 - changed this password to something
525:52 - different passwords do not match
525:55 - and well you know what that leads me to
525:56 - something that i didn't mention in the
525:58 - challenge but probably would make sense
526:00 - to do
526:01 - if the passwords do not match i don't
526:03 - want to make the person think that they
526:04 - signed up for the newsletter so i think
526:07 - i'll just put a return right here after
526:09 - my passwords do not match so that this
526:11 - if statement never gets run in case they
526:13 - don't match
526:14 - let's try this again we'll hit refresh
526:18 - and we will make the passwords not match
526:21 - hit sign up and we just get passwords do
526:24 - not match okay
526:25 - then if we do make the match
526:28 - and we
526:28 - uncheck
526:30 - we get successfully signed up without
526:32 - the thanks for signing up to our
526:33 - newsletter awesome obviously we didn't
526:35 - touch on every aspect of forms that
526:37 - we've learned about but a form like this
526:39 - is a lot more common for you to develop
526:41 - than something that has every kind of
526:43 - form input under the sun awesome work on
526:46 - this little mini section on forms
526:48 - believe it or not we're really rounding
526:49 - the corner almost at the finish line for
526:51 - this section we just have a few more
526:53 - things to learn before we can really tie
526:55 - together the remaining aspects of our
526:58 - meme generator project and finally tie a
527:00 - bow on that and call it complete so when
527:02 - you're ready let's jump right in
527:06 - now that we've learned how to save input
527:09 - data from text fields into state let's
527:12 - revisit our meme generator and get it to
527:14 - an almost complete state
527:16 - we created earlier the top text and
527:18 - bottom text fields but they're not
527:19 - hooked up to anything right now so your
527:21 - task is to connect the inputs into state
527:24 - so that every keystroke they update the
527:26 - top text property and state and the
527:28 - bottom text property and state
527:30 - now i've done a little bit of css heavy
527:32 - lifting for you and that's because i
527:34 - really want to focus on the state part
527:35 - of react right now
527:37 - but in short i've added a wrapper around
527:39 - our image so that the whole thing is
527:41 - considered the meme i made that meme
527:43 - position relative so that i could set
527:46 - the h2s to be position absolute this
527:49 - meme text is styling it to look kind of
527:52 - like a classic meme text and the top and
527:54 - bottom classes simply stick it at the
527:56 - top or at the bottom of the container
527:59 - element and as you can see down here
528:01 - i've hard coded the top text and bottom
528:03 - text but part two of your challenge is
528:05 - to replace that hard-coded text with the
528:07 - text that we are saving in state
528:10 - pause the screencast and work on this
528:11 - challenge
528:18 - i think the first thing i'll do is add
528:20 - the properties that i need to my inputs
528:23 - so that i can be watching for changes
528:25 - let's add a name property to each one
528:28 - say name equals and then we'll have
528:32 - this one is our
528:34 - top text
528:35 - and this one is our bottom text
528:38 - next we'll add our value properties so
528:40 - that these can be controlled components
528:42 - and those will be meme dot
528:44 - and then top text for the top one and
528:48 - bottom text for the bottom one
528:50 - and then we're going to need an onchange
528:52 - event handler
528:54 - we'll call it handle change
528:56 - and then we'll create that function
529:00 - i'm going to pull in the event so that i
529:02 - can get the name and value properties
529:05 - from our event so i'll just restructure
529:07 - those now
529:10 - and that's going to be from event.target
529:12 - and then i will essentially be doing
529:14 - exactly what i did with get meme image
529:16 - here with set meme
529:18 - i'll type it out for the practice we're
529:20 - going to set the meme
529:21 - and i do need access to the previous
529:24 - version of the meme
529:26 - i need to return an object which if i
529:28 - want to do that as an implicit return i
529:30 - need to wrap my object my curly braces
529:33 - that represent an object in parentheses
529:36 - so that it doesn't think i'm just trying
529:37 - to open up the body of the function
529:40 - and we'll copy over all the properties
529:43 - of the previous meme
529:44 - and we will change either the top text
529:46 - or the bottom text property depending on
529:48 - what name gets pulled in from the target
529:51 - so i'll use that computed property name
529:54 - and set its value to value
529:56 - lastly i will update my hard-coded text
529:59 - to look at our object values and state
530:02 - so this will be meme dot top text
530:06 - and meme
530:08 - dot
530:09 - bottom text
530:11 - okay let's cross our fingers i'll hit
530:13 - save
530:16 - one does not
530:18 - simply
530:19 - walk
530:20 - into
530:21 - mordor
530:22 - ain't that the truth now it's kind of
530:24 - like playing roulette here if i click
530:26 - get a new meme image it's probably not
530:28 - going to work out so great but we'll see
530:31 - that our text is staying on top and on
530:34 - bottom and switching the meme image can
530:36 - actually be kind of a fun exercise
530:38 - because your text may or may not apply
530:40 - to the new meme image very well awesome
530:42 - work this is super exciting basically
530:44 - our meme images sort of had an mvp a
530:46 - minimum viable product to push this out
530:49 - to our customers in reality we are still
530:52 - importing our memes data from a
530:53 - javascript file when what we really want
530:56 - to do is get that from an api there's a
530:58 - few more things we need to learn in
531:00 - order to do that successfully and that
531:02 - is what we're going to start talking
531:03 - about in the next screencast
531:07 - a very common thing you'll need to do in
531:09 - react is interact with an api that lives
531:11 - outside of your application usually what
531:14 - you're doing is either requesting
531:16 - information from an api or sometimes
531:19 - submitting information to an api
531:21 - whenever you're requesting information
531:23 - from an api in react usually you want to
531:26 - display or use that information somehow
531:29 - so getting data from an api in react
531:31 - consists of essentially two parts first
531:33 - of all you need to get the data
531:36 - and that would be using something like
531:38 - fetch or another tool for getting data
531:40 - like axios
531:42 - the second step would be to then take
531:44 - that data and save it to state
531:48 - once it's saved in state your
531:49 - application can interact with it it can
531:52 - display it on the screen and all of the
531:54 - other benefits that come with saving
531:56 - something in state
531:57 - so let's see some preliminary syntax as
531:59 - to what that might look like and then as
532:01 - a spoiler alert i'm going to show you
532:03 - why this is broken to do it this way to
532:05 - start us off let's do a fetch request to
532:07 - the star wars api this is just a very
532:10 - simple api that will get us some
532:12 - information about star wars characters
532:14 - and planets and movies and stuff like
532:17 - that i'll go ahead and resolve the
532:19 - promise that i get back from fetch it
532:21 - will receive a response which will be
532:24 - json i want to turn that into a
532:26 - javascript object that i can use
532:28 - and then with that data
532:30 - we'll just console.log the data for now
532:34 - okay awesome we have this object here
532:36 - i'm not going to bother digging into
532:38 - this object i'm just going to stringify
532:40 - the entire thing so let me put that into
532:43 - state
532:44 - and you know what i'm actually using
532:46 - data in a couple places let's maybe call
532:48 - this star wars data
532:50 - and set star wars data
532:53 - and then instead of console logging we
532:55 - will set star wars data with the data
532:58 - that we get back and then i need to make
533:00 - sure to update down here as well
533:03 - let's hit refresh and see what we get
533:05 - okay there's the data from my api
533:07 - awesome everything seems to be working
533:09 - swimmingly
533:11 - however let me illuminate something
533:13 - that's going on behind the scenes right
533:15 - now i'm going to console.log component
533:19 - rendered
533:20 - every time the app component renders or
533:22 - re-renders by react it will run this
533:25 - console log so let me open my console
533:28 - hit refresh
533:30 - and look at this
533:32 - we've got an infinite loop of component
533:34 - rendering let me comment this out
533:37 - and hit refresh
533:39 - now i want you to pause and think for a
533:41 - second why was this console log running
533:43 - over and over and over again pause now
533:46 - and see if you can come up with an
533:47 - explanation for why it was doing that
533:56 - the reason we were stuck in an infinite
533:58 - loop is because this fetch lives on sort
534:00 - of the top level of our component
534:03 - because of that anytime the component
534:05 - renders it's going to call fetch
534:08 - and every time it calls fetch it's going
534:10 - to set the star wars data which is
534:13 - updating our state and therefore causing
534:16 - react to re-render this component and
534:18 - then it's running fetch again
534:21 - setting the state re-rendering the
534:23 - component calling fetch again setting
534:24 - the state re-rendering the component i
534:26 - think you get the idea in fact even
534:28 - though we're not seeing that happening
534:29 - with this console log commented out it's
534:32 - still being re-rendered in the
534:33 - background so i'm going to comment this
534:35 - out so that it actually stops
534:37 - re-rendering and in fact the only thing
534:39 - we really need to comment out is where
534:41 - it says set star wars data when we had a
534:44 - console log here
534:47 - i'll uncomment this component rendered
534:50 - and open my console we'll see that we're
534:51 - no longer in an infinite loop and that's
534:53 - because we're not setting state causing
534:55 - the component to re-render so this x is
534:58 - a perfect springboard into the next
534:59 - topic that we're going to learn about
535:01 - and that is how to handle side effects
535:04 - in react
535:05 - so that is what we will tackle next
535:10 - we're now embarking on a journey that
535:12 - leads to oftentimes considered one of
535:14 - the most confusing parts about react and
535:16 - that is how to manage side effects to
535:19 - really understand what i mean by side
535:21 - effects let's take a look for a second
535:23 - at what react's primary tasks are first
535:25 - of all react is in charge of working
535:27 - with the dom in the browser to render
535:30 - some kind of user interface to the page
535:32 - the react team has created a really
535:34 - simple interface to allow us as
535:37 - developers to accomplish this with jsx
535:40 - and elements that look just like html
535:42 - under the hood of course react is taking
535:45 - that jsx and turning it into elements
535:47 - that can be displayed on the page
535:50 - another task which we have mostly been
535:52 - learning about in this section is to
535:53 - manage state for us and if you think
535:56 - carefully about it it's managing that
535:57 - state between the render cycles in other
536:00 - words react can remember state values
536:02 - from one render to the next so that's
536:05 - another thing that react does and we are
536:07 - allowed to hook into that state using
536:09 - the use state hook and then naturally
536:11 - its next task is sort of a combination
536:13 - of these two it needs to keep the user
536:16 - interface updated whenever state changes
536:18 - there certainly are other tasks that
536:20 - react is accomplishing but you can
536:22 - probably boil the main three tasks down
536:23 - to these three so then what is react not
536:26 - able to handle on its own the major one
536:29 - that we're going to be discussing is any
536:31 - kind of side effects or i put outside
536:34 - effects here all that really means is
536:36 - anything that lives outside of react's
536:39 - purview or reach so some examples of
536:42 - this are local storage on your own
536:45 - browser for example we can of course use
536:47 - code to access local storage but react
536:50 - has no real hand in interfacing with
536:53 - local storage along that line any kind
536:55 - of api or database interactions that
536:57 - occur in our code we can write that code
537:00 - to interact with apis but react is not
537:02 - in charge of that code or rather react
537:05 - has no way to know which apis we're
537:07 - going to be reaching out to similarly
537:09 - any kind of subscriptions you might have
537:11 - if you include web sockets in your
537:13 - application for example you have a chat
537:15 - application that updates live and as it
537:18 - turns out even if you have two different
537:20 - pieces of internal state that you need
537:22 - to sync together or have one of those
537:24 - pieces of state react to a change in
537:26 - another piece of state react can manage
537:29 - the state of each one behind the scenes
537:31 - but it's not really looking at any kind
537:33 - of crossover between those two states so
537:36 - in the end it boils down to basically
537:38 - anything that react is not in charge of
537:40 - can be considered a side effect or an
537:42 - outside effect
537:43 - so using this api interaction for an
537:45 - example if we look at our code from
537:47 - before i commented it out so that it
537:49 - wouldn't keep infinitely rendering we
537:51 - can see that react is essentially just
537:53 - doing what it's told it's trying to put
537:55 - something on the screen it's trying to
537:57 - manage state and it's trying to keep
537:59 - state and the screen in sync if state
538:02 - ever changes it needs to re-render the
538:04 - component as a side note if this were
538:06 - receiving props and somehow those props
538:09 - were also to change for example if those
538:11 - props were a piece of state in a higher
538:13 - up component that then changed this
538:15 - component would also re-render
538:17 - so with our code living here on the top
538:20 - level of our component react really
538:22 - doesn't have a way to stop us from
538:24 - setting the state here causing the
538:26 - re-render which would then set the state
538:28 - again causing the re-render and so forth
538:30 - in that infinite loop
538:32 - so the react team gives us a really nice
538:34 - hook called use effect in the
538:37 - documentation this is called the effect
538:39 - hook and i like to think of it as a tool
538:41 - that react has given us developers to
538:44 - use sort of like a blank canvas that
538:46 - allows us to interact outside of the
538:49 - react ecosystem which again mostly just
538:52 - consists of state props and the user
538:54 - interface that it puts on the page
538:56 - and i like to think of use effect as
538:58 - being a tool that allows us to
539:00 - synchronize react state with those
539:03 - outside systems like our local storage
539:05 - or an api now before we jump in i've
539:08 - included here a link to the
539:10 - documentation if you click this slide
539:12 - you will be sent to this page where you
539:14 - can learn about using the effect hook
539:16 - again think of it kind of like reading
539:18 - the textbook before coming to class now
539:20 - you don't have to scour every single
539:22 - word in the documentation but i do want
539:24 - you to take a look at it read through it
539:25 - and then when you've got a cursory
539:27 - understanding of the effect hook then
539:29 - we'll jump into the next screencast as
539:31 - you're reading through this
539:32 - documentation you'll run into a line
539:34 - that says if you're familiar with react
539:36 - class lifecycle methods you can think of
539:38 - the use effect hook as component did
539:40 - mount componented update and component
539:42 - will unmount combined
539:44 - so if you are familiar with class
539:46 - lifecycle methods i actually want to
539:48 - implore you not to consider this tip if
539:51 - you have no idea what i'm talking about
539:53 - then that's totally fine you can forget
539:55 - everything that i just said about class
539:57 - cycle methods but if you are familiar
539:58 - with class life cycle methods the modern
540:01 - advice these days is not to try and
540:03 - think of the use effect hook as a
540:04 - combination of these life cycle methods
540:07 - but rather to work on retraining your
540:09 - approach to understanding side effects
540:11 - and react i know that might be strange
540:13 - for me to be contradicting the
540:15 - documentation but i know that i'm backed
540:17 - up because this is an article by dan
540:19 - abramov who is one of the core
540:21 - contributors to react and he writes this
540:23 - giant blog post about understanding use
540:26 - effect and essentially goes in depth
540:28 - into how we should not be thinking of
540:30 - use effect as a way to hook into life
540:32 - cycle methods but rather as a way to
540:34 - deal with side effects and react if you
540:36 - really want a deep dive you can click
540:37 - this slide to go to this page but if
540:40 - you're learning react for the first time
540:41 - you do not need to go this in depth into
540:43 - use effect at this time so once you've
540:46 - had a chance to skim through the react
540:47 - documentation on the effect hook let's
540:49 - jump in and start learning how to manage
540:52 - side effects in react
540:56 - let's begin refactoring our code here to
540:58 - use the use effect hook just as we can
541:01 - access the use state hook on top of the
541:03 - react object we can do the same with use
541:06 - effect so i can create a side effect by
541:09 - using react dot use effect and use
541:12 - effect has one required parameter and an
541:14 - optional second parameter in this
541:16 - screencast we're just going to learn
541:18 - about that first required parameter and
541:20 - in the next one we'll talk about the
541:22 - optional second parameter the required
541:24 - first parameter for react.use effect is
541:27 - a function a callback function and maybe
541:30 - so that's perfectly clear i'm going to
541:32 - write this out as a function declaration
541:34 - although in practice you'll almost
541:36 - always see this as an arrow function and
541:38 - that's what we'll eventually transition
541:39 - to as well
541:40 - and this function acts as a place for us
541:43 - to be able to put our side effects code
541:46 - in the little example we have here this
541:48 - fetch request is considered a side
541:50 - effect and that's because it's reaching
541:52 - outside of react's ecosystem but also
541:55 - trying to set some state in the process
541:58 - remember this was infinitely looping
542:00 - because on the top level of our
542:03 - component it was running this fetch and
542:05 - setting the star wars data which was
542:07 - modifying state and therefore
542:09 - re-rendering the app which then just ran
542:11 - all the code again in this infinite loop
542:13 - so let's move this fetch request inside
542:17 - of our use effect and that's it inside
542:20 - of the callback function that we provide
542:22 - to use effect we're allowed to put our
542:23 - code that has other side effects that
542:25 - interact with systems outside of react
542:28 - and maybe more specifically interact
542:30 - with those outside systems to keep them
542:32 - in sync with our local state in this
542:34 - component now i do have a confession to
542:37 - make we're actually only halfway there
542:39 - if i uncomment my console log and hit
542:41 - save you'll see that we're still having
542:43 - the same problem we were having before
542:45 - where we're stuck in an infinite loop
542:47 - let me comment this line out so that it
542:49 - doesn't keep setting state so what
542:51 - exactly is going on i thought use effect
542:53 - was going to fix this problem well it
542:55 - turns out that the code we put inside of
542:57 - this callback function if we don't
542:59 - provide a second parameter to our
543:02 - react.usefx function then there's almost
543:05 - no difference between putting our code
543:07 - inside of use effect and putting it
543:09 - outside of use effect on the top level
543:11 - of our component there is one small
543:13 - difference and that is anything that we
543:15 - put inside of this callback function is
543:17 - guaranteed to run only after the user
543:21 - interface has been painted to the screen
543:23 - in other words only after react has
543:26 - taken our user interface our elements
543:28 - and created real elements on our page
543:31 - so this callback function is guaranteed
543:33 - to run in a specific order only after
543:36 - this has been
543:37 - placed on the dom but for our purposes
543:39 - here there's basically no difference
543:41 - we're still stuck in an infinite loop
543:44 - so in the next screencast we're going to
543:45 - start diving into use effect and
543:47 - understanding first why we need to
543:50 - provide the second parameter and then
543:52 - what that second parameter is and how it
543:54 - solves this problem
543:57 - i've made a couple modifications to our
543:59 - app here to try and demonstrate exactly
544:02 - what's happening within use effect i
544:04 - came up with the simplest little counter
544:06 - app that just has a single button that
544:08 - says add
544:09 - and something that displays what the
544:11 - current count is in state the reason i
544:13 - did this was just to make it so that we
544:15 - had a really easy way to trigger
544:17 - re-renders and state changes on our app
544:20 - here i also replaced our use effect
544:22 - callback function with just a console
544:24 - log that lets us know that this effect
544:26 - function ran
544:28 - you can already see what's happening
544:29 - down in the console but if i refresh the
544:31 - site we'll first get the component
544:33 - rendered console log and then we get the
544:36 - effect ran console log as we talked
544:38 - about before the function we passed to
544:40 - use effect will run after every render
544:43 - of our component it essentially makes it
544:45 - no different than moving our console log
544:48 - outside onto the top level of our
544:50 - function just like we have here
544:52 - which means if we ever wanted to change
544:54 - the state within our use effect we get
544:57 - caught in that loop like we've talked
544:59 - about a few times already now with my
545:01 - little counter i can trigger a manual
545:03 - re-render by just clicking the add
545:05 - button and we can see that when i click
545:07 - the add button it updates the state
545:09 - behind the scenes so it changes from
545:12 - zero to one and it re-renders our
545:14 - component now with count equaling the
545:17 - number one we get our console log which
545:20 - rendered because it's a function call
545:22 - here on the top level of our component
545:24 - it then would have skipped down here and
545:26 - rendered our ui so that it could display
545:29 - the correct count now that count is set
545:31 - to one and last of all it ran our effect
545:34 - which of course runs after every render
545:37 - as we talked about the first parameter
545:39 - to use effect is this function but
545:41 - there's a second parameter which
545:42 - although i mentioned is optional is
545:45 - something that you will almost always
545:47 - include and that is something called a
545:49 - dependencies array now don't let the
545:52 - name confuse you the concept is actually
545:54 - not too terribly difficult the array
545:56 - that we pass as a second parameter to
545:58 - use effect will contain values that if
546:02 - they change from one render to the next
546:04 - will cause this effect to run in other
546:07 - words it limits the number of times that
546:09 - this effect will run or rather it
546:12 - determines when this effect will run
546:14 - instead of running after every single
546:16 - render
546:17 - now if i leave this as an empty array it
546:21 - effectively tells react i want to run
546:23 - this function on the very first render
546:25 - of my component but then there are no
546:27 - dependencies to watch and trigger this
546:30 - effect to run again so it ends up being
546:32 - it runs once when the component first
546:35 - loads and that's it never again we can
546:37 - see this in action by refreshing our app
546:40 - seeing that we did get effect ran and
546:42 - then adding to our count
546:44 - and from here adding to our account is
546:47 - no longer running this effect and that's
546:49 - because we have an empty array which is
546:51 - not looking for any changes between one
546:54 - render and the next now if i wanted to
546:56 - run this effect every time count changed
546:59 - i would have to make sure that my effect
547:02 - knew
547:03 - that count was one of the dependencies
547:05 - that signaled to the effect to run again
547:08 - so now i hit refresh it will run once
547:11 - which is why we get effect ran in the
547:13 - console and now every time i hit add i'm
547:16 - also running my effect again
547:18 - under the hood this is what's happening
547:20 - when i hit refresh state starts out as
547:23 - zero and the component will take count
547:26 - and replace it with a zero everywhere it
547:28 - can find it so here we have an array
547:31 - with the number zero in the first index
547:33 - or the zero index then when i click add
547:36 - react will update the count from zero to
547:38 - one and it will re-run my function or in
547:42 - other words re-render my app component
547:44 - where everywhere i'm using count is now
547:47 - one
547:48 - remember this used to say count well the
547:50 - second time around it changed from zero
547:52 - to one so now it's running this
547:54 - component
547:55 - with an array where one is the first
547:58 - index or the zero index in that array
548:01 - then it's going to look at the last time
548:04 - it saw this dependencies array and it's
548:06 - going to compare an array with the
548:09 - number zero
548:10 - to an array with the number one
548:13 - now i probably shouldn't use triple
548:14 - equals because that's not exactly what's
548:16 - happening here let me say
548:17 - okay compared to it's going to compare
548:19 - this array to this array and if any item
548:22 - in this array is different then it knows
548:25 - to rerun this function
548:27 - now here's the question what if i were
548:29 - to hard code an array with the number 0
548:32 - in here let me hit refresh we can see
548:34 - that our effect did run but now what
548:36 - will happen when i cause a re-render to
548:39 - trigger if you need to you can pause and
548:41 - think through that for just a second
548:49 - well i can click add and we'll see that
548:51 - my effect is not running again
548:54 - why do you think that is
549:00 - well with a hard-coded zero in here
549:02 - every time the app re-renders and use
549:05 - effect looks at my second parameter of
549:07 - this array it's comparing the array with
549:10 - the 0 as the first item in it to an
549:13 - array with a 0 as the first item in it
549:15 - it's going to see that those are exactly
549:17 - the same values and therefore it will
549:19 - not run this function
549:21 - and that's why it's called a
549:23 - dependencies array use effect depends on
549:26 - these values to know whether or not it
549:29 - should rerun our
549:30 - effect so again when i put count i
549:33 - refresh the page count starts at zero i
549:35 - hit add count is one it notices that
549:38 - that has changed and therefore it reruns
549:41 - our effect i feel like i've repeated
549:43 - myself a lot here but i'm hoping that
549:44 - the concept will sink in the more times
549:46 - you hear it okay it's high time that you
549:48 - get your hands on the keyboard so let me
549:50 - type out a quick challenge
549:53 - okay it's your turn to write the use
549:55 - effect the use effect should run anytime
549:57 - the count value and state changes and
549:59 - for now it's just going to console.log
550:01 - something like effect function ran pause
550:04 - now and work on this challenge
550:13 - we can start our effect by using react
550:15 - dot use effect as a side note just like
550:18 - we could the structure use state from
550:21 - the import statement up here we can also
550:23 - restructure use effect if we wanted to
550:26 - and just say use effect in fact i would
550:28 - suppose this might be the more common
550:31 - way that you'll see it but just like
550:32 - with use state i'm going to use react
550:34 - dot use effect just so that it's very
550:36 - clear where use effect is coming from
550:39 - use effects takes a function as its
550:41 - first parameter before we had a function
550:44 - declaration like this
550:45 - however i am going to use an arrow
550:48 - function because that is how you will
550:49 - most commonly see it
550:51 - this is just going to console.log
550:55 - effect function ram
550:57 - now here's something tricky without the
550:59 - second parameter we know that this
551:00 - function will run any time the app
551:02 - component re-renders and right now the
551:05 - only way we're causing re-renders is by
551:08 - clicking the add button let me hit save
551:10 - i can click the add button and we'll see
551:12 - basically the same thing that we had
551:14 - when we had a dependencies array however
551:16 - as i mentioned there's almost never a
551:18 - reason to not include your dependencies
551:20 - array there certainly are instances
551:23 - where it may be required but especially
551:25 - on the beginning end of learning react
551:27 - you almost always will need to include
551:29 - your dependencies inside this array if
551:32 - you have no dependencies remember that
551:34 - means that your effect function will
551:36 - only run once the very first time your
551:38 - component is rendered however our
551:40 - challenge specifies that it should run
551:42 - anytime count changes so let's very
551:45 - explicitly put count in here and now i
551:47 - hit save anytime count changes we get
551:50 - effect function ran in the next lesson
551:52 - let's bring back our star wars data and
551:54 - get that displaying on the screen again
551:56 - but this time without an infinite loop
551:58 - occurring in the background
552:02 - it's quiz time again pause the
552:04 - screencast read through the questions
552:06 - type down your answers and when you're
552:07 - ready hit play and we'll go through the
552:09 - quiz together
552:17 - what is a side effect in react and what
552:20 - are some examples put very basically a
552:22 - side effect is essentially any code you
552:24 - want to run that react is not in charge
552:27 - of handling a majority of the time you
552:29 - can think of that as your code that will
552:31 - have some kind of effect on an outside
552:34 - system so some examples of that might be
552:37 - local storage
552:39 - anytime you interact with an api
552:42 - something like web socket subscriptions
552:45 - however another example of side effects
552:47 - is whenever you have two pieces of state
552:50 - two states that you want to keep in sync
552:52 - with each other
552:54 - so those are the examples maybe to
552:56 - answer the first part of the question a
552:57 - side effect is
552:59 - any code that
553:01 - affects an outside system
553:04 - the two states keeping in sync maybe
553:05 - doesn't fit perfectly in with that but
553:07 - hopefully our examples clarify that a
553:09 - bit so then what is not a side effect in
553:12 - react basically anything
553:14 - that react is in charge of
553:17 - so some examples of that is maintaining
553:20 - state between one render to the next
553:23 - and keeping the
553:25 - ui basically in sync or displaying
553:28 - correctly with the data whatever that
553:31 - data might be whether it's state or
553:32 - props there's certainly other things
553:35 - that react is doing but it mostly boils
553:37 - down to these two or three things i
553:40 - think we have in the slides about what
553:42 - its primary tasks are so yeah to take
553:44 - our elements and render them to the dom
553:46 - as well so we'll say
553:48 - render dom elements
553:51 - okay number three when does react run
553:53 - your use effect function and when does
553:55 - it not run the effect function well it
553:58 - will always run your effect as soon as
554:02 - the component loads
554:04 - so that's on the first render of your
554:06 - component and then by default assuming
554:09 - we don't pass any dependencies to our
554:11 - dependencies array like we asked about
554:13 - in question number four it will run our
554:16 - effect on every re-render of the
554:20 - component
554:21 - so that's assuming no
554:23 - dependencies array and when does it not
554:26 - run the effect function well it will
554:28 - only not run the effect function if
554:30 - there is a dependencies array available
554:33 - in which case it will not run the effect
554:36 - will not run the effect
554:39 - when the dependencies in the array
554:42 - stay the same
554:44 - between renders
554:46 - and maybe i should say when the values
554:49 - of the dependencies in the array stay
554:52 - the same
554:53 - between renders
554:55 - okay that leads us in perfectly to
554:57 - number four how would you explain the
554:58 - dependencies array well syntactically
555:01 - it's the second parameter to the use
555:04 - effect function
555:06 - and its purpose is to allow react a way
555:08 - to determine whether it should rerun the
555:11 - effect or not it ends up being an array
555:14 - of values that when react is in charge
555:17 - of re-rendering a component it will
555:19 - compare the values in the original array
555:22 - with the values in the new array that
555:24 - the effect is running when the component
555:26 - re-renders and if any of those values is
555:29 - not the same it will rerun our effect
555:31 - function
555:32 - so on a high level it's simply a way for
555:36 - react to know whether it should
555:39 - rerun the effect function
555:42 - okay awesome job on this quiz we're
555:44 - really rounding the final corner on this
555:46 - section we just have a few more things
555:48 - to cover so when you're ready let's jump
555:50 - right in
555:53 - i want to work through together getting
555:55 - our little app back to a state where it
555:57 - can pull the star wars data without some
555:59 - kind of infinite loop happening in the
556:01 - background so i have a small series of
556:03 - quiz questions i'm going to ask first of
556:05 - all what will happen when i uncomment
556:07 - this code and hit save how is my app
556:10 - going to act with my use effect function
556:13 - set up exactly this way make sure to
556:15 - look very carefully through the code
556:16 - here don't refresh the app or anything
556:18 - like that just use what you have learned
556:20 - so far about use effect and the
556:22 - dependencies array to figure out exactly
556:25 - what a use effect that looks like this
556:27 - means
556:35 - well for one we can see that we're
556:37 - telling use effect that it depends on
556:39 - the count variable which means that if
556:42 - count ever changes it's going to run
556:44 - this function again
556:45 - and if we look closely in the function
556:47 - we see that we're receiving the data but
556:49 - we're just console logging it we're not
556:50 - currently updating our state with that
556:52 - data let's open the console and see if
556:55 - this holds true to what we expect i'll
556:57 - hit save
556:59 - the very first time around it's console
557:01 - logging the data that we got back from
557:03 - the star wars api and then if i change
557:06 - my account it's logging it again not
557:08 - only is it logging it again it's
557:10 - actually going out to the api and
557:12 - getting the data a second time so that
557:15 - leads me to the next question in our
557:17 - quiz
557:18 - the second question is how will this use
557:21 - effect be different if i use set star
557:24 - wars data
557:26 - instead of the console log
557:28 - like before i want you to pause and look
557:30 - through this code try to analyze it and
557:33 - see if you can understand how things
557:35 - will be different now
557:43 - the main difference of course is that we
557:45 - are actually going to be updating our
557:47 - state when we receive that data back
557:50 - updating that state is going to trigger
557:52 - a re-render of our entire component
557:55 - however that re-render will not change
557:57 - the value of count and therefore will
558:00 - not change this array from one render to
558:02 - the next
558:03 - and therefore will not rerun our effect
558:07 - so let's hit save
558:09 - we'll see that our data populated it all
558:11 - happened kind of quickly but really what
558:13 - happened in the background is our
558:15 - component rendered the first time which
558:17 - ran our use effect if i haven't said it
558:20 - explicitly use effect will always run on
558:22 - the first render that triggered the
558:25 - fetch request to go get our star wars
558:27 - data which eventually set the star wars
558:30 - data setting the star wars data updated
558:32 - state which caused the component to
558:35 - re-render again
558:36 - so now star wars data is the object that
558:38 - we see it rendered the star wars data as
558:42 - a json object to our screen
558:45 - and then the effect checked to see if
558:47 - the old count still matched the new
558:49 - count and sure enough it did and
558:51 - therefore it did not rerun our effect
558:54 - because it didn't rerun our effect we
558:56 - did not get our star wars data again
558:58 - which would have caused that infinite
559:00 - loop
559:00 - if i remove my dependencies array
559:03 - completely then we're back where we
559:05 - started we're setting the star wars data
559:07 - re-renders the component which runs our
559:09 - function which sets the star wars data
559:11 - which re-renders our component and so
559:13 - forth now it is pretty contrived to have
559:15 - a dependencies array that is looking at
559:17 - the count because if you thought all the
559:19 - way through this you would also notice
559:21 - that if i scroll down and i click my add
559:23 - button it's going to make another call
559:26 - out to the api we don't have a console
559:28 - log or anything like that i bet if you
559:30 - were to open your developer tools you
559:32 - would have seen in the network tab that
559:33 - it did make another request out to the
559:35 - star wars api and it did set our data
559:39 - here which would have caused a re-render
559:41 - we just didn't notice anything because
559:43 - the data that came back is exactly the
559:45 - same as what we had on the screen before
559:47 - so that leads me to the third quiz
559:49 - question
559:51 - what exactly should be in our
559:53 - dependencies array in this case
559:55 - we can see that our code is not making
559:57 - use of count usually what you put in a
560:00 - dependencies array will also show up
560:02 - somewhere in the function but right now
560:05 - we're not using count to determine how
560:07 - this function runs at all so if count
560:10 - shouldn't be in our dependencies array
560:12 - what should be there
560:20 - some of you might have thought that it
560:22 - should be star wars data
560:24 - but if we think through what we've
560:25 - learned about the dependencies array
560:27 - we'll know that if i put star wars data
560:29 - in here and set star wars data inside
560:32 - the body of that function i'm going to
560:34 - get an infinite loop again because when
560:36 - i set star wars data it's going to
560:38 - change star wars data and it's going to
560:40 - re-render the app which will then run
560:42 - our effect and we'll end up in that same
560:44 - loop
560:45 - assuming i only want this api request to
560:48 - happen when the app first loads if i
560:51 - leave this empty because there are no
560:53 - dependencies for this to run then i can
560:56 - successfully set up my effect so that it
560:58 - will just run the api request on the
561:00 - very first render of our component now
561:03 - we can see if i hit save
561:05 - it updates our data and actually you
561:07 - know what let me put a console log here
561:10 - i'll say effect ran or hit save again
561:13 - we get our data we get the log for
561:16 - effect ran but now even updating my
561:18 - account is not running our effect again
561:21 - i know this has probably been a lot to
561:23 - take in but i'm glad you've stuck with
561:25 - me so far i really hope you thought
561:27 - through those quiz questions as i gave
561:29 - them to you if not you always have a
561:31 - chance to go back and re-answer those
561:32 - quiz questions and when you're ready in
561:35 - the next screencast we're going to
561:36 - extend this example just a little bit to
561:39 - try and help drill in the way that use
561:40 - effect is working
561:43 - we're going to start right off with a
561:45 - challenge i want you to combine our
561:47 - count with our current url that we're
561:49 - using to get our star wars character so
561:52 - that clicking the get next character
561:54 - button will do the fetch request but for
561:57 - the next character id
561:59 - right now it's the character of one
562:02 - which as we can see is luke skywalker
562:05 - and i've updated our state to begin with
562:07 - one because i don't think that there's a
562:09 - character with an id of zero so
562:11 - essentially clicking get next character
562:13 - will increment count but instead of
562:15 - having a hard-coded one in here it
562:17 - should look at whatever the current
562:18 - count is to make this request while
562:21 - you're at it don't forget to consider
562:23 - your dependencies array pause the
562:25 - screencast and see if you can get this
562:27 - new feature to work
562:35 - there should only be two small changes
562:37 - that we need to make
562:38 - one is instead of hard coding a one
562:41 - there we can add to the end of the
562:43 - string our current count now i prefer to
562:46 - use the template strings if i can so i'm
562:48 - going to change this to a template
562:50 - string and then instead of using plus
562:53 - count i will interpolate the count value
562:56 - inside
562:57 - now if i didn't make any changes to my
562:59 - dependencies array think for a second
563:01 - what's going to happen when i refresh
563:03 - and i try to get the next character
563:12 - when i refresh my component is going to
563:15 - run and it will run this effect because
563:18 - it will always run this effect on the
563:19 - first render count will be set to one
563:22 - and so it will make a fetch request to
563:24 - the star wars api where the endpoint is
563:27 - people slash one however because i have
563:30 - nothing in my dependencies array nothing
563:32 - is going to trigger this function again
563:35 - let me put count back in here and i need
563:38 - to make sure that i will rerun this
563:39 - effect anytime count changes
563:43 - so now i'll hit save
563:45 - after the first render it went to the
563:47 - api and got the character with the id of
563:49 - one we can even see here it says the
563:50 - count is one then i'll click get next
563:52 - character
563:53 - the count is two
563:55 - and after a little bit we get our next
563:58 - character the one with the id of two
563:59 - which is c3po so when i click get next
564:02 - character it updates count
564:04 - updating count reruns my function or
564:07 - rather re-renders my component the
564:10 - effect then looks at the old array which
564:12 - was an array with one item with the
564:15 - number of two in it and then it looks at
564:17 - the new array which is an array with the
564:19 - number of three in it and notices that
564:21 - something has changed which is then a
564:23 - trigger to run my function again with
564:25 - the new number of three as count we have
564:28 - a couple more things to learn about use
564:30 - effect before we can check that one off
564:32 - our list but before we do that it's time
564:34 - that we go back to our meme generator
564:36 - and we use our new knowledge to apply
564:39 - what we've learned about making an api
564:41 - request and saving that data to state so
564:44 - that's what we'll do next
564:48 - all right we've made it to the very last
564:50 - challenge of the meme generator and then
564:52 - we'll have completed the project if you
564:54 - remember up until now we've been
564:56 - importing our memes data from a file
564:59 - that i created and this data just came
565:01 - literally copy and pasted from an api
565:04 - request to the imageflip api but since
565:07 - that's not usually how things work
565:09 - instead we're going to make that api
565:11 - request ourselves and we'll do that
565:13 - inside of the meme component so your
565:16 - challenge is as soon as the meme
565:17 - component loads for the very first time
565:19 - you should make an api call to this url
565:23 - once that data comes in you can save the
565:26 - memes array part of that data so the
565:28 - data will look like this object and you
565:31 - can save just the memes array part of
565:34 - that data to our all memes state you
565:38 - might notice i renamed this from all
565:40 - meme images to just all memes and that's
565:42 - because the meme data that comes in is
565:44 - not just an image they are objects that
565:47 - contain a url but i thought that all
565:49 - meme images might be a little bit
565:50 - misleading since you know that you'll
565:53 - probably need to use use effect to
565:55 - accomplish this api request you should
565:57 - think carefully about what the
565:59 - dependencies will be if any that if they
566:02 - were to change you would want to cause
566:03 - to re-run this function if there are any
566:06 - dependencies make sure to include them
566:08 - and if there aren't any then make sure
566:10 - you understand why
566:11 - as a hint if you have used async await
566:14 - functions before or you feel really
566:15 - comfortable with them for now don't use
566:18 - them we're going to learn in the next
566:19 - screencast how we can successfully use
566:21 - async await inside of a use effect but
566:24 - it turns out it's a little more
566:25 - challenging than it might seem on its
566:27 - face
566:28 - so for now just use dot then blocks to
566:30 - resolve the promises that come back from
566:32 - making a fetch request alright the time
566:34 - is yours pause the screencast and work
566:36 - on this challenge
566:44 - all right maybe right here below our
566:46 - state i will make a call to
566:49 - react.use effect the first parameter is
566:52 - a function i'll use an arrow function
566:54 - since that's a more common way you'll
566:56 - see it and let me actually think about
566:58 - the dependencies first now i want this
567:00 - api request to happen as soon as the
567:02 - component loads and if you remember what
567:04 - we're doing is saving all of those memes
567:06 - in our state and then we're accessing a
567:09 - random one of those memes to determine
567:11 - what image should get showed in here
567:14 - however there's nothing that is changing
567:16 - in state that will actually require me
567:18 - to make another api request and so since
567:22 - i have no dependencies for this effect
567:24 - i'm just going to leave an empty array
567:27 - then inside of our effect we will make a
567:29 - fetch request to this url so i'll call
567:33 - fetch
567:34 - put in that url
567:36 - resolve it with the dot then we're going
567:38 - to take the response and parse the json
567:41 - into javascript
567:43 - and then we'll have some data back
567:45 - and before we jump into setting state
567:47 - let's just console.log that data and see
567:49 - how we're doing
567:51 - we'll hit save and awesome okay that
567:54 - looks very similar to what we have in
567:56 - our memestata.js file so now we should
567:58 - be able to use set all memes instead of
568:02 - console.log so we'll put in set all
568:04 - memes however if you read carefully it
568:07 - says that we just want the array part of
568:09 - the data that we get back so i'm not
568:11 - going to put the data in there if this
568:14 - object represents data then i actually
568:17 - have data dot data maybe data wasn't the
568:20 - greatest choice because we have
568:21 - data.data
568:22 - that's an object that has a memes
568:24 - property so data.data
568:27 - so let's put that in here
568:29 - data.data.memes
568:32 - outside of my effect i think i will just
568:35 - try console.logging
568:37 - all memes
568:39 - and so what should happen is on the very
568:40 - first render we have no dependencies so
568:44 - this effect will not run again but on
568:46 - the very first render it will fetch our
568:48 - memes obviously parse the json and then
568:51 - set all of our memes to the data data
568:53 - memes array
568:55 - setting our state will cause a re-render
568:57 - which should then run our console log a
568:59 - second time this console log will run
569:01 - the first time that it gets rendered and
569:03 - then again after the state changes now
569:05 - of course if i left this here it would
569:07 - also console log all memes for every
569:09 - character that i typed into my inputs or
569:12 - every time i click the button but for
569:14 - now let's just see what this gives us
569:17 - ah and that was confusing to me because
569:19 - we are initializing it with memes data
569:21 - let me actually delete memes data and
569:24 - then put in an empty array here the
569:26 - empty array is i'd like to think of it
569:28 - as an empty box that we will then fill
569:31 - with our memes as soon as our component
569:33 - loads the first time
569:34 - let me hit refresh again
569:37 - okay and that time we got an empty array
569:38 - first from our first time this console
569:40 - logged and then we got the array of
569:42 - memes from the api
569:44 - awesome so i can delete my console log
569:47 - actually let's see
569:48 - now every time i type something here
569:50 - we're going to be logging the all memes
569:53 - array to the console so we don't want
569:55 - that
569:57 - let's go ahead and make sure everything
569:59 - else is working correctly
570:02 - we'll click get a new meme image
570:05 - ah and we actually have a bug in our
570:07 - code i think i'll actually make this a
570:09 - challenge for you
570:12 - okay your challenge is to try and figure
570:14 - out why our code is broken as a hint it
570:17 - does have to do with the difference
570:18 - between what we were importing before
570:21 - from our memestata.js file and how we
570:24 - were using that versus what we're
570:26 - setting as our state in set all memes
570:29 - inside of our use effect pause now and
570:31 - see if you can fix the bug that we've
570:33 - introduced
570:41 - as we saw before when we were importing
570:43 - the memes data we were receiving this
570:45 - object so we had this object which we
570:47 - called memesdata.data.memes
570:51 - however in state when we were setting
570:53 - state we were initializing it with the
570:55 - entire object not just the memes array
570:57 - so we kind of switched things up when we
570:59 - were setting the array in state instead
571:02 - of the whole object however down in our
571:05 - get meme image we were accessing the
571:08 - memes array by using all
571:10 - memes.data.memes but now all memes is an
571:13 - array it's not an object with a data
571:15 - property
571:16 - so i think i can actually just get rid
571:18 - of this line completely and replace
571:20 - memes array with all memes
571:24 - and i won't need this line anymore
571:26 - so now i'm accessing all memes.length
571:29 - and i'm indexing into all memes at our
571:31 - random number to receive the random name
571:34 - image
571:35 - so let's try again we'll hit save
571:40 - one does not simply walk into mordor
571:43 - get a new meme image
571:45 - very nice
571:46 - just to polish things off i'm going to
571:48 - clean up this challenge i'm going to
571:50 - delete our memes data file
571:53 - and awesome everything is looking great
571:56 - before we can tie off a nice little bow
571:58 - on this section i want to talk about use
572:00 - effect for just a little bit longer as i
572:03 - mentioned if you're familiar with async
572:04 - await it may have been tempting to say
572:06 - well i want this callback function to be
572:09 - an async function so that i can use the
572:12 - await keyword here
572:13 - and use a little bit more tidy version
572:17 - of our promises here so that would look
572:19 - something
572:20 - like this where you say the response is
572:23 - wait for the fetch to come back and then
572:26 - you would say data is await
572:29 - response.json
572:31 - and then you just set
572:33 - all memes to be data.data.memes
572:37 - if you're familiar with async await
572:39 - obviously we can see this is tidier and
572:40 - this would be really nice to use however
572:43 - you'll never want to make this function
572:45 - an async function and to really
572:47 - understand why we need to talk about one
572:49 - more thing that we can do with this
572:50 - function inside of our use effect so
572:53 - before we move on let me undo that
572:57 - and let's talk more about that in the
572:58 - next lesson
573:02 - we'll start this one off with a pretty
573:04 - simple challenge just to make sure
573:05 - you're still awake in keeping your hands
573:07 - on the keyboard in our app component we
573:09 - are rendering a button and a component
573:12 - called window tracker and over in window
573:14 - tracker right now all it's doing is
573:16 - displaying the current inner width of
573:19 - our window because it's directly
573:21 - accessing the window.enter width as soon
573:23 - as the component loads that's not
573:25 - updating but we're going to get to that
573:27 - later
573:28 - so if i hit refresh it'll give me a new
573:30 - window width but we're eventually going
573:32 - to make it so i can change the window
573:34 - width and that number will dynamically
573:35 - update however for now let's focus on
573:38 - this challenge your challenge is to
573:39 - create some state called show which we
573:42 - will default to true make it so that
573:44 - when the button gets clicked it will
573:45 - toggle that show value back and forth
573:48 - and conditionally render window tracker
573:50 - only if show is true pause now and work
573:54 - on this challenge
574:02 - okay let's create some state const
574:06 - show
574:07 - set show
574:08 - equals react. use state with the default
574:11 - of true
574:13 - i'll create a function
574:15 - just called toggle
574:17 - that will run set show
574:20 - it'll look at the previous version of
574:22 - show and return the opposite of that
574:26 - then we'll set that up as an on click on
574:28 - this button
574:31 - and last of all we will conditionally
574:33 - render the window tracker component if
574:36 - show is true so i'll say show and
574:39 - the window tracker component easy enough
574:41 - we'll refresh
574:43 - and it's toggling on and off awesome now
574:46 - here's something to take a look at if i
574:48 - widen my window a little bit and then
574:51 - toggle this off and back on you'll see
574:53 - that our window width changed and that's
574:55 - because when this component window
574:57 - tracker gets toggled off it essentially
574:59 - is what's called unmounted is completely
575:02 - removed from the dom when i click it
575:04 - back on it's remounted and therefore it
575:08 - will re-run this window.inner width
575:10 - which gives me the updated version of
575:12 - window width the truth is though we can
575:14 - do better than this what we can do is
575:17 - add an event listener to our window that
575:20 - listens for the resize event and then
575:23 - whenever the window is resized we can
575:25 - set some local states to our window
575:27 - tracker so that we can display the
575:29 - correct window width at any given width
575:31 - without having to toggle it on and off
575:33 - or refresh our page completely however
575:36 - because it's an event on the window i
575:38 - can't simply add something like an on
575:41 - resize event like we have with other
575:44 - event listeners up until now and so i'm
575:46 - going to have to do a little bit of
575:48 - manual imperative dom manipulation and
575:51 - because i'm going to be interacting with
575:53 - a system outside of our window tracker
575:56 - component in other words the window
575:58 - itself think for a second what tool does
576:00 - react give us to interact with some kind
576:02 - of outside system and keep our local
576:04 - state in sync with it
576:11 - that's right it's use effect so i'm
576:13 - going to set up an effect we'll say
576:15 - react.use
576:17 - effect
576:19 - and i'll put my callback function in
576:21 - here and when we think about our
576:23 - dependencies at first glance it could be
576:25 - really tempting to say well i want to
576:27 - rerun this effect if window dot
576:30 - inner width ever changes
576:32 - however something to keep in mind is
576:33 - that this function our component
576:36 - function gets run each time the
576:38 - component is rendered right now when the
576:40 - component is rendered window.inner width
576:43 - is equal to 474
576:45 - and that's a constant value that's not
576:47 - going to change on its own
576:49 - so let's say for example i refresh this
576:53 - i change the window size just a little
576:55 - bit
576:55 - there has been nothing to trigger a
576:57 - re-render of my window tracker component
577:00 - because window.enter width is not
577:02 - something that automatically re-renders
577:04 - a component in react so that was a bit
577:06 - of an aside but i'm going to remove that
577:09 - and instead we're going to listen for a
577:11 - resize event on our window so i'm going
577:14 - to say window.add event listener
577:17 - listen for the resize event
577:20 - and then we will run the following
577:22 - function
577:23 - for now let's just console.log
577:26 - resized
577:28 - okay now i resize and we get our consol
577:32 - log running awesome the next step is
577:34 - something i think you can do pretty
577:35 - easily by now and so i will type that
577:38 - out as a challenge
577:40 - your challenge is to create some state
577:42 - we'll call it window width which you can
577:44 - default to the current window.inner
577:46 - width whenever the component is rendered
577:49 - then inside of our event listener you
577:51 - should update the window width every
577:53 - time it changes and you should change
577:56 - our h1 to not display the window.inner
577:59 - width that it calculated the first time
578:01 - the component rendered but instead to
578:03 - point to our new window width state
578:06 - variable pause now and work on this
578:08 - challenge
578:16 - okay we will create
578:18 - window width and set window width
578:23 - react.use state and we'll default it to
578:27 - the current window dot inner width
578:31 - that it calculates when the component
578:32 - first renders
578:34 - then inside of our callback function
578:36 - instead of console logging resized we
578:38 - will set the window width
578:41 - to be the window dot inner width at the
578:44 - time that this function runs
578:46 - and last of all we will look at the
578:48 - window width instead of window.inner
578:51 - width
578:53 - so now when i make changes here okay our
578:55 - window width is updating dynamically
578:57 - awesome
578:59 - well now let's take a look at a little
579:00 - bug that we have i'll clean up this
579:02 - challenge first
579:04 - remember our window tracker component is
579:06 - only mounting when its parent is
579:09 - allowing it to render with this show
579:11 - variable
579:12 - when it rendered the window tracker it
579:14 - immediately launched or created an event
579:16 - listener anytime the resize event
579:19 - happens that event listener is
579:21 - registered with the dom itself so even
579:24 - if i toggle off my component and then
579:27 - try to resize the window we see that we
579:30 - get this warning and it tells us we
579:32 - can't update react state on an unmounted
579:34 - component so in the end what happened is
579:37 - our window tracker is no longer a part
579:38 - of the dom but the browser itself is
579:41 - still listening for the resize event and
579:44 - trying to set the window width of an
579:46 - unmounted component this is something
579:48 - called a memory leak and for now it's
579:51 - good enough to know that you don't want
579:53 - a memory leak now due to the challenges
579:55 - that you just completed this screencast
579:57 - is getting a bit long so in the next
579:59 - lesson let's address this issue of the
580:01 - memory leak and see what we can do to
580:03 - fix it
580:07 - previously we saw that if i were to turn
580:09 - off my window tracker component or
580:11 - rather stop it from rendering and then
580:13 - run my resize event we get this warning
580:15 - that talks about a memory leak as a
580:17 - reminder it's because we set up an event
580:19 - listener on the window which registered
580:22 - it with our browser
580:24 - and even removing the window tracker
580:26 - component by toggling it off does not
580:28 - automatically remove that event listener
580:31 - one thing you should always try to be
580:32 - aware of when you are interfacing with
580:35 - side effects using use effect is any
580:37 - potential consequences that might happen
580:39 - if you don't clean up the things that
580:41 - you do in that side effect this is just
580:43 - one example where we're adding an event
580:45 - listener that is not getting cleaned up
580:47 - when this component unmounts but there
580:49 - certainly are other instances of this
580:51 - let's say for example you are creating a
580:54 - websocket connection with maybe a chat
580:57 - api and you have a little chat app that
580:59 - will update your screen automatically
581:01 - every time there's a new chat message on
581:03 - the server well when you create that
581:05 - subscription to the chat api and then
581:07 - try to unmount the component it's always
581:09 - a good idea to then sever that websocket
581:12 - connection as a way to so to speak clean
581:15 - up the effect that you have created in
581:17 - your use effect and in fact that's
581:19 - actually what we're about to learn is
581:20 - called it's called the use effect
581:22 - cleanup fortunately it's pretty easy to
581:25 - do remember we have a function as our
581:27 - first parameter to use effect but
581:29 - currently we're not actually returning
581:31 - anything from that function well as it
581:33 - turns out what we can return from use
581:35 - effect can be a function and you can
581:37 - think of this as a cleanup function
581:40 - in fact to make that more obvious let me
581:42 - put this as a function declaration
581:44 - so when react runs our use effect
581:47 - function here it will receive in return
581:50 - another function that it can use to then
581:53 - clean up any side effects that you might
581:55 - have created in reality it has no idea
581:57 - what the side effects are that we
581:59 - created so what we put in the body of
582:01 - our cleanup function should be something
582:03 - that well we write to clean up our own
582:06 - side effects in the case of adding an
582:08 - event listener there's a sister method
582:11 - called remove event listener now with
582:13 - remove event listener we need to pass
582:15 - the exact same function that we provided
582:17 - when we added it and so i actually need
582:19 - to move this outside of the event
582:21 - listener and set it up let's call this
582:25 - watch width
582:27 - then i can pass in the name of watch
582:30 - width when i'm adding my event listener
582:31 - but this allows me to then say
582:33 - window dot remove event listener
582:36 - the
582:37 - resize event
582:39 - and the event listener function i want
582:40 - you to remove is this watch with
582:42 - function
582:44 - okay let's see that this is working
582:45 - first i'll put a console log that says
582:49 - setting up inside of my watch with event
582:52 - listener and then inside of my cleanup
582:54 - function i'll console.log cleaning up
582:57 - i'll hit save let's resize the window
583:00 - look at our console okay it's running
583:02 - setting up every time the watch with
583:04 - function runs maybe setting up isn't the
583:07 - right way to phrase that since we're
583:09 - actually running this every time the
583:11 - resize event happens but that's that's
583:13 - okay for now so we get a bunch of
583:14 - setting ups and now let me toggle off
583:17 - the window tracker actually let me
583:19 - refresh and then do one little resize
583:23 - and then i'll toggle the window tracker
583:25 - and we see that we get the cleaning up
583:26 - function that ran and now if i resize my
583:29 - browser i don't get that memory leak
583:31 - warning like i had before
583:33 - so let's take a step back and walk
583:35 - through this logically to understand
583:37 - exactly what's going on here because
583:38 - this can be a confusing topic
583:41 - our app component is deciding when the
583:43 - window tracker component should be
583:45 - rendered as soon as we toggle that on
583:48 - and it renders it to the screen
583:50 - it sets the window width state it
583:52 - determines what that should be based on
583:54 - the current window width at the instant
583:56 - that this component gets rendered
583:58 - remember use effect will only run after
584:01 - the dom has been painted or in other
584:03 - words once the h1 has been rendered to
584:06 - the screen so after creating the state
584:09 - it will render our h1 and then it will
584:11 - register our use effect
584:13 - this use effect has no dependencies
584:15 - because there's nothing inside of here
584:17 - that's going to make me re-register a
584:20 - new event listener and so it registers
584:22 - this event listener on the resize event
584:24 - of the window and then anytime i resize
584:27 - it's reacting to the event listener that
584:29 - i set up and then when i toggle off the
584:32 - window tracker react recognizes that
584:34 - this component has reached the end of
584:36 - its life cycle and it's about to be
584:38 - removed from the dom and so it takes the
584:40 - function that it received from us when
584:42 - it first set up our use effect and it
584:44 - just runs it in fact it runs it kind of
584:47 - blindly it doesn't know what that
584:48 - function contains but we as the
584:50 - developers are expected to successfully
584:53 - clean up after our side effects and so
584:55 - we remove that event listener and it is
584:58 - gone
584:59 - so one last recap use effect takes two
585:02 - parameters the first one is the effect
585:04 - that you want to run
585:05 - the second one is any dependencies that
585:08 - react should watch for changes in to
585:11 - rerun your effect function and that
585:14 - effect function is allowed to return
585:16 - another function that can clean up after
585:18 - any side effects that might be lingering
585:21 - in case your component dies
585:23 - now for many effects that you set up you
585:25 - might find yourself not actually needing
585:27 - to provide a cleanup function at all in
585:29 - which case that's completely okay this
585:31 - is not a required part of use effect for
585:34 - it to work
585:35 - as always feel free to play around with
585:37 - this code i know that this can be a
585:39 - confusing topic so the more time you
585:41 - spend in it actually playing with the
585:43 - code yourself the better off you'll be
585:45 - understanding this return function does
585:47 - bring us back to the topic that we were
585:49 - talking about a few screencasts ago on
585:51 - how we can't use this as an async
585:54 - function and so let's go back revisit
585:56 - that topic and then we'll finally be
585:58 - ready to recap this entire section
586:02 - i mentioned in a previous screencast
586:04 - that we wouldn't be able to simply put
586:06 - async in front of our callback function
586:09 - for use effect and now that we've
586:11 - learned about how we can return a
586:14 - function from use effect to act as a
586:16 - cleanup function we will probably see
586:19 - why we're not able to put async in front
586:21 - of this callback function if you're
586:23 - familiar with async functions you know
586:25 - that by putting async in front of your
586:27 - function definition it alters the way
586:30 - that function well functions in
586:32 - javascript whatever i return from an
586:35 - async function does not become a bare
586:37 - value return that we can receive in a
586:40 - variable when we're calling this
586:41 - function but instead an async function
586:44 - will automatically and always return a
586:47 - promise
586:48 - as i'm writing my async function
586:50 - whatever i say should be returned is
586:53 - actually what will be resolved as the
586:56 - successful promise completion of my
586:58 - async function
587:00 - however since react is expecting the
587:02 - return value from my async function to
587:05 - be another function that it can use to
587:07 - clean up any side effects that i create
587:10 - in the process of running my effect if
587:13 - what it receives instead is a promise
587:15 - it's not going to be able to run our
587:17 - cleanup the way that we want it to
587:20 - fortunately for us there's a really easy
587:22 - work around to this and that is to
587:23 - define a separate function inside of use
587:26 - effect and remember if you're okay using
587:28 - got then syntax with promises then you
587:31 - don't have to do any of this at all but
587:33 - let's say you really are anxious to use
587:35 - an async function well i can just call a
587:38 - new function we'll call it an async
587:40 - function
587:42 - and maybe let's say get memes
587:44 - and now because it's an async function i
587:46 - can move this content in here and say
587:49 - something like const response equals
587:51 - await the fetch request
587:54 - const data equals await res.json
587:58 - and then with that data i can set my
588:00 - memes now this is just a function
588:03 - definition so the very last thing i need
588:05 - to do before i'm done is to call my own
588:08 - function here inside of this callback
588:11 - function this is a lot of functions to
588:13 - be dealing with for sure we've got a
588:15 - callback function which has a function
588:17 - definition a function call and then a
588:20 - returned function but again if this is
588:22 - too much then you can just go back to
588:24 - using.then syntax with your promises and
588:26 - that's completely okay as well
588:29 - in our case with our effect we probably
588:31 - don't need a cleanup function here
588:33 - because we're just making this one call
588:35 - one time it's happening as soon as this
588:37 - component loads there isn't really a
588:39 - built-in way for us to unmount the meme
588:42 - component or anything like that and so
588:45 - we can just delete our use effect
588:46 - cleanup function that we were returning
588:48 - from our callback function
588:50 - i tried to take everything that we just
588:52 - talked about and boil it down to a
588:54 - written summary so if you're interested
588:56 - you can read through the summary that we
588:58 - just put here
588:59 - and now we'll take the opportunity to
589:01 - take a look back at all the new things
589:03 - that we learned about react in this
589:05 - section and we've covered a lot of
589:07 - ground so when you're ready let's take a
589:09 - look at all the cool new things that you
589:11 - are now able to do as a react developer
589:16 - holy cow i can't believe we are finally
589:19 - here at the end of section 3. we have
589:21 - covered an insane amount of topics and
589:24 - you have built your first interactive
589:26 - react app i mean even try to think back
589:29 - to section 2 and what we knew then
589:31 - versus what we know now it's crazy
589:33 - before we wrap up the section let's do a
589:36 - quick recap of everything that we've
589:37 - learned one of the key components of an
589:40 - interactive web app is the ability to
589:42 - listen for events so we learned how to
589:44 - add event listeners in our react app and
589:47 - that was a crucial springboard for us to
589:49 - learn state then even though we had seen
589:51 - a sneak peek of conditional rendering
589:53 - beforehand we officially learned
589:55 - conditional rendering and saw a few
589:57 - different ways that we can implement it
589:58 - in our code
589:59 - then we kind of waded through one of the
590:02 - heavier topics of forms in react for
590:05 - better or worse you'll end up using
590:06 - forms pretty regularly in react and on a
590:09 - side note i hope you mostly just have to
590:11 - do input boxes instead of worrying about
590:13 - all those other kinds of types but it's
590:15 - important that we learn them so that we
590:16 - can apply them when we need
590:18 - and then we dove deep into understanding
590:21 - side effects and how we can handle side
590:23 - effects in our react code these topics
590:25 - combined with everything that we learned
590:27 - in the previous two sections make up a
590:29 - really robust introduction to the react
590:32 - library and of course there's a ton more
590:34 - that you can still learn about react but
590:36 - these foundational pieces give you the
590:38 - tools that you need to build your own
590:40 - basic web apps especially considering
590:42 - the depth of the topics that we learned
590:44 - in this section you should definitely go
590:46 - over to the today i did channel in the
590:48 - scrimba community discord server and
590:50 - post a celebratory message saying that
590:52 - you finally finished section 3 of the
590:54 - introduction to react course in fact if
590:56 - you click this screenshot it'll take you
590:58 - right there and the end of this section
591:00 - essentially marks the completion of the
591:02 - topics that we'll be learning in this
591:04 - course however if you know me at all you
591:06 - know that i'm not going to let you go
591:08 - before i get you to practice this a lot
591:10 - of times so the next section is
591:12 - completely dedicated to practicing
591:14 - everything that we've learned and along
591:16 - the way there's a couple new things that
591:18 - i'll introduce here and there i'm really
591:20 - excited to jump into the next practice
591:22 - section and i think you should be too
591:23 - we're going to be working on some really
591:25 - cool projects before that though you
591:27 - should bask in the glory of having
591:28 - completed this section so once you're
591:31 - all done basking i will see you in the
591:32 - next section
591:36 - if you're jumping into this section
591:37 - because you have completed all of the
591:40 - other sections all the exercises or
591:42 - challenges and all the projects that i
591:44 - have thrown your way then
591:46 - congratulations you have done a lot of
591:49 - work to really learn and hopefully
591:51 - deeply understand react
591:54 - naturally there's a million more things
591:56 - you could learn about react it's a
591:57 - framework you can dive really deep into
591:59 - and get very complex with but at this
592:02 - point you really have all of the
592:03 - fundamental tools you need to build
592:06 - highly interactive web applications on
592:08 - your own
592:09 - so at this point this section is
592:11 - dedicated completely to you guessed it
592:14 - practice
592:15 - i know i've said it a million times
592:17 - before i hope you're not terribly sick
592:19 - of me saying it but you will not get
592:21 - good at anything unless you practice it
592:24 - over and over we know this intuitively
592:27 - when it comes to something like learning
592:29 - a new instrument or learning a new
592:31 - language and is absolutely no different
592:34 - when it comes to web development
592:36 - so for the remainder of this section we
592:38 - will be working on three projects and i
592:41 - want to take a second and give you a
592:42 - preview into what those projects are
592:44 - now this will be a little bit different
592:46 - than what we've done in the past so far
592:49 - we've mostly been creating something
592:51 - completely from scratch however the
592:53 - first two projects i'm going to have you
592:55 - work on you'll actually be jumping into
592:57 - an existing code base and we're going to
593:00 - ramp up to this a little bit the first
593:02 - task you'll have is to revisit our react
593:04 - fax site from the very first section in
593:06 - this course but now to apply the
593:08 - knowledge you have about state in react
593:11 - to implement a light mode and dark mode
593:13 - toggle which will allow the user to
593:16 - toggle between those two color schemes
593:18 - this one will end up being more of a
593:20 - warm-up project because it will only be
593:23 - one screencast long then you're going to
593:25 - jump into a new project which is sort of
593:27 - a markdown version of an apple notes
593:29 - clone
593:30 - some of the basic code for this will
593:32 - already be written for you but some of
593:34 - it will be broken and along the way
593:36 - you'll also be learning something new as
593:37 - you implement a new feature that
593:39 - interfaces with local storage so you can
593:41 - save these notes in a little bit more
593:43 - permanent way
593:45 - then for the third project we'll go back
593:46 - to our roots we'll be creating it
593:48 - completely from scratch and that is this
593:50 - dice game called tenzi's
593:52 - every single step along the way with
593:54 - these projects is going to be a
593:56 - challenge for you to complete so you
593:58 - will get your hands on the keyboard and
593:59 - you'll get lots of awesome practice to
594:01 - help you really solidify the things that
594:04 - we've been learning about react
594:06 - so what are we waiting for let's jump
594:08 - right in
594:11 - we're going to start off with a sort of
594:13 - warm-up challenge here usually when you
594:15 - join a team as a web developer you
594:18 - probably aren't going to be creating
594:20 - your projects completely from scratch
594:22 - but instead will sort of be tossed into
594:24 - a new code base that you then have to
594:26 - spend some time becoming familiar with
594:29 - before you can do any kind of work on it
594:31 - now the code base here fortunately is
594:33 - something that you have worked on in the
594:35 - past and that's the react facts site
594:37 - that we worked on in the first section
594:39 - but i'd like you to imagine that when
594:41 - you finished the first version of this
594:43 - code you handed it off to a team and in
594:45 - the meantime they've been working on
594:47 - implementing this light mode and dark
594:49 - mode toggle but are needing some help
594:51 - for you to add the functionality to it
594:54 - so a major part of this challenge is to
594:56 - spend a really good amount of time
594:58 - looking through the existing code
594:59 - because it has changed since you last
595:02 - looked at it and make sure that you
595:03 - spend some time understanding how
595:05 - everything is working
595:07 - in my little advice section here you see
595:09 - it says to first start with index.js
595:11 - work your way to app.js go to main.js
595:14 - and navbar.js and then to follow the css
595:17 - class names in the style.css so that you
595:20 - can understand how things are working
595:22 - while you're at it make sure that you're
595:24 - looking closely at the conditional class
595:26 - names in the jsx to help you decide what
595:29 - props need to be passed down to the
595:31 - components that need them
595:33 - you should also think carefully about
595:34 - which components will need state this is
595:37 - going to help you decide where you're
595:39 - going to write the code that initializes
595:41 - the state and how to then pass it down
595:43 - to the components that need to access it
595:46 - in the slide down here i included a
595:48 - couple screenshots that have both the
595:49 - light mode and the dark mode you can
595:51 - click on either one of these to go to
595:53 - the figma file that has the specific
595:55 - colors and other design aspects however
595:58 - in reality the design has already been
596:00 - implemented you shouldn't need to do too
596:02 - much in changing the design because it
596:04 - all is existing in the css on this next
596:07 - slide i also have a little animated gif
596:09 - that shows you exactly what should be
596:11 - happening of course you click the light
596:14 - and dark mode up top and that will
596:15 - change every aspect of the site to its
596:18 - light mode or dark mode color scheme
596:21 - again jumping into an existing code base
596:23 - like this is going to be a really common
596:25 - task as a developer so when you're
596:27 - working on part one of my advice here
596:30 - spend a real significant amount of time
596:32 - doing this i imagine it will
596:34 - realistically take you at the very least
596:36 - about five minutes but even upwards of
596:38 - 20 or 30 minutes before you maybe get a
596:41 - good grasp on the code that we have here
596:43 - okay the time is yours pause the
596:44 - screencast and work on adding this light
596:47 - and dark mode feature
596:55 - let's start off by looking in index.js i
596:58 - think we're going to find it's not that
596:59 - impressive here we're really just
597:01 - importing app and rendering it so let's
597:04 - follow that down and go to app.js
597:06 - looks like it is rendering a div with a
597:09 - container class name that is containing
597:11 - the navbar and the main elements which
597:13 - we're importing up above so let's go to
597:16 - navbar
597:17 - okay this one's a little more
597:18 - significant like i mentioned looking at
597:20 - the conditional class names is going to
597:22 - give us some good hints as to what we
597:23 - need to do here we can see that navbar
597:25 - is expecting props and specifically one
597:29 - of the props called dark mode i'm
597:30 - assuming this is a boolean because of
597:32 - the way it's positioned in this ternary
597:34 - here it says if props.dark mode is true
597:37 - then apply the class name of dark
597:40 - otherwise don't apply a class name at
597:42 - all and if we look really closely we
597:44 - also are expecting a prop called toggle
597:47 - dark mode which makes sense because our
597:49 - toggle here exists inside of the nav bar
597:52 - so clicking this toggle should change
597:55 - the dark mode from true to false or
597:57 - false to true
597:59 - the other thing app.js was rendering is
598:01 - this main so let's go look at the main
598:03 - it looks like main is also expecting
598:05 - props
598:06 - again props.dark mode so it's going to
598:08 - do essentially the same thing and i
598:10 - think that's it this one is not
598:11 - expecting to toggle the dark mode
598:13 - anywhere so we should be set up now to
598:15 - create the state we need to make this
598:17 - light and dark mode work
598:19 - now because both the main and the navbar
598:21 - are expecting an incoming prop called
598:24 - dark mode that means that the parent of
598:26 - those this app component that contains
598:29 - or renders the navbar and the main
598:32 - should probably be where the state is
598:33 - being held so let's go ahead and create
598:36 - our dark mode and set dark mode
598:40 - which is react dot use state
598:43 - maybe since the code right now is
598:45 - showing that it is not in dark mode
598:47 - let's set this to true
598:49 - so that when everything is hooked up
598:51 - correctly we'll see the page update i'll
598:54 - pass the
598:56 - dark mode prop
598:57 - to both of my components since we saw
598:59 - that they both are expecting it to come
599:02 - in
599:02 - and then the navbar specifically is
599:04 - expecting something called i think it
599:06 - was well let's just go look at it navbar
599:10 - toggle dark mode so i'll copy that
599:12 - that's the name of my incoming prop
599:15 - and now i need to provide a function
599:17 - which will change the dark mode i could
599:18 - do that in line or my preference is to
599:20 - create a separate function so we'll say
599:23 - toggle dark mode
599:25 - and that's simply going to call set dark
599:27 - mode
599:28 - looking at the previous mode
599:31 - and it'll just return the opposite since
599:33 - it's a boolean
599:36 - and now let's pass our actual toggle
599:39 - dark mode function down to the nav bar
599:42 - i'll create some space here
599:45 - let's hit save and when we do that it
599:47 - should switch to dark mode
599:49 - awesome okay and then we can click our
599:51 - toggle great this is working just like
599:54 - we'd expect
599:55 - obviously what we have worked on here
599:57 - might be a bit contrived because in our
599:59 - case somebody already implemented some
600:02 - of the major features that make this
600:04 - work but that's what makes this a warm
600:06 - up we're really gearing up to work on
600:08 - something that's a little more in-depth
600:10 - and the main takeaway i want for you in
600:12 - this challenge is not so much
600:14 - implementing the actual feature in this
600:16 - case but instead taking the time
600:19 - required to look through the code and to
600:22 - understand the code of course if you're
600:24 - working on this with a team you'll
600:26 - probably have access to the developers
600:28 - that had written this code and that's
600:30 - when you could ask them questions why
600:32 - did you write something the way that you
600:33 - wrote it and that way you can get some
600:35 - good insight from them on how it's
600:37 - written and how you should proceed when
600:40 - you're adding new features
600:41 - okay i feel like we're nice and warmed
600:43 - up so now we're ready to jump into
600:45 - another existing code base which is one
600:47 - of our major capstone projects for this
600:49 - section
600:52 - as a developer it can be really fun to
600:54 - start new projects from scratch
600:56 - especially when that project is one of
600:58 - your own ideas however a much more
601:01 - common task as a developer is to be
601:03 - thrown into a code base that you're
601:05 - unfamiliar with and asked either to fix
601:08 - bugs or add new features naturally
601:11 - before you're able to be productive on
601:13 - any code that's new to you you need to
601:15 - be able to read through the code that
601:17 - exists to get a sort of lay of the land
601:20 - and make sense of what you're seeing
601:23 - only then can you start to feel
601:24 - confident enough in the code base that
601:26 - you'll be able to add new features or
601:28 - fix bugs without actually causing new
601:31 - bugs in the code or breaking an existing
601:34 - feature now in reality this is where
601:36 - something like automated testing comes
601:38 - in really handy but unfortunately you
601:40 - won't always have the luxury of working
601:42 - on a code base that has robust testing
601:45 - already set up for you and so i'd like
601:47 - to introduce you to the markdown notes
601:50 - app i guess i didn't get very creative
601:52 - with the title this app already has some
601:55 - bones set up for you you can see that
601:57 - there's a list of notes that will be on
601:59 - the left you can create new notes like i
602:02 - just did with this plus button and on
602:04 - the right there's a markdown editor
602:06 - where you can toggle between preview and
602:08 - right now this editor is not something
602:10 - that i wrote this is built by another
602:13 - team that made a package called react
602:16 - dash mde markdown editor and we've
602:19 - simply implemented that package into our
602:21 - code here so on each one of these notes
602:24 - i can type
602:25 - new things into the note i can switch
602:28 - back and forth between preview and write
602:30 - mode everything here is markdown so when
602:33 - i bold something it will surround it
602:35 - with the double asterisks but when i go
602:37 - into preview mode it will render that as
602:39 - html and so we see a bolded paragraph
602:43 - if you haven't spent much time doing
602:44 - markdown you can play with the editor
602:46 - here and get a general sense of how
602:48 - markdown works toggle back and forth
602:50 - between write and preview but as it
602:52 - stands this notes app has some very
602:55 - limited features first of all we see
602:57 - that it's just calling our notes note 1
602:59 - note 2 note 3 note 4. we also have no
603:01 - way to delete any notes and probably
603:04 - worst of all if i refresh this app all
603:06 - my notes disappear this is the screen i
603:08 - set up if we have no notes and we can
603:10 - click the button to create one
603:12 - so before we even dive in to look at
603:14 - what features we plan on adding to this
603:16 - project i have your very first challenge
603:18 - which is to understand the code base
603:20 - i'll type it out to be more specific
603:23 - your first challenge is to spend a good
603:25 - 10 or 20 or maybe even more minutes
603:27 - reading through the code and trying to
603:30 - understand how it's currently working
603:32 - now i say 10 to 20 minutes as a
603:34 - guideline but you really should spend as
603:36 - much time as you need to feel pretty
603:37 - confident that you understand this
603:39 - existing code although in reality you
603:42 - don't need to fully understand
603:43 - everything you see here just to move on
603:46 - i will walk you through a high level
603:48 - overview of the app but i really urge
603:50 - you to actually pause spend this time
603:53 - reading through the code see if you can
603:54 - understand it before i get to my
603:56 - explanation of it this kind of exercise
603:59 - is crucial when it comes time for you to
604:01 - actually jump into a real company's code
604:03 - base so now is not the time to shrug
604:06 - this kind of exercise off so pause now
604:08 - and spend some time to gain an
604:10 - understanding of this code
604:19 - i think it never hurts to just start
604:20 - right at index.js
604:22 - although we can see here that well we're
604:24 - really not doing anything we're just
604:25 - rendering the app component but it's
604:27 - good to know that we're not missing out
604:29 - on something important here then i'll go
604:31 - to app.js and we can see this is where
604:33 - the bulk of our logic is happening we
604:35 - have quite a few imports these top ones
604:38 - because the path is starting with a dot
604:40 - slash indicates that it's one of our own
604:43 - components here we've got the sidebar
604:45 - and the editor if i had to guess i would
604:48 - probably say that this section on the
604:49 - left is the sidebar and this whole
604:51 - section on the right is the editor if
604:53 - you looked closely you might have seen
604:55 - data and gone over to data to see that
604:57 - well we have some really basic seed data
605:01 - or rather it's data that could be used
605:03 - to create some initial notes for us for
605:06 - testing purposes although it looks in
605:08 - our case like this is not really being
605:10 - used right now
605:11 - back in app.js we can see we're also
605:13 - importing something called split from
605:15 - react split if you really went above and
605:17 - beyond you might have actually done a
605:19 - google search for react dash split to
605:21 - see what it's doing and it turns out
605:23 - it's a third party library that we
605:24 - installed as one of our dependencies
605:26 - right here and it allows us to have this
605:29 - split pane that is easily resized by the
605:32 - user so that's pretty cool we're also
605:35 - importing nano id which you may or may
605:37 - not have seen already and it looks like
605:39 - we're using it right here when we're
605:41 - creating a new note hopefully this also
605:44 - illustrates the importance of naming
605:46 - your functions and variables with a
605:48 - meaningful name when my function is
605:50 - called create new note it becomes really
605:52 - obvious what this function is supposed
605:54 - to do so then we come down to our actual
605:57 - app component and it looks like we're
605:59 - saving all of our notes in state
606:01 - initializing as an empty array and then
606:03 - we're creating this state called current
606:05 - note id
606:06 - and it looks like it's initializing it
606:08 - either as the id of the very first note
606:12 - or an empty string now you may have seen
606:15 - this first part and been a little bit
606:16 - confused honestly that's okay but as a
606:19 - side note this is one way to essentially
606:22 - say i need to make sure that notes at
606:24 - the index of 0 because notes is an array
606:27 - exists before i try to access the id
606:30 - property of that note when we initialize
606:33 - state as an empty array in other words
606:35 - when i refresh this app and i have no
606:37 - notes notes at the index of 0 is
606:40 - undefined and trying to say undefined
606:43 - dot id will actually throw an error in
606:45 - javascript again that wasn't totally
606:48 - necessary for you to fully understand
606:50 - but that is an error you're going to run
606:51 - into quite a bit
606:52 - in more updated versions of javascript
606:54 - there are different ways around this but
606:56 - that's outside the scope of this course
606:58 - right now
606:59 - next we've got this create new note
607:01 - function which is relatively
607:02 - self-explanatory based on this set notes
607:05 - call it looks like it adds the new note
607:07 - to the beginning of the list and then it
607:09 - looks like it sets the current note id
607:12 - based on this note's id
607:14 - at this point i might not totally
607:16 - understand what the purpose of set
607:17 - current note id is but that's okay this
607:20 - update note looks like it is a way for
607:22 - us to save and state any changes to our
607:25 - notes that we create which allows me to
607:27 - actually
607:29 - type something here
607:31 - and have that be saved at least locally
607:33 - in state for now find current note well
607:36 - this isn't setting state or anything so
607:38 - that doesn't seem immediately obvious
607:40 - what it's doing but if we look a little
607:42 - further down we can see that it might be
607:44 - a helper function that is helping us
607:46 - determine what the current note is and
607:48 - we're doing it both in the sidebar
607:50 - component and the editor component to
607:51 - pass the current note down as props to
607:54 - that component again if i were looking
607:56 - through this code base for the first
607:58 - time and i saw this split component i
608:00 - would probably end up going to the react
608:02 - split documentation to try and better
608:04 - understand how that works looks like we
608:07 - are conditionally rendering this split
608:10 - component if the notes array is greater
608:12 - than zero in length but otherwise we
608:15 - have this section here which is what we
608:17 - get when we first refresh the app and we
608:19 - have our title and our button
608:21 - so that's a good enough start in here
608:23 - let's go look at our sidebar
608:25 - immediately i see this
608:27 - props.notes.map which looks like it's
608:29 - taking the array of notes and mapping it
608:31 - into some note elements which are then
608:33 - being displayed down here this will show
608:36 - up better when i actually create a note
608:38 - and if i create more notes it looks like
608:40 - we have this class that actually changes
608:43 - the sidebar style when one of these
608:45 - notes is selected that's this selected
608:48 - note dynamically rendered class name it
608:50 - also looks like when we click anywhere
608:52 - inside of a div we can set the current
608:55 - note id which i presume is what's
608:57 - helping us change this class and also
609:00 - should be changing what actual text is
609:02 - being shown here if i call this note 1
609:06 - note 2
609:08 - note 3 and then toggle between them yep
609:11 - that seems to be saving or rather
609:13 - correctly displaying the text that gets
609:15 - shown up in our editor
609:16 - then in our editor itself this one seems
609:19 - fairly straightforward it is maintaining
609:21 - its own state and it says selected tab
609:24 - although the default here is right and
609:26 - so i'm guessing that has more to do with
609:29 - this little tab up here write or preview
609:32 - and if you did take the time to go
609:34 - search for react mde you might have seen
609:36 - that this react mde component it takes a
609:39 - prop called selected tab and on tab
609:42 - change and that is something that's
609:43 - built into react mde now something like
609:46 - this which is creating this converter
609:49 - object and has something called
609:50 - showdown.converter
609:52 - i assume unless you have done some kind
609:54 - of markdown to html conversion before
609:57 - this is probably completely foreign to
609:59 - you something like this is probably not
610:02 - super imperative for you to fully
610:04 - understand in order to understand the
610:06 - rest of the code base however it
610:08 - certainly wouldn't hurt to go to
610:10 - showdown and look at the documentation
610:12 - to see if you can at least gain a
610:14 - general understanding of what it's
610:16 - trying to do
610:17 - okay now i know that was pretty
610:19 - long-winded but the truth is i'm really
610:20 - hoping that you spent even more time
610:22 - than that trying to understand
610:24 - everything here fortunately in this
610:26 - environment you also could have just
610:27 - started clicking in here and making
610:29 - changes to see what kinds of things you
610:32 - could break curiosity like that is going
610:34 - to be really helpful for you when you're
610:37 - trying to understand how something works
610:39 - now since this screencast is getting a
610:40 - bit long i want to in the next
610:42 - screencast start talking about the
610:44 - features that we want to add to this
610:46 - note-taking app
610:49 - let's take just a minute to look at the
610:51 - features that we will be adding to our
610:53 - markdown notes app so that it's at least
610:55 - a marginally usable app the first thing
610:58 - we're going to do is sync all of the
611:00 - changes that happen to our notes with
611:02 - local storage we won't be saving
611:04 - anything to a database in this project
611:07 - but at least so that we have a way to
611:09 - save our notes between refreshes of the
611:11 - app we're going to be using the
611:13 - browser's local storage to save every
611:16 - little change that happens to those
611:17 - notes next we're going to fix the thing
611:19 - that's just showing note 1 note 2 note 3
611:22 - because well that's not very helpful in
611:25 - terms of trying to find our notes going
611:27 - forward essentially create a note
611:29 - summary and use that as the title in
611:32 - reality it's just going to take the
611:34 - first line of our note and put that in
611:36 - our summary title right there
611:38 - next we're going to add a feature where
611:40 - every time we modify a note it bumps it
611:42 - to the top of our list that way we have
611:45 - our most relevant notes living near the
611:47 - top of our list instead of possibly
611:49 - buried way deep down on the list and
611:51 - then last but certainly not least we're
611:53 - going to add the ability to delete notes
611:56 - along the way of adding these features
611:58 - we are going to learn another thing or
611:59 - two about react so that's going to be
612:01 - exciting so assuming you've taken the
612:03 - time to really dive deep into the code
612:05 - and understand how this project is
612:07 - working currently that means you're
612:08 - ready to jump in and start working on
612:11 - this first feature which we will be
612:12 - working on in the next screencast
612:16 - let's start with the very first feature
612:18 - and that is to sync your notes with
612:20 - local storage
612:22 - in case it's been a minute since you've
612:23 - used local storage or if this is the
612:26 - first time you've ever accessed local
612:27 - storage i created a little slide here
612:29 - that should help you get started this
612:31 - link up here will go to the mdn docs for
612:33 - reference but essentially you'll be
612:35 - using
612:37 - localstorage.getitem and
612:39 - localstorage.set item to interact with
612:41 - the local storage api when you're using
612:44 - getitem you provide a key and that key
612:47 - is like an object a way to access the
612:49 - data that you saved in local storage in
612:51 - our case i'd probably recommend calling
612:54 - this notes instead of key and then when
612:56 - it's time to set the item in local
612:58 - storage you will both access the key
613:01 - where you want to save this and the
613:03 - value that you want to save now it's
613:05 - important to remember that value has to
613:07 - be a string when it's saved in local
613:09 - storage so if you have something that's
613:11 - a little more complex like an array or
613:13 - an object you'll need to use
613:15 - json.stringify
613:16 - to turn that array or object into a
613:19 - stringified version or rather a json
613:21 - version that can be saved in local
613:23 - storage and when it comes time to pull
613:26 - that out of local storage and use it as
613:28 - regular javascript you'll need to
613:30 - essentially reverse that by using
613:32 - json.parse
613:34 - so that brings us to the written part of
613:35 - our challenge every time the notes array
613:38 - changes in state you should save the
613:41 - array of notes to local storage once
613:43 - again i put here that you'll need to use
613:45 - json.stringify to turn that array into a
613:47 - string in order to save it to local
613:49 - storage and as a second part of this
613:51 - when the app first loads you should
613:53 - initialize the notes state not as only
613:56 - an empty array but instead with the
613:59 - notes that are saved in local storage
614:01 - since at this point you'll be pulling
614:03 - things out of local storage you'll want
614:05 - to use json.parse to turn that
614:07 - stringified array back into a real
614:09 - javascript array
614:10 - now to avoid a kind of confusing bug i'm
614:13 - going to add a little extra piece of
614:14 - information here
614:16 - your code for part 2 when you initialize
614:19 - the state will go right here in place of
614:21 - this comment but what i added was an or
614:24 - empty array what that really does is if
614:27 - you are trying to get data from local
614:29 - storage and it doesn't exist it's going
614:31 - to return undefined but we can't set our
614:34 - notes array as undefined so if that does
614:37 - return undefined it will instead use a
614:40 - brand new empty array so i'll put this
614:42 - back to indicate where you should be
614:44 - adding your code for part two the last
614:46 - thing i'll say is that this challenge is
614:48 - a little bit trickier and it's because
614:50 - i'm being a little bit vague i'm telling
614:52 - you the feature i want you to add and
614:54 - i'm giving you a little bit of a hint
614:56 - onto how to actually code it but the
614:58 - tricky part is that you are going to
614:59 - have to reach back on the knowledge that
615:01 - you've learned throughout this course to
615:03 - figure out exactly how this should work
615:05 - so the time is yours pause the
615:07 - screencast and work on this challenge
615:16 - the main thing that i left out for
615:18 - challenge part 1 is that in order to
615:20 - interact with the local storage every
615:23 - time the notes array changes we will
615:26 - want to set up a side effect in react
615:28 - and of course that's what we do with
615:30 - react dot use
615:32 - effect i'll provide a function here for
615:36 - the first parameter and the second
615:37 - parameter i can add now because i want
615:39 - this effect to run every time the notes
615:42 - array changes
615:44 - okay so every time the notes array
615:46 - changes i want to
615:48 - use local storage dot set item because
615:51 - i'll be updating the notes key
615:54 - inside of local storage and i can use
615:57 - json.stringify to stringify the notes so
616:00 - that my array can essentially be turned
616:02 - into a string and successfully saved to
616:05 - local storage
616:06 - and i believe that's it for part one of
616:08 - this challenge now that it's saved in
616:10 - local storage part two is for us to
616:12 - actually access that local storage so we
616:15 - can in a way pre-load our app with
616:17 - whatever notes we've previously saved in
616:20 - local storage so here i can move this
616:23 - onto its own line just to save a little
616:25 - bit of room and we'll say i should
616:27 - initialize state by accessing local
616:29 - storage
616:30 - getting the item with the key of notes
616:33 - and because this will come back as a
616:35 - stringified value i need to use
616:37 - json.parse on the value that gets pulled
616:40 - in from local storage
616:42 - and you know what a small correction to
616:44 - make if local storage is unable to find
616:46 - anything at that key it doesn't actually
616:48 - return undefined it returns null the
616:51 - only reason that makes a difference is
616:52 - because if you try to json.parse null it
616:55 - will return null which is a false value
616:58 - and therefore it will use the empty
616:59 - array but if instead it tried to
617:02 - json.parse undefined you actually get a
617:04 - syntax error that would crash your
617:06 - program so in that case it's probably
617:08 - good that it returns null instead of
617:10 - undefined
617:11 - okay let's test this out i'm going to
617:12 - clean up this challenge i'll hit save
617:15 - and oh i was so close this should be get
617:18 - item not get let's hit save again
617:20 - okay we have no notes i can create one
617:23 - even just creating that note should have
617:25 - updated the notes array which means that
617:26 - if i hit refresh awesome we're starting
617:29 - with the notes that we left off on
617:31 - if i
617:32 - make a change to the note here and hit
617:35 - refresh
617:36 - those changes are here awesome if you
617:39 - wanted you also could open your
617:40 - developer tools go to the application
617:43 - tab and see that you have local storage
617:45 - that's being saved here on the scrimba
617:48 - site now obviously local storage is not
617:50 - a perfect replica of a real database
617:53 - that will permanently save your data but
617:55 - you can see in just a few lines of code
617:57 - we were able to add a feature that made
617:59 - this app much more usable than it was
618:01 - before
618:02 - so awesome work adding this feature
618:04 - however there's one tiny thing that we
618:06 - need to learn about to make this a
618:07 - little more performant than it currently
618:09 - is so we're going to take a quick aside
618:11 - before adding any more features and
618:13 - learn a new little fact about react
618:15 - state
618:18 - there's one little thing that i wanted
618:19 - to talk about regarding how we're
618:21 - initializing our state when we're
618:23 - pulling from local storage like this now
618:26 - of course whatever value we put inside
618:28 - of react.use state here in the beginning
618:31 - is just an initial value so really we
618:33 - know that it will only set this value
618:36 - when the app first loads after it loads
618:39 - react is going to maintain any changing
618:41 - state internally behind the scenes
618:43 - however there is something that we need
618:45 - to see and i can illustrate that by
618:47 - creating some new state in this case it
618:49 - really doesn't matter what it is we'll
618:51 - just say state and set state is equal to
618:54 - react.use state
618:56 - the reason it doesn't matter is because
618:58 - i'm actually going to put a console.log
619:00 - statement which will run every time this
619:03 - line of code runs
619:04 - let's just put state
619:06 - initialization
619:07 - [Music]
619:09 - i'll open up my console
619:11 - and when i hit refresh
619:13 - we can see that we get that console log
619:15 - running state initialization but now i
619:17 - want you to think about the nature of
619:19 - react and what happens when any other
619:21 - state in the app will change for example
619:23 - if i add a new note anytime state
619:26 - changes like adding a new note the
619:28 - entire app component will get
619:30 - re-rendered well if react is in charge
619:33 - of saving the initial state in the
619:35 - background then it might seem intuitive
619:37 - that it's not going to run this line
619:39 - again however if i maybe add a new note
619:42 - we can see that it does run this line
619:44 - again and that's because all that's
619:46 - really happening is react is re-running
619:48 - this entire function
619:50 - in the background it is ignoring the
619:52 - state that is trying to re-initialize
619:54 - here but if there is code such as
619:57 - running a console log or in our example
619:59 - getting something from local storage
620:02 - it's going to run that code again even
620:04 - if it doesn't use the value as its new
620:06 - initial state because it's maintaining
620:09 - that state elsewhere in the background
620:11 - now for direct commands in javascript
620:13 - this is not a big deal at all for
620:15 - example running this console log is so
620:17 - minuscule in the amount of time it takes
620:19 - for the browser to run this line that
620:21 - it's completely negligible so even when
620:24 - we're making changes
620:26 - we're making changes here
620:29 - you can see that it kept running that
620:30 - state initialization console log but
620:32 - because it takes so little effort for
620:35 - the browser to run that code it's not a
620:37 - big deal at all however something like
620:40 - localstorage.getitem is a bit more of an
620:43 - expensive call or rather it takes more
620:45 - effort for the browser to dip into local
620:48 - storage and get something every single
620:51 - state change that happens in our app as
620:53 - such react has implemented a way for us
620:56 - to really easily make it so that any
620:58 - expensive code that might be running
621:01 - inside of our state initialization can
621:03 - happen only one time and this is called
621:06 - lazy state initialization it sounds a
621:09 - lot more complicated than it is because
621:11 - in the end all i need to do is instead
621:14 - of providing a value i can provide a
621:17 - function that returns a value so here if
621:20 - i provide a function
621:22 - that returns console log of state
621:25 - initialization and let me put this down
621:27 - onto its own lines here
621:30 - i'll hit refresh
621:32 - we get the very first state
621:33 - initialization
621:35 - but then
621:36 - any changes i make don't
621:39 - rerun that code
621:41 - in the end this might seem a lot more
621:43 - verbose than what we had but if we make
621:45 - use of arrow functions and implicit
621:48 - returns i can undo this to the way it
621:50 - was
621:51 - all i really need to do is put a set of
621:54 - parentheses and an arrow even still this
621:56 - is getting a little bit long so i'll put
621:58 - this onto its own line so you can see
622:00 - the whole thing but we get the same
622:01 - effect i can hit save
622:03 - and start
622:05 - making more changes
622:07 - to state which don't rerun our state
622:10 - initialization console log now this
622:12 - state was completely contrived running
622:14 - console log inside of state is pretty
622:16 - useless but it does lead us to our next
622:19 - challenge
622:21 - your task is to lazily initialize our
622:23 - note state so that it doesn't reach into
622:26 - local storage on every single re-render
622:28 - of the app component if you were paying
622:30 - close attention you'll know that this
622:32 - will only require a few extra characters
622:34 - on your part to type in pause now and
622:36 - work on this challenge
622:44 - all we should need to do is add a
622:47 - function here at the beginning of our
622:48 - call and have it implicitly return the
622:51 - value that we had before just adding the
622:53 - parentheses and the arrow should lazily
622:55 - initialize this state so that it will
622:57 - only reach into local storage the first
622:59 - time the app loads in this case we may
623:02 - not notice much of a difference
623:04 - especially since we got rid of our
623:05 - console log that we had before but we
623:07 - can rest assured that this is going to
623:09 - work the way we want i can hit save
623:11 - which refreshes our app and it is
623:13 - successfully pulling in the notes from
623:15 - local storage
623:16 - okay so that checks off this sync notes
623:19 - with local storage feature that we just
623:21 - added next we're going to think through
623:23 - how we can add some more meaningful
623:25 - summaries here instead of note 1 and
623:27 - note 2. so let's do that in the next
623:29 - challenge
623:32 - next what we'll work on is adding some
623:34 - real notes summaries as the title for
623:36 - our notes instead of note 1 and note 2.
623:39 - right now you can see when we're mapping
623:41 - over the notes we grab the index and we
623:44 - display note and then the index one
623:47 - unfortunately this doesn't give our
623:48 - users any idea as to the contents of
623:51 - that note so your challenge is to try
623:53 - and figure out a way to display only the
623:55 - first line of the notes body property by
623:59 - the way note.body is the text that is
624:02 - showing up here in the editor and that
624:04 - first line should be pulled out and used
624:07 - as the summary that shows up here in the
624:09 - sidebar the css should already be set up
624:12 - so that it will truncate that so that it
624:14 - doesn't wrap around really long in case
624:16 - you do have quite a long first line in
624:18 - your note and i've added a couple hints
624:21 - here to help you along the way in the
624:22 - challenge
624:23 - first of all the text of note dot body
624:26 - if you console log it will not show that
624:29 - every time you hit return in the text
624:31 - editor here it's actually inserting a
624:34 - new line character let me show you what
624:36 - i mean if we go to app and we're just
624:39 - going to piggyback on top of this use
624:41 - effect that is running every time the
624:43 - notes changes
624:44 - if i console.log notes at the index of
624:47 - zero
624:49 - dot body
624:51 - and we open the console you can see the
624:54 - text shows as if it were just a space in
624:56 - between the note summary and the
624:59 - beginning of the note line however if we
625:01 - actually json dot stringify this
625:07 - we can now see that there are two new
625:09 - line characters that are sort of hidden
625:11 - between that first line note summary and
625:13 - the second line beginning of the note
625:16 - and since we have a new line character
625:18 - that can help us out your challenge here
625:20 - essentially becomes one of a javascript
625:23 - algorithm challenge so in reality it's
625:25 - not even really a react specific
625:27 - challenge i've given you a second hint
625:29 - here that you can look at if you feel
625:30 - like you need it i'm purposefully a
625:32 - little bit vague in the language so that
625:34 - if you need to you can go out to google
625:36 - and try to find some resources that will
625:38 - help you solve this challenge
625:40 - speaking of which it's time to start
625:42 - pause now and work on this challenge
625:51 - hopefully while you were working on this
625:52 - you came across the string.split method
625:55 - while i'm testing things out i can
625:57 - actually make use of what i have here
626:00 - let's get rid of our json.stringify but
626:02 - we'll just access the body of the very
626:04 - first note in our array that's going to
626:06 - be the string that we can run a split
626:08 - method on
626:10 - and the divider we can use is the new
626:12 - line character which is backslash n
626:15 - let's just see what this returns i'll
626:17 - hit save open my console and awesome it
626:20 - looks like we get an array that's split
626:23 - on the new line or in other words it
626:24 - uses the new line character to determine
626:27 - when a new item in that array should be
626:29 - created which means that if we just want
626:31 - the first line of our note we should
626:33 - just be able to access this array that
626:36 - dot split returns by the zero index so
626:39 - over in sidebar js i have access to each
626:43 - individual note
626:44 - and instead of this note with the index
626:47 - we'll just insert some javascript with
626:49 - our curly braces and we'll say note dot
626:51 - body that's our string dot split
626:54 - on the newline character backslash n
626:58 - that will return an array and we'll just
627:00 - say at the index of zero which should
627:02 - access the very first line of our note
627:04 - let's see how we did we'll hit save
627:07 - and awesome look at that i suppose if
627:09 - you want to get picky with it you could
627:10 - remove the hashtag although if somebody
627:13 - decides not to put this hashtag header
627:16 - the way that we have maybe they wanted
627:18 - to make this bold instead then we would
627:21 - no longer have a hashtag to parse out
627:22 - but instead some asterisks personally i
627:25 - don't think it's that big of a deal
627:26 - we'll probably just leave whatever
627:28 - markdown marks end up in that first line
627:31 - just as they are now i can see i'm
627:33 - console logging everything because i set
627:36 - that up here on line 18. i'm gonna clean
627:38 - that up
627:39 - and now if i change my note summary to
627:42 - something else looks like that summary
627:45 - is updating on every keystroke awesome
627:47 - work
627:48 - speaking of modifying the notes that
627:50 - leads us to the next feature that we're
627:52 - going to add and that is to move any
627:54 - modified notes to the top of our list if
627:57 - we had say 50 notes here and we scrolled
627:59 - down to the bottom and modified one of
628:01 - them that might be a good indicator that
628:03 - we're interested in updating that note
628:05 - more regularly let's say we instead had
628:08 - i don't know maybe 50 different notes
628:10 - here and we decide we want to make a
628:12 - change to this bottom one we probably
628:15 - want to bump that to the top of the list
628:17 - so that it's more easily accessible
628:19 - going forward so that's the next feature
628:21 - we're going to add in the next
628:22 - screencast
628:26 - it seems like a sensible feature to add
628:27 - to our app that if the user ever edits a
628:30 - note in the sidebar it should pop up to
628:32 - the top of the list so in an effort to
628:35 - give you real practice on adding a new
628:37 - feature all i typed out was what the
628:39 - user experience should be and it's up to
628:41 - you to figure out how to implement it
628:43 - whenever the user edits a note
628:45 - reposition it in the list on the sidebar
628:47 - to the top of the list i suppose as a
628:50 - quick hint i'll let you know that you
628:51 - will have to refactor some of the
628:53 - existing working code in order for this
628:56 - to work pause now and work on adding
628:58 - this new feature
629:06 - we have a function that exists that we
629:08 - can tap into whenever the user is
629:10 - editing a note and that's our function
629:12 - down here update note currently we're
629:14 - using the map method so that the array
629:17 - of notes stays in place in that array in
629:20 - other words if they edit note 1 it will
629:23 - always stay in the third position
629:25 - because that's just how dot map works it
629:27 - returns a new array where every original
629:29 - item is at the same index in the new
629:32 - array as it was in the original array so
629:35 - if we're wanting to rearrange this array
629:38 - there may be a way to use dot map to do
629:40 - that however off the top of my head i
629:42 - can't think of it and i'm guessing it
629:44 - would probably be so clever that it
629:46 - might be difficult to understand if
629:47 - we're reading our own code or another
629:49 - developer is reading this code in the
629:51 - future so sometimes when i'm making
629:52 - modifications like this what i like to
629:54 - do is just duplicate and comment out the
629:57 - code that was working and then even make
629:59 - a note for myself something like this
630:02 - does not rearrange
630:05 - the notes
630:06 - or something like that that will help me
630:08 - remember what i'm doing
630:10 - and then up here at least temporarily i
630:13 - might say something like
630:15 - try to rearrange the
630:18 - most recently modified note
630:20 - to be at the top
630:22 - okay i'm still going to be running set
630:24 - notes and i will still need access to
630:27 - the old notes array but instead of
630:30 - immediately returning the array that
630:32 - comes back by calling dot map i think
630:34 - i'm just going to start fresh
630:36 - so let's see i think that's here yep and
630:39 - to give myself some breathing room i'll
630:41 - open up this function and honestly i
630:43 - think the easiest way to do this might
630:45 - be a pretty imperative way i'll type
630:47 - this out as pseudocode to start so i'm
630:49 - going to create a new empty array
630:53 - loop over the original array
630:56 - and if the id matches in other words if
631:00 - the id of the note that we're currently
631:03 - looking at in our loop matches the
631:05 - current note id that we're saving in
631:07 - state just like we have here node id
631:09 - triple equals current node id then that
631:11 - means it's the note that we're currently
631:13 - editing and that means that i want to
631:16 - put
631:18 - the
631:18 - updated note at the
631:21 - beginning of the new array
631:25 - if it doesn't match
631:27 - so else
631:29 - push the old note
631:31 - to the
631:32 - end
631:33 - of the new array and after my loop is
631:36 - all said and done
631:37 - we will return
631:39 - the new array hopefully that pseudo code
631:41 - makes sense it makes sense to me but
631:43 - that's kind of the point of pseudo code
631:45 - write it so that it makes the most sense
631:46 - for you and i like doing this as a way
631:48 - to lay the problem and the solution out
631:52 - and solve any issues i might see at this
631:54 - point before i dive deep into the syntax
631:57 - of the code that's required to actually
631:58 - solve this challenge so let's do this
632:00 - we'll create a new empty array we'll say
632:03 - new array
632:05 - we'll loop over the original array i'm
632:07 - just going to use a good old-fashioned
632:09 - c style for loop so we'll say i equals
632:12 - zero
632:13 - i is less than the old notes dot length
632:17 - and i plus plus
632:20 - move my pseudo code inside here so if
632:22 - the id matches in other words if
632:26 - old notes at i
632:28 - dot id equals the current note id that
632:32 - we're looking at in state
632:34 - then i'm going to use new array dot
632:36 - unshift to push a new item to the
632:39 - beginning of the array and i can just
632:41 - take my old code here
632:44 - because i'm accessing the old note
632:47 - the one issue with copying and pasting
632:49 - is i have this object called old note
632:52 - which i am not referencing anywhere in
632:54 - my code so i'll need to change this to
632:56 - old notes at the index of i before i get
632:59 - too far down this road i really don't
633:01 - like indexing into things a whole lot i
633:04 - think i'd rather say
633:06 - old note equals old notes at the index
633:09 - of i and that way i can use old note
633:12 - over and over instead of having the
633:14 - weird syntax of the index there so as
633:16 - we're looping through our old notes if
633:18 - the id of the one we're currently
633:20 - looking at matches the one that the user
633:22 - is currently editing then add this new
633:25 - object to the beginning which has the
633:27 - updated text and all the old properties
633:29 - just like we were doing before
633:31 - but otherwise
633:33 - we can just push
633:35 - to the end of our new array the old note
633:39 - because we don't plan on modifying it at
633:41 - all
633:42 - we can clean up some of these comments
633:45 - then lastly we just need to
633:48 - return
633:50 - new array
633:51 - as you can see this is a lot more
633:53 - imperative with our c style for loop and
633:55 - everything but let's hit save
633:59 - we'll go to note 1
634:01 - make any kind of modification like
634:02 - hitting return
634:04 - uh-oh looks like we have a bug here oh
634:06 - and you probably saw this while i was
634:08 - updating my old note here but i left
634:10 - this as old notes instead of old note
634:13 - little things like that will get you all
634:15 - the time let's try this again i'll hit
634:17 - save
634:18 - note 1 hit return
634:20 - awesome note 1 just pop to the top of
634:22 - the list we can test this with some
634:25 - other ones maybe i make a change here
634:29 - and sure enough it's at the top of the
634:30 - list and note 1 is still modified
634:34 - and of course now it's at the top of the
634:36 - list
634:37 - awesome
634:38 - at this point i can probably clean up
634:40 - some of my comments if i'm not going to
634:41 - be needing any of that old code or
634:43 - anything like that although it might be
634:45 - helpful for a future developer to
634:48 - see that your code is written the way it
634:50 - is because you want to put the most
634:53 - recent change at the top so maybe i'll
634:55 - just update this to say
634:57 - put the most recently modified
635:00 - well that should say note
635:02 - at the top
635:03 - awesome work and that does it for this
635:05 - challenge the next and final feature
635:08 - that we are going to add to this app
635:10 - together is the ability to delete notes
635:13 - so that's what we'll tackle in the next
635:14 - challenge
635:17 - the very last feature we're going to add
635:19 - to our notes app is the ability to
635:21 - delete notes i've made a few changes
635:24 - since you last saw this app so let's
635:26 - talk through those
635:27 - first of all in the sidebar i added a
635:29 - button that has an icon inside and this
635:33 - icon has a trash icon that's a pure css
635:36 - trash icon i didn't create this i copied
635:39 - this from a site that has pure css icons
635:42 - before you think i'm some kind of genius
635:43 - in css and i set that up so that it will
635:46 - only show up when you hover on one of
635:48 - the notes so as i hover over the sidebar
635:52 - note the little trash icon shows up
635:54 - right now clicking it doesn't do
635:56 - anything that's going to be your
635:57 - challenge however you can see that
635:59 - clicking the trash icon is also changing
636:02 - the selected note in the sidebar and
636:04 - that caused me to run into a bug and so
636:08 - i started some of this code for you
636:10 - we've got the function delete note that
636:12 - will receive an event and a note id and
636:16 - i wrote this line out for you event dot
636:18 - stop propagation without going too in
636:20 - depth what it does is it says when this
636:22 - trash icon handles the click event
636:25 - stop propagating that click event to the
636:28 - parents like the sidebar div that's
636:31 - holding this entire note in other words
636:33 - this trash icon is a child element of
636:36 - the note on the side here and so when i
636:39 - click the trash currently it's
636:40 - propagating that click event through to
636:42 - the parent which is also handling a
636:44 - click event now the fact that it is
636:46 - still propagating that should tell you
636:48 - that my trash icon is not correctly
636:50 - using this delete note click event so
636:53 - that's going to be part of your
636:54 - challenge before i read through it let's
636:56 - go to the sidebar you can see i
636:58 - specifically indicated where you need to
637:00 - add your on click event handler so let's
637:03 - look at the challenge it's to complete
637:05 - and to implement the delete note
637:07 - function now i've given you a couple
637:09 - hints here the first one is to think
637:10 - about what array method you can use to
637:13 - return a new array that has filtered out
637:16 - one of the items in our case because
637:18 - we're just deleting one item based on
637:20 - some kind of condition hopefully the
637:22 - language of that hint can give you a
637:24 - pretty good indication as to what array
637:26 - method you can use i also want you to
637:28 - look closely at the parameters that
637:30 - we're passing to delete note keep in
637:32 - mind that normally on an event listener
637:35 - we don't get to choose what parameters
637:37 - we're passing so you'll have to find a
637:39 - little workaround which we have talked
637:41 - about in the past in order to pass both
637:44 - the event object and the notes id and
637:47 - this is the id of the note that is going
637:49 - to be deleted as an aside the reason
637:52 - that i had to do the stop propagation
637:54 - isn't just because i didn't want to
637:55 - select that note it's because i was
637:57 - getting an error i would delete the note
637:58 - and then it would try to select it as
638:00 - the current note after it was deleted
638:02 - and that was throwing an error because
638:04 - that note no longer existed in my array
638:07 - of notes
638:08 - okay i've talked long enough now's your
638:10 - chance to complete this challenge pause
638:12 - the screencast and try to implement the
638:14 - delete note function
638:23 - before we work on the code here let's
638:25 - test to make sure that we can
638:26 - successfully add the event listener to
638:28 - the trash icon button i'm going to just
638:31 - add a console log that says deleted note
638:35 - and then maybe i'll add the note id just
638:38 - to make sure that i'm successfully
638:40 - passing down the correct note and then
638:42 - we need to pass this function down
638:44 - through props to our sidebar component
638:47 - we'll add a new prop called delete note
638:49 - which will just be the delete note
638:51 - function and then in the sidebar we're
638:53 - already receiving props so i will add an
638:56 - on click event handler here and your
638:58 - first inclination might have been to
639:00 - just pass props dot delete note here
639:03 - however that's why i provided you the
639:04 - hint about what parameters we're passing
639:07 - to this function by default whatever
639:09 - function we pass to an event handler
639:11 - will receive the event as its parameter
639:14 - and in order to pass something else
639:16 - along with that i'd either need to do
639:18 - some kind of magic with dot bind which
639:21 - i'm not going to get into or more simply
639:23 - i can say this is my function that i
639:26 - want to call this entire anonymous
639:28 - function and the first line or only line
639:32 - of that function will call delete note
639:34 - that way i can take the event that i'm
639:37 - receiving as a part of the on click
639:39 - callback function and pass it along to
639:42 - my delete note function but then i can
639:44 - also tell it to pass the notes id
639:48 - remember we're here inside of dot map
639:50 - and we have access to this note variable
639:52 - which has an id property and that's what
639:54 - we're passing down to delete note as
639:57 - we're calling it i'll get rid of this
639:59 - line here i'll hit save
640:01 - let's open up the console and click the
640:04 - delete icon here and awesome okay and
640:07 - it's good that these ids are different
640:09 - so that i'm not getting some kind of
640:11 - captured value or anything weird like
640:13 - that so now let's go to app.js and
640:15 - finish implementing the delete note
640:17 - function
640:18 - i gave you a pretty good hint in my
640:20 - first hint when i talked about filtering
640:23 - out an item and that's because we are
640:25 - going to use
640:27 - array.filter but in our case we're only
640:29 - going to filter out the one item based
640:32 - on this id since i'm updating my state
640:34 - i'm going to call set notes i do need
640:37 - access to my old array of notes so i'll
640:40 - use the callback function with old notes
640:42 - as the parameter and i want to return a
640:45 - new array that results from calling old
640:48 - notes.filter
640:49 - dot filter takes a callback function and
640:52 - whatever we return from this callback
640:54 - function needs to be a boolean to
640:56 - indicate whether the current item we're
640:59 - iterating over in the original array
641:01 - should be included in the new array or
641:03 - not so we'll say that for each note
641:06 - we're looking at i want to make sure i
641:08 - include items whose id property does not
641:12 - equal the note id that we're trying to
641:15 - delete this only has one parameter so i
641:17 - can remove these extra parentheses
641:19 - so once again we're looking at all of
641:21 - our notes
641:22 - we want to run the filter method
641:25 - we're going to look at each note in that
641:27 - array
641:28 - and if the id does not equal the one
641:31 - we're trying to delete then this will
641:33 - result in true
641:35 - which means i do want it included in the
641:37 - new array that i'm returning from dot
641:39 - filter which means essentially if it's
641:42 - not the one that i click delete on it
641:43 - will leave it alone and continue to
641:45 - exist in the array however for the
641:48 - onenote that i did click delete on
641:50 - note.id will equal note id and therefore
641:54 - this will be false and therefore that
641:57 - note that i click delete on will not be
641:59 - included in the array and thus it'll get
642:01 - removed from my state
642:03 - i'll hit save
642:05 - let's click delete on note 2
642:08 - and awesome we have note 1 and note 3
642:10 - left i can click delete on note 3 and
642:12 - note one we have no more notes in our
642:14 - array if i hit refresh we're still at no
642:17 - notes i can create notes and everything
642:19 - seems to be persisting exactly as we
642:21 - would expect
642:22 - now i totally understand there were
642:24 - probably two really difficult parts in
642:26 - this challenge one was understanding how
642:28 - to use dot filter in truth you don't
642:30 - have to use that filter you can do
642:32 - something a little more imperative like
642:34 - what we did up here where we just
642:36 - created a new array and manually
642:38 - iterated over with an old style for loop
642:41 - if you did it that way that's completely
642:43 - okay obviously this dot filter gives us
642:45 - a chance to do it in a really succinct
642:47 - way but that doesn't necessarily mean
642:50 - it's the only or best way and then the
642:51 - other tricky thing that may have tripped
642:53 - some people up was adding this callback
642:55 - function that calls props.delete note
642:58 - but as a quick reminder if you ever
643:00 - really need extra parameters other than
643:02 - just the event in your callback function
643:05 - then you're probably going to pass a
643:07 - whole callback function here instead of
643:09 - just calling props.deletenote so that
643:11 - you can pass whatever parameters you
643:13 - want to your own function
643:15 - and that brings us to the end of this
643:17 - notes app hopefully you were able to
643:19 - complete all of these challenges that we
643:21 - worked on together i know that it's
643:23 - difficult to jump into a new code base
643:26 - and try to add features but there's
643:28 - almost no better practice for you as
643:29 - you're learning react than to jump into
643:32 - an existing code base and try to figure
643:34 - things out we've come a super long way
643:36 - since we first started react so as a
643:38 - final hurrah in this course the next
643:40 - thing we'll be working on is the final
643:42 - capstone project for this course and
643:45 - this will be one that we create
643:46 - completely from scratch since we're
643:48 - going to be jumping into a new project i
643:50 - highly recommend you really soak in
643:52 - everything that you are able to learn
643:54 - from this notes app and even go above
643:56 - and beyond with it if you don't feel
643:58 - like you've gleaned all the information
644:00 - you could from this app then stick with
644:02 - it try to add new features even try
644:04 - something small like changing the design
644:06 - of it to better fit your personal
644:08 - preference then once you feel like
644:10 - you've soaked up all the information you
644:12 - can from this app we're gonna jump into
644:14 - the final capstone project for this
644:16 - course
644:19 - here's the game we're going to be
644:20 - building as our first major capstone
644:22 - project if you haven't played tenzi's
644:24 - before it's a dice game that's usually
644:26 - better suited for younger children but
644:28 - because of that the complexity is low
644:30 - enough that it makes for a pretty good
644:32 - project here the idea is to try and roll
644:35 - 10 dice that are all the same and in our
644:37 - game you can click on one of the dice to
644:39 - hold it and when you click roll those
644:42 - held dice won't change we'll click the
644:44 - other twos and we'll just kind of play
644:46 - this game until all of the dice that we
644:49 - roll are the same number
644:53 - and as soon as we hold the last dice the
644:56 - game is going to notice that we have all
644:58 - twos it'll play this fun confetti drop
645:00 - here it'll change the button from roll
645:03 - to reset game and of course when we
645:05 - click reset game it will start us all
645:07 - over from the beginning the design for
645:10 - the game can be found here if you click
645:12 - this screenshot it'll send you to the
645:14 - figma file for this game and i included
645:16 - a little animated gif just in case you
645:18 - forgot how this game is supposed to work
645:21 - so you can reference this as well
645:23 - feel free to peruse the code that we
645:25 - have here you can see it's less than 100
645:27 - lines of code in the main app.js
645:30 - component which contains most of our
645:32 - logic so get geared up to create an
645:34 - awesome react project when you're ready
645:36 - let's jump right in
645:40 - all right we're starting from the very
645:41 - beginning the only thing i've added is
645:44 - some really basic styling for you and
645:46 - i've included some google fonts for you
645:48 - but there is nothing in our react code
645:50 - at all so your challenge is to create a
645:53 - brand new react app i want you to create
645:55 - a separate app component that will live
645:57 - in a separate file and then here in
645:59 - index.js make sure to import that app
646:01 - component and render it inside the app
646:04 - component it should render a main
646:06 - element and then for now i just want you
646:08 - to style everything to look like the
646:10 - basic outline for our game you can click
646:12 - on the slide to go to the figma file
646:14 - where you can find some of the design
646:16 - elements well specifically this
646:17 - background color so pause the screencast
646:20 - and set up our tenzi's game
646:29 - okay let's import the things we need we
646:31 - know we need react from react
646:34 - because we're going to be using react
646:36 - dom we'll have to import react dom from
646:39 - react-dom
646:41 - while i'm importing things i'll import
646:43 - app from a non-existent app file we'll
646:45 - get to that in just a second and we'll
646:47 - use reactdom.render
646:50 - to render an app component and the place
646:53 - we want to render it is in the element
646:55 - that we get from getelementbyid root
646:58 - let's create our new file for app.js
647:02 - we'll import react from react
647:06 - and export our component
647:11 - like i said we'll have it return a main
647:13 - element
647:15 - maybe i'll just put something here so i
647:17 - can see that things are working okay
647:19 - pretty underwhelming now let's get to
647:21 - some style i can see that from the
647:24 - design it looks to me like the entire
647:26 - body probably has this background color
647:29 - and then the main element is this white
647:32 - box here
647:33 - so in the body i'll give it a background
647:36 - color
647:37 - which from the design we can see is this
647:39 - color and since my main element is
647:42 - essentially going to be the container
647:44 - for everything i don't think i'm going
647:45 - to bother with adding a class name
647:47 - really i'm just going to have the main
647:49 - element that i style and it looks like
647:51 - that background color is not white in
647:53 - the design it's
647:55 - this very close to white color let's add
647:57 - a little bit of padding to the body so
648:00 - that there is that blue outline around
648:02 - our main element we'll say maybe padding
648:04 - 20 pixels
648:06 - i'll add a height to my main we'll say
648:09 - it's maybe about 400 pixels i could
648:12 - probably use a percentage or use view
648:14 - height for now this will do the trick
648:16 - and if i need to i'll come back later
648:18 - and update that and then maybe instead
648:20 - of a width i'll add a max width and say
648:23 - something like 800 pixels because of the
648:25 - padding we have we still have that
648:27 - little outline on the sides the max
648:29 - width makes it so that it doesn't get
648:31 - too wide if we get really wide but i
648:33 - don't think that's going to be a problem
648:35 - that i'm going to be too worried about
648:36 - right now
648:37 - looks like we have a bit of a border
648:39 - radius so we'll add maybe 5 pixel border
648:42 - radius and there certainly will be more
648:45 - styles that we decide to add to this
648:46 - later but for now i think this is good
648:48 - i'm going to get rid of my something
648:50 - text here and awesome this is a great
648:53 - start next let's see if we can add our
648:56 - little dice components onto the screen
648:58 - we won't worry about any data or
649:00 - generating the numbers quite yet we'll
649:02 - just get these components working so
649:04 - when you're ready let's move on to that
649:08 - the next thing we'll do is get some die
649:10 - components rendered to the page for now
649:13 - we'll just manually put in 10 instances
649:15 - of our die component and in the end it
649:17 - should look like this once again you can
649:20 - click this slide to go to the figma file
649:22 - so you can get things like the box
649:24 - shadow and the font size for these and
649:26 - everything the challenges written out
649:28 - here create a die component this will be
649:30 - in a separate file and that die
649:32 - component should take a value prop or a
649:35 - prop called value then inside of our
649:37 - main here you'll render 10 instances of
649:40 - the die component just manually and
649:42 - provide a number between 1 and 6 for the
649:45 - value prop on each one of those for now
649:47 - and then make sure to style the main
649:49 - component and the die component that you
649:51 - create to look like they do in that
649:52 - slide and just to make your css life a
649:55 - little bit easier i added a couple hints
649:57 - here i'd recommend making a container
650:00 - that will surround all 10 of these dice
650:03 - instead of just putting them directly as
650:04 - children of the main element and that
650:07 - way you can make that container a
650:08 - display grid so you can make it always
650:11 - display in two rows of five columns and
650:14 - to get the separation between these
650:16 - elements you can use the gap property
650:18 - which will provide this spacing here and
650:20 - then i would turn the main element the
650:22 - one that has this white box into a flex
650:26 - box so you can easily put that container
650:28 - in the center of the screen okay pause
650:30 - now and work on adding some dye
650:32 - components that will display our dice to
650:34 - the screen
650:42 - let's start by making a new dice
650:44 - component so i'll make die.js
650:47 - sounds a little violent but that's the
650:49 - correct singular of dice we'll import
650:52 - react from react and export our
650:54 - component
650:56 - i know that this is going to take props
650:58 - because we want to display a value prop
651:01 - and looking at these dice because i see
651:03 - this white outline around it that is the
651:05 - shape of the die i'll probably actually
651:07 - make this a nested element or rather
651:10 - i'll
651:11 - return something like a div
651:15 - and inside that div is where i'll put
651:16 - the text element itself let's call it an
651:19 - h2
651:21 - and this h2 is going to display props
651:23 - dot value we'll get to styling this in a
651:26 - minute but let's in our app.js import
651:29 - our die component
651:31 - i'll create that container that i was
651:33 - mentioning
651:36 - and let's just render 10 instances of
651:38 - our die component we'll pass in a value
651:41 - which we'll just start as one
651:43 - and i'll just duplicate this ten times
651:47 - okay let's see where we are
651:49 - okay that's about where we expect to be
651:52 - now let's start adding some styling
651:54 - first let me create my grid here so i'll
651:56 - give this a class name
651:58 - let's say this is the dice container
652:02 - and we'll set that up to be a grid
652:05 - so display grid
652:08 - give it a grid template and i'm going to
652:11 - be specifying a height and width on each
652:14 - of the die components themselves and so
652:17 - i think what i'll do is just say this is
652:18 - going to be two rows that are each auto
652:21 - determined in their height
652:23 - and then i'll use the repeat function to
652:26 - say each one of the columns will be one
652:28 - fraction unit wide and we'll have five
652:31 - columns
652:32 - let me actually refresh one of these
652:34 - components here so i can see this
652:36 - applying live
652:38 - okay that's looking not too bad maybe
652:40 - before i provide some styling here let's
652:42 - go ahead and create the little dice look
652:45 - around it so it has the white box i'll
652:47 - go to dye js and this div here
652:51 - let's give it a class name of maybe die
652:55 - face since that's the face of each of
652:57 - the die
652:58 - and i'll save that and go to style.js
653:01 - let's style up die face
653:04 - and we'll give these a height of 50
653:06 - pixels and a width of 50 pixels
653:10 - i'm going to paste in a box shadow from
653:12 - the design just so we can see the
653:14 - surrounding area without actually giving
653:17 - it a border
653:19 - we'll give it a border radius
653:22 - of 10 pixels
653:24 - and then i want that number to be
653:25 - perfectly centered in the middle so
653:28 - let's make this
653:29 - die itself display flex which will allow
653:32 - us to justify the content to the center
653:35 - and we'll make sure that we align the
653:37 - items to the center as well
653:39 - then in our container let's go ahead and
653:41 - add a gap so we'll say a 20 pixel gap
653:45 - so that the items can spread out a
653:47 - little bit
653:48 - okay i don't love how they're jammed all
653:50 - the way up to the edges of my main
653:52 - element so i think i'll add some padding
653:54 - to my main
653:57 - say maybe about 20 pixels
653:59 - and then as i mentioned in the hints i
654:01 - think what i'll do as well is make my
654:04 - main a display flex
654:06 - which kind of screws it up temporarily
654:08 - but will set the flex direction to
654:11 - column so that the elements are being
654:13 - spread out top to bottom
654:16 - and that will allow me to justify the
654:18 - content to the center which allows me to
654:20 - put that directly in the center
654:22 - maybe for good measure i'll say align
654:24 - item center i don't know that that's
654:26 - going to make a difference well yeah it
654:28 - actually pushed the items a little more
654:30 - evenly spaced together so that was good
654:32 - the last thing i think i'll do is add
654:34 - cursor pointer
654:36 - even though this won't necessarily show
654:37 - up in the recording of the scrim if you
654:39 - refresh this app you can see that it now
654:42 - changes to that little mickey mouse
654:44 - glove hand the only other thing i can
654:46 - think of is these numbers are looking a
654:48 - little bit smaller than i was hoping
654:50 - so let me actually render dice with all
654:53 - of the different values on a regular six
654:56 - sided dice just so i can see a
654:58 - comparison of the numbers and then i'll
655:00 - give a class name to the number itself
655:03 - we'll say class name is maybe die dash
655:07 - num and we'll add some style to that
655:09 - we'll say dot die dash num
655:12 - let's give it a font size of
655:14 - maybe two rims
655:16 - is that too big let's see
655:18 - it's pretty large but it really helps
655:19 - highlight what the number is and since
655:21 - that's the most important part of the
655:22 - dice i think that'll probably be good it
655:25 - also looks like these dice are blending
655:27 - into the background i'm assuming they
655:28 - probably have a transparent color so i'm
655:30 - going to give them their own
655:32 - background color of pure white and
655:35 - awesome yeah that really makes them
655:36 - stand out better
655:38 - okay that was a lot of time being spent
655:40 - on css but now what we can do is go in
655:43 - and instead of manually putting in these
655:45 - die components like this we probably
655:48 - should be generating an array of 10
655:50 - random numbers and mapping over that
655:53 - array to create these die components so
655:55 - that's what we'll do in the next section
655:57 - of the project
656:00 - we'll break up the generation of these
656:02 - dice components into smaller challenges
656:04 - this is a really good habit to get into
656:06 - when you're problem solving instead of
656:08 - being overwhelmed by a larger problem
656:11 - like let's generate 10 random values and
656:14 - create multiple die components based on
656:16 - those values instead break that down and
656:19 - say let's just make a function that
656:21 - generates an array of 10 random numbers
656:23 - and then we can tackle the creation of
656:25 - the die components later so that's
656:27 - exactly what we're going to do your
656:29 - challenge is to write a function you can
656:30 - call it all new dice that returns for
656:33 - now an array of 10 random numbers
656:35 - between 1 and 6 inclusive if you can't
656:38 - remember how to generate a random number
656:40 - in javascript a quick google search will
656:42 - certainly help you out and then for now
656:44 - let's just log the array of numbers to
656:46 - the console pause the screencast and
656:48 - write our all new dice function
656:58 - a quick side note on algorithm
657:00 - challenges like this i really highly
657:02 - recommend that you try to come up with
657:03 - your own solution i mentioned turning to
657:06 - google to learn how to generate a random
657:08 - number in javascript but for practice
657:11 - sake i hope that you didn't just google
657:13 - how do i create an array of 10 random
657:15 - numbers in javascript instead i really
657:19 - want you to put on your thinking cap and
657:21 - try to find solutions on your own before
657:23 - turning to google something like
657:25 - generating a random number is not really
657:27 - a challenge in javascript so much as a
657:30 - syntax that you need to use but the rest
657:32 - of this creating your function that
657:34 - returns an array of ten numbers is
657:36 - really a problem-solving challenge that
657:38 - you should be practicing and not just
657:40 - finding other people's solutions for
657:42 - right away okay i'll get off my high
657:44 - horse there i'm going to create this
657:46 - function inside of my app component so
657:48 - we'll say all new dice
657:51 - and i think i'll break this problem down
657:53 - into smaller parts so first of all i
657:55 - need a new array to hold
657:58 - my numbers
657:59 - i'll probably need to loop 10 times
658:02 - and as a part of that loop i'll need to
658:05 - push
658:06 - a random number
658:08 - from 1 to 6 to my array
658:11 - and then after the end of my loop
658:13 - i can return
658:15 - that array which will at that point have
658:18 - 10 new numbers in it and that should say
658:20 - my numbers okay so we'll say
658:23 - maybe
658:24 - new dice is going to be an empty array
658:28 - and then i can use just a c style for
658:30 - loop should be fine i equals 0 i is less
658:33 - than 10 i plus plus
658:36 - we can say new dice dot push
658:39 - and to generate a new random number you
658:41 - have probably come across a solution
658:43 - like math.floor
658:44 - math.random
658:46 - and then you can say times six
658:49 - and then you have to add one to the end
658:51 - of it and honestly i can't remember what
658:53 - order these are supposed to be in but
658:54 - instead of adding one if you want it to
658:57 - not start at zero but start at one you
658:59 - can actually use math.ceiling
659:01 - math.random and i forgot my parentheses
659:04 - there and the time 6 should be in here
659:06 - so that was all kinds of problematic but
659:08 - the point is this will create a random
659:10 - number from 1 to 6
659:13 - and then once that number is created it
659:15 - will push it to the new dice it will do
659:16 - that 10 times and at the very end i can
659:19 - just return my new dice array get rid of
659:22 - my pseudo coding planning comments
659:24 - and then let's go ahead and console log
659:27 - what comes back by calling all new dice
659:30 - open my console hit run
659:33 - oh and so close and you probably saw
659:35 - this when i typed this out it should be
659:37 - new dice not new nice
659:39 - okay
659:40 - cool all of those numbers are between 1
659:43 - and 6 inclusive and there are 10 of them
659:45 - so awesome that probably does it for
659:48 - this challenge in the next screencast we
659:50 - will take this array and we'll turn it
659:52 - into actual dice components
659:56 - all right here's the next part of the
659:58 - challenge from before let's make use of
660:00 - the all new dice function that we
660:01 - created and create new state to hold
660:04 - this array of numbers and in fact when
660:07 - you are initializing state you can set
660:10 - its initial state to be a call to the
660:13 - all new dice function and that way as
660:15 - soon as the component loads it will
660:17 - generate all new dice for us right at
660:19 - the beginning then with your brand new
660:21 - state you should map over that array and
660:23 - generate the array of die elements that
660:26 - we will use to replace the manual 10
660:28 - items that we wrote here
660:30 - pause now and work on this challenge
660:40 - okay let's create some state here at the
660:42 - top of our component we'll say
660:45 - maybe we'll just call this our dice and
660:47 - set dice
660:49 - and that's react.use state we're going
660:52 - to initialize the dice state by calling
660:54 - our all new dice function
660:57 - and then to generate the array of dye
660:59 - elements by mapping over our dice i
661:02 - could either do it directly here inside
661:04 - of my return i could put my curly braces
661:07 - to put in some javascript and say
661:09 - dice.map whatever i personally prefer to
661:13 - generate an actual variable that holds
661:15 - that array of die elements but outside
661:18 - my return really only because it helps
661:20 - me separate the logic a little bit
661:22 - either way is completely fine so i'll
661:25 - say const dice elements equals die stop
661:28 - map i'm going to look at each individual
661:31 - die and i'm going to return a die
661:34 - component
661:36 - with the value prop
661:38 - set to the number of that die now
661:41 - remember right now we're just iterating
661:43 - over an array of bare numbers and so
661:45 - here die really just represents the
661:48 - number itself and now dice elements will
661:50 - be an array but instead of an array of
661:52 - numbers it will be an array of die
661:54 - elements with the value prop set to the
661:57 - same number as the item at the same
661:59 - index in the original dice array now i
662:02 - can just render this dice elements array
662:04 - right down here before these were hard
662:06 - coded and we could see it went one two
662:08 - three four five six and then a bunch of
662:10 - ones now when i hit save we should get a
662:12 - bunch of random
662:14 - numbers that show up here in fact it
662:16 - should be random every time i hit save
662:18 - we'll get a different set of numbers now
662:20 - because we're mapping an array into an
662:22 - array of components react is warning us
662:25 - that we need to provide a unique key
662:28 - prop to each of these elements right now
662:30 - we actually don't have a great piece of
662:32 - data to use as a unique key prop but
662:35 - later down the road when we refactor our
662:38 - dice elements that are in this array
662:40 - from a set of numbers to a set of
662:42 - objects we'll come up with a solution
662:44 - for providing a key prop here however
662:47 - that's not the next step we're going to
662:49 - take instead we're going to create a
662:50 - button that will allow us to re-roll all
662:53 - of our dice so that we can roll our dice
662:55 - without having to refresh our
662:57 - application so for now we'll ignore that
662:59 - warning but we will solve that in a bit
663:01 - when you're ready let's move on and
663:03 - create our roll dice button
663:07 - the next thing we want to add is a roll
663:08 - button that when it's clicked will
663:10 - generate all 10 new dice for us down the
663:13 - line we'll be modifying it so that we
663:14 - can hold dice that are exempt from this
663:17 - roll button but for now just make it so
663:19 - that it rolls all new dice
663:21 - you can put your button right here below
663:23 - the dice elements and well the rest of
663:26 - it i'll let you figure out pause the
663:28 - screencast and work on this challenge
663:37 - first i will create a new button
663:40 - and we'll just have it say roll actually
663:43 - let's just hit save and see where that
663:44 - gets us
663:45 - and as a reminder we will be having this
663:47 - warning every time we hit save we're
663:49 - going to address that really soon and
663:51 - well that's pretty abysmal in terms of
663:53 - styling but it looks like we've got a
663:54 - button there maybe let's hook it up
663:56 - first and then we'll style it clicking
663:58 - the button should run a function that
664:00 - will generate new dice by using set dice
664:03 - and we could probably just combine our
664:05 - all new dice to determine what the new
664:07 - dice are so i'll go ahead and create a
664:10 - function called roll dice
664:12 - and this will just call set dice and for
664:15 - now we don't care what the old dice were
664:17 - we're just generating all new dice so
664:19 - we'll just run all new dice to generate
664:21 - the new numbers and then let's connect
664:23 - the roll dice function up with an on
664:25 - click handler
664:28 - okay i'll hit save
664:30 - and when i click roll awesome we're
664:32 - getting all new dice well that was
664:34 - simple enough now let's add some style
664:36 - to our dice i'm going to add a class
664:39 - name to the button
664:41 - maybe let's just call it
664:43 - roll dice
664:44 - and then we'll add some styles
664:47 - to the roll dice class and i'll mostly
664:49 - just be following what we have here in
664:51 - the sigma design i think i'll set the
664:54 - height to about 50 pixels the width to
664:58 - about 100 pixels
664:59 - and i might need to hit save so these
665:01 - can apply live yep there we go
665:04 - we'll take away the border with border
665:06 - none but it does have a border radius
665:09 - about maybe six pixels
665:11 - it's got a background color that we can
665:14 - find in the design
665:16 - and we just need to spell that right
665:18 - there we go
665:20 - the text color is white so we'll change
665:22 - the color to white
665:23 - looks like the font size is a bit larger
665:26 - let's call it 1.2 rims and if i remember
665:30 - right buttons i believe don't take on
665:32 - the correct font family so let's grab
665:34 - the font family and oh it looks like we
665:37 - never set the font family on the body
665:38 - let's go ahead and do that now i'm using
665:40 - this carla font that i'm bringing in
665:42 - from google
665:43 - okay we can see that making a difference
665:45 - we're going to do the same font family
665:47 - on our button
665:50 - now this i don't think is the greatest
665:52 - practice for accessibility but just for
665:55 - our visuals right now i'm going to take
665:57 - away the
665:58 - outline whenever the button is focused
666:02 - so we'll say outline is none and this
666:04 - wasn't something in the design but it's
666:06 - a nice little touch i'm going to add an
666:08 - active class which means when you're in
666:11 - the process of clicking the button it's
666:13 - going to add this inset box shadow and
666:15 - that will just make it so that
666:18 - it looks like it's being pressed or
666:19 - indented into the screen which is kind
666:21 - of nice
666:22 - now right now our spacing is a little
666:24 - funny let's go ahead and fix that i
666:25 - think one way i could easily do that is
666:28 - to
666:29 - instead of doing justify content center
666:32 - i might try space around
666:35 - and it puts our numbers a little bit
666:36 - high especially when eventually we're
666:38 - going to have some text up there but
666:41 - when we add the text it might rearrange
666:43 - everything in a pleasing way so for now
666:45 - i think i'm okay with the way it is and
666:47 - yeah i should be able to click roll and
666:49 - everything is working great again in the
666:52 - recording you won't see this but i think
666:53 - i also will add the cursor pointer
666:56 - just to make it very clear that it's a
666:58 - clickable button and awesome great job
667:01 - at this point it's a great idea for you
667:02 - to do a little self-assessment and see
667:05 - if you were able to accomplish that
667:07 - challenge all by yourself everything we
667:09 - did in this challenge should almost be
667:11 - second nature to you now based on the
667:13 - amount of repetition that you've had the
667:15 - opportunity to do if you did struggle
667:17 - with this challenge now would probably
667:19 - be another great opportunity to jump
667:21 - back in the curriculum re-watch some of
667:24 - the lessons that we've done and more
667:26 - importantly redo some of the challenges
667:28 - that we've assigned to you and that way
667:30 - when you come back to this roll dice
667:32 - button challenge you can do it
667:33 - comfortably without it being overly
667:35 - difficult
667:36 - and then of course whenever you're ready
667:38 - the next thing we're going to work on is
667:40 - being able to hold the dice so that when
667:42 - we click roll it does not change the
667:44 - dice that are held and that's the
667:46 - challenge we're going to tackle next
667:50 - the next thing we'll work on is the
667:52 - ability to hold dice in place so that
667:55 - when the roll button is clicked those
667:57 - dice that we've held don't change
667:59 - up until now we've been saving just bare
668:01 - numbers or integers in an array but in
668:04 - order for each dice to also contain
668:06 - information about whether or not it's
668:08 - being held
668:09 - we'll want to change those to an object
668:12 - so that is your challenge here update
668:14 - the array of numbers and state to be an
668:16 - array of objects instead those objects
668:19 - should have a value property which
668:21 - contains the number of the dice or
668:23 - rather the number that is being
668:24 - displayed on each die and an is held
668:28 - property which we will default to false
668:30 - don't worry about styling the dice or
668:33 - fixing the roll button quite yet we're
668:34 - going to do this over the next few
668:36 - challenges but simply making this change
668:38 - from an array of numbers to an array of
668:41 - objects is going to break other parts of
668:43 - our code so the next part of your
668:45 - challenge is to bring it back to a
668:47 - working state pause the screencast and
668:49 - work on this challenge
668:58 - i purposefully didn't show you exactly
668:59 - where these changes need to be made so
669:01 - that you would have to do some thinking
669:03 - about it the place where we are
669:05 - generating the numbers and pushing them
669:07 - to the array is right here we're
669:10 - creating a new array and just pushing a
669:12 - number that's randomly generated so
669:14 - let's simply update this line of code
669:16 - instead of pushing a number i'm going to
669:18 - push an object with a value property
669:21 - that contains that number and an is held
669:24 - property
669:25 - that contains a boolean will default
669:28 - every one of them to false
669:30 - i think i'll put these on their own
669:31 - lines so it's a little bit easier to
669:33 - read
669:34 - and now every time we call all new dice
669:37 - we are creating an array of objects that
669:40 - means down here when we're mapping over
669:43 - our array of objects and die is no
669:45 - longer a number but is an object the
669:48 - value needs to be die dot value let's
669:51 - hit save and see how we did okay well we
669:54 - still have our warning from react about
669:56 - adding a key property we're going to
669:58 - work on that in just a second but let's
669:59 - test to make sure that everything is
670:01 - working and awesome looks like we're in
670:03 - a good place
670:04 - now the next thing i'm going to do wades
670:06 - into deeper waters of intermediate or
670:08 - advanced react so i'm going to explain
670:11 - it in a very surface level way but just
670:13 - know that for now it's not terribly
670:15 - important that you truly deeply
670:17 - understand exactly what we're going to
670:18 - do i want to address this warning that
670:20 - we're getting where each child in a list
670:22 - should have a unique key prop when
670:24 - you're pulling data from an api and it
670:26 - receives some sort of unique id
670:28 - generated by the database that's perfect
670:31 - that is the id that you should use for
670:33 - your key prop in our case we are not
670:35 - receiving that because well we're not
670:37 - calling out to a database at all we're
670:39 - generating these objects on the fly now
670:41 - the reason this key prop is important in
670:44 - the first place is so that react has a
670:46 - good way to keep these in the correct
670:49 - order in case anything were to be
670:51 - removed or added to this array in our
670:54 - case we will always have 10 items in
670:56 - this array and we don't plan on removing
670:59 - or adding any new dice to our game here
671:02 - so one solution is to get a third party
671:05 - package which i can add as a dependency
671:07 - i'm going to add one called nano id
671:11 - and nano id is just a really fast way
671:14 - for me to generate a random id on the
671:17 - fly in my code what i can do at the top
671:20 - is import
671:22 - nano id
671:24 - from the package nano id
671:26 - and then every time i'm creating this
671:28 - object i will create a new id property
671:31 - and just call the nano id function let's
671:34 - take a look at what this generates for
671:35 - us so i'll console log new dice and open
671:39 - my console we'll hit save and you can
671:41 - see the ids are a little bit crazy
671:43 - they're not just like one two three four
671:45 - and five but there's enough bits in that
671:48 - id that we can essentially be guaranteed
671:50 - they will be unique and now that i have
671:52 - an id i can fix my warning and just say
671:55 - my key on these die is going to be die
671:58 - dot id
672:00 - let me push some of this onto its own
672:02 - lines
672:04 - i'll also remove my console log here and
672:06 - now i should be able to
672:08 - get rid of my warning awesome
672:11 - okay so now every one of our dice has
672:13 - the ability to know whether or not it's
672:15 - being held
672:16 - but we currently have no way to change
672:18 - that so that's what we'll start
672:20 - addressing in the next part of this
672:21 - project
672:24 - very soon we'll be working on making it
672:26 - so that every die knows that when it's
672:28 - clicked it should toggle its held
672:30 - property from true to false or false to
672:32 - true but for now let's add some styling
672:35 - to the die so that if it is held it can
672:38 - put this green background color that's
672:40 - going to make our job a lot easier to
672:42 - test when we add the clicking ability
672:44 - for holding or unholding a die to test
672:47 - that i'm going to change the dice from
672:50 - is held to false to be is held to true
672:53 - so that when you work on your challenge
672:55 - you'll be able to see all the dice
672:56 - turning the light green color assuming
672:59 - you got everything set up correctly so
673:01 - your challenge is to add some
673:02 - conditional styling to the die component
673:05 - so that if it is held or rather if that
673:08 - dies is held property is true its
673:10 - background color will change to that
673:12 - light green color which you can
673:14 - reference the hex code for right here
673:16 - don't forget that currently the die
673:18 - component has no way of knowing whether
673:20 - or not it's being held so that's
673:22 - something you'll have to address as you
673:23 - work on this challenge once you have all
673:25 - the dice with that green background
673:27 - color come back to our all new dice
673:29 - function change this from true back to
673:31 - false and refreshing the app should then
673:33 - clear out the green colors and it should
673:35 - look the way that it does right now so
673:37 - pause now and work on this challenge
673:46 - i think i might work a little backwards
673:48 - in this challenge because first i need
673:50 - to let the dye component know whether or
673:52 - not it's being held down when i am
673:55 - mapping it i'm passing a key prop which
673:57 - isn't really usable except for
673:59 - internally by react and i'm passing this
674:02 - value prop i'm going to also add an is
674:05 - held prop and that is just going to be
674:07 - the value of die dot is held so either
674:10 - true or false or in our case all of them
674:13 - will be true because that's how we hard
674:14 - coded this that alone shouldn't really
674:17 - break anything in our code but if i go
674:19 - to the die component i now have props
674:21 - dot is held and i can use that to
674:23 - generate my background color
674:25 - to do some dynamic styles i'm going to
674:28 - create a separate styles variable
674:30 - although this could be something that
674:31 - you handle in line right here by saying
674:34 - style equals and then an object i think
674:37 - that gets a little bit lengthy
674:38 - especially if you're adding more than
674:40 - one style so for now i'm going to say
674:43 - style equals my styles object that is
674:46 - defined up here separately and then i'm
674:48 - going to
674:49 - set the background color this has to be
674:51 - camelcased remember because we're
674:53 - accessing the dom properties of this
674:56 - element
674:57 - and here i can use the ternary i'm going
674:58 - to say props dot is held
675:01 - if it is held then i want to use that
675:04 - hex code that we saw before
675:06 - but otherwise i want the background
675:08 - color to be white
675:10 - let's hit save
675:12 - and awesome we get all green dice just
675:14 - like we expected for one final test back
675:16 - in app.js i'm going to change this back
675:18 - to false hit save
675:21 - and that has cleared out perfect
675:23 - i suppose that technically means that my
675:26 - die
675:26 - face no longer really needs a background
675:29 - color that's set in the css because that
675:31 - will be handled with an inline style
675:34 - here in react maybe i'll just double
675:36 - check that refreshing gets me all white
675:38 - dice and when i change this to true
675:42 - all green perfect
675:43 - wow that's a lot of twos on one roll
675:45 - that's amazing it's too bad we're not
675:47 - playing this game yet
675:48 - okay i'll set this back to false because
675:51 - that's where we really want our game to
675:52 - be
675:54 - and perfect now we're ready to start
675:56 - tackling the challenge of having each
675:58 - die be able to hold when it gets clicked
676:01 - so we'll start working on that next
676:05 - in the past we've talked about something
676:07 - called derived state and how for the
676:09 - most part it's not something you'll end
676:11 - up using very often as a reminder i've
676:13 - brought in this diagram which we've seen
676:15 - in a past lesson and adapted it to work
676:18 - for this tenzi's game we're making in
676:20 - this game we have our app component
676:22 - which is holding an array of dice
676:24 - objects and it's mapping over that array
676:26 - and creating instances of our die
676:28 - component
676:30 - it's then passing the is held property
676:32 - down so the die knows how to display
676:34 - whether it should be green in the
676:35 - background or not and in this diagram
676:37 - what we see is each dye component
676:39 - containing its own state which is
676:41 - initialized by its incoming prop of is
676:44 - held and then having the ability to flip
676:47 - that is held property from true to false
676:49 - or false to true although this might
676:51 - generally accomplish the goal of making
676:53 - each die be able to flip from green to
676:55 - white or white to green it breaks our
676:57 - game because if each die component has
677:00 - its own state of is held it isn't
677:02 - necessarily communicating that change up
677:05 - to the parent state and in our game we
677:08 - need to be looking at every single die
677:10 - so we know how to end the game if every
677:14 - die is held and every die has the same
677:17 - number then the game is one however if
677:19 - each die is flipping its own state like
677:22 - i said there's nothing communicating to
677:23 - the parent array state that it's
677:25 - changing so a much better way for us to
677:28 - structure this although it may include a
677:30 - little bit of extra code is to not put
677:33 - state on any of these components and not
677:35 - have them be able to flip that own state
677:37 - that it initializes from its incoming
677:39 - props or in other words using derived
677:42 - state instead we will only keep the
677:44 - state on the app component we'll create
677:47 - a function that we'll call hold and that
677:50 - hold function will be passed down to
677:52 - each one of the die components
677:54 - in our case we need to know which die
677:56 - clicked hold and so that hold function
677:59 - will receive an id as a parameter if you
678:02 - remember when we are generating our dice
678:04 - we create an id property for each one
678:07 - which is unique and as such it's
678:09 - something we can pass as a parameter to
678:11 - our hold dice function so that brings us
678:14 - to your challenge your challenge is to
678:16 - create a function we'll call it hold
678:17 - dice that takes an id as a parameter and
678:20 - for now don't worry about the logic of
678:22 - this function just have it console log
678:24 - the id that's passed in as a parameter
678:26 - and then i want you to figure out how
678:28 - you can pass that function down to each
678:30 - instance of the die component so that
678:32 - when any one of them is clicked it will
678:34 - log its own unique id property in other
678:37 - words you need to make sure that when
678:39 - you click the first die it shows a
678:41 - different console log than when you
678:42 - click the second die in truth there's
678:44 - more than one way to make this work we
678:46 - have looked at multiple different ways
678:48 - to make this work in the past so you can
678:50 - just choose whichever one makes the most
678:51 - sense to you so the time is yours pause
678:54 - the screencast and work on this
678:55 - challenge
679:02 - okay let's create a new function we'll
679:04 - just do it right down here
679:06 - hold dice
679:08 - and let's spell function correctly this
679:11 - will take an id as a parameter
679:13 - and it's just going to console log the
679:15 - id
679:16 - easy enough now when we are mapping over
679:19 - our dice objects and creating our
679:21 - instances of the die component i
679:23 - basically have two different ways i
679:25 - could do this one thing i could do is
679:26 - pass the id to the die so this would be
679:30 - die dot id and then also pass hold dice
679:35 - as the function
679:36 - holds dice
679:38 - and then inside of the die component i
679:41 - could call hold dice on click and pass
679:43 - the id that's passed as a prop here
679:46 - however to me this is one additional
679:48 - step without really a lot of noticeable
679:51 - gain and so i think i'm going to take
679:53 - that out and then what i can do is just
679:55 - create a new function and say hold dice
679:58 - is going to be this anonymous function
680:01 - and this anonymous function will call
680:03 - hold dice with die dot id as its
680:06 - parameter
680:07 - effectively what this is doing is
680:09 - embedding the id as the parameter that
680:12 - will be called with the hold dice
680:14 - function whenever each one of these dice
680:16 - is clicked
680:17 - so i should be able to hit refresh and
680:20 - of course at this point clicking the die
680:22 - isn't going to do anything because i
680:24 - haven't actually accepted that prop on
680:26 - this side so now i'm receiving a prop
680:29 - called let's see it was hold dice here
680:33 - and i can add an on click to my div i'm
680:35 - going to separate these onto their own
680:37 - lines
680:39 - on click equals props dot hold dice so
680:43 - let's hit refresh
680:45 - i click the first one and i get this id
680:47 - that starts with hg
680:49 - this one starts with a y z
680:52 - yjb awesome specifically i'm checking to
680:55 - make sure that these were all different
680:56 - from each other if they were all the
680:58 - same then something would have happened
681:00 - incorrectly as i was passing in the id
681:02 - but they're all different which means
681:04 - each one of these has their own function
681:06 - that can identify which die was clicked
681:08 - so that in the next part of this
681:10 - challenge we'll be able to update our
681:13 - state which is holding all of our dice
681:15 - to flip the held value or the is held
681:18 - value on just the die that was clicked
681:20 - so that's what we'll do in the next
681:22 - challenge
681:25 - the next thing we're going to work on is
681:27 - making it so that clicking each die will
681:29 - actually flip its is held property
681:31 - instead of just console logging the id
681:34 - again the goal is to make it so that i
681:35 - can click the die that i want to hold
681:37 - have it flip its property which
681:39 - therefore will change its background
681:40 - color and then coming up in the future
681:42 - when we click roll we will create new
681:45 - dice for all of those except for the
681:47 - ones that are held
681:48 - so your challenge is to update our hold
681:51 - dice function to flip that is held
681:53 - property again you'll want to keep your
681:55 - dice array almost exactly the same way
681:57 - as it was except for the one item that
682:00 - was interacted with based on this id as
682:02 - usual there's more than one way to
682:04 - accomplish this i'm going to be using
682:06 - dice.map and checking for this id while
682:09 - i'm looping over the dice inside of my
682:12 - callback function index.map but honestly
682:15 - if that way is confusing to you you can
682:16 - just do this whichever way makes the
682:18 - most sense to you
682:20 - pause the screencast and work on this
682:21 - challenge
682:29 - okay to update our state we will need to
682:31 - use our set dice function so i'll start
682:34 - with a call to set dice
682:36 - i do need access to all the old dice or
682:38 - the old array before we make this change
682:41 - so that i can determine what the new
682:42 - array should be and i'm going to use the
682:45 - map method to create a new array or
682:48 - return a new array from this function
682:50 - and again almost every die object is
682:52 - going to be exactly the same way as it
682:54 - was except for one of them which will
682:56 - just have the isheld property flipped i
682:59 - remember when i first learned about this
683:01 - way of updating an arrayed state it felt
683:03 - i don't know inefficient or something
683:06 - but in truth javascript does these
683:07 - operations so quickly that it doesn't
683:10 - even blink at something like this so
683:12 - inside of our map we're going to look at
683:14 - each die object we'll have another
683:16 - function and i think this time i'm just
683:18 - going to open it up so that i have some
683:19 - breathing room on the next line and here
683:22 - i can use a ternary that says if it is
683:24 - the same die with the id property that
683:26 - was passed in to the function then i'll
683:29 - update that object and if not i'll just
683:31 - return this die
683:33 - i can do that by saying return and then
683:35 - use my ternary to say is dye dot id
683:38 - the same as the id passed in if so and
683:42 - that's the one we want to change and i'm
683:43 - going to take all of the properties from
683:45 - the original die but update is held to
683:48 - be the opposite of
683:51 - die dot is held
683:53 - i'm going to move this on its own line
683:55 - and then put my else with this colon and
683:58 - start the next part on the next line and
684:00 - i'll say if it's not the id that we
684:02 - clicked on or that we interacted with
684:04 - just keep the same object that we had
684:06 - before and i think this should do it
684:08 - let's hit save and well we have a lot of
684:11 - pairs here let's just do the twos
684:13 - awesome i should also be able to change
684:15 - my mind click off the twos and choose
684:17 - the sixes instead
684:18 - great
684:19 - this was one of the major features that
684:21 - we needed to add to this game the next
684:23 - thing is we need to make sure that when
684:24 - we click the roll button we don't just
684:26 - lose all of our dice but instead roll
684:29 - only the dice that we didn't hold
684:32 - so that's the feature we will work on
684:33 - next
684:37 - other than checking if the game has been
684:38 - won i think this is the last major
684:40 - feature that we need to add to this game
684:42 - so your challenge is to update the
684:44 - rolldice function instead of just
684:46 - creating all new dice every time we
684:48 - click the roll button that instead you
684:50 - will look through the existing dice and
684:52 - not re-roll any dice that have been held
684:56 - as a hint this is going to look
684:58 - relatively similar to what we did in the
685:00 - hold dice function at least the way that
685:02 - i'll be solving it of course if you find
685:04 - a different way that you prefer or makes
685:06 - more sense to you then just go with that
685:08 - way that'll be great when you're
685:09 - creating new dice as a part of that role
685:12 - remember to use the id that we are
685:14 - getting from nano id that way any new
685:17 - dice you create will also have an id and
685:19 - therefore will work when we click them
685:21 - to hold them pause the screencast and
685:23 - work on this challenge
685:31 - ok instead of creating all new dice we
685:33 - do need to now be looking at the old
685:36 - dice so we'll pass a callback function
685:38 - here to set dice instead of just
685:40 - generating a new value for it
685:42 - and we'll create a new array by calling
685:44 - old dice dot map
685:46 - we'll look at each one of the die in the
685:48 - old dice
685:49 - and similar to before what we'll do is
685:51 - check the die dot is held property and
685:55 - if the die is being held we want to make
685:57 - sure we just keep it as part of our
685:59 - array if it's not being held however we
686:02 - will return a new die to add to our
686:04 - array now looking a little bit ahead i
686:07 - can see that here i'm creating a new
686:09 - instance of a die down here i'm
686:11 - essentially going to be doing the same
686:13 - thing i could just copy and paste this
686:15 - value however this raises something
686:17 - called a code smell for me i can see
686:19 - that we're going to have repetitive code
686:21 - so this wasn't technically part of the
686:23 - challenge but i think what i'm going to
686:25 - do is create a separate helper function
686:27 - that's called maybe generate new die
686:30 - and i'm just going to have it return
686:33 - let's see this object right here
686:37 - and that way anytime i need a new die i
686:39 - can just call this function
686:41 - i think i'll move this up above my all
686:44 - new dice so it's a little easier and
686:46 - more logical to read
686:47 - then right here i'll probably call
686:50 - generate new die
686:53 - and down here i'll do the same thing
686:55 - we'll just say generate new die
686:57 - again that wasn't really part of the
686:59 - challenge so if you didn't make this
687:00 - helper function that's completely okay i
687:02 - just thought i'd show you how i might do
687:04 - it if i were looking ahead and seeing
687:06 - how i was about to have some repetitive
687:08 - code let's cross our fingers
687:10 - refresh looks like we have three twos
687:12 - here so i'll probably start there we'll
687:14 - hit roll and awesome everything rolled
687:17 - except for the three twos that i held i
687:19 - could then hold a couple more twos
687:23 - getting a little bit unlucky with our
687:24 - rolls here there we go get a couple more
687:26 - twos in here
687:28 - there's another one we're almost done
687:31 - there it is
687:32 - so that brings us to the next challenge
687:34 - how do we end this game
687:36 - of course me clicking this doesn't make
687:38 - any difference to the game at all i
687:39 - could click roll but nothing's going to
687:41 - re-roll and we basically haven't told
687:43 - the user anything about whether they've
687:45 - won or not
687:46 - speaking of telling the user some things
687:48 - i think just really quick i'm going to
687:50 - paste in some elements that will give
687:53 - some additional information to the users
687:55 - if you remember in this original
687:57 - screenshot we have the title of tenzi's
688:00 - and a little description i'm going to
688:02 - add those in now and just paste them in
688:04 - from somewhere else because they're
688:06 - pretty straightforward
688:07 - as you can see we just have an h1 that
688:10 - says tenzis a paragraph with some
688:12 - instructions both of which have a class
688:13 - name so that i can add some code in our
688:16 - css to style them
688:18 - i'll hit refresh i think i'll probably
688:21 - put a little bit of margin below our
688:24 - let's see dice container
688:26 - we'll say margin bottom maybe like 40
688:29 - pixels and yeah that's looking better
688:32 - okay now let's get back to the next
688:34 - challenge where we will start actually
688:36 - informing the user whether they've won
688:37 - or not
688:41 - we're going to break this up into a few
688:42 - different screencasts and just take this
688:44 - one little byte at a time
688:46 - your challenge this time is to add some
688:48 - new state called tenzis and you'll
688:51 - default it to false
688:53 - this new state will represent whether
688:54 - the user has won the game yet or not
688:57 - then i want you to add an effect that
688:59 - will run every time the dice array in
689:02 - state changes for now you can just
689:04 - console log dice state changed and not
689:06 - worry about doing anything else if it's
689:08 - been a while since you've gone through
689:10 - the curriculum on use effect this would
689:11 - be a great time to go back and review
689:14 - and once you're ready pause the
689:15 - screencast and work on this challenge
689:25 - okay so i can create some new state
689:27 - we'll say tenzi's
689:29 - and set
689:31 - is equal to react.use state and we'll
689:34 - initialize it as false
689:36 - that way they won't win the game as soon
689:38 - as they load it and then we're going to
689:40 - add a side effect and we'll use that
689:41 - with react dot use effect
689:45 - use effect will take a function as the
689:47 - first parameter
689:49 - and i'll set up the second parameter
689:51 - right now because i only want this
689:52 - effect to run any time the dice array
689:55 - changes in state
689:57 - as i mentioned for now we'll just
689:59 - console.log
690:00 - dice state changed
690:03 - so let's hit refresh
690:05 - we get a dice state changed on the very
690:07 - first load and then it should every
690:09 - single time i update the dice array
690:13 - even if it's one small change like
690:14 - changing one of the dice to being held
690:17 - then we get our effect running also if i
690:20 - run my roll button that also gives me a
690:23 - dice stay changed awesome
690:25 - now it may not have been perfectly
690:27 - apparent why we're using an effect here
690:30 - and that's mostly because we only did
690:31 - about half of this challenge right now
690:33 - in the next challenge what we'll do is
690:35 - we're going to check all of the dice
690:37 - every single time something changes in
690:39 - the dice to look for a winning condition
690:42 - and if the game has been won for example
690:45 - if all the numbers are the same and all
690:46 - the dice are held then we can set tenses
690:49 - to true and therefore the user will win
690:52 - the game
690:53 - keeping two internal pieces of state in
690:56 - sync with each other is a really common
690:58 - reason to use a use effect we talk about
691:00 - it being a side effect as if it only
691:02 - concerned things outside of this
691:04 - function entirely but keeping two pieces
691:07 - of internal state in sync is another
691:09 - good reason for it
691:10 - so this one was short and sweet but in
691:12 - the next screencast we will make it so
691:14 - the user can actually win the game
691:18 - your challenge this time is inside of
691:20 - our effect instead of console logging i
691:22 - stay changed you'll check the dice array
691:25 - for some winning conditions first we're
691:27 - looking to see if all of the dice are
691:30 - currently held and that all the dice
691:32 - have the same value if both of these
691:34 - conditions are true then set tenses to
691:37 - true and log something like u1 to the
691:39 - console pause now and work on this
691:42 - challenge
691:50 - just like before there are a ton of
691:51 - different ways that you might have
691:52 - solved this one hopefully the way that i
691:54 - solved it will ring true to you but if
691:57 - you found a different way or even a
691:58 - better way then feel free to share it in
692:00 - discord i would love to see people's
692:02 - different solutions for this in
692:04 - javascript there's a really handy array
692:06 - method called dot every
692:08 - and what dot every does is it will look
692:10 - for a specific condition and if every
692:13 - item in that array returns a true for
692:16 - that condition then it will as a dot
692:18 - every method return the value true this
692:21 - might make more sense if i actually show
692:22 - you i can check dice.every and for every
692:26 - die
692:27 - if every die
692:28 - dot is held or in other words if every
692:31 - die has true as an is held property i
692:34 - don't necessarily need to say triple
692:36 - equals true though then dice.every will
692:39 - return true if even one of the dice is
692:41 - not being held then it will return false
692:45 - so i can save that boolean that it
692:47 - returns as a variable will say all dice
692:50 - held or just say all held and that's
692:52 - either going to be true or false so
692:54 - that's a good start to help me have an
692:56 - if statement later that checks if
692:57 - they're all held and if they all have
692:58 - the same value now how can i check to
693:01 - make sure that they all have the same
693:02 - value well if they all have the same
693:04 - value then i can just arbitrarily pick
693:06 - one of the dice and check all of them to
693:09 - see that they have that same value for
693:11 - example i could say maybe the first
693:13 - value
693:14 - is equal to dice
693:16 - at the index of 0 dot value and now i
693:19 - have a reference point for me to say
693:21 - maybe all same value is dice.every
693:26 - and i'll say every die dot value is
693:30 - equal to the first value
693:32 - and now i have some variables that i can
693:34 - check inside of my if statement whether
693:37 - or not they're all held and if they all
693:38 - have the same value
693:40 - so we'll check if they're all being held
693:43 - and they all have the same value
693:47 - then i need to set tenzis to true
693:51 - and we were going to console.log u1 i'll
693:54 - just reuse this console.log here
693:56 - all about recycling you won
693:59 - now you may have asked why am i going to
694:01 - set tenses to true there's a few things
694:04 - in the user interface we're going to
694:05 - change if they have one for example we
694:07 - won't want the button to say roll
694:09 - anymore we might want it to say reset
694:11 - game and we can conditionally render
694:13 - that text based on the tenzi's value and
694:16 - as you might remember from the preview
694:18 - we have a fun little confetti thing
694:20 - that's going to pop out when the game is
694:21 - over but we'll save that as a special
694:23 - treat at the very end so let's hit
694:25 - refresh and actually play this game and
694:27 - oh well it looks like we might have a
694:29 - bug here
694:30 - ah and after a quick look it looks like
694:32 - i did not put a callback function inside
694:35 - of my dot every sorry for anyone who was
694:37 - screaming at me saying i did that wrong
694:39 - okay let's try this again i'll hit save
694:42 - okay we're back up to working and oh
694:44 - look that's a great start we got six
694:45 - sixes that's amazing okay we'll hold all
694:48 - those
694:49 - awesome we're making good progress
694:54 - and we should get our state
694:56 - updating finally whenever i finally roll
694:59 - another six
695:01 - as a side note i feel like this is how
695:03 - every game of tenzi's for me goes it's
695:05 - the very last one that i never can get
695:07 - to be the right number there we go okay
695:10 - let me open the console
695:13 - you won awesome keep in mind this effect
695:16 - was running every single time the dice
695:18 - array changed which means it ran every
695:21 - single time i clicked on one of the dice
695:23 - and every single time i clicked my roll
695:25 - button awesome we have come a long way
695:28 - the next thing we're gonna do is update
695:30 - a couple user interface things one is
695:32 - just procedural that's where we're gonna
695:34 - update this roll button and the next is
695:36 - we're gonna have a lot of fun with the
695:38 - confetti package both of those should be
695:40 - really simple for you at this point as a
695:43 - reminder if you were not able to create
695:45 - some version of this it didn't have to
695:47 - be these exact methods but if you
695:49 - struggled with this challenge it's time
695:51 - to erase it and try it again make sure
695:54 - you understand this before we move on
695:55 - the last two things we're going to do
695:57 - are more just checking boxes but the
695:59 - ability to complete a challenge like
696:01 - this on your own without any kind of
696:03 - outside help will be a really good
696:05 - self-assessment for you to know whether
696:07 - or not you're ready to move on so when
696:09 - you are ready let's tie off the little
696:11 - loose ends of this app and call it done
696:16 - okay it's time to tie off a few loose
696:18 - ends inside of our tenzi's game this
696:20 - challenge comes in two parts first of
696:22 - all if the tenzi's in state is true i
696:26 - want you to change the button text down
696:28 - here to say new game instead of roll
696:31 - secondly and probably the more exciting
696:33 - of the two challenges is that if tenzi's
696:36 - in state is true to use the react
696:38 - confetti package to render a confetti
696:41 - component i've already included the
696:43 - react confetti package for you and down
696:46 - here in the slides i included a link to
696:48 - the documentation for react confetti i
696:51 - think you'll find it's actually a really
696:52 - easy package to use in the end you're
696:54 - just going to need to import confetti
696:56 - from react confetti and then to render a
696:59 - confetti component now in our case we
697:01 - will only conditionally render that
697:03 - confetti component based on the value of
697:06 - tenses also in the documentation you'll
697:08 - see that they provide a height and width
697:10 - properties you just won't really need to
697:12 - worry about those in this case in the
697:15 - end once you have the confetti package
697:17 - conditionally rendered upon winning the
697:19 - game it should look something like this
697:21 - where the user completes the game and
697:23 - then a bunch of really fun confetti
697:25 - falls down
697:26 - okay these are some fun additions pause
697:28 - the screencast and work on these
697:29 - challenges
697:37 - okay let's start with number one if
697:39 - tenses is true change the button text to
697:42 - new game well let's go down here to our
697:44 - button i think i'm going to put some of
697:46 - this on its own line so we have some
697:48 - extra space while we're looking at it
697:51 - and instead of hard coding roll in here
697:53 - i'm going to put some curly braces so i
697:56 - can use a javascript expression and
697:58 - we'll use a ternary because we're
697:59 - choosing between one of two options
698:02 - either the word role or the words new
698:04 - game
698:05 - so i'll say if tenzi's is true question
698:08 - mark then we want it to say new game
698:11 - and otherwise we want it to say roll
698:14 - okay let's
698:16 - save that
698:17 - and we need to spell tenzi's correctly
698:19 - of course
698:20 - okay let's see we've got well it's not a
698:22 - great first roll let's go with some ones
698:25 - and i'll play through this quickly so
698:26 - you don't have to watch me do this whole
698:28 - game
698:29 - okay so clicking the last one should
698:31 - change tenses to true and change role
698:34 - into new game let's see if that works
698:36 - awesome well i don't love that it's
698:38 - stacking on top of each other i think
698:39 - i'll just go into the css and let's find
698:42 - my
698:43 - button here and i think it's this one
698:45 - let's try making that 150 pixels yeah
698:48 - that looks better
698:49 - okay and then part two of the challenge
698:52 - is to render the confetti component if
698:54 - tenzi's is true like i mentioned i
698:56 - already included the react confetti
698:58 - package but i do need to import the
699:01 - confetti component from react confetti
699:04 - and again we're only conditionally
699:06 - rendering this and i included a little
699:08 - note here that tells you exactly where
699:10 - to render it i'll keep my curly braces
699:13 - so i can use some javascript and this
699:14 - time i'm just going to be using the
699:16 - logical and operator because in this
699:18 - case i either want to render confetti or
699:21 - i don't want it to render at all so
699:22 - we'll say if tenzi's is true
699:25 - then we will render
699:27 - confetti
699:28 - i'll hit refresh
699:30 - and at this point there's something
699:32 - important for you to know about this
699:33 - recording at the current time scrimba is
699:35 - not really able to record anything that
699:37 - happens on a canvas element which is how
699:39 - this confetti is being played so i'll
699:42 - play through this game and i'm going to
699:43 - see the confetti work you'll be able to
699:45 - also refresh this app and see the
699:47 - confetti work but in the recording it's
699:50 - not going to show up so once again i'll
699:52 - speed through this game play so you
699:53 - don't have to watch the whole thing
699:56 - okay so i will click the two and sure
699:58 - enough i can see the confetti dropping i
700:00 - assume if you completed this challenge
700:02 - correctly you also were able to see the
700:04 - confetti dropping or if you struggled
700:06 - with it well first of all i'd encourage
700:07 - you to go back and try it again but
700:09 - second of all you can click to refresh
700:11 - this app now with the code that i've
700:13 - written and play the game and see that
700:14 - the confetti is working now at this
700:16 - point i'm pretty sure we still have a
700:18 - bug in our game and that's if i click
700:20 - new game yep look at that it says that
700:22 - we won again and nothing has really
700:24 - refreshed or anything so we'll have one
700:26 - more challenge before this project is
700:28 - complete and we're going to handle that
700:30 - in the next screencast
700:33 - here's another example of a challenge
700:35 - that i'm going to be a bit vague about
700:37 - because i want you to think through what
700:39 - steps are going to be necessary to
700:41 - complete the challenge on your own so
700:43 - the task is to allow the user to play a
700:46 - new game when the button is clicked and
700:48 - they've already won i won't necessarily
700:50 - play through this entire game again but
700:52 - you saw that when we clicked new game it
700:54 - just console logged u1 again and i want
700:57 - you to think through why that is and
700:59 - what you can do to fix it so that it
701:01 - will reset the game pause now and work
701:03 - on this challenge
701:12 - as it stands clicking the button will
701:14 - run the roll dice function currently
701:16 - there's nothing in the rolldice function
701:18 - that will check if they've already won
701:20 - the game now we could choose to create a
701:23 - completely separate function that will
701:25 - create a new game for us which would
701:28 - require us to then conditionally render
701:30 - one of two buttons based on whether they
701:33 - have already won or rather based on
701:35 - whether tenzi's is true or not right now
701:38 - we're only changing the text of the
701:40 - button when tenzi's is true but we're
701:42 - not creating a completely separate
701:43 - button with a different on click handler
701:45 - either way would probably be fine i
701:48 - think i'm just going to update our roll
701:50 - dice function to handle the instance
701:52 - when the user wins the game
701:54 - now i really want them only to roll the
701:57 - dice if
701:58 - they don't have tenzi's if the game is
702:01 - not over
702:03 - so i'm going to move this code into if
702:06 - tensei's this conditional block here
702:09 - and then i can add an else that says if
702:11 - tenzi's is true in other words if
702:13 - they've won the game then first i want
702:15 - to set tenzi's to false because i don't
702:19 - want the game to still be one and then i
702:21 - can generate all new dice so i'll say
702:23 - set dice and i previously wrote a
702:26 - function called all new dice
702:28 - that i can use to generate all my new
702:30 - dice
702:31 - okay now let's play through the game one
702:32 - more time and see if we can get this to
702:34 - work
702:35 - we'll start with our fours this time oh
702:37 - i'm gonna switch to sixes because i have
702:39 - more of those
702:42 - okay here we go
702:44 - okay it says new game we got that
702:46 - console log which we can probably get
702:48 - rid of
702:49 - of course the confetti package is
702:50 - celebrating our win
702:52 - and then i click new game and everything
702:54 - restarts and wow look at that five fours
702:57 - right off the bat
702:59 - and at this point we have reached the
703:01 - end of our journey together building the
703:03 - tenzi's game however that doesn't mean
703:05 - it has to be the end in the next
703:07 - screencast i'm going to give you some
703:08 - ideas on how you might improve this game
703:11 - quite a bit more if you really want
703:13 - something that you can feel good about
703:14 - putting in your portfolio we won't walk
703:17 - through how to create those features but
703:19 - it could be a really excellent way for
703:21 - you to practice your skills instead of
703:23 - just moving forward i hope you've
703:25 - enjoyed this tenzi's game it might not
703:27 - be quite as fun to play against the
703:29 - computer but if you have some dice
703:31 - laying around i do recommend playing
703:33 - tenzi's it can be really fun and high
703:35 - energy especially when you're just
703:36 - trying to get that last dice to read the
703:38 - number that you need and you're racing
703:40 - against other people so on that note
703:42 - let's take a look at some ways that you
703:43 - might be able to improve this project
703:48 - just because we have completed the
703:49 - tenzis project together does not mean
703:52 - that the fun has to stop there assuming
703:54 - you enjoyed this project even a little
703:56 - bit i'd highly recommend that you spend
703:58 - some time adding to it the process of
704:00 - adding new features to the program that
704:02 - we made together is going to expand your
704:05 - mind and really help you internalize the
704:07 - things that we have learned together
704:09 - thus far
704:10 - i came up with a couple ideas you are
704:12 - welcome to use them or to do something
704:15 - completely different some ideas for
704:17 - extra credit on this project include
704:19 - adding real dots on the dice right now
704:21 - we're just using numbers for simplicity
704:23 - in the css but if you really want to
704:25 - challenge yourself with some css figure
704:27 - out how to put real dots on the dice
704:29 - more on the javascript side you could
704:31 - decide to track the number of roles that
704:33 - it took to win the game along those
704:35 - lines you could track how long it took
704:37 - to win the game and then you could save
704:39 - your best time or maybe even the lowest
704:41 - number of roles to local storage so you
704:43 - can try to beat your record in the
704:45 - future
704:46 - obviously this is not all-inclusive be
704:48 - creative add whatever you want to this
704:50 - project in the end being able to show an
704:53 - employer that you not only took a
704:54 - project that you built together in a
704:56 - tutorial but also added a bunch of new
704:59 - features on top of it that's going to be
705:01 - much more impressive on a resume and a
705:03 - portfolio than a project that you just
705:05 - sort of followed along with great job on
705:08 - the tenzi's game you should really be
705:09 - proud of yourself and assuming you were
705:11 - able to follow along with everything and
705:14 - that you would even feel comfortable if
705:15 - you know we needed to delete everything
705:17 - and start from scratch that's an
705:19 - excellent sign that you have really
705:21 - learned what you need to learn from this
705:23 - react course
705:26 - if you look back it's pretty insane how
705:28 - much ground we have covered so far so if
705:31 - you think about it this is the ultimate
705:33 - solo project for this course
705:35 - it's going to collect all of the topics
705:37 - that we have learned throughout this
705:39 - course and put it together into a single
705:41 - project so you can really test yourself
705:43 - to see if you have been internalizing
705:45 - all of this new react knowledge that
705:47 - you've been learning
705:48 - and this project is a really fun one
705:51 - you're going to be creating a trivia app
705:53 - called quizzical it'll have an opening
705:55 - screen here where you can click to start
705:57 - the quiz it will then pull some trivia
706:00 - questions from a database and display
706:02 - those as a short quiz once the user has
706:04 - made all of their selections they'll
706:06 - click check answers and the app will
706:08 - score the quiz and allow them to play
706:10 - again if they want
706:11 - clicking on any of these screenshots
706:13 - will send you to the figma design file
706:15 - you can see the three different screens
706:17 - here just to be clear this first screen
706:20 - will actually be almost like a separate
706:22 - screen it's sort of an overlay when
706:24 - someone clicks start quiz you'll
706:26 - probably want to conditionally render
706:28 - this next section but this third screen
706:30 - is not really a separate screen it's
706:32 - just changing the first screen so that
706:34 - it gives feedback to the user on the
706:36 - quiz answers
706:38 - as always make sure that you go in and
706:40 - duplicate this to your draft so you can
706:42 - avoid seeing everyone's cursors or
706:44 - selections and so if you want you can
706:46 - make any edits to the design and just
706:48 - like before you can click the three dots
706:50 - down in the menu to fork this screencast
706:52 - to its own scrim for you to do all of
706:55 - your coding in so let's take a look at
706:57 - the requirements for this project like i
706:59 - mentioned there will be two screens the
707:01 - first one that asks them to start the
707:03 - game and the second one which has all of
707:05 - the questions in it your app should pull
707:07 - five questions from the open trivia
707:10 - database api which if you click the
707:12 - green text here it will send you to that
707:14 - api after the check answers button is
707:17 - clicked it should tally the number of
707:18 - correct answers and display it at the
707:20 - bottom and as always with these projects
707:23 - you should make sure that they are
707:24 - styled and polished
707:26 - clicking the link here on this slide
707:28 - will send you to the open trivia
707:30 - database which is a really fun api to
707:32 - use you can click in the upper right
707:34 - where it says api which will lead you to
707:36 - this page and it has a fun little
707:39 - generate api url button that you can
707:41 - click after putting in some specifics
707:43 - about the api if you want you can limit
707:45 - it to certain categories difficulties
707:47 - and so forth and it'll just give you a
707:49 - url that when you call it from your code
707:51 - will give you those trivia questions as
707:54 - always i highly encourage you to share
707:56 - your work click the discord icon to go
707:59 - to the i built this channel in discord
708:01 - or you can click the twitter icon if
708:02 - you're sharing this in public this
708:04 - project is probably a touch more
708:06 - difficult than what we have worked on
708:08 - together so don't hesitate to tap into
708:10 - the scrimba community ask for help and
708:13 - of course when you're finished be proud
708:14 - of the work that you've done and share
708:16 - it
708:17 - so best of luck working on this project
708:19 - and i really look forward to seeing what
708:21 - you end up building
708:25 - before we wrap everything up i wanted to
708:27 - let you know that i've made a sort of
708:29 - pseudo extension to this course that
708:31 - gives you a crash course on using class
708:34 - components in react as react evolves
708:37 - people are trending away from using
708:38 - classes in react but there's still
708:40 - plenty of reasons to learn how to write
708:43 - react using the es6 class syntax in this
708:46 - one hour mini course i talk about why
708:48 - they're important to learn and the ways
708:51 - in which they're different from writing
708:52 - react with function components and hooks
708:55 - if you are hoping to get a job as a
708:56 - react developer you will definitely want
708:58 - to take this course to brush up on class
709:00 - components since you're very likely to
709:03 - come across existing code that is still
709:05 - using them
709:06 - if you're watching this video now as a
709:08 - part of the scrimba front end developer
709:09 - career path and you already have a
709:11 - scrimba pro membership and when you move
709:13 - on to the advanced react course this
709:15 - crash course will be the first thing
709:16 - that you go over so you won't have to go
709:18 - out of your way to see this course but
709:20 - for anybody else who's watching this
709:22 - course as a standalone free react course
709:24 - you can click the screenshot that you
709:26 - see here which will take you to the
709:28 - playlist for that course and it's
709:29 - completely free to take
709:34 - you did it you really did it it's been a
709:37 - long journey but you have finally
709:39 - arrived at the end of this course
709:41 - you should seriously be so proud of
709:44 - yourself because assuming you've
709:46 - actually followed along the whole way
709:48 - and done all the challenges you are well
709:50 - on your way to becoming a serious react
709:53 - developer i've said it before but my
709:55 - learning philosophy is that the easiest
709:58 - way to get good at anything is to do it
710:01 - the hard way as such i've made it a
710:03 - point to include a lot of projects and
710:06 - hands-on work in this course let's take
710:08 - a quick look back at how those projects
710:10 - have progressed in each section
710:12 - we started off by just working with some
710:15 - static pages in react that allowed us to
710:17 - discover why we care about react a bit
710:20 - about the jsx syntax and how to make our
710:22 - own custom components how to apply our
710:25 - own styling so we can really polish our
710:27 - projects and all of it collected
710:29 - together gave us the ability to build
710:31 - static pages
710:32 - we used that knowledge to build our kind
710:34 - of silly little static page about fun
710:36 - facts about react and for your solo
710:39 - project you built a digital business
710:41 - card
710:41 - in section two we moved on to learning
710:44 - how we can make data driven pages in
710:46 - react we discovered how to make our
710:48 - custom components more reusable by
710:51 - accepting props and how we can make the
710:54 - data work for us by mapping over the
710:57 - data and using that to create multiple
710:59 - instances of our custom components using
711:02 - props to pass in specific data to each
711:04 - one
711:05 - then in section 3 we really turned it up
711:08 - to 11 because that's where we started
711:10 - making fully interactive web
711:12 - applications we dove deep into
711:14 - understanding how to listen for events
711:17 - how to save state and use state in our
711:20 - components how to conditionally render
711:23 - certain things on the page how to accept
711:25 - user input through forms and how to
711:28 - handle all side effects that might
711:29 - happen using the use effect hook
711:32 - then in section 4 we went all in on
711:34 - practice we took some existing code with
711:37 - this markdown notes app and added a
711:39 - bunch of new features to it and fixed a
711:41 - few bugs
711:42 - then we built a dice game completely
711:44 - from scratch
711:45 - and most impressively in your solo
711:47 - project you built a quiz app called
711:49 - quizzical that accessed trivia questions
711:52 - from an api and scored people based on
711:54 - their answers i purposefully put these
711:57 - projects in here to help drive forward
712:00 - the curriculum in this course and each
712:02 - one of the solo projects you did gave
712:04 - you a chance to really test out your
712:06 - skills unassisted to make sure that you
712:09 - really internalize the topics that we
712:11 - learned about this is truly a huge
712:14 - accomplishment and you should be super
712:15 - proud of how far you've come in fact i
712:18 - think right now you should head over to
712:19 - the today i did channel on the scrimba
712:21 - community discord server and brag about
712:24 - finishing this react course as soon as
712:26 - you can in fact i made it so easy you
712:29 - can click this screenshot to head
712:30 - straight there
712:31 - so what now well there is a ton more to
712:34 - learn about react but before i jump into
712:37 - the list on how you can dive even deeper
712:39 - into the waters of react i'd recommend
712:42 - continuing to just practice everything
712:44 - that you have learned this might be a
712:46 - great time to just use your imagination
712:48 - and pick a project that's similar in
712:51 - scope to the ones that we worked on in
712:53 - this course and then just build it on
712:55 - your own for example if you don't
712:57 - already have your own portfolio site you
712:59 - might even consider building one in
713:01 - react that being said the react
713:03 - ecosystem is quite large and fortunately
713:06 - the community is also quite large so the
713:09 - first thing i can recommend is i have my
713:11 - own advanced react course on scrimba if
713:14 - you're taking this react course as a
713:16 - part of the scrimba front-end developer
713:18 - career path well this advanced course is
713:20 - what you have coming up in the next
713:22 - module one of the first things i
713:24 - recommend learning about is react router
713:26 - this allows you to make what's called a
713:28 - single page application which is in a
713:30 - way the opposite of what it sounds like
713:32 - it means that you can add multiple
713:34 - routes to your website so that it
713:36 - becomes a little more like a regular
713:37 - website everything we've done so far has
713:40 - just lived in essentially one little
713:42 - page react router allows you to make a
713:44 - multi-page website you can also learn
713:47 - something called css in js my personal
713:50 - favorite is a library called styled
713:52 - components but there's a bunch of these
713:54 - out there essentially they allow you to
713:56 - put your css directly inside your
713:59 - javascript so that you can co-locate the
714:01 - styles with your actual code
714:03 - if you want to branch out a bit more you
714:05 - can start looking at next js or gatsby
714:08 - these are both some really evolved and
714:11 - powerful frameworks that are built on
714:13 - top of react to help you build some
714:15 - really robust static websites or even
714:18 - full dynamic web applications
714:20 - if you wanted to get deep in the nitty
714:22 - gritty you could also start learning
714:23 - about performance and optimization if
714:26 - your code base gets more and more
714:27 - complex or you're working in an existing
714:29 - code base that really needs to squeeze
714:31 - every ounce of optimization out of it
714:34 - then jumping into this realm might help
714:36 - you as a developer
714:37 - and in this course we only touched on
714:39 - two of the existing hooks use state and
714:41 - use effect but there are a bunch more
714:43 - that you can learn about as well
714:45 - i'm so grateful that i've had the
714:47 - opportunity to prepare and to teach this
714:49 - react course my name is bob's role i've
714:52 - been your instructor through this course
714:54 - my username is bob's a role pretty much
714:56 - everywhere online but these days i'm
714:58 - mostly just active on twitter so you're
715:00 - welcome to follow me there if you like
715:02 - you can click the twitter icon to go to
715:04 - my profile page
715:05 - once again congratulations on completing
715:08 - this course i'm excited to hear about
715:10 - all the ways in which you're able to
715:12 - apply everything that you've learned i'm
715:14 - truly excited to hear from you i love
715:15 - getting constructive feedback on the
715:17 - course if you have any suggestions for
715:19 - me i welcome them with open arms and i'm
715:21 - excited to hear from you about all the
715:23 - ways in which you're able to apply
715:25 - everything that you've learned here

Cleaned transcript:

bob's role is one of the most viewed react instructors in the world and now he's back with a brand new complete react course that will teach you modern react using patterns like functional components and hooks if you want to learn the react javascript library this is the video hey free code campers welcome to my newest course on learning react in this course you're going to solve over 140 different coding challenges and work on eight different projects all of which have an associated figma design file to guide your work and you actually have two options for following along either by using your local machine i actually have a few lessons that will show you how to do that starting pretty early in this course or you can head over to scrimba.com where there's an interactive version of this course so that you can solve the challenges directly in your browser it's totally up to you what you want to do the link to the course on scrimmage.com is provided below and actually this course is part of a larger frontend career path which we have at scrimba which takes people from zero to hirable as a frontend developer this course is module 11 in that career path and my more advanced react course immediately follows this free react course as module 12 where i go even more in depth into react react router using the context api and so much more if those topics sound confusing to you don't worry at all you don't need to take them to understand this course now i always appreciate any feedback you have for me about the course so you're welcome to reach out to me on twitter at bobsarole or if you have any questions about your specific code the best place for those is to either reach out to the free codecamp forums or discord server or you can check out scrimba's own discord server which is becoming a more and more deeply integrated part of the whole scrimba.com experience and with that good luck and have a ton of fun learning react hey there and welcome to the learn react module i'm super excited you're joining me for this course because by the end you'll have built not one not two but at least eight projects using react there's so many of them i don't even have time to go over each one of them in detail right now i could barely even fit them on this slide so why are we doing so many projects well it's because i designed the curriculum for this course to be project driven in each of the sections we will start with a goal project that we are working toward and then we'll learn everything we need in order to build that project now in order for that approach to actually work i'm going to be asking a lot from you so let's talk for just a bit on how you can get the most from this course just like everything in life what you put into this course is what you will get out of it or as i like to say my philosophy about learning is that the easiest way to learn something is to do it the hard way in this course i'm going to be asking you to do a lot of the work for much of it you'll have me there after each challenge to walk you through a solution but for some of it you won't either way what i'm asking of you now is to avoid the trap of tutorial hell where you end up passively watching me do all the work remember this is not school you're presumably here because you actually want to finish the course with the ability to write react code by yourself school has taught a lot of us that the goal of learning is to get a good grade in fact i heard something really interesting that said that education is the only thing that humans try to get less out of than what they paid for so don't let that be you in this course if you really give it everything you've got meaning you do all the challenges and projects you're involved with the community and you are an active participant in your own learning i can promise that you'll probably finish off in a better spot than many students getting their degree in computer science and i really don't say that lightly along those lines remember that space learning and repetition are your best friends binging the course from beginning to end even if you are doing all the assignments is kind of like trying to run an ultra marathon without training your brain actually needs rest so take breaks often by taking this course the goal isn't just to get to the end it's to get to the end with some honesttogoodness react skills then after you come back to this course on maybe the next day don't be afraid to rewatch some of the past lessons and even redo some of the past challenges because repetition really is your best friend whenever you're trying to learn something new so what should you already know coming into this course before jumping into react you should have a solid grasp of the fundamentals of web development namely html css javascript and preferably a pretty solid understanding of the new syntax that was introduced back in ecmascript 6 es6 and above if you're feeling at all rusty on any of these topics you can click the logo for each one of these which will send you to another free course here on scrimba where you can brush up on those skills my name is bob zaroll i'm going to be your instructor throughout this whole course my username pretty much everywhere online is bob zaroll but these days i'm really most active on twitter you can click the twitter icon to go to my profile if you want to follow me that would be great and so without any further delay let's jump right in and start learning react in the first section of this course we're going to be learning everything we need in order to build a basic static page using react and i know what you might be thinking but i already know how to make static web pages i know you're probably super excited to really dive in and learn dynamic web applications with react and we are going to get there in this course but in order to start off this section is all about learning the basic syntax and you could say the vocabulary of react because i found that the best approach to learning react is to first start learning how to think in react the reason for this is because react really does kind of change the game in terms of how you build applications later in this section we are going to start learning the differences between declarative and imperative programming and you're going to find that react approaches web development in a completely different way so the point is we're first going to be dialing in our brains to start thinking in terms of using react to build websites by first building some static web pages not unlike the ones that you normally would just use html and css for so this might not seem terribly exciting right now but i think you'll soon see that writing composable reusable components in react can actually be a bit addicting and pretty fun so i know that you'll find a lot of benefit in starting off with the milk before we get to the meat or of course we have a vegetarian option as well the content in this section will be driven forward by the goal of creating our first static web page in react and that's the page you see here in the screenshot that has a list of fun facts about react now this screenshot is actually also a link to the figma file for the design of this page so if you click this screenshot it will open up in figma you'll have to make sure that you log into your figma account if you don't have one yet it's free to create and clicking the screenshot will lead you to a sort of shared file that everyone will have access to in that shared file you'll see something near the top that looks kind of like this where it's got react facts and then this little drop down arrow your best bet is going to be to click that drop down arrow go over to duplicate to your drafts and click that duplicating this design to your own drafts is going to make it possible for you not only to edit the design if you want to change it a little bit but also to help you avoid any distraction you might see on the design page of anybody else's cursors or maybe some comments that they may have left so i'll go back to this design here make sure to click on it now so at least the url gets saved up in your tabs in your browser and lastly we're going to look at the different topics that we'll be covering in this section so what are we going to learn about well first we're going to learn why we even care about react in the first place i think knowing why react is so exciting and so popular will help make your learning journey of react a much simpler one because you'll be so excited about what you'll be able to create in the end by using react we'll also be talking about a proprietary react syntax called jsx and we'll get to see how that sort of changed the game for react and made writing react a much more familiar experience then we'll dive into creating custom components and you'll learn all about what that means and how to actually do that yourself in react and of course in order to build our project we're going to need to know how to apply css styling again the goal is for us to be able to build this simple static page in react i'm really excited for us to get started so without any further ado let's jump right into the deep end and start writing our first react code before we just jump right into theory and why we care about react and how all the little pieces of react work i want to get your hands on the keyboard typing some react code as soon as possible mostly just to show you that react is not a scary library to be working with so let's see how we can set up react now i like to think of there as being an easy way to set up react in your project and a correct way of setting react up in your project for our sake in learning we're going to start with the easy way which will also make it so that you can actually just do this in your local environment hopefully you're following along here on scrimba.com but if you're curious and you're interested you can always do this on your local environment as well now you can see i have a very basic html page set up i have nothing in my javascript at all my css is minimal and we're going to walk through this together now i have some slides here and you can actually click on this screenshot and that will send you to this exact page in the react documentation it tells you how you can include react into your project and we can actually pull in these libraries that we need straight from a cdn in other words we can just copy these two script tags here and start writing react code there's a little more to it but what i'm going to do is click here and that's going to open me up to the react page i'm just going to copy the two script tags that you can see and over in my index html i'm going to put it in the head here let me fix the indentation and i've pulled in the react library and another library called react dom theoretically this is all i need in order to start writing some react code now i'm going to take it one step further and that's because just pulling and reacting react dom is going to be pretty extremely limiting in terms of using the power of react unless we also pull in something called babble i'm not gonna jump in too deep into why we need to pull in babel for now all i'm going to do is click on this screenshot here which will take me again to a page where i can copy the script tag that you see and i will paste that in underneath this script tag and if we look really closely below here it says you can use any jsx we'll cover what jsx is later in any script tag by adding type equals text slash babble so i'm going to do that here in my script tag down here type equals text slash babble and that's all the setup we really need by pulling in the react dom library in this script tag i now have access to a global variable called react dom i'm going to use that to render something to the screen once again i'm going to be covering everything that we're talking about here it's totally okay if this is moving pretty quickly reactdom.render allows me to render something that looks very much like html now this might be blowing your mind a little bit because it probably looks a little strange writing some html inside of my javascript we're going to see how this is kind of one of the beautiful things that react has added so that we can write really declarative code now let's put something inside this h1 that's meaningful we had hello react over here maybe i'll say hello everyone okay in my index.html i'm going to get rid of this h1 so we're not confusing this h1 with what i'm seeing over here now reactdom.render the first thing is what do i want to render to the screen the second thing is where do i want to render it well let's go to our html and i'm going to create a div here just a completely empty div and i'm going to give it an id so that i can select it we'll call it root because this is going to be like the root of our entire application i like to think of this div as a container for the entire website that we're going to build in react and now that i have a place where i can put my h1 here i'm going to select it with a regular dom api document.getelementbyid root and surprise we've written some react code i'm going to hit save we'll see that it tells me hello everyone in a single line of code i was able to use react to insert something that looks very much like an h1 obviously this is a little different because we're still inside javascript and i was able to put it right inside of this real dom element in our index.html now i have an entire lesson that's dedicated to understanding exactly what's going on here but in an effort to get your hands on the code get a quick win for you to see that you can write react and it's not too scary i'm going to give you a few seconds of silence where you can pause the screencast and study this line of code and then i'll be erasing it and letting you type it again from scratch in fact let me write that down as a little challenge here okay pause the screencast here spend just a minute memorizing this line of code do that now and then i will add a little comment with the next part okay your time to shine rewrite the line of code as best you can from memory you don't have to put hello everyone or hello react or whatever you even don't have to use an h1 like i did you can put whatever html you want in there so pause the screencast now and work on that because i pulled in that reacts dom library in my cdn i have a global variable called react dom and it has a render method which allows us to render something to the screen or kind of in other words place something on the screen and i don't know let's let's do a paragraph this time just to switch it up a tiny bit say hi my name is bob okay so that's the element that i want to place inside of this div again this div is a container for the actual elements that i plan on putting on the screen and the second parameter that i need to include with reactdom.render is you could think of it as a dom node that i have to go select with document.getelementbyid or because i can also get dom nodes with something like query selector that would work just as well in this case i'd have to put hash mark root because that's how query selector works it's the id of root just so this isn't confusing we'll just keep it as get element by id for now but just so you know either one should work just fine so the first parameter is what do i want to place on the screen and the second one is where should i be placing this i imagine under the hood what render is doing is it's taking this dom element that we are grabbing with by id and it's running something similar to dot append or dot append child to it and what is it appending it's appending this paragraph we're going to see that it's a little more complicated than that but that's a good way to kind of build a mental model for yourself as to how this is actually working so i haven't refreshed the page yet which is why this still says hello everyone i'm going to hit save which will refresh my browser and there we go hi my name is bob this time it's a paragraph instead of a header element and that's awesome we have written react in a single line of code you might have noticed that our console is popping up with this error you're using the inbrowser babel transformer be sure to precompile your scripts for production a bunch of jargon here that may not totally make sense to you and that's fine that's a symptom of us setting up react the easy way instead of the correct way soon down the road we'll be kind of shifting our setup here and that warning will go away and awesome okay because this is scrimba you can always delete this if maybe you weren't able to memorize that you can try deleting it rewriting it again from scratch practice with it i'm going to ask you to do that a million times throughout this course because the only way to learn react is to write react as much as you can now i have found it really helpful for my own learning to understand why the heck i even care about react in the first place so in the next couple screencasts we're going to be talking about some of those really awesome benefits that come with using react as our library for building web applications but as always if you want to spend more time with this go ahead and do that pause click into the editor start typing what you want to type practice it and when you're ready i will see you in the next lesson surprise if you know my teaching style i wanted to include a practice in here essentially you're just going to be rewriting that same line of code that we just wrote in the last lesson however this time we'll extend it just a little bit i want you to see if you can figure out how to render an unordered list with two or more list items inside last time we just rendered a paragraph you can see it's still kind of left over here if i refresh that that'll disappear i've left the entire setup here for you we're still pulling in the script tags for react react dom and babel so essentially your main focus is just to rewrite that same one liner of code but see if you can figure out how to add a couple more elements inside like having an unordered list with some nested list items pause here and try to work on that challenge okay pulling in the react dom library that gives us access to a render method before we did a simple paragraph like this and put some code inside however i can put this as an unordered list and then just actually stick some list items inside of here so it's going to look a little confusing at first i'll clean it up in just a minute we have list item we'll just say thing one and i'll do another list item here thing two okay now i'm going to move this onto its own line here this whole html thing right there and the second parameter i need to separate with a comma is where to put this so i'm going to use document.getelementbyid root and let's cross our fingers see how this goes cool okay hopefully that was some good practice now let's keep moving forward and learn a little bit more about why we care about react one more thing that was highly requested from the first time i recorded this react course was how can i set this up on my local environment everything that i'm doing will be done on scrimba.com so that you can interact with the same code that you see me writing however it's also a good experience to run it locally on your own computer and get a feel for what it would be like to actually develop react on your own computer again our setup here is more of the easy way than the right way but for now what you can do is you can click the little gear icon in the lower right of your scrimba editor which will pop up a little menu here and there's an option that says download as zip that will download a zip file containing the files that we're working on here you can uncompress that like you normally would any zip file and open that up in any editor that you'd like for example visual studio code on your own machine now in order for that to run i'm going to show you what that looks like on visual studio code inside a visual studio code which is what you see in this screenshot there's a menu icon for some extensions and you'll need to search for an extension called live server it's created by ritwik day and you'll need this installed to your vs code in order to run the code that we have written in react so you'll click the little install button that's going to put an icon down at the very bottom menu bar in visual studio code that says go live and all you need to do is click that go live button which will open a web page on a local server i think it's maybe port 5000 that it runs and that should launch your own react project on your local machine as soon as you see me move toward a different setup for react that includes webpack and downloaded dependencies from npm and so forth this is no longer going to work in quite the same way but for now for those that are curious i thought i might just explain how you can get this set up on your own machine okay that's enough delaying let's keep moving forward with the course let's spend a little bit of time understanding why we even care to learn react one of the main reasons that people will talk about is how react allows us to write composable code so what exactly do i mean by composable well an analogy that i came up with has to do with sculpting if you think of the statue of david for example this statue was created originally from a single giant block of marble that was then sculpted down to the sculpture that we know today so in the end what results is one giant single piece that makes up this piece of art now what if instead of starting with one giant piece we instead used a bunch of small pieces to put together something that is greater these are lego bricks that obviously are small each in their own right that were put together to create something large in this example they all kind of work together to accomplish a goal so to speak the goal of looking like the statue of david now this example is not perfect because the original statue of david obviously is more beautiful than this replica made of lego bricks but hopefully the concept makes sense let's look at an example in actual web development what i have here is copy and pasted from the bootstrap website if you're not familiar with bootstrap that's really not important right now but it's enough to know that these 30 or 40 lines of code copy and pasted from the bootstrap website represent a navigation bar that is prestyled now in the old days of web development a single page on a website was usually a single html page so if this is just the navbar a lot of times those web pages would end up being thousands and thousands of lines of html code essentially making it one giant sculpture well with modern frameworks like react we can take code like this and we can put it into our own custom components and we can put those components together to make something that is larger but in our case our code becomes a lot more maintainable and a lot more flexible you can see i've given these kind of silly names to show you that these are not regular html elements i can combine elements together that are real html elements like you see here into my own custom component called for example my awesome navbar or my awesome footer we're not quite ready to dive into the syntax of react quite yet but i'm going to give you a taste of it and a chance to play with it before we move on so let's see this in practice over here you can see i have my react dom.render and i'm rendering a custom component called navbar and if i scroll up you'll get a chance to see how i created that navbar as a quick aside one thing you might notice is that i'm using class name everywhere instead of class that's not a mistake that's just how you have to assign classes in react we're going to cover that later but for now i'd like to give you a challenge that's going to require you to deduce what i've done here and try to replicate it for yourself so let me put that here okay your challenge is to see the navbar component that i have created and see if you can deduce how to create your own component called main content it can return something really simple like a single h1 element and afterwards i want you to render it below the navbar you'll have to figure out how to render it below the navbar now i've changed this a little bit for reasons that we'll talk about soon but this line here 51 this is where you're going to figure out how to render your own custom component main content so first build your custom component looking at my example above to try and figure out how to do that and secondly render that component down here in reactdom.render pause the screencast and work on this challenge well following the example above we see that i created this component by creating a function and the name of the function is the name of my component so i will open up that function and return the content that i want to show up on my page above i created a set of parentheses because i have many elements that i'm trying to return i'll just do that just to keep things consistent for now we'll create our h1 that says i'm learning react and secondly i can take my main content and i can render it by making it look kind of like an html element in this case it's a selfclosing one so i have main content as a single tag here and if i hit save we'll see that my h1 actually showed up on my page and that's the concept of composability it goes quite a bit deeper than this we're going to see how we can make our components much more composable and reusable but for now let's move on to another reason why people really love react and we'll cover that in the next lesson another major reason people love react is because it's something that we call declarative so let's talk about declarative to understand declarative it's helpful to know that it's opposite is something called imperative when a program is declarative we can simply tell it what should be done more specifically it's like the computer saying just tell me what to do and i'll worry about all the nitty gritty details on how to get it done it's opposite imperative is when we need to tell the program how it should be done like the computer saying i need you to describe to me every step along the way how to do something and then i'll do it up until now if you've mostly been just using vanilla javascript anytime you needed to create elements on the page you've been doing it in an imperative way in fact let's go look at what that has been like i've commented out my react dom dot render and i'm going to put a challenge here for you okay your challenge is to recreate this above line of code where we are rendering something to the screen using vanilla javascript by creating and appending an h1 to our div with the id of root we have our div id of root you'll need to select it and then append a new element and i give you the stepbystep instructions right here one little caveat is i don't want you using inner html because that kind of breaks the analogy down a little bit generally speaking this is actually just a good way to practice the vanilla javascript that you have been learning so far so it's always good to give it some practice i'll give you a couple lines here pause the screencast and work on this challenge okay let's work on this so i'm going to create an h1 and i'll use document.createelement and i'll make an h1 and then if i'm giving it some text content i need to use the text content property of this dom node and set it equal to i don't know maybe this is an imperative way to program then i need to give it a class name so i'll use the class name property here and set it equal to i think we said header and finally i need to append it to my div with the id of root so first i need to say document get element by id root and then use the append property or method to append my h1 to the dom so when i hit save it should show up this is an imperative way to program perfect now this example is a little bit on the nose because if you were really just putting something static that had nothing to do with user interaction you probably would just go to your html page and stick it right inside the div here right but with react we're building our entire page in javascript and so doing something imperatively this way where i have to tell it step by step how to create the element and then to add some text content and then add a class name and then append it to the dom that's going to get old pretty fast especially even with something mildly more complicated than a single h1 like a very simple web page like this as soon as we have more than one element suddenly our four lines of code will become probably dozens or maybe even hundreds of lines of javascript code just to create and append all of these elements in the correct order and in the correct way and so that brings us back to the idea of writing our code declaratively and react allows us to do that in a really simple way as we see back up top let me comment this out and uncomment this we essentially get to write our javascript as if it were html we are relying on react to figure out how to turn what we have declaratively written as an h1 into the javascript code that's needed to append it to the dom in fact if i were being strict and wanted to make this more equivalent in order to add a class name i can just add a class name as if this were an html element again this is class name instead of class for a good reason which we'll talk about but that's a pretty minor difference to be able to do all of these lines of code in one single section right here and that difference is going to compound as we get into more and more complicated uis like we see here so at this point i could probably continue talking about different reasons that we're choosing to use react and that it will be really beneficial for you to learn react as you see on my little list here it's a very hierable skill and it's actively maintained by really skilled people at facebook however at this point i think we're overdue to just jump into the syntax get your hands on the keyboard and start learning and practicing react so when you're ready let's keep moving forward okay let's finally address this elephant in the room what we're looking at here why we have what looks like html stuffed right inside our javascript well fairly early on in the days of react the react team created a syntax that's called jsx jsx stands for javascript xml but that's not terribly important for you to memorize what's most important is to think of it as sort of a flavor of javascript that looks a lot like html and with the introduction of jsx into react it really made it so that react was very declarative instead of imperative we can see up above what it took for us to create an h1 give it some text content and give it a class name in regular vanilla javascript but with jsx the benefit is that we can just write what we're already used to writing with html now there's a couple of small differences for example instead of using class i need to use class name so i might say class name equals header for example and there's a few other of these but for the most part with jsx we can just write the html that we're used to writing at first it might be a little bit confusing to write your html inside of your javascript but i promise as you start doing react it's really going to start making sense you're going to learn to love jsx now one thing that was really helpful for me to understand as i was learning was to see the difference between what jsx is and what our regular dom elements are so i'm going to do a few things i'm going to uncomment these lines of code here and i'm also going to take this piece of jsx and set it to a variable we'll call it element then i can fix my reactdom.render by just putting element down here and this will work exactly the same but this allows us to console.log it so let's console.log element and i'll hit save so that this code will run i'll open the console and we'll see the differences here first of all on line four we are console logging the dom element that we created with document.createelement and that's what shows up in our console as what looks like an html element here so that's this line right here however when we console.log our element that we created with jsx what actually got returned to us was this let me copy this out and we can see that this is just a regular javascript object let me clean it up just a little bit to make it even more clear so in the end what we get from jsx or rather what react is creating with jsx is actually just plain old javascript objects and those objects describe the dom element that we want react to put onto the page for us and if we look closely we can see some interesting information here first of all we see that it has very similar properties like we have class name where we're setting that to header and down here we have props or short for properties and we have class name we also have something called children and we can see that's actually the text that we put inside of our h1 that's about all i care to touch on with the object nature of react elements but i thought it would be helpful to kind of kick us off understanding that jsx is kind of like a function that when it's run returns us objects that react can interpret and use to create actual elements that get put on the screen for us i'm going to comment this out so we can talk about one more thing clean up this a little bit and i'll go ahead and put this directly back in line to my react dom.render move these onto their own lines the last thing that i wanted to touch on was that with jsx we need to make sure that we are only returning a single parent element in other words i can't take this one h1 and place say a paragraph directly next to it because in this case we're rendering or attempting to render two sibling elements that sit side by side in fact if i try to run this you can see react complains and i guess in this case it says unknown error sometimes it will say that you have to wrap the elements that you're trying to render in some kind of parent element now this doesn't mean that i can't put two elements on my page at any given time it just means that i need to wrap them in something like a div for example so if i say a div that has an h1 and a paragraph inside now i am rendering just one parent element and it doesn't really matter how many children elements are included as long as i have one parent element that i'm rendering so i can hit save we'll see that this is working just fine now remember how i was able to save my h1 as a variable well i can actually save a whole collection of jsx for example this div with the h1 and the paragraph as a variable so let's say const page equals and then i can paste in my elements here now to me this looks a little bit crazy so normally what i like to do is move my elements my jsx onto their own lines as if this were html but in that case i need to go ahead and wrap everything in parentheses now take a second and think how is it that i can then fix what i have down here we can see we have a syntax error how can i fix this so that when i refresh the page this is still working pause here and see if you can figure out how to make this work again well all of my jsx is being saved under the variable of page so i should just be able to put page here and hit refresh and sure enough that's working just fine hopefully some of you were kind of curious to see what this looks like as a javascript object if we console.log page we can see that essentially we got what we had last time but this time it's a little more involved specifically in the children property of our div we see that there's other react elements in there i'm not going to dive too deep into that feel free to copy and paste what you see in the console maybe clean it up a little bit and analyze it but the point is i can save a whole bunch of jsx into a single variable and then use that variable kind of like any other variable and the key is that's because what i'm getting back when i write my jsx is just a javascript object okay i'm going to clean this page up a little bit and i'm going to comment out our page because i'm going to give you a challenge okay i left our example of const page up here just for reference but i did delete our code that we had at the bottom which actually enabled us to put something on the screen and that's because i want you to practice it again so your challenge is to create a navigation bar using jsx i've given you some instructions here on what the content should actually be and as i mentioned at the very end don't worry about styling yet we're going to cover styling soon but for now what you're going to have is just going to look like plain html that's unstyled so pause the screencast here and see if you can complete this challenge okay before i worry about the react dom dot render bit i'm going to create a new variable we'll call it p actually let's call it nav bar and i'm going to use my parentheses so that i can start my element on the next line and like i mentioned we want to use the semantic nav element and inside of there i'm going to have an h1 let's call it bob's bistro maybe this is a restaurant okay and then we have an unordered list and hopefully while you were playing with this you came to realize that it doesn't matter how nested i get just like in html i can nest this as deep as i want we'll create three list items and it said pricing about and contact and i don't know maybe if this is a restaurant i'll say menu instead of pricing okay i've got my jsx for my navbar setup and then the last bit which was just meant to be something repetitive that allows you to get some muscle memory for this is to use reactdom.render and the first parameter is what do i want to render and that's my navbar jsx and the second thing is where do i want to render it i'm going to do that by selecting with get element by id my div with the id of root that is over in my index.html right there okay i should hit save and sure enough it's pretty ugly obviously we want to style this we're going to get to that soon i hope that challenge went well for you if you struggled please don't keep pushing forward go back rewatch this lesson see if you can do this again from scratch or maybe just try typing it 10 or 15 times if you need to also if you get totally stuck don't forget that this is a community you can reach out on discord ask your question and you are more than likely to get a really friendly helpful response back when you're feeling pretty good about this let's keep moving forward okay at this point it's probably time for us to switch away from the easy way of getting react set up in our project to the more correct way now inside of scrimba that means something different than it means inside of your own local environment scrimba has kind of some magic that's happening under the hood that's helping react just kind of work in our project so i'm going to show you a couple steps for how i do this in scrimba you won't really have to worry too much about that because even when you're creating your own new scrim in scrimba it'll just ask you what type of scrim you want and you'll just tell it that it's a react scrim and it'll set everything up for you so what i need to do is in my index.html i'm actually going to remove all of my unpackaged.com cdn's here so i can get rid of these three lines and i don't need this type text babel anymore because i'm not pulling in babel and instead over here on the left i'm going to add the dependencies that i need and i need react and i need react dash dom if you're a little bit more familiar with developing in javascript you might recognize that these dependencies are similar to having a package.json where you install these packages through npm if pretty much everything i just said doesn't make sense don't worry about it at all i am going to talk about different options for local setup later if you absolutely need to follow along in your local environment instead of here on scrimba.com you can continue to use the cdn way that we were just using like this but otherwise i just recommend doing things here inside of scrimba our main focus is not going to be how to set up react but rather how to write react so i will take those back out and now that i have taken those cdns out it means that i no longer have global variables added to my window like react dom so if i try to save this we're going to see i have an unexpected token angle bracket and that's because well it doesn't know what react is at all what i need to do now is actually import react from react this might not seem like it's doing anything because i'm actually not referencing react anywhere here i've got react dom but that's something different however react is where the jsx syntax is defined and so i need to import react in order for this to work at all now the astute among you might be familiar with the fact that with react version 17 i technically don't need to import react however currently at the time of this recording scrimba is not yet set up to support the fact that react version 17 and above no longer requires you to import react in order for jsx to work so anyway throughout the duration of this course i will be using import react from react and that's because well i need to in this environment currently let's hit save again and see what we run into next and this says cannot use import statement outside of a module and oh you know what i think that has to do with another sort of magic piece that is happening under the hood with scrimba so i'm going to add this.pack that's not something you'll need to do in the real world so this should be yep react dom is not defined that's the error i expected to see and that's because whenever we're using react dom i will also need to import react dom from react dom and now fingers crossed i should get something that works again okay there we go we're back on the screen and everything is set up a little more similar to how you normally would see a react project setup don't be overly concerned with all of these implementation details however this is how i'm going to be setting up my projects from here on and at this point we actually have enough knowledge for us to start working on this section's project which is a static html page in react however before we jump into that i want to exercise your brain with a little thought experiment and we are going to do that in the next screencast i'd like to do a quick thought experiment with you and that is to figure out why we're using react dot render instead of just using the dom append method that you've probably used before in javascript i've written the first line for you and that's to import react from react that will just allow you to write some jsx your challenge as you can see in this little four step process here is to create just a really simple sample page in jsx it has to be greater than or equal to four elements just to get your fingers working a little bit and i want you to save that jsx to a variable remember that that variable needs to be one parent element with some children elements nested inside of it in other words we can't just have two sibling elements saved in a variable in jsx then i want you to select the div with the id of root using whatever selector you want to use and then use dot append to append your jsx if you need to do a quick google search for how to use dota pen that's totally fine and then before you run your code i want you to see if you can guess what's going to show up in the browser before you run the code and then run your code and see if you can explain what does show up in the browser pause here and play around with this a bit okay well let's create our jsx we'll say const page equals and i'll open my parentheses so i can write my jsx on its own line and we'll start with a div just to surround everything and i don't know let's say i'm making a page about why i love react we'll say this is my awesome website in react and then maybe in h3 that says here are the reasons i love react and we'll use an ordered list it's not terribly important what you actually put in here i'll just use some of the reasons that i've been talking about it's composable it's declarative it's a very hirable skill to have let's see i need to get rid of this and it's very actively maintained by some very skilled people again the jsx you chose to put in here is not terribly important so we'll use document.getelementbyid root and then use the dom nodes append method to append our page and we'll see what shows up here now of course i know what's going to show up so i'm just going to run the code and we see that we get object object this object object is sort of a string representation of a regular javascript object something i can do to actually make that object appear is to stringify it using json so i can actually say json.stringify and we will stringify that object so that it puts json on the page i'll hit save and look at that we get a javascript object now step four see if you can explain why this actually shows up in the browser well kind of the whole purpose of this thought experiment was to remind you that jsx returns plain javascript objects at this point in time it has nothing to do with the dom it's not recognized by the browser as anything important dealing with the dom it's only when we try to render it using react dom.render that react can take these javascript objects and actually turn them into real dom elements that the browser can interpret as things like first level headers or ordered lists so let's go ahead for the sake of practice and fix this i'm going to update our challenge here okay simply put your challenges to fix our code and don't forget we're not using those cdns in our html anymore which is what used to give us a global variable called react dom so you'll have to see if you can remember how we get access to react dom pause the screencast here and try to fix our code in order to use react's dom i will need to import it and we'll import it from the react dom package then instead of selecting my div with the id of root actually i'm going to need that anyway so i will leave that code there i'll say react dom dot render the thing i want to render is my page so we'll put page and the where i want to render it is inside of that div with the id of root i'm going to comment this out so it doesn't break it we'll hit save and there we go awesome so simply put react dom's job or the react dom.render methods job is to take react elements and interpret them in a way that turns them into real dom elements that the browser can understand okay with that understanding it's only a small jump to work on our section project which is to build a static page in react we're going to start the first steps of that in the next screencast okay we're finally at our first challenge i'm really excited to start working on this i've included a google slide of what you're aiming for with this challenge notice there's really no styling being applied here at all it's just bare html so if we go look at the challenge essentially you are starting completely from scratch and your job is to build the html for our section project as you see it here we'll be adding just a little bit of styling to it later after we learn how to do that and i've included a couple hints here for simplicity i've imported the react logo file directly into our file explorer here which means that you can reference it in your image element that you create with source equals and then using a dot slash react dash logo dot png i also have a hint here about how to set the width attribute just remember that jsx is almost identical to html and in fact for what you're working on here you really shouldn't see any difference between the jsx that you'll write and what you would normally write in html don't forget that we are no longer using our cdns so you'll have to remember how to bring in react react dom and so forth that's all the hints i'm going to give you so pause the screencast here and work on this challenge well first things first let's import react from react and import react dom from reactdom we can't really do anything until we've done that then i'm going to save a variable called page and as a heads up this isn't actually going to be a very common way for us to deal with jsx we're going to see very soon how we can do this in a more conventional way for the sake of learning though i think this is a good way for us to start just to do a bit of a sanity check i'm going to just throw an h1 in here it says testing and then do my last step which is reactdom.render and we want to render our page and we want to put it at the div with the id of root let's see if that's working okay cool we have testing showing up that means that everything else is set up correctly okay so let's start building our page here i'm going to surround everything in a div just because i can only have one element here rather one parent element here instead of any sibling elements and the first thing i'll put in is an image and just like in html i can provide an image source and like i mentioned up in the hints i'm going to have react dash logo.png the dot slash just means look in the same folder for a file called reactlogo.png now if i refresh this i'm going to get a pretty large image here so just like in html i can set the width to be something specific like 40 pixels and that looks a little more manageable a little less crazy not taking up my whole screen next i've got something that looks kind of like an h1 that says fun facts about react so we will add that in there and awesome now because my h1 is a block element it has floated below my image even though my image is technically an inline element and that's kind of to be expected or rather that's what we're aiming for and then it looks like the last thing is an unordered list with these five list items so i'll go ahead and add that unordered list do some list items i'm going to hold shift option down to copy these lines and then just start typing in some of these facts okay and yeah these are some pretty interesting facts about react i'll hit save and awesome it looks like we essentially got to where we wanted to get to with our goal here i'll go ahead and clean up some of my comments up here from the challenge and great work hopefully you were able to follow along with that now like i mentioned saving all of our jsx to a single variable like this actually isn't really that common nor is it convenient at all so what we're going to start covering is a much more common way and that is by creating custom components before we jump into that i want to give you a quick quiz over the topics that we've talked about so far and we will do that in the next screencast before jumping right into the next topic i thought it would be smart to have a quick little pop quiz on some of the topics that we've covered up to this point because this is scrimba you can just click into this quiz.md file and answer the questions here so pause the screencast and work on this quiz why do we need to import react from react in our files well it's because the jsx syntax is defined in react and if we were to remove react we would see that it's telling us react is not defined even though we're not using react in our code the jsx here sort of demands that react be a part of our code base so i will go type that over here react is what defines jsx so in order to use jsx we need to import react if i were to console log the page in our index.js file what would show up hopefully you actually attempted to answer this question before just going ahead and console logging it before i hit save i know that page is a bunch of jsx which in reality just returns some javascript objects so when i console.log page i should just see a javascript object here and sure enough there it is if you look closely at that object you'll see a children property and that children property has more react elements nested inside well that's because we have our react element here with children that are more react elements so over here we can say a javascript object these are react elements that describe what react should eventually add to the real dom for us okay number three what is wrong with this code hopefully you noticed that our jsx here is two sibling elements and remembered that we actually need all of our jsx to be nested under a single parent element as a quick sneak peek in the future you may learn that you can use something that looks like an empty tag like this in order to wrap your jsx in something that doesn't actually create another parent element these are called fragments but that's more a little piece of trivia we're not going to concern ourselves too much with that in this course next is number four what does it mean for something to be declarative instead of imperative the way we described it before was to say that declarative programming meant i could tell the program what to accomplish and it would know how to accomplish the specific stepbystep details whereas imperative meant i still needed to tell the computer step by step how to do everything an example i like to think of this is to imagine myself asking a friend to make a peanut butter and jelly sandwich for me if i were doing that declaratively i could simply say could you make me a peanut butter and jelly sandwich and i would assume that they knew how to take care of the individual steps to do so if i were being imperative on the other hand i would have to tell them to grab a slice of bread with their fingers and place that slice of bread gently on a plate then to grab a knife from the drawer and to put the knife into a jar of peanut butter and so forth there certainly are times when something imperative is warranted however generally speaking writing code declaratively is a much better developer experience and honestly usually leads to fewer bugs in the end so declarative means i can tell the computer what to do and expect it to handle the details imperative means i need to tell it how to do each step and lastly what does it mean for something to be composable well that just means that i can create small pieces that i put together to make a greater whole in terms of web development it means i can take pieces of my ui my user interface and put them into their own components and then piece those components together to build my page so what does it mean for something to be composable means that we have small pieces that we can put together to make something larger and i'll even say greater than the individual pieces this is a pretty broad definition of composable because the idea and concept of composability extends throughout all of computer programming not just web development and especially not just react but i think we've gotten the point across i'm really excited to keep moving forward we are now going to jump into sort of the baseline level of react and start learning how to create our own components and it's just going to get more and more exciting from there so strap yourselves in and let's keep moving forward when we talked about composability being one of the major benefits of react we talked about the possibility in react to create our own custom components what we currently have going on is we're saving our jsx elements here or react elements in a variable and then rendering that variable directly with reactdom.render and although this has been working for us so far it doesn't allow us a lot of flexibility when it comes to creating our own components in react and even further it's also pretty obvious we wouldn't want to take all of our markup and stuff it directly into reactdom.render even though i think technically this might work just fine actually i'm curious let's give this a shot i'll comment this out okay so everything is technically still working but we run into the same issue as we used to in kind of the old days of creating html code where if we're trying to stuff everything into one place not only do the elements not become reusable but it becomes really difficult to maintain as a developer so creating our variable up here got us one step closer but it's still not quite good enough instead what we are going to start learning about is creating our own custom components now i give you a taste of this early on in the course but we're going to actually learn it the real way now in programming the concept of a function is one that allows us to write some code that we can then execute over and over and over again just by calling that function and react adopts the same concept of having a function that allows us to create user interface or create elements over and over and over again if we wanted to knowing how functions work it's really tempting to say okay well i'm going to create a function and let's give it a temporary name for just a second and we might say well i have a function and i want it to return my ui my elements here anytime that function gets called so i might try something like this let me get rid of page here and then instead of page we might say well let's call our temporary name function and that is going to return the react elements that we asked it to and therefore we have a function that we can reuse well let's see what happens look at that it actually worked and what we have here is basically 90 of the way into creating our own custom components a function like this that returns react elements is considered in react a component however there's a couple of conventions that we need to follow for everything to work correctly all the time the first one is we need to use pascal case instead of camelcase for our component names all that means is i need to capitalize the first letter of my component and secondly instead of calling this function with parentheses like we might be used to we actually need to wrap it in angle brackets similar to an html element and i still need to change this to a capital letter there and that's the only changes we need to make from a regular javascript function that you have probably written hundreds of by now and a react component that uses the same concept of functions to create reusable user interface pieces you'll see if i hit save everything is still working as we would expect okay maybe you can feel it it's time for a practice i'm actually going to erase everything because you are going to write everything again from scratch first i'll write out the challenge for you okay i've erased our code and saved it so that our page went away this challenge is going to be given to you in two parts the first part is to create an ordered list that enumerates the reasons why you're excited to be learning react don't spend too much time trying to come up with a huge list just put a few things in an ordered list and then i want you to render your list to the page this is going to require you to remember all of the steps that we've learned so far on the basics of setting up a react app so pause the screencast and work on part one of this challenge to get started we need to import react from react i need to spell react correctly there and we'll import react dom from reactdom we'll go ahead and use react dom to render let's start with just some inline jsx here we'll say it's working and i need to select my root element as the place to put this h1 hit save as a sanity check and we know it's working awesome now the meet we are going to create our own custom page component by using a function called page using a capital letter to begin and this function is simply going to return some ui or in other words some jsx that we can put in the page just as another little sanity check i'm just going to remove the h1 here and put it inside my page component and then render my page component as we've learned and i refresh and everything is still working and just to make sure i'll just make a change i'll say it's still working okay so now the next part we are going to turn this into an unordered no an ordered list and we'll just put a few list items in here and let's see these are reasons that we're excited to be learning react maybe for one it's a popular library so i'll be able to fit in with the cool kids this probably has a pretty loose definition for what the cool kids are but that's okay okay we'll put a second item here and just so you can see everything i'm gonna move this onto its own line there we'll say i'm more likely to get a job as a developer if i know react and hopefully you have some other good reasons i'm gonna leave it at that for now just for the sake of learning i'll go ahead and refresh and there we go we've got our two pretty ugly unstyled elements that we have on the page but it seems to be working okay nice work on part one of the challenge in part two of the challenge which will be in the next screencast we're going to add a little bit more to our simple page here however before moving on if any part of this was still confusing for you i really encourage you to go back try to rewatch some of these videos you could even start from the beginning maybe you'll have some additional context that will help in your understanding and as always reach out to the scrimba community on discord if you have any questions people are always happy to answer but don't just plow forward if you're still feeling confused do some research rewatch some of the videos make sure you're doing all of the challenges and then when you're ready let's go forward and we'll work on part two the next part of our challenge is to add some more elements to our page here first i want you to add a header element with a nested nav element inside and then inside the nav you'll have a nested image element with the source that i've mentioned here and some other notes that you should read through i also want you to add an h1 element that will go below the header element but above the ordered list and at the very bottom underneath the ordered list i want you to add a footer element with some text that i have here make sure to read through the whole challenge there so you get a better idea of what you need to be working on and as always pause the screencast here and work on this challenge one of the biggest tricks in this challenge is to make sure that you don't just try to add a header hopefully that didn't cause too many headaches for anyone but the biggest problem with this is that again i'm trying to create two sibling jsx elements here one with the header and one with the ordered list inside of a component i just can't do that i have to have one parent component so i could either use those fragment tags that i briefly mentioned earlier like this or a lot of times you'll see people just wrap it in a div like this now that i've done that everything is working again the way i'd expect inside of my header i'm going to include a nav element nav is just basically an html5 semantic element that is basically the same thing as a div except it's better for screen readers and assistive technologies inside of my nav i'm going to have an image element and that one needs to have a source that i included up here so i'll just copy this and make sure i get that quotation mark there get rid of that extra space and let's just save this and see how things are looking okay and my react logo is huge so i'm going to give it a width of 40 pixels like i've done before okay that's more manageable next we need to add an h1 with some text describing the page like reasons why i'm excited to learn react we'll just copy that let's see that'll go underneath the header and we'll put an h1 there and i'll just paste that text in right there refresh it and okay that's starting to look good then at the very bottom so this is above this ending div because i still need it to be a part of my page component but below my ordered list i'm going to add a footer element and inside the footer we need to have this text here but we'll customize it to be relevant for me so currently it's 2021 this is got semantic problems because i have those elements there and i'm going to call this zarol development because zero is my last name all rights reserved real official this is not going to be stolen by anyone for sure now that i have this footer here and let's go ahead and refresh this sometimes people will put this inside of a small tag i'm kind of just curious to see what that looks like i need to end this correctly and yeah i guess that looks a little better we'll leave it like that okay nice work now some of you may have been wondering well why am i just building everything as this monolithic page component i thought the whole reason that we were creating our own custom components is because then i can compose them together instead of just shoving everything into this one component and you would be right so in the next lesson we are going to learn how to compose these elements together learning the concept of parent and child components and so forth before we do that though i want to make sure that you've been awake and that you're following along we're gonna have a quick quiz so that is coming up next okay it's quiz time again read through the questions in the quiz actually click into the editor type down your answers and if you find yourself not knowing the answer to one of these don't just kind of plow ahead but instead actually do some research see if you can figure out on your own with google and whatever other resources you have available to you what the answer to the quiz question is before just moving on so pause now answer the questions to the quiz and then we'll go through them together all right number one what is a react component well basically put a react component is simply a function that returns react elements well what exactly are react elements react elements are the objects that get created when we return jsx so although this looks very much like html remember this is jsx which is a special syntax of react and under the hood it's returning a regular javascript object those objects are eventually turned into real dom elements that people can see on the screen so sometimes you'll hear people refer to this as ui or user interface and that just means that it's what the user can actually see on the screen and just like any other javascript function a component can be reused over and over here i'm creating a page component but i can run my page function so to speak or in other words create an instance of my page component by just rendering page again okay let's go to number two what is wrong with the following code it's a really small difference but it's an important one any components that you create need to begin with a capital letter this is called pascal case where it's essentially camel case but where the first letter is also capitalized basically anytime you might want to have i guess you could say different words in your component name like my component all you do is capitalize the first letter of the next word this would of course be instead of putting some kind of space in between there like in a regular sentence and then finally what's wrong with the code in number three hopefully this one wasn't too difficult to find but if you look way down here instead of calling our function like you might normally be used to by adding parentheses at the end with function components in react you instead surround these with the angle brackets as if it were a regular html tag and in react this is the correct way to i guess you could say call your component or create an instance of your component okay short and sweet nice job on that quiz hopefully you were able to follow along next we're going to move forward and see how we can do a better job of composing our components together as we've mentioned it's not ideal to be taking our entire markup and stuffing it into one component like we're doing here so let's learn through practice the concept of creating a parent and child component we're going to start this off by having you do a mini challenge so let me type out that challenge here okay your little mini challenge is to take the header element from our page and to put it into its own component that's called header technically speaking i'm not necessarily asking you to then render the header inside the page but if you want a little extra credit challenge you can render that header component that you just made inside of the page here pause now and work on this mini challenge okay just like it says we are going to create a separate header component here and we're doing this outside of page because they're different components and basically i can just cut out this whole header section and return it from my header component and that's really all the mini challenge was asking you to do now if you didn't try to do the little extra credit i gave you and render the header inside here i want you to think for a second what might that look like well just like we are creating our page component down here or rather we're creating an instance of our page component down here i can create an instance of my header component by just typing it out like this as if it were an html element amongst my other code and here we see the concept of composability in practice i've set aside some of my ui to be managed by a single header component and then anytime i want to essentially insert these elements into my page i can create an instance of my header component just like this now in a web page that's this small it's really not that necessary to do this but i'm sure you can imagine if this were a much larger application especially one that had pieces that had a lot of user interaction and so forth it becomes really really beneficial to move these things into their own separate components okay so that leads us to the next part of this challenge which i will type out now essentially i want you to do the same thing but now with the footer as its own component and the rest of the content as its own component pause now and work on this challenge okay just like before we'll create a new footer function or component here and it's going to return the footer content i'll just cut that out of there put it right here and down here in its place we will render the footer component okay and then we'll do the same thing for the main content component i'll take everything here including the h1 and there's a little trick here because if you tried to just paste that in you'll notice that this is two sibling elements which again we can't just render side by side we need a parent element to surround them so i will put this div down there indent there and we will render an instance of our main content component now i should be able to refresh the page and essentially have the exact same thing of course now that i've wrapped this in a div very technically speaking these elements are now children of the div and the div exists right here on this level for my purposes now this div is not harming anything it's not changing my styling or anything so i'm not terribly worried about it so hopefully you can understand now the idea or the naming of parent child components we have a parent component which is our page component and just by virtue of it rendering other components these other components become by name children components and just like html this can go deeper and deeper down the rabbit hole i could have main content rendering another component that we have also made and then relative to main content that other component would be a child component and main content would be the parent component this really is no different than in our html how you can have different levels of parent child and even grandchild or whatever you want to call it nice work on this challenge you can see that we are now composing our page together of other components now we're pretty overdue in learning the ability to add some styling to our page so that's what we're going to work on next we're going to start off this lesson with a sort of mini challenge our goal is to add a navigation bar to our little site here and navigation items like this are usually handled with something like an unordered list with list items so that's your challenge underneath our image here your challenge is to add an unordered list with three list items for pricing about and contact in the end this will essentially be like adding some html to your page so this should be pretty quick pause the screencast and work on this challenge simply enough we can add an unordered list with our three list items for pricing about and contact let's hit save and see where we are okay pretty ugly but we're going to style this now fortunately styling something in react is as simple as adding classes just like you would in regular html the only difference you need to know about is that instead of using class equals we're going to use class name equals and that's because under the hood if you remember react is taking these jsx elements and turning them into native dom elements and just like when we were creating things in vanilla javascript we would say something like const unordered list equals document dot create element with unordered list as the type and then we would say ul dot class name equals something if we wanted to set the class name so in the end that's why we're using class name instead of class in react and so i will set the class name here to maybe nav dash items hit save and then in our style.css i can add nav items and maybe first let's take the list style off so we'll say list style of none and sure enough our bullets go away and that brings us to the next part of this challenge using flexbox i want you to line up the nav items horizontally so that they sit next to each other like this and then also using flexbox i want you to line up the unordered list with your newly horizontal list items to be in line with our logo so that everything is nice and aligned just like we have in this image in doing so i want you only to use css classes i don't want you to select any bare elements like the whole nav or anything like that mostly just so we can get some practice typing out class name pause the screencast and work on this part of the challenge well let's piggyback off our nav items class which we already have i should just be able to change the display to flex and sure enough that gives me all of my items in a row now let's put our list item in line with our logo image here and then we'll worry about some spacing between these items back in my code i'm going to probably give my nav a class name of nav of course i could have just selected the whole nav element but like i mentioned we're here to practice class names so i'll make a class name of nav and we'll select our nav let me hit refresh over here so that the styles will apply immediately and i'll give this a display of flex awesome our elements are in a line now because my nav only has two elements the image as the first element and the unordered list as the second element i guess i should say to direct children i can just use justify content space between to push that pricing about and contact items to the far right it also looks like our logo got a bit stretched that just kind of happens in flex containers so i'll say align item center and that should fix my aspect ratios of the image and then i'll go ahead and add a little bit of space between my list items there i know i mentioned using classes but in the case of list items i usually prefer to select the unordered list by its class and then just select all the list items that way i don't have to go in and add a class name to every single one of my list items let's just give those a padding of maybe 10 pixels okay that's looking pretty good now my image is looking a little bit small to me i want to make it bigger but oh yeah we added this width attribute but now that we know how to style with classes let's have sort of an impromptu third part of this challenge okay your task is to change the image styling to happen in the css instead of right here in line and of course for practice let's add a new class to the image just so you can style it that way pause the screencast and work on this part of the challenge simply enough we can take our width out which is going to make our image pretty huge if i refresh but we'll give it a class name let's call it nav dash logo and then we will select our nav logo and let's give it our width of 40 pixels again i have to hit refresh over here okay we're back where we were actually this logo is looking a little small let me try 60 pixels yeah i think i like that size better at this point i think it's a perfect opportunity for you to continue practicing styling this page obviously this page is really small in its scope and so before we just push forward i would like you to spend at least a few minutes styling up this page making it look a little bit nicer add your own flair to it in fact i actually did that and put maybe five minutes of styling into it which obviously shows it's not going to win any design awards but i did change the font to use a google font i added this little box shadow under our nav bar i moved the footer down to the actual footer section of our page the bottom of our page and added some really basic styles to it so this is a great opportunity not only for you to flex your css skills and get your hands on the keyboard and do some practice but also to interact with the scrimba community especially on discord once you've styled something up that looks well pretty much anything's going to look better than this once you have some kind of style added take a screenshot and share it in discord as you make changes to your code here in scrimba it will create a note that you can save and you can even share that on twitter you can share the link to that and discord whatever it takes for you to get involved with the scrimma community once you've had a chance to apply some of your own creativity to this little page the next thing we're going to do is clean up our code here where right now we have everything kind of stuffed into our index.js file and we're going to learn how we can move these components into their own folders and clean up our code a bit there are practically innumerable ways to organize your projects and so i'm hoping to in this screencast just teach you some of the principles and as we go through the course you may see different methods that i use and of course as you look at other people's code you'll see the ways that they use as well for organizing their code now what we have here is a very small site for react there's hardly anything here i barely have 50 lines of code to make this page however anything substantial that you have will end up being hundreds more likely thousands or even tens of thousands of lines of code in total so it's really important to have an organization system that makes sense to you to your group and something that you agree upon in the beginning and stick to as you continue to develop so i'm going to show you with separating one of these components into its own file and then i'm going to give you a challenge to do the same for the others so what i'll do is work on the header and we're going to move header into its own file so i'm going to create a new file in my explorer up here called header js a convention that i personally like to stick to is that any file i create that will essentially house a react component will start with a capital letter the same as the component's name itself now i'm going to copy or actually cut this entire component out and over in header js i'm going to paste it now there's a couple things i need to change here i want you to pause the screencast and see if you can think of two things that i need to change in this file in order for me to then be able to import it into this file so that it's working the way that it was before so take a good look at this pause the screencast see if you can figure that out well remember in order for the program to make any sense of jsx i always need to import react from react even though we're not explicitly using capital r e a c t anywhere here in my code for jsx to work i will need to import react from react again this is something that has recently changed if you're working in an environment that is actively using the updated react 17 then you may not have to do this the other thing is currently this component is completely stuck inside of this file i'm not sending it outside of this file anywhere and so i need to export it and oftentimes if this is the only component that i'll have i choose to export default the component so i'll say export default header alternatively i could save myself a little bit of lines of code here and just put export default function header right up at the top and then i don't have to create a separate line down here that does it separately personally i kind of oscillate between these two so you can just choose whichever one you think you prefer the most and stick with that convention if you're feeling a little bit rusty on export import export default and so forth you may want to spend some time researching import and export in es6 because we will be using it quite a bit in this react course now that i have exported my header component it means that over in my index js i can import it and i'll say import header from and then i have to use dot slash capital h header and i could say js but that's the default extension for imports so i don't need to specify.js in this case dot slash is a way to indicate that i'm talking about a file in my own project here not a package that's in my dependencies like react and react dom and i have to make sure that i spell this the exact same as my file name not necessarily the name of the component i could have chosen to call this head like that and i still would have to say import header from dot slash header or in this case i could say import whatever because i'm doing an export default if that's confusing don't worry too much about it i prefer to keep the names all the same so that i don't run into any confusion there okay i'll put an extra line here what's nice about this is now my code is sort of sequestered into the header.js file which means that if i want to change the header i can logically come to my header.js file to make changes to my header and i don't need to change how it's rendered down here because when i import it i'm importing everything that i have in my header.js file just like it was when it was declared here in the index.js file okay let's get some practice let me type out your challenge simple enough just move the footer component and the main content component into their own files and then of course do what you need to do to make it so that our site doesn't break down pause the screencast and work on this challenge okay let's do this i'm just going to cut my footer out create a new file called capitalf footer.js paste my code in and we'll import react from react so that our jsx works and then i'll export default my footer function my footer component and make sure that i import it here say import footer from footer and just by importing it now my footer should just be working the same way as it was hit refresh and everything is working awesome we'll do the same thing for main content and i can clean up some of these extra lines create a new component or file called main content.js paste it in export default import react from react and of course we haven't yet imported it so we will import it main content hit save and we're back up and running we can remove this challenge and all of a sudden we're down to 17 lines of code we're importing these components from other files and that way we have a much better organization on our app here again like i said there's a million different ways to organize your code it's also not uncommon for people to even take this component that's sort of organizing our other components and put it in its own file a lot of times instead of calling it page they'll call it app that's actually the convention i tend to use so maybe i'll go ahead and just change this to app while i'm at it but because of the limited size of this project i'm not terribly concerned about moving this component into its own file and then also importing all of those other components into that separate file it just feels like maybe over engineering it for such a small project okay awesome work hopefully this has been helpful we're going to be using organization like this throughout the rest of this course so again if you're feeling confused about how we're exporting things or importing them then you may want to spend some time researching export and import in es6 just to become a little more familiar with it or another great way to do that would be to just play with this code see if you can delete these lines delete the export default line and just try to recreate it see if you can get it to work again when you feel comfortable with everything we've covered so far let's keep moving forward earlier in the course we saw sort of the quick and easy way to get a local version of react up and running using some cdn links and an in browser babel transpiler to get everything working you see since react uses a syntax that isn't normally understood by the browser there needs to be some kind of tool to translate this weirdlooking javascript like jsx into something that the browser can actually make sense of like regular old javascript however that in browser babel transpiler that we were using is not really a good longterm solution which is why we saw that warning that says well basically you should do this in a different way if you're going to be pushing it up to production so instead what you normally need to do is set up a whole bundler system using something like webpack i've linked to the webpack homepage if you want to go visit it there and you would teach your webpack configuration how to use babel the transpiler or compiler so that essentially it would take your react code and transpile it or compile it down to something that is readable by browsers with regular javascript just to be totally clear babel and webpack are not specific to react but in order for react to work on most web browsers you would normally have to use babel and webpack to translate it into something that a browser would make sense of and the truth is unless you've already dealt with webpack a bunch before it's honestly a bit of a high bar for beginners to clear when they're just learning web development so to help significantly reduce that overhead in getting started with react the react team created a package called create react app which does all of the heavy lifting for you and it even hides a bunch of that implementation detail of webpack from you in the code so in the end it really just makes setting up a new react app on your local machine really simple so let's take a look at the process of using create react app to create a new react app on your local machine before you can jump into create react app you have to make sure that you have nodejs and npm installed on your machine to see if you have these installed you can open up your terminal and type node space dash v that's a flag to check the version of node if it spits out any number that means that you do have node installed and if you do have node installed then you also more than likely have npm installed as well but for good measure you might as well run npm space dash v and again if it displays a version number that means you do have npm installed now the next few slides are going to give a very high level overview of how to install node in npm so if you already have node and npm you can sort of tune out the next couple minutes or skip ahead and honestly there's a lot of help already out there on how to install node.js i would just recommend going to youtube and searching install node.js but specifically install nodejs with something called nvm so i would recommend using nvm which is the node version manager its purpose is just to make switching and installing different node versions extraordinarily easy but it does mean that you have to install another package if you're on a mac or linux machine you can use nvm i've included a link to their github repository here or if you're on windows you can click here to go to a package called nvmwindows but again i would just default to following some kind of install node.js with nvm tutorial that you find on youtube okay so now you have nvm installed the next step is to open your terminal again and this time type nvm space install space dash dash lts now this command is specific to the nvm for the mac or linux i think it might be slightly different for nvmwindows i think that might just be nvm install lts with no dash dash but you'll have to check the documentation and follow the instructions in that youtube video to be sure then once that finishes installing we come full circle and you should be able to double check your node version and your npm version the same way we saw before and again by the time you're watching this it very well may not be these versions it might be a newer version than this now with node and npm installed we're ready to actually use create react app on the create react app website you can see this getting started section the main thing we care about are these commands down here just to make things even more confusing there's another thing called npx we won't really get into what npx is but for now it's enough to know that you can just type this top command npx create react app space and then the name of whatever you want the folder that holds your app to be after typing that first line you can hit return and you'll see an output in your terminal that's more or less similar to this you can see at the very bottom it says we suggest that you begin by changing into your directory that you just created if you didn't choose my dash app as your folder name then obviously choose whatever your folder name is and once you're in that directory you can run npm start so you can see on my machine i did that i went cd into my app and then i ran npm start sometimes this command can take a little bit of time to get everything up and running but once you do you should see something that looks like this in your terminal if you remember back when i showed you how to run react locally just using those cdns and the vs code extension called live server well now we're essentially replacing that you won't need to click anything in your vs code using live server but instead you're running your development environment through the terminal in fact after you run this command and it says compiled successfully it will probably open a browser window for you and direct you to localhost colon 3000 automatically and when that opens you'll probably see the default create react app screen which looks something like this so where exactly does this screen come from with the react logo well this is a boilerplate version of the create react app code that is automatically built in this new react app that has been spun up for you if you really just want to start from scratch what i recommend doing is just taking all of the files in the source folder you can see i've highlighted them all here in my vs code and just deleting them and then you can just start from scratch the same way we have been so far by creating an index.js file and writing the code that we're used to writing one thing to note here is that you don't need to create your own index.html that is being handled inside of this public folder and of course i recommend poking around the code just to better understand exactly what's going on but you'll see that inside that public folder there's an index.html file that has a div with the id of root in it so inside the new index.js file that you create you can already select that element by the idea of root when you're using reactdom.render and it's a bit small in this screenshot but you can see that it's rendering an h1 that just says hello create react app and in the browser that popped up automatically on localhost 3000 it updated automatically for me now usually any changes that you make to your code when you hit save it will automatically refresh your browser every now and then i found that that becomes a little disconnected and you just have to go to your browser and hit refresh but either way it should update your browser to reflect what you have written in the code and that's it you're all set now as we continue to go through this course here on scrimba i still highly recommend that you do the challenges i give you right here inside of the scrimba environment one of the huge benefits of scrimba is that the environment is already interactive and it's already set up for you and so the barrier to getting your hands on the keyboard typing the code practicing react is very low so although you now know how to set up a local environment please don't feel like you need to do that every time you're going to do one of the challenges that i give you because honestly in this course we're not practicing how to set up react apps we're practicing how to write react and build cool applications with react but now you have the knowledge you need if you feel like jumping away from what we're doing in the course and just practicing your own thing and being creative being curious and building whatever you want to build without necessarily having to deal with the scrimba environment and then of course when the time comes to deploy your projects to a real website well you're gonna have to have something local on your machine that you can push up to github and to whatever host you're pushing it to okay sorry that was such a long aside let's jump right back into the course and continue to learn i am coming to you from the future because you can see in the background we have our react facts static site almost completely built out but there's an issue for anyone who is going to be using create react app to follow along with some of the projects that we will work on and namely those issues are when we need to load css styles and when we need to load images in create react app in scrimba this will just kind of work out of the box but if you're using create react app to follow along you might notice that well your site's going to look something like this not only are the styles missing but also our image link is broken fortunately these are relatively easy fixes you can go to the react docs to check out this adding images fonts and files it also has a link to dealing with css in there as well you can actually click on the screenshot to go straight there but i'm going to show you what this looks like in vs code so if you are using create react app it's generally recommended that you put your styles inside of your source folder there's much more indepth ways to also organize your styles on a per component basis but for now we're just going to assume you have one globalstyle.css and that's going to live again inside the source directory and the webpack instance that's running create react app behind the scenes is using something called style loader that allows you to just import these styles directly into your index js this might seem a little weird to just be importing a string that represents a css file but webpack is set up behind the scenes to make this work fine the main issue is that when you build your project it's going to build in a way that doesn't have a ton of different files and folders inside your source directory instead webpack is going to bundle everything up into essentially into one giant javascript file and that javascript file is going to live near index.html and essentially in the end you'll have an index.html and index.css and an index.js files that's nothing that you have to do manually it's just going to happen behind the scenes for you i think that will make more sense when we look at fixing our image issues but right now by simply importing our style.css we get our react fax site back to an almost perfect condition you can still see that our logo icon in the upper left is broken so loading images we do something relatively similar in the code behind me here you'll see that we have a navbar component and in that we are able to set the source directly equal to a string that has a path to the image that we need to exist in the navbar however because this path is relative to where the navbar.js file currently lives this is going to break when things get bundled up into that one giant index.js file like i mentioned so anytime you have an image that you want to include on your site you will likely want to put your images inside the source directory and then instead of hard coding the path directly into our image source we're first going to import our image from that path that's relative to where the navbar.js file lives and we import it with some kind of name we can call it whatever we want i've chosen react logo in this case and then once we've done that we simply replace our source with react logo that way when create react app is bundling up this project it essentially has a reference to where that image file exists relative to the current file and it can create a better absolute path when everything gets bundled up so that there isn't a broken link between your component and the image that you're trying to use and once we do that we have our logo back and running and everything else about this page is looking good now there is another way to solve this problem and that is to put your styles and your images inside of the public folder instead of inside of the source folder however this is sort of gently advised against if you go to the documentation there's a whole page dedicated to using the public folder but if you read carefully it says there's a lot of benefits to not using the public folder but if you really need to you can and here's how you can click the screenshot here to go read more about that if you'd like okay hopefully that answers some of your questions if you've been trying to follow along with create react app on your local machine if not and you're just working here in scrumba you essentially don't need to know any of this until it comes time to start using create react app on your own machine but either way it's good information to know because eventually you won't be just working here in the scrimba environment with that said let's go back in time and we'll jump right into this project one thing that i really like to do when i'm starting a new project especially if i have the design right in front of me like we do here is to make a sort of mental outline of the elements on the page and how i'm going to lay this project out all that really helps me do is to make a sort of mental model of how i'm going to create everything on the page this can be especially helpful when you're thinking about layout and how you're going to place certain elements in the right spot on the page especially when you start thinking in terms of using flexbox or grid to do that kind of layout so as a first sort of mini challenge what i want you to do is pause the screencast and look at this page try to determine what kind of elements you would use what kinds of css layouts you might use fortunately this project has a fairly simple layout but i still think that it's something that will be helpful for you to practice so pause the screencast and try to imagine what elements you would use and how you would lay them out for this project there's certainly more than one way to lay out any given page but the way that i see this is having two primary sections the top section which is sort of a nav bar and the bottom section which is sort of the main content inside that nav bar we have a little react logo the react facts logo text up here and then a little blurb about what project this is in this course already i can start to see that i'm probably going to choose to lay this out with flexbox because that's a really easy way to make sure everything's in a nice neat line and with flexbox all i need to do to push this text all the way to the right is to give an auto margin to my react fax text here or rather a margin right of auto so that it pushes this react course project 1 text all the way to the right side of my navigation bar then down below it looks like i just have an h1 and an unordered list with some list items so with this kind of mental outline i can start putting together what the actual elements will look like on the page i usually end up creating some kind of container div so we'll call it a div with the class of container and this will just surround my whole page and then we have our main two sections that nav bar which we saw at the top and the main section inside the navbar we had a couple elements like the image and then maybe let's call the react facts text and h3 and this react course project one and h4 and then in the main section there was our h1 and an unordered list with some list items inside now in terms of react this can be a really helpful exercise because i can start to see that i will probably have two main components first a custom nav component which will house my nav element with its children elements and second a main custom component which will house my h1 and my unordered list with the list items in terms of those nested items like the image and h3 those are going to be simple enough that they won't need their own custom react component and then i would take my custom nav component and my custom main component and probably collect them together in one more custom component which i usually end up calling app and that will be what renders my div with the class of container and then that app component since it contains all the elements on my project will then be rendered with reactdom.render so i hope this has been a helpful exercise for you at least to see the way that i usually like to break down my projects if it's a layout that's fairly basic like this i usually will just kind of think about it ahead of time without actually writing it down or putting a bunch of dotted squares around the elements or anything like that but once you've practiced this enough times a simple layout like this might take you a total of maybe 10 seconds to think through but in the end could end up saving you a lot of time so now it's time for us to get your hands on the keyboard we're going to have a series of challenges which will help you be the one that actually builds out this project hey there i'm jumping in at this point to let you know that i've created a very quick figma tutorial throughout this course and many others here on scrumba we're going to be providing you with a figma design file and i do think you'll find figma fairly intuitive but i thought it would be a good idea to just record a quick tutorial to help you along the first thing you'll have to do is go over to figma.com and create a new account and as i was signing up for a second account just to kind of test this process i realized that there's actually a lot of steps so i figured i would walk you through it first you're going to click sign up you'll obviously either sign up with google or you can provide an email and password i believe if you provide an email and password it will have you go verify your email so it'll send you an email to verify once you've done that and you come back it will have you choose which kind of plan you want figma has a really generous free tier so i would just start for free you'll click that button down there when it asks you to tell you about your team you can at this point honestly just say skip this step and then when it says what would you like to do first i just think it's easiest to say i'll explore by myself and when you do that it's going to drop you into the figma interface now from that point on i've actually recorded a whole tutorial using the figma program that is now over on the scrimba youtube channel so at this point you're going to continue on to youtube by clicking on the screenshot here which will take you to the video that i recorded and hopefully that quick introduction to figma will really help make things easier for you as you use figma as a part of your scrimba coursework so click on the screenshot you see here head over to youtube when you've watched that video and you're done you can close that window come back here to scrumba and continue on in this course let's start by getting some of the projects set up out of the way i've written some stepbystep instructions here in the challenge it is going to be a little bit more involved because we're creating everything completely from scratch or almost completely from scratch so your challenge is to create a components folder and this components folder is going to have two files in it the navbar.js file and the main.js file for now they should just render an h1 that says something like navbar goes here in main section here then i want you to create an app component which will be outside of the components folder and have the app component render the navbar and main components that you just created then inside of this file the index.js you will import the app component and then use reactdom.render to render that the last step is to go and get the enter google font specifically with the weights of 400 600 and 700. once you've selected those font weights you should see a series of link tags that you can use to put inside of our index.html make sure to put them above style.css so that we can reference them in style.css and if you haven't used google fonts before this one might take a little bit of extra research outside of scrimba here to learn more about but i know that you can do it fortunately google fonts makes it relatively easy just know that you can ignore the at import or any npm options it talks about for installing this font remember we're not dealing with any kind of styling right now so by the end of this challenge you'll just have a basic white page that just shows nav bar here and main section here or something like that so pause now and work on this challenge okay let's just go one step at a time we'll first create a new folder called components and inside components we can create a new file for main.js and navbar.js as always we will import react from react and we will export default our navbar function our navbar component and for now this is just going to return an h1 that let's have it say navbar component then our main.js is going to be almost identical we'll just copy this paste it in instead of navbar component we'll say main component and we'll call this element the main element okay i'll hit save this is just going to bring up my preview window but that's still empty so i need to create a new file called app.js and inside of app.js again we'll import react from react we'll also import our navbar component from dot slash components slash navbar and we'll do the same thing for main so i'll just duplicate that line and change navbar to main then this app component we will export directly here with export default function app and we will just have this return well we want our nav bar to be in here so we'll say navbar and we want our main component to be in here but i want you to think for a second what's wrong with the way that i've done this we can see there's a syntax error so what's wrong with the way that i've set this up inside of components we can only return a single element that element can have children elements but right now we're trying to have two sort of sidebyside components so what we need to do is wrap those in some kind of container like a div so i'll move this div around and indent those if you remember from the last screencast we talked about how this would probably just be set up as a container so we'll give it a class name of container we're not going to deal with any styling now but i might as well add that class name since i know i'm going to need it okay let's go check out our challenge and see where we are so far so i created a components folder i created the navbar and main components already i created my app component which is rendering the navbar and main components so here we are let's import and render the app component here i will import app from dot slash app oh and i am going to be using some jsx syntax so i also need to import react from react and in our index.js i will also be using react dom so i need to import react dom from react dom and then i'll use react dom dot render to render my app component which i just imported and we're going to put it inside of the element with the id of root so we'll use document.getelementbyid root and let's hit save and see if we get our elements showing up on the page awesome navbar component main component just like we expected okay so that completes this part of the challenge and then the last thing was to go to google fonts to get the interfont hopefully this wasn't too terribly tricky going to google fonts will give you a couple link elements so i'm just going into my index.html and above my style.css i will just paste in those link elements you can see that we have this preconnect to google fonts this one to g static but then this one is for our actual fonts here you can see the font family is enter and it shows our weights of 400 600 and 700 there again i'm putting this above my style.css so that inside of my style.css i can reference the font family of enter and my browser will have already read these other link tags to know exactly what the inter font is okay let's go back here and we have finished everything from this challenge i'll just do a little bit of cleanup now we did just cover a lot of ground however every step that we did here was something that you should have already been able to do maybe with exception to the google fonts if you've never dealt with google fonts before so if you did find yourself struggling to get some of this basic setup done that might be a good signal to you that it's time to go back and restudy and especially repractice some of the past challenges that we've done instead of just kind of plowing ahead in this course the reason for that is because i'm essentially going to assume that you understood how this works from here on and the last thing that i would want for you as you're learning react is to just continue on without actually having learned some of these basic setup principles okay let's jump into maybe something a little more fun and that is adding some actual styling and elements to our project but before we move on i wanted to give you one more opportunity to access the figma design file we talked about this much earlier in this section but since it's been a while i figured this would be a good reminder if you click on the screenshot here it will take you to the figma file where you can get access to the design elements for this like the colors the spacing the fonts and everything like that when you click on this link it will take you to a shared version of this however if you'd like you can avoid seeing everyone else's cursors and selections by clicking on the little arrow at the top and choosing to duplicate this to your drafts that'll make it so that you aren't seeing everyone else's cursors and selections but also so that you can make changes to it if you'd like okay let's do it let's jump right in and start working on the navbar portion of our project okay this is the fun part we're actually going to make our navigation bar look the way that it looks in the design a couple pieces of advice i highly recommend you reference the figma file that contains all of the fonts colors spacing and everything instead of just looking at this quick reference that i've put here but this is meant to be just a quick reference for you if you need it another thing is i have added a couple of base styles to our styles.css i ran into some problems trying to record this without putting my box sizing and just because it helps a lot i'm going to remove the margin on the body especially to make our navigation bar go all the way to the edges also notice that i have included the react icon small image here inside of the images folder you can see that's part of the design up here in the upper left so without further ado pause the screencast and make the navigation bar look as close to our design as you can alright let's do this instead of rendering an h1 i'm going to open this up and render a nav element because this is a navigation bar and inside of there we know we have an image we'll give it its source while we're here i have to use dot dot slash images because i'm inside of the components folder when i'm here in the nav bar and it's react icon small dot png let's just refresh and see if that's working okay cool and let's call this maybe an h3 i guess and maybe this in h4 it really doesn't matter because well you could just give it a class name and call it a paragraph but i'll just call it an h3 and h4 this one says react fact and this one says react course dash project one okay refresh that and we've got our elements on the screen now we talked about earlier how the navbar will probably be a flexbox container so i think because i'm only going to have one nav element on my screen i'm just going to style the element nav if you want you could always give it a class name as well i'm going to put display flex we'll say align items in the center from the design we can find that the background color is this color here it also looks like it has about 30 pixels of padding on the top and bottom and 25 pixels of padding on the left and right and we can also see from the design that it has a height of about 90 pixels okay so it doesn't look like our top and bottom margin is applying and i suspect that's either because our image is a little bit too large or i think maybe more likely because our h3 and h4 here have some top and bottom margin by default so i think i might just select the h3 directly inside of the nav let's say margin is zero and then let's see if that also works for the h4 okay it might be that the image is just a little too large let's take a look at the image and it looks like from the design it's got a height of about 30 pixels okay so maybe our padding is doing fine and it was just that the image was a little bit large while we're here dealing with the image i'm going to give it a margin right just to bump it away from the text there a little bit we'll say i think the design shows it's about 7 pixels that looks pretty good and let's go ahead and use the margin right of auto on our h3 just to bump that h4 all the way to the right side cool alright well while we're working on that we can go ahead and give the color to our react facts so we'll say the color is this color from the design okay that does it for the color let's get the fonts right and actually i think all of the fonts on this page are enter so i'm just going to change that in the body we'll say enter and then i think a backup of sans serif makes sense let me just comment this out yeah okay so that's making a difference so awesome our google fonts are coming through just fine i can also see from the design that the react facts logo words there have a font weight of 700 so we'll bold those up a little bit or maybe that's the default doesn't look like it's making much of a difference and then let's do the same thing for our h4 it has this color from the design and it looks like it has a font weight of 600 okay that's making a slight difference so that's good and it kind of looks to me like react facts maybe needs to be a little bit bigger and yeah i can see from the design that it has a font size of something around 22 pixels okay that's looking awesome now when i can avoid it i usually don't love to style things with their native components if i don't have to maybe just for practice sake i'm going to go into my nav bar and i'll start providing some class names here so let's give a class name to everything on the page let's go class name equals and then up here maybe i'll use something kind of like bem syntax i'll say this is part of the nav block and the element is the icon and then we'll say this is the nav block and the element is the it's kind of like the logo text and this one is part of the nav and let's call it the maybe like the title of our project here and what's nice about that is i don't have to do these kind of nested selectors anymore my h3 was nav logo text and i can also select my nav title and change these other selectors as well and oh one thing i've learned about scrimba is i have to make sure i save this when i change my class names before i come to the css otherwise the css updates live but the markup does not so once i hit refresh there that kind of put everything back the way it was awesome this is a really excellent start frankly most of what we did here was just css instead of actually doing react but my goal with this course is not just to focus entirely on react i want to synthesize some of the information you have been learning so far including revisiting the css and markup and stuff like that as much as we can frankly in this first section of the course we aren't doing much of the detailed side of react we mostly have just learned some of the very basic syntax but i think it's important for us to kind of remind ourselves of the past information we've learned by practicing it here so the next thing we're going to do is fill out the body section here or the main section here there's a couple of gotchas with this that we're going to actually address later but whenever you feel good about everything we've done here in this challenge then let's move on to the next one okay let's work on this main section here i do want you to skip two aspects of the design right now we're not going to worry about changing the colors of these bullets and we're not going to worry yet about adding this logo over here to the right everything else though is fair game for this exercise so pause the screencast and work on this task all right let's go ahead and make this into a main element this is another semantic html element and it represents the main section of our app here so we will call it that and it looks like it really only has two elements in it it's got this h1 and an unordered list with five list items so that should be relatively straightforward and it says fun facts about react we have our unordered list and i'm going to hit option shift down to create copies of those so i don't have to type them out manually every time and then i will actually go ahead and just copy and paste the text from the figma file so you don't need to sit and watch me do that all right let me move this over just a tiny bit and let's hit refresh okay that's a good start let's get some of the design aspects going here i've got my main element and i think i feel okay styling that as the main element because i will probably only have one well i know that i'll only have one and we will give it a background color which we can go ahead and grab from the figma file okay and well this highlights some issues here now i haven't set up my body or my main element to be a full height and it looks like maybe the collapsing margin i'm guessing this h1 has a margin on top which is causing this whole section to collapse down below so let's give first of all the main section a height of let's try a hundred percent yeah sometimes that doesn't work maybe if i give my body a height of 100 view height and let me refresh this well okay you know what i think this is highlighting another problem that i was planning on addressing later so for now what i'm going to do is actually move this background color to the body so that it does cover everything okay and that'll be a good enough start we'll fix this a little bit later but it did highlight the fact that what we had here is our main section is not taking up the entire body here in a couple of screencasts from now we'll see why that's a problem but for now i'm just going to put my background color on the body okay and i probably actually don't need this height of 100 right now we'll come back to that later oh however i do want to give it some padding and it looks like from the design i have about 55 pixels it says 57 we'll just go ahead with 57 on the top and bottom and then about 27 pixels on the left and right and well you know what i think that margin this looks a little too much i'm gonna guess that the margin of my h1 here is a little bit high let me just check that if i set this to margin zero yeah that normalizes it a little bit more so instead of selecting all h1s let's go here and give this a class name and similar to the last one i'll say this is the main block and it's the title element and that way i can be a little more specific about which h1 i want and again i need to refresh this in order for that class name to apply and awesome okay the sizing is looking good let's get our color correct now our h1 here also has a font size of about 39 pixels and everything else needs to be white maybe i'll just color the entire section here yeah that'll work okay awesome well now that i have removed the margin from my title it looks like my unordered list is bumping a little bit close to my title rather than giving my title a margin bottom to push it down i personally prefer to have elements push themselves away from other elements if that makes any sense and when i see this i think of the unordered list as being too close to the h1 as opposed to the other way around that might not make any sense that's just how my mind is working i'm going to give my unordered list a class name let's say this is main dash dash we'll say facts and we will select our main facts and i'll give it a margin top of it looks like the design says 46 pixels okay now actually i just looked at the figma file and noticed that our title actually has a slight change to the letter spacing so i'm just going to copy and paste that here and yeah that compresses our h1 a little bit actually quite a bit so we will go ahead and leave that there sometimes these rules like this are really easy to overlook if you aren't looking closely in the figma design something that's really nice is i can actually just copy all of the rules if i need to and paste them here and then i can decide which ones are actually making a difference or are necessary now i already have that one i can just comment these out this one's technically making a slight difference i'm not terribly worried about it the font size we already specified font weight of bold is already the default font style of normal and so forth i can get rid of some of these as well but we can see this one actually did make quite a bit of a difference so it's good that we put it in there okay now these are really close together so i'm going to select all of the list items under main facts i'm doing this just so i don't have to give a class name to every single li or give the same class name to every single list item there and actually let's go ahead and do the same thing i did before i'm just going to copy some of these font styles that we have inside of figma and see if any of them made a difference i don't need that that's not making a difference that's already the default that's already the default uh that makes a tiny difference maybe i'll leave it in there it did separate them a little bit i'm guessing however i'm going to have to apply some padding to these so let's give a little bit of padding there's a relatively new css property called padding block that allows me to only specify the padding on the top and bottom in one go let's start with 10 pixels and see how that looks and yeah that looks fairly accurate another thing i'm noticing is that the text is actually wrapping around here and mine is not it's going all the way to the right this probably isn't much of a problem if i did want to fix that i could probably just apply a max width on my list items that way it's not taking up the entire left to right maybe something like 400 pixels and yeah that seems to wrap it a little bit and awesome this is a great start we're only missing two minor things we're going to change these colors of these bullets to be the same color as our logo up here and we're also going to add this little react logo over here to the right however both of these have a little bit of a gotcha to them so i thought it would be good to do them each as a separate assignment and that is what we're going to cover next originally my plan was to give you a challenge to color the bullets and make them just a little bit larger like we have in the design however as i was researching this i came across a relatively new css property or rather pseudo selector that makes this challenge extremely easy so just this once you can sit back and relax i'm going to show you just how easy this is there's a little bit of a gotcha with it but i included a slide here that shows you the mdn docs for the marker pseudo element and believe it or not this very specifically selects the bullets on list items and even look at this example it's changing the color and it's making it a little bit larger with its font size that's exactly what we want to do you can click this slide to go check out the docs poke around these allowable properties and of course you should probably play with this a little bit but fortunately this is a really easy thing for us to implement i'm just going to copy this and add my pseudo element selector for marker one thing to keep in mind is that this is not accepted by all browsers however safari firefox and newer versions of chrome have all adopted the marker pseudo element selector and i'm certain as time passes this is going to become even more widely accepted and therefore i feel pretty confident using this method for accomplishing this task so simply enough i can change the font size to let's say something like 1.4 rem and sure enough that made our bullets a little bit larger now as i was playing with this i noticed that if we get too large let's say three rem things become pretty misaligned and at least at this time when i was researching i could not find a good way to realign these bullets with the text so in my playing around i found that 1.4 made the bullets larger without getting them misaligned with the text so for now we have that limitation i'm just going to work within that and say the font size is 1.4 rim it's not quite as large as what we have here but that's okay and then again simply enough i'm just gonna go take the color of our text here this is the blue color that we want and stick it right here as our color and sure enough we have the blue color on the bullets easy peasy well i hope you didn't become too comfortable letting me do all the work because in the next screencast we are going to add this logo and by we i of course mean you in a challenge so that's what we'll do in the next screencast i actually debated a little bit whether or not i should include this as a real challenge for this section only because it touches on some css that you may not be super familiar with but in the end i settled on remembering that you guys are capable and you can use google to your advantage just like a real developer so here it is i decided to add it in your challenge is to place that gray react logo in the background we have that logo here under images as react icon large.png something important to know about this icon is that it is actually half of the react logo it looks from the design like maybe it's a full react logo that's just bleeding off the page but if you look closely once you put this react icon large on your actual page you'll notice that it's only half of a logo at first that threw me off that just had to do with the way that i exported it from figma honestly i think it makes our job a lot easier as we're placing it on the page so just keep that in mind as you move forward one last little piece of advice i'll give you is to add this background image to the main element it probably would work just fine to add it to the entire body element but i'm going to be doing it to maine so you might as well do it to the main element as well again google is a developer's best friend so don't be afraid to use google while you're trying to solve this challenge pause now and work on adding this background image okay hopefully you found this wasn't actually that big of a deal so i'm going to add first the background image to my main element here i'm going to use the url function so i can specify the location for these images this is relative to my style.css file so i'm going to say dot slash images slash react icon large.png okay and we see that it automatically is repeating around the entire page so that's where the background repeat comes in and we want to say no repeat of course here by default it puts it in the upper left of our page or rather the main element and this is where background position comes in now background position is actually a combination of background position x and background position y in fact let's start out there we can say background position x that's my position to the left and right i want to push it all the way to the right this is where having half of a logo becomes pretty handy for us because it automatically looks like it's bleeding off the side of the page and then with background position y we can specify something like top which is where it is now or bottom bottom i think is a touch too low although center is maybe a touch too high i can also use percentages so we can split the difference and say something like 75 and now that we've seen these as two separate properties i actually can just combine these and say background position which is background position x and then i'll use a space and then y of 75 percent and that simplifies it a bit if i really wanted to i could use the shorthand background property which would be background and then i would just copy and paste this one first space this one space this one honestly i always forget what the background property is short for so i'm actually going to leave these as three separate properties so that in the future it's really easy for me to remember what each of those pieces means and awesome this represents a combination of everything that we've learned so far about react let me go ahead and clean up this challenge now of course we've been spending a bit of time in css land here and as i've mentioned i still think that's a really important thing to do even though our main focus in this course is to learn react it's really important to synthesize some of that other information that you have learned in the past so that it doesn't become stale to you and you just forget it that being said in the next screencast let's spend some time looking back at everything that we did learn about react because that's actually what we're here to learn and at the same time we'll take that opportunity to have a quick quiz and to look at a selfassessment project that you can do on your own so that's what we'll be doing next you've done a great job so far in this course before you just plow ahead to the next section it's time for a solo project this is meant to be a chance for you to flex your new react skills that you've been learning about so far in this section but this time without the training wheels and there's going to be a few of these throughout this react course and these projects serve a really important purpose they're meant to be a tool for you to gauge whether you are actually ready to keep moving forward in the curriculum or not unlike the challenges that i usually give you i won't be walking you through a solution to this one instead i'm going to be asking you to sort of go out on your own to build this project that said you're not actually completely on your own we've got a thriving community here on scrimba that's very willing to give feedback on your code we'll talk more about that in just a minute but first i want you to keep in mind that no one here is giving you a grade for these projects like they would if you were in school one of my personal objectives is to shift people's understanding of how learning occurs in school we're trained to complete the project for the grade but here you're completing the project to test yourself and to practice so skipping one of these solo projects will really only deprive you of the best chance you have to test out your skills and to really help you decide if you grasp the concepts that we've been learning so far okay with that guilt trip behind us let's actually take a look at what we're building for this project you're going to be building a digital business card everything here is static and you can see there's actually two different designs that you can choose from in fact if you click the screenshot it will send you to the figma design file you'll see that there's actually more designs including a light mode version of these designs and what you can do is just choose the one you like the best and build that one when you get to that design file make sure to click the little arrow at the top and choose to duplicate to your drafts and as far as actually coding the project goes i recommend that you just build your project here in scrimba on this screencast if you look in the very lower right you'll see a menu with three dots if you click that there's an option to fork this screencast to a new scrim doing that will make a duplicate of this project that you will have in your own account so that you don't have to worry about losing your work you can see i really didn't give you a whole lot to work with here we have a very basic html file that has our div with the id of root an empty index.js file some very basic styles and the two dependencies that you'll need to get react setup okay let's come back to the requirements of this project first of all i want you to be building this project from scratch which is why i'm not giving you any starter code at all next and probably pretty obvious i want you to fill in your own information for the digital business card here and while you're building it i want you to make separate components for the info section which is what i'm calling this whole top half up here the about section which is really just this header and a paragraph the interest section which is another header and paragraph and a footer section which has the social icons while you're working on this solo project make sure to share your work in fact you don't even need to wait until you're completely finished with the project you can be asking for code reviews and help all along the way if you click the discord icon here it will open the scrimba discord server specifically to a channel called i built this but in reality you can share your project in any of the channels that make sense to do so in and then for anyone who is learning in public and likes to use twitter you can click this twitter icon which will open twitter and prepopulate a new tweet where you can include a link to your project so that you can share it to the world okay i wish you the best of luck and i'm looking forward to seeing everyone's projects awesome job building some of your first react projects i know that these are just static sites and so far you're really not seeing the benefits of using react to build these kinds of projects but now that we have some of the basic react syntax under our belts we're ready to start dipping our toes into a few of the really neat features that react has to offer as a framework but first let's take just a minute to recap what we've worked on so far in this section in the beginning it can be really helpful to know why we even care about react in the first place we learned about how it is composable and declarative what those terms mean and how that's beneficial to us as web developers then we learned about the jsx syntax and how that allows us to write code that's much more familiar to us because it looks like we're writing html code inside of our javascript then we saw how we could actually apply the composable nature of react by creating our own custom components for example in our react fax site we created our own components for the main content of our page but also for our navigation bar obviously in this case our navigation bar and our main sections are pretty simple but hopefully you can imagine as your sites get more and more complex how the ability to segment each of the pieces of your page into its own components can be a really beneficial thing and soon we'll be really tapping into the power that comes with that as we learn more about react then we started learning about how we can style our projects because well obviously adding css is one of the key things that we need to make it look polished truthfully there are a ton of ways to add styling to react for now we'll just be sticking with css classes because they're familiar and all of these things combined have enabled us to create our own static pages in react like i mentioned because we've only been working on static things so far you might not yet be understanding why we're using react in the first place but i promise we're gonna get there and i promise it will be worth it before just moving on you should celebrate your wins over in discord there is a today i did channel if you click on the screenshot here it will take you there and you should let everyone know that you have just completed the first section of the introduction to react also this might be a good time to realize if you've been sitting down for too long or watching too much of this in one sitting make sure you take a break your brain needs to rejuvenate itself especially with all the new information you've been learning so once again congratulations on completing this section you really should be proud of yourself when you're ready to jump deeper into react i will see you in the next section now that we've covered the basic syntax and concepts of building a static page in react we're now ready to jump into the next phase which is learning how to use data to create our web pages in regular html and in the react code that we've done so far all of the content that we're displaying on the page has been hard coded directly into the react components and it turns out this has some major limitations which we'll be discussing in this section first let's look at the project that we just made this little react facts page all of the data on this page was actually hardcoded directly into the components themselves but now let's look at this section's project which is a clone of the airbnb experiences page up near the top we have some elements that are likely just hardcoded pieces of data however when you get toward the bottom and you have a list of different experiences you can probably imagine that there isn't a developer sitting around waiting for a new experience to become available on the airbnb website and then immediately going into the code and updating this list to include that new experience instead the data that's living in airbnb's database is what will be driving the list that we see here and once you start thinking in terms of components on a page that are actually being driven or displayed based on the data that underlies the page you'll start to see the same architecture existing all over the web basically any ecommerce site or page that has any kind of list on it is probably not using anything hardcoded into the code of the page but instead is using the data that lives behind it to drive the content that exists on the page if that's confusing at all don't worry we're going to dive into the specifics and see exactly what i'm talking about just like before you can click on the screenshot you see here to go to the figma design file for this sections project and also just like before when you get there you'll see a screen that looks similar to this i'd highly recommend that you click on the drop down arrow near the top go down to duplicate to your drafts and choose this option to create an editable copy that will live in your own drafts instead of trying to use the one that is shared amongst everyone coming to this page once you click duplicate to your drafts you should see a little modal at the bottom that pops up that says that the file was duplicated to your drafts which also includes a quick button that you can click to go directly there and by the way you can click any of these little screenshots to go to this design file as well so let's see what we're going to be learning the first thing that we'll be diving into is a concept called props in react props is one of the major topics in react that will help you create reusable and composable react components and so we'll be spending a pretty good amount of time covering the concept and the syntax of props and the other major topic we'll be covering in this section is how to create react components from an array of data this is what will allow us to create those designs like in our airbnb design here where we have a list of items that we won't need to manually update anytime the data behind it changes now before we jump into some of those more crucial topics in react the first thing we're going to do is spend a bit of time creating the top half of our project here and i'm going to say something that might shock a few of you and that is that if you already feel very confident in doing styling in react like we did in the last few screencasts of the last section i'm going to give you permission to skip the next few screencasts where we talk about designing the nav bar at the top and designing this hero section up here now this isn't a free pass to just skip those sections if you feel at all like you need additional practice using styling and react i highly recommend you do not skip those practices however i did just want to warn you ahead of time that we will be spending a bit of time working on some of those design aspects before we jump into the main topics for this section so again click on the screenshot here to open it in figma create a copy in your own drafts and then let's jump right in we're going to start off this section as mostly a review of what we learned in the last section which was how to create our own custom components the way that we'll be reviewing that is by first building the top section of this project which is really just static elements you can see up at the top we have a little navigation bar well it's not even a navigation bar it doesn't lead anywhere but we'll call it a nav bar and that's what we'll be working on in this first challenge after this we'll build this little photo grid and the text down here and those will be two separate components a navbar component and what we'll call a hero component you can click on the screenshot you see here at any time to be sent to the figma file in order to look for the design specifics and because we already hammered it in in the first section i'm not going to have you build this completely from scratch so let me walk you through what we have so far in index.js we're simply importing app and rendering app our app component is well basically as simple of a component as it could possibly be at this time and this is also where your challenge is to build the navbar component i've also included the airbnb logo image as well as the photo grid image which we'll get to in the next challenge but in this challenge the airbnb logo is this little airbnb logo in the navigation bar that you'll be working on now the last couple things you'll notice is that i have the styling about as basic as it can be at this time and i've also already imported the poppins google font that you'll notice is used in the design file as such when you're setting the font family you can just say popins but in this screencast i don't think you need that yeah this nav bar doesn't have any text it just has the image okay let's go pause the screencast and build out our navbar component i think what i'll do even though this isn't going to be a particularly large application i'm going to add a new folder called components and that is where i will put my new navbar js component in navbar i'm going to import react from react and export default my navbar function i'm going to use the semantic nav element here and the only thing we really have in here is an image so i'll use the image element and i'll provide the source which will be dot dot slash images since i'm now inside of a components folder slash airbnb dash logo.png okay we have our component built obviously this image is not sized correctly so as soon as we get it displaying it's going to look a little bit funny but in our app.js let's go ahead and import our nav bar from dot slash nav bar or actually it's dot slash components slash nav bar and then for our app component let's instead of rendering this h1 we'll put a div as our wrapper for the elements we put here and we will render our navbar okay again i bet our logo is pretty huge yeah that's much larger than we expect but that's okay because now we can turn to the css in order to style this because this app will be pretty limited in size and i'm only going to have one nav element i'm just going to directly style the nav element i can see from the design that it has a height of 70 pixels and of course that's not going to stop our image necessarily from expanding beyond the borders of that nav however in order to center that logo and get it over there on the left and everything i think i would like to just make this a display flex i think that's also going to yep our logo will be confined within the flexbox because now it's a flex item and it's automatically resized to fit within its boundaries if i add a little bit of background let's just do something temporary we'll say background color is blue that lets me see exactly what i'm working within and i bet if we just add some padding we will get to resize that airbnb logo a little bit smaller let's give it about 20 pixels on the top and bottom oh that's already looking a lot better and we'll say maybe 36 pixels on the left and right that'll just bump it a little further to the right then if we look on the design we can see that there's actually a box shadow on the bottom of this nav bar it kind of helps separate it from the rest of the body this isn't always a perfect way to go but you can actually just copy that css directly from figma and paste it you can see when it was designed it might not have been perfect we have some weird decimal values here but for now i'm not going to be too concerned about that it's a little difficult to see with our blue background so let's get rid of our blue background and awesome we can see that's looking pretty good one kind of strange bug i noticed when i was practicing this earlier is that on a safari browser this airbnb logo will sometimes stretch the entire width for some reason of this navbar so before i move on i'm going to go to my nav bar and give a class name to my image here let's call it nav dash dash logo and i'll hit save so that we can style that in our css we will select nav dash dash logo and if i give it something like a max width of 100 pixels that fixes the problem in safari awesome this is a great start to our app in the next screencast we'll pick up with another challenge and complete the hero section which is right below and that will conclude the review at which point we can move on to the topics for this section the next part of this review is for us to now build our hero component that includes the photo grid this h1 and this paragraph to make things easy for the photo grid i exported all of these photos as a single png so you don't have to worry about laying out these images in a really cool way like this just as before you can click this screenshot to go to the figma design file for the specifics the font being used is that poppins font that we're pulling in through google fonts so you can set the font family to poppins from a design perspective you might also notice that this image grid is centered in its container whereas the text is left aligned although obviously there's this padding here so your challenge is to build the hero component pause the screencast and work on this challenge i'll work backwards this time i'm going to duplicate my navbar line that i'm importing and change this to hero even though this component doesn't exist yet we'll do the same down here and render a hero i'm not going to hit save because that's going to cause this to crash instead let's go ahead and create our hero js file we will import react from react and export default a hero component and first let's get our bear element set up i'm going to return maybe we'll call this a section element since it's a section of our page and we can see we have an image element an h1 element and a paragraph element so i'll include those now i'll go ahead and just paste in the text of these from the design file let's add our image source and that'll be from dot dot slash images slash photo dash grid png and just like our logo this is probably going to be a little too big for us yep if i scroll down though i can see some of this stuff popping up here that's good it's a good start i'm going to set us up for some success with the css just by giving us some class names let's give the image a class name of maybe hero photo we'll do the h1 is a class name of let's say hero dash dash header and we'll do the same for the paragraph let's call it hero dash dash text i'll hit save and then we'll go over to our styles so we can style some of these up one thing that i've liked doing in the past is if i'm going to have a section that represents an entire section of my page i just will style the entire section element or the section element directly and give it something like a padding of 20 pixels that way if in the future i want to use sections as well sections of my web page it will automatically have the padding applied similar to what we did with our nav bar i think i want to make this section a display flex but i'll have it be in a column direction that'll make it really easy for me to center this photo grid but keep these left aligned i don't want to do that on all of my sections however so i think i'll go back to my hero and i'll give this section a class name of hero and that way it's acting kind of like the hero container and let's style our hero to be display flex with a flex direction of column i have to hit save over here so that applies okay that's already looking a lot better i'm going to make this just a little bit bigger so we can see how it compares one thing i noticed when i resize that is my image is growing probably infinitely to fit this container because i'm working in a fairly small space i'm really only designing for mobile right now but i think what i want to do is give my hero photo something like a max width of it looks like in the design it's around 400 pixels and we can see doing that is making it align to the left side there so let's give this the flex item property of align self to the center okay well the only other thing i notice when i'm looking at the design is that my h1 and my paragraph are spread a little ways apart oh and they're not the correct font family quite yet so let's actually give the entire body a font family of poppins and we'll give it a backup of sans serif and let's see oh whoops not popping poppins okay and yeah that's making a difference awesome and then i'll come back down and i'm going to simply style my hero header and let's specify a bottom margin so margin bottom of it looks like it's about 16 pixels in the design and i think my paragraph might have some margin that's automatically applied i'm just going to style my hero text to have a margin top of zero okay those are sitting a little closer together a lot like the design okay i know that was a little bit lengthy to work on mostly css here but like i said i really think it's important to be synthesizing some of the past things that you've learned before they you could say atrophy or get stale and you just forget them especially as a friend and developer there's almost no way to completely escape css if you hate it and hopefully if you love it then you really enjoy these reviews so with this top half out of the way now for the rest of this section we'll be learning what we need to know in order to handle the bottom part of this app so that's what we'll start doing in the next lesson let's jump right in and start building an instance of our card component the main purpose of this exercise is to really illustrate how we're not quite yet prepared to build a series of components like we have down here so for now you're just going to build out one instance of our card there's a few things that i've done for you i've created first of all this card component so you won't have to build this from scratch and right now we're just rendering one instance of our card component you'll notice too that i moved our hero out and commented it out this just so we didn't have to keep scrolling down in our app in order to see the progress that we're making and let's go to card.js and look at our challenge your challenge is to build out the card component and for now just hard code in the data for this first one with katie zafirus for some of the notes only render one instance i already did this for you also the little star icon and the photo of katie zafirus are here in our images we have katy zafirus.png and star.png i just talk here about making sure to include all of the pieces of data that we have and again that the main purpose is to show that we have some limitations currently in our understanding of react so don't worry about the fact that you're just hard coding all of this data into the card component for now all right it's time pause the screencast and work on this challenge okay so when i look at the card component that we have in the design i think what i'll do is make one div that will surround everything in the card both the image and all of the data below i'll probably put all three of these pieces of data and this little star image into its own div so that i can use flexbox to make sure that they're all center aligned and then i'll probably just put this life lessons with katie zafirus in a paragraph and these prices here in a paragraph i may end up putting this bolded section in a little span inside of that paragraph just to make it bold if you were feeling adventurous you might have put this little badge here i'm going to ignore that badge for now we're going to cover that a bit later so let's get some of the elements on the screen here we're not going to have an h1 instead we'll surround everything with the div i think i'll go ahead and just give this a class name now of card because i already know i'm going to be styling this the very first thing i have is an image and we'll hard code in our source that's going to be in dot dot slash images slash katy zafirus.png i'm sure this is going to be a bit large as well so i'll go ahead and give this a class name we'll say car dash dash image and then like i mentioned i think these elements here we've got the star the rating the rating count and the location all here in a line so let's create a div maybe we'll call this a class name of card stats and we'll put in our image which will have the star.png as its source then i think just to get these other things in line i'll use an inline element like span so let's go ahead and create i'm going to have three spans here and remember i'm just hard coding in some data so we'll put 5.0 we had a parenthesis with a six and i might actually just put my little bullet here as well and then the location was usa i guess let's hit refresh and see where we are okay obviously some styling to handle but at least things are showing up after those stats i think we just had two more paragraphs so let's go ahead and create a couple paragraphs we have life lessons with katie zafirus and here we had from 100 was it 136 i guess it doesn't really matter per person all right let's see where we are okay well we have the elements on the screen let's start doing some styling here i'll go over to styles first i'll start off with my card and it looks like from the design that it has a width of about 175 pixels and while i'm here i'm noticing that the text of this card is a little large i think i'll just style all of that right here we're going to say font size of it looks like it's about 12 pixels okay that's starting to look better i had my card image which is looking a little large and in fact the image is spanning outside of the boundaries of the card so if i add a width of a hundred percent yeah that's much better and from the design it looks like we also have a bit of a border radius looks like maybe nine pixels awesome the image is looking good then we have this div that contained our image and our three spans i think we called that card stats and like i mentioned we're gonna make that display flex and use align items to the center okay and my star is looking pretty huge compared to the other things i can't remember if we added a class name to the star not yet let's go ahead and add a class name and maybe we'll call it card dash dash star then i'll hit refresh somewhere so we can see those styles right away card star looks like the height is about 14 pixels okay that's looking a lot more manageable in the design the review count of six here and the location are both in gray i think what i'll do is actually just create a bare gray clasp that isn't specific only to this card just because it seems like something i might want to do with a few other elements so i will give both of these spans a class name of gray and then since that's a little bit more of a generic style i think i might move it up maybe just right here below the nav we'll create a gray class and we'll just say that the color is the kind of grayish color from the design so i just copied and pasted that straight from figma i need to go and refresh here okay we have a bit of a light gray tint there the only other thing i think i might do is change this to bold right now that seems like another thing i might want to do elsewhere if i just want to bold this text i suppose i could surround it in a b tag or a strong tag i think i'm going to actually surround it with a span so that i can style that span and just do that in line we'll surround the from 136 dollars we'll give that a class name i think again i'll make this generic we'll just say bold and in my styles.css we'll add a bold class that sets the font weight to bold and let me hit save over here awesome let's give ourselves a little more room okay this is certainly looking good enough for now hopefully as you were building this you could start to see some of the limitations that we have with the way that we built it especially by hardcoding all of this data directly into the card component so in the next screencast let's start talking about what the problem is with the way we currently have this and that will set us up perfectly to learn the solution to this problem i assume many of you watching the last screencast were thinking to yourselves okay i'm creating this card component but because i'm hard coding the data in it's not going to be reusable i've updated the google slide to show you maybe a more realistic version of the design that we're looking for because we're not just going to have the same experience with all of the same data inside these kinds of repeated components are found everywhere online and if you just start looking for them you will see them everywhere i pulled up screenshots from some of the first designs i could think of in amazon every component or every product is going to have a repeated element here's imdb that has something that looks relatively similar to what we're doing and here's apple which has different product components which really just have an image and a title image title image title and you can imagine that when a new movie comes out to put on imdb there isn't a developer out there that is actually typing in new html or copy and pasting the html that they already created and then just changing out some of the data but instead these components are actually data driven on imdb for example all they need to do is add a new movie to their database which includes things like the cover image the rating the title and so forth and then the website will automatically update to include a new movie in its list here we're going to cover the data aspect later but for now the main problem we have is that our component is so hardcoded that we can't really reuse it in any meaningful way and in react this is where the concept of props comes into play now in my years of teaching react i have found that props can be one of the more difficult subjects for students to grasp and so what i plan on doing is taking the topic and just spreading it a little bit thin over a few different screencasts and you'll get your hands on the keyboard and get to really practice with it so that you can understand the concept of props so let's jump right in and get started let's start by understanding the basic concept of props and react what you see here is just a plain index.html file we haven't introduced anything dealing with react in this i want you to take a close look at the elements that you see here and see if you can figure out what's wrong with them let's start with the anchor tag an a tag an anchor tag is intended to link you to another place but currently we don't have an attribute like the href specified without an href this link is essentially useless we need the href property in order for us to send someone to another page maybe like google.com similarly the image element is basically useless without any kind of source property we need to add this source attribute or property in order to specify exactly what image will be here we could put the path to a local file or we could put the address of a file that's hosted somewhere on the internet input is interesting because i think on its own it actually will yeah it actually will put an input box that we could type into if we wanted to however there are attributes or properties that we can add to the input that will make it a lot more let's say beefed up or capable for example i can add a placeholder that says something like first name and that suddenly makes the first name text appear inside of my element on the page or there's ones that have even more consequence to them like the type property if i change the type of this input to something totally different like submit now it changes from an input text box to a button similarly i could change it to radio and it completely changes the visual look of this input these are concepts that i'm sure you're already very familiar with let's look at a similar parallel example in javascript here i've written a function that's called add two numbers together and it just hard returns one and two think for a second what is wrong with this function it's syntactically correct but what's wrong with the function like this well it's very very limited in its capabilities right now if i call add two numbers together it will always return three essentially it's a useless function now you might already see where i'm going with this if i add some parameters like let's say a and b to this function now i can dynamically add and return the result or rather the sum of the two numbers that i pass in and with the small addition of these two parameters that i've added i now have sort of beefed up this function in a way that it's capable of adding whatever two numbers i want not just the hardcoded one and two that used to be there again these concepts should be familiar to you by now but this is just a primer for us to understand the concept of props in react in both of these instances in javascript and html we can see that passing additional information to our maybe elements or in this case functions allows us to reuse these elements or functions in multiple different ways so with that primer under our belts let's look at another conceptual parallel that is a little more visual let's try to understand props with a little bit more of a visual example this is a screenshot taken from youtube and as you spend more and more time with a framework like react you will begin to see these patterns of elements on the page that are repeated pretty much everywhere on the internet for example if you look here you'll see that there are multiple components being displayed here but all of them have essentially the exact same structure they each have an image toward the top that takes up about half of the height of the component each of them has bolded text that represents the title there's the view count showing the number of days ago that it was published there's even little time stamps embedded inside of the image in the lower right and as i've mentioned before there certainly isn't a developer at youtube that every single time a video is posted to youtube they go in copy the code from an old tile and paste it in again so that it can exist on the site instead a developer has created a single component maybe let's call it a video tile component and has made that component flexible enough to take in as a property the image and the title the view count the number of days ago it was posted who posted it the time stamp and so forth and as you become more experienced and react and you start to see these patterns for yourself you'll begin to realize that they can be nested inside of each other for example not only do we have repeated video tile elements here but we have something that let's suppose is called a video list each one of these is made up as a parentchild relationship of video tiles even small things like on the left side of the page you can see that these are probably individual components that are taking in properties to help them display something slightly different in this case it's probably just two elements there's an image and there's some text so that's probably enough of the conceptual i think you're starting to understand the concept now let's go back to react and we'll start looking at how this is actually applied in code before we can continue on with props we need to take a quick aside to talk about something we've learned how our components will be returning jsx which is a special syntax of javascript or rather it's something that's created by react and allows us to write our react code in a very declarative way however one of the most common things that you'll find yourself doing is trying to insert values from javascript inside of your jsx right now we just have some text inside of our h1 but let's assume we had a value like first name maybe this is joe and a last name let's say shmo think for a second how would you change our h1 to no longer say hello world but instead to say hello joe shmoe well we can probably see ahead of time that just trying to input first name last name or maybe even adding a space in there as if this were regular javascript isn't really going to work if i do this i'm going to get the literal text of first name plus last name interpreted as the text content of my h1 fortunately react has made it really simple to interpret something as javascript instead of text when it's inside of a jsx element and that is by simply surrounding it with a single set of curly braces almost like it were an object so at this point before i even hit save i'm going to give you a quick challenge simply enough i want you to finish off the h1 that we have here so that it says hello joe schmo and actually let's put an exclamation point in there for a good measure pause the screencast and do this challenge well if i hit save we'll see that it interprets the joe correctly instead of saying first name it's now taking the value of our first name javascript variable and inserting it here and then of course the rest of this text is still there if i were just to surround last name then i would get a little bit closer but i still have my plus and my quotation marks so at this point i can just get rid of those put a space in between my two values hit save and there we go hello joe schmoe the way i like to think of this is that as soon as i start seeing jsx the interpreter sort of goes into jsx mode anything after this greater than symbol is going to start being considered the text content or in the case of having nested elements other jsx elements and we're currently in what you could call jsx land however as soon as we see this opening curly brace we switch back into our javascript mode or javascript land and then anything inside of my set of curly braces will be considered javascript once i get to this closing curly brace i'm now back into jsx which is why i have an actual space in the text between my first name and my last name then it sees my curly brace again so i'm back in javascript land the closing curly brace tells me i'm done with javascript i get the exclamation point as part of my actual text and then i close off my jsx tag now once i enter javascript land i can actually do more than just take in values from my javascript up above in fact anything that i put inside of my curly braces can be run as javascript code let me clean up this challenge really quick something that's important to note is that anything i put inside of my curly braces will be run as regular javascript code so i'm not limited to just pulling in values like this for example i could do something like say i have a new date which is a new date object and then change this to something like it is currently about and then run some javascript code inside of my curly braces saying date dot get hours and then let's say we want to do a modulo 12 so that we get the am pm hours or rather like on a 12 hour clock i hit save and there we go it's currently about three maybe i say o'clock and that's because for me when i'm recording this it's currently 3 21 pm and in fact i wouldn't even necessarily need to create my date outside of here i could say new date dot get hours and i'm going to get the same result even without doing it out here because anything that i put inside these curly braces will be run as regular javascript now personally i think it's a lot more readable to do the actual javascript outside of my return value in my jsx so if i were doing this in the real world i'd probably say something like const hours equals date dot get hours modulo 12 and then inside of my render down here all i'm doing is putting hours and of course we get the same result that way one thing that's nice about doing it this way is you can sort of separate the logic that your component is running with the display that your component needs to show on the screen so for example let's say i wanted to say depending on the time of day good morning good afternoon or good night well i could do all of my logic up here to determine what should display after the word good for example i want it to say good afternoon because for me right now it's afternoon i could do something like this and i'll probably speed this up so it doesn't take up too much time all i've done really is created a changeable variable let time of day and then said if the current hours is less than 12 it's morning if it's between 12 and 17 then it's afternoon and otherwise it's considered night i probably should make something for evening because 5 o'clock p.m seems a little bit early to say goodnight to someone but whatever so here's another mini challenge for you okay your challenge is simply to fix the h1 below to use the time of day string that we determined in the code above pause the screencast and work on this challenge simply enough all we really need to do is remove the hardcoded afternoon put a set of curly braces and then say time of day now of course because it is afternoon for me this will still say afternoon i suppose i could just trick this maybe a change just to say if it's between 12 and 1 then we consider it afternoon but otherwise it's good night i should be able to hit refresh and sure enough it says goodnight i'm going to change that back so that's not so weird okay with that concept we are primed to now jump back into props and to see what the syntax of props actually looks like to help guide us through learning the syntax of using props and react we're going to look at this little contact book that i created here as you can see in our app component everything is hard coded each one of these divs which i separated with a little space in between each one represents one of the contact cards but of course all of the data is hard coded inside which means if i ever needed to make a change especially to something like the styling i'm going to have to make that change to every instance of this contact card that we see here before we can really talk about props though we have a challenge for you and that challenge is to create a separate component called contact which as the challenge shows will be in a different file and then i just want you to choose one of the contacts that we have here to move into that file essentially you can just copy and paste one of these contacts over into your contact component then once you've moved one of these contacts over to the contact component i want you to import the contact component and render four instances of it here inside our app component while you're working on that part of the challenge i want you to think ahead what's going to be the problem with doing it this way okay pause the screencast and work on this challenge okay so i'll create a new file called contact.js and in contact.js we'll import react from react we'll export default our function contact and for now we're just going to copy and paste one of the contacts let's choose mr wiskerson here okay that should have been easy enough inside of app we will then import contact from our contact file and then instead of completely deleting all of these because i think i want access to this data i'm going to actually move them down outside of my component and then just comment them out that way i still have access to them but they're out of the way and now i'm going to render four instances of my contact component if you didn't make it this far or you didn't take the chance to think ahead what's going to be wrong with doing it this way i want you to think now what's going to be wrong when i create four instances of this contact component well if i hit save we get for mr whiskerson's and as much as we left mr whiskerson we still need the data from our other contacts here in our contact book why exactly is this happening well when we copied one of the contacts and pasted it over we pasted the data with it just like a function let's say add two numbers that takes no parameters and simply returns a hardcoded amount in this case one plus two every time we call this function it will always give us the same result in the same way our contact card has that data embedded inside of it or hard coded in it and therefore it's going to show up every time we make an instance of that component now similar to how we instead will usually pass some parameters to a function which make it more flexible and reusable i can say return a plus b and now suddenly i have an infinite number of possibilities with this function because all i need to do when i'm calling it is pass in the real values that i want this function to use we can do essentially the exact same thing in react the remainder of this screencast is going to be focused on how we pass data into our contact component and in the next screencast we're going to look at how we can consume that data from our contact component so that we get back to a working state where we have four different contacts in our contact book let me delete this function we'll go back to app.js and focus here on our instances of the contact component just like we talked about how html allows us to pass attributes which can alter the behavior of the element react chose to do things in a very similar way however in html where we are limited to using only the attributes that are allowed for any given element for example i couldn't pass a whatever i want attribute to a link tag because that's not defined in the html spec with react because this is a custom component i can pass in any property or attribute that i want we have four pieces of data in each one of our contact cards that we need to pass down to our instances of the contact component so to do that i can add an image prop or let's call it img this image prop can be the value of the path to the image so i'll go ahead and copy that from mr wiskerson here again in the next lesson we'll be learning how to actually consume these properties that we're passing in but for now we're just going to be dedicated to adding these properties to the context component on our instances now the upcoming challenge might be something that you decide you really hate me for giving to you i'm going to do one more of these props and then i will update our challenge to give you a chance to practice typing out your own props to each one of these contact cards i'm going to put this on its own line because i already know i'm going to be adding a bunch of these the next piece of data that i'll need in each one of my components is a name so let's choose to call it name i'll come down here and just copy mr whiskerson's name and pass it in and this is the point at which i'll update this challenge for you okay once again i promise i'm not doing this to be mean but i do want you to do a little bit of busy work mostly just to get your hands on the keyboard and start practicing what it's like to add your own props to this contact component remember we get to decide what we call these props we could call this whatever we want but of course that's going to be more confusing so i'll stick with name the other two pieces of data we still need to pass down are the phone number and the email so finish up the first contact first by adding a phone and email prop and then i want you to fill out all the data for the remaining three contacts with the image name phone and email props all of the data of course can still be found here so you'll have a bit of copying and pasting to do pause the screencast and add the rest of our props to our contacts okay hopefully that wasn't too painful for you and hopefully you got a good sense of what it's like to add props to react components i'll finish up this first contact together and then i'll probably skip over the rest so let's add a phone prop here i can just come down and copy mr wiskerson's phone number and we'll add an email prop as well and we'll copy this as well now i'm going to go ahead and finish up these contacts but i'll skip over that so you don't have to watch me monotonously copying and pasting the data from below okay that wasn't so bad was it at this point i can come down and get rid of this old version that we have here just to clean things up a little bit i'll also clean up our challenge and at this point you probably can see that things are a lot more organized sure we still have a good number of lines of code here but the data is the primary focus we can see exactly what data we're passing into our contact component and then our contact component contains the specific display logic on how the data should be used of course at this point we haven't made any changes to the contact component so if i hit refresh what do you think will happen well hitting refresh won't change anything we're still going to have four instances of mr wiskerson because essentially what we have now is a function like our add to numbers that takes parameters a and b but still is returning hardcoded data so even if we call add two numbers or let's say yeah let's call this numbers and we pass in 5 and 10. it doesn't really matter at this point that we're passing in 5 and 10 because the body of the function is still returning hard coded numbers so in the next screencast let's see how we can make use of the properties that will be passed into this component so we can get back to a place where we have our four different instances of our contact card in the last lesson we learned about how to pass values into our components using a very similar syntax that we're already used to with attributes in html in react we don't call these attributes we actually call them properties or usually for short just props unfortunately it's very easy to get the data that we're passing into our components inside of our component itself right here just like a function that takes parameters i'm going to put the word props in truth i could call this whatever i want in fact i'll show you exactly what happens i'm going to console.log what we called whatever and let me make a little room here open the console and hit save now four things got logged to the console i want you to think for a second why did it console log four times a console logged four times because i have four contact instances every time react rendered one of my contacts it ran the console log line inside of the code of that component and if you look closely you'll see that we have four properties in that console let me copy one of them out here so i can actually reference it we got four properties here if i clean these up each onto their own line you can see that what we received what we're calling whatever is an object that has properties that match exactly with what we put here as our prop inside of the component here let's see what happens if i maybe change img to something like the whole word of image again i can change these to whatever i want them to be so now when i hit save if you look down below the first item is receiving an object that now has an image property all spelled out whereas all the other ones are still receiving an img property anyway i don't want to go down that rabbit hole too much so let's come up here and change whatever to props because props is what you'll usually be calling this and at this point i want you to pause the screencast and see if you can figure out how to use this object that has all of the properties we want to update our component this one's going to take some critical thinking but i want you to really think through it see if you can figure out how to essentially make it so that our components are not for instances of mr wiskerson but rather have the correct data and images displaying here let me type that out as a real challenge okay there's your challenge pause the screencast and see if you can make it so that essentially we finish this little contact book where each one is its own separate contact pause now and work on this challenge well if props is an object and i can access the values of that object by using props dot for example name props dot image then all i really should have to do is update this hard coded data for example the name here to curly braces props dot name of course if i didn't put the curly braces in there it would literally interpret the text props.name and then all of the names would say props.name when i surround it with curly braces awesome my names are changing obviously nothing else has changed so let's go ahead and do the rest i'll start with these easy ones we'll get props dot phone and props dot email okay the phone and email are coming through correctly now the image this one may have been a little bit trickier for you but simply all i'd have to do is erase the entire source including the quotation marks and put my javascript here because the value that's coming in through props.image or img is already a string it's going to fill in the string value for my source i hit save and there's all of my values ah but here's a bug i introduced this when i was teaching the concept hopefully this is a good chance for you to do some debugging if you didn't i want you to see if you can figure out why the picture for mr wiskerson is not coming in pause the screencast and try to fix this bug well right here for our image source we're assuming that we're receiving a prop called img back in app.js however i did change this to image so i'll change this back to img hit save and now the photo for mr wiskerson is coming in just fine now i hope i'm not belaboring the point understanding props is one of the most crucial things that you can do in react when you're learning so yes we've spent a lot of time covering props however you will use props every single day of your rehacked life so this is a really big milestone if you feel like you've understood everything in react that we've talked about so far you should really congratulate yourself pat yourself on the back and probably at this point take a little break don't try to bite off too much more than you can chew and i do want to show you a little cool trick that we can do with our props here in the next screencast okay it's time to give you a prop quiz sorry i couldn't help myself like before your task is to read through each of these questions to actually click into the editor and type down your answers don't forget in scrimba if you have any changes that you make to the code you can always save it as a note so that you have access to it later you can even record your own voice talking over the top of the note if you wanted to keep an audio note and all of those are saved here in your account on scrimba so pause now answer the questions through this quiz and then you can hit play and we'll go through the quiz together number one what do props help us accomplish well just like parameters being passed into a function props being passed into a component help us make that component more reusable as you become more and more experienced in react you'll realize that there are times when it makes a lot of sense to pass props into a component so that it's reusable and other times when it might be possible to pass props into a component but it's just not always necessary i can't tell you how much time i have spent trying to create a component that's very reusable and then ended up only using it one maybe two times that's just one of those things that will come with experience as you write more and more react code remember when we pass props into a component it could be data that actually gets displayed as a part of that component or it could sort of be like metadata that you're passing into the component that in a way configures it to act a certain way either way it helps us make any component that we create more reusable so that we can keep our code as dry as possible okay so number two how do you pass a prop into a component in the same way that you pass attributes to html elements like a source attribute for an image you essentially do the same thing when you're passing props to a component so if i have my own component like let's say my awesome header i'm using a strange name just to make it very clear that this is a custom one you can pass a prop of your own choosing like maybe title into that component that brings us to number three can i pass a custom prop like for example blah blah blah to a native dom element so for example a div with the lowercase d well the answer is no so we come to the next part why not and that's because under the hood when react sees a regular html element that we're trying to render we express that element through the jsx syntax and that jsx syntax actually returns an object and the object describes the actual dom node that should be created when we add an attribute to a regular dom element like a lowercase d div the object that this jsx creates is expecting to be able to add this property to the dom element and since dom elements don't have an attribute called blah blah blah i can't just choose the props that i want to add to native dom elements like this div so let me try typing out a summary of that so the answer is no because the jsx that we use to describe those native dom elements we want react to create will eventually be turned into real dom elements and real dom elements don't have whatever properties let's say properties or attributes specified in the html specification which as we all know doesn't include properties like blah blah blah okay i think we understand that concept how do i receive props in a component simply enough the parameters to that component function will receive a value called props which of course we could name whatever we want but by very strong convention will be props and that leads us to the last question which is what data type is props in the component when i receive it this parameter which we're calling props is an object which means if i want to access the properties of that object i use dot syntax so props dot whatever the prop was that i passed in let's use blah blah blah because that's what we said before okay awesome job on that quiz if you struggled with any of these questions of course don't hesitate to go back and review the things that we've recently learned and when you're ready let's move on at this point in the course you should be somewhat familiar with the concept of object destructuring however just in case we'll do a quick recap say i have an object called person in es6 and later i can destructure the properties of that object in order to get simpler to use variable names for example if i wanted to log person.phone i obviously could just use console.log person.phone and everything would work just fine however in certain circumstances it can be nice to destructure this object and pull out the property names for your own use that looks kind of like this i might say const and then i'll use an object syntax say image comma name and then set that equal to person my object what that does is it declares two new variables img and name which i can then use in order to say console.log the name if i open the console you can see i'm getting mr wiskerson here so that's the concept of object destructuring the reason i bring that up is that it's a fairly common thing to do this in react with the incoming props that you receive the parameter that you put inside of your component will be an object that represents all of the props that your component received so what i could decide to do is just destructure that object immediately as i receive it inside of my function here which means that i could say curly braces image name phone and email it's important to note that i can't rename this to something else like image unless i do a little bit of trickery using colons like image colon image but we're not going to be too concerned about that for now the point being i don't get to change the name of the prop while i'm bringing it in i need to make sure that it's exactly as the prop was being passed in at the time that the component was being rendered if i decide to destructure my object like this then i will need to change some of my code here you can see if i refresh suddenly i get an error that says props is not defined so let me give you a challenge to fix it okay your challenge is to fix our bug now that we've destructured the props object pause the screencast and work on this challenge well by destructuring our props we're essentially declaring four new variables up here image name phone and email so instead of props dot image i can just reference image and name and phone and email i hit save and everything should be back to normal yep there we go the main reason i wanted to show this is just because you will certainly run into react code that either has the full object of props written here or very commonly the destructured object which pulls out each of the individual components or rather properties of the props object frankly you can write it either way in my own personal experience i've experimented with both ways and in the end i found it a little bit easier in my opinion to put the props object here and then reference props dot image and name and so forth the only reason being if i decide to declare other variables inside of my component let's say right here it becomes less apparent which variables came in as props and which ones were declared inside of my component so that's my reasoning for usually sticking to putting the whole props object it does cause a little bit more of the clutter here by having props dot everywhere but honestly that's okay with me whichever way you choose just try to be consistent with it there certainly are other things that we will learn about props as we go forward but now it's time for you to get your hands on the keyboard and start practicing the things that we've learned about props well it's been a minute since we've started a new react app totally from scratch so one last time i promise the last time i'm gonna make you do this i want you to set up a react app completely from scratch i guess as a reminder scrimba is doing a little bit of magic for us when we pull in these dependencies it's setting up our react app basically for us but i just mean in the coding part i want you to get a little more practice on doing that from scratch you can read through the challenge for the specifics on what you're supposed to do there's also some extra credit down here that would be worth looking into if you're interested and if you were able to do this top part all by yourself and although i would like you to include your own favorite jokes and maybe share it on twitter or in discord i did include some jokes for you to use just in case you didn't have any jokes on hand that you knew of so pause the screencast and work on this challenge since we've done this a number of times i am going to move through this fairly quickly so i'm going to import react from react and import react dom from react dom we're going to use react dom to render an app component which i haven't yet created but will in just a second and we'll render it to that div with the id of root i'll also import an app component which isn't yet created so i will create a new file called app.js inside of app.js again i'll import react from react anytime we need jsx in our code then i'm going to import react and i will export my component for now i'll just do a quick sanity check we'll do an h1 that says hi okay good we're showing up on the screen you might notice too i included some basic styling i changed the font just to switch things up a little bit okay and then it says to have the app component render four or five joke components so i will kind of work backwards we'll have this return a div that surrounds our five joke components and those don't exist so first i need to import them from a file called joke and then i need to actually create that file so in joke js again import react from react export default our joke component okay we'll have this return a little sanity check h1 for us joke here hit save okay our five joke components are being rendered correctly and showing up on the screen now if you did struggle at any point in just this part of the setup i really recommend that you just go back spend the additional time you need to revisit what we've talked about so far everything here should not be confusing at this point in the course and if it is it's okay you just probably should go back and revisit some of the stuff that we've learned already okay now comes the practice for actually using our props we know that we need a setup prop and i actually copied these already so i'm just going to paste in the setups for these jokes and then we have a punch line now i can tell that my punch line is going to make each of these a little bit too long so while i'm here i'm going to put these on their own lines okay and then i have all the punch lines copied as well now think for a second i haven't hit save yet think for a second what is going to change if anything on my screen here you said nothing's going to change then you're right and that's because i am passing props in but my component is not making use of them at all so let's do that i'm going to receive the props just for giggles let's take a look at what console logs when i console log these props we see we get five instances of the props object so really quick question if i typed console.log one time how come i'm getting five console logs well just like any function whenever i run it it will run this console log and in our case because we have five instances of a joke component it's running this joke function five times now because props is an object i can access the setup and the punch line through dot syntax i can say props dot setup and prop stop punch line let's make this not an h1 but a div and i don't know let's make these h3s maybe and i'll separate each one with a little horizontal rule now here's another check for you if you weren't able to get to this point i want you to think now how am i going to actually make my setup and my punch line display on the screen in fact you can pause here and actually make that happen well i can't just say props dot setup because of course that will make it literally put the text props dot set up on the screen to insert our javascript value inside of my jsx i just need to wrap it in curly braces i'll do the same thing here we'll say props dot punch line and i need to make sure i spell that right and let's hit save and awesome we get everything showing up now one thing i just thought of i might want to change this to something like a paragraph just to change the boldness between these two or give it a little bit of contrast between the setup and the punch line and i think that that hits all of the points from our original challenge here go ahead and delete this now we come to the extra credit and if you were able to complete this extra credit then you're pretty far ahead because we haven't yet taught things like conditional rendering but i did think that i would just give you a little sneak peek on it so here's an example of one of my favorite jokes that's just a oneliner here over in app.js i'm going to create another instance of a joke and i'll put it at the top so we can see it more readily now in this case there really isn't a setup for this one it's just a punch line so what's going to happen if i just include a punch line well we can see that i really don't have anything being rendered up above here however if we did go into the dev tools we would see that up above this paragraph there's actually an empty h3 sitting up here honestly it's not that big of a deal the way we currently have things set up but what if i went to my joke and instead of just putting the setup and the punch line i said something like setup colon and punchline colon now when i hit refresh we can see that well it's a little bit broken here again this isn't something that we've taught so i didn't necessarily expect you to fully grasp this concept quite yet but as an advanced sneak peek into conditional rendering something that i can do is actually only render this h3 if props dot setup exists one really concise way that we're going to learn about is to surround my jsx in curly braces which means that i'm putting it inside of a javascript interpretation and then i can say props dot setup and this h3 we're going to learn about how a lot of the neat little tricks that we can do with react are just using vanilla javascript principles and this is a good example of that this is saying that if props dot setup is a truthy value then render the thing on the right side of my and operator here if it's a falsie value however it won't render anything at all so i can hit save and it will look very similar to the way that it looked before again we're going to talk more in depth about that it doesn't need to make perfect sense quite yet and one of the cool things about this is we could decide to do it in another way for example what if instead of conditionally rendering it this way i decided to say well the style of this h3 is that it has a display of none when props dot setup does not exist well i could do that with something like a ternary i could say the display if props dot setup does exist then i want it to be block but otherwise i want it to be none obviously this is a much more convoluted way than what we just saw but it essentially accomplishes the same thing the point is we can use those props and vanilla javascript principles like a ternary operator or this more concise and operator to accomplish our goals i'm hoping this was a helpful practice i'm really looking forward to seeing people's best jokes and when you're ready there's still one more little thing we're gonna learn about props before we can finally take all of this and apply it to our section project okay i'm sorry that we're still here on the jokes but i realize there's one more thing we need to cover before we jump back into our section project and that is how can we pass a prop that is not just a string the concept of props like we talked about is very similar to the concept of attributes in html and with html we always pass in a string as our data type here however we are not limited by that in react so far we've only done strings however because this is javascript it's react which is javascript we can pass in any javascript data type to our components as props so i want you to think critically here how might you pass in a prop that wasn't a string data type let's say for example you want a number passed to each one of these jokes that eventually will represent the number of upvotes and down votes for this joke or maybe you want to pass in an array of comment objects and then you might say i want to allow people to filter out the puns or only show the puns in my jokes in which case i might pass a prop called is pun which is the value true or false not the string true or false but the actual boolean value true or false accomplishing this uses something that you've already learned at this point and so i want you to try and think critically see if you can figure out how you would pass in a nonstring value as the prop to your component and be curious with it play with it actually give it a try don't just think about it pause here and see if you can figure that out we learned previously that we can jump back and forth between javascript and jsx by using curly braces and the same thing works with our props for example these three jokes here are all puns so if i wanted to indicate that i could say is pun equals and then jump into javascript and send in a boolean value like true and then i can do the same thing for these others and then of course for the ones that are not puns i can change this to the javascript value boolean value of false and then do the same thing for my jokes up here up top actually i'm struggling now to think if this joke is a pun or not this might be a pun because it's talking about puns anyway you get the point by introducing these curly brackets i can put any javascript value in here so again if i wanted to pass in a number i could say upvotes is 10 down votes is two and if i had an array of comments i could say comments equals and then this can get as complicated as i want i can say an array of objects and maybe those objects have an author property and it's got some author id and then the body of the comment itself and then maybe there's even a title to the comment and whatnot of course it's an array so it could be multiples of those and so forth i can even put javascript expressions in here to determine what the value being passed into the props should be that's getting a little bit more advanced than i want to jump into now but the point is these curly braces essentially give us free reign to throw any javascript we want inside of the curly braces and whatever that javascript expression resolves to is the value that the prop will pass down to our component so let me fix my syntax error here and go over to my joke component and let's just console.log props dot is pun and you'll see we get a bunch of boolean values i could even do props props.comments.title and actually that's going to cause an error because i didn't pass a comments prop to all of them but let's do props.comments and we'll see we get a bunch of undefineds but one of them has an array of objects so i think you get the point that's going to help us as we go back to our airbnb experiences clone so that's what we're finally going to jump back into now okay we're finally back to our airbnb experiences clone your challenge is to pass these props that i've outlined here into our card component and then inside of our card component receive those props and make use of them as a little bit of a hint and a heads up there's a couple instances that we're not passing in strings or strings that we are passing in that we need to slightly modify in order for them to work i guess so that's not too cryptic the image that we're passing in here you'll notice is only the title of the image file it doesn't include any path to the image itself the astute of you might know that what we're doing here still is requiring us to hard code data into our component and in the real world that's not what we're going to do however we haven't quite gotten there yet in an upcoming lesson very soon we're going to see a way that this would actually be structured a little more realistically but i want to get your hands on the keyboard practicing like i always say so work on this challenge until you can show our card component looking essentially exactly the way it is now but without the hardcoded data inside of the card itself pause here and start on that okay i already know that i'm going to have too many props to put on one line so i'm just going to start them on the next line and we'll set the image equal to this string i'm going to copy and paste these just so i don't make a fool of myself making a typing error the rating is going to be 5.0 now this is a string right now i suppose if we were ever planning on doing math on this rating then it might be sensible to change it into a floating point number here by surrounding it with curly braces like that i'm not going to be too concerned about it at this point the review count maybe just for good measure and because i didn't put quotes around the six up here i'll send in a number the country will say usa mostly because katie zafirus is from the usa for the title we'll once again copy this and the price i'm going to send in as a number we'll say 136. in this case i don't think it makes a huge difference because i'm not going to be doing any math on this number probably but what the heck just for good practice okay i can clean up this challenge but i do need to now go to my card component and the very first thing i should do is actually receive props here and maybe just so i'm not flipping back and forth between the files to see which props i sent in i'm going to console log the props so that i can see them down in my console and that will give me a chance to actually look at the properties that i sent in now right away we run into a little bit of a challenge like i mentioned we're only passing in the file name and extension we're not passing in the whole path but i can't just do string concatenation like saying dot dot slash images slash and then plus my props dot image because this plus is not going to make sense now i could do that by surrounding this entire thing here in curly braces but i'm going to make use of the es6 templating string syntax with these back ticks and that way i can put my dollar sign curly braces now this is probably starting to get confusing inside of a template string i can insert values by using dollar sign curly braces and that's where my props dot image will go however i can't just put back ticks surrounding everything here because that doesn't make sense in jsx now this is the tricky part if i surround the backticks because they are a javascript expression in curly braces then suddenly this expression makes sense i think this is probably the trickiest part of this challenge i'm hoping it didn't frustrate anyone too much but i totally understand if it did because it's a confusing back and forth remember up here we're in javascript then we jump into jsx then with the curly braces we jump back into javascript and that's why i can use my backticks inside of javascript and inside template strings i can use the dollar sign curly braces to insert javascript values into this string i think it's called interpolation i end my backtick and then i get out of javascript and i jump back into jsx hopefully you could follow all that i understand if that's confusing the rest of this should be really pretty straightforward my rating is right here instead of putting a hardcoded 5.0 i can put my curly braces props.rating instead of my six and i'm actually going to just put in my curly braces inside of my parentheses here i'm going to put props dot review count again the parentheses is still part of jsx and therefore will be interpreted as text the curly brace gets me into javascript which is why i can then put my javascript value and then i get out of javascript and i have my second parentheses to surround it my country i can put props.country in this paragraph we'll put props dot title and right here for the number i'm going to leave the dollar sign because i still want that to exist however the price that i'm passing in is just the number 136 so i will put props dot price okay moment of truth let me get us a little extra working room here i'll hit refresh and awesome everything looks like it is still working the same now it does kind of look like we don't have this space showing up after our dot but we won't be too concerned about that right now okay last thing i'm going to clean up my console log up here and excellent we now have a reusable component as long as every time i create an instance of my card i pass in these props i should be able to get different cards showing up in my list really great work if you were able to follow along with this entire lesson i really hope that this has been helpful and hopefully you are just as excited as i am to learn this because this is giving us more tools in our tool belt more power for us to create really awesome web applications in react we obviously have a lot more to learn but really at this point you should be really excited for everything that you've learned especially if you're understanding it if you are feeling lost of course as always go back revisit these and ask lots of questions in discord coming up we're going to be addressing that issue where currently we are still hard coding this data into our code here and so that's the next topic we're going to tackle this is a total spoiler alert into what we're about to learn with react and that is how to use the dot map method to take regular javascript data and turn it into jsx elements that react can render so i figured at this point it would be a great opportunity to revisit the map method just in case it's been a while since you've used it or especially if you've never really understood it in the first place if you fall into that ladder group then i highly recommend you go check out the mdn docs on map look through the examples play with the code and work with it until you at least grasp a basic understanding of the syntax for it because you should already know map by now i'm going to assume that that's the case and we're going to work through these challenges instead of having you do all of the challenges right away at once i'm going to let you do challenge number one and then we'll go over it together and then i'll have you do challenge two we'll go over it together and then challenge three we'll go over it together so of course we'll start at the beginning with challenge one pause the screencast and work on this challenge so as a refresher map is a method on every array because i've declared nums to be an array nums has a method called dot map dot map is a higher order method which means that it takes a function as its main parameter this is a great example of a method that is declarative because under the hood dot map is going to handle the regular for loop for us and all we need to do is provide a function that the map method can use to run on every single item inside of the array whatever we return from this function as part of our return here is what will get placed in the same index in a brand new array and in the end nums.map is going to return a new array so i need to save that array in a variable we'll say const squared equals the array that gets returned from numstopmap an important part of this is that the function i provide to dot map is going to receive each of the items in the array one at a time as dot map loops over the array for us and runs this function so if i were to for example console.log item i would see that i get each of the original items in the array and they each show up on their own line because this console log is running five separate times so all we have to do is simply return item squared i could use the math library or i could just say item times item and now if i console log squared i should get this array which was my original goal and sure enough there it is okay that was just to get our feet wet this next one has a little bit extra challenge includes potentially some string methods but again it's just a regular javascript challenge pause the screencast and work on challenge number two okay just like before we'll create a variable to hold our destination array or our returned array let's call it uppercase and we'll get that by using names.map now above i used a function declaration like this but this time i'm going to use an arrow function just to simplify my code a little bit it's essentially the same i can open it up and use return i'll fix this later for anybody that's yelling at me that i can simplify this even more and inside my function i'm going to be receiving an item now i could call it item or i think a little more intuitively i'll call it a name in fact usually i would call this item probably num or number let's call it num just to kind of clean that up make it obvious what we're working with now with the name what i want to return is the first letter capitalized in that string now i'll be totally honest string methods are not something i usually just have memorized i usually end up looking them up i'm going to wing this and see how it works essentially what i'm trying to return is the first index so i'll say name at the index of zero dot to uppercase that should be a string of the first letter that's now capitalized and then i'm going to add name dot i think slice will do it and i'll start at the index of one which i think will give me the rest of the name starting at index one inclusive again this is kind of a shot in the dark so we'll see how this goes console log uppercase and oh i was so close i think i just need to add my parentheses here awesome i probably could have done something like name.slice 0 comma 1 maybe and then change that to uppercase i also could have done something a little more complex like surrounding these in template strings and then using interpolation to figure that out and that might help me get rid of my plus now i'm just kind of playing around nope there's my space i don't need a space okay that to me is a lot less readable than what i had before so i'm gonna keep it this way i guess that's one of the fun things about these challenges you can try to solve it in multiple different ways okay let's clean this up i'm going to comment this out and i'll send you now to challenge number three just to clarify because we're just working in regular javascript here i'm not expecting this to work in react or jsx or anything essentially all we're doing is taking this string and then adding what looks like paragraph tags the opening and closing tags on the beginning and the end of that string of course this is leading to a point that will then take us to react pause the lesson here and start working on challenge number three okay let's say maybe const elements even though these aren't real elements and that's going to be pokemon.map i'll use my arrow function again and this time because i'm only going to be using a single parameter let's see i think pokemon is both singular and plural right maybe i'll say mon for monster because i only have a single parameter i can get rid of those parentheses and just put my arrow here and well before i simplify the rest let me actually open this up and we'll do it the way we did it before and then we'll clean it up now this time around i think it probably will be easier to use a template string so i'm going to put my paragraph text here and then inside of my paragraph text i will put my monster's name let's console.log elements make sure that this is going to look the way we expect and awesome that looks great now regarding cleaning things up because an arrow function has the ability to have an implicit return if i start that return on the same line as the arrow i can clean this up that way i can also do the same up here get rid of my explicit return make it implicit and because i only have one parameter i can get rid of those parentheses if you're still feeling hazy with arrow functions don't worry i'm kind of with you there but once you do get used to them they can really provide a nice simple syntax for you to perform operations that otherwise might take a number of lines of code that's another one of the benefits like i mentioned of having declarative methods like dot map it's handling the for loop for us we simply have to follow the rules and we get back exactly what we expect now again what we're ending with here looks like an array of html elements in fact if we were to be doing regular dom manipulation we probably could use these using the inner html method to have the browser actually turn these element strings or dom strings into real html elements on the screen but since we're not doing that and we're doing react we're going to see how we can basically use this exact same principle to take data from an array and turn it into jsx elements that get displayed on our screen there's one more really small step that i want to cover before we get there so let's cover that next i think now is probably a good time to remember that jsx just returns a regular javascript object we can see that if i were to set let's say a new variable called element equal to some jsx and we'll say just an h1 and then if i console.log element what we actually get back is just a plain old javascript object the properties and the shape of this object get determined by react in order to describe the element that react eventually will be turning into a real dom node that shows up on our screen but the reason that i mention this is because when you get deeper and deeper into web development and actually programming in general you'll discover that most arrays don't end up being an array of simple strings like we sometimes use for examples like this instead it's probably most common to find arrays end up being an array of objects let's keep this example simple we'll say it's a first name and a last name in this object that's because data is usually a lot more complicated than just what can be represented by a simple string and so we use objects to represent pieces of data in a lot more detail well there's a little special feature of react and that is that if we provide an array into what we're rendering from our component react will know how to essentially map over that array and turn it into elements let me clean some of this up and show you a little bit more what i mean let's say we create this array of colors and i'm just going to put in the colors of the rainbow of course i just got done mentioning that usually we don't have an array of strings but this is just to illustrate a point inside of my return when i'm returning the elements that i actually want to put on the page i can give react this array and let it render it to the page now i can't just say colors because then it's going to put the actual word colors on there so i'll surround it in curly braces and now essentially what it's going to do is copy this basically i could have just done this in its place so we'll take this one step at a time let's look at it this way now obviously this is not beautiful and we can tell already that it's essentially just putting these together as blank text i haven't taught react that i want these to be paragraphs or headers or ordered lists or anything like that now of course if i do want to use my variable colors up here i can essentially just put colors here and i still of course need my curly braces here when i hit save i get the same result but now i want you to do a little challenge to experiment with what will happen if you change these from strings into jsx elements okay simple enough i just want you to essentially change these strings into jsx elements and i said h3 you can do whatever element you want then i want to make sure that you hit save or refresh and see exactly how what we have currently changes when you do that pause the screencast and work on this challenge okay maybe this is getting into the realm of busy work but let me do this really quick okay let's see what happens when i hit save awesome now i actually got a list of jsx elements that are being displayed as h3s in some ways it's kind of like react took the elements here and just copied and pasted them onto the screen of course i would need to get rid of all these commas for that to work correctly but i get the same result this way but let's put it back to colors so that it works the way it's supposed to work okay now we are poised to take what we just talked about and reviewed with dot map and what we just learned about where react can render an array of jsx elements and put those concepts together which will allow us to instead of hard coding our data directly into our components like we're doing here instead we can get data from outside of our little system map over it and render a new component for every piece of data in other words in the next screencast we're going to see a jokes.js file which has essentially the same thing but in a javascript array of objects then we'll get to pull those in and map over them create an array of jsx elements and then render those to the screen so when you're feeling ready let's go forward let me walk you through a couple of changes i've made to the code that we were just looking at of course you probably noticed i moved all of our hardcoded joke components outside of our component here and just commented them out so we can still reference them i've also changed our jokes.markdown file into a jokesdata.javascript file now we're not quite ready to make api calls and then make use of the data that comes back so i'm going to be kind of mimicking that with this jokes.js file that's exporting an array of these joke objects over in our app.js i'm going to import the jokes i'll say jokes data from that file dot slash jokes data and we can see that if i console.log joke's data i should get the array of jokes okay great now combining what we just learned with dot map and with creating an array of jsx elements i can put those two concepts together what i'm going to do is create a variable let's call it joke elements and this is going to be not an array that i'm defining right now but instead the array that gets returned when i call jokesdata.map inside of my.map i'm going to take a look at each one of my joke objects and what i can return i'll do this on its own line just so we can see a little more clearly what's happening i'm going to return a joke component however i can pass the data from this individual joke object to my joke component so maybe this is a good opportunity for you to put on your thinking cap and do a quick little challenge your challenge is to see if you can pass the props to our joke component in the correct way and then of course render our joke elements array so that when you're all done all of our jokes show up on the page again pause the screencast and see if you can complete this challenge each of the joke objects that i am looking at inside of my dot map is each of these objects that we see here so they have a setup property and a punchline property which means over here i can say my joke has a setup prop and this has to be spelled exactly this way because our joke component is expecting props.setup this setup prop will be equal to and then i need to use my curly braces because i'm leaving jsx and going into javascript we'll say joke dot setup now it just so happens that i'm using the same name for the prop that i'm passing to my joke component props dot setup and the object property that i chose in my actual data set up here however it's not always going to be the case that these are the same if for example these were question instead then over in app.js i would still say setup because i'm the one that gets to choose what the prop name for my component is but then my actual data would need to change to joke dot question now a question doesn't always make sense in this case because they're not all questions but hopefully that illustrated a point and next i will need my punch line and this is going to be joke dot punch line again because the actual data has a punch line property in each of these stroke objects now i'm not quite done i can hit save nothing's going to show up on the screen and that's because i'm still returning an empty div in my app component the last thing i need is just to render my joke elements hit save and there we go we've got all of our jokes back on the page now if i clean some of this up you can see just how much simpler this makes our lives as react developers and then if i were being really stingy i could use the implicit return to just return my joke element i'm not going to worry too much about that especially because it makes it a little too wide horizontally there awesome okay we have taken a number of asides once again i'm going to bring us back to our airbnb experiences clone and we're going to take this concept and actually build these separate experiences in their own cards this time using data that we get from a file instead of hard coding things into our code make sure you have studied this and understand it before you move on and when you're ready let's jump back into our section project all right it's time for another quiz we're going to look at the dot map array method read through these questions click into the editor type down your answers and when you're ready click play and we'll go through the quiz together number one what does the map array method do and i'm referring here to javascript in general not specifically react well the arraymap method takes a function as its parameter and whatever gets returned from that function will be placed in the same index of a brand new array so maybe let's say it returns a new array and whatever gets returned from the callback function provided is placed at the same index in the new array and well yeah that's good enough theoretically speaking our callback function we could just hard code something like return the string hello and then we would have an array filled with hellos but usually what we're trying to do is take items from the original array and modify them in some way in fact maybe i'll type that down with that in mind number two asks what do we usually use dot map for in react well in web applications it's really common for us to have an array of raw data usually an array of objects and to want to turn that array of data into something that's visible on the screen so in react we'll take an array of data we'll map over it and turn each of those items into some kind of jsx element that gets put on the page so more concisely it allows us to convert an array of raw data into an array of jsx elements that can be displayed on the page and number three why is using dot map better than just creating the components manually by typing them out and putting the props in that we want using dot map in this way is a lot more dry obviously if you think in terms of something like amazon every time a new product is uploaded to amazon and amazon sells that product there isn't a developer out there who's going to go copy and paste the elements from a product and then put in different props let's say no instead the data will change and using something like dot map will automatically convert that raw data into something that gets displayed on the page one way you could put it like i wrote here is that it makes our code more selfsustaining in a way meaning that it doesn't require additional changes whenever the data also changes it makes me think of when we're typing out a c style for loop and we say something like 4 let i equal 0 and then we use i is less than some array dot length this makes it so that if the length of the array ever were to change our for loop would not require intervention instead it would automatically check the length of the array and that's what it uses in this parameter in the for loop alternatively if i just said something like i is less than 5 but i'm looking through the elements of an array that maybe now has let's say 10 elements in it my for loop is broken and it requires intervention from a programmer i think you probably understand so i'm just going to erase this for loop and leave it where it is awesome work on this quiz hopefully you were able to answer all of these questions when you're ready let's move on and start applying what we just learned to our section project i am coming to you from the future again because in the next challenge for anybody who is following along using create react app on their local machine instead of following along here in scrimba the upcoming challenge might throw you for a bit of a loop technically speaking what we're about to do is go back to the airbnb project and use a data file that includes links to the local images so that you can map over it and display those images as well as the other pieces of data and you'll see that just kind of works out of the box here in scrimba but if you're following along with create react app you'll get something that looks more or less like this obviously this is not ideal the last time that i spoke to using create react app i mentioned how it's gently advised against putting any assets inside of the public directory however this is an instance where i'm just gonna recommend that you put your images inside of your public directory i'm gonna go to the next slide this has an animated gif that might take a minute for some people to load but you can see that what it's doing is it's taking the images directory from the source folder and moving it up into the public folder the reason i'm recommending doing this is well first of all normally you're not going to have a data file that includes all of the data you need instead you would actually be getting that data from some online resource and second of all because it just magically works when you move the images to the public folder things just kind of start working again so that was just a quick heads up for anybody using create react app if you're following along here in scrimba you really don't have to worry about any of that for now okay with that said let's jump in okay it all comes down to this we are going to put all the things that we just learned together to progress our section project here with the airbnb experiences clone i've written out your task here and let me walk you through just a couple things first of all there's now a data.js file and this contains an array of the objects that represent the data that we're going to be displaying on the screen part of your task is to import that data as it mentions map over it to create our card components kind of like we have hardcoded here and then render that array in place of this card component one little change that i did make is i changed the country prop to location and i also made that change in the data here so in case you were curious about why that's changed i just decided it made more sense since we might have some online experiences and another thing is you'll notice there are some properties here that we won't yet be using like open spots or description that's okay for now just ignore those we'll decide later if we want to make use of them also as i mentioned in the note here because we haven't done styling to our group of components or anything like that yet they're going to stack on top of each other because they're block element dibs for now that's okay don't worry about them being stacked vertically we'll fix that later okay now is the time i know that you can do it you've worked hard up until this point hopefully you have studied and rewatched everything you needed to in order to understand what we're doing so let's jump right in pause the screencast and work on the challenge all right let's do this first i need to import my data and i probably will just stick with the word data as my variable name here so we'll say import data from dot slash data and maybe just before i get too far down the road i'll console log this just to make sure that i'm getting the data i think i'm getting okay yeah that looks right again as a quick reminder usually you won't be importing a hardcoded data file we'll be covering api calls and how to get data from an online source later but until we learn a couple more things we're not going to be able to do anything really except for importing our data then down in our component i don't want to erase this comment because that's my whole hero section that we commented out for space sake before let's take our data and i don't know maybe call them cards we'll say cards is equal to data.map and we'll let map look over each of those experiences maybe i'll just call it item for now and then for each item in that array i want to return well let me just copy this here because it's got all the properties that i want and then instead of having these hardcoded values i will just replace them with the values from our object so let me just make sure that i get all these properties right we have this is called cover image not image so i guess some of these might change so that's cover image again this is another instance where the data had a different property than what we chose to call our prop that we're passing into our component that's entirely okay and actually ends up being pretty common especially if you're not thrilled with the way that the data was designed oftentimes you're consuming data that someone else has put in their database and you don't get to choose these property names okay our rating let's look at our data now we have this stats property and that's where our rating is so we're going to have item dot stats dot rating and similarly with review count item.stats.reviewcount so here item.stats.rating and item.stats.reviewcount okay in the data we have location that's going to stay the same so location will just be location item dot location title i believe was item dot title and this i believe was item.price let's just double check those i like to double check them because otherwise i might see missing data and then get really confused about why it's not working title price title and price okay now that we have created our array of card components we need to render it so let's get rid of our hardcoded card i'll put curly braces because i need to enter into javascript here my array of jsx elements is still considered javascript so i'm going to put that in curly brackets say cards hit save and look at that we're getting all of our experiences showing up of course again they're vertically stacked each one has its own unique data being displayed and awesome at this point we have covered a bulk of the material from this section that i wanted to cover and don't get me wrong we've covered a lot of things so far there's a lot here to practice with and as always if you're not feeling comfortable yet with some of this material it's important to stick with it practice it over and over until you understand it that being said we do have a couple more things that i want to cover before we finish off this section first of all we need to style this so we'll do that in the next screencast and then i want to give you a sneak peek into some of the topics we'll be talking about in the next section so when you're ready let's polish off our project here with some css okay i've got to be honest with you i was going to have you style the list of cards here so that they would horizontal scroll inside of a container but we've already spent a pretty fair amount of time doing css inside of react and so for all the hard work and effort that you have put in so far i've got a little present for you bam we've got the styling done of course if you're interested to see how i did this basically i made a flex container made it so that none of the items would grow or shrink as the container got bigger or smaller and then just set the overflow to scroll essentially you can check the css for the details on it i've also included little tags that will tell you exactly what i added so that you could easily see what actually changed also notice that i used a section element here to surround our cards that allowed me both to give this a class name and give it specific styling but it also allowed me to make use of our styles that we put way back in the beginning on sections so that it had some padding on the left and right now there are two things that i want to talk about here one is how awesome it is that we are now mapping over our data because it means that if the data ever changes our page will automatically update so if i were to for example paste in three more items here i just copied the one and pasted it again and then updated our page is going to automatically update with all of the new activities that are included in our data clearly this is a much better way to work as a developer where the data will change and your page doesn't need to your code actually stays exactly the same and all that really updates is how that data is being used to display your elements on the screen the second thing that i want to cover is this error that we have been seeing or rather a warning that we've been seeing that says each child in a list should have a unique key prop it's a little bit beyond the scope of this course to dive deep into why this key prop is necessary but you will see this warning anytime you are using map on data to create jsx elements or rather an array of jsx elements first let me go to data js and get rid of those three extra items we had now over on our card the way we can get rid of this warning is by simply adding a prop called key and it very specifically needs to be key k ey and i need to set key equal to something unique about this individual item in this case pretty much everything about these different experiences is unique the image is different the title the price however for example the rating is not different between this first one and the second one so that's not something i could use as my key because it's not unique fortunately when we're pulling data from a database almost always will receive some kind of id property that we can guarantee will be unique because the database is creating that as a unique property in the database now obviously i typed all of this in manually but i gave it an id so that we could mimic this concept over in app.js i'm going to assign the key to be item.id again i probably could have used the title or the price for this warning to go away but when i hit save we'll see that warning disappears so those were just a couple of miscellaneous items that i wanted to cover i'm not going to put our hero back in quite yet because there is one more thing that i want us to talk about and that touches again on a sneak peek of conditional rendering and we'll talk about that in the next cast a phrase you might hear from the react community is that people love react because it's just javascript now of course under the hood there's things like jsx which is a little bit of magic being performed by react but i wanted to show you what that means by giving you another sneak peek at conditional rendering now i've updated the little screenshot that i have here to show you this little badge down here that says sold out and you might have noticed that in the data we actually have a property called open spots now i intentionally set this first one to open spots of zero so that we could conditionally render this little badge if the open spots is ever zero you might remember from the first time i did a little sneak peek on conditional rendering the term is referring to when we only will sometimes render a part of our page right now everything on here will render every time this component gets called however what we can do is take a look at props and if props dot open spots let's say is equal to zero then we can display the little sold out badge otherwise we just won't display it at all now there's two parts that we need to make this work first of all over in app.js we aren't currently passing in the data from open spots into our card component so the first thing we need to do is create a new prop called open spots set that equal to item dot open spots another thing you may have noticed is that we sure are passing a lot of props into this component we're going to cover a truncated way to essentially do this same thing without having to add a new prop to our card component every time we want some data from our item but for now we'll stick with what we know so we now have a prop called open spots we're passing in that number value from our data right here now in our card js let's just make sure that this is working i'll go ahead and console log props dot open spots and check our console and sure enough we get 0 27 and 3 because that's how many open spots there are for each of our experiences so let me get back to what i meant by it's just javascript first let's go ahead and actually create a little badge that will float in the upper left of this image the way i'm going to do that is by setting my card to be position relative and have a div here that's position absolute of course for now this div will always show up we'll fix it so that it conditionally renders as soon as we have something that looks good let's go ahead and just hard code in sold out and i will give it a class name let's call it card probably badge and honestly just to save time i'm going to paste some styles in here so that you don't get too bored then on my card i need to make it position relative and i need to refresh this okay now obviously it's hard coded so every one of these has a sold out badge and you might remember that the way we handled conditional rendering before was we surrounded our div that we only sometimes want to display in curly braces and then essentially included a condition beforehand now we used a very short version of that condition which we'll use again i can say props dot open spots equals zero and the div that i want to render this is kind of a clever example of how in react we typically use just plain javascript to handle things like the display logic that our component needs to know about if this first statement is truthy then this second statement or this jsx element will run and therefore get displayed however if this first statement is falsy then the second one will actually never even get called or run and therefore this div will never display on the screen so if i hit save we'll see that now i only have a sold out badge on the element that had exactly zero spots in it technically because zero is a falsie value i could say that if not props dot open spots but that's a little less easy for me to read and if another developer were to come see this they might expect open spots to be a boolean and so i'm going to keep it as triple equals zero to be very explicit now if you actually go look at the airbnb experiences website you'll notice that even in our design here we talk about online experiences and some of our locations are online the actual website itself has a little badge that says online in order to help people understand that it's going to be well probably through a zoom meeting instead of in person live meeting so i thought i'd show you yet another example of how we can use just plain javascript to help determine the display logic of our components here right now i have this badge that says sold out now i could come up with something kind of complicated by putting my display logic in here that says if open spots is zero then display this div otherwise if the location is online then display another div otherwise display nothing but as i was preparing this i came up with another way that i figured was a little more concise and so i thought i'd show that here if you've ever done a code challenge on well any number of the websites that exist out there that allow you to practice code challenges this might feel kind of familiar my goal is to dynamically render not just this entire div but also the text inside of it so i'm going to set a variable using let and i'll say this is badge text then i can just use regular javascript and say if props.open spots is equal to zero then i want badge text to read sold out or let's put it all in caps to stay consistent however if it's not sold out i also want it to check if props dot location is equal to online and if it is then we'll have badge text say online now there's two things that i need to change with this line of code in order to make it so that primarily if it's sold out it has a badge that says sold out secondarily if the location is online it displays a badge that says online but otherwise it displays no badge at all in fact let's make this a challenge for you okay your challenge is to display the correct badge text instead of this hard code sold out and secondly to only display the badge when it's either sold out or an online experience i've given you some hints basically in the language that i used for this challenge number two pause the screencast and work on these challenges okay for the first challenge to display the correct text all we have to do is erase sold out and instead render whatever the value of badge text is now of course currently this will only get rendered if open spots is exactly equal to zero so we also need to change our condition upon which this gets rendered kind of a clever way that i thought of was well when we initiate badge text up here its value is going to be undefined and then if props dot open spots is zero or props that location is online then badge text will have a real value i can use the truthiness of a real value or the falsiness of undefined to just say if badge text exists or rather if badge text has a real value then i want you to display the badge now maybe this is contrary to what i said before about assuming truthy and falsey values this one seems a little more logical to me however so if i hit save awesome now we have sold out on anything that's sold out notice even if it's an online experience it will prefer sold out first because that's our first condition up here and then if it does have open spots but it's online it has an online badge and if it's neither then there's just no badge at all now we will be covering conditional rendering in more detail later however the point that i'm trying to get across is that in react we very often use plain javascript like this kind of regular algorithmic javascript to determine how things will get displayed on the page that might not seem unique or strange to you until you've worked in another framework like angular or i think view as well where there are actually properties built into the markup that you see that provide logic for using for loops or conditional statements and so forth i'm not necessarily vying for one over the other but hopefully this sheds some light into why a lot of proponents of react will say they like it because it's just javascript and along those lines the next thing we're going to do is go clean up this card component that is getting pretty lengthy we'll do that in the next lesson when we have a component that's in charge of maybe displaying one or two pieces of data it's not that big of a deal to pass each of those pieces of data down individually as separate props however we can see our card component is starting to get a bit lengthy and honestly we haven't even included things like maybe there's a description or a set of tags that can categorize these experiences whatever the case might be along the theme of react being just javascript what we can opt to do instead of passing each of these properties of our data down individually is we can just say i'm just going to give this component the entire item object notice i kept key here that's because it's something unique that we need to include anytime we're using map but for all the other properties of data that i need my card to know about i'm just going to pass the entire item object down of course because i'm changing the structure of my card over here when i hit save well everything is broken now but if at this point you truly have an understanding of how props works and how the things that we passed down to our components can get received by the component you should be able to complete the following challenge fix our component i'm intentionally being a bit vague here because i want you to challenge yourself if you have felt a little bit confused about props and what exactly this object is that we're receiving and so forth this might be a good indicator that it's time to go back and just review the stuff practice the stuff that we've already learned but if you have felt pretty confident here then i want you to pause the screencast and work on this challenge well one major hint that we can get is if we console log our props and it might be a little bit confusing to read through here but you'll notice in the console below that there is an item property in our prop so props dot item and that item is the object with all of the properties from my data it might clean it up a little bit if i just log props.item so with that it means that all i really need to do is change anywhere i was referring to individual props as a part of the props object like props.image i just need to change it to dot props.item.image however we are going to run into one little problem and what i'll do first is just change everywhere i see props dot to say props dot item dot and then the property there let me hit save we'll see where we run into a problem so it looks like some of it is coming through we have our title our price and our location but it looks like our review count our rating and our image are not working so if you haven't already figured out why this is broken i want you to pause the screencast poke around the code see if you can figure out how to fix the rest of this component because we are passing in the entire item we now are beholden to exactly the structure and the property names of our data itself so for example in our component we were saying props.img but in the data it's the object dot cover img so if i replace in my card component img with cover img now my images should come back similarly with review count and rating these were both part of a sub object called stats so if i add stats as a part of my card now props dot item dot stats dot rating and review count the rest of that should come back the way we wanted it now we can see that our badges are still missing and that's because way up here when we're doing this logic we also need to add props dot item so that we're correctly looking at item.location and item.openspots let's see if that fixes it awesome we're back to the way we were but now our component as we use it is a lot simpler awesome work we are so close to done there is one more little tweak to exactly what we've done here that you might see pretty commonly in react and so i wanted to make sure that i covered that before it became really confusing when you saw it in the wild so that's what we will cover next there is one more little trick to passing properties into a component that i wanted to teach you about so that when you see it in the wild it's not terribly confusing because if you don't know about it it looks rather confusing this trick has to do with the object spread syntax and if you are either not familiar with it or it's been a minute since you've done it it's an es6 feature and i've linked here the mdn docs on using the spread syntax with object literals but the idea is that instead of creating my own prop called item that i pass the entire object down through what i can actually do is just put a set of curly braces and spread the item into my components props essentially what this does is it takes the properties of the data like id title description price cover image stats location and open spots and creates a separate prop for each one of them kind of like we had before we were passing in the item individually so it would look like id equals item.id title equals item.title description equals item dot description and so forth and so on until it has covered every property in our data here or rather every property in the item that we are passing into our component now doing this does fundamentally change exactly what props the card is getting because well we just changed props so that it said props.item because it was receiving an item object prop doing it this way means we would basically go back to the way that we had it before so if i were to go back to that i do curly braces dot dot dot item which spreads all of the properties of this item as separate props into my card component back in my card component i need to go back and get rid of all of my dot items here okay just like that oh i missed a couple here and actually you know what let me leave those in and we'll see that this is breaking and well it looks like it's breaking a little deeper than it was before so then when i make those changes in the correct way hit refresh everything's back to the way that it should be working on a personal note i do tend to struggle with this method of passing data down to a component only because it obscures exactly what we're passing to our component i personally would rather pass the item down as a very explicit specific prop that says item is item and although it does clutter my component a little bit where i have props.item.stats.reviewcount and whatnot i tend to find that at least for myself when i go back i don't need to first go to the data understand what properties are there then go to app and see that i'm spreading that in then go to the card and look at what those properties are i don't know maybe it's just a personal preference i have tended toward passing objects down like the way that i've shown you here for your own sake of review i'm going to put this back to the spread syntax just so you can see what it looks like as the spread syntax hit save so we see that it's still working i'm sure as you write more and more react you'll settle on which one you like the most or maybe just stick to a standard in whatever code base you're working in i'm going to take a second to clean some of this up so that we buy some more horizontal space and last but not least let's go back to our app.js component let's bring our hero back in and let's see how things are looking awesome and that folks marks everything that we had planned to learn in this section so before we keep pushing forward in react let's take just a minute in the next screencast to look back on everything that we've learned in this section and give you a chance to complete another selfassessment project before moving on to the next section we have another solo project for you to work on like we talked about before it's a great opportunity for you to flex these new skills that you've been working on so far in this section but this time without the security blanket of me being there to help you now the next section we're about to jump into is the heaviest section of this whole course so it's especially important at this time that you work on this solo project to help gauge your own skills and then decide if you understand these topics well enough to move on again it's projects like these where the real internalization of everything you've been learning actually happens so what's the project this time around you're going to be building a personal travel journal it's a page where you can list all the fun places that you've traveled along with some of the details and a photo from your trip clicking on the image of this design will take you to the figma design file once you're there make sure to click on the arrow at the top choose duplicate to your drafts so that your view of the design file won't be cluttered by anybody else's cursors or selections and also so you can make any edits to this that you want to make the quickest way to get started will be to code your project here in scrimba if you click away from the google slides you'll see a little menu with three dots when you click that there will be an option to fork this screencast to a new scrim which will start you off with the starter code that we have here once again i haven't given you a whole lot i did put this boilerplate code in here for you but that's about all that i've done for you so let's take a look at the project requirements we haven't yet learned how to pull data from an api but i do want this page to be data driven so you'll be creating an array of this data in a separate javascript file and that array should contain objects which have properties for the title location the link for google maps a start date to your trip and date to your trip the description and an image url if you're using your own photos you can actually just drag and drop them into the explorer in the upper left of this scrimba environment and then you can just reference the file name of the image instead of an image url or if you want you could just use an image url of an image out there on the internet just so this was perfectly clear i gave you a little start here i just took the data from the design file here on mount fuji and created an array with a single object in it this way you at least know the shape of this object so you can make a copy of it and put in your own data once you've pulled in that array i want you to use the map method and props on some custom components to pass that data down to the custom components and have react display the array that has been mapped and as is always true in these solo projects you should make sure that it's styled and really polished you want this to be something that you would be proud to show to someone else and of course speaking of which make sure that you share your work again you don't have to wait until you're completely done with the project you can always share your current progress in discord and ask for some code feedback you can click the discord icon here that will take you to the i built this channel where you can share your work or if you're doing something like learning in public on twitter you can click this twitter icon which will open a prepopulated tweet where you can share a link to your project good luck building your travel journal and i really look forward to seeing everybody's finished projects we find ourselves here at the end of another section and all i can think to say is nice work in this section you have taken a big stride forward in your understanding of react let's look at a quick recap of what we've learned first and probably most importantly we have talked about props in react props are one of the most fundamental topics in react and they really make it so you can write more composable code you can see in both of our projects we have elements on our page that are essentially reused both in the airbnb experiences cards here and the travel journal cards here now that you know the concept of props and reusing components with different data i guarantee as you start paying attention to the websites and web apps that you use online you're going to see this concept everywhere then what props really enables us to do is use data to drive the code and map over it in order to create the website that we're trying to create now although there's only two topics here in this recap those topics are extraordinarily important as we move forward as always you should be extremely proud of what you have worked on so far so i highly recommend that you go over to the discord server if you click on the screenshot it will take you to the today i did channel and even if you don't feel like sharing your code or a screenshot at least post a message in there that tells people that you have now completed section two of the introduction to react course also this is a very natural time to take a break from your computer if you've been working on this for quite a while make sure that you stand up and move around a bit get something to eat or drink your brain does need some time to digest all of this new information that you've been learning so even if you need to come back tomorrow that's completely okay and then whenever you're ready i will see you in the next section you have done an amazing job so far and now we have arrived at probably the most exciting section in this whole course and that is how we can create interactive web apps in react until now we have basically just been recreating static websites in react and of course along the way we've also learned how we can use props to create reusable components in react but really so far that's only allowed us to create reusable parts of what is still considered a static website if you think of the airbnb experiences clone that we just finished building we left it off in a state that really still didn't allow for any kind of interactivity with the user on the real airbnb website a user can click into those experiences they can save them to their favorites and then of course they can actually book that experience and pay for it so that lets us know that there is so much more that we get to do with react and that's where you've arrived in this section to help us better understand what i'm talking about let's take a look at the difference between static websites and dynamic web apps the static web pages that we've been doing so far they're really read only they don't allow for any kind of changes to the data and that's probably the defining attribute of a static web page especially in the early days of the web but still pretty common today you'll find static web pages like a blog a new site recipe sites and a bunch of others that really don't allow you to change any data but rather just to read or consume the content that exists on the page in this section we are going to be learning how we can use react to also create dynamic web applications and the defining attributes of these web applications is that they are both read and write in other words the user has the ability to change the data that drives the app as such they tend to be highly interactive and instead of displaying the same content for every user they will display your specific data and these kinds of web apps drive entire businesses if you think of for example your bank website or the real version of airbnb and this list goes on and on if you think of social media websites or online games or anything that is highly interactive and displays data that's specific to you as the user you could say they all exist on a tier sort of above a static website because of the amount of interactivity they have of course we're not quite ready to recreate an entire site like airbnb so we'll be using this meme generator project to drive forward the curriculum in this section in this project when the app first loads it's going to reach out to an api and get 100 of the most popular meme images at that time and give the user the ability to enter the text that shows up on top the text that shows up on bottom and also to click a button to randomly choose a new meme image just like before you can click the screenshot here to go to the figma design file and again i recommend you copy it to your draft so if you click the arrow at the top duplicate to your drafts and choose this option it will put an editable copy in your own figma drafts that you can use as reference in order to build this project we're going to be learning about event listeners and how we can add that dynamic interactive aspect to our web application we're going to spend a lot of time learning about something called state we'll officially cover conditional rendering which you've already had a few sneak peeks at so far we'll talk about forms and how we can gather data from the user and we'll learn about side effects and how we can manage side effects in react once again we'll be starting off by building some of the static components of our page here so if you already feel like you're a hundred percent good on css in react you can skip the first couple lessons where we're mostly just doing some setup and styling for this app however i do encourage you once again if you haven't been practicing your css inside of your react or honestly even if you're feeling a little bit hesitant on css in general not specific to react then don't skip those screencasts go through those lessons do the challenges and that will be a great way to get some additional practice on those topics and set you up for success with the rest of this project so click the screenshot to open it in figma copy it to your drafts and when you're ready let's get started on this section which i'm the most excited about in this whole course sometimes if i'm feeling overwhelmed by a project like the meme generator here where we haven't learned some of the things we need to know in order to complete it i will break the app down as much as i can into pieces and then see which of those pieces i actually can create for example we've spent this entire course so far learning how to build static react sites and the truth is there are static parts of this site so the first one we're going to start with is the header remember you can click this screenshot in order to go to the figma design which you can use to determine the font sizes the spacing this cool purple gradient here and so forth so let's start out with that pause the screencast and work on building the header component first i'll get the pieces into place i'm going to create a separate components folder although this app is probably small enough that it's not really necessary i'll just do it for practice sake i'll create a header.js file inside of my components folder and i'll just spin up a basic react component here i'll do that little sanity check that i like to do just to see that it's working on the page in my app.js i will import my header let's put everything here in a div since i know that i'll have multiple things here okay my header component is showing up next let's get the content on the screen i know it's not just an h1 so i think i'll surround this whole thing with a header element and i probably wouldn't call this an h1 because it's not really the main headline of the page it's sort of in the header itself so let's maybe call it an h2 before that i'm going to have an image and i already know the source is going to be my images troll face and let's see it needs to be relative like this that's probably going to be bigger than we want it to be but we'll fix that in just a minute and last of all we have this react course project 3. i can't really decide what it should be let's just call it maybe an h4 or something i know that i'm going to style my header so i'll go ahead and give it a class name we'll just say it's header i'll hit save and go to my styles usually with two dimensional layouts like this in a single line i will revert to flexbox so we'll say this is display flex we'll align everything to the center from the design it looks like the height is maybe about 65 pixels that's making my image overflow a bit we'll fix the image in just a minute but i'm going to grab my background which is from the design so i'm just going to paste it directly from the design there the color of the fonts and the text should be white and there probably should be a bit of padding i think we have something like 15 on the top and bottom and 20 on the left and right although it might just be 20 all around we'll just call it 20 all around then i will give some class names to the other elements here we have header image header title and header project so we'll start with the image and we'll make sure that this fits within the boundaries of its parent by saying you have a max height of one hundred percent in the design it looks like there's also some space about six pixels so i'll give this margin right of six pixels the header title it has a font size of about 20 pixels and i can push my react course project 3 all the way to the right by giving my title a margin right of auto we can see that a little more readily if i make this wider oh and this still says header component let's update that to say meme generator and let's lastly style our project text that has a fairly small font size we'll say that's about 12 pixels and i think the weight is maybe different let's give it a font weight 500 and yeah that does change it so we'll leave that on there and you know what one thing i'm trying to get better at is using rams for my font size instead 20 pixels over 16 pixels equates to about 1.25 rim and 12 pixels over 16 is about 0.75 rim well it's exactly 0.75 rim awesome work this is a great start the next thing we can do is attack this form here we've got two inputs and a button we're not quite ready to make them functional but we can at least get them on the page so let's do that in the next challenge the next piece of our project that we can bite off is the form that we have right here with the two inputs and the button so that's your challenge for this screencast don't worry at all about creating any functionality for it i've outlined exactly the steps that i want you to do here we're going to create a component called meme inside that meme component we'll render a styled form which will have our two inputs and our button pause the screencast and work on this challenge let's actually work backwards this time i'm going to pretend that i already have a meme component created so i'll just import it and render it since i'm already here in this file and then i'll actually create it so inside of components i'll create meme.js and set up my component now i didn't talk about this specifically but i happen to know ahead of time that i'm going to put both my form and the actual meme image and this text all into this same component the reason i want to do that has to do with when we start talking about state and where state needs to live so in an effort to reduce complexity i'm just going to put everything in the one component the reason i mention that is because i already know ahead of time that i'm going to use a main element to surround everything else on my app if you didn't do that it's completely okay but this inside of here is where i'm gonna put my form i already know that my form has two inputs and a button i've already got my button text copied and i'll paste it here since it's got the little emoji there i also know that i want these to be a type of text so i'll add the type text there let's hit save see what we're working with okay pretty generic styling let's give this some love in the css i think the way that i would like to lay this out is using grid i could probably use flexbox as well but what i'll do is make a two column and two row grid and lay the elements out there inside the grid will be the form so i'll make that the grid container i'll give this a class name of form and while i'm here i think i'll give these their own class names as well i'm going to put these on their own lines we'll say these are form inputs and i'll give my button a class name form button i guess i can also give my inputs some placeholder text so we'll add top text and bottom text it's a little more helpful now in our css let's select our form we'll change it to display grid and then set up a grid template that has two 40 pixel rows and then evenly divide the columns with fraction units we'll have two columns one fr each since i have three items it's putting the first item filling up one column the next item filling up the next column and then the third item only filling up one column the inputs look essentially the way that i want them to but i want the button to span the whole thing so i'll select my form button and tell it that its grid column will go from the very beginning to the very end awesome it looks like in the design there's a little bit of a gap i can use the gap property to spread things out a little bit then of course everything is butting up against the edges of my page here i only am going to have one main element so i'm just going to select the main element directly and let's give it a padding i think of about 36 pixels is what the design shows one thing you might notice is that the placeholder text and the button text are not taking on our carla font family for whatever reason inputs and buttons inside of forms tend not to do that so i will specifically add that in my form button and i will also select my form inputs and i think i'll put this above my form button since my inputs are above my button in the markup and i'll give that the font family as well let's also get some border radiuses here i've got both of these as having a border radius of 5 pixels my inputs have a border of 1 pixel solid and then this color that i'm copying from the design and oh we need our hash mark there there's a fun property called text indent that i learned about here i can make it so that my placeholder text and my actual input text will bump in a little bit or have a little bit of an indent we'll just give it a 5 pixel indent and i just noticed that these styles are not applying uh that's oh that's because i need this to say form input not form inputs okay that's working now let me comment this out yeah you can see what the text invent is doing okay my button needs a lot of help i'm going to take the background from the design in the figma file that also gives us that gradient of purple i need to change the color to white i'm going to remove the border i always like my buttons to have a cursor of pointer and awesome that's looking great it looks very much like our design now at this point i probably could separately create this image with the text sitting on top but i think it's high time that we jump into actually understanding what it is we need to learn in order to do the functional parts of this application including clicking the button and typing in our text so in the next cast we'll talk about what that will actually take the primary thing that sets apart a static website like we've been building so far with web applications is the ability for the user to actually interact with our page and in order for a user to interact with our page we have to be listening for different events on that page and then reacting when those events happen let's get a quick overview as to how this app will work as soon as the app loads for the very first time it's immediately going to make a call to an api called imageflip which will return to us an array of 100 meme images that are the most popular at that time then clicking the get a new meme image button will simply randomly choose one of those 100 images in the array that got returned to us and as you've probably figured out typing into the left input box will give us our top text and typing into the right input box will give us our bottom text now there's a lot in there that we need to break down before it becomes overwhelming so let's start off really easy the first thing we'll do is learn how to add an event listener to our button so that we can run some kind of logic when the button's clicked and we'll start that in the next lesson the primary thing that separates a static website from a web application is the ability for the user to interact with what they see on the screen by now you should have built plenty of javascript applications that used events and event listeners to allow the user to interact with your application so this topic shouldn't really be new to you you should already be familiar probably with two different ways that in a vanilla javascript application you can add events to your program first of all there's the dot add event listener which you probably are already familiar with if you were adding a click event you would then provide a function and inside this function you put the code of whatever should happen when the element that you're listening for an event on gets clicked alternatively there's a way in html where you would essentially put on click and set that equal to the name of a function followed by parentheses this second way is going to be much more similar to how we actually accomplish adding event listeners to items in react for example let's start with our button here we're going to make it so that when we click the button something will log to the console in react all i need to do is on my button add an on click and you'll notice that i used a capital c and that's because we are accessing the dom properties of the object that's being created here as a reminder what react is doing is it's taking this jsx element that it sees which in the end returns a plain javascript object describing the dom element that should be created by react and whatever properties or attributes we add here inside the jsx are directly accessing the equivalent properties in javascript if i were to select this button in javascript using document.getelementbyid or something like that i would have a dom element that has a property called on click with a capital c and this camel casing is the standard throughout all of our javascript elements so all that means is that instead of using the lowercase c like you might be used to doing in html we're going to have camel cased properties everywhere so on click maybe on mouse over or on mouse enter and so forth let me put this back to on click and we'll see the other difference here now instead of setting this equal to a string which has a function name because i'm here in javascript i can actually just use a set of curly braces and then put a function directly here inside of my on click now personally i'm not a big fan of stuffing my functions inside of my markup here if i can avoid it so what i usually do is above my return but still inside my component i'll define another function up here and say handle click maybe because this is the click event handler then i can say console.log i was clicked let me get rid of this and i'm gonna give you a mini challenge okay pause the screencast and make it so that clicking the button will run our handle click function a few of you may have been tricked into thinking that you can put handle click with a set of parentheses and well let me refresh and see what happens notice that as soon as i ran this code it ran my handleclick function i don't want this set of parentheses here because that will run this function as soon as the program reads this line of code instead i'm passing the function as a value so that react can add that function as the event handler in case a click ever happens on this button so without the parentheses there i can hit refresh clean this up i can hit click me and then that's when our click event handler runs the react documentation has a full list of all of the events that it supports i've included here a screenshot that you can click from the react documentation this will take you specifically to the mouse events i've personally found that mouse events probably make up a good 95 percent of the events that i listen for in any program i write and you'll probably need to use this as a guide for the challenge that we will do right now your challenge is to log something to the console whenever the mouse hovers over the image i added some css to darken the image just so it was a little more obvious when the mouse was actually hovering over the image again feel free to use this as your reference pause the screencast and work on this challenge there's a couple different events that should work just fine for this challenge we have on mouse enter which will run anytime the mouse enters an item that we're listening for an event on and there's also on mouse over which essentially does the same thing it just has a slight difference dealing with children elements right now we don't have any children elements of our image so it really wouldn't matter which one we use first let me create a function that will run when we are hovering over the image maybe i'll say handle on mouse over and we'll console log mouse over and then i can simply add to my image let's put it after the source will say on mouse over equals and then curly braces because i'm going to put the name of our handle mouse over function pull these onto separate lines to make sure that we can see them well hit save and now when i hover over the image or rather when there's a mouse over event on the image it runs our javascript code and we get that console log displaying down there feel free to poke around the documentation event listeners can be kind of fun especially when there's a bunch that you may not have heard of just seeing how they work can be a fun thing to play with understanding this is going to be assumed from here on because you already should be a little bit familiar with events and event listeners at this point fortunately doing it in react is actually fairly straightforward and now this sets us up for one of the coolest parts of react and we're going to jump into that next let's apply what we just learned about event listeners to our meme generator project ultimately what we'll be doing is making an api call as soon as our component loads and getting data from an api that includes 100 of the most popular meme images right now but we haven't quite yet learned everything we need in order to make that work so for now what i've done is i made the api requests and i just saved the data that came back here in memesdata.js you can see we have the object it's got a data property that has a memes property and that is an array of 100 items each one of those items is an object that has a url property so you're going to have to do a little bit of digging into this memes data object but your challenge is to make it so that when we click the button it will randomly choose one of those urls and just log it to the console for now don't worry about displaying the image yet one modification i made to our markup here is i changed our form element into a div element long story short when you have a button inside of a form it actually submits that form and tends to refresh the page unless you stop it but i realized that there's actually no reason for this to be collected together in a form because ultimately this button does its own thing by getting a new image it does not take these inputs and submit them somewhere so in this case i feel like it's okay to have our inputs floating outside of a form and that way it means that when we click our button it doesn't refresh our page because it's not trying to submit a form okay so the challenge is to get a random image from the memes data array which i've already imported for you you'll get that anytime this new meme image button is clicked for now just log the url of that new image to the console if you're feeling hazy on how to get a random item from an array you'll probably want to turn to google but i know that you'll be able to do it pause the screencast work on this challenge let's start by hooking up our button i'm going to add an on click event listener and when the button is clicked i will run a function that says get meme image i haven't yet created that so let's create that function get meme image for now i'll just have it console.log clicked to make sure that everything is hooked up correctly hit save click the button clicked okay good now if we look closely at memes data it's an object there's the object it has a data property which has a memes property so i need memes data dot and that's my array i think i'll simplify that by simply saying const memes array equals means data dot theta dot memes and then i will generate a random number so i'll say random number and i can use math.floor math.random times the length of my array so that's memes array dot length this random number should get me a random index of my memes array and that indexed item will be an object with a url property so let's actually just console.log random number and see how we're doing so far 16 50 92. okay i wanted to see a high number to make sure that it was going up to a hundred i probably don't need to click this until i see 100 or actually i think it would be 99 so i can get my image object or actually i can just do it all in one i'll say const url equals and then i'll index into memes array at the index of random number this is my object with a url property so i'll just save that as url so it's nice and short or if we wanted to do some object destructuring i could just say get me the url property from this memes array i don't want to conflate a few things here so i'll just keep it straightforward like this and then we'll just console.log the url of course i could do probably most of this in a single line but i find that sometimes separating it out makes it a lot easier for other people to read we'll hit save and i guess i have no way to ensure that these are in the correct index but i can't see why they wouldn't be so this is awesome we're getting random images every time we click our button at this point we are a little bit blocked and i'll show you why if i create let's say a paragraph down here and i try to stick my url in there well first of all i have a problem because my url is only declared inside of this function and so this is not going to know what i'm talking about if i hit refresh it's going to say it doesn't know what url is essentially so you might think well let's declare url outside of the function you could say let url and then just set url equal to this and console.log url let me hit save and now at least url is well of course my styling is all messed up because my paragraph is let's put this let's put this outside here so we have that above click new meme image okay well we set url equal to the new meme image right here however my ui did not update this has everything to do with the way that react looks at variables and decides when it should update the ui or the user interface and spoiler alert it doesn't do that by just looking at every variable that we declare inside of our component in the next cast we're going to dive a little deeper into this conundrum that we have and start figuring out how we can make it so that we can update a variable that will then replace what we have on the screen with the new value of that variable at this point in our journey we have mostly been dealing with static websites in the previous section we showed how we can take data that we pull from for example an api we were just using a little javascript local data file to mimic pulling from an api and then we mapped over that array of data to display items on the screen however in order to interact with those items on the screen we are still missing something i want to demonstrate what i mean but before we do that just in case it's been a little while let's get our hands in the keyboard with a quick challenge i have here just a locally defined array with two strings in a thing one and thing two i want you to map over the things array generate a paragraph element for every item in the array and then render those items below the button right here this challenge harkens back to the last section where we learned about dot map and how to take an array of data and turn it into elements on the page so pause the screencast and work on this challenge okay what i'll do is create a new variable called maybe things elements and i will set that equal to the array that comes back when i run dot map on my original things array we'll look at each thing in this array which is just a string and we'll return a jsx wrapped version of that string so really just a paragraph element in jsx where what we insert on the inside is the text of that thing thing is just a string so it's fine if i just put it inside of my paragraph like that then things elements is an array of paragraph elements and i can just put that inside my curly braces here hit refresh and now i have thing one and thing two i did get that warning about key so i should probably just add a key prop here and every one of these strings will be unique we'll see why in just a second so i'm just going to say that thing is the key and that should set them apart and get rid of my warning there cool well this is great but we've got this button that doesn't currently do anything let me set up another quick challenge for you the concept is going to be that you click the add item button and it adds another thing to our things array namely thing three and then you click it again it'll be thing four and so forth i'll type up this challenge now okay your challenge is to add an event listener to our button so that when it gets clicked it adds another thing to our things array in your event listener you can use thingsarray.length plus one to determine what number should get added to the next item in this array and it also will be a good idea to make sure that at the very end of that event listener that runs when you click the button that you console log your things array and the reason is because spoiler the page is not going to update when you add new things to the array i decided it would be important to let you know this little fact ahead of time so that you weren't pulling your hair out trying to figure out why the heck things weren't changing on the page so pause the screencast and work on this challenge well let's create a function called we could call it handleclick or i could say add item maybe and add item is going to well first let's just console.log things array and set up our on click add item so that we can see that it's working okay so it's logging thing one and thing two the static array that we have there so i probably could add the whole thing in one step just using things read out push i'm going to determine what the text of the new thing is first so let's say new thing text and that's going to be i'm going to use a template literal so i can say thing space and then insert some javascript where i say things array dot length plus one and then i can say things array dot push new thing text and then of course i'm going to log the things array after i push the new item let me open the console so we can see that a little more clearly i'll hit save add item okay oh not a number of course because i spelled length run let's try that again add item thing three thing four thing five great well our array is changing but of course what we see on the screen is not and this brings us to our conundrum at this point react is not looking at local arrays that are just saved within a component to determine whether or not something should get rerendered or rather if the return here should run again with an updated value for things elements actually maybe more specifically i'm determining my things elements way up here at the top back when things array is just two items long and then it's sort of cementing this thing's elements into its memory and no matter what i do to change things array it's not going to automatically change things elements in my early days i thought maybe if i put this below add item or something like that it might make a difference but that's not going to change the fact that this line of code will only run one time and that's the very first time the app component gets rendered right here let me clean this up real quick now one thing that might be tempting to do is inside of our add item function to say well let's not just update our array let's actually select the elements on the screen using document.getelementbyid and finding out where the container for these items is and then pushing a new paragraph element to that list and the truth is when you're just using plain javascript that's essentially what you have to do but if you think back to one of our earlier sections we talked about how react is declarative and this is one of the major benefits of having a declarative library like react it makes it so that all we really need to do is update our data and react will automatically well react to that change and update our ui to display what has changed in the data all we need to be in charge of is making sure that the data updates correctly and react will handle the rest however for that to work we need to access something called react state and state will allow us to sort of hook into the component and make it so that whenever we update our state which is really just values that we're saving inside of this component it makes it so react will update the user interface based on any changes that happen to those values that are being saved in state and truthfully if you think of pretty much any website that you interact with if it were made in react any kind of interaction you had would change the state the first thing that comes to mind is maybe i don't know a playlist or a recipe where you hit the little heart icon or maybe a bookmark icon and it fills it in and likely sends a message out to a database that updates the fact that you have liked a recipe or a song or maybe it's an accordion or a carousel where you click something and an image shifts over or a portion of the page expand so you can read more information any of those interactions in react are going to be updating state which then makes it so that react can update the user interface to respond to however you interact with the page so now let me update this using state and you can see how it will actually start to work again the way we originally expected obviously at this point some of this will look a little bit foreign and that's totally okay we're going to dive deep into understanding how to actually write this ourselves but you can see that not that much changed in my actual code but suddenly i have an app that's working the way that i expected the example is a little bit contrived obviously but hopefully you can see the exciting world of state and react that we're approaching and start to imagine some of the cool things that it's going to allow us to do so buckle up and get ready to jump into react state one thing i've learned over my years of teaching react is that one of the major points of confusion for students when they're first learning react is understanding the difference between props which you have already learned and state which we are about to learn so let's take some time and clarify the differences between the two and when you would want to use one over the other and the first thing we'll do is look at props we've seen how we can implement props in practice but let's take a second to actually talk about them when we refer to props we are referring to the properties that we are passing into a component in order for that component to work correctly this is similar to how a function can receive parameters quoteunquote from above just like a function that receives parameters a component that receives props is not allowed to modify those props or in other words those props are called immutable let's first take a look at a regular function let's say i define a function that says add to numbers and i pass in my parameters of a and b as i'm writing the logic of this function i'm going to assume that this function will be past a and b of course i could always do some kind of check that says if there's no such thing as a or if a is equal to undefined then throw some kind of error that says you need to provide both a and b but other than that inside of the body of the function i can just assume that i have a variable a which is a parameter that has been passed to this function and i can assume that i have a parameter b another parameter passed to this function and that's what i mean by being passed from above when we actually use this function we'll say add two numbers i'll provide my actual values that i want to represent the parameters a and b and my function can then do its job the main point that i want to come across here however is that inside the body of this function it wouldn't make a whole lot of sense for me to modify or mutate these parameters for example i wouldn't want to say forget what you just gave me for a i'm going to set it equal to 42. naturally this should feel wrong to you because essentially we're ignoring anything that is passed in as the first parameter here and just setting it equal to 42. technically this probably works if i were to console.log the result from add two numbers one and two of course i would expect it to be 3 but we'll see that it's actually 44 and that's because we've overwritten a to be something different similarly in react i would never want to have a component let's say a nav bar that takes props but then automatically sets props dot i don't know let's say cover image equal to something else this is a huge red flag you would never want to set props dot anything or props itself equal to anything different because incoming props should be immutable and they should never change manually or maybe more specifically those props should never change from within the body of our component itself now that's not to say that when i have an instance of my navbar that i can't provide a cover image that changes let's say it starts out as some image one and then i don't know maybe there's a button on the screen when the user clicks that button i want my navbar's cover image to update to some other image maybe this is a little convoluted because i'm not really using images here but the point is i can change the values that i pass to my component that's fine that's something i'm allowed to do and as we jump into state we're going to see why that's even useful but from within the body of the function i should never ever change my props in the same way that i would never want to change the parameters being passed to my function another way to think about props here we read that they are the properties being passed into a component in order for it to work correctly if it helps you could think of it as the properties being passed to a component in order to configure it as we saw in our last section project we passed props to our card component in order for that card to be reusable and configure it to display the correct image the correct price the correct stats like the review count and so forth and oftentimes you'll find components that do more than just take in the data that should just be displayed as a part of the component sometimes they will receive configuration objects or properties let's say for example off the top of my head if we had a component that we wanted to display either in light mode or dark mode well then maybe i would have a dark mode property that i could set to true in this case i'm not necessarily displaying the literal text true for dark mode or the text dark mode is activated or anything like that but instead this is a property that is configuring my navbar in order for it to act and display correctly okay i might be beating a dead horse here so let's move on and we're going to see how the use of state will differ from our usage of props if props are data that a component is receiving from above and shouldn't be changing state on the other hand are values that are defined within a component and essentially should be changing so as we see here state refers to any values that are managed by the component itself kind of like a function that declares its own variables from within that function long story short anytime your component has changing values that should be saved and displayed you're most likely going to be using state we'll jump into what this looks like in react in a second but i think it might be helpful to see how this compares in a vanilla javascript example kind of like we did with our add two numbers and having what we can equate to props being passed in as these parameters and how we shouldn't be changing them from within the definition of this function itself in order to create an equivalent in vanilla javascript of our concept of state let me write out a challenge for you let's say we have a function called greeting it takes a name as a parameter and what it should return is a string like good afternoon and then followed by the name of course afternoon will change depending on the current time of day as you can read from the challenge description up there at this point this is more of a vanilla javascript algorithm challenge for you but i think it's good to incorporate those into our react course here and maybe just so that i'm not making you chase google a whole bunch right now i'm going to give you a couple hints here so you can get the current time of day by following these two lines of code essentially first you create a new date object in javascript and then you use that date to get the current number of hours these hours are zero index so 12 am is zero 11 pm is 23 and just to be clear i have included the 11 59 459 and everything up here just to be clear what hours should be included in morning this one's kind of funny because i don't know that i would ever say good night to someone at 3 59 a.m but whatever my point is you won't need to get the minutes here you can just use the hours like i've shown you here pause the screencast see if you can complete this challenge then we're going to bring the concepts back into understanding state and react now i won't spend a bunch of time talking about the logic of this we'll just put in a solution here and then talk about how this equates to state and react i have the number of hours now if i console log those hours it's 12 pm my time so my answer should say 12 there yep so i will type out some logic that i think will just kind of intuitively make sense the first thing i'll do is just declare a changeable value here time of day and then depending on the current number of hours i will change the string time of day to be either morning afternoon evening or night just like i talked about in the challenge and now that i have a time of day value i can simply return the string and i'll use some interpolation here we'll say good and then we'll stick in the time of day comma and then i'll use the value for name that i'm receiving as the parameter to greeting exclamation point and let's go ahead and see if this works again it's about 12 o'clock my time so i should when i oh i'll need to console log this the value that gets returned good afternoon bob okay now the point here is my function is receiving a parameter this parameter is not something that i will want to change in the way of saying name equals something different because that would just be a well a kind of a strange thing to do when you are expecting the outside user of this function to provide you the name similarly in react we are not going to take any props and then just change them which is what we talked about in the last screencast however there are definitely reasons for us to within our own function create values that we can either use or even change like our let time of day here in react values that are created by the function or the component itself are usually handled with state okay i think that's more than enough of the conceptual difference between props and state at this point it's probably best for us to just get our hands dirty and start actually seeing how we can implement state and react and then as we build our section project we will get much better exposure into how state and props will work together and how they are different from each other as well it's time for another quiz this one's going to specifically be looking at the difference between props and state so as always read through these questions click into the editor type down your answers and when you're satisfied with your answers click play and we'll go through the quiz together on a higher level the concept of state is sort of like saying the way things currently are here in the united states the president gives a yearly address called the state of the union growing up that always confused me because the united states is made up of 50 states and i thought it had something to do with that but no it means the way that things currently are in react state refers to values that a component can maintain between render cycles this will make more sense when we get into the syntax of it but let me type down a more concise answer to this question the concept of state is essentially a way for react to remember some saved values from inside of a component this is similar to declaring variables within a component but there are a few added bonuses to it which we're going to get to later so when would you use props instead of state in react i think the easiest way to think about this is to compare it to regular javascript functions props are like passing parameters into a function that the function then uses to help it determine the output what gets returned so in react you would want to use props anytime you need to pass data into a component so that that component can use that data to determine what should get displayed on the screen in some cases the data that we pass in will directly be data that is displayed like in the instance of text but sometimes it will be data that's really just meant to so to speak configure the component so that the component can use it to determine how something gets displayed okay so when would you want to use state instead of props continuing with our function analogy state is kind of like when inside of the body of a function you declare new variables and you use those new variables to help you accomplish some task inside of the function in react you would use state anytime you needed a component to maintain its own values as we mentioned earlier it's slightly different than just declaring a regular variable we're going to see the syntax of it later and how it differs but for now that should be a sufficient answer to this question so you would use state anytime you want a component to maintain some values from within that component and by the way also remember those values even when react needs to rerender the component again we're going to see that much more in detail a little bit later and a little bit out of left field what does the term immutable mean and then our props immutable and is state immutable immutable technically means unchanging the reason i bring this up is because we learned that props are immutable we should not ever change props from within the component that's receiving props doing so essentially defeats the entire purpose of props think of it like a function that receives a parameter but then just decides to change the value of those parameters to something different it pretty much invalidates the whole purpose of passing parameters into a function so props are immutable in this case i don't think props are literally immutable you can try to set them equal to something else and i don't believe it will crash your program although it may throw a warning but maybe a better way to describe it is saying that you should not change props and therefore they are immutable state on the other hand is not immutable or in other words state is mutable the purpose of declaring state in a component is because you do plan on changing state okay we're done with the quiz nice work when you're ready let's keep moving forward we saw in an earlier lesson how it's not going to work for us at least in react to just declare regular variables like let's say state is equal to yes and expect react to rerender our component if for some reason that state ever changed if you recall we had an array of items and we had a button that allowed us to push new elements to that array but whenever we did that it didn't actually update our page and that's because react doesn't watch for local variable changes so the first thing we'll do is learn how to actually declare state inside of our component and in the next cast we'll talk more about how to actually change that state as a part of the react library there is a method called use state and use state is one of many what are called hooks in react there's a little bit of history as to why it's called hooks we're probably just not going to worry too much about it right now but the point is i can declare some state by simply calling react dot use state now another way you might oftentimes see this is people will destructure it directly in the import statement they'll grab the use state method from react as well and then they can just use use state in fact i would suppose this is the more common way you will usually see it happen however just for perfect clarity and for it to be very clear that use date is part of the react library i'm actually going to use react dot use state because i do find that it makes it a lot more clear where this use state method is coming from let's go ahead and see what comes back we'll say const result equals react.ustate and then we'll console.log result just to see what actually comes back by calling react.usestate i'll open the console hit save and look at that okay so that's interesting we get an arrayback and the array has its first value as undefined and its second value well in scrim but it says f parentheses that just means that it's a function now let's see what happens when i put something inside the parentheses let's say the string hello i'll hit save and now the first value of my array is the string hello so whatever i put inside of my parentheses when i'm calling use state is going to be the default value for the state variable that i want to save okay so now that leads me to a little mini challenge that will require you to think a little bit critically i'm going to type the challenge out now okay your job is to replace this yes with a string yes that isn't just hard coded inside but rather is created by using react.usestate remember what we get back by calling react.usestate is not just the string hello it's actually an array so let that guide you as you work this challenge pause the screencast and work on this now the first thing i can do is change hello to yes and then my result is an array and the index of zero should be let me just log this should be my string yes so i could replace this yes with a set of curly braces because i need to jump into javascript and then i can say result at the index of zero i'll hit save and we get yes the exact same way we had it before but now if i were to change this to no which is not true state is important to know awesome our page actually updates with the state that we had created with react.ustate change this back to yes because it certainly is important to know okay well there's a couple of problems we have first of all this is kind of clunky to say result at the index of zero in the next screencast we're going to learn a little bit more about what we can do with this array and then we will bring out the real power of using state by allowing the user to interact with our page and change state themselves so when you're ready let's jump into those topics as we saw what we get back by calling react.usestate is an array where the first item is the value of the state that we are hoping to save kind of like initializing a variable inside of our component and the second item of that array is a function so we saw how we could use result at the index of zero to get our value however there's actually a much smoother way to deal with this and this requires us to use array destructuring since react.ustate returns an array what we can do is actually destructure that array immediately upon receiving it as a variable and then we can provide two values and let me just put funk because we know the second value is a function now in this case if i rerun console.log result what we see is that we have pulled out the first item in the resulting array of react.ustate and destructured it into its own variable called result what's nice about using array destructuring is that we get to call this whatever we want if this were object destructuring we would have to use the property name of the object that comes back by calling react.usedate but because they return an array we can call it whatever we want so if i console.log whatever we want we get the same thing yes oh and now my result down here is broken so if i change that to whatever we want we get back to the way we were now don't use silly names like whatever we want instead let's say maybe is important we'll choose a variable name that makes a lot of sense for what the value is that we're trying to keep track of and that's the concept of using array d structuring in order to more smoothly get values from react.ustate in the next screencast let's talk more about this function here let's take a look now at the function that we receive here when we destructure the array that comes back from react.usestate normally if we had a variable where we were saving this if we just said something like let is important equal yes then we already know we could simply say is important equals something different like no however when we're working with state we can't simply say is important equals something different instead we are given a function that allows us to make these changes so that react can handle those changes accordingly let me delete these lines here and let's take a look at this function now normally we wouldn't just call this func so let's give this a more meaningful name the convention that you'll often times see is set and then the rest of the variable that we called our state so set is important in this case i need a capital i to make my camel casing correct and this set is important is a function that i can run and whatever value i provide to it is going to be the new version of state now of course running this function immediately after generating state is kind of silly in fact i'm not even certain that it would work instead we would normally want to set or change the state whenever something specific happens on the page so let me type up a challenge so we can do something like that okay just to avoid confusion i created the actual function body for you but your challenge is to have this function run this line of code and then to set up an event listener on this div so that it runs handleclick whenever anywhere inside this circle gets clicked pause the screencast and work on this challenge well simply enough i can copy this line of code put it in there and then i need to set up an event listener here so i'll say on click again capital c we will run our handle click function hit refresh and when i click my button here awesome okay notice that as soon as i clicked it changed from yes to no what happened is we took the function that we were given when we called react.ustate this function's job is to give us the ability to change state if we wanted to and we used it in the most simple way possible which is to simply provide a new version of state as soon as this line gets called which of course happens as soon as we click our div here then set is important gets called and the state changes to no and well at this point we've kind of hit a dead end because obviously this is incorrect state is very important to know but notice that if i click this again and again well nothing is changing and that's because every time i click it it immediately sets it to no in the next screencast let's work on a challenge that will help get your hands on the keyboard practicing using state all right here we have something that's a little more dynamic the idea is we will create a little counter when i hit plus this number should go up when i hit minus this number should go down to start us off and to get your hands on the keyboard i'm going to have you complete this challenge where you're going to set up state to track our current count and our initial value is going to be zero pause the screencast and see if you can complete this challenge to create new state we simply use react dot use state and we can provide the initial value of zero and then we need to essentially catch what this returns in some variables it's an array and because what we get is an array and i can destructure it that means i can call it whatever i want in the first index i receive the value which i'll call the count and by convention i will call my setter function setcount this is the function that when i call it will allow me to update the state here one last thing that i didn't specifically say to do and wouldn't be very obvious unless i did is to use this count value to replace our zero here now at this point nothing is going to look like it has changed i still don't have the ability to raise or lower this number now let me build up to the next section by updating our challenge okay your challenge is to create a function that's called add that runs whenever the plus button is clicked this is just practice on event listeners in general for now you can just have it console log the string add or something along those lines a good rule of thumb to use is to declare these functions inside of your component so instead of going up here outside of your component and creating your function called add it's better to declare that function right here inside of your component pause the screencast and work on this part of the challenge okay let's declare a new function called add and for now we'll just console.log add and let's see here is my plus button so i will add an on click of add and now i should click this button and get my console logging ad awesome okay at this point we're running into an issue and that is how we can update our count what we most recently saw is that i could say set count and then provide some kind of immediate hardcoded value here however that doesn't really help us because even if i provide a 1 if i run this code it will work notice that when i click the add button it sets the count to one therefore it rerenders our app and changes the zero to one however of course if i hit plus again and again and again it's just constantly setting it to one and it doesn't really accomplish what we want so i want you to think critically i'm going to update our challenge i want you to see if you can think of a way so that clicking the plus button will increase our number by one every time and display it correctly on the screen obviously hard coding one here is not going to work pause the screencast and see if you can figure out this challenge hopefully you were able to figure out that we do have access to our current count and so i can just say i want you to set the count equal to whatever the current count is plus one let me hit save we'll see that this is working okay that's awesome but i wanted to use this as a chance to show you a common misconception or fallacy that beginners in react tend to fall into and that is trying to do something like count plus plus or even plus plus count if you're familiar with the differences between those two let's look at count plus plus for example in the philosophy of react something like count plus plus is strictly forbidden and that's because we never want to modify state directly what i mean by that is this count plus plus is a shorthand for count equals count plus one and in this case using count equals is just a big nono you will never ever do that when you're modifying state the entire reason that we have this set count function is so that we can simply provide a new updated value but we will never ever want to run an equal sign after our state value so let me put this back to count plus one we'll see that this is working and now i want to update our challenge to finish off the basic portion of this app okay your task is to add functionality to the minus button now of course clicking the minus button should decrease our number by one pause the lesson and see if you can figure this one out all we need to do is to create a subtract function instead so i'll create a new function called subtract of course this one should take count and subtract one and then we need to add our on click handler for the minus button so that will go right here subtract and once i hit save we should be able to go backwards as well awesome great work however i do have a little bit of bad news although we were able to use our count state value here in order to help us determine the new count it turns out we're not actually following best practices when it comes to using this state value here so in the next screencast we're going to see another way that we can use the setcountsetter function to update our state value although currently it's technically working for us to use our current state value in order to determine the new state value when we're setting our count it turns out there's actually a better way to use set count in this case whenever we need to use our old version of state to determine our new version of state we've seen how we can simply provide a new value to our setter function however there's another way that we can use this setter function and that is to provide a callback function inside when we provide a callback function as the parameter to our setter function this function needs to return the new value that we want state to be if we essentially wanted to recreate what we did by passing a simple value to our setcount function we could just have our callback function here return count plus one however this is where the best practices comes in anytime we need to use our old state value to determine a new state value if we provide this function react will pass this function the old value as the parameter here what we can do is then take this old value and use that as our reference to what count was at the time that this function was called this might be really confusing at this point it would require us to jump a little bit deeper into how react handles state changes and rerenders to truly understand why this is best practice for now i think it's going to be enough to simply say if you ever need to use the old value of state in order to determine the new value of state you should just always plan to pass a function to set count this might be a little disheartening because this already looks way more complicated than what we had here fortunately if we use arrow functions we can simplify this quite a bit i can just say given the old value return old value plus one usually what i'll do is use the prefix of prev and then use my state value so i'll say preview count as in previous count so this is the convention you'll usually see me using whenever i'm using a callback function as my parameter to set count because that was a little bit confusing i'm going to type this out as a note so that maybe those of you who are more visual learners will be able to comprehend it a little better so again if you ever need the old value of state to help you determine the new value of state or in other words if the new value of state depends on knowing what the old value of state was you should always pass a callback function to your state setter function instead of using the state directly like we're doing down here then this callback function will receive a previous version or the old version of the state value which you can then use to determine the new state value with that said let's do a quick challenge okay your challenge is to update our subtract function to use this callback function as the state setter instead of what we currently have pause the screencast and update our subtract function fortunately with arrow functions this is still very concise i can say precount arrow precount 1 and just for demonstration when i refresh this you can see everything is working exactly the way as it was you're obviously more than welcome if you're really curious to deep dive into this do a bunch of google and youtube searches to truly understand why this is better frankly i would say probably 90 of the time you would never notice the difference between what we used to have and what we currently have however it is generally accepted as best practice to do it this way and all of this is not to say that there's no instance in which you would want to just provide a bear value for your setter that certainly does happen still but in the spirit of teaching you best practices in react it's probably good enough just to understand what i'm talking about here in this note and to move on a good practice at this time might be to delete everything that we're doing dealing with state here and to try and recreate it from scratch maybe as a way to test your own skills to see if you are truly comprehending what we've done so far when you feel like you've got a good grasp on this let's keep moving forward let's pause now and do another quick quiz like you've done before pause the screencast click into the editor here actually type down your answers to the questions that you see here and then we will go through the quiz together pause now and work on the quiz okay number one you have two options for what you can pass into a state setter function like set count what are those options well option a is to pass in simply the new value of state so if you call set count and you provide a new value like 42 whenever this function gets called state will automatically be updated to the number 42 and option b is to pass a callback function and then whatever the callback function returns we'll say whatever the callback function returns will be the new value of state and then numbers two and three both refer back to the answer to number one so when would you want to use the first option in our case the new value of state this is any time you want to update your state and you do not care what the previous value of state was or rather you don't need the previous value of state to help you determine what the new value of state should be and then the answer to number three is basically the opposite of number two it's whenever you do need the previous value of state to help you determine the new value of state under the hood react is doing some relatively complex things to make sure that it can maintain state for you one of those things has to do with batching a bunch of different state changes together so if you were to run two state setter functions back to back the way that react handles it may or may not run one of them before the other that's a very high level overview of why we need to do this but when we pass a callback function to our state setter function we can be guaranteed that the value that callback function receives which in the previous lesson we were calling precount we can be guaranteed that it will receive the most updated correct version of that so that it can update state correctly if that didn't make any sense that's completely okay that's really why i didn't want to dive too deep into it because at this point it truly is enough to know that if you need the old value of state to help you determine the new value of state you should pass a callback function otherwise you don't need to pass a callback function okay i'm probably beating a dead horse at this point when you're ready let's keep moving forward now that we've learned how to create and update our state let's revisit our meme generator we figured out earlier how to get a random url for a meme image however the conundrum we ran into was that we couldn't update our user interface with that image because react wasn't listening to our local variables now that we know about state we should be able to add an image to our meme generator so your challenge is to first create a new piece of state called meme image that will just start with an empty string as a default and when the get meme image function is called you'll save the random url which we still have access to right here in the state for meme image once you've done that you should be able to add an image element below our div here with the form that has its source set to the new meme image state that you created as a bonus you may want to add some styling so that the image stays confined within the space that we're working with here pause the screencast and work on adding an image to our meme generator right near the top here i'm going to create name image and set meme image which will come back from react.use state the initial value is an empty string down in my get meme image function we can call set name image and now think for a second do i need access to the old state the old string here in order to determine what my new string should be and the answer is no i don't care what it used to be i'm completely replacing it with the new url which i can get through memes array at the index of randomnumber.url and that should complete these first two tasks lastly i'm going to use my new meme image to create an image element and give it the proper source name image let's hit save and well it says we have an error let's go ahead and just see what happens i'll click get a new image and look at that we've got an image now obviously it's pretty large let's see if we can just add maybe a class name and for now let's call it maybe meme dash dash image in my styles i'll add name image and let's say it's got a max width of a hundred percent hit refresh click get a new meme image and look at that now i don't know immediately what this error is coming from i think for now i'm going to ignore it and we'll see if we can figure it out later down the road awesome work now this is just the beginning we have a lot left to learn about state but don't let that be daunting it's going to be really fun so when you're ready let's keep pushing forward at this point it will be helpful for us to practice the ternary operator whether you've learned it before or not i've written some very basic javascript here we just have a variable called is going out that is set to the boolean true and then we are using that value to determine what the answer should be that we display in our h1 over on the page obviously if is going out is true then we'll say yes and otherwise we'll say no if it's been a while since you've worked with the ternary or you never really fully grasped it i've included a link here to the mdn docs on how to use the ternary operator so once you feel prepared pause the screencast and see if you can clean up our code using a ternary a ternary allows us to put an if else statement onto a single line technically you can also manage if else if else statements and get as nested as you want by using nested ternaries but at that point i really don't see a reason in using a ternary it becomes much more difficult to read than a simple ifelse statement so here what we're going to do is set our answer equal to and then we'll use a ternary to determine if we are going out so i could say is going out is true and then i use a question mark that says if this is true then i want you to use this expression in other words i want let answer equal to yes the string yes otherwise this is my else i'll say i want answer to equal no i can get rid of all this down here and i've been able to clean up my code from before to a single line and if you're not terribly familiar with ternaries the more you see this the more natural it's going to seem this is actually a really easy thing for me to read now because i've seen it so many times so i can hit save and everything is working here we can see if i flip this to false hit save then we get the answer no i can simplify this ternary even further because is going out is already a boolean i don't necessarily need to equate it equal to true so i can simply say if is going out in other words if this is true or a truthy value then set answer equal to yes otherwise set it equal to no and of course we get the same values switch this to true no will change to yes awesome okay let me tweak this challenge just a little bit there's one more way that you will oftentimes see a ternary used in react and that is when the ternary actually exists inside of our markup if you remember our curly braces allow us to put javascript not just variables but entire expressions directly inside of our jsx so your challenge is to move the ternary inside of the h1 in the jsx and as a hint you will no longer need the answer variable at all pause the screencast and see if you can figure out a solution to this challenge all i need to do is take this part of my ternary here and replace answer with it and then i can get rid of my answer completely now what will happen is every time my component renders it will check the value of is going out and it will determine whether the string yes should be used as the text of this h1 or if the string no should be used as the text of this h1 so just like we had before i can hit save we get yes because our value is true and if we switch it to false we get our answer of no awesome this sets us up perfectly to work on the next challenge where we will actually save this value in state and then flip it back and forth between true and false and that's what we'll work on next similar to last time we have the question do i feel like going out tonight i've hard coded this time the answer yes but you will want to change that in the challenge so your challenge is to initialize some state for a variable called is going out and you will just begin it as a boolean you can choose true or false as the default and then make it so that clicking anywhere in this div will flip that boolean value from true to false or false to true and then instead of a hardcoded yes you should display yes if is going out as true otherwise it should display no this rolls together the topics of the past few screencasts so if you need to look back and remind yourself how everything works that's completely okay pause the screencast and work on this challenge to initialize some state i will simply use react.use state as a reminder you could also decide to pull in use state as a separate method from the react library by destructuring it up here i'll set the initial value to true and i will save it in a variable that i will use destructuring on because i receive an array back and we'll use is going out and i will by convention use set is going out as my function name next i need to make it so that this div when it's clicked will flip that value there's a few different ways i could do this in fact i think i'll show you them i'll set an on click here and one way that you may see from time to time is somebody providing an arrow function directly inside of your on click one benefit of this is that you can just declare it right here and it is nice and concise short and sweet in fact i'll start going down this path and then i'll probably change to move this function into its own defined function outside of my return but let's go down this road for a second when a click on this div happens i want to run this whole function and the main thing i want this to do is to use set is going out and now i need to think do i need the old value of state to determine the new value and yes in this case i do i need to know if it used to be true then i want it to be false if it used to be false i want it to be true now think to yourself when i need to use the old state what do i need to provide as my parameter to my setter function here if you said i need to provide another callback function then you were right and that's because this callback function will give me the previous version of state that will help me determine the new version of state and now that i've typed that out i can see that this is already a little bit crazy i have an arrow function calling this function which takes a function as a parameter and it becomes one too many levels of inception for me so i'm going to move this to a function out here let's call it change mind and it's going to run set is going out and then i can replace this all with just change mind which looks a lot more concise and to me at least is a little simpler to read with set is going out i'll take my previous version of state you can call this whatever you want and we will return the opposite of whatever previous state used to be now this is a little shorthand trick that i've learned over the years if you did something more like an if statement that says if grieve state was true then set it to false and if it was false then set it to true that's completely okay this is another instance where a ternary might be useful we could say if state is true then return false but otherwise return true but all of that is a little bit unnecessary because i can simply say just return the opposite of what it currently is now last but not least i need to change what is actually displaying on my page now if you struggled to get to this point first of all i'd recommend going back and reviewing what we've learned keep practicing until this first portion of what we just did makes sense but before you do that i'd also like to encourage you to pause the screencast and see if you can apply what we learned about ternaries and what our current value of is going out is to determine what we should replace our yes with here so if you weren't able to complete this far then pause the screencast and try to figure out what we should put here in our h1 well we can just put a ternary directly in line by putting a set of curly braces to tell us that we're going into javascript and i can use a ternary that says is going out is true then i want you to display yes but otherwise i want you to display no and at this point we should have everything completed let's open this app we'll refresh it and when i click it changes us from yes to no one thing i like about using a boolean for our state here is that it's a lot more realistic to a real scenario i could have possibly made things a little bit simpler by just having this be the string yes or no i would obviously need to change this down here and say if previous state was yes then change it to no and if it was no then change it to yes but personally i like the separation especially if i'm going to use variable names that start with is or has that indicate a boolean to just use a boolean like true or false and then translate that true or false boolean value into something that makes a lot more sense for a user to actually see on the page again if any part of this was overwhelming or too confusing or you weren't able to do this from memory then i highly recommend going back reviewing this trying to do this challenge again don't just push forward but all in all you are doing a great job whether you understood this or not you've gotten very far also don't forget to take breaks stand up if you need to go get a drink of water and when you feel refreshed and ready let's keep moving on hey this looks familiar this is the little app that we used when we were learning about how saving local variables does not update our ui and now that we've learned about state to start us off your challenge is to convert the code below to use an array that's held in state instead of what we currently have with our local variable here you can just initialize the state as an array with these same two items and if i were you i would call the piece of state that you create things array just like we had before so we don't have to change anything else in our code here pause now and work on this challenge let's go ahead and create in fact i'm just going to reuse what i have here i'm going to put this into an array and have a setter function that says set things array and that will equal react.use state which i will initialize with this array and well let's hit refresh i think this should work just fine okay well this is showing up at least that tells me that things array still contains my two items the last piece we need to fix is making it so that our add item button will add something to our things array however the reason that i'm making this video is because there is a small gotcha in here and that is that it's tempting to want to do something like things array dot push however i want you to think for a second what is wrong with saying things array.push if you remember back we should never ever directly modify our state in this case our state is things array and here i'm directly modifying it dot push is a destructive action it modifies the original array and therefore we would be changing things array ourselves and this just isn't a good idea in fact not only is it not a good idea but if i try to do it let me put a test in here hit save and add item you can see that nothing is going to happen here okay so we know we need to use set things array in order to modify our state which will actually update the user interface on our screen so let's use set things array and if you remember back with settings array or whatever setter function i have i can provide one of two options here pause and think for a second what are the two different options that i could put into the settings array well i can either provide it with and i'm going to put these inside of angle brackets to show you this is not real syntax i could either put in a bare new value completely replacing the old value of state with this new value or i can provide it with a callback function and that callback function would receive as its parameter the old version of state which i can use to determine the new version of state so now i want you to pause for a second and think which of these options should i use should i use the new value option or should i use the callback function option well if i just provided a new value then i wouldn't really be able to add anything to my existing array i would be simply replacing my existing array because what i want to do is add an item to the array that means that i do depend on what the old version of state or the old array is in order to determine my new array so i need to provide a callback function here i'll do this as an arrow function and i can put in my let's say prev things array or i could simply say preview state if i wanted to i'll keep it as things array so it's contextual and now that i have gotten this this far i want you to pause and see if you can figure out what i need to add or what i need to return in this callback function to correctly update my array with the new thing that i want to add and if you remember every time we click add item we want to determine the length of the array and just add thing space and then the new length of the array so it should automatically put thing three when i click add item this one can be a little bit tricky if you spend more than maybe five minutes or so without figuring it out you can just hit play again and i'm gonna show us how to do this but i do want you to pause and see if you can figure this one out another really tempting thing to do at this point is to say grieve things array dot push however again this is not correct this pre things array is still a reference to my existing state and using dot push on it is not a good idea because that would be modifying state directly not only that but dot push actually doesn't return the array that is modified it returns the new length of the array so this would be like replacing all of our state with a number which would just be three so i guess in two ways this really isn't going to work for us remember i need to return a new version of state and my state starts out as an array in fact my program expects things array to be an array because i'm using dot map on it so i need to make sure that when i'm setting a new array that i return a new array this is a new version of state fortunately with es6 there's a really easy way for me to spread in my existing array which i have access to with prethings array which by itself would get me an array of everything that used to be in there so this is not yet updating it however i can very simply add a new item to the end of my array these are strings but i'm going to be using some javascript to determine the array length so i'll use some template strings here and i'll say thing space and then interpret some javascript by saying preview things array dot length and because that's the previous array and it's not zero indexed and i want this to say three i'm going to add one to it in other words my previous array was two items long and i want it to say thing space three so i'm adding a one at the end this is getting a little long so i'm going to put this on to the next line which means i then have to use a return and well let's just see if this works i'll hit save add item awesome look at that we've got things adding to our list with the correct numbers and everything if you're feeling hazy or forgetting the array spread operator and how this works that's totally okay although i would recommend that you go study up on the array spread operator because it's so useful you're going to find yourself using it all the time especially in react however this isn't the only way to do this there certainly are other ways to make a copy of our original array or to return a new array we could even use a for loop that loops over this array and pushes those items to a brand new array then we add our string here at the very end before we return that whole new thing obviously this is why i'm saying you should just go focus on learning the array spread operator because it's extremely useful okay i do have one big challenge for you okay it's time to put all the knowledge that you've learned lately together into this challenge in fact if you want an extra challenge you can delete this line where we set up things elements where we're mapping i figured because it's been a minute since we've looked at this i wouldn't necessarily make you do this but if you really want to challenge yourself you can delete line 13 here and try to do everything completely from scratch like i said i'll leave this here just in case that's a little too much to bite off at this time so see if you can build this all again from scratch let me refresh this so we start from a new spot of course this is broken because some of the values are missing pause the screencast and see if you can bring this back to a working state okay let's do this i'll use things array and set things array as the values i get back from react.ustate i'll initialize my values with thing one and thing two and i need to spell things right then we will use set things array using the previous array i could say previous things array or previous array maybe this time i'll be a little more generic and just say grieve state and this will return a new array that has all the items from preview state as well as a new item which says thing space and then the number of brief state.length plus one of course if i leave this on the same line i don't need to open curly braces and use the return keyword just in case this is bleeding a little bit long for anybody i am going to put it back that way and hopefully this didn't drive too many of you crazy you can see i refresh and everything comes back i also had taken this on click out sorry if that threw anybody for a loop i'm going to add it back in and say when the button is clicked i want you to run add item which will run the set things array function and do all the stuff that we just typed in there i'll hit save awesome we're working again i really hope that you attempted that challenge i know that might have been difficult but truthfully that's where the learning happens you won't be able to truly internalize these things that we're learning unless you put your hands on the keyboard and really challenge yourself in fact i would say that as you come to challenges in this course and really any course on scrimba if you don't immediately know the answer don't just hit play go to google ask the community go back to previous lessons in that course do whatever you can to try and figure it out on your own and then of course if you are completely stuck you can always hit play in the next cast we're going to see something similar but working with objects in state instead of arrays in state now let's see what it looks like to use an object in state here we have a simple contact card it's got a first name last name phone email and a property called is favorite to kick us off i want you to see if you can figure out how you might fill in some of these values below instead of using the hardcoded values using the properties from state of course they will look exactly the same because i just copied and pasted these values from the state up above but you can always test it by changing one of these values in state and seeing if it reflects on your card there pause the screencast and work on this challenge let's start with the name we have the first name and last name together inside the same h2 but they're separated in the state up here the simplest way to do that is simply to put the first name in its own set of curly braces put a space and then the last name in its own set of curly braces now because my state is an object i need to reference the entire contact and then use the dot syntax to access its properties so i will say contact dot first name and then the space which will be interpreted as an actual space in the markup followed by contact.lastname hit save nothing looks like it changes that's good if i change this to jane our contact changes great and then i can simply do the same thing for these other properties this is contact.phone and contact that email now i mentioned that we're going to ignore the is favorite property for now i have another challenge that i'm going to type out now you might notice in the images that we have two separate pngs one called star empty png and one called star filled png right now we're just using the star empty png but if this were filled and let me comment this out so it doesn't break our code you'll see that it fills in the star nicely as if this contact were a favorite of yours however following the declarative nature of react we want the is favorite property to be the determining factor as to which of those two images gets used so your challenge is to use a ternary right here in this line i'll uncomment this now to look at the contact.is favorite property and determine which of the following file names should be used based on the value of the is favorite property then you'll want to use that star icon value which will just be a string here to figure out what the source should be for the star image in fact i'll add that to our challenge okay best of luck pause the screencast work on this part of the challenge on line 21 i'll replace this comment and we'll simply look at contact dot is favorite i technically could equate this to true or false but because it's already a boolean i just need to say contact that is favorite if so i want to use the star filled png and otherwise i want to use the star empty png and now that i have a value for star icon i can simply replace whatever is here with star icon you'll notice i had put backticks here to begin with just to make things a little easier that's because i knew you were going to be putting in an interpolated value like that i'll go ahead and hit save everything looks the same but now if i change my is favorite from false to true in the hardcoded initial value we get a little filled star now that we've learned how to apply state that's in the form of an object to our actual markup in the next screencast let's learn about how we can update state when state is an object our goal is to be able to click the star icon and have it flip our is favorite value from true to false or false to true however currently our is favorite property is nested inside of this object when i call set contact i need to provide a new version of state to replace the old version however in our case i don't want to replace any of this other information i only want to change the is favorite value many people's first thought is to use set contact and here you'll see i already have set up a toggle favorite function which is called anytime the little star icon image is clicked right now it's just console logging toggle favorite a temptation is to use set contact look at the previous contact information and return and i guess for simplicity i'll put this on its own line we'll say return an object where the is favorite property is the opposite of the previous contacts is favorite property however there is a major problem with doing it this way i'm not going to hit refresh yet but i do want you to pause the screencast and see if you can figure out what mistake i have right here remember that in this callback function whatever i return from that function will become the new replacement for our contact state currently i have an object with five properties first name last name phone email and is favorite but what i'm replacing it with is an object that only has one property is favorite so if i hit save and then click our toggle favorite you'll see that all of our other information just disappears however it does look like our star is working i can click our star and it is correctly flipping back and forth but obviously this is a bug if you do happen to be coming to this course having had experience in class base react this might seem confusing to you if you've never worked with class base react you can ignore the next thing i'm about to say but in class base react when you use this dot set state it would automatically figure out how to combine your old object with the new property that you're trying to replace it with however using hooks with react.ustate no longer does this okay everybody can tune back in now the main point is that i need to make sure that i bring in all of the properties of my old object and then replace the one or two or however many properties you need to replace in what you're trying to accomplish a very simple way for me to do that is to spread in all of the properties of my old contact and in this case i have access to the old contact using preve contact so i'll bring in all of the properties and this by the way does include the is favorite property but then i will overwrite the is favorite property with a new value in effect it's like taking this whole thing copying it pasting it in just like this where we have our old first name old last name old phone old email the old is favorite and then we're saying actually i want a different is favorite believe it or not this is not a syntax error instead it just takes the second one that's declared or rather the last one that's declared and uses that as the actual value for our new object this is much more verbose than it needs to be so i will use my spread operator instead like i had before i'll hit save notice this is filled in because my value is true by default i should probably set that to false by default and then when i click it all of the other information stays the same except for the value of is favorite which is then redetermining which icon is going to be used based on that contact is favorite property i totally understand that this can be complex this was one of the more difficult things that i had to grasp when i was first learning how to do state and react so to see if you were paying attention this is your time to shine your challenge is to simply rebuild what we just had again if you get stuck and you don't remember the syntax don't just hit play and watch me do it open a new tab do a quick query on google see if you can find a resource that will help you figure this out or even go back earlier in the screencast and see how i did it so that you can then come back to this point and type it out yourself so pause the screencast and see if you can rebuild our toggle favorite function okay let's do it we're calling set contact we do care about the previous value of our state in order to help us determine the new one not only because we need to know what the value of is favorite was but also because we want to make sure we maintain all of the other properties so in that case i'll use my callback function i'll let it pass preve contact to it and i will use that to return a new object and here's actually a quick aside it might be tempting to say well i just want to use the implicit return and say take this function return an object however these curly braces are being interpreted as the opening part of the function body if i do want to literally return an object i need to surround my object with another set of parentheses this looks a little bit crazy maybe just to show you that it works i will leave it here and for brevity i suppose so given our previous contact i want to return an object that has all of the values of our previous contact but changes the is favorite value to the opposite of whatever it currently is i'll hit save it's empty by default because is favorite is false and i can toggle that on and off i hope that challenge went well if you felt like it was a struggle then of course as always you can go back and try it again as i've always said the easiest way to learn something new is to do it the hard way and i imagine some of you out there when you saw me delete all of the code inside of here maybe had a little panic moment and he thought oh no he's going to make me do this by myself but your growth in understanding of react will only happen as you type this stuff out yourself watching me do it alone is not going to help you learn it so as always once you feel comfortable enough that you could write this out again all by yourself that means that we're ready to move forward when we last left the meme generator we were getting a weird unknown error being thrown from react i looked into it and i realized that it was because we were initializing state as an empty string and react was not taking too kindly to having our image source set as an empty string so i just went and grabbed a placeholder image for now and that seems to have gotten rid of the error just thought i'd give you a quick update on that error our challenge in this screencast is to update our state so that we can be well prepared as we learn more to save that state and ultimately finish our meme generator so your challenge is to create an object in state we'll call it meme and it should have a property for the top text bottom text and the random image that we choose you can default the top text and bottom text as empty strings and i would default the random image to the string that i have below so that we don't get that same error we had before next i want you to create a separate state variable called all meme images this all meme images variable is going to hold an array of all of our memes data which for now you can default to the memes data array that we imported up here then lastly you'll want to update the rest of our code to use these new state variables so that in the end we have a working app the way that it's currently working so pause the screencast and work on this challenge let's comment out our old state here just so we don't get confused and we'll create some new state with meme and set meme equal to react.use state and this one's going to be an object so i'll put my curly braces and we'll put in our three properties we have top text which is an empty string bottom text also an empty string and random image which will be the same as what we had before in our old meme image state variable then we need another state variable so we'll create a new one we'll say this is all meme images and we can say set all meme images as our function here react.use state and the initial value is going to be our memes data array that we imported above with those set up we really just need to update the rest of our code so anywhere i was directly accessing memes data i'm now going to use all meme images and then we have a bit of a gotcha here before when we were just saving the meme image as a string we were able to just completely overwrite whatever the old string was and replace it with the new url however now the random image which represents our new version of meme image is nested inside of an object so first of all we need to use set meme instead of set meme image and instead of what we had before we do need to look at what the previous meme was in order to determine the new one because we have properties like top text and bottom text that we don't want to lose i think i'm going to save this as its own variable so i'll say url equals the memes array at the index of randomnumber.url just to make my life a little bit easier and now i'm going to access the previous meme and return an object i'll surround it in parentheses so i can use my implicit return we'll pull in all of the properties of the previous meme and then we will alter the random image property to be our url let's scroll down and see down here we have on click get meme image that's still going to be the same because that's our selfdefined function however here instead of meme image we want to say meme dot random image and let's cross our fingers we'll hit refresh i can click get a new meme image and awesome we're working just the way we were before obviously our top text and our bottom text is not yet doing anything but we're first going to have to learn about forms and inputs and how to save state which will be happening later down the road all right awesome work let's keep moving forward at this point we've learned to use a number of really cool tools and react like state and props now we get to start using those tools in creative ways and putting them together your challenge here is honestly pretty contrived i can't think of a reason why you would actually want to do this but for the sake of practice i want you to create a new component named count which will essentially replace these three lines of code in other words you'll create a new component name count it will render this div with this h1 and in an effort to practice props we're going to pass that new count component a prop that we'll just generically call number the value of that prop number should be the value of our current count i promise this isn't just busy work we are building toward a point pause the screencast and work on this challenge okay i'm gonna do this working backwards so my div here i'm going to cut this but keep it in my clipboard so i can paste it later and i'll render a component called count which i obviously haven't yet created we said we're going to pass to it a number prop and i'm going to set that equal to the current value of my count up there now i need to import it if i'm going to use it here obviously it still doesn't exist but we'll just pretend it does so i'm going to import count from a file called count and then i need to create that file and work over there so i'm going to create count.js import react from react and i'll just spin up my basic component here called count and i need to make sure that this is receiving props because i'm going to use that number prop i'll have it return and i'm just going to paste that div that i had before okay and now it doesn't have a count variable anywhere in here remember before this was referencing the state value of count but now i'm receiving it through prop so i can say props dot and it's not props.count because the prop we passed to it was called number props that number i'll hit refresh and you can see everything is working exactly the way it was before now as i mentioned this is pretty contrived i can't imagine why you would care to put a count component in its own component that just displays a number especially when it's only three lines of code unless for some reason you are going to be reusing this component in different contexts around your application let me clean up this challenge and then we'll talk about why i had you do this as i've mentioned we've learned how to use props for a component to be able to receive values like we've done here and we've learned state and how to have a component declare its own values that are intended to change and update the user interface when those changes happen and now all we're doing is we're combining those two concepts we are still initiating state inside of our app component but then we're passing that state value down to a separate component called count and it's receiving that value as props now we're going to see something cool that react does let me inside of my app component console log app component rendered anytime react creates an instance of our app component which is happening here in index.js it will run this function and part of that function will console.log app component rendered then we'll go ahead and do the exact same thing in the count component and we'll change this to count component rendered now before i hit refresh as a reminder the word rendered simply means that it placed the elements that react knew it needed to place on the screen so when i say app component rendered it means that it took the markup of our app component and it painted it to the screen or it placed it on the screen it created the dom elements and the styles that it needed for it to display correctly on the screen and you can see there's a sort of cascading effect here over in index.js we render an app component when we go to app we see that it renders a count component and it's doing that down the line so it will first say app component rendered i'll open the console and hit refresh we see app component rendered and count component rendered now there's a really cool thing that react does for us and that is whenever state changes it will rerender the component where the state exists and any child components that may rely on state to be working correctly and if you think about it that makes sense if i'm going to change my state from 0 to 1 i'm going to need my component here to rerender which will then cause this count component to rerender and it will pass the new value of count and that way it can very quickly and seamlessly update what i see on the page just by rerendering those components we're not going to dive deep at this point into understanding exactly how react is rerendering which components it's rerendering and optimizing which components it's rerendering that's a topic for a more advanced course but for now it's a good experiment to have these console logs here and see that every single time we change our state it's rerendering the component in which the state is declared and any children components like our count component here that may or may not depend on the state value for count awesome now we've seen an example of a child component receiving a state value via props now we'll look at how a child component might be given access to make changes to its parents state okay here we are back at our little contact card with the favorite icon your challenge to start us off is to move the little star image just this one little image element into its own component and maybe we'll just call it star that'll be the name of the component and it should receive a prop called is filled that the star component will use to determine whether the icon should display the filled png or the empty png then inside of this component here you'll need to import and render the new star component and make sure to pass the correct value of is favorite our contact dot is favorite to that is filled prop at this point it's not going to work the way it was before where we could click it and flip it on and off for now in order to test it you can simply change this value from false to true and it should if it's working correctly display the filled in star when you change that to true there's a few different moving pieces here so this is a slightly more difficult challenge than the ones we've done up until now but i know you'll be able to do it pause the screencast now and start working on this challenge once again i think i'll work backwards i'm going to cut this image out and i will render a star component which i have not yet created i'll give it this is filled prop and it will be the value of contact dot is favorite let's import this and then we'll go and create it so i'll import star from dot slash star and then i'll create that file star.js okay and in this case i need to make sure that i'm receiving props because i will need them i'm going to return and then this image element i'm going to get to this on click in just a second but for now let's figure out our star icon i'm going to just set star icon equal to and then actually i'm just going to go take exactly what i had here and then make a slight change okay now we don't have access to our contact state because we're not passing it down however we do have a replacement is filled and that's part of props so it's props that is filled and then this will determine which image should be used let me remove my on click so i don't get an error we'll hit refresh and see if we missed anything okay awesome now my star is empty and that's because this value is false let's test this by changing it to true and the stars failed awesome and at this point i can remove this line because i'm not needing that anymore and at this point that leads us to the topic of this screencast and that is how do i make it so that i can change this value clicking it is not doing anything the conundrum that we have is that we have a child component that's receiving the value of his favorite through props but it is not receiving the ability to change that state so think for a second how can i give my child component the ability to make changes to the state that lives inside the parent component which is app in fact i want you to pause and try to think through a solution to this you don't actually have to type it and try it out but just try to think how could i give my child component the ability to make changes to the state that lives in the parent one thing that can be tricky when you're first learning react is the thought that you can just add a click event listener on your star component so what if i just said on click equals toggle favorite let me hit refresh and click this and you'll see well it's not quite working why do you think that this isn't enough for this to work remember when we have a component that we created a custom component that we created all of the properties that we pass it are custom properties so simply putting on click here doesn't magically register it as an event listener the on click attribute needs to exist on native dom elements like these ones that begin with lowercase letters that's because these are what will actually get created into real dom elements by react however star with a capital s is not a real dom element instead what's happening is react is looking at the star component and it's rendering this image this image has the ability to receive an on click event listener so what i could do is still pass on click here but realize that on click is just a custom prop that happens to be called the same name as the event listener in fact oftentimes this will be changed to handle click just to make it very obvious that it's not a native event listener and then over in our star component i can add a real on click event listener and say the value of this on click will be the function that comes from props dot handle click in this case my app component is passing this toggle favorite function to a child component and allowing that child component to run it whenever a certain event like the click event happens however it's important to note that the context in which the toggle favorite function exists is still here in the parent which means that it can change the state that lives inside the parent let's hit refresh we'll click our star and we see that we're back to working the way we thought so as a recap we created our toggle favorite function we passed it to our custom component in a custom prop called handleclick and then over in the star component it's receiving props and it's registering a real event listener on click whose functional value is the function that we received through props dot handle click the ability to pass state setter functions like this one down to children components is especially crucial in react and that's due to the fact that the way that reacts hierarchy is set up when it passes data and this is what we're going to talk about in the next lesson at this point i think it's worth taking a high level look at how data is passed from one component to another in react let's imagine we have a fairly simple app which has the following components just represented by rectangles for now in this tree this top component represents a top level component for example our app component in a system set up like this and the lines indicate that this top component is rendering these other components in some cases that component may just render regular dom elements like divs and h1s or it may render additional custom components like we see in this box where it's rendering two other components i didn't put any names on here because that's not that terribly important the point is that there is a parent child relationship between these components let's imagine on one of these bottom level components we initialize some state and then we find that a sibling component in other words a component that is also rendered by the same parent is in need of some of the data that lives in the other components state well what exactly can we do then think for a second is there a way for us to pass that state to a sibling component it turns out that no this is not possible and that's because if you look in the file of a component that has a sibling component it has no reference or knowledge about a sibling component on its own if we look in our code here we have an app component that is rendering a header component and a body component but if we were to go into let's say the header component we see that i've initialized some state here i can open up this preview so you see what we're working with and it's using that state but then if a sibling component like the body needs access to that state well the header has no idea that body even exists only its immediate parent app is the component that knows that both of these components exist so think for a second what is it that we need to do if we're facing a situation like this well what if we took our state in this child component and we raised it up into the parent component now that it's up in the parent component do we have a way in react to pass data from this parent component to the child components yes we do that happens through props so now the parent component is in charge of the state it passes the necessary state down to the child components that require it and they can simply consume the state if that state were ever to change react will update this component where the state changed and it will also update any children components as well and so therefore if that state changes that's being passed through props the child component can update as well as your application gets more and more complex you will find yourself having another component that sometimes needs access to that state as well and just like before there's no way for us to pass the state or any kind of data from one sibling component to another component but it's also important to note that there also is no way to pass data upwards in react this child component has no idea that this other i guess you could say uncle or ant component exists and therefore there's no way to pass data that way either so this brings us back to the same solution we had before we simply raise state up a level and we pass more props downward now over time this can get pretty tedious especially if your state ends up raising up multiple levels above the component that needs it in which case react does offer a solution to this called context there's also thirdparty state management systems like redux that can help solve this problem however both of those are beyond the scope of this course and we are just going to be sticking with regular state and props for now so that leads me to a challenge i want you to take the state that currently exists only within the header and raise it up a level into the app component and then pass it back down through props to both the header and the body then in the body now that it's receiving the state from above replace this underline with the state which is the name of the user pause the screencast now and work on this challenge to raise the state up we'll simply take this line where we're initializing our state and we'll move it into our app component and then i will pass those props down in this case it's a very simple state of just the string joe so we will create a prop maybe let's just call it user and we'll set that equal to our user state variable here then in both the body and the header we'll need to accept props and we'll display props dot user and in the header props props dot user clean up this challenge hit refresh and there we go now if i go to my app and i initialize my state differently say bob and good it updates in both places understanding that this is the way data flows in react can be really crucial in helping you architect your application in a way that you can share state amongst only the components that need it and in fact that's an important distinction to make at this point it wouldn't be a great idea to initialize state way up near the top of your component if you don't have components along the entire tree that need it now i'm not saying that every component needs to have access to that state for it to work but if this component down here is the only one that needs state there's no reason for me to put state in its parent or its grandparent and then pass stuff down through props as a rule of thumb keep state as local as you can or in other words keep it as closely tied to the component or components that need it as you possibly can with this under our belts i think it's about time for us to jump in and do a round of challenges to really exercise what you've learned up until this point and we will start that in the next screencast this is the beginning of a series of small challenges to really reinforce some of the past topics that we've been learning about the first thing i want you to do is to take a look at boxes.js you'll see i created an array of objects which have two properties id and on and your first challenge is to initialize some state inside of our app component with the default value being this boxes array and then i want you to map over that state array and display each one as just an empty square on the screen with a black border and a transparent background color i don't think you necessarily have to set it as transparent i think it'll just be transparent by default for now don't worry about using the on property at all although you probably will want to use the id property and i'll let you figure out why if you're using something like a div don't forget to set a height and a width in the style on it ultimately the goal is to make it so that if the box is set to on or on as true then the box will be filled in with a color and in the end we'll make it so that clicking the box will flip its on value from true to false or false to true but for now let's just get some boxes displaying on the page pause the screencast and work on this first part of the challenge we'll start by initializing some state so i'll say i don't know maybe for now we'll just call them squares and by convention we'll say set squares that's going to be from react.usestate and we'll pull in the boxes as the initial value then we need to map over the boxes i'll save my array of elements i'll maybe call it square elements and that's going to be squares.map for each square that we're looking at i want to return a div and notice here that i'm using parentheses instead of curly braces that's simply allowing me to use the implicit return to return the element and i'm just moving it onto its own line so it doesn't go too far to the left and right we'll give this div a class name let's call it box and actually this is a class name so it can just be the string box i also know because i'm mapping that i'm going to run into that issue where i need to provide a key in this case i can use the id property that's coming from each of these objects let's display our square elements and then we'll go into the style so that it will actually show up or rather i should say let's render our square elements i don't think they are going to look like anything on the screen yet it's just empty over in our style we'll set a style for box and we'll give it a height maybe we'll do 100 pixels and a width of 100 pixels we'll give it a border that's black and then maybe just so we can see everything i'll put these into a really simple grid just so that i can put them side by side a little better actually i might not even bother with that let me give these a display of inline block and i'll just put a little bit of margin right on them honestly this is going to be good enough for right now and awesome okay the main things that i wanted you to take away were to practice setting state or initializing some state and also practicing the dot map method to create an array of elements that we can display on the page as well as reminding you about this key property if i take this out i'm going to get that warning that react always gives if you use a dot map to create elements but forget to add a key prop so i will put that back in awesome work on the next cast let's do the next part of this challenge before we can do the next challenge we need to learn about the style prop you might be familiar with the concept that in html i can add an attribute called style and in here i can insert css code for example i could give my div with the id of root or actually you know what let's do this on the body i could add a style and say the background color is black hit refresh and sure enough my entire background color becomes black just like i can do this in html i can do the exact same thing in react however because it's react and it's javascript i can change the style dynamically depending on for example the value of our state or the value of incoming props on a component let me refresh this so we get our boxes back and actually i think i might just add a tiny bit of border radius to those boxes okay to add dynamic style i can add a style prop to my div and in react i'm not going to put a string the same way we did in html instead i'm going to provide an object now here's something that really confused me the first few times i saw it this set of curly braces does not represent an object it simply represents me entering into javascript outside of jsx or rather it allows me to put javascript inside of my jsx as we've learned before since i need to represent my style as an object i'm going to put a second set of curly braces this inner set of curly braces represents an object a javascript object and this first set of curly braces or the outside set of curly braces represents me going into javascript from jsx oftentimes to avoid any confusion what i'll do is i will not define that object directly inside of my markup but instead i will create a separate variable maybe called styles and set that equal to an object this makes it a lot more clear and i can just put styles directly inside of my markup here one thing to know about these styles is that they need to be camel cased so if i'm changing the background color i can't say background dash color because this is not a valid key name in a javascript object not only that but when i'm modifying the properties of a dom element you might remember that i could do something like document.getelement we'll say some kind of id and i can say dot style dot background color with a camelcase property name and set that equal to something essentially that's exactly what we're doing here we are setting the style attribute of our dom element to be an object hence i can use the dot syntax here and then i'm using the background color css property but of course in the camel version for javascript then because this is an object i'm not going to use the equal sign i'm going to use the colon to give my key a value and i don't know let's set it to black for now let me get rid of this equals so that actually let me get rid of that whole line since i don't want to be doing manual dom javascript here oh cool look i refreshed my styles which include a background color of black are now being applied as the style of every square that i'm rendering or every div that i'm rendering so why is this beneficial over just using css well because i'm using javascript i don't necessarily have to have a hardcoded black value here let's suppose for a second that my app component is going to receive a prop that's called dark mode in fact let's go over to index.js and we will say that the app component is receiving a prop called dark mode and let's set it to true for now over in my app i'm accepting props here and i will have a prop called props.dark mode and let's say that if my props dark mode is true i want it to be black and if it's false i want it to be i don't know something light well this is something i can use a ternary for and maybe i should be more specific this is something that you can use a ternary for using your knowledge of ternaries make it so that if props.dark mode is true it will set the background color to this hex value here and if it's false it will set it to this hex value here one important thing to note is that these values need to be strings because we're in javascript we're not in css pause now and work on this challenge let's take props.dark mode and we will put it here and i'll say if that's true then i'm going to use this string and if it's false i'm going to use this string and it looks like i might have deleted my curly brace there okay awesome now we can test this by simply changing my dark mode value from true to false and awesome look at that it worked great this can be a really fun one to play around with if you'd like you can pause and just play around with some of the other properties that we can change in the styles or you could try a little challenge of your own to see if the number of squares in this array is even then make them all one color or if it's odd make them all another color really your imagination is the limit here when you're ready we will move on to part two of our original challenge it's time for part two of this challenge i want you to move our div here into a separate component called box and then when you're mapping over our squares you will render that box component that box component should receive a prop called on and it will be the value of this square dot on from our original boxes.js each one of them has an on property and that value is what you're going to pass to your new box component then inside of that box component i want you to create a dynamic style like we did in the last screencast to determine the background color of the box if the box is on then you should set the background color to this hex value and if it's off you can just set it to the string none pause the screencast and work on this challenge let me create a new file called box js i'll set this up like normal i know that this component will be receiving props and i'm just going to copy this div and have that get returned now my key is going to be broken and actually i'm going to pass this key into the box component so let's go ahead and render our box component which will be self closing this class name is already handled on the div that box is rendering however i will keep the key right here the next part says to pass it a prop called on so i'll say on equals and then the value will be square dot on again each square here represents one of the objects in my array and that has a property called on let's just make sure that everything is working so far in my box component i will console.log props dot on and because i have six instances i should get six values here oh and of course i did not import my box component so i need to import box from box okay let's try that again awesome okay so i get my six values true false true true false false and that's matching perfectly with what i see in my data here then the last part of this challenge is simply to make use of props.on to determine what the hex value or the background color should actually be so using dynamic styles i will create a variable called styles and that's going to be an object where the background color is going to look at props dot on and if it's true it will be this dark color and if it's false it will be none then i can simply add a style prop notice that my variable is called styles you really can call this whatever you want however this attribute or this property needs to be style exactly that way so i'll set that equal to the object that i created above and i think i should see this one is dark it was true false true true false false so this one should be dark this one and this one should be dark and the rest should be clear and that's exactly what we get next we're approaching probably the most challenging part and that is where clicking the box will actually flip the on value from true to false or false to true i'll give you some hand holding in that challenge but honestly it's going to be a pretty fun one so that's what we will work on in the next lesson in the next two challenges we are actually going to be starting to dip our toes into some intermediate react topics here the concept of changing state is what we have been practicing this whole time however we're going to see two different ways that we could structure this project and talk about which one is going to be the better of the two i put together a little diagram to make this a little simpler to understand right now we have an app component and this app component is keeping track of an array of data we're then using that array to create box components for every item in that array and passing to those box components a prop called on which will have the value either true or false currently those box components are then taking this incoming prop and determining what the background color should be however at this point in time they have no way to modify that incoming prop keep in mind that in reality a component should never modify props in other words my box component should never say props dot on equals something different however we do have some ways that we can still make changes to the background color of our box and that's what we're going to be talking about the first way we're going to see is to initialize new state in each one of these box components and set its initial value to the incoming props.on value one benefit in doing it this way is the simplicity in allowing each box to then update its own state of course by doing so automatically every instance of our box component will also have the ability to update its own state when i first started learning react this was the most obvious way to allow each of these boxes the ability to flip its own value and so that's what your challenge is this time i want you to create some state inside of our box component you'll determine its initial value based on the props dot on value you'll also create an event listener so that when the div of the box gets clicked it can flip the value from true to false or false to true while you're at it don't forget to update your styles here in this ternary currently it's looking at props.on you'll want to make sure that you're looking at the local state instead of the incoming value of props.on and the last thing is a quick change i made in the previous screencast i had set this to none but it turns out this should actually be transparent if i want this to empty out the color so don't let that be confusing okay this is your time pause the screencast and work on this challenge in truth this is very similar to what we have already done so far i'll initialize some new state we'll call it on and it will also receive our setter function which i'll call set on by calling react dot use state the initial value should be determined by looking at props dot on i'm going to update this to not look at props dot on anymore but to look at my new state value of on and that way when i make a function let's call it toggle and it calls set on looking at the previous version of on and simply giving me the opposite of whatever that previous version of on was i can then set this up as a click event listener to run toggle should be able to clean this challenge up hit refresh and sure enough i'm able to flip the value now it's not readily apparent but keep in mind that what we've done is we've given each one of these boxes its own value of state so basically we've given it the ability to control itself we've given it the control over its on value now i understand the boxes seems a little bit contrived however this same concept would apply to something like a todo list for example our app would be like the todo list and each of these boxes would be like a todo item the value of on might be replaced with a value called maybe completed as to whether or not that to do item has been completed structuring it the way that we just did here every item in our todo list would be in charge of knowing if it by itself has already been completed or not when i first started writing react this seemed like the most obvious thing to do however i've since learned that there actually is a better way to structure our application so that state is only held in the app component in our example here there certainly might be situations where creating state in each one of the child components and initializing that state based on the incoming props might make sense however general consensus is that if you find yourself initializing state by using the incoming value of some prop there's probably a better way to do this and that's what we'll be diving into in the next lesson previously what we did is we created new state inside each of our box components and initialized that state based on the incoming prop of on and it turns out there's actually a name for when you create state that is initialized by incoming props and it's called derived state and i'm sorry to break this to you but it turns out that you probably don't need derived state this is an article that was written in 2018 you can click on the link it's in the react documentation it will probably get a little bit heavy if you're still a beginner in react but it turns out that there can be some weirdness that happens if you pass a prop to a component and then just take that prop and set state based on that prop if you think about it in app.js we actually created some state in app.js to maintain all of the squares already so when we set state in each one of our boxes we had state both in the app and in every one of our boxes which in the end means that there are two sources of truth when the box had the ability to update its own state it was not updating the state on the app component it was only updating its local state that it had derived based on the incoming props and because of that there were multiple sources of truth now certainly there are circumstances where derived state makes sense this article does talk about some examples of that however it's far less common than i think most people end up using when they're writing react applications and the whole reason i decided to talk about this in this course is to help you navigate a scenario that at least for me was really tricky when i was learning so we're going to approach this in a different way instead of putting state and a setter inside of each one of our boxes we're going to make use of the state that already exists in our app and instead we're going to create a function called toggle inside of our app component and then pass that toggle function down to each one of our box instances anytime one of the box components gets clicked it will run this toggle function and essentially tell the app component hey the state that you're maintaining needs to change then when that state changes let's say this first object gets clicked and it changes from true to false react will rerender the app component because its state has changed and therefore will rerender the box components but now with the first one having an on value of false you certainly are going to notice that this way of doing things is more complex however in the end it is a better practice than using derived state to manage our state because of the additional complexity i'm going to give you a challenge that has you doing part of this and then we're going to walk through completing it together so let's go ahead and get started the challenge is for you to create that toggle function that for now is just going to log clicked to the console then i want you to pass that function down to each of the box components and set it up so that when they get clicked it simply runs the function which means it will console.log clicked i've already removed the state from our box component so that isn't something you have to worry about pause the screencast and work on this challenge okay let's create a function called toggle simply enough it's going to console.clicked then we're going to pass that function to each one of our boxes we can choose the prop name we want sometimes i'll use what looks like the on click event handler but keep in mind that because this is a custom component it won't automatically register this as an event listener i think more often i'll choose something like handle click that makes it very clear that i'm talking about handling an event however i also could just give it the name of the function really we can do whatever we want here let's stick with toggle for now and we'll pass down the toggle function and now inside of box js i'm receiving a prop called toggle and this is where it does need to be on click with the capital c we'll use props dot toggle i'll hit save and clicking it awesome runs the function that we defined this is the point where some additional complexity needs to be added in in order for this to work correctly when each box was initializing its own state it was really simple to know which box was flipping its value because well each box was maintaining its own state however now with our toggle function the toggle function has no idea which box just ran its code so in my app component if i wanted to use set squares because squares is an array i need to figure out which of the items in the array triggered set squares so that i can update the correct one and leave all the other ones exactly how they were and this is where we are essentially forced to do something a bit clever and i figured at this point it'd be better for me to walk you through some examples of how we might solve this problem let me clean up our challenge our goal is to give the toggle function the ability to know which box was clicked so that we can correctly update the state array one way we could do that is to make it so that the toggle function takes the id of the box as a parameter however as it's currently set up this is not going to work and that's because in our on click here we really don't get to decide what parameter gets passed to our function every browser will pass an event handler function the event itself it's an event object that describes a bunch of information about the event in fact i can see that really quick here i will instead of console logging clicked let's console.log id which we're going to be disappointed in what actually happens i'll hit save click a box and you'll see i get a synthetic base event clearly not the id of the box that was clicked however we can work around this by instead of just blindly running props.toggle we can run our own function which then runs props.toggle this is the function that is going to receive the event however we're not going to make use of that so i'll just delete event and then this function can run props.toggle and now we have the ability to pass whatever we want here in this case what we should pass is the id of this box however currently we're not receiving that id sure i have this key prop however the key prop really is intended for something completely different and i'm fairly certain that if i even tried to access that key prop let's console log props dot key yeah i'm going to get a bunch of undefineds i don't have access to props.key inside of this component but that doesn't stop me from passing another prop let's call it ib and it essentially is the exact same thing now i do have access inside of box to props.id so if i console.log props.id i get the ids of each of the boxes and now i can use props.id to pass that information past the id to my toggle function now over in app.js if i console log the id that's coming in of course this will only run when i click it let me click the very first box and that is my id of 1 this one should be two three four five and six awesome this is great news because now i can use that id to update the correct square in my set squares function at this point i think this is something that you'll be able to do as a challenge this lesson is getting a bit long so that's what we'll do in the next lesson i'll admit right now this challenge is going to be a little bit tricky your goal is to use our set squares function to update the correct square in the array remember we're receiving the id and we just want to flip its on value from true to false or false to true however the trick is to not change state directly as a hint you could go back to the lesson on how we updated a raise and state if you need a reminder on how to do this however in that lesson we mostly just touched on adding new items to that array in this case we're not adding new items we are updating one of the existing items at this point it might be tempting to use an array method like splice however that is going to directly modify your state because splice alters the array that it's run on so don't let any of that scare you i really want you to try your very best to do this if after maybe 20 minutes you're still struggling on figuring this out you can always just hit play and we will walk through this together so let's have at it pause the screencast and work on this challenge okay we'll use our set squares function as usual we do need access to our old version of squares in order to determine the new value of our squares so i'm going to say previous squares and instead of getting really clever and figuring out a way to do this on a single line i'm just going to open up this function so we have some breathing room to create variables and do whatever we need in fact let me solve this in maybe the least clever way i can think of i'm going to create a new array we'll say new squares i'll set that equal to an empty array and i'll do a very simple c style for loop we'll say let i equals 0 i is less than previous squares dot length i plus plus and my goal here is to look at each square in the array of squares and if its id is equal to the id that our toggle function got then we will simply flip the on value to the opposite of whatever it currently is if we are looking at a square that is not the one with this id then we'll simply push that to our new squares array so let's say our current square is the array of previous squares at the index of i and now i'll say if our current square that we're looking at has an id that's equal to the id given to our function then i'll say maybe updated square is equal to an object that has all the properties of my current square except the on property is going to be the opposite of my current square dot on and then i have this new object and i will push that to my new squares array so i'll say new squares.push updated square however if the id is not the same so i'll say else we're just going to simply push the current square to our new squares array at the end of this for loop we should end up with an array that looks almost identical to the original array proved squares however one of the items should have a flipped value for its on property and so we can see this is getting a little bit long but there's my for loop at the end we'll simply return because that's what we need to do from our set squares function is return the new value of state we'll return our new squares array to be totally honest i haven't tested this out let's hit refresh see if this works oh look at that awesome let's walk through exactly what this is doing let me clean up my challenge to buy us some room here every time i click on one of these squares it's running the click event handler that we defined here that click event handler is running the toggle function that it received through props and passing in the id that it also received through props that toggle function is taking that id running set squares and running this function to determine what the new square should be we look at the previous array of squares and simply generate a new array loop over the previous array and when we run into the square in our loop where the id matches the id passed into toggle we create a new object that will replace the old object and push that to our array if the ids do not match we just push the current square in its current form without any changes made to our new array and we return that by returning this new array react will update our square's state array which means that it will then rerender this component remap over all of our squares and create six new box components pass the on value which was the same in five of the squares but different in one of them and then in our box component it will simply take that prop and determine what the background color should be all of that seems really complex i totally understand that but you can see it's quick and there really is no lag in doing this at all at this point we could just move on from this let's say it's a feature we're adding to some app we're creating however as we've learned react really adheres to the principle of writing declarative code what we have here is very imperative doing a c style for loop this way works perfectly without any problem so if you're happy with this you can just move on but i think it might be worth our time to take a look at how we might write this slightly differently using something a little more declarative instead of imperative so that's what we'll do in the next lesson i'm not going to bother making this a challenge this time i think i'll just walk you through how i often times will update an item in an array using a more declarative method instead of using a c style for loop like we have here so let me go ahead and just delete everything inside and i think what i'll do is use the dot map method to help me create a new array and return that array all in one go so i can say return the previous squares dot map and whatever i put into my map function here is going to help determine my new version of the array which then gets returned from my dot map and returned from set squares this is a lot of returns happening all in one but let's just see how i would do this i need to look at each square inside of my map and whatever i return from this callback function inside of my dot map is what will get placed at the same index in my original array in the new array that i return so what if i were to use a ternary that said does square.id match the id passed into my toggle function if so i want you to return a new object that has all of the properties of square except for the on property which is the opposite of square dot on however if the id does not match that's my else here then i can simply return the square the only thing i'm missing now is the return keyword i tried to leave it out in the beginning because these two returns can be a little confusing at first so fingers crossed let's hit save and look at that everything is updating beautifully obviously what we have here is a lot more concise in terms of lines of code but it does require a bit more of an advanced understanding of javascript to fully comprehend in my experience what i have here is not so clever that other software engineers would not understand it and therefore i personally would prefer a solution that looks more like this i would definitely spend some additional time understanding this if this is confusing but i will walk us through it one more time every time box gets clicked it runs this function not just props.toggle but this function that we've defined inline here that function will run props.toggle remember we did that so we could pass a parameter a custom parameter to props.toggle which we decided to be the id of the box itself then if we go over to the toggle function it will call set squares our state setter function and we need to use the callback function version of set squares because we do care what the previous array looked like so we look at the previous squares and we're going to map over those squares as a reminder.map returns a new array without modifying the original array that will have the same length as the original array and whatever we return from the callback function of dot map is what will get placed in the same index in the new array as what was in the original array what we're doing every time we loop over an item in this array is we're checking if its id matches the id this id here is the id that we passed into our toggle function if those ids match then that means it is the square that was clicked if that's true then i want to replace the old object with a brand new object which is why i have these curly braces here and this is crucial so that i'm not updating state directly this object is going to pull in all of the values of squared exactly as it was but then it's going to overwrite the on value with its opposite however if this is not the box that was clicked then just give me the old square in this case because i'm not making any modifications to it i don't need to create a new object and spread in the old square or anything like that i can just hand the old square object directly to my new array awesome work i really hope you were able to follow along with that logic this truly is something that just takes a lot of practice at this point one of the very best things you could do is just delete our toggle function completely and try to recreate it from scratch in the end this toggle function is the most complex part of what we have here so that would be a great place to start if you really want to challenge yourself i did want to show you one other rather clever solution that we could use instead of passing an id down to the box and that is that we could just say our toggle function that we're passing down just like we did inside of our box is going to be an individualized toggle function this entire function here however we can pass the square dot id immediately as we're passing this toggle function down in essence this creates something called a closure where each instance of our box will have its own toggle and it will remember its own id which means i can get rid of this id prop and over in box i can change this back to just toggle or rather props dot toggle if i hit refresh we can see that it's working exactly like it was before again awesome work i really hope that as you have followed me in this mini series on setting state and creating this rather silly little app that you have worked on the challenges that i've given you if you haven't it's not too late don't just push forward go back and work on these challenges make sure that you really understand everything that we've done so far pushing forward without understanding this is not going to help you it's only going to make it harder going forward spend the time now to really clarify these things ask questions in the scrimba discord and then when you really understand it you can be happy knowing that you are ready to move forward okay well this might look familiar this is our joke component from the previous section and we're going to use this to kick off a sort of mini series on learning about conditional rendering in react using and understanding conditional rendering is very important in react because you will see it everywhere in react code to start us off i have a challenge for you you're going to create some state called is shown its value will be a boolean and you'll just default it to false the idea is for it to be a piece of state that will decide whether or not the punch line should be shown in each of these jokes and then i want you to add a button probably just right here below the paragraph that will toggle that is shown value back and forth pause the screencast and work on this challenge at the top of my component i'll have my state called is shown and set is shown that'll equal react dot use state the default value will be false and then we'll add a button let's have this say show punchline then let's create a function that will help us toggle our value back and forth we'll just call it toggle shown and all it's going to do is run set is shown we do need to know what the previous value of is shown was so i'll say prev shown and that way we can return the opposite of preview shown that'll just flip it from true to false or false to true and let's add our on click event listener here to run toggle shown while we're at it i'll go ahead and console.log the current value of is shown and when i click show punchline okay now you'll notice that it said false even though i'm flipping it that's because it first console logged is shown which initialized as false and then i called set is shown if i click it again i'll see the old value right before it got changed this console log's not terribly important anyway so we'll take it out one of the reasons i use this joke component to help us learn conditional rendering is well i used it already as a way to give you a sneak peek into conditional rendering since we have a template here already even though this might seem a little backwards i want you to make it so that our paragraph here only shows up if is shown is true again you have a template to help you understand how that works and then once you have that working we'll talk through the logic and really fully understand exactly what's going on let me update our challenge text here okay make it so that this paragraph only displays if the is shown boolean is true pause the screencast and work on this challenge well as we see here what we did is we surrounded everything in curly braces and that allows us to put a javascript expression in here in our case we're going to say if is shown is true and this paragraph first let's see if this is working okay all of our paragraphs our punch lines are gone and if i click show punch line awesome our paragraph displays now why on earth does this work when you first learn javascript we usually learn about how this and logical operator the double ampersand is used to make sure that both sides are true or truthy so let's say you have a couple variables we'll say condition one we'll call it true and condition two let's say that's also true if you have an if statement that says if condition one and condition two meaning if both of those are true or truthy then the code inside this code will run we also learned that if either one of these are falsy or false so if i change either one to false this code will not run however if we look deeper into how the computer is actually running this code it can be very enlightening for example let me change condition 2 to a console log statement this is kind of a strange thing you're not really going to see this in the real world but it's just to prove a point say hello there let me open the console and i'm going to click save and we'll see that we immediately get the console log running of hello there now let's see what happens if i change condition 1 to false i'll hit save and nothing gets console logged that's because what the computer does is it first checks the truthiness of this first statement and if it is not truthy if it's false or falsy it actually completely skips whatever it sees after the double ampersands since it already knows that this condition will not satisfy what the and is expecting in other words for both sides to be truthy it knows already that it can completely skip whatever it sees here so we can take advantage of this in react anytime we have an element on the screen that we want to display if something is true or completely hide or not even render to the page if that thing is false here with the setup we realized that some jokes were just oneliners they didn't have a setup and a punch line they just were the punch line and in that case we looked at our incoming props.setup and said if that's falsey then don't display this h3 at all similarly with our local state of is shown we can say i only want to display or render this paragraph if is shown is true by doing that we can have a toggle button that when it's clicked will change is shown of this individual joke component to true and therefore it will display our paragraph more specifically when i click this button react will rerender this component because its state has changed and therefore when it's running the return value again and determining what should actually be placed on the screen is shown is now true and therefore this expression gets run and put onto the page for us so as a recap in react when you have an element that you either want to display or not display at all using the and logical operator is a really concise and great way to do that this challenge is a pretty straightforward one based on what you just learned using the and logical operator make it so that this h1 will only display if our array of messages is not empty if this array is empty then this h1 should not display at all and we should end up with a blank page while you're at it go ahead and fix our little underline for the number of unread messages we have in our array pause the screencast and work on this challenge well first let's replace this underline we can put in a set of curly braces and simply say messages dot length okay that's a good start now if we're deciding whether we want to display this at all or not then we can use the logical and operator to say messages that length is greater than zero and display this h1 that way if messages.length is greater than zero is a false statement in other words if messages.length is equal to zero then this h1 will simply not render at all a more concise way might be to just say messages dot length and this h1 and that's because the number zero is considered a falsy statement however i think it reads a little better to be explicit and say the greater than zero there sometimes if this line gets a little bit long you can break it out onto its own line something like this and we can test this by emptying our initial state array and there we go we have nothing on the screen awesome work next we're going to see another method for doing conditional rendering in react we have a funny ui bug right now when we click show punch line it shows the punch line but the button still says show punchline knowing what you know so far using the and operator to conditionally render something i want you to think for a second how much you change it so that it says hide punchline instead of show punchline when the punch line is shown one thing we could do is make a copy of this button and display them at different times so i'll do my similar conditional rendering and say if if shown is true then i want this to say hide punchline and if is shown as false or if not is shown then i want this to say show punch line technically this will work so it says show punchline and then it changes to hide punchline however we can do better than this and we can do so by using the ternary operator returnery is really helpful when you want to display one thing based on a condition or another thing if that condition is falsy so instead of duplicating our button i can keep my button here and simply change the word from show to hide using a ternary let me show you what that looks like i'm going to delete the word show put in a set of curly braces because i want to use javascript now and we're going to use a ternary looking at the boolean value is shown and i'll say is shown question mark now if is shown is true then i want the string hide to be displayed at this point in the button otherwise i want it to say show i hit save it's showing show punch line and when i click it it changes it to hide punch line as far as conditional rendering goes probably 95 of the time you will see conditional rendering handled with either the double ampersand or a ternary again the double ampersand is great if you either want something to display or not display and the ternary is great if you want to choose between one of two things to display if your conditions are more complex than just having one of two options to display usually it'll be best just to turn to a regular old if statement as we have seen in the past you can save a variable for your text and do either a switch statement or a series of if else if else if else statements to determine what that variable should be and then just display it in your return down here below since we've already seen what that looks like in the past i'm not going to cover it now i mostly just wanted to look at these two methods for conditionally rendering something in react now that we've learned that let's get a quick practice in let's do some conditional rendering practice one thing i've done with our messages app is i changed this to just say messages instead of num messages because well that just makes more sense because this is an array of messages not a number of messages anyway your challenge is to display the correct thing on the page if there are no unread messages it should display you're all caught up and if there are any messages in the array it should display you have n unread messages where n represents the length of the array or the number of messages in that array as a caveat though notice i put this parenthesis s here that's not literally the text parentheses s instead i want you to if there is exactly one unread message put the word message there instead of messages so pause the screencast and work on this challenge there certainly is more than one way to accomplish this for example i could always render an h1 and then use a ternary inside for the text of that h1 for some reason that doesn't sit quite right with me i'm honestly not sure why but i think the way that i would choose to do this is just to open my curly braces look at the messages dot length and say if that is exactly equal to zero and here i'm going to use a ternary so i'll start a question mark on the next line this will be what should display in case there is exactly zero messages so i'll do an h1 here and say you're all caught up otherwise i'll put a different h1 that says you have and let me just put the number hardcoded here for a second unread messages okay i'll replace this two with messages dot length and well let's see where we are right now i'll hit save you have two unread messages if i remove the items from the array you're all caught up awesome at this point it might be tempting to do some kind of nested ternary here that says if messages.length is exactly equal to one and put another ternary as the else of this first ternary personally i think this is nearly impossible to reason about and so i never do nested ternaries myself i suppose one thing i could do is just render this s if messages.length is greater than one i think that would look something like this i would put message and then a set of curly braces and put in my javascript here that says messages that length is greater than one and the string s let's just see if that works personally i don't love this solution i'll add in a couple items here okay we have two unread messages and if there's only one item okay you have one unread message however when i look at this it's not quite as clear as what i think i would prefer to do and that is to type out the whole word message or messages and use a ternary let me show you what that would look like you have blank unread and then i will open up some javascript here and say is messages.length greater than one if so i want it to say messages but otherwise i just want it to say message i'm going to put this onto its own line just so we have some extra space and although this does take up more characters i think than what i had before to me this is a lot easier if i have a fellow developer who's going to be coming onto this project and needs to understand what i'm doing here i think this is easier to reason about and understand as you can see there are multiple ways to use conditional rendering and this is the kind of thing that i'm talking about when we say that react is just javascript just like in javascript where there's multiple ways to solve a single problem it's the exact same in react because you're just using javascript like ternaries and the logical and operator and so forth you truly could solve this in probably dozens of different ways most people will tell you to find a way that is easy to think about in the future and then to stay consistent throughout your entire code base let's go ahead and test this before we call it a good solution and yeah see i need a space there so we'll put an extra space in there oh and i guess breaking this onto its own line might not have worked so let's just leave it like that okay one unread message and two unread messages awesome work when you're ready let's keep moving forward it's that time again for another quiz pause the screencast click into the editor type your answers down and when you are satisfied with your answers click play and we'll go through the quiz together number one what is conditional rendering conditional rendering is just a way to determine whether or not something should get displayed or as we're going to see what among many choices should get displayed unlike a regular html page which will always display whatever you hard coded into the html with react we can use conditional rendering to sometimes not display that thing or to sometimes display one thing instead of another so conditional rendering is when we want to only sometimes display something on the page usually based on some sort of condition or maybe i should say always based on some sort of condition so far we've learned a few different ways to handle conditional rendering when would you want to use the double ampersand or the and operator the and operator is great to use if you want to decide whether or not to display something at all so in other words when you would want to either display something or just not display it at all in that case what you put before the and operator is the condition and if that condition is true or truthy then the jsx element that you put on the right side of the and operator is what will either get displayed or not get displayed based on the condition of the thing on the left of the and operator number three when would you choose to use a ternary where the and operator is great for deciding to display or not to display something a ternary is great for deciding which among two things you want to display technically speaking you can nest ternary operations inside of other ternary operations but personally i highly recommend not doing that if you find yourself needing to choose between more than two options you probably should just be using regular conditionals with if else if and else or possibly a switch statement and well i guess i just answered number four so if you do need to decide between more than two options you should use a regular conditional statement using if else if and else or a switch statement there's one slight difference between the and in ternary and what you can use with an if else if else block and that is that the and and the ternary can happen directly in line inside of the returned elements of your function whereas with the if or else if or the switch statement those will have to happen outside of the return of your function so if i have a functional component let's say it's app and i'm returning some kind of ui the and and the ternaries can happen right here in line so i can have something and some jsx or i could use a ternary that has the condition and the ternary and then an else inside the ternary which is some other element but if i need to use an if else if and else or a switch statement i can't do my if inside of the jsx directly like this instead i need to go up above i can set a variable and then use my if and else if and else block to set some variable to some kind of jsx i won't type out the whole thing but that allows me to then just inside of here display some variable because previously in my if statement it was determined which jsx element it should be great work on this quiz we still have a lot left to learn in this section so let's keep moving forward we're going to spend a fair amount of time talking about how to manage and deal with forms in react from the outside this might seem like a kind of strange segue for us to be taking however i have found that forms are one of the most difficult things to understand and truthfully one of the most difficult things to use in react if someone were to ask me what i think is one of react's greatest weaknesses i would probably say forms fortunately there is a plethora of really awesome form libraries out there that in my experience many people end up turning to in order to manage forms and not have to build everything that we're about to see and learn about from scratch however that being said it is really important to know how to do this because especially when you're dealing with a really small form like what we're about to see in the meme generator it's not that difficult and once you get enough practice under your belt it's pretty straightforward so why are we talking about forms in the first place well in the old days you would create a form in your html and you would give it an action which had the url usually of some kind of php file that would process your form you would give it a method usually of posts and then when your form was submitted through some sort of submit button your php would pick everything up from there and process the data from the form fast forward a little bit to slightly more advanced javascript but still vanilla javascript and you would likely see something that looked kind of like this this selector goes and gets the form it adds a submit event listener and the function that runs whenever the form is submitted would simply gather all the values together and then submit it to an api somehow of course my function is just console logging stuff if i were to type in a first name and last name here let's put joe schmo and it's just console logging our data the main takeaway here though is to know that when you're submitting the form it would gather all the data immediately at the very end of the process and then submit it immediately after gathering it so how is this different from react the main difference in react is that instead of waiting until the very end of the process and filling out the form when the form is submitted and then gathering the data instead what we do is we create state and every keystroke change or checkbox change a radio button change or whatever it might be we update state and therefore we are watching these inputs every keystroke or every change that's made to our form then when the time to submit comes there's no more work really to be done we already have gathered the data and we simply submit that to our api and pass in the state that we have been tracking all along coming up we are going to jump into the specific syntax of how to do this however i really think it would be a good idea to sort of pregame for these lessons by reading through the react documentation on forms i know forms can seem like a rather mundane topic but i promise this documentation from react is really excellent they've done a great job explaining it think of this like reading the textbook before coming to class once you've had a chance to at least skim through the documentation and gain some level of understanding on forms and react you'll be ready to move on to these next lessons where we start learning about how to deal with forms in react let's see how we can manage these forms in react and we're going to start very simple with a single input i'm keeping this as simple as possible so not to distract us from anything but learning forms as a reminder in vanilla javascript we would have a submit button and when we clicked that submit button it would run a function gather all the data at that time and then submit it to an api or wherever what we'll be doing in react instead is maintaining uptodate state for every change that happens in any input in our form to accomplish this there's a few things we need to do first of all we need some state to hold the current data that's typed into our input just like we've been learning i can say let's say first name and set first name is equal to react.use state i will set an empty string as the default because i would expect my input to be an empty input box in the beginning and now what i need to do is listen for any changes that happen to this input can you think what event listener i might need to add to my input to accomplish this most or all form elements have an event called onchange and i can set that equal to a function let's call it handle change which i obviously haven't declared yet so let's declare that function and for now let's just console.log changed i hit refresh and now we can see every keystroke that i make is running our function now one thing we haven't spent much time talking about is this parameter that i can actually receive as a part of my event listener function in this case i don't get to decide what actually gets passed to my handle change event listener function instead what will get passed to it by the browser is an event object this event object is really large it has a lot of information in it and if i console.log event in scrimba it's simply going to put synthetic base event so at this point i'd recommend you actually open your developer tools in the browser and see exactly what got logged to the console you'll be able to dig into all of the properties of this event object however there's one property in this event object that i care the most about and that is one called target if i log event dot target we'll see that it gives me what scrimba shows is the html element that triggered this event now it looks like html in the console down here but in reality it's just the dom object that triggered this event that dom object has properties that we care a lot about for example the value property let me hit refresh and i'll just start typing letters and you can see in the console we're logging the current value on every keystroke of that specific input box so let me set up a quick challenge for you your challenge is to update the first name state on every keystroke i've set everything else up for you you should be able to complete this challenge fairly quickly i've added this console log here what this will do is every time the first name state changes it will rerender your component and therefore it will rerun this console log this is a really simple way for you to see that everything is working assuming you hook everything up correctly in our handle change function this console.log line should fire every time you type into the input box pause now and work on this challenge simply enough we should be able to use the set first name state setter and in this case i don't really care what the state used to be or rather i don't need to know what the state used to be in order to determine what the state is about to be because i have quick and easy access to the information that's currently typed into the input box by accessing event.target.value so i should be able to get rid of these lines i'll hit refresh and i'll start typing in my input box and sure enough our state is updating with every keystroke and there we have it as you can see at least starting out this isn't that terribly complicated however i am about to throw some wrenches in here we're going to see that the complexity level will rise a little bit however before i do that i want to get your hands on the keyboard and we'll do that as part of a challenge in this challenge we want to add a last name input to our form as i've done before i'm being a bit intentionally vague here and that's so that i can get you to think of all the steps that you would need to run through in order to get this to work so do your very best in this challenge and when you feel like you've got a good solution you can hit play and i will show you how i would do it pause now and work on the challenge as you worked on this challenge you might have started to see places where we were not being dry in our code in other words we were repeating ourselves quite a bit for example i could duplicate this line and i will change first name to last name we'll say set last name i then could duplicate my input and we'll change this to last name now of course there's a problem with using the handle change function on change and that is because well handle change is only changing the first name so maybe we make a change that says handle first name change we'll update our on change there and then we'll duplicate this function and handle last name change you can probably see where i'm going with this and how this is not going to be the ideal solution and then last of all we need to change this to set last name i'll add a console log here just so we can see if things are working the way we expect we'll look at both the first name and last name we'll hit save start typing we're looking at joe schmo okay of course this seems to be working but we can clearly see this is not ideal especially when you think of some of maybe the crazy forms that you filled out before that have let's say 20 or maybe even upwards of 50 input boxes it's not going to work great for me to have a separate change function for each one of those and a separate piece of state for each one of those so next what we'll do is we'll learn how to combine our state into an object and how to use the event parameter that we're receiving in our event handlers to determine which property of that state object we should be updating so when you feel confident with everything that we've worked on here let's jump into that next let's see how we can improve our form and how we're managing state so that when the time comes to add let's say 20 or 30 more inputs we don't end up drowning in duplicated code now if you do just have two or three maybe even four pieces of data in your form that you care about doing something like this might be okay or at least manageable once you get to four or beyond however it starts to make a lot more sense to save your state in an object instead of in separate variables a benefit of doing that is we'll receive one setter function which we're going to learn how to use to update the correct piece of state in the object let's just dive into the syntax to make more sense of this i'm going to remove this extra function here let's change this back to handle change so we can figure out a way to make it more universal and i'll set my on change to work for both of those let's also get rid of our extra piece of state here and instead we're going to choose to save an object as our default and that object will have a first name property as an empty string and a last name property as an empty string let's move this onto its own line then i'll change first name to something more generic like form data and set form data lastly let's get rid of this so that we don't have broken code and awesome this is a good starting place if you remember back when we talked about the event that we're receiving in our handle change event listener function if you did spend some time in your developer tools poking around that object and looking at its properties you probably saw event.target which we talked about in that previous lesson now in scrimba if i console.log this event.target it gets a bit truncated to look like an html element however under the hood it's really a dom object that we can access properties on in fact we saw how i can look at the value property to get the specific value that was typed into the input box however at this point because an object is what we're saving in state i can't simply say set form data to event.target.value because that would erase my object and replace it with just a simple string and because i'm using the same handle change function on both of my inputs i need a way for the handle change event to distinguish between which input it was that triggered that event well it turns out that a good practice that we're neglecting to do right now is to give each of our inputs a name property this is true of regular html forms in any case but in react it's going to play a special role for us what i can do is make the name property match exactly the property name in the state that we're saving in fact a good idea is to just copy and paste it so that you don't misspell it and now i have access to event.target.name let's hit save i'll trigger the event to happen in the first name property and you can see it logged the first name property there if i do it in the last name it logs last name well this is a great start we have access to the property of state that we want to change and we still have access to event.target.value which is the value that we want to change it to so now we have everything we need to call set form data and update our object correctly let's go ahead and call set form data before when we were simply updating a string we didn't care about what the previous version of that string was because we were just going to overwrite it with whatever was in the input box this time around however we do need to know what the old version of state was because we have a lot of other properties well in this case we only have one other property but imagining a larger form we have many other properties that we need to maintain instead of just overwrite so i'll do a callback function in here i'll use an arrow function and call my previous state let's say prev form data i'll use an arrow function and open up the body of that function my goal is to return a new object and i want to make sure i keep all of the old object intact so i'm going to spread out the previous form data but then i'm going to overwrite the specific property that we are trying to overwrite or that we're trying to update in this handle change event listener well on your first attempt the inclination might be to try something like let's use event.target.name as the key and event.target.value as the value of course as we can see in the editor this is a syntax error however with es6 there is a feature introduced called computed properties and what this allows me to do is to surround my key here in square brackets long story short it makes it so i can turn a dynamic string like something saved in a variable and use it as the property name for my object if that doesn't make a whole lot of sense don't worry too much just know that you can fix the syntax problem by having dots here by surrounding it in square brackets that's an overly simplified way to describe it but don't worry too much about that that's not the important part to take away from this lesson let me add back my console log so we can look at our state every time it changes hit save we can see in the console that it's empty to start with and as i change the first name my object is updating correctly my last name is also still a part of my state as i update the last name awesome this is great news that my entire state is staying intact honestly what we just learned in this lesson might be one of the most difficult parts of understanding forms in react so for those of you that were able to follow along awesome good job for those that were struggling still that's completely okay and completely normal don't be afraid to go back rewatch this a few times and because of that in the next screencast we're going to practice this a little bit more hopefully in this challenge you'll get a chance to see why it's beneficial to structure things the way that we just learned how to do your challenge is to add an email field and associated state to our form pause the screencast and work on this challenge previously when we were saving all of our state as strings anytime we wanted to add new state we needed to create new variables and new event handler functions now however we simply need to add a field to our state object here we'll add an email property that starts as an empty string and as long as with my input i give it the correct name i really don't need to change anything about my handle change function so let me add another input here i'll just duplicate this one for good measure i'll change the type to email of course we'll change the placeholder i don't need to change my onchange we'll make sure that this name exactly matches the name that we chose in state on our property here and well i believe that should do the trick i'll hit save type in a first name we'll say it's joe last name schmoe joe at schmo.com and sure enough our state is updating exactly as we would expect now maintaining all three of these properties now for those of you that followed my directions a few screencasts ago and actually read through the react forms documentation you would have come across a section that talked about controlled inputs as of right now our inputs are not controlled and so in the next screencast we're going to see one simple addition we can make to turn them into controlled inputs and we'll talk briefly about what a controlled input is in the first place a term you might hear floated around as you're learning about react is something called controlled components again if you read through the react forms documentation you'll have come across the section called controlled components if it's been a minute or you didn't have a chance to read through that you can click this slide in order to go directly to that documentation but when we're talking about maintaining state inside of a component there's a common concept called the single source of truth the idea is that the state that you're maintaining in your component should be the single source of truth if you think back to when we were learning about changing state and we had our boxes or squares example one solution we came up with was allowing each box to take the incoming on prop and then set its own internal state based on that incoming prop and then the box itself could change its own internal state and therefore display either being filled in or not filled in if it's been a minute since you've seen that lesson of course you can always go back and watch that too refresh on what i'm talking about here the problem as we learned then is that we have two instances of that state that exist and they don't necessarily match up in other words there isn't a single source of truth the array of these objects was being held in state in the app component however each box was then changing that state essentially without telling the app component that it was changing and therefore there was state that oftentimes would not match with one another we have a similar concept happening here where in the markup inside of our inputs each of these inputs in effect is holding its own state think how in a regular html form no react involved at all when a user types into an input box essentially that input box is maintaining its own state well in this case we have two pieces of state one is being held by the input box just in regular html and the other is updating on every keystroke held in our react code of course we have set it up so that the state of our input box then perfectly gets mirrored by our state in react however a good practice in react is to make it so that your react state is what drives the state that's visible inside the input box i totally understand this might seem like i'm splitting hairs here but if it helps all this really boils down to is simply adding a value property to each one of our inputs so here at the bottom of each one i'll add value equals and then a set of curly braces and then all we need to do is add the piece of state in other words form data dot and then the name of that specific input into that value so we'll add form data dot and then in the first one i'm going to have first name last name and email visually we're not going to see any difference here conceptually however when i type into the first name bob the value of this input box is no longer being controlled by the input but rather by react every change that i make runs my handle change function which then updates the correct piece of state which rerenders my form and it sets the value of my form input to be whatever state is so now state is in the driver seat telling the input box what to display rather than the input box telling the state what to be the main reason to learn this about controlled components is because sometimes if you don't set this up correctly react might sometimes complain about having uncontrolled components fortunately the concept itself is more difficult to understand than actually implementing it so if you don't feel like diving deep into understanding controlled components honestly that's going to be completely okay at this point just remember that you need to set the value of your inputs to be equal to your state that represents that input value there are a few more small things that we need to learn regarding forms so at this point we're going to speed through some of those so that we can get to a challenge that will help you practice all of this together if only all form elements were as simple and designed the same way as the inputs that we've been working through these text based inputs then our life would be so much easier however forms have more variety in the types of inputs you can have for example radio buttons and check boxes text areas and so forth each one of these has some special considerations we need to keep in mind when we're using them in react to start us off let's look at the text area element in regular html text area is a little different than an input because it is not selfclosing it has its own separate closing tag and in html whatever you put inside the opening and closing tags is the value of that text area you'll see i'll hit refresh and we get a text area that's a little bit larger we can also set the size with rows and columns the user can make this bigger or smaller if they need to however what the react team has done is they've chosen to make the text area much more similar to a textbased input and so they've taken the closing tag away they've made it a selfclosing element and just like our inputs we will now add a value property to it and that's going to be the value that's inside of the text area once you understand that they've changed the text area to be a selfclosing element essentially everything else we've learned about textbased inputs remains the same i suppose in the text area case we're probably not going to include a type because the text area is sort of its own type already but everything else should essentially be the same as our inputs which means that it's time for a challenge okay your challenge is to add a text area for comments to the form we do want to include these comments in our state as the user is typing into the text area itself so make sure to update our state as well pause the screencast work on this challenge while we're up here with our state i'm going to add a comments property to my state object and initialize it as an empty string then at the bottom of my form i'll render a text area element again it's selfclosing and just like the other ones we will put a value in here that will be data dot comments that way it can be a controlled component we'll add a placeholder that just says let's just say comments we'll use the same on change handler so we'll have handle change and in order for handle change to work we need to make sure we assign the same name that we have in state so comments and comments now i've added some styling i did that directly to input so my text area isn't going to be styled that way maybe i can get lucky and just add text area directly to my styles here let's hit refresh and okay well my height's a little funny but that's something i could always change later let me add a console log here so i can make sure that it's hooked up correctly to state we'll just log maybe we'll just log form data dot comments to make sure that just that one piece is coming in okay awesome oh i guess those styles aren't really going to work out because it's doing that text indent thing that's kind of silly let's just put this in its own thing okay that's a little better awesome job the next form element we'll talk about is check boxes let's take a look at the checkbox element now checkboxes aren't just an html element on their own called checkbox although to be completely honest i kind of wish they were because that would just be a lot easier but no they are an input with a type of checkbox checkboxes are fundamentally different than what we have been working with so far with our text inputs because they just hold boolean values in other words there's not going to be some kind of string text of my checkbox instead there is a checked property that will either be true or false based on whether the user has checked the box or not before we jump into check let me clean up my input for just a second because right now i just have a bare box sitting here while i was cleaning up this check box i was reminded of something that we haven't yet talked about and that is this html4 property when we have something like a label that is supposed to be tied to another input you have a couple options you could nest the input directly inside of the children of the label what that does is if the label gets clicked it will automatically propagate that click down to the input however my personal preference is to keep the label as its own separate element and then point that label using html4 to the id of an input so that they can be associated with one another in plain html you're probably used to using just four but if you were to look under the hood at the underlying dom element it's really called html4 that's the javascript property for that element anyway that's a digression so now we have a checkbox that asks the person if they're friendly or not and we want to maintain this in state well because it's a checkbox we're not maintaining a string so up in state i'm going to add another piece of state and actually start separating these onto their own lines to save some space here and we'll call it is friendly and just to give them a benefit of the doubt we'll call it true as the default as i briefly mentioned to associate our state is friendly with our checkbox we're not going to use something like a value property but instead we're going to use a checked property now because a checkbox is either checked or unchecked the value that we put in here for checked needs to be a boolean or at least whatever you put in will be interpreted as a boolean so if i put something truthy in like the string hi it's going to check the box if i put in something falsey like an empty string it's going to not check the box but in the end that doesn't really matter because this should be a boolean value so i'm going to say form data dot is friendly now when i hit refresh do you think that this checkbox will be checked or unchecked it should be checked because our default value is true right there so when we say this box has checked we are having react dictate to the box that it is checked in fact because that's what state is of course now we've introduced a bit of a bug i can't uncheck the box maybe that's a good thing for this specific form we don't want people to be unfriendly but for the sake of argument let's say we want this to act like a normal form if we look closely at our handle change function we have only been looking at event.target.value however with a checkbox we are not looking at the value property anymore we are looking at a checked property so of course i could go out of my way to create a completely separate handle checkbox change function but we can do better than that let's assume for now that we can reuse our same onchange function we'll put in handle change as our unchanged and then let's go up to our candle change and we're going to make some modifications here the first thing i want to talk about is a best practice that we should be following and that is not to put the entire event.target.value and event.target.name down here inside of our set form data at this point in the course it's not that important that you understand why we're going to do this but a much better way to handle this is to restructure event.target and pull out the values that we need so we need name and value from event.target and then i can switch this to name and switch this to value and then as i mentioned when we're handling a checkbox there's a few more things we need to pass in one property that will come in is this type property on all of our inputs we have a type text email and down here our type of checkbox so let's bring in that type so we can check whether or not the input that's making this handle change function run is a type of checkbox and if it is we're also going to need the checked property and this is either going to be true or false depending on how the user has interacted with the checkbox now comes a bit of a trick when i'm setting my form data i want everything else essentially to be the same however the piece of state that i want to update if it's a checkbox in our case the is friendly property should not take on value but rather should take on the value of checked so i can use a ternary here that says is the type equal to checkbox if so i want you to use the checked property but if not i want you to use the value property let me get rid of this console log because that's from a previous screencast let's refresh we'll hit the checkbox and oh no there's a bug so i'd like you to look at the input that we've created perhaps compare it to some of the past inputs that we've created and see if you can figure out what we're missing all of our other inputs have a name property and that's something that i simply forgot to add in so i'm going to add a name this needs to match exactly what is in state say is friendly and that way when i hit refresh i should be able to now check the box awesome this is probably a good time to mention that everything we're learning here with forms can be really confusing and especially hard to try to memorize honestly as i've been preparing this lesson i've had to go back to some of my old notes and some of my own recordings to remember what the syntax for this actually looks like so just think of this as a pep talk now if as i'm teaching it you're still feeling totally lost and it's not making any sense at all that's a cause for alarm you should be able to generally follow along but in this case i'm not necessarily going to quiz you on the exact syntax for everything because well it's just as easy to look it up if you really need to okay so let's get back on that horse and we're going to next look at radio buttons in react radio buttons are kind of an interesting combination of check boxes and text inputs i'll talk about what i mean in just a second but in the meantime i've put together this field set that asks about our current employment status to skip some of the mundane stuff i've already added the type of radio and some ids in order to associate the labels using html4 with the correct inputs so now let's talk about how we can hook these radio buttons into our form and connect it with our state first we need a place in state to hold all of this information i'll add another property to our state called employment and where check boxes are either true or false radio buttons similar to inputs will have some kind of text value to them in this case i want employment to be some kind of string either unemployed parttime or fulltime so on a high level overview what will happen is when the user clicks one of these options we will be watching for changes in these inputs and when a change happens it will take the value of that specific radio button that was clicked and set our state to that value in order to associate my inputs with the correct piece of state and also to make it so that i can't click all of my inputs the way i can now i need to add a name property to each one of these inputs like we've done before i'll set the name equal to employment which exactly matches the property that we are saving in state the reason we're giving the same name to all three of these radio buttons is first of all in html that's the way that we make it so only one of these radio buttons can be selected at any given time but it also intuitively makes sense because we're only updating one property of employment based on which one is selected each one of these inputs will have its own unique value and this value is what will actually get saved as the value in state when this specific input is selected so for the unemployment or the unemployed one i'll put unemployed for part time we'll use part time and for full time we'll use full time next i need to make sure that i'm listening for change events so i'll add my on change of handle change believe it or not we'll also be able to use the same handle change function and we'll see why in just a minute and technically speaking this should now be hooked up correctly to state i can test that by coming up here and console logging my state will just console log the employment part of it so we'll say console.log form data dot employment i hit refresh we get an empty string and then when i choose unemployed it switches to unemployed part time and full time there's one more small thing that we need to change and it's essentially mirroring what we did when we were setting our value equal to the state radio buttons are a little different because we need to specify what value the state should take on if the radio button is selected or checked however that means that we can't do controlled components in the same way that we did with our inputs by setting the value equal to whatever the current value of state is but that doesn't mean we can't control these components it's just that radio buttons are controlled in the same way that checkboxes are controlled here we were able to say checked equals form data dot is friendly however if we try to do the exact same thing with our radio buttons we're going to run into a little bug we'll see that here i'll say check equals form data dot employment and when i click one of them well some weird stuff is happening this is where radio buttons differ from check boxes in that when we are controlling the checked property we don't simply say checked equals form data.employment because unlike a checkbox this is not a boolean value but we can make it a boolean value by checking if the form data.employment is equal to the value of this specific checkbox so i'll do the exact same thing over here and now react is in charge of controlling this input rather than the input having its own html state let me walk through that one more time let me hit refresh initially the value of formdata.employment is an empty string when i click unemployed it runs the on change for handle change which we have defined here we're pulling the name value type and checked out we're setting the form data we're bringing in all the old form data now we're using name which we had set to employment as the key for our state that we're updating and it looks here says is the type checkbox in reality no this is not a checkbox it's a radio and so it skips the checked value and instead uses this value this value is the value that we defined here where we said it's either unemployed parttime or fulltime then when we change state react rerenders our form it checks to see if the current form data.employment is equal to unemployed in our case since that's the one we chose then that becomes a true statement and therefore checked is true and all of these other checks are false that makes it so that only one of these can be checked at any given time in my opinion radio buttons are probably the most confusing element to deal with in react so if you have understood everything we just walked through then kudos to you truly this is a big accomplishment so you really should be proud of yourself again you don't need to have memorized this necessarily you can always come back to this lesson or find something on google to help you through the syntax of this if you need it again in the future but if you were able to follow along with the logic that we just talked through then that really is a good signal that you understand state you understand event handlers and some of these little quirks about forms in general there's one more form element i want to talk about before we move on and that is select boxes and we'll do that in the next screencast the last form element we're going to talk about in react is the select box with its options in regular html it's usually set up something like this where you have the select box i've added an id just so we can associate our label with it and it has a number of options inside with a value for each option in regular html in order to grab the value of whichever one is selected you will look for a property called selected although that would happen in the javascript but all of this is a bit beside the point because react has decided to make it a lot more similar to some of the other input elements that we have seen so far so just like we've done with some of the other elements we are going to add a value property here on the select itself and this value similar to our text inputs we'll just mirror what we have in state now currently we're not saving a favorite color in state so let's go ahead and add fave color we'll start it off as an empty string and then down here in our select we will say form data dot fave color we can reuse the same on change handler that we've been using with handle change and in order for handle change to work correctly we need to make sure that we mirror our name to exactly equal the property that we're saving in state so at this point i should be able to click my drop down and you won't see this drop down in the recording but if you click onto this app and hit the refresh icon you can test this out for yourself i'll click the drop down and i see the different colors red orange yellow green blue indigo and violet i can choose green and that will change our drop down to green and actually let's go up here and change form data employment to console log our favorite color instead so that way whenever i make a choice like green our state is updating according to the value of the option that was chosen in this dropdown box now we do have one little issue here if i hit refresh we see that i'm initializing state as an empty string for the favorite color but currently i don't have an option that represents the empty string value one way i can change this is by providing a new option where the value is an empty string and then maybe i put in something like choose that makes it so that the user will see choose here on the first option i'll hit refresh we see choose as our option but i can still drop this down and change it to any of these other colors just like we would expect and that pretty much does it for any of the form elements that we're going to be talking about in this course there's one last small thing we need to cover about forms which is how to submit a form and so that's what we'll cover in the next lesson now that we have a way to gather all of this information from our user we need to be able to submit the form in html you might be familiar with an input of type submit an input type submit is well basically just a button and of course the default option there is submit we can change the value to something different like i don't know send it in or something okay and that changes the text of the button let me put a couple breaks here just to move that down a bit however in html5 they made it so that the actual button element if it's found inside of a form acts like a submit button what's nice about the button element inside the form is that you're not doing this weird value thing because it's not really a value it's just the text of the button so i could just put submit here and because this button is found inside of a form element its type is actually automatically submit by default in fact if you didn't want it to act like a submit button you'd have to actually change the type to button which looks kind of funny button type button so let's just make use of that default we'll get rid of our type completely and therefore the default is type submit and clicking this button because the button is found inside of a form will actually trigger the forms on submit event handler now back in the day instead of having a javascript on submit handler you might have something like a method that tells you this is going to be a post request and you'd have an action that probably led to some php file.php and then php would take the data and process it do whatever you needed to do however we're going to essentially bypass that entire system we're going to set up the on submit event handler and let's create a function called handle submit and up here i'll actually create that function and what's nice about the way we have set up our form in react is now instead of having to go through every one of our inputs and gather the values right at the last second before we submit this to maybe an api we've been doing all that work all along as we've been updating state on every change of the inputs and elements in our form so if we pretended that we had some kind of submit to api function we would really just be able to probably pass our form data object into that function because it's already updated it's been updated after every change of the form now just like in vanilla javascript if you have built a form and gathered the data in javascript you know that clicking this submit button will actually refresh this page and it'll put all of the form values as part of a query string in the url that all harkens back to the original way that forms were submitted with an action property so the first thing we will always want to do in react when we're handling a form submit is to take that event object that will get passed to this event handler and run event dot prevent default preventing the default means that it won't refresh our page and essentially rerender our app with all of these default values and state preventdefault just stops all of that from happening and makes it so that we can then run code the way that we actually want to just to see this working i don't actually have a function called submit to api so let's just console log our form data so before we test this out let me remove some of these console logs so we can actually see what we're working with i'll hit refresh type in some generic values here okay and we'll hit submit and we can see we got our state object everything has been automatically updating as we've been typing things into our form and maybe just to drive the point home let me comment out this prevent default and i'll type in some stuff here and hit submit you can see my form refreshed and then my url actually updated i'm not sure if that comes through in the recording but this is the url and it took all of my values based on the name properties stuck it as query strings in the url and it's just not what we want to do okay with all of that behind us i do want to get your hands on the keyboard practicing some of the things we've learned with forms so that will be what we do in our upcoming challenge okay we've covered a lot of ground so before we move on i want to test your skills and your knowledge make sure you were paying attention so with this quiz pause the screencast click into the editor type down your answers and when you've answered all the questions click play and we'll go over the quiz together number one in a vanilla javascript app at what point in the form submission process do you gather all of the data from the filled out form all of that data gathering happens right when the form is submitted i should say right before the form is submitted usually you listen for the form submit event and then you'll go to each one of the elements in the form and gather the data so in number two it asks basically how is that different in a react app well in a react app we're basically not allowing the form elements to maintain their own internal state but instead the component that houses the entire form has some react state and that state is updated on every change of the elements in our form so for a text form it's every keystroke that the user types into their keyboard for a checkbox that's every time the checkbox changes or the radio buttons change and so forth so in short we gather all the data as the form is being filled out and of course all that data is held in local state number three which attribute in the form elements for example the value name on change etc should match the property name being held in state for that input well it's the name property essentially we use that name property to help us in our on change so that we know which property in state to update whenever a change happens number four oh that a should not be there what's different about saving the data from a checkbox element versus other form elements in all the other form elements we're using the value property to know how we should update our state but with a check box we're looking specifically for the checked property okay and number five how do you watch for a form submit and how can you trigger a form submit simply enough we can add an on submit handler on the form element that's how we can watch for a form submit and we will pass a function to the on submit handler that will run whenever the form is submitted so then how do you trigger a form submit usually that will happen with some sort of button click as a quick reminder in the markup if you have a button element that's inside of a form it will automatically act as a submit button for that form alternatively and what kind of seems like the older way to me is to use an input type submit but to me there's not really a benefit to doing that okay awesome job on this quiz hopefully you were able to answer all these questions next we're going to put what we've learned about forms into practice in this challenge your job is to connect our existing form to some local state and update that state whenever the user interacts with the form as we've been doing i want you to make sure that you only create a single handle change function that can manage the state of all four of these inputs the email address password password confirmation and the newsletter check box then when the user clicks sign up you'll run through some logic that makes sure that the password and password confirmation match each other and if they do you should log successfully signed up to the console and if they don't you should say passwords do not match in the console additionally when the form submission happens i want you to check if the check box for the newsletter was checked and if so log thanks for signing up to our newsletter to the console if not don't console.log anything there was a lot of syntax that we learned when we were going through the different pieces of the form so don't be afraid to open up in another tab some of the previous lessons that we've gone through as a reference so pause the screencast and work on this challenge all right let's do this i'm going to start with some state i'll create state called form data and set form data using react.use state that will begin as an object and i can provide this object some default values let's have an email property that's empty a password property that is empty we'll call this password confirm and let's say we be joined newsletter this one will be a boolean because that's what checkboxes deal in is booleans and so we'll default it as false or maybe if we're good marketers will defaulted as true and then what we can do is add these properties as a name field in each one of our inputs so we'll add name equals and then we'll put exactly what those properties were from up above while i have all of these selected i'm going to add an on change for every one of them that will point to a function that i'll create called handle change and then we'll also give a value property and i'm going to change this on our check box because that should be checked not value this way they can be controlled elements or controlled inputs and i will make sure that we're pointing form data dot and then we'll paste in the values that we copied above let's fix our check box so this should say it's checked if form data dot joined newsletter is true or not checked if it's false and now let's go create our handle change function from the event i'm going to pull out the name property value property type so that we can check if it's a check box that made the change and the checked property we'll get all of those from events.target target represents the element that was modified in the event then i can run my set form data function and i need to access my previous form data so we'll say preform data and this will be the parameter to my callback function and i'm going to use that little trick where i can return an object by surrounding it in parentheses that way i can make use of the implicit return without having to open the body of this function and then use the return keyword and so forth and so i'm returning an object and that object should have all of the properties of the previous form data but then i want to update the property based on the name value that we pulled from the input that is making this change that's using this computed property syntax and the value would normally just be value if i didn't have this checkbox here because all of my other inputs are updating a value property on the input itself however because i do have the checkbox i'm going to check if the type is checkbox and if it is then i want to set the checked property of that checkbox that's what's going to either be true or false based on whether the user has checked the box or not if the type is not a checkbox then we can just use the value property to update our state let's do a quick check before we get to the handle submit part of the challenge i'm just going to console log my form data and let's see if updates happen well it's good to see that my checkbox is automatically checked because that means that it's connected correctly to state and our default was set to true so if i uncheck it we get false that's good email address password and confirm password cool everything seems to be connected the way i would expect so we can get rid of this console log to clean up our logs down there at this point all that's really left is some vanilla javascript logic that we need to write inside of our handle submit and hopefully when you are doing this challenge you notice that i already set up our on submit to run the handle submit function and because our button is inside of the form element it acts as a submit button automatically so clicking the sign up button will trigger the submit event on the form and therefore will run the handle submit function and well i accidentally deleted the event dot prevent default i don't want to delete that i need that otherwise submitting the form will submit it as if it were submitting to an old php or backend which would then take all of these values and submit them as query strings in the url and refresh the page and everything essentially i just don't want to do any of that so event.preventdefault is always going to be the first thing that you'll do at the top of your handle submit function and yeah like i mentioned we just have some vanilla javascript logic to work through so if the password and the confirmation match each other we need to log successfully signed up so i can just say if form data dot password is the exact same as form data dot password confirm then console.log successfully signed up and in any other instance we will console log passwords oh this says to not match that should say do not match passwords do not match and then separately we can process the data for the newsletter and if form data dot let's see what was it called joined newsletter if that's a true value then we will console log thanks for signing up for our newsletter okay let's give this a test i'll open my console put in an email address password confirmation that is matching and we'll have the checkbox checked i'll hit sign up successfully signed up and thanks for signing up for a newsletter let's say i changed this password to something different passwords do not match and well you know what that leads me to something that i didn't mention in the challenge but probably would make sense to do if the passwords do not match i don't want to make the person think that they signed up for the newsletter so i think i'll just put a return right here after my passwords do not match so that this if statement never gets run in case they don't match let's try this again we'll hit refresh and we will make the passwords not match hit sign up and we just get passwords do not match okay then if we do make the match and we uncheck we get successfully signed up without the thanks for signing up to our newsletter awesome obviously we didn't touch on every aspect of forms that we've learned about but a form like this is a lot more common for you to develop than something that has every kind of form input under the sun awesome work on this little mini section on forms believe it or not we're really rounding the corner almost at the finish line for this section we just have a few more things to learn before we can really tie together the remaining aspects of our meme generator project and finally tie a bow on that and call it complete so when you're ready let's jump right in now that we've learned how to save input data from text fields into state let's revisit our meme generator and get it to an almost complete state we created earlier the top text and bottom text fields but they're not hooked up to anything right now so your task is to connect the inputs into state so that every keystroke they update the top text property and state and the bottom text property and state now i've done a little bit of css heavy lifting for you and that's because i really want to focus on the state part of react right now but in short i've added a wrapper around our image so that the whole thing is considered the meme i made that meme position relative so that i could set the h2s to be position absolute this meme text is styling it to look kind of like a classic meme text and the top and bottom classes simply stick it at the top or at the bottom of the container element and as you can see down here i've hard coded the top text and bottom text but part two of your challenge is to replace that hardcoded text with the text that we are saving in state pause the screencast and work on this challenge i think the first thing i'll do is add the properties that i need to my inputs so that i can be watching for changes let's add a name property to each one say name equals and then we'll have this one is our top text and this one is our bottom text next we'll add our value properties so that these can be controlled components and those will be meme dot and then top text for the top one and bottom text for the bottom one and then we're going to need an onchange event handler we'll call it handle change and then we'll create that function i'm going to pull in the event so that i can get the name and value properties from our event so i'll just restructure those now and that's going to be from event.target and then i will essentially be doing exactly what i did with get meme image here with set meme i'll type it out for the practice we're going to set the meme and i do need access to the previous version of the meme i need to return an object which if i want to do that as an implicit return i need to wrap my object my curly braces that represent an object in parentheses so that it doesn't think i'm just trying to open up the body of the function and we'll copy over all the properties of the previous meme and we will change either the top text or the bottom text property depending on what name gets pulled in from the target so i'll use that computed property name and set its value to value lastly i will update my hardcoded text to look at our object values and state so this will be meme dot top text and meme dot bottom text okay let's cross our fingers i'll hit save one does not simply walk into mordor ain't that the truth now it's kind of like playing roulette here if i click get a new meme image it's probably not going to work out so great but we'll see that our text is staying on top and on bottom and switching the meme image can actually be kind of a fun exercise because your text may or may not apply to the new meme image very well awesome work this is super exciting basically our meme images sort of had an mvp a minimum viable product to push this out to our customers in reality we are still importing our memes data from a javascript file when what we really want to do is get that from an api there's a few more things we need to learn in order to do that successfully and that is what we're going to start talking about in the next screencast a very common thing you'll need to do in react is interact with an api that lives outside of your application usually what you're doing is either requesting information from an api or sometimes submitting information to an api whenever you're requesting information from an api in react usually you want to display or use that information somehow so getting data from an api in react consists of essentially two parts first of all you need to get the data and that would be using something like fetch or another tool for getting data like axios the second step would be to then take that data and save it to state once it's saved in state your application can interact with it it can display it on the screen and all of the other benefits that come with saving something in state so let's see some preliminary syntax as to what that might look like and then as a spoiler alert i'm going to show you why this is broken to do it this way to start us off let's do a fetch request to the star wars api this is just a very simple api that will get us some information about star wars characters and planets and movies and stuff like that i'll go ahead and resolve the promise that i get back from fetch it will receive a response which will be json i want to turn that into a javascript object that i can use and then with that data we'll just console.log the data for now okay awesome we have this object here i'm not going to bother digging into this object i'm just going to stringify the entire thing so let me put that into state and you know what i'm actually using data in a couple places let's maybe call this star wars data and set star wars data and then instead of console logging we will set star wars data with the data that we get back and then i need to make sure to update down here as well let's hit refresh and see what we get okay there's the data from my api awesome everything seems to be working swimmingly however let me illuminate something that's going on behind the scenes right now i'm going to console.log component rendered every time the app component renders or rerenders by react it will run this console log so let me open my console hit refresh and look at this we've got an infinite loop of component rendering let me comment this out and hit refresh now i want you to pause and think for a second why was this console log running over and over and over again pause now and see if you can come up with an explanation for why it was doing that the reason we were stuck in an infinite loop is because this fetch lives on sort of the top level of our component because of that anytime the component renders it's going to call fetch and every time it calls fetch it's going to set the star wars data which is updating our state and therefore causing react to rerender this component and then it's running fetch again setting the state rerendering the component calling fetch again setting the state rerendering the component i think you get the idea in fact even though we're not seeing that happening with this console log commented out it's still being rerendered in the background so i'm going to comment this out so that it actually stops rerendering and in fact the only thing we really need to comment out is where it says set star wars data when we had a console log here i'll uncomment this component rendered and open my console we'll see that we're no longer in an infinite loop and that's because we're not setting state causing the component to rerender so this x is a perfect springboard into the next topic that we're going to learn about and that is how to handle side effects in react so that is what we will tackle next we're now embarking on a journey that leads to oftentimes considered one of the most confusing parts about react and that is how to manage side effects to really understand what i mean by side effects let's take a look for a second at what react's primary tasks are first of all react is in charge of working with the dom in the browser to render some kind of user interface to the page the react team has created a really simple interface to allow us as developers to accomplish this with jsx and elements that look just like html under the hood of course react is taking that jsx and turning it into elements that can be displayed on the page another task which we have mostly been learning about in this section is to manage state for us and if you think carefully about it it's managing that state between the render cycles in other words react can remember state values from one render to the next so that's another thing that react does and we are allowed to hook into that state using the use state hook and then naturally its next task is sort of a combination of these two it needs to keep the user interface updated whenever state changes there certainly are other tasks that react is accomplishing but you can probably boil the main three tasks down to these three so then what is react not able to handle on its own the major one that we're going to be discussing is any kind of side effects or i put outside effects here all that really means is anything that lives outside of react's purview or reach so some examples of this are local storage on your own browser for example we can of course use code to access local storage but react has no real hand in interfacing with local storage along that line any kind of api or database interactions that occur in our code we can write that code to interact with apis but react is not in charge of that code or rather react has no way to know which apis we're going to be reaching out to similarly any kind of subscriptions you might have if you include web sockets in your application for example you have a chat application that updates live and as it turns out even if you have two different pieces of internal state that you need to sync together or have one of those pieces of state react to a change in another piece of state react can manage the state of each one behind the scenes but it's not really looking at any kind of crossover between those two states so in the end it boils down to basically anything that react is not in charge of can be considered a side effect or an outside effect so using this api interaction for an example if we look at our code from before i commented it out so that it wouldn't keep infinitely rendering we can see that react is essentially just doing what it's told it's trying to put something on the screen it's trying to manage state and it's trying to keep state and the screen in sync if state ever changes it needs to rerender the component as a side note if this were receiving props and somehow those props were also to change for example if those props were a piece of state in a higher up component that then changed this component would also rerender so with our code living here on the top level of our component react really doesn't have a way to stop us from setting the state here causing the rerender which would then set the state again causing the rerender and so forth in that infinite loop so the react team gives us a really nice hook called use effect in the documentation this is called the effect hook and i like to think of it as a tool that react has given us developers to use sort of like a blank canvas that allows us to interact outside of the react ecosystem which again mostly just consists of state props and the user interface that it puts on the page and i like to think of use effect as being a tool that allows us to synchronize react state with those outside systems like our local storage or an api now before we jump in i've included here a link to the documentation if you click this slide you will be sent to this page where you can learn about using the effect hook again think of it kind of like reading the textbook before coming to class now you don't have to scour every single word in the documentation but i do want you to take a look at it read through it and then when you've got a cursory understanding of the effect hook then we'll jump into the next screencast as you're reading through this documentation you'll run into a line that says if you're familiar with react class lifecycle methods you can think of the use effect hook as component did mount componented update and component will unmount combined so if you are familiar with class lifecycle methods i actually want to implore you not to consider this tip if you have no idea what i'm talking about then that's totally fine you can forget everything that i just said about class cycle methods but if you are familiar with class life cycle methods the modern advice these days is not to try and think of the use effect hook as a combination of these life cycle methods but rather to work on retraining your approach to understanding side effects and react i know that might be strange for me to be contradicting the documentation but i know that i'm backed up because this is an article by dan abramov who is one of the core contributors to react and he writes this giant blog post about understanding use effect and essentially goes in depth into how we should not be thinking of use effect as a way to hook into life cycle methods but rather as a way to deal with side effects and react if you really want a deep dive you can click this slide to go to this page but if you're learning react for the first time you do not need to go this in depth into use effect at this time so once you've had a chance to skim through the react documentation on the effect hook let's jump in and start learning how to manage side effects in react let's begin refactoring our code here to use the use effect hook just as we can access the use state hook on top of the react object we can do the same with use effect so i can create a side effect by using react dot use effect and use effect has one required parameter and an optional second parameter in this screencast we're just going to learn about that first required parameter and in the next one we'll talk about the optional second parameter the required first parameter for react.use effect is a function a callback function and maybe so that's perfectly clear i'm going to write this out as a function declaration although in practice you'll almost always see this as an arrow function and that's what we'll eventually transition to as well and this function acts as a place for us to be able to put our side effects code in the little example we have here this fetch request is considered a side effect and that's because it's reaching outside of react's ecosystem but also trying to set some state in the process remember this was infinitely looping because on the top level of our component it was running this fetch and setting the star wars data which was modifying state and therefore rerendering the app which then just ran all the code again in this infinite loop so let's move this fetch request inside of our use effect and that's it inside of the callback function that we provide to use effect we're allowed to put our code that has other side effects that interact with systems outside of react and maybe more specifically interact with those outside systems to keep them in sync with our local state in this component now i do have a confession to make we're actually only halfway there if i uncomment my console log and hit save you'll see that we're still having the same problem we were having before where we're stuck in an infinite loop let me comment this line out so that it doesn't keep setting state so what exactly is going on i thought use effect was going to fix this problem well it turns out that the code we put inside of this callback function if we don't provide a second parameter to our react.usefx function then there's almost no difference between putting our code inside of use effect and putting it outside of use effect on the top level of our component there is one small difference and that is anything that we put inside of this callback function is guaranteed to run only after the user interface has been painted to the screen in other words only after react has taken our user interface our elements and created real elements on our page so this callback function is guaranteed to run in a specific order only after this has been placed on the dom but for our purposes here there's basically no difference we're still stuck in an infinite loop so in the next screencast we're going to start diving into use effect and understanding first why we need to provide the second parameter and then what that second parameter is and how it solves this problem i've made a couple modifications to our app here to try and demonstrate exactly what's happening within use effect i came up with the simplest little counter app that just has a single button that says add and something that displays what the current count is in state the reason i did this was just to make it so that we had a really easy way to trigger rerenders and state changes on our app here i also replaced our use effect callback function with just a console log that lets us know that this effect function ran you can already see what's happening down in the console but if i refresh the site we'll first get the component rendered console log and then we get the effect ran console log as we talked about before the function we passed to use effect will run after every render of our component it essentially makes it no different than moving our console log outside onto the top level of our function just like we have here which means if we ever wanted to change the state within our use effect we get caught in that loop like we've talked about a few times already now with my little counter i can trigger a manual rerender by just clicking the add button and we can see that when i click the add button it updates the state behind the scenes so it changes from zero to one and it rerenders our component now with count equaling the number one we get our console log which rendered because it's a function call here on the top level of our component it then would have skipped down here and rendered our ui so that it could display the correct count now that count is set to one and last of all it ran our effect which of course runs after every render as we talked about the first parameter to use effect is this function but there's a second parameter which although i mentioned is optional is something that you will almost always include and that is something called a dependencies array now don't let the name confuse you the concept is actually not too terribly difficult the array that we pass as a second parameter to use effect will contain values that if they change from one render to the next will cause this effect to run in other words it limits the number of times that this effect will run or rather it determines when this effect will run instead of running after every single render now if i leave this as an empty array it effectively tells react i want to run this function on the very first render of my component but then there are no dependencies to watch and trigger this effect to run again so it ends up being it runs once when the component first loads and that's it never again we can see this in action by refreshing our app seeing that we did get effect ran and then adding to our count and from here adding to our account is no longer running this effect and that's because we have an empty array which is not looking for any changes between one render and the next now if i wanted to run this effect every time count changed i would have to make sure that my effect knew that count was one of the dependencies that signaled to the effect to run again so now i hit refresh it will run once which is why we get effect ran in the console and now every time i hit add i'm also running my effect again under the hood this is what's happening when i hit refresh state starts out as zero and the component will take count and replace it with a zero everywhere it can find it so here we have an array with the number zero in the first index or the zero index then when i click add react will update the count from zero to one and it will rerun my function or in other words rerender my app component where everywhere i'm using count is now one remember this used to say count well the second time around it changed from zero to one so now it's running this component with an array where one is the first index or the zero index in that array then it's going to look at the last time it saw this dependencies array and it's going to compare an array with the number zero to an array with the number one now i probably shouldn't use triple equals because that's not exactly what's happening here let me say okay compared to it's going to compare this array to this array and if any item in this array is different then it knows to rerun this function now here's the question what if i were to hard code an array with the number 0 in here let me hit refresh we can see that our effect did run but now what will happen when i cause a rerender to trigger if you need to you can pause and think through that for just a second well i can click add and we'll see that my effect is not running again why do you think that is well with a hardcoded zero in here every time the app rerenders and use effect looks at my second parameter of this array it's comparing the array with the 0 as the first item in it to an array with a 0 as the first item in it it's going to see that those are exactly the same values and therefore it will not run this function and that's why it's called a dependencies array use effect depends on these values to know whether or not it should rerun our effect so again when i put count i refresh the page count starts at zero i hit add count is one it notices that that has changed and therefore it reruns our effect i feel like i've repeated myself a lot here but i'm hoping that the concept will sink in the more times you hear it okay it's high time that you get your hands on the keyboard so let me type out a quick challenge okay it's your turn to write the use effect the use effect should run anytime the count value and state changes and for now it's just going to console.log something like effect function ran pause now and work on this challenge we can start our effect by using react dot use effect as a side note just like we could the structure use state from the import statement up here we can also restructure use effect if we wanted to and just say use effect in fact i would suppose this might be the more common way that you'll see it but just like with use state i'm going to use react dot use effect just so that it's very clear where use effect is coming from use effects takes a function as its first parameter before we had a function declaration like this however i am going to use an arrow function because that is how you will most commonly see it this is just going to console.log effect function ram now here's something tricky without the second parameter we know that this function will run any time the app component rerenders and right now the only way we're causing rerenders is by clicking the add button let me hit save i can click the add button and we'll see basically the same thing that we had when we had a dependencies array however as i mentioned there's almost never a reason to not include your dependencies array there certainly are instances where it may be required but especially on the beginning end of learning react you almost always will need to include your dependencies inside this array if you have no dependencies remember that means that your effect function will only run once the very first time your component is rendered however our challenge specifies that it should run anytime count changes so let's very explicitly put count in here and now i hit save anytime count changes we get effect function ran in the next lesson let's bring back our star wars data and get that displaying on the screen again but this time without an infinite loop occurring in the background it's quiz time again pause the screencast read through the questions type down your answers and when you're ready hit play and we'll go through the quiz together what is a side effect in react and what are some examples put very basically a side effect is essentially any code you want to run that react is not in charge of handling a majority of the time you can think of that as your code that will have some kind of effect on an outside system so some examples of that might be local storage anytime you interact with an api something like web socket subscriptions however another example of side effects is whenever you have two pieces of state two states that you want to keep in sync with each other so those are the examples maybe to answer the first part of the question a side effect is any code that affects an outside system the two states keeping in sync maybe doesn't fit perfectly in with that but hopefully our examples clarify that a bit so then what is not a side effect in react basically anything that react is in charge of so some examples of that is maintaining state between one render to the next and keeping the ui basically in sync or displaying correctly with the data whatever that data might be whether it's state or props there's certainly other things that react is doing but it mostly boils down to these two or three things i think we have in the slides about what its primary tasks are so yeah to take our elements and render them to the dom as well so we'll say render dom elements okay number three when does react run your use effect function and when does it not run the effect function well it will always run your effect as soon as the component loads so that's on the first render of your component and then by default assuming we don't pass any dependencies to our dependencies array like we asked about in question number four it will run our effect on every rerender of the component so that's assuming no dependencies array and when does it not run the effect function well it will only not run the effect function if there is a dependencies array available in which case it will not run the effect will not run the effect when the dependencies in the array stay the same between renders and maybe i should say when the values of the dependencies in the array stay the same between renders okay that leads us in perfectly to number four how would you explain the dependencies array well syntactically it's the second parameter to the use effect function and its purpose is to allow react a way to determine whether it should rerun the effect or not it ends up being an array of values that when react is in charge of rerendering a component it will compare the values in the original array with the values in the new array that the effect is running when the component rerenders and if any of those values is not the same it will rerun our effect function so on a high level it's simply a way for react to know whether it should rerun the effect function okay awesome job on this quiz we're really rounding the final corner on this section we just have a few more things to cover so when you're ready let's jump right in i want to work through together getting our little app back to a state where it can pull the star wars data without some kind of infinite loop happening in the background so i have a small series of quiz questions i'm going to ask first of all what will happen when i uncomment this code and hit save how is my app going to act with my use effect function set up exactly this way make sure to look very carefully through the code here don't refresh the app or anything like that just use what you have learned so far about use effect and the dependencies array to figure out exactly what a use effect that looks like this means well for one we can see that we're telling use effect that it depends on the count variable which means that if count ever changes it's going to run this function again and if we look closely in the function we see that we're receiving the data but we're just console logging it we're not currently updating our state with that data let's open the console and see if this holds true to what we expect i'll hit save the very first time around it's console logging the data that we got back from the star wars api and then if i change my account it's logging it again not only is it logging it again it's actually going out to the api and getting the data a second time so that leads me to the next question in our quiz the second question is how will this use effect be different if i use set star wars data instead of the console log like before i want you to pause and look through this code try to analyze it and see if you can understand how things will be different now the main difference of course is that we are actually going to be updating our state when we receive that data back updating that state is going to trigger a rerender of our entire component however that rerender will not change the value of count and therefore will not change this array from one render to the next and therefore will not rerun our effect so let's hit save we'll see that our data populated it all happened kind of quickly but really what happened in the background is our component rendered the first time which ran our use effect if i haven't said it explicitly use effect will always run on the first render that triggered the fetch request to go get our star wars data which eventually set the star wars data setting the star wars data updated state which caused the component to rerender again so now star wars data is the object that we see it rendered the star wars data as a json object to our screen and then the effect checked to see if the old count still matched the new count and sure enough it did and therefore it did not rerun our effect because it didn't rerun our effect we did not get our star wars data again which would have caused that infinite loop if i remove my dependencies array completely then we're back where we started we're setting the star wars data rerenders the component which runs our function which sets the star wars data which rerenders our component and so forth now it is pretty contrived to have a dependencies array that is looking at the count because if you thought all the way through this you would also notice that if i scroll down and i click my add button it's going to make another call out to the api we don't have a console log or anything like that i bet if you were to open your developer tools you would have seen in the network tab that it did make another request out to the star wars api and it did set our data here which would have caused a rerender we just didn't notice anything because the data that came back is exactly the same as what we had on the screen before so that leads me to the third quiz question what exactly should be in our dependencies array in this case we can see that our code is not making use of count usually what you put in a dependencies array will also show up somewhere in the function but right now we're not using count to determine how this function runs at all so if count shouldn't be in our dependencies array what should be there some of you might have thought that it should be star wars data but if we think through what we've learned about the dependencies array we'll know that if i put star wars data in here and set star wars data inside the body of that function i'm going to get an infinite loop again because when i set star wars data it's going to change star wars data and it's going to rerender the app which will then run our effect and we'll end up in that same loop assuming i only want this api request to happen when the app first loads if i leave this empty because there are no dependencies for this to run then i can successfully set up my effect so that it will just run the api request on the very first render of our component now we can see if i hit save it updates our data and actually you know what let me put a console log here i'll say effect ran or hit save again we get our data we get the log for effect ran but now even updating my account is not running our effect again i know this has probably been a lot to take in but i'm glad you've stuck with me so far i really hope you thought through those quiz questions as i gave them to you if not you always have a chance to go back and reanswer those quiz questions and when you're ready in the next screencast we're going to extend this example just a little bit to try and help drill in the way that use effect is working we're going to start right off with a challenge i want you to combine our count with our current url that we're using to get our star wars character so that clicking the get next character button will do the fetch request but for the next character id right now it's the character of one which as we can see is luke skywalker and i've updated our state to begin with one because i don't think that there's a character with an id of zero so essentially clicking get next character will increment count but instead of having a hardcoded one in here it should look at whatever the current count is to make this request while you're at it don't forget to consider your dependencies array pause the screencast and see if you can get this new feature to work there should only be two small changes that we need to make one is instead of hard coding a one there we can add to the end of the string our current count now i prefer to use the template strings if i can so i'm going to change this to a template string and then instead of using plus count i will interpolate the count value inside now if i didn't make any changes to my dependencies array think for a second what's going to happen when i refresh and i try to get the next character when i refresh my component is going to run and it will run this effect because it will always run this effect on the first render count will be set to one and so it will make a fetch request to the star wars api where the endpoint is people slash one however because i have nothing in my dependencies array nothing is going to trigger this function again let me put count back in here and i need to make sure that i will rerun this effect anytime count changes so now i'll hit save after the first render it went to the api and got the character with the id of one we can even see here it says the count is one then i'll click get next character the count is two and after a little bit we get our next character the one with the id of two which is c3po so when i click get next character it updates count updating count reruns my function or rather rerenders my component the effect then looks at the old array which was an array with one item with the number of two in it and then it looks at the new array which is an array with the number of three in it and notices that something has changed which is then a trigger to run my function again with the new number of three as count we have a couple more things to learn about use effect before we can check that one off our list but before we do that it's time that we go back to our meme generator and we use our new knowledge to apply what we've learned about making an api request and saving that data to state so that's what we'll do next all right we've made it to the very last challenge of the meme generator and then we'll have completed the project if you remember up until now we've been importing our memes data from a file that i created and this data just came literally copy and pasted from an api request to the imageflip api but since that's not usually how things work instead we're going to make that api request ourselves and we'll do that inside of the meme component so your challenge is as soon as the meme component loads for the very first time you should make an api call to this url once that data comes in you can save the memes array part of that data so the data will look like this object and you can save just the memes array part of that data to our all memes state you might notice i renamed this from all meme images to just all memes and that's because the meme data that comes in is not just an image they are objects that contain a url but i thought that all meme images might be a little bit misleading since you know that you'll probably need to use use effect to accomplish this api request you should think carefully about what the dependencies will be if any that if they were to change you would want to cause to rerun this function if there are any dependencies make sure to include them and if there aren't any then make sure you understand why as a hint if you have used async await functions before or you feel really comfortable with them for now don't use them we're going to learn in the next screencast how we can successfully use async await inside of a use effect but it turns out it's a little more challenging than it might seem on its face so for now just use dot then blocks to resolve the promises that come back from making a fetch request alright the time is yours pause the screencast and work on this challenge all right maybe right here below our state i will make a call to react.use effect the first parameter is a function i'll use an arrow function since that's a more common way you'll see it and let me actually think about the dependencies first now i want this api request to happen as soon as the component loads and if you remember what we're doing is saving all of those memes in our state and then we're accessing a random one of those memes to determine what image should get showed in here however there's nothing that is changing in state that will actually require me to make another api request and so since i have no dependencies for this effect i'm just going to leave an empty array then inside of our effect we will make a fetch request to this url so i'll call fetch put in that url resolve it with the dot then we're going to take the response and parse the json into javascript and then we'll have some data back and before we jump into setting state let's just console.log that data and see how we're doing we'll hit save and awesome okay that looks very similar to what we have in our memestata.js file so now we should be able to use set all memes instead of console.log so we'll put in set all memes however if you read carefully it says that we just want the array part of the data that we get back so i'm not going to put the data in there if this object represents data then i actually have data dot data maybe data wasn't the greatest choice because we have data.data that's an object that has a memes property so data.data so let's put that in here data.data.memes outside of my effect i think i will just try console.logging all memes and so what should happen is on the very first render we have no dependencies so this effect will not run again but on the very first render it will fetch our memes obviously parse the json and then set all of our memes to the data data memes array setting our state will cause a rerender which should then run our console log a second time this console log will run the first time that it gets rendered and then again after the state changes now of course if i left this here it would also console log all memes for every character that i typed into my inputs or every time i click the button but for now let's just see what this gives us ah and that was confusing to me because we are initializing it with memes data let me actually delete memes data and then put in an empty array here the empty array is i'd like to think of it as an empty box that we will then fill with our memes as soon as our component loads the first time let me hit refresh again okay and that time we got an empty array first from our first time this console logged and then we got the array of memes from the api awesome so i can delete my console log actually let's see now every time i type something here we're going to be logging the all memes array to the console so we don't want that let's go ahead and make sure everything else is working correctly we'll click get a new meme image ah and we actually have a bug in our code i think i'll actually make this a challenge for you okay your challenge is to try and figure out why our code is broken as a hint it does have to do with the difference between what we were importing before from our memestata.js file and how we were using that versus what we're setting as our state in set all memes inside of our use effect pause now and see if you can fix the bug that we've introduced as we saw before when we were importing the memes data we were receiving this object so we had this object which we called memesdata.data.memes however in state when we were setting state we were initializing it with the entire object not just the memes array so we kind of switched things up when we were setting the array in state instead of the whole object however down in our get meme image we were accessing the memes array by using all memes.data.memes but now all memes is an array it's not an object with a data property so i think i can actually just get rid of this line completely and replace memes array with all memes and i won't need this line anymore so now i'm accessing all memes.length and i'm indexing into all memes at our random number to receive the random name image so let's try again we'll hit save one does not simply walk into mordor get a new meme image very nice just to polish things off i'm going to clean up this challenge i'm going to delete our memes data file and awesome everything is looking great before we can tie off a nice little bow on this section i want to talk about use effect for just a little bit longer as i mentioned if you're familiar with async await it may have been tempting to say well i want this callback function to be an async function so that i can use the await keyword here and use a little bit more tidy version of our promises here so that would look something like this where you say the response is wait for the fetch to come back and then you would say data is await response.json and then you just set all memes to be data.data.memes if you're familiar with async await obviously we can see this is tidier and this would be really nice to use however you'll never want to make this function an async function and to really understand why we need to talk about one more thing that we can do with this function inside of our use effect so before we move on let me undo that and let's talk more about that in the next lesson we'll start this one off with a pretty simple challenge just to make sure you're still awake in keeping your hands on the keyboard in our app component we are rendering a button and a component called window tracker and over in window tracker right now all it's doing is displaying the current inner width of our window because it's directly accessing the window.enter width as soon as the component loads that's not updating but we're going to get to that later so if i hit refresh it'll give me a new window width but we're eventually going to make it so i can change the window width and that number will dynamically update however for now let's focus on this challenge your challenge is to create some state called show which we will default to true make it so that when the button gets clicked it will toggle that show value back and forth and conditionally render window tracker only if show is true pause now and work on this challenge okay let's create some state const show set show equals react. use state with the default of true i'll create a function just called toggle that will run set show it'll look at the previous version of show and return the opposite of that then we'll set that up as an on click on this button and last of all we will conditionally render the window tracker component if show is true so i'll say show and the window tracker component easy enough we'll refresh and it's toggling on and off awesome now here's something to take a look at if i widen my window a little bit and then toggle this off and back on you'll see that our window width changed and that's because when this component window tracker gets toggled off it essentially is what's called unmounted is completely removed from the dom when i click it back on it's remounted and therefore it will rerun this window.inner width which gives me the updated version of window width the truth is though we can do better than this what we can do is add an event listener to our window that listens for the resize event and then whenever the window is resized we can set some local states to our window tracker so that we can display the correct window width at any given width without having to toggle it on and off or refresh our page completely however because it's an event on the window i can't simply add something like an on resize event like we have with other event listeners up until now and so i'm going to have to do a little bit of manual imperative dom manipulation and because i'm going to be interacting with a system outside of our window tracker component in other words the window itself think for a second what tool does react give us to interact with some kind of outside system and keep our local state in sync with it that's right it's use effect so i'm going to set up an effect we'll say react.use effect and i'll put my callback function in here and when we think about our dependencies at first glance it could be really tempting to say well i want to rerun this effect if window dot inner width ever changes however something to keep in mind is that this function our component function gets run each time the component is rendered right now when the component is rendered window.inner width is equal to 474 and that's a constant value that's not going to change on its own so let's say for example i refresh this i change the window size just a little bit there has been nothing to trigger a rerender of my window tracker component because window.enter width is not something that automatically rerenders a component in react so that was a bit of an aside but i'm going to remove that and instead we're going to listen for a resize event on our window so i'm going to say window.add event listener listen for the resize event and then we will run the following function for now let's just console.log resized okay now i resize and we get our consol log running awesome the next step is something i think you can do pretty easily by now and so i will type that out as a challenge your challenge is to create some state we'll call it window width which you can default to the current window.inner width whenever the component is rendered then inside of our event listener you should update the window width every time it changes and you should change our h1 to not display the window.inner width that it calculated the first time the component rendered but instead to point to our new window width state variable pause now and work on this challenge okay we will create window width and set window width react.use state and we'll default it to the current window dot inner width that it calculates when the component first renders then inside of our callback function instead of console logging resized we will set the window width to be the window dot inner width at the time that this function runs and last of all we will look at the window width instead of window.inner width so now when i make changes here okay our window width is updating dynamically awesome well now let's take a look at a little bug that we have i'll clean up this challenge first remember our window tracker component is only mounting when its parent is allowing it to render with this show variable when it rendered the window tracker it immediately launched or created an event listener anytime the resize event happens that event listener is registered with the dom itself so even if i toggle off my component and then try to resize the window we see that we get this warning and it tells us we can't update react state on an unmounted component so in the end what happened is our window tracker is no longer a part of the dom but the browser itself is still listening for the resize event and trying to set the window width of an unmounted component this is something called a memory leak and for now it's good enough to know that you don't want a memory leak now due to the challenges that you just completed this screencast is getting a bit long so in the next lesson let's address this issue of the memory leak and see what we can do to fix it previously we saw that if i were to turn off my window tracker component or rather stop it from rendering and then run my resize event we get this warning that talks about a memory leak as a reminder it's because we set up an event listener on the window which registered it with our browser and even removing the window tracker component by toggling it off does not automatically remove that event listener one thing you should always try to be aware of when you are interfacing with side effects using use effect is any potential consequences that might happen if you don't clean up the things that you do in that side effect this is just one example where we're adding an event listener that is not getting cleaned up when this component unmounts but there certainly are other instances of this let's say for example you are creating a websocket connection with maybe a chat api and you have a little chat app that will update your screen automatically every time there's a new chat message on the server well when you create that subscription to the chat api and then try to unmount the component it's always a good idea to then sever that websocket connection as a way to so to speak clean up the effect that you have created in your use effect and in fact that's actually what we're about to learn is called it's called the use effect cleanup fortunately it's pretty easy to do remember we have a function as our first parameter to use effect but currently we're not actually returning anything from that function well as it turns out what we can return from use effect can be a function and you can think of this as a cleanup function in fact to make that more obvious let me put this as a function declaration so when react runs our use effect function here it will receive in return another function that it can use to then clean up any side effects that you might have created in reality it has no idea what the side effects are that we created so what we put in the body of our cleanup function should be something that well we write to clean up our own side effects in the case of adding an event listener there's a sister method called remove event listener now with remove event listener we need to pass the exact same function that we provided when we added it and so i actually need to move this outside of the event listener and set it up let's call this watch width then i can pass in the name of watch width when i'm adding my event listener but this allows me to then say window dot remove event listener the resize event and the event listener function i want you to remove is this watch with function okay let's see that this is working first i'll put a console log that says setting up inside of my watch with event listener and then inside of my cleanup function i'll console.log cleaning up i'll hit save let's resize the window look at our console okay it's running setting up every time the watch with function runs maybe setting up isn't the right way to phrase that since we're actually running this every time the resize event happens but that's that's okay for now so we get a bunch of setting ups and now let me toggle off the window tracker actually let me refresh and then do one little resize and then i'll toggle the window tracker and we see that we get the cleaning up function that ran and now if i resize my browser i don't get that memory leak warning like i had before so let's take a step back and walk through this logically to understand exactly what's going on here because this can be a confusing topic our app component is deciding when the window tracker component should be rendered as soon as we toggle that on and it renders it to the screen it sets the window width state it determines what that should be based on the current window width at the instant that this component gets rendered remember use effect will only run after the dom has been painted or in other words once the h1 has been rendered to the screen so after creating the state it will render our h1 and then it will register our use effect this use effect has no dependencies because there's nothing inside of here that's going to make me reregister a new event listener and so it registers this event listener on the resize event of the window and then anytime i resize it's reacting to the event listener that i set up and then when i toggle off the window tracker react recognizes that this component has reached the end of its life cycle and it's about to be removed from the dom and so it takes the function that it received from us when it first set up our use effect and it just runs it in fact it runs it kind of blindly it doesn't know what that function contains but we as the developers are expected to successfully clean up after our side effects and so we remove that event listener and it is gone so one last recap use effect takes two parameters the first one is the effect that you want to run the second one is any dependencies that react should watch for changes in to rerun your effect function and that effect function is allowed to return another function that can clean up after any side effects that might be lingering in case your component dies now for many effects that you set up you might find yourself not actually needing to provide a cleanup function at all in which case that's completely okay this is not a required part of use effect for it to work as always feel free to play around with this code i know that this can be a confusing topic so the more time you spend in it actually playing with the code yourself the better off you'll be understanding this return function does bring us back to the topic that we were talking about a few screencasts ago on how we can't use this as an async function and so let's go back revisit that topic and then we'll finally be ready to recap this entire section i mentioned in a previous screencast that we wouldn't be able to simply put async in front of our callback function for use effect and now that we've learned about how we can return a function from use effect to act as a cleanup function we will probably see why we're not able to put async in front of this callback function if you're familiar with async functions you know that by putting async in front of your function definition it alters the way that function well functions in javascript whatever i return from an async function does not become a bare value return that we can receive in a variable when we're calling this function but instead an async function will automatically and always return a promise as i'm writing my async function whatever i say should be returned is actually what will be resolved as the successful promise completion of my async function however since react is expecting the return value from my async function to be another function that it can use to clean up any side effects that i create in the process of running my effect if what it receives instead is a promise it's not going to be able to run our cleanup the way that we want it to fortunately for us there's a really easy work around to this and that is to define a separate function inside of use effect and remember if you're okay using got then syntax with promises then you don't have to do any of this at all but let's say you really are anxious to use an async function well i can just call a new function we'll call it an async function and maybe let's say get memes and now because it's an async function i can move this content in here and say something like const response equals await the fetch request const data equals await res.json and then with that data i can set my memes now this is just a function definition so the very last thing i need to do before i'm done is to call my own function here inside of this callback function this is a lot of functions to be dealing with for sure we've got a callback function which has a function definition a function call and then a returned function but again if this is too much then you can just go back to using.then syntax with your promises and that's completely okay as well in our case with our effect we probably don't need a cleanup function here because we're just making this one call one time it's happening as soon as this component loads there isn't really a builtin way for us to unmount the meme component or anything like that and so we can just delete our use effect cleanup function that we were returning from our callback function i tried to take everything that we just talked about and boil it down to a written summary so if you're interested you can read through the summary that we just put here and now we'll take the opportunity to take a look back at all the new things that we learned about react in this section and we've covered a lot of ground so when you're ready let's take a look at all the cool new things that you are now able to do as a react developer holy cow i can't believe we are finally here at the end of section 3. we have covered an insane amount of topics and you have built your first interactive react app i mean even try to think back to section 2 and what we knew then versus what we know now it's crazy before we wrap up the section let's do a quick recap of everything that we've learned one of the key components of an interactive web app is the ability to listen for events so we learned how to add event listeners in our react app and that was a crucial springboard for us to learn state then even though we had seen a sneak peek of conditional rendering beforehand we officially learned conditional rendering and saw a few different ways that we can implement it in our code then we kind of waded through one of the heavier topics of forms in react for better or worse you'll end up using forms pretty regularly in react and on a side note i hope you mostly just have to do input boxes instead of worrying about all those other kinds of types but it's important that we learn them so that we can apply them when we need and then we dove deep into understanding side effects and how we can handle side effects in our react code these topics combined with everything that we learned in the previous two sections make up a really robust introduction to the react library and of course there's a ton more that you can still learn about react but these foundational pieces give you the tools that you need to build your own basic web apps especially considering the depth of the topics that we learned in this section you should definitely go over to the today i did channel in the scrimba community discord server and post a celebratory message saying that you finally finished section 3 of the introduction to react course in fact if you click this screenshot it'll take you right there and the end of this section essentially marks the completion of the topics that we'll be learning in this course however if you know me at all you know that i'm not going to let you go before i get you to practice this a lot of times so the next section is completely dedicated to practicing everything that we've learned and along the way there's a couple new things that i'll introduce here and there i'm really excited to jump into the next practice section and i think you should be too we're going to be working on some really cool projects before that though you should bask in the glory of having completed this section so once you're all done basking i will see you in the next section if you're jumping into this section because you have completed all of the other sections all the exercises or challenges and all the projects that i have thrown your way then congratulations you have done a lot of work to really learn and hopefully deeply understand react naturally there's a million more things you could learn about react it's a framework you can dive really deep into and get very complex with but at this point you really have all of the fundamental tools you need to build highly interactive web applications on your own so at this point this section is dedicated completely to you guessed it practice i know i've said it a million times before i hope you're not terribly sick of me saying it but you will not get good at anything unless you practice it over and over we know this intuitively when it comes to something like learning a new instrument or learning a new language and is absolutely no different when it comes to web development so for the remainder of this section we will be working on three projects and i want to take a second and give you a preview into what those projects are now this will be a little bit different than what we've done in the past so far we've mostly been creating something completely from scratch however the first two projects i'm going to have you work on you'll actually be jumping into an existing code base and we're going to ramp up to this a little bit the first task you'll have is to revisit our react fax site from the very first section in this course but now to apply the knowledge you have about state in react to implement a light mode and dark mode toggle which will allow the user to toggle between those two color schemes this one will end up being more of a warmup project because it will only be one screencast long then you're going to jump into a new project which is sort of a markdown version of an apple notes clone some of the basic code for this will already be written for you but some of it will be broken and along the way you'll also be learning something new as you implement a new feature that interfaces with local storage so you can save these notes in a little bit more permanent way then for the third project we'll go back to our roots we'll be creating it completely from scratch and that is this dice game called tenzi's every single step along the way with these projects is going to be a challenge for you to complete so you will get your hands on the keyboard and you'll get lots of awesome practice to help you really solidify the things that we've been learning about react so what are we waiting for let's jump right in we're going to start off with a sort of warmup challenge here usually when you join a team as a web developer you probably aren't going to be creating your projects completely from scratch but instead will sort of be tossed into a new code base that you then have to spend some time becoming familiar with before you can do any kind of work on it now the code base here fortunately is something that you have worked on in the past and that's the react facts site that we worked on in the first section but i'd like you to imagine that when you finished the first version of this code you handed it off to a team and in the meantime they've been working on implementing this light mode and dark mode toggle but are needing some help for you to add the functionality to it so a major part of this challenge is to spend a really good amount of time looking through the existing code because it has changed since you last looked at it and make sure that you spend some time understanding how everything is working in my little advice section here you see it says to first start with index.js work your way to app.js go to main.js and navbar.js and then to follow the css class names in the style.css so that you can understand how things are working while you're at it make sure that you're looking closely at the conditional class names in the jsx to help you decide what props need to be passed down to the components that need them you should also think carefully about which components will need state this is going to help you decide where you're going to write the code that initializes the state and how to then pass it down to the components that need to access it in the slide down here i included a couple screenshots that have both the light mode and the dark mode you can click on either one of these to go to the figma file that has the specific colors and other design aspects however in reality the design has already been implemented you shouldn't need to do too much in changing the design because it all is existing in the css on this next slide i also have a little animated gif that shows you exactly what should be happening of course you click the light and dark mode up top and that will change every aspect of the site to its light mode or dark mode color scheme again jumping into an existing code base like this is going to be a really common task as a developer so when you're working on part one of my advice here spend a real significant amount of time doing this i imagine it will realistically take you at the very least about five minutes but even upwards of 20 or 30 minutes before you maybe get a good grasp on the code that we have here okay the time is yours pause the screencast and work on adding this light and dark mode feature let's start off by looking in index.js i think we're going to find it's not that impressive here we're really just importing app and rendering it so let's follow that down and go to app.js looks like it is rendering a div with a container class name that is containing the navbar and the main elements which we're importing up above so let's go to navbar okay this one's a little more significant like i mentioned looking at the conditional class names is going to give us some good hints as to what we need to do here we can see that navbar is expecting props and specifically one of the props called dark mode i'm assuming this is a boolean because of the way it's positioned in this ternary here it says if props.dark mode is true then apply the class name of dark otherwise don't apply a class name at all and if we look really closely we also are expecting a prop called toggle dark mode which makes sense because our toggle here exists inside of the nav bar so clicking this toggle should change the dark mode from true to false or false to true the other thing app.js was rendering is this main so let's go look at the main it looks like main is also expecting props again props.dark mode so it's going to do essentially the same thing and i think that's it this one is not expecting to toggle the dark mode anywhere so we should be set up now to create the state we need to make this light and dark mode work now because both the main and the navbar are expecting an incoming prop called dark mode that means that the parent of those this app component that contains or renders the navbar and the main should probably be where the state is being held so let's go ahead and create our dark mode and set dark mode which is react dot use state maybe since the code right now is showing that it is not in dark mode let's set this to true so that when everything is hooked up correctly we'll see the page update i'll pass the dark mode prop to both of my components since we saw that they both are expecting it to come in and then the navbar specifically is expecting something called i think it was well let's just go look at it navbar toggle dark mode so i'll copy that that's the name of my incoming prop and now i need to provide a function which will change the dark mode i could do that in line or my preference is to create a separate function so we'll say toggle dark mode and that's simply going to call set dark mode looking at the previous mode and it'll just return the opposite since it's a boolean and now let's pass our actual toggle dark mode function down to the nav bar i'll create some space here let's hit save and when we do that it should switch to dark mode awesome okay and then we can click our toggle great this is working just like we'd expect obviously what we have worked on here might be a bit contrived because in our case somebody already implemented some of the major features that make this work but that's what makes this a warm up we're really gearing up to work on something that's a little more indepth and the main takeaway i want for you in this challenge is not so much implementing the actual feature in this case but instead taking the time required to look through the code and to understand the code of course if you're working on this with a team you'll probably have access to the developers that had written this code and that's when you could ask them questions why did you write something the way that you wrote it and that way you can get some good insight from them on how it's written and how you should proceed when you're adding new features okay i feel like we're nice and warmed up so now we're ready to jump into another existing code base which is one of our major capstone projects for this section as a developer it can be really fun to start new projects from scratch especially when that project is one of your own ideas however a much more common task as a developer is to be thrown into a code base that you're unfamiliar with and asked either to fix bugs or add new features naturally before you're able to be productive on any code that's new to you you need to be able to read through the code that exists to get a sort of lay of the land and make sense of what you're seeing only then can you start to feel confident enough in the code base that you'll be able to add new features or fix bugs without actually causing new bugs in the code or breaking an existing feature now in reality this is where something like automated testing comes in really handy but unfortunately you won't always have the luxury of working on a code base that has robust testing already set up for you and so i'd like to introduce you to the markdown notes app i guess i didn't get very creative with the title this app already has some bones set up for you you can see that there's a list of notes that will be on the left you can create new notes like i just did with this plus button and on the right there's a markdown editor where you can toggle between preview and right now this editor is not something that i wrote this is built by another team that made a package called react dash mde markdown editor and we've simply implemented that package into our code here so on each one of these notes i can type new things into the note i can switch back and forth between preview and write mode everything here is markdown so when i bold something it will surround it with the double asterisks but when i go into preview mode it will render that as html and so we see a bolded paragraph if you haven't spent much time doing markdown you can play with the editor here and get a general sense of how markdown works toggle back and forth between write and preview but as it stands this notes app has some very limited features first of all we see that it's just calling our notes note 1 note 2 note 3 note 4. we also have no way to delete any notes and probably worst of all if i refresh this app all my notes disappear this is the screen i set up if we have no notes and we can click the button to create one so before we even dive in to look at what features we plan on adding to this project i have your very first challenge which is to understand the code base i'll type it out to be more specific your first challenge is to spend a good 10 or 20 or maybe even more minutes reading through the code and trying to understand how it's currently working now i say 10 to 20 minutes as a guideline but you really should spend as much time as you need to feel pretty confident that you understand this existing code although in reality you don't need to fully understand everything you see here just to move on i will walk you through a high level overview of the app but i really urge you to actually pause spend this time reading through the code see if you can understand it before i get to my explanation of it this kind of exercise is crucial when it comes time for you to actually jump into a real company's code base so now is not the time to shrug this kind of exercise off so pause now and spend some time to gain an understanding of this code i think it never hurts to just start right at index.js although we can see here that well we're really not doing anything we're just rendering the app component but it's good to know that we're not missing out on something important here then i'll go to app.js and we can see this is where the bulk of our logic is happening we have quite a few imports these top ones because the path is starting with a dot slash indicates that it's one of our own components here we've got the sidebar and the editor if i had to guess i would probably say that this section on the left is the sidebar and this whole section on the right is the editor if you looked closely you might have seen data and gone over to data to see that well we have some really basic seed data or rather it's data that could be used to create some initial notes for us for testing purposes although it looks in our case like this is not really being used right now back in app.js we can see we're also importing something called split from react split if you really went above and beyond you might have actually done a google search for react dash split to see what it's doing and it turns out it's a third party library that we installed as one of our dependencies right here and it allows us to have this split pane that is easily resized by the user so that's pretty cool we're also importing nano id which you may or may not have seen already and it looks like we're using it right here when we're creating a new note hopefully this also illustrates the importance of naming your functions and variables with a meaningful name when my function is called create new note it becomes really obvious what this function is supposed to do so then we come down to our actual app component and it looks like we're saving all of our notes in state initializing as an empty array and then we're creating this state called current note id and it looks like it's initializing it either as the id of the very first note or an empty string now you may have seen this first part and been a little bit confused honestly that's okay but as a side note this is one way to essentially say i need to make sure that notes at the index of 0 because notes is an array exists before i try to access the id property of that note when we initialize state as an empty array in other words when i refresh this app and i have no notes notes at the index of 0 is undefined and trying to say undefined dot id will actually throw an error in javascript again that wasn't totally necessary for you to fully understand but that is an error you're going to run into quite a bit in more updated versions of javascript there are different ways around this but that's outside the scope of this course right now next we've got this create new note function which is relatively selfexplanatory based on this set notes call it looks like it adds the new note to the beginning of the list and then it looks like it sets the current note id based on this note's id at this point i might not totally understand what the purpose of set current note id is but that's okay this update note looks like it is a way for us to save and state any changes to our notes that we create which allows me to actually type something here and have that be saved at least locally in state for now find current note well this isn't setting state or anything so that doesn't seem immediately obvious what it's doing but if we look a little further down we can see that it might be a helper function that is helping us determine what the current note is and we're doing it both in the sidebar component and the editor component to pass the current note down as props to that component again if i were looking through this code base for the first time and i saw this split component i would probably end up going to the react split documentation to try and better understand how that works looks like we are conditionally rendering this split component if the notes array is greater than zero in length but otherwise we have this section here which is what we get when we first refresh the app and we have our title and our button so that's a good enough start in here let's go look at our sidebar immediately i see this props.notes.map which looks like it's taking the array of notes and mapping it into some note elements which are then being displayed down here this will show up better when i actually create a note and if i create more notes it looks like we have this class that actually changes the sidebar style when one of these notes is selected that's this selected note dynamically rendered class name it also looks like when we click anywhere inside of a div we can set the current note id which i presume is what's helping us change this class and also should be changing what actual text is being shown here if i call this note 1 note 2 note 3 and then toggle between them yep that seems to be saving or rather correctly displaying the text that gets shown up in our editor then in our editor itself this one seems fairly straightforward it is maintaining its own state and it says selected tab although the default here is right and so i'm guessing that has more to do with this little tab up here write or preview and if you did take the time to go search for react mde you might have seen that this react mde component it takes a prop called selected tab and on tab change and that is something that's built into react mde now something like this which is creating this converter object and has something called showdown.converter i assume unless you have done some kind of markdown to html conversion before this is probably completely foreign to you something like this is probably not super imperative for you to fully understand in order to understand the rest of the code base however it certainly wouldn't hurt to go to showdown and look at the documentation to see if you can at least gain a general understanding of what it's trying to do okay now i know that was pretty longwinded but the truth is i'm really hoping that you spent even more time than that trying to understand everything here fortunately in this environment you also could have just started clicking in here and making changes to see what kinds of things you could break curiosity like that is going to be really helpful for you when you're trying to understand how something works now since this screencast is getting a bit long i want to in the next screencast start talking about the features that we want to add to this notetaking app let's take just a minute to look at the features that we will be adding to our markdown notes app so that it's at least a marginally usable app the first thing we're going to do is sync all of the changes that happen to our notes with local storage we won't be saving anything to a database in this project but at least so that we have a way to save our notes between refreshes of the app we're going to be using the browser's local storage to save every little change that happens to those notes next we're going to fix the thing that's just showing note 1 note 2 note 3 because well that's not very helpful in terms of trying to find our notes going forward essentially create a note summary and use that as the title in reality it's just going to take the first line of our note and put that in our summary title right there next we're going to add a feature where every time we modify a note it bumps it to the top of our list that way we have our most relevant notes living near the top of our list instead of possibly buried way deep down on the list and then last but certainly not least we're going to add the ability to delete notes along the way of adding these features we are going to learn another thing or two about react so that's going to be exciting so assuming you've taken the time to really dive deep into the code and understand how this project is working currently that means you're ready to jump in and start working on this first feature which we will be working on in the next screencast let's start with the very first feature and that is to sync your notes with local storage in case it's been a minute since you've used local storage or if this is the first time you've ever accessed local storage i created a little slide here that should help you get started this link up here will go to the mdn docs for reference but essentially you'll be using localstorage.getitem and localstorage.set item to interact with the local storage api when you're using getitem you provide a key and that key is like an object a way to access the data that you saved in local storage in our case i'd probably recommend calling this notes instead of key and then when it's time to set the item in local storage you will both access the key where you want to save this and the value that you want to save now it's important to remember that value has to be a string when it's saved in local storage so if you have something that's a little more complex like an array or an object you'll need to use json.stringify to turn that array or object into a stringified version or rather a json version that can be saved in local storage and when it comes time to pull that out of local storage and use it as regular javascript you'll need to essentially reverse that by using json.parse so that brings us to the written part of our challenge every time the notes array changes in state you should save the array of notes to local storage once again i put here that you'll need to use json.stringify to turn that array into a string in order to save it to local storage and as a second part of this when the app first loads you should initialize the notes state not as only an empty array but instead with the notes that are saved in local storage since at this point you'll be pulling things out of local storage you'll want to use json.parse to turn that stringified array back into a real javascript array now to avoid a kind of confusing bug i'm going to add a little extra piece of information here your code for part 2 when you initialize the state will go right here in place of this comment but what i added was an or empty array what that really does is if you are trying to get data from local storage and it doesn't exist it's going to return undefined but we can't set our notes array as undefined so if that does return undefined it will instead use a brand new empty array so i'll put this back to indicate where you should be adding your code for part two the last thing i'll say is that this challenge is a little bit trickier and it's because i'm being a little bit vague i'm telling you the feature i want you to add and i'm giving you a little bit of a hint onto how to actually code it but the tricky part is that you are going to have to reach back on the knowledge that you've learned throughout this course to figure out exactly how this should work so the time is yours pause the screencast and work on this challenge the main thing that i left out for challenge part 1 is that in order to interact with the local storage every time the notes array changes we will want to set up a side effect in react and of course that's what we do with react dot use effect i'll provide a function here for the first parameter and the second parameter i can add now because i want this effect to run every time the notes array changes okay so every time the notes array changes i want to use local storage dot set item because i'll be updating the notes key inside of local storage and i can use json.stringify to stringify the notes so that my array can essentially be turned into a string and successfully saved to local storage and i believe that's it for part one of this challenge now that it's saved in local storage part two is for us to actually access that local storage so we can in a way preload our app with whatever notes we've previously saved in local storage so here i can move this onto its own line just to save a little bit of room and we'll say i should initialize state by accessing local storage getting the item with the key of notes and because this will come back as a stringified value i need to use json.parse on the value that gets pulled in from local storage and you know what a small correction to make if local storage is unable to find anything at that key it doesn't actually return undefined it returns null the only reason that makes a difference is because if you try to json.parse null it will return null which is a false value and therefore it will use the empty array but if instead it tried to json.parse undefined you actually get a syntax error that would crash your program so in that case it's probably good that it returns null instead of undefined okay let's test this out i'm going to clean up this challenge i'll hit save and oh i was so close this should be get item not get let's hit save again okay we have no notes i can create one even just creating that note should have updated the notes array which means that if i hit refresh awesome we're starting with the notes that we left off on if i make a change to the note here and hit refresh those changes are here awesome if you wanted you also could open your developer tools go to the application tab and see that you have local storage that's being saved here on the scrimba site now obviously local storage is not a perfect replica of a real database that will permanently save your data but you can see in just a few lines of code we were able to add a feature that made this app much more usable than it was before so awesome work adding this feature however there's one tiny thing that we need to learn about to make this a little more performant than it currently is so we're going to take a quick aside before adding any more features and learn a new little fact about react state there's one little thing that i wanted to talk about regarding how we're initializing our state when we're pulling from local storage like this now of course whatever value we put inside of react.use state here in the beginning is just an initial value so really we know that it will only set this value when the app first loads after it loads react is going to maintain any changing state internally behind the scenes however there is something that we need to see and i can illustrate that by creating some new state in this case it really doesn't matter what it is we'll just say state and set state is equal to react.use state the reason it doesn't matter is because i'm actually going to put a console.log statement which will run every time this line of code runs let's just put state initialization i'll open up my console and when i hit refresh we can see that we get that console log running state initialization but now i want you to think about the nature of react and what happens when any other state in the app will change for example if i add a new note anytime state changes like adding a new note the entire app component will get rerendered well if react is in charge of saving the initial state in the background then it might seem intuitive that it's not going to run this line again however if i maybe add a new note we can see that it does run this line again and that's because all that's really happening is react is rerunning this entire function in the background it is ignoring the state that is trying to reinitialize here but if there is code such as running a console log or in our example getting something from local storage it's going to run that code again even if it doesn't use the value as its new initial state because it's maintaining that state elsewhere in the background now for direct commands in javascript this is not a big deal at all for example running this console log is so minuscule in the amount of time it takes for the browser to run this line that it's completely negligible so even when we're making changes we're making changes here you can see that it kept running that state initialization console log but because it takes so little effort for the browser to run that code it's not a big deal at all however something like localstorage.getitem is a bit more of an expensive call or rather it takes more effort for the browser to dip into local storage and get something every single state change that happens in our app as such react has implemented a way for us to really easily make it so that any expensive code that might be running inside of our state initialization can happen only one time and this is called lazy state initialization it sounds a lot more complicated than it is because in the end all i need to do is instead of providing a value i can provide a function that returns a value so here if i provide a function that returns console log of state initialization and let me put this down onto its own lines here i'll hit refresh we get the very first state initialization but then any changes i make don't rerun that code in the end this might seem a lot more verbose than what we had but if we make use of arrow functions and implicit returns i can undo this to the way it was all i really need to do is put a set of parentheses and an arrow even still this is getting a little bit long so i'll put this onto its own line so you can see the whole thing but we get the same effect i can hit save and start making more changes to state which don't rerun our state initialization console log now this state was completely contrived running console log inside of state is pretty useless but it does lead us to our next challenge your task is to lazily initialize our note state so that it doesn't reach into local storage on every single rerender of the app component if you were paying close attention you'll know that this will only require a few extra characters on your part to type in pause now and work on this challenge all we should need to do is add a function here at the beginning of our call and have it implicitly return the value that we had before just adding the parentheses and the arrow should lazily initialize this state so that it will only reach into local storage the first time the app loads in this case we may not notice much of a difference especially since we got rid of our console log that we had before but we can rest assured that this is going to work the way we want i can hit save which refreshes our app and it is successfully pulling in the notes from local storage okay so that checks off this sync notes with local storage feature that we just added next we're going to think through how we can add some more meaningful summaries here instead of note 1 and note 2. so let's do that in the next challenge next what we'll work on is adding some real notes summaries as the title for our notes instead of note 1 and note 2. right now you can see when we're mapping over the notes we grab the index and we display note and then the index one unfortunately this doesn't give our users any idea as to the contents of that note so your challenge is to try and figure out a way to display only the first line of the notes body property by the way note.body is the text that is showing up here in the editor and that first line should be pulled out and used as the summary that shows up here in the sidebar the css should already be set up so that it will truncate that so that it doesn't wrap around really long in case you do have quite a long first line in your note and i've added a couple hints here to help you along the way in the challenge first of all the text of note dot body if you console log it will not show that every time you hit return in the text editor here it's actually inserting a new line character let me show you what i mean if we go to app and we're just going to piggyback on top of this use effect that is running every time the notes changes if i console.log notes at the index of zero dot body and we open the console you can see the text shows as if it were just a space in between the note summary and the beginning of the note line however if we actually json dot stringify this we can now see that there are two new line characters that are sort of hidden between that first line note summary and the second line beginning of the note and since we have a new line character that can help us out your challenge here essentially becomes one of a javascript algorithm challenge so in reality it's not even really a react specific challenge i've given you a second hint here that you can look at if you feel like you need it i'm purposefully a little bit vague in the language so that if you need to you can go out to google and try to find some resources that will help you solve this challenge speaking of which it's time to start pause now and work on this challenge hopefully while you were working on this you came across the string.split method while i'm testing things out i can actually make use of what i have here let's get rid of our json.stringify but we'll just access the body of the very first note in our array that's going to be the string that we can run a split method on and the divider we can use is the new line character which is backslash n let's just see what this returns i'll hit save open my console and awesome it looks like we get an array that's split on the new line or in other words it uses the new line character to determine when a new item in that array should be created which means that if we just want the first line of our note we should just be able to access this array that dot split returns by the zero index so over in sidebar js i have access to each individual note and instead of this note with the index we'll just insert some javascript with our curly braces and we'll say note dot body that's our string dot split on the newline character backslash n that will return an array and we'll just say at the index of zero which should access the very first line of our note let's see how we did we'll hit save and awesome look at that i suppose if you want to get picky with it you could remove the hashtag although if somebody decides not to put this hashtag header the way that we have maybe they wanted to make this bold instead then we would no longer have a hashtag to parse out but instead some asterisks personally i don't think it's that big of a deal we'll probably just leave whatever markdown marks end up in that first line just as they are now i can see i'm console logging everything because i set that up here on line 18. i'm gonna clean that up and now if i change my note summary to something else looks like that summary is updating on every keystroke awesome work speaking of modifying the notes that leads us to the next feature that we're going to add and that is to move any modified notes to the top of our list if we had say 50 notes here and we scrolled down to the bottom and modified one of them that might be a good indicator that we're interested in updating that note more regularly let's say we instead had i don't know maybe 50 different notes here and we decide we want to make a change to this bottom one we probably want to bump that to the top of the list so that it's more easily accessible going forward so that's the next feature we're going to add in the next screencast it seems like a sensible feature to add to our app that if the user ever edits a note in the sidebar it should pop up to the top of the list so in an effort to give you real practice on adding a new feature all i typed out was what the user experience should be and it's up to you to figure out how to implement it whenever the user edits a note reposition it in the list on the sidebar to the top of the list i suppose as a quick hint i'll let you know that you will have to refactor some of the existing working code in order for this to work pause now and work on adding this new feature we have a function that exists that we can tap into whenever the user is editing a note and that's our function down here update note currently we're using the map method so that the array of notes stays in place in that array in other words if they edit note 1 it will always stay in the third position because that's just how dot map works it returns a new array where every original item is at the same index in the new array as it was in the original array so if we're wanting to rearrange this array there may be a way to use dot map to do that however off the top of my head i can't think of it and i'm guessing it would probably be so clever that it might be difficult to understand if we're reading our own code or another developer is reading this code in the future so sometimes when i'm making modifications like this what i like to do is just duplicate and comment out the code that was working and then even make a note for myself something like this does not rearrange the notes or something like that that will help me remember what i'm doing and then up here at least temporarily i might say something like try to rearrange the most recently modified note to be at the top okay i'm still going to be running set notes and i will still need access to the old notes array but instead of immediately returning the array that comes back by calling dot map i think i'm just going to start fresh so let's see i think that's here yep and to give myself some breathing room i'll open up this function and honestly i think the easiest way to do this might be a pretty imperative way i'll type this out as pseudocode to start so i'm going to create a new empty array loop over the original array and if the id matches in other words if the id of the note that we're currently looking at in our loop matches the current note id that we're saving in state just like we have here node id triple equals current node id then that means it's the note that we're currently editing and that means that i want to put the updated note at the beginning of the new array if it doesn't match so else push the old note to the end of the new array and after my loop is all said and done we will return the new array hopefully that pseudo code makes sense it makes sense to me but that's kind of the point of pseudo code write it so that it makes the most sense for you and i like doing this as a way to lay the problem and the solution out and solve any issues i might see at this point before i dive deep into the syntax of the code that's required to actually solve this challenge so let's do this we'll create a new empty array we'll say new array we'll loop over the original array i'm just going to use a good oldfashioned c style for loop so we'll say i equals zero i is less than the old notes dot length and i plus plus move my pseudo code inside here so if the id matches in other words if old notes at i dot id equals the current note id that we're looking at in state then i'm going to use new array dot unshift to push a new item to the beginning of the array and i can just take my old code here because i'm accessing the old note the one issue with copying and pasting is i have this object called old note which i am not referencing anywhere in my code so i'll need to change this to old notes at the index of i before i get too far down this road i really don't like indexing into things a whole lot i think i'd rather say old note equals old notes at the index of i and that way i can use old note over and over instead of having the weird syntax of the index there so as we're looping through our old notes if the id of the one we're currently looking at matches the one that the user is currently editing then add this new object to the beginning which has the updated text and all the old properties just like we were doing before but otherwise we can just push to the end of our new array the old note because we don't plan on modifying it at all we can clean up some of these comments then lastly we just need to return new array as you can see this is a lot more imperative with our c style for loop and everything but let's hit save we'll go to note 1 make any kind of modification like hitting return uhoh looks like we have a bug here oh and you probably saw this while i was updating my old note here but i left this as old notes instead of old note little things like that will get you all the time let's try this again i'll hit save note 1 hit return awesome note 1 just pop to the top of the list we can test this with some other ones maybe i make a change here and sure enough it's at the top of the list and note 1 is still modified and of course now it's at the top of the list awesome at this point i can probably clean up some of my comments if i'm not going to be needing any of that old code or anything like that although it might be helpful for a future developer to see that your code is written the way it is because you want to put the most recent change at the top so maybe i'll just update this to say put the most recently modified well that should say note at the top awesome work and that does it for this challenge the next and final feature that we are going to add to this app together is the ability to delete notes so that's what we'll tackle in the next challenge the very last feature we're going to add to our notes app is the ability to delete notes i've made a few changes since you last saw this app so let's talk through those first of all in the sidebar i added a button that has an icon inside and this icon has a trash icon that's a pure css trash icon i didn't create this i copied this from a site that has pure css icons before you think i'm some kind of genius in css and i set that up so that it will only show up when you hover on one of the notes so as i hover over the sidebar note the little trash icon shows up right now clicking it doesn't do anything that's going to be your challenge however you can see that clicking the trash icon is also changing the selected note in the sidebar and that caused me to run into a bug and so i started some of this code for you we've got the function delete note that will receive an event and a note id and i wrote this line out for you event dot stop propagation without going too in depth what it does is it says when this trash icon handles the click event stop propagating that click event to the parents like the sidebar div that's holding this entire note in other words this trash icon is a child element of the note on the side here and so when i click the trash currently it's propagating that click event through to the parent which is also handling a click event now the fact that it is still propagating that should tell you that my trash icon is not correctly using this delete note click event so that's going to be part of your challenge before i read through it let's go to the sidebar you can see i specifically indicated where you need to add your on click event handler so let's look at the challenge it's to complete and to implement the delete note function now i've given you a couple hints here the first one is to think about what array method you can use to return a new array that has filtered out one of the items in our case because we're just deleting one item based on some kind of condition hopefully the language of that hint can give you a pretty good indication as to what array method you can use i also want you to look closely at the parameters that we're passing to delete note keep in mind that normally on an event listener we don't get to choose what parameters we're passing so you'll have to find a little workaround which we have talked about in the past in order to pass both the event object and the notes id and this is the id of the note that is going to be deleted as an aside the reason that i had to do the stop propagation isn't just because i didn't want to select that note it's because i was getting an error i would delete the note and then it would try to select it as the current note after it was deleted and that was throwing an error because that note no longer existed in my array of notes okay i've talked long enough now's your chance to complete this challenge pause the screencast and try to implement the delete note function before we work on the code here let's test to make sure that we can successfully add the event listener to the trash icon button i'm going to just add a console log that says deleted note and then maybe i'll add the note id just to make sure that i'm successfully passing down the correct note and then we need to pass this function down through props to our sidebar component we'll add a new prop called delete note which will just be the delete note function and then in the sidebar we're already receiving props so i will add an on click event handler here and your first inclination might have been to just pass props dot delete note here however that's why i provided you the hint about what parameters we're passing to this function by default whatever function we pass to an event handler will receive the event as its parameter and in order to pass something else along with that i'd either need to do some kind of magic with dot bind which i'm not going to get into or more simply i can say this is my function that i want to call this entire anonymous function and the first line or only line of that function will call delete note that way i can take the event that i'm receiving as a part of the on click callback function and pass it along to my delete note function but then i can also tell it to pass the notes id remember we're here inside of dot map and we have access to this note variable which has an id property and that's what we're passing down to delete note as we're calling it i'll get rid of this line here i'll hit save let's open up the console and click the delete icon here and awesome okay and it's good that these ids are different so that i'm not getting some kind of captured value or anything weird like that so now let's go to app.js and finish implementing the delete note function i gave you a pretty good hint in my first hint when i talked about filtering out an item and that's because we are going to use array.filter but in our case we're only going to filter out the one item based on this id since i'm updating my state i'm going to call set notes i do need access to my old array of notes so i'll use the callback function with old notes as the parameter and i want to return a new array that results from calling old notes.filter dot filter takes a callback function and whatever we return from this callback function needs to be a boolean to indicate whether the current item we're iterating over in the original array should be included in the new array or not so we'll say that for each note we're looking at i want to make sure i include items whose id property does not equal the note id that we're trying to delete this only has one parameter so i can remove these extra parentheses so once again we're looking at all of our notes we want to run the filter method we're going to look at each note in that array and if the id does not equal the one we're trying to delete then this will result in true which means i do want it included in the new array that i'm returning from dot filter which means essentially if it's not the one that i click delete on it will leave it alone and continue to exist in the array however for the onenote that i did click delete on note.id will equal note id and therefore this will be false and therefore that note that i click delete on will not be included in the array and thus it'll get removed from my state i'll hit save let's click delete on note 2 and awesome we have note 1 and note 3 left i can click delete on note 3 and note one we have no more notes in our array if i hit refresh we're still at no notes i can create notes and everything seems to be persisting exactly as we would expect now i totally understand there were probably two really difficult parts in this challenge one was understanding how to use dot filter in truth you don't have to use that filter you can do something a little more imperative like what we did up here where we just created a new array and manually iterated over with an old style for loop if you did it that way that's completely okay obviously this dot filter gives us a chance to do it in a really succinct way but that doesn't necessarily mean it's the only or best way and then the other tricky thing that may have tripped some people up was adding this callback function that calls props.delete note but as a quick reminder if you ever really need extra parameters other than just the event in your callback function then you're probably going to pass a whole callback function here instead of just calling props.deletenote so that you can pass whatever parameters you want to your own function and that brings us to the end of this notes app hopefully you were able to complete all of these challenges that we worked on together i know that it's difficult to jump into a new code base and try to add features but there's almost no better practice for you as you're learning react than to jump into an existing code base and try to figure things out we've come a super long way since we first started react so as a final hurrah in this course the next thing we'll be working on is the final capstone project for this course and this will be one that we create completely from scratch since we're going to be jumping into a new project i highly recommend you really soak in everything that you are able to learn from this notes app and even go above and beyond with it if you don't feel like you've gleaned all the information you could from this app then stick with it try to add new features even try something small like changing the design of it to better fit your personal preference then once you feel like you've soaked up all the information you can from this app we're gonna jump into the final capstone project for this course here's the game we're going to be building as our first major capstone project if you haven't played tenzi's before it's a dice game that's usually better suited for younger children but because of that the complexity is low enough that it makes for a pretty good project here the idea is to try and roll 10 dice that are all the same and in our game you can click on one of the dice to hold it and when you click roll those held dice won't change we'll click the other twos and we'll just kind of play this game until all of the dice that we roll are the same number and as soon as we hold the last dice the game is going to notice that we have all twos it'll play this fun confetti drop here it'll change the button from roll to reset game and of course when we click reset game it will start us all over from the beginning the design for the game can be found here if you click this screenshot it'll send you to the figma file for this game and i included a little animated gif just in case you forgot how this game is supposed to work so you can reference this as well feel free to peruse the code that we have here you can see it's less than 100 lines of code in the main app.js component which contains most of our logic so get geared up to create an awesome react project when you're ready let's jump right in all right we're starting from the very beginning the only thing i've added is some really basic styling for you and i've included some google fonts for you but there is nothing in our react code at all so your challenge is to create a brand new react app i want you to create a separate app component that will live in a separate file and then here in index.js make sure to import that app component and render it inside the app component it should render a main element and then for now i just want you to style everything to look like the basic outline for our game you can click on the slide to go to the figma file where you can find some of the design elements well specifically this background color so pause the screencast and set up our tenzi's game okay let's import the things we need we know we need react from react because we're going to be using react dom we'll have to import react dom from reactdom while i'm importing things i'll import app from a nonexistent app file we'll get to that in just a second and we'll use reactdom.render to render an app component and the place we want to render it is in the element that we get from getelementbyid root let's create our new file for app.js we'll import react from react and export our component like i said we'll have it return a main element maybe i'll just put something here so i can see that things are working okay pretty underwhelming now let's get to some style i can see that from the design it looks to me like the entire body probably has this background color and then the main element is this white box here so in the body i'll give it a background color which from the design we can see is this color and since my main element is essentially going to be the container for everything i don't think i'm going to bother with adding a class name really i'm just going to have the main element that i style and it looks like that background color is not white in the design it's this very close to white color let's add a little bit of padding to the body so that there is that blue outline around our main element we'll say maybe padding 20 pixels i'll add a height to my main we'll say it's maybe about 400 pixels i could probably use a percentage or use view height for now this will do the trick and if i need to i'll come back later and update that and then maybe instead of a width i'll add a max width and say something like 800 pixels because of the padding we have we still have that little outline on the sides the max width makes it so that it doesn't get too wide if we get really wide but i don't think that's going to be a problem that i'm going to be too worried about right now looks like we have a bit of a border radius so we'll add maybe 5 pixel border radius and there certainly will be more styles that we decide to add to this later but for now i think this is good i'm going to get rid of my something text here and awesome this is a great start next let's see if we can add our little dice components onto the screen we won't worry about any data or generating the numbers quite yet we'll just get these components working so when you're ready let's move on to that the next thing we'll do is get some die components rendered to the page for now we'll just manually put in 10 instances of our die component and in the end it should look like this once again you can click this slide to go to the figma file so you can get things like the box shadow and the font size for these and everything the challenges written out here create a die component this will be in a separate file and that die component should take a value prop or a prop called value then inside of our main here you'll render 10 instances of the die component just manually and provide a number between 1 and 6 for the value prop on each one of those for now and then make sure to style the main component and the die component that you create to look like they do in that slide and just to make your css life a little bit easier i added a couple hints here i'd recommend making a container that will surround all 10 of these dice instead of just putting them directly as children of the main element and that way you can make that container a display grid so you can make it always display in two rows of five columns and to get the separation between these elements you can use the gap property which will provide this spacing here and then i would turn the main element the one that has this white box into a flex box so you can easily put that container in the center of the screen okay pause now and work on adding some dye components that will display our dice to the screen let's start by making a new dice component so i'll make die.js sounds a little violent but that's the correct singular of dice we'll import react from react and export our component i know that this is going to take props because we want to display a value prop and looking at these dice because i see this white outline around it that is the shape of the die i'll probably actually make this a nested element or rather i'll return something like a div and inside that div is where i'll put the text element itself let's call it an h2 and this h2 is going to display props dot value we'll get to styling this in a minute but let's in our app.js import our die component i'll create that container that i was mentioning and let's just render 10 instances of our die component we'll pass in a value which we'll just start as one and i'll just duplicate this ten times okay let's see where we are okay that's about where we expect to be now let's start adding some styling first let me create my grid here so i'll give this a class name let's say this is the dice container and we'll set that up to be a grid so display grid give it a grid template and i'm going to be specifying a height and width on each of the die components themselves and so i think what i'll do is just say this is going to be two rows that are each auto determined in their height and then i'll use the repeat function to say each one of the columns will be one fraction unit wide and we'll have five columns let me actually refresh one of these components here so i can see this applying live okay that's looking not too bad maybe before i provide some styling here let's go ahead and create the little dice look around it so it has the white box i'll go to dye js and this div here let's give it a class name of maybe die face since that's the face of each of the die and i'll save that and go to style.js let's style up die face and we'll give these a height of 50 pixels and a width of 50 pixels i'm going to paste in a box shadow from the design just so we can see the surrounding area without actually giving it a border we'll give it a border radius of 10 pixels and then i want that number to be perfectly centered in the middle so let's make this die itself display flex which will allow us to justify the content to the center and we'll make sure that we align the items to the center as well then in our container let's go ahead and add a gap so we'll say a 20 pixel gap so that the items can spread out a little bit okay i don't love how they're jammed all the way up to the edges of my main element so i think i'll add some padding to my main say maybe about 20 pixels and then as i mentioned in the hints i think what i'll do as well is make my main a display flex which kind of screws it up temporarily but will set the flex direction to column so that the elements are being spread out top to bottom and that will allow me to justify the content to the center which allows me to put that directly in the center maybe for good measure i'll say align item center i don't know that that's going to make a difference well yeah it actually pushed the items a little more evenly spaced together so that was good the last thing i think i'll do is add cursor pointer even though this won't necessarily show up in the recording of the scrim if you refresh this app you can see that it now changes to that little mickey mouse glove hand the only other thing i can think of is these numbers are looking a little bit smaller than i was hoping so let me actually render dice with all of the different values on a regular six sided dice just so i can see a comparison of the numbers and then i'll give a class name to the number itself we'll say class name is maybe die dash num and we'll add some style to that we'll say dot die dash num let's give it a font size of maybe two rims is that too big let's see it's pretty large but it really helps highlight what the number is and since that's the most important part of the dice i think that'll probably be good it also looks like these dice are blending into the background i'm assuming they probably have a transparent color so i'm going to give them their own background color of pure white and awesome yeah that really makes them stand out better okay that was a lot of time being spent on css but now what we can do is go in and instead of manually putting in these die components like this we probably should be generating an array of 10 random numbers and mapping over that array to create these die components so that's what we'll do in the next section of the project we'll break up the generation of these dice components into smaller challenges this is a really good habit to get into when you're problem solving instead of being overwhelmed by a larger problem like let's generate 10 random values and create multiple die components based on those values instead break that down and say let's just make a function that generates an array of 10 random numbers and then we can tackle the creation of the die components later so that's exactly what we're going to do your challenge is to write a function you can call it all new dice that returns for now an array of 10 random numbers between 1 and 6 inclusive if you can't remember how to generate a random number in javascript a quick google search will certainly help you out and then for now let's just log the array of numbers to the console pause the screencast and write our all new dice function a quick side note on algorithm challenges like this i really highly recommend that you try to come up with your own solution i mentioned turning to google to learn how to generate a random number in javascript but for practice sake i hope that you didn't just google how do i create an array of 10 random numbers in javascript instead i really want you to put on your thinking cap and try to find solutions on your own before turning to google something like generating a random number is not really a challenge in javascript so much as a syntax that you need to use but the rest of this creating your function that returns an array of ten numbers is really a problemsolving challenge that you should be practicing and not just finding other people's solutions for right away okay i'll get off my high horse there i'm going to create this function inside of my app component so we'll say all new dice and i think i'll break this problem down into smaller parts so first of all i need a new array to hold my numbers i'll probably need to loop 10 times and as a part of that loop i'll need to push a random number from 1 to 6 to my array and then after the end of my loop i can return that array which will at that point have 10 new numbers in it and that should say my numbers okay so we'll say maybe new dice is going to be an empty array and then i can use just a c style for loop should be fine i equals 0 i is less than 10 i plus plus we can say new dice dot push and to generate a new random number you have probably come across a solution like math.floor math.random and then you can say times six and then you have to add one to the end of it and honestly i can't remember what order these are supposed to be in but instead of adding one if you want it to not start at zero but start at one you can actually use math.ceiling math.random and i forgot my parentheses there and the time 6 should be in here so that was all kinds of problematic but the point is this will create a random number from 1 to 6 and then once that number is created it will push it to the new dice it will do that 10 times and at the very end i can just return my new dice array get rid of my pseudo coding planning comments and then let's go ahead and console log what comes back by calling all new dice open my console hit run oh and so close and you probably saw this when i typed this out it should be new dice not new nice okay cool all of those numbers are between 1 and 6 inclusive and there are 10 of them so awesome that probably does it for this challenge in the next screencast we will take this array and we'll turn it into actual dice components all right here's the next part of the challenge from before let's make use of the all new dice function that we created and create new state to hold this array of numbers and in fact when you are initializing state you can set its initial state to be a call to the all new dice function and that way as soon as the component loads it will generate all new dice for us right at the beginning then with your brand new state you should map over that array and generate the array of die elements that we will use to replace the manual 10 items that we wrote here pause now and work on this challenge okay let's create some state here at the top of our component we'll say maybe we'll just call this our dice and set dice and that's react.use state we're going to initialize the dice state by calling our all new dice function and then to generate the array of dye elements by mapping over our dice i could either do it directly here inside of my return i could put my curly braces to put in some javascript and say dice.map whatever i personally prefer to generate an actual variable that holds that array of die elements but outside my return really only because it helps me separate the logic a little bit either way is completely fine so i'll say const dice elements equals die stop map i'm going to look at each individual die and i'm going to return a die component with the value prop set to the number of that die now remember right now we're just iterating over an array of bare numbers and so here die really just represents the number itself and now dice elements will be an array but instead of an array of numbers it will be an array of die elements with the value prop set to the same number as the item at the same index in the original dice array now i can just render this dice elements array right down here before these were hard coded and we could see it went one two three four five six and then a bunch of ones now when i hit save we should get a bunch of random numbers that show up here in fact it should be random every time i hit save we'll get a different set of numbers now because we're mapping an array into an array of components react is warning us that we need to provide a unique key prop to each of these elements right now we actually don't have a great piece of data to use as a unique key prop but later down the road when we refactor our dice elements that are in this array from a set of numbers to a set of objects we'll come up with a solution for providing a key prop here however that's not the next step we're going to take instead we're going to create a button that will allow us to reroll all of our dice so that we can roll our dice without having to refresh our application so for now we'll ignore that warning but we will solve that in a bit when you're ready let's move on and create our roll dice button the next thing we want to add is a roll button that when it's clicked will generate all 10 new dice for us down the line we'll be modifying it so that we can hold dice that are exempt from this roll button but for now just make it so that it rolls all new dice you can put your button right here below the dice elements and well the rest of it i'll let you figure out pause the screencast and work on this challenge first i will create a new button and we'll just have it say roll actually let's just hit save and see where that gets us and as a reminder we will be having this warning every time we hit save we're going to address that really soon and well that's pretty abysmal in terms of styling but it looks like we've got a button there maybe let's hook it up first and then we'll style it clicking the button should run a function that will generate new dice by using set dice and we could probably just combine our all new dice to determine what the new dice are so i'll go ahead and create a function called roll dice and this will just call set dice and for now we don't care what the old dice were we're just generating all new dice so we'll just run all new dice to generate the new numbers and then let's connect the roll dice function up with an on click handler okay i'll hit save and when i click roll awesome we're getting all new dice well that was simple enough now let's add some style to our dice i'm going to add a class name to the button maybe let's just call it roll dice and then we'll add some styles to the roll dice class and i'll mostly just be following what we have here in the sigma design i think i'll set the height to about 50 pixels the width to about 100 pixels and i might need to hit save so these can apply live yep there we go we'll take away the border with border none but it does have a border radius about maybe six pixels it's got a background color that we can find in the design and we just need to spell that right there we go the text color is white so we'll change the color to white looks like the font size is a bit larger let's call it 1.2 rims and if i remember right buttons i believe don't take on the correct font family so let's grab the font family and oh it looks like we never set the font family on the body let's go ahead and do that now i'm using this carla font that i'm bringing in from google okay we can see that making a difference we're going to do the same font family on our button now this i don't think is the greatest practice for accessibility but just for our visuals right now i'm going to take away the outline whenever the button is focused so we'll say outline is none and this wasn't something in the design but it's a nice little touch i'm going to add an active class which means when you're in the process of clicking the button it's going to add this inset box shadow and that will just make it so that it looks like it's being pressed or indented into the screen which is kind of nice now right now our spacing is a little funny let's go ahead and fix that i think one way i could easily do that is to instead of doing justify content center i might try space around and it puts our numbers a little bit high especially when eventually we're going to have some text up there but when we add the text it might rearrange everything in a pleasing way so for now i think i'm okay with the way it is and yeah i should be able to click roll and everything is working great again in the recording you won't see this but i think i also will add the cursor pointer just to make it very clear that it's a clickable button and awesome great job at this point it's a great idea for you to do a little selfassessment and see if you were able to accomplish that challenge all by yourself everything we did in this challenge should almost be second nature to you now based on the amount of repetition that you've had the opportunity to do if you did struggle with this challenge now would probably be another great opportunity to jump back in the curriculum rewatch some of the lessons that we've done and more importantly redo some of the challenges that we've assigned to you and that way when you come back to this roll dice button challenge you can do it comfortably without it being overly difficult and then of course whenever you're ready the next thing we're going to work on is being able to hold the dice so that when we click roll it does not change the dice that are held and that's the challenge we're going to tackle next the next thing we'll work on is the ability to hold dice in place so that when the roll button is clicked those dice that we've held don't change up until now we've been saving just bare numbers or integers in an array but in order for each dice to also contain information about whether or not it's being held we'll want to change those to an object so that is your challenge here update the array of numbers and state to be an array of objects instead those objects should have a value property which contains the number of the dice or rather the number that is being displayed on each die and an is held property which we will default to false don't worry about styling the dice or fixing the roll button quite yet we're going to do this over the next few challenges but simply making this change from an array of numbers to an array of objects is going to break other parts of our code so the next part of your challenge is to bring it back to a working state pause the screencast and work on this challenge i purposefully didn't show you exactly where these changes need to be made so that you would have to do some thinking about it the place where we are generating the numbers and pushing them to the array is right here we're creating a new array and just pushing a number that's randomly generated so let's simply update this line of code instead of pushing a number i'm going to push an object with a value property that contains that number and an is held property that contains a boolean will default every one of them to false i think i'll put these on their own lines so it's a little bit easier to read and now every time we call all new dice we are creating an array of objects that means down here when we're mapping over our array of objects and die is no longer a number but is an object the value needs to be die dot value let's hit save and see how we did okay well we still have our warning from react about adding a key property we're going to work on that in just a second but let's test to make sure that everything is working and awesome looks like we're in a good place now the next thing i'm going to do wades into deeper waters of intermediate or advanced react so i'm going to explain it in a very surface level way but just know that for now it's not terribly important that you truly deeply understand exactly what we're going to do i want to address this warning that we're getting where each child in a list should have a unique key prop when you're pulling data from an api and it receives some sort of unique id generated by the database that's perfect that is the id that you should use for your key prop in our case we are not receiving that because well we're not calling out to a database at all we're generating these objects on the fly now the reason this key prop is important in the first place is so that react has a good way to keep these in the correct order in case anything were to be removed or added to this array in our case we will always have 10 items in this array and we don't plan on removing or adding any new dice to our game here so one solution is to get a third party package which i can add as a dependency i'm going to add one called nano id and nano id is just a really fast way for me to generate a random id on the fly in my code what i can do at the top is import nano id from the package nano id and then every time i'm creating this object i will create a new id property and just call the nano id function let's take a look at what this generates for us so i'll console log new dice and open my console we'll hit save and you can see the ids are a little bit crazy they're not just like one two three four and five but there's enough bits in that id that we can essentially be guaranteed they will be unique and now that i have an id i can fix my warning and just say my key on these die is going to be die dot id let me push some of this onto its own lines i'll also remove my console log here and now i should be able to get rid of my warning awesome okay so now every one of our dice has the ability to know whether or not it's being held but we currently have no way to change that so that's what we'll start addressing in the next part of this project very soon we'll be working on making it so that every die knows that when it's clicked it should toggle its held property from true to false or false to true but for now let's add some styling to the die so that if it is held it can put this green background color that's going to make our job a lot easier to test when we add the clicking ability for holding or unholding a die to test that i'm going to change the dice from is held to false to be is held to true so that when you work on your challenge you'll be able to see all the dice turning the light green color assuming you got everything set up correctly so your challenge is to add some conditional styling to the die component so that if it is held or rather if that dies is held property is true its background color will change to that light green color which you can reference the hex code for right here don't forget that currently the die component has no way of knowing whether or not it's being held so that's something you'll have to address as you work on this challenge once you have all the dice with that green background color come back to our all new dice function change this from true back to false and refreshing the app should then clear out the green colors and it should look the way that it does right now so pause now and work on this challenge i think i might work a little backwards in this challenge because first i need to let the dye component know whether or not it's being held down when i am mapping it i'm passing a key prop which isn't really usable except for internally by react and i'm passing this value prop i'm going to also add an is held prop and that is just going to be the value of die dot is held so either true or false or in our case all of them will be true because that's how we hard coded this that alone shouldn't really break anything in our code but if i go to the die component i now have props dot is held and i can use that to generate my background color to do some dynamic styles i'm going to create a separate styles variable although this could be something that you handle in line right here by saying style equals and then an object i think that gets a little bit lengthy especially if you're adding more than one style so for now i'm going to say style equals my styles object that is defined up here separately and then i'm going to set the background color this has to be camelcased remember because we're accessing the dom properties of this element and here i can use the ternary i'm going to say props dot is held if it is held then i want to use that hex code that we saw before but otherwise i want the background color to be white let's hit save and awesome we get all green dice just like we expected for one final test back in app.js i'm going to change this back to false hit save and that has cleared out perfect i suppose that technically means that my die face no longer really needs a background color that's set in the css because that will be handled with an inline style here in react maybe i'll just double check that refreshing gets me all white dice and when i change this to true all green perfect wow that's a lot of twos on one roll that's amazing it's too bad we're not playing this game yet okay i'll set this back to false because that's where we really want our game to be and perfect now we're ready to start tackling the challenge of having each die be able to hold when it gets clicked so we'll start working on that next in the past we've talked about something called derived state and how for the most part it's not something you'll end up using very often as a reminder i've brought in this diagram which we've seen in a past lesson and adapted it to work for this tenzi's game we're making in this game we have our app component which is holding an array of dice objects and it's mapping over that array and creating instances of our die component it's then passing the is held property down so the die knows how to display whether it should be green in the background or not and in this diagram what we see is each dye component containing its own state which is initialized by its incoming prop of is held and then having the ability to flip that is held property from true to false or false to true although this might generally accomplish the goal of making each die be able to flip from green to white or white to green it breaks our game because if each die component has its own state of is held it isn't necessarily communicating that change up to the parent state and in our game we need to be looking at every single die so we know how to end the game if every die is held and every die has the same number then the game is one however if each die is flipping its own state like i said there's nothing communicating to the parent array state that it's changing so a much better way for us to structure this although it may include a little bit of extra code is to not put state on any of these components and not have them be able to flip that own state that it initializes from its incoming props or in other words using derived state instead we will only keep the state on the app component we'll create a function that we'll call hold and that hold function will be passed down to each one of the die components in our case we need to know which die clicked hold and so that hold function will receive an id as a parameter if you remember when we are generating our dice we create an id property for each one which is unique and as such it's something we can pass as a parameter to our hold dice function so that brings us to your challenge your challenge is to create a function we'll call it hold dice that takes an id as a parameter and for now don't worry about the logic of this function just have it console log the id that's passed in as a parameter and then i want you to figure out how you can pass that function down to each instance of the die component so that when any one of them is clicked it will log its own unique id property in other words you need to make sure that when you click the first die it shows a different console log than when you click the second die in truth there's more than one way to make this work we have looked at multiple different ways to make this work in the past so you can just choose whichever one makes the most sense to you so the time is yours pause the screencast and work on this challenge okay let's create a new function we'll just do it right down here hold dice and let's spell function correctly this will take an id as a parameter and it's just going to console log the id easy enough now when we are mapping over our dice objects and creating our instances of the die component i basically have two different ways i could do this one thing i could do is pass the id to the die so this would be die dot id and then also pass hold dice as the function holds dice and then inside of the die component i could call hold dice on click and pass the id that's passed as a prop here however to me this is one additional step without really a lot of noticeable gain and so i think i'm going to take that out and then what i can do is just create a new function and say hold dice is going to be this anonymous function and this anonymous function will call hold dice with die dot id as its parameter effectively what this is doing is embedding the id as the parameter that will be called with the hold dice function whenever each one of these dice is clicked so i should be able to hit refresh and of course at this point clicking the die isn't going to do anything because i haven't actually accepted that prop on this side so now i'm receiving a prop called let's see it was hold dice here and i can add an on click to my div i'm going to separate these onto their own lines on click equals props dot hold dice so let's hit refresh i click the first one and i get this id that starts with hg this one starts with a y z yjb awesome specifically i'm checking to make sure that these were all different from each other if they were all the same then something would have happened incorrectly as i was passing in the id but they're all different which means each one of these has their own function that can identify which die was clicked so that in the next part of this challenge we'll be able to update our state which is holding all of our dice to flip the held value or the is held value on just the die that was clicked so that's what we'll do in the next challenge the next thing we're going to work on is making it so that clicking each die will actually flip its is held property instead of just console logging the id again the goal is to make it so that i can click the die that i want to hold have it flip its property which therefore will change its background color and then coming up in the future when we click roll we will create new dice for all of those except for the ones that are held so your challenge is to update our hold dice function to flip that is held property again you'll want to keep your dice array almost exactly the same way as it was except for the one item that was interacted with based on this id as usual there's more than one way to accomplish this i'm going to be using dice.map and checking for this id while i'm looping over the dice inside of my callback function index.map but honestly if that way is confusing to you you can just do this whichever way makes the most sense to you pause the screencast and work on this challenge okay to update our state we will need to use our set dice function so i'll start with a call to set dice i do need access to all the old dice or the old array before we make this change so that i can determine what the new array should be and i'm going to use the map method to create a new array or return a new array from this function and again almost every die object is going to be exactly the same way as it was except for one of them which will just have the isheld property flipped i remember when i first learned about this way of updating an arrayed state it felt i don't know inefficient or something but in truth javascript does these operations so quickly that it doesn't even blink at something like this so inside of our map we're going to look at each die object we'll have another function and i think this time i'm just going to open it up so that i have some breathing room on the next line and here i can use a ternary that says if it is the same die with the id property that was passed in to the function then i'll update that object and if not i'll just return this die i can do that by saying return and then use my ternary to say is dye dot id the same as the id passed in if so and that's the one we want to change and i'm going to take all of the properties from the original die but update is held to be the opposite of die dot is held i'm going to move this on its own line and then put my else with this colon and start the next part on the next line and i'll say if it's not the id that we clicked on or that we interacted with just keep the same object that we had before and i think this should do it let's hit save and well we have a lot of pairs here let's just do the twos awesome i should also be able to change my mind click off the twos and choose the sixes instead great this was one of the major features that we needed to add to this game the next thing is we need to make sure that when we click the roll button we don't just lose all of our dice but instead roll only the dice that we didn't hold so that's the feature we will work on next other than checking if the game has been won i think this is the last major feature that we need to add to this game so your challenge is to update the rolldice function instead of just creating all new dice every time we click the roll button that instead you will look through the existing dice and not reroll any dice that have been held as a hint this is going to look relatively similar to what we did in the hold dice function at least the way that i'll be solving it of course if you find a different way that you prefer or makes more sense to you then just go with that way that'll be great when you're creating new dice as a part of that role remember to use the id that we are getting from nano id that way any new dice you create will also have an id and therefore will work when we click them to hold them pause the screencast and work on this challenge ok instead of creating all new dice we do need to now be looking at the old dice so we'll pass a callback function here to set dice instead of just generating a new value for it and we'll create a new array by calling old dice dot map we'll look at each one of the die in the old dice and similar to before what we'll do is check the die dot is held property and if the die is being held we want to make sure we just keep it as part of our array if it's not being held however we will return a new die to add to our array now looking a little bit ahead i can see that here i'm creating a new instance of a die down here i'm essentially going to be doing the same thing i could just copy and paste this value however this raises something called a code smell for me i can see that we're going to have repetitive code so this wasn't technically part of the challenge but i think what i'm going to do is create a separate helper function that's called maybe generate new die and i'm just going to have it return let's see this object right here and that way anytime i need a new die i can just call this function i think i'll move this up above my all new dice so it's a little easier and more logical to read then right here i'll probably call generate new die and down here i'll do the same thing we'll just say generate new die again that wasn't really part of the challenge so if you didn't make this helper function that's completely okay i just thought i'd show you how i might do it if i were looking ahead and seeing how i was about to have some repetitive code let's cross our fingers refresh looks like we have three twos here so i'll probably start there we'll hit roll and awesome everything rolled except for the three twos that i held i could then hold a couple more twos getting a little bit unlucky with our rolls here there we go get a couple more twos in here there's another one we're almost done there it is so that brings us to the next challenge how do we end this game of course me clicking this doesn't make any difference to the game at all i could click roll but nothing's going to reroll and we basically haven't told the user anything about whether they've won or not speaking of telling the user some things i think just really quick i'm going to paste in some elements that will give some additional information to the users if you remember in this original screenshot we have the title of tenzi's and a little description i'm going to add those in now and just paste them in from somewhere else because they're pretty straightforward as you can see we just have an h1 that says tenzis a paragraph with some instructions both of which have a class name so that i can add some code in our css to style them i'll hit refresh i think i'll probably put a little bit of margin below our let's see dice container we'll say margin bottom maybe like 40 pixels and yeah that's looking better okay now let's get back to the next challenge where we will start actually informing the user whether they've won or not we're going to break this up into a few different screencasts and just take this one little byte at a time your challenge this time is to add some new state called tenzis and you'll default it to false this new state will represent whether the user has won the game yet or not then i want you to add an effect that will run every time the dice array in state changes for now you can just console log dice state changed and not worry about doing anything else if it's been a while since you've gone through the curriculum on use effect this would be a great time to go back and review and once you're ready pause the screencast and work on this challenge okay so i can create some new state we'll say tenzi's and set is equal to react.use state and we'll initialize it as false that way they won't win the game as soon as they load it and then we're going to add a side effect and we'll use that with react dot use effect use effect will take a function as the first parameter and i'll set up the second parameter right now because i only want this effect to run any time the dice array changes in state as i mentioned for now we'll just console.log dice state changed so let's hit refresh we get a dice state changed on the very first load and then it should every single time i update the dice array even if it's one small change like changing one of the dice to being held then we get our effect running also if i run my roll button that also gives me a dice stay changed awesome now it may not have been perfectly apparent why we're using an effect here and that's mostly because we only did about half of this challenge right now in the next challenge what we'll do is we're going to check all of the dice every single time something changes in the dice to look for a winning condition and if the game has been won for example if all the numbers are the same and all the dice are held then we can set tenses to true and therefore the user will win the game keeping two internal pieces of state in sync with each other is a really common reason to use a use effect we talk about it being a side effect as if it only concerned things outside of this function entirely but keeping two pieces of internal state in sync is another good reason for it so this one was short and sweet but in the next screencast we will make it so the user can actually win the game your challenge this time is inside of our effect instead of console logging i stay changed you'll check the dice array for some winning conditions first we're looking to see if all of the dice are currently held and that all the dice have the same value if both of these conditions are true then set tenses to true and log something like u1 to the console pause now and work on this challenge just like before there are a ton of different ways that you might have solved this one hopefully the way that i solved it will ring true to you but if you found a different way or even a better way then feel free to share it in discord i would love to see people's different solutions for this in javascript there's a really handy array method called dot every and what dot every does is it will look for a specific condition and if every item in that array returns a true for that condition then it will as a dot every method return the value true this might make more sense if i actually show you i can check dice.every and for every die if every die dot is held or in other words if every die has true as an is held property i don't necessarily need to say triple equals true though then dice.every will return true if even one of the dice is not being held then it will return false so i can save that boolean that it returns as a variable will say all dice held or just say all held and that's either going to be true or false so that's a good start to help me have an if statement later that checks if they're all held and if they all have the same value now how can i check to make sure that they all have the same value well if they all have the same value then i can just arbitrarily pick one of the dice and check all of them to see that they have that same value for example i could say maybe the first value is equal to dice at the index of 0 dot value and now i have a reference point for me to say maybe all same value is dice.every and i'll say every die dot value is equal to the first value and now i have some variables that i can check inside of my if statement whether or not they're all held and if they all have the same value so we'll check if they're all being held and they all have the same value then i need to set tenzis to true and we were going to console.log u1 i'll just reuse this console.log here all about recycling you won now you may have asked why am i going to set tenses to true there's a few things in the user interface we're going to change if they have one for example we won't want the button to say roll anymore we might want it to say reset game and we can conditionally render that text based on the tenzi's value and as you might remember from the preview we have a fun little confetti thing that's going to pop out when the game is over but we'll save that as a special treat at the very end so let's hit refresh and actually play this game and oh well it looks like we might have a bug here ah and after a quick look it looks like i did not put a callback function inside of my dot every sorry for anyone who was screaming at me saying i did that wrong okay let's try this again i'll hit save okay we're back up to working and oh look that's a great start we got six sixes that's amazing okay we'll hold all those awesome we're making good progress and we should get our state updating finally whenever i finally roll another six as a side note i feel like this is how every game of tenzi's for me goes it's the very last one that i never can get to be the right number there we go okay let me open the console you won awesome keep in mind this effect was running every single time the dice array changed which means it ran every single time i clicked on one of the dice and every single time i clicked my roll button awesome we have come a long way the next thing we're gonna do is update a couple user interface things one is just procedural that's where we're gonna update this roll button and the next is we're gonna have a lot of fun with the confetti package both of those should be really simple for you at this point as a reminder if you were not able to create some version of this it didn't have to be these exact methods but if you struggled with this challenge it's time to erase it and try it again make sure you understand this before we move on the last two things we're going to do are more just checking boxes but the ability to complete a challenge like this on your own without any kind of outside help will be a really good selfassessment for you to know whether or not you're ready to move on so when you are ready let's tie off the little loose ends of this app and call it done okay it's time to tie off a few loose ends inside of our tenzi's game this challenge comes in two parts first of all if the tenzi's in state is true i want you to change the button text down here to say new game instead of roll secondly and probably the more exciting of the two challenges is that if tenzi's in state is true to use the react confetti package to render a confetti component i've already included the react confetti package for you and down here in the slides i included a link to the documentation for react confetti i think you'll find it's actually a really easy package to use in the end you're just going to need to import confetti from react confetti and then to render a confetti component now in our case we will only conditionally render that confetti component based on the value of tenses also in the documentation you'll see that they provide a height and width properties you just won't really need to worry about those in this case in the end once you have the confetti package conditionally rendered upon winning the game it should look something like this where the user completes the game and then a bunch of really fun confetti falls down okay these are some fun additions pause the screencast and work on these challenges okay let's start with number one if tenses is true change the button text to new game well let's go down here to our button i think i'm going to put some of this on its own line so we have some extra space while we're looking at it and instead of hard coding roll in here i'm going to put some curly braces so i can use a javascript expression and we'll use a ternary because we're choosing between one of two options either the word role or the words new game so i'll say if tenzi's is true question mark then we want it to say new game and otherwise we want it to say roll okay let's save that and we need to spell tenzi's correctly of course okay let's see we've got well it's not a great first roll let's go with some ones and i'll play through this quickly so you don't have to watch me do this whole game okay so clicking the last one should change tenses to true and change role into new game let's see if that works awesome well i don't love that it's stacking on top of each other i think i'll just go into the css and let's find my button here and i think it's this one let's try making that 150 pixels yeah that looks better okay and then part two of the challenge is to render the confetti component if tenzi's is true like i mentioned i already included the react confetti package but i do need to import the confetti component from react confetti and again we're only conditionally rendering this and i included a little note here that tells you exactly where to render it i'll keep my curly braces so i can use some javascript and this time i'm just going to be using the logical and operator because in this case i either want to render confetti or i don't want it to render at all so we'll say if tenzi's is true then we will render confetti i'll hit refresh and at this point there's something important for you to know about this recording at the current time scrimba is not really able to record anything that happens on a canvas element which is how this confetti is being played so i'll play through this game and i'm going to see the confetti work you'll be able to also refresh this app and see the confetti work but in the recording it's not going to show up so once again i'll speed through this game play so you don't have to watch the whole thing okay so i will click the two and sure enough i can see the confetti dropping i assume if you completed this challenge correctly you also were able to see the confetti dropping or if you struggled with it well first of all i'd encourage you to go back and try it again but second of all you can click to refresh this app now with the code that i've written and play the game and see that the confetti is working now at this point i'm pretty sure we still have a bug in our game and that's if i click new game yep look at that it says that we won again and nothing has really refreshed or anything so we'll have one more challenge before this project is complete and we're going to handle that in the next screencast here's another example of a challenge that i'm going to be a bit vague about because i want you to think through what steps are going to be necessary to complete the challenge on your own so the task is to allow the user to play a new game when the button is clicked and they've already won i won't necessarily play through this entire game again but you saw that when we clicked new game it just console logged u1 again and i want you to think through why that is and what you can do to fix it so that it will reset the game pause now and work on this challenge as it stands clicking the button will run the roll dice function currently there's nothing in the rolldice function that will check if they've already won the game now we could choose to create a completely separate function that will create a new game for us which would require us to then conditionally render one of two buttons based on whether they have already won or rather based on whether tenzi's is true or not right now we're only changing the text of the button when tenzi's is true but we're not creating a completely separate button with a different on click handler either way would probably be fine i think i'm just going to update our roll dice function to handle the instance when the user wins the game now i really want them only to roll the dice if they don't have tenzi's if the game is not over so i'm going to move this code into if tensei's this conditional block here and then i can add an else that says if tenzi's is true in other words if they've won the game then first i want to set tenzi's to false because i don't want the game to still be one and then i can generate all new dice so i'll say set dice and i previously wrote a function called all new dice that i can use to generate all my new dice okay now let's play through the game one more time and see if we can get this to work we'll start with our fours this time oh i'm gonna switch to sixes because i have more of those okay here we go okay it says new game we got that console log which we can probably get rid of of course the confetti package is celebrating our win and then i click new game and everything restarts and wow look at that five fours right off the bat and at this point we have reached the end of our journey together building the tenzi's game however that doesn't mean it has to be the end in the next screencast i'm going to give you some ideas on how you might improve this game quite a bit more if you really want something that you can feel good about putting in your portfolio we won't walk through how to create those features but it could be a really excellent way for you to practice your skills instead of just moving forward i hope you've enjoyed this tenzi's game it might not be quite as fun to play against the computer but if you have some dice laying around i do recommend playing tenzi's it can be really fun and high energy especially when you're just trying to get that last dice to read the number that you need and you're racing against other people so on that note let's take a look at some ways that you might be able to improve this project just because we have completed the tenzis project together does not mean that the fun has to stop there assuming you enjoyed this project even a little bit i'd highly recommend that you spend some time adding to it the process of adding new features to the program that we made together is going to expand your mind and really help you internalize the things that we have learned together thus far i came up with a couple ideas you are welcome to use them or to do something completely different some ideas for extra credit on this project include adding real dots on the dice right now we're just using numbers for simplicity in the css but if you really want to challenge yourself with some css figure out how to put real dots on the dice more on the javascript side you could decide to track the number of roles that it took to win the game along those lines you could track how long it took to win the game and then you could save your best time or maybe even the lowest number of roles to local storage so you can try to beat your record in the future obviously this is not allinclusive be creative add whatever you want to this project in the end being able to show an employer that you not only took a project that you built together in a tutorial but also added a bunch of new features on top of it that's going to be much more impressive on a resume and a portfolio than a project that you just sort of followed along with great job on the tenzi's game you should really be proud of yourself and assuming you were able to follow along with everything and that you would even feel comfortable if you know we needed to delete everything and start from scratch that's an excellent sign that you have really learned what you need to learn from this react course if you look back it's pretty insane how much ground we have covered so far so if you think about it this is the ultimate solo project for this course it's going to collect all of the topics that we have learned throughout this course and put it together into a single project so you can really test yourself to see if you have been internalizing all of this new react knowledge that you've been learning and this project is a really fun one you're going to be creating a trivia app called quizzical it'll have an opening screen here where you can click to start the quiz it will then pull some trivia questions from a database and display those as a short quiz once the user has made all of their selections they'll click check answers and the app will score the quiz and allow them to play again if they want clicking on any of these screenshots will send you to the figma design file you can see the three different screens here just to be clear this first screen will actually be almost like a separate screen it's sort of an overlay when someone clicks start quiz you'll probably want to conditionally render this next section but this third screen is not really a separate screen it's just changing the first screen so that it gives feedback to the user on the quiz answers as always make sure that you go in and duplicate this to your draft so you can avoid seeing everyone's cursors or selections and so if you want you can make any edits to the design and just like before you can click the three dots down in the menu to fork this screencast to its own scrim for you to do all of your coding in so let's take a look at the requirements for this project like i mentioned there will be two screens the first one that asks them to start the game and the second one which has all of the questions in it your app should pull five questions from the open trivia database api which if you click the green text here it will send you to that api after the check answers button is clicked it should tally the number of correct answers and display it at the bottom and as always with these projects you should make sure that they are styled and polished clicking the link here on this slide will send you to the open trivia database which is a really fun api to use you can click in the upper right where it says api which will lead you to this page and it has a fun little generate api url button that you can click after putting in some specifics about the api if you want you can limit it to certain categories difficulties and so forth and it'll just give you a url that when you call it from your code will give you those trivia questions as always i highly encourage you to share your work click the discord icon to go to the i built this channel in discord or you can click the twitter icon if you're sharing this in public this project is probably a touch more difficult than what we have worked on together so don't hesitate to tap into the scrimba community ask for help and of course when you're finished be proud of the work that you've done and share it so best of luck working on this project and i really look forward to seeing what you end up building before we wrap everything up i wanted to let you know that i've made a sort of pseudo extension to this course that gives you a crash course on using class components in react as react evolves people are trending away from using classes in react but there's still plenty of reasons to learn how to write react using the es6 class syntax in this one hour mini course i talk about why they're important to learn and the ways in which they're different from writing react with function components and hooks if you are hoping to get a job as a react developer you will definitely want to take this course to brush up on class components since you're very likely to come across existing code that is still using them if you're watching this video now as a part of the scrimba front end developer career path and you already have a scrimba pro membership and when you move on to the advanced react course this crash course will be the first thing that you go over so you won't have to go out of your way to see this course but for anybody else who's watching this course as a standalone free react course you can click the screenshot that you see here which will take you to the playlist for that course and it's completely free to take you did it you really did it it's been a long journey but you have finally arrived at the end of this course you should seriously be so proud of yourself because assuming you've actually followed along the whole way and done all the challenges you are well on your way to becoming a serious react developer i've said it before but my learning philosophy is that the easiest way to get good at anything is to do it the hard way as such i've made it a point to include a lot of projects and handson work in this course let's take a quick look back at how those projects have progressed in each section we started off by just working with some static pages in react that allowed us to discover why we care about react a bit about the jsx syntax and how to make our own custom components how to apply our own styling so we can really polish our projects and all of it collected together gave us the ability to build static pages we used that knowledge to build our kind of silly little static page about fun facts about react and for your solo project you built a digital business card in section two we moved on to learning how we can make data driven pages in react we discovered how to make our custom components more reusable by accepting props and how we can make the data work for us by mapping over the data and using that to create multiple instances of our custom components using props to pass in specific data to each one then in section 3 we really turned it up to 11 because that's where we started making fully interactive web applications we dove deep into understanding how to listen for events how to save state and use state in our components how to conditionally render certain things on the page how to accept user input through forms and how to handle all side effects that might happen using the use effect hook then in section 4 we went all in on practice we took some existing code with this markdown notes app and added a bunch of new features to it and fixed a few bugs then we built a dice game completely from scratch and most impressively in your solo project you built a quiz app called quizzical that accessed trivia questions from an api and scored people based on their answers i purposefully put these projects in here to help drive forward the curriculum in this course and each one of the solo projects you did gave you a chance to really test out your skills unassisted to make sure that you really internalize the topics that we learned about this is truly a huge accomplishment and you should be super proud of how far you've come in fact i think right now you should head over to the today i did channel on the scrimba community discord server and brag about finishing this react course as soon as you can in fact i made it so easy you can click this screenshot to head straight there so what now well there is a ton more to learn about react but before i jump into the list on how you can dive even deeper into the waters of react i'd recommend continuing to just practice everything that you have learned this might be a great time to just use your imagination and pick a project that's similar in scope to the ones that we worked on in this course and then just build it on your own for example if you don't already have your own portfolio site you might even consider building one in react that being said the react ecosystem is quite large and fortunately the community is also quite large so the first thing i can recommend is i have my own advanced react course on scrimba if you're taking this react course as a part of the scrimba frontend developer career path well this advanced course is what you have coming up in the next module one of the first things i recommend learning about is react router this allows you to make what's called a single page application which is in a way the opposite of what it sounds like it means that you can add multiple routes to your website so that it becomes a little more like a regular website everything we've done so far has just lived in essentially one little page react router allows you to make a multipage website you can also learn something called css in js my personal favorite is a library called styled components but there's a bunch of these out there essentially they allow you to put your css directly inside your javascript so that you can colocate the styles with your actual code if you want to branch out a bit more you can start looking at next js or gatsby these are both some really evolved and powerful frameworks that are built on top of react to help you build some really robust static websites or even full dynamic web applications if you wanted to get deep in the nitty gritty you could also start learning about performance and optimization if your code base gets more and more complex or you're working in an existing code base that really needs to squeeze every ounce of optimization out of it then jumping into this realm might help you as a developer and in this course we only touched on two of the existing hooks use state and use effect but there are a bunch more that you can learn about as well i'm so grateful that i've had the opportunity to prepare and to teach this react course my name is bob's role i've been your instructor through this course my username is bob's a role pretty much everywhere online but these days i'm mostly just active on twitter so you're welcome to follow me there if you like you can click the twitter icon to go to my profile page once again congratulations on completing this course i'm excited to hear about all the ways in which you're able to apply everything that you've learned i'm truly excited to hear from you i love getting constructive feedback on the course if you have any suggestions for me i welcome them with open arms and i'm excited to hear from you about all the ways in which you're able to apply everything that you've learned here
