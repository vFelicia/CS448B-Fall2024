With timestamps:

00:17 - well hey everybody
00:18 - this is sam with python basics and
00:21 - uh glad to have everybody back today um
00:24 - it is tuesday and we are just going to
00:28 - pick back up where we left off so if
00:30 - you're new here
00:31 - thanks for joining us i'm sam from
00:33 - python basics
00:35 - and i'm doing a series uh with free code
00:38 - camp
00:40 - and we are starting from the beginning
00:43 - as
00:43 - we know nothing about python
00:46 - well hey there hey everybody um so
00:49 - a little bit of a recap and an
00:51 - adjustment
00:52 - to some things that we looked at last
00:55 - tuesday so we had our first stream last
00:58 - tuesday it was a two hour stream and
01:00 - until
01:01 - further notice we will do two hour
01:03 - streams every tuesday
01:04 - starting from the beginning and going
01:07 - forward so
01:08 - i have a youtube channel and
01:11 - i started doing uh some recap beginner
01:14 - streams
01:15 - um two months ago and we are just
01:18 - revisiting
01:20 - excuse me we are just revisiting the
01:22 - first
01:23 - hundred videos so what we did last week
01:27 - was we learned about uh conditions we
01:30 - learned about
01:31 - functions we learned about built-in
01:32 - functions we learned out how to build
01:34 - our own functions
01:36 - so what we're going to look at first is
01:38 - we're going to revisit
01:40 - our positive negative clean that up a
01:43 - little bit make that
01:44 - even more pythonic and then we're going
01:46 - to learn how to wrap that in a function
01:48 - so let's just go ahead and jump into it
01:52 - and then we're going to look at some
01:56 - string formatting how to really clean up
01:58 - our print
01:59 - and to delve into it so let's get
02:03 - at it so we were right
02:06 - here last time and
02:09 - so we were testing for a number if it
02:11 - was
02:13 - positive or negative well there's a
02:15 - there's a there's a trick to that it's
02:17 - actually three conditions
02:18 - it's either zero or
02:22 - then it's either positive or negative
02:24 - and the way that we handled that is we
02:25 - took
02:26 - an if an elif and an else i want to show
02:29 - you
02:30 - another way and the way that i like to
02:32 - do things is i build i build on it
02:34 - then maybe show the best practice so we
02:36 - take a step back and then we go forward
02:38 - and forward and forward
02:39 - to really get the best way to do it
02:42 - but i like to then really have
02:46 - it really cleaned up so it's either
02:50 - positive or negative one side or zero
02:54 - so let's clean this up
02:57 - else so it's either right in the middle
03:00 - zero
03:01 - or then it's one of the other two so we
03:03 - can go
03:04 - if number
03:08 - greater than zero print
03:13 - let's make a capital positive
03:16 - all right then we have an else
03:20 - then we just have if
03:25 - neg negative
03:28 - all right now you might say what's the
03:31 - difference
03:32 - well we're going to build upon this but
03:34 - this is
03:35 - this is best practice because you then
03:38 - clean
03:38 - this up and if you have any condition
03:41 - especially when we start doing maybe
03:43 - bisectional
03:44 - search or um binary binary
03:48 - like binary tree it just helps you
03:51 - understand that you come down and you
03:53 - split and you split and you split and
03:54 - you split
03:55 - so unless you have three true options
03:58 - fine you have your if your lf and your
04:00 - else but it's r
04:02 - it's really not you have two choices
04:05 - then you split off and then you have two
04:07 - more so now we have this this is great
04:10 - but what happens if we have
04:14 - we need this in a function so i'm going
04:15 - to show you this because we want to use
04:17 - yes right now it's it's usable it's
04:19 - repeatable
04:20 - but it is in a script let's just make
04:23 - this
04:24 - a function so let's look in this so you
04:27 - can indent an entire region
04:28 - so you come up here boom so then i'm
04:31 - going to take this
04:33 - and i'm going to wrap this in a function
04:34 - i don't know why i keep hitting e again
04:36 - i apologize everybody
04:38 - um let's see what was i thinking so
04:41 - then pause
04:46 - neg and then i take x so we need to
04:50 - clean this up
04:52 - just a touch and i can't remember what
04:54 - numbers did we use we add them
04:56 - we add them up here let's
05:00 - cut this and bring this down here so i
05:02 - was thinking about this as i was setting
05:04 - up this morning
05:05 - i did not even put this code on my
05:08 - github but at the end of today i i have
05:11 - other code on there
05:13 - uh all the code that i have in all my
05:14 - videos but i'm gonna have another
05:16 - section
05:17 - that just has the code and the examples
05:20 - from free code camp so i just want to
05:21 - let you guys
05:22 - know that uh today going forward after
05:25 - we get done today
05:27 - this will be back up uh
05:30 - all this will be on and we'll just add
05:32 - to it as the weeks go by
05:34 - so okay so here we are so now we can
05:37 - call this
05:39 - oops what cardinal sin did i forget
05:42 - i forgot my colon so there we are so now
05:45 - i have
05:46 - my function
05:49 - in memory and i pass it a number
05:54 - and then i get oops so i already have
05:57 - this going through
05:58 - my function up here but
06:02 - let's say let's say that i wanted to
06:07 - do this and let's bring this back one
06:11 - the indent so now now i have this nice
06:14 - clean function
06:15 - so now i want to go through my list
06:19 - got a little bit ahead of myself sorry
06:20 - guys so
06:24 - for number in numbers
06:27 - then i'm going to now i have this
06:29 - already printing so i don't need a print
06:31 - statement
06:32 - i'm just going to call my function
06:36 - pause neg then i'm going to pass
06:40 - it let's go half measures print number
06:43 - so to remind you
06:45 - i have
06:49 - here's my list my iterable we're going
06:51 - to do a lot with lists today we're going
06:52 - to do
06:53 - we're going to look at how to increment
06:55 - a variable increment decrement
06:57 - while loop and some things with lists
07:01 - and a little bit more and we're really
07:03 - going to look at list comprehension what
07:06 - that is so if you're just jumping in
07:08 - those are some of the things that we're
07:09 - going to be uh attacking
07:11 - and if you are just getting here i saw
07:13 - quite a few more people
07:16 - jump in i'm sam with python basics
07:19 - thanks for joining us today we are
07:21 - building uh upon
07:22 - the basics of python from the beginning
07:25 - so i get all these numbers printed out
07:29 - so now let's just comment that i know
07:32 - how to go through my list
07:33 - now i want to call the function on each
07:38 - iter in my iterable so this is my
07:40 - container this is my iterable
07:42 - i'm iterating through it here's my
07:45 - temporary intermediary variable
07:47 - so numbers is this list
07:51 - i'm going to iterate through it until
07:53 - this is exhausted until each item is
07:56 - exhausted and then we're going to look
07:57 - at a different type of loop so then i
07:59 - just
08:00 - call my function
08:03 - and i put number boom
08:06 - and then i get positive negative
08:08 - positive negative
08:10 - 0 positive negative positive boom
08:13 - that is one of the cleanest ways to do
08:16 - this
08:17 - so we don't have to go down here and
08:20 - call
08:20 - a call our function and pass it a
08:22 - variable
08:24 - this is nice best clean practices
08:27 - so here we go all right
08:31 - so next so now i want to look back
08:34 - at let's do this comment this
08:38 - out now i want to look back
08:41 - at our loop that we have right here
08:45 - that we used let's copy this bring this
08:48 - down here
08:49 - so what we did here is
08:53 - we we went through and we made this
08:57 - we got five row we got five columns
09:00 - five rows and the way that python goes
09:02 - is it goes row
09:04 - by row by row by row you see whatever
09:08 - so you see where i'm going with this but
09:10 - one of the best practices that i really
09:12 - like to show people
09:13 - and really get them to think about is i
09:16 - like to build
09:17 - a number triangle so let's see
09:21 - if i have this
09:24 - ready to
09:27 - run shoot because i want to show you i
09:31 - don't want to show you the code yet
09:33 - uh triangle where is it
09:39 - okay there we go i hoped it would it
09:42 - would open over here
09:43 - so let me show you this it's gonna run
09:47 - aha so this is what i want to show you
09:51 - and i want you to think about this how
09:54 - because this is a great exercise for
09:56 - beginners
09:57 - of how to go through and get
10:00 - 10 1 two ten rows
10:04 - and have it increase as we go
10:08 - so same principle over here but we have
10:11 - to have
10:12 - a lot more control over how things flow
10:16 - says have anybody have any guesses
10:20 - of how we might do this
10:23 - all right let me click over to the
10:26 - comments
10:30 - all right so same nested loop
10:34 - setup let's get rid of this right here
10:38 - all right so the way that we're going to
10:41 - do this
10:43 - so we're going to get our base going so
10:45 - we need we need 10
10:47 - we need 10 rows so
10:50 - for row in range
10:54 - so i need 10
10:58 - and why did that fail all right print
11:02 - row
11:05 - okay i got 10 but it's wrong
11:08 - so i need 1 through 10
11:12 - not 0 through nine so first problem we
11:15 - have to solve
11:16 - is we need to go one through eleven
11:19 - because
11:19 - to remind everybody inclusive exclusive
11:25 - all right so first problem solved we
11:27 - have
11:29 - when we go row by row so now what i need
11:31 - to do is i need to figure out how in the
11:33 - world
11:34 - am i going to get my columns
11:37 - all right so this is where these
11:41 - variables become very very very
11:43 - important
11:45 - so what is so awesome and i love
11:47 - teaching
11:48 - new people and especially young people
11:50 - how in the world to handle
11:53 - um repeatability and
11:56 - think about the set of instructions of
11:58 - how can i draw it
11:59 - how can i think about it because i love
12:02 - the example
12:02 - it was actually something that i learned
12:04 - giving the example i think it was
12:06 - monsters and flowers
12:07 - uh i was working with um
12:10 - some kids so you step in you go straight
12:14 - you turn you go down four turn all the
12:17 - way around go back up four
12:19 - and then you're literally back in the
12:21 - same position so then you repeat that so
12:23 - you figured
12:24 - you want to figure out the set of
12:25 - instructions that then you can do an
12:27 - error that said i was disconnected
12:32 - all right am i back everybody
12:39 - am i back okay because i just got a
12:42 - disconnection okay sorry about that i
12:45 - don't know how long i was down i
12:46 - apologize
12:48 - my internet has been acting up of course
12:50 - i did the famous
12:52 - okay we are back okay thanks bo sorry
12:54 - about that
12:55 - all right okay so we need to get going
12:58 - on our all right that looks a lot better
13:03 - okay so we're gonna
13:06 - we got our column and then we're gonna
13:08 - look
13:10 - so we know have have the numbers so now
13:12 - we need to move across
13:13 - so column in range
13:17 - now how can we make this repeatable
13:20 - so we know that the first time through
13:24 - row is one so
13:28 - the first time through i just need one
13:30 - number then the second time through
13:32 - i need two numbers the third time
13:35 - through
13:36 - i need three numbers so what do we have
13:39 - that is already counting for us
13:41 - by a certain set of numbers
13:45 - first time through one number second
13:47 - time through two numbers
13:49 - third time through three numbers so this
13:51 - way is the
13:52 - one of the easiest ways so we're just
13:54 - going to just going to steal
13:56 - range excuse me row we already have row
14:00 - doing all this incrementation for us we
14:03 - don't have to
14:04 - we don't have to reinvent the wheel
14:06 - we're going to borrow row
14:08 - all right now this isn't quite right
14:11 - so print now what did we learn last time
14:14 - we're going to print column
14:16 - then we're going to suppress the
14:21 - and then what we'll find out here is
14:24 - that this is a little wrong
14:27 - okay now uh oh
14:32 - let's see where am i
14:37 - let's see
14:40 - okay so we're getting we're getting
14:42 - close
14:44 - and actually i forgot this
14:47 - is a little different there we go
14:51 - so that's going to the end but what do i
14:54 - need
14:55 - right here so i'm starting at zero but i
14:57 - don't my
14:58 - my original example is i didn't want i
15:01 - didn't want zero i wanted to start at
15:03 - one
15:04 - but where's row starting it goes
15:08 - here so i need to change this just a
15:11 - touch
15:12 - my start stop
15:16 - now i want to show you let's get rid of
15:18 - this
15:19 - all right all right so i just gave a
15:23 - return
15:24 - and i emptied this right here
15:28 - and i got my last number disappeared
15:31 - so let me show you what this is so the
15:33 - last time row
15:35 - and this was one of the cool things that
15:36 - i remember so these variables are
15:38 - sitting there
15:39 - so i run dur and i have my column and my
15:42 - row variables
15:43 - so my row variable i can always see what
15:45 - the last call through a for loop is
15:48 - i remember the first time i saw that it
15:50 - like freaked me out and i was like
15:52 - well it started to really wrap my head
15:53 - around what was going on so the last
15:55 - variable call for column
15:58 - last variable assignment for column
16:02 - is 9 and the last variable assignment
16:05 - for row is 10. so let's
16:08 - be the most correct and assign
16:12 - one to row because row is
16:16 - 0 1 2 3 4 5 6 7 8 9 10
16:19 - and i want 10 to come out
16:23 - so i need to add 1 to beco make
16:26 - 10 be increme
16:29 - inclusive and included now this is where
16:33 - it gets
16:34 - very challenging that what happens
16:39 - if i go up to let's say 14.
16:46 - oh yuck we can see
16:49 - that this begins to taper off
16:53 - and that's that's not pretty
16:57 - that's not pretty at all so we are going
17:00 - to learn
17:01 - about a new tool
17:05 - called how to uh string formatting so
17:07 - we're going to actually
17:10 - use a placeholder and we'll look at it
17:12 - in just a second
17:13 - and then as we're going to assign how
17:15 - much space
17:16 - do i want for
17:20 - that i want to allocate for that
17:22 - placeholder
17:23 - so bingo row plus one all right
17:26 - sorry i was clicking over between
17:31 - okay all right so
17:34 - we need to change this right here
17:38 - we're gonna go boom
17:43 - curly brackets dot
17:46 - format
17:50 - just like that
17:53 - and then i close it
17:57 - now this doesn't do anything oops oop my
17:59 - bad
18:01 - let's see where i am
18:08 - and there
18:12 - sorry okay so i have my placeholder
18:16 - but i'm not really doing anything quite
18:18 - yet so right now
18:21 - this is how this is how you use a
18:23 - placeholder and we're going to look at
18:24 - this
18:25 - with an example of uh
18:28 - in a in a sentence here in a little bit
18:31 - we're going to then look at our
18:32 - hello function and build on that
18:35 - so what i'm doing right here is i'm
18:38 - telling python
18:41 - that i have a placeholder and i want
18:44 - this to be
18:46 - the size of three
18:49 - and then this is the variable that i
18:52 - want to go
18:53 - into this placeholder so let's
18:57 - save and run this boom
19:01 - just like this and of course then you
19:03 - can change it to two
19:04 - of course it'll be a little
19:07 - little crowded here at the end so three
19:09 - is
19:13 - best for right now so you have a buffer
19:15 - so you can read this so this
19:16 - is one perfect example of how you use a
19:20 - very clean
19:21 - placeholder using string format so you
19:24 - put
19:24 - this string that you want inside inside
19:27 - your quotations and i'll show you
19:29 - we'll do the hello function again and
19:31 - we'll and we'll neaten this
19:33 - up dot format passing in
19:36 - this so there we go awesome
19:40 - let's see any uh good question
19:44 - okay so now now let's look
19:47 - at how in the world
19:51 - could we utilize this who am i doing
19:54 - are we doing uh no we'll do
19:58 - input in a second yep that's what we're
20:00 - going to do
20:01 - alrighty so comment that out
20:04 - so we had our function right
20:07 - up here about taking in
20:10 - hello we're saying
20:19 - and hello this out there we go
20:22 - boom all right good we're still green
20:25 - so this got it done but
20:29 - boy that's ugly
20:32 - because then you know sam hello sam but
20:35 - then what happens if i say i wanted this
20:37 - to be a little bit more complex
20:39 - hello sam
20:42 - i gotta give it a space nice to
20:47 - meet you
20:51 - i remember when i learned this i thought
20:54 - this was so cool
20:55 - but man that's ugly so
20:59 - let's copy this
21:02 - put it down here comment that out please
21:06 - now let's use
21:19 - i got too many spaces
21:26 - if you're just joining us i'm sam with
21:28 - python basics
21:29 - and we are doing live streams
21:32 - we can throw in name and then i got my
21:35 - print
21:36 - and i do this just to check boom
21:40 - and then i do sam we are doing live
21:42 - streams for
21:43 - basic beginners the beginning of python
21:46 - because i know it is summer time
21:48 - and everybody is getting ready for
21:50 - school especially being at home
21:52 - these times and fall is coming up and
21:55 - school will be starting up school year
21:57 - and we are going to be doing a
21:58 - intro and introduction to python going
22:01 - from the beginning
22:02 - and going two hours every tuesday so
22:06 - thanks for joining us today
22:07 - so this is the
22:10 - very nice clean string format of how you
22:13 - get your placeholder
22:15 - and then later we can even get fancy
22:18 - when you have multiple
22:19 - placeholders you can actually assign the
22:21 - order of variables you want so
22:23 - instead of having to reorganize your
22:25 - list you can go oh well that one's
22:27 - supposed to be there so you just go and
22:29 - you change the
22:31 - the location so there we go
22:37 - all right
22:40 - you can do that with an f string i was
22:42 - going to build on that and build to it
22:44 - sometimes the f string can be a little
22:47 - overwhelming
22:47 - so i like to show this first and i'll
22:50 - make sure i have some f string notes
22:52 - uh next week but yes you prefer f string
22:56 - awesome some people get it what i've
22:58 - found some people get
22:59 - f string some people need to see this
23:01 - first so
23:03 - i um i like to show this first and then
23:06 - show f string
23:08 - but yes par f string
23:11 - is the preferred because then you don't
23:13 - even have to do anything but
23:14 - i want people to kind of know where this
23:17 - came from
23:18 - and for it's i guess i also like to
23:22 - uh it's like learn it's like learning
23:25 - your multiplication tables
23:27 - learn those first then you learn how to
23:28 - use a calculator but awesome
23:31 - f string is cleaner and even shorter
23:34 - absolutely
23:38 - that's true so you have options or so if
23:40 - you're going along
23:42 - uh and you see and you see this
23:45 - you're like what it what is this because
23:47 - you're gonna run across code and you're
23:50 - gonna get to the point where you're just
23:51 - reading
23:52 - reading documentation and especially if
23:54 - it's older code
23:55 - um and it's it has this and you're like
23:58 - what is this
23:59 - i just think it is a
24:03 - that's cool well i appreciate that guys
24:06 - um i want you to know where it comes
24:09 - from but no
24:10 - in the in the iteration and there's
24:12 - actually even an older placeholder where
24:14 - you would have
24:15 - you would do the modulo sign and an s
24:18 - and f so for string um
24:22 - uh float or digit and that was
24:25 - that was annoying but i i like to show
24:28 - this now because it's clean
24:30 - and i've found that for newer people
24:33 - excuse me
24:34 - it's easier to wrap our head around and
24:36 - then we can go from there
24:40 - well i appreciate that that you are guys
24:42 - there is a a lot there
24:44 - it's over almost three and a half years
24:47 - worth of uh
24:49 - videos out there um
24:52 - and over 740 i think
24:56 - so all right we need to get going sorry
24:58 - sorry for distracting
25:00 - and getting off topic but i i could talk
25:02 - about this for hours
25:03 - as i'm sure you guys have already have
25:06 - already noticed
25:07 - okay let me see where we are with our
25:09 - notes all right we're to the point now
25:11 - that
25:11 - now we need to look at how to handle
25:14 - assignment reassignment
25:17 - increment increment and decrement all
25:19 - right we're to that point
25:20 - because we're going to start learning
25:21 - more with um
25:23 - with the input so like i said before
25:27 - python does everything on the right side
25:33 - right side and then links or assigns it
25:37 - to the variable
25:39 - this took me forever to get i was like
25:42 - this can't work it's
25:43 - your you have itself you have itself you
25:46 - have itself
25:47 - shoot i'm getting ahead of myself all
25:49 - right
25:50 - so we assigned 0 to i we did it by using
25:54 - the equal sign
25:55 - linking that information in memory
25:57 - python goes
25:58 - ooh i know this i'm going to go to
26:00 - memory i'm going to see and i'm going to
26:01 - spit out
26:02 - 0. now i go here
26:06 - and you see this and i call i and it's
26:09 - one how in the world is this one it was
26:12 - just
26:12 - zero and now you have this thing on here
26:16 - and you're telling me that this does not
26:18 - throw up
26:19 - nope doesn't throw up because again
26:22 - python goes
26:23 - into memory it says aha i know what
26:25 - you're talking about
26:27 - this you assign 0 to this so now
26:30 - python doesn't see i it sees zero and
26:33 - you want to add one to zero
26:35 - then you assigned it so now okay you
26:38 - seem to know what you're talking about
26:39 - you called a variable that i've heard of
26:41 - and now it is one is currently assigned
26:44 - to that variable
26:45 - the i'm gonna put it out on the screen
26:48 - and so
26:49 - now then what happened
26:52 - is oops i apologize guys
26:57 - so then python the
27:01 - the core core developers go let's let's
27:04 - uh
27:05 - let's juice this up a little bit
27:08 - because they were probably i like it
27:11 - because i'm lazy so i don't want to type
27:14 - all those characters i did not want to
27:16 - type
27:17 - i over and over and over again so now
27:20 - i'm going to
27:21 - increment by 1.
27:24 - so now when i so last time i was
27:28 - 1 and now i
27:32 - is two i'm incrementing
27:36 - by one and this works for every
27:39 - math operator in python
27:43 - all right jan quick
27:46 - what is i now if i press i
27:49 - what will come out on the screen i don't
27:52 - know what the lag
27:53 - is i don't know i don't want to bore you
27:54 - guys too much but it is now back to
28:00 - one bingo
28:03 - because it it decremented
28:06 - now decrement and then this also works
28:08 - for multiplication and division
28:10 - it works for all all math operators
28:12 - awesome
28:13 - so yep you guys are correct
28:16 - i really do love this interaction
28:18 - because it makes it a lot
28:20 - easier maybe at some point we could
28:22 - figure out how to all be
28:23 - uh or a few of us be on a uh
28:27 - voice call because that would be very
28:28 - cool for the interaction
28:30 - all right so now now what we're going to
28:33 - do
28:34 - is we're going to do some math we're
28:35 - going to work with our input
28:37 - we're going to use our input do some
28:39 - math
28:41 - but there's going to be a problem and
28:43 - we're gonna have to learn
28:44 - how to handle this so
28:48 - we have let's see increment
28:53 - ah we need to touch on
28:57 - well we can we can do this one of two
29:00 - ways
29:01 - let's let's look at because we're going
29:04 - to look at
29:05 - counting down so we're going to use a
29:07 - while loop and then we need to take in
29:09 - input so we're talking about numbers
29:12 - right now let's go ahead and take this
29:13 - in so i have my number
29:18 - and we know how to
29:21 - take an input from the user enter
29:24 - a number and we give it a little space
29:28 - so it looks nice and pretty enter a
29:30 - number i'm going to
29:31 - give it five now let me click back over
29:34 - to
29:35 - our chat window
29:38 - if you press i twice would it
29:42 - if i press i twice
29:46 - okay let's go over that for a second so
29:48 - if i
29:50 - if i then call i again no
29:54 - now what we're gonna look at
29:57 - well hey there hey guys um i see a
30:00 - couple more
30:01 - folks have joined us we are we are
30:04 - working with
30:05 - incrementing and decrementing right now
30:08 - but if i'm just calling the variable now
30:10 - if i called this
30:12 - okay if i called this
30:16 - over and over and over again which we're
30:17 - going to look at in a while loop
30:20 - so let's okay let's see how many times
30:22 - we do this
30:23 - so i just it was one and i just ran it
30:26 - two more times what would it be
30:32 - jan i know you were typing uh
30:36 - so if i just ran if i decremented
30:39 - i twice by one what would i be right now
30:47 - negative one negative 1 and we're going
30:49 - to look at this in in a while loop
30:51 - so let's deal with this and then we'll
30:54 - kind of wrap our head around this a
30:55 - little bit more
30:56 - so now bingo negative 1. all right
31:00 - so we just called
31:04 - we just took this in
31:07 - and number five
31:12 - okay that is a five but i want you to
31:14 - look
31:15 - right here
31:19 - what do we know about that any thoughts
31:24 - but if we're not sure we have this handy
31:26 - dandy
31:27 - function built in for us that handles
31:30 - everything it's a string what is a
31:34 - string
31:34 - it's not an integer or a float so can i
31:37 - do any math operation
31:40 - can i do any math operation on a string
31:45 - cleanly technically we can get around it
31:47 - but i don't want to talk about that
31:48 - function
31:49 - can i do can i do
31:52 - this bingo
31:55 - i cannot do that you have to convert it
31:59 - bingo jan
32:00 - how how can i do that
32:03 - so i'm going to come back over here so i
32:05 - have number
32:07 - so input
32:12 - enter number
32:17 - all right fantastic
32:21 - all right so for anybody who is
32:25 - super new we can do this the long way
32:29 - we're going to show long way
32:33 - then i can now it didn't
32:39 - print type because when you wrap
32:43 - a string in a print it prints out pretty
32:47 - five and um there we go
32:50 - string and uh
32:53 - there we go let's see
32:57 - so we have we have this
33:01 - in the background hey um i want to ask
33:04 - you guys because i do not want to drive
33:06 - you guys nuts can you hear an alarm in
33:07 - the background
33:08 - just somebody tell me real fast if you
33:10 - can hear it's not going to bother me but
33:12 - i do not want it to drive you guys nuts
33:15 - can you hear a beeping in the background
33:19 - anybody if you can't great i can ignore
33:22 - it
33:24 - okay good awesome okay i do not i just
33:28 - don't want you guys to be on this stream
33:29 - wanting to
33:30 - kill yourself ah okay great okay let's
33:32 - keep going
33:33 - one of my kids forgot to turn their
33:34 - alarm off and they've already left for
33:36 - the day
33:37 - so i get to hear this for an hour and a
33:38 - half hopefully somebody will come home
33:40 - soon all right
33:41 - so we have a problem we cannot do so
33:45 - you cannot so python goes okay you have
33:48 - a string
33:49 - you can't concatenate see that that's my
33:51 - first so then if i go one
33:54 - so check this out
33:58 - so i put a string first so python goes
34:00 - okay now i'm gonna trust that you know
34:02 - what you're talking about
34:03 - so you're gonna try to concatenate one
34:06 - because i have
34:07 - a string and i'm using my addition
34:10 - operator
34:11 - and i'm trying to add one that says you
34:12 - can't connect concatenate but then when
34:14 - i give it an integer first
34:16 - and then give it my variable it says you
34:18 - cannot
34:19 - unsupported operand so i can't it has to
34:22 - be
34:23 - it has to be an int so i can take this
34:26 - the long way so i can go number
34:30 - int hint number
34:34 - that's that's long that's longhand enter
34:38 - number
34:40 - int or i remember the very cool first
34:43 - time i saw this i was like this is so
34:45 - cool
34:45 - so we did this with our range in our
34:48 - list
34:49 - i can literally just wrap perfect i can
34:52 - wrap an
34:52 - int function around my input function
34:56 - and this works this is
34:59 - completely legal and it's pythonic
35:02 - this is best practice and then
35:05 - i kick this out so now now what we're
35:08 - going to look at is we're going to take
35:10 - in a number
35:11 - and we're going to count down we're
35:13 - going to count down
35:14 - from that number whatever number we pass
35:16 - in and we're going to count down like a
35:18 - countdown sequence and then we're going
35:19 - to print blast off
35:21 - this was uh one of the very first early
35:23 - exercises and i love
35:25 - i love doing it because you have to be
35:27 - paying attention
35:29 - to the order of operation and anything
35:32 - that you want to have happen
35:33 - in your certain order so let's look at
35:36 - the while loop
35:37 - so what is the while loop key
35:42 - how do we get to our interactive help
35:44 - help keywords
35:49 - boom and let's give us some more space
35:51 - so we can clean this
35:54 - while so let's look at weil all right
35:58 - while statement is used for repeated
36:02 - execution as long as an expression is
36:04 - true
36:06 - super important we'll only operate if
36:09 - it's true
36:10 - just like our if and our
36:14 - elif the statement after has to be true
36:18 - in the header for the body to be
36:20 - executed
36:22 - so let's look at this so we are on line
36:25 - 378 everybody look right there everybody
36:27 - sees that line
36:28 - three seven eight so while
36:34 - true print
36:38 - hi all right we're on 378 right
36:42 - now we're on 380 ready okay come up here
36:46 - stop shell restart shell i'm on 740.
36:49 - so this just ran through a ton
36:53 - of stuff bam there it is
36:56 - and you're like okay so what does so
36:59 - influence can be achieved by
37:01 - yes an infinite loop with while true
37:05 - and what i want you to think about is i
37:07 - remember
37:08 - when i was really getting started and i
37:10 - got i got asked by
37:12 - a young man in in class that i was
37:15 - teaching
37:16 - and he said why not a for why
37:19 - why a while loop instead of a for loop
37:21 - so you can just know how many times
37:23 - to to do it well then i was sitting
37:25 - there thinking
37:26 - and again i was still at the beginning
37:27 - and i said okay well
37:29 - minutes before i learned anything about
37:31 - windows or running up high window or
37:35 - a tkinter window i said i want you to
37:37 - think about it
37:38 - your um your window your chrome
37:41 - is sitting there open it is running and
37:44 - the first thing it's doing is it's
37:45 - running a while true loop
37:47 - until you hit that x and then it closes
37:50 - everything down
37:51 - that is a perfect example of while so
37:54 - i'd like to do this countdown
37:56 - method with blast off and then we go
37:59 - from there
38:00 - so we have let's comment this out and we
38:03 - will go
38:05 - while while
38:08 - count we'll change this to count so be
38:11 - really on point
38:16 - count while count is greater than zero
38:21 - we're going to then print count
38:25 - now wait a minute let's think about this
38:30 - so if i pass a five right now
38:33 - it's just going to print count over and
38:35 - over and over again
38:37 - but i want i want to do something right
38:39 - so we're going to then take
38:41 - count then we're going to decrement it
38:44 - every time through
38:45 - by one now what we need to decide
38:48 - is we're gonna we're gonna make some
38:50 - mistakes here and then we're gonna fix
38:51 - this up
38:52 - so i'm going to go through here enter a
38:56 - number
38:56 - we're just gonna go 5. so four three
39:00 - two one zero hmm
39:04 - i didn't print out five but i've entered
39:06 - five
39:07 - so what should i do
39:12 - um where
39:14 - where should i put where should i put my
39:17 - decremented
39:19 - uh statement
39:28 - it's not working i didn't get five to
39:29 - print out on the front end
39:32 - so we're gonna move it down here
39:39 - so now i'm gonna get
39:42 - perfect after my print statement
39:47 - now what happens if we say ready
39:50 - then we start the count so i'm taking in
39:53 - my input
39:54 - i want to print out ready
40:00 - i don't know where i got oh i got ahead
40:02 - of myself ready
40:05 - then i start my then i start counting at
40:07 - five four three two one
40:10 - but now i don't have
40:14 - zero hmm
40:19 - but i want zero so
40:22 - [Music]
40:23 - how can i do that so now we got a set of
40:27 - i guess it depends on the use of what
40:29 - you want to get out of the number
40:32 - um
40:33 - [Music]
40:36 - all right so we need to think about this
40:39 - so if i want to
40:40 - include in zero so we need to think
40:44 - about so all right we got
40:46 - i got my ready and i solved my problem
40:48 - of
40:50 - aha i like that
40:54 - zero greater than or equal to zero
40:57 - fantastic
41:00 - five so now i have ready five four
41:04 - three two one zero okay then it
41:07 - exterminates
41:09 - what happens if i wanted something like
41:13 - blast off to happen where would i
41:16 - where would i put that so if i put it
41:19 - here
41:21 - it would happen every single time right
41:24 - so i go print blast
41:28 - off and i get a bunch of it's super cool
41:31 - and super exciting so i
41:32 - i want exclamation points so i get
41:36 - five and i get oh
41:39 - outside the while loop exactly so i come
41:42 - here
41:43 - and i hit my backspace one time so
41:48 - python
41:49 - takes care of that for you i move it out
41:52 - of my body
41:53 - so i have my header i have my body
41:56 - and then i move it outside the body so
41:58 - it will only happen
41:59 - one time perfect so then i get my five
42:04 - five ready five four three two one zero
42:07 - blast off boom i'm without
42:11 - the yup yup yup exactly you guys
42:15 - you guys are on it today very very good
42:18 - now now i want to look at
42:22 - lists so do i still have a list in
42:25 - memory
42:26 - and i comment everything out okay let's
42:34 - do while i'm doing this everybody in
42:36 - comments comment uh
42:38 - where you're from uh
42:41 - because i am very curious actually
42:45 - getting some stuff around because most
42:46 - of and if you're just joining us today
42:48 - i'm sam
42:49 - uh with python basics uh partnering with
42:52 - bo and free free code camp
42:57 - and um we are doing two hour streams
43:01 - every tuesday um with a
43:07 - granted it's the world's fastest
43:09 - countdown
43:10 - that is true that is very true um
43:14 - uh we are doing two hour streams and
43:18 - uh this is this is basic beginner stuff
43:21 - so if you are
43:23 - china also very cool
43:26 - because what i what blows me away is uh
43:29 - the audience on my youtube page
43:31 - is uh from all around the world
43:35 - uh i it is extremely humbling
43:38 - so we got china uh india
43:41 - that is very cool yes actually a
43:44 - majority
43:44 - the largest the largest percentage of my
43:47 - audience
43:48 - is uh is from india uh slovakia
43:51 - very cool that is so cool all right
43:55 - so let's we have let's put this in
43:58 - memory
43:58 - so we have a list a list is the very
44:02 - basic
44:03 - uh is a very basic container in python
44:07 - so we got and i call it numbers okay and
44:09 - if you forget
44:10 - you call your call your dir with no
44:13 - with no information and you get numbers
44:16 - so there we go
44:23 - oh awesome um
44:28 - okay now what do how can we find out
44:32 - things about
44:33 - a variable what are we the things
44:36 - associated
44:37 - and what are those things called
44:40 - so any anybody
44:44 - anybody got any thoughts
44:48 - all right so we got numbers
44:52 - and we run dur on numbers
44:58 - let's see so we're not gonna
45:02 - oh i apologize i was looking for the
45:05 - methods
45:05 - how do we so the the functionality of
45:08 - what we can do
45:10 - with a list and i was looking for
45:12 - methods um
45:13 - and i just want you guys to start
45:14 - thinking about that
45:16 - so we're gonna look at append
45:19 - and then we're gonna look at list uh
45:22 - list comprehension
45:23 - so right now what we're gonna look at is
45:26 - i want to take
45:27 - a um i want to take a
45:32 - list and we want to put it
45:35 - if it is in a positive
45:39 - list ooh that was a no no
45:44 - or a negative list so we're going to
45:46 - have an empty list
45:48 - and a we're going to have an empty
45:51 - positive list
45:52 - and an empty negative list
45:56 - let's see oops
46:00 - all right and sorry
46:06 - and so now what in the world so we know
46:10 - how to iterate through
46:11 - number in numbers
46:16 - and we go through and we're just gonna
46:18 - print out
46:20 - number
46:24 - boom okay but now we have
46:27 - i was talking about append so let's look
46:29 - at what a pen does
46:30 - and how do we do that we do help on
46:33 - [Music]
46:34 - numbers dot append
46:39 - what in the world does this do append
46:42 - object
46:43 - to the end of the list so if i have
46:46 - my pause over here which is an empty
46:48 - list
46:49 - and then i go pause dot append
46:56 - let's see pause dot append
47:01 - and i give it four now pause
47:05 - it has four and
47:10 - and negative 3
47:15 - then negative has negative 3.
47:19 - so what could i do here
47:23 - take everything that we know and then i
47:26 - can go
47:27 - and go if number
47:32 - greater than zero
47:36 - if if num and numbers if num greater
47:40 - than zero
47:40 - boom that is perfect so then i go
47:43 - pause dot append
47:47 - and then i give it number so then if
47:52 - that's that
47:52 - what should else be what should else be
47:55 - if i can actually spell else today
47:59 - all right so then negative
48:02 - dot append number
48:05 - right so i run this i call pause
48:08 - if i can spell pause then i call neg
48:12 - so bam so now i have a way
48:15 - to do this okay when you're first
48:17 - learning
48:18 - this is fine this is perfect and
48:22 - in a week or two when we start getting
48:24 - into
48:25 - uh some upper level
48:29 - modules we're actually i'm going to
48:30 - actually then show you
48:32 - how list comprehension is faster so
48:35 - let's go ahead
48:36 - and jump into
48:39 - list comprehension so what is list
48:42 - comprehension
48:43 - list comprehension is a way all the
48:48 - instructions are
48:49 - actually inside the list let me just
48:52 - show you
48:53 - so we're just going to do a real clean
48:55 - and easy one
48:57 - um we'll trump numbers here and we'll go
49:03 - so the way that i like to explain this
49:05 - is we got
49:06 - 4 i in range
49:09 - 10 10.
49:13 - so start start with your header
49:16 - your your loop your for loop header
49:20 - now when you get more comfortable with
49:22 - this you'll get it let me click over
49:24 - here
49:25 - see if anybody anybody ever seen list
49:27 - comprehension
49:28 - before you probably have because you
49:31 - guys seem
49:32 - uh pretty knowledgeable already
49:38 - okay all right let's let's jump at it
49:43 - and then we just put i so that's the way
49:46 - it works
49:47 - the variable goes to the front so it's
49:49 - basically
49:51 - how do i want to do this and what are my
49:56 - okay and that's fine that's absolutely
49:58 - fine that's what we're all here for
50:00 - uh you're here to ask questions and
50:03 - learn and
50:04 - make me better and my job is to
50:07 - uh do this that i absolutely love so
50:11 - all right but you do this wrapped inside
50:14 - your
50:14 - your list brackets so now i run this
50:18 - and i call numbers i call it number or
50:19 - numbers numbers
50:23 - boom so i already have so this is
50:26 - that this is everything built built on
50:29 - one
50:30 - and you might say well why didn't we
50:31 - just wrap list around our range
50:33 - well because we are that that's the
50:37 - basic
50:38 - list that i awesome well then good i'm
50:41 - so excited that i get to be the one
50:43 - to show you guys this now
50:46 - now the way that this works is now we
50:49 - add
50:50 - our conditions so we're going to change
50:54 - this to positive
50:55 - pause equals
50:59 - now we go if we have no colons
51:04 - if i
51:10 - uh yeah we'll do this we'll keep it this
51:13 - way
51:15 - if i
51:18 - greater than zero
51:22 - all right
51:28 - sorry guys sometimes it hangs up
51:34 - and now i need to change that's what i
51:37 - was looking at my notes going
51:38 - that doesn't make any sense well it
51:40 - doesn't if you don't read the notes
51:42 - right
51:43 - sorry guys so all right so to revisit
51:46 - list comprehension and lambda functions
51:49 - are my
51:50 - awesome because we're actually going to
51:51 - be doing a lot
51:53 - with list comprehension and lambda i
51:56 - don't know if we'll get
51:57 - all the way through the lambda because
51:59 - what we're about to do very soon and
52:00 - we're going to start
52:02 - on is one of the questions that i ran
52:05 - across a couple of years ago
52:07 - uh let's say it's an inter it's probably
52:09 - not an interview question
52:10 - anymore because it is so widely known
52:14 - but here's the premise i'm going to give
52:16 - you
52:18 - you have 25 horses and you have to find
52:22 - the fastest horse oh
52:26 - and you don't have a stopwatch oh
52:29 - and you can only race five horses at a
52:32 - time
52:33 - how many races what is the shortest
52:36 - number of races
52:38 - that you can do to win to get the answer
52:43 - that's that's the question that we're
52:44 - going to be solving well actually
52:47 - proving so what the premise is
52:51 - is you have your 25 horses let's just
52:54 - jump into it
52:55 - and and we're going to build upon this
52:57 - so what the premise
52:58 - of this is is let me find
53:02 - the the list
53:05 - sorry i did not think we'd get there
53:06 - already so i'm super excited because you
53:09 - guys are really really smart
53:10 - and uh it is so super easy so all right
53:14 - it is super super cool so here we go
53:18 - so you have a list and so i was thinking
53:20 - about this and i go this is a perfect
53:22 - tutoring problem a perfect video
53:26 - so if you want to get ahead and we don't
53:28 - get to it
53:29 - you can go and watch it uh of course
53:32 - these are
53:32 - everything that we're doing here is on
53:34 - my uh youtube channel
53:36 - but it does not have these subtle
53:38 - nuances and especially during live chats
53:41 - we always get into more i will just tell
53:43 - you that right now
53:44 - uh i have the main topics but then we
53:47 - always wiggle off
53:48 - into uh something else that's why
53:51 - i absolutely love these live streams is
53:53 - because you get into deeper deeper it's
53:55 - kind of like audio books where you
53:57 - are talking about something and then you
53:58 - remember something else and then you go
54:00 - off onto a tangent so great if you read
54:02 - the book
54:02 - awesome you get the red the red the
54:06 - audio you always get a little bit more
54:08 - so that's why i love these
54:10 - live streams so okay all right so the
54:12 - premise of this
54:13 - is that the long the long term that
54:15 - we're going to be working on
54:16 - and we're going to we're going to use
54:18 - all our skills to do this and we
54:19 - especially need
54:21 - a uh we're going to we're going to look
54:23 - at lambda we're gonna do this two ways
54:25 - we're gonna use this
54:26 - with a sorted and a key function and
54:29 - then we can also use lambda
54:30 - but yes lambda you're exactly right
54:33 - lambda
54:34 - and list comprehension extremely similar
54:37 - they look they look extremely the same
54:39 - and i get it
54:40 - when i was first looking at this it just
54:43 - doesn't make any sense
54:44 - but we'll go through it enough times and
54:46 - you'll get it
54:48 - excuse me all right but the premise of
54:51 - the 25
54:52 - uh horses and you can do it
54:56 - in is it is it six races
55:00 - six or seven we'll prove it and we'll go
55:03 - through so you break the horses up
55:05 - into into
55:09 - groups of five so you run five races
55:12 - you have those horses be in there and
55:15 - they're uh
55:17 - in the order that they won the race
55:19 - super simple
55:20 - you don't have to you don't have to do
55:22 - anything else
55:24 - then you have the horses
55:27 - that won those races
55:30 - race awesome it's seven it's seven
55:33 - so you have then those horses run their
55:36 - race
55:37 - so then now you have
55:40 - these in order of the of the of the
55:43 - speed
55:44 - that they have that they've won
55:47 - then you have the the first horse
55:51 - of each race race so then now you have
55:54 - anybody got any guesses a list
55:57 - of lists in order in which
56:01 - they go now
56:04 - i think i misspoke you will always know
56:07 - which horse is the fastest because it
56:09 - will always end up here and i designed
56:11 - this
56:12 - puzzle and to use numbers because
56:16 - it's 1 through 25 so they're going to
56:18 - order themselves
56:19 - in 1 through 25 right so but the kicker
56:23 - is
56:23 - is this will not necessarily always be
56:26 - the second fastest source what happens
56:28 - if you had the second
56:30 - fastest horse just randomly happen to be
56:34 - here so the way that you then have to
56:37 - slice this
56:38 - and then run one more race
56:41 - is we have to come here and get that
56:44 - horde it's this diagonal right here
56:46 - it's this horse this horse these two
56:49 - horses
56:50 - and these three horses always
56:54 - that you will get the top three horses
56:56 - and i even i think i expanded it to
56:58 - the top five that's i think it's
56:59 - actually these three
57:01 - are the top three always but the top
57:04 - five
57:05 - will always reside here i believe or you
57:09 - get the top three i can't remember
57:10 - exactly
57:11 - but we're going to slice this through
57:12 - we're going to create a list of lists
57:15 - then we're going to have these get
57:17 - ordered
57:18 - then have the lists be ordered by the
57:21 - last place
57:24 - and then we need to slice this right
57:27 - here
57:28 - to get the next one so let's just go
57:30 - into it we have
57:31 - one hour left i think we can get through
57:34 - all of this
57:35 - so we have a lot of work to do here so
57:37 - how in the world
57:39 - do we need to start any guesses
57:44 - so first we need to get a list full of
57:47 - lists
57:48 - and have have it
57:51 - chopped up so we're gonna need to learn
57:53 - about
57:54 - a couple of a couple of things here
58:00 - so we need to bring in
58:04 - we need to look at
58:13 - well i appreciate that uh
58:16 - so we looked at der
58:21 - uh on our on our numbers
58:24 - because then we need to bring in a
58:26 - function so we need to
58:29 - i think i'll go from because you're
58:32 - you're lost
58:33 - all right we're gonna go step by step by
58:35 - step
58:36 - so first step was we need to build a
58:38 - list of lists
58:39 - so this is what's so powerful about
58:41 - lists
58:42 - is it can contain anything it can even
58:45 - contain
58:47 - an item that's itself so let's just go
58:49 - ahead and look at this
58:51 - and we're gonna do this with list
58:53 - comprehension at first
58:55 - so um
58:59 - num num nums
59:03 - that's silly i'm sorry list
59:09 - numbers
59:15 - okay all right so here we go
59:20 - we're going to do this with this
59:22 - comprehension first
59:25 - actually to make this real clean let's
59:28 - do this with with a loop
59:33 - all right list
59:38 - numbers
59:42 - we're going to make a bracket empty list
59:46 - then for i in
59:49 - range three
59:55 - then list
59:59 - numbers dot append
60:03 - then i'm gonna insert a list of
60:07 - range one through six
60:11 - close this out so what am i doing
60:14 - i have a range one through six so it
60:17 - doesn't go to six it goes to five
60:19 - so then i have a list of one through
60:21 - five
60:23 - inserted inside a list
60:26 - three times okay and what'd i do
60:30 - and do to do to do one two
60:35 - okay why'd that fail everybody look at
60:37 - that let's do that again
60:39 - i ran this whenever you get this
60:41 - indention
60:43 - and the syntax thing it's the last
60:45 - little bit of code that you wrote
60:47 - so i did that ah it gray to everybody
60:49 - see that gray out
60:50 - gray out gray out boom so now it runs
60:54 - and then i go list numbers
60:58 - ooh okay this looks different
61:02 - i have
61:05 - bingo missing parentheses so now i have
61:08 - a list because i see my brackets
61:12 - but then i have here so if i
61:15 - clean this up for i
61:19 - in list
61:23 - numbers print print
61:26 - i aha
61:29 - so i have a list of lists i have
61:33 - three lists inside of a list
61:37 - okay so now
61:42 - so i want now random
61:45 - i want randomly generated numbers
61:49 - inside my five lists
61:52 - so i could do this a couple of ways
61:55 - and since list comprehension can be a
61:58 - little challenging we're gonna do this
62:00 - both ways all right
62:04 - let's let's just jump into it
62:07 - so we need to learn about a uh have we
62:10 - imported
62:12 - have we imported anything yet i can't
62:16 - remember did we
62:16 - we imported mac we did import math did
62:18 - we import anything else did we look at
62:20 - random
62:23 - jan are you still here did we look at
62:24 - random last week i can't remember
62:28 - awesome okay random we haven't okay
62:32 - awesome so when you're wanting
62:34 - especially when we're doing this
62:36 - i do not and you should not
62:40 - want to type when when after we do this
62:43 - so when i've been sitting here typing
62:45 - this
62:47 - you're not going to do that anymore and
62:49 - we are not going to do
62:50 - don't remember import okay import
62:54 - import is a way to bring in another uh
62:59 - file and namely uh and i like to
63:04 - differentiate a module is
63:07 - a module that is already built in that
63:10 - is already in python
63:13 - it's a python file that is already
63:16 - brought in
63:16 - and when you download python a library
63:19 - i like to say library because that means
63:22 - that is a third party
63:24 - that you need to go out download it
63:26 - bring it put it on your computer
63:27 - and then you still import it the same
63:29 - way
63:30 - so here we go i didn't do anything
63:35 - actually let's look at
63:40 - i skipped this i don't like when i skip
63:42 - stuff anymore
63:43 - keywords let's look at
63:46 - import it's a lot
63:51 - important statement basic import
63:54 - statement
63:54 - find module loading initialize if
63:57 - necessary
63:59 - it's already brought in so
64:02 - what is let's get out of here do i have
64:07 - yep how do i know random still there
64:09 - because i ran an empty
64:11 - empty dirt command so now
64:14 - what what does random do
64:19 - random so here whoa
64:22 - very cool stuff
64:25 - randent we're not going to run help
64:28 - on all of random we're now going to run
64:31 - help
64:32 - on random dot
64:36 - brand int
64:40 - okay return we know what return means
64:42 - let me see
64:43 - am i still in feel myself getting lazy
64:46 - and not sitting up straight
64:48 - all right return we know what return
64:50 - means
64:51 - means it creates stuff creates random
64:53 - rand
64:54 - int creates random integer in range now
64:57 - here's
64:58 - something that is counter to everything
65:01 - we have talked about so far
65:03 - so this is why reading the documentation
65:05 - is so very important
65:10 - all right rand int works
65:15 - including both end points so this is
65:18 - inclusive so if i go
65:22 - for i in
65:26 - range 10
65:29 - close out print now
65:33 - it's going to go through 10 times so
65:34 - we're not going to do anything with i
65:36 - we're just going to
65:38 - print random dot rand int
65:41 - uh one through five
65:46 - and then close that out boom run this so
65:49 - ten times random
65:54 - was looked at rand ant was looked at
65:57 - and one through five was randomly choice
66:01 - chosen now we'll deal with this very
66:05 - soon
66:06 - how python randomly chooses things
66:10 - because uh there is no random
66:12 - functionality in computer science
66:14 - or pseudorandom now we can get
66:17 - more into depth but that's your little
66:20 - nugget for
66:21 - there is humans are the only people able
66:24 - to choose random and then there's
66:25 - actually proof that
66:27 - we don't actually pick random numbers
66:28 - either but
66:30 - for all intensive purposes these are
66:32 - randomly chosen numbers
66:34 - they're mathematically chosen
66:35 - pseudorandom
66:37 - so now that
66:40 - is how you pick numbers of
66:44 - a certain choice so but
66:47 - what we're going to do is we're going to
66:49 - take a list
66:51 - and we need to randomly mix it up
66:56 - shuffle what does shuffle do
67:00 - help random dot
67:04 - shuffle okay
67:07 - let's see make sure i haven't looked at
67:09 - this stream in a while all right we're
67:10 - still good
67:12 - okay all righty
67:15 - everybody good so far we still
67:20 - we still good with this all right
67:23 - cool so what this does is it takes
67:26 - a list x
67:30 - now this is super important
67:34 - in place this is this is
67:37 - really good documentation return so it
67:41 - it states both both both conditions
67:45 - it is in place and to be
67:49 - even more clear it says return
67:52 - none all right so it returns
67:56 - none it is in place that means
68:00 - if you are not creating a new variable
68:04 - you're going to lose the original data
68:06 - let's look at it
68:07 - so now i have
68:12 - let's see so if i come over here
68:17 - and i'm going to let's look numbers
68:22 - and you always don't forget we need to
68:24 - import
68:26 - import random
68:32 - okay let's see
68:36 - all right sorry i thought my phone was
68:38 - about to ring
68:40 - all right we let's put this in less
68:43 - comprehension we'll do it one more time
68:46 - for i
68:50 - nope for i in
68:53 - range 10.
68:57 - so we just did this over here now we're
68:59 - going to slap this
69:01 - inside a list comprehension and it's
69:03 - literally just this
69:07 - random.randint
69:09 - one through five and i close this out
69:13 - give me a little space run this
69:16 - numbers so now that number
69:22 - so now i have excuse me
69:28 - so now i have a list of how many was it
69:36 - i have a list of 10 so it doesn't assign
69:39 - like shuffled list no
69:43 - if if if i did that
69:46 - that works so very good question
69:50 - if uh no no i'm sorry no
69:53 - it returns none so that that that will
69:55 - not work so you would need to
69:57 - um you would then need to
70:01 - uh oh i can't see it in my head right
70:03 - now
70:04 - uh you would then need to make a uh
70:07 - copy because it return it returns none
70:12 - it just it just uh changes it
70:16 - all right and then we can talk about
70:18 - copy deep copy
70:20 - because copy has some odd uh
70:22 - functionality
70:24 - uh so all right and then you have deep
70:28 - copy because it's just uh and then i
70:31 - actually that's very good because then
70:34 - because then when you start to
70:36 - have your like and is
70:40 - uh and equal to so things will be equal
70:42 - to but it is not the same variable
70:44 - that's that's uh that's actually a
70:47 - really good thing for
70:48 - next week for us to talk about because
70:49 - that gets pretty nerdy pretty quick and
70:51 - that is
70:52 - so up so up my alley okay
70:56 - um so okay i digress so now we need to
70:58 - get a list
70:59 - of 1 through 25 right
71:03 - and it just needs to be and then we need
71:05 - to shuffle that
71:07 - and because there there's multiple steps
71:09 - to this so we need to get a list of 25
71:13 - then we need to shuffle it then we need
71:16 - to chop that up and
71:17 - spread that out sprinkle that over our
71:20 - 25
71:21 - other lists so let's just go ahead and
71:24 - do it
71:26 - so we don't need no
71:29 - i'll leave that there so you guys can
71:31 - see it yes don't ever
71:34 - don't ever delete any side note don't
71:36 - ever delete any of your code
71:38 - save it i hate that i had
71:42 - one or two computers crash before i
71:45 - really got halfway decent so it was
71:49 - but i would love to be able to go back
71:50 - and see what that looked like but
71:53 - save all of your code for a variety of
71:55 - reasons because then if you created
71:57 - something you didn't quite remember what
71:58 - you did
72:00 - just comment it out or save it or move
72:02 - it put it off
72:03 - especially if you have something working
72:06 - definitely save that because when you'll
72:07 - see when you the more the more you make
72:10 - complex things
72:11 - and you start going and tinking around
72:13 - with it
72:14 - especially only change one thing at a
72:16 - time
72:18 - that's we'll we'll delve into that uh
72:20 - very soon all right
72:21 - we need to get a list of 25 numbers
72:26 - uh doom boom close bracket
72:29 - i
72:33 - for i in range
72:38 - so i want 1 through 25 right
72:41 - so i go 1 through 26
72:46 - close that out
72:53 - so now i have
72:56 - um the numbers
72:59 - that i made with numbers yeah okay so
73:03 - step one i have my
73:06 - i have my numbers but now i need to
73:08 - shuffle it
73:11 - excuse me
73:15 - [Music]
73:16 - um
73:18 - i got my random so numbers
73:22 - dot shuffle and how do we use it
73:31 - just like this random shuffle
73:34 - now this is also very important and i
73:37 - just used it wrong
73:43 - random this is why you pull up the
73:45 - documentation
73:48 - because shuffle if i'd had done that i
73:50 - would have needed
73:51 - to have numbers
73:55 - for that to have worked shuffle needed
73:57 - to have been a method
74:00 - numbers and shuffle does not
74:03 - is not a method reverse is there sword
74:06 - is there
74:07 - but shuffle is not and the way that it
74:09 - works is
74:10 - random shuffle then you pass it it's
74:13 - iterable
74:14 - bingo random.shuffle iterable numbers
74:19 - so you're dropping it in to the blender
74:23 - and then calling it that's why that's
74:25 - why it returns none
74:28 - all right it goes in place and now we
74:32 - call this
74:32 - boom boom boom so now numbers it's all
74:36 - it's all in the blender so here we go
74:40 - so now i have a
74:44 - very shuffled
74:48 - list now now we're going to go through
74:53 - and grab one of these out
74:56 - and place it in our list one
75:00 - at a time so we're gonna go really slow
75:02 - since uh
75:03 - list comprehension can be very
75:05 - challenging
75:08 - we're going to come here and
75:12 - so what we're going to do is so we can
75:14 - run this over and over and over again
75:16 - and
75:16 - go step by step
75:21 - uh shuffled
75:24 - we're gonna use this list because if we
75:26 - were to run that code
75:28 - over and over and over again it
75:36 - seems
75:43 - and did i do that right bam okay
75:47 - so if i were to rerun this code every
75:49 - time our numbers would be changing and
75:52 - uh that always messed me up took me a
75:55 - little bit when i was learning
75:56 - why is that why is this happening so now
75:58 - we have our shuffled list so that is the
76:00 - way you get a shuffled list
76:02 - created not even having to think about
76:04 - it at at all
76:06 - anymore we got our completely random but
76:09 - now we want a list of lists all right
76:13 - so how can we do that we're going to do
76:16 - this
76:18 - uh really really slow
76:21 - and i think we can get started on the
76:24 - actual
76:25 - problem what's the exact time for the
76:27 - next week's
76:28 - class uh it'd be 10 a.m
76:33 - eastern so
76:36 - uh the 21st 10 a.m i've been meaning to
76:39 - get
76:40 - the wrap my head around what time utc
76:43 - time
76:46 - um so
76:49 - and you're my goodness so
76:53 - it'd be it'd be mid-afternoon but i will
76:56 - i will start
76:57 - getting get in the habit of uh
77:01 - okay oh well thank thank you
77:04 - my my local time 10 10 a.m
77:07 - eastern all right
77:11 - okay so let's go awesome
77:14 - okay um where are we
77:18 - okay so we need to create a list
77:21 - of five empty lists and we need to look
77:25 - at this right here
77:31 - we need to look at what pop does
77:35 - pop is a very cool and interesting
77:38 - method
77:42 - so it actually goes to one of the items
77:45 - in the list
77:47 - removes it
77:50 - oh let's just read okay so help
77:53 - how do we find out how do we find out
77:55 - what um
77:57 - how some of these methods work numbers
78:00 - dot
78:00 - pop
78:05 - and this is important so okay
78:09 - remove and return
78:13 - item at index
78:17 - the default so we need to we need to go
78:20 - we need to look at this what does this
78:23 - mean
78:25 - all right anybody got any clue
78:29 - default last
78:32 - so when we are looking at indexing
78:36 - indexing works the same on strings and
78:39 - on lists
78:39 - that's why i really like teaching those
78:42 - uh
78:43 - almost last item bing bingo negative one
78:46 - is the last item
78:49 - so
78:52 - numbers
78:56 - yeah we call this shuffled okay so
79:00 - here's an awesome okay i'm gonna be mean
79:03 - i'll bring this over so we're gonna do
79:05 - this twice and i'm gonna see how
79:08 - much i'm getting across so we just
79:10 - called numbers
79:12 - right here this is numbers so if i call
79:15 - negative one on numbers why isn't this
79:20 - typing
79:24 - i was halfway through the first
79:28 - uh drink and now i've taken two sips out
79:31 - of the second
79:32 - so i've since the stream started i've
79:35 - only had
79:36 - technically about a half a drink so
79:40 - about eight ounces
79:44 - but i did keep opening them a lot but no
79:46 - i've only had about a half a drink
79:49 - but i do drink a lot i do um like my
79:52 - kids make fun of me
79:54 - okay so if i go negative one
79:57 - oh my goodness okay numbers
80:02 - so numbers is right here so if i go
80:05 - negative 1
80:08 - what comes out for numbers
80:11 - here's here's numbers right here
80:15 - what comes out for numbers
80:20 - oh trust me i i i eat lots of uh
80:24 - carbohydrates and uh fruits and
80:26 - vegetables
80:28 - all right
80:32 - no i i love milk 18. bingo now
80:35 - all right everybody look over
80:39 - oh shoot i haven't made the list of
80:40 - lists yet i forgot all right
80:42 - so we need to make a list of five empty
80:46 - lists
80:50 - we'll just call this horses
80:55 - then boom and we'll move this down
81:01 - then boom boom
81:04 - boom boom how could we do and then
81:07 - we'll look at this in a minute or two
81:10 - how could we do this with list
81:11 - comprehension
81:12 - one two three four
81:17 - all right is that everything so now i
81:20 - have
81:23 - why is my keyboard acting up sorry guys
81:28 - okay one two three and then i check
81:31 - because my eyes are playing tricks on me
81:33 - horses okay i got five empty lists
81:39 - so hmm i need to go
81:43 - through now you could make this even
81:46 - more even more random
81:50 - but then you could actually undo some
81:52 - randomness but i will show you this
81:54 - i will show you one more uh
81:59 - instead of doing that let's just run dur
82:01 - on random
82:04 - this is very cool abcde
82:08 - choices choice and choices
82:11 - help random
82:15 - dot choice okay
82:21 - choose a random element from a non-empty
82:25 - sequence
82:26 - so i could literally not only i could go
82:29 - in order
82:31 - and have pop just grab this last item
82:34 - until the list is exhausted
82:37 - and just go here and as we come through
82:39 - but what will happen
82:40 - is this will go here this will go here
82:45 - this will go here here
82:48 - so we could technically accidentally
82:51 - know and we'll know the order
82:53 - so basically it would go
82:57 - so our list and i guess we could check
82:58 - it we could leave this this way where
83:00 - that
83:00 - so this column will be in this first
83:02 - list this column will be in the second
83:05 - list
83:06 - this column will be in the third and so
83:08 - on because as we go through
83:10 - we're gonna go for every five we're
83:12 - gonna fill up row one
83:13 - two so it's like counting off people one
83:15 - two three four five one two three four
83:17 - five as you're going through the room
83:18 - and you put
83:19 - all the ones over here all the twos over
83:21 - there so if you're paying attention
83:24 - you could actually know who's in which
83:27 - one and the
83:28 - and the and the people in groups could
83:30 - accidentally
83:31 - figure out who's in what group so you
83:35 - could
83:35 - actually then use choice
83:39 - to then go through and randomly choose
83:41 - so i'll leave that up to you for you
83:43 - guys to practice on your own and if
83:45 - that's a challenge we can look at that
83:48 - next week so all right so first we need
83:51 - to go through
83:52 - our shuffled list pop it out and look
83:56 - each time through so we need to
83:58 - we need to figure this out
84:02 - we need to look at it
84:07 - all right so first we got to wrap our
84:09 - head around
84:10 - how can we get to each list
84:13 - for i in
84:17 - horses print i
84:21 - okay so we're going to use a for loop
84:25 - to get to each of the lists
84:28 - that's what we're gonna do
84:32 - for race here here we go for race in
84:36 - horses
84:40 - print race all right
84:45 - because each of these each of these uh
84:50 - each of these brackets each of these
84:52 - lists is a race
84:53 - that's how i want you to think about it
84:55 - now they're not they haven't raced yet
84:57 - but we're gonna put them in their group
84:58 - for their race that's how i want you to
85:00 - think about this
85:01 - okay so there that that's the race right
85:03 - now so we don't need that
85:05 - but we know how we're gonna touch each
85:08 - each one
85:09 - and we know that we're gonna use pop
85:13 - help help list
85:17 - pop pop
85:21 - all right remove and return
85:24 - so it's going to go and grab and return
85:27 - it
85:28 - so it's creating something so i can then
85:30 - use this
85:34 - uh so then i'm going to go
85:38 - let's see where i am so each time
85:42 - through so
85:45 - but actually oh i'm gay i'm getting
85:48 - ahead of myself
85:50 - i was explaining that but we need to go
85:51 - through this list 25 times
85:54 - so this is actually let's see
85:57 - we need to go through here 25 times and
86:00 - grab
86:01 - out and then place it in there so i
86:04 - guess i haven't done this in a while
86:20 - there we go all right
86:24 - so for horse
86:29 - and shuffled there we go
86:34 - let's comment that out for a second
86:39 - print course
86:44 - here we are all right
86:48 - so for each time through here's here's
86:51 - our horse here's our horse
86:53 - number and actually we already know the
86:54 - speed that they that they are so we're
86:56 - already going to know
86:57 - we already know how fast they are we we
86:59 - want to test
87:01 - we are testing this scenario of
87:04 - how fast are these horses so we've i've
87:07 - seen this
87:07 - we've seen it jump up a little bit so if
87:09 - you're if you're just joining us today
87:11 - what we're doing is we're actually
87:12 - looking
87:13 - at a puzzle a interview question
87:17 - of how to find 25 horses
87:21 - um and how to find the the fastest three
87:24 - horses
87:24 - with and you don't have any timing
87:26 - material you don't have a stop watch
87:28 - you don't have any way to time them so
87:30 - what we're doing is we're gonna
87:32 - we the answer is
87:36 - the answer is uh and and also how
87:39 - fast can you do it and the answer is
87:42 - would i say seven
87:44 - we do five races sort the r uh then you
87:47 - race the
87:48 - last the fastest of those horses and you
87:51 - take the diagonal
87:52 - and you slice that out and then you have
87:54 - your and you sort that and you have your
87:56 - fastest
87:56 - so we have to take a list of 21 through
87:59 - 25
88:00 - we're going to shuffle those randomly
88:03 - then place
88:04 - each of those numbers in a list
88:07 - so let's just have at it so we got our
88:09 - we have our races
88:10 - we have this right here shoot
88:14 - so then what we have to do is then we
88:16 - have to go through
88:17 - and place each each
88:20 - horse in each
88:24 - one right here so as we go through
88:32 - so there we go all right
88:37 - let me check my notes because i already
88:38 - made one mistake with that
88:42 - there's our 25
88:46 - and we pop that out
88:54 - okay
88:58 - all right
89:06 - [Music]
89:08 - for
89:10 - j
89:14 - there we go for i in
89:23 - and horses
89:28 - because that's five so we're going to go
89:30 - through then for
89:33 - j in
89:38 - range five because we're going to do
89:39 - this five more times so actually
89:41 - let's look at this like this
89:44 - because i i was looking at my notes
89:46 - closer
89:48 - so if we think about it we got columns
89:50 - and rows
89:53 - i think i changed back to this because
89:55 - it got too complicated
89:56 - for everybody and then
90:00 - horses there we go
90:05 - because then we have to have the index
90:08 - of each one zero one two three
90:12 - four all right that was it that's why i
90:15 - dropped
90:15 - the other way i knew sorry guys oh god
90:19 - got ahead of myself
90:20 - i did not think we'd get to this but you
90:23 - guys were asking about
90:24 - lambda and this is a perfect landa and
90:27 - especially list comprehension
90:29 - so we can then then i'm going to show
90:31 - you how to do this
90:33 - all on one line and it will blow your
90:35 - mind
90:36 - so all right for j or this is the index
90:42 - then we're going to append to
90:47 - that list so i want you to think about
90:49 - this we're going to go through this
90:51 - five times then we're going to go
90:53 - through
90:54 - each of these five times that's what
90:57 - we're doing so we got
90:58 - 25 so 5 by 5 then we're going to pop
91:02 - out this now you could you could then
91:06 - you could rent but you don't want to use
91:08 - random choice because then it's going
91:10 - through but you
91:11 - you could but then you'd still have to
91:14 - delete it
91:16 - and then we'd have another issue we'll
91:18 - deal with that next time
91:19 - but all right uh we have our shuffled
91:23 - so i want to remind you what shuffle
91:25 - does
91:26 - shuffled what uh pop does
91:31 - shuffle dot pop
91:35 - all right so let's come over here before
91:36 - we run this so what does
91:39 - what does pop do shuffle dot pop
91:43 - help
91:46 - shuffled dot
91:49 - pop this is what i thought was
91:53 - so so very super cool
91:57 - so you actually get
92:00 - this it returns removes the last item
92:04 - bingo
92:05 - or nested loop much easier okay inside
92:08 - the horse loop if shuffled bingo
92:13 - so is it still till four equals shuffled
92:16 - pop
92:19 - uh yes but then you have to append so
92:22 - that's why we're using
92:24 - this right here so we're going to append
92:26 - this
92:27 - in this list so we randomly go here put
92:30 - that in there
92:31 - then the next time through here
92:34 - we're going to go because when we get
92:36 - down here we're going to go
92:38 - five times so this way five times
92:41 - and then this way five times so we go
92:43 - boom first time through
92:45 - here and then we're gonna come down this
92:48 - way
92:50 - boom boom boom boom and i didn't do
92:53 - horses
92:54 - there we go so first time through here
92:57 - is zero
92:58 - so zero one two three four
93:01 - and then because here did we put that in
93:05 - we need to look at this
93:08 - zero because they're empty lists right
93:11 - now
93:12 - two three four
93:16 - sometimes this can be
93:20 - i got so excited that we were getting to
93:22 - this already all right so horses
93:26 - horses not howarses all right
93:30 - so if i do if i do
93:34 - uh horses
93:37 - index uh three
93:41 - i should change this here
93:45 - that was silly zero
93:49 - they're in order so that's gonna uh
93:53 - one and then three all right so let's
93:56 - put this back in memory
93:58 - delete that
94:01 - put this back in memory all right
94:06 - horses okay so each of this
94:10 - horses index zero
94:14 - is two horses
94:18 - index three
94:22 - is zero one two three
94:25 - is one so each time through here
94:29 - i go through i could i should have said
94:31 - uh yeah i should have just said horses
94:34 - because that'd be five um but i think
94:36 - the last time i did this
94:38 - it really confused uh a lot so that's
94:41 - why i think i changed the notes
94:43 - so let's just run this and go through so
94:45 - then i call
94:46 - horses
94:49 - so boom then let's do for
94:52 - i in for race in
94:58 - horses
95:03 - print race
95:07 - okay there we go let's go through this
95:08 - one more time
95:12 - 25 five times five twenty-five so we
95:15 - wanna go through this
95:21 - sorry one of my dogs wants to come
95:23 - inside
95:24 - they have to stay outside because they
95:26 - are loud
95:28 - so all right let's see if we can how far
95:30 - we can get in the next uh
95:31 - 20 24 minutes all right
95:35 - so we got now now we need to figure out
95:39 - so we have we have our rate we have our
95:41 - races
95:42 - set we have not raced yet
95:45 - does anybody have any guesses how we are
95:48 - going to
95:51 - race these horses to get them in order
95:58 - any thoughts
96:02 - all right and i'm not even halfway yet
96:05 - so technically i've not even drank a
96:06 - whole drink today
96:08 - so i think i drank two last last stream
96:11 - all right so we have got to learn about
96:16 - how to sort
96:20 - sort a list so there is
96:25 - i think i saw somebody write some i see
96:28 - duplicate numbers
96:30 - do we
96:36 - really
96:40 - you sure
96:50 - okay
96:52 - oh inside the horse list
96:59 - uh ooh yes we do
97:04 - oh i did not remove these
97:08 - thank you great catch because there
97:12 - are six there so now let's run this
97:14 - again
97:18 - for race in
97:21 - horses
97:26 - print race there we go
97:29 - awesome catch very very good
97:33 - there we go so yes i left my uh
97:36 - that example sitting up there very good
97:39 - catch
97:39 - that's why i love having um
97:43 - interaction and uh these live streams so
97:47 - now is anybody got any guesses
97:51 - uh how to then run this race
97:54 - and get these in order
98:01 - okay very cool i will see you next week
98:04 - so let's look
98:05 - at uh horses
98:08 - we're gonna run dir on
98:14 - horses
98:20 - okay all right oh
98:24 - sort let's run help
98:28 - on horses
98:33 - uh apparently i need to pick another
98:38 - not help on horses help on
98:44 - horses dot sort
98:49 - so how does this work let's move this
98:51 - over just a little bit more
98:53 - all right so sort sort a list in
98:56 - ascending order return none
98:59 - super important so now this
99:01 - documentation left out
99:03 - in place but same same rule
99:06 - same everything ascending order
99:10 - or in place returns none
99:15 - so now i have a list of lists
99:18 - so horses a list of lists so lend
99:23 - on horses
99:27 - five okay so if i want to go
99:31 - through and race each race
99:34 - i then have to
99:39 - well first let's come over here and
99:42 - call this so this doesn't keep changing
99:45 - horses so now i'm going to
99:50 - comment this out and
99:56 - then i guess i can leave that
100:02 - horses equals
100:07 - grab these so now this sets in memory
100:10 - and
100:11 - let's see
100:15 - get this one here
100:18 - this one here this one here
100:22 - this one here so i have my lists of
100:25 - lists
100:26 - so now i want to go through and i need
100:29 - to see
100:30 - and sort each list
100:34 - so for race
100:37 - in horses
100:42 - race okay so how does this work
100:46 - so i take my list and i just run
100:50 - sort okay
100:53 - and it goes in ascending order
100:57 - and i could use a key but we're not
101:00 - going to deal with that right now
101:01 - oh did i still not get this scooted over
101:03 - enough
101:04 - okay okay it does say it down here i
101:07 - thought this one did
101:08 - sort the sort is in place all right
101:12 - so returns none is in place
101:15 - super important because we're just going
101:17 - to then
101:18 - run race dot sort
101:22 - that's it all right
101:25 - so i do this and then
101:30 - and then i got my horses
101:36 - then i go for race
101:39 - in horses
101:43 - print race should have done this over
101:46 - here
101:47 - okay so now now we're getting serious
101:52 - here
101:52 - so now we got these are in ascending
101:55 - order
101:56 - because we learned that sort
102:00 - goes in ascending order and if we wanted
102:02 - if we wanted to do it the other way if
102:03 - we wanted
102:04 - if we wanted it to be first the first
102:08 - place
102:08 - on the left and go go this way
102:12 - let's copy
102:17 - paste
102:20 - now let's look at this optional argument
102:22 - this is important
102:24 - reverse equals false so it is
102:28 - you have two ways to think about this
102:29 - default argument
102:31 - optional argument all right this is how
102:33 - i want you to think about this
102:35 - this is optional because it's already
102:36 - assigned and we actually have a cool
102:38 - puzzle we'll do
102:39 - uh later with a randomly generating
102:42 - a password handles all this very very
102:45 - cool
102:46 - multiple options all right so the way
102:48 - that this i don't i don't have to assign
102:52 - reverse because it already is assigned
102:54 - so it's defaulted
102:58 - uh two
103:01 - i could have sworn it said default in
103:03 - here so you have the reverse flag that's
103:06 - another way
103:07 - so it's sitting here but so if i want
103:09 - this and i want the first place at the
103:11 - beginning of the list and work through
103:13 - i do this equals
103:16 - so this is what it calls reverse is true
103:20 - it calls reverse from top back
103:23 - let's run this because actually you know
103:26 - what
103:35 - see that is that right yes
103:39 - so here we go so now what we need to do
103:42 - is we need to let's see if we can get
103:43 - this done in 16 minutes
103:45 - so now we need to have the last place
103:47 - excuse me
103:48 - the the first the first place horses
103:51 - race
103:52 - so then we can sort these in order
103:55 - right so let's get after that so now
103:58 - what we need to do
104:00 - is we're going to we're going to build a
104:02 - function
104:03 - and then then maybe we'll look at lambda
104:07 - oh uh who wanted to look at who was
104:10 - having a hard time with lambda
104:11 - are they still here are they gone
104:14 - i can't remember i know a couple people
104:17 - just left
104:20 - oh sorry i thought somebody pulled up
104:22 - okay
104:24 - all right everybody you're ready let's
104:26 - see am i still sitting
104:28 - all right so now what we need to do
104:33 - is we're going to create a function
104:34 - called last
104:38 - i think somebody just wrote something
104:41 - okay
104:42 - we're going to do it with a with a
104:45 - defined function
104:46 - and then what we'll do is then we'll do
104:48 - it with lambda
104:50 - because i think if i do it this way it
104:53 - might cement lambda for you
104:56 - all right
105:00 - but if you are just joining us today
105:03 - right now
105:04 - i'm sam with python basics and we are
105:06 - working
105:07 - on the beginning the basics of python
105:10 - and what we're doing right now is we're
105:12 - working on a puzzle
105:13 - of how to find the fastest three horses
105:18 - in a 25 group of horses without a
105:22 - stopwatch
105:23 - or any timing material so return
105:27 - x negative one
105:31 - negative one so this took me
105:34 - a minute to wrap my head around but what
105:37 - we're doing
105:38 - is we're gonna we're gonna use another
105:40 - function that
105:42 - is perfect for this because
105:47 - um you also have sorry
105:52 - you can do this with sort but i want to
105:53 - introduce you to sorted
105:55 - help it's another awesome we got sorted
106:01 - okay so it is a built-in function
106:06 - that takes an iterable return a new list
106:12 - of in ascending order so the same thing
106:16 - right here and it takes a key
106:22 - so reverse is defaulted
106:26 - to false and key is defaulted to none
106:30 - so we're going to get rid of this
106:32 - because right now
106:34 - this sort that's why i remember we don't
106:37 - do this
106:39 - sorry because if you sort these lists
106:44 - it will look at the first item that's
106:46 - why i had it in
106:47 - the other order now i remember so that's
106:49 - why we have to use list
106:50 - so let's bring this in and so we have
106:53 - this
106:54 - because the default is is python will
106:57 - look at the first
106:59 - like if you sort a list of if you give
107:01 - it a list of letters
107:03 - if you give sorted a list of letters it
107:05 - will sort
107:06 - by the first letter and if you give it a
107:10 - list of lists
107:10 - it'll sort by the first number but we
107:14 - want to make this challenging and we
107:15 - want to learn
107:16 - and you typically read left to right and
107:19 - but some in our audience
107:21 - go right to left i believe there are
107:24 - uh um
107:27 - trying to think of some of the languages
107:28 - that go uh left to right
107:33 - but it is eluding me right now but we're
107:36 - going to utilize this because it is a
107:38 - awesome practice
107:39 - for our python skills so now we need to
107:42 - sort
107:43 - our list so we need to figure out a way
107:46 - to get 25
107:47 - it is arabic okay i thought so but i did
107:50 - not
107:50 - want to embarrass myself um
107:54 - we want to get 25 up here that that list
107:59 - and japanese i did not know that
108:02 - okay japanese is in reverse well that's
108:04 - very cool
108:06 - um
108:11 - okay not japanese
108:14 - okay well that's still very cool
108:20 - okay all right so we need this list at
108:23 - the top we need this list second
108:25 - and we need this list third excuse me
108:28 - this list third
108:29 - fourth and fifth all right so does
108:31 - everybody see what we need to do we need
108:34 - to sort
108:35 - these lists by this last item
108:39 - and we're going to utilize our
108:43 - function right here that we just created
108:46 - and we want to say we are returning we
108:49 - are saying
108:50 - i want you to our key i want you to
108:53 - sort this by this by the list that i'm
108:57 - going to pass you
108:58 - by the last item and the way that python
109:01 - goes it goes
109:02 - all right so cool you have you're going
109:05 - to give me a list
109:07 - and then you're going to you're going to
109:10 - you're going to tell me the rules you're
109:12 - going to i'm going to use this key and
109:13 - then i'm gonna sort these
109:15 - so let's jump into it
109:20 - but if you're just joining us today um
109:23 - thank you for doing that we're running
109:24 - through the basics right now and we're
109:26 - solving a very very cool puzzle if i can
109:27 - find
109:28 - the right notes on this all right so
109:31 - let's go back to
109:32 - horses so we can reassign this horses
109:36 - then i'm going to pass sorted
109:39 - then i'm going to pass it horses
109:42 - because this is it i guess technically i
109:45 - could give another variable
109:47 - um okay let's do that new
109:51 - new horses sorted sordid horses
109:55 - key
110:02 - horses horses
110:06 - key then last
110:10 - and you do not use parentheses because
110:12 - the way
110:14 - all right we have not talked about this
110:16 - yet
110:18 - all right so you use last
110:22 - you pass it in information but when you
110:25 - just
110:26 - use this you're telling
110:30 - python goes oh i know what that is it is
110:33 - it is a function it's called last
110:36 - and it lives here in memory that is
110:38 - actually the memory address right there
110:40 - and we'll we'll delve into that stuff
110:42 - later but this is that's memory
110:44 - so when you're using this you're not
110:47 - passing in information you're telling
110:49 - python
110:50 - what to use there's one thing else we're
110:52 - leaving out
110:53 - and but uh so prince
110:57 - for race yeah i want to
111:01 - we're going to copy this i know i told
111:03 - you i don't like copying
111:04 - but we're not changing anything so we're
111:06 - going to print it unsorted then we're
111:08 - going to print it
111:09 - sorted and we're going to change one
111:11 - thing
111:12 - let's do a print
111:16 - so we can see the split
111:20 - all right so
111:24 - oop let's see what i did wrong what did
111:27 - i leave out
111:29 - sorted aha
111:36 - uh sorted i think i forgot something
111:39 - that's super important
111:43 - anybody got any guesses so what i did
111:49 - uh okay
111:58 - last is this reverse
112:04 - true all right
112:11 - oh my word
112:15 - well this is very frustrating and very
112:18 - anti-climactic
112:19 - because i am missing
112:22 - what i am missing
112:25 - so i'm going to have to only 10 minutes
112:27 - left i don't think
112:28 - will make it yeah uh that's probably
112:32 - ah shoot because i i guess i have not
112:36 - looked at this
112:37 - in a while but um so the way that lambda
112:41 - would work is it would go in here and i
112:42 - would not have a function
112:44 - oh i hate this and i don't want to start
112:45 - anything new
112:47 - oh bo i'm very sorry uh
112:50 - i i am at a loss right now because
112:58 - oh well that's embarrassing
113:04 - here we go okay so what did
113:08 - this is why knowing your variables is so
113:10 - very important
113:12 - so we we are we are good so
113:16 - let's get rid of this i rushed to that
113:18 - because for some reason i thought that
113:20 - was it
113:21 - so what happened here was because
113:24 - i mean you really want to put the first
113:26 - place race down here at the bottom
113:29 - no so sorted has
113:32 - a key and a reverse
113:36 - false so we turn this on because reverse
113:39 - it goes in
113:40 - ascending and we're going by the last
113:43 - place so first second
113:46 - third but then we flipped it we turn
113:48 - reverse on
113:53 - true so that was why so now it is going
113:57 - descending higher number because
114:00 - our fastest horse 25
114:05 - is right here so the fastest horse
114:08 - will always be here but
114:12 - as you can see we got we lucked up i
114:14 - think in my example
114:16 - yes so we had
114:20 - we had uh i think i've had several
114:23 - where we could have i don't think i've
114:27 - ever run this sequence and that's what's
114:28 - so cool you could run this
114:30 - and run this a ton of times because one
114:32 - of the actual very cool exercises that i
114:35 - love
114:35 - showing is the monty hall experiment
114:39 - of the game the game show monty hall
114:42 - and you have three doors
114:45 - and you have one of them removed
114:49 - and you then have to guess excuse me you
114:52 - didn't have the choice of you're going
114:53 - to keep your door
114:54 - or change and it's a very interesting
114:58 - math problem
114:59 - but the reason why this works is the
115:02 - randomness
115:03 - you have this one this one and
115:06 - this one and always your fastest horse
115:09 - will end up here
115:11 - but you could get them all the way out
115:14 - to here
115:14 - 23 24 and 25 and then have these
115:17 - different sorted
115:18 - so maybe starting off at the end
115:22 - of well actually we could then
115:27 - slice this so how could we do this we
115:29 - got we got four minutes
115:30 - let's do it we got we still got we still
115:34 - got quite a few people here we got four
115:35 - minutes
115:36 - let's get after it so my new
115:39 - what we call it new horses
115:43 - new horses
115:47 - uh boom so then i need
115:50 - i need uh
115:53 - i need these three these two
115:56 - and this one so how in the world can we
116:00 - do this
116:02 - so i need new
116:06 - horses
116:09 - so what would that be zero one two
116:13 - two to the end
116:16 - oops horses
116:27 - ooh what i do so it's new
116:30 - horses the first one
116:35 - zero then two
116:38 - to the end helps if
116:41 - you get your variables right aha
116:44 - so my last three there we go
116:47 - then i need then the last two of the
116:50 - second one
116:52 - all right you got me so the last two of
116:55 - the second one so index one
116:57 - list two the last two so that's three
117:01 - going forward so 20 and 24 and then i
117:05 - need
117:05 - the last item the last
117:09 - item of our third list
117:12 - so the last item of our third list it's
117:15 - the third list index two
117:17 - and then the last item just negative
117:20 - one boom
117:24 - and okay so beginning next week we will
117:26 - pick up
117:27 - here but you we we we can
117:30 - we can add these together and put these
117:32 - together and it's very very simple but
117:34 - we've done
117:35 - a tremendous amount of all this heavy
117:38 - lifting
117:39 - so i just want to say thank you guys so
117:42 - much
117:43 - for for participating and uh watching
117:46 - our second
117:47 - stream and for those of you if you're
117:49 - just joining us i'm sam with python
117:51 - basics
117:52 - and we are doing two hour streams on
117:54 - tuesday
117:56 - uh for the foreseeable future and
117:59 - uh all of the videos that we are doing
118:02 - uh have been covered well thank you so
118:04 - much
118:05 - um well i really appreciate that
118:08 - um we are covering things that i've
118:10 - already gone over so if you
118:12 - uh want to get ahead and kind of be
118:14 - familiar with what we're going to talk
118:15 - about but we're going to keep going with
118:17 - lists
118:18 - i try to i try to also uh tie these in
118:22 - to puzzles and exercises because you
118:26 - really begin to get to see
118:28 - uh i show a lot and we work on a lot of
118:31 - a lot of
118:32 - different things so there we go had a
118:34 - really great stream today
118:36 - uh hope you guys enjoyed it i always get
118:39 - a lot out of it
118:40 - so as always guys thanks for watching
118:43 - and we'll pick up next week bye guys

Cleaned transcript:

well hey everybody this is sam with python basics and uh glad to have everybody back today um it is tuesday and we are just going to pick back up where we left off so if you're new here thanks for joining us i'm sam from python basics and i'm doing a series uh with free code camp and we are starting from the beginning as we know nothing about python well hey there hey everybody um so a little bit of a recap and an adjustment to some things that we looked at last tuesday so we had our first stream last tuesday it was a two hour stream and until further notice we will do two hour streams every tuesday starting from the beginning and going forward so i have a youtube channel and i started doing uh some recap beginner streams um two months ago and we are just revisiting excuse me we are just revisiting the first hundred videos so what we did last week was we learned about uh conditions we learned about functions we learned about builtin functions we learned out how to build our own functions so what we're going to look at first is we're going to revisit our positive negative clean that up a little bit make that even more pythonic and then we're going to learn how to wrap that in a function so let's just go ahead and jump into it and then we're going to look at some string formatting how to really clean up our print and to delve into it so let's get at it so we were right here last time and so we were testing for a number if it was positive or negative well there's a there's a there's a trick to that it's actually three conditions it's either zero or then it's either positive or negative and the way that we handled that is we took an if an elif and an else i want to show you another way and the way that i like to do things is i build i build on it then maybe show the best practice so we take a step back and then we go forward and forward and forward to really get the best way to do it but i like to then really have it really cleaned up so it's either positive or negative one side or zero so let's clean this up else so it's either right in the middle zero or then it's one of the other two so we can go if number greater than zero print let's make a capital positive all right then we have an else then we just have if neg negative all right now you might say what's the difference well we're going to build upon this but this is this is best practice because you then clean this up and if you have any condition especially when we start doing maybe bisectional search or um binary binary like binary tree it just helps you understand that you come down and you split and you split and you split and you split so unless you have three true options fine you have your if your lf and your else but it's r it's really not you have two choices then you split off and then you have two more so now we have this this is great but what happens if we have we need this in a function so i'm going to show you this because we want to use yes right now it's it's usable it's repeatable but it is in a script let's just make this a function so let's look in this so you can indent an entire region so you come up here boom so then i'm going to take this and i'm going to wrap this in a function i don't know why i keep hitting e again i apologize everybody um let's see what was i thinking so then pause neg and then i take x so we need to clean this up just a touch and i can't remember what numbers did we use we add them we add them up here let's cut this and bring this down here so i was thinking about this as i was setting up this morning i did not even put this code on my github but at the end of today i i have other code on there uh all the code that i have in all my videos but i'm gonna have another section that just has the code and the examples from free code camp so i just want to let you guys know that uh today going forward after we get done today this will be back up uh all this will be on and we'll just add to it as the weeks go by so okay so here we are so now we can call this oops what cardinal sin did i forget i forgot my colon so there we are so now i have my function in memory and i pass it a number and then i get oops so i already have this going through my function up here but let's say let's say that i wanted to do this and let's bring this back one the indent so now now i have this nice clean function so now i want to go through my list got a little bit ahead of myself sorry guys so for number in numbers then i'm going to now i have this already printing so i don't need a print statement i'm just going to call my function pause neg then i'm going to pass it let's go half measures print number so to remind you i have here's my list my iterable we're going to do a lot with lists today we're going to do we're going to look at how to increment a variable increment decrement while loop and some things with lists and a little bit more and we're really going to look at list comprehension what that is so if you're just jumping in those are some of the things that we're going to be uh attacking and if you are just getting here i saw quite a few more people jump in i'm sam with python basics thanks for joining us today we are building uh upon the basics of python from the beginning so i get all these numbers printed out so now let's just comment that i know how to go through my list now i want to call the function on each iter in my iterable so this is my container this is my iterable i'm iterating through it here's my temporary intermediary variable so numbers is this list i'm going to iterate through it until this is exhausted until each item is exhausted and then we're going to look at a different type of loop so then i just call my function and i put number boom and then i get positive negative positive negative 0 positive negative positive boom that is one of the cleanest ways to do this so we don't have to go down here and call a call our function and pass it a variable this is nice best clean practices so here we go all right so next so now i want to look back at let's do this comment this out now i want to look back at our loop that we have right here that we used let's copy this bring this down here so what we did here is we we went through and we made this we got five row we got five columns five rows and the way that python goes is it goes row by row by row by row you see whatever so you see where i'm going with this but one of the best practices that i really like to show people and really get them to think about is i like to build a number triangle so let's see if i have this ready to run shoot because i want to show you i don't want to show you the code yet uh triangle where is it okay there we go i hoped it would it would open over here so let me show you this it's gonna run aha so this is what i want to show you and i want you to think about this how because this is a great exercise for beginners of how to go through and get 10 1 two ten rows and have it increase as we go so same principle over here but we have to have a lot more control over how things flow says have anybody have any guesses of how we might do this all right let me click over to the comments all right so same nested loop setup let's get rid of this right here all right so the way that we're going to do this so we're going to get our base going so we need we need 10 we need 10 rows so for row in range so i need 10 and why did that fail all right print row okay i got 10 but it's wrong so i need 1 through 10 not 0 through nine so first problem we have to solve is we need to go one through eleven because to remind everybody inclusive exclusive all right so first problem solved we have when we go row by row so now what i need to do is i need to figure out how in the world am i going to get my columns all right so this is where these variables become very very very important so what is so awesome and i love teaching new people and especially young people how in the world to handle um repeatability and think about the set of instructions of how can i draw it how can i think about it because i love the example it was actually something that i learned giving the example i think it was monsters and flowers uh i was working with um some kids so you step in you go straight you turn you go down four turn all the way around go back up four and then you're literally back in the same position so then you repeat that so you figured you want to figure out the set of instructions that then you can do an error that said i was disconnected all right am i back everybody am i back okay because i just got a disconnection okay sorry about that i don't know how long i was down i apologize my internet has been acting up of course i did the famous okay we are back okay thanks bo sorry about that all right okay so we need to get going on our all right that looks a lot better okay so we're gonna we got our column and then we're gonna look so we know have have the numbers so now we need to move across so column in range now how can we make this repeatable so we know that the first time through row is one so the first time through i just need one number then the second time through i need two numbers the third time through i need three numbers so what do we have that is already counting for us by a certain set of numbers first time through one number second time through two numbers third time through three numbers so this way is the one of the easiest ways so we're just going to just going to steal range excuse me row we already have row doing all this incrementation for us we don't have to we don't have to reinvent the wheel we're going to borrow row all right now this isn't quite right so print now what did we learn last time we're going to print column then we're going to suppress the and then what we'll find out here is that this is a little wrong okay now uh oh let's see where am i let's see okay so we're getting we're getting close and actually i forgot this is a little different there we go so that's going to the end but what do i need right here so i'm starting at zero but i don't my my original example is i didn't want i didn't want zero i wanted to start at one but where's row starting it goes here so i need to change this just a touch my start stop now i want to show you let's get rid of this all right all right so i just gave a return and i emptied this right here and i got my last number disappeared so let me show you what this is so the last time row and this was one of the cool things that i remember so these variables are sitting there so i run dur and i have my column and my row variables so my row variable i can always see what the last call through a for loop is i remember the first time i saw that it like freaked me out and i was like well it started to really wrap my head around what was going on so the last variable call for column last variable assignment for column is 9 and the last variable assignment for row is 10. so let's be the most correct and assign one to row because row is 0 1 2 3 4 5 6 7 8 9 10 and i want 10 to come out so i need to add 1 to beco make 10 be increme inclusive and included now this is where it gets very challenging that what happens if i go up to let's say 14. oh yuck we can see that this begins to taper off and that's that's not pretty that's not pretty at all so we are going to learn about a new tool called how to uh string formatting so we're going to actually use a placeholder and we'll look at it in just a second and then as we're going to assign how much space do i want for that i want to allocate for that placeholder so bingo row plus one all right sorry i was clicking over between okay all right so we need to change this right here we're gonna go boom curly brackets dot format just like that and then i close it now this doesn't do anything oops oop my bad let's see where i am and there sorry okay so i have my placeholder but i'm not really doing anything quite yet so right now this is how this is how you use a placeholder and we're going to look at this with an example of uh in a in a sentence here in a little bit we're going to then look at our hello function and build on that so what i'm doing right here is i'm telling python that i have a placeholder and i want this to be the size of three and then this is the variable that i want to go into this placeholder so let's save and run this boom just like this and of course then you can change it to two of course it'll be a little little crowded here at the end so three is best for right now so you have a buffer so you can read this so this is one perfect example of how you use a very clean placeholder using string format so you put this string that you want inside inside your quotations and i'll show you we'll do the hello function again and we'll and we'll neaten this up dot format passing in this so there we go awesome let's see any uh good question okay so now now let's look at how in the world could we utilize this who am i doing are we doing uh no we'll do input in a second yep that's what we're going to do alrighty so comment that out so we had our function right up here about taking in hello we're saying and hello this out there we go boom all right good we're still green so this got it done but boy that's ugly because then you know sam hello sam but then what happens if i say i wanted this to be a little bit more complex hello sam i gotta give it a space nice to meet you i remember when i learned this i thought this was so cool but man that's ugly so let's copy this put it down here comment that out please now let's use i got too many spaces if you're just joining us i'm sam with python basics and we are doing live streams we can throw in name and then i got my print and i do this just to check boom and then i do sam we are doing live streams for basic beginners the beginning of python because i know it is summer time and everybody is getting ready for school especially being at home these times and fall is coming up and school will be starting up school year and we are going to be doing a intro and introduction to python going from the beginning and going two hours every tuesday so thanks for joining us today so this is the very nice clean string format of how you get your placeholder and then later we can even get fancy when you have multiple placeholders you can actually assign the order of variables you want so instead of having to reorganize your list you can go oh well that one's supposed to be there so you just go and you change the the location so there we go all right you can do that with an f string i was going to build on that and build to it sometimes the f string can be a little overwhelming so i like to show this first and i'll make sure i have some f string notes uh next week but yes you prefer f string awesome some people get it what i've found some people get f string some people need to see this first so i um i like to show this first and then show f string but yes par f string is the preferred because then you don't even have to do anything but i want people to kind of know where this came from and for it's i guess i also like to uh it's like learn it's like learning your multiplication tables learn those first then you learn how to use a calculator but awesome f string is cleaner and even shorter absolutely that's true so you have options or so if you're going along uh and you see and you see this you're like what it what is this because you're gonna run across code and you're gonna get to the point where you're just reading reading documentation and especially if it's older code um and it's it has this and you're like what is this i just think it is a that's cool well i appreciate that guys um i want you to know where it comes from but no in the in the iteration and there's actually even an older placeholder where you would have you would do the modulo sign and an s and f so for string um uh float or digit and that was that was annoying but i i like to show this now because it's clean and i've found that for newer people excuse me it's easier to wrap our head around and then we can go from there well i appreciate that that you are guys there is a a lot there it's over almost three and a half years worth of uh videos out there um and over 740 i think so all right we need to get going sorry sorry for distracting and getting off topic but i i could talk about this for hours as i'm sure you guys have already have already noticed okay let me see where we are with our notes all right we're to the point now that now we need to look at how to handle assignment reassignment increment increment and decrement all right we're to that point because we're going to start learning more with um with the input so like i said before python does everything on the right side right side and then links or assigns it to the variable this took me forever to get i was like this can't work it's your you have itself you have itself you have itself shoot i'm getting ahead of myself all right so we assigned 0 to i we did it by using the equal sign linking that information in memory python goes ooh i know this i'm going to go to memory i'm going to see and i'm going to spit out 0. now i go here and you see this and i call i and it's one how in the world is this one it was just zero and now you have this thing on here and you're telling me that this does not throw up nope doesn't throw up because again python goes into memory it says aha i know what you're talking about this you assign 0 to this so now python doesn't see i it sees zero and you want to add one to zero then you assigned it so now okay you seem to know what you're talking about you called a variable that i've heard of and now it is one is currently assigned to that variable the i'm gonna put it out on the screen and so now then what happened is oops i apologize guys so then python the the core core developers go let's let's uh let's juice this up a little bit because they were probably i like it because i'm lazy so i don't want to type all those characters i did not want to type i over and over and over again so now i'm going to increment by 1. so now when i so last time i was 1 and now i is two i'm incrementing by one and this works for every math operator in python all right jan quick what is i now if i press i what will come out on the screen i don't know what the lag is i don't know i don't want to bore you guys too much but it is now back to one bingo because it it decremented now decrement and then this also works for multiplication and division it works for all all math operators awesome so yep you guys are correct i really do love this interaction because it makes it a lot easier maybe at some point we could figure out how to all be uh or a few of us be on a uh voice call because that would be very cool for the interaction all right so now now what we're going to do is we're going to do some math we're going to work with our input we're going to use our input do some math but there's going to be a problem and we're gonna have to learn how to handle this so we have let's see increment ah we need to touch on well we can we can do this one of two ways let's let's look at because we're going to look at counting down so we're going to use a while loop and then we need to take in input so we're talking about numbers right now let's go ahead and take this in so i have my number and we know how to take an input from the user enter a number and we give it a little space so it looks nice and pretty enter a number i'm going to give it five now let me click back over to our chat window if you press i twice would it if i press i twice okay let's go over that for a second so if i if i then call i again no now what we're gonna look at well hey there hey guys um i see a couple more folks have joined us we are we are working with incrementing and decrementing right now but if i'm just calling the variable now if i called this okay if i called this over and over and over again which we're going to look at in a while loop so let's okay let's see how many times we do this so i just it was one and i just ran it two more times what would it be jan i know you were typing uh so if i just ran if i decremented i twice by one what would i be right now negative one negative 1 and we're going to look at this in in a while loop so let's deal with this and then we'll kind of wrap our head around this a little bit more so now bingo negative 1. all right so we just called we just took this in and number five okay that is a five but i want you to look right here what do we know about that any thoughts but if we're not sure we have this handy dandy function built in for us that handles everything it's a string what is a string it's not an integer or a float so can i do any math operation can i do any math operation on a string cleanly technically we can get around it but i don't want to talk about that function can i do can i do this bingo i cannot do that you have to convert it bingo jan how how can i do that so i'm going to come back over here so i have number so input enter number all right fantastic all right so for anybody who is super new we can do this the long way we're going to show long way then i can now it didn't print type because when you wrap a string in a print it prints out pretty five and um there we go string and uh there we go let's see so we have we have this in the background hey um i want to ask you guys because i do not want to drive you guys nuts can you hear an alarm in the background just somebody tell me real fast if you can hear it's not going to bother me but i do not want it to drive you guys nuts can you hear a beeping in the background anybody if you can't great i can ignore it okay good awesome okay i do not i just don't want you guys to be on this stream wanting to kill yourself ah okay great okay let's keep going one of my kids forgot to turn their alarm off and they've already left for the day so i get to hear this for an hour and a half hopefully somebody will come home soon all right so we have a problem we cannot do so you cannot so python goes okay you have a string you can't concatenate see that that's my first so then if i go one so check this out so i put a string first so python goes okay now i'm gonna trust that you know what you're talking about so you're gonna try to concatenate one because i have a string and i'm using my addition operator and i'm trying to add one that says you can't connect concatenate but then when i give it an integer first and then give it my variable it says you cannot unsupported operand so i can't it has to be it has to be an int so i can take this the long way so i can go number int hint number that's that's long that's longhand enter number int or i remember the very cool first time i saw this i was like this is so cool so we did this with our range in our list i can literally just wrap perfect i can wrap an int function around my input function and this works this is completely legal and it's pythonic this is best practice and then i kick this out so now now what we're going to look at is we're going to take in a number and we're going to count down we're going to count down from that number whatever number we pass in and we're going to count down like a countdown sequence and then we're going to print blast off this was uh one of the very first early exercises and i love i love doing it because you have to be paying attention to the order of operation and anything that you want to have happen in your certain order so let's look at the while loop so what is the while loop key how do we get to our interactive help help keywords boom and let's give us some more space so we can clean this while so let's look at weil all right while statement is used for repeated execution as long as an expression is true super important we'll only operate if it's true just like our if and our elif the statement after has to be true in the header for the body to be executed so let's look at this so we are on line 378 everybody look right there everybody sees that line three seven eight so while true print hi all right we're on 378 right now we're on 380 ready okay come up here stop shell restart shell i'm on 740. so this just ran through a ton of stuff bam there it is and you're like okay so what does so influence can be achieved by yes an infinite loop with while true and what i want you to think about is i remember when i was really getting started and i got i got asked by a young man in in class that i was teaching and he said why not a for why why a while loop instead of a for loop so you can just know how many times to to do it well then i was sitting there thinking and again i was still at the beginning and i said okay well minutes before i learned anything about windows or running up high window or a tkinter window i said i want you to think about it your um your window your chrome is sitting there open it is running and the first thing it's doing is it's running a while true loop until you hit that x and then it closes everything down that is a perfect example of while so i'd like to do this countdown method with blast off and then we go from there so we have let's comment this out and we will go while while count we'll change this to count so be really on point count while count is greater than zero we're going to then print count now wait a minute let's think about this so if i pass a five right now it's just going to print count over and over and over again but i want i want to do something right so we're going to then take count then we're going to decrement it every time through by one now what we need to decide is we're gonna we're gonna make some mistakes here and then we're gonna fix this up so i'm going to go through here enter a number we're just gonna go 5. so four three two one zero hmm i didn't print out five but i've entered five so what should i do um where where should i put where should i put my decremented uh statement it's not working i didn't get five to print out on the front end so we're gonna move it down here so now i'm gonna get perfect after my print statement now what happens if we say ready then we start the count so i'm taking in my input i want to print out ready i don't know where i got oh i got ahead of myself ready then i start my then i start counting at five four three two one but now i don't have zero hmm but i want zero so how can i do that so now we got a set of i guess it depends on the use of what you want to get out of the number um all right so we need to think about this so if i want to include in zero so we need to think about so all right we got i got my ready and i solved my problem of aha i like that zero greater than or equal to zero fantastic five so now i have ready five four three two one zero okay then it exterminates what happens if i wanted something like blast off to happen where would i where would i put that so if i put it here it would happen every single time right so i go print blast off and i get a bunch of it's super cool and super exciting so i i want exclamation points so i get five and i get oh outside the while loop exactly so i come here and i hit my backspace one time so python takes care of that for you i move it out of my body so i have my header i have my body and then i move it outside the body so it will only happen one time perfect so then i get my five five ready five four three two one zero blast off boom i'm without the yup yup yup exactly you guys you guys are on it today very very good now now i want to look at lists so do i still have a list in memory and i comment everything out okay let's do while i'm doing this everybody in comments comment uh where you're from uh because i am very curious actually getting some stuff around because most of and if you're just joining us today i'm sam uh with python basics uh partnering with bo and free free code camp and um we are doing two hour streams every tuesday um with a granted it's the world's fastest countdown that is true that is very true um uh we are doing two hour streams and uh this is this is basic beginner stuff so if you are china also very cool because what i what blows me away is uh the audience on my youtube page is uh from all around the world uh i it is extremely humbling so we got china uh india that is very cool yes actually a majority the largest the largest percentage of my audience is uh is from india uh slovakia very cool that is so cool all right so let's we have let's put this in memory so we have a list a list is the very basic uh is a very basic container in python so we got and i call it numbers okay and if you forget you call your call your dir with no with no information and you get numbers so there we go oh awesome um okay now what do how can we find out things about a variable what are we the things associated and what are those things called so any anybody anybody got any thoughts all right so we got numbers and we run dur on numbers let's see so we're not gonna oh i apologize i was looking for the methods how do we so the the functionality of what we can do with a list and i was looking for methods um and i just want you guys to start thinking about that so we're gonna look at append and then we're gonna look at list uh list comprehension so right now what we're gonna look at is i want to take a um i want to take a list and we want to put it if it is in a positive list ooh that was a no no or a negative list so we're going to have an empty list and a we're going to have an empty positive list and an empty negative list let's see oops all right and sorry and so now what in the world so we know how to iterate through number in numbers and we go through and we're just gonna print out number boom okay but now we have i was talking about append so let's look at what a pen does and how do we do that we do help on numbers dot append what in the world does this do append object to the end of the list so if i have my pause over here which is an empty list and then i go pause dot append let's see pause dot append and i give it four now pause it has four and and negative 3 then negative has negative 3. so what could i do here take everything that we know and then i can go and go if number greater than zero if if num and numbers if num greater than zero boom that is perfect so then i go pause dot append and then i give it number so then if that's that what should else be what should else be if i can actually spell else today all right so then negative dot append number right so i run this i call pause if i can spell pause then i call neg so bam so now i have a way to do this okay when you're first learning this is fine this is perfect and in a week or two when we start getting into uh some upper level modules we're actually i'm going to actually then show you how list comprehension is faster so let's go ahead and jump into list comprehension so what is list comprehension list comprehension is a way all the instructions are actually inside the list let me just show you so we're just going to do a real clean and easy one um we'll trump numbers here and we'll go so the way that i like to explain this is we got 4 i in range 10 10. so start start with your header your your loop your for loop header now when you get more comfortable with this you'll get it let me click over here see if anybody anybody ever seen list comprehension before you probably have because you guys seem uh pretty knowledgeable already okay all right let's let's jump at it and then we just put i so that's the way it works the variable goes to the front so it's basically how do i want to do this and what are my okay and that's fine that's absolutely fine that's what we're all here for uh you're here to ask questions and learn and make me better and my job is to uh do this that i absolutely love so all right but you do this wrapped inside your your list brackets so now i run this and i call numbers i call it number or numbers numbers boom so i already have so this is that this is everything built built on one and you might say well why didn't we just wrap list around our range well because we are that that's the basic list that i awesome well then good i'm so excited that i get to be the one to show you guys this now now the way that this works is now we add our conditions so we're going to change this to positive pause equals now we go if we have no colons if i uh yeah we'll do this we'll keep it this way if i greater than zero all right sorry guys sometimes it hangs up and now i need to change that's what i was looking at my notes going that doesn't make any sense well it doesn't if you don't read the notes right sorry guys so all right so to revisit list comprehension and lambda functions are my awesome because we're actually going to be doing a lot with list comprehension and lambda i don't know if we'll get all the way through the lambda because what we're about to do very soon and we're going to start on is one of the questions that i ran across a couple of years ago uh let's say it's an inter it's probably not an interview question anymore because it is so widely known but here's the premise i'm going to give you you have 25 horses and you have to find the fastest horse oh and you don't have a stopwatch oh and you can only race five horses at a time how many races what is the shortest number of races that you can do to win to get the answer that's that's the question that we're going to be solving well actually proving so what the premise is is you have your 25 horses let's just jump into it and and we're going to build upon this so what the premise of this is is let me find the the list sorry i did not think we'd get there already so i'm super excited because you guys are really really smart and uh it is so super easy so all right it is super super cool so here we go so you have a list and so i was thinking about this and i go this is a perfect tutoring problem a perfect video so if you want to get ahead and we don't get to it you can go and watch it uh of course these are everything that we're doing here is on my uh youtube channel but it does not have these subtle nuances and especially during live chats we always get into more i will just tell you that right now uh i have the main topics but then we always wiggle off into uh something else that's why i absolutely love these live streams is because you get into deeper deeper it's kind of like audio books where you are talking about something and then you remember something else and then you go off onto a tangent so great if you read the book awesome you get the red the red the audio you always get a little bit more so that's why i love these live streams so okay all right so the premise of this is that the long the long term that we're going to be working on and we're going to we're going to use all our skills to do this and we especially need a uh we're going to we're going to look at lambda we're gonna do this two ways we're gonna use this with a sorted and a key function and then we can also use lambda but yes lambda you're exactly right lambda and list comprehension extremely similar they look they look extremely the same and i get it when i was first looking at this it just doesn't make any sense but we'll go through it enough times and you'll get it excuse me all right but the premise of the 25 uh horses and you can do it in is it is it six races six or seven we'll prove it and we'll go through so you break the horses up into into groups of five so you run five races you have those horses be in there and they're uh in the order that they won the race super simple you don't have to you don't have to do anything else then you have the horses that won those races race awesome it's seven it's seven so you have then those horses run their race so then now you have these in order of the of the of the speed that they have that they've won then you have the the first horse of each race race so then now you have anybody got any guesses a list of lists in order in which they go now i think i misspoke you will always know which horse is the fastest because it will always end up here and i designed this puzzle and to use numbers because it's 1 through 25 so they're going to order themselves in 1 through 25 right so but the kicker is is this will not necessarily always be the second fastest source what happens if you had the second fastest horse just randomly happen to be here so the way that you then have to slice this and then run one more race is we have to come here and get that horde it's this diagonal right here it's this horse this horse these two horses and these three horses always that you will get the top three horses and i even i think i expanded it to the top five that's i think it's actually these three are the top three always but the top five will always reside here i believe or you get the top three i can't remember exactly but we're going to slice this through we're going to create a list of lists then we're going to have these get ordered then have the lists be ordered by the last place and then we need to slice this right here to get the next one so let's just go into it we have one hour left i think we can get through all of this so we have a lot of work to do here so how in the world do we need to start any guesses so first we need to get a list full of lists and have have it chopped up so we're gonna need to learn about a couple of a couple of things here so we need to bring in we need to look at well i appreciate that uh so we looked at der uh on our on our numbers because then we need to bring in a function so we need to i think i'll go from because you're you're lost all right we're gonna go step by step by step so first step was we need to build a list of lists so this is what's so powerful about lists is it can contain anything it can even contain an item that's itself so let's just go ahead and look at this and we're gonna do this with list comprehension at first so um num num nums that's silly i'm sorry list numbers okay all right so here we go we're going to do this with this comprehension first actually to make this real clean let's do this with with a loop all right list numbers we're going to make a bracket empty list then for i in range three then list numbers dot append then i'm gonna insert a list of range one through six close this out so what am i doing i have a range one through six so it doesn't go to six it goes to five so then i have a list of one through five inserted inside a list three times okay and what'd i do and do to do to do one two okay why'd that fail everybody look at that let's do that again i ran this whenever you get this indention and the syntax thing it's the last little bit of code that you wrote so i did that ah it gray to everybody see that gray out gray out gray out boom so now it runs and then i go list numbers ooh okay this looks different i have bingo missing parentheses so now i have a list because i see my brackets but then i have here so if i clean this up for i in list numbers print print i aha so i have a list of lists i have three lists inside of a list okay so now so i want now random i want randomly generated numbers inside my five lists so i could do this a couple of ways and since list comprehension can be a little challenging we're gonna do this both ways all right let's let's just jump into it so we need to learn about a uh have we imported have we imported anything yet i can't remember did we we imported mac we did import math did we import anything else did we look at random jan are you still here did we look at random last week i can't remember awesome okay random we haven't okay awesome so when you're wanting especially when we're doing this i do not and you should not want to type when when after we do this so when i've been sitting here typing this you're not going to do that anymore and we are not going to do don't remember import okay import import is a way to bring in another uh file and namely uh and i like to differentiate a module is a module that is already built in that is already in python it's a python file that is already brought in and when you download python a library i like to say library because that means that is a third party that you need to go out download it bring it put it on your computer and then you still import it the same way so here we go i didn't do anything actually let's look at i skipped this i don't like when i skip stuff anymore keywords let's look at import it's a lot important statement basic import statement find module loading initialize if necessary it's already brought in so what is let's get out of here do i have yep how do i know random still there because i ran an empty empty dirt command so now what what does random do random so here whoa very cool stuff randent we're not going to run help on all of random we're now going to run help on random dot brand int okay return we know what return means let me see am i still in feel myself getting lazy and not sitting up straight all right return we know what return means means it creates stuff creates random rand int creates random integer in range now here's something that is counter to everything we have talked about so far so this is why reading the documentation is so very important all right rand int works including both end points so this is inclusive so if i go for i in range 10 close out print now it's going to go through 10 times so we're not going to do anything with i we're just going to print random dot rand int uh one through five and then close that out boom run this so ten times random was looked at rand ant was looked at and one through five was randomly choice chosen now we'll deal with this very soon how python randomly chooses things because uh there is no random functionality in computer science or pseudorandom now we can get more into depth but that's your little nugget for there is humans are the only people able to choose random and then there's actually proof that we don't actually pick random numbers either but for all intensive purposes these are randomly chosen numbers they're mathematically chosen pseudorandom so now that is how you pick numbers of a certain choice so but what we're going to do is we're going to take a list and we need to randomly mix it up shuffle what does shuffle do help random dot shuffle okay let's see make sure i haven't looked at this stream in a while all right we're still good okay all righty everybody good so far we still we still good with this all right cool so what this does is it takes a list x now this is super important in place this is this is really good documentation return so it it states both both both conditions it is in place and to be even more clear it says return none all right so it returns none it is in place that means if you are not creating a new variable you're going to lose the original data let's look at it so now i have let's see so if i come over here and i'm going to let's look numbers and you always don't forget we need to import import random okay let's see all right sorry i thought my phone was about to ring all right we let's put this in less comprehension we'll do it one more time for i nope for i in range 10. so we just did this over here now we're going to slap this inside a list comprehension and it's literally just this random.randint one through five and i close this out give me a little space run this numbers so now that number so now i have excuse me so now i have a list of how many was it i have a list of 10 so it doesn't assign like shuffled list no if if if i did that that works so very good question if uh no no i'm sorry no it returns none so that that that will not work so you would need to um you would then need to uh oh i can't see it in my head right now uh you would then need to make a uh copy because it return it returns none it just it just uh changes it all right and then we can talk about copy deep copy because copy has some odd uh functionality uh so all right and then you have deep copy because it's just uh and then i actually that's very good because then because then when you start to have your like and is uh and equal to so things will be equal to but it is not the same variable that's that's uh that's actually a really good thing for next week for us to talk about because that gets pretty nerdy pretty quick and that is so up so up my alley okay um so okay i digress so now we need to get a list of 1 through 25 right and it just needs to be and then we need to shuffle that and because there there's multiple steps to this so we need to get a list of 25 then we need to shuffle it then we need to chop that up and spread that out sprinkle that over our 25 other lists so let's just go ahead and do it so we don't need no i'll leave that there so you guys can see it yes don't ever don't ever delete any side note don't ever delete any of your code save it i hate that i had one or two computers crash before i really got halfway decent so it was but i would love to be able to go back and see what that looked like but save all of your code for a variety of reasons because then if you created something you didn't quite remember what you did just comment it out or save it or move it put it off especially if you have something working definitely save that because when you'll see when you the more the more you make complex things and you start going and tinking around with it especially only change one thing at a time that's we'll we'll delve into that uh very soon all right we need to get a list of 25 numbers uh doom boom close bracket i for i in range so i want 1 through 25 right so i go 1 through 26 close that out so now i have um the numbers that i made with numbers yeah okay so step one i have my i have my numbers but now i need to shuffle it excuse me um i got my random so numbers dot shuffle and how do we use it just like this random shuffle now this is also very important and i just used it wrong random this is why you pull up the documentation because shuffle if i'd had done that i would have needed to have numbers for that to have worked shuffle needed to have been a method numbers and shuffle does not is not a method reverse is there sword is there but shuffle is not and the way that it works is random shuffle then you pass it it's iterable bingo random.shuffle iterable numbers so you're dropping it in to the blender and then calling it that's why that's why it returns none all right it goes in place and now we call this boom boom boom so now numbers it's all it's all in the blender so here we go so now i have a very shuffled list now now we're going to go through and grab one of these out and place it in our list one at a time so we're gonna go really slow since uh list comprehension can be very challenging we're going to come here and so what we're going to do is so we can run this over and over and over again and go step by step uh shuffled we're gonna use this list because if we were to run that code over and over and over again it seems and did i do that right bam okay so if i were to rerun this code every time our numbers would be changing and uh that always messed me up took me a little bit when i was learning why is that why is this happening so now we have our shuffled list so that is the way you get a shuffled list created not even having to think about it at at all anymore we got our completely random but now we want a list of lists all right so how can we do that we're going to do this uh really really slow and i think we can get started on the actual problem what's the exact time for the next week's class uh it'd be 10 a.m eastern so uh the 21st 10 a.m i've been meaning to get the wrap my head around what time utc time um so and you're my goodness so it'd be it'd be midafternoon but i will i will start getting get in the habit of uh okay oh well thank thank you my my local time 10 10 a.m eastern all right okay so let's go awesome okay um where are we okay so we need to create a list of five empty lists and we need to look at this right here we need to look at what pop does pop is a very cool and interesting method so it actually goes to one of the items in the list removes it oh let's just read okay so help how do we find out how do we find out what um how some of these methods work numbers dot pop and this is important so okay remove and return item at index the default so we need to we need to go we need to look at this what does this mean all right anybody got any clue default last so when we are looking at indexing indexing works the same on strings and on lists that's why i really like teaching those uh almost last item bing bingo negative one is the last item so numbers yeah we call this shuffled okay so here's an awesome okay i'm gonna be mean i'll bring this over so we're gonna do this twice and i'm gonna see how much i'm getting across so we just called numbers right here this is numbers so if i call negative one on numbers why isn't this typing i was halfway through the first uh drink and now i've taken two sips out of the second so i've since the stream started i've only had technically about a half a drink so about eight ounces but i did keep opening them a lot but no i've only had about a half a drink but i do drink a lot i do um like my kids make fun of me okay so if i go negative one oh my goodness okay numbers so numbers is right here so if i go negative 1 what comes out for numbers here's here's numbers right here what comes out for numbers oh trust me i i i eat lots of uh carbohydrates and uh fruits and vegetables all right no i i love milk 18. bingo now all right everybody look over oh shoot i haven't made the list of lists yet i forgot all right so we need to make a list of five empty lists we'll just call this horses then boom and we'll move this down then boom boom boom boom how could we do and then we'll look at this in a minute or two how could we do this with list comprehension one two three four all right is that everything so now i have why is my keyboard acting up sorry guys okay one two three and then i check because my eyes are playing tricks on me horses okay i got five empty lists so hmm i need to go through now you could make this even more even more random but then you could actually undo some randomness but i will show you this i will show you one more uh instead of doing that let's just run dur on random this is very cool abcde choices choice and choices help random dot choice okay choose a random element from a nonempty sequence so i could literally not only i could go in order and have pop just grab this last item until the list is exhausted and just go here and as we come through but what will happen is this will go here this will go here this will go here here so we could technically accidentally know and we'll know the order so basically it would go so our list and i guess we could check it we could leave this this way where that so this column will be in this first list this column will be in the second list this column will be in the third and so on because as we go through we're gonna go for every five we're gonna fill up row one two so it's like counting off people one two three four five one two three four five as you're going through the room and you put all the ones over here all the twos over there so if you're paying attention you could actually know who's in which one and the and the and the people in groups could accidentally figure out who's in what group so you could actually then use choice to then go through and randomly choose so i'll leave that up to you for you guys to practice on your own and if that's a challenge we can look at that next week so all right so first we need to go through our shuffled list pop it out and look each time through so we need to we need to figure this out we need to look at it all right so first we got to wrap our head around how can we get to each list for i in horses print i okay so we're going to use a for loop to get to each of the lists that's what we're gonna do for race here here we go for race in horses print race all right because each of these each of these uh each of these brackets each of these lists is a race that's how i want you to think about it now they're not they haven't raced yet but we're gonna put them in their group for their race that's how i want you to think about this okay so there that that's the race right now so we don't need that but we know how we're gonna touch each each one and we know that we're gonna use pop help help list pop pop all right remove and return so it's going to go and grab and return it so it's creating something so i can then use this uh so then i'm going to go let's see where i am so each time through so but actually oh i'm gay i'm getting ahead of myself i was explaining that but we need to go through this list 25 times so this is actually let's see we need to go through here 25 times and grab out and then place it in there so i guess i haven't done this in a while there we go all right so for horse and shuffled there we go let's comment that out for a second print course here we are all right so for each time through here's here's our horse here's our horse number and actually we already know the speed that they that they are so we're already going to know we already know how fast they are we we want to test we are testing this scenario of how fast are these horses so we've i've seen this we've seen it jump up a little bit so if you're if you're just joining us today what we're doing is we're actually looking at a puzzle a interview question of how to find 25 horses um and how to find the the fastest three horses with and you don't have any timing material you don't have a stop watch you don't have any way to time them so what we're doing is we're gonna we the answer is the answer is uh and and also how fast can you do it and the answer is would i say seven we do five races sort the r uh then you race the last the fastest of those horses and you take the diagonal and you slice that out and then you have your and you sort that and you have your fastest so we have to take a list of 21 through 25 we're going to shuffle those randomly then place each of those numbers in a list so let's just have at it so we got our we have our races we have this right here shoot so then what we have to do is then we have to go through and place each each horse in each one right here so as we go through so there we go all right let me check my notes because i already made one mistake with that there's our 25 and we pop that out okay all right for j there we go for i in and horses because that's five so we're going to go through then for j in range five because we're going to do this five more times so actually let's look at this like this because i i was looking at my notes closer so if we think about it we got columns and rows i think i changed back to this because it got too complicated for everybody and then horses there we go because then we have to have the index of each one zero one two three four all right that was it that's why i dropped the other way i knew sorry guys oh god got ahead of myself i did not think we'd get to this but you guys were asking about lambda and this is a perfect landa and especially list comprehension so we can then then i'm going to show you how to do this all on one line and it will blow your mind so all right for j or this is the index then we're going to append to that list so i want you to think about this we're going to go through this five times then we're going to go through each of these five times that's what we're doing so we got 25 so 5 by 5 then we're going to pop out this now you could you could then you could rent but you don't want to use random choice because then it's going through but you you could but then you'd still have to delete it and then we'd have another issue we'll deal with that next time but all right uh we have our shuffled so i want to remind you what shuffle does shuffled what uh pop does shuffle dot pop all right so let's come over here before we run this so what does what does pop do shuffle dot pop help shuffled dot pop this is what i thought was so so very super cool so you actually get this it returns removes the last item bingo or nested loop much easier okay inside the horse loop if shuffled bingo so is it still till four equals shuffled pop uh yes but then you have to append so that's why we're using this right here so we're going to append this in this list so we randomly go here put that in there then the next time through here we're going to go because when we get down here we're going to go five times so this way five times and then this way five times so we go boom first time through here and then we're gonna come down this way boom boom boom boom and i didn't do horses there we go so first time through here is zero so zero one two three four and then because here did we put that in we need to look at this zero because they're empty lists right now two three four sometimes this can be i got so excited that we were getting to this already all right so horses horses not howarses all right so if i do if i do uh horses index uh three i should change this here that was silly zero they're in order so that's gonna uh one and then three all right so let's put this back in memory delete that put this back in memory all right horses okay so each of this horses index zero is two horses index three is zero one two three is one so each time through here i go through i could i should have said uh yeah i should have just said horses because that'd be five um but i think the last time i did this it really confused uh a lot so that's why i think i changed the notes so let's just run this and go through so then i call horses so boom then let's do for i in for race in horses print race okay there we go let's go through this one more time 25 five times five twentyfive so we wanna go through this sorry one of my dogs wants to come inside they have to stay outside because they are loud so all right let's see if we can how far we can get in the next uh 20 24 minutes all right so we got now now we need to figure out so we have we have our rate we have our races set we have not raced yet does anybody have any guesses how we are going to race these horses to get them in order any thoughts all right and i'm not even halfway yet so technically i've not even drank a whole drink today so i think i drank two last last stream all right so we have got to learn about how to sort sort a list so there is i think i saw somebody write some i see duplicate numbers do we really you sure okay oh inside the horse list uh ooh yes we do oh i did not remove these thank you great catch because there are six there so now let's run this again for race in horses print race there we go awesome catch very very good there we go so yes i left my uh that example sitting up there very good catch that's why i love having um interaction and uh these live streams so now is anybody got any guesses uh how to then run this race and get these in order okay very cool i will see you next week so let's look at uh horses we're gonna run dir on horses okay all right oh sort let's run help on horses uh apparently i need to pick another not help on horses help on horses dot sort so how does this work let's move this over just a little bit more all right so sort sort a list in ascending order return none super important so now this documentation left out in place but same same rule same everything ascending order or in place returns none so now i have a list of lists so horses a list of lists so lend on horses five okay so if i want to go through and race each race i then have to well first let's come over here and call this so this doesn't keep changing horses so now i'm going to comment this out and then i guess i can leave that horses equals grab these so now this sets in memory and let's see get this one here this one here this one here this one here so i have my lists of lists so now i want to go through and i need to see and sort each list so for race in horses race okay so how does this work so i take my list and i just run sort okay and it goes in ascending order and i could use a key but we're not going to deal with that right now oh did i still not get this scooted over enough okay okay it does say it down here i thought this one did sort the sort is in place all right so returns none is in place super important because we're just going to then run race dot sort that's it all right so i do this and then and then i got my horses then i go for race in horses print race should have done this over here okay so now now we're getting serious here so now we got these are in ascending order because we learned that sort goes in ascending order and if we wanted if we wanted to do it the other way if we wanted if we wanted it to be first the first place on the left and go go this way let's copy paste now let's look at this optional argument this is important reverse equals false so it is you have two ways to think about this default argument optional argument all right this is how i want you to think about this this is optional because it's already assigned and we actually have a cool puzzle we'll do uh later with a randomly generating a password handles all this very very cool multiple options all right so the way that this i don't i don't have to assign reverse because it already is assigned so it's defaulted uh two i could have sworn it said default in here so you have the reverse flag that's another way so it's sitting here but so if i want this and i want the first place at the beginning of the list and work through i do this equals so this is what it calls reverse is true it calls reverse from top back let's run this because actually you know what see that is that right yes so here we go so now what we need to do is we need to let's see if we can get this done in 16 minutes so now we need to have the last place excuse me the the first the first place horses race so then we can sort these in order right so let's get after that so now what we need to do is we're going to we're going to build a function and then then maybe we'll look at lambda oh uh who wanted to look at who was having a hard time with lambda are they still here are they gone i can't remember i know a couple people just left oh sorry i thought somebody pulled up okay all right everybody you're ready let's see am i still sitting all right so now what we need to do is we're going to create a function called last i think somebody just wrote something okay we're going to do it with a with a defined function and then what we'll do is then we'll do it with lambda because i think if i do it this way it might cement lambda for you all right but if you are just joining us today right now i'm sam with python basics and we are working on the beginning the basics of python and what we're doing right now is we're working on a puzzle of how to find the fastest three horses in a 25 group of horses without a stopwatch or any timing material so return x negative one negative one so this took me a minute to wrap my head around but what we're doing is we're gonna we're gonna use another function that is perfect for this because um you also have sorry you can do this with sort but i want to introduce you to sorted help it's another awesome we got sorted okay so it is a builtin function that takes an iterable return a new list of in ascending order so the same thing right here and it takes a key so reverse is defaulted to false and key is defaulted to none so we're going to get rid of this because right now this sort that's why i remember we don't do this sorry because if you sort these lists it will look at the first item that's why i had it in the other order now i remember so that's why we have to use list so let's bring this in and so we have this because the default is is python will look at the first like if you sort a list of if you give it a list of letters if you give sorted a list of letters it will sort by the first letter and if you give it a list of lists it'll sort by the first number but we want to make this challenging and we want to learn and you typically read left to right and but some in our audience go right to left i believe there are uh um trying to think of some of the languages that go uh left to right but it is eluding me right now but we're going to utilize this because it is a awesome practice for our python skills so now we need to sort our list so we need to figure out a way to get 25 it is arabic okay i thought so but i did not want to embarrass myself um we want to get 25 up here that that list and japanese i did not know that okay japanese is in reverse well that's very cool um okay not japanese okay well that's still very cool okay all right so we need this list at the top we need this list second and we need this list third excuse me this list third fourth and fifth all right so does everybody see what we need to do we need to sort these lists by this last item and we're going to utilize our function right here that we just created and we want to say we are returning we are saying i want you to our key i want you to sort this by this by the list that i'm going to pass you by the last item and the way that python goes it goes all right so cool you have you're going to give me a list and then you're going to you're going to you're going to tell me the rules you're going to i'm going to use this key and then i'm gonna sort these so let's jump into it but if you're just joining us today um thank you for doing that we're running through the basics right now and we're solving a very very cool puzzle if i can find the right notes on this all right so let's go back to horses so we can reassign this horses then i'm going to pass sorted then i'm going to pass it horses because this is it i guess technically i could give another variable um okay let's do that new new horses sorted sordid horses key horses horses key then last and you do not use parentheses because the way all right we have not talked about this yet all right so you use last you pass it in information but when you just use this you're telling python goes oh i know what that is it is it is a function it's called last and it lives here in memory that is actually the memory address right there and we'll we'll delve into that stuff later but this is that's memory so when you're using this you're not passing in information you're telling python what to use there's one thing else we're leaving out and but uh so prince for race yeah i want to we're going to copy this i know i told you i don't like copying but we're not changing anything so we're going to print it unsorted then we're going to print it sorted and we're going to change one thing let's do a print so we can see the split all right so oop let's see what i did wrong what did i leave out sorted aha uh sorted i think i forgot something that's super important anybody got any guesses so what i did uh okay last is this reverse true all right oh my word well this is very frustrating and very anticlimactic because i am missing what i am missing so i'm going to have to only 10 minutes left i don't think will make it yeah uh that's probably ah shoot because i i guess i have not looked at this in a while but um so the way that lambda would work is it would go in here and i would not have a function oh i hate this and i don't want to start anything new oh bo i'm very sorry uh i i am at a loss right now because oh well that's embarrassing here we go okay so what did this is why knowing your variables is so very important so we we are we are good so let's get rid of this i rushed to that because for some reason i thought that was it so what happened here was because i mean you really want to put the first place race down here at the bottom no so sorted has a key and a reverse false so we turn this on because reverse it goes in ascending and we're going by the last place so first second third but then we flipped it we turn reverse on true so that was why so now it is going descending higher number because our fastest horse 25 is right here so the fastest horse will always be here but as you can see we got we lucked up i think in my example yes so we had we had uh i think i've had several where we could have i don't think i've ever run this sequence and that's what's so cool you could run this and run this a ton of times because one of the actual very cool exercises that i love showing is the monty hall experiment of the game the game show monty hall and you have three doors and you have one of them removed and you then have to guess excuse me you didn't have the choice of you're going to keep your door or change and it's a very interesting math problem but the reason why this works is the randomness you have this one this one and this one and always your fastest horse will end up here but you could get them all the way out to here 23 24 and 25 and then have these different sorted so maybe starting off at the end of well actually we could then slice this so how could we do this we got we got four minutes let's do it we got we still got we still got quite a few people here we got four minutes let's get after it so my new what we call it new horses new horses uh boom so then i need i need uh i need these three these two and this one so how in the world can we do this so i need new horses so what would that be zero one two two to the end oops horses ooh what i do so it's new horses the first one zero then two to the end helps if you get your variables right aha so my last three there we go then i need then the last two of the second one all right you got me so the last two of the second one so index one list two the last two so that's three going forward so 20 and 24 and then i need the last item the last item of our third list so the last item of our third list it's the third list index two and then the last item just negative one boom and okay so beginning next week we will pick up here but you we we we can we can add these together and put these together and it's very very simple but we've done a tremendous amount of all this heavy lifting so i just want to say thank you guys so much for for participating and uh watching our second stream and for those of you if you're just joining us i'm sam with python basics and we are doing two hour streams on tuesday uh for the foreseeable future and uh all of the videos that we are doing uh have been covered well thank you so much um well i really appreciate that um we are covering things that i've already gone over so if you uh want to get ahead and kind of be familiar with what we're going to talk about but we're going to keep going with lists i try to i try to also uh tie these in to puzzles and exercises because you really begin to get to see uh i show a lot and we work on a lot of a lot of different things so there we go had a really great stream today uh hope you guys enjoyed it i always get a lot out of it so as always guys thanks for watching and we'll pick up next week bye guys
