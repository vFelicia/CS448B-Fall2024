With timestamps:

00:00 - 3js can help you create amazing 3D
00:02 - effects and animations on your websites
00:05 - in this course Bobby row will teach you
00:07 - how to use 3js through building five
00:09 - different projects what's up coders
00:12 - today we're diving into the exciting
00:13 - world of 3js learn how to create insane
00:16 - 3D effects right in your web browser
00:18 - we'll cover Primitives materials
00:20 - textures camera paths post-processing
00:23 - physics and a lot more let's get started
00:26 - with some serious 3D
00:28 - action Bobby row here I'm a season code
00:31 - artist and software engineer with mad
00:33 - industry chops for 3js techniques
00:36 - effects codeart and more visit my
00:39 - YouTube channel robot Bobby today's
00:42 - tutorial is laid out as five Standalone
00:45 - projects so you can skip around if you
00:46 - want basic JavaScript knowledge is
00:48 - recommended now let's break it down
00:51 - getting started we'll explore primitive
00:53 - shapes lighting and animation very nice
00:56 - next create the Earth with 3js craft a
00:59 - beautiful multi-layered Earth using
01:01 - shaders textures and lighting epic then
01:05 - fly through a wireframe wormhole animate
01:08 - along a camera path insane create a
01:11 - transition effect a spectacular
01:13 - post-processing effect that's totally
01:15 - achievable awesome add physics with
01:19 - Rapier is the final project use this
01:21 - super fast stable physics engine works
01:24 - great with 3js ultra real since each
01:28 - project is standalone feel free to jump
01:31 - to what interests you let's
01:34 - go have you ever wondered how the hell
01:36 - you could make 3D graphics on the web
01:39 - 3js is a powerful library that
01:41 - transforms code into awesome visual
01:43 - experiences whether you're a seasoned
01:45 - coder or simply curious we'll start
01:47 - creating our own 3D scenes today since
01:50 - 2011 I've been creating interactive
01:52 - scenes and experimenting with 3js so are
01:54 - you ready to get to create some 3D
01:57 - Graphics let's go
02:00 - today we're going to get comfortable
02:01 - with the basics of
02:03 - 3js um first thing we're going to do is
02:08 - get Visual Studio code if you don't
02:09 - already have it this is the editor we'll
02:12 - be using today the next thing we're
02:15 - going to do is to download the starter
02:18 - template come over here uh the link is
02:21 - in the description of this video uh and
02:25 - make sure you're on the main
02:28 - branch down Lo the code I'm going to
02:31 - download the zip
02:33 - file
02:36 - and put it on my
02:40 - desktop there it is right
02:42 - there I'm going to unzip that and I'm
02:45 - just going to create a
02:46 - directory called
02:50 - threejs
02:52 - sketches so that um I have them all in
02:56 - one
02:57 - place great I'm going to Dr drag this
03:00 - into Visual Studio
03:02 - code yes I trust thank you and now here
03:06 - are my files inside um running
03:09 - locally um next thing I want to do is to
03:13 - be sure I have the live server Plugin or
03:17 - extension inside of vs code this is
03:21 - going to allow us to very quickly see
03:24 - the changes to the code we make it
03:26 - creates this tight feedback loop where
03:28 - we CH make a change and we see the
03:29 - change instantly and we can code really
03:31 - fast and it's fun and great get this
03:35 - um got it
03:37 - great fire it up by clicking this little
03:40 - go live at the bottom of your
03:43 - screen and here we go here's my scene
03:47 - not much happening at the
03:48 - moment let's go over to the code and
03:50 - take a look starting with the
03:53 - index.html not really covering HTML in
03:56 - this session main thing I want to point
03:58 - out is this import map which makes it's
04:02 - a very convenient way to define your uh
04:05 - JavaScript import
04:07 - paths I've defined 2 three and JSM and
04:10 - then here I'm importing the Javascript
04:12 - file this is where we'll focus today
04:15 - here and uh first thing I want to do is
04:17 - get rid of this
04:19 - console.log and instead write import
04:23 - stars3 from three
04:32 - great now I want to set up the scene
04:35 - there's three things that 3js needs for
04:37 - scene a renderer a camera and a scene
04:41 - object let's create the renderer first
04:44 - const
04:45 - renderer equals a new 3.
04:50 - webgl
04:54 - renderer and we can pass in um some
04:57 - properties I'm going to suggest you pass
04:59 - in one property
05:02 - anti-alias is true just going to make it
05:05 - look a little bit
05:06 - better great we want to set the size of
05:09 - the renderer to do that I want to grab
05:11 - the width and the height of the window W
05:14 - equals
05:15 - window do inner
05:19 - width and const H equals
05:23 - window. inner
05:25 - height now I can set the renderer width
05:28 - and height see renderer
05:30 - do set whoops yeah set size
05:34 - no with height great also want to um
05:40 - append to the Dom the Dom being the HTML
05:44 - page uh
05:48 - document.body.appendchild
05:52 - renderer DOD element which is the canvas
05:57 - element another way to do this is to
05:59 - create create a canvas element inside
06:01 - your HTML and then use that when you set
06:03 - up your renderer but I prefer to do it
06:05 - this way just let the let the 3js handle
06:10 - the G element great that's the renderer
06:13 - next thing we'll set up is the camera
06:15 - con camera New
06:18 - 3. Perspective
06:21 - camera we we need to pass four things
06:25 - into the perspective
06:26 - camera a field of view an
06:30 - aspect a near and a
06:35 - far okay let's define those const field
06:38 - of view is equal to 75 75 degrees if I
06:42 - made this 5 degrees the field of view
06:44 - would be very narrow 90 degrees it would
06:46 - be very broad const
06:49 - aspect in this case will be the width
06:53 - divided by the
06:55 - height
06:56 - const near is equal to 0.1
07:00 - 0.1 units is when it starts rendering
07:02 - anything closer to the camera than 0.1
07:04 - units will be invisible const far is
07:09 - 10
07:12 - great now
07:15 - uh I want to scooch the camera back a
07:18 - little bit we haven't added anything to
07:19 - the scene yet but I want to scooch it
07:21 - back right now
07:23 - camera. position. Z equals 2 just a
07:28 - little bit further away so so I can see
07:30 - what's at the center of the scene last
07:32 - thing we're going to set up U const
07:35 - scene equals a
07:38 - new3 do
07:40 - scene
07:42 - great there's
07:45 - our that's the core of this tutorial
07:47 - right now setting that up allows you to
07:51 - render something renderer do
07:55 - render renderer render I got some crazy
07:59 - type in
08:02 - there and then we'll pass in the scene
08:06 - and the
08:08 - camera boom how isn't that just
08:11 - beautiful let me close up this console
08:14 - and save it
08:15 - again it's not beautiful there's
08:17 - absolutely nothing there let's add
08:19 - something really quick 3js has built
08:22 - into it some geograph some simple
08:24 - geometries Primitives they're called and
08:26 - we can just grab one of those and throw
08:28 - it in our s let's do that right now
08:30 - const goo equals new 3. iosa hedrin
08:36 - geometry it wants to have a size and a
08:42 - detail um we want to put a material on
08:46 - that geometry const mat equals new 3.
08:50 - mesh basic material and this wants some
08:55 - properties the only one I'm worried
08:56 - about right now is is the color property
08:59 - let's say
09:00 - 0x CC FF that's kind of a light blue
09:05 - color and const mesh equals new 3.
09:11 - mesh we're going to pass in the Geo and
09:14 - we're going to pass in the
09:16 - mat and then we have to
09:19 - scene. add
09:23 - mesh
09:25 - Tada what the heck did we just do
09:27 - grabbed one of those predefined
09:29 - Primitives from 3j's library grab one of
09:31 - the predefined materials from 3j's
09:34 - library the basic material which doesn't
09:38 - calculate any lights at all just has a
09:40 - color so it's kind of not even a object
09:42 - it's just a circle
09:44 - right um and a mesh which is a a
09:47 - container for both of the geometry and
09:49 - the material and has a bunch of
09:51 - properties that you can use to move it
09:53 - around or rotate it or animate it
09:54 - someone say
09:56 - animate let's wrap our render call in a
09:59 - a function that we can call again and
10:01 - again and again and then as we update
10:02 - the scene we'll see some animation
10:05 - function
10:08 - animate and the way that works is
10:12 - through this API
10:15 - request animation
10:17 - frame oh that didn't
10:20 - work there it
10:24 - is you pass in the name of the function
10:27 - and you're good to go
10:29 - don't forget to call it the first time
10:33 - though
10:35 - animate like so now it's being called
10:38 - every second um if I were to change the
10:42 - scale of the object mesh. scale. set
10:47 - scaler and we'll say
10:51 - um
10:53 - math.
10:55 - cosine um t
11:01 - time
11:04 - 0.001 plus
11:08 - 1.0 that's really complicated but let's
11:11 - just add T here tal Z to start
11:16 - with
11:18 - and what the heck is
11:21 - happening the animate this when I
11:24 - do when I call request animation frame
11:27 - I'm getting a time uh a time difference
11:30 - passed in each
11:32 - time um we could see this more clearly
11:34 - if we were to
11:37 - console. log
11:40 - T and then pull up the console
11:46 - here for free when it called request
11:48 - animation frame I get this
11:52 - value I'm just using that to change the
11:56 - scale of my object but enough of that
12:01 - um and enough of that
12:03 - too let's make our geometry look a
12:07 - little more interesting and then animate
12:08 - it and then we'll be done for
12:12 - today to make it more interesting I want
12:14 - to change the material type the basic
12:16 - doesn't interact with lights so if I use
12:17 - the
12:20 - standard
12:22 - whoops the standard material that's
12:25 - going to interact with lights
12:27 - but uh there are no lights in the scene
12:30 - const Hemi light equals new 3.
12:35 - hemisphere light and I want it to be
12:39 - white on the top and black on the bottom
12:45 - scene. add hemil
12:52 - light cool I mean sort of cool I want to
12:56 - change the color of my object to White
13:01 - and
13:03 - also flat shading is true look what that
13:08 - does it allows you to see all the facets
13:11 - and if I reduce the detail you could see
13:14 - those or increase
13:18 - it I think two is looking pretty
13:22 - good um to really highlight those
13:25 - different facets let's add another
13:27 - geometry and see see how that looks it's
13:30 - going to be a wireframe geometry kind of
13:31 - like this const let's define the
13:34 - material first wire mat
13:37 - equals a new
13:40 - 3. mesh basic material again and the
13:45 - color will be
13:47 - white
13:49 - color is
13:51 - 0x 1 2 3 4 5
13:54 - 6 and it's a wireframe
14:00 - material good and we need a wire mesh
14:04 - const wire
14:07 - mesh equals new
14:10 - 3. mesh and we can reuse the go the same
14:14 - go and we'll use the wire
14:19 - mat and I don't see it because I need to
14:23 - scene.
14:25 - add wire mesh
14:29 - and by default it just puts it right in
14:31 - the middle of the scene right on top of
14:32 - the other
14:35 - mesh there's a problem if I were to come
14:38 - in here and say mesh I mean it's not
14:41 - really a problem but I want to animate
14:42 - the
14:43 - mesh
14:44 - rotation.
14:46 - Y is equal to T *
14:50 - 0.00 01 so uh a 10th of a second or
14:54 - sorry every 10 seconds only the gray
14:58 - sphere is moving and the wire is not
15:01 - moving to solve that we
15:04 - can mh.
15:06 - add so I've just added the wireframe
15:10 - mesh as a child to the the other mesh
15:12 - instead of a child to the whole scene
15:15 - and now it'll automatically pick up the
15:16 - Transformations you make like rotations
15:18 - or scales or uh position
15:24 - changes to make it look a little less
15:26 - flickery I'm going to suggest fire mesh.
15:31 - scale. set
15:33 - scaler 1.01 just slightly bigger not
15:37 - three o two
15:38 - o see how it's a little less flickery
15:42 - now that's just I just scaled it up
15:45 - slightly great I think we're doing well
15:48 - let's make it a little bit more visually
15:50 - interesting let's make it uh kind of an
15:53 - uh uh blue color on top
16:00 - 99 FF and a orange color on the
16:05 - bottom uh kind of a darker orange
16:11 - color isn't that
16:14 - nice it would be nice to be able to kind
16:17 - of
16:18 - um move around in the scene a little bit
16:21 - the last thing I want to cover today is
16:23 - to use uh one of the add-ons to the 3js
16:26 - library called an orbit camera import
16:29 - sorry orbit
16:31 - controls orbit
16:35 - controls and we get that from
16:38 - jsmc
16:40 - controls SL orbit controls.
16:45 - JS
16:48 - good we need to con Define it const
16:52 - controls equals new orbit
16:56 - controls and we're going to pass in the
16:58 - camera
17:00 - and the Dom element render or
17:06 - render DOD
17:10 - element now automatically we kind of get
17:13 - this interaction Isn't that cool we can
17:15 - kind of click and drag in the scene and
17:17 - use the scroll wheel or the or what am I
17:20 - using my magic mouse but it gets better
17:24 - you can tweak it a little bit
17:27 - controls. enable damping enable
17:32 - damping is true and then set the damping
17:36 - Factor
17:40 - um uh
17:42 - damping
17:44 - factor and some small
17:47 - number and now you still won't see
17:52 - that until you add this line to your
17:54 - animate method
17:56 - controls. update so every frame it's
17:59 - going to update the
18:00 - controls like
18:04 - so isn't that
18:07 - nice that's it for now um experiment
18:11 - with this uh test your knowledge by
18:14 - trying out some different primitive
18:16 - shapes you can use cubes or Taurus knots
18:19 - which are really cool find the teapot
18:21 - that's inside of of uh 3js as well
18:24 - there's a link in the description to
18:25 - read more about Primitives try out
18:27 - different lights try directional light
18:29 - which is like sunlight or a point light
18:32 - or spotlights also Link in the
18:34 - description play with animating things
18:38 - animate the position animate the
18:39 - rotation the uh scale you could change
18:42 - the color of the mesh or the color of
18:44 - the
18:46 - light when you've done all these uh this
18:49 - experimentation or at any time go create
18:51 - a JS fiddle and share what you've
18:53 - created with others um love to see I
18:57 - would love to see what you come up
19:02 - with today let's discuss making a 3D
19:06 - Earth a globe using 3js and JavaScript
19:10 - let's get started I've got my basic
19:14 - template here which is just the
19:17 - threejs boiler plate setting up the
19:19 - scene and uh instantiating a cube
19:23 - geometry real quick to get started I
19:26 - like to add the the orbit controls I
19:30 - could have added these before we started
19:33 - but why not just do it now
19:35 - instead
19:37 - um new orbit controls
19:40 - now hang
19:42 - on let's see what I did
19:45 - wrong uh orbit controls. JS it's not
19:49 - what I did wrong it's what um GitHub
19:53 - co-pilot did wrong I'm going to slow
19:54 - down the
19:56 - rotation so now it moves real slow and I
19:59 - can pick up the slack there I like to
20:02 - add anti-alias is true here cuz I just
20:06 - think that Cube will look a little bit
20:08 - nicer why don't we replace that
20:12 - Cube we're going to make
20:15 - this an um let's call it a earth mesh
20:20 - instead of a cube and we'll replace it
20:24 - with a iosa hedrin geometry out of the
20:28 - box see a cedrin looks like that it's
20:30 - got a radius of one unit and a um detail
20:35 - of one as well uh if we wanted to we
20:38 - could drop that detail down oh sorry I
20:40 - lied it's detail zero we could boost
20:42 - that up to
20:45 - 16 and now it's indistinguishable from a
20:49 - sphere
20:51 - um I like doing flat
20:54 - shading is
20:56 - true so you can see that
21:00 - detail we're missing one
21:03 - here I guess it falls below the
21:06 - threshold of
21:09 - edges I think for our
21:11 - sphere 8 would be
21:14 - sufficient maybe slightly higher 12 um
21:19 - I'm not seeing a lot of chunky edges so
21:23 - I'm happy with that and then just
21:26 - comment that out for a nice smooth
21:27 - sphere
21:29 - cool um we've got a sphere let's put a a
21:33 - texture on that sphere so that it looks
21:35 - like a planet like planet Earth out on
21:38 - the internet there is a website called
21:41 - planetary pixel
21:44 - Emporium here and on it you can check
21:47 - out Earth and download these texture
21:51 - maps for the color for the bump or like
21:56 - the the mountains and stuff like that a
21:58 - specular map so to make the water shiny
22:02 - and the land masses less shiny City
22:05 - Lights map U which is really cool at
22:08 - nighttime oh I didn't mean to download
22:10 - that but oh
22:11 - well cloud map Etc as well as a bunch of
22:15 - other Maps like the moon like Jupiter
22:17 - like the sun Etc all right I've already
22:22 - downloaded those Maps so let's try one
22:24 - of them
22:25 - out we can get rid of this color
22:27 - statement and just say map is equal to
22:31 - new
22:31 - loader um but I want this to be
22:34 - instantiated instead let's call this
22:37 - loader and instantiate here const loader
22:41 - is equal to a texture
22:43 - loader and I have these Maps already
22:48 - downloaded on my machine but you'll need
22:50 - to either download the project files
22:53 - that'll be linked to in the description
22:54 - of this video or just go get those from
22:57 - that website there I've got them in this
22:59 - directory called
23:01 - textures and so I'll just use
23:04 - that textures and the name is Earth Map
23:08 - 4k.
23:10 - jpg uh and that did not work let's see
23:15 - what the console said it said hey I
23:17 - don't know where that is that's because
23:20 - it's not called Earth Map it's called
23:21 - 0000 uncore Earth Map hey there we go
23:26 - now we have a sphere with this texture
23:30 - mapped on it all we had to do was tell
23:34 - 3js that this attribute map would have
23:37 - this value which is this um texture
23:41 - loader and it loads a JPEG we could swap
23:44 - that out for something
23:47 - else um for
23:52 - example let's get a new window here I
23:55 - happen to have some of those other
23:58 - textures downloaded like moon Jupiter
24:02 - let's try
24:04 - Jupiter so
24:06 - Jupiter looks like
24:11 - this and now we've got Jupiter
24:14 - instead and this is a 4K image uh 4096 X
24:19 - 496 or something like that uh 4,000 by
24:23 - 2,000 so it's nice and detailed I think
24:27 - it looks great let's go back to Earth
24:29 - and we can enjoy the detail of this
24:32 - too great so we could just end there
24:35 - there you go there's your 3 3D Earth but
24:39 - let's make this look better um we could
24:43 - add clouds we could add a bump texture
24:46 - to give some relief or make the
24:48 - mountains look like they're coming up a
24:49 - little bit we could also improve the
24:51 - lighting right now it's just kind of
24:52 - this ambient lighting we can add this
24:56 - beautiful glow if you ever Google and
24:58 - image uh um Earth from space I guess and
25:03 - then look at the images there's this
25:05 - beautiful blue aura kind of all around
25:09 - the earth and we can get that
25:10 - too why don't we leave this open as
25:14 - reference um so let's get started with
25:16 - that
25:18 - uh let's get the rotation going like
25:22 - that um the Earth is kind of tilted on
25:25 - its access isn't it I'm not sure that
25:27 - this photo reflects that really well or
25:30 - I'm not even sure this is a a photo of
25:32 - the Earth but there's a
25:35 - tilt
25:37 - so to emulate that I'm going to
25:41 - create a
25:44 - new let's call this Earth
25:48 - group it's a new group and now instead
25:50 - of adding the Earth to the scene I'm
25:53 - going to add it to the Earth
25:55 - group and I'm going to give this
25:57 - rotation
25:58 - so Earth group. rotation. Z is equal to
26:04 - -
26:05 - 23.4 time math. Pi / 180 I
26:10 - think uh what is the
26:15 - Earth's
26:17 - axis angle or tilt and does it say here
26:22 - axial tilt that defines axial tilt but
26:25 - what's that the Earth's look at this
26:32 - 23.4 okay so I want to temporarily kill
26:36 - the rotation come back
26:39 - here and is that does that look right to
26:43 - you kind of like
26:47 - that kind
26:49 - of I'm going to say yeah it looks
26:52 - right because cuz I don't
26:56 - know um and now I want to turn on the
27:00 - rotation Y and now it's spinning along
27:02 - that
27:04 - tilt great um should we add the Stars
27:08 - next or should we beef up the Earth next
27:10 - I think adding Stars would be
27:12 - good um I've pre-built my stars the the
27:17 - way my method for adding Stars uh
27:20 - there's a couple of different ways I
27:22 - like to just create um a dome of points
27:26 - and to do that I've written up let's
27:30 - hide this this thing here let's
27:33 - import uh get
27:36 - Starfield
27:39 - from from my get Starfield and I think
27:41 - that'll work without breaking anything
27:44 - and now I I'll go over this code in a
27:46 - second all I have to do is Con stars is
27:50 - equal to get Starfield and then scene.
27:53 - stars
27:55 - or scene group I just sc. add
27:59 - Stars that's all I have to do and now if
28:01 - I pan out and pan around I've got these
28:04 - stars all around and if I want
28:08 - to I could say num
28:11 - stars is equal to
28:13 - 2,000 and it'll give me a lot more
28:17 - stars um how about 20,000
28:20 - Stars way more
28:24 - stars um why don't we look at that code
28:27 - real quick I think 20,000 is probably
28:29 - too many I like 2,000 it I can't
28:32 - remember what it defaults to but some
28:34 - small number like maybe
28:36 - 200 here's that get Starfield file it's
28:39 - a JavaScript module I'm exporting this
28:42 - function which is just to get the
28:44 - Starfield there's the default number of
28:46 - stars is
28:49 - 500 um I'm going to go over this later
28:52 - um for now let's just leave it at that
28:55 - cuz I want to build this Earth first so
28:57 - now we've got our Earth on tilted on its
28:59 - axis let's fix the light real quick
29:02 - comment this out and now every well not
29:04 - everything just the Earth is black and
29:07 - let's create a new directional
29:11 - light except I want it to be called
29:13 - sunlight cuz that makes sense to
29:16 - me and scene.
29:21 - add sunlight now it's just from overhead
29:24 - instead I want to move it over to some
29:27 - theoretical center of our solar
29:30 - system
29:33 - sunlight. position. that's moving on the
29:35 - Z axis I want to move it on the x axis
29:39 - too that's pretty
29:42 - good um negative 0.5 slightly lower I
29:48 - like that
29:49 - better um do I even need to move it on
29:51 - the z-axis at all I kind of do actually
29:54 - I kind of
29:55 - do all right I've moved move the the
29:58 - sunlight just the way I like it and now
30:01 - the Earth is kind of orbiting around I
30:04 - think it should be positive
30:06 - 0.5 that makes more sense to
30:09 - me great now the dark side of the earth
30:13 - is truly dark as it would be in space
30:17 - why don't we add lights to do that I'm
30:21 - going to create a new
30:23 - mesh
30:26 - um I'm I'm going to call this um lights
30:32 - mesh and this is going to
30:35 - be um this is okay thank you GitHub
30:39 - co-pilot I don't like this nested
30:41 - material here so I'm going to pull it
30:43 - out I'm going to call that lights
30:47 - mat okay I'm reusing that same
30:50 - icosahedron geometry so const lights
30:56 - mat is equal
30:59 - to and paste this material it's already
31:04 - digging into my textures directory and
31:07 - pulling out this lights mat
31:09 - material um let's turn that off for
31:13 - now and in fact just to kind of show the
31:19 - simplest implementation of
31:21 - this color is equal to
31:26 - Green okay and let's add that to our
31:31 - Earth group Earth group. add light
31:36 - smesh okay now oh my God goodness look
31:39 - at
31:40 - that what is going on how cool is that I
31:44 - love these happy accidents so let's
31:46 - let's make this transparent and let's
31:48 - make the opacity
31:51 - 0.6 so now it's the same thing it's just
31:54 - a little bit more transparent what's
31:56 - going on here
31:59 - is that green sphere I just
32:03 - created is sitting on top of the earth
32:08 - sphere and the earth sphere is rotating
32:11 - and you're getting the interplay of
32:12 - those vertices if I drop the the um
32:17 - detail
32:18 - here detail I'm going to break that out
32:21 - into its
32:22 - own const
32:25 - detail and I'm going to drop this down
32:27 - to
32:28 - four you can really see those
32:31 - interacting
32:32 - better or
32:36 - two I like that look a lot this is a
32:40 - complete aside let's go back to
32:42 - 12
32:44 - and I'm going to want that to rotate as
32:49 - well let's say light smesh is equal that
32:53 - too so now they're both moving together
32:55 - and we get rid of all that Z fighting
32:58 - um now let's get rid of the
33:01 - color and I don't really care that it's
33:03 - transparent anymore and let's drop the
33:05 - map on there and see how it looks oh so
33:08 - now this is that uh
33:11 - texture that I downloaded from that
33:14 - plenary pixel Emporium that looks like
33:17 - this here's that texture and that's
33:19 - mapped to this
33:21 - icosahedron but I want to be able to see
33:23 - the Earth underneath it so I'm going to
33:25 - change the blend mode to additive
33:27 - blending now
33:28 - wherever that previous texture is bright
33:31 - we see it and wherever it's dark we see
33:34 - the lights how cool is that well we're
33:36 - going to see the lights on the bright
33:37 - Parts too but I'm okay with that for for
33:39 - this
33:42 - example great
33:48 - um in the time remaining I want to add a
33:52 - couple more things a cloud mesh let's
33:54 - just add that real quick const cloud
33:58 - Matt is a mesh standard
34:00 - material and it's loading my highres
34:04 - clouds I'm going to disable all this
34:07 - stuff let's say um Earth
34:10 - group.
34:12 - add um my new mesh which I didn't defin
34:15 - yet
34:18 - whoops clouds
34:23 - mesh yeah that's what it is same
34:27 - situation
34:28 - Let's Get That clouds mesh moving
34:31 - around thank
34:34 - you oh isn't that
34:38 - nice this is the clouds
34:41 - smesh let's use that additive blending
34:44 - Technique we used just a moment ago to
34:46 - get it to sit on top anywhere the image
34:50 - is light and also you know what else I
34:52 - want to do is to elevate it a little bit
34:54 - off of the the mesh so const oh no I
34:57 - don't need need Conant I need Cloud
35:03 - mesh do
35:06 - scale. set scaler and I just want it to
35:09 - be slightly
35:11 - larger oh that's not good it's clouds
35:16 - mesh kind of like that nope that's still
35:19 - no good why oh cuz I I
35:23 - uh I had it written out as could smashh
35:29 - I think that looks
35:30 - good but um obviously it doesn't Cloud
35:34 - smesh could not be
35:40 - defined oh I see it's in my animation
35:44 - Loop that's what you get when you code
35:47 - rough and
35:48 - fast I've just picked it up off the
35:50 - earth a little bit you know what would
35:52 - be fun to play with is to go in and have
35:54 - this cast
35:56 - Shadows um um I'm not going to mess with
35:59 - that right now instead I'm going to keep
36:01 - it moving let's get rid of this
36:03 - hemisphere light we don't need that um I
36:06 - could make this
36:08 - semi-transparent that's up to you I
36:10 - don't see a big difference I'm not
36:12 - making the light
36:14 - semi-transparent we're almost done the
36:17 - last thing and my favorite part is to
36:19 - add a a glowy atmospheric look around
36:24 - our our model and to do that we're going
36:27 - to use what's called a frenel Shader
36:29 - which is spelled frenzel I think it is
36:33 - hang on uh
36:36 - fresnel so I'm going to I'm going to
36:39 - import
36:40 - this how am I doing that I see I'm doing
36:43 - it differently for this one I have to
36:47 - import
36:49 - that fernel
36:53 - material and I'm going to create a new
36:55 - mesh on top of the Cloud's mesh
36:59 - whoops I'll do it
37:01 - here this is a fernel mat and then I'm
37:04 - going to create a Fel mesh or a glow
37:07 - mesh if you will I
37:09 - will glow mesh and now Earth
37:15 - group add glow mesh and I need to
37:19 - manually rotate it because that's how
37:21 - I'm doing this it's kind of
37:24 - laborious uh I don't see it at all do
37:28 - you I don't see it and I think that's
37:30 - because I need to scale it up a little
37:31 - bit I'm going to scale it up to
37:35 - oh let's do it
37:38 - here
37:40 - 1.01 and let's see oh I still don't see
37:44 - it why not get frel mat let's see if
37:47 - there's any errors there's no
37:50 - errors we got our felat our oh that's
37:54 - why let's let's actually scale up our
37:58 - glow mesh there it
38:00 - is when you zoom in you can kind of see
38:03 - the edges of our Coosa
38:05 - hedrin but isn't that glow nice oh
38:10 - um let's have this move slightly faster
38:16 - the clouds will orbit a little bit
38:17 - faster so you can see them kind of
38:18 - passing over that's a little bit too
38:20 - fast I
38:22 - think tweak to your
38:25 - tastes there you have it
38:27 - [Music]
38:30 - the iconic wireframe Wormhole effect
38:33 - armed with nothing but 3js and some free
38:35 - time we're about to embark on an
38:37 - adventure through
38:38 - code let's bend the very fabric of
38:41 - virtual space with our bare coding
38:43 - skills from animating cameras to dance
38:45 - along a predestined path to summoning
38:48 - the unreal glow effect so grab your
38:50 - flamin' hot Cheetos and a cup of decaf
38:52 - coffee and join me on this
38:54 - interdimensional jaunt through the
38:56 - wireframe wormholes of
39:00 - 3js this is what we're
39:02 - building we're going to build it in a
39:04 - few different steps starting with
39:06 - loading the path data and creating a
39:09 - spline from that a spline is a just a
39:12 - representation of a line in 3D space um
39:15 - and this one as you can see kind of
39:17 - snakes and curves around in an
39:19 - interesting way and we'll use that as
39:21 - the basis for tube
39:24 - geometry um we'll then add add an edges
39:29 - geometry to get this look that you see
39:30 - on screen now uh where there are fewer
39:33 - lines in the tube in the
39:35 - wireframe um after we've done that we'll
39:38 - add in some boxes just so there's
39:40 - something in our path that we're flying
39:42 - past and lastly will add a glow effect
39:45 - to give it even more of that retro look
39:48 - that I
39:49 - love let's jump into it starting from
39:53 - here uh just the basic boiler plate
39:58 - uh let's just go over what that is got
40:00 - our Imports at the top I'm importing the
40:03 - orbit controls as well so I can kind of
40:04 - drag and move
40:06 - around we set up our scene with our
40:09 - boiler plate the camera and the
40:13 - renderer and I have a cube here I'm
40:16 - going to pull that cube out no longer
40:17 - need
40:19 - that and save it and now we have an
40:22 - empty scene let's load in our path data
40:27 - uh I'm going to IM
40:31 - import um
40:33 - spline
40:35 - from that from spin.js let's look at
40:40 - what's inside of spline
40:43 - JS here at the top is the curve path
40:47 - just a collection of
40:49 - three um floating points per vertex so I
40:54 - think there's like what do you what do
40:55 - you think like 35 vert
40:57 - there that represent this path that's
41:00 - kind of winding through space I'll load
41:02 - it up and show you um before I do though
41:05 - we take those points and we convert them
41:08 - to three vector 3es and that will be the
41:12 - basis for this catm ROM
41:16 - curve which is really handy it allows us
41:19 - to interpolate smoothly between those
41:21 - points and then we return that so that
41:24 - it's loaded in
41:25 - here um
41:29 - console.log
41:31 - spline this is what the data looks
41:34 - like
41:37 - whoops here it is and it's got these 37
41:42 - points first thing let's um let's see
41:46 - what that looks like I'm going to ask
41:49 - GitHub co-pilot to
41:52 - um create a
41:55 - line geometry
41:58 - from the
42:02 - spline it's going to get 100
42:05 - points then create a new buffer geometry
42:08 - and set the vertices for that from the
42:10 - points create a new line basic material
42:12 - and make it red create a new line from
42:15 - that geometry and material and add it to
42:17 - the
42:18 - scene I thought it was red it was really
42:23 - green and here is what that line looks
42:25 - like
42:29 - kind of like a crazy roller coaster or
42:30 - something just floating in
42:33 - space cool let's comment out that line
42:37 - and now let's create a tube geometry in
42:40 - the same
42:41 - way
42:43 - um so we'll create the geometry passing
42:47 - in the
42:48 - spline defining the number of Divisions
42:51 - along the length the radius is this
42:54 - value
42:55 - here um there's the number of Divisions
42:59 - along the along that radius the radial
43:01 - divisions and then finally is it closed
43:03 - or not that's true um a tube material we
43:09 - we'll use a mesh standard material to
43:11 - start
43:14 - with the color will be how about we'll
43:17 - make it uh an off blue color kind of
43:21 - like a baby blue color make it
43:22 - double-sided because we're in the inside
43:24 - of this tube eventually um and and make
43:27 - it wireframe oh and then add it to the
43:30 - scene oh actually create a mesh and then
43:31 - add it to the scene so the tube is going
43:33 - to be a new mesh with the tube geometry
43:35 - and Tube mat and we'll add that tube to
43:38 - the scene great there is our tube
43:44 - geometry and let's see I just want to
43:47 - see if if it isn't double-sided can I if
43:50 - I go inside can I
43:52 - still I can still see it because it's
43:54 - wireframe this will be important to have
43:56 - it double-sided if it weren't
43:59 - wireframe right cuz I'll go
44:01 - inside and there's just nothing in
44:04 - there let's make it double-sided
44:07 - again now uh there's this interior of
44:11 - the tube that's kind of what I
44:13 - want
44:16 - um kind of doesn't matter though I'm
44:19 - just going to leave it wireframe here's
44:21 - here's why I'm going to create an edges
44:24 - geometry too actually let's fly through
44:27 - through first and then create the edges
44:30 - geometry to do the fly
44:32 - through I want to create a
44:36 - function update camera this is going
44:41 - to it's going
44:43 - to progress along that curve that we
44:46 - created a moment
44:48 - ago um and there it is thanks GitHub
44:51 - co-pilot now instead of using time
44:54 - though or date. now I'm going to use T
44:57 - that I pass in here update
45:02 - camera and pass in
45:05 - T I don't know if this is more efficient
45:08 - or less it's just a um convention I'm
45:10 - used to
45:12 - doing um what just happened here every
45:15 - time I call this request animation
45:18 - frame uh it's going to pass in a
45:21 - timestamp I'm for the first time I call
45:23 - it though I'm giving it a default value
45:25 - of zero then I'll pass that time stamp
45:29 - into the update camera method I'll
45:32 - reduce it by this what is this like a
45:36 - 1,000 or or
45:38 - 1 20,000th or something I don't
45:41 - know I'm going to grab a point along
45:44 - that spline the the the point needs to
45:47 - be between zero and one this modulo
45:51 - operator is going to give us the
45:52 - remainder of dividing by this number
45:54 - here so let's say time is 10 and we
45:58 - divide by 20 we get 0.5 it's only going
46:01 - to give me the remainder using this
46:03 - operator and then I divide that by the
46:05 - loop time hang on I tell the camera to
46:08 - move to that position and look at this
46:12 - position which is slightly
46:14 - ahead like
46:16 - so and
46:18 - now we're not animating because it's too
46:20 - slow let's move it a little bit
46:23 - faster and a little bit faster
46:28 - and if I chop this down it should go
46:30 - twice as fast
46:34 - so that's the core of this tutorial is
46:38 - creating a tube and then attaching a
46:41 - camera to a path inside of that tube and
46:43 - moving moving along it's still moving
46:45 - kind of slowly isn't
46:47 - it that's a little bit
46:55 - better is that less clear I think it
46:58 - should be
46:59 - that let's move it a little bit
47:05 - faster so I want to modify the look of
47:08 - this wireframe right now we're seeing
47:10 - every single triangle and instead I only
47:13 - want to see some triangles like remove
47:15 - those diagonals if
47:17 - possible and to do that I also want to
47:20 - change that right now I'm getting this
47:23 - this shaded effect let's change the
47:25 - lighting first hang on a second before I
47:27 - do the edges I'm going to take off that
47:29 - uh hemisphere light and everything
47:31 - disappears cuz there's no light in the
47:32 - scene
47:33 - now and this material I'll make a mesh
47:37 - basic material boom now everything's
47:40 - back and there's no shading at all and
47:42 - let's add some fog to the
47:45 - scene um this fog X2 is the way to go um
47:49 - the color of the fog and this I don't
47:52 - know what what is this can you give me a
47:54 - hint here of what that is
47:57 - um it's the
47:59 - density okay but here here's how it
48:04 - looks I just love this effect
48:08 - um edges geometry this is what that
48:11 - looks like um create edges
48:19 - geometry we'll create an edge of
48:21 - geometry what is this value here
48:25 - 0.2 I think this is like a a threshold
48:29 - anyway we'll come back to that um con to
48:33 - Lines line there's the line material
48:35 - I'll use for the edges
48:37 - geometry let's make it white the same 1
48:40 - 2 3 4 5
48:42 - 6 and then create the line two from line
48:45 - segments why is that line two oh because
48:48 - I'm already using a line up
48:50 - here
48:53 - um uh how about two blinds
48:58 - and then lastly let's
49:01 - scene. add Tu
49:07 - blinds that's not what I
49:11 - expected edges geometry I'm using the
49:14 - edges in the mat let's hide our
49:17 - wireframe for a
49:19 - second yeah that's not at all what I
49:22 - expected oh I bet it's because of this
49:24 - threshold
49:27 - it's not
49:29 - shoot I'm going to have to look at the
49:31 - previous example cuz this is weird and I
49:33 - don't understand what's
49:38 - happening edes
49:45 - geometry let's let's have a
49:48 - look
49:50 - so here where's my edges
49:57 - I don't know oh here it
50:00 - is I'm using a point to see a line
50:03 - material line
50:05 - segments and then adding that line oh
50:09 - interesting it looks identical doesn't
50:15 - it edges
50:19 - geometry um that's the difference there
50:22 - is this tube tube geometry
50:27 - it's not different though it's the
50:30 - same line
50:32 - material line basic material line
50:36 - segments huh I wonder why it looks so
50:40 - crappy why does it look so
50:45 - crappy um
50:49 - 0.1
50:52 - 1.0 oh that's really odd I don't
50:54 - understand hang on a second
50:57 - what if I just pull back oh and let's
50:59 - turn off the fog for a moment see what's
51:02 - happening yeah I don't I didn't expect
51:05 - that to
51:07 - happen
51:11 - H that's just
51:15 - weird that's just weird
51:18 - geometry oh oh my God all right so
51:24 - here's what I did wrong I passed in the
51:26 - line as the basis for the edges geometry
51:29 - instead of passing the
51:31 - tube duh let's do that instead uh tube
51:38 - Geo I think this will look better
51:42 - yeah and then update the camera
51:47 - again yeah that's what I was expecting
51:49 - to see let's turn back on the
51:54 - fog now we are our wireframe Wormhole
51:58 - has a different look and
52:04 - feel um I I really like it let's add a
52:08 - bunch of
52:09 - boxes what we're going to do is using
52:12 - that path will Traverse the path move
52:15 - along the path and create boxes in it
52:17 - and put them on the path but offset a
52:20 - little bit um so they're not right in
52:22 - the middle but kind of on the side well
52:26 - let's see here I'll do it below all the
52:28 - tubes and edges right above update
52:32 - camera let's define uh the number of
52:35 - boxes which will be 45 or 55 slightly
52:40 - more and we'll do a four
52:43 - Loop actually I like that size as well
52:47 - uh now box geometry thank
52:49 - you um that's the Box
52:53 - material I'm not going to use that
52:55 - because the Box is going to be a box
52:57 - helper so for let
53:02 - I equal Z while I is less than num boxes
53:06 - I plus equal
53:10 - 1 where we want a box
53:14 - helper um are you giving me a box helper
53:18 - here no you're not you're giving me a
53:20 - box mat and a box oh I guess I need that
53:23 - for the Box helper
53:28 - here's the material in the Box no
53:30 - mystery there um I'm defining the Box
53:33 - geometry outside of the for Loop because
53:35 - I don't think I need to redefine it each
53:38 - time this might look familiar um we're
53:41 - grabbing a point
53:42 - along or I divided by num boxes so all
53:45 - along the point evenly spaced but then
53:47 - offsetting it slightly uh again using
53:50 - this U modulo one to get a number
53:52 - between 0 and
53:53 - one now we are going to grab the a
53:56 - position along that point and then set
53:59 - the offset a little bit of Randomness
54:01 - and then set the Box position there also
54:03 - a little bit of random rotation and then
54:05 - add the Box we're using a basic material
54:07 - so we should see it just fine there are
54:10 - those
54:13 - boxes const box or just helper
54:19 - helper equals new 3. boox Helper and
54:22 - we'll make it yellow and scene. add
54:26 - helper
54:28 - so oh yeah isn't that
54:32 - interesting it's not
54:34 - rotated can I rotate the Box
54:38 - helper uh helper do
54:43 - rotation do set I can't I can't see I
54:48 - can't see thank
54:51 - you does that work ah it doesn't work I
54:54 - guess you can't rotate those box help of
54:56 - course that's too
54:58 - bad I could use that just geometry
55:02 - Sucka uh let's do that we'll need a
55:05 - material and line segments and then it's
55:08 - just a lot more lines of code than the
55:10 - helper you know what I'm
55:15 - saying um I could Define this line mat
55:18 - outside but I kind of want the color to
55:20 - change each time
55:26 - and instead of tube lines this is box
55:28 - lines hang
55:32 - on box lines format
55:37 - that oh I it blew up uh why did it blow
55:42 - up U because I'm using this tube
55:44 - geometry I need to use the Box
55:47 - geometry and that should do it it didn't
55:51 - do it did I Define color can I just make
55:53 - it yellow for now
55:58 - okay I'm not seeing my box lines I need
56:01 - to set the position right and the
56:10 - rotation box
56:13 - lines so there's the position and then
56:15 - the
56:20 - rotation oh isn't that
56:23 - interesting box lines
56:27 - there and now get rid of the
56:30 - box and now we just have the lines and
56:33 - we have this nice rotation
56:37 - too cool last step to add the
56:42 - glow I do love the
56:45 - glow I'm going to just copy and paste
56:48 - the unreal glow effect from my previous
56:50 - example here and along with it I need to
56:53 - copy and paste the effects composer and
56:55 - this render pass as well
56:56 - I wonder if I really need that wend
56:58 - render pass or wender pass let's have a
57:02 - look here before I Define the geometry
57:05 - of my scene I'll just paste in this
57:06 - postprocessing or I'll create the render
57:08 - scene which is the equivalent of what
57:10 - you're seeing now just the render and
57:12 - this Bloom pass that's where the magic
57:14 - happens um it's the width and the height
57:17 - screen I actually don't know what all
57:18 - these pams are these two are the ones I
57:21 - play with the
57:22 - most and create a new effects composer
57:25 - and add it and that composer will
57:27 - replace our renderer
57:31 - here and then we get that glowy
57:35 - effect maybe we want to change the color
57:38 - of the
57:40 - lines on our tube on our edges right now
57:43 - they're white we could make
57:46 - them
57:48 - red oh that didn't
57:51 - work because I'm not showing the tube
57:54 - anymore um
57:56 - I don't think I need this tube or the
57:58 - tube mat are you using the tube mat for
58:01 - anything I'm just using the geometry
58:05 - now and this is the color that I want to
58:10 - change how's that look pretty cool I
58:14 - like this effect where each box has a
58:17 - different
58:19 - color let's do it like this where I
58:22 - define the color whoops const color
58:27 - is equal to a new color and I'm
58:30 - looping here
58:33 - um p is the position along the spline so
58:37 - it's going to give you value between 0
58:39 - and one for the Hue based on P starting
58:42 - at red and progressing all the way past
58:44 - purple back to red again as you Traverse
58:47 - and this is what that looks
58:52 - like I could make it go backwards 1.0 M
58:55 - oh that's really weird 1.0 minus so
58:58 - it'll start red and go to purple and
59:01 - cycle through blue and green before it
59:03 - gets
59:05 - back and should we really crank up the
59:08 - speed let's double the
59:17 - speed cool I encourage you to use what
59:21 - we've created here as the basis for your
59:23 - own Explorations and your own variations
59:26 - um use different geometries inside of
59:28 - the tube instead of just boxes load in
59:30 - some models or use other Primitives or
59:33 - uh animate things uh you load an
59:36 - animated model and move it along the
59:38 - bline as well uh also experiment with
59:41 - different looks and feels for the tube
59:43 - geometry you could use a different type
59:45 - of a Shader so that it had flat shading
59:47 - it's all faceted and you could use
59:48 - lights inside of there for a cool effect
59:51 - you could even color the vertex uh of
59:54 - the the vertices of the geomet R uh that
59:58 - might look really cool as
60:00 - well but yeah thanks for tuning
60:04 - [Music]
60:08 - in today I want to talk about a
60:11 - transition effect inside of
60:14 - 3js let's jump right into it this is
60:18 - borrowed heavily from an example on the
60:21 - 3js website uh created by Fernando
60:25 - Serrano I hope I'm saying his name right
60:28 - uh and it features two different scenes
60:31 - which are smoothly transitioned between
60:34 - uh using this really cool
60:37 - effect so I'm going to return it back to
60:41 - the state that looks more like the
60:44 - example kind of like this I modified the
60:47 - scenes so that it has the same geometry
60:50 - in the same orientation so that when you
60:53 - do the transition it appears that the
60:56 - the material just like grows on the
60:59 - object and then it decays and disappears
61:01 - from the object so there's like a
61:03 - coherence between the objects that's not
61:05 - necessary it's just a kind of a a cool
61:07 - look I was interested in I changed the
61:11 - lighting as
61:12 - well um I added this hemisphere light
61:16 - let's make it a little
61:18 - brighter and uh let's make these objects
61:22 - a little bit smaller
61:26 - let's talk quickly about the setup the
61:29 - example on the 3js website is all a
61:32 - single HTML file with embedded
61:35 - JavaScript and shaders and I found it
61:37 - kind of difficult to
61:40 - understand I pulled it down remove the
61:43 - stats and the
61:44 - guey uh and and just tried to break it
61:47 - up by function and let's just walk
61:50 - through what I came up
61:53 - with here's the basic scene
61:58 - where we just kind of set things up
62:02 - um there's going to be a single renderer
62:05 - shared by all three of the scenes that
62:08 - are set
62:09 - up okay uh we got a couple of materials
62:12 - which the entire scene will use and this
62:16 - transition so that's it uh this animate
62:22 - Loop okay
62:27 - let's look at the FX scene that's the
62:29 - first kind of scene that we're
62:32 - using
62:34 - um all it's doing is creating an
62:38 - instance
62:39 - mesh okay and then uh in this case it's
62:43 - icosahedron I could change that to uh
62:46 - box
62:48 - geometry and change that to size
62:51 - size and now we've got boxes instead of
62:54 - icosahedrons
62:56 - also
62:57 - cool what if I made it
63:00 - a uh
63:03 - Tetra hedrin geometry I'm actually not
63:06 - sure what that takes oh it takes
63:12 - uh whoops I'm making a
63:15 - mess oh I see why it's confused so
63:17 - tetraedron
63:18 - geometry uh takes a radius which will be
63:21 - size and then a and then a detail
63:26 - uh let's make it
63:28 - zero great bunch of tetraedron
63:32 - also cool what if we jack that up to
63:35 - 5,000 wow made them slightly
63:41 - smaller and the effect comes
63:44 - on I don't get tired of that I could
63:46 - just watch that effect all day um let's
63:50 - go back
63:52 - to the icosahedron
63:55 - and the size is uh
63:58 - 0.5 and we have 5,000 of them
64:03 - whoops there we
64:06 - go I kind of lost track where I was this
64:09 - is the FX scene where we just take a
64:11 - material put it on an uh instanced
64:13 - geometry and then we set up our scene
64:16 - we're using the shared
64:18 - renderer the render function is a little
64:20 - bit different because there's this Frame
64:22 - buffer object uh the render Target
64:26 - Target I don't really know what I just
64:28 - said I just know um this is like a I I
64:32 - think this is act as like a a a
64:34 - container for the render and then you
64:37 - can you can tell the renderer to use
64:40 - that container or another container use
64:42 - that render or another render I hope
64:44 - that makes sense that's my very loose
64:47 - understanding of
64:48 - it
64:49 - um this transition handles that
64:53 - effect it creates a plane it textures
64:57 - that plane uh with those scenes uh or
65:01 - the blending of those two scenes it uses
65:04 - um a
65:06 - texture here's a here's one of the
65:09 - textures here's
65:11 - another sorry to see isn't and here's
65:16 - another that
65:18 - texture through some alchemy in this
65:21 - Shader is transitioned to and from the
65:25 - two scenes again apologize for the loose
65:29 - definition I just know it
65:31 - works um if you swap in a different
65:34 - texture you get a different
65:38 - effect that's all I got the rest is just
65:41 - kind of messing around with those FX
65:44 - scenes to to try different different
65:48 - things and and see what looks
65:50 - cool um I added this color transition
65:54 - effect um
65:56 - you could change this to be set
66:00 - hsl and give it uh math. random for the
66:06 - Hue
66:08 - and comma 1.0 for the saturation 0.5 for
66:13 - the value and now we've got uh a bunch
66:16 - of random
66:18 - colors I use this needs animated color
66:22 - property when I set it up
66:26 - here I only wanted the the uh the the
66:29 - the scene the head the material that's
66:32 - solid the non- wireframe to have the
66:34 - random colors cuz
66:37 - uh otherwise I'd have random colored
66:41 - wire frames and I didn't think that
66:42 - looked
66:48 - interesting it's actually not bad but
66:50 - that's not what I wanted I wanted a
66:52 - single color
66:53 - wireframe uh and maybe that wireframe is
67:02 - white like
67:05 - so also really nice this example has
67:10 - code um to set the background color as
67:15 - well I think it's called clear color
67:18 - yeah and we'll make the clear color uh
67:21 - an
67:23 - offwhite so that now when go go to the
67:25 - wireframe scene it oh it doesn't work
67:29 - shoot I messed that
67:34 - up not sure how exactly I messed that up
67:36 - let's see here transition it's in the FX
67:40 - scene clear
67:41 - color clear
67:45 - color huh I thought I did that
67:49 - correctly and the
67:52 - index
67:54 - oh it belongs in the scene that's that's
67:57 - why I messed it up here we go
68:02 - offwhite now when we transition to the
68:05 - wireframe kind of inverts the whole
68:10 - thing um
68:13 - yeah check this check this code out um
68:17 - on the 3js website as well as on on my
68:21 - GitHub play around with
68:24 - it uh I'm going to try some other things
68:26 - with this too and see what I come up
68:27 - with but uh I just love this effect I
68:29 - could watch it all
68:34 - day we're mixing the Rapier physics
68:37 - engine fast stable web assembly module
68:40 - with
68:41 - 3js with a few lines of JavaScript we'll
68:44 - bring Dynamic collisions and forces to
68:47 - your 3js scene from laying down our
68:50 - foundational setup to linking Collision
68:52 - bodies with our 3D objects this lesson
68:54 - will be dynamic
68:56 - literally strap in sharpen your minds
68:59 - and let's get the physics party started
69:01 - okay we're going to start simple a 3js
69:04 - scene with a single object in it and
69:06 - some background Sprites from here we're
69:09 - going to add a bunch of geometry in this
69:12 - case an iosa hedrin then we'll wire up
69:15 - Mouse controls and we'll have a little
69:17 - light ball moving around once that's all
69:20 - in place we'll add rapure physics engine
69:23 - so that the objects are lighting with
69:25 - each other and with the mouse and lastly
69:28 - add some post-processing some unreal
69:30 - Bloom for a really cool glowy effect
69:33 - let's get started here's our basic
69:35 - boiler plate where I set up the renderer
69:39 - and the scene and the camera I'm
69:41 - creating a a container for the mouse
69:43 - position and now I'm just creating a
69:45 - bunch of bodies so let's up that to 10
69:49 - let's make these a little bit smaller
69:51 - I'm adding this mouse ball as well
69:53 - before we move on let's just look at
69:56 - what get body and get Mouse ball give to
69:58 - us cuz there's a lot going on here I'm
70:00 - going to pick a random position in space
70:03 - between range and half range so in this
70:06 - case between negative 1 and
70:08 - one uh I'm going to make some geometry
70:11 - and then add a wireframe geometry to
70:13 - that and then return that so that's all
70:16 - that's doing the get Mouse ball is the
70:18 - same thing
70:20 - only um does this have an update method
70:23 - too no only I'm adding this update
70:26 - method wherein it's just moving or where
70:29 - the mouse moves let's add that update
70:31 - method
70:34 - here and let's call this what's it
70:36 - called Mouse
70:38 - ball do update and pass in Mouse
70:43 - pause so now nothing
70:46 - happens why
70:50 - [Music]
70:52 - not I'm not sure why not
70:56 - oh because of
71:00 - this already that's really cool right
71:03 - just moving this light around I'm not
71:06 - sure if I made it clear but when I
71:09 - created this mouse ball I'm creating a
71:11 - little Point light and attaching that
71:14 - to the ball so as it moves around you
71:18 - get this cool lighting
71:20 - effect great now um the next thing to do
71:24 - we've got a bunch of geometry we wired
71:27 - up some mouse controls for interaction
71:29 - let's add the physics first thing we'll
71:32 - do is
71:34 - import the Rapier physics engine from
71:38 - this CDN up here next I'm going to
71:44 - initialize the Rapier physics
71:46 - engine define gravity and create a world
71:52 - I don't know why it's lad should be
71:53 - const right and create a world passing
71:56 - in that
71:57 - gravity
71:59 - lastly down here in our animate method
72:01 - we'll call World dot
72:10 - step so that's hooked up not much has
72:13 - changed because none of these objects in
72:16 - my scene have any physics associated
72:18 - with them let's change
72:20 - that I've already created the methods to
72:23 - link the Rapier physics engines rigid
72:26 - bodies to the 3js geometry so let's use
72:29 - that instead I'm going to pass in
72:32 - Rapier and
72:37 - World same here
72:40 - Rapier
72:47 - world and it doesn't look much
72:50 - different let's take a look at that
72:53 - setup and then fix that as
72:56 - well so first let's get the the mouse
73:01 - ball it's the same code as before where
73:04 - I simply create some geometry and a
73:06 - material and a mesh and add it to the
73:08 - and add a light as well but this time
73:11 - I'm also setting up a rigid body the way
73:14 - to do that with Rapier is to pick a
73:16 - rigid body description type um there are
73:19 - four types I'm only familiar with two of
73:21 - them because I'm only using two this K
73:24 - kinematic position based is useful for
73:26 - interactive objects like objects that
73:28 - are going to track the mouse move for
73:30 - example I create a rigid body using that
73:34 - description and I create a collider as
73:36 - well in this case it's a ball collider
73:39 - set to the size of the ball oh times
73:42 - three CU I wanted it to have more of an
73:45 - impact so I I scaled it
73:47 - up lastly I have this update method
73:50 - which is just going to set the mouse
73:53 - rigid body
73:55 - to the mouse position and then update
73:58 - the mesh to that's
74:01 - it real quick looking at the get body
74:04 - same as before only now we're adding a
74:07 - rigid body description this one's
74:09 - Dynamic so it's not controlled by
74:10 - anything but the simulation creating a
74:13 - rigid body with that description and a
74:15 - collider another ball collider and I'm
74:17 - setting the density in this case um the
74:21 - density uh uh we'll play with that in a
74:24 - bit to see what it looks like
74:26 - and then creating a collider there's the
74:29 - geometry setup and lastly I've got this
74:32 - update
74:33 - method I am resetting all the
74:37 - forces and I'm I want to I I I've
74:41 - defined a point at the middle of the
74:43 - scene that everything will be attracted
74:46 - to I'm calculating the position from the
74:50 - current ball to the center of the
74:53 - scene I'm that's the sub I'm like
74:56 - subtracting the position from the center
74:59 - position and then I'm adding
75:02 - Force to that the result of that
75:05 - subtraction and scaling it down a little
75:08 - bit can't remember what true means
75:11 - exactly and then I'm setting the
75:13 - position of the 3j object 3js object as
75:16 - well let's call that update method
75:19 - inside our animate here let's
75:23 - say bodies do 4
75:29 - each body.
75:36 - update and just like that all the balls
75:40 - are being pulled toward the center of
75:41 - the
75:43 - scene and then they're colliding with
75:46 - this
75:47 - light isn't that just really
75:50 - cool I just think it's so good
75:55 - now it's time to add the
76:04 - postprocessing the thing to note here is
76:06 - this unreal Bloom
76:11 - pass okay here's the bloom pass I'm
76:13 - going to set its threshold and strength
76:15 - and radius I don't know what these are
76:16 - just play with the values until it looks
76:18 - good the last thing to do is with this
76:21 - effects composer that's going to replace
76:23 - our renderer in this method
76:26 - here oh my God it's really really
76:30 - glowy let's turn down the Sprites in the
76:34 - background let's tone those down and
76:36 - then let's dim down the hemisphere light
76:38 - as well Hemi light. intensity is equal
76:43 - to 0.2 instead of
76:47 - one
76:49 - woo how cool is
76:53 - that it's really glowy is it too glowy
76:57 - let's look at this value
77:01 - here maybe it's not glowy enough we
77:03 - could drop
77:06 - the could drop the brightness of the
77:08 - point light if we
77:09 - want set to a two let's set it to a
77:13 - one still looks really good I kind of
77:17 - want to play with the threshold to see
77:19 - if we can make the the glow look more
77:23 - like more glowy
77:25 - this should be a lot more glowy huh it's
77:28 - actually okay it's not that
77:30 - bad I'm going to make this 10 times more
77:40 - glowy that's pretty cool but it's not
77:42 - really what I
77:48 - wanted um something to play with change
77:51 - the color of the wireframe on the on the
77:57 - balls right now they're black let's make
77:59 - them
78:02 - white and that changes things
78:05 - significantly doesn't
78:08 - it um too
78:14 - much that looks kind of cool
78:17 - too there's something too chattery about
78:20 - the the white though what if I dim it
78:23 - down to like I don't know four five
78:27 - six that's pretty
78:31 - cool I think I like the black
78:35 - better what does red look
78:41 - like no it's way too
78:48 - much and that's just interesting but not
78:51 - quite right
78:55 - oh that's pretty
78:59 - cool
79:01 - so some things you can try uh you can
79:04 - tweak the settings all day and and see
79:07 - what else cool you come up
79:09 - with also try adding other shapes like
79:12 - cubes or text geometry or other simple
79:15 - models um try creating a simple
79:18 - game or come up with another interactive
79:22 - physics simulation
79:25 - as always thanks for coming by and
79:28 - please leave a comment below with your
79:30 - thoughts or any suggestions you might
79:32 - have or
79:33 - questions um thanks so much see you next
79:36 - time

Cleaned transcript:

3js can help you create amazing 3D effects and animations on your websites in this course Bobby row will teach you how to use 3js through building five different projects what's up coders today we're diving into the exciting world of 3js learn how to create insane 3D effects right in your web browser we'll cover Primitives materials textures camera paths postprocessing physics and a lot more let's get started with some serious 3D action Bobby row here I'm a season code artist and software engineer with mad industry chops for 3js techniques effects codeart and more visit my YouTube channel robot Bobby today's tutorial is laid out as five Standalone projects so you can skip around if you want basic JavaScript knowledge is recommended now let's break it down getting started we'll explore primitive shapes lighting and animation very nice next create the Earth with 3js craft a beautiful multilayered Earth using shaders textures and lighting epic then fly through a wireframe wormhole animate along a camera path insane create a transition effect a spectacular postprocessing effect that's totally achievable awesome add physics with Rapier is the final project use this super fast stable physics engine works great with 3js ultra real since each project is standalone feel free to jump to what interests you let's go have you ever wondered how the hell you could make 3D graphics on the web 3js is a powerful library that transforms code into awesome visual experiences whether you're a seasoned coder or simply curious we'll start creating our own 3D scenes today since 2011 I've been creating interactive scenes and experimenting with 3js so are you ready to get to create some 3D Graphics let's go today we're going to get comfortable with the basics of 3js um first thing we're going to do is get Visual Studio code if you don't already have it this is the editor we'll be using today the next thing we're going to do is to download the starter template come over here uh the link is in the description of this video uh and make sure you're on the main branch down Lo the code I'm going to download the zip file and put it on my desktop there it is right there I'm going to unzip that and I'm just going to create a directory called threejs sketches so that um I have them all in one place great I'm going to Dr drag this into Visual Studio code yes I trust thank you and now here are my files inside um running locally um next thing I want to do is to be sure I have the live server Plugin or extension inside of vs code this is going to allow us to very quickly see the changes to the code we make it creates this tight feedback loop where we CH make a change and we see the change instantly and we can code really fast and it's fun and great get this um got it great fire it up by clicking this little go live at the bottom of your screen and here we go here's my scene not much happening at the moment let's go over to the code and take a look starting with the index.html not really covering HTML in this session main thing I want to point out is this import map which makes it's a very convenient way to define your uh JavaScript import paths I've defined 2 three and JSM and then here I'm importing the Javascript file this is where we'll focus today here and uh first thing I want to do is get rid of this console.log and instead write import stars3 from three great now I want to set up the scene there's three things that 3js needs for scene a renderer a camera and a scene object let's create the renderer first const renderer equals a new 3. webgl renderer and we can pass in um some properties I'm going to suggest you pass in one property antialias is true just going to make it look a little bit better great we want to set the size of the renderer to do that I want to grab the width and the height of the window W equals window do inner width and const H equals window. inner height now I can set the renderer width and height see renderer do set whoops yeah set size no with height great also want to um append to the Dom the Dom being the HTML page uh document.body.appendchild renderer DOD element which is the canvas element another way to do this is to create create a canvas element inside your HTML and then use that when you set up your renderer but I prefer to do it this way just let the let the 3js handle the G element great that's the renderer next thing we'll set up is the camera con camera New 3. Perspective camera we we need to pass four things into the perspective camera a field of view an aspect a near and a far okay let's define those const field of view is equal to 75 75 degrees if I made this 5 degrees the field of view would be very narrow 90 degrees it would be very broad const aspect in this case will be the width divided by the height const near is equal to 0.1 0.1 units is when it starts rendering anything closer to the camera than 0.1 units will be invisible const far is 10 great now uh I want to scooch the camera back a little bit we haven't added anything to the scene yet but I want to scooch it back right now camera. position. Z equals 2 just a little bit further away so so I can see what's at the center of the scene last thing we're going to set up U const scene equals a new3 do scene great there's our that's the core of this tutorial right now setting that up allows you to render something renderer do render renderer render I got some crazy type in there and then we'll pass in the scene and the camera boom how isn't that just beautiful let me close up this console and save it again it's not beautiful there's absolutely nothing there let's add something really quick 3js has built into it some geograph some simple geometries Primitives they're called and we can just grab one of those and throw it in our s let's do that right now const goo equals new 3. iosa hedrin geometry it wants to have a size and a detail um we want to put a material on that geometry const mat equals new 3. mesh basic material and this wants some properties the only one I'm worried about right now is is the color property let's say 0x CC FF that's kind of a light blue color and const mesh equals new 3. mesh we're going to pass in the Geo and we're going to pass in the mat and then we have to scene. add mesh Tada what the heck did we just do grabbed one of those predefined Primitives from 3j's library grab one of the predefined materials from 3j's library the basic material which doesn't calculate any lights at all just has a color so it's kind of not even a object it's just a circle right um and a mesh which is a a container for both of the geometry and the material and has a bunch of properties that you can use to move it around or rotate it or animate it someone say animate let's wrap our render call in a a function that we can call again and again and again and then as we update the scene we'll see some animation function animate and the way that works is through this API request animation frame oh that didn't work there it is you pass in the name of the function and you're good to go don't forget to call it the first time though animate like so now it's being called every second um if I were to change the scale of the object mesh. scale. set scaler and we'll say um math. cosine um t time 0.001 plus 1.0 that's really complicated but let's just add T here tal Z to start with and what the heck is happening the animate this when I do when I call request animation frame I'm getting a time uh a time difference passed in each time um we could see this more clearly if we were to console. log T and then pull up the console here for free when it called request animation frame I get this value I'm just using that to change the scale of my object but enough of that um and enough of that too let's make our geometry look a little more interesting and then animate it and then we'll be done for today to make it more interesting I want to change the material type the basic doesn't interact with lights so if I use the standard whoops the standard material that's going to interact with lights but uh there are no lights in the scene const Hemi light equals new 3. hemisphere light and I want it to be white on the top and black on the bottom scene. add hemil light cool I mean sort of cool I want to change the color of my object to White and also flat shading is true look what that does it allows you to see all the facets and if I reduce the detail you could see those or increase it I think two is looking pretty good um to really highlight those different facets let's add another geometry and see see how that looks it's going to be a wireframe geometry kind of like this const let's define the material first wire mat equals a new 3. mesh basic material again and the color will be white color is 0x 1 2 3 4 5 6 and it's a wireframe material good and we need a wire mesh const wire mesh equals new 3. mesh and we can reuse the go the same go and we'll use the wire mat and I don't see it because I need to scene. add wire mesh and by default it just puts it right in the middle of the scene right on top of the other mesh there's a problem if I were to come in here and say mesh I mean it's not really a problem but I want to animate the mesh rotation. Y is equal to T * 0.00 01 so uh a 10th of a second or sorry every 10 seconds only the gray sphere is moving and the wire is not moving to solve that we can mh. add so I've just added the wireframe mesh as a child to the the other mesh instead of a child to the whole scene and now it'll automatically pick up the Transformations you make like rotations or scales or uh position changes to make it look a little less flickery I'm going to suggest fire mesh. scale. set scaler 1.01 just slightly bigger not three o two o see how it's a little less flickery now that's just I just scaled it up slightly great I think we're doing well let's make it a little bit more visually interesting let's make it uh kind of an uh uh blue color on top 99 FF and a orange color on the bottom uh kind of a darker orange color isn't that nice it would be nice to be able to kind of um move around in the scene a little bit the last thing I want to cover today is to use uh one of the addons to the 3js library called an orbit camera import sorry orbit controls orbit controls and we get that from jsmc controls SL orbit controls. JS good we need to con Define it const controls equals new orbit controls and we're going to pass in the camera and the Dom element render or render DOD element now automatically we kind of get this interaction Isn't that cool we can kind of click and drag in the scene and use the scroll wheel or the or what am I using my magic mouse but it gets better you can tweak it a little bit controls. enable damping enable damping is true and then set the damping Factor um uh damping factor and some small number and now you still won't see that until you add this line to your animate method controls. update so every frame it's going to update the controls like so isn't that nice that's it for now um experiment with this uh test your knowledge by trying out some different primitive shapes you can use cubes or Taurus knots which are really cool find the teapot that's inside of of uh 3js as well there's a link in the description to read more about Primitives try out different lights try directional light which is like sunlight or a point light or spotlights also Link in the description play with animating things animate the position animate the rotation the uh scale you could change the color of the mesh or the color of the light when you've done all these uh this experimentation or at any time go create a JS fiddle and share what you've created with others um love to see I would love to see what you come up with today let's discuss making a 3D Earth a globe using 3js and JavaScript let's get started I've got my basic template here which is just the threejs boiler plate setting up the scene and uh instantiating a cube geometry real quick to get started I like to add the the orbit controls I could have added these before we started but why not just do it now instead um new orbit controls now hang on let's see what I did wrong uh orbit controls. JS it's not what I did wrong it's what um GitHub copilot did wrong I'm going to slow down the rotation so now it moves real slow and I can pick up the slack there I like to add antialias is true here cuz I just think that Cube will look a little bit nicer why don't we replace that Cube we're going to make this an um let's call it a earth mesh instead of a cube and we'll replace it with a iosa hedrin geometry out of the box see a cedrin looks like that it's got a radius of one unit and a um detail of one as well uh if we wanted to we could drop that detail down oh sorry I lied it's detail zero we could boost that up to 16 and now it's indistinguishable from a sphere um I like doing flat shading is true so you can see that detail we're missing one here I guess it falls below the threshold of edges I think for our sphere 8 would be sufficient maybe slightly higher 12 um I'm not seeing a lot of chunky edges so I'm happy with that and then just comment that out for a nice smooth sphere cool um we've got a sphere let's put a a texture on that sphere so that it looks like a planet like planet Earth out on the internet there is a website called planetary pixel Emporium here and on it you can check out Earth and download these texture maps for the color for the bump or like the the mountains and stuff like that a specular map so to make the water shiny and the land masses less shiny City Lights map U which is really cool at nighttime oh I didn't mean to download that but oh well cloud map Etc as well as a bunch of other Maps like the moon like Jupiter like the sun Etc all right I've already downloaded those Maps so let's try one of them out we can get rid of this color statement and just say map is equal to new loader um but I want this to be instantiated instead let's call this loader and instantiate here const loader is equal to a texture loader and I have these Maps already downloaded on my machine but you'll need to either download the project files that'll be linked to in the description of this video or just go get those from that website there I've got them in this directory called textures and so I'll just use that textures and the name is Earth Map 4k. jpg uh and that did not work let's see what the console said it said hey I don't know where that is that's because it's not called Earth Map it's called 0000 uncore Earth Map hey there we go now we have a sphere with this texture mapped on it all we had to do was tell 3js that this attribute map would have this value which is this um texture loader and it loads a JPEG we could swap that out for something else um for example let's get a new window here I happen to have some of those other textures downloaded like moon Jupiter let's try Jupiter so Jupiter looks like this and now we've got Jupiter instead and this is a 4K image uh 4096 X 496 or something like that uh 4,000 by 2,000 so it's nice and detailed I think it looks great let's go back to Earth and we can enjoy the detail of this too great so we could just end there there you go there's your 3 3D Earth but let's make this look better um we could add clouds we could add a bump texture to give some relief or make the mountains look like they're coming up a little bit we could also improve the lighting right now it's just kind of this ambient lighting we can add this beautiful glow if you ever Google and image uh um Earth from space I guess and then look at the images there's this beautiful blue aura kind of all around the earth and we can get that too why don't we leave this open as reference um so let's get started with that uh let's get the rotation going like that um the Earth is kind of tilted on its access isn't it I'm not sure that this photo reflects that really well or I'm not even sure this is a a photo of the Earth but there's a tilt so to emulate that I'm going to create a new let's call this Earth group it's a new group and now instead of adding the Earth to the scene I'm going to add it to the Earth group and I'm going to give this rotation so Earth group. rotation. Z is equal to 23.4 time math. Pi / 180 I think uh what is the Earth's axis angle or tilt and does it say here axial tilt that defines axial tilt but what's that the Earth's look at this 23.4 okay so I want to temporarily kill the rotation come back here and is that does that look right to you kind of like that kind of I'm going to say yeah it looks right because cuz I don't know um and now I want to turn on the rotation Y and now it's spinning along that tilt great um should we add the Stars next or should we beef up the Earth next I think adding Stars would be good um I've prebuilt my stars the the way my method for adding Stars uh there's a couple of different ways I like to just create um a dome of points and to do that I've written up let's hide this this thing here let's import uh get Starfield from from my get Starfield and I think that'll work without breaking anything and now I I'll go over this code in a second all I have to do is Con stars is equal to get Starfield and then scene. stars or scene group I just sc. add Stars that's all I have to do and now if I pan out and pan around I've got these stars all around and if I want to I could say num stars is equal to 2,000 and it'll give me a lot more stars um how about 20,000 Stars way more stars um why don't we look at that code real quick I think 20,000 is probably too many I like 2,000 it I can't remember what it defaults to but some small number like maybe 200 here's that get Starfield file it's a JavaScript module I'm exporting this function which is just to get the Starfield there's the default number of stars is 500 um I'm going to go over this later um for now let's just leave it at that cuz I want to build this Earth first so now we've got our Earth on tilted on its axis let's fix the light real quick comment this out and now every well not everything just the Earth is black and let's create a new directional light except I want it to be called sunlight cuz that makes sense to me and scene. add sunlight now it's just from overhead instead I want to move it over to some theoretical center of our solar system sunlight. position. that's moving on the Z axis I want to move it on the x axis too that's pretty good um negative 0.5 slightly lower I like that better um do I even need to move it on the zaxis at all I kind of do actually I kind of do all right I've moved move the the sunlight just the way I like it and now the Earth is kind of orbiting around I think it should be positive 0.5 that makes more sense to me great now the dark side of the earth is truly dark as it would be in space why don't we add lights to do that I'm going to create a new mesh um I'm I'm going to call this um lights mesh and this is going to be um this is okay thank you GitHub copilot I don't like this nested material here so I'm going to pull it out I'm going to call that lights mat okay I'm reusing that same icosahedron geometry so const lights mat is equal to and paste this material it's already digging into my textures directory and pulling out this lights mat material um let's turn that off for now and in fact just to kind of show the simplest implementation of this color is equal to Green okay and let's add that to our Earth group Earth group. add light smesh okay now oh my God goodness look at that what is going on how cool is that I love these happy accidents so let's let's make this transparent and let's make the opacity 0.6 so now it's the same thing it's just a little bit more transparent what's going on here is that green sphere I just created is sitting on top of the earth sphere and the earth sphere is rotating and you're getting the interplay of those vertices if I drop the the um detail here detail I'm going to break that out into its own const detail and I'm going to drop this down to four you can really see those interacting better or two I like that look a lot this is a complete aside let's go back to 12 and I'm going to want that to rotate as well let's say light smesh is equal that too so now they're both moving together and we get rid of all that Z fighting um now let's get rid of the color and I don't really care that it's transparent anymore and let's drop the map on there and see how it looks oh so now this is that uh texture that I downloaded from that plenary pixel Emporium that looks like this here's that texture and that's mapped to this icosahedron but I want to be able to see the Earth underneath it so I'm going to change the blend mode to additive blending now wherever that previous texture is bright we see it and wherever it's dark we see the lights how cool is that well we're going to see the lights on the bright Parts too but I'm okay with that for for this example great um in the time remaining I want to add a couple more things a cloud mesh let's just add that real quick const cloud Matt is a mesh standard material and it's loading my highres clouds I'm going to disable all this stuff let's say um Earth group. add um my new mesh which I didn't defin yet whoops clouds mesh yeah that's what it is same situation Let's Get That clouds mesh moving around thank you oh isn't that nice this is the clouds smesh let's use that additive blending Technique we used just a moment ago to get it to sit on top anywhere the image is light and also you know what else I want to do is to elevate it a little bit off of the the mesh so const oh no I don't need need Conant I need Cloud mesh do scale. set scaler and I just want it to be slightly larger oh that's not good it's clouds mesh kind of like that nope that's still no good why oh cuz I I uh I had it written out as could smashh I think that looks good but um obviously it doesn't Cloud smesh could not be defined oh I see it's in my animation Loop that's what you get when you code rough and fast I've just picked it up off the earth a little bit you know what would be fun to play with is to go in and have this cast Shadows um um I'm not going to mess with that right now instead I'm going to keep it moving let's get rid of this hemisphere light we don't need that um I could make this semitransparent that's up to you I don't see a big difference I'm not making the light semitransparent we're almost done the last thing and my favorite part is to add a a glowy atmospheric look around our our model and to do that we're going to use what's called a frenel Shader which is spelled frenzel I think it is hang on uh fresnel so I'm going to I'm going to import this how am I doing that I see I'm doing it differently for this one I have to import that fernel material and I'm going to create a new mesh on top of the Cloud's mesh whoops I'll do it here this is a fernel mat and then I'm going to create a Fel mesh or a glow mesh if you will I will glow mesh and now Earth group add glow mesh and I need to manually rotate it because that's how I'm doing this it's kind of laborious uh I don't see it at all do you I don't see it and I think that's because I need to scale it up a little bit I'm going to scale it up to oh let's do it here 1.01 and let's see oh I still don't see it why not get frel mat let's see if there's any errors there's no errors we got our felat our oh that's why let's let's actually scale up our glow mesh there it is when you zoom in you can kind of see the edges of our Coosa hedrin but isn't that glow nice oh um let's have this move slightly faster the clouds will orbit a little bit faster so you can see them kind of passing over that's a little bit too fast I think tweak to your tastes there you have it the iconic wireframe Wormhole effect armed with nothing but 3js and some free time we're about to embark on an adventure through code let's bend the very fabric of virtual space with our bare coding skills from animating cameras to dance along a predestined path to summoning the unreal glow effect so grab your flamin' hot Cheetos and a cup of decaf coffee and join me on this interdimensional jaunt through the wireframe wormholes of 3js this is what we're building we're going to build it in a few different steps starting with loading the path data and creating a spline from that a spline is a just a representation of a line in 3D space um and this one as you can see kind of snakes and curves around in an interesting way and we'll use that as the basis for tube geometry um we'll then add add an edges geometry to get this look that you see on screen now uh where there are fewer lines in the tube in the wireframe um after we've done that we'll add in some boxes just so there's something in our path that we're flying past and lastly will add a glow effect to give it even more of that retro look that I love let's jump into it starting from here uh just the basic boiler plate uh let's just go over what that is got our Imports at the top I'm importing the orbit controls as well so I can kind of drag and move around we set up our scene with our boiler plate the camera and the renderer and I have a cube here I'm going to pull that cube out no longer need that and save it and now we have an empty scene let's load in our path data uh I'm going to IM import um spline from that from spin.js let's look at what's inside of spline JS here at the top is the curve path just a collection of three um floating points per vertex so I think there's like what do you what do you think like 35 vert there that represent this path that's kind of winding through space I'll load it up and show you um before I do though we take those points and we convert them to three vector 3es and that will be the basis for this catm ROM curve which is really handy it allows us to interpolate smoothly between those points and then we return that so that it's loaded in here um console.log spline this is what the data looks like whoops here it is and it's got these 37 points first thing let's um let's see what that looks like I'm going to ask GitHub copilot to um create a line geometry from the spline it's going to get 100 points then create a new buffer geometry and set the vertices for that from the points create a new line basic material and make it red create a new line from that geometry and material and add it to the scene I thought it was red it was really green and here is what that line looks like kind of like a crazy roller coaster or something just floating in space cool let's comment out that line and now let's create a tube geometry in the same way um so we'll create the geometry passing in the spline defining the number of Divisions along the length the radius is this value here um there's the number of Divisions along the along that radius the radial divisions and then finally is it closed or not that's true um a tube material we we'll use a mesh standard material to start with the color will be how about we'll make it uh an off blue color kind of like a baby blue color make it doublesided because we're in the inside of this tube eventually um and and make it wireframe oh and then add it to the scene oh actually create a mesh and then add it to the scene so the tube is going to be a new mesh with the tube geometry and Tube mat and we'll add that tube to the scene great there is our tube geometry and let's see I just want to see if if it isn't doublesided can I if I go inside can I still I can still see it because it's wireframe this will be important to have it doublesided if it weren't wireframe right cuz I'll go inside and there's just nothing in there let's make it doublesided again now uh there's this interior of the tube that's kind of what I want um kind of doesn't matter though I'm just going to leave it wireframe here's here's why I'm going to create an edges geometry too actually let's fly through through first and then create the edges geometry to do the fly through I want to create a function update camera this is going to it's going to progress along that curve that we created a moment ago um and there it is thanks GitHub copilot now instead of using time though or date. now I'm going to use T that I pass in here update camera and pass in T I don't know if this is more efficient or less it's just a um convention I'm used to doing um what just happened here every time I call this request animation frame uh it's going to pass in a timestamp I'm for the first time I call it though I'm giving it a default value of zero then I'll pass that time stamp into the update camera method I'll reduce it by this what is this like a 1,000 or or 1 20,000th or something I don't know I'm going to grab a point along that spline the the the point needs to be between zero and one this modulo operator is going to give us the remainder of dividing by this number here so let's say time is 10 and we divide by 20 we get 0.5 it's only going to give me the remainder using this operator and then I divide that by the loop time hang on I tell the camera to move to that position and look at this position which is slightly ahead like so and now we're not animating because it's too slow let's move it a little bit faster and a little bit faster and if I chop this down it should go twice as fast so that's the core of this tutorial is creating a tube and then attaching a camera to a path inside of that tube and moving moving along it's still moving kind of slowly isn't it that's a little bit better is that less clear I think it should be that let's move it a little bit faster so I want to modify the look of this wireframe right now we're seeing every single triangle and instead I only want to see some triangles like remove those diagonals if possible and to do that I also want to change that right now I'm getting this this shaded effect let's change the lighting first hang on a second before I do the edges I'm going to take off that uh hemisphere light and everything disappears cuz there's no light in the scene now and this material I'll make a mesh basic material boom now everything's back and there's no shading at all and let's add some fog to the scene um this fog X2 is the way to go um the color of the fog and this I don't know what what is this can you give me a hint here of what that is um it's the density okay but here here's how it looks I just love this effect um edges geometry this is what that looks like um create edges geometry we'll create an edge of geometry what is this value here 0.2 I think this is like a a threshold anyway we'll come back to that um con to Lines line there's the line material I'll use for the edges geometry let's make it white the same 1 2 3 4 5 6 and then create the line two from line segments why is that line two oh because I'm already using a line up here um uh how about two blinds and then lastly let's scene. add Tu blinds that's not what I expected edges geometry I'm using the edges in the mat let's hide our wireframe for a second yeah that's not at all what I expected oh I bet it's because of this threshold it's not shoot I'm going to have to look at the previous example cuz this is weird and I don't understand what's happening edes geometry let's let's have a look so here where's my edges I don't know oh here it is I'm using a point to see a line material line segments and then adding that line oh interesting it looks identical doesn't it edges geometry um that's the difference there is this tube tube geometry it's not different though it's the same line material line basic material line segments huh I wonder why it looks so crappy why does it look so crappy um 0.1 1.0 oh that's really odd I don't understand hang on a second what if I just pull back oh and let's turn off the fog for a moment see what's happening yeah I don't I didn't expect that to happen H that's just weird that's just weird geometry oh oh my God all right so here's what I did wrong I passed in the line as the basis for the edges geometry instead of passing the tube duh let's do that instead uh tube Geo I think this will look better yeah and then update the camera again yeah that's what I was expecting to see let's turn back on the fog now we are our wireframe Wormhole has a different look and feel um I I really like it let's add a bunch of boxes what we're going to do is using that path will Traverse the path move along the path and create boxes in it and put them on the path but offset a little bit um so they're not right in the middle but kind of on the side well let's see here I'll do it below all the tubes and edges right above update camera let's define uh the number of boxes which will be 45 or 55 slightly more and we'll do a four Loop actually I like that size as well uh now box geometry thank you um that's the Box material I'm not going to use that because the Box is going to be a box helper so for let I equal Z while I is less than num boxes I plus equal 1 where we want a box helper um are you giving me a box helper here no you're not you're giving me a box mat and a box oh I guess I need that for the Box helper here's the material in the Box no mystery there um I'm defining the Box geometry outside of the for Loop because I don't think I need to redefine it each time this might look familiar um we're grabbing a point along or I divided by num boxes so all along the point evenly spaced but then offsetting it slightly uh again using this U modulo one to get a number between 0 and one now we are going to grab the a position along that point and then set the offset a little bit of Randomness and then set the Box position there also a little bit of random rotation and then add the Box we're using a basic material so we should see it just fine there are those boxes const box or just helper helper equals new 3. boox Helper and we'll make it yellow and scene. add helper so oh yeah isn't that interesting it's not rotated can I rotate the Box helper uh helper do rotation do set I can't I can't see I can't see thank you does that work ah it doesn't work I guess you can't rotate those box help of course that's too bad I could use that just geometry Sucka uh let's do that we'll need a material and line segments and then it's just a lot more lines of code than the helper you know what I'm saying um I could Define this line mat outside but I kind of want the color to change each time and instead of tube lines this is box lines hang on box lines format that oh I it blew up uh why did it blow up U because I'm using this tube geometry I need to use the Box geometry and that should do it it didn't do it did I Define color can I just make it yellow for now okay I'm not seeing my box lines I need to set the position right and the rotation box lines so there's the position and then the rotation oh isn't that interesting box lines there and now get rid of the box and now we just have the lines and we have this nice rotation too cool last step to add the glow I do love the glow I'm going to just copy and paste the unreal glow effect from my previous example here and along with it I need to copy and paste the effects composer and this render pass as well I wonder if I really need that wend render pass or wender pass let's have a look here before I Define the geometry of my scene I'll just paste in this postprocessing or I'll create the render scene which is the equivalent of what you're seeing now just the render and this Bloom pass that's where the magic happens um it's the width and the height screen I actually don't know what all these pams are these two are the ones I play with the most and create a new effects composer and add it and that composer will replace our renderer here and then we get that glowy effect maybe we want to change the color of the lines on our tube on our edges right now they're white we could make them red oh that didn't work because I'm not showing the tube anymore um I don't think I need this tube or the tube mat are you using the tube mat for anything I'm just using the geometry now and this is the color that I want to change how's that look pretty cool I like this effect where each box has a different color let's do it like this where I define the color whoops const color is equal to a new color and I'm looping here um p is the position along the spline so it's going to give you value between 0 and one for the Hue based on P starting at red and progressing all the way past purple back to red again as you Traverse and this is what that looks like I could make it go backwards 1.0 M oh that's really weird 1.0 minus so it'll start red and go to purple and cycle through blue and green before it gets back and should we really crank up the speed let's double the speed cool I encourage you to use what we've created here as the basis for your own Explorations and your own variations um use different geometries inside of the tube instead of just boxes load in some models or use other Primitives or uh animate things uh you load an animated model and move it along the bline as well uh also experiment with different looks and feels for the tube geometry you could use a different type of a Shader so that it had flat shading it's all faceted and you could use lights inside of there for a cool effect you could even color the vertex uh of the the vertices of the geomet R uh that might look really cool as well but yeah thanks for tuning in today I want to talk about a transition effect inside of 3js let's jump right into it this is borrowed heavily from an example on the 3js website uh created by Fernando Serrano I hope I'm saying his name right uh and it features two different scenes which are smoothly transitioned between uh using this really cool effect so I'm going to return it back to the state that looks more like the example kind of like this I modified the scenes so that it has the same geometry in the same orientation so that when you do the transition it appears that the the material just like grows on the object and then it decays and disappears from the object so there's like a coherence between the objects that's not necessary it's just a kind of a a cool look I was interested in I changed the lighting as well um I added this hemisphere light let's make it a little brighter and uh let's make these objects a little bit smaller let's talk quickly about the setup the example on the 3js website is all a single HTML file with embedded JavaScript and shaders and I found it kind of difficult to understand I pulled it down remove the stats and the guey uh and and just tried to break it up by function and let's just walk through what I came up with here's the basic scene where we just kind of set things up um there's going to be a single renderer shared by all three of the scenes that are set up okay uh we got a couple of materials which the entire scene will use and this transition so that's it uh this animate Loop okay let's look at the FX scene that's the first kind of scene that we're using um all it's doing is creating an instance mesh okay and then uh in this case it's icosahedron I could change that to uh box geometry and change that to size size and now we've got boxes instead of icosahedrons also cool what if I made it a uh Tetra hedrin geometry I'm actually not sure what that takes oh it takes uh whoops I'm making a mess oh I see why it's confused so tetraedron geometry uh takes a radius which will be size and then a and then a detail uh let's make it zero great bunch of tetraedron also cool what if we jack that up to 5,000 wow made them slightly smaller and the effect comes on I don't get tired of that I could just watch that effect all day um let's go back to the icosahedron and the size is uh 0.5 and we have 5,000 of them whoops there we go I kind of lost track where I was this is the FX scene where we just take a material put it on an uh instanced geometry and then we set up our scene we're using the shared renderer the render function is a little bit different because there's this Frame buffer object uh the render Target Target I don't really know what I just said I just know um this is like a I I think this is act as like a a a container for the render and then you can you can tell the renderer to use that container or another container use that render or another render I hope that makes sense that's my very loose understanding of it um this transition handles that effect it creates a plane it textures that plane uh with those scenes uh or the blending of those two scenes it uses um a texture here's a here's one of the textures here's another sorry to see isn't and here's another that texture through some alchemy in this Shader is transitioned to and from the two scenes again apologize for the loose definition I just know it works um if you swap in a different texture you get a different effect that's all I got the rest is just kind of messing around with those FX scenes to to try different different things and and see what looks cool um I added this color transition effect um you could change this to be set hsl and give it uh math. random for the Hue and comma 1.0 for the saturation 0.5 for the value and now we've got uh a bunch of random colors I use this needs animated color property when I set it up here I only wanted the the uh the the the scene the head the material that's solid the non wireframe to have the random colors cuz uh otherwise I'd have random colored wire frames and I didn't think that looked interesting it's actually not bad but that's not what I wanted I wanted a single color wireframe uh and maybe that wireframe is white like so also really nice this example has code um to set the background color as well I think it's called clear color yeah and we'll make the clear color uh an offwhite so that now when go go to the wireframe scene it oh it doesn't work shoot I messed that up not sure how exactly I messed that up let's see here transition it's in the FX scene clear color clear color huh I thought I did that correctly and the index oh it belongs in the scene that's that's why I messed it up here we go offwhite now when we transition to the wireframe kind of inverts the whole thing um yeah check this check this code out um on the 3js website as well as on on my GitHub play around with it uh I'm going to try some other things with this too and see what I come up with but uh I just love this effect I could watch it all day we're mixing the Rapier physics engine fast stable web assembly module with 3js with a few lines of JavaScript we'll bring Dynamic collisions and forces to your 3js scene from laying down our foundational setup to linking Collision bodies with our 3D objects this lesson will be dynamic literally strap in sharpen your minds and let's get the physics party started okay we're going to start simple a 3js scene with a single object in it and some background Sprites from here we're going to add a bunch of geometry in this case an iosa hedrin then we'll wire up Mouse controls and we'll have a little light ball moving around once that's all in place we'll add rapure physics engine so that the objects are lighting with each other and with the mouse and lastly add some postprocessing some unreal Bloom for a really cool glowy effect let's get started here's our basic boiler plate where I set up the renderer and the scene and the camera I'm creating a a container for the mouse position and now I'm just creating a bunch of bodies so let's up that to 10 let's make these a little bit smaller I'm adding this mouse ball as well before we move on let's just look at what get body and get Mouse ball give to us cuz there's a lot going on here I'm going to pick a random position in space between range and half range so in this case between negative 1 and one uh I'm going to make some geometry and then add a wireframe geometry to that and then return that so that's all that's doing the get Mouse ball is the same thing only um does this have an update method too no only I'm adding this update method wherein it's just moving or where the mouse moves let's add that update method here and let's call this what's it called Mouse ball do update and pass in Mouse pause so now nothing happens why not I'm not sure why not oh because of this already that's really cool right just moving this light around I'm not sure if I made it clear but when I created this mouse ball I'm creating a little Point light and attaching that to the ball so as it moves around you get this cool lighting effect great now um the next thing to do we've got a bunch of geometry we wired up some mouse controls for interaction let's add the physics first thing we'll do is import the Rapier physics engine from this CDN up here next I'm going to initialize the Rapier physics engine define gravity and create a world I don't know why it's lad should be const right and create a world passing in that gravity lastly down here in our animate method we'll call World dot step so that's hooked up not much has changed because none of these objects in my scene have any physics associated with them let's change that I've already created the methods to link the Rapier physics engines rigid bodies to the 3js geometry so let's use that instead I'm going to pass in Rapier and World same here Rapier world and it doesn't look much different let's take a look at that setup and then fix that as well so first let's get the the mouse ball it's the same code as before where I simply create some geometry and a material and a mesh and add it to the and add a light as well but this time I'm also setting up a rigid body the way to do that with Rapier is to pick a rigid body description type um there are four types I'm only familiar with two of them because I'm only using two this K kinematic position based is useful for interactive objects like objects that are going to track the mouse move for example I create a rigid body using that description and I create a collider as well in this case it's a ball collider set to the size of the ball oh times three CU I wanted it to have more of an impact so I I scaled it up lastly I have this update method which is just going to set the mouse rigid body to the mouse position and then update the mesh to that's it real quick looking at the get body same as before only now we're adding a rigid body description this one's Dynamic so it's not controlled by anything but the simulation creating a rigid body with that description and a collider another ball collider and I'm setting the density in this case um the density uh uh we'll play with that in a bit to see what it looks like and then creating a collider there's the geometry setup and lastly I've got this update method I am resetting all the forces and I'm I want to I I I've defined a point at the middle of the scene that everything will be attracted to I'm calculating the position from the current ball to the center of the scene I'm that's the sub I'm like subtracting the position from the center position and then I'm adding Force to that the result of that subtraction and scaling it down a little bit can't remember what true means exactly and then I'm setting the position of the 3j object 3js object as well let's call that update method inside our animate here let's say bodies do 4 each body. update and just like that all the balls are being pulled toward the center of the scene and then they're colliding with this light isn't that just really cool I just think it's so good now it's time to add the postprocessing the thing to note here is this unreal Bloom pass okay here's the bloom pass I'm going to set its threshold and strength and radius I don't know what these are just play with the values until it looks good the last thing to do is with this effects composer that's going to replace our renderer in this method here oh my God it's really really glowy let's turn down the Sprites in the background let's tone those down and then let's dim down the hemisphere light as well Hemi light. intensity is equal to 0.2 instead of one woo how cool is that it's really glowy is it too glowy let's look at this value here maybe it's not glowy enough we could drop the could drop the brightness of the point light if we want set to a two let's set it to a one still looks really good I kind of want to play with the threshold to see if we can make the the glow look more like more glowy this should be a lot more glowy huh it's actually okay it's not that bad I'm going to make this 10 times more glowy that's pretty cool but it's not really what I wanted um something to play with change the color of the wireframe on the on the balls right now they're black let's make them white and that changes things significantly doesn't it um too much that looks kind of cool too there's something too chattery about the the white though what if I dim it down to like I don't know four five six that's pretty cool I think I like the black better what does red look like no it's way too much and that's just interesting but not quite right oh that's pretty cool so some things you can try uh you can tweak the settings all day and and see what else cool you come up with also try adding other shapes like cubes or text geometry or other simple models um try creating a simple game or come up with another interactive physics simulation as always thanks for coming by and please leave a comment below with your thoughts or any suggestions you might have or questions um thanks so much see you next time
