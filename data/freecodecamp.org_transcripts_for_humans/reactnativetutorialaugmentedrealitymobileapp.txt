With timestamps:

00:00 - hello everyone we're going to make a
00:01 - react native augmented reality
00:04 - application
00:05 - with the help of expo and the google
00:07 - poly 3d object library what our app will
00:10 - do is it will display a camera to the
00:13 - user and when they click the plus button
00:15 - they will be able to add a 3d object in
00:19 - the world
00:20 - and they can also search for
00:22 - new objects using the google poly
00:25 - library so right here i'll search for
00:27 - duck
00:29 - and we'll grab something that looks cool
00:32 - and we can swap this out for a penguin
00:36 - or we can look around and maybe
00:39 - put the dog in there
00:47 - all right so the first thing we need to
00:48 - do is open the expo xde and click create
00:51 - new project now i usually choose tab
00:54 - navigation project even if i'm not
00:55 - making a tab based application because
00:57 - it gives you a lot of default files and
00:59 - folders that i find convenient
01:01 - i'm going to name our project which i'll
01:02 - call polysnap and i've already got a
01:04 - folder picked out on my desktop where i
01:07 - want to place my application so i'll
01:09 - click create and this usually takes a
01:11 - couple of minutes so i'll pause the
01:13 - video and return when this is finished
01:14 - loading
01:16 - alright the project has finished
01:17 - creating and one thing i think is a good
01:19 - idea to always do as soon as it started
01:21 - is to run your project on a device or
01:23 - simulator just to make sure that
01:24 - everything got created correctly so i'm
01:25 - going to open the simulator right now
01:28 - and while that's loading i'm going to
01:30 - open up my code in a code editor
01:37 - so just give one second for all this to
01:39 - load
01:55 - all right so i've got my code over here
01:59 - and the simulator is still launching
02:01 - while that's running another thing i
02:02 - want to do is open a terminal window
02:06 - in the project directory so i'll click
02:07 - that
02:09 - and that should give us a terminal
02:11 - window
02:13 - okay and as you can see over here on the
02:15 - right hand side the simulator has
02:17 - launched the application there were no
02:19 - errors everything worked out correctly
02:21 - so the first thing we want to do
02:23 - in this terminal window is install a few
02:25 - packages that we're going to need
02:26 - eventually throughout the app
02:28 - the first set of packages we're going to
02:30 - install have to do with 3js which is a
02:32 - javascript library for rendering
02:35 - graphics so we'll do npm install dash
02:38 - capital s for save and we will give it
02:40 - the three package and expo dash three
02:44 - i'll press enter to install those
02:48 - and while this is installing
02:50 - we'll do a little bit of cleanup of the
02:52 - code over here like i said we did a tab
02:55 - navigation project and it gives you a
02:57 - lot of default stuff but there's a lot
02:59 - of stuff that we won't need and so we
03:02 - can just delete it out so first let's
03:04 - come into the main tab navigator
03:06 - file and we're going to delete all the
03:08 - references to the links and the settings
03:10 - screens
03:13 - so that would be the file references
03:15 - oops
03:16 - here are the actual tabs themselves
03:20 - and down here is where it figures out
03:22 - what icon to use for the different tabs
03:25 - and i'll clean this up just a little bit
03:28 - save that then we can delete the files
03:30 - themselves as they're not being
03:32 - referenced anymore
03:38 - and finally we'll come into the home
03:40 - screen and just delete all this text out
03:42 - because we aren't going to need it so
03:43 - right here i'm going to delete the
03:45 - styles
03:48 - here i'm deleting some functions that
03:51 - this
03:52 - screen is using that we don't need
03:55 - and i'm going to delete everything
03:56 - except for the outermost view
04:01 - and we did delete the container style so
04:05 - instead of that why don't we just give
04:06 - some padding
04:08 - and here we'll put some text that says
04:10 - home screen
04:13 - just to make sure everything's working
04:16 - and we can also delete a few of these
04:19 - components here that we won't be using
04:24 - let's clean that up just a little bit
04:31 - okay and i'll save it the apple refresh
04:33 - i'm going to check on the installation
04:35 - packages
04:36 - looks like it installed correctly and we
04:39 - want to install one more package which
04:42 - is
04:43 - expo graphics so we'll type npm install
04:46 - dash capital s for save and expo
04:49 - graphics and this will give us a
04:52 - component in expo that we can
04:54 - use to render graphics
04:57 - so while that installs i'll minimize
04:59 - that and as you can see on the simulator
05:01 - we've got the home screen
05:03 - shown showing up here
05:06 - so a few more cleanup things i want to
05:07 - do i always delete the layout file out
05:10 - of constants because i never use it
05:15 - and
05:20 - in the components directory i always
05:22 - create
05:24 - i usually delete this styled text file
05:28 - and i always create a folder
05:32 - we got an error over here because we
05:33 - deleted the styled text and
05:36 - it's being referenced right here so i'll
05:38 - just delete that i also don't need the
05:39 - web browser so delete all that and save
05:42 - and we can reload it should work
05:44 - and i always create a new folder called
05:46 - app components
05:49 - and inside of that
05:50 - create a file called index.js which is
05:53 - where we'll reference all of our
05:54 - components that we create throughout the
05:56 - app
05:57 - one last thing we can do since we're not
05:59 - actually going to be making a tab
06:01 - application is come into our main tab
06:03 - navigator and switch this from a tab
06:05 - navigator to a stack navigator so let's
06:08 - import the stack navigator
06:11 - also from react to navigation
06:13 - and just change this to
06:16 - ba stack navigator
06:19 - and
06:20 - here are the options that i was giving
06:22 - to the tab navigator since we have now a
06:25 - stack navigator we won't need those
06:27 - options but we may add some
06:29 - other options
06:31 - as we build the app we'll have to wait
06:33 - and find out
06:37 - and i'll save this
06:40 - and
06:41 - as you can see the tab went away so i
06:43 - think we're ready to start actually
06:45 - building the application
06:52 - okay now we're ready to add the camera
06:54 - to our application so i've got my home
06:56 - screen open and over on the right side
06:58 - i've got my actual iphone streaming
07:01 - the reason for that is because you can't
07:03 - use the camera and a simulator so you
07:05 - need to use an actual device
07:07 - in the home screen we're going to import
07:08 - a few components first let's import expo
07:11 - from expo
07:13 - and then we will import
07:15 - expo three
07:17 - and three from
07:19 - expo three
07:21 - and we will also export import expo
07:24 - graphics from expo graphics
07:27 - and you should recognize these as the
07:29 - packages that we installed when we first
07:31 - created the application
07:33 - now down here instead of rendering the
07:35 - text home screen we're going to
07:38 - return an expo graphics.view
07:44 - which is what the component that allows
07:45 - us to use the
07:47 - device's camera and gives us some
07:49 - augmented reality capabilities
07:52 - so let's give it a style of flex 1
07:57 - and we need to set a few properties on
07:58 - this to get it working the first one is
08:01 - on context create and this is just a
08:03 - function that gets called as soon as the
08:05 - graphics context is created so let's
08:07 - assign that to this dot on context
08:09 - create
08:10 - which is a function that we haven't
08:11 - defined yet but we'll do in just a
08:13 - second
08:14 - we also need to set the on render
08:16 - function which is a function that gets
08:17 - called every time
08:19 - the graphics scene is rendered so we'll
08:21 - say this dot on render
08:23 - and finally to enable it for augmented
08:25 - reality we need to set ar enabled equal
08:28 - to true
08:30 - i'll come up here and add our functions
08:33 - on context create
08:35 - we're going to make that an async
08:36 - function
08:37 - and it takes quite a few arguments
08:41 - one of them is gl which is a reference
08:44 - to the graphics
08:46 - it takes scale width height
08:49 - and the ar session information
08:53 - onrender
08:54 - takes a single argument called delta
08:56 - which is the time difference since the
08:58 - last time the render method was called
09:01 - so let's save that and make sure we
09:03 - don't get any errors
09:08 - and it's reloading over here on my phone
09:12 - while that's loading you need to do a
09:14 - few things to get the
09:16 - uh the 3js scene set up you need to
09:19 - basically have a renderer a scene and a
09:22 - camera
09:23 - and so we'll do that in the on context
09:26 - create so first let's put a little
09:27 - comment that says initialize
09:30 - render
09:33 - and we're going to create a variable
09:34 - called this dot renderer and we're going
09:36 - to set it equal to an expo 3 dot create
09:41 - render and what that does is it takes a
09:43 - gl
09:45 - context and gives you a renderer back
09:48 - we also need to set the pixel ratio
09:53 - to the scale
09:54 - and that just helps us with some sizing
09:56 - constraints and you also need to set the
09:59 - size itself
10:01 - with the given width and height if you
10:04 - don't call these last two things it'll
10:06 - look a little bit
10:07 - weird
10:08 - okay next we should initialize the scene
10:12 - so we'll put a comment there that that's
10:14 - what we're doing and we're going to
10:14 - create this dot scene
10:16 - and that's going to be equal to a new
10:19 - three dot scene
10:23 - and we want to set the background
10:26 - of the scene
10:27 - to the actual
10:29 - augmented reality session which is the
10:32 - camera with whatever
10:34 - types of graphics we put inside of it so
10:36 - we'll say this equals expo three dot
10:38 - create ar background texture
10:42 - and we give it the ar session as well as
10:44 - the renderer that we just created
10:47 - and finally we need to
10:49 - initialize our camera so we'll say this
10:52 - initialize camera and we'll create a
10:54 - variable called this dot camera and that
10:56 - equals expo three dot create ar camera
11:00 - and that also takes the ar session
11:02 - and some of these
11:05 - scaling
11:07 - arguments you can just copy this i don't
11:09 - actually fully understand what it does
11:11 - but there's some documentation on three
11:13 - js's website that explains
11:16 - what these numbers all mean
11:18 - and finally in our render method all we
11:21 - want to do now is say this.render.render
11:25 - and we give it the scene
11:27 - and the camera
11:29 - if we save that and run it we should
11:31 - have an ar session
11:34 - running in our application
11:38 - we'll test it in just a second
11:42 - all right so i'll hold this up you can
11:44 - see
11:44 - uh there's my desk and this is looking
11:48 - through the camera of my phone so
11:50 - we have the camera and everything
11:51 - working we've also got a whole bunch of
11:53 - errors down here in this these yellow
11:55 - boxes
11:56 - and
11:57 - they're a little obnoxious so i'm going
11:59 - to show you how to get rid of them
12:00 - temporarily sometimes you do want those
12:02 - boxes on there
12:05 - because they can give you some useful
12:06 - information but in this case there's not
12:08 - much we can do about a lot of these so
12:10 - if we just set console
12:13 - dot disable yellow box equal to true
12:17 - then those boxes will no longer appear
12:21 - and let's just run and double check and
12:23 - it's nice to have them not on there
12:25 - because we'll be looking into the camera
12:26 - a lot and they just obscure the view
12:29 - all right so holding it up again and as
12:31 - you can see there's no more yellow boxes
12:39 - now we're going to investigate the
12:40 - google poly api which is an api we'll be
12:42 - using to get 3d object information for
12:45 - our app
12:46 - this is an api provided by google and
12:48 - you can find the documentation on
12:50 - developers.google.com poly first thing
12:53 - you need to do is click this button
12:54 - right here to get an api key so go ahead
12:56 - and click that and get your api key and
12:58 - then jump back over to your code and
13:00 - let's go into the constants
13:03 - directory and we will create a new file
13:05 - called api keys dot js
13:10 - and inside of this we will put all of
13:11 - our api keys so we'll export default
13:15 - and create your object here and let's
13:18 - create a property called google poly
13:22 - and put whatever api key you created
13:25 - in this string right here
13:29 - all right i've just added my api key and
13:31 - remember to keep your api keys a secret
13:34 - so that other people can't use them
13:36 - since we're not going to be using the
13:38 - app
13:39 - for a little while while we do this i'm
13:41 - going to go ahead and close my
13:44 - preview of the app right here and let's
13:46 - jump back over to the google poly
13:48 - documentation
13:51 - so it gives us
13:53 - access to 3d objects it'll give us all
13:55 - the 3d object
13:57 - files that we need to render them in our
13:59 - augmented reality app it also give us
14:01 - some screenshots
14:03 - and a few a little bit other information
14:06 - that we might find useful if we come
14:08 - down here to guides we can click poly
14:09 - api
14:10 - and get some more information about it
14:14 - the api as it says here allows you to
14:17 - list assets list your assets or get a
14:20 - specific asset what we want to do is use
14:22 - the list assets api because we're going
14:24 - to allow users to search for different
14:27 - assets and then we'll display whatever
14:29 - they've chosen
14:31 - so just
14:32 - a quick overview of this
14:35 - here's the
14:36 - request that you use for the api and
14:39 - here are some parameters you can provide
14:40 - you can give it keywords which is
14:42 - probably what we'll be using for the
14:44 - search you can specify certain
14:46 - categories like animals or technology
14:49 - you can specify a format if you want
14:52 - only a specific type of 3d object format
14:55 - page size controls how many results you
14:58 - get back from each search
15:00 - and then page token is a way to have
15:03 - different
15:06 - pages of data so if we say that our page
15:08 - size is 10
15:09 - and there's a total of 100
15:11 - results of that search we would need to
15:13 - use the page token to get page 2 and
15:15 - page 3 and so on
15:18 - down here it gives you an example of
15:20 - what the response will look like we'll
15:22 - look at this a little bit more deeply in
15:24 - just a second but the documentation here
15:26 - is pretty good
15:28 - and it would be
15:30 - wise of you to take a look at it
15:33 - another thing you can do is use the
15:34 - google apis explorer right here and if
15:36 - you look up the poly api you can
15:38 - actually test out api calls
15:40 - so we're using the list api so i'll
15:42 - click that and here we can just type in
15:45 - any kind of
15:46 - search parameters that we want so for
15:49 - keywords we could look up duck and click
15:52 - let's set our page size to be five and
15:54 - we'll click execute and it'll actually
15:56 - run this api call
15:58 - and down here
15:59 - gives you an example of what the results
16:01 - would look like it also shows you what
16:03 - the request itself would look like we
16:05 - would just call a git on this url except
16:09 - replace this with our api key
16:12 - and as you can see down here we get an
16:14 - array of assets and each asset has a
16:17 - display name an author a description
16:20 - some information about what is created
16:22 - and then this formats array actually has
16:24 - the
16:25 - 3d object file so there's a dot obj a
16:29 - material file
16:31 - here's some
16:32 - additional files
16:34 - and different formats
16:37 - all right so let's go back over to our
16:39 - code i'll make this a little bit larger
16:41 - so we have some more room
16:42 - and
16:43 - what i want to do is go into the api
16:45 - folder and create a file called google
16:47 - poly
16:49 - js
16:50 - and here we're going to build out a
16:52 - little
16:54 - sample
16:55 - a little class for
16:57 - working with the google poly api
17:03 - so let's do export default class
17:07 - google poly
17:11 - and let's create a constructor and the
17:13 - constructor is going to take the api key
17:15 - so whenever we create a new instance of
17:17 - this class we'll give it the api key and
17:19 - then we'll store it in a property called
17:20 - this dot api key
17:24 - and that allows you to use it if you
17:26 - have a secondary api key or you want to
17:28 - use it in a separate project with a
17:29 - different api key
17:34 - next thing i want to do is create a
17:35 - function
17:37 - called git query url and what that's
17:40 - going to do is take an api key
17:42 - and a few other parameters that we
17:44 - decide we want to use and it will return
17:46 - us the url
17:47 - to perform the query and the url would
17:49 - be something like this so why don't we
17:51 - actually just copy this and paste it
17:53 - into our code and we can look at it as a
17:55 - reference while we're building this out
17:59 - i also want to make this a static
18:00 - function since
18:04 - we're passing in the api key and it
18:05 - doesn't need any access to any member
18:07 - variables at least i don't think it will
18:10 - all right so let's create a variable
18:12 - here called base url that's going to be
18:14 - this
18:16 - this portion of the url that never
18:17 - changes no matter what the parameters
18:19 - are
18:21 - so we'll set that and then we're going
18:23 - to build out a url based on the
18:25 - different parameters that we want to
18:27 - give it so as a
18:30 - review here are all the parameters that
18:32 - are possible and for our application
18:34 - we're going to let users search using a
18:36 - free text search box and whatever they
18:39 - type in we'll just put into the keywords
18:41 - parameter
18:43 - and
18:44 - show them those results
18:46 - so let's make a new variable called url
18:49 - and that's going to be equal to the base
18:51 - url plus
18:53 - key
18:54 - equals
18:55 - and i'm getting this from here it
18:56 - doesn't matter what order you put the
18:58 - parameters and i always start with the
19:00 - api key so i don't forget it so we'll
19:01 - put key equals
19:03 - that plus the api key that we were given
19:06 - in the function
19:09 - and it'll say url plus equal which adds
19:12 - on to the url
19:13 - and parameters should be separated with
19:14 - an ampersand
19:16 - you can also use
19:18 - query parameter building libraries if
19:20 - you want but this one will be simple
19:21 - enough that
19:23 - i don't really mind doing it myself
19:26 - so let's take a look at our parameter
19:28 - options
19:30 - i think
19:31 - for this app we want to set a page size
19:33 - so that we don't load too many all at
19:34 - one time so let's just hard code our
19:36 - page size to 10.
19:42 - and back over here
19:45 - it's got this max complexity parameter
19:48 - which is an enum and it takes
19:50 - medium or simple or complex
19:54 - let's let's hard code it to medium so
19:56 - that we don't get too complicated
19:58 - graphics and
20:00 - and overload our application
20:02 - so we'll set
20:04 - ampersand max complexity
20:06 - equals medium
20:10 - the other thing i want to hard code is
20:11 - the format
20:13 - of the
20:14 - results that we get
20:16 - i only i want to limit these results to
20:18 - obj files
20:20 - the other formats
20:22 - could potentially work but i'm only
20:23 - familiar with objs
20:25 - and so i only want to
20:28 - give users options that have an obj file
20:31 - format
20:32 - so we'll set ampersand format equals obj
20:39 - and
20:40 - let's see
20:42 - we also want to add the keywords so
20:45 - let's pass in keywords into our function
20:50 - we'll say ampersand keywords
20:52 - equals
20:54 - and since the keywords will come from
20:56 - user input you need to make sure that
20:58 - you
20:59 - clean that input
21:01 - and don't allow any sort of
21:05 - unsafe characters to get in so the way
21:07 - you can do that is by calling encode uri
21:10 - component
21:11 - and giving it the
21:13 - passed in
21:14 - parameter and since we're going to
21:16 - support multiple pages we also want to
21:18 - pass in a next page token
21:21 - but this one will be optional since the
21:22 - first
21:24 - very first page won't have a next page
21:26 - token so we'll say if next page token is
21:29 - passed in
21:31 - then we're going to add that to our url
21:33 - and i believe the parameters is called
21:36 - page token
21:37 - so we'll say ampersand
21:40 - page token equals
21:42 - and next page token
21:47 - and finally we will return the url so
21:49 - this function should give us a query url
21:52 - with a given api key keywords and an
21:55 - optional next page token
22:00 - and
22:01 - another thing i just thought of just to
22:02 - be safe if the keywords for some reason
22:04 - were blank we probably don't want to say
22:07 - keywords equals blank so why don't we
22:09 - put this around a an if statement as
22:11 - well so we'll say if keywords are passed
22:13 - in
22:15 - then we will add the keywords to that
22:17 - parameter
22:20 - all right
22:22 - now i want to make another function that
22:23 - actually gets the results so why don't
22:25 - we call it get search results
22:29 - and this will take a
22:32 - keywords parameter
22:34 - and a next page token this one's not i
22:37 - don't want to make this one static
22:38 - so in that case we'll have access to
22:40 - this dot api key but we'll still need
22:42 - keywords and next page token so we can
22:44 - build our query url what this function
22:46 - is going to do is it's going to build
22:47 - the query url
22:49 - and then call the api and return the
22:52 - results so let's first get the url so
22:57 - we'll call the static function via
22:59 - google poly
23:00 - dot get query url
23:03 - and the first argument is api key which
23:05 - we have right here as this dot api key
23:08 - the next two are keywords and next page
23:10 - token
23:16 - so now we have the query url that we
23:18 - need to use and since it's just a basic
23:20 - get request which you can tell from the
23:22 - api explorer right here we can just use
23:25 - fetch to get the results so we'll call
23:27 - fetch we'll say return fetch
23:30 - give it the url
23:31 - and you need to usually do these kind of
23:35 - thing where you convert it to json so
23:36 - we'll say then dot then function
23:39 - response
23:40 - will return response.json
23:44 - and then another dot then
23:47 - which has the data
23:48 - itself
23:50 - and
23:52 - what we want to do with the data
23:54 - is
23:57 - take a look at the data that we're given
24:00 - and it gives gives us an array called
24:01 - assets let's see if it gives us anything
24:03 - else if we scroll all the way down to
24:04 - the bottom
24:07 - it's also got a next page token and a
24:09 - total size which i think is the total
24:11 - number of results
24:13 - so i think for this function all we want
24:15 - to do is return the array of assets and
24:18 - later on we'll come back and grab the
24:19 - next page token and figure out how to
24:22 - handle our pagination
24:25 - so we don't want to return the whole
24:27 - data we only want to return data.assets
24:30 - and since we're handling this with
24:31 - promises the way we should do that is
24:33 - return promise
24:35 - dot resolve data dot assets
24:40 - so now when we call this we can use the
24:42 - normal promise syntax and we'll be given
24:44 - the data.assets
24:50 - so that should be enough for us to test
24:52 - it out so let's go back to our home
24:54 - screen
24:55 - and we want to import
24:58 - google poly
24:59 - from
25:01 - uh
25:02 - it was an api google poly
25:06 - and remember we need to go up one level
25:07 - because we're currently in the screens
25:09 - folder
25:11 - now let's create a constructor here
25:15 - and remember you always need to call
25:16 - super props
25:18 - and let's create an instance of the
25:19 - google poly
25:21 - api class that we just made so say this
25:24 - google poly
25:26 - equals new google poly
25:28 - and we need to pass in the api key which
25:31 - we have in our constant slash api keys
25:34 - file which we also need to import so
25:37 - right here we will import api keys from
25:40 - dot dot slash constants slash api keys
25:44 - now back down here we'll call api keys
25:47 - dot google poly
25:49 - and we'll save that
25:51 - and
25:53 - let's check the expo
25:56 - window right here
25:59 - when we do console.log some
26:01 - messages will appear down here that we
26:02 - can take a look at
26:04 - so i'll make this a little bit smaller
26:06 - again
26:08 - now that we've initialized our google
26:10 - poly
26:11 - object
26:13 - we can call
26:15 - this dot google poly dot get search
26:18 - results which is the function we just
26:19 - created
26:20 - and remember it takes a keywords and an
26:23 - optional next
26:24 - page token
26:27 - parameter so for our keywords we will
26:29 - give it duck
26:30 - and next page token since we don't have
26:32 - one because it's the first page we'll
26:34 - pass in a blank and then we can say dot
26:36 - then function and remember it's giving
26:38 - us the assets
26:41 - and inside of here we should have our
26:42 - assets let's just double check by doing
26:44 - a console.log assets
26:47 - and if we refresh
26:50 - and i think i may need to run it on my
26:52 - phone so just one second
26:59 - yeah it closed out so i'm going to scan
27:02 - it on my phone
27:04 - and all it's going to do is load the app
27:06 - which should go straight to the home
27:08 - screen which we'll call our home home
27:10 - screen constructor
27:11 - it'll generate the google poly object
27:14 - call get search results
27:16 - and
27:18 - give us the assets and i've just
27:20 - realized that i made a
27:22 - typo if i come back over here
27:25 - it's saying that i spelled keywords
27:26 - wrong some oh here it is okay i
27:28 - accidentally misspelled keywords right
27:29 - here so i need to fix that
27:31 - and rerun
27:32 - it okay so the simulator has launched
27:36 - and as you can see over here it's it
27:37 - tells me that it can't run opengl in the
27:40 - simulator that's what we expected but
27:41 - all we really care about is the console
27:44 - and as you can see right here it has
27:45 - printed out a bunch of json data which
27:49 - is the data from the api call and if you
27:52 - don't believe me just as a double check
27:55 - i'll pull this over here and i'll reload
27:57 - the application
27:59 - by using the command plus r button it's
28:03 - going to relaunch and here we go here's
28:05 - all of our asset data
28:14 - okay so one thing that we're going to do
28:16 - that i think would be convenient is
28:18 - let's take a single asset
28:20 - and copy that data into a file so we can
28:23 - use that as a reference as we're
28:25 - building the app and we don't have to
28:26 - constantly be calling the api
28:28 - so there's a few ways we can do that the
28:32 - way that i want to do it is just grab an
28:34 - asset here we'll just say assets zero
28:36 - and we'll call
28:39 - we'll create a variable called json and
28:40 - we'll say json.stringify
28:44 - and we'll give it the first asset and
28:46 - what that's going to do is take this
28:47 - asset and convert it to a json string
28:50 - and then we're just going to display
28:51 - that string in the console
28:54 - and we'll just from the console copy and
28:56 - paste it somewhere so i'll save this
28:58 - i'm going to clear my console here
29:01 - and as you can see we've got that json
29:04 - data in a big string so we'll just copy
29:07 - this
29:08 - and why don't we put this in our assets
29:10 - folder so we'll come into assets we've
29:12 - got fonts and images let's create a new
29:15 - file called i mean oh shoot
29:18 - a new folder
29:20 - called objects
29:23 - and since we were searching for ducks
29:25 - i'll assume that the first asset was a
29:27 - duck so let's create a new
29:30 - file called
29:32 - duck
29:33 - object dot json
29:36 - and inside of here we'll paste that
29:38 - string and
29:41 - i'm sure there's a way to format it
29:43 - automatically for you in this code
29:46 - editor but i don't know how to do it so
29:47 - i'm just going to
29:50 - put a few break line breaks in here
29:53 - not for the whole string but just so we
29:55 - can look at a few things in here there's
29:57 - another property called thumbnail
29:59 - somewhere in here there it is
30:01 - that now we can kind of read this
30:04 - and i think the data that we really need
30:06 - is thumbnail formats
30:09 - and probably the display name and the
30:11 - author name
30:12 - and it says turkey day happy turkey day
30:16 - turkey so
30:19 - this object may actually be a turkey so
30:21 - why don't we just rename it to turkey
30:23 - object
30:28 - dot json
30:32 - all right so just as a
30:34 - way of checking that our
30:37 - object is
30:38 - working properly and that we got all the
30:40 - data we wanted let's try to display the
30:42 - thumbnail
30:44 - as an image in our app
30:46 - so if we come over here we can see that
30:48 - the turkey has a property called
30:50 - thumbnail
30:51 - let me just pull this over here and the
30:53 - thumbnail object actually has a few
30:55 - properties one's called relative path
30:58 - one is called url
31:00 - and one is called content
31:02 - type format some of the stuff too so i
31:06 - think all we need to do is grab the url
31:08 - out of the thumbnail property and that
31:10 - should be
31:12 - in a format that we can display in an
31:14 - image
31:15 - let's come back over to our home screen
31:18 - and let's import
31:21 - turkey object from
31:24 - assets slash objects slash turkey
31:28 - object.json
31:30 - that should give us access to the turkey
31:33 - object data save that
31:35 - and save that
31:37 - and down here in our render method
31:39 - temporarily we will
31:41 - comment out the
31:44 - expo graphics.view
31:46 - and instead we'll return
31:48 - a normal view
31:51 - with a flex one
31:54 - and inside of here we will put an image
31:58 - and let's double check that we have
31:59 - image and our imports we don't so we
32:02 - need to import image from react native
32:05 - so we can use it
32:08 - and image takes a source property
32:10 - with a uri property and the uri in our
32:13 - case will be turkey object dot thumbnail
32:17 - dot url
32:19 - and keep in mind that came from here's
32:22 - the object we want to get the
32:23 - thumbnail.url
32:25 - property
32:27 - and we also need to set a width and
32:29 - height so let's give it a style we'll
32:31 - say width of 150 and height of 150
32:37 - and let's save that and
32:40 - hopefully we won't have any errors
32:43 - and there you go there's our thumbnail
32:45 - this is
32:46 - what the 3d object should look like it's
32:48 - not the 3d object itself it's just a
32:50 - thumbnail or screenshot
32:52 - but
32:53 - this is what we can expect once we've
32:54 - loaded the 3d model
32:57 - so let's comment this out in case we
32:59 - want to use it later
33:01 - and
33:03 - uncomment this section so we can go back
33:04 - to having our camera
33:12 - all right what we're going to do now is
33:13 - allow users to search for any kind of 3d
33:15 - object they'd like rather than having
33:17 - the turkey hard-coded in
33:20 - as you can see i'm running the simulator
33:22 - over here on the right because we won't
33:23 - be needing the camera for a while
33:25 - so in the home screen i'm going to come
33:27 - down to the render function and just
33:29 - temporarily we're going to add a view
33:30 - where we can do some experimenting with
33:32 - our ui and once we're happy with the ui
33:34 - we will integrate that into the entire
33:36 - app so i'm just going to return a blank
33:39 - view
33:39 - we'll give it a style with some padding
33:41 - on top
33:44 - and save that and make sure
33:46 - we don't get any errors
33:48 - since we're using us we're going to have
33:50 - a search component we're going to need a
33:51 - text input to allow users to type in the
33:54 - search that they'd like to do so up in
33:55 - our imports we will import text input
33:58 - from react native
34:00 - and back down here in our render method
34:02 - let's add a text input
34:05 - and let's also add a button that allows
34:07 - them to perform the search so the title
34:10 - of the button will be search
34:11 - and on press will be this dot on search
34:14 - press
34:16 - and that
34:17 - the text input will give a value equal
34:19 - to this dot state dot
34:21 - search query
34:23 - and on change text we will say this dot
34:26 - on search change text
34:28 - and we'll need to implement these
34:30 - functions now so let's add them right
34:32 - here
34:33 - on search change text
34:35 - we'll take a text as an input
34:37 - and we'll just call this dot set state
34:39 - and we'll set search query
34:41 - equal to the text that we're given
34:44 - and the on search press function
34:46 - will look like this but we'll implement
34:48 - this in just a second
34:50 - we also want to go ahead and add search
34:52 - query to our state so let's scroll up to
34:54 - the constructor here
34:56 - and we don't have a state yet so we'll
34:58 - say this.state equals and we'll give it
35:00 - a property called search query which
35:03 - starts off as a blank
35:06 - while we're here we can go ahead and
35:07 - delete this code as we don't need it
35:09 - anymore
35:10 - and save and reload
35:14 - all right the text input is a little bit
35:15 - difficult to see so let's give it some
35:17 - style and we'll add a little border
35:19 - around it
35:22 - so let's add a new line here
35:25 - say style equals border width
35:28 - of one
35:31 - and also add a placeholder
35:34 - that says search
35:39 - let's also add
35:41 - set the height to 40.
35:46 - okay so we've got a search box here and
35:48 - a search button it doesn't look great
35:50 - but we'll make it look a little nicer
35:52 - later on
35:54 - now what we want to do is let's create a
35:56 - component
35:57 - for displaying our results so if you
35:59 - remember down here we had this image
36:02 - of the turkey object let's put that in
36:05 - here and take a look at it again
36:09 - and it looks pretty nice but i think we
36:11 - also want to add the author name and the
36:13 - display name of the object and whenever
36:16 - the user searches for something we'll
36:17 - show a
36:19 - table filled with these objects which
36:22 - shows the image and the author's name
36:24 - it's important to add the author's name
36:25 - because the objects are licensed under
36:28 - creative commons and you need to give
36:29 - attribution to the author
36:31 - and the display name is good just so
36:34 - people might have a better idea of what
36:36 - the actual object is
36:40 - all right so let's come over to our
36:41 - components folder
36:43 - and open up app components and let's
36:45 - create a new file we'll call this google
36:48 - poly
36:49 - asset dot js
36:51 - and we're going to create a new
36:53 - component so let's import
36:55 - react from react
36:57 - i'm going to import
36:59 - view text and image we might need a few
37:02 - a few more later
37:03 - but we know we need an image to display
37:05 - the thumbnail and some text to display
37:07 - the author name and the display name and
37:08 - a view to hold everything
37:10 - so let me spell import correctly
37:13 - and from react native and then we will
37:15 - export default class google
37:19 - poly asset which extends a react dot
37:22 - component
37:23 - it's going to need a render method which
37:26 - will just return a view for now
37:30 - fill that in later but first let's come
37:32 - into index.js
37:34 - and let's import google
37:37 - poly asset from
37:39 - google poly asset and then export google
37:42 - poly asset
37:44 - all right now we can access google poly
37:46 - asset and other files
37:48 - save that and in our home screen we will
37:51 - import google poly asset
37:54 - come down here import google
37:58 - poly asset from
38:01 - components slash app components
38:05 - save that
38:06 - reload
38:08 - now our google poly asset
38:10 - will take as a property
38:12 - the asset object so
38:14 - let's make a default props object
38:19 - and we'll say asset which we will
38:21 - initialize to a blank object
38:24 - and that's kind of a reminder that this
38:26 - needs to take an asset as a property
38:29 - in our render method now we will return
38:32 - a view
38:39 - and inside of this view we'll put all
38:40 - the
38:42 - thumbnail and text
38:44 - stuff that we need for the asset let's
38:46 - flip back to the home screen
38:48 - and scroll down to our image right here
38:53 - and just copy and paste this so we don't
38:55 - need to retype it
38:57 - and we'll put this in our view
38:59 - and instead of source being the turkey
39:02 - object.thumbnail.url
39:04 - it's not going to be the property
39:06 - asset that we pass in so we'll say
39:08 - this.props.asset.thumbnail.url
39:15 - if we wanted we could move these styles
39:17 - into a style sheet so why don't we go
39:19 - ahead and do that now we will import
39:21 - style sheet
39:22 - from react native and down here we'll
39:24 - say cons styles equals
39:26 - stylesheet.com
39:29 - and we'll say
39:30 - thumbnail
39:32 - has a width of 150 and a height of 150.
39:37 - and we'll delete these styles out and
39:39 - instead say styles.thumbnail
39:45 - save that
39:46 - now why don't we try using the google
39:48 - poly asset instead of this image right
39:50 - here
39:51 - to make sure that it's working so we'll
39:53 - add a google poly asset and the asset
39:56 - will be turkey object
40:00 - so if we did everything correctly we
40:01 - should see the same thing on the screen
40:03 - once we delete this but it will now be
40:05 - inside of our google poly asset
40:07 - component rather than the image
40:11 - and we have an error here
40:14 - so let's double check i think the error
40:16 - is that we didn't put this in brackets
40:18 - when we imported it so
40:20 - you should import it correctly
40:22 - and there you go there's our thumbnail
40:24 - of our turkey
40:28 - now
40:31 - one thing i wanted to do with this is i
40:33 - wanted to round off the corners just a
40:35 - little bit i think it would look a
40:36 - little nicer and the way you can do that
40:38 - is by setting a border radius let's give
40:39 - it a border radius of 10 and see how
40:41 - that looks
40:43 - okay looks pretty good and we can add
40:45 - some padding on the side later if we
40:46 - want to
40:48 - let's go ahead and add the display name
40:50 - and the author name down here so we'll
40:53 - just add some text components
40:55 - that one will put the display name
40:58 - and here we'll put the author name let's
41:00 - give them each a style called
41:02 - styles.displayname
41:06 - and
41:09 - styles.author name
41:11 - come down here and
41:13 - display name
41:17 - and author name
41:19 - and i think what i would like is for the
41:21 - display name to be bold and the author
41:24 - name to be normal so we'll put font
41:26 - weight
41:28 - is bold
41:29 - and we don't need to put anything in
41:31 - author name because by default it will
41:32 - be
41:34 - normal
41:35 - so let's go back to our turkey
41:37 - object.json reference
41:39 - and figure out what the property names
41:41 - are and they're just called display name
41:43 - and author name so we should be able to
41:45 - just add in this dot
41:47 - oops
41:49 - this.props.asset.displayname
41:52 - make sure to put it in brackets
41:54 - and this.props.asset.authorname
41:57 - and if we save it we should now see our
42:00 - text below the image
42:02 - great
42:04 - let's also put a style on our view
42:07 - called styles.container
42:13 - and
42:14 - let's also align our text using the text
42:18 - align property to be in the center
42:21 - and
42:24 - maybe that's not how we do it maybe we
42:26 - need to put a line items here center
42:33 - okay so everything's centered there
42:37 - we can delete that if
42:44 - all right so now we've got a component
42:45 - we can use to display our search results
42:48 - it'll look like this
42:49 - and
42:50 - actually we want to do one last thing i
42:51 - think what i'd like to do is have users
42:53 - be able to click on
42:55 - the asset
42:57 - so let's add a touchable
42:59 - opacity import from react native and
43:02 - let's surround the whole thing instead
43:03 - of a view we'll surround it with a
43:05 - touchable opacity
43:10 - and touchable opacities need an onpress
43:12 - property so for onpress we'll say
43:14 - this.props.onpress
43:16 - and in our default props we will
43:18 - initialize onpress to be a function that
43:21 - doesn't do anything
43:22 - and this serves as both a reminder that
43:25 - you should pass in an on press property
43:27 - and it helps to prevent crashes in case
43:30 - somebody forgets the on press property
43:32 - when it tries to call this it'll just
43:33 - call a function that doesn't do anything
43:35 - rather than crashing
43:37 - so save it
43:38 - and try clicking on it as you can see
43:40 - the opacity changes so it gives the user
43:42 - an indication
43:44 - that it was clicked on
43:46 - so that should be all we need to display
43:47 - our search results
43:54 - all right let's return to our google
43:56 - poly class we were working on earlier
43:58 - and make a few adjustments to it that
44:00 - can make the searching process a little
44:02 - bit more convenient for us
44:04 - i'll switch over here this was the
44:06 - function get three model that we were
44:08 - working on to get the 3d model which
44:10 - will collapse now because we'll be
44:11 - working with that and as a quick summary
44:13 - we have two functions in our class one
44:15 - called git query url which just gives us
44:17 - the
44:18 - url that we can use to pat
44:20 - to call the api and get search results
44:23 - which takes keywords and a next page
44:25 - token and returns us the results of the
44:27 - api in the form of promise
44:31 - when users click search they're going to
44:33 - be given the first page of data which
44:35 - for us will be 10 results because we've
44:36 - hard coded our page size to be 10. i
44:39 - also want a button down at the bottom
44:41 - called load more which when they press
44:44 - will
44:45 - load the next 10 results using our next
44:47 - page token
44:49 - and what i'm going to do for my
44:50 - application is just concatenate all the
44:52 - results into one big array and show them
44:54 - all as many times as they click
44:57 - load more
44:59 - that may not be ideal for your
45:00 - application you may only want to show 10
45:02 - results at a time or 20 or however many
45:04 - and implement some sort of pagination
45:06 - scheme so feel free to make
45:08 - modifications as you need for your
45:10 - application
45:12 - since i'm going to have all the results
45:14 - in one big array it makes sense to keep
45:17 - track of that array in our class so i'm
45:19 - going to add a new property called this
45:21 - dot current results which i'm going to
45:22 - initialize to a blank array
45:25 - i'm also going to track the next page
45:27 - token
45:29 - as a member variable and i'm also going
45:32 - to track the keywords as a member
45:34 - variable
45:36 - so instead of get search results taking
45:39 - in keywords in a next page token we're
45:41 - actually going to pull it from the
45:43 - member variables here so we'll say this
45:45 - dot keywords and this dot next page
45:47 - token
45:50 - and down here when we receive the
45:51 - results instead of returning them as a
45:54 - promise we're going to append them
45:56 - to our current results array
46:01 - so the way that we can do that is
46:04 - setting
46:05 - this dot current results
46:08 - equal to this dot current results dot
46:11 - concat
46:12 - data.assets
46:16 - and that will concatenate the results of
46:18 - the api to our current array
46:21 - let's also
46:23 - set our next page token
46:25 - to the next page token that we're given
46:27 - which is data dot next page token
46:32 - and we can actually keep our promise
46:33 - here to return the
46:35 - results of this specific call if we want
46:39 - and so users will be able to get the
46:40 - next 10 results from this promise
46:44 - or they can get all the results by just
46:45 - calling their instance of google poly
46:47 - dot current results
46:51 - now we need a way to set the keywords
46:53 - so that when git search results is
46:55 - called it actually has some keywords so
46:57 - let's make a new function right here
46:59 - called set
47:00 - search params and it will take one input
47:03 - of keywords
47:07 - and what this function will
47:09 - when it will be called as whenever the
47:10 - user clicks search so if the user types
47:13 - in
47:13 - turkey and click search what we wanted
47:15 - to do is clear out all the existing
47:17 - results
47:18 - all of the existing next page token
47:21 - stuff
47:22 - and start over with a brand new search
47:24 - of turkey
47:25 - so we're going to do is set this dot
47:26 - current
47:28 - results
47:30 - equal to a blank array so any results
47:32 - that are already in there are wiped out
47:34 - this dot next page token
47:36 - is going to be set to blank
47:38 - and this dot keywords is set to the
47:41 - input keywords
47:43 - so how the ui is going to work is the
47:44 - user will type in their search result
47:46 - here their search query here they'll
47:49 - click search which we'll call set search
47:51 - params and reset all of our member
47:53 - variables
47:54 - then it will call get search results
47:56 - which is going to search based on the
47:58 - keywords that are given and the next
48:00 - page token which for the first page will
48:02 - be blank
48:03 - that's going to call the api
48:06 - grab our results and append them to our
48:08 - current results array which is currently
48:10 - blank
48:11 - it's going to set our next page token
48:13 - and it will return a promise with the
48:16 - assets for just that query
48:18 - then if the user was unsatisfied with
48:20 - the first 10 results they can click the
48:22 - load more button which we haven't added
48:23 - yet and we'll call git search results
48:25 - again
48:26 - which will run the query
48:28 - append the next 10 results to our
48:30 - current results array set the next page
48:33 - token and
48:35 - return the results 11 through 20.
48:41 - so let's save that
48:43 - and give it a shot
48:47 - all right so let's flip over to our home
48:48 - screen and try to implement the
48:51 - new changes to the api
48:53 - in our ui so
48:55 - we talked about having a load more
48:57 - button so why don't we go ahead and add
48:58 - that let's come down here to where we've
49:01 - got our search button let's add another
49:03 - button
49:04 - called
49:05 - load more
49:08 - and when it's pressed it will call this
49:10 - dot on load more press
49:13 - which we need to implement so we'll say
49:15 - on load more
49:18 - press
49:21 - and we've now got two buttons that we
49:23 - need to implement so as we said when
49:26 - search press when search is pressed
49:28 - we're going to grab the
49:31 - text out of the search box and call
49:35 - set search params
49:36 - so
49:38 - let's get the text which is equal to
49:40 - this.state.search query
49:43 - instead of calling it text one we call
49:44 - it keywords
49:47 - and we'll say this dot google poly which
49:49 - is our instance of the google poly class
49:52 - dot set
49:53 - search params and we'll give it keywords
49:57 - so now we have set our search params
49:59 - we've wiped out any results that may
50:01 - have already been there
50:03 - and set our keywords now we want to
50:05 - actually
50:07 - call git search results so we'll say
50:10 - this dot google poly dot
50:13 - get search results
50:16 - it takes no inputs now
50:18 - but it returns a promise
50:20 - so
50:22 - say then function with assets
50:25 - and we can do whatever we want with our
50:27 - assets here
50:31 - but i think what we're going to do is
50:33 - instead of
50:34 - get using these assets we're going to
50:36 - use
50:37 - this dot google poly
50:39 - dot current results
50:41 - which is going to have all the results
50:43 - of every query
50:46 - that we run
50:47 - so let's come
50:49 - up to our constructor
50:51 - and let's add a new state parameter
50:53 - called current results
50:56 - which is initialized to a blank array
51:00 - and whenever the query returns we're
51:02 - going to set
51:04 - state.currentresults to
51:05 - [Music]
51:07 - poly the
51:07 - current results
51:09 - and setting the state will trigger a
51:11 - re-render with the new results
51:13 - so up here we're going to say this dot
51:15 - set state
51:17 - current results is going to be equal to
51:19 - this dot google poly dot current results
51:23 - and since we're referencing this inside
51:25 - of a function we need to bind the this
51:27 - context so we'll add that bind this
51:30 - right here
51:34 - okay and load more press should do
51:36 - almost the exact same thing except it
51:38 - won't reset our keywords or our search
51:40 - parameters because
51:42 - we want to keep those the same but it
51:44 - will call get search results to get the
51:46 - next page worth of data
51:48 - so let's just copy and paste that down
51:50 - here you could factor this out into a
51:52 - separate function if you'd like
51:54 - i don't think it's necessary in this
51:56 - particular case
51:57 - let's add a console.log here
52:01 - with our assets just to make sure that
52:03 - we're actually getting data
52:06 - and before we test it out we do need to
52:08 - make one slight change back in our
52:10 - google poly class
52:11 - again since we're referencing this
52:13 - inside of a function here we need to
52:15 - bind the this context
52:18 - by calling dot bind with this
52:21 - otherwise we wouldn't be able to access
52:23 - this dot current results or this dot
52:25 - next page token
52:27 - so let's save
52:28 - and try out our new search
52:31 - open up the expo xde
52:34 - and we'll type in turkey
52:37 - do a search
52:38 - and as you can see there are some
52:40 - results
52:42 - and if we click load more
52:46 - i believe we got some more results
52:50 - so that's just a quick check to
52:53 - make sure that there weren't any huge
52:54 - errors let's now actually display the
52:56 - results
52:58 - on the screen
53:01 - all right so back in our home screen
53:03 - to display the results we're just going
53:05 - to
53:06 - display a google poly asset for every
53:08 - asset in our this dot state dot current
53:11 - results
53:13 - so one way we can do that is
53:16 - by
53:17 - using a loop or we can also use the map
53:19 - function
53:21 - so let's make a function right here
53:22 - called
53:23 - render current
53:25 - results
53:29 - and what this is going to do is we'll
53:31 - use the map function to map all of our
53:33 - current results to a google poly asset
53:35 - component so we'll say return
53:37 - this.state.currentresults.map
53:41 - now take a function with an asset and an
53:44 - index
53:46 - and we will return
53:49 - a google poly asset whose asset property
53:53 - is equal to the asset that we're
53:55 - currently mapping and since we're
53:58 - going to have multiple of these we need
53:59 - to set a key otherwise you'll get a
54:01 - yellow box error and we'll just set the
54:03 - key equal to the index
54:07 - and instead of displaying our turkey
54:09 - object we're going to call this dot
54:11 - render
54:12 - current results
54:15 - and when we make a
54:17 - small modification here which is we'll
54:20 - we'll check the length of this dot state
54:21 - that current results and we'll say if
54:23 - this dot state that current results dot
54:26 - length equals zero
54:29 - then we're just going to return text
54:30 - that says no results
54:33 - that way we know that we don't have any
54:35 - results
54:36 - and if there are results in there we'll
54:39 - call our map function
54:41 - so let's save that and i just realized
54:43 - that we didn't call the function here so
54:45 - add the parentheses there and call it
54:47 - save it again okay so we've got no
54:49 - results
54:50 - let's search for turkey
54:52 - click search
54:54 - and there you have it we have our
54:55 - results
54:56 - and i'm unable to scroll
54:58 - so we need to change this to a scroll
55:01 - view to allow scrolling
55:03 - save it again and try it one more time
55:08 - click search
55:11 - and there you go we have a list of 10
55:14 - results related to turkeys
55:16 - if you take a look at the last one it's
55:18 - this bird with a red head
55:21 - let's load more
55:23 - and make sure that we got 10 more okay
55:25 - so that was our previous last one and
55:27 - here 10 more turkeys actually it's only
55:29 - three so that must have been the end of
55:32 - the
55:33 - results for turkey
55:35 - let's try changing the results again to
55:37 - dog and click search
55:41 - and
55:44 - well the first two results are foxes and
55:46 - that's one thing i've noticed is this
55:49 - the keywords query gives you some
55:53 - sometimes unexpected results as you can
55:54 - see there's a lot of animals on here
55:56 - that aren't actually dogs
55:58 - i'm not really sure what's going on with
56:00 - that but
56:02 - the api is working correctly it's just
56:04 - kind of giving you strange results
56:14 - all right so let's try to make our
56:16 - search results look a little bit nicer
56:18 - we'll probably come back to this later
56:20 - on and clean it up a bit but we can do a
56:22 - couple of things right now
56:24 - for one i think we can actually fit two
56:26 - results per row
56:28 - and i also would like to move the load
56:30 - more button down to the bottom so when
56:32 - you've scrolled down here you can click
56:34 - load more right there rather than having
56:36 - to scroll back up
56:37 - and we may make a couple of
56:39 - modifications to the text input
56:43 - so let's start off with adding two
56:45 - results per row and to make things a
56:48 - little bit easier for us since we may be
56:50 - refreshing and researching over and over
56:52 - again
56:53 - let's initialize our search query to be
56:56 - turkey
56:57 - so that every time we reload
56:59 - we don't have to type in a search query
57:01 - and click search we've got turkey right
57:02 - there we can go ahead and click search
57:04 - and get our results
57:07 - all right
57:08 - so to get two per row we're going to
57:12 - update our render current results
57:14 - function
57:15 - we still want the
57:18 - no results
57:19 - text if we have no results
57:22 - but let's try to put that in the center
57:27 - instead so let's add a view here
57:30 - and we'll say styles flex 1 align items
57:33 - center
57:38 - and end of the view so now the text will
57:40 - look a little bit nicer when there are
57:41 - no results
57:43 - and down here instead of using the map
57:45 - function let's create an array
57:48 - called results we'll put all of our
57:50 - google poly assets and let's do a loop
57:52 - for var i equals zero i
57:55 - less than this dot state that current
57:57 - results dot length
57:59 - and i plus plus
58:03 - what this is going to do is it's going
58:04 - to grab two results at a time put them
58:07 - into a view with a flex direction of row
58:10 - and
58:12 - and show all those results so first
58:15 - thing we should do is we should check if
58:16 - we're on the very last result
58:19 - and we don't have an extra one then we
58:21 - don't want to try to add two so let's
58:23 - check if r equal if i equals this dot
58:26 - state dot current results dot length
58:29 - minus one
58:31 - then we're just going to return a google
58:33 - poly
58:34 - asset whose asset is now equal to this
58:38 - dot state that current
58:39 - results
58:42 - i
58:44 - and whose key is now i
58:48 - and we'll break from the function
58:50 - but if we're not on the last one which
58:52 - means we do have at least one more
58:55 - we can
58:57 - i'm sorry this should not be returned
58:59 - this should be results
59:02 - dot push because we're adding to the
59:04 - results array
59:06 - and then down here after the loop we're
59:07 - going to return our results like that
59:11 - we'll just delete the map function right
59:13 - there
59:15 - okay so now in this section of code we
59:17 - know that we've got at least one more
59:18 - result so we'll say
59:21 - results.push
59:23 - and in this case we're going to push a
59:24 - view
59:26 - which has a style of flex direction row
59:33 - inside of that view we're going to have
59:34 - two google poly assets one for the
59:37 - current result
59:39 - one for the next result so we'll say i
59:42 - here and i plus one
59:44 - plus one
59:50 - and
59:51 - since we're looking at two results at a
59:53 - time we want to change our loop to be i
59:56 - plus equals two so instead of going up
59:59 - by one each iteration will go up by two
60:02 - each iteration
60:05 - and that should be all let's save and
60:06 - take a look at what our results look
60:08 - like now
60:10 - one thing i do want to do is turn off
60:12 - the disable yellow box
60:15 - feature so that if we do get any errors
60:17 - we'll see them let's refresh
60:21 - and we'll click search to get our search
60:22 - results
60:23 - and we're still getting this key error
60:27 - but we are getting two results per page
60:29 - it looks like
60:32 - so let's figure out what's wrong with
60:34 - this error first
60:36 - i believe it's because the view doesn't
60:38 - have a key
60:40 - so we'll set the key here equal to let's
60:43 - say
60:44 - row
60:45 - plus i
60:51 - okay we've eliminated the error
60:53 - we've got two results per
60:55 - row
60:56 - but we want to center these a little bit
60:58 - and maybe add some padding in between
61:00 - them so to center them let's put our
61:03 - results into a view so we'll say return
61:06 - view with the style flex 1 and align
61:11 - items
61:12 - center
61:16 - and inside of that view we'll put our
61:18 - results
61:19 - get rid of that
61:21 - and to add some padding in between these
61:22 - will go into the google poly asset
61:25 - component and in our container style
61:27 - let's just add some padding of about 10.
61:30 - so save that
61:32 - save our home screen
61:33 - may have to refresh again
61:37 - and click search
61:38 - and there you go we've got some padding
61:40 - in between rows
61:42 - two results per row everything's looking
61:45 - good there
61:47 - so we'll collapse this because it looks
61:50 - good right now
61:51 - and we said we're going to put the load
61:52 - more button towards the bottom that's
61:55 - easy to do we'll just
61:56 - cut this
61:58 - and paste it right below the results
62:04 - and if we click search
62:06 - we've got our results with a load more
62:08 - button down here and for some reason
62:10 - it's getting cut off
62:12 - at the end
62:13 - so why don't we just add a view here
62:15 - with
62:17 - some padding on the top just to give us
62:19 - some extra space
62:21 - so we can see everything
62:23 - click search
62:24 - load more
62:26 - great
62:27 - now something i just noticed is we're
62:29 - getting a load more button even if we
62:31 - don't have any results and i actually
62:32 - would like to hide that button until we
62:34 - have some initial results so an easy way
62:36 - to do that is with the ternary operator
62:38 - let's take our load more button and put
62:40 - it into brackets
62:42 - and give us some space here
62:44 - and what we'll do is we'll say
62:46 - if this dot state
62:48 - dot current results dot length equals
62:51 - zero
62:52 - we're just going to show a blank view
62:55 - but if it's not zero we're going to show
62:56 - the load more button
62:59 - so we'll save and refresh that now we're
63:01 - not getting the load more button once we
63:03 - have our initial results we've got a
63:04 - load more button there and we have some
63:06 - padding down below
63:10 - now for one last ui change let's
63:14 - let's update our text input a little bit
63:16 - and make it look a little nicer
63:18 - so i'll come to the text input here
63:20 - we've already got some properties
63:22 - i want to set the auto capitalize equal
63:25 - to false
63:27 - actually i think it takes a string so
63:29 - let's set it to none
63:33 - and for the style i want to add some
63:36 - padding
63:38 - of some margin on the horizontal
63:42 - of 10. let's refresh and see how that
63:45 - looks
63:46 - okay so it added a little bit of spacing
63:48 - here and let's also give it a border
63:50 - radius
63:52 - of 10
63:53 - to round off the edges
63:56 - and i don't like how close the text is
63:59 - to the
64:00 - end of the box so we'll also add some
64:03 - padding horizontal
64:07 - of 10
64:08 - as well
64:12 - great
64:16 - now we're ready to display the
64:18 - object that the user actually selects on
64:20 - the screen rather than the turkey as you
64:22 - can see i'm now streaming my actual
64:24 - device because we're going to need the
64:26 - camera and i've once again disabled
64:28 - yellow boxes by uncommenting this line
64:30 - because they were getting in the way of
64:32 - the button
64:34 - so just as a quick test i'm going to try
64:36 - adding a turkey again to make sure
64:38 - everything was working properly
64:41 - and there you have it i clicked add
64:43 - turkey and we got a turkey added right
64:45 - there
64:47 - so in order to keep track of the user
64:50 - selection we're going to add a new state
64:52 - variable and we'll call this one current
64:54 - asset that's going to be the
64:57 - 3d asset that the user has currently
64:59 - selected and rather than defaulting this
65:01 - to an empty object why don't we default
65:03 - it to the turkey object so that way
65:05 - before the user has even done a search
65:07 - they'll have an object that they can add
65:09 - to their screen
65:11 - i'm also going to delete these two state
65:13 - properties because we recently extracted
65:15 - them into the searchable google poly
65:17 - asset list
65:18 - i'll save that
65:20 - and we need to set our current asset
65:23 - whenever
65:24 - it is chosen from the search menu
65:28 - so if we come down here this is where
65:30 - our searchable google poly asset list is
65:33 - and we need some way for
65:34 - this component to tell us when an asset
65:37 - has been chosen
65:39 - and if you recall on our when we created
65:40 - the google poly asset
65:43 - component we gave it an on press
65:45 - function so we can utilize that to
65:47 - determine when an asset has been pressed
65:50 - so let's come into our searchable google
65:52 - poly asset list
65:54 - component and let's make a new property
65:56 - and this one will be called on asset
65:58 - press
66:00 - and we'll initialize that to a function
66:01 - that doesn't do anything
66:03 - let's scroll down to our render current
66:05 - results function and call the on asset
66:07 - press function
66:09 - anytime an asset is pressed so we'll
66:12 - open this up
66:13 - and here's where we're adding our google
66:14 - poly assets let's format the text just a
66:17 - little bit add some line breaks in there
66:19 - to make it a little bit easier to see
66:21 - when these properties start getting
66:23 - pretty long
66:25 - oops
66:29 - and we want to implement the on press
66:32 - function for the google poly asset and
66:34 - we want to call this dot props dot on
66:36 - asset press
66:38 - but we run into a problem which is this
66:40 - is running in a loop and we need to know
66:44 - exactly which asset was pressed
66:46 - so why don't we come up here and why
66:48 - don't we add an asset here to indicate
66:50 - that this function will take an asset
66:53 - and we'll come back into our google poly
66:55 - asset function
66:56 - and the on press will also provide us
66:58 - with an asset
67:00 - and
67:05 - when the on press is pressed here what
67:09 - it's actually going to do is call
67:12 - this.props.onpress and it's going to
67:13 - give it
67:14 - this dot props dot asset
67:18 - so whenever a google poly asset is
67:20 - pressed it's going to call its on press
67:23 - function and give this asset object
67:27 - right here as an input
67:29 - so we'll save that and come back into
67:31 - our searchable google poly asset list
67:35 - now we need to implement the on press
67:37 - for the other google poly assets that
67:39 - we've added let's add a few line breaks
67:41 - here to make it a little easier to read
67:47 - and we'll put on press here
67:56 - and on press here
67:59 - let's save that
68:02 - all right as you recall we're currently
68:04 - adding the object in the on add turkey
68:06 - press button and we're assigning the
68:09 - object to a variable called this dot
68:11 - turkey since it won't always be a turkey
68:13 - i think we should rename our function
68:15 - and our object so why don't we name the
68:17 - variable to
68:18 - this dot
68:19 - three model
68:21 - equals object
68:22 - and
68:25 - let's check where that's being used i
68:27 - think it's being used in onrender this
68:29 - is where we're rotating it so instead of
68:30 - this.turkey we'll say this.3 model
68:34 - and instead of on add turkey press why
68:36 - don't we say
68:37 - on add object press
68:42 - and come down here
68:43 - and instead of saying add turkey we'll
68:45 - say add object and call on add object
68:48 - press
68:51 - and in the google poly dot get three
68:53 - model
68:54 - function call instead of passing in
68:56 - turkey object what we're actually going
68:58 - to do is pass in the current asset so
69:01 - we'll say this dot state dot current
69:04 - asset and since we initialize it to the
69:06 - turkey object we can be sure that it
69:08 - will always have
69:09 - some sort of object in it
69:12 - i'm going to delete this console.log
69:13 - that says adding turkey because we're no
69:15 - longer adding a turkey
69:17 - and let's review
69:19 - when we click add object it will call
69:22 - this and it will load the asset that we
69:24 - currently have
69:28 - and actually one thing that we need to
69:31 - do is whenever this is pressed we need
69:33 - to remove
69:34 - the current
69:36 - object
69:37 - so
69:38 - one way of doing that is by saying
69:40 - this.scene.remove
69:42 - and we want to remove
69:45 - this.3 model
69:47 - so you can only have one three model on
69:49 - the scene at a time and we'll check if
69:52 - this actually exists so if this.3 model
69:57 - then we will remove it
70:00 - so that way if they click add object
70:03 - and it adds a turkey and then they go
70:04 - and search for something else and click
70:06 - add object again it'll first remove that
70:08 - turkey and then add the new object that
70:11 - they want to add
70:13 - let's also close the modal anytime an
70:16 - asset is chosen from the search so we'll
70:18 - come down to our
70:21 - on asset press function in the home
70:23 - screen and after setting the asset we're
70:25 - also going to
70:27 - set state
70:28 - search modal visible
70:31 - equal to false
70:35 - so let's save this and
70:37 - test it out
70:39 - alright so i'll hold my phone up and
70:40 - press add object which should give us
70:42 - the turkey by default if we look around
70:44 - a little bit there's the turkey now
70:46 - let's do a search and how about we
70:49 - search for duck
70:52 - and there's the turkey we don't use that
70:53 - how about we take this penguin
70:56 - and if we click add object you can see
70:58 - the turkey goes away and the penguin
71:01 - gets loaded in
71:07 - now that the main portions of the app
71:09 - are just about complete we're going to
71:11 - do a little bit of cleanup to make it
71:13 - look a little nicer and the cleanup will
71:15 - be done in no particular order
71:18 - so let's begin
71:19 - let's move over to the home screen and
71:21 - the first thing i want to do is make
71:23 - these buttons down here at the bottom
71:24 - look a little bit nicer so i'm going to
71:26 - use icons instead of buttons
71:28 - and we can use the icon library that
71:30 - comes with expo or you can install
71:33 - the library it's called react native
71:35 - vector icon so we will import
71:37 - material community icons
71:41 - as icon
71:43 - from react native vector icons
71:48 - and we'll come down to our render method
71:51 - and instead of these buttons we're going
71:52 - to place an absolutely positioned view
71:55 - on the bottom so we'll add a view here
71:58 - and give it a style
72:03 - so this view is going to be position
72:07 - absolute
72:08 - and it will have a bottom of zero so
72:10 - that it appears on the bottom also going
72:12 - to add flex one flex direction of row
72:21 - and
72:22 - that should be it for this one let's
72:24 - also add a sub view
72:30 - this one will also say is flex 1
72:33 - flex direction
72:35 - row
72:37 - and
72:38 - we'll set the justify content
72:42 - to
72:42 - space between
72:44 - so that we'll have all of our buttons
72:46 - spaced out
72:49 - now for the buttons we're going to use
72:50 - icons
72:51 - the icon library comes with the
72:52 - component also called icon.button
72:55 - and you give it the name of an icon
72:57 - and an on press event
73:00 - so we'll have this button be our
73:03 - add object
73:05 - button so we'll say on press equals this
73:08 - dot on add object press
73:11 - and we'll look up the name later
73:13 - we'll add another one
73:16 - call
73:17 - for our search button so this will call
73:20 - this dot on
73:23 - search modal press
73:28 - and i actually want to add one more
73:29 - button that we haven't implemented yet
73:31 - which will be called remove object and
73:33 - that's just going to remove the current
73:35 - object if you don't have one on there so
73:37 - say icon.button
73:39 - name is blank for now and then on press
73:41 - equals this dot on remove object
73:44 - press
73:46 - let's go ahead and implement the on
73:48 - remove object press
73:50 - let's scroll up and here's our on
73:52 - add object press we'll put it right
73:53 - below that on remove object press
73:58 - and we've actually already
74:00 - done the logic for that here so why
74:02 - don't we copy that
74:04 - paste it and instead of doing this we'll
74:05 - just say this dot on remove object press
74:13 - all right we'll save that and refresh
74:18 - and uh
74:19 - as you can see we've got
74:21 - three placeholders for icon buttons but
74:23 - we don't have any actual icons because
74:25 - we left the names blank
74:27 - they've also got blue backgrounds which
74:29 - we don't want so let's go ahead and add
74:31 - a background color
74:35 - of transparent for each of these
74:40 - i'll copy that and paste it here
74:45 - and to figure out the icon names we can
74:47 - go over to the material
74:50 - community icons website
74:52 - and for
74:53 - add object i think we'll use a plus sign
74:55 - so let's
74:56 - search for plus
74:58 - and see if we can find one there's one
75:00 - and the name is just called plus
75:03 - we'll put plus here
75:08 - or we could use the plus box outline
75:10 - potentially let's look up minus for the
75:13 - remove
75:17 - and so we'll add minus for this one
75:20 - maybe we'll just use the plain ones and
75:22 - then for the search let's look for a
75:23 - magnifying glass and if we type search
75:27 - uh there's a magnifying glass and the
75:29 - name of it is magnify
75:32 - so we'll type that in and save it and
75:33 - see how it looks
75:38 - and you can barely see them because
75:40 - they're white but they should be a
75:42 - little more visible
75:43 - once we've removed these buttons and we
75:45 - might make them a bit bigger as well
75:48 - so we can go ahead and delete these
75:50 - buttons now since we've
75:52 - implemented them as icon buttons let's
75:54 - save again
75:58 - and there we have it we can test these
76:00 - out i'm going to click the magnifying
76:01 - glass button
76:03 - and as you can see our search box comes
76:06 - up
76:07 - okay so let's just go ahead and make
76:09 - these icons a slightly bit larger
76:13 - so we'll set the size equal to and say
76:15 - let's try 30 and see how that looks
76:22 - and
76:23 - i'll make it about 40 i think would be
76:25 - good so
76:26 - i'll set all these to 40.
76:39 - all right
76:42 - and that looks pretty good nice big
76:44 - buttons should be easy to press
76:46 - try it out okay if i click add for add
76:49 - an object
76:52 - we get our turkey
76:54 - perfect
76:57 - next i'm just going to scan through some
76:59 - of the files we made and i'm going to
77:01 - delete any debugging code that we may
77:03 - have added i'm also going to add
77:04 - comments since i've been dictating the
77:06 - code i didn't really add any comments as
77:08 - i was going
77:09 - but it's a good idea to add comments
77:12 - preferably while you're writing the code
77:13 - but
77:14 - if you have to you can go back and add
77:16 - them at the end as i'm doing now
77:18 - i usually like to put comments on top of
77:20 - each function explaining what it does
77:24 - sometimes it's
77:26 - pretty obvious so maybe i'll leave them
77:28 - out for this video
77:31 - so i'm scanning through here i want to
77:33 - find any time where we do a console.log
77:36 - and we don't actually want to
77:39 - log something so in this case we're just
77:40 - logging the current asset
77:42 - states i'll put a comment here
77:46 - remove the current object
77:49 - and then this one will be
77:50 - add the current object
77:57 - take out some of these white spaces
78:02 - this is for rotate the object
78:08 - render
78:13 - that all looks good okay so this file
78:16 - looks pretty good
78:21 - let me just collapse everything
78:24 - okay and remember we can take this out
78:26 - one other thing we can go ahead and
78:29 - delete this because we're no longer
78:30 - using that we're just only using the
78:31 - searchable google poly asset list
78:34 - i'll save that and i'll jump into the
78:36 - google poly class that we
78:38 - created just some blank lines here that
78:41 - we can remove
78:45 - this one i will say returns a
78:48 - 3.js
78:50 - object
78:56 - this one returns the
78:59 - results of the current query
79:06 - sets current search parameters
79:10 - and resets
79:12 - number variables
79:19 - this one returns a query url
79:22 - based on the given data
79:25 - okay that one looks good
79:27 - let's go to google polyacid.js
79:31 - look through this
79:32 - don't really see any problems with this
79:34 - one so we'll keep that same
79:37 - and then our searchable google poly
79:39 - asset list
79:40 - look through this real quick
79:58 - okay everything looks pretty good to me
80:00 - and this one
80:03 - so we'll keep that the same as well
80:10 - all right so now let's work on the
80:12 - search
80:14 - page component a little bit and make
80:15 - this look a little bit nicer i think one
80:17 - thing i want to do is put the cancel
80:20 - button up here to the right of the text
80:22 - input and maybe let's put a
80:25 - magnifying glass icon next to the search
80:27 - placeholder text
80:30 - so to get the icon we need to also
80:32 - import the icon library so let's import
80:34 - material community
80:36 - icons
80:38 - as icon
80:41 - from react native vector
80:43 - icons
80:45 - and we'll scroll down to where we're
80:46 - rendering the search input
80:49 - instead of just returning a text input
80:51 - let's return a view that will contain
80:54 - the text input
81:00 - so
81:02 - why don't we
81:04 - go ahead and just call this
81:06 - styles.search container
81:08 - and come down to our style sheet and
81:11 - create search container
81:14 - and what we want that to do is have a
81:16 - flex of one a flex direction of row
81:20 - and set align items to center
81:25 - so the magnifying glass will line up
81:32 - and i'm going to collapse these so i can
81:34 - find where we're working at easier
81:38 - okay so inside of this view we're going
81:40 - to add our icon with the name
81:43 - of magnify
81:46 - let's give it a color of some kind of
81:48 - gray so let's say dvdd
81:51 - and the size we'll say is 20.
81:57 - and right next to that we're going to
81:59 - take our text input
82:02 - and put it right
82:04 - there
82:06 - and since these styles are a little long
82:08 - we'll cut these
82:10 - and instead put styles dot search text
82:14 - inputs
82:16 - come down to our style sheet
82:18 - and search text
82:22 - input okay so we'll save that and see
82:25 - how it looks while that's loading i'm
82:27 - going to reformat these
82:31 - okay so as we can see the
82:34 - text input is not stretching all the way
82:36 - to the end like we want it to
82:40 - so we can fix that by adding flex of one
82:42 - and also i want the border to be around
82:44 - both the magnifying glass and the text
82:47 - input so i'm going to take the border
82:49 - width
82:50 - and put that up here and i'm going to
82:52 - take the border radius and put that up
82:54 - here as well
82:59 - and
83:00 - we want to add a little bit of
83:02 - horizontal spacing between the edge of
83:04 - the screen so on the container i'll add
83:05 - a margin horizontal
83:08 - of 10
83:10 - and i'm going to remove the margin
83:11 - horizontal from here so that the search
83:14 - won't be so far away from the magnifying
83:16 - glass i'll save that and see how that
83:18 - looks
83:27 - okay it's looking much better i think we
83:29 - should
83:31 - change the color of the border maybe so
83:34 - on the container we'll set
83:36 - border color
83:38 - also to have that gray that we've been
83:40 - using
83:43 - and let's go ahead and move the cancel
83:44 - button
83:46 - up to the right side of the text input
83:48 - as well
83:50 - so let me collapse
83:53 - more of this stuff
83:56 - and we're going to grab the cancel
83:58 - button which i believe is right here
84:02 - take this out
84:04 - and we're going to put it
84:07 - well we don't want it to be inside of
84:09 - the border so we need to put it
84:11 - below the view which has the border and
84:13 - then we'll have to wrap all of this
84:14 - inside of another view
84:19 - and this view should also have a
84:22 - flex of one and a flex direction
84:25 - of row
84:27 - save that and see how it looks
84:35 - okay perfect
84:36 - and we'll set this to align items
84:39 - center just to be safe
84:46 - and i think for this one we'll want to
84:48 - put the margin horizontal
84:52 - to 10 and take it away from this one
85:04 - okay so it's looking pretty good i can
85:06 - test the cancel button
85:07 - so when i click that the search
85:11 - page goes away
85:19 - all right now let's adjust some of the
85:20 - spacing of the magnifying glass and the
85:23 - search so i'll come down here
85:25 - and i think
85:26 - instead of having a padding horizontal
85:28 - on the text input
85:30 - we'll add the
85:32 - horizontal padding to the icon itself so
85:34 - that way it spaces out a little bit away
85:36 - from the edge there
85:38 - and we'll have the same spacing there
85:41 - so on our icon i think we can give it a
85:43 - style
85:45 - and we'll say padding horizontal
85:47 - 10.
85:56 - okay
85:58 - it's looking better although i still
86:00 - think there's too much space here so
86:03 - let's change this padding horizontal to
86:04 - be padding left of 10
86:07 - and we'll have a padding right
86:09 - of let's just try three and see how that
86:12 - looks
86:15 - while that's loading another thing i
86:16 - wanted to
86:18 - change was the
86:19 - no results text if we don't have any
86:22 - results i want to make that a little bit
86:24 - bigger and make it italicized
86:27 - so that's in render current results
86:30 - and here's the style for our text let me
86:33 - call this
86:34 - styles dot no results text
86:40 - and we'll come down here
86:41 - make a new style called no results text
86:44 - and we're going to make it a little bit
86:45 - bigger so we'll say font size of 18
86:49 - font style
86:50 - italic
86:54 - and why don't we put some padding on the
86:56 - top of about 50 so it has some more
86:59 - space away from the search button
87:02 - save that
87:08 - oops i spelled italic wrong so
87:16 - okay it's looking pretty good in my
87:18 - opinion
87:22 - um i think one
87:25 - final thing we'll do is we'll make it so
87:27 - that
87:28 - when you press enter on your keyboard it
87:30 - will automatically perform the search
87:33 - and i can't remember the name of the
87:35 - property but i can come over to the
87:40 - documentation
87:42 - and
87:43 - if we scan through some of these
87:45 - properties we'll probably find it
87:49 - i believe it's on submit editing
87:51 - so
87:52 - this is says it's a callback that's
87:54 - called when the text input submit button
87:55 - is pressed so
87:57 - in our text input up here
88:01 - we're going to say on submit
88:04 - editing
88:05 - and we're going to give it the function
88:07 - that happens when search is pressed
88:09 - which is this dot on search press
88:12 - say this dot on search press
88:15 - and let's test that out
88:18 - if we wanted we could also change our
88:20 - keyboard type
88:22 - to be
88:23 - maybe web search although that's ios
88:26 - only
88:27 - or
88:31 - we'll just keep the default
88:33 - okay so if i open this up and i search
88:36 - for dog and i'm going to press return on
88:38 - the keyboard
88:40 - and there we have it it's
88:42 - showing the results
88:44 - now one thing i've noticed just now is
88:46 - that this text isn't centered and i
88:47 - think earlier we tried to make it
88:49 - centered so let's figure out what's
88:50 - going on there i'll open up google poly
88:52 - asset
88:53 - and look at our styles we may just need
88:55 - to add a text align of
88:58 - center to each of these
89:04 - let's save it and see if that's
89:06 - the problem
89:15 - well that worked for the first one
89:20 - oh i see i i accidentally put this in
89:22 - the thumbnail
89:24 - class should have been in the author
89:25 - name class
89:32 - okay one last time i'll search for dog
89:35 - and it looks like all the text is
89:37 - centered
89:40 - i'm trying to click that
89:43 - okay
89:45 - perfect
89:47 - all right and there's a bug i want to
89:49 - fix which is when we search for
89:50 - something such as dog
89:54 - we get the results and if we cancel the
89:56 - search and then bring it back up the
89:58 - results are no longer there but we have
90:00 - the load more button
90:02 - and
90:03 - i believe the problem for this is that
90:05 - we're not correctly initializing our
90:07 - current results array
90:09 - which is in our state which will find
90:11 - the constructor so instead of
90:12 - initializing it to a blank array i think
90:15 - we should set it to this dot props dot
90:17 - google poly
90:18 - dot current results
90:22 - i'll save that and test it out
90:26 - so i'll do a search for dog
90:30 - and i've got my results cancel and bring
90:33 - this back up and the results are there
90:36 - if i load let's try loading more
90:41 - looks like we have some layout issues
90:43 - for longer
90:44 - strings of text
90:48 - okay i'll cancel that bring it back up
90:51 - and there are the full results and let's
90:54 - try
90:55 - changing our result to duck
91:00 - there we go and another layout issue
91:02 - with long text
91:06 - to fix that layout issue in our google
91:08 - poly assets we'll come over to the
91:10 - google poly asset component and we'll
91:12 - set a width constraint on our text
91:15 - components we'll set the width to be the
91:17 - same width as the thumbnail
91:20 - so here in our display name we'll set a
91:22 - width of 150 and for author name also
91:25 - with the 150
91:27 - and refresh the app
91:30 - and we'll do that same search for
91:32 - duck
91:35 - if we scroll down as you can see now the
91:36 - text is on
91:38 - multiple lines rather than pushing
91:41 - things over

Cleaned transcript:

hello everyone we're going to make a react native augmented reality application with the help of expo and the google poly 3d object library what our app will do is it will display a camera to the user and when they click the plus button they will be able to add a 3d object in the world and they can also search for new objects using the google poly library so right here i'll search for duck and we'll grab something that looks cool and we can swap this out for a penguin or we can look around and maybe put the dog in there all right so the first thing we need to do is open the expo xde and click create new project now i usually choose tab navigation project even if i'm not making a tab based application because it gives you a lot of default files and folders that i find convenient i'm going to name our project which i'll call polysnap and i've already got a folder picked out on my desktop where i want to place my application so i'll click create and this usually takes a couple of minutes so i'll pause the video and return when this is finished loading alright the project has finished creating and one thing i think is a good idea to always do as soon as it started is to run your project on a device or simulator just to make sure that everything got created correctly so i'm going to open the simulator right now and while that's loading i'm going to open up my code in a code editor so just give one second for all this to load all right so i've got my code over here and the simulator is still launching while that's running another thing i want to do is open a terminal window in the project directory so i'll click that and that should give us a terminal window okay and as you can see over here on the right hand side the simulator has launched the application there were no errors everything worked out correctly so the first thing we want to do in this terminal window is install a few packages that we're going to need eventually throughout the app the first set of packages we're going to install have to do with 3js which is a javascript library for rendering graphics so we'll do npm install dash capital s for save and we will give it the three package and expo dash three i'll press enter to install those and while this is installing we'll do a little bit of cleanup of the code over here like i said we did a tab navigation project and it gives you a lot of default stuff but there's a lot of stuff that we won't need and so we can just delete it out so first let's come into the main tab navigator file and we're going to delete all the references to the links and the settings screens so that would be the file references oops here are the actual tabs themselves and down here is where it figures out what icon to use for the different tabs and i'll clean this up just a little bit save that then we can delete the files themselves as they're not being referenced anymore and finally we'll come into the home screen and just delete all this text out because we aren't going to need it so right here i'm going to delete the styles here i'm deleting some functions that this screen is using that we don't need and i'm going to delete everything except for the outermost view and we did delete the container style so instead of that why don't we just give some padding and here we'll put some text that says home screen just to make sure everything's working and we can also delete a few of these components here that we won't be using let's clean that up just a little bit okay and i'll save it the apple refresh i'm going to check on the installation packages looks like it installed correctly and we want to install one more package which is expo graphics so we'll type npm install dash capital s for save and expo graphics and this will give us a component in expo that we can use to render graphics so while that installs i'll minimize that and as you can see on the simulator we've got the home screen shown showing up here so a few more cleanup things i want to do i always delete the layout file out of constants because i never use it and in the components directory i always create i usually delete this styled text file and i always create a folder we got an error over here because we deleted the styled text and it's being referenced right here so i'll just delete that i also don't need the web browser so delete all that and save and we can reload it should work and i always create a new folder called app components and inside of that create a file called index.js which is where we'll reference all of our components that we create throughout the app one last thing we can do since we're not actually going to be making a tab application is come into our main tab navigator and switch this from a tab navigator to a stack navigator so let's import the stack navigator also from react to navigation and just change this to ba stack navigator and here are the options that i was giving to the tab navigator since we have now a stack navigator we won't need those options but we may add some other options as we build the app we'll have to wait and find out and i'll save this and as you can see the tab went away so i think we're ready to start actually building the application okay now we're ready to add the camera to our application so i've got my home screen open and over on the right side i've got my actual iphone streaming the reason for that is because you can't use the camera and a simulator so you need to use an actual device in the home screen we're going to import a few components first let's import expo from expo and then we will import expo three and three from expo three and we will also export import expo graphics from expo graphics and you should recognize these as the packages that we installed when we first created the application now down here instead of rendering the text home screen we're going to return an expo graphics.view which is what the component that allows us to use the device's camera and gives us some augmented reality capabilities so let's give it a style of flex 1 and we need to set a few properties on this to get it working the first one is on context create and this is just a function that gets called as soon as the graphics context is created so let's assign that to this dot on context create which is a function that we haven't defined yet but we'll do in just a second we also need to set the on render function which is a function that gets called every time the graphics scene is rendered so we'll say this dot on render and finally to enable it for augmented reality we need to set ar enabled equal to true i'll come up here and add our functions on context create we're going to make that an async function and it takes quite a few arguments one of them is gl which is a reference to the graphics it takes scale width height and the ar session information onrender takes a single argument called delta which is the time difference since the last time the render method was called so let's save that and make sure we don't get any errors and it's reloading over here on my phone while that's loading you need to do a few things to get the uh the 3js scene set up you need to basically have a renderer a scene and a camera and so we'll do that in the on context create so first let's put a little comment that says initialize render and we're going to create a variable called this dot renderer and we're going to set it equal to an expo 3 dot create render and what that does is it takes a gl context and gives you a renderer back we also need to set the pixel ratio to the scale and that just helps us with some sizing constraints and you also need to set the size itself with the given width and height if you don't call these last two things it'll look a little bit weird okay next we should initialize the scene so we'll put a comment there that that's what we're doing and we're going to create this dot scene and that's going to be equal to a new three dot scene and we want to set the background of the scene to the actual augmented reality session which is the camera with whatever types of graphics we put inside of it so we'll say this equals expo three dot create ar background texture and we give it the ar session as well as the renderer that we just created and finally we need to initialize our camera so we'll say this initialize camera and we'll create a variable called this dot camera and that equals expo three dot create ar camera and that also takes the ar session and some of these scaling arguments you can just copy this i don't actually fully understand what it does but there's some documentation on three js's website that explains what these numbers all mean and finally in our render method all we want to do now is say this.render.render and we give it the scene and the camera if we save that and run it we should have an ar session running in our application we'll test it in just a second all right so i'll hold this up you can see uh there's my desk and this is looking through the camera of my phone so we have the camera and everything working we've also got a whole bunch of errors down here in this these yellow boxes and they're a little obnoxious so i'm going to show you how to get rid of them temporarily sometimes you do want those boxes on there because they can give you some useful information but in this case there's not much we can do about a lot of these so if we just set console dot disable yellow box equal to true then those boxes will no longer appear and let's just run and double check and it's nice to have them not on there because we'll be looking into the camera a lot and they just obscure the view all right so holding it up again and as you can see there's no more yellow boxes now we're going to investigate the google poly api which is an api we'll be using to get 3d object information for our app this is an api provided by google and you can find the documentation on developers.google.com poly first thing you need to do is click this button right here to get an api key so go ahead and click that and get your api key and then jump back over to your code and let's go into the constants directory and we will create a new file called api keys dot js and inside of this we will put all of our api keys so we'll export default and create your object here and let's create a property called google poly and put whatever api key you created in this string right here all right i've just added my api key and remember to keep your api keys a secret so that other people can't use them since we're not going to be using the app for a little while while we do this i'm going to go ahead and close my preview of the app right here and let's jump back over to the google poly documentation so it gives us access to 3d objects it'll give us all the 3d object files that we need to render them in our augmented reality app it also give us some screenshots and a few a little bit other information that we might find useful if we come down here to guides we can click poly api and get some more information about it the api as it says here allows you to list assets list your assets or get a specific asset what we want to do is use the list assets api because we're going to allow users to search for different assets and then we'll display whatever they've chosen so just a quick overview of this here's the request that you use for the api and here are some parameters you can provide you can give it keywords which is probably what we'll be using for the search you can specify certain categories like animals or technology you can specify a format if you want only a specific type of 3d object format page size controls how many results you get back from each search and then page token is a way to have different pages of data so if we say that our page size is 10 and there's a total of 100 results of that search we would need to use the page token to get page 2 and page 3 and so on down here it gives you an example of what the response will look like we'll look at this a little bit more deeply in just a second but the documentation here is pretty good and it would be wise of you to take a look at it another thing you can do is use the google apis explorer right here and if you look up the poly api you can actually test out api calls so we're using the list api so i'll click that and here we can just type in any kind of search parameters that we want so for keywords we could look up duck and click let's set our page size to be five and we'll click execute and it'll actually run this api call and down here gives you an example of what the results would look like it also shows you what the request itself would look like we would just call a git on this url except replace this with our api key and as you can see down here we get an array of assets and each asset has a display name an author a description some information about what is created and then this formats array actually has the 3d object file so there's a dot obj a material file here's some additional files and different formats all right so let's go back over to our code i'll make this a little bit larger so we have some more room and what i want to do is go into the api folder and create a file called google poly js and here we're going to build out a little sample a little class for working with the google poly api so let's do export default class google poly and let's create a constructor and the constructor is going to take the api key so whenever we create a new instance of this class we'll give it the api key and then we'll store it in a property called this dot api key and that allows you to use it if you have a secondary api key or you want to use it in a separate project with a different api key next thing i want to do is create a function called git query url and what that's going to do is take an api key and a few other parameters that we decide we want to use and it will return us the url to perform the query and the url would be something like this so why don't we actually just copy this and paste it into our code and we can look at it as a reference while we're building this out i also want to make this a static function since we're passing in the api key and it doesn't need any access to any member variables at least i don't think it will all right so let's create a variable here called base url that's going to be this this portion of the url that never changes no matter what the parameters are so we'll set that and then we're going to build out a url based on the different parameters that we want to give it so as a review here are all the parameters that are possible and for our application we're going to let users search using a free text search box and whatever they type in we'll just put into the keywords parameter and show them those results so let's make a new variable called url and that's going to be equal to the base url plus key equals and i'm getting this from here it doesn't matter what order you put the parameters and i always start with the api key so i don't forget it so we'll put key equals that plus the api key that we were given in the function and it'll say url plus equal which adds on to the url and parameters should be separated with an ampersand you can also use query parameter building libraries if you want but this one will be simple enough that i don't really mind doing it myself so let's take a look at our parameter options i think for this app we want to set a page size so that we don't load too many all at one time so let's just hard code our page size to 10. and back over here it's got this max complexity parameter which is an enum and it takes medium or simple or complex let's let's hard code it to medium so that we don't get too complicated graphics and and overload our application so we'll set ampersand max complexity equals medium the other thing i want to hard code is the format of the results that we get i only i want to limit these results to obj files the other formats could potentially work but i'm only familiar with objs and so i only want to give users options that have an obj file format so we'll set ampersand format equals obj and let's see we also want to add the keywords so let's pass in keywords into our function we'll say ampersand keywords equals and since the keywords will come from user input you need to make sure that you clean that input and don't allow any sort of unsafe characters to get in so the way you can do that is by calling encode uri component and giving it the passed in parameter and since we're going to support multiple pages we also want to pass in a next page token but this one will be optional since the first very first page won't have a next page token so we'll say if next page token is passed in then we're going to add that to our url and i believe the parameters is called page token so we'll say ampersand page token equals and next page token and finally we will return the url so this function should give us a query url with a given api key keywords and an optional next page token and another thing i just thought of just to be safe if the keywords for some reason were blank we probably don't want to say keywords equals blank so why don't we put this around a an if statement as well so we'll say if keywords are passed in then we will add the keywords to that parameter all right now i want to make another function that actually gets the results so why don't we call it get search results and this will take a keywords parameter and a next page token this one's not i don't want to make this one static so in that case we'll have access to this dot api key but we'll still need keywords and next page token so we can build our query url what this function is going to do is it's going to build the query url and then call the api and return the results so let's first get the url so we'll call the static function via google poly dot get query url and the first argument is api key which we have right here as this dot api key the next two are keywords and next page token so now we have the query url that we need to use and since it's just a basic get request which you can tell from the api explorer right here we can just use fetch to get the results so we'll call fetch we'll say return fetch give it the url and you need to usually do these kind of thing where you convert it to json so we'll say then dot then function response will return response.json and then another dot then which has the data itself and what we want to do with the data is take a look at the data that we're given and it gives gives us an array called assets let's see if it gives us anything else if we scroll all the way down to the bottom it's also got a next page token and a total size which i think is the total number of results so i think for this function all we want to do is return the array of assets and later on we'll come back and grab the next page token and figure out how to handle our pagination so we don't want to return the whole data we only want to return data.assets and since we're handling this with promises the way we should do that is return promise dot resolve data dot assets so now when we call this we can use the normal promise syntax and we'll be given the data.assets so that should be enough for us to test it out so let's go back to our home screen and we want to import google poly from uh it was an api google poly and remember we need to go up one level because we're currently in the screens folder now let's create a constructor here and remember you always need to call super props and let's create an instance of the google poly api class that we just made so say this google poly equals new google poly and we need to pass in the api key which we have in our constant slash api keys file which we also need to import so right here we will import api keys from dot dot slash constants slash api keys now back down here we'll call api keys dot google poly and we'll save that and let's check the expo window right here when we do console.log some messages will appear down here that we can take a look at so i'll make this a little bit smaller again now that we've initialized our google poly object we can call this dot google poly dot get search results which is the function we just created and remember it takes a keywords and an optional next page token parameter so for our keywords we will give it duck and next page token since we don't have one because it's the first page we'll pass in a blank and then we can say dot then function and remember it's giving us the assets and inside of here we should have our assets let's just double check by doing a console.log assets and if we refresh and i think i may need to run it on my phone so just one second yeah it closed out so i'm going to scan it on my phone and all it's going to do is load the app which should go straight to the home screen which we'll call our home home screen constructor it'll generate the google poly object call get search results and give us the assets and i've just realized that i made a typo if i come back over here it's saying that i spelled keywords wrong some oh here it is okay i accidentally misspelled keywords right here so i need to fix that and rerun it okay so the simulator has launched and as you can see over here it's it tells me that it can't run opengl in the simulator that's what we expected but all we really care about is the console and as you can see right here it has printed out a bunch of json data which is the data from the api call and if you don't believe me just as a double check i'll pull this over here and i'll reload the application by using the command plus r button it's going to relaunch and here we go here's all of our asset data okay so one thing that we're going to do that i think would be convenient is let's take a single asset and copy that data into a file so we can use that as a reference as we're building the app and we don't have to constantly be calling the api so there's a few ways we can do that the way that i want to do it is just grab an asset here we'll just say assets zero and we'll call we'll create a variable called json and we'll say json.stringify and we'll give it the first asset and what that's going to do is take this asset and convert it to a json string and then we're just going to display that string in the console and we'll just from the console copy and paste it somewhere so i'll save this i'm going to clear my console here and as you can see we've got that json data in a big string so we'll just copy this and why don't we put this in our assets folder so we'll come into assets we've got fonts and images let's create a new file called i mean oh shoot a new folder called objects and since we were searching for ducks i'll assume that the first asset was a duck so let's create a new file called duck object dot json and inside of here we'll paste that string and i'm sure there's a way to format it automatically for you in this code editor but i don't know how to do it so i'm just going to put a few break line breaks in here not for the whole string but just so we can look at a few things in here there's another property called thumbnail somewhere in here there it is that now we can kind of read this and i think the data that we really need is thumbnail formats and probably the display name and the author name and it says turkey day happy turkey day turkey so this object may actually be a turkey so why don't we just rename it to turkey object dot json all right so just as a way of checking that our object is working properly and that we got all the data we wanted let's try to display the thumbnail as an image in our app so if we come over here we can see that the turkey has a property called thumbnail let me just pull this over here and the thumbnail object actually has a few properties one's called relative path one is called url and one is called content type format some of the stuff too so i think all we need to do is grab the url out of the thumbnail property and that should be in a format that we can display in an image let's come back over to our home screen and let's import turkey object from assets slash objects slash turkey object.json that should give us access to the turkey object data save that and save that and down here in our render method temporarily we will comment out the expo graphics.view and instead we'll return a normal view with a flex one and inside of here we will put an image and let's double check that we have image and our imports we don't so we need to import image from react native so we can use it and image takes a source property with a uri property and the uri in our case will be turkey object dot thumbnail dot url and keep in mind that came from here's the object we want to get the thumbnail.url property and we also need to set a width and height so let's give it a style we'll say width of 150 and height of 150 and let's save that and hopefully we won't have any errors and there you go there's our thumbnail this is what the 3d object should look like it's not the 3d object itself it's just a thumbnail or screenshot but this is what we can expect once we've loaded the 3d model so let's comment this out in case we want to use it later and uncomment this section so we can go back to having our camera all right what we're going to do now is allow users to search for any kind of 3d object they'd like rather than having the turkey hardcoded in as you can see i'm running the simulator over here on the right because we won't be needing the camera for a while so in the home screen i'm going to come down to the render function and just temporarily we're going to add a view where we can do some experimenting with our ui and once we're happy with the ui we will integrate that into the entire app so i'm just going to return a blank view we'll give it a style with some padding on top and save that and make sure we don't get any errors since we're using us we're going to have a search component we're going to need a text input to allow users to type in the search that they'd like to do so up in our imports we will import text input from react native and back down here in our render method let's add a text input and let's also add a button that allows them to perform the search so the title of the button will be search and on press will be this dot on search press and that the text input will give a value equal to this dot state dot search query and on change text we will say this dot on search change text and we'll need to implement these functions now so let's add them right here on search change text we'll take a text as an input and we'll just call this dot set state and we'll set search query equal to the text that we're given and the on search press function will look like this but we'll implement this in just a second we also want to go ahead and add search query to our state so let's scroll up to the constructor here and we don't have a state yet so we'll say this.state equals and we'll give it a property called search query which starts off as a blank while we're here we can go ahead and delete this code as we don't need it anymore and save and reload all right the text input is a little bit difficult to see so let's give it some style and we'll add a little border around it so let's add a new line here say style equals border width of one and also add a placeholder that says search let's also add set the height to 40. okay so we've got a search box here and a search button it doesn't look great but we'll make it look a little nicer later on now what we want to do is let's create a component for displaying our results so if you remember down here we had this image of the turkey object let's put that in here and take a look at it again and it looks pretty nice but i think we also want to add the author name and the display name of the object and whenever the user searches for something we'll show a table filled with these objects which shows the image and the author's name it's important to add the author's name because the objects are licensed under creative commons and you need to give attribution to the author and the display name is good just so people might have a better idea of what the actual object is all right so let's come over to our components folder and open up app components and let's create a new file we'll call this google poly asset dot js and we're going to create a new component so let's import react from react i'm going to import view text and image we might need a few a few more later but we know we need an image to display the thumbnail and some text to display the author name and the display name and a view to hold everything so let me spell import correctly and from react native and then we will export default class google poly asset which extends a react dot component it's going to need a render method which will just return a view for now fill that in later but first let's come into index.js and let's import google poly asset from google poly asset and then export google poly asset all right now we can access google poly asset and other files save that and in our home screen we will import google poly asset come down here import google poly asset from components slash app components save that reload now our google poly asset will take as a property the asset object so let's make a default props object and we'll say asset which we will initialize to a blank object and that's kind of a reminder that this needs to take an asset as a property in our render method now we will return a view and inside of this view we'll put all the thumbnail and text stuff that we need for the asset let's flip back to the home screen and scroll down to our image right here and just copy and paste this so we don't need to retype it and we'll put this in our view and instead of source being the turkey object.thumbnail.url it's not going to be the property asset that we pass in so we'll say this.props.asset.thumbnail.url if we wanted we could move these styles into a style sheet so why don't we go ahead and do that now we will import style sheet from react native and down here we'll say cons styles equals stylesheet.com and we'll say thumbnail has a width of 150 and a height of 150. and we'll delete these styles out and instead say styles.thumbnail save that now why don't we try using the google poly asset instead of this image right here to make sure that it's working so we'll add a google poly asset and the asset will be turkey object so if we did everything correctly we should see the same thing on the screen once we delete this but it will now be inside of our google poly asset component rather than the image and we have an error here so let's double check i think the error is that we didn't put this in brackets when we imported it so you should import it correctly and there you go there's our thumbnail of our turkey now one thing i wanted to do with this is i wanted to round off the corners just a little bit i think it would look a little nicer and the way you can do that is by setting a border radius let's give it a border radius of 10 and see how that looks okay looks pretty good and we can add some padding on the side later if we want to let's go ahead and add the display name and the author name down here so we'll just add some text components that one will put the display name and here we'll put the author name let's give them each a style called styles.displayname and styles.author name come down here and display name and author name and i think what i would like is for the display name to be bold and the author name to be normal so we'll put font weight is bold and we don't need to put anything in author name because by default it will be normal so let's go back to our turkey object.json reference and figure out what the property names are and they're just called display name and author name so we should be able to just add in this dot oops this.props.asset.displayname make sure to put it in brackets and this.props.asset.authorname and if we save it we should now see our text below the image great let's also put a style on our view called styles.container and let's also align our text using the text align property to be in the center and maybe that's not how we do it maybe we need to put a line items here center okay so everything's centered there we can delete that if all right so now we've got a component we can use to display our search results it'll look like this and actually we want to do one last thing i think what i'd like to do is have users be able to click on the asset so let's add a touchable opacity import from react native and let's surround the whole thing instead of a view we'll surround it with a touchable opacity and touchable opacities need an onpress property so for onpress we'll say this.props.onpress and in our default props we will initialize onpress to be a function that doesn't do anything and this serves as both a reminder that you should pass in an on press property and it helps to prevent crashes in case somebody forgets the on press property when it tries to call this it'll just call a function that doesn't do anything rather than crashing so save it and try clicking on it as you can see the opacity changes so it gives the user an indication that it was clicked on so that should be all we need to display our search results all right let's return to our google poly class we were working on earlier and make a few adjustments to it that can make the searching process a little bit more convenient for us i'll switch over here this was the function get three model that we were working on to get the 3d model which will collapse now because we'll be working with that and as a quick summary we have two functions in our class one called git query url which just gives us the url that we can use to pat to call the api and get search results which takes keywords and a next page token and returns us the results of the api in the form of promise when users click search they're going to be given the first page of data which for us will be 10 results because we've hard coded our page size to be 10. i also want a button down at the bottom called load more which when they press will load the next 10 results using our next page token and what i'm going to do for my application is just concatenate all the results into one big array and show them all as many times as they click load more that may not be ideal for your application you may only want to show 10 results at a time or 20 or however many and implement some sort of pagination scheme so feel free to make modifications as you need for your application since i'm going to have all the results in one big array it makes sense to keep track of that array in our class so i'm going to add a new property called this dot current results which i'm going to initialize to a blank array i'm also going to track the next page token as a member variable and i'm also going to track the keywords as a member variable so instead of get search results taking in keywords in a next page token we're actually going to pull it from the member variables here so we'll say this dot keywords and this dot next page token and down here when we receive the results instead of returning them as a promise we're going to append them to our current results array so the way that we can do that is setting this dot current results equal to this dot current results dot concat data.assets and that will concatenate the results of the api to our current array let's also set our next page token to the next page token that we're given which is data dot next page token and we can actually keep our promise here to return the results of this specific call if we want and so users will be able to get the next 10 results from this promise or they can get all the results by just calling their instance of google poly dot current results now we need a way to set the keywords so that when git search results is called it actually has some keywords so let's make a new function right here called set search params and it will take one input of keywords and what this function will when it will be called as whenever the user clicks search so if the user types in turkey and click search what we wanted to do is clear out all the existing results all of the existing next page token stuff and start over with a brand new search of turkey so we're going to do is set this dot current results equal to a blank array so any results that are already in there are wiped out this dot next page token is going to be set to blank and this dot keywords is set to the input keywords so how the ui is going to work is the user will type in their search result here their search query here they'll click search which we'll call set search params and reset all of our member variables then it will call get search results which is going to search based on the keywords that are given and the next page token which for the first page will be blank that's going to call the api grab our results and append them to our current results array which is currently blank it's going to set our next page token and it will return a promise with the assets for just that query then if the user was unsatisfied with the first 10 results they can click the load more button which we haven't added yet and we'll call git search results again which will run the query append the next 10 results to our current results array set the next page token and return the results 11 through 20. so let's save that and give it a shot all right so let's flip over to our home screen and try to implement the new changes to the api in our ui so we talked about having a load more button so why don't we go ahead and add that let's come down here to where we've got our search button let's add another button called load more and when it's pressed it will call this dot on load more press which we need to implement so we'll say on load more press and we've now got two buttons that we need to implement so as we said when search press when search is pressed we're going to grab the text out of the search box and call set search params so let's get the text which is equal to this.state.search query instead of calling it text one we call it keywords and we'll say this dot google poly which is our instance of the google poly class dot set search params and we'll give it keywords so now we have set our search params we've wiped out any results that may have already been there and set our keywords now we want to actually call git search results so we'll say this dot google poly dot get search results it takes no inputs now but it returns a promise so say then function with assets and we can do whatever we want with our assets here but i think what we're going to do is instead of get using these assets we're going to use this dot google poly dot current results which is going to have all the results of every query that we run so let's come up to our constructor and let's add a new state parameter called current results which is initialized to a blank array and whenever the query returns we're going to set state.currentresults to poly the current results and setting the state will trigger a rerender with the new results so up here we're going to say this dot set state current results is going to be equal to this dot google poly dot current results and since we're referencing this inside of a function we need to bind the this context so we'll add that bind this right here okay and load more press should do almost the exact same thing except it won't reset our keywords or our search parameters because we want to keep those the same but it will call get search results to get the next page worth of data so let's just copy and paste that down here you could factor this out into a separate function if you'd like i don't think it's necessary in this particular case let's add a console.log here with our assets just to make sure that we're actually getting data and before we test it out we do need to make one slight change back in our google poly class again since we're referencing this inside of a function here we need to bind the this context by calling dot bind with this otherwise we wouldn't be able to access this dot current results or this dot next page token so let's save and try out our new search open up the expo xde and we'll type in turkey do a search and as you can see there are some results and if we click load more i believe we got some more results so that's just a quick check to make sure that there weren't any huge errors let's now actually display the results on the screen all right so back in our home screen to display the results we're just going to display a google poly asset for every asset in our this dot state dot current results so one way we can do that is by using a loop or we can also use the map function so let's make a function right here called render current results and what this is going to do is we'll use the map function to map all of our current results to a google poly asset component so we'll say return this.state.currentresults.map now take a function with an asset and an index and we will return a google poly asset whose asset property is equal to the asset that we're currently mapping and since we're going to have multiple of these we need to set a key otherwise you'll get a yellow box error and we'll just set the key equal to the index and instead of displaying our turkey object we're going to call this dot render current results and when we make a small modification here which is we'll we'll check the length of this dot state that current results and we'll say if this dot state that current results dot length equals zero then we're just going to return text that says no results that way we know that we don't have any results and if there are results in there we'll call our map function so let's save that and i just realized that we didn't call the function here so add the parentheses there and call it save it again okay so we've got no results let's search for turkey click search and there you have it we have our results and i'm unable to scroll so we need to change this to a scroll view to allow scrolling save it again and try it one more time click search and there you go we have a list of 10 results related to turkeys if you take a look at the last one it's this bird with a red head let's load more and make sure that we got 10 more okay so that was our previous last one and here 10 more turkeys actually it's only three so that must have been the end of the results for turkey let's try changing the results again to dog and click search and well the first two results are foxes and that's one thing i've noticed is this the keywords query gives you some sometimes unexpected results as you can see there's a lot of animals on here that aren't actually dogs i'm not really sure what's going on with that but the api is working correctly it's just kind of giving you strange results all right so let's try to make our search results look a little bit nicer we'll probably come back to this later on and clean it up a bit but we can do a couple of things right now for one i think we can actually fit two results per row and i also would like to move the load more button down to the bottom so when you've scrolled down here you can click load more right there rather than having to scroll back up and we may make a couple of modifications to the text input so let's start off with adding two results per row and to make things a little bit easier for us since we may be refreshing and researching over and over again let's initialize our search query to be turkey so that every time we reload we don't have to type in a search query and click search we've got turkey right there we can go ahead and click search and get our results all right so to get two per row we're going to update our render current results function we still want the no results text if we have no results but let's try to put that in the center instead so let's add a view here and we'll say styles flex 1 align items center and end of the view so now the text will look a little bit nicer when there are no results and down here instead of using the map function let's create an array called results we'll put all of our google poly assets and let's do a loop for var i equals zero i less than this dot state that current results dot length and i plus plus what this is going to do is it's going to grab two results at a time put them into a view with a flex direction of row and and show all those results so first thing we should do is we should check if we're on the very last result and we don't have an extra one then we don't want to try to add two so let's check if r equal if i equals this dot state dot current results dot length minus one then we're just going to return a google poly asset whose asset is now equal to this dot state that current results i and whose key is now i and we'll break from the function but if we're not on the last one which means we do have at least one more we can i'm sorry this should not be returned this should be results dot push because we're adding to the results array and then down here after the loop we're going to return our results like that we'll just delete the map function right there okay so now in this section of code we know that we've got at least one more result so we'll say results.push and in this case we're going to push a view which has a style of flex direction row inside of that view we're going to have two google poly assets one for the current result one for the next result so we'll say i here and i plus one plus one and since we're looking at two results at a time we want to change our loop to be i plus equals two so instead of going up by one each iteration will go up by two each iteration and that should be all let's save and take a look at what our results look like now one thing i do want to do is turn off the disable yellow box feature so that if we do get any errors we'll see them let's refresh and we'll click search to get our search results and we're still getting this key error but we are getting two results per page it looks like so let's figure out what's wrong with this error first i believe it's because the view doesn't have a key so we'll set the key here equal to let's say row plus i okay we've eliminated the error we've got two results per row but we want to center these a little bit and maybe add some padding in between them so to center them let's put our results into a view so we'll say return view with the style flex 1 and align items center and inside of that view we'll put our results get rid of that and to add some padding in between these will go into the google poly asset component and in our container style let's just add some padding of about 10. so save that save our home screen may have to refresh again and click search and there you go we've got some padding in between rows two results per row everything's looking good there so we'll collapse this because it looks good right now and we said we're going to put the load more button towards the bottom that's easy to do we'll just cut this and paste it right below the results and if we click search we've got our results with a load more button down here and for some reason it's getting cut off at the end so why don't we just add a view here with some padding on the top just to give us some extra space so we can see everything click search load more great now something i just noticed is we're getting a load more button even if we don't have any results and i actually would like to hide that button until we have some initial results so an easy way to do that is with the ternary operator let's take our load more button and put it into brackets and give us some space here and what we'll do is we'll say if this dot state dot current results dot length equals zero we're just going to show a blank view but if it's not zero we're going to show the load more button so we'll save and refresh that now we're not getting the load more button once we have our initial results we've got a load more button there and we have some padding down below now for one last ui change let's let's update our text input a little bit and make it look a little nicer so i'll come to the text input here we've already got some properties i want to set the auto capitalize equal to false actually i think it takes a string so let's set it to none and for the style i want to add some padding of some margin on the horizontal of 10. let's refresh and see how that looks okay so it added a little bit of spacing here and let's also give it a border radius of 10 to round off the edges and i don't like how close the text is to the end of the box so we'll also add some padding horizontal of 10 as well great now we're ready to display the object that the user actually selects on the screen rather than the turkey as you can see i'm now streaming my actual device because we're going to need the camera and i've once again disabled yellow boxes by uncommenting this line because they were getting in the way of the button so just as a quick test i'm going to try adding a turkey again to make sure everything was working properly and there you have it i clicked add turkey and we got a turkey added right there so in order to keep track of the user selection we're going to add a new state variable and we'll call this one current asset that's going to be the 3d asset that the user has currently selected and rather than defaulting this to an empty object why don't we default it to the turkey object so that way before the user has even done a search they'll have an object that they can add to their screen i'm also going to delete these two state properties because we recently extracted them into the searchable google poly asset list i'll save that and we need to set our current asset whenever it is chosen from the search menu so if we come down here this is where our searchable google poly asset list is and we need some way for this component to tell us when an asset has been chosen and if you recall on our when we created the google poly asset component we gave it an on press function so we can utilize that to determine when an asset has been pressed so let's come into our searchable google poly asset list component and let's make a new property and this one will be called on asset press and we'll initialize that to a function that doesn't do anything let's scroll down to our render current results function and call the on asset press function anytime an asset is pressed so we'll open this up and here's where we're adding our google poly assets let's format the text just a little bit add some line breaks in there to make it a little bit easier to see when these properties start getting pretty long oops and we want to implement the on press function for the google poly asset and we want to call this dot props dot on asset press but we run into a problem which is this is running in a loop and we need to know exactly which asset was pressed so why don't we come up here and why don't we add an asset here to indicate that this function will take an asset and we'll come back into our google poly asset function and the on press will also provide us with an asset and when the on press is pressed here what it's actually going to do is call this.props.onpress and it's going to give it this dot props dot asset so whenever a google poly asset is pressed it's going to call its on press function and give this asset object right here as an input so we'll save that and come back into our searchable google poly asset list now we need to implement the on press for the other google poly assets that we've added let's add a few line breaks here to make it a little easier to read and we'll put on press here and on press here let's save that all right as you recall we're currently adding the object in the on add turkey press button and we're assigning the object to a variable called this dot turkey since it won't always be a turkey i think we should rename our function and our object so why don't we name the variable to this dot three model equals object and let's check where that's being used i think it's being used in onrender this is where we're rotating it so instead of this.turkey we'll say this.3 model and instead of on add turkey press why don't we say on add object press and come down here and instead of saying add turkey we'll say add object and call on add object press and in the google poly dot get three model function call instead of passing in turkey object what we're actually going to do is pass in the current asset so we'll say this dot state dot current asset and since we initialize it to the turkey object we can be sure that it will always have some sort of object in it i'm going to delete this console.log that says adding turkey because we're no longer adding a turkey and let's review when we click add object it will call this and it will load the asset that we currently have and actually one thing that we need to do is whenever this is pressed we need to remove the current object so one way of doing that is by saying this.scene.remove and we want to remove this.3 model so you can only have one three model on the scene at a time and we'll check if this actually exists so if this.3 model then we will remove it so that way if they click add object and it adds a turkey and then they go and search for something else and click add object again it'll first remove that turkey and then add the new object that they want to add let's also close the modal anytime an asset is chosen from the search so we'll come down to our on asset press function in the home screen and after setting the asset we're also going to set state search modal visible equal to false so let's save this and test it out alright so i'll hold my phone up and press add object which should give us the turkey by default if we look around a little bit there's the turkey now let's do a search and how about we search for duck and there's the turkey we don't use that how about we take this penguin and if we click add object you can see the turkey goes away and the penguin gets loaded in now that the main portions of the app are just about complete we're going to do a little bit of cleanup to make it look a little nicer and the cleanup will be done in no particular order so let's begin let's move over to the home screen and the first thing i want to do is make these buttons down here at the bottom look a little bit nicer so i'm going to use icons instead of buttons and we can use the icon library that comes with expo or you can install the library it's called react native vector icon so we will import material community icons as icon from react native vector icons and we'll come down to our render method and instead of these buttons we're going to place an absolutely positioned view on the bottom so we'll add a view here and give it a style so this view is going to be position absolute and it will have a bottom of zero so that it appears on the bottom also going to add flex one flex direction of row and that should be it for this one let's also add a sub view this one will also say is flex 1 flex direction row and we'll set the justify content to space between so that we'll have all of our buttons spaced out now for the buttons we're going to use icons the icon library comes with the component also called icon.button and you give it the name of an icon and an on press event so we'll have this button be our add object button so we'll say on press equals this dot on add object press and we'll look up the name later we'll add another one call for our search button so this will call this dot on search modal press and i actually want to add one more button that we haven't implemented yet which will be called remove object and that's just going to remove the current object if you don't have one on there so say icon.button name is blank for now and then on press equals this dot on remove object press let's go ahead and implement the on remove object press let's scroll up and here's our on add object press we'll put it right below that on remove object press and we've actually already done the logic for that here so why don't we copy that paste it and instead of doing this we'll just say this dot on remove object press all right we'll save that and refresh and uh as you can see we've got three placeholders for icon buttons but we don't have any actual icons because we left the names blank they've also got blue backgrounds which we don't want so let's go ahead and add a background color of transparent for each of these i'll copy that and paste it here and to figure out the icon names we can go over to the material community icons website and for add object i think we'll use a plus sign so let's search for plus and see if we can find one there's one and the name is just called plus we'll put plus here or we could use the plus box outline potentially let's look up minus for the remove and so we'll add minus for this one maybe we'll just use the plain ones and then for the search let's look for a magnifying glass and if we type search uh there's a magnifying glass and the name of it is magnify so we'll type that in and save it and see how it looks and you can barely see them because they're white but they should be a little more visible once we've removed these buttons and we might make them a bit bigger as well so we can go ahead and delete these buttons now since we've implemented them as icon buttons let's save again and there we have it we can test these out i'm going to click the magnifying glass button and as you can see our search box comes up okay so let's just go ahead and make these icons a slightly bit larger so we'll set the size equal to and say let's try 30 and see how that looks and i'll make it about 40 i think would be good so i'll set all these to 40. all right and that looks pretty good nice big buttons should be easy to press try it out okay if i click add for add an object we get our turkey perfect next i'm just going to scan through some of the files we made and i'm going to delete any debugging code that we may have added i'm also going to add comments since i've been dictating the code i didn't really add any comments as i was going but it's a good idea to add comments preferably while you're writing the code but if you have to you can go back and add them at the end as i'm doing now i usually like to put comments on top of each function explaining what it does sometimes it's pretty obvious so maybe i'll leave them out for this video so i'm scanning through here i want to find any time where we do a console.log and we don't actually want to log something so in this case we're just logging the current asset states i'll put a comment here remove the current object and then this one will be add the current object take out some of these white spaces this is for rotate the object render that all looks good okay so this file looks pretty good let me just collapse everything okay and remember we can take this out one other thing we can go ahead and delete this because we're no longer using that we're just only using the searchable google poly asset list i'll save that and i'll jump into the google poly class that we created just some blank lines here that we can remove this one i will say returns a 3.js object this one returns the results of the current query sets current search parameters and resets number variables this one returns a query url based on the given data okay that one looks good let's go to google polyacid.js look through this don't really see any problems with this one so we'll keep that same and then our searchable google poly asset list look through this real quick okay everything looks pretty good to me and this one so we'll keep that the same as well all right so now let's work on the search page component a little bit and make this look a little bit nicer i think one thing i want to do is put the cancel button up here to the right of the text input and maybe let's put a magnifying glass icon next to the search placeholder text so to get the icon we need to also import the icon library so let's import material community icons as icon from react native vector icons and we'll scroll down to where we're rendering the search input instead of just returning a text input let's return a view that will contain the text input so why don't we go ahead and just call this styles.search container and come down to our style sheet and create search container and what we want that to do is have a flex of one a flex direction of row and set align items to center so the magnifying glass will line up and i'm going to collapse these so i can find where we're working at easier okay so inside of this view we're going to add our icon with the name of magnify let's give it a color of some kind of gray so let's say dvdd and the size we'll say is 20. and right next to that we're going to take our text input and put it right there and since these styles are a little long we'll cut these and instead put styles dot search text inputs come down to our style sheet and search text input okay so we'll save that and see how it looks while that's loading i'm going to reformat these okay so as we can see the text input is not stretching all the way to the end like we want it to so we can fix that by adding flex of one and also i want the border to be around both the magnifying glass and the text input so i'm going to take the border width and put that up here and i'm going to take the border radius and put that up here as well and we want to add a little bit of horizontal spacing between the edge of the screen so on the container i'll add a margin horizontal of 10 and i'm going to remove the margin horizontal from here so that the search won't be so far away from the magnifying glass i'll save that and see how that looks okay it's looking much better i think we should change the color of the border maybe so on the container we'll set border color also to have that gray that we've been using and let's go ahead and move the cancel button up to the right side of the text input as well so let me collapse more of this stuff and we're going to grab the cancel button which i believe is right here take this out and we're going to put it well we don't want it to be inside of the border so we need to put it below the view which has the border and then we'll have to wrap all of this inside of another view and this view should also have a flex of one and a flex direction of row save that and see how it looks okay perfect and we'll set this to align items center just to be safe and i think for this one we'll want to put the margin horizontal to 10 and take it away from this one okay so it's looking pretty good i can test the cancel button so when i click that the search page goes away all right now let's adjust some of the spacing of the magnifying glass and the search so i'll come down here and i think instead of having a padding horizontal on the text input we'll add the horizontal padding to the icon itself so that way it spaces out a little bit away from the edge there and we'll have the same spacing there so on our icon i think we can give it a style and we'll say padding horizontal 10. okay it's looking better although i still think there's too much space here so let's change this padding horizontal to be padding left of 10 and we'll have a padding right of let's just try three and see how that looks while that's loading another thing i wanted to change was the no results text if we don't have any results i want to make that a little bit bigger and make it italicized so that's in render current results and here's the style for our text let me call this styles dot no results text and we'll come down here make a new style called no results text and we're going to make it a little bit bigger so we'll say font size of 18 font style italic and why don't we put some padding on the top of about 50 so it has some more space away from the search button save that oops i spelled italic wrong so okay it's looking pretty good in my opinion um i think one final thing we'll do is we'll make it so that when you press enter on your keyboard it will automatically perform the search and i can't remember the name of the property but i can come over to the documentation and if we scan through some of these properties we'll probably find it i believe it's on submit editing so this is says it's a callback that's called when the text input submit button is pressed so in our text input up here we're going to say on submit editing and we're going to give it the function that happens when search is pressed which is this dot on search press say this dot on search press and let's test that out if we wanted we could also change our keyboard type to be maybe web search although that's ios only or we'll just keep the default okay so if i open this up and i search for dog and i'm going to press return on the keyboard and there we have it it's showing the results now one thing i've noticed just now is that this text isn't centered and i think earlier we tried to make it centered so let's figure out what's going on there i'll open up google poly asset and look at our styles we may just need to add a text align of center to each of these let's save it and see if that's the problem well that worked for the first one oh i see i i accidentally put this in the thumbnail class should have been in the author name class okay one last time i'll search for dog and it looks like all the text is centered i'm trying to click that okay perfect all right and there's a bug i want to fix which is when we search for something such as dog we get the results and if we cancel the search and then bring it back up the results are no longer there but we have the load more button and i believe the problem for this is that we're not correctly initializing our current results array which is in our state which will find the constructor so instead of initializing it to a blank array i think we should set it to this dot props dot google poly dot current results i'll save that and test it out so i'll do a search for dog and i've got my results cancel and bring this back up and the results are there if i load let's try loading more looks like we have some layout issues for longer strings of text okay i'll cancel that bring it back up and there are the full results and let's try changing our result to duck there we go and another layout issue with long text to fix that layout issue in our google poly assets we'll come over to the google poly asset component and we'll set a width constraint on our text components we'll set the width to be the same width as the thumbnail so here in our display name we'll set a width of 150 and for author name also with the 150 and refresh the app and we'll do that same search for duck if we scroll down as you can see now the text is on multiple lines rather than pushing things over
