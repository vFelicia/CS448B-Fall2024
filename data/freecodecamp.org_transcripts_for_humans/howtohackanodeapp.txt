With timestamps:

00:03 - [Music]
00:21 - all right every hey me cool so before I
00:34 - begin I just like to ask a really quick
00:37 - question could you put your hands up if
00:41 - you've ever been so scared in your life
00:45 - so frightened that a little bit of pee
00:50 - has come out keep your hands up
00:57 - okay that's about 50% of the audience
01:00 - and there hopefully by the end of this
01:03 - talk I will have increased that number a
01:05 - little bit because today we're talking
01:08 - about web security and hacking my name
01:13 - is asked to me same on Twitter you can
01:16 - find me at jaw 8 I blog about JavaScript
01:21 - and angular on my site code Croft TV and
01:24 - I'm something called a cloud developer
01:27 - advocate and Microsoft so I work on the
01:30 - is your team or with the is your team
01:32 - and yeah I talk about cloud and security
01:36 - net and I and JavaScript in a bunch of
01:38 - those things but to begin with today I
01:41 - want to talk to you one tell you a story
01:44 - the story of my first startup
01:48 - it's called event sushi it was an event
01:51 - site that aggregated events from a bunch
01:55 - of different places from Meetup Facebook
01:57 - last.fm a few of the places
02:00 - at the time I used to work in investment
02:03 - banking my career was going very well
02:07 - there was good money but this just this
02:10 - was just a side project but you know it
02:14 - was going slightly ok very very slightly
02:17 - so I did where everybody does in this
02:20 - situation on that I quit a really good
02:23 - job well paying to work on something
02:25 - quite risky and I told you I was in
02:32 - investment banking so of course I was
02:33 - very very arrogant
02:36 - I had it at the start had investors who
02:38 - are interested investing in me but I was
02:41 - like no no no no this is gonna be a
02:44 - billion dollar startup I don't want your
02:47 - money I want a hundred percent so I said
02:50 - no so you can probably guess where I'm
02:54 - going with this six months later the
02:57 - product hadn't you know didn't wasn't a
02:59 - billion dollar startup I was running out
03:01 - money this is my money
03:02 - not invest as money my money I didn't
03:06 - have enough money to pay rent in two
03:08 - months so I didn't start going
03:10 - after the same investors saying hey look
03:13 - I'm interested now but they could tell
03:15 - they could tell that I was now desperate
03:17 - they were backing away they didn't want
03:20 - to invest a pot from one guy we've been
03:23 - talking for six months he lied me you
03:25 - liked the product and he said asked him
03:27 - okay look
03:28 - give me another demo in seven days show
03:31 - me what you built recently and then
03:34 - we'll talk and it was a good chance
03:35 - who's gonna invest yes but then 48 hours
03:44 - before the meeting with the investor I
03:48 - got emailed by Leonard Cellino were the
03:52 - people I was using to host my website
03:55 - and they said look assam it looks like
03:59 - your servers being compromised we can
04:02 - see it's making hundreds of requests to
04:04 - other servers and if you don't solve the
04:08 - problem in four in 24 hours we're gonna
04:11 - shut you down
04:12 - so in 48 hours I was gonna have a
04:16 - life-saving meeting with an investor and
04:18 - in 24 hours I was gonna get shut down by
04:21 - Linode so I panicked
04:24 - you know jumped onto the server I
04:26 - started looking around and to cut a long
04:28 - story short I definitely got hacked
04:31 - definitely got hacked
04:32 - I found stuff in a temp folder there
04:35 - were scripts that were running that was
04:37 - doing brute-force attacks on a bunch of
04:39 - IP addresses I'm not talking like what
04:42 - what is going on how did I get hacked
04:44 - and then after a bit more investigation
04:47 - I saw the PHP was running why is PHP
04:51 - running I'm not a PHP developer right
04:55 - then I remembered when I first set up
05:00 - the server I'd installed WordPress okay
05:03 - I got rid of it straight away but I
05:06 - forgot to remove it from the start
05:07 - script so when the server rebooted PHP
05:12 - started and that's how the hackers got
05:14 - in so you know I cleaned everything up
05:16 - removed from the start script contacted
05:18 - they know they were happy
05:19 - had the meeting with the investor he
05:21 - invested the startup still failed but
05:24 - had some money so I'm no fool I'm not an
05:31 - idiot
05:32 - I took security very very seriously when
05:36 - I set up that server I'd followed all of
05:38 - the instructions
05:39 - I just forgot on one tiny tiny tiny
05:42 - small thing so I think the lesson is
05:46 - that if it can happen to me it can
05:50 - happen to you so you might guess that I
05:54 - love stories so today I'm gonna talk to
05:58 - you about hacking but through a series
06:01 - of four different hacking stories some
06:04 - of these stories are going to be
06:05 - specific to notes um some are gonna be
06:07 - more general web development each
06:11 - story's gonna have a moral at the end a
06:13 - lesson to learn and perhaps some steps
06:16 - you can use to protect yourself and I
06:21 - think to begin with let's just start off
06:23 - by breaking down exactly how I think I
06:27 - got hacked on event sushi but first let
06:37 - me just explain a few terms so a
06:41 - vulnerability is a hole in your security
06:46 - a weakness so for instance not setting
06:50 - up a firewall is a hole in your
06:54 - Security's of vulnerability an exploit
06:57 - is a tool or a piece of code or even
07:02 - just a sequence of your commands that
07:06 - you execute which takes advantage of a
07:09 - vulnerability to do bad things okay so
07:13 - who here has heard the term zero-day
07:16 - exploit yeah so a zero-day exploit is
07:22 - one that nobody knows about yet okay
07:26 -  crew
07:32 - but once a zero-day exploit is found out
07:36 - about is known about perhaps a white hat
07:38 - hacker has discovered it and informed
07:41 - the company it's not called a zero-day
07:43 - exploit anymore
07:45 - anybody call their a1 there or 3:30 or a
07:49 - six-month expletive yeah will you call
07:51 - it that but just to think about just the
07:53 - way to think about it basically once a
07:55 - zero-day exploit becomes known the clock
07:58 - starts ticking let me ask you a question
08:02 - how hard do you think you would be to
08:04 - get a hold of a zero-day exploit pretty
08:11 - hard right now you need to be the right
08:14 - kind of person you need to know the
08:16 - right kinds of people there's a study
08:18 - done caramba when maybe last year they
08:22 - estimated that a zero-day exploit is
08:25 - sold for about quarter million dollars
08:26 - each the usually salt to criminal
08:29 - organizations or state-run hacking
08:33 - organizations but how hard do you think
08:37 - it would be to get a hold of a six month
08:40 - old exploit not very hard
08:46 - in fact it's it's just it's actually
08:48 - really really easy you can just find on
08:51 - the Internet
08:51 - this is one website exploit DB listless
08:56 - bunch of sizes this is just one of them
08:58 - and it's pretty easy to use siphon PHP
09:03 - it's got a capture hit search and take a
09:06 - look at this these are all the exploits
09:10 - is found look at the date we're still in
09:13 - 2017 PHP isn't very secure okay I can
09:21 - tell it got some PHP developers in the
09:23 - audience
09:27 - so we want you know this
09:30 - yeah mr. robot so we all like to believe
09:34 - all of the Oliver hackers are like this
09:39 - blackhat mysterious geniuses and I think
09:46 - we like to believe that because it makes
09:49 - us feel better when we do get hacked I
09:52 - mean if we got hacked and you can just
09:54 - say well how am I supposed to protect
09:56 - myself and mr. robot come on
10:00 - but mr. robot didn't hack me didn't use
10:05 - a zero they exploit to get into my
10:08 - server I was running a really old
10:12 - version of PHP my attacker googled how
10:18 - to hack me and followed instructions
10:23 - it's not hard in fact it's even easier
10:29 - than that I mean we're all developers in
10:31 - this room how many of us has been a day
10:35 - writing a script to automate something
10:38 - that takes us two minutes we all do all
10:42 - the time so why would hackers do the
10:44 - same and they do all the time this is a
10:48 - automated tool called Metasploit which
10:52 - you can basically point to a website and
10:55 - it will scan it for known runner built
10:57 - vulnerabilities and it also has a bunch
11:00 - of plugins in here and you can store
11:01 - other plugins that you want that will
11:03 - also perform automated attacks as well
11:07 - there's another study that estimated
11:09 - about 27% of all websites in the world
11:12 - can be hacked automatically
11:20 - so what can we do what can we do to to
11:25 - protect ourselves from this let's not
11:28 - not much you can do about zero day
11:29 - exploits okay you still you can't
11:33 - protect yourself from something you
11:34 - don't know about but you can defend
11:38 - yourself from the unknown all you've got
11:42 - to do is make sure you keep all of your
11:44 - stuff we're updated all the time you
11:45 - know make sure you keep the webserver
11:48 - updated oh the operating system itself
11:50 - make sure you keep that updated
11:51 - oh I'm using nginx gotta make sure I'm
11:54 - keeping tap dated and on my database
11:56 - gotta make sure I'm gonna keep my
11:57 - database updated all the time and oh my
11:59 - god I'm using em PMS need to make sure
12:01 - man p.m. modules of data real-time also
12:03 - need to listen to security bulletins as
12:05 - well and make sure I patch my software
12:07 - as soon as soon as anything gets updated
12:11 - especially not that easy and your job
12:13 - isn't to do all of that stuff your job
12:15 - is to write functionalities to write
12:18 - software for your end-users and that's
12:22 - why after I got hacked this one time
12:25 - I've started to exclusively use houses
12:29 - just explain what house is back in the
12:35 - old old days or even now if you sold it
12:38 - now and if you want to deploy something
12:40 - yet to have some sub on-premise Hardware
12:43 - you'd buy a server you maybe you hope
12:46 - you put it in your own room or you go to
12:47 - server farm and they will just put it in
12:50 - there for you but you're in charge of
12:52 - the hardware if the hard drive fails is
12:54 - up to you to fix it but then you're also
12:57 - responsible for the operating system
12:59 - keeping that updated and the web server
13:02 - run the database and everything else and
13:05 - your application as well you've got
13:08 - obviously keep updated then we have
13:11 - infrastructure as a service so that
13:14 - stuff like what Linode Amazon Web
13:17 - Services is your Google we've all got
13:20 - stuff like this and that's basically
13:21 - when you get a VM so somebody else is
13:24 - responsible for looking after your
13:26 - hardware if the hard drive fails they
13:30 - fix it
13:31 - but you still have to handle the
13:33 - operating system the web server with a
13:35 - database everything else and of course
13:38 - your application as well and then we
13:41 - have passes platform as a service so
13:45 - they handle the hardware they also
13:48 - handle the operating system depending on
13:51 - the powers of another web server and a
13:53 - database and everything else as well and
13:56 - you just focus on deploying your
13:57 - application and the thing with passes is
14:00 - they've got teams of people teams or
14:03 - security experts and all their job is
14:04 - every single day is making sure there's
14:07 - no security holes patching every
14:10 - vulnerability as soon as it gets
14:12 - released okay I know there's a bunch of
14:17 - them out there
14:17 - I work in Microsoft so we've got one
14:21 - called as your app services Google's got
14:23 - Google App Engine
14:25 - Amazon Beanstalk and there's another one
14:27 - I've used Polaroid but there's a bunch
14:28 - of others as well so and if you're still
14:35 - kind of a little bit and there's a lot
14:38 - of people who are kind of used to using
14:39 - VMs and installing all around software
14:41 - and managing all this stuff themselves
14:43 - that a little bit suspicious of what I'm
14:45 - saying who's heard of the Equifax hack
14:51 - happened earlier on this year ok it's
14:56 - the largest ever hack in history but 200
15:01 - million people's records were taken
15:04 - Equifax the billion dollar company about
15:07 - ten thousand employees did the hack is
15:12 - gained through a zero-day exploit no
15:17 - they got in through a known exploit of
15:22 - Apache struts which is a Java web
15:24 - framework
15:27 - patch to the fix was available for two
15:30 - months before the hackers got in all the
15:34 - Equifax had to do to defend from this
15:37 - attack was apply an update that just
15:41 - never updated their software largest
15:43 - hack in history Oh in the firm that cook
15:49 - one of the coolest things about is your
15:50 - that I like is something called he is
15:52 - your security center so as far as I can
15:55 - tell and correct me from wrong no one
15:58 - else has got this yet so one of the
16:01 - problems with detecting attacks is as
16:05 - low as a different signals all over the
16:07 - place and if you just alerted I'm every
16:10 - single signal then that just be too much
16:12 - noise and you start ignoring the ellipse
16:15 - so to solve this we trained in AI so we
16:20 - took a whole load of attack data we said
16:23 - this hall at a date so we said these
16:25 - signals are from definite attacks we
16:27 - trained up an AI so now we've beaten all
16:30 - of your signals through this ai and we
16:32 - alert you only when well the AI alerts
16:34 - now it's not perfect but it's easy just
16:40 - switch a button it switched on and I'm
16:42 - lazy so I just have to switch it on
16:47 - does anybody know this show nobody don't
16:54 - worry about it I think I'm one of the
16:55 - three fans of this show in the world
16:57 - it's called this so it's always sunny in
16:59 - philadelphia very funny I recommend a
17:01 - finger on the eleventh season now and
17:04 - this is one of the characters called
17:06 - Charlie Kelly and he plays the dumbest
17:11 - guy in the show he like cleans the
17:13 - toilets and kills rats that make sense
17:16 - as you watch it but one of the things is
17:19 - he thinks he thinks he's a lawyer
17:22 - so never he gets into trouble he always
17:24 - represents himself in court very badly
17:27 - represents him himself in court so my
17:31 - closing arguments of this
17:34 - thinking you can create a secure
17:36 - platform to host your application when
17:41 - you're not a security expert is like
17:44 - thinking you can represent yourself in
17:46 - court when you're not a lawyer so did I
17:54 - scare anybody just yet
17:55 - no you're all pretty pretty calm I can
17:59 - tell there's no I can't we see the fear
18:02 - in the you I can't smell it maybe the
18:04 - next one so I'm in the UK I'm based in
18:15 - the UK in the UK when you register a
18:19 - company you have to register with the
18:22 - government was something called
18:23 - Companies House so if you actually went
18:25 - to Companies House website and search
18:27 - for my company Dell Reaver Limited you
18:29 - would find me here and this is an actual
18:33 - company in the UK space this is the
18:38 - address yeah and what this is this is an
18:45 - example of an attack something called an
18:49 - injection attack something specifically
18:51 - called a sequel injection attack and the
18:55 - point of kind of any injection attack is
18:58 - to run untrusted code in a trusted
19:02 - environment so basically to trick you in
19:05 - running this sequel code here so how
19:12 - does that work maybe you've got a script
19:14 - which gets all the names and you want to
19:18 - grab some details from your database but
19:24 - if you actually put the name of the
19:25 - company in here you'd end up with
19:28 - something like this select star for a
19:32 - company where name is you mmm nothing
19:35 - drop table companies and then a comment
19:40 - man
19:42 - you might be saying so what a Seng I've
19:46 - backed up my company's table I'm not
19:49 - really bothered about this I'll just
19:51 - restore it but then the drop table isn't
19:55 - the only command you can run on a
19:57 - database and just like a lot of things
20:02 - there's automated tools which help to
20:06 - attack so look at this on sequel map
20:09 - automated SQL injection and database
20:13 - take over to take over
20:19 - so what does this do well you would run
20:26 - it
20:39 - there we go it's a Python script pass it
20:44 - some endpoint there's an API endpoint
20:46 - which has a injection attack
20:49 - vulnerability if they're scans it
20:51 - figures our is my sequel the version
20:53 - number different aspects about the
20:57 - database and then okay
21:00 - now we know it's my sequel let's try it
21:02 - with a common set of passwords for my
21:04 - sequels it's brute-force attacking and
21:06 - there we go found the password for it
21:08 - now let's have a list of the databases
21:11 - let's list all the tables that's now
21:18 - what's it gonna do now oh yeah let's
21:20 - dump a table let's dump the users table
21:22 - yeah okay no biggie but my sequel also
21:28 - lets you do things like OS shell which
21:31 - they should run commands on the server
21:32 - my sequels running on so we're running
21:34 - LS and now we're catching the password
21:38 - file all from one vulnerability in your
21:44 - script so in about a minute that's a
21:47 - minute
21:48 - in about a minute we ran that script and
21:50 - got the egg set to pass a file from your
21:53 - server awesome morale this story acting
22:02 - the moral of this story is never assume
22:04 - that your inputs will arrive in the
22:06 - format that you expect okay and the kind
22:11 - of solution for this and this kind
22:12 - generous across a lot of problems a lot
22:16 - of whole vulnerabilities in this base is
22:20 - to do something called sanitization okay
22:24 - you're you've got untrusted input that
22:26 - name was untrusted someone else is
22:29 - providing that so you have to sanitize
22:31 - it it's a bunch of different methods of
22:33 - sanitizer you want notice equal you can
22:35 - use sequel string where you pass it some
22:38 - untrusted sequel it will escape stuff
22:40 - that it knows is dangerous and that you
22:42 - run the output command output sequel
22:48 - and if you're using as your sequel
22:53 - database we also have detection
22:57 - capabilities or you can detect injecting
23:02 - sequel statements that we know are
23:04 - suspecting are basically injection
23:06 - attacks and we alert you on there we
23:08 - don't stop the sequel from being execute
23:09 - we just alert you on it and then feed
23:11 - him it's their AI as well so you can
23:13 - change you can actually see in a chain
23:16 - how we think you got sequel injection
23:17 - attacks oh we think that somebody logged
23:20 - into your server and you can follow this
23:22 - path through your system so that was a
23:27 - second story I'm feeling now a little
23:32 - bit more why I did I did just show
23:34 - everybody how to completely take over a
23:37 - server in a minute using okay you get a
23:41 - tough crowd well I don't know maybe the
23:44 - next story anybody heard of this this
23:49 - company no I still use them perforce so
23:58 - this is github we all know github
24:00 - hopefully and github has something
24:04 - called a bug bounty where basically they
24:08 - all like pay you if you find a security
24:12 - hole in their software and you tell them
24:15 - about it first you tell them about it
24:17 - privately and you give them a chance to
24:19 - fix it before you tell everybody in the
24:21 - world so there's a really great exploit
24:26 - found by this user called orange sigh
24:29 - this is their Twitter follow them I
24:32 - think posting some of the interesting
24:34 - stuff and it was with github Enterprise
24:38 - and they basically found a way to run
24:43 - any command on a github server the
24:47 - server itself okay and they did this by
24:52 - chaining a number of smaller exploits
24:55 - together into one really big exploit
24:57 - and and I really liked it because it
25:00 - reminded me of like a heist movie know
25:02 - movies where they rob a bank this story
25:06 - really reminds me of something like that
25:08 - so I'd love to share it with you so we
25:14 - know webhooks
25:15 - or with maybe we know web hooks and
25:17 - github where you can set up github so
25:19 - when you do a git push it does a post to
25:23 - some end point that you define pretty
25:27 - straightforward right
25:30 - but what if you set up the web Booker's
25:34 - blog post mm-hmm what what happened then
25:40 - well then when you do a git push behind
25:45 - the firewall it would then do a post to
25:50 - something internal to the server
25:51 - remember you can have localhost with a
25:53 - port number so you can post to any
25:55 - process running on that same machine but
26:00 - you know this is github very known
26:02 - Beneful x' they were using a sanitizer
26:05 - because that is untrusted input and that
26:09 - sanitizer knew the local host was a
26:12 - potential problems always strip it out
26:15 - but forgot about zero okay on some
26:22 - server zero would also point to
26:25 - localhost so then okay
26:29 - found a way in so now we've got one
26:31 - small vulnerability where you can do a
26:33 - git push and post to some process on
26:38 - your server but what what can you
26:39 - actually do with that well the server
26:43 - was also running elasticsearch we know
26:47 - elasticsearch that runs on port 9200 and
26:50 - if you do a post trip hate HTTP POST
26:54 - request to this port and this endpoint
26:58 - it shuts down elasticsearch
27:01 - but you know it's not a biggie it's not
27:04 - a big no biggest issue in the world then
27:09 - started looking for another
27:11 - vulnerability to chain onto this start
27:14 - looking at the code and found this okay
27:18 - so I know this is - don't worry about it
27:23 - I'll take you through so the server is
27:26 - also running another process called
27:27 - graphite was the Python process that
27:29 - lets you do kind charting and things
27:32 - like that
27:32 - and it's open source so it's checked
27:35 - into github so on github
27:38 - you found the source code for it and
27:40 - then this was one of the functions as it
27:43 - gets called on a on an API request and
27:48 - just to take you through what this is
27:49 - doing it gets there the URL from the
27:53 - query parameters gets the path and then
28:01 - does it get request to that path does it
28:06 - get request that path so what we're
28:11 - talking about here well now if you set
28:14 - your your web hook to this URL 800 is
28:21 - graphite when you do a git push it will
28:24 - post to this endpoint that endpoint is
28:28 - that send email function it will take
28:30 - this URL and then do a get request
28:34 - so all that these done is have turned a
28:38 - post into a get a post into again on its
28:46 - own maybe not such a big deal but
28:53 - but the actual method their actual
28:56 - library they use them to make that
28:57 - request it's called HTTP connection it's
29:00 - a Python library that has a known
29:01 - vulnerability something called carriage
29:04 - return line feed so Kara turn the
29:09 - backslash R is how you did new lines and
29:14 - windows and backslash n is new line
29:17 - everywhere else so but you know if you
29:22 - convert that to hex it would look like
29:23 - this
29:24 - oh do a so now what happens when you
29:32 - make a get request to this okay so when
29:39 - converted into the protocol they might
29:41 - look like this but hey CP connection
29:44 - library will convert these two new lines
29:47 - and then we're sending this okay so what
29:58 - is HTTP what is it what is hasty P HTTP
30:03 - is you open up a TCP connection to this
30:06 - host and port and then you're sending it
30:10 - a bunch of strings and if that host and
30:14 - port recognizes those strings it goes oh
30:17 - this is HTTP connection with a snippy
30:19 - message I know what to do but if it gets
30:23 - something this doesn't look like HTTP
30:26 - it's just going on this is a malformed
30:28 - the message it's going to kick it out of
30:30 - the way right that's what's happening
30:32 - here okay so what you can send a
30:37 - malformed haste VP message to the server
30:40 - but what if you did this
30:45 - okay that port is memcache now if you
30:51 - try to do a get request to this you
30:57 - actually end up sending a HTTP method
31:00 - message like this again we're opening up
31:03 - a TCP port to memcache memcache doesn't
31:08 - know what this means
31:09 - oh it's back memcache doesn't know what
31:19 - the first line means this is gonna
31:20 - ignore it right the second line is a
31:24 - memcache understands this it knows what
31:28 - this is this is setting the key the
31:30 - value data into the key key so it will
31:33 - do something with that it will then
31:35 - ignore this line at this then this thing
31:37 - doesn't know what these are okay
31:40 - what have we done we've done something
31:42 - called protocol smuggling okay in a HTTP
31:47 - message we've managed to smuggle the
31:50 - memcache protocol and so now we can set
31:55 - data in memcache oh I forgot
32:05 - okay so as developers we all like to
32:09 - store stuff in memcache and restore some
32:12 - Co serialize it store in memcache
32:14 - deserialize it execute it we're happy
32:17 - but we're all pretty lazy people so we
32:20 - probably don't do that serialization
32:22 - manually you probably use a library
32:25 - where you pass an object serializes it
32:29 - for us thaws in memcache take it back
32:31 - the lab your uncie realizes it I'm the
32:33 - executor sometime but now we can set
32:38 - some data in memcache so as a developer
32:44 - you're going to serialize your objects
32:46 - you're going to store it in memcache
32:49 - later on you're gonna deserialize your
32:52 - objects but you're not deserializing
32:54 - your object but deserializing my object
32:58 - you're gonna execute a function not get
33:01 - to execute your function you can execute
33:03 - my function okay
33:09 - I'm looking through the keys in the
33:11 - memcache found this
33:14 - so when you say realize a bunch of
33:16 - objects you might depending the library
33:19 - might store the name of the class which
33:21 - is getting serialize so they were using
33:24 - deprecated instance variable proxy
33:28 - instance variable proxy had a known
33:31 - vulnerability so they put deprecated in
33:33 - front of it but they still used it so
33:36 - then it basically had a vulnerability
33:40 - where if you deserialize an instance of
33:43 - instance variable proxy you can execute
33:45 - a command so then this is what the
33:49 - eventual webpop looks like you've got
33:54 - the first one it's that simple posts
33:56 - gets converted into a the second one to
33:59 - get then this is the memcache key so you
34:06 - can do set that's the key this is the
34:11 - deserialize data and icon where it is
34:14 - somewhere in here this is it this is the
34:18 - command when we deserialize this object
34:20 - the ID command gets run on the server so
34:28 - this is what they used to prove their
34:30 - case and get get the money examples are
34:33 - working you go to your profile click on
34:38 - a repository settings add a web for
34:47 - runs a script to get the eventual name
35:03 - okay gets their webhook URL puts it in
35:06 - [Music]
35:08 - gets ready to listen to any command to
35:10 - get run on the server and then to run
35:13 - that thing just basically does a search
35:15 - any search that's going to request that
35:18 - data from memcache the D serialization
35:20 - then runs the ID command on the server
35:25 - hmm the moral of the story
35:30 - big exploits are made from smaller
35:32 - exploits okay we like to think are our
35:35 - attacks coming through one big giant
35:37 - security hole but they don't you chain
35:41 - multiple smaller exploits together so
35:44 - you know if you find a vulnerability in
35:45 - your software anything yeah it's not
35:47 - that big a deal now fix it cuz the
35:51 - github is vulnerability the only thing
35:53 - they had in their code pretty small how
35:57 - you feeling now a little bit more okay
36:02 - I've got a rush to the next one but
36:04 - we'll go through fast all right what
36:08 - does this code do it takes your
36:13 - environment variables see that there's
36:16 - guess the string of um random variables
36:18 - okay what does this code do what's why
36:23 - is my surprise my server there Oh
36:26 - if you ran this code it looks like it
36:28 - would take all of your environment
36:30 - variables and post them to my server
36:35 - what if I told you I could make you run
36:37 - this code on your server who here puts
36:41 - like private things in there and random
36:44 - variables
36:44 - I don't yeah okay maybe maybe this makes
36:51 - it clearer what this is
36:55 - I should get an extra minute for this
36:57 - maybe this makes it clearer it's some
37:00 - sort of setup script in fact maybe this
37:03 - makes it clearer it's actually a an NPM
37:06 - module and this is a setup script for an
37:08 - NPM module if you install this NPM
37:11 - module you would send me all of your
37:13 - environment variables okay
37:17 - he probably saying Assam iodine store
37:19 - your npm module he saw this is Kirk
37:24 - almost two months ago now so Kent Dodds
37:29 - had a npm module called cross ends and
37:33 - they found that somebody else had create
37:36 - their own cross named module the real
37:39 - one was crossed hi for them the fate one
37:41 - was cross
37:42 - and without the - this is downloaded a
37:45 - million times a day by the way so if you
37:48 - installed cross them without the hyphen
37:50 - you are sending your environment
37:52 - variables to somebody - hacker how many
37:57 - times have you sat then and can't quite
37:59 - remember the npm module names you try it
38:02 - without the hyphen any like yeah would
38:03 - great that's what happens so the moral
38:11 - the stories were a little bit too
38:12 - trusting okay and I think maybe it's
38:15 - because it was open source we kind of
38:17 - trust open source data we don't really
38:19 - question it now MPM have taken down
38:26 - cross them they've they've got rid of
38:28 - all the ones they could find associated
38:30 - with that account but you can't really
38:32 - protect yourself from that okay well you
38:37 - can do with NPM now as you can
38:38 - absolutely call scope packages basically
38:41 - you can own the scope and then only you
38:44 - can publish things under it that's a
38:49 - solution to you stopping yourself
38:50 - getting typos spotted on which is what
38:53 - that's called
38:53 - but it doesn't stop you from
38:55 - accidentally installing something like
38:57 - cross them yeah just needs to keep your
38:59 - your mind clear on that one
39:01 - just in summary okay what the takeaways
39:05 - stop pretending
39:07 - stop retain that because you spend a few
39:09 - minutes thinking about security that you
39:12 - can create your own platform to run
39:14 - software and use the pass don't assume
39:18 - the inputs will come in the format that
39:21 - you expect sanitize don't think that
39:25 - just there's just a small one durability
39:27 - acting Nora fix it don't trust anyone
39:33 - and I don't have a solution for that so
39:35 - there's a unicorn and and that's it if
39:39 - you do want to know a little bit more my
39:41 - colleague has a course on no jet
39:44 - security I'll post up these slides on
39:47 - Twitter in a second so you want to
39:48 - follow me follow me at joy and then now
39:53 - post up all the slides and I'll have
39:54 - links for everything and I've just
39:57 - mentioned in this course in this course
39:59 - in this talk including all the links to
40:01 - all the vulnerabilities and things I
40:04 - mentioned and that's it very much
40:09 - [Music]

Cleaned transcript:

all right every hey me cool so before I begin I just like to ask a really quick question could you put your hands up if you've ever been so scared in your life so frightened that a little bit of pee has come out keep your hands up okay that's about 50% of the audience and there hopefully by the end of this talk I will have increased that number a little bit because today we're talking about web security and hacking my name is asked to me same on Twitter you can find me at jaw 8 I blog about JavaScript and angular on my site code Croft TV and I'm something called a cloud developer advocate and Microsoft so I work on the is your team or with the is your team and yeah I talk about cloud and security net and I and JavaScript in a bunch of those things but to begin with today I want to talk to you one tell you a story the story of my first startup it's called event sushi it was an event site that aggregated events from a bunch of different places from Meetup Facebook last.fm a few of the places at the time I used to work in investment banking my career was going very well there was good money but this just this was just a side project but you know it was going slightly ok very very slightly so I did where everybody does in this situation on that I quit a really good job well paying to work on something quite risky and I told you I was in investment banking so of course I was very very arrogant I had it at the start had investors who are interested investing in me but I was like no no no no this is gonna be a billion dollar startup I don't want your money I want a hundred percent so I said no so you can probably guess where I'm going with this six months later the product hadn't you know didn't wasn't a billion dollar startup I was running out money this is my money not invest as money my money I didn't have enough money to pay rent in two months so I didn't start going after the same investors saying hey look I'm interested now but they could tell they could tell that I was now desperate they were backing away they didn't want to invest a pot from one guy we've been talking for six months he lied me you liked the product and he said asked him okay look give me another demo in seven days show me what you built recently and then we'll talk and it was a good chance who's gonna invest yes but then 48 hours before the meeting with the investor I got emailed by Leonard Cellino were the people I was using to host my website and they said look assam it looks like your servers being compromised we can see it's making hundreds of requests to other servers and if you don't solve the problem in four in 24 hours we're gonna shut you down so in 48 hours I was gonna have a lifesaving meeting with an investor and in 24 hours I was gonna get shut down by Linode so I panicked you know jumped onto the server I started looking around and to cut a long story short I definitely got hacked definitely got hacked I found stuff in a temp folder there were scripts that were running that was doing bruteforce attacks on a bunch of IP addresses I'm not talking like what what is going on how did I get hacked and then after a bit more investigation I saw the PHP was running why is PHP running I'm not a PHP developer right then I remembered when I first set up the server I'd installed WordPress okay I got rid of it straight away but I forgot to remove it from the start script so when the server rebooted PHP started and that's how the hackers got in so you know I cleaned everything up removed from the start script contacted they know they were happy had the meeting with the investor he invested the startup still failed but had some money so I'm no fool I'm not an idiot I took security very very seriously when I set up that server I'd followed all of the instructions I just forgot on one tiny tiny tiny small thing so I think the lesson is that if it can happen to me it can happen to you so you might guess that I love stories so today I'm gonna talk to you about hacking but through a series of four different hacking stories some of these stories are going to be specific to notes um some are gonna be more general web development each story's gonna have a moral at the end a lesson to learn and perhaps some steps you can use to protect yourself and I think to begin with let's just start off by breaking down exactly how I think I got hacked on event sushi but first let me just explain a few terms so a vulnerability is a hole in your security a weakness so for instance not setting up a firewall is a hole in your Security's of vulnerability an exploit is a tool or a piece of code or even just a sequence of your commands that you execute which takes advantage of a vulnerability to do bad things okay so who here has heard the term zeroday exploit yeah so a zeroday exploit is one that nobody knows about yet okay crew but once a zeroday exploit is found out about is known about perhaps a white hat hacker has discovered it and informed the company it's not called a zeroday exploit anymore anybody call their a1 there or 330 or a sixmonth expletive yeah will you call it that but just to think about just the way to think about it basically once a zeroday exploit becomes known the clock starts ticking let me ask you a question how hard do you think you would be to get a hold of a zeroday exploit pretty hard right now you need to be the right kind of person you need to know the right kinds of people there's a study done caramba when maybe last year they estimated that a zeroday exploit is sold for about quarter million dollars each the usually salt to criminal organizations or staterun hacking organizations but how hard do you think it would be to get a hold of a six month old exploit not very hard in fact it's it's just it's actually really really easy you can just find on the Internet this is one website exploit DB listless bunch of sizes this is just one of them and it's pretty easy to use siphon PHP it's got a capture hit search and take a look at this these are all the exploits is found look at the date we're still in 2017 PHP isn't very secure okay I can tell it got some PHP developers in the audience so we want you know this yeah mr. robot so we all like to believe all of the Oliver hackers are like this blackhat mysterious geniuses and I think we like to believe that because it makes us feel better when we do get hacked I mean if we got hacked and you can just say well how am I supposed to protect myself and mr. robot come on but mr. robot didn't hack me didn't use a zero they exploit to get into my server I was running a really old version of PHP my attacker googled how to hack me and followed instructions it's not hard in fact it's even easier than that I mean we're all developers in this room how many of us has been a day writing a script to automate something that takes us two minutes we all do all the time so why would hackers do the same and they do all the time this is a automated tool called Metasploit which you can basically point to a website and it will scan it for known runner built vulnerabilities and it also has a bunch of plugins in here and you can store other plugins that you want that will also perform automated attacks as well there's another study that estimated about 27% of all websites in the world can be hacked automatically so what can we do what can we do to to protect ourselves from this let's not not much you can do about zero day exploits okay you still you can't protect yourself from something you don't know about but you can defend yourself from the unknown all you've got to do is make sure you keep all of your stuff we're updated all the time you know make sure you keep the webserver updated oh the operating system itself make sure you keep that updated oh I'm using nginx gotta make sure I'm keeping tap dated and on my database gotta make sure I'm gonna keep my database updated all the time and oh my god I'm using em PMS need to make sure man p.m. modules of data realtime also need to listen to security bulletins as well and make sure I patch my software as soon as soon as anything gets updated especially not that easy and your job isn't to do all of that stuff your job is to write functionalities to write software for your endusers and that's why after I got hacked this one time I've started to exclusively use houses just explain what house is back in the old old days or even now if you sold it now and if you want to deploy something yet to have some sub onpremise Hardware you'd buy a server you maybe you hope you put it in your own room or you go to server farm and they will just put it in there for you but you're in charge of the hardware if the hard drive fails is up to you to fix it but then you're also responsible for the operating system keeping that updated and the web server run the database and everything else and your application as well you've got obviously keep updated then we have infrastructure as a service so that stuff like what Linode Amazon Web Services is your Google we've all got stuff like this and that's basically when you get a VM so somebody else is responsible for looking after your hardware if the hard drive fails they fix it but you still have to handle the operating system the web server with a database everything else and of course your application as well and then we have passes platform as a service so they handle the hardware they also handle the operating system depending on the powers of another web server and a database and everything else as well and you just focus on deploying your application and the thing with passes is they've got teams of people teams or security experts and all their job is every single day is making sure there's no security holes patching every vulnerability as soon as it gets released okay I know there's a bunch of them out there I work in Microsoft so we've got one called as your app services Google's got Google App Engine Amazon Beanstalk and there's another one I've used Polaroid but there's a bunch of others as well so and if you're still kind of a little bit and there's a lot of people who are kind of used to using VMs and installing all around software and managing all this stuff themselves that a little bit suspicious of what I'm saying who's heard of the Equifax hack happened earlier on this year ok it's the largest ever hack in history but 200 million people's records were taken Equifax the billion dollar company about ten thousand employees did the hack is gained through a zeroday exploit no they got in through a known exploit of Apache struts which is a Java web framework patch to the fix was available for two months before the hackers got in all the Equifax had to do to defend from this attack was apply an update that just never updated their software largest hack in history Oh in the firm that cook one of the coolest things about is your that I like is something called he is your security center so as far as I can tell and correct me from wrong no one else has got this yet so one of the problems with detecting attacks is as low as a different signals all over the place and if you just alerted I'm every single signal then that just be too much noise and you start ignoring the ellipse so to solve this we trained in AI so we took a whole load of attack data we said this hall at a date so we said these signals are from definite attacks we trained up an AI so now we've beaten all of your signals through this ai and we alert you only when well the AI alerts now it's not perfect but it's easy just switch a button it switched on and I'm lazy so I just have to switch it on does anybody know this show nobody don't worry about it I think I'm one of the three fans of this show in the world it's called this so it's always sunny in philadelphia very funny I recommend a finger on the eleventh season now and this is one of the characters called Charlie Kelly and he plays the dumbest guy in the show he like cleans the toilets and kills rats that make sense as you watch it but one of the things is he thinks he thinks he's a lawyer so never he gets into trouble he always represents himself in court very badly represents him himself in court so my closing arguments of this thinking you can create a secure platform to host your application when you're not a security expert is like thinking you can represent yourself in court when you're not a lawyer so did I scare anybody just yet no you're all pretty pretty calm I can tell there's no I can't we see the fear in the you I can't smell it maybe the next one so I'm in the UK I'm based in the UK in the UK when you register a company you have to register with the government was something called Companies House so if you actually went to Companies House website and search for my company Dell Reaver Limited you would find me here and this is an actual company in the UK space this is the address yeah and what this is this is an example of an attack something called an injection attack something specifically called a sequel injection attack and the point of kind of any injection attack is to run untrusted code in a trusted environment so basically to trick you in running this sequel code here so how does that work maybe you've got a script which gets all the names and you want to grab some details from your database but if you actually put the name of the company in here you'd end up with something like this select star for a company where name is you mmm nothing drop table companies and then a comment man you might be saying so what a Seng I've backed up my company's table I'm not really bothered about this I'll just restore it but then the drop table isn't the only command you can run on a database and just like a lot of things there's automated tools which help to attack so look at this on sequel map automated SQL injection and database take over to take over so what does this do well you would run it there we go it's a Python script pass it some endpoint there's an API endpoint which has a injection attack vulnerability if they're scans it figures our is my sequel the version number different aspects about the database and then okay now we know it's my sequel let's try it with a common set of passwords for my sequels it's bruteforce attacking and there we go found the password for it now let's have a list of the databases let's list all the tables that's now what's it gonna do now oh yeah let's dump a table let's dump the users table yeah okay no biggie but my sequel also lets you do things like OS shell which they should run commands on the server my sequels running on so we're running LS and now we're catching the password file all from one vulnerability in your script so in about a minute that's a minute in about a minute we ran that script and got the egg set to pass a file from your server awesome morale this story acting the moral of this story is never assume that your inputs will arrive in the format that you expect okay and the kind of solution for this and this kind generous across a lot of problems a lot of whole vulnerabilities in this base is to do something called sanitization okay you're you've got untrusted input that name was untrusted someone else is providing that so you have to sanitize it it's a bunch of different methods of sanitizer you want notice equal you can use sequel string where you pass it some untrusted sequel it will escape stuff that it knows is dangerous and that you run the output command output sequel and if you're using as your sequel database we also have detection capabilities or you can detect injecting sequel statements that we know are suspecting are basically injection attacks and we alert you on there we don't stop the sequel from being execute we just alert you on it and then feed him it's their AI as well so you can change you can actually see in a chain how we think you got sequel injection attacks oh we think that somebody logged into your server and you can follow this path through your system so that was a second story I'm feeling now a little bit more why I did I did just show everybody how to completely take over a server in a minute using okay you get a tough crowd well I don't know maybe the next story anybody heard of this this company no I still use them perforce so this is github we all know github hopefully and github has something called a bug bounty where basically they all like pay you if you find a security hole in their software and you tell them about it first you tell them about it privately and you give them a chance to fix it before you tell everybody in the world so there's a really great exploit found by this user called orange sigh this is their Twitter follow them I think posting some of the interesting stuff and it was with github Enterprise and they basically found a way to run any command on a github server the server itself okay and they did this by chaining a number of smaller exploits together into one really big exploit and and I really liked it because it reminded me of like a heist movie know movies where they rob a bank this story really reminds me of something like that so I'd love to share it with you so we know webhooks or with maybe we know web hooks and github where you can set up github so when you do a git push it does a post to some end point that you define pretty straightforward right but what if you set up the web Booker's blog post mmhmm what what happened then well then when you do a git push behind the firewall it would then do a post to something internal to the server remember you can have localhost with a port number so you can post to any process running on that same machine but you know this is github very known Beneful x' they were using a sanitizer because that is untrusted input and that sanitizer knew the local host was a potential problems always strip it out but forgot about zero okay on some server zero would also point to localhost so then okay found a way in so now we've got one small vulnerability where you can do a git push and post to some process on your server but what what can you actually do with that well the server was also running elasticsearch we know elasticsearch that runs on port 9200 and if you do a post trip hate HTTP POST request to this port and this endpoint it shuts down elasticsearch but you know it's not a biggie it's not a big no biggest issue in the world then started looking for another vulnerability to chain onto this start looking at the code and found this okay so I know this is don't worry about it I'll take you through so the server is also running another process called graphite was the Python process that lets you do kind charting and things like that and it's open source so it's checked into github so on github you found the source code for it and then this was one of the functions as it gets called on a on an API request and just to take you through what this is doing it gets there the URL from the query parameters gets the path and then does it get request to that path does it get request that path so what we're talking about here well now if you set your your web hook to this URL 800 is graphite when you do a git push it will post to this endpoint that endpoint is that send email function it will take this URL and then do a get request so all that these done is have turned a post into a get a post into again on its own maybe not such a big deal but but the actual method their actual library they use them to make that request it's called HTTP connection it's a Python library that has a known vulnerability something called carriage return line feed so Kara turn the backslash R is how you did new lines and windows and backslash n is new line everywhere else so but you know if you convert that to hex it would look like this oh do a so now what happens when you make a get request to this okay so when converted into the protocol they might look like this but hey CP connection library will convert these two new lines and then we're sending this okay so what is HTTP what is it what is hasty P HTTP is you open up a TCP connection to this host and port and then you're sending it a bunch of strings and if that host and port recognizes those strings it goes oh this is HTTP connection with a snippy message I know what to do but if it gets something this doesn't look like HTTP it's just going on this is a malformed the message it's going to kick it out of the way right that's what's happening here okay so what you can send a malformed haste VP message to the server but what if you did this okay that port is memcache now if you try to do a get request to this you actually end up sending a HTTP method message like this again we're opening up a TCP port to memcache memcache doesn't know what this means oh it's back memcache doesn't know what the first line means this is gonna ignore it right the second line is a memcache understands this it knows what this is this is setting the key the value data into the key key so it will do something with that it will then ignore this line at this then this thing doesn't know what these are okay what have we done we've done something called protocol smuggling okay in a HTTP message we've managed to smuggle the memcache protocol and so now we can set data in memcache oh I forgot okay so as developers we all like to store stuff in memcache and restore some Co serialize it store in memcache deserialize it execute it we're happy but we're all pretty lazy people so we probably don't do that serialization manually you probably use a library where you pass an object serializes it for us thaws in memcache take it back the lab your uncie realizes it I'm the executor sometime but now we can set some data in memcache so as a developer you're going to serialize your objects you're going to store it in memcache later on you're gonna deserialize your objects but you're not deserializing your object but deserializing my object you're gonna execute a function not get to execute your function you can execute my function okay I'm looking through the keys in the memcache found this so when you say realize a bunch of objects you might depending the library might store the name of the class which is getting serialize so they were using deprecated instance variable proxy instance variable proxy had a known vulnerability so they put deprecated in front of it but they still used it so then it basically had a vulnerability where if you deserialize an instance of instance variable proxy you can execute a command so then this is what the eventual webpop looks like you've got the first one it's that simple posts gets converted into a the second one to get then this is the memcache key so you can do set that's the key this is the deserialize data and icon where it is somewhere in here this is it this is the command when we deserialize this object the ID command gets run on the server so this is what they used to prove their case and get get the money examples are working you go to your profile click on a repository settings add a web for runs a script to get the eventual name okay gets their webhook URL puts it in gets ready to listen to any command to get run on the server and then to run that thing just basically does a search any search that's going to request that data from memcache the D serialization then runs the ID command on the server hmm the moral of the story big exploits are made from smaller exploits okay we like to think are our attacks coming through one big giant security hole but they don't you chain multiple smaller exploits together so you know if you find a vulnerability in your software anything yeah it's not that big a deal now fix it cuz the github is vulnerability the only thing they had in their code pretty small how you feeling now a little bit more okay I've got a rush to the next one but we'll go through fast all right what does this code do it takes your environment variables see that there's guess the string of um random variables okay what does this code do what's why is my surprise my server there Oh if you ran this code it looks like it would take all of your environment variables and post them to my server what if I told you I could make you run this code on your server who here puts like private things in there and random variables I don't yeah okay maybe maybe this makes it clearer what this is I should get an extra minute for this maybe this makes it clearer it's some sort of setup script in fact maybe this makes it clearer it's actually a an NPM module and this is a setup script for an NPM module if you install this NPM module you would send me all of your environment variables okay he probably saying Assam iodine store your npm module he saw this is Kirk almost two months ago now so Kent Dodds had a npm module called cross ends and they found that somebody else had create their own cross named module the real one was crossed hi for them the fate one was cross and without the this is downloaded a million times a day by the way so if you installed cross them without the hyphen you are sending your environment variables to somebody hacker how many times have you sat then and can't quite remember the npm module names you try it without the hyphen any like yeah would great that's what happens so the moral the stories were a little bit too trusting okay and I think maybe it's because it was open source we kind of trust open source data we don't really question it now MPM have taken down cross them they've they've got rid of all the ones they could find associated with that account but you can't really protect yourself from that okay well you can do with NPM now as you can absolutely call scope packages basically you can own the scope and then only you can publish things under it that's a solution to you stopping yourself getting typos spotted on which is what that's called but it doesn't stop you from accidentally installing something like cross them yeah just needs to keep your your mind clear on that one just in summary okay what the takeaways stop pretending stop retain that because you spend a few minutes thinking about security that you can create your own platform to run software and use the pass don't assume the inputs will come in the format that you expect sanitize don't think that just there's just a small one durability acting Nora fix it don't trust anyone and I don't have a solution for that so there's a unicorn and and that's it if you do want to know a little bit more my colleague has a course on no jet security I'll post up these slides on Twitter in a second so you want to follow me follow me at joy and then now post up all the slides and I'll have links for everything and I've just mentioned in this course in this course in this talk including all the links to all the vulnerabilities and things I mentioned and that's it very much
