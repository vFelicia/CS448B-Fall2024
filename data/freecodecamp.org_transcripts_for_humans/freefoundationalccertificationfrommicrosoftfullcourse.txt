With timestamps:

00:00 - freeCodeCamp has teamed up with Microsoft to bring you a new free professional certification
00:05 - and course, the Foundational C-Sharp Certification.
00:09 - The course is a text-based course, not a video course.
00:13 - This professional certification includes 35 hours of text-based training and interactive
00:18 - coding challenges all from Microsoft, and also an online certification exam by FreeCodeCamp.
00:26 - By the end of this process, you'll have earned your very own verified certification
00:31 - that you can add to your resume, LinkedIn, or CV.
00:34 - In this video, freeCodeCamp team member Gavin Lon will preview the course, along with telling
00:39 - you everything you need to do to take this free course and earned certification.
00:45 - I'm really excited to introduce you to this new certification, offered to you through
00:49 - a collaboration between Microsoft and FreeCodeCamp.
00:52 - This certification is named Foundational C-Sharp with Microsoft Certification.
00:57 - You can earn this certificate online, free of charge.
01:01 - Hi and welcome.
01:02 - I'm Gavin Lahn.
01:03 - I've been a software engineer for over 20 years and an instructor for over five years.
01:09 - I run my own YouTube channel, mostly dedicated to providing an educational resource to.NET
01:15 - and C-Sharp developers, and those that aspire to become C-Sharp and.NET developers.
01:21 - With a great knowledge of the C-Sharp programming language, you can create many diverse types
01:25 - of applications on a diverse array of devices and platforms.
01:30 - You can also create sophisticated games, and who knows, even start your own lucrative business.
01:35 - But you are in a far better position than when I was getting started.
01:39 - The qualifications that I earned were rather expensive to acquire back when I was an aspiring
01:44 - software engineer.
01:46 - You are in a position to acquire this certificate that will ensure that you have a foundational
01:52 - knowledge of the C-Sharp programming language without spending a cent.
01:56 - I'm going to show you how to do this in this video.
02:00 - Before we look at an overview of the process on how to earn your certificate, let's briefly
02:04 - discuss the many advantages of having a good knowledge of C-Sharp and.NET.
02:10 - According to many reputable sources, C-Sharp is consistently rated as one of the top five
02:14 - most popular programming languages.
02:17 - I've personally witnessed and experienced how.NET, which provides an environment in
02:22 - which your C-Sharp applications run, has evolved from being a sophisticated ecosystem that
02:28 - runs on Windows platforms to a diverse, modular, agile environment that enables your C-Sharp
02:34 - code to run on a diverse array of platforms.
02:38 - Since the release of.NET 5 at the end of 2020,.NET provides a unified platform that
02:44 - enables your C-Sharp applications to run on Windows, macOS, Linux, iOS, Android, and many
02:50 - more platforms.
02:52 - You can create sophisticated games using game engines like Unity, where you are also able
02:57 - to monetize your games.
02:59 - With C-Sharp and.NET, you can create desktop applications, web applications like, for example,
03:04 - spa applications that leverage the Blazor framework, or you can leverage the ASP.NET
03:09 - MVC framework or the ASP.NET Razor Pages framework for creating web applications.
03:15 - You can create IoT Internet of Things applications, machine learning applications, AI can easily
03:22 - be integrated into your C-Sharp applications.
03:25 - You can create cross-platform mobile applications using the.NET MAUI framework.
03:30 - You can create cloud-native applications.
03:32 - You can run your C-Sharp code within Docker containers.
03:35 - You can, for example, leverage the microservice architecture to create globally distributed
03:40 - applications in the cloud.
03:42 - So you are almost unlimited with regard to the types of applications you are able to
03:46 - create using.NET and C-Sharp, and your C-Sharp code can run on a multitude of diverse platforms.
03:53 - You are able to download and install the tools for creating C-Sharp applications like the
03:58 - .NET SDK software development kit and Visual Studio Code free of charge.
04:04 - So you are only limited by your imagination and your knowledge.
04:08 - The means of production is in your hands.
04:11 - I'm proud to have had three of my C-Sharp and.NET courses published on the Free Code
04:15 - Camp YouTube channel.
04:18 - When you are ready, you can go through the step-by-step process of creating a web-based
04:22 - shopping cart application using Blazor Web Assembly and.NET Web API by following the
04:27 - step-by-step instructions provided in this course.
04:31 - You can follow the step-by-step instructions to create a sales management application that
04:35 - leverages Blazor Server with Microsoft Identity Integration.
04:40 - In this course, I also show you how to leverage the Syncfusion components to create sophisticated
04:46 - UIs.
04:47 - You can take your C-Sharp coding skills to the next level by gaining an understanding
04:51 - of the more advanced features of the C-Sharp programming language by going through this
04:55 - advanced C-Sharp course.
04:57 - Okay, but before we leap into any of these three courses, let's first understand the
05:02 - foundational concepts of the C-Sharp programming language.
05:07 - The foundational C-Sharp with Microsoft certification is offered to you through a collaboration
05:12 - between Microsoft and Free Code Camp and provides you with a highly accessible way to gain up-to-date
05:19 - central foundational knowledge of the C-Sharp programming language.
05:24 - Once you have gained the relevant foundational C-Sharp knowledge by traversing the comprehensive
05:28 - material provided on the Microsoft Learn platform, this qualifies you to take the certification
05:34 - exam.
05:36 - You take the exam on the Free Code Camp platform and once you have passed the exam, your certificate
05:41 - will be saved to your Free Code Camp profile.
05:44 - You will then be able to share this fantastic achievement publicly on the internet.
05:49 - You will not be charged at any point during this process.
05:54 - So how does this work?
05:56 - You start on the front page of the Free Code Camp platform, select the foundational C-Sharp
06:01 - with Microsoft certification item and simply follow the instructions.
06:06 - Basically, the process involves traversing the relevant course material provided to you
06:12 - on the Microsoft Learn platform.
06:14 - With each step, you'll be guided to the relevant content through instructions provided on
06:19 - the Free Code Camp platform.
06:22 - The course material is divided into six main parts that must be completed sequentially
06:27 - from one to six.
06:29 - Each part is divided into modules that you must complete sequentially until all of the
06:34 - modules have been completed.
06:36 - Once you have completed all of the modules for one of the six parts, you are awarded
06:42 - a trophy, which is denoted by a HTTP link that allows you to share your achievement
06:48 - publicly on the internet.
06:51 - Once you have earned all six trophies, meaning you have appropriately traversed all six parts
06:56 - of the relevant course material, you will be able to write the certification exam.
07:04 - Once you have passed the exam, you will be awarded your certificate.
07:09 - So how is your progress tracked across the Microsoft Learn platform and the Free Code
07:15 - Camp platform?
07:16 - Firstly, you must be logged into both platforms.
07:20 - Upon completion of each module, you will need to complete a challenge on the Free Code Camp
07:26 - platform.
07:27 - This challenge is denoted by a multiple choice question that you need to answer correctly
07:32 - before progressing to the next module.
07:55 - Once you have completed all of the modules for one of the six parts of the course material,
08:00 - your trophy must be saved to your Free Code Camp profile.
08:06 - Please note, this is how the process of saving your trophy, which is denoted by an appropriate
08:11 - HTTP link, is currently saved to your Free Code Camp profile.
08:16 - A more sophisticated way of linking your Microsoft Learn progress to your Free Code Camp profile
08:22 - is in the pipeline and may in fact be released by the time you start your journey toward
08:28 - earning your certificate.
08:30 - So this process may be different to the one depicted in this video.
08:33 - But please don't worry, comprehensive instructions in this regard will be provided on the Free
08:39 - Code Camp platform.
08:42 - Once you have saved all six trophies, you are then qualified to take the certification
08:46 - exam.
08:48 - Once you have passed the exam, which is made up of 80 multiple choice questions, you can
08:53 - then claim your certificate, which will be saved to your Free Code Camp profile.
08:59 - You will then be able to share your certificate publicly on the internet.
09:04 - I actually took the exam myself and recorded the process, so stick around to the end of
09:09 - the video to find out how I did.
09:13 - So let's get started.
09:15 - We'll start by going through the units in Part 1, Module 1, step by step and in detail.
09:21 - So before you start going through the course material in order to qualify to take the foundational
09:26 - C Sharp with Microsoft Developer Certificate exam, you must be appropriately logged into
09:32 - the Free Code Camp platform and the Microsoft Learn platform.
09:35 - Let's navigate to this URL to access the Free Code Camp platform.
09:41 - So in order to see a list of all the free free Code Camp certifications, let's press
09:47 - the button labeled Get Started, It's Free.
09:51 - We are presented with a list of all of Free Code Camp's free certifications.
09:56 - So let's find the list item labeled Foundational C Sharp with Microsoft Certification.
10:02 - And there it is.
10:03 - So let's select this item to get started on the path to attaining the Foundational C Sharp
10:08 - with Microsoft Developer Certificate.
10:13 - It's really simple to follow the path to attain this certification.
10:17 - The key is to follow the relevant instructions on the Free Code Camp platform and the Microsoft
10:23 - Learn platform as you progress.
10:26 - So we first get started with this process on the Free Code Camp platform.
10:32 - By the end of this course, you will have gained the practical skills and knowledge needed
10:36 - to confidently leverage C Sharp for building robust and scalable applications.
10:42 - So in order to start the first part of the course material, which is entitled Write Your
10:46 - First Code Using C Sharp, we can click this option denoting the first module in the list.
10:52 - This first module is entitled Write Your First C Sharp Code.
10:57 - There are six modules that we need to complete in order to earn a trophy for the first part
11:03 - of the course material.
11:05 - So let's click this link denoting the first module to get started.
11:10 - So we are presented with our first challenge immediately on the Free Code Camp platform.
11:15 - But we need to go through the relevant course material on the Microsoft Learn platform before
11:20 - we address this challenge, which is a multiple choice question.
11:24 - So let's first read through the instructions.
11:27 - Write Your First C Sharp Code.
11:29 - This challenge will be partially completed on Microsoft's Learn platform.
11:34 - Follow these instructions to complete the challenge.
11:37 - Go to this URL and complete all the tasks of the Write Your First C Sharp Code module.
11:43 - This is required to earn the Write Your First Code Using C Sharp trophy.
11:49 - When you are finished, come back and correctly answer the question below.
11:54 - So this link here denotes the location of the relevant Microsoft Learn material that
12:00 - we need to appropriately traverse.
12:03 - Navigating to the URL denoted by this link will load the course material for the first
12:08 - module on the Microsoft Learn platform into your browser.
12:13 - I recommend using the relevant Free Code Camp webpage loaded in the first tab of your browser
12:19 - and then the relevant Microsoft Learn webpage loaded in a tab to the immediate right of
12:24 - the tab containing the relevant Free Code Camp webpage.
12:28 - So if you are set up appropriately, you can click the link here and this will automatically
12:32 - add a new tab next to the tab containing the Free Code Camp webpage and load the relevant
12:38 - Microsoft Learn webpage into the new tab.
12:41 - You can of course simply add a new tab manually and copy and paste the relevant URL denoted
12:46 - by this link into the new tabs address bar in order to load the relevant Microsoft Learn
12:51 - webpage.
12:53 - Just as long as you have the appropriate Free Code Camp webpage and the appropriate Microsoft
12:58 - webpage loaded in tabs adjacent to one another, you are in a good position to progress.
13:03 - Of course at this stage, you should also be appropriately logged into Free Code Camp and
13:07 - Microsoft Learn.
13:09 - So let's traverse the content for part one, module one.
13:14 - Part one, write your first code using C sharp.
13:18 - Get started with C sharp part one.
13:21 - Module one, write your first C sharp code.
13:24 - Get started by writing code examples to learn the basics of the C sharp syntax.
13:31 - Learning objectives.
13:32 - After you complete this module, you'll be able to write your first lines of C sharp
13:37 - code, use two different techniques to print a message to a text console, diagnose errors
13:45 - when you type code incorrectly, identify different C sharp syntax elements like operators, classes
13:52 - and methods.
13:54 - You can see this module is made up of seven units and here are the headings for the seven
13:59 - units that make up this module.
14:01 - So let's press the start button and progress through the units in this module.
14:06 - You can see here at the top the unit number we are on, the current unit if you like, and
14:12 - the total number of units contained in this module.
14:16 - So we're on unit one and the total number of units in this module is seven.
14:21 - And we could use these arrows to navigate in a forward direction through the units and
14:26 - we can also navigate backwards through the relevant units.
14:30 - But we need to traverse these units in sequence one after the other.
14:34 - Let's go into this in more detail.
14:36 - So let's read through the first unit which contains content for introducing us to the
14:40 - module entitled write your first C sharp code.
14:45 - Introduction.
14:46 - The C sharp programming language allows you to build many types of applications like business
14:52 - applications to capture, analyze and process data, dynamic web applications that can be
14:59 - accessed from a web browser, games both 2D and 3D, financial and scientific applications,
15:06 - cloud based applications, mobile applications.
15:10 - But how do you begin to write an application?
15:14 - Applications are all made up of many lines of code that work together to achieve a task.
15:19 - By far the best way to learn how to code is to write code.
15:23 - It's encouraged that you write code along with the exercises in this module and the
15:27 - others in this learning path.
15:30 - Writing code yourself in each exercise and solving small code challenges will accelerate
15:35 - your learning.
15:36 - You'll also begin learning small foundational concepts and build on them with continual
15:41 - practice and exploration.
15:44 - In this module you'll write your first lines of C sharp code.
15:48 - Use two different techniques to print a message as output.
15:52 - Diagnose errors when code is incorrect.
15:55 - Identify different C sharp syntax elements like operators, classes and methods.
16:01 - By the end of this module you'll be able to write C sharp code to print a message to
16:06 - the standard output of a console like the Windows terminal.
16:11 - These lines of code will give you your first look at the C sharp syntax and immediately
16:16 - provide invaluable insights.
16:20 - So to progress to the next unit in this module we can press the continue button here.
16:26 - Exercise.
16:27 - Write your first code.
16:29 - In this first hands-on exercise you'll use C sharp to print a hallowed programmer's phrase
16:35 - to the standard output of a console.
16:38 - You can see here is where we can write and run our C sharp code.
16:42 - So in this module we'll use this basic editor to write the code for the relevant exercises.
16:47 - When we follow the first module in the subsequent part, the second part of the overall course
16:52 - material, we'll install Visual Studio Code and we'll run Visual Studio Code locally and
16:58 - we'll write the code for subsequent exercises and challenges using Visual Studio Code.
17:04 - When we follow the first module in the second part of the course material, we'll also install
17:09 - the.NET SDK so that we can use this.NET SDK to build and run our code.
17:17 - For this module and the other modules in this part of this exam preparation course material
17:23 - if you like, we'll use this in browser editor so let's continue.
17:29 - Write your first line of code.
17:31 - There's a long-standing tradition among software developers to print the phrase hello world
17:36 - to the console output window.
17:39 - As you'll experience you can learn a lot about programming and the C sharp programming language
17:44 - from this simple exercise.
17:47 - Enter code into the.NET editor.
17:50 - The.NET editor and output console provide a great in browser experience that's perfect
17:55 - for this tutorial approach.
17:58 - The.NET editor is located on the right-hand side of this webpage.
18:04 - The output console is below it.
18:07 - Enter the code exactly as it appears into the.NET editor on the right.
18:11 - You'll see an explanation of how and why it works soon.
18:15 - But first you should experience it running and ensure you entered it correctly.
18:19 - So to do that you'll run your code.
18:22 - So we could simply copy the code to the in browser.NET editor here and run our code.
18:28 - But here we are being advised to write out the code ourselves rather than just copying
18:33 - and pasting the relevant code into the.NET editor.
18:36 - Note you might be tempted to select copy or run and skip all the keystrokes.
18:43 - However there are benefits to typing code yourself.
18:47 - Having the code yourself reinforces memory and understanding that will help you gain
18:51 - insights that you wouldn't get otherwise.
18:56 - So let's type out the code ourselves in the.NET editor.
19:02 - Great!
19:03 - Run your first code.
19:05 - Press the green button.
19:06 - The green run button performs two tasks.
19:09 - It compiles your code into an executable format that a computer can understand.
19:15 - It runs your compiled application and when written correctly will output hello world.
19:23 - Observe your results.
19:25 - In the output console observe the result of your code.
19:29 - You should get the following output.
19:33 - Excellent!
19:36 - What to do if you get an error message?
19:39 - Writing C-sharp code is an exercise in precision.
19:42 - If you type just one character incorrectly you'll get an error message in the output
19:46 - area when you run the code.
19:49 - For example if you were to incorrectly enter a lowercase c in the word console like so
19:57 - you would get the following error message.
19:59 - The first part 1 comma 1 indicates the line and column where the error occurred.
20:05 - But what does this error message mean?
20:08 - C-sharp is a case sensitive language meaning that the C-sharp compiler considers the words
20:13 - console with a lowercase c and console with an uppercase c as different as the words cat
20:20 - and dog.
20:22 - Sometimes the error message can be quite misleading.
20:25 - You'll need to understand the true reason why the error exists and that comes through
20:31 - learning more about C-sharp's syntax.
20:34 - Similarly if you use single quotation marks to surround the literal string hello world
20:40 - like so
20:54 - you would get the following error message.
20:57 - Again in line 1 character 19 points to the culprit.
21:02 - You can use the message as a clue as you investigate the problem.
21:07 - But what does the error message mean?
21:09 - What exactly is a character literal?
21:12 - Later you'll learn more about literals of various data types including character literals.
21:17 - For now be careful when you're entering code fortunately errors are never permanent you
21:22 - merely spot the error fix it and rerun your code.
21:27 - If you got an error when you ran your code take a moment to look at it closely examine
21:32 - each character and make sure you entered this line of code exactly.
21:38 - Note the code editor is constantly monitoring the code you write by performing pre-compilation
21:44 - to find potential errors.
21:46 - It will try to help you by adding red squiggly lines underlining the code that will produce
21:52 - an error.
21:54 - Learn mistakes new programmers make.
21:57 - Entering lowercase letters instead of the capitalized C and console or the letters capital
22:02 - W or capital L in right line.
22:05 - Entering a comma instead of a period between console and right line.
22:10 - Forgetting to use double quotation marks or using single quotation marks to surround the
22:15 - phrase hello world.
22:18 - Forgetting a semicolon at the end of the command.
22:21 - Each of these mistakes prevents your code from compiling successfully.
22:26 - The code editor highlights pre-compilation errors to help you easily identify and correct
22:32 - mistakes as you develop your code.
22:35 - You can think of it like a spell checker that helps you fix grammar or spelling errors in
22:40 - a document.
22:42 - Assuming you were successful in the previous steps let's continue display a new message.
22:49 - In this task you'll comment out the previous line of code then add new lines of code in
22:55 - the.NET editor to print a new message.
22:59 - Modify the code you wrote so that it's prefixed by a code comment using two forward slashes.
23:07 - You can create a code comment by prefixing a line of code with two forward slashes.
23:13 - This prefix instructs the compiler to ignore all the instructions on that line.
23:19 - Code comments are helpful when you're not ready to delete the code yet but you want
23:25 - to ignore it for now.
23:27 - You can also use code comments to add messages to yourself or others who may later read the
23:31 - code reminding you of what the code is doing.
23:36 - Add new lines of code to match the following code snippet.
23:58 - Press the green run button again.
24:01 - This time you should get the following output.
24:04 - Great.
24:06 - The difference between console.write and console.write line.
24:11 - The three new lines of code you added demonstrated the difference between the console.write line
24:17 - and console.write methods.
24:19 - To print an entire message to the output console you used the first technique console.write
24:25 - line.
24:26 - At the end of the line it added a line feed similar to how to create a new line of text
24:32 - by pressing enter or return.
24:35 - To print to the output console but without adding a new feed at the end you used the
24:41 - second technique console.write.
24:45 - So the next call to console.write prints another message to the same line.
24:51 - Congratulations on writing your first lines of code.
24:54 - Excellent.
24:55 - Okay.
24:56 - So we can now progress to the next unit by pressing this continue button.
25:02 - Learn how it works.
25:03 - To understand how your code works you need to step back and think about what a programming
25:08 - language is.
25:11 - Consider how your code communicates commands to the computer.
25:15 - What is a programming language?
25:18 - Programming languages like C sharp let you write instructions that you want the computer
25:22 - to carry out.
25:24 - Each programming language has its own syntax but after learning your first programming
25:28 - language and attempting to learn another one you'll quickly realize that they all share
25:33 - many similar concepts.
25:35 - A programming language's job is to allow a human to express their intent in a human
25:40 - readable and understandable way.
25:42 - The instructions you write in a programming language are called source code or just code.
25:49 - Software developers write code.
25:50 - At this point a developer can update and change the code but the computer can't understand
25:55 - the code.
25:56 - The code first must be compiled into a format that the computer can understand.
26:04 - What is compilation?
26:06 - A special program called a compiler converts your source code into a different format that
26:12 - the computer's central processing unit CPU can execute.
26:16 - When you used the green run button in the previous unit the code you wrote was first
26:22 - compiled then executed.
26:25 - Why does code need to be compiled?
26:28 - Although most programming languages seem cryptic at first they can be more easily understood
26:33 - by humans than the computer's preferred language.
26:37 - The CPU understands instructions that are expressed by turning thousands or millions
26:43 - of tiny switches either on or off.
26:49 - Compilers bridge these two worlds by translating your human readable instructions into a
26:54 - computer understandable set of instructions.
26:59 - What is syntax?
27:00 - The rules for writing C-sharp code is called syntax.
27:04 - Just like human languages have rules regarding punctuation and sentence structure computer
27:09 - programming languages also have rules.
27:12 - Those rules define the keywords and operators of C-sharp and how they are put together to
27:18 - form programs.
27:20 - When you wrote code into the.NET editor you may have noticed subtle changes to the color
27:26 - of different words and symbols.
27:29 - Syntax highlighting is a helpful feature that you'll begin to use to easily spot mistakes
27:34 - in your code that don't conform to the syntax rules of C-sharp.
27:41 - How did your code work?
27:43 - Let's focus on the following line of code you wrote console dot write line hello world.
27:50 - When you ran your code you saw the message hello world was printed to the output console.
27:55 - When the phrase is surrounded by double quotation marks in your C-sharp code it's called a
28:00 - literal string.
28:02 - In other words you literally wanted the characters H-E-L-L-O and so on sent to the output.
28:12 - The console part is called a class.
28:15 - Classes own methods or you could say the methods live inside a class.
28:22 - To visit the method you must know which class it's in.
28:26 - For now think of a class as a way to represent an object.
28:30 - In this case all of the methods that operate on your output console are defined inside
28:35 - the console class.
28:37 - There's also a dot or period that separates the class name console and the method name
28:43 - write line.
28:44 - The period is the member access operator.
28:47 - In other words the dot is how you navigate from the class to one of its methods.
28:52 - The write line part is called a method.
28:55 - You can always spot a method because it has a set of parentheses after it.
29:00 - Each method has one job.
29:02 - The write line methods job is to write a line of data to the output console.
29:09 - The data that's printed is sent in between the opening and closing parentheses of an
29:15 - input parameter.
29:18 - Some methods need input parameters while others don't.
29:22 - But if you want to invoke a method you must always use the parentheses after the methods
29:27 - name the parentheses are known as the method invocation operator.
29:35 - Finally the semicolon is the end of statement operator.
29:39 - A statement is a complete instruction in C sharp.
29:43 - The semicolon tells the compiler that you finished entering the command.
29:49 - Don't worry if all of these ideas and terms don't make sense.
29:53 - For now all you need to remember is that if you want to print a message to the output
29:57 - console use console dot write line your message here like this capitalize console write and
30:06 - line use the correct punctuation because it has a special role in C sharp.
30:13 - If you make a mistake just spot it fix it and rerun.
30:18 - So here we have a tip to advise us on how to memorize the C sharp syntax.
30:23 - Create a cheat sheet for yourself until you've memorized certain key commands.
30:29 - Understand the flow of execution.
30:30 - It's important to understand the flow of execution.
30:33 - In other words your code instructions were executed in order one line at a time until
30:40 - there were no more instructions to execute.
30:43 - Some instructions will require the CPU to wait before it can continue.
30:49 - Other instructions can be used to change the flow of execution.
30:54 - Now let's test what we've learned.
30:57 - Each module features a simple challenge and if you get stuck you'll be supplied with
31:02 - a solution.
31:03 - In the next unit you'll get a chance to write some C sharp code on your own.
31:09 - Right so now we get the first knowledge check.
31:13 - So it's just a straightforward multiple choice question.
31:17 - What is the difference between console dot write and console dot write line?
31:23 - Is the answer console dot write prints the output on a new line?
31:28 - Console dot write line prints the output on a new line?
31:32 - Or is the answer console dot write line appends a new line after the output?
31:38 - So we know the answer is item three console dot write line appends a new line after the
31:44 - output but I want to demonstrate what happens if we choose an incorrect answer.
31:50 - So let's select option one which is clearly incorrect and press the check your answers
31:55 - button.
31:57 - So we are presented with a dialogue that contains the message congratulations you earned experience
32:03 - points for completing the knowledge check.
32:06 - On this dialogue we can either click the button labeled continue or the button labeled review
32:11 - answers.
32:13 - Just a reminder you should at this point be logged into Microsoft learn with your Microsoft
32:18 - account so that your progress is recorded as you progress through the relevant course
32:22 - material.
32:24 - At the end of each part of the course material when I say part please don't confuse this
32:29 - with a module each of the six parts contains multiple modules there are six parts overall.
32:35 - So once you have appropriately traversed all of the modules contained in a particular part
32:40 - you will earn a trophy which is denoted by a URL link that must be appropriately saved
32:46 - to your free code camp profile.
32:48 - We'll look at the details of how to do this at the appropriate point in this video.
32:52 - For now please be aware that you must be logged into Microsoft learn and free code camp so
32:57 - that your progress is appropriately recorded.
33:00 - This is so that once you have gone through all the course material your progress would
33:04 - have been recorded which will enable you to write the foundational C sharp with Microsoft
33:09 - certification exam on the free code camp platform.
33:13 - So let's choose to click the review answers button here so that we can see where we went
33:19 - wrong with our answer choice.
33:21 - I find it is often a good idea to go over my answers after each knowledge check to make
33:27 - sure that I've properly understood the relevant course material.
33:30 - So let's press the review answers button and Microsoft learn gives us feedback clarifying
33:35 - why our choice was incorrect.
33:38 - Microsoft learn provides us with clear reasons as to why the answer we chose is incorrect
33:43 - and why the correct answer should have been chosen.
33:47 - So it is often a good idea especially if you have chosen an incorrect answer to review
33:52 - your answers before progressing to the next unit in the module so as to ensure that you
33:58 - have gained the appropriate knowledge before progressing.
34:01 - Great, so let's move on to the next unit by clicking the continue button here.
34:07 - So here we are presented with a challenge.
34:09 - It is explained to us here that in order to complete this challenge we need to use a combination
34:14 - of both console dot write and console dot write line to produce this output.
34:20 - So please briefly pause the video, read through the provided instructions regarding this challenge
34:25 - and attempt to write the code to solve this challenge.
34:29 - Then I'll show you my solution to the challenge.
34:33 - Okay, so here's my solution to the challenge.
34:56 - Great, I'm getting the correct output.
35:03 - Let's review the solution provided by Microsoft learn so we can press the continue button
35:08 - to progress to the next unit where we'll be able to review the provided solution to the
35:14 - challenge.
35:15 - Okay, so the provided solution is slightly different to the one that I came up with but
35:19 - that's okay, both solutions are correct.
35:22 - This code is just one possible solution among many possible ways to achieve the same result.
35:28 - However, you should have used both the console dot write line and console dot write methods
35:33 - to produce the desired result.
35:35 - There is often more than one correct way to solve a coding challenge.
35:39 - Great.
35:40 - Okay, so we can now progress to the penultimate unit in this module, which is a knowledge
35:45 - check unit, which entails us taking a multiple choice test to test the knowledge we have
35:51 - just acquired.
35:53 - So let's click the continue button to progress and let's check our knowledge by taking this
35:58 - multiple choice test.
36:00 - So please read through each multiple choice question and with each question select one
36:05 - of the provided options you think correctly answers the question.
36:30 - Let's check our answers.
36:31 - Excellent.
36:32 - We have definitely learned something.
36:35 - So once the check your answers button is pressed, we are presented with a dialogue saying congratulations,
36:42 - you earned experience points for completing the knowledge check.
36:47 - So because we are appropriately logged into the Microsoft Learn platform, our progress
36:51 - is appropriately recorded.
36:53 - So this time, all of our answers are correct and we are happy that we have comprehended
36:58 - all the relevant course material.
37:00 - So this time, let's press the continue button on the dialogue in order to progress to the
37:04 - next unit.
37:07 - So at this last unit, we are presented with a summary of what we have learned by going
37:12 - through this module.
37:15 - We also have a button labeled unlock achievement.
37:18 - It is of course important that before you press this button that you read through this
37:22 - summary.
37:24 - So after reading the summary, if you press this button, we are presented with a dialogue
37:29 - that contains the message you did it.
37:33 - So this means we have completed the relevant module and our progress has been recorded
37:38 - in our Microsoft Learn profiles.
37:41 - So we can now press the continue button here.
37:44 - We are presented with three learning paths in this dialogue.
37:47 - We are going to continue with the second option here, write your first code using C sharp,
37:52 - get started with C sharp part one.
37:55 - But we don't need to click this link here.
37:57 - In the context of the foundational C sharp with Microsoft certification, we must follow
38:02 - the instructions on the free code camp webpage that should be loaded in the browser window
38:08 - on the left tab of our browsers.
38:12 - So after completing each module, the next step is to go back to the free code camp tab
38:18 - in your browser and pass the challenge which is a multiple choice question.
38:23 - So for clarity, what I like to do after completing a module is close down the Microsoft Learn
38:28 - tab before taking the relevant free code camp challenge.
38:33 - Then when we are on the free code camp tab, we can address the relevant challenge.
38:38 - So this multiple choice question which is our challenge is asking us what is the difference
38:42 - between console.write and console.write line.
38:47 - The possible answers are console.write prints the output on a new line, console.write line
38:53 - prints the output on a new line and console.write line appends a new line after the output.
39:00 - So we know after traversing and comprehending the relevant course material in the first
39:05 - module of the first part of this course material that option three is clearly the correct answer.
39:12 - So let's select option three and then click the check your answer button.
39:18 - A dialogue is then presented to us showing us our progress through part one of the course
39:23 - material.
39:25 - So the next step is to click the button labeled submit and go to next challenge.
39:31 - So let's do that.
39:36 - We are now presented with the next challenge on free code camp.
39:40 - This challenge pertains to part one module two and we have only at this stage traversed
39:45 - the course material for part one module one.
39:49 - So this challenge pertains to part one module two which is entitled store and retrieve data
39:55 - using literal and variable values in C sharp.
39:59 - Let's read the instructions here.
40:01 - This challenge will be partially completed on Microsoft Learn's platform.
40:06 - Follow these instructions to complete the challenge.
40:08 - Go to referring to a particular link and complete all the tasks for the store and retrieve data
40:15 - using literal and variable values in C sharp module.
40:19 - This is required to earn the right your first code using C sharp trophy.
40:25 - When you are finished, come back and correctly answer the question below.
40:30 - So we are being prompted to go through the course material before we complete the challenge
40:35 - on this page on free code camp.
40:37 - So let's open a new tab next to our free code camp tab and make sure the new tab is navigated
40:43 - to the URL denoted by this link here.
40:47 - So I'll appropriately open the new tab pointing to this appropriate location by clicking this
40:51 - link.
40:54 - Great.
40:57 - So we can now appropriately traverse the course material for part one module two, store and
41:02 - retrieve data using variable values in C sharp.
41:07 - So in preparation for the foundational C sharp with Microsoft developer certificate exam,
41:13 - you'll need to appropriately follow the relevant instructions as you progress through each
41:18 - unit in this module.
41:19 - This video is just an instructional guide and overview.
41:23 - So I won't go through this module in the depth that I went through for module one.
41:28 - So I'm going to speed through the units in module two to the final unit.
41:42 - Great.
41:53 - And then at the end of module two, we simply repeat the process of closing down the Microsoft
41:58 - Learn tab, taking the challenge on the free code camp webpage loaded into the free code
42:04 - camp tab and then load the next Microsoft Learn module.
42:18 - In this case, module three of part one into a tab next to the free code camp tab, a link
42:24 - to the location of module three is provided in the webpage loaded on the relevant free
42:30 - code camp tab in our browsers.
42:33 - We can then appropriately traverse the course material and module three, there are six modules
42:38 - in part one.
42:39 - So in order to prevent this video from being a 35 hour video, I'm going to fast forward
42:45 - through all of the remaining modules in this part right till the end of module six.
42:50 - Module six is entitled guided project calculate final GPA, where we'll earn a trophy for completing
42:58 - all the modules in part one of the relevant course material.
43:28 - Great.
43:29 - Thank you.
43:59 - you
44:29 - .
44:31 - .
44:33 - .
44:35 - .
44:37 - .
44:39 - .
44:41 - .
44:59 - So, we have now completed all of the modules. We are on the final unit of Module 6 of Part 1.
45:07 - Let's now press the Unlock Achievement button on this webpage. We are presented with a dialogue containing a message,
45:13 - You earned a trophy. So, we can now close down the Microsoft Learn tab and take the final challenge for Part 1 on the free CodeCam tab, like this.
45:27 - So, let's answer the relevant multiple choice question. Let's click the button labelled Submit and go to next challenge.
45:34 - So, we have completed the course material for Part 1, i.e. where we have traversed all 6 modules contained in Part 1 and have comprehended the relevant course material.
45:44 - And we have completed all of the free CodeCam challenges pertaining to all of the 6 modules in Part 1.
45:50 - So, the next step is to copy the link denoting the trophy that we have earned for completing Part 1 of the course material and paste the link into this text box labelled Microsoft Link on this free CodeCam webpage.
46:03 - We can then click the button labelled I have completed this challenge. Before we do this, let's read the instructions on the relevant free CodeCam webpage.
46:12 - Trophy, write your first code using C-sharp. So, this is the title for Part 1 of the course material.
46:19 - Now that you have completed all the write your first code using C-sharp modules on Microsoft's Learn platform,
46:26 - submit the URL to your trophy below. Follow these instructions to find your trophy URL.
46:33 - Go to and then there is a reference to a specific URL. Using a browser you are logged into Microsoft with, find the trophy for write your first code using C-sharp and click the share icon next to it.
46:47 - Click the copy URL button, paste the URL into the input below. The URL should look similar to this.
46:55 - This trophy is required to qualify to take the certification exam.
47:01 - Great, so let's follow these instructions. So, first we must be appropriately logged into Microsoft Learn and Free CodeCam.
47:09 - We can click this link to locate our trophy.
47:19 - And you can see here, we have this panel if you like. Write your first code using C-sharp.
47:25 - We can then click this button and click this item from the drop down list to copy the link that denotes our trophy to our clipboards.
47:33 - Let's go back to the Free CodeCam tab and copy the contents of our clipboards into the relevant text box labeled Microsoft link.
47:49 - And then click the button labeled I've completed this challenge.
47:55 - We are then presented with a dialog box showing us our progress.
47:59 - We can then click the button labeled submit and go to next challenge.
48:04 - We are presented with a page showing us all the course parts and modules that we need to appropriately traverse before writing the foundational C-sharp with Microsoft Developer Certificate exam.
48:18 - So, we must follow the same basic pattern as we traverse the course material for part two, create and run simple C-sharp console applications.
48:28 - Module one, which is entitled install and configure visual studio code.
48:39 - So, we are on part two module one.
48:43 - And in this part, we are going to install visual studio code on our local machines as well as the.NET SDK.
48:51 - Basically, this module contains instructions for installing visual studio code, a great tool that we can use for editing and debugging our code on our local machines.
49:01 - This module also contains instructions for installing the.NET SDK.
49:05 - SDK stands for software development kit, which is a tool we can use to build and run our code by typing relevant commands in the terminal window within visual studio code.
49:16 - This module also contains material that teaches us about visual studio code and the.NET SDK.
49:23 - So, basically, you need to progress through this module in much the same way as we progress through part one module one.
49:31 - So, we completed part one module one, and we fast forwarded through the other five modules to complete part one, and we are looking at part two module one.
49:41 - You will, of course, need to properly complete all the six modules in part one before getting to this point.
49:47 - But this video is intended to provide you with basic instructions.
49:51 - In the interest of time, we are not comprehensively covering all of the relevant course material in this video.
49:57 - You will, of course, need to cover all the course material and comprehend the relevant course material in order to qualify to take the certification exam on the free CodeCam platform,
50:07 - pass the exam, and attain your foundational C-sharp with Microsoft Developer Certificate.
50:14 - So, you must go through all of the material in this module in order to progress to the next module.
50:19 - But in this video, I'm simply going to provide basic instructions, in my own words, on how to install visual studio code on your local machines,
50:28 - configure the C-sharp dev kit extension for visual studio code, and install the.NET SDK.
50:35 - So, let's start part two module one.
50:39 - I'm not going to read through all of the reading material in this module, but in this part of the video, I'll demonstrate installing visual studio code and the.NET SDK.
50:50 - You will need to go through the material in this module for a detailed explanation of this process.
50:56 - Let's first see what Microsoft Learn says about visual studio code here.
51:05 - Visual studio code is a lightweight but powerful source code editor that runs on your desktop and is available for Windows, macOS, and Linux.
51:15 - It comes with built-in support for JavaScript, TypeScript, and Node.js, and has a rich ecosystem of extensions for other languages and runtimes, such as C++, C-sharp, Java, Python, PHP, Go, and.NET.
51:31 - Right, let's install visual studio code.
51:33 - Firstly, let's navigate to this URL in our browsers, where we can download the appropriate version of visual studio code to our local machines.
51:42 - We can then go through the installation process, which is fairly straightforward.
51:46 - This Microsoft Learn module provides comprehensive installation instructions.
51:52 - So, let's navigate to this URL, and let's click this button to download the appropriate version of visual studio code.
52:04 - If you look at the items in this drop-down list, you can see that you are able to download a version of visual studio code that is appropriate to your operating system.
52:14 - I'm running Windows 11, so let's press the button to download visual studio code.
52:33 - Let's navigate to our downloads folder and run the relevant install file by double-clicking on it.
52:39 - And it's a simple case of going through the installation process by following the instructions on the relevant dialogue.
53:09 - Once we have installed visual studio, we can fire it up and look at the relevant parts of the interface.
53:22 - A, the activity bar is the narrow vertical bar located on the far left-hand side of the window.
53:29 - The activity bar lets you switch between views, such as explorer or extension, and gives you other context-specific indicators.
53:39 - B, the sidebar contains views that provide tools and resources.
53:45 - The sidebar views, such as explorer, are very helpful when you're working on a code project.
53:52 - C, the editor is the area used to edit your files. You can open as many editors as you like, side by side, vertically and horizontally.
54:03 - D, the panel area is used to display different panels below the editor region for output or debug information, errors and warnings, or an integrated terminal.
54:14 - E, the status bar is the horizontal bar along the bottom of the window that displays information about the opened project and the files you edit.
54:25 - F, the main menu is the menu interface at the top of the application window.
54:30 - The menu options enable you to save, edit and run your code, and much more.
54:35 - As you become more proficient with visual studio code, you'll be working in the screen areas described.
54:42 - To start out, however, the most important areas for you to remember are the activity bar, the sidebar, and the editor.
54:50 - The activity bar is where you select the activity you want to perform.
54:54 - The sidebar displays tools and options, and the editor displays the information that you edit, usually your code.
55:02 - In Unit 5 of this module, we have instructions for configuring visual studio code extensions.
55:09 - The extension that we are going to install will help us to develop, edit and debug C-sharp code and visual studio code.
55:30 - So, one thing to note is that rather than install this C-sharp extension, there's a more updated extension. We should install this updated extension, the C-sharp devkit extension.
55:42 - This extension builds on top of the great C-sharp language capabilities provided by the C-sharp extension and enhances your C-sharp environment
55:52 - by adding a set of powerful tools and utilities that integrate natively with VS code to help C-sharp developers write debug and maintain their code faster and with fewer errors.
56:04 - Some of this new tooling includes, but is not limited to, C-sharp project and solution management via an integrated solution explorer.
56:14 - Native testing environment to run and debug tests using the test explorer.
56:20 - Roslyn powered language service for best in-class C-sharp language features such as code navigation, refactoring, semantic awareness and more.
56:30 - AI assisted development. So, let's install the C-sharp devkit extension like this.
56:41 - Great!
56:44 - So, we have now installed visual studio code and installed the C-sharp devkit extension so that we can effectively edit and debug our code.
56:53 - But we also need a tool that we can use to build and run our C-sharp code. So, we are going to use the.NET SDK for this purpose.
57:02 - SDK stands for software development kit.
57:05 - The latest stable release at the time of creating this video of the.NET SDK is version 7. So, we can download and install the.NET SDK from this URL like this.
57:35 - Thank you.
58:05 - I'm not going to complete this installation because I already have a preview release of.NET 8 installed which is fine for running through the code examples that I'd like to go through in this video.
58:22 - But please complete this installation so that you have the appropriate version of the latest stable release of the.NET SDK installed on your local machine.
58:31 - For going through the code exercises, guided projects and challenges in this course material, I recommend installing the latest stable release of the.NET SDK which at the time of creating this video is version 7.
58:44 - So, once you have installed the.NET SDK, you can verify that you have installed the.NET SDK by typing.NET-version like this at your command prompt in the terminal window of visual studio code like this.
58:59 - My output confirms that I have.NET 8 Preview 6 installed.
59:04 - You are able to have multiple versions of.NET installed on your local machines.
59:09 - You are able to see what versions you have of.NET installed on your machines by running this command,.NET-info.
59:19 - .NET is a cross-platform open source developer platform that can be used to develop different types of applications.
59:26 - It includes the software languages and code libraries used to develop.NET applications.
59:32 - You can write.NET applications in C-sharp, F-sharp or Visual Basic.
59:37 - The.NET runtime is the code library that's required to run your C-sharp applications.
59:42 - You may also see the.NET runtime referred to as the Common Language Runtime or CLR.
59:48 - The.NET runtime isn't required to write your code, but it's required to actually run your applications.
59:56 - The.NET Software Developer Kit SDK includes a command-line interface CLI that can be accessed from Visual Studio Code's integrated terminal.
60:06 - During this training, you use.NET CLI commands to create new console applications, build your project code and run your applications.
60:15 - For example, the following.NET CLI command will create a new console application in the specified folder location.
60:24 - So in order to create a.NET console application, you can type this command.
60:29 - .NET new console-o.forward slash C-sharp projects forward slash test project.
60:39 - So let's create a very basic.NET console project that we can open in Visual Studio Code.
60:45 - Firstly, create a directory on your local machine, i.e. where you'd like to store your C-sharp code files for your C-sharp project.
60:54 - So I'm going to create a folder named dev in my C drive for this purpose.
61:07 - Then open the directory you have just created within Visual Studio Code, like this.
61:13 - You'll notice that within the terminal window, your current directory is the one that you have just opened within Visual Studio Code.
61:22 - So to create a.NET console project, you can type this command within your terminal window like this and press the enter key.
61:30 - So.NET new console-o.forward slash C-sharp projects forward slash test project.
61:42 - So this command has created a C-sharp projects folder and within the C-sharp projects folder, a folder named test project.
61:51 - Notice that within the test project folder, we have a file named test project that has a.csproj extension.
62:00 - This file denotes the console project that we have just created.
62:05 - In the Explorer panel, expand the C-sharp projects folder.
62:09 - You should see the test project folder and two files, a C-sharp program file named program.cs and a C-sharp project file named test project.csproj.
62:23 - The clr command uses the folder name when it creates a project named test project.csproj.
62:32 - The program.cs file is the file containing your C-sharp code.
62:38 - In order to run the code for our C-sharp project using the appropriate.NET CLI command,
62:44 - we need the test project directory to be our current directory.
62:48 - This is because the.csproj file resides in the test project directory.
62:53 - So let's make test project our current directory using the cd command.
63:08 - Let's edit our code in the program.cs file so that our application outputs hello C-sharp rather than hello world.
63:16 - Before we build or run our code, we must first save our changes.
63:21 - So let's do that through the file menu like this.
63:25 - Before we run our code, let's first run the.NET build command to see if our code compiles.
63:38 - Great! Build succeeded!
63:41 - Then to run our code, let's type the.NET run command and press the enter key.
63:51 - Excellent! And that is an expected result.
63:55 - Hello C-sharp is printed to the terminal window. Our application has run successfully.
64:05 - Module 3 of part 2. Okay, so let's skip to module 3 of part 2.
64:12 - So we are still on the same part, part 2, create and run simple C-sharp console applications, get started with C-sharp part 2.
64:22 - We are skipping to module 3, add decision logic to your code using if, else and else if statements in C-sharp.
64:31 - You will of course need to properly traverse all of the preceding course material before you get to this point,
64:39 - but this part of the video is just to give you an idea of some of the practical code examples that you'll create
64:46 - at various points as you go through the relevant course material.
64:50 - Let's skip to unit 4 of this module and look at an overview of this code challenge.
64:58 - Challenge, improve renewal rate of subscriptions.
65:03 - You've been asked to add a feature to your company's software.
65:07 - The feature is intended to improve the renewal rate of subscriptions to the software.
65:13 - Your task is to display a renewal message when a user logs into the software system and is notified their subscription will soon end.
65:24 - You'll need to add a couple of decision statements to properly add branching logic to the application to satisfy the requirements.
65:33 - To create the initial code for this challenge, enter the following code.
65:41 - So let's do that.
65:45 - Review the business rules for this challenge.
65:49 - Rule 1, your code should only display one message.
65:54 - The message that your code displays will depend on the other five rules.
65:58 - For rules 2 to 6, the higher numbered rules, take precedence over the lower numbered rules.
66:05 - Rule 2, if the user's subscription will expire in 10 days or less, display the message your subscription will expire soon.
66:14 - Renew now.
66:16 - Rule 3, if the user's subscription will expire in 5 days or less, display the messages your subscription expires in underscore days.
66:27 - Renew now and save 10%.
66:30 - Note, be sure to replace the underscore character displayed in the message above with the value stored in the variable days until expiration when you construct your message output.
66:42 - Rule 4, if the user's subscription will expire in one day, display the messages your subscription expires within a day.
66:51 - Renew now and save 20%.
66:54 - Rule 5, if the user's subscription has expired, display the message your subscription has expired.
67:01 - Rule 6, if the user's subscription doesn't expire in 10 days or less, display nothing.
67:09 - Implement your solution using if statements.
67:12 - Your solution must use separate if and if else statements to implement the business rules.
67:19 - The if else statement can include multiple else if parts.
67:24 - Create an if else statement that displays a message about when the subscription will expire.
67:30 - Tip, use an else if to ensure each expiration rule is accounted for.
67:38 - Create a separate if statement that displays a discount offer.
67:42 - The business rules indicate when a discount should be offered.
67:51 - We are using the built-in.NET Random class to return a random value between 1 and 12.
67:58 - The generated random value denotes the number of days until a subscription expires.
68:05 - Based on the generated random value, our code makes a decision, as it were, using if else if conditional logic to output an appropriate message.
68:15 - And if relevant, set the discount percentage variable to an appropriate discount value.
68:21 - Note that string interpolation is used here to include the appropriate discount percentage value within the outputted message.
68:29 - For string interpolation to work, a $ symbol is included immediately before the relevant string literal.
68:36 - The variable value is contained within the string literal and wrapped in curly brackets.
68:41 - These rules are followed to implement string interpolation correctly using the C-sharp language.
69:12 - So let's compare our code solution to the one provided in the Microsoft Learn course material.
69:20 - So to do this, let's press the Continue button.
69:50 - We can run our code by typing.NET RUN in the terminal window and pressing the Enter key.
70:21 - Great!
70:40 - Part 3 Module 3
70:42 - At this point, I'm going to skip to Part 3, add logic to C-sharp console applications, get started with C-sharp Part 3.
70:50 - Module 3, branch the flow of code using the switch case construct in C-sharp.
71:04 - And we're on Unit 2 of this module.
71:06 - A switch statement is a C-sharp selection statement that provides an alternative to an if-else if-else branching construct.
71:15 - The switch statement provides advantages over an if-else if-else construct when evaluating a single value against a list of known matching values.
71:26 - Consider the following scenario. You're working on an application related to food nutrition.
71:33 - A section of the code deals with fruits. Your code includes a variable named fruit that's used to hold the name of the different types of fruit.
71:44 - You have a list of the 20 fruits that your application is focused on.
71:49 - You want to branch your code based on the value assigned to fruit.
71:54 - In this scenario, you can use a switch statement to create a separate branch for each type of fruit.
72:00 - Further down the page, we are guided through a coding exercise to help us understand switch statements.
72:07 - Let's go through the step-by-step instructions for this coding exercise.
72:12 - Ensure that you have Visual Studio Code open and Program.cs displayed in the Editor panel.
72:18 - Type the following code into the Visual Studio Code Editor. So let's do that.
72:41 - Basically, in this switch statement, you are evaluating the employee-level variables value.
72:47 - In the case where the employee-level variable equals 100, the title variable is set to junior associate.
72:54 - In the case where the employee-level variable value is 200, the title variable is set to a string value of senior associate.
73:04 - In the case where the employee-level variable is set to 300, the title variable is set to a value of manager.
73:11 - If the employee level variable value does not match any of these cases,
73:16 - the code within the default section is run and the title variable is set to Associate.
73:22 - On the Visual Studio Code file menu, select Save.
73:26 - The program.cs file must be saved before building or running the code.
73:33 - At the terminal command prompt, type.NET run and then press Enter.
73:39 - Note, if you see a message saying, couldn't find a project to run,
73:43 - ensure that the terminal command prompt displays the expected test project folder location.
73:50 - You should see the following output.
73:59 - Take a minute to review the switch statement that you entered.
74:03 - Notice that the switch statement defines a single code block that includes a list of switch sections.
74:09 - To the right of the switch keyword is a switch expression that's enclosed in parentheses.
74:16 - Notice the list of switch sections inside the code block.
74:20 - The switch code block contains a list of switch sections,
74:23 - each of which includes one or more switch labels.
74:26 - In addition, each switch section includes a statement list
74:30 - that will execute if the label is equal to the switch expression defined at the top of the switch statement.
74:37 - The switch expression is evaluated against the case labels from top to bottom
74:42 - until a value that is equal to the switch expression is found.
74:46 - If none of the labels are a match, the statement list for the default case will be executed.
74:53 - If no default is included, control is transferred to the endpoint of the switch statement.
74:59 - Each label must provide a value type that matches the type specified in the switch expression.
75:07 - Note the optional default label can appear at any position within the list of switch sections.
75:13 - However, most developers choose to put it last
75:17 - because it makes more sense logically to position default as the final option.
75:23 - Regardless of the position, the default section will be evaluated last.
75:27 - In our example, the switch expression is employee level.
75:32 - Each switch section has a single switch label, case or default.
75:37 - The matching switch section is defined by case 200 since employee level equals 200.
75:45 - Notice that each switch section is separated from the next.
75:49 - Only one switch section is allowed to be executed.
75:52 - This means the execution of a switch section is not permitted to fall through to the next switch section.
75:59 - The break keyword is one of several ways to end a switch section before it gets to the next section.
76:07 - If you forget the break keyword or optionally the return keyword, the compiler will generate an error.
76:15 - Change the level variable value to see how the switch statement evaluates it.
76:20 - To exercise the default case, let's change the employee's level by modifying the value assignment.
76:27 - So if we assign the value 201 to the employee level variable and we run the code,
76:40 - now when we run the code, you should see the more generic title used.
76:45 - Since the employee level doesn't match any labels, the default label is matched.
76:52 - Modify a switch section to include multiple labels.
76:59 - Suppose our company decided to give all level 100 employees the title Senior Associate,
77:05 - the same title as level 200 employees.
77:08 - As the developer, you decide to implement this by removing the first switch section belonging to label case 100
77:16 - and instead allow both the case 100 and case 200 labels to execute the same switch section.
77:24 - Save your code file and then use Visual Studio Code to run your code.
77:29 - Enter.NET run from the terminal command prompt to run your code.
77:34 - Both of the case labels 100 and 200 are now paired with the switch section
77:39 - that sets the title to the string value Senior Associate.
77:46 - Part 5, Module 1, Unit 6, Guided Project
77:51 - So let's skip to Part 5, Create methods in C-sharp console applications.
77:56 - Get started with C-sharp Part 5, Module 1, Write your first C-sharp method.
78:02 - The C-sharp programming language allows you to create all sorts of robust applications.
78:07 - Suppose you want to write to perform operations on unpredictable user input.
78:12 - You may want to add logic to handle incorrect input, convert input into a workable format and perform the correct operation.
78:22 - As your applications grow larger in size, keeping track of your code can quickly become a challenge.
78:30 - Methods, also called functions, are a key part of keeping code structured, efficient and readable.
78:37 - A method is a modular unit of code and a fundamental programming concept.
78:42 - A method is often designed to perform a specific task and contains code to execute that task.
78:50 - The name of a method should clearly reflect its task, which improves code readability.
78:56 - Learning how to use methods will help you build feature-rich applications more quickly.
79:02 - In this module, you'll learn to create your own methods to perform specific tasks.
79:07 - You'll learn how methods can simplify and shorten code, as well as keep things organized and easy to find.
79:16 - So let's skip to Unit 6.
79:19 - In Unit 6 of this module, we are presented with a code challenge, where we learn, among other concepts, to reuse a method in code.
79:28 - Exercise, complete the challenge to create a reusable method.
79:33 - Code challenges reinforce what you've learned and help you gain some confidence before continuing on.
79:40 - The focus of this challenge is to modify code so that it is reusable and can be executed at any time.
79:48 - Tell a fortune.
79:50 - You are helping to develop a massive multiplayer role-playing game.
79:55 - Each player has a luck stat that can affect their odds of finding rare treasure.
80:02 - Each day, a player can speak to an in-game fortune teller that reveals whether their luck stat is high, low or neutral.
80:10 - The game currently has code to generate a player's fortune, but it isn't reusable.
80:16 - Your task is to create a tell fortune method that can be called at any time and replace the existing logic with a call to your method.
80:26 - In this challenge, you are given some starting code.
80:30 - You must decide how to create and call the tell fortune method.
80:36 - Then we are presented with the details of how to create the code solution for the relevant challenge here.
80:43 - To get started with this code challenge, we are instructed to copy this code and paste the code into our program.cs file.
80:58 - Codes challenge, create a reusable method.
81:02 - In the code that you started with, there's a generic text array, followed by good, bad and neutral text arrays.
81:11 - Depending on the value of luck, one of the arrays is selected and displayed alongside the generic text.
81:19 - Your challenge is to create a reusable method that prints a player's fortune at any time.
81:26 - The method should contain the logic that is already present in the code provided.
81:31 - Update the code to use a method to display the fortune.
81:48 - Use what you've learned about creating and calling methods to complete the update.
82:18 - Test your code by changing the value of luck and calling the method again.
82:47 - Verify that your code produces one of the following messages.
83:15 - Whether you get stuck and need to peek at the solution or you finished successfully, continue on to view a solution to this challenge.
83:37 - Let's press the continue button to compare our code with the solution in this challenge provided on the Microsoft Learn platform.
83:46 - Excellent!
83:48 - So, in this code exercise, we are instructed to write code to call a block of code once, i.e. the code we have wrapped, if you like, in the TUL fortune method.
83:59 - Then change the value of the luck variable and then call the relevant block of code now wrapped in the TUL fortune method a second time.
84:08 - So, by using a method to wrap the relevant code block, we can call this code block twice simply by typing in the method name followed by opening and closing brackets and then a semicolon of course, twice in our code like this.
84:23 - Through the use of a method, not only have we appropriately addressed the requirement for this code challenge, we have created cleaner code, code that is easier to maintain and easier to read.
84:38 - Once we have written and run our code, we can then check the output of our application against the expected output provided by Microsoft Learn to confirm that we have implemented our code correctly.
84:51 - We can also compare our code solution to the one provided on the Microsoft Learn platform.
84:58 - In this code exercise, we are applying a lot of different C-sharp concepts.
85:02 - For example, along with appropriately wrapping a block of code in a method so that it becomes one unit of code, if you like, this code includes randomization functionality,
85:12 - one-dimensional string arrays, conditional logic implemented using a ternary operator and a nested ternary operator for conditionally, setting the value of a variable, a for loop, as well as string interpolation.
85:26 - So, by going through all of the course material, you'll learn about foundational C-sharp concepts such as these and much more.
85:36 - So, now I have completed all six parts of the course material and I've just qualified to take the certification exam.
85:44 - So, this is me actually taking the exam.
86:14 - Thank you.
86:44 - So, how did I do?
86:55 - Oh no, I got one wrong. After telling you at the beginning of this video that I have over 20 years of experience, it's all a bit embarrassing that I actually got one of the questions wrong.
87:08 - Okay, it just goes to show even experienced C-sharp developers should periodically refresh their knowledge of the foundational C-sharp concepts.
87:20 - Oh well, I did pass the certification exam, so I can now claim my certificate. Excellent.
87:33 - So, once you have completed this certification, you can further your education in C-sharp and.NET by going through the great content at these URLs.
88:03 - Thank you.
88:32 - Thank you.
89:02 - I cannot stress enough how valuable this certification is.
89:30 - I really wish I'd had resources and free certifications like this available to me when I was first getting started on my journey as a developer.
89:40 - As an experienced C-sharp and.NET developer, I highly recommend going through the process of earning your foundational C-sharp with Microsoft Developer certificate. You can do it.
89:54 - Thank you, and take care.

Cleaned transcript:

freeCodeCamp has teamed up with Microsoft to bring you a new free professional certification and course, the Foundational CSharp Certification. The course is a textbased course, not a video course. This professional certification includes 35 hours of textbased training and interactive coding challenges all from Microsoft, and also an online certification exam by FreeCodeCamp. By the end of this process, you'll have earned your very own verified certification that you can add to your resume, LinkedIn, or CV. In this video, freeCodeCamp team member Gavin Lon will preview the course, along with telling you everything you need to do to take this free course and earned certification. I'm really excited to introduce you to this new certification, offered to you through a collaboration between Microsoft and FreeCodeCamp. This certification is named Foundational CSharp with Microsoft Certification. You can earn this certificate online, free of charge. Hi and welcome. I'm Gavin Lahn. I've been a software engineer for over 20 years and an instructor for over five years. I run my own YouTube channel, mostly dedicated to providing an educational resource to.NET and CSharp developers, and those that aspire to become CSharp and.NET developers. With a great knowledge of the CSharp programming language, you can create many diverse types of applications on a diverse array of devices and platforms. You can also create sophisticated games, and who knows, even start your own lucrative business. But you are in a far better position than when I was getting started. The qualifications that I earned were rather expensive to acquire back when I was an aspiring software engineer. You are in a position to acquire this certificate that will ensure that you have a foundational knowledge of the CSharp programming language without spending a cent. I'm going to show you how to do this in this video. Before we look at an overview of the process on how to earn your certificate, let's briefly discuss the many advantages of having a good knowledge of CSharp and.NET. According to many reputable sources, CSharp is consistently rated as one of the top five most popular programming languages. I've personally witnessed and experienced how.NET, which provides an environment in which your CSharp applications run, has evolved from being a sophisticated ecosystem that runs on Windows platforms to a diverse, modular, agile environment that enables your CSharp code to run on a diverse array of platforms. Since the release of.NET 5 at the end of 2020,.NET provides a unified platform that enables your CSharp applications to run on Windows, macOS, Linux, iOS, Android, and many more platforms. You can create sophisticated games using game engines like Unity, where you are also able to monetize your games. With CSharp and.NET, you can create desktop applications, web applications like, for example, spa applications that leverage the Blazor framework, or you can leverage the ASP.NET MVC framework or the ASP.NET Razor Pages framework for creating web applications. You can create IoT Internet of Things applications, machine learning applications, AI can easily be integrated into your CSharp applications. You can create crossplatform mobile applications using the.NET MAUI framework. You can create cloudnative applications. You can run your CSharp code within Docker containers. You can, for example, leverage the microservice architecture to create globally distributed applications in the cloud. So you are almost unlimited with regard to the types of applications you are able to create using.NET and CSharp, and your CSharp code can run on a multitude of diverse platforms. You are able to download and install the tools for creating CSharp applications like the .NET SDK software development kit and Visual Studio Code free of charge. So you are only limited by your imagination and your knowledge. The means of production is in your hands. I'm proud to have had three of my CSharp and.NET courses published on the Free Code Camp YouTube channel. When you are ready, you can go through the stepbystep process of creating a webbased shopping cart application using Blazor Web Assembly and.NET Web API by following the stepbystep instructions provided in this course. You can follow the stepbystep instructions to create a sales management application that leverages Blazor Server with Microsoft Identity Integration. In this course, I also show you how to leverage the Syncfusion components to create sophisticated UIs. You can take your CSharp coding skills to the next level by gaining an understanding of the more advanced features of the CSharp programming language by going through this advanced CSharp course. Okay, but before we leap into any of these three courses, let's first understand the foundational concepts of the CSharp programming language. The foundational CSharp with Microsoft certification is offered to you through a collaboration between Microsoft and Free Code Camp and provides you with a highly accessible way to gain uptodate central foundational knowledge of the CSharp programming language. Once you have gained the relevant foundational CSharp knowledge by traversing the comprehensive material provided on the Microsoft Learn platform, this qualifies you to take the certification exam. You take the exam on the Free Code Camp platform and once you have passed the exam, your certificate will be saved to your Free Code Camp profile. You will then be able to share this fantastic achievement publicly on the internet. You will not be charged at any point during this process. So how does this work? You start on the front page of the Free Code Camp platform, select the foundational CSharp with Microsoft certification item and simply follow the instructions. Basically, the process involves traversing the relevant course material provided to you on the Microsoft Learn platform. With each step, you'll be guided to the relevant content through instructions provided on the Free Code Camp platform. The course material is divided into six main parts that must be completed sequentially from one to six. Each part is divided into modules that you must complete sequentially until all of the modules have been completed. Once you have completed all of the modules for one of the six parts, you are awarded a trophy, which is denoted by a HTTP link that allows you to share your achievement publicly on the internet. Once you have earned all six trophies, meaning you have appropriately traversed all six parts of the relevant course material, you will be able to write the certification exam. Once you have passed the exam, you will be awarded your certificate. So how is your progress tracked across the Microsoft Learn platform and the Free Code Camp platform? Firstly, you must be logged into both platforms. Upon completion of each module, you will need to complete a challenge on the Free Code Camp platform. This challenge is denoted by a multiple choice question that you need to answer correctly before progressing to the next module. Once you have completed all of the modules for one of the six parts of the course material, your trophy must be saved to your Free Code Camp profile. Please note, this is how the process of saving your trophy, which is denoted by an appropriate HTTP link, is currently saved to your Free Code Camp profile. A more sophisticated way of linking your Microsoft Learn progress to your Free Code Camp profile is in the pipeline and may in fact be released by the time you start your journey toward earning your certificate. So this process may be different to the one depicted in this video. But please don't worry, comprehensive instructions in this regard will be provided on the Free Code Camp platform. Once you have saved all six trophies, you are then qualified to take the certification exam. Once you have passed the exam, which is made up of 80 multiple choice questions, you can then claim your certificate, which will be saved to your Free Code Camp profile. You will then be able to share your certificate publicly on the internet. I actually took the exam myself and recorded the process, so stick around to the end of the video to find out how I did. So let's get started. We'll start by going through the units in Part 1, Module 1, step by step and in detail. So before you start going through the course material in order to qualify to take the foundational C Sharp with Microsoft Developer Certificate exam, you must be appropriately logged into the Free Code Camp platform and the Microsoft Learn platform. Let's navigate to this URL to access the Free Code Camp platform. So in order to see a list of all the free free Code Camp certifications, let's press the button labeled Get Started, It's Free. We are presented with a list of all of Free Code Camp's free certifications. So let's find the list item labeled Foundational C Sharp with Microsoft Certification. And there it is. So let's select this item to get started on the path to attaining the Foundational C Sharp with Microsoft Developer Certificate. It's really simple to follow the path to attain this certification. The key is to follow the relevant instructions on the Free Code Camp platform and the Microsoft Learn platform as you progress. So we first get started with this process on the Free Code Camp platform. By the end of this course, you will have gained the practical skills and knowledge needed to confidently leverage C Sharp for building robust and scalable applications. So in order to start the first part of the course material, which is entitled Write Your First Code Using C Sharp, we can click this option denoting the first module in the list. This first module is entitled Write Your First C Sharp Code. There are six modules that we need to complete in order to earn a trophy for the first part of the course material. So let's click this link denoting the first module to get started. So we are presented with our first challenge immediately on the Free Code Camp platform. But we need to go through the relevant course material on the Microsoft Learn platform before we address this challenge, which is a multiple choice question. So let's first read through the instructions. Write Your First C Sharp Code. This challenge will be partially completed on Microsoft's Learn platform. Follow these instructions to complete the challenge. Go to this URL and complete all the tasks of the Write Your First C Sharp Code module. This is required to earn the Write Your First Code Using C Sharp trophy. When you are finished, come back and correctly answer the question below. So this link here denotes the location of the relevant Microsoft Learn material that we need to appropriately traverse. Navigating to the URL denoted by this link will load the course material for the first module on the Microsoft Learn platform into your browser. I recommend using the relevant Free Code Camp webpage loaded in the first tab of your browser and then the relevant Microsoft Learn webpage loaded in a tab to the immediate right of the tab containing the relevant Free Code Camp webpage. So if you are set up appropriately, you can click the link here and this will automatically add a new tab next to the tab containing the Free Code Camp webpage and load the relevant Microsoft Learn webpage into the new tab. You can of course simply add a new tab manually and copy and paste the relevant URL denoted by this link into the new tabs address bar in order to load the relevant Microsoft Learn webpage. Just as long as you have the appropriate Free Code Camp webpage and the appropriate Microsoft webpage loaded in tabs adjacent to one another, you are in a good position to progress. Of course at this stage, you should also be appropriately logged into Free Code Camp and Microsoft Learn. So let's traverse the content for part one, module one. Part one, write your first code using C sharp. Get started with C sharp part one. Module one, write your first C sharp code. Get started by writing code examples to learn the basics of the C sharp syntax. Learning objectives. After you complete this module, you'll be able to write your first lines of C sharp code, use two different techniques to print a message to a text console, diagnose errors when you type code incorrectly, identify different C sharp syntax elements like operators, classes and methods. You can see this module is made up of seven units and here are the headings for the seven units that make up this module. So let's press the start button and progress through the units in this module. You can see here at the top the unit number we are on, the current unit if you like, and the total number of units contained in this module. So we're on unit one and the total number of units in this module is seven. And we could use these arrows to navigate in a forward direction through the units and we can also navigate backwards through the relevant units. But we need to traverse these units in sequence one after the other. Let's go into this in more detail. So let's read through the first unit which contains content for introducing us to the module entitled write your first C sharp code. Introduction. The C sharp programming language allows you to build many types of applications like business applications to capture, analyze and process data, dynamic web applications that can be accessed from a web browser, games both 2D and 3D, financial and scientific applications, cloud based applications, mobile applications. But how do you begin to write an application? Applications are all made up of many lines of code that work together to achieve a task. By far the best way to learn how to code is to write code. It's encouraged that you write code along with the exercises in this module and the others in this learning path. Writing code yourself in each exercise and solving small code challenges will accelerate your learning. You'll also begin learning small foundational concepts and build on them with continual practice and exploration. In this module you'll write your first lines of C sharp code. Use two different techniques to print a message as output. Diagnose errors when code is incorrect. Identify different C sharp syntax elements like operators, classes and methods. By the end of this module you'll be able to write C sharp code to print a message to the standard output of a console like the Windows terminal. These lines of code will give you your first look at the C sharp syntax and immediately provide invaluable insights. So to progress to the next unit in this module we can press the continue button here. Exercise. Write your first code. In this first handson exercise you'll use C sharp to print a hallowed programmer's phrase to the standard output of a console. You can see here is where we can write and run our C sharp code. So in this module we'll use this basic editor to write the code for the relevant exercises. When we follow the first module in the subsequent part, the second part of the overall course material, we'll install Visual Studio Code and we'll run Visual Studio Code locally and we'll write the code for subsequent exercises and challenges using Visual Studio Code. When we follow the first module in the second part of the course material, we'll also install the.NET SDK so that we can use this.NET SDK to build and run our code. For this module and the other modules in this part of this exam preparation course material if you like, we'll use this in browser editor so let's continue. Write your first line of code. There's a longstanding tradition among software developers to print the phrase hello world to the console output window. As you'll experience you can learn a lot about programming and the C sharp programming language from this simple exercise. Enter code into the.NET editor. The.NET editor and output console provide a great in browser experience that's perfect for this tutorial approach. The.NET editor is located on the righthand side of this webpage. The output console is below it. Enter the code exactly as it appears into the.NET editor on the right. You'll see an explanation of how and why it works soon. But first you should experience it running and ensure you entered it correctly. So to do that you'll run your code. So we could simply copy the code to the in browser.NET editor here and run our code. But here we are being advised to write out the code ourselves rather than just copying and pasting the relevant code into the.NET editor. Note you might be tempted to select copy or run and skip all the keystrokes. However there are benefits to typing code yourself. Having the code yourself reinforces memory and understanding that will help you gain insights that you wouldn't get otherwise. So let's type out the code ourselves in the.NET editor. Great! Run your first code. Press the green button. The green run button performs two tasks. It compiles your code into an executable format that a computer can understand. It runs your compiled application and when written correctly will output hello world. Observe your results. In the output console observe the result of your code. You should get the following output. Excellent! What to do if you get an error message? Writing Csharp code is an exercise in precision. If you type just one character incorrectly you'll get an error message in the output area when you run the code. For example if you were to incorrectly enter a lowercase c in the word console like so you would get the following error message. The first part 1 comma 1 indicates the line and column where the error occurred. But what does this error message mean? Csharp is a case sensitive language meaning that the Csharp compiler considers the words console with a lowercase c and console with an uppercase c as different as the words cat and dog. Sometimes the error message can be quite misleading. You'll need to understand the true reason why the error exists and that comes through learning more about Csharp's syntax. Similarly if you use single quotation marks to surround the literal string hello world like so you would get the following error message. Again in line 1 character 19 points to the culprit. You can use the message as a clue as you investigate the problem. But what does the error message mean? What exactly is a character literal? Later you'll learn more about literals of various data types including character literals. For now be careful when you're entering code fortunately errors are never permanent you merely spot the error fix it and rerun your code. If you got an error when you ran your code take a moment to look at it closely examine each character and make sure you entered this line of code exactly. Note the code editor is constantly monitoring the code you write by performing precompilation to find potential errors. It will try to help you by adding red squiggly lines underlining the code that will produce an error. Learn mistakes new programmers make. Entering lowercase letters instead of the capitalized C and console or the letters capital W or capital L in right line. Entering a comma instead of a period between console and right line. Forgetting to use double quotation marks or using single quotation marks to surround the phrase hello world. Forgetting a semicolon at the end of the command. Each of these mistakes prevents your code from compiling successfully. The code editor highlights precompilation errors to help you easily identify and correct mistakes as you develop your code. You can think of it like a spell checker that helps you fix grammar or spelling errors in a document. Assuming you were successful in the previous steps let's continue display a new message. In this task you'll comment out the previous line of code then add new lines of code in the.NET editor to print a new message. Modify the code you wrote so that it's prefixed by a code comment using two forward slashes. You can create a code comment by prefixing a line of code with two forward slashes. This prefix instructs the compiler to ignore all the instructions on that line. Code comments are helpful when you're not ready to delete the code yet but you want to ignore it for now. You can also use code comments to add messages to yourself or others who may later read the code reminding you of what the code is doing. Add new lines of code to match the following code snippet. Press the green run button again. This time you should get the following output. Great. The difference between console.write and console.write line. The three new lines of code you added demonstrated the difference between the console.write line and console.write methods. To print an entire message to the output console you used the first technique console.write line. At the end of the line it added a line feed similar to how to create a new line of text by pressing enter or return. To print to the output console but without adding a new feed at the end you used the second technique console.write. So the next call to console.write prints another message to the same line. Congratulations on writing your first lines of code. Excellent. Okay. So we can now progress to the next unit by pressing this continue button. Learn how it works. To understand how your code works you need to step back and think about what a programming language is. Consider how your code communicates commands to the computer. What is a programming language? Programming languages like C sharp let you write instructions that you want the computer to carry out. Each programming language has its own syntax but after learning your first programming language and attempting to learn another one you'll quickly realize that they all share many similar concepts. A programming language's job is to allow a human to express their intent in a human readable and understandable way. The instructions you write in a programming language are called source code or just code. Software developers write code. At this point a developer can update and change the code but the computer can't understand the code. The code first must be compiled into a format that the computer can understand. What is compilation? A special program called a compiler converts your source code into a different format that the computer's central processing unit CPU can execute. When you used the green run button in the previous unit the code you wrote was first compiled then executed. Why does code need to be compiled? Although most programming languages seem cryptic at first they can be more easily understood by humans than the computer's preferred language. The CPU understands instructions that are expressed by turning thousands or millions of tiny switches either on or off. Compilers bridge these two worlds by translating your human readable instructions into a computer understandable set of instructions. What is syntax? The rules for writing Csharp code is called syntax. Just like human languages have rules regarding punctuation and sentence structure computer programming languages also have rules. Those rules define the keywords and operators of Csharp and how they are put together to form programs. When you wrote code into the.NET editor you may have noticed subtle changes to the color of different words and symbols. Syntax highlighting is a helpful feature that you'll begin to use to easily spot mistakes in your code that don't conform to the syntax rules of Csharp. How did your code work? Let's focus on the following line of code you wrote console dot write line hello world. When you ran your code you saw the message hello world was printed to the output console. When the phrase is surrounded by double quotation marks in your Csharp code it's called a literal string. In other words you literally wanted the characters HELLO and so on sent to the output. The console part is called a class. Classes own methods or you could say the methods live inside a class. To visit the method you must know which class it's in. For now think of a class as a way to represent an object. In this case all of the methods that operate on your output console are defined inside the console class. There's also a dot or period that separates the class name console and the method name write line. The period is the member access operator. In other words the dot is how you navigate from the class to one of its methods. The write line part is called a method. You can always spot a method because it has a set of parentheses after it. Each method has one job. The write line methods job is to write a line of data to the output console. The data that's printed is sent in between the opening and closing parentheses of an input parameter. Some methods need input parameters while others don't. But if you want to invoke a method you must always use the parentheses after the methods name the parentheses are known as the method invocation operator. Finally the semicolon is the end of statement operator. A statement is a complete instruction in C sharp. The semicolon tells the compiler that you finished entering the command. Don't worry if all of these ideas and terms don't make sense. For now all you need to remember is that if you want to print a message to the output console use console dot write line your message here like this capitalize console write and line use the correct punctuation because it has a special role in C sharp. If you make a mistake just spot it fix it and rerun. So here we have a tip to advise us on how to memorize the C sharp syntax. Create a cheat sheet for yourself until you've memorized certain key commands. Understand the flow of execution. It's important to understand the flow of execution. In other words your code instructions were executed in order one line at a time until there were no more instructions to execute. Some instructions will require the CPU to wait before it can continue. Other instructions can be used to change the flow of execution. Now let's test what we've learned. Each module features a simple challenge and if you get stuck you'll be supplied with a solution. In the next unit you'll get a chance to write some C sharp code on your own. Right so now we get the first knowledge check. So it's just a straightforward multiple choice question. What is the difference between console dot write and console dot write line? Is the answer console dot write prints the output on a new line? Console dot write line prints the output on a new line? Or is the answer console dot write line appends a new line after the output? So we know the answer is item three console dot write line appends a new line after the output but I want to demonstrate what happens if we choose an incorrect answer. So let's select option one which is clearly incorrect and press the check your answers button. So we are presented with a dialogue that contains the message congratulations you earned experience points for completing the knowledge check. On this dialogue we can either click the button labeled continue or the button labeled review answers. Just a reminder you should at this point be logged into Microsoft learn with your Microsoft account so that your progress is recorded as you progress through the relevant course material. At the end of each part of the course material when I say part please don't confuse this with a module each of the six parts contains multiple modules there are six parts overall. So once you have appropriately traversed all of the modules contained in a particular part you will earn a trophy which is denoted by a URL link that must be appropriately saved to your free code camp profile. We'll look at the details of how to do this at the appropriate point in this video. For now please be aware that you must be logged into Microsoft learn and free code camp so that your progress is appropriately recorded. This is so that once you have gone through all the course material your progress would have been recorded which will enable you to write the foundational C sharp with Microsoft certification exam on the free code camp platform. So let's choose to click the review answers button here so that we can see where we went wrong with our answer choice. I find it is often a good idea to go over my answers after each knowledge check to make sure that I've properly understood the relevant course material. So let's press the review answers button and Microsoft learn gives us feedback clarifying why our choice was incorrect. Microsoft learn provides us with clear reasons as to why the answer we chose is incorrect and why the correct answer should have been chosen. So it is often a good idea especially if you have chosen an incorrect answer to review your answers before progressing to the next unit in the module so as to ensure that you have gained the appropriate knowledge before progressing. Great, so let's move on to the next unit by clicking the continue button here. So here we are presented with a challenge. It is explained to us here that in order to complete this challenge we need to use a combination of both console dot write and console dot write line to produce this output. So please briefly pause the video, read through the provided instructions regarding this challenge and attempt to write the code to solve this challenge. Then I'll show you my solution to the challenge. Okay, so here's my solution to the challenge. Great, I'm getting the correct output. Let's review the solution provided by Microsoft learn so we can press the continue button to progress to the next unit where we'll be able to review the provided solution to the challenge. Okay, so the provided solution is slightly different to the one that I came up with but that's okay, both solutions are correct. This code is just one possible solution among many possible ways to achieve the same result. However, you should have used both the console dot write line and console dot write methods to produce the desired result. There is often more than one correct way to solve a coding challenge. Great. Okay, so we can now progress to the penultimate unit in this module, which is a knowledge check unit, which entails us taking a multiple choice test to test the knowledge we have just acquired. So let's click the continue button to progress and let's check our knowledge by taking this multiple choice test. So please read through each multiple choice question and with each question select one of the provided options you think correctly answers the question. Let's check our answers. Excellent. We have definitely learned something. So once the check your answers button is pressed, we are presented with a dialogue saying congratulations, you earned experience points for completing the knowledge check. So because we are appropriately logged into the Microsoft Learn platform, our progress is appropriately recorded. So this time, all of our answers are correct and we are happy that we have comprehended all the relevant course material. So this time, let's press the continue button on the dialogue in order to progress to the next unit. So at this last unit, we are presented with a summary of what we have learned by going through this module. We also have a button labeled unlock achievement. It is of course important that before you press this button that you read through this summary. So after reading the summary, if you press this button, we are presented with a dialogue that contains the message you did it. So this means we have completed the relevant module and our progress has been recorded in our Microsoft Learn profiles. So we can now press the continue button here. We are presented with three learning paths in this dialogue. We are going to continue with the second option here, write your first code using C sharp, get started with C sharp part one. But we don't need to click this link here. In the context of the foundational C sharp with Microsoft certification, we must follow the instructions on the free code camp webpage that should be loaded in the browser window on the left tab of our browsers. So after completing each module, the next step is to go back to the free code camp tab in your browser and pass the challenge which is a multiple choice question. So for clarity, what I like to do after completing a module is close down the Microsoft Learn tab before taking the relevant free code camp challenge. Then when we are on the free code camp tab, we can address the relevant challenge. So this multiple choice question which is our challenge is asking us what is the difference between console.write and console.write line. The possible answers are console.write prints the output on a new line, console.write line prints the output on a new line and console.write line appends a new line after the output. So we know after traversing and comprehending the relevant course material in the first module of the first part of this course material that option three is clearly the correct answer. So let's select option three and then click the check your answer button. A dialogue is then presented to us showing us our progress through part one of the course material. So the next step is to click the button labeled submit and go to next challenge. So let's do that. We are now presented with the next challenge on free code camp. This challenge pertains to part one module two and we have only at this stage traversed the course material for part one module one. So this challenge pertains to part one module two which is entitled store and retrieve data using literal and variable values in C sharp. Let's read the instructions here. This challenge will be partially completed on Microsoft Learn's platform. Follow these instructions to complete the challenge. Go to referring to a particular link and complete all the tasks for the store and retrieve data using literal and variable values in C sharp module. This is required to earn the right your first code using C sharp trophy. When you are finished, come back and correctly answer the question below. So we are being prompted to go through the course material before we complete the challenge on this page on free code camp. So let's open a new tab next to our free code camp tab and make sure the new tab is navigated to the URL denoted by this link here. So I'll appropriately open the new tab pointing to this appropriate location by clicking this link. Great. So we can now appropriately traverse the course material for part one module two, store and retrieve data using variable values in C sharp. So in preparation for the foundational C sharp with Microsoft developer certificate exam, you'll need to appropriately follow the relevant instructions as you progress through each unit in this module. This video is just an instructional guide and overview. So I won't go through this module in the depth that I went through for module one. So I'm going to speed through the units in module two to the final unit. Great. And then at the end of module two, we simply repeat the process of closing down the Microsoft Learn tab, taking the challenge on the free code camp webpage loaded into the free code camp tab and then load the next Microsoft Learn module. In this case, module three of part one into a tab next to the free code camp tab, a link to the location of module three is provided in the webpage loaded on the relevant free code camp tab in our browsers. We can then appropriately traverse the course material and module three, there are six modules in part one. So in order to prevent this video from being a 35 hour video, I'm going to fast forward through all of the remaining modules in this part right till the end of module six. Module six is entitled guided project calculate final GPA, where we'll earn a trophy for completing all the modules in part one of the relevant course material. Great. Thank you. you . . . . . . . So, we have now completed all of the modules. We are on the final unit of Module 6 of Part 1. Let's now press the Unlock Achievement button on this webpage. We are presented with a dialogue containing a message, You earned a trophy. So, we can now close down the Microsoft Learn tab and take the final challenge for Part 1 on the free CodeCam tab, like this. So, let's answer the relevant multiple choice question. Let's click the button labelled Submit and go to next challenge. So, we have completed the course material for Part 1, i.e. where we have traversed all 6 modules contained in Part 1 and have comprehended the relevant course material. And we have completed all of the free CodeCam challenges pertaining to all of the 6 modules in Part 1. So, the next step is to copy the link denoting the trophy that we have earned for completing Part 1 of the course material and paste the link into this text box labelled Microsoft Link on this free CodeCam webpage. We can then click the button labelled I have completed this challenge. Before we do this, let's read the instructions on the relevant free CodeCam webpage. Trophy, write your first code using Csharp. So, this is the title for Part 1 of the course material. Now that you have completed all the write your first code using Csharp modules on Microsoft's Learn platform, submit the URL to your trophy below. Follow these instructions to find your trophy URL. Go to and then there is a reference to a specific URL. Using a browser you are logged into Microsoft with, find the trophy for write your first code using Csharp and click the share icon next to it. Click the copy URL button, paste the URL into the input below. The URL should look similar to this. This trophy is required to qualify to take the certification exam. Great, so let's follow these instructions. So, first we must be appropriately logged into Microsoft Learn and Free CodeCam. We can click this link to locate our trophy. And you can see here, we have this panel if you like. Write your first code using Csharp. We can then click this button and click this item from the drop down list to copy the link that denotes our trophy to our clipboards. Let's go back to the Free CodeCam tab and copy the contents of our clipboards into the relevant text box labeled Microsoft link. And then click the button labeled I've completed this challenge. We are then presented with a dialog box showing us our progress. We can then click the button labeled submit and go to next challenge. We are presented with a page showing us all the course parts and modules that we need to appropriately traverse before writing the foundational Csharp with Microsoft Developer Certificate exam. So, we must follow the same basic pattern as we traverse the course material for part two, create and run simple Csharp console applications. Module one, which is entitled install and configure visual studio code. So, we are on part two module one. And in this part, we are going to install visual studio code on our local machines as well as the.NET SDK. Basically, this module contains instructions for installing visual studio code, a great tool that we can use for editing and debugging our code on our local machines. This module also contains instructions for installing the.NET SDK. SDK stands for software development kit, which is a tool we can use to build and run our code by typing relevant commands in the terminal window within visual studio code. This module also contains material that teaches us about visual studio code and the.NET SDK. So, basically, you need to progress through this module in much the same way as we progress through part one module one. So, we completed part one module one, and we fast forwarded through the other five modules to complete part one, and we are looking at part two module one. You will, of course, need to properly complete all the six modules in part one before getting to this point. But this video is intended to provide you with basic instructions. In the interest of time, we are not comprehensively covering all of the relevant course material in this video. You will, of course, need to cover all the course material and comprehend the relevant course material in order to qualify to take the certification exam on the free CodeCam platform, pass the exam, and attain your foundational Csharp with Microsoft Developer Certificate. So, you must go through all of the material in this module in order to progress to the next module. But in this video, I'm simply going to provide basic instructions, in my own words, on how to install visual studio code on your local machines, configure the Csharp dev kit extension for visual studio code, and install the.NET SDK. So, let's start part two module one. I'm not going to read through all of the reading material in this module, but in this part of the video, I'll demonstrate installing visual studio code and the.NET SDK. You will need to go through the material in this module for a detailed explanation of this process. Let's first see what Microsoft Learn says about visual studio code here. Visual studio code is a lightweight but powerful source code editor that runs on your desktop and is available for Windows, macOS, and Linux. It comes with builtin support for JavaScript, TypeScript, and Node.js, and has a rich ecosystem of extensions for other languages and runtimes, such as C++, Csharp, Java, Python, PHP, Go, and.NET. Right, let's install visual studio code. Firstly, let's navigate to this URL in our browsers, where we can download the appropriate version of visual studio code to our local machines. We can then go through the installation process, which is fairly straightforward. This Microsoft Learn module provides comprehensive installation instructions. So, let's navigate to this URL, and let's click this button to download the appropriate version of visual studio code. If you look at the items in this dropdown list, you can see that you are able to download a version of visual studio code that is appropriate to your operating system. I'm running Windows 11, so let's press the button to download visual studio code. Let's navigate to our downloads folder and run the relevant install file by doubleclicking on it. And it's a simple case of going through the installation process by following the instructions on the relevant dialogue. Once we have installed visual studio, we can fire it up and look at the relevant parts of the interface. A, the activity bar is the narrow vertical bar located on the far lefthand side of the window. The activity bar lets you switch between views, such as explorer or extension, and gives you other contextspecific indicators. B, the sidebar contains views that provide tools and resources. The sidebar views, such as explorer, are very helpful when you're working on a code project. C, the editor is the area used to edit your files. You can open as many editors as you like, side by side, vertically and horizontally. D, the panel area is used to display different panels below the editor region for output or debug information, errors and warnings, or an integrated terminal. E, the status bar is the horizontal bar along the bottom of the window that displays information about the opened project and the files you edit. F, the main menu is the menu interface at the top of the application window. The menu options enable you to save, edit and run your code, and much more. As you become more proficient with visual studio code, you'll be working in the screen areas described. To start out, however, the most important areas for you to remember are the activity bar, the sidebar, and the editor. The activity bar is where you select the activity you want to perform. The sidebar displays tools and options, and the editor displays the information that you edit, usually your code. In Unit 5 of this module, we have instructions for configuring visual studio code extensions. The extension that we are going to install will help us to develop, edit and debug Csharp code and visual studio code. So, one thing to note is that rather than install this Csharp extension, there's a more updated extension. We should install this updated extension, the Csharp devkit extension. This extension builds on top of the great Csharp language capabilities provided by the Csharp extension and enhances your Csharp environment by adding a set of powerful tools and utilities that integrate natively with VS code to help Csharp developers write debug and maintain their code faster and with fewer errors. Some of this new tooling includes, but is not limited to, Csharp project and solution management via an integrated solution explorer. Native testing environment to run and debug tests using the test explorer. Roslyn powered language service for best inclass Csharp language features such as code navigation, refactoring, semantic awareness and more. AI assisted development. So, let's install the Csharp devkit extension like this. Great! So, we have now installed visual studio code and installed the Csharp devkit extension so that we can effectively edit and debug our code. But we also need a tool that we can use to build and run our Csharp code. So, we are going to use the.NET SDK for this purpose. SDK stands for software development kit. The latest stable release at the time of creating this video of the.NET SDK is version 7. So, we can download and install the.NET SDK from this URL like this. Thank you. I'm not going to complete this installation because I already have a preview release of.NET 8 installed which is fine for running through the code examples that I'd like to go through in this video. But please complete this installation so that you have the appropriate version of the latest stable release of the.NET SDK installed on your local machine. For going through the code exercises, guided projects and challenges in this course material, I recommend installing the latest stable release of the.NET SDK which at the time of creating this video is version 7. So, once you have installed the.NET SDK, you can verify that you have installed the.NET SDK by typing.NETversion like this at your command prompt in the terminal window of visual studio code like this. My output confirms that I have.NET 8 Preview 6 installed. You are able to have multiple versions of.NET installed on your local machines. You are able to see what versions you have of.NET installed on your machines by running this command,.NETinfo. .NET is a crossplatform open source developer platform that can be used to develop different types of applications. It includes the software languages and code libraries used to develop.NET applications. You can write.NET applications in Csharp, Fsharp or Visual Basic. The.NET runtime is the code library that's required to run your Csharp applications. You may also see the.NET runtime referred to as the Common Language Runtime or CLR. The.NET runtime isn't required to write your code, but it's required to actually run your applications. The.NET Software Developer Kit SDK includes a commandline interface CLI that can be accessed from Visual Studio Code's integrated terminal. During this training, you use.NET CLI commands to create new console applications, build your project code and run your applications. For example, the following.NET CLI command will create a new console application in the specified folder location. So in order to create a.NET console application, you can type this command. .NET new consoleo.forward slash Csharp projects forward slash test project. So let's create a very basic.NET console project that we can open in Visual Studio Code. Firstly, create a directory on your local machine, i.e. where you'd like to store your Csharp code files for your Csharp project. So I'm going to create a folder named dev in my C drive for this purpose. Then open the directory you have just created within Visual Studio Code, like this. You'll notice that within the terminal window, your current directory is the one that you have just opened within Visual Studio Code. So to create a.NET console project, you can type this command within your terminal window like this and press the enter key. So.NET new consoleo.forward slash Csharp projects forward slash test project. So this command has created a Csharp projects folder and within the Csharp projects folder, a folder named test project. Notice that within the test project folder, we have a file named test project that has a.csproj extension. This file denotes the console project that we have just created. In the Explorer panel, expand the Csharp projects folder. You should see the test project folder and two files, a Csharp program file named program.cs and a Csharp project file named test project.csproj. The clr command uses the folder name when it creates a project named test project.csproj. The program.cs file is the file containing your Csharp code. In order to run the code for our Csharp project using the appropriate.NET CLI command, we need the test project directory to be our current directory. This is because the.csproj file resides in the test project directory. So let's make test project our current directory using the cd command. Let's edit our code in the program.cs file so that our application outputs hello Csharp rather than hello world. Before we build or run our code, we must first save our changes. So let's do that through the file menu like this. Before we run our code, let's first run the.NET build command to see if our code compiles. Great! Build succeeded! Then to run our code, let's type the.NET run command and press the enter key. Excellent! And that is an expected result. Hello Csharp is printed to the terminal window. Our application has run successfully. Module 3 of part 2. Okay, so let's skip to module 3 of part 2. So we are still on the same part, part 2, create and run simple Csharp console applications, get started with Csharp part 2. We are skipping to module 3, add decision logic to your code using if, else and else if statements in Csharp. You will of course need to properly traverse all of the preceding course material before you get to this point, but this part of the video is just to give you an idea of some of the practical code examples that you'll create at various points as you go through the relevant course material. Let's skip to unit 4 of this module and look at an overview of this code challenge. Challenge, improve renewal rate of subscriptions. You've been asked to add a feature to your company's software. The feature is intended to improve the renewal rate of subscriptions to the software. Your task is to display a renewal message when a user logs into the software system and is notified their subscription will soon end. You'll need to add a couple of decision statements to properly add branching logic to the application to satisfy the requirements. To create the initial code for this challenge, enter the following code. So let's do that. Review the business rules for this challenge. Rule 1, your code should only display one message. The message that your code displays will depend on the other five rules. For rules 2 to 6, the higher numbered rules, take precedence over the lower numbered rules. Rule 2, if the user's subscription will expire in 10 days or less, display the message your subscription will expire soon. Renew now. Rule 3, if the user's subscription will expire in 5 days or less, display the messages your subscription expires in underscore days. Renew now and save 10%. Note, be sure to replace the underscore character displayed in the message above with the value stored in the variable days until expiration when you construct your message output. Rule 4, if the user's subscription will expire in one day, display the messages your subscription expires within a day. Renew now and save 20%. Rule 5, if the user's subscription has expired, display the message your subscription has expired. Rule 6, if the user's subscription doesn't expire in 10 days or less, display nothing. Implement your solution using if statements. Your solution must use separate if and if else statements to implement the business rules. The if else statement can include multiple else if parts. Create an if else statement that displays a message about when the subscription will expire. Tip, use an else if to ensure each expiration rule is accounted for. Create a separate if statement that displays a discount offer. The business rules indicate when a discount should be offered. We are using the builtin.NET Random class to return a random value between 1 and 12. The generated random value denotes the number of days until a subscription expires. Based on the generated random value, our code makes a decision, as it were, using if else if conditional logic to output an appropriate message. And if relevant, set the discount percentage variable to an appropriate discount value. Note that string interpolation is used here to include the appropriate discount percentage value within the outputted message. For string interpolation to work, a $ symbol is included immediately before the relevant string literal. The variable value is contained within the string literal and wrapped in curly brackets. These rules are followed to implement string interpolation correctly using the Csharp language. So let's compare our code solution to the one provided in the Microsoft Learn course material. So to do this, let's press the Continue button. We can run our code by typing.NET RUN in the terminal window and pressing the Enter key. Great! Part 3 Module 3 At this point, I'm going to skip to Part 3, add logic to Csharp console applications, get started with Csharp Part 3. Module 3, branch the flow of code using the switch case construct in Csharp. And we're on Unit 2 of this module. A switch statement is a Csharp selection statement that provides an alternative to an ifelse ifelse branching construct. The switch statement provides advantages over an ifelse ifelse construct when evaluating a single value against a list of known matching values. Consider the following scenario. You're working on an application related to food nutrition. A section of the code deals with fruits. Your code includes a variable named fruit that's used to hold the name of the different types of fruit. You have a list of the 20 fruits that your application is focused on. You want to branch your code based on the value assigned to fruit. In this scenario, you can use a switch statement to create a separate branch for each type of fruit. Further down the page, we are guided through a coding exercise to help us understand switch statements. Let's go through the stepbystep instructions for this coding exercise. Ensure that you have Visual Studio Code open and Program.cs displayed in the Editor panel. Type the following code into the Visual Studio Code Editor. So let's do that. Basically, in this switch statement, you are evaluating the employeelevel variables value. In the case where the employeelevel variable equals 100, the title variable is set to junior associate. In the case where the employeelevel variable value is 200, the title variable is set to a string value of senior associate. In the case where the employeelevel variable is set to 300, the title variable is set to a value of manager. If the employee level variable value does not match any of these cases, the code within the default section is run and the title variable is set to Associate. On the Visual Studio Code file menu, select Save. The program.cs file must be saved before building or running the code. At the terminal command prompt, type.NET run and then press Enter. Note, if you see a message saying, couldn't find a project to run, ensure that the terminal command prompt displays the expected test project folder location. You should see the following output. Take a minute to review the switch statement that you entered. Notice that the switch statement defines a single code block that includes a list of switch sections. To the right of the switch keyword is a switch expression that's enclosed in parentheses. Notice the list of switch sections inside the code block. The switch code block contains a list of switch sections, each of which includes one or more switch labels. In addition, each switch section includes a statement list that will execute if the label is equal to the switch expression defined at the top of the switch statement. The switch expression is evaluated against the case labels from top to bottom until a value that is equal to the switch expression is found. If none of the labels are a match, the statement list for the default case will be executed. If no default is included, control is transferred to the endpoint of the switch statement. Each label must provide a value type that matches the type specified in the switch expression. Note the optional default label can appear at any position within the list of switch sections. However, most developers choose to put it last because it makes more sense logically to position default as the final option. Regardless of the position, the default section will be evaluated last. In our example, the switch expression is employee level. Each switch section has a single switch label, case or default. The matching switch section is defined by case 200 since employee level equals 200. Notice that each switch section is separated from the next. Only one switch section is allowed to be executed. This means the execution of a switch section is not permitted to fall through to the next switch section. The break keyword is one of several ways to end a switch section before it gets to the next section. If you forget the break keyword or optionally the return keyword, the compiler will generate an error. Change the level variable value to see how the switch statement evaluates it. To exercise the default case, let's change the employee's level by modifying the value assignment. So if we assign the value 201 to the employee level variable and we run the code, now when we run the code, you should see the more generic title used. Since the employee level doesn't match any labels, the default label is matched. Modify a switch section to include multiple labels. Suppose our company decided to give all level 100 employees the title Senior Associate, the same title as level 200 employees. As the developer, you decide to implement this by removing the first switch section belonging to label case 100 and instead allow both the case 100 and case 200 labels to execute the same switch section. Save your code file and then use Visual Studio Code to run your code. Enter.NET run from the terminal command prompt to run your code. Both of the case labels 100 and 200 are now paired with the switch section that sets the title to the string value Senior Associate. Part 5, Module 1, Unit 6, Guided Project So let's skip to Part 5, Create methods in Csharp console applications. Get started with Csharp Part 5, Module 1, Write your first Csharp method. The Csharp programming language allows you to create all sorts of robust applications. Suppose you want to write to perform operations on unpredictable user input. You may want to add logic to handle incorrect input, convert input into a workable format and perform the correct operation. As your applications grow larger in size, keeping track of your code can quickly become a challenge. Methods, also called functions, are a key part of keeping code structured, efficient and readable. A method is a modular unit of code and a fundamental programming concept. A method is often designed to perform a specific task and contains code to execute that task. The name of a method should clearly reflect its task, which improves code readability. Learning how to use methods will help you build featurerich applications more quickly. In this module, you'll learn to create your own methods to perform specific tasks. You'll learn how methods can simplify and shorten code, as well as keep things organized and easy to find. So let's skip to Unit 6. In Unit 6 of this module, we are presented with a code challenge, where we learn, among other concepts, to reuse a method in code. Exercise, complete the challenge to create a reusable method. Code challenges reinforce what you've learned and help you gain some confidence before continuing on. The focus of this challenge is to modify code so that it is reusable and can be executed at any time. Tell a fortune. You are helping to develop a massive multiplayer roleplaying game. Each player has a luck stat that can affect their odds of finding rare treasure. Each day, a player can speak to an ingame fortune teller that reveals whether their luck stat is high, low or neutral. The game currently has code to generate a player's fortune, but it isn't reusable. Your task is to create a tell fortune method that can be called at any time and replace the existing logic with a call to your method. In this challenge, you are given some starting code. You must decide how to create and call the tell fortune method. Then we are presented with the details of how to create the code solution for the relevant challenge here. To get started with this code challenge, we are instructed to copy this code and paste the code into our program.cs file. Codes challenge, create a reusable method. In the code that you started with, there's a generic text array, followed by good, bad and neutral text arrays. Depending on the value of luck, one of the arrays is selected and displayed alongside the generic text. Your challenge is to create a reusable method that prints a player's fortune at any time. The method should contain the logic that is already present in the code provided. Update the code to use a method to display the fortune. Use what you've learned about creating and calling methods to complete the update. Test your code by changing the value of luck and calling the method again. Verify that your code produces one of the following messages. Whether you get stuck and need to peek at the solution or you finished successfully, continue on to view a solution to this challenge. Let's press the continue button to compare our code with the solution in this challenge provided on the Microsoft Learn platform. Excellent! So, in this code exercise, we are instructed to write code to call a block of code once, i.e. the code we have wrapped, if you like, in the TUL fortune method. Then change the value of the luck variable and then call the relevant block of code now wrapped in the TUL fortune method a second time. So, by using a method to wrap the relevant code block, we can call this code block twice simply by typing in the method name followed by opening and closing brackets and then a semicolon of course, twice in our code like this. Through the use of a method, not only have we appropriately addressed the requirement for this code challenge, we have created cleaner code, code that is easier to maintain and easier to read. Once we have written and run our code, we can then check the output of our application against the expected output provided by Microsoft Learn to confirm that we have implemented our code correctly. We can also compare our code solution to the one provided on the Microsoft Learn platform. In this code exercise, we are applying a lot of different Csharp concepts. For example, along with appropriately wrapping a block of code in a method so that it becomes one unit of code, if you like, this code includes randomization functionality, onedimensional string arrays, conditional logic implemented using a ternary operator and a nested ternary operator for conditionally, setting the value of a variable, a for loop, as well as string interpolation. So, by going through all of the course material, you'll learn about foundational Csharp concepts such as these and much more. So, now I have completed all six parts of the course material and I've just qualified to take the certification exam. So, this is me actually taking the exam. Thank you. So, how did I do? Oh no, I got one wrong. After telling you at the beginning of this video that I have over 20 years of experience, it's all a bit embarrassing that I actually got one of the questions wrong. Okay, it just goes to show even experienced Csharp developers should periodically refresh their knowledge of the foundational Csharp concepts. Oh well, I did pass the certification exam, so I can now claim my certificate. Excellent. So, once you have completed this certification, you can further your education in Csharp and.NET by going through the great content at these URLs. Thank you. Thank you. I cannot stress enough how valuable this certification is. I really wish I'd had resources and free certifications like this available to me when I was first getting started on my journey as a developer. As an experienced Csharp and.NET developer, I highly recommend going through the process of earning your foundational Csharp with Microsoft Developer certificate. You can do it. Thank you, and take care.
