With timestamps:

00:00 - symbols
00:01 - symbols are a new data type in es6 a
00:04 - symbol is a unique and immutable data
00:06 - type they are tokens that may be used as
00:08 - unique ids you create symbols via the
00:10 - factory function symbol
00:15 - just like that you can also create
00:17 - symbols with a text inside the
00:19 - parentheses a string
00:24 - the only purpose of the string inside
00:27 - the parentheses there is just to
00:28 - identify the symbol
00:31 - another thing interesting about symbols
00:33 - is that they are always unique for
00:36 - instance if we do
00:42 - and if we run that
00:44 - it's going to be false but also if we
00:47 - put symbol
00:49 - 2 so you can see they both have the name
00:51 - symbol 2 and we run that again
00:53 - and it's still going to be false
00:56 - symbols are always unique they never
00:58 - equal each other no matter what
01:01 - and if we check the type of the symbol
01:03 - it's always symbol
01:05 - see
01:06 - another thing interesting about symbols
01:08 - is that if you try to convert a symbol
01:11 - to a string always throws an exception
01:14 - so if you do
01:20 - if you just try to add a string with a
01:22 - symbol it's gonna throw a type error
01:25 - not get an error you would actually have
01:27 - to explicitly convert that to a string
01:31 - and
01:34 - now you can see symbol colon symbol 12
01:37 - and it's all this is how it looks when
01:39 - it gets converted to a string
01:41 - there are two main use cases i want to
01:43 - talk about symbols are mainly used as
01:46 - unique property keys because a symbol
01:48 - never clashes with any other property
01:50 - either a symbol or a string
01:52 - so if you look at this use case one
01:54 - symbols is property keys you can see the
01:56 - cons my key equals symbols created and
01:59 - let object just uh creating an object
02:01 - and then if you add the key to the
02:04 - object then if you just console.log
02:07 - the key in the object we just run that
02:10 - you will see
02:11 - one two three and it's always going to
02:13 - be unique
02:15 - another use case is the constants
02:18 - representing concepts
02:20 - so if you create constants for all these
02:22 - different colors
02:24 - then you can use these constants in your
02:26 - code
02:27 - so every time you call symbol red a new
02:31 - symbol is created so one symbol red is
02:33 - not the same as another symbol red
02:35 - therefore color red
02:37 - this color red can never be mistaken
02:40 - for another value
02:42 - and that would be different if it were
02:44 - the string red the string red could be
02:46 - mistaken for another value but this
02:47 - color is every time you put color red
02:49 - it's not going to be the same as a
02:51 - variable that's just equal to red as a
02:53 - string thanks for watching my name is
02:55 - beau carnes check the description for
02:57 - links to more information about symbols
02:59 - don't forget to subscribe and remember
03:00 - and remember use your code for good

Cleaned transcript:

symbols symbols are a new data type in es6 a symbol is a unique and immutable data type they are tokens that may be used as unique ids you create symbols via the factory function symbol just like that you can also create symbols with a text inside the parentheses a string the only purpose of the string inside the parentheses there is just to identify the symbol another thing interesting about symbols is that they are always unique for instance if we do and if we run that it's going to be false but also if we put symbol 2 so you can see they both have the name symbol 2 and we run that again and it's still going to be false symbols are always unique they never equal each other no matter what and if we check the type of the symbol it's always symbol see another thing interesting about symbols is that if you try to convert a symbol to a string always throws an exception so if you do if you just try to add a string with a symbol it's gonna throw a type error not get an error you would actually have to explicitly convert that to a string and now you can see symbol colon symbol 12 and it's all this is how it looks when it gets converted to a string there are two main use cases i want to talk about symbols are mainly used as unique property keys because a symbol never clashes with any other property either a symbol or a string so if you look at this use case one symbols is property keys you can see the cons my key equals symbols created and let object just uh creating an object and then if you add the key to the object then if you just console.log the key in the object we just run that you will see one two three and it's always going to be unique another use case is the constants representing concepts so if you create constants for all these different colors then you can use these constants in your code so every time you call symbol red a new symbol is created so one symbol red is not the same as another symbol red therefore color red this color red can never be mistaken for another value and that would be different if it were the string red the string red could be mistaken for another value but this color is every time you put color red it's not going to be the same as a variable that's just equal to red as a string thanks for watching my name is beau carnes check the description for links to more information about symbols don't forget to subscribe and remember and remember use your code for good
